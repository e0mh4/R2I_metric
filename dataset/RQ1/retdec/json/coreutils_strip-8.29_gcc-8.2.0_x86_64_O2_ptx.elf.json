{
    "funcInfo": [
        {
            "funcName": "function_401fd0",
            "funcStartAddr": "401fd0",
            "funcEndAddr": "401fd5",
            "decompiledFuncCode": "int64_t function_401fd0(void) {\n    // 0x401fd0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401fd5",
            "funcStartAddr": "401fd5",
            "funcEndAddr": "401fda",
            "decompiledFuncCode": "int64_t function_401fd5(void) {\n    // 0x401fd5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401fda",
            "funcStartAddr": "401fda",
            "funcEndAddr": "401fdf",
            "decompiledFuncCode": "int64_t function_401fda(void) {\n    // 0x401fda\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401fdf",
            "funcStartAddr": "401fdf",
            "funcEndAddr": "401fe4",
            "decompiledFuncCode": "int64_t function_401fdf(void) {\n    // 0x401fdf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401fe4",
            "funcStartAddr": "401fe4",
            "funcEndAddr": "401fe9",
            "decompiledFuncCode": "int64_t function_401fe4(void) {\n    // 0x401fe4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401fe9",
            "funcStartAddr": "401fe9",
            "funcEndAddr": "401fee",
            "decompiledFuncCode": "int64_t function_401fe9(void) {\n    // 0x401fe9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401fee",
            "funcStartAddr": "401fee",
            "funcEndAddr": "401ff3",
            "decompiledFuncCode": "int64_t function_401fee(void) {\n    // 0x401fee\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ff3",
            "funcStartAddr": "401ff3",
            "funcEndAddr": "401ff8",
            "decompiledFuncCode": "int64_t function_401ff3(void) {\n    // 0x401ff3\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ff8",
            "funcStartAddr": "401ff8",
            "funcEndAddr": "401ffd",
            "decompiledFuncCode": "int64_t function_401ff8(void) {\n    // 0x401ff8\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ffd",
            "funcStartAddr": "401ffd",
            "funcEndAddr": "402002",
            "decompiledFuncCode": "int64_t function_401ffd(void) {\n    // 0x401ffd\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402002",
            "funcStartAddr": "402002",
            "funcEndAddr": "402007",
            "decompiledFuncCode": "int64_t function_402002(void) {\n    // 0x402002\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402007",
            "funcStartAddr": "402007",
            "funcEndAddr": "40200c",
            "decompiledFuncCode": "int64_t function_402007(void) {\n    // 0x402007\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402010",
            "funcStartAddr": "402010",
            "funcEndAddr": "4045b0",
            "decompiledFuncCode": "int64_t function_402010(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 & 0xffffffff; // 0x402019\n    function_405b60(a2);\n    setlocale(LC_ALL, (char *)&g19);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x402010\n    function_41b410(0x4058c0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    int64_t v3; // bp-88, 0x402010\n    while (true) {\n      lab_0x402060_2:;\n        // 0x402060\n        int64_t v4; // 0x402010\n        int64_t v5 = v4;\n        int64_t v6 = function_40aad0(v1, a2, \"AF:GM:ORS:TW:b:i:fg:o:trw:\", &g8, 0, v5); // 0x402072\n        int32_t v7 = v6;\n        switch (v7) {\n            case -1: {\n                goto lab_0x40236c;\n            }\n            case 83: {\n                // 0x402310\n                g100 = (char *)function_404780((int64_t)g123);\n                // 0x402060\n                v4 = v5;\n                goto lab_0x402060_2;\n            }\n            default: {\n                int64_t v8; // 0x402010\n                if (v7 > 83) {\n                    if (v7 == 103) {\n                        // 0x4022a0\n                        if ((int32_t)function_409470((int64_t)g123, 0, 0, &v3, 0) != 0) {\n                            goto lab_0x404539_2;\n                        }\n                        // 0x4022c0\n                        if (v3 < 1) {\n                            goto lab_0x404539_2;\n                        }\n                        // 0x4022ce\n                        g32 = v3;\n                        v8 = v5;\n                    } else {\n                        if (v7 > 103) {\n                            if (v7 == 114) {\n                                // 0x402360\n                                *(char *)&g108 = 1;\n                                v8 = v5;\n                            } else {\n                                if (v7 > 114) {\n                                    // 0x402198\n                                    v8 = v5;\n                                    if (v7 != 116) {\n                                        if (v7 != 119) {\n                                            // 0x402d17\n                                            function_405120(1);\n                                            // UNREACHABLE\n                                        }\n                                        int32_t v9 = g123; // 0x4021aa\n                                        int64_t v10 = function_409470((int64_t)v9, 0, 0, &v3, 0); // 0x4021bd\n                                        char * format; // 0x404588\n                                        if ((int32_t)v10 != 0) {\n                                            uint32_t v11 = g123; // 0x40456d\n                                            function_408350((int64_t)v11);\n                                            format = dcgettext(NULL, \"invalid line width: %s\", 5);\n                                            error(1, (int32_t)\"invalid line width: %s\" ^ (int32_t)\"invalid line width: %s\", format);\n                                            return &g127;\n                                        }\n                                        int64_t v12 = v3; // 0x4021ca\n                                        if (v12 < 1) {\n                                          lab_0x40456d:\n                                            // 0x40456d\n                                            function_408350((int64_t)g123);\n                                            format = dcgettext(NULL, \"invalid line width: %s\", 5);\n                                            error(1, (int32_t)\"invalid line width: %s\" ^ (int32_t)\"invalid line width: %s\", format);\n                                            return &g127;\n                                        }\n                                        // 0x4021d8\n                                        g33 = v12;\n                                        v8 = v5;\n                                    }\n                                } else {\n                                    if (v7 != 105) {\n                                        if (v7 != 111) {\n                                            // 0x402d17\n                                            function_405120(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x4020f9\n                                        g103 = g123;\n                                        v8 = v5;\n                                    } else {\n                                        // 0x4020ae\n                                        g102 = g123;\n                                        v8 = v5;\n                                    }\n                                }\n                            }\n                        } else {\n                            if (v7 == 87) {\n                                int64_t v13 = function_404780((int64_t)g123); // 0x4022e7\n                                g98 = v13;\n                                g98 = *(char *)v13 != 0 ? v13 : 0;\n                                v8 = v5;\n                            } else {\n                                if (v7 > 87) {\n                                    if (v7 != 98) {\n                                        if (v7 != 102) {\n                                            // 0x402d17\n                                            function_405120(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x402279\n                                        g105 = 1;\n                                        v8 = v5;\n                                    } else {\n                                        // 0x4021fc\n                                        g104 = g123;\n                                        v8 = v5;\n                                    }\n                                } else {\n                                    if (v7 != 84) {\n                                        // 0x402d17\n                                        function_405120(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x402291\n                                    g106 = 3;\n                                    v8 = v5;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    if (v7 == 70) {\n                        int64_t v14 = function_404780((int64_t)g123); // 0x40234f\n                        *(int64_t *)&g31 = v14;\n                        v8 = v5;\n                    } else {\n                        if (v7 > 70) {\n                            if (v7 == 77) {\n                                // 0x402330\n                                *(int64_t *)&g30 = (int64_t)g123;\n                                v8 = v5;\n                            } else {\n                                if (v7 > 77) {\n                                    if (v7 != 79) {\n                                        if (v7 != 82) {\n                                            // 0x402d17\n                                            function_405120(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x402119\n                                        g107 = 1;\n                                        v8 = v5;\n                                    } else {\n                                        // 0x4020db\n                                        g106 = 2;\n                                        v8 = v5;\n                                    }\n                                } else {\n                                    if (v7 != 71) {\n                                        // 0x402d17\n                                        function_405120(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x402131\n                                    g34 = 0;\n                                    v8 = v5;\n                                }\n                            }\n                        } else {\n                            if (v7 == -130) {\n                                // 0x4044b3\n                                function_405120(0);\n                                // UNREACHABLE\n                            }\n                            if (v7 <= 0xffffff7e) {\n                                if (v7 == -131) {\n                                    int64_t v15 = function_406550(\"F. Pinard\", &g3); // 0x40223d\n                                    function_409020((int64_t)g48, \"ptx\", \"GNU coreutils\", (int64_t)g35, v15, 0);\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x402d17;\n                            }\n                            if (v7 != 10) {\n                                if (v7 != 65) {\n                                    // 0x402d17\n                                    function_405120(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x402219\n                                *(char *)&g109 = 1;\n                                v8 = v5;\n                            } else {\n                                int64_t v16 = g36; // 0x40216a\n                                int64_t v17 = function_4057e0(\"--format\", (int64_t)g123, g7, (int64_t *)&g6, 4, v16); // 0x40217d\n                                g106 = *(int32_t *)(4 * v17 + (int64_t)&g6);\n                                v8 = v16;\n                            }\n                        }\n                    }\n                }\n                // 0x402060\n                v4 = v8;\n                goto lab_0x402060_2;\n            }\n        }\n    }\n  lab_0x40236c:;\n    uint32_t v18 = *(int32_t *)0x62335c; // 0x40236c\n    int64_t v19; // 0x402010\n    int64_t v20; // 0x402010\n    int64_t v21; // 0x402010\n    int64_t v22; // 0x402010\n    int64_t v23; // 0x402010\n    int64_t v24; // 0x402453\n    int64_t v25; // 0x40245c\n    int64_t v26; // 0x402010\n    if (v18 == (int32_t)a1) {\n        // 0x403197\n        g80 = function_409160(8);\n        g79 = function_409160(8);\n        int64_t v27 = function_409160(16); // 0x4031be\n        *(int32_t *)&g82 = 1;\n        g78 = v27;\n        *(int64_t *)g80 = 0;\n        v22 = v1;\n        goto lab_0x4024b4_2;\n    } else {\n        // 0x40237a\n        if (g34 == 0) {\n            // 0x402c31\n            *(int32_t *)&g82 = 1;\n            g80 = function_409160(8);\n            g79 = function_409160(8);\n            g78 = function_409160(16);\n            v23 = 8 * (int64_t)*(int32_t *)&g45 + a2;\n            int64_t v28 = *(int64_t *)v23; // 0x402c75\n            char * str = (char *)v28; // 0x402c84\n            if (*str != 0) {\n                // 0x4032f6\n                if (strcmp(str, \"-\") == 0) {\n                    // 0x402c8f\n                    *(int64_t *)g80 = 0;\n                    goto lab_0x402c9d;\n                } else {\n                    // 0x40330b\n                    *(int64_t *)g80 = v28;\n                    goto lab_0x402c9d;\n                }\n            } else {\n                // 0x402c8f\n                *(int64_t *)g80 = 0;\n                goto lab_0x402c9d;\n            }\n        } else {\n            int64_t v29 = v1 - (int64_t)v18; // 0x402387\n            int32_t v30 = v29;\n            *(int32_t *)&g82 = v30;\n            if (v30 < 0) {\n                // 0x40305c\n                function_4093b0(v1);\n                // UNREACHABLE\n            }\n            int64_t v31 = 8 * v29 & 0x7fffffff8;\n            int64_t v32 = function_409160(v31); // 0x4023bd\n            int32_t v33 = *(int32_t *)&g82; // 0x4023c2\n            g80 = v32;\n            if (v33 < 0) {\n                // 0x40305c\n                function_4093b0(v31);\n                // UNREACHABLE\n            }\n            int64_t v34 = function_409160(8 * (int64_t)v33); // 0x4023f6\n            int32_t v35 = *(int32_t *)&g82; // 0x402400\n            int64_t v36 = v35; // 0x402400\n            g79 = v34;\n            if (v35 < 0 || v35 < 0) {\n                // 0x40305c\n                function_4093b0(v36);\n                // UNREACHABLE\n            }\n            int64_t v37 = function_409160(16 * v36); // 0x402430\n            uint32_t v38 = *(int32_t *)&g82; // 0x402435\n            g78 = v37;\n            v22 = 8;\n            if (v38 >= 1) {\n                int64_t v39 = (int64_t)*(int32_t *)&g45; // 0x402446\n                v24 = (int64_t)(v38 - 1) + 2 + v39;\n                v25 = -8 * v39 + g80;\n                v20 = &g46;\n                while (true) {\n                  lab_0x402490_2:\n                    // 0x402490\n                    v21 = v20;\n                    v26 = 8 * v21 - 8;\n                    int64_t v40 = *(int64_t *)(v26 + a2); // 0x402490\n                    char * str2 = (char *)v40; // 0x402495\n                    if (*str2 != 0) {\n                        // 0x40246b\n                        if (strcmp(str2, \"-\") == 0) {\n                            goto lab_0x40249c;\n                        } else {\n                            // 0x40247c\n                            *(int64_t *)(v26 + v25) = v40;\n                            *(int32_t *)&g45 = (int32_t)v21;\n                            int64_t v41 = v21 + 1; // 0x402487\n                            v19 = v41;\n                            v22 = v24;\n                            if (v24 == v41) {\n                                // break -> 0x4024b4\n                                break;\n                            }\n                            // 0x402490\n                            v20 = v19;\n                            goto lab_0x402490_2;\n                        }\n                    } else {\n                        goto lab_0x40249c;\n                    }\n                }\n            }\n            goto lab_0x4024b4_2;\n        }\n    }\n  lab_0x404539_2:\n    // 0x404539\n    function_408350((int64_t)g123);\n    error(1, (int32_t)\"invalid gap width: %s\" ^ (int32_t)\"invalid gap width: %s\", dcgettext(NULL, \"invalid gap width: %s\", 5));\n    goto lab_0x40456d;\n  lab_0x4028a1:;\n    int128_t v42 = __asm_movdqa((int128_t)v3); // 0x4028a4\n    int64_t v43; // 0x402010\n    g75 = (int32_t)v43 + 1;\n    int64_t v44; // 0x402010\n    uint64_t v45; // 0x402010\n    int64_t v46; // 0x40285f\n    *(int64_t *)(v46 + 16) = v44 - v45;\n    __asm_movups(*(int128_t *)v46, v42);\n    int64_t v47; // 0x402010\n    *(int64_t *)(v46 + 24) = v47 - v45;\n    int32_t v48; // 0x402010\n    *(int32_t *)(v46 + 40) = v48;\n    int32_t v49; // 0x402010\n    int32_t v50 = v49; // 0x4028d0\n    int64_t v51 = g98; // 0x4028d0\n    int64_t v52 = v44; // 0x4028d0\n    int64_t v53; // 0x402010\n    int64_t v54 = v53; // 0x4028d0\n    int64_t v55; // 0x402010\n    int64_t v56 = v55; // 0x4028d0\n    int64_t v57; // 0x402010\n    int64_t v58 = v57; // 0x4028d0\n    goto lab_0x4028d7;\n  lab_0x402e36:;\n    // 0x402e36\n    int64_t v162; // 0x402010\n    int64_t v705 = v162;\n    int64_t v161; // 0x402010\n    int64_t v706 = v161;\n    int64_t v160; // 0x402010\n    int64_t v707 = v160;\n    int64_t v176 = v707; // 0x402e39\n    int64_t v177 = v706; // 0x402e39\n    int64_t v178 = v705; // 0x402e39\n    int64_t v159; // 0x402e46\n    int64_t v179 = v159; // 0x402e39\n    int64_t v180 = v707; // 0x402e39\n    int64_t v181 = v706; // 0x402e39\n    if (v159 >= v45) {\n        // break -> 0x402ed0\n        goto lab_0x402ed0;\n    }\n    goto lab_0x402e3f;\n  lab_0x402e3f:;\n    int64_t v708 = v179;\n    int64_t v709 = v178;\n    int64_t v710 = v177;\n    int64_t v711 = v176;\n    int64_t v157 = v711; // 0x402e3f\n    int64_t v155 = v709; // 0x402e3f\n    int64_t v153 = v710; // 0x402e3f\n    int64_t v151 = v708; // 0x402e3f\n    goto lab_0x402e42;\n  lab_0x4030d4_2:;\n    // 0x4030d4\n    int64_t v74; // 0x402010\n    function_404750(v74);\n    int64_t v73; // 0x402010\n    int64_t v652 = v73; // 0x4030d4\n    goto lab_0x4030d9;\n  lab_0x4027aa:;\n    // 0x4027aa\n    int64_t v79; // 0x402010\n    v53 = v79;\n    int64_t v78; // 0x402010\n    v45 = v78;\n    v3 = v45;\n    int64_t v91 = v53 - v45; // 0x4027b2\n    int64_t v92 = v91; // bp-80, 0x4027bc\n    if (v91 > g88) {\n        // 0x4027c3\n        g88 = v91;\n    }\n    char v93 = *(char *)&g108; // 0x4027ca\n    int32_t v94 = v93; // 0x4027d1\n    int32_t v70; // 0x402010\n    int32_t v95 = v70; // 0x4027d7\n    int64_t v66; // 0x402010\n    int64_t v96 = v66; // 0x4027d7\n    int64_t v65; // 0x402010\n    int64_t v97 = v65; // 0x4027d7\n    int64_t v98; // 0x402010\n    int64_t v99; // 0x402010\n    int32_t v100; // 0x402010\n    int64_t * v101; // 0x402010\n    if (v93 != 0) {\n        int32_t v102 = v70; // 0x402f63\n        int64_t v103 = v66; // 0x402f63\n        int64_t v104 = v65; // 0x402f63\n        if (v65 < v45) {\n            int64_t v105 = v94 % 256;\n            int64_t v106 = v66;\n            int64_t v107 = v70;\n            int64_t v108 = g81;\n            int64_t v109 = v65; // 0x402010\n            int64_t v110 = v109 + 1; // 0x402f91\n            int64_t v111; // 0x402010\n            int64_t v112; // 0x402010\n            int64_t v113; // 0x402010\n            int64_t v114; // 0x402010\n            int64_t v115; // 0x402010\n            while (*(char *)v109 != 10) {\n                // 0x402f88\n                v109 = v110;\n                v114 = 0;\n                v113 = v108;\n                v115 = v107;\n                v111 = v106;\n                v112 = v110;\n                if (v110 >= v45) {\n                    // break (via goto) -> 0x403000\n                    goto lab_0x403000;\n                }\n                v110 = v109 + 1;\n            }\n            uint64_t v116 = *v101; // 0x402fa2\n            int64_t v117 = v110; // 0x402fa9\n            int64_t v118 = 0; // 0x402fa9\n            int64_t v119; // 0x402010\n            int64_t v120; // 0x402010\n            int16_t * v121; // 0x402fbe\n            unsigned char v122; // 0x402fd9\n            int64_t v123; // 0x402fd0\n            if (v116 > v110) {\n                // 0x402faf\n                v121 = *__ctype_b_loc();\n                v119 = v110;\n                v122 = *(char *)v119;\n                v120 = v119;\n                while ((*(char *)((int64_t)v121 + 1 + 2 * (int64_t)v122) & 32) == 0) {\n                    // 0x402fd0\n                    v123 = v119 + 1;\n                    v120 = v116;\n                    if (v123 == v116) {\n                        // break -> 0x402fe3\n                        break;\n                    }\n                    v119 = v123;\n                    v122 = *(char *)v119;\n                    v120 = v119;\n                }\n                // 0x402fe3\n                v117 = v120;\n                v118 = v117 - v110;\n            }\n            int64_t v124 = v108 + 1; // 0x402f9e\n            int64_t v125 = v118;\n            int64_t v126 = v117;\n            v114 = v105;\n            v113 = v124;\n            v115 = v125;\n            v111 = v110;\n            v112 = v126;\n            while (v126 < v45) {\n                // 0x402f8d\n                v106 = v110;\n                v107 = v125;\n                v108 = v124;\n                int64_t v127 = v105;\n                v109 = v126;\n                v110 = v109 + 1;\n                while (*(char *)v109 != 10) {\n                    // 0x402f88\n                    v109 = v110;\n                    v114 = v127;\n                    v113 = v108;\n                    v115 = v107;\n                    v111 = v106;\n                    v112 = v110;\n                    if (v110 >= v45) {\n                        // break (via goto) -> 0x403000\n                        goto lab_0x403000;\n                    }\n                    v110 = v109 + 1;\n                }\n                // 0x402f99\n                v116 = *v101;\n                v117 = v110;\n                v118 = 0;\n                if (v116 > v110) {\n                    // 0x402faf\n                    v121 = *__ctype_b_loc();\n                    v119 = v110;\n                    v122 = *(char *)v119;\n                    v120 = v119;\n                    while ((*(char *)((int64_t)v121 + 1 + 2 * (int64_t)v122) & 32) == 0) {\n                        // 0x402fd0\n                        v123 = v119 + 1;\n                        v120 = v116;\n                        if (v123 == v116) {\n                            // break -> 0x402fe3\n                            break;\n                        }\n                        v119 = v123;\n                        v122 = *(char *)v119;\n                        v120 = v119;\n                    }\n                    // 0x402fe3\n                    v117 = v120;\n                    v118 = v117 - v110;\n                }\n                // 0x402fe9\n                v124 = v108 + 1;\n                v125 = v118;\n                v126 = v117;\n                v114 = v105;\n                v113 = v124;\n                v115 = v125;\n                v111 = v110;\n                v112 = v126;\n            }\n          lab_0x403000:;\n            int64_t v128 = v112;\n            int64_t v129 = v111;\n            int32_t v130 = v115; // 0x403003\n            v102 = v130;\n            v103 = v129;\n            v104 = v128;\n            if ((char)v114 != 0) {\n                // 0x403015\n                g81 = v113;\n                v102 = v130;\n                v103 = v129;\n                v104 = v128;\n            }\n        }\n        // 0x40301c\n        v95 = v102;\n        v96 = v103;\n        v97 = v104;\n        v100 = v102;\n        v98 = v103;\n        v99 = v104;\n        if (v104 > v45) {\n            goto lab_0x403028;\n        } else {\n            goto lab_0x4027dd;\n        }\n    } else {\n        goto lab_0x4027dd;\n    }\n  lab_0x4028d7:;\n    int32_t v59 = v50; // 0x4028d7\n    int64_t v60 = v51; // 0x4028d7\n    int64_t v61 = v54; // 0x4028d7\n    int64_t v62 = v52; // 0x4028d7\n    int64_t v63 = v56; // 0x4028d7\n    int64_t v64 = v58; // 0x4028d7\n    goto lab_0x4028da;\n  lab_0x402d62:;\n    // 0x402d62\n    int64_t v84; // 0x402010\n    int64_t v87 = v84;\n    int64_t v88 = v87 + 1; // 0x402d62\n    v78 = v87;\n    v79 = v88;\n    int64_t v76; // 0x402010\n    int64_t v75; // 0x402010\n    while (v88 != v47) {\n        unsigned char v89 = *(char *)v88; // 0x402d50\n        v75 = v87;\n        v76 = v88;\n        int64_t v90 = v88; // 0x402d5c\n        if (*(char *)((int64_t)v89 + (int64_t)&g89) == 0) {\n            goto lab_0x4027a1;\n        }\n        v88 = v90 + 1;\n        v78 = v87;\n        v79 = v88;\n    }\n    goto lab_0x4027aa;\n  lab_0x402df7:\n    // 0x402df7\n    v50 = v70;\n    int64_t v80; // 0x402010\n    v51 = v80;\n    int64_t v67; // 0x402010\n    v52 = v67;\n    int64_t v81; // 0x402010\n    v54 = v81 + 1;\n    v56 = v66;\n    v58 = v65;\n    goto lab_0x4028d7;\n  lab_0x4027dd:;\n    int64_t v131 = v97;\n    int64_t v132 = v96;\n    v49 = v95;\n    if (g102 == 0) {\n        goto lab_0x402807;\n    } else {\n        int64_t v133 = function_404f00(&v3, g85, g86); // 0x4027fa\n        v100 = v49;\n        v98 = v132;\n        v99 = v131;\n        if ((char)v133 != 0) {\n            goto lab_0x403028;\n        } else {\n            goto lab_0x402807;\n        }\n    }\n  lab_0x403028:\n    // 0x403028\n    v50 = v100;\n    v51 = g98;\n    v52 = v67;\n    v54 = v53;\n    v56 = v98;\n    v58 = v99;\n    goto lab_0x4028d7;\n  lab_0x402807:\n    // 0x402807\n    if (g103 == 0) {\n        goto lab_0x402831;\n    } else {\n        int64_t v134 = function_404f00(&v3, g83, g84); // 0x402824\n        v100 = v49;\n        v98 = v132;\n        v99 = v131;\n        if ((char)v134 == 0) {\n            goto lab_0x403028;\n        } else {\n            goto lab_0x402831;\n        }\n    }\n  lab_0x402831:;\n    int32_t v135 = g75; // 0x402831\n    int64_t v136 = g77; // 0x40283f\n    int32_t v137 = v94; // 0x402849\n    int32_t v138 = v135; // 0x402849\n    int64_t v139 = v136; // 0x402849\n    int64_t v140; // 0x402010\n    int64_t v141; // 0x402010\n    int64_t v142; // 0x402010\n    if (v135 == g76) {\n        uint64_t v143 = (int64_t)g76; // 0x402838\n        if (v136 == 0) {\n            // 0x403038\n            v141 = 2;\n            v142 = 96;\n            if (v135 == 0) {\n                goto lab_0x402f2f;\n            } else {\n                uint128_t v144 = 48 * (int128_t)v143; // 0x403045\n                if ((int64_t)v144 < 0) {\n                    // 0x40305c\n                    function_4093b0(0);\n                    // UNREACHABLE\n                }\n                // 0x403053\n                v140 = v143;\n                if (v144 % 0x3f0000000000000001 != 0) {\n                    // 0x40305c\n                    function_4093b0(0);\n                    // UNREACHABLE\n                }\n                goto lab_0x402f27;\n            }\n        } else {\n            int64_t v145 = v136; // 0x402f16\n            if (v135 <= 0xffffffff) {\n                // 0x40305c\n                function_4093b0(v145);\n                // UNREACHABLE\n            }\n            // 0x402f1c\n            v140 = v143 + 1 + v143 / 2;\n            goto lab_0x402f27;\n        }\n    } else {\n        goto lab_0x40284f;\n    }\n  lab_0x40284f:;\n    int32_t v146 = v137;\n    int64_t v147 = v138;\n    v46 = 48 * v147 + v139;\n    int64_t v148; // 0x402010\n    int64_t v149; // 0x402010\n    if (*(char *)&g109 != 0) {\n        // 0x402e00\n        if (v131 < v45) {\n            while (true) {\n              lab_0x402e42:;\n                int64_t v150 = v151;\n                int64_t v152 = v153;\n                int64_t v154 = v155;\n                int64_t v156 = v157;\n                char v158 = *(char *)v150; // 0x402e42\n                v159 = v150 + 1;\n                v160 = v156;\n                v161 = v152;\n                v162 = v154;\n                if (v158 != 10) {\n                    goto lab_0x402e36;\n                } else {\n                    int64_t v163 = v152 + 1; // 0x402e51\n                    uint64_t v164 = *v101; // 0x402e55\n                    int64_t v165; // 0x402853\n                    v160 = v165;\n                    v161 = v163;\n                    v162 = v159;\n                    if (v164 > v159) {\n                        int16_t ** v166 = __ctype_b_loc(); // 0x402e83\n                        int16_t * v167 = *v166; // 0x402e92\n                        int64_t v168 = (int64_t)v167 + 1; // 0x402ebd\n                        int64_t v169 = v159; // 0x402ea9\n                        int64_t v170 = v169;\n                        unsigned char v171 = *(char *)v170; // 0x402eb9\n                        char v172 = *(char *)(v168 + 2 * (int64_t)v171); // 0x402ebd\n                        int64_t v173 = v170; // 0x402ec2\n                        while ((v172 & 32) == 0) {\n                            int64_t v174 = v170 + 1; // 0x402eb0\n                            v169 = v174;\n                            v173 = v164;\n                            if (v174 == v164) {\n                                // break -> 0x402ec4\n                                break;\n                            }\n                            v170 = v169;\n                            v171 = *(char *)v170;\n                            v172 = *(char *)(v168 + 2 * (int64_t)v171);\n                            v173 = v170;\n                        }\n                        int64_t v175 = v173;\n                        v176 = v165;\n                        v177 = v163;\n                        v178 = v159;\n                        v179 = v175;\n                        v180 = v165;\n                        v181 = v163;\n                        if (v175 >= v45) {\n                            // break -> 0x402ed0\n                            break;\n                        }\n                        goto lab_0x402e3f;\n                    } else {\n                        goto lab_0x402e36;\n                    }\n                }\n            }\n          lab_0x402ed0:;\n            int64_t v182 = v180;\n            if ((char)v182 != 0) {\n                int64_t v183 = v181;\n                g81 = v183;\n            }\n        }\n        // 0x402ef0\n        *(int64_t *)(v46 + 32) = g81;\n        v148 = v132;\n        v149 = v131;\n        goto lab_0x402891;\n    } else {\n        // 0x40286b\n        if ((char)v146 == 0) {\n            goto lab_0x4028a1;\n        } else {\n            // 0x402872\n            *(int64_t *)(v46 + 32) = v132 - v45;\n            int64_t v184 = v49; // 0x40287c\n            v148 = v132;\n            v149 = v131;\n            if (g87 < v184) {\n                // 0x40288a\n                g87 = v184;\n                v148 = v132;\n                v149 = v131;\n            }\n            goto lab_0x402891;\n        }\n    }\n  lab_0x402f2f:\n    // 0x402f2f\n    g76 = v141;\n    int64_t v185 = function_4091c0(v136, v142); // 0x402f36\n    g77 = v185;\n    v137 = (int32_t)*(char *)&g108;\n    v138 = g75;\n    v139 = v185;\n    goto lab_0x40284f;\n  lab_0x402f27:\n    // 0x402f27\n    v141 = v140;\n    v142 = 48 * v140;\n    goto lab_0x402f2f;\n  lab_0x402891:\n    // 0x402891\n    v57 = v149;\n    v55 = v148;\n    v43 = v147;\n    v44 = v67;\n    if (v55 == v67) {\n        // 0x402896\n        v43 = v147;\n        v44 = v67;\n        if (v67 < v47 && (char)v146 != 0) {\n            int16_t ** v186 = __ctype_b_loc(); // 0x402d83\n            int64_t v187 = 0x100000000000000 * v147 >> 56; // 0x402d88\n            int64_t v188 = (int64_t)*v186 + 1; // 0x402db2\n            int64_t v189 = v67;\n            while ((*(char *)(2 * (int64_t)*(char *)v189 + v188) & 32) == 0) {\n                int64_t v190 = v189 + 1; // 0x402da0\n                v43 = v187;\n                v44 = v47;\n                if (v190 == v47) {\n                    goto lab_0x4028a1;\n                }\n                v189 = v190;\n            }\n            // 0x402db9\n            v43 = v187;\n            v44 = v189;\n            int64_t v191 = v189; // 0x402dbc\n            if (v189 < v47) {\n                int64_t v192 = v191 + 1; // 0x402dc8\n                v43 = v187;\n                v44 = v47;\n                while (v192 != v47) {\n                    // 0x402dd5\n                    v43 = v187;\n                    v44 = v192;\n                    v191 = v192;\n                    if ((*(char *)(2 * (int64_t)*(char *)v192 + v188) & 32) == 0) {\n                        // break -> 0x4028a1\n                        break;\n                    }\n                    v192 = v191 + 1;\n                    v43 = v187;\n                    v44 = v47;\n                }\n            }\n        }\n    }\n    goto lab_0x4028a1;\n  lab_0x40271c:;\n    // 0x40271c\n    int64_t v193; // 0x402010\n    int64_t v194 = v193;\n    int16_t * v195 = *__ctype_b_loc(); // 0x402726\n    int64_t v196 = v194 - 1; // 0x402739\n    unsigned char v197 = *(char *)v196; // 0x402739\n    char v198 = *(char *)((int64_t)v195 + 1 + 2 * (int64_t)v197); // 0x40273d\n    int64_t v199 = v194; // 0x402742\n    int64_t v200 = v194; // 0x402742\n    int64_t v201; // 0x402010\n    while ((v198 & 32) != 0) {\n        int64_t v202 = v196; // 0x402737\n        v199 = v194;\n        v200 = v196;\n        if (v201 >= v196) {\n            // break -> 0x402744\n            break;\n        }\n        v196 = v202 - 1;\n        v197 = *(char *)v196;\n        v198 = *(char *)((int64_t)v195 + 1 + 2 * (int64_t)v197);\n        v199 = v194;\n        v200 = v202;\n    }\n    goto lab_0x402744;\n  lab_0x402744:\n    // 0x402744\n    v47 = v200;\n    int64_t v203 = v199;\n    int32_t v204; // 0x402010\n    v59 = v204;\n    v60 = g98;\n    v61 = v201;\n    v62 = v201;\n    int64_t v205; // 0x402010\n    v63 = v205;\n    int64_t v206; // 0x402010\n    v64 = v206;\n    while (true) {\n      lab_0x4028da:\n        // 0x4028da\n        v65 = v64;\n        v66 = v63;\n        v67 = v62;\n        int64_t v68 = v61;\n        int64_t v69 = v60;\n        v70 = v59;\n        if (v69 != 0) {\n            int64_t v71 = v47 - v68; // 0x402766\n            int64_t v72 = function_418980(&g99, v68, v71, 0, v71, &g92); // 0x402771\n            v73 = v47;\n            v74 = &g99;\n            switch (v72) {\n                case -2: {\n                    goto lab_0x4030d4_2;\n                }\n                case -1: {\n                    goto lab_0x402919;\n                }\n                default: {\n                    // 0x40278a\n                    v75 = *(int64_t *)g93 + v68;\n                    v76 = *(int64_t *)g94 + v68;\n                  lab_0x4027a1:;\n                    int64_t v77 = v75;\n                    v78 = v77;\n                    v79 = v76;\n                    if (v77 == v76) {\n                        // 0x402df0\n                        v80 = g98;\n                        v81 = v77;\n                        goto lab_0x402df7;\n                    } else {\n                        goto lab_0x4027aa;\n                    }\n                }\n            }\n        } else {\n            if (v47 <= v68) {\n                if (v47 == v68) {\n                    // break -> 0x402919\n                    break;\n                }\n                // 0x40307e\n                v50 = v70;\n                v51 = v69;\n                v52 = v67;\n                v54 = v68 + 1;\n                v56 = v66;\n                v58 = v65;\n                goto lab_0x4028d7;\n            } else {\n                unsigned char v82 = *(char *)v68; // 0x4028ec\n                int64_t v83 = v68; // 0x4028f6\n                v84 = v68;\n                if (*(char *)((int64_t)v82 + (int64_t)&g89) == 0) {\n                    int64_t v85 = v83 + 1; // 0x402910\n                    if (v85 == v47) {\n                        // break (via goto) -> 0x402919\n                        goto lab_0x402919;\n                    }\n                    unsigned char v86 = *(char *)v85; // 0x402900\n                    v83 = v85;\n                    while (*(char *)((int64_t)v86 + (int64_t)&g89) == 0) {\n                        // 0x402910\n                        v85 = v83 + 1;\n                        if (v85 == v47) {\n                            // break (via goto) -> 0x402919\n                            goto lab_0x402919;\n                        }\n                        // 0x402900\n                        v86 = *(char *)v85;\n                        v83 = v85;\n                    }\n                    // 0x402d28\n                    v84 = v85;\n                    v80 = v69;\n                    v81 = v85;\n                    if (v85 >= v47) {\n                        goto lab_0x402df7;\n                    } else {\n                        goto lab_0x402d62;\n                    }\n                } else {\n                    goto lab_0x402d62;\n                }\n            }\n        }\n    }\n  lab_0x402919:;\n    uint64_t v207 = *v101; // 0x402923\n    int32_t v208 = v70; // 0x40292f\n    int64_t v209 = v207; // 0x40292f\n    int64_t v210 = v203; // 0x40292f\n    int64_t v211 = v47; // 0x40292f\n    int64_t v212 = v66; // 0x40292f\n    int64_t v213 = v65; // 0x40292f\n    int64_t v214 = v47; // 0x40292f\n    if (v207 <= v203) {\n        // break -> 0x402935\n        goto lab_0x402935;\n    }\n    goto lab_0x4026c0;\n  lab_0x402710:;\n    // 0x402710\n    int64_t v219; // 0x402010\n    v193 = v219;\n    v199 = v219;\n    v200 = v219;\n    if (v201 >= v219) {\n        goto lab_0x402744;\n    } else {\n        goto lab_0x40271c;\n    }\n  lab_0x40335d_3:;\n    // 0x40335d\n    char * v229; // 0x402010\n    char * v230 = v229; // 0x403362\n    int64_t v231; // 0x402010\n    int64_t v232 = v231; // 0x403362\n    int64_t * v233; // 0x402b63\n    int64_t v234 = *v233; // 0x403362\n    int64_t v235; // 0x402010\n    int64_t v236 = v235; // 0x403362\n    goto lab_0x403366;\n  lab_0x402bec:;\n    // 0x402bec\n    int64_t v557; // 0x402010\n    int64_t v552; // 0x402010\n    int64_t v621 = v557 + v552;\n    char * v555; // 0x402010\n    char * v564 = v555; // 0x402bef\n    char * v565 = v555; // 0x402bef\n    int64_t v556; // 0x402010\n    int64_t v566 = v556; // 0x402bef\n    int64_t v567 = v621; // 0x402bef\n    v229 = v555;\n    v231 = v556;\n    v235 = v621;\n    uint64_t v245; // 0x402b7d\n    if (v245 <= v621) {\n        goto lab_0x40335d_3;\n    }\n    goto lab_0x402bf5;\n  lab_0x402bf5:;\n    int64_t v622 = (int64_t)v565;\n    char * v548 = v564; // 0x402c03\n    char * v549 = v565; // 0x402c03\n    int64_t v550 = v566; // 0x402c03\n    int64_t v551 = v567; // 0x402c03\n    int64_t v241; // 0x402010\n    int64_t v240; // 0x402010\n    if (v567 > v566 + v622) {\n        // 0x403cb4\n        v240 = v622;\n        v241 = *v233;\n        goto lab_0x40337c;\n    }\n    goto lab_0x402c09;\n  lab_0x40350f_2:;\n    // 0x40350f\n    int64_t v543; // 0x402b5c\n    int64_t v544; // 0x402b63\n    uint64_t v623 = v544 + v543; // 0x402b79\n    int64_t v277; // 0x402010\n    int64_t v624 = v277;\n    char v625 = 0; // 0x403517\n    int64_t v248; // 0x402010\n    int64_t v355; // 0x402b97\n    if (g31 != NULL) {\n        int64_t v626 = v624; // 0x403520\n        if (v355 < v624) {\n            int64_t v627 = *(int64_t *)v248 + 1; // 0x403549\n            int64_t v628 = v624 - 1; // 0x403545\n            v626 = v624;\n            while ((*(char *)(v627 + 2 * (int64_t)*(char *)v628) & 32) != 0) {\n                // 0x403538\n                v626 = v355;\n                if (v355 == v628) {\n                    // break -> 0x403550\n                    break;\n                }\n                int64_t v629 = v628;\n                v628 = v629 - 1;\n                v626 = v629;\n            }\n        }\n        // 0x403550\n        v625 = v623 < v626;\n    }\n    // 0x40355c\n    g62 = v625;\n    int64_t v313 = v624; // 0x40355f\n    uint64_t v320; // 0x402b9a\n    if (v320 > v624) {\n        int64_t v630 = *(int64_t *)v248 + 1; // 0x403585\n        int64_t v631 = v624; // 0x40358a\n        v313 = v624;\n        if ((*(char *)(2 * (int64_t)*(char *)v624 + v630) & 32) != 0) {\n            int64_t v632 = v631 + 1; // 0x403570\n            while (v320 != v632) {\n                char * v633 = (char *)v632;\n                v631 = v632;\n                if ((*(char *)(2 * (int64_t)*v633 + v630) & 32) == 0) {\n                    // 0x403590\n                    g63 = v633;\n                    v313 = v632;\n                    goto lab_0x403597;\n                }\n                v632 = v631 + 1;\n            }\n            // 0x403ca5\n            g63 = (char *)v320;\n            v313 = v320;\n        }\n    }\n    goto lab_0x403597;\n  lab_0x40371d_3:;\n    // 0x40371d\n    int64_t v344; // 0x402010\n    int64_t v326 = v344; // 0x40371d\n    int64_t v327 = (int64_t)g61; // 0x40371d\n    int64_t v345; // 0x402010\n    int64_t v328 = v345; // 0x40371d\n    int64_t v346; // 0x402010\n    int64_t v329 = v346; // 0x40371d\n    goto lab_0x403724;\n  lab_0x40365e:;\n    // 0x40365e\n    int64_t v340; // 0x402010\n    int64_t v335; // 0x402010\n    int64_t v634 = v340 + v335;\n    int64_t v338; // 0x402010\n    int64_t v348 = v338; // 0x403661\n    int64_t v339; // 0x402010\n    int64_t v349 = v339; // 0x403661\n    int64_t v350 = v634; // 0x403661\n    v344 = v338;\n    v345 = v339;\n    v346 = v634;\n    if (v245 <= v634) {\n        goto lab_0x40371d_3;\n    }\n    goto lab_0x403667;\n  lab_0x403667:;\n    int64_t v635 = v348;\n    int64_t v330 = v635; // 0x40366e\n    int64_t v331 = v349; // 0x40366e\n    int64_t v332 = v350; // 0x40366e\n    int64_t v333; // 0x402010\n    int64_t v334; // 0x402010\n    if (v350 >= v349 + v635) {\n        // 0x403d17\n        v333 = v635;\n        v334 = (int64_t)g61;\n        goto lab_0x403733;\n    }\n    goto lab_0x403674;\n  lab_0x403887_3:;\n    // 0x403887\n    int64_t v602; // 0x402010\n    uint64_t v636 = v602;\n    int64_t v601; // 0x402010\n    int64_t v637 = v601;\n    int64_t v353 = v637; // 0x40388a\n    int64_t v372; // 0x402010\n    if (v637 > v636) {\n        // 0x403890\n        g62 = 0;\n        g56 = v623 < v636 == (g31 != NULL);\n        int64_t v638 = *(int64_t *)v248 + 1; // 0x4038d2\n        int64_t v639 = v636; // 0x4038d7\n        v372 = v637;\n        if ((*(char *)(2 * (int64_t)*(char *)v636 + v638) & 32) != 0) {\n            int64_t v640 = v639 + 1; // 0x4038c0\n            int64_t v641 = v637; // 0x4038cc\n            while (v640 != v637) {\n                // 0x4038ce\n                v639 = v640;\n                v641 = v640;\n                if ((*(char *)(2 * (int64_t)*(char *)v640 + v638) & 32) == 0) {\n                    // break -> 0x4038de\n                    break;\n                }\n                v640 = v639 + 1;\n                v641 = v637;\n            }\n            // 0x4038de\n            g57 = v641;\n            v372 = v637;\n        }\n        goto lab_0x4038e5;\n    } else {\n        goto lab_0x403c03;\n    }\n  lab_0x403853:;\n    // 0x403853\n    int64_t v614; // 0x402010\n    int64_t v604 = v614; // 0x403856\n    int64_t v613; // 0x402010\n    int64_t v605 = v613; // 0x403856\n    int64_t v603; // 0x402010\n    v601 = v603;\n    v602 = v614;\n    if (v603 <= v613) {\n        goto lab_0x403887_3;\n    }\n    goto lab_0x403858;\n  lab_0x40249c:\n    // 0x40249c\n    *(int64_t *)(v26 + v25) = 0;\n    *(int32_t *)&g45 = (int32_t)v21;\n    int64_t v642 = v21 + 1; // 0x4024ab\n    v19 = v642;\n    v22 = v642;\n    if (v24 == v642) {\n        // break -> 0x4024b4\n        goto lab_0x4024b4_2;\n    }\n    // 0x402490\n    v20 = v19;\n    goto lab_0x402490_2;\n  lab_0x4024b4_2:;\n    int64_t v643 = v22;\n    if (g106 == 0) {\n        // 0x4024bd\n        g106 = (int32_t)(g34 != 0) + 2;\n    }\n    // 0x4024d1\n    if (g105 != 0) {\n        int32_t ** v644 = __ctype_toupper_loc(); // 0x4024da\n        int64_t v645 = 0;\n        int32_t v646 = *(int32_t *)(4 * v645 + (int64_t)*v644); // 0x4024eb\n        *(char *)(v645 + 0x623740) = (char)v646;\n        int64_t v647 = v645 + 1; // 0x4024ff\n        while (v645 != 255) {\n            // 0x4024e8\n            v645 = v647;\n            v646 = *(int32_t *)(4 * v645 + (int64_t)*v644);\n            *(char *)(v645 + 0x623740) = (char)v646;\n            v647 = v645 + 1;\n        }\n    }\n    char * v648 = g100; // 0x402501\n    if (v648 == NULL) {\n        // 0x40315e\n        if (g34 == 0) {\n            // 0x40318a\n            g100 = (char *)&g18;\n            // 0x40317b\n            function_4049d0((int64_t *)&g100);\n            goto lab_0x402525;\n        } else {\n            // 0x403167\n            if (*(char *)&g108 != 0) {\n                // 0x40318a\n                g100 = (char *)&g18;\n                // 0x40317b\n                function_4049d0((int64_t *)&g100);\n                goto lab_0x402525;\n            } else {\n                // 0x403170\n                g100 = \"[.?!][]\\\"')}]*\\\\($\\\\|\\t\\\\|  \\\\)[ \\t\\n]*\";\n                // 0x40317b\n                function_4049d0((int64_t *)&g100);\n                goto lab_0x402525;\n            }\n        }\n    } else {\n        // 0x402511\n        if (*v648 != 0) {\n            // 0x40317b\n            function_4049d0((int64_t *)&g100);\n            goto lab_0x402525;\n        } else {\n            // 0x40251a\n            g100 = NULL;\n            goto lab_0x402525;\n        }\n    }\n  lab_0x402c9d:\n    // 0x402c9d\n    *(int32_t *)&g45 = (int32_t)&g46;\n    v22 = v1;\n    int64_t v494; // 0x402010\n    int64_t v497; // 0x402010\n    int64_t v495; // 0x402010\n    int64_t v496; // 0x402010\n    int64_t v498; // 0x402010\n    if (v1 > (int64_t)&g46) {\n        int64_t v649 = function_4059b0(*(int64_t *)(v23 + 8), &g4, (int64_t)g48); // 0x402cc2\n        if (v649 != 0) {\n            // 0x402ce7\n            *(int32_t *)&g45 = (int32_t)&g46;\n            function_408350(*(int64_t *)(a2 + 0x100000000 * (int64_t)&g46 / 0x20000000));\n            error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n          lab_0x402d17:\n            // 0x402d17\n            function_405120(1);\n            // UNREACHABLE\n        }\n        int64_t v650 = *(int64_t *)(8 * (int64_t)*(int32_t *)&g45 + a2); // 0x40450b\n        int64_t v651 = function_4081d0(0, 3, v650); // 0x40450f\n        error(1, *__errno_location(), \"%s\", (char *)v651);\n        v494 = &g127;\n        v495 = v651;\n        v496 = (int64_t)\"%s\";\n        v497 = v1;\n        v498 = 0;\n        goto lab_0x404229;\n    } else {\n        goto lab_0x4024b4_2;\n    }\n  lab_0x402525:\n    // 0x402525\n    v652 = v643;\n    int64_t v653; // 0x402010\n    int64_t v654; // 0x402010\n    int32_t v655; // 0x402010\n    if (g98 == 0) {\n        goto lab_0x4030d9;\n    } else {\n        // 0x402533\n        function_4049d0(&g98);\n        v654 = v643;\n        v653 = v643;\n        v655 = g104;\n        if (g104 != 0) {\n            goto lab_0x4030e9;\n        } else {\n            goto lab_0x40254d;\n        }\n    }\n  lab_0x4030d9:;\n    int64_t v656 = v652;\n    v653 = v656;\n    v655 = g104;\n    if (g104 == 0) {\n        // 0x4032b5\n        if (g34 == 0) {\n            // 0x404475\n            __asm_rep_stosq_memset((char *)&g89, 0x101010101010101, 32);\n            *(char *)&g91 = 0;\n            *(int16_t *)&g90 = 0;\n            v654 = v656;\n        } else {\n            int16_t ** v657 = __ctype_b_loc(); // 0x4032c2\n            int64_t v658 = 0;\n            uint16_t v659 = *(int16_t *)(2 * v658 + (int64_t)*v657); // 0x4032d3\n            *(char *)(v658 + 0x623600) = (char)(v659 / 1024) % 2;\n            v654 = v656;\n            int64_t v660 = v658 + 1; // 0x4032ef\n            while (v658 != 255) {\n                // 0x4032d0\n                v658 = v660;\n                v659 = *(int16_t *)(2 * v658 + (int64_t)*v657);\n                *(char *)(v658 + 0x623600) = (char)(v659 / 1024) % 2;\n                v654 = v656;\n                v660 = v658 + 1;\n            }\n        }\n        goto lab_0x40254d;\n    } else {\n        goto lab_0x4030e9;\n    }\n  lab_0x404229:;\n    int64_t v661 = v496 - v495; // 0x40422c\n    int64_t v662 = g56 == 0 ? 0 : -g68;\n    function_404a70(v494 - v661 - v498 + v662);\n    if (g56 != 0) {\n        // 0x4043c7\n        fputs_unlocked((char *)g31, g48);\n    }\n    // 0x40425c\n    function_404ac0(g57, g58, v661, v495);\n    int64_t v491; // 0x402010\n    int64_t v510 = v491; // 0x40426a\n    int32_t v492; // 0x402010\n    int32_t v511 = v492; // 0x40426a\n    int64_t v493; // 0x402010\n    int64_t v512 = v493; // 0x40426a\n    int64_t v513 = v495; // 0x40426a\n    int64_t v514 = v661; // 0x40426a\n    int64_t v515 = v497; // 0x40426a\n    goto lab_0x40426f;\n  lab_0x4030e9:\n    // 0x4030e9\n    function_404f70((int64_t)v655, (int64_t)&v3, (int64_t)&v92);\n    __asm_rep_stosq_memset((char *)&g89, 0x101010101010101, 32);\n    uint64_t v663 = v92; // 0x403117\n    int64_t v664 = v3; // 0x403122\n    if (v3 < v663) {\n        unsigned char v665 = *(char *)v664; // 0x403128\n        int64_t v666 = v664 + 1; // 0x40312b\n        *(char *)((int64_t)v665 + (int64_t)&g89) = 0;\n        v664 = v666;\n        while (v666 != v663) {\n            // 0x403128\n            v665 = *(char *)v664;\n            v666 = v664 + 1;\n            *(char *)((int64_t)v665 + (int64_t)&g89) = 0;\n            v664 = v666;\n        }\n    }\n    // 0x40313b\n    if (g34 == 0) {\n        // 0x403144\n        *(char *)&g91 = 0;\n        *(int16_t *)&g90 = 0;\n    }\n    // 0x403154\n    free((int64_t *)v3);\n    v654 = v653;\n    goto lab_0x40254d;\n  lab_0x40254d:\n    // 0x40254d\n    if (g102 != 0) {\n        // 0x402559\n        function_405030((int64_t)g102, &g85);\n        if (g86 == 0) {\n            // 0x40256d\n            g102 = 0;\n        }\n    }\n    // 0x402578\n    if (g103 != 0) {\n        // 0x402584\n        function_405030((int64_t)g103, &g83);\n        if (g84 == 0) {\n            // 0x402598\n            g103 = 0;\n        }\n    }\n    // 0x4025a3\n    g75 = 0;\n    g81 = 0;\n    g88 = 0;\n    g87 = 0;\n    int32_t v667 = 0; // 0x4025df\n    int64_t v668 = v654; // 0x4025df\n    int64_t v227; // 0x402010\n    int64_t v225; // 0x402010\n    int64_t v228; // 0x402010\n    int64_t v226; // 0x402010\n    int32_t v223; // 0x402010\n    int64_t v221; // 0x402010\n    int64_t v224; // 0x402010\n    if (*(int32_t *)&g82 >= 1) {\n        while (true) {\n            // 0x4025e5\n            v48 = v667;\n            int64_t v669 = v48; // 0x4025e5\n            int64_t v670 = 8 * v669; // 0x4025f1\n            int64_t v671 = 16 * v669; // 0x40260c\n            int64_t v672 = g78 + v671; // 0x402610\n            function_404f70(*(int64_t *)(g80 + v670), v672, v672 + 8);\n            int64_t v222 = g78 + v671; // 0x402620\n            int64_t v673 = *(int64_t *)v222; // 0x402636\n            v101 = (int64_t *)(v222 + 8);\n            int64_t v674 = *v101;\n            int32_t v675 = 0; // 0x402639\n            int64_t v676 = v668; // 0x402639\n            int64_t v677 = v673; // 0x402639\n            if (*(char *)&g108 != 0) {\n                int64_t v678 = v673; // 0x402649\n                if (v673 >= v674) {\n                  lab_0x4043ea:\n                    // 0x4043ea\n                    v675 = v678 - v673;\n                    v676 = v678;\n                    v677 = v678;\n                } else {\n                    int64_t v679 = (int64_t)*__ctype_b_loc() + 1; // 0x402671\n                    int64_t v680 = v673;\n                    while ((*(char *)(2 * (int64_t)*(char *)v680 + v679) & 32) == 0) {\n                        int64_t v681 = v680 + 1; // 0x402660\n                        v678 = v674;\n                        if (v681 == v674) {\n                            goto lab_0x4043ea;\n                        }\n                        v680 = v681;\n                    }\n                    int32_t v682 = v680 - v673; // 0x40267e\n                    int64_t v683 = v680; // 0x402686\n                    v675 = v682;\n                    v676 = v674;\n                    v677 = v680;\n                    if (v674 > v680) {\n                        int64_t v684 = v683 + 1; // 0x402690\n                        v675 = v682;\n                        v676 = v674;\n                        v677 = v674;\n                        while (v684 != v674) {\n                            // 0x402690\n                            v683 = v684;\n                            v675 = v682;\n                            v676 = v674;\n                            v677 = v684;\n                            if ((*(char *)(2 * (int64_t)*(char *)v684 + v679) & 32) == 0) {\n                                // break -> 0x4026a4\n                                break;\n                            }\n                            v684 = v683 + 1;\n                            v675 = v682;\n                            v676 = v674;\n                            v677 = v674;\n                        }\n                    }\n                }\n            }\n            // 0x4026a4\n            v208 = v675;\n            v209 = v674;\n            v210 = v673;\n            v211 = v676;\n            v212 = v673;\n            v213 = v677;\n            v214 = v676;\n            if (v674 > v673) {\n                while (true) {\n                  lab_0x4026c0:\n                    // 0x4026c0\n                    v206 = v213;\n                    v205 = v212;\n                    v201 = v210;\n                    int64_t v215 = v209;\n                    v204 = v208;\n                    v193 = v215;\n                    if (g100 == NULL) {\n                        goto lab_0x40271c;\n                    } else {\n                        int64_t v216 = v211;\n                        int64_t v217 = v215 - v201; // 0x4026ca\n                        int64_t v218 = function_418980(&g101, v201, v217, 0, v217, &g95); // 0x4026e0\n                        v219 = v215;\n                        v73 = v216;\n                        v74 = &g101;\n                        switch (v218) {\n                            case -1: {\n                                goto lab_0x402710;\n                            }\n                            case 0: {\n                                int64_t v220 = function_408350((int64_t)g100); // 0x4044c1\n                                char * format2 = dcgettext(NULL, \"error: regular expression has a match of length zero: %s\", 5); // 0x4044d5\n                                error(1, (int32_t)\"error: regular expression has a match of length zero: %s\" ^ (int32_t)\"error: regular expression has a match of length zero: %s\", format2);\n                                v221 = v222;\n                                v223 = v204;\n                                v224 = v215;\n                                v225 = v220;\n                                v226 = (int64_t)format2;\n                                v227 = v216;\n                                v228 = 1;\n                                goto lab_0x4044ee;\n                            }\n                            case -2: {\n                                goto lab_0x4030d4_2;\n                            }\n                            default: {\n                                // 0x4026fe\n                                v219 = *(int64_t *)g96 + v201;\n                                goto lab_0x402710;\n                            }\n                        }\n                    }\n                }\n            }\n          lab_0x402935:;\n            uint64_t v685 = v669 + 1; // 0x402948\n            int64_t v686 = g81 + 1; // 0x40294e\n            g81 = v686;\n            *(int64_t *)(g79 + v670) = v686;\n            v667 = v685;\n            v668 = v214;\n            if (v685 >= (int64_t)*(int32_t *)&g82) {\n                // break -> 0x40296e\n                break;\n            }\n        }\n        int32_t nmemb = g75; // 0x40296e\n        if (nmemb != 0) {\n            // 0x40331a\n            qsort((int64_t *)g77, nmemb, 48, (int32_t (*)(int64_t *, int64_t *))0x404ed0);\n        }\n    }\n    // 0x40297e\n    bool v580; // 0x402010\n    if (*(char *)&g109 != 0) {\n        // 0x4031e7\n        g87 = 0;\n        int64_t v687 = 0; // 0x40327b\n        if (*(int32_t *)&g82 != 0) {\n            int64_t v688 = 0; // 0x40326d\n            int64_t v689 = 8 * v688; // 0x403201\n            int64_t v690 = g79 + v689;\n            int64_t v691 = *(int64_t *)v690 + 1; // 0x40320d\n            int64_t v692 = v691; // 0x403214\n            if (v688 != 0) {\n                // 0x403216\n                v692 = v691 - *(int64_t *)(v690 - 8);\n            }\n            int32_t v693 = __sprintf_chk((char *)&v3, 1, 21, \"%ld\", (int32_t)v692); // 0x403231\n            int64_t v694 = *(int64_t *)(g80 + v689); // 0x40323f\n            int64_t v695 = v693; // 0x403243\n            int64_t v696 = v694; // 0x403249\n            int64_t v697 = v695; // 0x403249\n            int64_t v698; // 0x402010\n            int64_t v699; // 0x402010\n            int64_t v700; // 0x402010\n            int64_t v701; // 0x402010\n            int64_t v702; // 0x403250\n            if (v694 != 0) {\n                v699 = -1;\n                v700 = 0;\n                while (v699 != 0) {\n                    // 0x40324b\n                    v701 = v696;\n                    v702 = v699 - 1;\n                    v698 = v702;\n                    v696 = v701 + (v580 ? -1 : 1);\n                    v700 = v702;\n                    if (*(char *)v701 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v699 = v698;\n                    v700 = 0;\n                }\n                v697 = v695 - 2 - v700;\n            }\n            int64_t v703 = v697;\n            int64_t v704 = g87; // 0x403264\n            if (g87 < v703) {\n                // 0x403266\n                g87 = v703;\n                v704 = v703;\n            }\n            // 0x40326d\n            v688++;\n            v687 = v704;\n            while (v688 < (int64_t)*(int32_t *)&g82) {\n                // 0x4031fa\n                v689 = 8 * v688;\n                v690 = g79 + v689;\n                v691 = *(int64_t *)v690 + 1;\n                v692 = v691;\n                if (v688 != 0) {\n                    // 0x403216\n                    v692 = v691 - *(int64_t *)(v690 - 8);\n                }\n                // 0x40321b\n                v693 = __sprintf_chk((char *)&v3, 1, 21, \"%ld\", (int32_t)v692);\n                v694 = *(int64_t *)(g80 + v689);\n                v695 = v693;\n                v696 = v694;\n                v697 = v695;\n                if (v694 != 0) {\n                    v699 = -1;\n                    v700 = 0;\n                    while (v699 != 0) {\n                        // 0x40324b\n                        v701 = v696;\n                        v702 = v699 - 1;\n                        v698 = v702;\n                        v696 = v701 + (v580 ? -1 : 1);\n                        v700 = v702;\n                        if (*(char *)v701 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v699 = v698;\n                        v700 = 0;\n                    }\n                    v697 = v695 - 2 - v700;\n                }\n                // 0x40325d\n                v703 = v697;\n                v704 = g87;\n                if (g87 < v703) {\n                    // 0x403266\n                    g87 = v703;\n                    v704 = v703;\n                }\n                // 0x40326d\n                v688++;\n                v687 = v704;\n            }\n        }\n        // 0x403281\n        g87 = v687 + 1;\n        g54 = (char *)function_409160(v687 + 2);\n        if (*(char *)&g109 != 0) {\n            goto lab_0x402994;\n        } else {\n            goto lab_0x40298b;\n        }\n    } else {\n        goto lab_0x40298b;\n    }\n  lab_0x40426f:;\n    // 0x40426f\n    int64_t v508; // 0x402010\n    int64_t v506; // 0x402010\n    int64_t v507; // 0x402010\n    int32_t v504; // 0x402010\n    int64_t v503; // 0x402010\n    int64_t v505; // 0x402010\n    if ((*(char *)&g108 | *(char *)&g109) == 0) {\n        goto lab_0x403b59;\n    } else {\n        // 0x403e78\n        v503 = v510;\n        v504 = v511;\n        v505 = v512;\n        v506 = v513;\n        v507 = v514;\n        v508 = v515;\n        goto lab_0x403e78_2;\n    }\n  lab_0x40298b:\n    // 0x40298b\n    if (*(char *)&g108 == 0) {\n        goto lab_0x4029b2;\n    } else {\n        goto lab_0x402994;\n    }\n  lab_0x403b59:;\n    // 0x403b59\n    int64_t v440; // 0x402010\n    int64_t v530 = v440;\n    int64_t v439; // 0x402010\n    int64_t v531 = v439;\n    int32_t v437; // 0x402010\n    int32_t v532 = v437;\n    int64_t v436; // 0x402010\n    int64_t v533 = v436;\n    int64_t v534 = (int64_t)g48; // 0x403b59\n    int64_t * v535 = (int64_t *)(v534 + 40); // 0x403b60\n    uint64_t v536 = *v535; // 0x403b60\n    int64_t v452; // 0x402010\n    int32_t v450; // 0x402010\n    int64_t v449; // 0x402010\n    int64_t v451; // 0x402010\n    if (v536 >= *(int64_t *)(v534 + 48)) {\n        // 0x404299\n        __overflow(g48, 10);\n        v449 = v533;\n        v450 = v532;\n        v451 = v531;\n        v452 = v530;\n    } else {\n        // 0x403b6e\n        *v535 = v536 + 1;\n        *(char *)v536 = 10;\n        v449 = v533;\n        v450 = v532;\n        v451 = v531;\n        v452 = v530;\n    }\n    goto lab_0x403b79;\n  lab_0x402994:\n    // 0x402994\n    if (g107 == 0) {\n        // 0x40299d\n        g33 = (int64_t)g33 - (g87 + g32);\n    }\n    goto lab_0x4029b2;\n  lab_0x4029b2:;\n    int128_t v572 = g33; // 0x4029ba\n    if ((int64_t)g33 < 0) {\n        // 0x4029bc\n        g33 = 0;\n        v572 = 0;\n    }\n    int64_t v573 = (v572 & 0xfffffffffffffffe) / 2; // 0x4029dc\n    int64_t v574 = v573 - g32; // 0x4029e2\n    g71 = v573;\n    g70 = v574;\n    g69 = v573;\n    int64_t v575; // 0x402010\n    if (g31 == NULL || (char)(int64_t)g31 == 0) {\n        // 0x404103\n        *(int64_t *)&g31 = 0;\n        v575 = g68;\n    } else {\n        // 0x402a13\n        while (true) {\n            int64_t v576; // 0x402010\n            int64_t v577 = v576;\n            int64_t v578; // 0x402010\n            int64_t v579 = v578 - 1; // 0x402a19\n            v576 = v577 + (v580 ? -1 : 1);\n            int64_t v581 = v579; // 0x402a19\n            if (*(char *)v577 == 0) {\n                // break -> \n                break;\n            }\n            v578 = v579;\n            v581 = 0;\n        }\n        int64_t v582 = -2; // 0x402a21\n        g68 = v582;\n        v575 = v582;\n    }\n    int64_t v583 = 2 * v575; // 0x402a33\n    if (g34 == 0) {\n        // 0x4042a8\n        g69 = -1 - v583 + v573;\n    } else {\n        int64_t v584 = v574 - v583; // 0x402a43\n        g69 = v573 - v583;\n        g70 = v584 > 0 ? v584 : 0;\n    }\n    int16_t ** v585 = __ctype_b_loc(); // 0x402a60\n    int64_t v586 = 0;\n    uint16_t v587 = *(int16_t *)(2 * v586 + (int64_t)*v585); // 0x402a70\n    *(char *)(v586 + 0x623460) = (char)(v587 / 0x2000) % 2;\n    int64_t v588 = v586 + 1; // 0x402a8c\n    while (v586 != 255) {\n        // 0x402a70\n        v586 = v588;\n        v587 = *(int16_t *)(2 * v586 + (int64_t)*v585);\n        *(char *)(v586 + 0x623460) = (char)(v587 / 0x2000) % 2;\n        v588 = v586 + 1;\n    }\n    int32_t v589 = g106; // 0x402a8e\n    *(char *)&g73 = 1;\n    if (v589 == 2) {\n        // 0x40434f\n        *(char *)&g74 = 1;\n    } else {\n        // 0x402aa4\n        if (v589 == 3) {\n            int64_t v590 = (int64_t)\"$%&#_{}\\\\\" + 1; // 0x402ab3\n            *(char *)(36 + (int64_t)&g72) = 1;\n            unsigned char v591 = *(char *)v590; // 0x402abe\n            int64_t v592 = v590; // 0x402ac3\n            while (v591 != 0) {\n                // 0x402ab3\n                v590 = v592 + 1;\n                *(char *)((int64_t)v591 + (int64_t)&g72) = 1;\n                v591 = *(char *)v590;\n                v592 = v590;\n            }\n            int64_t v593 = 128;\n            char v594 = *(char *)(v593 + (int64_t)&g9); // 0x402ad0\n            *(char *)(v593 + (int64_t)&g72) = (char)(v594 != 0);\n            int64_t v595 = v593 + 1; // 0x402ae8\n            while (v593 != 255) {\n                // 0x402ad0\n                v593 = v595;\n                v594 = *(char *)(v593 + (int64_t)&g9);\n                *(char *)(v593 + (int64_t)&g72) = (char)(v594 != 0);\n                v595 = v593 + 1;\n            }\n        }\n    }\n    // 0x402aea\n    g66 = 0;\n    g67 = 0;\n    g65 = 0;\n    g57 = 0;\n    g58 = 0;\n    g56 = 0;\n    int64_t v538 = g77; // 0x402b46\n    int32_t v539 = 0; // 0x402b46\n    int64_t v540 = (int64_t)v585; // 0x402b46\n    int64_t v541 = 1; // 0x402b46\n    if (g75 < 1) {\n        // 0x403b97\n        return 0;\n    }\n    goto lab_0x402b50;\n  lab_0x403b79:;\n    uint64_t v537 = (int64_t)v450 + 1; // 0x403b79\n    v538 = v449 + 48;\n    v539 = v537;\n    v540 = v451;\n    v541 = v452;\n    if (v537 >= (int64_t)g75) {\n        // 0x403b97\n        return 0;\n    }\n    goto lab_0x402b50;\n  lab_0x403e78_2:;\n    int64_t v568 = v508;\n    int64_t v569 = v505;\n    int32_t v570 = v504;\n    int64_t v571 = v503;\n    v436 = v571;\n    v437 = v570;\n    v439 = v569;\n    v440 = v568;\n    if (g107 != 0) {\n        // 0x403e85\n        function_404a70(g32);\n        function_404ac0((int64_t)g54, g55, v507, v506);\n        v436 = v571;\n        v437 = v570;\n        v439 = v569;\n        v440 = v568;\n    }\n    goto lab_0x403b59;\n  lab_0x402b50:;\n    int64_t v261 = v541;\n    v248 = v540;\n    int32_t v438 = v539;\n    int64_t v376 = v538;\n    int64_t v542 = g69; // 0x402b55\n    v543 = *(int64_t *)v376;\n    v233 = (int64_t *)(v376 + 16);\n    v544 = *v233;\n    int32_t * v398 = (int32_t *)(v376 + 40); // 0x402b6b\n    int64_t v545 = *(int64_t *)(v376 + 8) + v543; // 0x402b6f\n    char * v546 = (char *)v543; // 0x402b72\n    g60 = v546;\n    v245 = *(int64_t *)(v376 + 24) + v543;\n    g61 = (char *)v545;\n    int64_t v547 = g78 + 16 * (int64_t)*v398; // 0x402b8b\n    v355 = *(int64_t *)v547;\n    v320 = *(int64_t *)(v547 + 8);\n    v230 = v546;\n    v232 = v542;\n    v234 = v544;\n    v236 = v545;\n    if (v545 >= v245) {\n        goto lab_0x403366;\n    } else {\n        // 0x402bab\n        v548 = v546;\n        v549 = v546;\n        v550 = v542;\n        v551 = v545;\n        v240 = v543;\n        v241 = v544;\n        if (v545 > v543 + v542) {\n            goto lab_0x40337c;\n        } else {\n            while (true) {\n              lab_0x402c09:\n                // 0x402c09\n                v552 = v551;\n                char * v553 = (char *)v552; // 0x402c11\n                g61 = v553;\n                if (g98 != 0) {\n                    int64_t v554 = function_418960(&g99, v552, v245 - v552, 0, 0); // 0x402bcb\n                    v73 = v261;\n                    v74 = &g99;\n                    if (v554 == -2) {\n                        // break -> 0x4030d4\n                        break;\n                    }\n                    // 0x402bda\n                    v555 = g60;\n                    v556 = g69;\n                    v557 = v554 == -1 ? v261 : v554;\n                    goto lab_0x402bec;\n                } else {\n                    int64_t v558 = v550;\n                    char * v559 = v548;\n                    char v560 = *(char *)((int64_t)*v553 + (int64_t)&g89); // 0x402c1e\n                    v555 = v559;\n                    v556 = v558;\n                    v557 = 1;\n                    if (v560 != 0) {\n                        char * v561 = v549;\n                        int64_t v562 = v552; // 0x40333b\n                        if (v245 <= v552) {\n                            goto lab_0x40335d_3;\n                        }\n                        v562++;\n                        v229 = v561;\n                        v231 = v558;\n                        v235 = v245;\n                        if (v245 == v562) {\n                            goto lab_0x40335d_3;\n                        }\n                        unsigned char v563 = *(char *)v562; // 0x403340\n                        v564 = v559;\n                        v565 = v561;\n                        v566 = v558;\n                        v567 = v562;\n                        while (*(char *)((int64_t)v563 + (int64_t)&g89) != 0) {\n                            // 0x403351\n                            v562++;\n                            v229 = v561;\n                            v231 = v558;\n                            v235 = v245;\n                            if (v245 == v562) {\n                                goto lab_0x40335d_3;\n                            }\n                            // 0x403340\n                            v563 = *(char *)v562;\n                            v564 = v559;\n                            v565 = v561;\n                            v566 = v558;\n                            v567 = v562;\n                        }\n                        goto lab_0x402bf5;\n                    } else {\n                        goto lab_0x402bec;\n                    }\n                }\n            }\n            goto lab_0x4030d4_2;\n        }\n    }\n  lab_0x403366:;\n    uint64_t v237 = v236;\n    int64_t v238 = v234;\n    int64_t v239 = (int64_t)v230; // 0x403366\n    v240 = v239;\n    v241 = v238;\n    if (v237 <= v232 + v239) {\n        // 0x403375\n        g61 = (char *)v237;\n        v240 = v239;\n        v241 = v238;\n    }\n    goto lab_0x40337c;\n  lab_0x40337c:;\n    int64_t v242 = v241;\n    int64_t v243 = v240;\n    uint64_t v244 = (int64_t)g61; // 0x40337c\n    g59 = g31 != NULL == v245 > v244;\n    if (v243 < v244) {\n        int64_t v246 = v244 - 1; // 0x4033d2\n        int64_t v247 = *(int64_t *)v248 + 1; // 0x4033d6\n        int64_t v249 = v246; // 0x4033db\n        if ((*(char *)(2 * (int64_t)*(char *)v246 + v247) & 32) != 0) {\n            int64_t v250 = v249;\n            while (v250 != v243) {\n                int64_t v251 = v250 - 1; // 0x4033d2\n                v249 = v251;\n                if ((*(char *)(2 * (int64_t)*(char *)v251 + v247) & 32) == 0) {\n                    // 0x4033e1\n                    g61 = (char *)v250;\n                    goto lab_0x4033e8;\n                }\n                v250 = v249;\n            }\n            // 0x403c8d\n            g61 = (char *)v243;\n        }\n    }\n    goto lab_0x4033e8;\n  lab_0x4033e8:;\n    int64_t v252 = g71 + g88; // 0x4033f2\n    int64_t v253; // 0x402010\n    int64_t v254; // 0x402010\n    if (v252 < -v242) {\n        int64_t v255 = v243 - v252; // 0x403408\n        if (g98 == 0) {\n            unsigned char v256 = *(char *)v255; // 0x40407b\n            if (*(char *)((int64_t)v256 + (int64_t)&g89) == 0) {\n                // 0x4040bb\n                v254 = v243;\n                v253 = v255 + 1;\n            } else {\n                // 0x404088\n                v254 = v243;\n                v253 = v255;\n                int64_t v257 = v255; // 0x40408b\n                if (v255 < v243) {\n                    int64_t v258 = v257 + 1; // 0x4040a3\n                    v254 = v243;\n                    v253 = v258;\n                    while (v258 != v243) {\n                        unsigned char v259 = *(char *)v258; // 0x404092\n                        v254 = v243;\n                        v253 = v258;\n                        v257 = v258;\n                        if (*(char *)((int64_t)v259 + (int64_t)&g89) == 0) {\n                            // break -> 0x40344a\n                            break;\n                        }\n                        v258 = v257 + 1;\n                        v254 = v243;\n                        v253 = v258;\n                    }\n                }\n            }\n            goto lab_0x40344a;\n        } else {\n            int64_t v260 = function_418960(&g99, v255, v252, 0, 0); // 0x403426\n            v73 = v261;\n            v74 = &g99;\n            if (v260 == -2) {\n                goto lab_0x4030d4_2;\n            } else {\n                // 0x403435\n                v254 = (int64_t)g60;\n                v253 = (v260 != -1 ? v260 : 1) + v255;\n                goto lab_0x40344a;\n            }\n        }\n    } else {\n        // 0x403c0f\n        v254 = v243;\n        v253 = v242 + v243;\n        goto lab_0x40344a;\n    }\n  lab_0x40344a:;\n    int64_t v262 = v253;\n    uint64_t v263 = v254;\n    char * v264 = (char *)v262; // 0x40344a\n    g63 = v264;\n    char * v265 = (char *)v263; // 0x403451\n    g64 = v265;\n    char * v266 = v265; // 0x40345b\n    if (v262 < v263) {\n        int64_t v267 = v263 - 1; // 0x403482\n        int64_t v268 = *(int64_t *)v248 + 1; // 0x403486\n        int64_t v269 = v267; // 0x40348b\n        v266 = v265;\n        if ((*(char *)(2 * (int64_t)*(char *)v267 + v268) & 32) != 0) {\n            int64_t v270 = v269;\n            while (v262 != v270) {\n                int64_t v271 = v270 - 1; // 0x403482\n                v269 = v271;\n                if ((*(char *)(2 * (int64_t)*(char *)v271 + v268) & 32) == 0) {\n                    char * v272 = (char *)v270; // 0x403492\n                    g64 = v272;\n                    v266 = v272;\n                    goto lab_0x403499;\n                }\n                v270 = v269;\n            }\n            // 0x403c99\n            g64 = v264;\n            v266 = v264;\n        }\n    }\n    goto lab_0x403499;\n  lab_0x403499:;\n    int64_t v273 = g70; // 0x403499\n    int64_t v274 = (int64_t)v266; // 0x4034a0\n    int64_t v275 = v273 + v262; // 0x4034aa\n    int64_t v276 = v274; // 0x4034b3\n    v277 = v262;\n    int64_t v278 = v273; // 0x4034b3\n    if (v275 < v274) {\n        int64_t v279 = g98; // 0x402010\n        int64_t v280 = v273; // 0x402010\n        int64_t v281 = v262;\n        int64_t v282 = v274; // 0x402010\n        int64_t v283 = v275; // 0x402010\n        while (true) {\n            int64_t v284 = v282;\n            int64_t v285 = v281;\n            int64_t v286 = v285; // 0x4034bd\n            int64_t v287 = v284; // 0x4034bd\n            char * v288; // 0x402010\n            int64_t v289; // 0x402010\n            int64_t v290; // 0x402010\n            int64_t v291; // 0x402010\n            int64_t v292; // 0x402010\n            if (v279 == 0) {\n                // 0x4034b5\n                v288 = (char *)v285;\n                v290 = v283;\n                v291 = v284;\n                v292 = v285;\n                v289 = v280;\n            } else {\n                int64_t v293 = v286;\n                int64_t v294 = function_418960(&g99, v293, v287 - v293, 0, 0); // 0x4034d0\n                v73 = v261;\n                v74 = &g99;\n                if (v294 == -2) {\n                    // break (via goto) -> 0x4030d4\n                    goto lab_0x4030d4_2;\n                }\n                int64_t v295 = g70; // 0x4034e3\n                int64_t v296 = (int64_t)g64;\n                int64_t v297 = (v294 == -1 ? v261 : v294) + (int64_t)g63; // 0x4034f5\n                char * v298 = (char *)v297;\n                g63 = v298;\n                int64_t v299 = v297 + v295; // 0x403506\n                v276 = v296;\n                v277 = v297;\n                v278 = v295;\n                if (v299 >= v296) {\n                    goto lab_0x40350f_2;\n                }\n                // 0x4034b5\n                v287 = v296;\n                v288 = v298;\n                v290 = v299;\n                v291 = v296;\n                v292 = v297;\n                v289 = v295;\n                while (g98 != 0) {\n                    // 0x4034c3\n                    v293 = v297;\n                    v294 = function_418960(&g99, v293, v287 - v293, 0, 0);\n                    v73 = v261;\n                    v74 = &g99;\n                    if (v294 == -2) {\n                        // break (via goto) -> 0x4030d4\n                        goto lab_0x4030d4_2;\n                    }\n                    // 0x4034df\n                    v295 = g70;\n                    v296 = (int64_t)g64;\n                    v297 = (v294 == -1 ? v261 : v294) + (int64_t)g63;\n                    v298 = (char *)v297;\n                    g63 = v298;\n                    v299 = v297 + v295;\n                    v276 = v296;\n                    v277 = v297;\n                    v278 = v295;\n                    if (v299 >= v296) {\n                        goto lab_0x40350f_2;\n                    }\n                    // 0x4034b5\n                    v287 = v296;\n                    v288 = v298;\n                    v290 = v299;\n                    v291 = v296;\n                    v292 = v297;\n                    v289 = v295;\n                }\n            }\n            int64_t v300 = v289;\n            int64_t v301 = v292;\n            int64_t v302 = v291;\n            unsigned char v303 = *v288; // 0x4036a0\n            char * v304; // 0x402010\n            int64_t v305; // 0x402010\n            int64_t v306; // 0x402010\n            int64_t v307; // 0x402010\n            if (*(char *)((int64_t)v303 + (int64_t)&g89) != 0) {\n                // 0x4036c0\n                v305 = v290;\n                v307 = v301;\n                int64_t v308 = v301; // 0x4036c3\n                if (v302 > v301) {\n                    int64_t v309 = v308 + 1;\n                    while (v302 != v309) {\n                        char * v310 = (char *)v309;\n                        v304 = v310;\n                        v306 = v309;\n                        v308 = v309;\n                        if (*(char *)((int64_t)*v310 + (int64_t)&g89) == 0) {\n                            goto lab_0x4036b0;\n                        }\n                        v309 = v308 + 1;\n                    }\n                    // 0x4036e8\n                    g63 = (char *)v302;\n                    v305 = v300 + v302;\n                    v307 = v309;\n                }\n            } else {\n                int64_t v311 = v301 + 1; // 0x4036ac\n                v304 = (char *)v311;\n                v306 = v311;\n              lab_0x4036b0:\n                // 0x4036b0\n                g63 = v304;\n                v305 = v306 + v300;\n                v307 = v306;\n            }\n            // 0x4034b0\n            v281 = v307;\n            v279 = 0;\n            v280 = v300;\n            v282 = v302;\n            v283 = v305;\n            v276 = v302;\n            v277 = v281;\n            v278 = v300;\n            if (v302 <= v305) {\n                goto lab_0x40350f_2;\n            }\n        }\n        goto lab_0x4030d4_2;\n    } else {\n        goto lab_0x40350f_2;\n    }\n  lab_0x403597:;\n    int64_t v312 = v276 - v313; // 0x403597\n    int64_t v314 = v278 - v312 - g32; // 0x40359d\n    int64_t v315; // 0x402010\n    int64_t v316; // 0x402010\n    if (v314 < 1) {\n        // 0x403cc2\n        g65 = 0;\n        g66 = 0;\n        g67 = 0;\n        v315 = v312;\n        v316 = (int64_t)g61;\n        goto lab_0x40379e;\n    } else {\n        char * v317 = g61; // 0x4035ad\n        int64_t v318 = (int64_t)v317; // 0x4035ad\n        g66 = v318;\n        int64_t v319 = v318; // 0x4035c1\n        if (v320 > v318) {\n            int64_t v321 = *(int64_t *)v248 + 1; // 0x4035e2\n            int64_t v322 = v318; // 0x4035e7\n            v319 = v318;\n            if ((*(char *)(2 * (int64_t)*v317 + v321) & 32) != 0) {\n                int64_t v323 = v322 + 1; // 0x4035d0\n                int64_t v324 = v320; // 0x4035dc\n                while (v320 != v323) {\n                    // 0x4035de\n                    v322 = v323;\n                    v324 = v323;\n                    if ((*(char *)(2 * (int64_t)*(char *)v323 + v321) & 32) == 0) {\n                        // break -> 0x4035ed\n                        break;\n                    }\n                    v323 = v322 + 1;\n                    v324 = v320;\n                }\n                // 0x4035ed\n                g66 = v324;\n                v319 = v324;\n            }\n        }\n        int64_t v325 = v319; // 0x4035f4\n        g67 = v325;\n        v326 = v325;\n        v327 = v318;\n        v328 = v314;\n        v329 = v325;\n        if (v245 > v325) {\n            // 0x40360f\n            v330 = v325;\n            v331 = v314;\n            v332 = v325;\n            v333 = v325;\n            v334 = v318;\n            if (v325 < v325 + v314) {\n                while (true) {\n                  lab_0x403674:\n                    // 0x403674\n                    v335 = v332;\n                    int64_t v336 = v331;\n                    g67 = v335;\n                    if (g98 != 0) {\n                        int64_t v337 = function_418960(&g99, v335, v245 - v335, 0, 0); // 0x403638\n                        v73 = v261;\n                        v74 = &g99;\n                        if (v337 == -2) {\n                            // break -> 0x4030d4\n                            break;\n                        }\n                        // 0x403647\n                        v338 = g66;\n                        v339 = 0x100000000000000 * v336 >> 56;\n                        v340 = v337 == -1 ? v261 : v337;\n                        goto lab_0x40365e;\n                    } else {\n                        int64_t v341 = v330;\n                        unsigned char v342 = *(char *)v335; // 0x403685\n                        v338 = v341;\n                        v339 = v336;\n                        v340 = 1;\n                        if (*(char *)((int64_t)v342 + (int64_t)&g89) != 0) {\n                            int64_t v343 = v335; // 0x4036fb\n                            if (v245 <= v335) {\n                                goto lab_0x40371d_3;\n                            }\n                            v343++;\n                            v344 = v341;\n                            v345 = v336;\n                            v346 = v245;\n                            if (v245 == v343) {\n                                goto lab_0x40371d_3;\n                            }\n                            unsigned char v347 = *(char *)v343; // 0x403700\n                            v348 = v341;\n                            v349 = v336;\n                            v350 = v343;\n                            while (*(char *)((int64_t)v347 + (int64_t)&g89) != 0) {\n                                // 0x403711\n                                v343++;\n                                if (v245 == v343) {\n                                    goto lab_0x40371d_3;\n                                }\n                                // 0x403700\n                                v347 = *(char *)v343;\n                                v348 = v341;\n                                v349 = v336;\n                                v350 = v343;\n                            }\n                            goto lab_0x403667;\n                        } else {\n                            goto lab_0x40365e;\n                        }\n                    }\n                }\n                goto lab_0x4030d4_2;\n            } else {\n                goto lab_0x403733;\n            }\n        } else {\n            goto lab_0x403724;\n        }\n    }\n  lab_0x40379e:;\n    int64_t v351 = g69 - v316 + (int64_t)g60 - g32; // 0x4037af\n    int64_t v352; // 0x402010\n    if (v351 < 1) {\n        // 0x403bed\n        g57 = 0;\n        g58 = 0;\n        v353 = v315;\n        goto lab_0x403c03;\n    } else {\n        int64_t v354 = (int64_t)g63; // 0x4037bf\n        g58 = v354;\n        v352 = v354;\n        if (v355 < v354) {\n            int64_t v356 = v354 - 1; // 0x4037f2\n            int64_t v357 = *(int64_t *)v248 + 1; // 0x4037f6\n            int64_t v358 = v356; // 0x4037fb\n            v352 = v354;\n            if ((*(char *)(2 * (int64_t)*(char *)v356 + v357) & 32) != 0) {\n                int64_t v359 = v358;\n                while (v355 != v359) {\n                    int64_t v360 = v359 - 1; // 0x4037f2\n                    v358 = v360;\n                    if ((*(char *)(2 * (int64_t)*(char *)v360 + v357) & 32) == 0) {\n                        // 0x403802\n                        g58 = v359;\n                        v352 = v359;\n                        goto lab_0x403841;\n                    }\n                    v359 = v358;\n                }\n                // 0x403d0b\n                g58 = v355;\n                v352 = v355;\n            }\n        }\n        goto lab_0x403841;\n    }\n  lab_0x403724:;\n    int64_t v361 = v329;\n    int64_t v362 = v327;\n    int64_t v363 = v326;\n    v333 = v363;\n    v334 = v362;\n    if (v361 < v328 + v363) {\n        // 0x40372c\n        g67 = v361;\n        v333 = v363;\n        v334 = v362;\n    }\n    goto lab_0x403733;\n  lab_0x403733:;\n    int64_t v364 = v334;\n    int64_t v365 = v333;\n    uint64_t v366 = g67; // 0x403733\n    if (v366 > v365) {\n        // 0x403743\n        g59 = 0;\n        g65 = !((v245 <= v366 | g31 == NULL));\n        int64_t v367 = v366 - 1; // 0x403787\n        int64_t v368 = *(int64_t *)v248 + 1; // 0x40378b\n        int64_t v369 = v367; // 0x403790\n        v315 = v365;\n        v316 = v364;\n        if ((*(char *)(2 * (int64_t)*(char *)v367 + v368) & 32) != 0) {\n            int64_t v370 = v369;\n            while (v370 > v365) {\n                int64_t v371 = v370 - 1; // 0x403787\n                v369 = v371;\n                if ((*(char *)(2 * (int64_t)*(char *)v371 + v368) & 32) == 0) {\n                    // break -> 0x403797\n                    break;\n                }\n                v370 = v369;\n            }\n            // 0x403797\n            g67 = v370;\n            v315 = v365;\n            v316 = v364;\n        }\n    } else {\n        // 0x403cff\n        g65 = 0;\n        v315 = v365;\n        v316 = v364;\n    }\n    goto lab_0x40379e;\n  lab_0x403c03:\n    // 0x403c03\n    g56 = 0;\n    v372 = v353;\n    goto lab_0x4038e5;\n  lab_0x403841:\n    // 0x403841\n    g57 = v262;\n    int64_t v597 = v351 + v262; // 0x40384f\n    int64_t v598 = v597; // 0x403856\n    int64_t v599 = v352; // 0x403856\n    int64_t v600 = v262; // 0x403856\n    v601 = v352;\n    v602 = v262;\n    if (v352 > v597) {\n        while (true) {\n            // 0x403858\n            v603 = v599;\n            v604 = v600;\n            v605 = v598;\n            int64_t v606; // 0x402010\n            while (true) {\n              lab_0x403858:\n                // 0x403858\n                v606 = v604;\n                int64_t v607 = v605; // 0x402010\n                int64_t v608 = v606;\n                while (true) {\n                    if (g98 != 0) {\n                        // break (via goto) -> 0x403810\n                        goto lab_0x403810;\n                    }\n                    int64_t v609 = v608;\n                    unsigned char v610 = *(char *)v609; // 0x403862\n                    int64_t v611; // 0x402010\n                    if (*(char *)((int64_t)v610 + (int64_t)&g89) != 0) {\n                        int64_t v612 = v609; // 0x403bb3\n                        v613 = v607;\n                        v614 = v609;\n                        if (v603 <= v609) {\n                            // break -> 0x403853\n                            break;\n                        }\n                        v612++;\n                        int64_t v615; // 0x402010\n                        if (v603 == v612) {\n                            // 0x403bdd\n                            g57 = v603;\n                            v613 = v615;\n                            v614 = v612;\n                            goto lab_0x403853;\n                        }\n                        unsigned char v616 = *(char *)v612; // 0x403bc0\n                        v611 = v612;\n                        while (*(char *)((int64_t)v616 + (int64_t)&g89) != 0) {\n                            // 0x403bd5\n                            v612++;\n                            if (v603 == v612) {\n                                // 0x403bdd\n                                g57 = v603;\n                                v613 = v615;\n                                v614 = v612;\n                                goto lab_0x403853;\n                            }\n                            // 0x403bc0\n                            v616 = *(char *)v612;\n                            v611 = v612;\n                        }\n                    } else {\n                        // 0x403873\n                        v611 = v609 + 1;\n                    }\n                    // 0x403877\n                    v608 = v611;\n                    int64_t v617 = v608 + v351; // 0x403877\n                    g57 = v608;\n                    v607 = v617;\n                    v601 = v603;\n                    v602 = v608;\n                    if (v603 <= v617) {\n                        goto lab_0x403887_3;\n                    }\n                }\n                goto lab_0x403853;\n            }\n          lab_0x403810:;\n            int64_t v618 = function_418960(&g99, v606, v603 - v606, 0, 0); // 0x403820\n            v73 = v261;\n            v74 = &g99;\n            if (v618 == -2) {\n                // break -> 0x4030d4\n                break;\n            }\n            int64_t v619 = g57 + (v618 == -1 ? v261 : v618); // 0x403837\n            g57 = v619;\n            int64_t v620 = v619 + v351; // 0x40384f\n            v598 = v620;\n            v599 = g58;\n            v600 = v619;\n            v601 = g58;\n            v602 = v619;\n            if (g58 <= v620) {\n                goto lab_0x403887_3;\n            }\n        }\n        goto lab_0x4030d4_2;\n    } else {\n        goto lab_0x403887_3;\n    }\n  lab_0x4038e5:;\n    // 0x4038e5\n    int64_t v373; // 0x402010\n    int64_t v374; // 0x402010\n    if (*(char *)&g109 == 0) {\n        // 0x403c18\n        v373 = 0;\n        v374 = v372;\n        if (*(char *)&g108 != 0) {\n            int64_t v375 = *(int64_t *)(v376 + 32); // 0x403c2d\n            char * v377 = g60; // 0x403c31\n            int64_t v378 = v375 + (int64_t)v377; // 0x403c31\n            char * v379 = (char *)v378;\n            g54 = v379;\n            g55 = v378;\n            v373 = 0;\n            int64_t v380; // 0x402010\n            v374 = v380;\n            if (v245 > v378) {\n                int64_t v381 = *(int64_t *)v248; // 0x403c54\n                unsigned char v382 = *v379; // 0x403c6f\n                int64_t v383 = v382; // 0x403c6f\n                int64_t v384 = v381 + 1; // 0x403c72\n                char v385 = *(char *)(2 * v383 + v384); // 0x403c72\n                v373 = 0;\n                v374 = v383;\n                if ((v385 & 32) == 0) {\n                    // 0x403c60\n                    unsigned char v386; // 0x403c18\n                    int64_t v387 = v386; // 0x403c18\n                    int64_t v388 = v378 + 1; // 0x403c60\n                    int64_t v389 = v388; // 0x403c69\n                    int64_t v390 = v383; // 0x403c69\n                    if (v245 == v388) {\n                      lab_0x4040f7:;\n                        int64_t v391 = v390;\n                        g55 = v245;\n                        v373 = v387;\n                        v374 = v391;\n                    } else {\n                        int64_t v392 = v389;\n                        unsigned char v393 = *(char *)v392; // 0x403c6f\n                        int64_t v394 = v393; // 0x403c6f\n                        char v395 = *(char *)(2 * v394 + v384); // 0x403c72\n                        while ((v395 & 32) == 0) {\n                            int64_t v396 = v392 + 1; // 0x403c60\n                            v389 = v396;\n                            v390 = v394;\n                            if (v245 == v396) {\n                                goto lab_0x4040f7;\n                            }\n                            v392 = v389;\n                            v393 = *(char *)v392;\n                            v394 = v393;\n                            v395 = *(char *)(2 * v394 + v384);\n                        }\n                        // 0x403c81\n                        g55 = v392;\n                        v373 = v387;\n                        v374 = v394;\n                    }\n                }\n            }\n        }\n    } else {\n        uint32_t v397 = *v398; // 0x403900\n        int64_t v399 = 8 * (int64_t)v397; // 0x403904\n        int64_t v400 = *(int64_t *)(v399 + g80); // 0x403904\n        int64_t v401 = *(int64_t *)(v376 + 32) + 1; // 0x40392a\n        int64_t v402 = v401; // 0x403930\n        if (v397 >= 1) {\n            // 0x403932\n            v402 = v401 - *(int64_t *)(v399 - 8 + g79);\n        }\n        int64_t str3 = v400 == 0 ? (int64_t)&g19 : v400;\n        char * v403 = stpcpy(g54, (char *)str3); // 0x403945\n        g55 = (int64_t)__sprintf_chk(v403, 1, -1, \":%ld\", (int32_t)v402) + (int64_t)v403;\n        v373 = (int64_t)\":%ld\";\n        v374 = -1;\n    }\n    int64_t v404 = v373;\n    uint32_t v405 = g106; // 0x403974\n    int64_t v406; // 0x402010\n    int64_t v407; // 0x402010\n    int64_t v408; // 0x402010\n    int64_t v409; // 0x402010\n    int64_t v410; // 0x402010\n    int64_t v411; // 0x402010\n    int64_t v412; // 0x402010\n    int64_t v413; // 0x402010\n    int64_t v414; // 0x402010\n    int32_t v415; // 0x402010\n    int32_t v416; // 0x402010\n    int64_t v417; // 0x402010\n    int64_t v418; // 0x402010\n    int64_t v419; // 0x402010\n    int64_t v420; // 0x402010\n    int64_t v421; // 0x403a26\n    uint64_t v422; // 0x403a35\n    if (v405 == 2) {\n        int64_t v423 = *(int64_t *)&g30; // 0x403ea9\n        __printf_chk(1, \".%s \\\"\", (char *)v423);\n        function_404ac0(g66, g67, v423, v404);\n        if (g65 != 0) {\n            // 0x40415b\n            fputs_unlocked((char *)g31, g48);\n        }\n        int64_t v424 = (int64_t)g48; // 0x403ee1\n        int64_t * v425 = (int64_t *)(v424 + 40); // 0x403ee8\n        uint64_t v426 = *v425; // 0x403ee8\n        if (v426 >= *(int64_t *)(v424 + 48)) {\n            // 0x40441b\n            __overflow(g48, 34);\n        } else {\n            // 0x403ef6\n            *v425 = v426 + 1;\n            *(char *)v426 = 34;\n        }\n        // 0x403f01\n        fwrite_unlocked((int64_t *)\" \\\"\", 1, 2, g48);\n        if (g62 != 0) {\n            // 0x40412b\n            fputs_unlocked((char *)g31, g48);\n        }\n        // 0x403f29\n        function_404ac0((int64_t)g63, (int64_t)g64, 2, (int64_t)g48);\n        int64_t v427 = (int64_t)g48; // 0x403f3c\n        int64_t * v428 = (int64_t *)(v427 + 40); // 0x403f43\n        uint64_t v429 = *v428; // 0x403f43\n        if (v429 >= *(int64_t *)(v427 + 48)) {\n            // 0x4043fd\n            __overflow(g48, 34);\n        } else {\n            // 0x403f51\n            *v428 = v429 + 1;\n            *(char *)v429 = 34;\n        }\n        // 0x403f5c\n        fwrite_unlocked((int64_t *)\" \\\"\", 1, 2, g48);\n        function_404ac0((int64_t)g60, (int64_t)g61, 2, (int64_t)g48);\n        if (g59 != 0) {\n            // 0x404113\n            fputs_unlocked((char *)g31, g48);\n        }\n        int64_t v430 = (int64_t)g48; // 0x403f97\n        int64_t * v431 = (int64_t *)(v430 + 40); // 0x403f9e\n        uint64_t v432 = *v431; // 0x403f9e\n        if (v432 >= *(int64_t *)(v430 + 48)) {\n            // 0x404439\n            __overflow(g48, 34);\n        } else {\n            // 0x403fac\n            *v431 = v432 + 1;\n            *(char *)v432 = 34;\n        }\n        // 0x403fb7\n        fwrite_unlocked((int64_t *)\" \\\"\", 1, 2, g48);\n        if (g56 != 0) {\n            // 0x404143\n            fputs_unlocked((char *)g31, g48);\n        }\n        // 0x403fdf\n        function_404ac0(g57, g58, 2, (int64_t)g48);\n        int64_t v433 = (int64_t)g48; // 0x403ff2\n        int64_t * v434 = (int64_t *)(v433 + 40); // 0x403ff9\n        uint64_t v435 = *v434; // 0x403ff9\n        if (v435 >= *(int64_t *)(v433 + 48)) {\n            // 0x40440c\n            __overflow(g48, 34);\n        } else {\n            // 0x404007\n            *v434 = v435 + 1;\n            *(char *)v435 = 34;\n        }\n        // 0x404012\n        v436 = v376;\n        v437 = v438;\n        v439 = v248;\n        v440 = v261;\n        if ((*(char *)&g108 | *(char *)&g109) != 0) {\n            // 0x404028\n            fwrite_unlocked((int64_t *)\" \\\"\", 1, 2, g48);\n            function_404ac0((int64_t)g54, g55, 2, (int64_t)g48);\n            int64_t v441 = (int64_t)g48; // 0x404056\n            int64_t * v442 = (int64_t *)(v441 + 40); // 0x40405d\n            uint64_t v443 = *v442; // 0x40405d\n            if (v443 >= *(int64_t *)(v441 + 48)) {\n                // 0x4044a4\n                __overflow(g48, 34);\n                v436 = v376;\n                v437 = v438;\n                v439 = v248;\n                v440 = v261;\n            } else {\n                // 0x40406b\n                *v442 = v443 + 1;\n                *(char *)v443 = 34;\n                v436 = v376;\n                v437 = v438;\n                v439 = v248;\n                v440 = v261;\n            }\n        }\n        goto lab_0x403b59;\n    } else {\n        if (v405 < 2) {\n            int64_t v444 = v374;\n            v418 = v376;\n            v416 = v438;\n            v420 = v248;\n            v411 = v404;\n            v414 = v444;\n            v407 = v261;\n            if (g107 != 0) {\n                goto lab_0x403d94;\n            } else {\n                // 0x403d2c\n                function_404ac0((int64_t)g54, g55, v444, v404);\n                if (*(char *)&g109 == 0) {\n                    // 0x4042ff\n                    function_404a70(g32 - g55 + g87 + (int64_t)g54);\n                    v418 = v376;\n                    v416 = v438;\n                    v420 = v248;\n                    v411 = v404;\n                    v414 = v444;\n                    v407 = v261;\n                    goto lab_0x403d94;\n                } else {\n                    int64_t v445 = (int64_t)g48; // 0x403d4c\n                    int64_t * v446 = (int64_t *)(v445 + 40); // 0x403d53\n                    uint64_t v447 = *v446; // 0x403d53\n                    v221 = v376;\n                    v223 = v438;\n                    v224 = v248;\n                    v225 = v404;\n                    v226 = v444;\n                    v227 = v261;\n                    v228 = v445;\n                    if (v447 >= *(int64_t *)(v445 + 48)) {\n                        goto lab_0x4044ee;\n                    } else {\n                        int64_t v448 = v447 + 1; // 0x403d61\n                        *v446 = v448;\n                        *(char *)v447 = 58;\n                        v417 = v376;\n                        v415 = v438;\n                        v419 = v248;\n                        v410 = v404;\n                        v413 = v448;\n                        v406 = v261;\n                        goto lab_0x403d6c;\n                    }\n                }\n            }\n        } else {\n            // 0x403989\n            v449 = v376;\n            v450 = v438;\n            v451 = v248;\n            v452 = v261;\n            if (v405 != 3) {\n                goto lab_0x403b79;\n            } else {\n                int64_t v453 = *(int64_t *)&g30; // 0x403992\n                __printf_chk(1, \"\\\\%s \", (char *)v453);\n                int64_t v454 = (int64_t)g48; // 0x4039aa\n                int64_t * v455 = (int64_t *)(v454 + 40); // 0x4039b1\n                uint64_t v456 = *v455; // 0x4039b1\n                int64_t v457; // 0x402010\n                if (v456 >= *(int64_t *)(v454 + 48)) {\n                    // 0x404448\n                    __overflow(g48, 123);\n                    v457 = v453;\n                } else {\n                    int64_t v458 = v456 + 1; // 0x4039bf\n                    *v455 = v458;\n                    *(char *)v456 = 123;\n                    v457 = v458;\n                }\n                // 0x4039ca\n                function_404ac0(g66, g67, v457, v404);\n                fwrite_unlocked((int64_t *)\"}{\", 1, 2, g48);\n                function_404ac0((int64_t)g63, (int64_t)g64, 2, (int64_t)g48);\n                fwrite_unlocked((int64_t *)\"}{\", 1, 2, g48);\n                char * v459 = g60; // 0x403a26\n                v421 = (int64_t)v459;\n                char * v460 = g61; // 0x403a35\n                v422 = (int64_t)v460;\n                if (g98 == 0) {\n                    int64_t v461 = (int64_t)g48; // 0x403a15\n                    char v462 = *(char *)((int64_t)*v459 + (int64_t)&g89); // 0x4040c7\n                    if (v462 != 0) {\n                        // 0x4040ed\n                        v409 = v461;\n                        v412 = 2;\n                        v408 = v421;\n                        if (v460 > v459) {\n                            int64_t v463; // 0x402010\n                            unsigned char v464 = *(char *)v463; // 0x4040d9\n                            v409 = v461;\n                            v412 = 2;\n                            v408 = v463;\n                            while (*(char *)((int64_t)v464 + (int64_t)&g89) != 0) {\n                                // 0x4040e9\n                                int64_t v465; // 0x402010\n                                int64_t v466 = v465 + 1; // 0x4040e9\n                                v409 = v461;\n                                v412 = 2;\n                                v408 = v466;\n                                v463 = v466;\n                                if (v466 >= v422) {\n                                    // break -> 0x403a75\n                                    break;\n                                }\n                                v465 = v463;\n                                v464 = *(char *)v465;\n                                char v467 = *(char *)((int64_t)v464 + (int64_t)&g89); // 0x4040dc\n                                v409 = v461;\n                                v412 = 2;\n                                v408 = v465;\n                            }\n                        }\n                    } else {\n                        // 0x4040d0\n                        v409 = v461;\n                        v412 = 2;\n                        v408 = v421 + 1;\n                    }\n                    goto lab_0x403a75;\n                } else {\n                    int64_t v468 = v422 - v421; // 0x403a50\n                    int64_t v469 = function_418960(&g99, v421, v468, 0, 0); // 0x403a58\n                    if (v469 == -2) {\n                        goto lab_0x4030d4_2;\n                    } else {\n                        // 0x403a67\n                        v409 = 0;\n                        v412 = v468;\n                        v408 = (v469 != -1 ? v469 : 1) + v421;\n                        goto lab_0x403a75;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x403d94:;\n    int64_t v470 = v407;\n    int64_t v471 = v414;\n    int64_t v472 = v411;\n    int64_t v473 = v420;\n    int32_t v474 = v416;\n    int64_t v475 = v418;\n    uint64_t v476 = g66; // 0x403d94\n    uint64_t v477 = g67; // 0x403d9b\n    int64_t v478; // 0x402010\n    int64_t v479; // 0x402010\n    int64_t v480; // 0x402010\n    int64_t v481; // 0x402010\n    int64_t v482; // 0x402010\n    int64_t v483; // 0x402010\n    if (v476 < v477) {\n        // 0x404173\n        function_404ac0(v476, v477, v471, v472);\n        if (g65 != 0) {\n            // 0x40435b\n            fputs_unlocked((char *)g31, g48);\n            int64_t v484 = (int64_t)g63 - (int64_t)g64 + g71 - g32; // 0x40438a\n            v482 = v484;\n            v479 = 0;\n            v483 = v484;\n            if (g62 == 0) {\n                goto lab_0x40439f;\n            } else {\n                goto lab_0x404398;\n            }\n        } else {\n            int64_t v485 = (int64_t)g63 - (int64_t)g64 + g71 - g32; // 0x4041a8\n            v482 = v485;\n            if (g62 != 0) {\n                goto lab_0x404398;\n            } else {\n                // 0x4041b8\n                v478 = 0;\n                v481 = v485 - g67 + g66;\n                goto lab_0x403dd9;\n            }\n        }\n    } else {\n        int64_t v486 = (int64_t)g63 - (int64_t)g64 + g71 - g32; // 0x403dc4\n        v480 = v486;\n        v478 = 0;\n        v481 = v486;\n        if (g62 == 0) {\n            goto lab_0x403dd9;\n        } else {\n            goto lab_0x403dd2;\n        }\n    }\n  lab_0x403dd9:\n    // 0x403dd9\n    function_404a70(v481 - v478);\n    if (g62 != 0) {\n        // 0x404281\n        fputs_unlocked((char *)g31, g48);\n    }\n    // 0x403dee\n    function_404ac0((int64_t)g63, (int64_t)g64, v471, v472);\n    function_404a70(g32);\n    function_404ac0((int64_t)g60, (int64_t)g61, v471, v472);\n    int64_t v487; // 0x402010\n    int64_t v488; // 0x402010\n    if (g59 != 0) {\n        // 0x4041d0\n        fputs_unlocked((char *)g31, g48);\n        int64_t v489 = g57; // 0x4041e3\n        int64_t v490 = g58; // 0x4041ea\n        v487 = v489;\n        v488 = v490;\n        if (v489 >= v490) {\n            goto lab_0x403e44;\n        } else {\n            // 0x4041fa\n            v491 = v475;\n            v492 = v474;\n            v493 = v473;\n            v494 = g71 - (int64_t)g61 + (int64_t)g60;\n            v495 = v489;\n            v496 = v490;\n            v497 = v470;\n            v498 = g59 == 0 ? 0 : g68;\n            goto lab_0x404229;\n        }\n    } else {\n        int64_t v499 = g57; // 0x403e2d\n        int64_t v500 = g58; // 0x403e34\n        v487 = v499;\n        v488 = v500;\n        if (v500 > v499) {\n            // 0x40432d\n            v491 = v475;\n            v492 = v474;\n            v493 = v473;\n            v494 = g71 - (int64_t)g61 + (int64_t)g60;\n            v495 = v499;\n            v496 = v500;\n            v497 = v470;\n            v498 = 0;\n            goto lab_0x404229;\n        } else {\n            goto lab_0x403e44;\n        }\n    }\n  lab_0x403dd2:\n    // 0x403dd2\n    v478 = g68;\n    v481 = v480;\n    goto lab_0x403dd9;\n  lab_0x4044ee:\n    // 0x4044ee\n    __overflow((struct _IO_FILE *)v228, 58);\n    v417 = v221;\n    v415 = v223;\n    v419 = v224;\n    v410 = v225;\n    v413 = v226;\n    v406 = v227;\n    goto lab_0x403d6c;\n  lab_0x403a75:\n    // 0x403a75\n    function_404ac0(v421, v408, v412, v409);\n    fwrite_unlocked((int64_t *)\"}{\", 1, 2, g48);\n    function_404ac0(v408, v422, 2, (int64_t)g48);\n    int64_t v516 = (int64_t)g48; // 0x403ab0\n    fwrite_unlocked((int64_t *)\"}{\", 1, 2, g48);\n    function_404ac0(g57, g58, 2, v516);\n    int64_t v517 = (int64_t)g48; // 0x403ad4\n    int64_t * v518 = (int64_t *)(v517 + 40); // 0x403adb\n    uint64_t v519 = *v518; // 0x403adb\n    int64_t v520; // 0x402010\n    if (v519 >= *(int64_t *)(v517 + 48)) {\n        // 0x40442a\n        __overflow(g48, 125);\n        v520 = 2;\n    } else {\n        int64_t v521 = v519 + 1; // 0x403ae9\n        *v518 = v521;\n        *(char *)v519 = 125;\n        v520 = v521;\n    }\n    // 0x403af4\n    v436 = v376;\n    v437 = v438;\n    v439 = v248;\n    v440 = v261;\n    if ((*(char *)&g108 | *(char *)&g109) != 0) {\n        int64_t v522 = (int64_t)g48; // 0x403b06\n        int64_t * v523 = (int64_t *)(v522 + 40); // 0x403b0d\n        uint64_t v524 = *v523; // 0x403b0d\n        int64_t v525; // 0x402010\n        if (v524 >= *(int64_t *)(v522 + 48)) {\n            // 0x404466\n            __overflow(g48, 123);\n            v525 = v520;\n        } else {\n            int64_t v526 = v524 + 1; // 0x403b1b\n            *v523 = v526;\n            *(char *)v524 = 123;\n            v525 = v526;\n        }\n        // 0x403b26\n        function_404ac0((int64_t)g54, g55, v525, v516);\n        int64_t v527 = (int64_t)g48; // 0x403b39\n        int64_t * v528 = (int64_t *)(v527 + 40); // 0x403b40\n        uint64_t v529 = *v528; // 0x403b40\n        if (v529 >= *(int64_t *)(v527 + 48)) {\n            // 0x404457\n            __overflow(g48, 125);\n            v436 = v376;\n            v437 = v438;\n            v439 = v248;\n            v440 = v261;\n        } else {\n            // 0x403b4e\n            *v528 = v529 + 1;\n            *(char *)v529 = 125;\n            v436 = v376;\n            v437 = v438;\n            v439 = v248;\n            v440 = v261;\n        }\n    }\n    goto lab_0x403b59;\n  lab_0x40439f:;\n    int64_t v596 = g66 - g67 + v483 - v479; // 0x4043b0\n    v480 = v596;\n    v478 = 0;\n    v481 = v596;\n    if (g65 != 0) {\n        goto lab_0x403dd2;\n    } else {\n        goto lab_0x403dd9;\n    }\n  lab_0x404398:\n    // 0x404398\n    v479 = g68;\n    v483 = v482;\n    goto lab_0x40439f;\n  lab_0x403d6c:\n    // 0x403d6c\n    function_404a70(g32 + -1 - g55 + g87 + (int64_t)g54);\n    v418 = v417;\n    v416 = v415;\n    v420 = v419;\n    v411 = v410;\n    v414 = v413;\n    v407 = v406;\n    goto lab_0x403d94;\n  lab_0x403e44:;\n    int64_t v501 = v488;\n    int64_t v502 = v487;\n    if (*(char *)&g109 != 0) {\n        // 0x4042bb\n        v436 = v475;\n        v437 = v474;\n        v439 = v473;\n        v440 = v470;\n        if (g107 == 0) {\n            goto lab_0x403b59;\n        } else {\n            goto lab_0x4042c8;\n        }\n    } else {\n        // 0x403e51\n        v436 = v475;\n        v437 = v474;\n        v439 = v473;\n        v440 = v470;\n        if (*(char *)&g108 == 0) {\n            goto lab_0x403b59;\n        } else {\n            // 0x403e5e\n            v503 = v475;\n            v504 = v474;\n            v505 = v473;\n            v506 = v502;\n            v507 = v501;\n            v508 = v470;\n            if (g107 != 0) {\n                goto lab_0x4042c8;\n            } else {\n                goto lab_0x403e78_2;\n            }\n        }\n    }\n  lab_0x4042c8:;\n    int64_t v509 = g59 == 0 ? 0 : -g68;\n    function_404a70(g71 - (int64_t)g61 + (int64_t)g60 + v509);\n    v510 = v475;\n    v511 = v474;\n    v512 = v473;\n    v513 = v502;\n    v514 = v501;\n    v515 = v470;\n    goto lab_0x40426f;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4045b0",
            "funcEndAddr": "4045db",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4045b0\n    int64_t v1; // 0x4045b0\n    __libc_start_main(0x402010, (int32_t)a4, (char **)&v1, (void (*)())0x41b3a0, (void (*)())0x41b400, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4045db",
            "funcStartAddr": "4045db",
            "funcEndAddr": "4045fa",
            "decompiledFuncCode": "int64_t function_4045db(void) {\n    // 0x4045db\n    return &g47;\n}\n"
        },
        {
            "funcName": "function_4045fa",
            "funcStartAddr": "4045fa",
            "funcEndAddr": "404631",
            "decompiledFuncCode": "int64_t function_4045fa(void) {\n    // 0x4045fa\n    return 0;\n}\n"
        },
        {
            "funcName": "function_404631",
            "funcStartAddr": "404631",
            "funcEndAddr": "404688",
            "decompiledFuncCode": "int64_t function_404631(void) {\n    // 0x404631\n    if (g52 != 0) {\n        // 0x404687\n        int64_t result; // 0x404631\n        return result;\n    }\n    int64_t v1 = g53; // 0x404664\n    int64_t result2; // 0x404676\n    if (g53 >= ((int64_t)&g27 - (int64_t)&g26 >> 3) - 1) {\n        // 0x404676\n        result2 = function_4045db();\n        g52 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g27 - (int64_t)&g26 >> 3) - 1) {\n        // 0x404666\n        v1++;\n    }\n    // 0x40465a\n    g53 = v1;\n    // 0x404676\n    result2 = function_4045db();\n    g52 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404688",
            "funcStartAddr": "404688",
            "funcEndAddr": "40468d",
            "decompiledFuncCode": "int64_t function_404688(void) {\n    // 0x404688\n    return function_4045fa();\n}\n"
        },
        {
            "funcName": "function_404690",
            "funcStartAddr": "404690",
            "funcEndAddr": "40474b",
            "decompiledFuncCode": "int64_t function_404690(uint64_t a1, uint64_t a2) {\n    uint64_t v1 = *(int64_t *)(a2 + 8); // 0x404690\n    uint64_t v2 = *(int64_t *)(a1 + 8); // 0x404694\n    int64_t v3 = v1 - v2; // 0x404698\n    uint64_t v4 = v3 == 0 | v3 < 0 != ((v3 ^ v1) & (v2 ^ v1)) < 0 ? v1 : v2; // 0x40469e\n    int32_t result2; // 0x404690\n    if (g105 != 0) {\n        if (v4 >= 1) {\n            unsigned char v5 = *(char *)(a1 % 256 + (int64_t)&g97); // 0x404709\n            unsigned char v6 = *(char *)(a2 % 256 + (int64_t)&g97); // 0x404710\n            int32_t result = (int32_t)v5 - (int32_t)v6; // 0x404717\n            if (result != 0) {\n                // 0x40474a\n                return result;\n            }\n            int64_t v7 = 0; // 0x404719\n            v7++;\n            while (v4 != v7) {\n                unsigned char v8 = *(char *)(v7 + a1); // 0x404720\n                unsigned char v9 = *(char *)(v7 + a2); // 0x404724\n                unsigned char v10 = *(char *)((int64_t)v8 + (int64_t)&g97); // 0x404728\n                unsigned char v11 = *(char *)((int64_t)v9 + (int64_t)&g97); // 0x40472f\n                int32_t v12 = (int32_t)v10 - (int32_t)v11; // 0x404736\n                result2 = v12;\n                if (v12 != 0) {\n                    // 0x40474a\n                    return result2;\n                }\n                v7++;\n            }\n        }\n    } else {\n        if (v4 >= 1) {\n            int32_t result3 = (int32_t)a1 % 256 - (int32_t)a2 % 256; // 0x4046bc\n            if (result3 != 0) {\n                // 0x40474a\n                return result3;\n            }\n            int64_t v13 = 0; // 0x4046be\n            v13++;\n            while (v4 != v13) {\n                unsigned char v14 = *(char *)(v13 + a2); // 0x4046d4\n                int32_t v15 = (int32_t)*(char *)(v13 + a1) - (int32_t)v14; // 0x4046d8\n                result2 = v15;\n                if (v15 != 0) {\n                    // 0x40474a\n                    return result2;\n                }\n                v13++;\n            }\n        }\n    }\n    // 0x4046e5\n    if (v1 <= v2) {\n        // 0x4046ea\n        return v3 < 0 != ((v3 ^ v1) & (v2 ^ v1)) < 0;\n    }\n    // 0x40474a\n    return -1;\n}\n"
        },
        {
            "funcName": "function_404750",
            "funcStartAddr": "404750",
            "funcEndAddr": "404780",
            "decompiledFuncCode": "int64_t function_404750(int64_t a1) {\n    // 0x404750\n    error(1, *__errno_location(), dcgettext(NULL, \"error in regular expression matcher\", 5));\n    return &g127;\n}\n"
        },
        {
            "funcName": "function_404780",
            "funcStartAddr": "404780",
            "funcEndAddr": "4049cf",
            "decompiledFuncCode": "int64_t function_404780(int64_t str) {\n    uint64_t v1 = (int64_t)strlen((char *)str) + 1; // 0x40478c\n    int64_t result = function_409160(v1); // 0x404790\n    int64_t v2 = result; // 0x4047a0\n    if ((char)v1 == 0) {\n      lab_0x4047bf_2:\n        // 0x4047bf\n        *(char *)v2 = 0;\n        return result;\n    }\n    int64_t v3 = result;\n    int64_t v4 = str; // 0x404780\n    int64_t v5 = v1 % 256;\n    char * v6; // 0x404780\n    int64_t v7; // 0x404780\n    int64_t v8; // 0x404780\n    int64_t v9; // 0x404780\n    int64_t v10; // 0x404780\n    int64_t v11; // 0x404780\n    int64_t v12; // 0x404780\n    int64_t v13; // 0x404780\n    int64_t v14; // 0x404780\n    int64_t v15; // 0x404780\n    int64_t v16; // 0x4047fa\n    char v17; // 0x4047a2\n    while (true) {\n      lab_0x4047a2:;\n        int64_t v18 = v5; // 0x404780\n        v9 = v3;\n        v10 = v4;\n        int64_t v19 = v10 + 1; // 0x4047a2\n        v17 = *(char *)v19;\n        while ((char)v18 != 92) {\n            // 0x4047af\n            *(char *)v9 = (char)v18;\n            int64_t v20 = v9 + 1; // 0x4047b4\n            v18 = v17;\n            v2 = v20;\n            if (v17 == 0) {\n                // break (via goto) -> 0x4047bf\n                goto lab_0x4047bf_2;\n            }\n            v9 = v20;\n            v10 = v19;\n            v19 = v10 + 1;\n            v17 = *(char *)v19;\n        }\n        if (v17 == 102) {\n            // 0x404988\n            *(char *)v9 = 12;\n            int64_t v21 = v10 + 2; // 0x40498c\n            v15 = (int64_t)*(char *)v21;\n            v4 = v21;\n            v8 = v9 + 1;\n            goto lab_0x40479e;\n        } else {\n            if (v17 > 102) {\n                if (v17 == 116) {\n                    // 0x4048f8\n                    *(char *)v9 = 9;\n                    int64_t v22 = v10 + 2; // 0x4048fc\n                    v15 = (int64_t)*(char *)v22;\n                    v4 = v22;\n                    v8 = v9 + 1;\n                    goto lab_0x40479e;\n                } else {\n                    if (v17 > 116) {\n                        if (v17 == 118) {\n                            // 0x404940\n                            *(char *)v9 = 11;\n                            int64_t v23 = v10 + 2; // 0x404944\n                            v15 = (int64_t)*(char *)v23;\n                            v4 = v23;\n                            v8 = v9 + 1;\n                            goto lab_0x40479e;\n                        } else {\n                            if (v17 != 120) {\n                                goto lab_0x404958;\n                            } else {\n                                int16_t * v24 = *__ctype_b_loc(); // 0x40489d\n                                int64_t v25 = v10 + 2;\n                                int64_t v26 = 0;\n                                int64_t v27 = 0; // 0x4048d2\n                                char * v28 = (char *)v25;\n                                unsigned char v29 = *v28; // 0x4048a0\n                                int64_t v30 = v29; // 0x4048a0\n                                while ((*(char *)((int64_t)v24 + 1 + 2 * (int64_t)v29) & 16) != 0) {\n                                    int64_t v31; // 0x404780\n                                    if (v29 < 103) {\n                                        // 0x4048f0\n                                        v31 = v30 + 0xffffffa9;\n                                    } else {\n                                        // 0x4048c1\n                                        v31 = (v29 < 71 ? 0xffffffc9 : 0xffffffd0) + v30;\n                                    }\n                                    int64_t v32 = v27 + 1; // 0x4048d2\n                                    int64_t v33 = v31 + 16 * v26 & 0xffffffff; // 0x4048d5\n                                    int64_t v34 = v25 + 1; // 0x4048d8\n                                    int64_t v35 = v32 & 0xffffffff; // 0x4048df\n                                    int64_t v36 = v33; // 0x4048df\n                                    int64_t v37 = v34; // 0x4048df\n                                    if ((int32_t)v32 == 3) {\n                                        // 0x4048e1\n                                        v6 = (char *)v34;\n                                        v14 = v33;\n                                        v11 = v34;\n                                        goto lab_0x4048e1_2;\n                                    }\n                                    v25 = v37;\n                                    v26 = v36;\n                                    v27 = v35;\n                                    v28 = (char *)v25;\n                                    v29 = *v28;\n                                    v30 = v29;\n                                }\n                                // 0x4049b0\n                                v6 = v28;\n                                v14 = v26;\n                                v11 = v25;\n                                if (v27 != 0) {\n                                    goto lab_0x4048e1_2;\n                                } else {\n                                    // 0x4049b8\n                                    *(int16_t *)v9 = 0x785c;\n                                    v15 = v30 & 0xffffffff;\n                                    v4 = v25;\n                                    v8 = v9 + 2;\n                                    goto lab_0x40479e;\n                                }\n                            }\n                        }\n                    } else {\n                        if (v17 == 110) {\n                            // 0x404910\n                            *(char *)v9 = 10;\n                            int64_t v38 = v10 + 2; // 0x404914\n                            v15 = (int64_t)*(char *)v38;\n                            v4 = v38;\n                            v8 = v9 + 1;\n                            goto lab_0x40479e;\n                        } else {\n                            if (v17 != 114) {\n                                goto lab_0x404958;\n                            } else {\n                                // 0x404862\n                                *(char *)v9 = 13;\n                                int64_t v39 = v10 + 2; // 0x404866\n                                v15 = (int64_t)*(char *)v39;\n                                v4 = v39;\n                                v8 = v9 + 1;\n                                goto lab_0x40479e;\n                            }\n                        }\n                    }\n                }\n            } else {\n                if (v17 == 97) {\n                    // 0x404970\n                    *(char *)v9 = 7;\n                    int64_t v40 = v10 + 2; // 0x404974\n                    v15 = (int64_t)*(char *)v40;\n                    v4 = v40;\n                    v8 = v9 + 1;\n                    goto lab_0x40479e;\n                } else {\n                    if (v17 > 97) {\n                        if (v17 == 98) {\n                            // 0x404928\n                            *(char *)v9 = 8;\n                            int64_t v41 = v10 + 2; // 0x40492c\n                            v15 = (int64_t)*(char *)v41;\n                            v4 = v41;\n                            v8 = v9 + 1;\n                            goto lab_0x40479e;\n                        } else {\n                            // 0x404828\n                            v13 = v19;\n                            if (v17 == 99) {\n                                goto lab_0x404830;\n                            }\n                            goto lab_0x404958;\n                        }\n                    } else {\n                        // 0x4047e4\n                        v2 = v9;\n                        if (v17 == 0) {\n                            // break -> 0x4047bf\n                            break;\n                        }\n                        if (v17 != 48) {\n                            goto lab_0x404958;\n                        } else {\n                            int64_t v42 = v10 + 5; // 0x4047f6\n                            v12 = 0;\n                            v7 = v10 + 2;\n                            char v43 = *(char *)v7; // 0x4047fa\n                            v16 = v43;\n                            while ((v43 & -8) == 48) {\n                                int64_t v44 = v7 + 1; // 0x40480e\n                                if (v42 == v44) {\n                                    // 0x4049a0\n                                    int64_t v45; // 0x40480a\n                                    int64_t v46 = v45; // 0x4049a0\n                                    int64_t v47 = (int64_t)*(char *)v42; // 0x4049a0\n                                    int64_t v48 = v42; // 0x4049a0\n                                    goto lab_0x4049a4;\n                                }\n                                v12 = 8 * v12 + 0xffffffd0 + v16 & 0xffffffff;\n                                v7 = v44;\n                                v43 = *(char *)v7;\n                                v16 = v43;\n                            }\n                            goto lab_0x4049a4;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4047bf_2:\n    // 0x4047bf\n    *(char *)v2 = 0;\n    return result;\n  lab_0x404830:;\n    int64_t v49 = v13 + 1; // 0x404830\n    v13 = v49;\n    if (*(char *)v49 == 0) {\n        // 0x404839\n        *(char *)v9 = 0;\n        return result;\n    }\n    goto lab_0x404830;\n  lab_0x40479e:\n    // 0x40479e\n    v3 = v8;\n    v5 = v15;\n    v2 = v3;\n    if ((char)v5 == 0) {\n        // break -> 0x4047bf\n        goto lab_0x4047bf_2;\n    }\n    goto lab_0x4047a2;\n  lab_0x404958:\n    // 0x404958\n    *(char *)v9 = 92;\n    int64_t v50 = v10 + 2; // 0x40495c\n    *(char *)(v9 + 1) = v17;\n    v15 = (int64_t)*(char *)v50;\n    v4 = v50;\n    v8 = v9 + 2;\n    goto lab_0x40479e;\n  lab_0x4049a4:\n    // 0x4049a4\n    *(char *)v9 = (char)v12;\n    v15 = v16;\n    v4 = v7;\n    v8 = v9 + 1;\n    goto lab_0x40479e;\n  lab_0x4048e1_2:\n    // 0x4048e1\n    *(char *)v9 = (char)v14;\n    v15 = (int64_t)*v6;\n    v4 = v11;\n    v8 = v9 + 1;\n    goto lab_0x40479e;\n}\n"
        },
        {
            "funcName": "function_4049d0",
            "funcStartAddr": "4049d0",
            "funcEndAddr": "404a70",
            "decompiledFuncCode": "int64_t function_4049d0(int64_t * str) {\n    int64_t v1 = (int64_t)str;\n    int64_t v2 = v1 + 8; // 0x4049e3\n    *(int64_t *)(v1 + 40) = v1 + 72;\n    int64_t v3 = g105 == 0 ? 0 : (int64_t)&g97; // 0x4049f4\n    *(int64_t *)v2 = 0;\n    *(int64_t *)(v1 + 16) = 0;\n    *(int64_t *)(v1 + 48) = v3;\n    int32_t len = strlen((char *)str); // 0x404a0f\n    if (function_418000(v1, (int64_t)len, v2) == 0) {\n        // 0x404a27\n        return function_418080(v2);\n    }\n    // 0x404a33\n    function_408350(v1);\n    error(1, (int32_t)\"%s (for regexp %s)\" ^ (int32_t)\"%s (for regexp %s)\", dcgettext(NULL, \"%s (for regexp %s)\", 5));\n    return &g127;\n}\n"
        },
        {
            "funcName": "function_404a70",
            "funcStartAddr": "404a70",
            "funcEndAddr": "404ab9",
            "decompiledFuncCode": "int64_t function_404a70(int64_t a1) {\n    // 0x404a70\n    if (a1 < 1) {\n        // 0x404aa2\n        int64_t result; // 0x404a70\n        return result;\n    }\n    int64_t v1 = a1; // 0x404a73\n    int64_t v2 = (int64_t)g48; // 0x404a80\n    int64_t * v3 = (int64_t *)(v2 + 40); // 0x404a87\n    uint64_t v4 = *v3; // 0x404a87\n    int64_t result2; // 0x404a70\n    if (v4 >= *(int64_t *)(v2 + 48)) {\n        // 0x404aa8\n        result2 = __overflow(g48, 32);\n    } else {\n        // 0x404a91\n        *v3 = v4 + 1;\n        *(char *)v4 = 32;\n        result2 = v4;\n    }\n    // 0x404a9c\n    v1--;\n    while (v1 != 0) {\n        // 0x404a80\n        v2 = (int64_t)g48;\n        v3 = (int64_t *)(v2 + 40);\n        v4 = *v3;\n        if (v4 >= *(int64_t *)(v2 + 48)) {\n            // 0x404aa8\n            result2 = __overflow(g48, 32);\n        } else {\n            // 0x404a91\n            *v3 = v4 + 1;\n            *(char *)v4 = 32;\n            result2 = v4;\n        }\n        // 0x404a9c\n        v1--;\n    }\n    // 0x404aa2\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404ac0",
            "funcStartAddr": "404ac0",
            "funcEndAddr": "404ec4",
            "decompiledFuncCode": "int64_t function_404ac0(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4) {\n    // 0x404ac0\n    int64_t result; // 0x404ac0\n    if (a2 <= a1) {\n        // 0x404ba7\n        return result;\n    }\n    int64_t v1 = a1; // 0x404ac3\n    int64_t v2; // 0x404ac0\n    int64_t v3; // 0x404ac0\n    unsigned char v4; // 0x404b69\n    while (true) {\n      lab_0x404b69_2:\n        // 0x404b69\n        v3 = v1;\n        v4 = *(char *)v3;\n        g125 = v4;\n        int64_t v5 = v4; // 0x404b69\n        if (*(char *)(v5 + (int64_t)&g72) != 0) {\n            // 0x404ae8\n            if (*(char *)(v5 + (int64_t)&g9) != 0 == g106 == 3) {\n                char v6 = *(char *)(v5 + (int64_t)&g10); // 0x404c20\n                v2 = (int64_t)v6 & 0xffffffff;\n                goto lab_0x404b60;\n            } else {\n                if (v4 == 92) {\n                    // 0x404c60\n                    v2 = fwrite_unlocked((int64_t *)\"\\\\backslash{}\", 1, 12, g48);\n                    goto lab_0x404b60;\n                } else {\n                    if (v4 > 92) {\n                        switch (v4) {\n                            case 123: {\n                                // 0x404c40\n                                v2 = __printf_chk(1, \"$\\\\%c$\", v4);\n                                goto lab_0x404b60;\n                            }\n                            case 125: {\n                                // 0x404c40\n                                v2 = __printf_chk(1, \"$\\\\%c$\", v4);\n                                goto lab_0x404b60;\n                            }\n                            case 95: {\n                                goto lab_0x404bbf;\n                            }\n                            default: {\n                                goto lab_0x404bf7;\n                            }\n                        }\n                    } else {\n                        if (v4 != 34) {\n                            if (v4 > 38) {\n                                goto lab_0x404bf7;\n                            } else {\n                                goto lab_0x404bbf;\n                            }\n                        } else {\n                            int64_t v7 = (int64_t)g48; // 0x404b19\n                            int64_t * v8 = (int64_t *)(v7 + 40); // 0x404b20\n                            uint64_t v9 = *v8; // 0x404b20\n                            if (v9 >= *(int64_t *)(v7 + 48)) {\n                                // 0x404df1\n                                __overflow(g48, 34);\n                            } else {\n                                // 0x404b2e\n                                *v8 = v9 + 1;\n                                *(char *)v9 = 34;\n                            }\n                            int64_t v10 = (int64_t)g48; // 0x404b39\n                            int64_t * v11 = (int64_t *)(v10 + 40); // 0x404b40\n                            uint64_t v12 = *v11; // 0x404b40\n                            if (v12 >= *(int64_t *)(v10 + 48)) {\n                                // 0x404e00\n                                v2 = __overflow(g48, 34);\n                            } else {\n                                // 0x404b4e\n                                *v11 = v12 + 1;\n                                *(char *)v12 = 34;\n                                v2 = v12;\n                            }\n                            goto lab_0x404b60;\n                        }\n                    }\n                }\n            }\n        } else {\n            goto lab_0x404b7f;\n        }\n    }\n    // 0x404ba7\n    return result;\n  lab_0x404b7f:;\n    int64_t v13 = (int64_t)g48; // 0x404b7f\n    int64_t * v14 = (int64_t *)(v13 + 40); // 0x404b86\n    uint64_t v15 = *v14; // 0x404b86\n    if (v15 >= *(int64_t *)(v13 + 48)) {\n        // 0x404c80\n        v2 = __overflow(g48, (int32_t)v4);\n        goto lab_0x404b60;\n    } else {\n        int64_t v16 = v3 + 1; // 0x404b98\n        *v14 = v15 + 1;\n        *(char *)v15 = v4;\n        result = v15;\n        if (v16 == a2) {\n            return result;\n        }\n        // 0x404b69\n        v1 = v16;\n        goto lab_0x404b69_2;\n    }\n  lab_0x404b60:;\n    int64_t v17 = v3 + 1; // 0x404b60\n    result = v2;\n    if (v17 == a2) {\n        return result;\n    }\n    // 0x404b69\n    v1 = v17;\n    goto lab_0x404b69_2;\n  lab_0x404bbf:;\n    int64_t v18 = (int64_t)g48; // 0x404bbf\n    int64_t * v19 = (int64_t *)(v18 + 40); // 0x404bc6\n    uint64_t v20 = *v19; // 0x404bc6\n    if (v20 >= *(int64_t *)(v18 + 48)) {\n        // 0x404e1e\n        __overflow(g48, 92);\n    } else {\n        // 0x404bd4\n        *v19 = v20 + 1;\n        *(char *)v20 = 92;\n    }\n    goto lab_0x404b7f;\n  lab_0x404bf7:;\n    int64_t v21 = (int64_t)g48; // 0x404bf7\n    int64_t * v22 = (int64_t *)(v21 + 40); // 0x404bfe\n    uint64_t v23 = *v22; // 0x404bfe\n    if (v23 >= *(int64_t *)(v21 + 48)) {\n        // 0x404e0f\n        v2 = __overflow(g48, 32);\n    } else {\n        // 0x404c0c\n        *v22 = v23 + 1;\n        *(char *)v23 = 32;\n        v2 = v23;\n    }\n    goto lab_0x404b60;\n}\n"
        },
        {
            "funcName": "function_404ed0",
            "funcStartAddr": "404ed0",
            "funcEndAddr": "404ef7",
            "decompiledFuncCode": "int64_t function_404ed0(uint64_t a1, uint64_t a2) {\n    int64_t result = function_404690(a1, a2); // 0x404ed7\n    if ((int32_t)result != 0) {\n        // 0x404eee\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x404ee6\n    if (a1 >= a2) {\n        // 0x404ee8\n        result2 = a1 > a2;\n    }\n    // 0x404eee\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404f00",
            "funcStartAddr": "404f00",
            "funcEndAddr": "404f6f",
            "decompiledFuncCode": "int64_t function_404f00(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a3 - 1; // 0x404f00\n    int64_t v2 = 0; // 0x404f04\n    int64_t result = 0; // 0x404f04\n    if (v1 < 0) {\n      lab_0x404f52_2:\n        // 0x404f52\n        return result;\n    }\n    uint64_t v3 = (v2 + v1) / 2; // 0x404f33\n    int32_t v4 = function_404690((int64_t)a1, 16 * v3 + a2); // 0x404f45\n    while (v4 >= 0) {\n        // 0x404f20\n        result = 1;\n        if (v4 == 0) {\n            return result;\n        }\n        // 0x404f22\n        result = 0;\n        if (v3 >= v1) {\n            return result;\n        }\n        v2 = v3 + 1;\n        v3 = (v2 + v1) / 2;\n        v4 = function_404690((int64_t)a1, 16 * v3 + a2);\n    }\n    // 0x404f49\n    while (v2 < v3) {\n        uint64_t v5 = v3 - 1;\n        v3 = (v2 + v5) / 2;\n        v4 = function_404690((int64_t)a1, 16 * v3 + a2);\n        while (v4 >= 0) {\n            // 0x404f20\n            result = 1;\n            if (v4 == 0) {\n                return result;\n            }\n            // 0x404f22\n            result = 0;\n            if (v3 >= v5) {\n                return result;\n            }\n            v2 = v3 + 1;\n            v3 = (v2 + v5) / 2;\n            v4 = function_404690((int64_t)a1, 16 * v3 + a2);\n        }\n    }\n    // 0x404f52\n    return 0;\n}\n"
        },
        {
            "funcName": "function_404f70",
            "funcStartAddr": "404f70",
            "funcEndAddr": "405022",
            "decompiledFuncCode": "int64_t function_404f70(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404f70\n    int64_t v1; // 0x404f70\n    int64_t v2; // bp-32, 0x404f70\n    int64_t result; // 0x404fa5\n    if (a1 == 0) {\n        goto lab_0x404f8b;\n    } else {\n        if ((char)a1 != 0) {\n            // 0x404fc0\n            bool v3; // 0x404f70\n            int64_t v4 = v3 ? -1 : 1; // 0x404fcd\n            int64_t v5 = (int64_t)\"-\"; // 0x404f70\n            int64_t v6 = a1; // 0x404f70\n            int64_t v7 = 2; // 0x404fcd\n            unsigned char v8 = *(char *)v6; // 0x404fcd\n            char v9 = *(char *)v5; // 0x404fcd\n            char v10 = v9; // 0x404fcd\n            bool v11 = false; // 0x404fcd\n            while (v8 == v9) {\n                v7--;\n                v5 += v4;\n                v6 += v4;\n                v10 = v8;\n                v11 = true;\n                if (v7 == 0) {\n                    // break -> \n                    break;\n                }\n                v8 = *(char *)v6;\n                v9 = *(char *)v5;\n                v10 = v9;\n                v11 = false;\n            }\n            unsigned char v12 = v10;\n            if ((v8 >= v12 && !v11) == v8 < v12) {\n                goto lab_0x404f8b;\n            } else {\n                int64_t v13 = function_4085a0(a1, &v2); // 0x404fe0\n                *(int64_t *)a2 = v13;\n                v1 = a1;\n                if (v13 != 0) {\n                    // 0x404fa5\n                    result = v2 + v13;\n                    *(int64_t *)a3 = result;\n                    return result;\n                }\n                goto lab_0x404fee;\n            }\n        } else {\n            goto lab_0x404f8b;\n        }\n    }\n  lab_0x404f8b:;\n    int64_t v14 = function_408370((int64_t)g49, &v2); // 0x404f97\n    *(int64_t *)a2 = v14;\n    if (v14 != 0) {\n        // 0x404fa5\n        result = v2 + v14;\n        *(int64_t *)a3 = result;\n        return result;\n    }\n    // 0x40501b\n    v1 = (int64_t)\"-\";\n    goto lab_0x404fee;\n  lab_0x404fee:\n    // 0x404fee\n    error(1, *__errno_location(), \"%s\", (char *)function_4081d0(0, 3, v1));\n    // 0x40501b\n    v1 = (int64_t)\"-\";\n    goto lab_0x404fee;\n}\n"
        },
        {
            "funcName": "function_405030",
            "funcStartAddr": "405030",
            "funcEndAddr": "40511c",
            "decompiledFuncCode": "int64_t function_405030(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = v1 + 8; // 0x405038\n    int64_t v3; // bp-48, 0x405030\n    char * v4; // bp-56, 0x405030\n    function_404f70(a1, (int64_t)&v4, (int64_t)&v3);\n    int64_t v5 = (int64_t)v4; // 0x40504f\n    *a2 = 0;\n    int64_t * v6 = (int64_t *)v2; // 0x405064\n    *v6 = 0;\n    int64_t * v7 = (int64_t *)(v1 + 16); // 0x40506d\n    *v7 = 0;\n    uint64_t v8 = v3; // 0x405079\n    int64_t v9 = v5; // 0x405079\n    int64_t v10 = 0; // 0x405079\n    int64_t v11 = 0; // 0x405079\n    if (v3 <= v5) {\n        // 0x4050cc\n        qsort((int64_t *)0, (int32_t)0, 16, (int32_t (*)(int64_t *, int64_t *))0x404690);\n        return &g127;\n    }\n    int64_t v12; // 0x405030\n    int64_t v13; // 0x405030\n    int64_t v14; // 0x405030\n    int64_t v15; // 0x405030\n    int64_t v16; // 0x405030\n    int64_t v17; // 0x405030\n    int64_t v18; // 0x405030\n    int64_t v19; // 0x405030\n    int64_t v20; // 0x405030\n    int64_t v21; // 0x405030\n    int64_t v22; // 0x405030\n    int64_t v23; // 0x405030\n    int64_t v24; // 0x405030\n    int64_t v25; // 0x405030\n    while (true) {\n      lab_0x405080:\n        // 0x405080\n        v17 = v16;\n        v19 = v11;\n        int64_t v26 = v10;\n        v12 = v9;\n        int64_t v27 = v8;\n        int64_t v28 = v12;\n        while (*(char *)v28 != 10) {\n            int64_t v29 = v28 + 1; // 0x40508d\n            int64_t v30 = v29; // 0x405094\n            if (v29 == v27) {\n                // 0x405096\n                v22 = v27;\n                v13 = v29;\n                v24 = v26;\n                v20 = v19;\n                v15 = v29;\n                if (*v6 == v26) {\n                    goto lab_0x4050fc;\n                } else {\n                    goto lab_0x40509d;\n                }\n            }\n            v28 = v30;\n        }\n        // 0x4050f0\n        v23 = v27;\n        v14 = v28;\n        v25 = v26;\n        v21 = v19;\n        v18 = v17;\n        if (v12 >= v28) {\n            goto lab_0x4050bd;\n        } else {\n            // 0x4050f5\n            v22 = v27;\n            v13 = v28;\n            v24 = v26;\n            v20 = v19;\n            v15 = v28;\n            if (*v6 != v26) {\n                goto lab_0x40509d;\n            } else {\n                goto lab_0x4050fc;\n            }\n        }\n    }\n  lab_0x4050cc:;\n    // 0x4050cc\n    int64_t base; // 0x405030\n    int64_t nmemb; // 0x405030\n    qsort((int64_t *)base, (int32_t)nmemb, 16, (int32_t (*)(int64_t *, int64_t *))0x404690);\n    return &g127;\n  lab_0x4050bd:\n    // 0x4050bd\n    v11 = v21;\n    v10 = v25;\n    uint64_t v31 = v14;\n    v8 = v23;\n    v9 = v31 + (int64_t)(v31 < v8);\n    v16 = v18;\n    nmemb = v10;\n    base = v11;\n    if (v9 >= v8) {\n        // break -> 0x4050cc\n        goto lab_0x4050cc;\n    }\n    goto lab_0x405080;\n  lab_0x40509d:;\n    int64_t v32 = v24 + 1; // 0x4050a3\n    int64_t v33 = 16 * v24 + v20; // 0x4050ae\n    *(int64_t *)v33 = v12;\n    *(int64_t *)(v33 + 8) = v13 - v12;\n    *v7 = v32;\n    v23 = v22;\n    v14 = v13;\n    v25 = v32;\n    v21 = v20;\n    v18 = v33;\n    goto lab_0x4050bd;\n  lab_0x4050fc:;\n    // 0x4050fc\n    int64_t v34; // 0x405030\n    int64_t v35 = function_409230(v19, v2, 16, v17, v34); // 0x405104\n    *a2 = v35;\n    v22 = v3;\n    v13 = v15;\n    v24 = *v7;\n    v20 = v35;\n    goto lab_0x40509d;\n}\n"
        },
        {
            "funcName": "function_405120",
            "funcStartAddr": "405120",
            "funcEndAddr": "405505",
            "decompiledFuncCode": "int64_t function_405120(int64_t a1) {\n    int32_t status = a1; // 0x405136\n    if (status != 0) {\n        // 0x40513a\n        __fprintf_chk(g51, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40515f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x405166\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [INPUT]...   (without -G)\\n  or:  %s -G [OPTION]... [INPUT [OUTPUT]]\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Output a permuted index, including context, of the words in the input files.\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"  -A, --auto-reference           output automatically generated references\\n  -G, --traditional              behave more like System V 'ptx'\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"  -F, --flag-truncation=STRING   use STRING for flagging line truncations.\\n                                 The default is '/'\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"  -M, --macro-name=STRING        macro name to use instead of 'xx'\\n  -O, --format=roff              generate output as roff directives\\n  -R, --right-side-refs          put references at right, not counted in -w\\n  -S, --sentence-regexp=REGEXP   for end of lines or end of sentences\\n  -T, --format=tex               generate output as TeX directives\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"  -W, --word-regexp=REGEXP       use REGEXP to match each keyword\\n  -b, --break-file=FILE          word break characters in this FILE\\n  -f, --ignore-case              fold lower case to upper case for sorting\\n  -g, --gap-size=NUMBER          gap size in columns between output fields\\n  -i, --ignore-file=FILE         read ignore word list from FILE\\n  -o, --only-file=FILE           read only word list from this FILE\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"  -r, --references               first field of each line is a reference\\n  -t, --typeset-mode               - not implemented -\\n  -w, --width=NUMBER             output width in columns, reference excluded\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g48);\n    int64_t v1 = &g1; // bp-136, 0x4052e5\n    bool v2; // 0x405120\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x405368\n    int64_t v6 = *(int64_t *)v5; // 0x40536c\n    int64_t v7 = 4; // 0x405372\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"ptx\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x40537e\n        char v11 = *(char *)v9; // 0x40537e\n        char v12 = v11; // 0x40537e\n        bool v13 = false; // 0x40537e\n        while (v10 == v11) {\n            // 0x405374\n            v7--;\n            int64_t v14 = v9 + v3; // 0x40537e\n            int64_t v15 = v8 + v3; // 0x40537e\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x40538a\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 4;\n    }\n    // 0x40538a\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x40549c;\n        } else {\n            // 0x405486\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4054db\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4053ec;\n            } else {\n                goto lab_0x40549c;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4053ec;\n        } else {\n            // 0x4053d2\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4054db\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4053ec;\n            } else {\n                goto lab_0x4053ec;\n            }\n        }\n    }\n  lab_0x40549c:\n    // 0x40549c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40542c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40515f\n    exit(status);\n    // UNREACHABLE\n  lab_0x4053ec:\n    // 0x4053ec\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40542c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40515f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405510",
            "funcStartAddr": "405510",
            "funcEndAddr": "40551a",
            "decompiledFuncCode": "int64_t function_405510(void) {\n    // 0x405510\n    return function_405120(1);\n}\n"
        },
        {
            "funcName": "function_405520",
            "funcStartAddr": "405520",
            "funcEndAddr": "405636",
            "decompiledFuncCode": "int64_t function_405520(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x405541\n    int32_t len = strlen(str); // 0x405541\n    if (a2 == 0) {\n        // 0x40560d\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x4055a7\n    int64_t v4 = a3; // 0x405520\n    int64_t v5 = a2; // 0x4055ae\n    int64_t str4; // 0x405520\n    int64_t v6; // 0x405520\n    int32_t v7; // 0x405520\n    int32_t v8; // 0x405520\n    int32_t v9; // 0x405520\n    int64_t v10; // 0x405520\n    int64_t result; // 0x405520\n    int32_t v11; // 0x4055a3\n    char * str2; // 0x4055c2\n    while (true) {\n        // 0x4055b7\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x4055cb\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x40560d\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x4055df\n                break;\n            }\n            // 0x405570\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x40557e\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x4055a7\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x4055e3\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x4055ea\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x4055b7\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x4055b7\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x4055cb\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x40560d\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x4055df\n                    break;\n                }\n                // 0x405570\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x40557e\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x4055a7\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x4055df\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x4055f8:\n    // 0x40560d\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_405640",
            "funcStartAddr": "405640",
            "funcEndAddr": "4056b1",
            "decompiledFuncCode": "int64_t function_405640(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x405640\n    if (a3 == -1) {\n        // 0x4056a0\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x405655\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x405664\n    function_408330(1, a1);\n    function_408020(0, 8, a2);\n    error(0, 0, format);\n    return &g127;\n}\n"
        },
        {
            "funcName": "function_4056c0",
            "funcStartAddr": "4056c0",
            "funcEndAddr": "4057d8",
            "decompiledFuncCode": "int64_t function_4056c0(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x4056ed\n    fputs_unlocked(v1, g51);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x405760\n        int64_t v5; // 0x405767\n        int64_t v6; // 0x405787\n        while (v3 != 0) {\n            // 0x40574b\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x405710\n                break;\n            }\n            // 0x40575d\n            v4 = v3 + 1;\n            v5 = function_408350(v2);\n            __fprintf_chk(g51, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x405790\n                goto lab_0x405790;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x405713\n        int64_t v8 = function_408350(v2); // 0x40571d\n        __fprintf_chk(g51, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x40573d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x40574b\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x405710\n                    break;\n                }\n                // 0x40575d\n                v4 = v3 + 1;\n                v5 = function_408350(v2);\n                __fprintf_chk(g51, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x405790\n                    goto lab_0x405790;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x405710\n            v7 = v3 + 1;\n            v8 = function_408350(v2);\n            __fprintf_chk(g51, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x405790:;\n    int64_t v10 = (int64_t)g51; // 0x405790\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x405797\n    uint64_t result = *v11; // 0x405797\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x4057c0\n        return __overflow(g51, 10);\n    }\n    // 0x4057a1\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4057e0",
            "funcStartAddr": "4057e0",
            "funcEndAddr": "405850",
            "decompiledFuncCode": "int64_t function_4057e0(char * a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_405520(a2, v2, v1, a5); // 0x40580c\n    int64_t result = v3; // 0x405814\n    if (v3 < 0) {\n        // 0x405828\n        function_405640((int64_t)a1, a2, v3);\n        function_4056c0(v2, v1, a5);\n        result = -1;\n    }\n    // 0x405816\n    return result;\n}\n"
        },
        {
            "funcName": "function_405850",
            "funcStartAddr": "405850",
            "funcEndAddr": "40589d",
            "decompiledFuncCode": "int64_t function_405850(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x405850\n    if (result == 0) {\n        // 0x405891\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x405888\n    int32_t n = a4; // 0x405888\n    int64_t v1 = result; // 0x40588f\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x405891\n        return result;\n    }\n    int64_t str3 = str2; // 0x40588f\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x405870\n    int64_t result2 = 0; // 0x40587d\n    while (v2 != 0) {\n        // 0x40587f\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x405891\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x405891\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4058a0",
            "funcStartAddr": "4058a0",
            "funcEndAddr": "4058a8",
            "decompiledFuncCode": "int64_t function_4058a0(int64_t a1) {\n    // 0x4058a0\n    g111 = a1;\n    int64_t result; // 0x4058a0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058b0",
            "funcStartAddr": "4058b0",
            "funcEndAddr": "4058b8",
            "decompiledFuncCode": "int64_t function_4058b0(int64_t a1) {\n    // 0x4058b0\n    g110 = a1;\n    int64_t result; // 0x4058b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058c0",
            "funcStartAddr": "4058c0",
            "funcEndAddr": "40595e",
            "decompiledFuncCode": "int64_t function_4058c0(void) {\n    // 0x4058c0\n    int32_t * err_num; // 0x4058d6\n    if ((int32_t)function_418a80((int64_t)g48) == 0) {\n        goto lab_0x4058ec;\n    } else {\n        // 0x4058d6\n        err_num = __errno_location();\n        if (g110 == 0) {\n            goto lab_0x405903;\n        } else {\n            // 0x4058e7\n            if (*err_num != 32) {\n                goto lab_0x405903;\n            } else {\n                goto lab_0x4058ec;\n            }\n        }\n    }\n  lab_0x4058ec:;\n    int64_t result = function_418a80((int64_t)g51); // 0x4058f3\n    if ((int32_t)result == 0) {\n        // 0x4058fc\n        return result;\n    }\n    // 0x40593e\n    _exit(g37);\n    // UNREACHABLE\n  lab_0x405903:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40590f\n    if (g111 == 0) {\n        // 0x405949\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x405923\n        error(0, *err_num, \"%s: %s\", (char *)function_4081a0((int64_t)g111), v1);\n    }\n    // 0x40593e\n    _exit(g37);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405960",
            "funcStartAddr": "405960",
            "funcEndAddr": "4059ab",
            "decompiledFuncCode": "int64_t function_405960(int32_t a1, int64_t a2) {\n    int32_t fd = open(\"/dev/null\", O_RDONLY); // 0x405976\n    if (fd == a1) {\n        // 0x405985\n        return 1;\n    }\n    // 0x40597f\n    if (fd < 0) {\n        // 0x405985\n        return 0;\n    }\n    // 0x405990\n    close(fd);\n    *__errno_location() = 9;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4059b0",
            "funcStartAddr": "4059b0",
            "funcEndAddr": "405b5f",
            "decompiledFuncCode": "int64_t function_4059b0(int64_t a1, int64_t * a2, int64_t stream) {\n    int32_t v1 = fileno((struct _IO_FILE *)stream); // 0x4059cc\n    int32_t * v2 = __errno_location(); // 0x4059d3\n    int64_t v3 = 0; // 0x4059b0\n    int64_t v4 = 0; // 0x4059b0\n    int64_t v5 = 0; // 0x4059b0\n    int64_t v6 = 0; // 0x4059b0\n    int64_t v7 = 0; // 0x4059b0\n    switch (v1) {\n        case 1: {\n            goto lab_0x405a20;\n        }\n        case 2: {\n            goto lab_0x405a0a;\n        }\n        case 0: {\n            goto lab_0x405a5c;\n        }\n        default: {\n            // 0x4059f5\n            v3 = dup2(2, 2) != 2;\n            goto lab_0x405a0a;\n        }\n    }\n  lab_0x405a20:;\n    // 0x405a20\n    int64_t v8; // 0x4059b0\n    int64_t v9; // 0x4059b0\n    int64_t v10; // 0x4059b0\n    int64_t v11; // 0x4059b0\n    int64_t v12; // 0x4059b0\n    int64_t v13; // 0x4059b0\n    int64_t v14; // 0x405a34\n    if (dup2(0, 0) == 0) {\n        // 0x405aa0\n        v10 = 0;\n        v8 = 0;\n        v14 = 0;\n        if (v4 == 0) {\n            goto lab_0x405a44;\n        } else {\n            goto lab_0x405aa8;\n        }\n    } else {\n        int64_t v15 = function_405960(0, 0); // 0x405a2f\n        v12 = v3;\n        v11 = v4;\n        v9 = 1;\n        v13 = 0;\n        if ((char)v15 == 0) {\n            goto lab_0x405a6f;\n        } else {\n            // 0x405a3f\n            v14 = v15 & 0xffffffff;\n            v10 = v4;\n            v8 = v14;\n            if (v4 != 0) {\n                goto lab_0x405aa8;\n            } else {\n                goto lab_0x405a44;\n            }\n        }\n    }\n  lab_0x405a0a:\n    // 0x405a0a\n    v4 = dup2(1, 1) != 1;\n    goto lab_0x405a20;\n  lab_0x405a5c:\n    // 0x405a5c\n    v12 = v5;\n    v11 = v6;\n    v9 = v7;\n    v13 = function_409c80(a1, (int64_t)a2);\n    goto lab_0x405a6f;\n  lab_0x405a6f:;\n    int64_t v16 = (int64_t)*v2; // 0x405a6f\n    int64_t v17 = v11; // 0x405a74\n    int64_t v18 = v13; // 0x405a74\n    int64_t v19 = v9; // 0x405a74\n    int64_t v20 = v16; // 0x405a74\n    int64_t v21 = v11; // 0x405a74\n    int64_t v22 = v13; // 0x405a74\n    int64_t v23 = v9; // 0x405a74\n    int64_t v24 = v16; // 0x405a74\n    if ((char)v12 != 0) {\n        goto lab_0x405b16;\n    } else {\n        goto lab_0x405a7a;\n    }\n  lab_0x405a44:\n    // 0x405a44\n    v5 = v3;\n    v6 = v10;\n    v7 = v8;\n    if ((char)v3 == 0) {\n        goto lab_0x405a5c;\n    } else {\n        int64_t v25 = function_405960(2, 0); // 0x405a4d\n        v5 = v25 & 0xffffffff;\n        v6 = v10;\n        v7 = v8;\n        if ((char)v25 == 0) {\n            // 0x405b10\n            v21 = v10;\n            v22 = 0;\n            v23 = v8;\n            v24 = (int64_t)*v2;\n            goto lab_0x405b16;\n        } else {\n            goto lab_0x405a5c;\n        }\n    }\n  lab_0x405aa8:;\n    int64_t v26 = function_405960(1, 0); // 0x405aad\n    v10 = v26 & 0xffffffff;\n    v8 = v14;\n    int64_t v27; // 0x4059b0\n    int64_t v28; // 0x4059b0\n    int64_t v29; // 0x4059b0\n    if ((char)v26 != 0) {\n        goto lab_0x405a44;\n    } else {\n        int64_t v30 = (int64_t)*v2; // 0x405ab8\n        v27 = 0;\n        v28 = v14;\n        v29 = v30;\n        if ((char)v3 != 0) {\n            // 0x405b50\n            close(2);\n            v27 = 0;\n            v28 = v14;\n            v29 = v30;\n        }\n        goto lab_0x405ad0;\n    }\n  lab_0x405b16:\n    // 0x405b16\n    close(2);\n    v17 = v21;\n    v18 = v22;\n    v19 = v23;\n    v20 = v24;\n    goto lab_0x405a7a;\n  lab_0x405a7a:\n    // 0x405a7a\n    v27 = v18;\n    v28 = v19;\n    v29 = v20;\n    int64_t result; // 0x4059b0\n    int64_t v31; // 0x4059b0\n    int64_t v32; // 0x4059b0\n    int64_t v33; // 0x4059b0\n    if ((char)v17 != 0) {\n        goto lab_0x405ad0;\n    } else {\n        // 0x405a7f\n        result = v18;\n        v32 = v20;\n        v31 = v18;\n        v33 = v20;\n        if ((char)v19 != 0) {\n            goto lab_0x405adf;\n        } else {\n            goto lab_0x405a84;\n        }\n    }\n  lab_0x405ad0:\n    // 0x405ad0\n    close(1);\n    result = v27;\n    v32 = v29;\n    v31 = v27;\n    v33 = v29;\n    if ((char)v28 == 0) {\n        goto lab_0x405a84;\n    } else {\n        goto lab_0x405adf;\n    }\n  lab_0x405a84:;\n    int64_t result2 = 0; // 0x405a87\n    int64_t v34 = v32; // 0x405a87\n    if (result != 0) {\n        // 0x405a89\n        return result;\n    }\n    goto lab_0x405aeb;\n  lab_0x405adf:\n    // 0x405adf\n    close(0);\n    result2 = v31;\n    v34 = v33;\n    if (v31 != 0) {\n        // 0x405a89\n        int64_t v35; // 0x4059b0\n        int64_t result3 = v35;\n        return result3;\n    }\n    goto lab_0x405aeb;\n  lab_0x405aeb:\n    // 0x405aeb\n    *v2 = (int32_t)v34;\n    // 0x405a89\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405b60",
            "funcStartAddr": "405b60",
            "funcEndAddr": "405bf9",
            "decompiledFuncCode": "int64_t function_405b60(int64_t str) {\n    // 0x405b60\n    if (str == 0) {\n        // 0x405bd9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g51);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x405b6e\n    int64_t result = (int64_t)found_char_pos; // 0x405b6e\n    if (found_char_pos == NULL) {\n        // 0x405bc9\n        g112 = str;\n        g50 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x405b78\n    if (v1 - str < 7) {\n        // 0x405bc9\n        g112 = str;\n        g50 = str;\n        return result;\n    }\n    // 0x405b88\n    bool v2; // 0x405b60\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x405b60\n    int64_t v5 = result - 6; // 0x405b60\n    int64_t v6 = 7; // 0x405b96\n    unsigned char v7 = *(char *)v5; // 0x405b96\n    char v8 = *(char *)v4; // 0x405b96\n    char v9 = v8; // 0x405b96\n    bool v10 = false; // 0x405b96\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x405ba0\n    int64_t v13 = v1; // 0x405ba0\n    int64_t v14 = 3; // 0x405ba0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x405bc9\n        g112 = str;\n        g50 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x405bb2\n    char v16 = *(char *)v12; // 0x405bb2\n    char v17 = v16; // 0x405bb2\n    bool v18 = false; // 0x405bb2\n    while (v15 == v16) {\n        // 0x405ba2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x405bbc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x405bbe\n        v20 = result + 4;\n        g47 = v20;\n    }\n    // 0x405bc9\n    g112 = v20;\n    g50 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405c00",
            "funcStartAddr": "405c00",
            "funcEndAddr": "406544",
            "decompiledFuncCode": "int64_t function_405c00(void) {\n    // 0x405c00\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n    int64_t v1; // 0x405c00\n    int64_t v2 = function_408620((int64_t)\"lib/mbuiter.h\", 2, 179, (int64_t)\"mbuiter_multi_next\", v1, v1, v1); // 0x405c3c\n    char * str = (char *)v2; // 0x405c4b\n    int64_t v3 = (int64_t)\"iter->cur.wc == 0\"; // 0x406121\n    int64_t v4 = 179; // 0x4062c2\n    int64_t v5 = (int64_t)\"mbuiter_multi_next\";\n    char * v6; // 0x405c00\n    char * str3; // 0x405fa3\n    int64_t v7; // 0x405c00\n    int64_t v8; // 0x405c00\n    int64_t wc; // 0x405c00\n    int64_t v9; // 0x405c00\n    int64_t v10; // 0x405c00\n    int64_t v11; // 0x405c00\n    int64_t v12; // 0x405c00\n    int32_t wc2; // 0x405c00\n    int64_t v13; // 0x405c00\n    int64_t v14; // 0x405c00\n    int64_t v15; // 0x405c00\n    int64_t len3; // 0x405c00\n    int64_t ps2; // bp-124, 0x405c00\n    char v16; // 0x405c00\n    char v17; // 0x405c00\n    char v18; // 0x405c00\n    int32_t v19; // bp-156, 0x405c00\n    char v20; // 0x405c00\n    int64_t v21; // 0x405c00\n    char * str5; // 0x405c00\n    int64_t v22; // 0x405c00\n    int64_t v23; // 0x405c00\n    char * str4; // 0x405c00\n    int64_t v24; // 0x405c00\n    int64_t v25; // 0x405c00\n    int64_t ps; // bp-188, 0x405c00\n    char v26; // 0x405c00\n    char v27; // 0x405c00\n    char v28; // 0x405c00\n    char v29; // 0x405c00\n    char v30; // 0x405c00\n    int32_t v31; // bp-92, 0x405c00\n    int64_t v32; // 0x405c00\n    int32_t len; // 0x405c7a\n    uint64_t v33; // 0x405c5d\n    while (true) {\n      lab_0x405c55_2:;\n        int64_t v34 = v9;\n        v13 = v4;\n        v12 = v3;\n        uint64_t v35; // 0x405c00\n        while (true) {\n          lab_0x405c55:\n            // 0x405c55\n            v35 = v12;\n            int64_t v36 = v13;\n            v33 = function_419cf0(v35, v2, v36, v5, v34);\n            v7 = 0;\n            if (v33 == 0) {\n                // break (via goto) -> 0x405ccc\n                goto lab_0x405ccc_8;\n            }\n            // 0x405c6a\n            if (__ctype_get_mb_cur_max() >= 2) {\n                // break -> 0x405cf0\n                break;\n            }\n            // 0x405c75\n            len = strlen(str);\n            v14 = v36;\n            if (v35 >= v33) {\n                goto lab_0x405c9b;\n            } else {\n                int16_t ** v37 = __ctype_b_loc(); // 0x405c89\n                int64_t v38 = (int64_t)*(char *)(v33 - 1); // 0x405c8e\n                v14 = v38;\n                v15 = v38;\n                if ((*(char *)(2 * v38 + (int64_t)*v37) & 8) != 0) {\n                    goto lab_0x405cba;\n                } else {\n                    goto lab_0x405c9b;\n                }\n            }\n        }\n        // 0x405cf0\n        ps = 0;\n        v27 = 0;\n        v22 = v35;\n        int64_t v39 = 1; // 0x405d10\n        if (v35 < v33) {\n            while (true) {\n              lab_0x405d88:\n                // 0x405d88\n                v23 = v22;\n                str5 = (char *)v23;\n                v28 = v27;\n                if (v27 == 0) {\n                    unsigned char v40 = *str5; // 0x405d25\n                    int32_t v41 = *(int32_t *)((int64_t)(4 * v40 / 32) + (int64_t)&g24); // 0x405d30\n                    if ((1 << (int32_t)(v40 % 32) & v41) == 0) {\n                        int32_t v42 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x405e23\n                        v28 = 1;\n                        if (v42 == 0) {\n                            // 0x406469\n                            __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n                            // 0x406482\n                            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                            goto lab_0x40649b_3;\n                        }\n                        goto lab_0x405d8f;\n                    } else {\n                        // 0x405d41\n                        v19 = v40;\n                        v26 = 0;\n                        v21 = 1;\n                        v8 = v40;\n                        goto lab_0x405d5d;\n                    }\n                } else {\n                    goto lab_0x405d8f;\n                }\n            }\n          lab_0x405e98:\n            // 0x405e98\n            v39 = 1;\n            if (v20 != 0) {\n                // 0x405ea0\n                v39 = v5 & -256 | (int64_t)(iswalnum((int32_t)wc) == 0);\n            }\n        }\n        // 0x405eae\n        v32 = v39;\n        ps = 0;\n        ps2 = 0;\n        v6 = str;\n        v29 = 0;\n        v17 = 0;\n        v10 = v34;\n        v24 = v33;\n        while (true) {\n          lab_0x405fb2:\n            // 0x405fb2\n            v25 = v24;\n            v11 = v10;\n            v30 = v29;\n            str3 = v6;\n            str4 = (char *)v25;\n            v18 = v17;\n            if (v17 == 0) {\n                unsigned char v43 = *str3; // 0x405ef5\n                int32_t v44 = *(int32_t *)((int64_t)(4 * v43 / 32) + (int64_t)&g24); // 0x405f00\n                if ((1 << (int32_t)(v43 % 32) & v44) == 0) {\n                    int32_t v45 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps2); // 0x4061f3\n                    v18 = 1;\n                    if (v45 == 0) {\n                        // 0x406469\n                        __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n                        // 0x406482\n                        __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                        goto lab_0x40649b_3;\n                    }\n                    goto lab_0x405fbd;\n                } else {\n                    // 0x405f11\n                    v31 = v43;\n                    v16 = 0;\n                    len3 = 1;\n                    if (v43 == 0) {\n                        // break -> 0x406056\n                        break;\n                    }\n                    goto lab_0x405f42;\n                }\n            } else {\n                goto lab_0x405fbd;\n            }\n        }\n        if (v30 != 0) {\n            goto lab_0x4062b2;\n        } else {\n            unsigned char v46 = *str4; // 0x406066\n            int32_t v47 = *(int32_t *)((int64_t)(4 * v46 / 32) + (int64_t)&g24); // 0x406071\n            if ((1 << (int32_t)(v46 % 32) & v47) == 0) {\n                // 0x40629b\n                if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps) == 0) {\n                    // 0x406469\n                    __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n                    // 0x406482\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x40649b_3;\n                }\n                goto lab_0x4062b2;\n            } else {\n                int32_t v48 = v46; // 0x40608b\n                v19 = v48;\n                wc2 = v48;\n                goto lab_0x40609c;\n            }\n        }\n    }\n  lab_0x405ccc_8:\n    // 0x405ccc\n    free((int64_t *)v2);\n    return v7 & 0xffffffff;\n  lab_0x40649b_3:\n    // 0x40649b\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n    char * str2 = dcgettext((char *)((int32_t)\"iter->cur.wc == 0\" ^ (int32_t)\"iter->cur.wc == 0\"), \"iter->cur.wc == 0\", 5); // 0x4064d1\n    int64_t result2 = (int64_t)str2; // 0x4064d1\n    if (str2 != \"iter->cur.wc == 0\" == (char)result2 == 0) {\n        int32_t len2 = strlen(str2); // 0x4064fb\n        int64_t result = function_409160((int64_t)len2 + 4 + (int64_t)strlen(\"iter->cur.wc == 0\")); // 0x406510\n        __sprintf_chk((char *)result, 1, -1, \"%s (%s)\", str2, \"iter->cur.wc == 0\");\n        return result;\n    }\n    // 0x4064ed\n    return result2;\n  lab_0x405fbd:;\n    char v49 = v18;\n    int64_t v50 = (int64_t)str3; // 0x405fc2\n    int64_t v51 = function_4085c0(v50, (int64_t)__ctype_get_mb_cur_max()); // 0x405fcd\n    int64_t v52 = function_40ab50((int64_t *)&v31, v50, v51); // 0x405fde\n    v16 = v49;\n    len3 = 1;\n    switch (v52) {\n        case -1: {\n            goto lab_0x405f42;\n        }\n        case -2: {\n            // 0x406248\n            v16 = v49;\n            len3 = strlen(str3);\n            goto lab_0x405f42;\n        }\n        default: {\n            // 0x405ffc\n            if (v52 == 0) {\n                char v53 = *str3; // 0x40600f\n                if (v53 != 0) {\n                    // 0x406482\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x40649b_3;\n                }\n                int32_t v54 = v31; // 0x406018\n                if (v54 != 0) {\n                    goto lab_0x40649b_3;\n                }\n            }\n            int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps2); // 0x40602c\n            v16 = v55 == 0 ? v49 : 0;\n            len3 = v52;\n            if (v31 == 0) {\n                // break -> 0x406056\n                break;\n            }\n            goto lab_0x405f42;\n        }\n    }\n  lab_0x405f42:;\n    int64_t v56 = len3;\n    char v57 = v16;\n    char v58 = v30; // 0x405f47\n    int32_t v59; // 0x405c00\n    int64_t v60; // 0x405c00\n    int64_t v61; // 0x405c00\n    char v62; // 0x405c00\n    if (v30 != 0) {\n        goto lab_0x406147;\n    } else {\n        unsigned char v63 = *str4; // 0x405f52\n        int32_t v64 = *(int32_t *)((int64_t)(4 * v63 / 32) + (int64_t)&g24); // 0x405f5d\n        if ((1 << (int32_t)(v63 % 32) & v64) == 0) {\n            int32_t v65 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x406135\n            v58 = 1;\n            if (v65 == 0) {\n                // 0x406469\n                __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n                // 0x406482\n                __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                goto lab_0x40649b_3;\n            }\n            goto lab_0x406147;\n        } else {\n            int32_t v66 = v63; // 0x405f7f\n            v19 = v66;\n            v59 = v66;\n            v62 = v30;\n            v61 = 1;\n            v60 = v11;\n            goto lab_0x405f88;\n        }\n    }\n  lab_0x406147:;\n    char v67 = v58;\n    int64_t v68 = function_4085c0(v25, (int64_t)__ctype_get_mb_cur_max()); // 0x406157\n    int64_t v69 = function_40ab50((int64_t *)&v19, v25, v68); // 0x40616a\n    char v70 = v67; // 0x405c00\n    int64_t len4 = 1; // 0x405c00\n    int64_t v71 = v11; // 0x405c00\n    switch (v69) {\n        case -1: {\n            goto lab_0x405f94;\n        }\n        case -2: {\n            // 0x406270\n            v70 = v67;\n            len4 = strlen(str4);\n            v71 = v11;\n            goto lab_0x405f94;\n        }\n        default: {\n            int64_t v72 = v69; // 0x40618b\n            int64_t v73 = v11; // 0x40618b\n            if (v69 == 0) {\n                // 0x40618d\n                if (*str4 != 0) {\n                    // 0x406482\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x40649b_3;\n                }\n                // 0x4061a4\n                v72 = 1;\n                v73 = v19;\n                if (v19 != 0) {\n                    goto lab_0x40649b_3;\n                }\n            }\n            int32_t v74 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4061bc\n            v59 = v19;\n            v62 = v74 == 0 ? v67 : 0;\n            v61 = v72;\n            v60 = v73;\n            goto lab_0x405f88;\n        }\n    }\n  lab_0x405f94:\n    // 0x405f94\n    v6 = (char *)(v56 + (int64_t)str3);\n    v29 = v70;\n    v17 = v57;\n    v10 = v71;\n    v24 = len4 + v25;\n    goto lab_0x405fb2;\n  lab_0x405f88:\n    // 0x405f88\n    v70 = v62;\n    len4 = v61;\n    v71 = v60;\n    if (v59 == 0) {\n        abort();\n        // UNREACHABLE\n    }\n    goto lab_0x405f94;\n  lab_0x405d8f:;\n    char v75 = v28;\n    int64_t v76 = function_4085c0(v23, (int64_t)__ctype_get_mb_cur_max()); // 0x405d9f\n    int64_t v77 = function_40ab50((int64_t *)&v19, v23, v76); // 0x405db0\n    int64_t len5; // 0x405c00\n    char v78; // 0x405c00\n    switch (v77) {\n        case -1: {\n            // 0x405e40\n            v78 = v75;\n            len5 = 1;\n            v20 = 0;\n            wc = v19;\n            goto lab_0x405d6b;\n        }\n        case -2: {\n            // 0x405e60\n            v78 = v75;\n            len5 = strlen(str5);\n            v20 = 0;\n            wc = v19;\n            goto lab_0x405d6b;\n        }\n        default: {\n            int32_t v79; // 0x405c00\n            int64_t v80; // 0x405c00\n            if (v77 != 0) {\n                // 0x405e88\n                v80 = v77;\n                v79 = v19;\n            } else {\n                // 0x405dd7\n                if (*str5 != 0) {\n                    // 0x406482\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x40649b_3;\n                }\n                // 0x405dee\n                v80 = 1;\n                v79 = v19;\n                if (v19 != 0) {\n                    goto lab_0x40649b_3;\n                }\n            }\n            int32_t v81 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x405e04\n            v26 = v81 == 0 ? v75 : 0;\n            v21 = v80;\n            v8 = v79;\n            goto lab_0x405d5d;\n        }\n    }\n  lab_0x405d5d:\n    // 0x405d5d\n    v78 = v26;\n    len5 = v21;\n    v20 = 1;\n    wc = v8;\n    if ((int32_t)v8 == 0) {\n        abort();\n        // UNREACHABLE\n    }\n    goto lab_0x405d6b;\n  lab_0x405d6b:;\n    int64_t v82 = len5 + v23; // 0x405d6b\n    v27 = v78;\n    v22 = v82;\n    if (v82 >= v33) {\n        // break -> 0x405e98\n        goto lab_0x405e98;\n    }\n    goto lab_0x405d88;\n  lab_0x405c9b:;\n    unsigned char v83 = *(char *)(v33 + (int64_t)len); // 0x405c9b\n    v7 = 1;\n    if (v83 == 0) {\n        // break (via goto) -> 0x405ccc\n        goto lab_0x405ccc_8;\n    }\n    int16_t * v84 = *__ctype_b_loc(); // 0x405cad\n    v15 = v14;\n    v7 = 1;\n    if ((*(char *)(2 * (int64_t)v83 + (int64_t)v84) & 8) == 0) {\n        // break (via goto) -> 0x405ccc\n        goto lab_0x405ccc_8;\n    }\n    goto lab_0x405cba;\n  lab_0x405cba:\n    // 0x405cba\n    v7 = 0;\n    if (*(char *)v33 == 0) {\n        // break (via goto) -> 0x405ccc\n        goto lab_0x405ccc_8;\n    }\n    int64_t v85 = v33 + 1; // 0x405cc0\n    v13 = v15;\n    v12 = v85;\n    v7 = 0;\n    if (*(char *)v85 == 0) {\n        // break (via goto) -> 0x405ccc\n        goto lab_0x405ccc_8;\n    }\n    goto lab_0x405c55;\n  lab_0x4062b2:\n    // 0x4062b2\n    v4 = function_4085c0(v25, (int64_t)__ctype_get_mb_cur_max());\n    int64_t v86 = function_40ab50((int64_t *)&v19, v25, v4); // 0x4062d5\n    int32_t v87; // 0x405c00\n    switch (v86) {\n        case -1: {\n            goto lab_0x4060b2;\n        }\n        case -2: {\n            // 0x40643c\n            strlen(str4);\n            goto lab_0x4060b2;\n        }\n        case 0: {\n            // 0x406400\n            if (*str4 != 0) {\n                // 0x406482\n                __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                goto lab_0x40649b_3;\n            }\n            // 0x406413\n            v87 = 0;\n            if (v19 == 0) {\n                goto lab_0x406300;\n            } else {\n                goto lab_0x406428;\n            }\n        }\n        default: {\n            // 0x4062fc\n            v87 = v19;\n            goto lab_0x406300;\n        }\n    }\n  lab_0x4060b2:\n    // 0x4060b2\n    v7 = v32;\n    if ((char)v32 != 0) {\n        // break -> 0x405ccc\n        goto lab_0x405ccc_8;\n    }\n    goto lab_0x4060bb;\n  lab_0x406300:\n    // 0x406300\n    mbsinit((struct _TYPEDEF___mbstate_t *)&ps);\n    wc2 = v87;\n    goto lab_0x40609c;\n  lab_0x4060bb:\n    // 0x4060bb\n    ps = 0;\n    unsigned char v88 = *(char *)v33; // 0x4060d8\n    int32_t v89 = *(int32_t *)((int64_t)(4 * v88 / 32) + (int64_t)&g24); // 0x4060e4\n    int64_t v90; // 0x405c00\n    int64_t len6; // 0x405c00\n    if ((1 << (int32_t)(v88 % 32) & v89) == 0) {\n        int32_t v91 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x406343\n        if (v91 == 0) {\n            // 0x406469\n            __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n            // 0x406482\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n            goto lab_0x40649b_3;\n        }\n        int64_t v92 = function_4085c0(v33, (int64_t)__ctype_get_mb_cur_max()); // 0x406365\n        int64_t v93 = function_40ab50((int64_t *)&v19, v33, v92); // 0x406376\n        len6 = 1;\n        switch (v93) {\n            case -1: {\n                goto lab_0x40611c;\n            }\n            case -2: {\n                goto lab_0x406428;\n            }\n            default: {\n                // 0x406390\n                v90 = v93;\n                if (v93 != 0) {\n                    goto lab_0x4063b4;\n                } else {\n                    // 0x406395\n                    char * v94; // 0x4060bb\n                    char v95 = *v94; // 0x4063a3\n                    if (v95 != 0) {\n                        // 0x406482\n                        __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                        goto lab_0x40649b_3;\n                    }\n                    uint32_t v96 = v19; // 0x4063ac\n                    v90 = 1;\n                    if (v96 != 0) {\n                        goto lab_0x406428;\n                    } else {\n                        goto lab_0x4063b4;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x4060f5\n        v19 = v88;\n        goto lab_0x406110;\n    }\n  lab_0x406428:\n    // 0x406428\n    len6 = strlen(str4);\n    goto lab_0x40611c;\n  lab_0x40609c:\n    // 0x40609c\n    if (wc2 == 0) {\n        goto lab_0x4060b2;\n    } else {\n        // 0x4060a7\n        if (iswalnum(wc2) != 0) {\n            goto lab_0x4060bb;\n        } else {\n            goto lab_0x4060b2;\n        }\n    }\n  lab_0x40611c:\n    // 0x40611c\n    v3 = len6 + v33;\n    v9 = v11;\n    v7 = 0;\n    if (*(char *)v3 == 0) {\n        // break -> 0x405ccc\n        goto lab_0x405ccc_8;\n    }\n    goto lab_0x405c55_2;\n  lab_0x406110:;\n    // 0x406110\n    int64_t v97; // 0x405c00\n    int64_t v98 = v97;\n    int32_t v99; // 0x405c00\n    int32_t v100 = v99; // 0x406110\n    v7 = 0;\n    len6 = v98;\n    if (v100 == 0) {\n        // break -> 0x405ccc\n        goto lab_0x405ccc_8;\n    }\n    goto lab_0x40611c;\n  lab_0x4063b4:;\n    int64_t v101 = v90;\n    mbsinit((struct _TYPEDEF___mbstate_t *)&ps);\n    int32_t v102 = v19;\n    v99 = v102;\n    v97 = v101;\n    goto lab_0x406110;\n}\n"
        },
        {
            "funcName": "function_406550",
            "funcStartAddr": "406550",
            "funcEndAddr": "4067d0",
            "decompiledFuncCode": "int64_t function_406550(char * str4, int64_t * a2) {\n    int64_t v1 = (int64_t)str4;\n    char * str3 = dcgettext(NULL, str4, 5); // 0x40656e\n    int64_t str = function_418b40(); // 0x406576\n    int64_t result2; // 0x406550\n    int64_t v2; // 0x406550\n    int64_t v3; // 0x406550\n    int64_t v4; // 0x406550\n    int32_t v5; // 0x406550\n    int64_t v6; // 0x406550\n    int64_t result; // 0x40669b\n    if ((int32_t)function_418a20(str, \"UTF-8\", 5) != 0) {\n        // 0x406690\n        result = function_409440();\n        int32_t len = strlen((char *)str); // 0x4066a6\n        int64_t v7 = len; // 0x4066a6\n        int64_t * dest_mem = memcpy((int64_t *)function_409160(v7 + 11), (int64_t *)str, len); // 0x4066c0\n        int64_t v8 = (int64_t)dest_mem + v7; // 0x4066d0\n        *(int64_t *)v8 = 0x4c534e4152542f2f;\n        *(int16_t *)(v8 + 8) = 0x5449;\n        *(char *)(v8 + 10) = 0;\n        int64_t str2 = function_409440(); // 0x4066f7\n        free(dest_mem);\n        if (str2 == 0) {\n            // 0x4067a0\n            v6 = 0;\n            result2 = v1;\n            v2 = 0;\n            v4 = 0;\n            if (result != 0) {\n                goto lab_0x406734;\n            } else {\n                goto lab_0x4065a1;\n            }\n        } else {\n            // 0x406715\n            if (strchr((char *)str2, 63) == NULL) {\n                // 0x406770\n                v6 = 0;\n                result2 = str2;\n                v2 = str2;\n                v4 = str2;\n                if (result == 0) {\n                    goto lab_0x4065a1;\n                } else {\n                    int32_t strcmp_rc = strcmp(str3, str4); // 0x40677e\n                    v5 = strcmp_rc;\n                    v3 = str2;\n                    if (strcmp_rc == 0) {\n                        // 0x406787\n                        if (result != str2) {\n                            // 0x406790\n                            free((int64_t *)str2);\n                        }\n                        // 0x4065f2\n                        return result;\n                    }\n                    goto lab_0x40674d;\n                }\n            } else {\n                // 0x406727\n                free((int64_t *)str2);\n                v6 = 0;\n                result2 = v1;\n                v2 = 0;\n                v4 = 0;\n                if (result == 0) {\n                    goto lab_0x4065a1;\n                } else {\n                    goto lab_0x406734;\n                }\n            }\n        }\n    } else {\n        int64_t v9 = (int64_t)a2;\n        v6 = v9;\n        result2 = a2 == NULL ? v1 : v9;\n        v2 = 0;\n        v4 = v9;\n        goto lab_0x4065a1;\n    }\n  lab_0x4065a1:;\n    int32_t strcmp_rc2 = strcmp(str3, str4); // 0x4065a7\n    if (strcmp_rc2 == 0) {\n        // 0x4065f2\n        return result2;\n    }\n    char v10 = strcmp_rc2;\n    char v11 = v10; // 0x4065bf\n    int64_t v12 = v6; // 0x4065bf\n    int64_t v13 = 0; // 0x4065bf\n    int64_t v14 = result2; // 0x4065bf\n    int64_t v15 = v2; // 0x4065bf\n    int64_t v16 = v4; // 0x4065bf\n    int64_t v17 = v2; // 0x4065bf\n    if (v10 != 0) {\n        goto lab_0x4065e2;\n    } else {\n        goto lab_0x4065c1;\n    }\n  lab_0x406734:;\n    int32_t strcmp_rc3 = strcmp(str3, str4); // 0x40673a\n    v5 = strcmp_rc3;\n    v3 = 0;\n    if (strcmp_rc3 == 0) {\n        // 0x4065f2\n        return result;\n    }\n    goto lab_0x40674d;\n  lab_0x4065e2:;\n    int64_t result4 = (int64_t)str3; // 0x40656e\n    int64_t result3 = result4; // 0x4065e8\n    int64_t v21 = v17; // 0x4065e8\n    if (v17 == 0) {\n        // 0x4065f2\n        return result4;\n    }\n    goto lab_0x4065ea;\n  lab_0x4065c1:\n    // 0x4065c1\n    if (v11 == 0 || v12 == 0) {\n        // 0x406618\n        if (v11 != 0 == (v16 != 0)) {\n            goto lab_0x4065d5;\n        } else {\n            int32_t len2 = strlen(str3); // 0x40662f\n            char * str5 = (char *)v14; // 0x40663a\n            int64_t result5 = function_409160((int64_t)len2 + 4 + (int64_t)strlen(str5)); // 0x406644\n            __sprintf_chk((char *)result5, 1, -1, \"%s (%s)\", str3, str5);\n            if (v13 != 0) {\n                // 0x406672\n                free((int64_t *)v13);\n            }\n            // 0x40667a\n            result3 = result5;\n            v21 = v15;\n            if (v15 == 0) {\n                // 0x4065f2\n                return result5;\n            }\n            goto lab_0x4065ea;\n        }\n    } else {\n        goto lab_0x4065d5;\n    }\n  lab_0x40674d:;\n    char v18 = v5;\n    v11 = v18;\n    v12 = result;\n    v13 = result;\n    v14 = result;\n    v15 = v3;\n    v16 = v3;\n    int64_t v19 = result; // 0x40675a\n    int64_t v20 = v3; // 0x40675a\n    if (v18 != 0) {\n        goto lab_0x4065da;\n    } else {\n        goto lab_0x4065c1;\n    }\n  lab_0x4065ea:\n    // 0x4065ea\n    free((int64_t *)v21);\n    // 0x4065f2\n    return result3;\n  lab_0x4065d5:\n    // 0x4065d5\n    v19 = v13;\n    v20 = v15;\n    v17 = v15;\n    if (v13 == 0) {\n        goto lab_0x4065e2;\n    } else {\n        goto lab_0x4065da;\n    }\n  lab_0x4065da:\n    // 0x4065da\n    free((int64_t *)v19);\n    v17 = v20;\n    goto lab_0x4065e2;\n}\n"
        },
        {
            "funcName": "function_4067d0",
            "funcStartAddr": "4067d0",
            "funcEndAddr": "4068c2",
            "decompiledFuncCode": "int64_t function_4067d0(int64_t * a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4067e4\n    if ((int64_t *)v1 != a1) {\n        // 0x4067f1\n        return (int64_t)v1;\n    }\n    int64_t v2 = function_418b40(); // 0x406800\n    char v3 = *(char *)v2 & -33;\n    int64_t result; // 0x4068b6\n    if (v3 == 85) {\n        // 0x406810\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4068a8\n            result = (int32_t)a2 != 9 ? (int64_t)&g12 : (int64_t)&g5;\n            return result;\n        }\n        char v4 = *v1; // 0x40683e\n        int64_t result2 = v4 != 96 ? (int64_t)&g14 : (int64_t)&g17; // 0x40684b\n        // 0x4067f1\n        return result2;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4068a8\n        result = (int32_t)a2 != 9 ? (int64_t)&g12 : (int64_t)&g5;\n        return result;\n    }\n    char v5 = *v1; // 0x40688d\n    int64_t result3 = v5 != 96 ? (int64_t)&g15 : (int64_t)&g16; // 0x40689a\n    // 0x4067f1\n    return result3;\n}\n"
        },
        {
            "funcName": "function_4068d0",
            "funcStartAddr": "4068d0",
            "funcEndAddr": "406927",
            "decompiledFuncCode": "int64_t function_4068d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x4068d0\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_406927",
            "funcStartAddr": "406927",
            "funcEndAddr": "407af1",
            "decompiledFuncCode": "int64_t function_406927(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x406971\n    int64_t v3 = 0; // 0x406971\n    int64_t v4; // 0x406927\n    int64_t v5; // 0x406927\n    int64_t v6; // 0x406927\n    int64_t v7; // 0x406927\n    int64_t v8; // 0x406927\n    int64_t v9; // 0x406927\n    int64_t v10; // 0x406927\n    int64_t v11; // 0x406927\n    int64_t v12; // 0x406927\n    int64_t v13; // 0x406927\n    int64_t v14; // 0x406927\n    int64_t v15; // 0x406927\n    int64_t v16; // 0x406927\n    int64_t v17; // 0x406927\n    int64_t v18; // 0x406927\n    int64_t result; // 0x406927\n    int64_t v19; // 0x406927\n    int32_t wc; // bp+132, 0x406927\n    int64_t ps; // bp+136, 0x406927\n    char v20; // 0x406ee0\n    int64_t v21; // 0x406ee0\n    int64_t v22; // 0x407288\n    int64_t v23; // 0x406927\n    int64_t v24; // 0x4072a7\n    int32_t v25; // 0x406927\n    while (true) {\n      lab_0x406978_2:\n        // 0x406978\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x406927\n        int64_t v27; // 0x4069ac\n        while (true) {\n          lab_0x406978:\n            // 0x406978\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x406983\n            if (v15 == -1) {\n                // 0x406985\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x406993\n            if (v28) {\n                // break (via goto) -> 0x4070f8\n                goto lab_0x4070f8;\n            }\n            // 0x40699c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g135 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x406f8b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x406ad1;\n                    }\n                    // 0x4073ad\n                    v26 = v5 + 1;\n                    goto lab_0x406978;\n                }\n                case 7: {\n                    goto lab_0x406ad1;\n                }\n                case 8: {\n                    goto lab_0x406ad1;\n                }\n                case 9: {\n                    goto lab_0x406cea_2;\n                }\n                case 10: {\n                    goto lab_0x406cea_2;\n                }\n                case 11: {\n                    goto lab_0x406ad1;\n                }\n                case 12: {\n                    goto lab_0x406ad1;\n                }\n                case 13: {\n                    goto lab_0x406cea_2;\n                }\n                case 32: {\n                    goto lab_0x406cea_2;\n                }\n                case 33: {\n                    goto lab_0x406cea_2;\n                }\n                case 34: {\n                    goto lab_0x406cea_2;\n                }\n                case 35: {\n                    goto lab_0x406a9d;\n                }\n                case 36: {\n                    goto lab_0x406cea_2;\n                }\n                case 37: {\n                    goto lab_0x406ad1;\n                }\n                case 38: {\n                    goto lab_0x406cea_2;\n                }\n                case 39: {\n                    goto lab_0x406cea_2;\n                }\n                case 40: {\n                    goto lab_0x406cea_2;\n                }\n                case 41: {\n                    goto lab_0x406cea_2;\n                }\n                case 42: {\n                    goto lab_0x406cea_2;\n                }\n                case 43: {\n                    goto lab_0x406ad1;\n                }\n                case 44: {\n                    goto lab_0x406ad1;\n                }\n                case 45: {\n                    goto lab_0x406ad1;\n                }\n                case 46: {\n                    goto lab_0x406ad1;\n                }\n                case 47: {\n                    goto lab_0x406ad1;\n                }\n                case 48: {\n                    goto lab_0x406ad1;\n                }\n                case 49: {\n                    goto lab_0x406ad1;\n                }\n                case 50: {\n                    goto lab_0x406ad1;\n                }\n                case 51: {\n                    goto lab_0x406ad1;\n                }\n                case 52: {\n                    goto lab_0x406ad1;\n                }\n                case 53: {\n                    goto lab_0x406ad1;\n                }\n                case 54: {\n                    goto lab_0x406ad1;\n                }\n                case 55: {\n                    goto lab_0x406ad1;\n                }\n                case 56: {\n                    goto lab_0x406ad1;\n                }\n                case 57: {\n                    goto lab_0x406ad1;\n                }\n                case 58: {\n                    goto lab_0x406ad1;\n                }\n                case 59: {\n                    goto lab_0x406cea_2;\n                }\n                case 60: {\n                    goto lab_0x406cea_2;\n                }\n                case 61: {\n                    goto lab_0x406cea_2;\n                }\n                case 62: {\n                    goto lab_0x406cea_2;\n                }\n                case 63: {\n                    goto lab_0x406cea_2;\n                }\n                case 65: {\n                    goto lab_0x406ad1;\n                }\n                case 66: {\n                    goto lab_0x406ad1;\n                }\n                case 67: {\n                    goto lab_0x406ad1;\n                }\n                case 68: {\n                    goto lab_0x406ad1;\n                }\n                case 69: {\n                    goto lab_0x406ad1;\n                }\n                case 70: {\n                    goto lab_0x406ad1;\n                }\n                case 71: {\n                    goto lab_0x406ad1;\n                }\n                case 72: {\n                    goto lab_0x406ad1;\n                }\n                case 73: {\n                    goto lab_0x406ad1;\n                }\n                case 74: {\n                    goto lab_0x406ad1;\n                }\n                case 75: {\n                    goto lab_0x406ad1;\n                }\n                case 76: {\n                    goto lab_0x406ad1;\n                }\n                case 77: {\n                    goto lab_0x406ad1;\n                }\n                case 78: {\n                    goto lab_0x406ad1;\n                }\n                case 79: {\n                    goto lab_0x406ad1;\n                }\n                case 80: {\n                    goto lab_0x406ad1;\n                }\n                case 81: {\n                    goto lab_0x406ad1;\n                }\n                case 82: {\n                    goto lab_0x406ad1;\n                }\n                case 83: {\n                    goto lab_0x406ad1;\n                }\n                case 84: {\n                    goto lab_0x406ad1;\n                }\n                case 85: {\n                    goto lab_0x406ad1;\n                }\n                case 86: {\n                    goto lab_0x406ad1;\n                }\n                case 87: {\n                    goto lab_0x406ad1;\n                }\n                case 88: {\n                    goto lab_0x406ad1;\n                }\n                case 89: {\n                    goto lab_0x406ad1;\n                }\n                case 90: {\n                    goto lab_0x406ad1;\n                }\n                case 91: {\n                    goto lab_0x406cea_2;\n                }\n                case 92: {\n                    goto lab_0x406cea_2;\n                }\n                case 93: {\n                    goto lab_0x406ad1;\n                }\n                case 94: {\n                    goto lab_0x406cea_2;\n                }\n                case 95: {\n                    goto lab_0x406ad1;\n                }\n                case 96: {\n                    goto lab_0x406cea_2;\n                }\n                case 97: {\n                    goto lab_0x406ad1;\n                }\n                case 98: {\n                    goto lab_0x406ad1;\n                }\n                case 99: {\n                    goto lab_0x406ad1;\n                }\n                case 100: {\n                    goto lab_0x406ad1;\n                }\n                case 101: {\n                    goto lab_0x406ad1;\n                }\n                case 102: {\n                    goto lab_0x406ad1;\n                }\n                case 103: {\n                    goto lab_0x406ad1;\n                }\n                case 104: {\n                    goto lab_0x406ad1;\n                }\n                case 105: {\n                    goto lab_0x406ad1;\n                }\n                case 106: {\n                    goto lab_0x406ad1;\n                }\n                case 107: {\n                    goto lab_0x406ad1;\n                }\n                case 108: {\n                    goto lab_0x406ad1;\n                }\n                case 109: {\n                    goto lab_0x406ad1;\n                }\n                case 110: {\n                    goto lab_0x406ad1;\n                }\n                case 111: {\n                    goto lab_0x406ad1;\n                }\n                case 112: {\n                    goto lab_0x406ad1;\n                }\n                case 113: {\n                    goto lab_0x406ad1;\n                }\n                case 114: {\n                    goto lab_0x406ad1;\n                }\n                case 115: {\n                    goto lab_0x406ad1;\n                }\n                case 116: {\n                    goto lab_0x406ad1;\n                }\n                case 117: {\n                    goto lab_0x406ad1;\n                }\n                case 118: {\n                    goto lab_0x406ad1;\n                }\n                case 119: {\n                    goto lab_0x406ad1;\n                }\n                case 120: {\n                    goto lab_0x406ad1;\n                }\n                case 121: {\n                    goto lab_0x406ad1;\n                }\n                case 122: {\n                    goto lab_0x406ad1;\n                }\n                case 123: {\n                    goto lab_0x406a75;\n                }\n                case 124: {\n                    goto lab_0x406cea_2;\n                }\n                case 125: {\n                    goto lab_0x406a75;\n                }\n                case 126: {\n                    goto lab_0x406a9d;\n                }\n                default: {\n                    goto lab_0x406e75;\n                }\n            }\n        }\n      lab_0x406e75:\n        if (v23 != 1) {\n            // 0x4071e0\n            ps = 0;\n            int64_t len = v15; // 0x4071f0\n            if (v15 == -1) {\n                // 0x4071f2\n                len = strlen((char *)str);\n            }\n            // 0x40721e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40727f:\n                // 0x40727f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x407284\n                int64_t v30 = v29 + str;\n                v24 = function_40ab50((int64_t *)&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4077fa_2;\n                    }\n                    case -1: {\n                        goto lab_0x4077fa_2;\n                    }\n                    case -2: {\n                        // 0x4078dd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x407917\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40791a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x407927\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x407920\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4077fa\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4077fa_2;\n                    }\n                    case 1: {\n                        goto lab_0x407250;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4072fc\n                        char v34 = *(char *)v33; // 0x40730d\n                        unsigned char v35; // 0x406927\n                        if (v34 < 125) {\n                            // 0x407318\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40732f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                goto lab_0x406cea_2;\n                            }\n                        }\n                        // 0x407300\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40730d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x407318\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40732f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    goto lab_0x406cea_2;\n                                }\n                            }\n                            // 0x407300\n                            v33++;\n                        }\n                        goto lab_0x407250;\n                    }\n                }\n            }\n            goto lab_0x4077fa_2;\n        } else {\n            // 0x406ec4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x406ad1;\n        }\n    }\n  lab_0x4070f8:\n    // 0x4070f8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4079fa\n        if (v8 > result) {\n            // 0x407a03\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x406d27\n        return result;\n    }\n    goto lab_0x406cea_2;\n  lab_0x406ad1:;\n    int64_t v56 = v13;\n    int64_t v57 = v9;\n    int64_t v58 = v16;\n    if (v23 != 0) {\n        // 0x406ae0\n        v4 = v58;\n        v6 = v57;\n        v10 = v56;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x406cea_2;\n        }\n    }\n    int64_t v42 = result; // 0x406be1\n    char v43 = v20; // 0x406be1\n    int64_t v44 = v58; // 0x406be1\n    v3 = v5 + 1;\n    int64_t v45 = v57; // 0x406be1\n    int64_t v46 = v56; // 0x406be1\n    goto lab_0x406b5d;\n  lab_0x406cea_2:;\n    // 0x406d27\n    char * v36; // 0x406927\n    return function_4068d0(v10, v6, str, v4, 2, v25 & -3, 0, (int64_t)v36, (int64_t)v36);\n  lab_0x4077fa_2:;\n    uint64_t v37 = v19;\n    int64_t v38 = 0x100000000 * v8 >> 32;\n    int64_t v39 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v38;\n    v13 = v39;\n    if (v37 < 2) {\n        goto lab_0x406ad1;\n    } else {\n        uint64_t v40 = v37 + v5; // 0x4073ce\n        int64_t v41 = v5 + 1; // 0x4074b1\n        v42 = result;\n        v43 = v20;\n        v44 = v22;\n        v3 = v41;\n        v45 = v38;\n        v46 = v39;\n        int64_t v47 = v41; // 0x4074b8\n        char v48 = v20; // 0x4074b8\n        int64_t v49 = result; // 0x4074b8\n        if (v41 < v40) {\n            uint64_t v50 = v49;\n            if (v38 > v50) {\n                // 0x407481\n                *(char *)(v50 + v39) = v48;\n            }\n            char v51 = *(char *)(v47 + str); // 0x407485\n            int64_t v52 = v50 + 1; // 0x40748a\n            int64_t v53 = v47 + 1; // 0x4074b1\n            v42 = v52;\n            v43 = v51;\n            v44 = v22;\n            v3 = v53;\n            v45 = v38;\n            v46 = v39;\n            v47 = v53;\n            while (v53 < v40) {\n                // 0x40747c\n                v50 = v52;\n                if (v38 > v50) {\n                    // 0x407481\n                    *(char *)(v50 + v39) = v51;\n                }\n                // 0x407485\n                v51 = *(char *)(v47 + str);\n                v52 = v50 + 1;\n                v53 = v47 + 1;\n                v42 = v52;\n                v43 = v51;\n                v44 = v22;\n                v3 = v53;\n                v45 = v38;\n                v46 = v39;\n                v47 = v53;\n            }\n        }\n        goto lab_0x406b5d;\n    }\n  lab_0x407250:\n    // 0x407250\n    iswprint(wc);\n    int64_t v54 = v24 + v18; // 0x40726f\n    int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x407272\n    v17 = v54;\n    v19 = v54;\n    if (v55 != 0) {\n        // break -> 0x4077fa\n        goto lab_0x4077fa_2;\n    }\n    goto lab_0x40727f;\n  lab_0x406a9d:\n    // 0x406a9d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x406cea_2;\n    }\n    goto lab_0x406ad1;\n  lab_0x406a75:;\n    bool v61 = v15 == 1; // 0x406a80\n    if (v15 == -1) {\n        // 0x406a82\n        v61 = *(char *)v1 == 0;\n    }\n    // 0x406a8e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v61) {\n        goto lab_0x406ad1;\n    } else {\n        goto lab_0x406a9d;\n    }\n  lab_0x406b5d:;\n    int64_t v59 = v46;\n    uint64_t v60 = v42;\n    if (v60 < v45) {\n        // 0x406b62\n        *(char *)(v59 + v60) = v43;\n    }\n    // 0x406b66\n    v2 = v60 + 1;\n    v14 = v44;\n    v7 = v45;\n    v11 = v59;\n    goto lab_0x406978_2;\n}\n"
        },
        {
            "funcName": "function_407b00",
            "funcStartAddr": "407b00",
            "funcEndAddr": "407c9e",
            "decompiledFuncCode": "int64_t function_407b00(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x407b02\n    int32_t * v3 = __errno_location(); // 0x407b1c\n    int64_t v4 = (int64_t)g39; // 0x407b21\n    int32_t v5 = *v3; // 0x407b2b\n    int64_t v6 = v4; // 0x407b41\n    if (v2 >= (int64_t)*(int32_t *)&g42) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x407c99\n            function_4093b0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x407b50\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x407b57\n        int64_t v9; // 0x407b00\n        if (g39 == &g40) {\n            int64_t v10 = function_4091c0(0, v8); // 0x407c7a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g40); // 0x407c7f\n            *(int64_t *)&g39 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4091c0(v4, v8); // 0x407b6b\n            *(int64_t *)&g39 = v12;\n            v9 = v12;\n        }\n        // 0x407b7a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g42; // 0x407b7a\n        int32_t v14 = v7; // 0x407b81\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g42 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x407bb1\n    int64_t v17 = v15 + 8; // 0x407bb4\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x407bbb\n    int64_t * v19 = (int64_t *)v16; // 0x407bbe\n    uint64_t v20 = *v19; // 0x407bbe\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x407bc1\n    int64_t result = *v21; // 0x407bc1\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x407bcc\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x407bd5\n    int64_t v24; // 0x407b00\n    uint64_t v25 = function_4068d0(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x407be4\n    if (v20 > v25) {\n        // 0x407c5b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x407bf7\n    *v19 = v26;\n    if (result != (int64_t)&g113) {\n        // 0x407c07\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_409160(v26); // 0x407c21\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x407c3b\n    int64_t v28 = *v23; // 0x407c3e\n    int64_t v29; // 0x407b00\n    function_4068d0(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x407c5b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407ca0",
            "funcStartAddr": "407ca0",
            "funcEndAddr": "407cd4",
            "decompiledFuncCode": "int64_t function_407ca0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x407ca7\n    int64_t result = function_409360(a1 == 0 ? (int64_t)&g114 : a1, 56); // 0x407cc6\n    return result;\n}\n"
        },
        {
            "funcName": "function_407ce0",
            "funcStartAddr": "407ce0",
            "funcEndAddr": "407cef",
            "decompiledFuncCode": "int64_t function_407ce0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g114 : a1); // 0x407cec\n    return result;\n}\n"
        },
        {
            "funcName": "function_407cf0",
            "funcStartAddr": "407cf0",
            "funcEndAddr": "407cff",
            "decompiledFuncCode": "int64_t function_407cf0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g114 : a1; // 0x407cf8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g114;\n}\n"
        },
        {
            "funcName": "function_407d00",
            "funcStartAddr": "407d00",
            "funcEndAddr": "407d33",
            "decompiledFuncCode": "int64_t function_407d00(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g114 + 8 : a1 + 8; // 0x407d19\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x407d1e\n    uint32_t v3 = *v2; // 0x407d1e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x407d22\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_407d40",
            "funcStartAddr": "407d40",
            "funcEndAddr": "407d53",
            "decompiledFuncCode": "int64_t function_407d40(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g114 + 4 : a1 + 4); // 0x407d4c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_407d60",
            "funcStartAddr": "407d60",
            "funcEndAddr": "407d8b",
            "decompiledFuncCode": "int64_t function_407d60(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g114 : a1; // 0x407d68\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x407d85\n        abort();\n        // UNREACHABLE\n    }\n    // 0x407d7c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g114;\n}\n"
        },
        {
            "funcName": "function_407d90",
            "funcStartAddr": "407d90",
            "funcEndAddr": "407e02",
            "decompiledFuncCode": "int64_t function_407d90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g114 : a5; // 0x407db2\n    int32_t * v2 = __errno_location(); // 0x407dbb\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x407dd4\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x407dd8\n    uint32_t v5 = *(int32_t *)v1; // 0x407ddb\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x407de1\n    int64_t result = function_4068d0(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x407dea\n    return result;\n}\n"
        },
        {
            "funcName": "function_407e10",
            "funcStartAddr": "407e10",
            "funcEndAddr": "407ef1",
            "decompiledFuncCode": "int64_t function_407e10(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g114 : a4; // 0x407e32\n    int32_t * v2 = __errno_location(); // 0x407e38\n    int64_t v3 = v1 + 8; // 0x407e4f\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x407e57\n    int32_t * v5 = (int32_t *)v1; // 0x407e5a\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x407e68\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x407e6b\n    int64_t v8 = function_4068d0(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x407e75\n    int64_t v9 = v8 + 1; // 0x407e7a\n    int64_t result = function_409160(v9); // 0x407e8f\n    function_4068d0(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x407ed4\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x407edd\n    return result;\n}\n"
        },
        {
            "funcName": "function_407f00",
            "funcStartAddr": "407f00",
            "funcEndAddr": "407f0a",
            "decompiledFuncCode": "int64_t function_407f00(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407f00\n    return function_407e10(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_407f10",
            "funcStartAddr": "407f10",
            "funcEndAddr": "407fa5",
            "decompiledFuncCode": "int64_t function_407f10(void) {\n    uint32_t v1 = *(int32_t *)&g42; // 0x407f10\n    int64_t v2 = v1; // 0x407f10\n    int64_t v3 = v2; // 0x407f24\n    if (v1 >= 2) {\n        int64_t v4 = &g42;\n        int64_t v5 = v4 + 16; // 0x407f43\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g127;\n        while (v5 != (int64_t)g39 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x407f40\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g127;\n        }\n    }\n    int64_t v6 = v3; // 0x407f5d\n    if (g40 != 0x623b40) {\n        // 0x407f5f\n        free((int64_t *)g40);\n        g40 = 256;\n        *(int64_t *)&g41 = (int64_t)&g113;\n        v6 = &g127;\n    }\n    int64_t result = v6; // 0x407f81\n    if (g39 != &g40) {\n        // 0x407f83\n        free(g39);\n        *(int64_t *)&g39 = (int64_t)&g40;\n        result = &g127;\n    }\n    // 0x407f96\n    *(int32_t *)&g42 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407fb0",
            "funcStartAddr": "407fb0",
            "funcEndAddr": "407fc1",
            "decompiledFuncCode": "int64_t function_407fb0(void) {\n    // 0x407fb0\n    int64_t v1; // 0x407fb0\n    return function_407b00(v1, v1, -1, (int64_t *)&g114);\n}\n"
        },
        {
            "funcName": "function_407fd0",
            "funcStartAddr": "407fd0",
            "funcEndAddr": "407fda",
            "decompiledFuncCode": "int64_t function_407fd0(void) {\n    // 0x407fd0\n    int64_t v1; // 0x407fd0\n    return function_407b00(v1, v1, v1, (int64_t *)&g114);\n}\n"
        },
        {
            "funcName": "function_407fe0",
            "funcStartAddr": "407fe0",
            "funcEndAddr": "407ff6",
            "decompiledFuncCode": "int64_t function_407fe0(int64_t a1) {\n    // 0x407fe0\n    return function_407b00(0, a1, -1, (int64_t *)&g114);\n}\n"
        },
        {
            "funcName": "function_408000",
            "funcStartAddr": "408000",
            "funcEndAddr": "408012",
            "decompiledFuncCode": "int64_t function_408000(int64_t a1, int64_t a2) {\n    // 0x408000\n    return function_407b00(0, a1, a2, (int64_t *)&g114);\n}\n"
        },
        {
            "funcName": "function_408020",
            "funcStartAddr": "408020",
            "funcEndAddr": "408088",
            "decompiledFuncCode": "int64_t function_408020(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x408030\n    return function_407b00((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_408090",
            "funcStartAddr": "408090",
            "funcEndAddr": "4080f4",
            "decompiledFuncCode": "int64_t function_408090(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4080a0\n    return function_407b00((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_408100",
            "funcStartAddr": "408100",
            "funcEndAddr": "40810c",
            "decompiledFuncCode": "int64_t function_408100(int64_t a1, int64_t a2) {\n    // 0x408100\n    return function_408020(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_408110",
            "funcStartAddr": "408110",
            "funcEndAddr": "40811f",
            "decompiledFuncCode": "int64_t function_408110(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408110\n    return function_408090(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_408120",
            "funcStartAddr": "408120",
            "funcEndAddr": "408190",
            "decompiledFuncCode": "int64_t function_408120(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g114); // 0x40812d\n    int128_t v2 = __asm_movdqa(g115); // 0x408135\n    int128_t v3 = __asm_movdqa(g116); // 0x40813d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x408152\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x408168\n    uint32_t v6 = *v5; // 0x408168\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40816d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_407b00(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_408190",
            "funcStartAddr": "408190",
            "funcEndAddr": "40819d",
            "decompiledFuncCode": "int64_t function_408190(int64_t a1, int64_t a2) {\n    // 0x408190\n    return function_408120(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4081a0",
            "funcStartAddr": "4081a0",
            "funcEndAddr": "4081b1",
            "decompiledFuncCode": "int64_t function_4081a0(int64_t a1) {\n    // 0x4081a0\n    return function_408120(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4081c0",
            "funcStartAddr": "4081c0",
            "funcEndAddr": "4081ca",
            "decompiledFuncCode": "int64_t function_4081c0(void) {\n    // 0x4081c0\n    int64_t v1; // 0x4081c0\n    return function_408120(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_4081d0",
            "funcStartAddr": "4081d0",
            "funcEndAddr": "40823e",
            "decompiledFuncCode": "int64_t function_4081d0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4081ea\n    return function_407b00((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_408240",
            "funcStartAddr": "408240",
            "funcEndAddr": "4082ac",
            "decompiledFuncCode": "int64_t function_408240(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g114); // 0x408247\n    int128_t v2 = __asm_movdqa(g115); // 0x40824f\n    int128_t v3 = __asm_movdqa(g116); // 0x408257\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x408279\n    if (a2 == 0 || a3 == 0) {\n        // 0x4082a7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40828a\n    return function_407b00(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4082b0",
            "funcStartAddr": "4082b0",
            "funcEndAddr": "4082b9",
            "decompiledFuncCode": "int64_t function_4082b0(void) {\n    // 0x4082b0\n    int64_t v1; // 0x4082b0\n    return function_408240(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4082c0",
            "funcStartAddr": "4082c0",
            "funcEndAddr": "4082d7",
            "decompiledFuncCode": "int64_t function_4082c0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4082c0\n    return function_408240(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4082e0",
            "funcStartAddr": "4082e0",
            "funcEndAddr": "4082f3",
            "decompiledFuncCode": "int64_t function_4082e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4082e0\n    return function_408240(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_408300",
            "funcStartAddr": "408300",
            "funcEndAddr": "40830a",
            "decompiledFuncCode": "int64_t function_408300(void) {\n    // 0x408300\n    int64_t v1; // 0x408300\n    return function_407b00(v1, v1, v1, &g38);\n}\n"
        },
        {
            "funcName": "function_408310",
            "funcStartAddr": "408310",
            "funcEndAddr": "408322",
            "decompiledFuncCode": "int64_t function_408310(int64_t a1, int64_t a2) {\n    // 0x408310\n    return function_407b00(0, a1, a2, &g38);\n}\n"
        },
        {
            "funcName": "function_408330",
            "funcStartAddr": "408330",
            "funcEndAddr": "408341",
            "decompiledFuncCode": "int64_t function_408330(int64_t a1, int64_t a2) {\n    // 0x408330\n    return function_407b00(a1, a2, -1, &g38);\n}\n"
        },
        {
            "funcName": "function_408350",
            "funcStartAddr": "408350",
            "funcEndAddr": "408366",
            "decompiledFuncCode": "int64_t function_408350(int64_t a1) {\n    // 0x408350\n    return function_407b00(0, a1, -1, &g38);\n}\n"
        },
        {
            "funcName": "function_408370",
            "funcStartAddr": "408370",
            "funcEndAddr": "408503",
            "decompiledFuncCode": "int64_t function_408370(int64_t a1, int64_t * a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x408389\n    int64_t v1; // bp-200, 0x408370\n    int32_t v2 = __fxstat(1, fileno(stream), (struct stat *)&v1); // 0x40839a\n    int64_t v3 = 0x2000; // 0x4083a1\n    int32_t v4; // 0x408370\n    if ((v4 & 0xf000) == 0x8000 == v2 > -1) {\n        int32_t v5 = ftello(stream); // 0x4084c3\n        int64_t v6 = v5; // 0x4084c3\n        v3 = 0x2000;\n        int64_t v7; // 0x408370\n        if (v5 > -1 == v7 > v6) {\n            // 0x4084df\n            v3 = v7 + 1 - v6;\n        }\n    }\n    int32_t size = v3;\n    int64_t * mem = malloc(size); // 0x4083bf\n    int64_t result = (int64_t)mem; // 0x4083bf\n    if (mem == NULL) {\n        // 0x408469\n        return result;\n    }\n    int64_t items_read = fread(mem, 1, size, stream); // 0x40842b\n    int64_t v8 = v3; // 0x408436\n    int64_t v9 = v3; // 0x408436\n    int64_t v10 = result; // 0x408436\n    int64_t v11 = items_read; // 0x408436\n    int64_t * v12; // 0x408370\n    int32_t * v13; // 0x408370\n    int32_t v14; // 0x408370\n    if (v3 != items_read) {\n      lab_0x408438:;\n        int32_t * v15 = __errno_location(); // 0x408438\n        if (ferror(stream) == 0) {\n            int64_t result2 = v10; // 0x408456\n            if (v9 - 1 > v11) {\n                int64_t * mem2 = realloc((int64_t *)v10, (int32_t)v11 + 1); // 0x4084f2\n                result2 = mem2 != NULL ? (int64_t)mem2 : v10;\n            }\n            // 0x40845c\n            *(char *)(result2 + v11) = 0;\n            *a2 = v11;\n            // 0x408469\n            return result2;\n        }\n        // 0x408438\n        v12 = (int64_t *)v10;\n        v13 = v15;\n        v14 = *v15;\n        goto lab_0x40848b;\n      lab_0x40848b:\n        // 0x40848b\n        free(v12);\n        *v13 = v14;\n        // 0x408469\n        return 0;\n    }\n    int64_t v16 = v3; // 0x4083ff\n    int64_t v17 = result;\n    while (v16 != -1) {\n        uint64_t v18 = v16 / 2; // 0x4083f0\n        v16 += v18;\n        int64_t * v19 = (int64_t *)v17;\n        int64_t * mem3 = realloc(v19, (int32_t)v16); // 0x408409\n        if (mem3 == NULL) {\n            int32_t * v20 = __errno_location(); // 0x408480\n            v12 = v19;\n            v13 = v20;\n            v14 = *v20;\n            goto lab_0x40848b;\n        }\n        int64_t v21 = (int64_t)mem3;\n        int64_t nmemb = v16 - v8; // 0x408425\n        int64_t items_read2 = fread((int64_t *)(v8 + v21), 1, (int32_t)nmemb, stream); // 0x40842b\n        v8 += items_read2;\n        v9 = v16;\n        v10 = v21;\n        v11 = v8;\n        if (nmemb != items_read2) {\n            goto lab_0x408438;\n        }\n        v17 = v21;\n    }\n    int32_t * v22 = __errno_location(); // 0x4084a0\n    free((int64_t *)v17);\n    *v22 = 12;\n    // 0x408469\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408510",
            "funcStartAddr": "408510",
            "funcEndAddr": "408595",
            "decompiledFuncCode": "int64_t function_408510(int64_t file_path, int64_t a2, int64_t * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, (char *)mode); // 0x408520\n    if (file == NULL) {\n        // 0x408552\n        return 0;\n    }\n    int64_t v1 = (int64_t)file; // 0x408520\n    int64_t result = function_408370(v1, (int64_t *)a2); // 0x408533\n    int32_t * v2 = __errno_location(); // 0x40853b\n    if ((int32_t)function_409bc0(v1, a2) == 0) {\n        // 0x408552\n        return result;\n    }\n    int32_t v3 = *v2; // 0x408573\n    if (result != 0) {\n        // 0x408575\n        v3 = *v2;\n        free((int64_t *)result);\n    }\n    // 0x408581\n    *v2 = v3;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4085a0",
            "funcStartAddr": "4085a0",
            "funcEndAddr": "4085aa",
            "decompiledFuncCode": "int64_t function_4085a0(int64_t a1, int64_t * a2) {\n    // 0x4085a0\n    return function_408510(a1, (int64_t)a2, (int64_t *)\"r\");\n}\n"
        },
        {
            "funcName": "function_4085b0",
            "funcStartAddr": "4085b0",
            "funcEndAddr": "4085ba",
            "decompiledFuncCode": "int64_t function_4085b0(void) {\n    // 0x4085b0\n    int64_t v1; // 0x4085b0\n    return function_408510(v1, v1, (int64_t *)\"rb\");\n}\n"
        },
        {
            "funcName": "function_4085c0",
            "funcStartAddr": "4085c0",
            "funcEndAddr": "4085f1",
            "decompiledFuncCode": "int64_t function_4085c0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40abd0(a1, 0, a2); // 0x4085d1\n    return v1 != 0 ? 1 - a1 + v1 : a2;\n}\n"
        },
        {
            "funcName": "function_408600",
            "funcStartAddr": "408600",
            "funcEndAddr": "408620",
            "decompiledFuncCode": "int64_t function_408600(void) {\n    // 0x408600\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbiter.h\", 170, \"mbiter_multi_next\");\n    return &g127;\n}\n"
        },
        {
            "funcName": "function_408620",
            "funcStartAddr": "408620",
            "funcEndAddr": "408f9d",
            "decompiledFuncCode": "int64_t function_408620(int64_t str, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    char * v1 = strdup((char *)str); // 0x408630\n    if (v1 == NULL) {\n        // 0x408b80\n        function_4093b0(str);\n        // UNREACHABLE\n    }\n    int64_t result = (int64_t)v1; // 0x408630\n    int32_t v2 = a2;\n    if (__ctype_get_mb_cur_max() < 2) {\n        if (v2 != 0) {\n            char v3 = *v1; // 0x408884\n            int64_t v4 = result; // 0x40888b\n            if (v3 != 0) {\n                int16_t * v5 = *__ctype_b_loc(); // 0x408899\n                char v6 = v3; // 0x40889c\n                int64_t v7 = result; // 0x40889c\n                v4 = v7;\n                while ((*(char *)((int64_t)v5 + 1 + 2 * (int64_t)v6) & 32) != 0) {\n                    // 0x4088a0\n                    v7++;\n                    v6 = *(char *)v7;\n                    v4 = v7;\n                    if (v6 == 0) {\n                        // break -> 0x4088b4\n                        break;\n                    }\n                    v4 = v7;\n                }\n            }\n            int64_t str2 = v4;\n            memmove((int64_t *)v1, (int64_t *)str2, strlen((char *)str2) + 1);\n            if (v2 == 1) {\n              lab_0x40879a:\n                // 0x40879a\n                return result;\n            }\n        }\n        int64_t v8 = result;\n        int32_t v9 = *(int32_t *)v8; // 0x4088d7\n        int64_t v10 = v8 + 4; // 0x4088d9\n        int32_t v11 = v9 - 0x1010101 & (v9 ^ -0x7f7f7f80); // 0x4088e5\n        uint32_t v12 = v11 & -0x7f7f7f80; // 0x4088e7\n        while (v12 == 0) {\n            // 0x4088d7\n            v8 = v10;\n            v9 = *(int32_t *)v8;\n            v10 = v8 + 4;\n            v11 = v9 - 0x1010101 & (v9 ^ -0x7f7f7f80);\n            v12 = v11 & -0x7f7f7f80;\n        }\n        unsigned char v13 = (char)((v11 & 0x8080) == 0 ? v12 / 0x10000 : v12); // 0x408905\n        int64_t v14 = (-1 - v13 < v13 ? -5 : -4) + ((v11 & 0x8080) == 0 ? v8 + 6 : v10); // 0x40890c\n        if (v14 < result) {\n            // 0x40879a\n            return result;\n        }\n        int16_t * v15 = *__ctype_b_loc(); // 0x40891e\n        int64_t v16 = v14; // 0x408921\n        char * v17 = (char *)v16; // 0x408938\n        char v18 = *(char *)((int64_t)v15 + 1 + 2 * (int64_t)*v17); // 0x40893b\n        while ((v18 & 32) != 0) {\n            // 0x408928\n            *v17 = 0;\n            v16--;\n            if (v16 < result) {\n                // break -> 0x40879a\n                break;\n            }\n            v17 = (char *)v16;\n            v18 = *(char *)((int64_t)v15 + 1 + 2 * (int64_t)*v17);\n        }\n        // 0x40879a\n        return result;\n    }\n    // 0x408650\n    char * wc2; // 0x408620\n    int64_t v19; // 0x408620\n    int64_t v20; // 0x408620\n    int64_t v21; // 0x408620\n    int64_t v22; // 0x408620\n    char * v23; // 0x408620\n    char * v24; // 0x408620\n    int64_t ps; // bp-124, 0x408620\n    char v25; // 0x408620\n    char v26; // 0x408620\n    char v27; // 0x408620\n    char * wc; // bp-92, 0x408620\n    uint64_t v28; // 0x4089ef\n    if (v2 != 0) {\n        int64_t v29 = result;\n        int32_t v30 = *(int32_t *)v29; // 0x4089a8\n        int64_t v31 = v29 + 4; // 0x4089aa\n        int32_t v32 = v30 - 0x1010101 & (v30 ^ -0x7f7f7f80); // 0x4089b6\n        uint32_t v33 = v32 & -0x7f7f7f80; // 0x4089b8\n        while (v33 == 0) {\n            // 0x4089a8\n            v29 = v31;\n            v30 = *(int32_t *)v29;\n            v31 = v29 + 4;\n            v32 = v30 - 0x1010101 & (v30 ^ -0x7f7f7f80);\n            v33 = v32 & -0x7f7f7f80;\n        }\n        // 0x4089bf\n        ps = 0;\n        unsigned char v34 = (char)((v32 & 0x8080) == 0 ? v33 / 0x10000 : v33); // 0x4089ec\n        v28 = ((v32 & 0x8080) == 0 ? v29 + 6 : v31) - (-1 - v34 < v34 ? 4 : 3);\n        v21 = result;\n        if (v28 > result) {\n            // 0x408a72\n            v23 = v1;\n            v26 = 0;\n            v19 = result;\n            while (true) {\n              lab_0x408a72:\n                // 0x408a72\n                v20 = v19;\n                v24 = v23;\n                v27 = v26;\n                if (v26 == 0) {\n                    unsigned char v35 = *(char *)v20; // 0x408a08\n                    int32_t v36 = *(int32_t *)((int64_t)(4 * v35 / 32) + (int64_t)&g24); // 0x408a14\n                    if ((1 << (int32_t)(v35 % 32) & v36) == 0) {\n                        int32_t v37 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x408b0d\n                        v27 = 1;\n                        if (v37 == 0) {\n                            goto lab_0x408b85_2;\n                        }\n                        goto lab_0x408a79;\n                    } else {\n                        char * v38 = (char *)((int64_t)v35 & 0xffffffff); // 0x408a3c\n                        wc = v38;\n                        wc2 = v38;\n                        v25 = 0;\n                        v22 = 1;\n                        goto lab_0x408a45;\n                    }\n                } else {\n                    goto lab_0x408a79;\n                }\n            }\n          lab_0x408b38_3:\n            // 0x408b38\n            v21 = (int64_t)v24;\n        }\n      lab_0x408b38_2:;\n        int64_t str3 = v21;\n        memmove((int64_t *)v1, (int64_t *)str3, strlen((char *)str3) + 1);\n        if (v2 == 1) {\n            // 0x40879a\n            return result;\n        }\n    }\n    int64_t v39 = result;\n    int32_t v40 = *(int32_t *)v39; // 0x408660\n    int64_t v41 = v39 + 4; // 0x408663\n    int32_t v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80); // 0x40866f\n    uint32_t v43 = v42 & -0x7f7f7f80; // 0x408671\n    while (v43 == 0) {\n        // 0x408660\n        v39 = v41;\n        v40 = *(int32_t *)v39;\n        v41 = v39 + 4;\n        v42 = v40 - 0x1010101 & (v40 ^ -0x7f7f7f80);\n        v43 = v42 & -0x7f7f7f80;\n    }\n    // 0x408678\n    ps = 0;\n    unsigned char v44 = (char)((v42 & 0x8080) == 0 ? v43 / 0x10000 : v43); // 0x4086a5\n    uint64_t v45 = ((v42 & 0x8080) == 0 ? v39 + 6 : v41) - (-1 - v44 < v44 ? 4 : 3); // 0x4086a8\n    if (v45 <= result) {\n        // 0x40879a\n        return result;\n    }\n    char * v46 = v1; // 0x408620\n    char v47 = 0; // 0x408620\n    int64_t v48 = result;\n    int64_t v49 = 0;\n    int64_t v50; // 0x408620\n    int64_t v51; // 0x408620\n    int64_t v52; // 0x408620\n    int64_t v53; // 0x408620\n    int64_t v54; // 0x408620\n    int64_t v55; // 0x408620\n    int64_t v56; // 0x408620\n    int64_t v57; // 0x408620\n    int64_t v58; // 0x408620\n    char * v59; // 0x408620\n    char * v60; // 0x408620\n    char v61; // 0x408620\n    char v62; // 0x408620\n    char v63; // 0x408620\n    while (true) {\n      lab_0x4086f2_2:\n        // 0x4086f2\n        v52 = v51;\n        v59 = v46;\n        v54 = v49;\n        while (true) {\n          lab_0x4086f2:\n            // 0x4086f2\n            v55 = v54;\n            v57 = v48;\n            char v64 = v47;\n            v60 = v59;\n            v61 = v64;\n            if (v64 != 0) {\n                goto lab_0x4087c7;\n            } else {\n                unsigned char v65 = *(char *)v57; // 0x4086fd\n                int32_t v66 = *(int32_t *)((int64_t)(4 * v65 / 32) + (int64_t)&g24); // 0x408708\n                if ((1 << (int32_t)(v65 % 32) & v66) == 0) {\n                    int32_t v67 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4087b5\n                    v61 = 1;\n                    if (v67 == 0) {\n                        // break (via goto) -> 0x408b85\n                        goto lab_0x408b85_2;\n                    }\n                    goto lab_0x4087c7;\n                } else {\n                    int64_t v68 = (int64_t)v60; // 0x408725\n                    wc = (char *)((int64_t)v65 & 0xffffffff);\n                    v47 = v64;\n                    v62 = 1;\n                    v58 = v68 + 1;\n                    v56 = v68;\n                    goto lab_0x40873b;\n                }\n            }\n        }\n      lab_0x4086c0:\n        // 0x4086c0\n        v50 = v52;\n        v53 = 1;\n        if (v63 != 0) {\n            // 0x4086cd\n            v50 = v52;\n            v53 = iswspace((int32_t)(int64_t)wc) == 0;\n        }\n        goto lab_0x4086df;\n    }\n  lab_0x408b85_2:\n    // 0x408b85\n    __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbiter.h\", 142, \"mbiter_multi_next\");\n  lab_0x408bb7_3:\n    // 0x408bb7\n    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbiter.h\", 169, \"mbiter_multi_next\");\n    function_408600();\n    struct _IO_FILE * v69 = (struct _IO_FILE *)\"*iter->cur.ptr == '\\\\0'\"; // 0x408620\n    int64_t v70 = (int64_t)\"lib/mbiter.h\"; // 0x408620\n    int64_t v71 = 169; // 0x408620\n    int64_t v72 = (int64_t)\"mbiter_multi_next\"; // 0x408620\n    goto lab_0x408bdc;\n  lab_0x408790_2:;\n    // 0x408790\n    int64_t v75; // 0x408620\n    int64_t v76; // 0x408620\n    if ((int32_t)v76 == 2) {\n        // 0x408af8\n        *(char *)v75 = 0;\n        goto lab_0x40879a;\n    } else {\n        goto lab_0x40879a;\n    }\n  lab_0x4086df:\n    // 0x4086df\n    v49 = v53;\n    v46 = (char *)v48;\n    v51 = v50;\n    v75 = v50;\n    v76 = v49;\n    if (v48 >= v45) {\n        goto lab_0x408790_2;\n    }\n    goto lab_0x4086f2_2;\n  lab_0x408bb7_4:\n    // 0x408bb7\n    function_408600();\n    v69 = (struct _IO_FILE *)&wc;\n    int64_t v77; // 0x408620\n    v70 = v77;\n    int64_t v78; // 0x408620\n    v71 = v78;\n    v72 = &ps;\n    struct _IO_FILE * v73; // 0x408620\n    if (v77 == 0) {\n        // 0x408c58\n        __fprintf_chk((struct _IO_FILE *)&wc, 1, \"%s %s\\n\", (char *)v78, &ps);\n        v73 = (struct _IO_FILE *)&wc;\n        goto lab_0x408bf6;\n    } else {\n        goto lab_0x408bdc;\n    }\n  lab_0x4087c7:;\n    char v79 = v61;\n    int64_t v80 = v45 - v57; // 0x4087d7\n    int64_t v81 = function_40ab50((int64_t *)&wc, v57, v80); // 0x4087da\n    int64_t v82 = (int64_t)v60;\n    v47 = v79;\n    v62 = 0;\n    v58 = v45;\n    v56 = v82;\n    switch (v81) {\n        case -1: {\n            // 0x408950\n            v47 = v79;\n            v62 = 0;\n            v58 = v82 + 1;\n            v56 = v82;\n            goto lab_0x40873b;\n        }\n        case -2: {\n            goto lab_0x40873b;\n        }\n        default: {\n            int64_t v83 = v81; // 0x408803\n            if (v81 == 0) {\n                // 0x408805\n                if (*v60 != 0) {\n                    goto lab_0x408bb7_3;\n                }\n                // 0x408818\n                v83 = 1;\n                v78 = v80;\n                v77 = v57;\n                if ((int32_t)(int64_t)wc != 0) {\n                    goto lab_0x408bb7_4;\n                }\n            }\n            int32_t v84 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x408836\n            v47 = v84 == 0 ? v79 : 0;\n            v62 = 1;\n            v58 = v83 + v82;\n            v56 = v82;\n            goto lab_0x40873b;\n        }\n    }\n  lab_0x40873b:\n    // 0x40873b\n    v48 = v58;\n    v63 = v62;\n    int32_t v85 = v55; // 0x408740\n    switch (v85) {\n        case 0: {\n            goto lab_0x4086c0;\n        }\n        case 1: {\n            // 0x408858\n            v50 = v52;\n            v53 = v55;\n            if (v63 != 0) {\n                int32_t v86 = iswspace((int32_t)(int64_t)wc); // 0x408867\n                v50 = v86 != 0 ? v56 : v52;\n                v53 = v86 != 0 ? 2 : v55 & 0xffffffff;\n            }\n            goto lab_0x4086df;\n        }\n        default: {\n            // 0x408753\n            v50 = v52;\n            v53 = 1;\n            if (v85 != 2 || v63 == 0) {\n                goto lab_0x4086df;\n            }\n            int64_t v87 = iswspace((int32_t)(int64_t)wc) == 0 ? 1 : v55 & 0xffffffff; // 0x408782\n            v59 = (char *)v48;\n            v54 = v87;\n            v75 = v52;\n            v76 = v87;\n            if (v48 >= v45) {\n                goto lab_0x408790_2;\n            }\n            goto lab_0x4086f2;\n        }\n    }\n  lab_0x408a79:;\n    int64_t v88 = function_40ab50((int64_t *)&wc, v20, v28 - v20); // 0x408a8c\n    if (v88 > 0xfffffffffffffffd) {\n        // break -> 0x408b38\n        goto lab_0x408b38_3;\n    }\n    int64_t v89 = v88; // 0x408ab2\n    if (v88 == 0) {\n        // 0x408ab4\n        if (*v24 != 0) {\n            goto lab_0x408bb7_3;\n        }\n        int64_t v90 = (int64_t)wc;\n        v89 = 1;\n        if ((int32_t)v90 != 0) {\n            // 0x408bb7\n            v78 = v90 & 0xffffffff;\n            v77 = v20;\n            goto lab_0x408bb7_4;\n        }\n    }\n    int32_t v91 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x408add\n    wc2 = wc;\n    v25 = v91 == 0 ? v27 : 0;\n    v22 = v89;\n    goto lab_0x408a45;\n  lab_0x408a45:;\n    int64_t v92 = (int64_t)v24;\n    v21 = v92;\n    if (iswspace((int32_t)(int64_t)wc2) == 0) {\n        goto lab_0x408b38_2;\n    }\n    int64_t v93 = v22 + v92; // 0x408a5a\n    v23 = (char *)v93;\n    v26 = v25;\n    v19 = v93;\n    v21 = v93;\n    if (v93 >= v28) {\n        goto lab_0x408b38_2;\n    }\n    goto lab_0x408a72;\n  lab_0x408bdc:\n    // 0x408bdc\n    __fprintf_chk(v69, 1, \"%s (%s) %s\\n\", (char *)v70, (char *)v71, (char *)v72);\n    v73 = v69;\n    goto lab_0x408bf6;\n  lab_0x408bf6:\n    // 0x408bf6\n    __fprintf_chk(v73, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result2 = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v73); // 0x408c3b\n    if (a6 < 10) {\n        // 0x408c4a\n        return result2;\n    }\n    char * v74 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x408d42\n    return __fprintf_chk(v73, 1, v74);\n}\n"
        },
        {
            "funcName": "function_408fa0",
            "funcStartAddr": "408fa0",
            "funcEndAddr": "408fc0",
            "decompiledFuncCode": "int64_t function_408fa0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408fa0\n    int64_t result; // 0x408fa0\n    if (a5 == 0) {\n        // 0x408fbb\n        return result;\n    }\n    int64_t v1 = 0; // 0x408fa7\n    while (*(int64_t *)(8 * (v1 + 1) + a5) != 0) {\n        // 0x408fb0\n        v1++;\n    }\n    // 0x408fbb\n    return result;\n}\n"
        },
        {
            "funcName": "function_408fc0",
            "funcStartAddr": "408fc0",
            "funcEndAddr": "409020",
            "decompiledFuncCode": "int64_t function_408fc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x408fc0\n    int64_t v3 = &v2; // 0x408fc0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x408ff3\n    int64_t v6; // 0x408fc0\n    int64_t v7; // 0x408fdd\n    int64_t * v8; // 0x408ffb\n    int64_t v9; // 0x408ffb\n    int64_t v10; // 0x409007\n    if (v5 < 48) {\n        // 0x408fd0\n        *(int32_t *)v1 = v5 + 8;\n        v7 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v7;\n        v6 = v7;\n        if (v7 == 0) {\n            // break -> 0x409013\n            break;\n        }\n    } else {\n        // 0x408ffb\n        v8 = (int64_t *)(v1 + 8);\n        v9 = *v8;\n        *v8 = v9 + 8;\n        v10 = *(int64_t *)v9;\n        *(int64_t *)(8 * v4 + v3) = v10;\n        v6 = v10;\n        if (v10 == 0) {\n            // break -> 0x409013\n            break;\n        }\n    }\n    int64_t result = v6; // 0x408ff1\n    while (v4 != 9) {\n        // 0x408fe9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x408fd0\n            *(int32_t *)v1 = v5 + 8;\n            v7 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v7;\n            v6 = v7;\n            result = 0;\n            if (v7 == 0) {\n                // break -> 0x409013\n                break;\n            }\n        } else {\n            // 0x408ffb\n            v8 = (int64_t *)(v1 + 8);\n            v9 = *v8;\n            *v8 = v9 + 8;\n            v10 = *(int64_t *)v9;\n            *(int64_t *)(8 * v4 + v3) = v10;\n            v6 = v10;\n            result = v10;\n            if (v10 == 0) {\n                // break -> 0x409013\n                break;\n            }\n        }\n        // 0x408fe9\n        result = v6;\n    }\n    // 0x409013\n    return result;\n}\n"
        },
        {
            "funcName": "function_409020",
            "funcStartAddr": "409020",
            "funcEndAddr": "4090dc",
            "decompiledFuncCode": "int64_t function_409020(int64_t a1, char * a2, char * a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x409020\n    int64_t v1; // bp-168, 0x409020\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x409020\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x409020\n    int64_t v8; // 0x409020\n    int64_t v9; // 0x409020\n    int64_t v10; // bp-56, 0x409020\n    int64_t v11; // 0x409085\n    int64_t v12; // 0x4090a9\n    if ((int32_t)v6 < 48) {\n        // 0x409070\n        v11 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v10);\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v9 = v11;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v11 == 0) {\n            // break -> 0x4090c0\n            break;\n        }\n    } else {\n        // 0x4090a2\n        v12 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v12;\n        v9 = v12;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v12 == 0) {\n            // break -> 0x4090c0\n            break;\n        }\n    }\n    int64_t v13 = v5 + 1; // 0x40909a\n    int64_t result = v9; // 0x40909a\n    while (v5 != 9) {\n        // 0x40909c\n        v4 = v7;\n        v5 = v13;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x409070\n            v11 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v10);\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v9 = v11;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            result = 0;\n            if (v11 == 0) {\n                // break -> 0x4090c0\n                break;\n            }\n        } else {\n            // 0x4090a2\n            v12 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v12;\n            v9 = v12;\n            v8 = v6;\n            v7 = v4 + 8;\n            result = v12;\n            if (v12 == 0) {\n                // break -> 0x4090c0\n                break;\n            }\n        }\n        // 0x409092\n        v13 = v5 + 1;\n        result = v9;\n    }\n    // 0x4090c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4090e0",
            "funcStartAddr": "4090e0",
            "funcEndAddr": "409154",
            "decompiledFuncCode": "int64_t function_4090e0(int64_t a1) {\n    // 0x4090e0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x409143\n    return fputs_unlocked(v1, g48);\n}\n"
        },
        {
            "funcName": "function_409160",
            "funcStartAddr": "409160",
            "funcEndAddr": "40917a",
            "decompiledFuncCode": "int64_t function_409160(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x409164\n    if (size != 0 != (mem == NULL)) {\n        // 0x409173\n        return (int64_t)mem;\n    }\n    // 0x409175\n    function_4093b0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409180",
            "funcStartAddr": "409180",
            "funcEndAddr": "4091a1",
            "decompiledFuncCode": "int64_t function_409180(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x409183\n    int64_t v2 = v1; // 0x409183\n    if (v2 < 0) {\n        // 0x40919b\n        function_4093b0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x409199\n        return function_409160(v2);\n    }\n    // 0x40919b\n    function_4093b0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4091b0",
            "funcStartAddr": "4091b0",
            "funcEndAddr": "4091b2",
            "decompiledFuncCode": "int64_t function_4091b0(void) {\n    // 0x4091b0\n    int64_t v1; // 0x4091b0\n    return function_409160(v1);\n}\n"
        },
        {
            "funcName": "function_4091c0",
            "funcStartAddr": "4091c0",
            "funcEndAddr": "4091f6",
            "decompiledFuncCode": "int64_t function_4091c0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4091e8\n        free(v1);\n        return (int32_t)&g127 ^ (int32_t)&g127;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4091d1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4091e0\n        return (int64_t)mem;\n    }\n    // 0x4091f1\n    function_4093b0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409200",
            "funcStartAddr": "409200",
            "funcEndAddr": "409221",
            "decompiledFuncCode": "int64_t function_409200(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x409203\n    int64_t v2 = v1; // 0x409203\n    if (v2 < 0) {\n        // 0x40921b\n        function_4093b0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x409219\n        return function_4091c0(a1, v2);\n    }\n    // 0x40921b\n    function_4093b0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409230",
            "funcStartAddr": "409230",
            "funcEndAddr": "4092b6",
            "decompiledFuncCode": "int64_t function_409230(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40928b\n            function_4093b0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4091c0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x409273\n    if (a2 == 0) {\n        // 0x409298\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x409278\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40928b\n        function_4093b0(a1);\n        // UNREACHABLE\n    }\n    // 0x40925a\n    *(int64_t *)a2 = v2;\n    return function_4091c0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4092c0",
            "funcStartAddr": "4092c0",
            "funcEndAddr": "409310",
            "decompiledFuncCode": "int64_t function_4092c0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4092c0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40930a\n            function_4093b0(a1);\n            // UNREACHABLE\n        }\n        // 0x4092e2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4091c0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4092f5\n        *(int64_t *)a2 = 128;\n        return function_4091c0(0, 128);\n    }\n    // 0x409308\n    if (a2 < 0) {\n        // 0x40930a\n        function_4093b0(a1);\n        // UNREACHABLE\n    }\n    // 0x4092e2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4091c0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_409310",
            "funcStartAddr": "409310",
            "funcEndAddr": "409327",
            "decompiledFuncCode": "int64_t function_409310(int64_t a1, int64_t a2) {\n    // 0x409310\n    return (int64_t)memset((int64_t *)function_409160(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_409330",
            "funcStartAddr": "409330",
            "funcEndAddr": "40935e",
            "decompiledFuncCode": "int64_t function_409330(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x409337\n    if ((int64_t)v1 < 0) {\n        // 0x409359\n        function_4093b0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x409359\n        function_4093b0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40934a\n    if (mem != NULL) {\n        // 0x409354\n        return (int64_t)mem;\n    }\n    // 0x409359\n    function_4093b0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409360",
            "funcStartAddr": "409360",
            "funcEndAddr": "409388",
            "decompiledFuncCode": "int64_t function_409360(int64_t a1, int64_t a2) {\n    int64_t v1 = function_409160(a2); // 0x40936f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_409390",
            "funcStartAddr": "409390",
            "funcEndAddr": "4093a3",
            "decompiledFuncCode": "int64_t function_409390(int64_t str) {\n    // 0x409390\n    return function_409360(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4093b0",
            "funcStartAddr": "4093b0",
            "funcEndAddr": "4093e1",
            "decompiledFuncCode": "int64_t function_4093b0(int64_t a1) {\n    // 0x4093b0\n    error(g37, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4093f0",
            "funcStartAddr": "4093f0",
            "funcEndAddr": "40940f",
            "decompiledFuncCode": "int64_t function_4093f0(void) {\n    // 0x4093f0\n    int64_t v1; // 0x4093f0\n    int64_t v2 = function_41abc0(v1, v1, v1, v1, v1); // 0x4093f1\n    if ((int32_t)v2 >= 0 || *__errno_location() != 12) {\n        // 0x4093fc\n        return v2 & 0xffffffff;\n    }\n    // 0x40940a\n    function_4093b0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409410",
            "funcStartAddr": "409410",
            "funcEndAddr": "409437",
            "decompiledFuncCode": "int64_t function_409410(void) {\n    // 0x409410\n    int64_t v1; // 0x409410\n    int64_t result = function_41ae10(v1, v1, v1, v1, v1); // 0x409411\n    if (result != 0 || *__errno_location() != 12) {\n        // 0x40941e\n        return result;\n    }\n    // 0x409432\n    function_4093b0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409440",
            "funcStartAddr": "409440",
            "funcEndAddr": "409467",
            "decompiledFuncCode": "int64_t function_409440(void) {\n    // 0x409440\n    int64_t v1; // 0x409440\n    int64_t result = function_41afe0(v1, v1, v1); // 0x409441\n    if (result != 0 || *__errno_location() != 12) {\n        // 0x40944e\n        return result;\n    }\n    // 0x409462\n    function_4093b0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409470",
            "funcStartAddr": "409470",
            "funcEndAddr": "409bc0",
            "decompiledFuncCode": "int64_t function_409470(int64_t a1, int32_t a2, uint32_t a3, int64_t * a4, int32_t a5) {\n    if (a3 >= 37) {\n        // 0x409b99\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoimax\");\n        return &g127;\n    }\n    int64_t str = a5;\n    int64_t v1; // bp-64, 0x409470\n    int64_t v2 = a2 == 0 ? (int64_t)&v1 : (int64_t)a2; // 0x409498\n    int32_t * v3 = __errno_location(); // 0x4094a2\n    *v3 = 0;\n    char * v4 = (char *)a1;\n    int32_t v5 = __strtol_internal(v4, (char **)v2, a3, 0); // 0x4094ba\n    int64_t * v6 = (int64_t *)v2; // 0x4094bf\n    int64_t v7 = *v6; // 0x4094bf\n    int64_t v8; // 0x409470\n    int64_t v9; // 0x409470\n    int64_t v10; // 0x409470\n    char v11; // 0x409470\n    int64_t v12; // 0x409470\n    int64_t v13; // 0x409470\n    int64_t v14; // 0x409470\n    if (v7 == a1) {\n        // 0x409518\n        if (a5 == 0) {\n            // 0x4094ee\n            return 4;\n        }\n        char c = *v4; // 0x409521\n        if (c == 0) {\n            // 0x4094ee\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x40953f\n        v13 = 1;\n        v9 = 0;\n        v11 = c;\n        if (found_char_pos == NULL) {\n            // 0x4094ee\n            return 4;\n        }\n        goto lab_0x40954d;\n    } else {\n        int32_t v15 = *v3; // 0x4094ca\n        int64_t v16 = 0; // 0x4094d0\n        if (v15 != 0) {\n            // 0x409500\n            v16 = 1;\n            if (v15 != 34) {\n                // 0x4094ee\n                return 4;\n            }\n        }\n        int64_t v17 = v5; // 0x4094ba\n        v12 = v17;\n        v8 = v16;\n        if (a5 == 0) {\n            goto lab_0x4094e7;\n        } else {\n            char c2 = *(char *)v7; // 0x4094da\n            v12 = v17;\n            v8 = v16;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x4095e7\n                v13 = v17;\n                v9 = v16;\n                v11 = c2;\n                v14 = v17;\n                v10 = v16;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x40954d;\n                } else {\n                    goto lab_0x4095f5;\n                }\n            } else {\n                goto lab_0x4094e7;\n            }\n        }\n    }\n  lab_0x40954d:;\n    int64_t v18 = v9;\n    int64_t v19 = v13;\n    unsigned char v20 = v11 - 69;\n    int64_t v21 = 1024; // 0x409554\n    int64_t v22 = 1; // 0x409554\n    int64_t v23; // 0x409470\n    int64_t v24; // 0x409470\n    int64_t v25; // 0x409470\n    int64_t v26; // 0x409470\n    int64_t v27; // 0x409470\n    int64_t v28; // 0x409470\n    int64_t v29; // 0x409470\n    int64_t v30; // 0x409470\n    int64_t v31; // 0x409470\n    int64_t v32; // 0x409470\n    int64_t v33; // 0x409470\n    int64_t v34; // 0x409470\n    int64_t v35; // 0x409470\n    int64_t v36; // 0x409470\n    int64_t v37; // 0x409470\n    int64_t v38; // 0x409470\n    int64_t v39; // 0x409470\n    int64_t v40; // 0x409470\n    int64_t v41; // 0x409470\n    if (v20 < 48) {\n        // 0x409580\n        v21 = 1024;\n        v22 = 1;\n        if ((1 << (int64_t)((v11 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x409560;\n        } else {\n            // 0x409594\n            v21 = 1024;\n            v22 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x409560;\n            } else {\n                // 0x4095a6\n                v21 = 1000;\n                v22 = 2;\n                switch (*(char *)(v7 + 1)) {\n                    case 68: {\n                        goto lab_0x409560;\n                    }\n                    case 105: {\n                        char v42 = *(char *)(v7 + 2); // 0x409b82\n                        v21 = 1024;\n                        v22 = (v42 == 66 ? 2 : 1) + (int64_t)(v42 == 66);\n                        goto lab_0x409560;\n                    }\n                    default: {\n                        // 0x4095bb\n                        g129 = v20;\n                        v21 = 1000;\n                        v22 = 2;\n                        v14 = v19;\n                        v10 = v18;\n                        v24 = v19;\n                        v31 = 1;\n                        v23 = v18;\n                        v25 = 1024;\n                        v32 = 1;\n                        v36 = -0x20000000000000;\n                        v37 = 1;\n                        v26 = 1024;\n                        v33 = 1;\n                        v39 = -0x20000000000000;\n                        v27 = 1024;\n                        v34 = 1;\n                        v41 = -0x20000000000000;\n                        v28 = 1024;\n                        v35 = 1;\n                        v40 = -0x20000000000000;\n                        v29 = 1024;\n                        v30 = 1;\n                        v38 = -0x20000000000000;\n                        switch (v11) {\n                            case 69: {\n                                goto lab_0x409848;\n                            }\n                            case 70: {\n                                goto lab_0x4095f5;\n                            }\n                            case 71: {\n                                goto lab_0x4098b0;\n                            }\n                            case 72: {\n                                goto lab_0x4095f5;\n                            }\n                            case 73: {\n                                goto lab_0x4095f5;\n                            }\n                            case 74: {\n                                goto lab_0x4095f5;\n                            }\n                            case 75: {\n                                goto lab_0x409695;\n                            }\n                            case 76: {\n                                goto lab_0x4095f5;\n                            }\n                            case 77: {\n                                goto lab_0x4096d8;\n                            }\n                            case 78: {\n                                goto lab_0x4095f5;\n                            }\n                            case 79: {\n                                goto lab_0x4095f5;\n                            }\n                            case 80: {\n                                goto lab_0x409778;\n                            }\n                            case 81: {\n                                goto lab_0x4095f5;\n                            }\n                            case 82: {\n                                goto lab_0x4095f5;\n                            }\n                            case 83: {\n                                goto lab_0x4095f5;\n                            }\n                            case 84: {\n                                goto lab_0x4097e0;\n                            }\n                            case 85: {\n                                goto lab_0x4095f5;\n                            }\n                            case 86: {\n                                goto lab_0x4095f5;\n                            }\n                            case 87: {\n                                goto lab_0x4095f5;\n                            }\n                            case 88: {\n                                goto lab_0x4095f5;\n                            }\n                            case 89: {\n                                goto lab_0x409918;\n                            }\n                            case 90: {\n                                goto lab_0x409980;\n                            }\n                            case 91: {\n                                goto lab_0x4095f5;\n                            }\n                            case 92: {\n                                goto lab_0x4095f5;\n                            }\n                            case 93: {\n                                goto lab_0x4095f5;\n                            }\n                            case 94: {\n                                goto lab_0x4095f5;\n                            }\n                            case 95: {\n                                goto lab_0x4095f5;\n                            }\n                            case 96: {\n                                goto lab_0x4095f5;\n                            }\n                            case 97: {\n                                goto lab_0x4095f5;\n                            }\n                            case 98: {\n                                goto lab_0x409745;\n                            }\n                            case 99: {\n                                goto lab_0x409638;\n                            }\n                            case 100: {\n                                goto lab_0x4095f5;\n                            }\n                            case 101: {\n                                goto lab_0x4095f5;\n                            }\n                            case 102: {\n                                goto lab_0x4095f5;\n                            }\n                            case 103: {\n                                goto lab_0x4098b0;\n                            }\n                            case 104: {\n                                goto lab_0x4095f5;\n                            }\n                            case 105: {\n                                goto lab_0x4095f5;\n                            }\n                            case 106: {\n                                goto lab_0x4095f5;\n                            }\n                            case 107: {\n                                goto lab_0x409695;\n                            }\n                            case 108: {\n                                goto lab_0x4095f5;\n                            }\n                            case 109: {\n                                goto lab_0x4096d8;\n                            }\n                            case 110: {\n                                goto lab_0x4095f5;\n                            }\n                            case 111: {\n                                goto lab_0x4095f5;\n                            }\n                            case 112: {\n                                goto lab_0x4095f5;\n                            }\n                            case 113: {\n                                goto lab_0x4095f5;\n                            }\n                            case 114: {\n                                goto lab_0x4095f5;\n                            }\n                            case 115: {\n                                goto lab_0x4095f5;\n                            }\n                            case 116: {\n                                goto lab_0x4097e0;\n                            }\n                            default: {\n                                goto lab_0x409560;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x409560;\n    }\n  lab_0x4094e7:\n    // 0x4094e7\n    *a4 = v12;\n    // 0x4094ee\n    return v8 & 0xffffffff;\n  lab_0x409560:\n    // 0x409560\n    g128 = v11 - 66;\n    v14 = v19;\n    v10 = v18;\n    v24 = v19;\n    v31 = v22;\n    v23 = v18;\n    v37 = v22;\n    switch (v11) {\n        case 66: {\n            // 0x409631\n            v24 = 1024 * v19;\n            v31 = v22;\n            v23 = v18;\n            goto lab_0x409638;\n        }\n        case 69: {\n            // 0x409830\n            v28 = v21;\n            v35 = v22;\n            v40 = -0x8000000000000000 / (int128_t)v21;\n            goto lab_0x409848;\n        }\n        case 71: {\n            goto lab_0x4098b0;\n        }\n        case 75: {\n            goto lab_0x409695;\n        }\n        case 77: {\n            goto lab_0x4096c0;\n        }\n        case 80: {\n            // 0x409760\n            v26 = v21;\n            v33 = v22;\n            v39 = -0x8000000000000000 / (int128_t)v21;\n            goto lab_0x409778;\n        }\n        case 84: {\n            goto lab_0x4097c8;\n        }\n        case 89: {\n            // 0x409900\n            goto lab_0x409918;\n        }\n        case 90: {\n            // 0x409968\n            v29 = v21;\n            v30 = v22;\n            v38 = -0x8000000000000000 / (int128_t)v21;\n            goto lab_0x409980;\n        }\n        case 98: {\n            goto lab_0x409745;\n        }\n        case 99: {\n            goto lab_0x409638;\n        }\n        case 103: {\n            goto lab_0x4098b0;\n        }\n        case 107: {\n            goto lab_0x409695;\n        }\n        case 109: {\n            goto lab_0x4096c0;\n        }\n        case 116: {\n            goto lab_0x4097c8;\n        }\n        case 119: {\n            // 0x409679\n            v24 = 2 * v19;\n            v31 = v22;\n            v23 = v18;\n            goto lab_0x409638;\n        }\n        default: {\n            goto lab_0x4095f5;\n        }\n    }\n    // 0x409898\n    goto lab_0x4098b0;\n    // 0x409680\n    goto lab_0x409695;\n  lab_0x4096c0:\n    // 0x4096c0\n    v25 = v21;\n    v32 = v22;\n    v36 = -0x8000000000000000 / (int128_t)v21;\n    goto lab_0x4096d8;\n  lab_0x4097c8:\n    // 0x4097c8\n    v27 = v21;\n    v34 = v22;\n    v41 = -0x8000000000000000 / (int128_t)v21;\n    goto lab_0x4097e0;\n  lab_0x409745:\n    // 0x409745\n    v24 = 512 * v19;\n    v31 = v37;\n    v23 = v18;\n    goto lab_0x409638;\n  lab_0x409638:;\n    int64_t v62 = v23;\n    int64_t v63 = v31 + v7; // 0x409638\n    *v6 = v63;\n    v12 = v24;\n    v8 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x4094e7;\n  lab_0x4095f5:\n    // 0x4095f5\n    *a4 = v14;\n    // 0x4094ee\n    return (v10 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x409848:;\n    uint64_t v64 = v28;\n    int64_t v65 = v19;\n    int64_t v66 = -0x8000000000000000; // 0x409881\n    int64_t v67 = 1; // 0x409881\n    if (v65 >= v40) {\n        // 0x409860\n        v66 = v65 > 0x7fffffffffffffff / v64 ? 0x7fffffffffffffff : v65 * v64;\n        v67 = v65 > 0x7fffffffffffffff / v64 ? 1 : 0;\n    }\n    int32_t v68 = 5; // 0x409875\n    int32_t v69 = v68; // 0x409878\n    int64_t v70 = v67; // 0x409878\n    int64_t v58 = v66; // 0x409878\n    int64_t v60 = v35; // 0x409878\n    int64_t v61 = v67; // 0x409878\n    while (v68 != 0) {\n        // 0x40987e\n        v65 = v66;\n        v66 = -0x8000000000000000;\n        v67 = 1;\n        if (v65 >= v40) {\n            // 0x409860\n            v66 = v65 > 0x7fffffffffffffff / v64 ? 0x7fffffffffffffff : v65 * v64;\n            v67 = v65 > 0x7fffffffffffffff / v64 ? 1 : v70;\n        }\n        // 0x409875\n        v68 = v69 - 1;\n        v69 = v68;\n        v70 = v67;\n        v58 = v66;\n        v60 = v35;\n        v61 = v67;\n    }\n    goto lab_0x409ab0;\n  lab_0x4098b0:\n    // 0x4098b0\n    while (true) {\n        // 0x4098e6\n        int32_t v43; // 0x409470\n        int32_t v44 = v43;\n        int64_t v45; // 0x409470\n        int64_t v46 = v45;\n        int64_t v47 = -0x8000000000000000; // 0x4098e9\n        int64_t v48 = 1; // 0x4098e9\n        int64_t v49; // 0x409470\n        uint64_t v50; // 0x409470\n        if (v46 >= v50) {\n            int64_t v51 = v49;\n            uint64_t v52; // 0x409470\n            int64_t v53 = v46 > 0x7fffffffffffffff / v52 ? 0x7fffffffffffffff : v46 * v52;\n            int64_t v54 = v46 > 0x7fffffffffffffff / v52 ? 1 : v51;\n            v47 = v53;\n            v48 = v54;\n        }\n        int64_t v55 = v48;\n        int64_t v56 = v47;\n        int32_t v57 = v44 - 1; // 0x4098dd\n        v45 = v56;\n        v43 = v57;\n        v49 = v55;\n        v58 = v56;\n        int64_t v59; // 0x409470\n        v60 = v59;\n        v61 = v55;\n        if (v57 == 0) {\n            // break -> 0x409ab0\n            break;\n        }\n    }\n    goto lab_0x409ab0;\n  lab_0x409695:;\n    int64_t v75 = 1;\n    v24 = -0x8000000000000000;\n    v31 = v75;\n    v23 = 1;\n    int64_t v72; // 0x409470\n    int64_t v73; // 0x409470\n    int64_t v74; // 0x409470\n    int64_t v71; // 0x409470\n    if (v19 < -0x20000000000000) {\n        goto lab_0x409638;\n    } else {\n        int64_t v76 = 1024;\n        v72 = 0x7fffffffffffffff / v76;\n        v74 = v76;\n        v73 = v19;\n        v71 = v75;\n        goto lab_0x4096ac;\n    }\n  lab_0x4096d8:\n    // 0x4096d8\n    v24 = -0x8000000000000000;\n    v31 = v32;\n    v23 = 1;\n    if (v19 < v36) {\n        goto lab_0x409638;\n    } else {\n        int64_t v77 = 0x7fffffffffffffff / v25;\n        v24 = 0x7fffffffffffffff;\n        v31 = v32;\n        v23 = 1;\n        if (v19 > v77) {\n            goto lab_0x409638;\n        } else {\n            int64_t v78 = v25 * v19; // 0x4096f8\n            v24 = -0x8000000000000000;\n            v31 = v32;\n            v23 = 1;\n            v72 = v77;\n            v74 = v25;\n            v73 = v78;\n            v71 = v32;\n            if (v78 < v36) {\n                goto lab_0x409638;\n            } else {\n                goto lab_0x4096ac;\n            }\n        }\n    }\n  lab_0x409778:;\n    uint64_t v79 = v26;\n    int64_t v80 = v19;\n    int64_t v81 = -0x8000000000000000; // 0x4097b1\n    int64_t v82 = 1; // 0x4097b1\n    if (v39 <= v80) {\n        // 0x409790\n        v81 = v80 > 0x7fffffffffffffff / v79 ? 0x7fffffffffffffff : v80 * v79;\n        v82 = v80 > 0x7fffffffffffffff / v79 ? 1 : 0;\n    }\n    int32_t v83 = 4; // 0x4097a5\n    int32_t v84 = v83; // 0x4097a8\n    int64_t v85 = v82; // 0x4097a8\n    v58 = v81;\n    v60 = v33;\n    v61 = v82;\n    while (v83 != 0) {\n        // 0x4097ae\n        v80 = v81;\n        v81 = -0x8000000000000000;\n        v82 = 1;\n        if (v39 <= v80) {\n            // 0x409790\n            v81 = v80 > 0x7fffffffffffffff / v79 ? 0x7fffffffffffffff : v80 * v79;\n            v82 = v80 > 0x7fffffffffffffff / v79 ? 1 : v85;\n        }\n        // 0x4097a5\n        v83 = v84 - 1;\n        v84 = v83;\n        v85 = v82;\n        v58 = v81;\n        v60 = v33;\n        v61 = v82;\n    }\n    goto lab_0x409ab0;\n  lab_0x4097e0:;\n    uint64_t v86 = v27;\n    int64_t v87 = v19;\n    int64_t v88 = -0x8000000000000000; // 0x409819\n    int64_t v89 = 1; // 0x409819\n    if (v41 <= v87) {\n        // 0x4097f8\n        v88 = v87 > 0x7fffffffffffffff / v86 ? 0x7fffffffffffffff : v87 * v86;\n        v89 = v87 > 0x7fffffffffffffff / v86 ? 1 : 0;\n    }\n    int32_t v90 = 3; // 0x40980d\n    int32_t v91 = v90; // 0x409810\n    int64_t v92 = v89; // 0x409810\n    v58 = v88;\n    v60 = v34;\n    v61 = v89;\n    while (v90 != 0) {\n        // 0x409816\n        v87 = v88;\n        v88 = -0x8000000000000000;\n        v89 = 1;\n        if (v41 <= v87) {\n            // 0x4097f8\n            v88 = v87 > 0x7fffffffffffffff / v86 ? 0x7fffffffffffffff : v87 * v86;\n            v89 = v87 > 0x7fffffffffffffff / v86 ? 1 : v92;\n        }\n        // 0x40980d\n        v90 = v91 - 1;\n        v91 = v90;\n        v92 = v89;\n        v58 = v88;\n        v60 = v34;\n        v61 = v89;\n    }\n    goto lab_0x409ab0;\n  lab_0x409918:\n    // 0x409918\n    while (true) {\n        // 0x40994e\n        int32_t v93; // 0x409470\n        int32_t v94 = v93;\n        int64_t v95; // 0x409470\n        int64_t v96 = v95;\n        int64_t v97 = -0x8000000000000000; // 0x409951\n        int64_t v98 = 1; // 0x409951\n        int64_t v99; // 0x409470\n        uint64_t v100; // 0x409470\n        if (v100 <= v96) {\n            int64_t v101 = v99;\n            uint64_t v102; // 0x409470\n            int64_t v103 = v96 > 0x7fffffffffffffff / v102 ? 0x7fffffffffffffff : v96 * v102;\n            int64_t v104 = v96 > 0x7fffffffffffffff / v102 ? 1 : v101;\n            v97 = v103;\n            v98 = v104;\n        }\n        int64_t v105 = v98;\n        int64_t v106 = v97;\n        int32_t v107 = v94 - 1; // 0x409945\n        v95 = v106;\n        v93 = v107;\n        v99 = v105;\n        v58 = v106;\n        int64_t v108; // 0x409470\n        v60 = v108;\n        v61 = v105;\n        if (v107 == 0) {\n            // break -> 0x409ab0\n            break;\n        }\n    }\n    goto lab_0x409ab0;\n  lab_0x409980:;\n    uint64_t v109 = v29;\n    int64_t v110 = v19;\n    int64_t v111 = -0x8000000000000000; // 0x4099b9\n    int64_t v112 = 1; // 0x4099b9\n    if (v38 <= v110) {\n        // 0x409998\n        v111 = v110 > 0x7fffffffffffffff / v109 ? 0x7fffffffffffffff : v110 * v109;\n        v112 = v110 > 0x7fffffffffffffff / v109 ? 1 : 0;\n    }\n    int32_t v113 = 6; // 0x4099ad\n    int32_t v114 = v113; // 0x4099b0\n    int64_t v115 = v112; // 0x4099b0\n    v58 = v111;\n    v60 = v30;\n    v61 = v112;\n    while (v113 != 0) {\n        // 0x4099b6\n        v110 = v111;\n        v111 = -0x8000000000000000;\n        v112 = 1;\n        if (v38 <= v110) {\n            // 0x409998\n            v111 = v110 > 0x7fffffffffffffff / v109 ? 0x7fffffffffffffff : v110 * v109;\n            v112 = v110 > 0x7fffffffffffffff / v109 ? 1 : v115;\n        }\n        // 0x4099ad\n        v113 = v114 - 1;\n        v114 = v113;\n        v115 = v112;\n        v58 = v111;\n        v60 = v30;\n        v61 = v112;\n    }\n    goto lab_0x409ab0;\n  lab_0x409ab0:\n    // 0x409ab0\n    v24 = v58;\n    v31 = v60;\n    v23 = (v61 | v18) & 0xffffffff;\n    goto lab_0x409638;\n  lab_0x4096ac:\n    // 0x4096ac\n    v24 = 0x7fffffffffffffff;\n    v31 = v71;\n    v23 = 1;\n    if (v72 >= v73) {\n        // 0x4096b5\n        v24 = v73 * v74;\n        v31 = v71;\n        v23 = v18;\n    }\n    goto lab_0x409638;\n}\n"
        },
        {
            "funcName": "function_409bc0",
            "funcStartAddr": "409bc0",
            "funcEndAddr": "409c3b",
            "decompiledFuncCode": "int64_t function_409bc0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x409bc7\n    if (fileno(stream) < 0) {\n        // 0x409c27\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x409bda\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x409c0b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x409c27\n            return fclose(stream);\n        }\n    }\n    // 0x409bdc\n    if ((int32_t)function_409c40(a1, v1) == 0) {\n        // 0x409c27\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x409be8\n    int32_t v3 = *v2; // 0x409bf0\n    int64_t result = fclose(stream); // 0x409bfe\n    if (v3 != 0) {\n        // 0x409c30\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x409c00\n    return result;\n}\n"
        },
        {
            "funcName": "function_409c40",
            "funcStartAddr": "409c40",
            "funcEndAddr": "409c80",
            "decompiledFuncCode": "int64_t function_409c40(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x409c5a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x409c5a\n        return fflush(stream);\n    }\n    // 0x409c68\n    function_409d20(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_409c80",
            "funcStartAddr": "409c80",
            "funcEndAddr": "409d1e",
            "decompiledFuncCode": "int64_t function_409c80(int64_t a1, int64_t a2) {\n    char * file_path = (char *)a1; // 0x409c8e\n    char * mode = (char *)a2; // 0x409c8e\n    int64_t stream; // 0x409c80\n    struct _IO_FILE * file = freopen(file_path, mode, (struct _IO_FILE *)stream); // 0x409c8e\n    if (a1 == 0 || file == NULL) {\n        // 0x409cb8\n        return (int64_t)file;\n    }\n    int32_t fd2 = fileno(file); // 0x409ca3\n    if (dup2(fd2, fd2) >= 0 || *__errno_location() != 9) {\n        // 0x409cb8\n        return (int64_t)file;\n    }\n    int32_t fd = open(\"/dev/null\", O_CLOEXEC); // 0x409cde\n    if (fd == fd2) {\n        // 0x409d01\n        return (int64_t)freopen(file_path, mode, file);\n    }\n    int32_t v1 = dup2(fd, fd2); // 0x409cf0\n    close(fd);\n    if (v1 < 0) {\n        // 0x409cb8\n        return (int64_t)file;\n    }\n    // 0x409d01\n    return (int64_t)freopen(file_path, mode, file);\n}\n"
        },
        {
            "funcName": "function_409d20",
            "funcStartAddr": "409d20",
            "funcEndAddr": "409d77",
            "decompiledFuncCode": "int64_t function_409d20(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x409d20\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x409d2a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x409d5b\n    int64_t result = -1; // 0x409d64\n    if (v1 != -1) {\n        // 0x409d66\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x409d72\n    return result;\n}\n"
        },
        {
            "funcName": "function_409d80",
            "funcStartAddr": "409d80",
            "funcEndAddr": "409e5f",
            "decompiledFuncCode": "int64_t function_409d80(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x409d8c\n    uint32_t v2 = *v1; // 0x409d8c\n    int64_t v3 = a2 & 0xffffffff; // 0x409d91\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x409d94\n    uint64_t v5 = (int64_t)*v4; // 0x409d94\n    int64_t v6; // 0x409e02\n    if (v3 <= v5) {\n      lab_0x409dfc_2:\n        // 0x409dfc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x409d82\n    int64_t v8 = v2; // 0x409d80\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x409dfc\n        goto lab_0x409dfc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x409db8\n    int64_t v17; // 0x409dc6\n    int64_t * v18; // 0x409de0\n    int64_t * v19; // 0x409de3\n    int64_t v20; // 0x409dee\n    int64_t v21; // 0x409dc6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x409dc3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x409de0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x409df7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x409dfc\n            goto lab_0x409dfc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x409dfc\n            goto lab_0x409dfc_2;\n        }\n        // 0x409db2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x409e3b\n    int64_t * v23 = (int64_t *)v22; // 0x409e40\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x409e43\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x409e40\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x409e57\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x409dad\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x409dfc\n            goto lab_0x409dfc_2;\n        }\n        // 0x409db2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x409dc3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x409de0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x409df7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x409dfc\n                goto lab_0x409dfc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x409dfc\n                goto lab_0x409dfc_2;\n            }\n            // 0x409db2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x409e20\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x409e40\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x409e57\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x409dfc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_409e60",
            "funcStartAddr": "409e60",
            "funcEndAddr": "40a47c",
            "decompiledFuncCode": "int64_t function_409e60(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x409e7f\n    int64_t v2 = *v1; // 0x409e7f\n    char * str2 = (char *)v2; // 0x409e8c\n    char c = *str2; // 0x409e8c\n    int64_t v3 = v2; // 0x409eb8\n    int64_t v4 = 0; // 0x409e60\n    int32_t v5; // 0x409e60\n    int64_t v6; // 0x409e60\n    int64_t v7; // 0x409e60\n    int64_t v8; // 0x409e60\n    int64_t v9; // 0x409e60\n    int64_t v10; // 0x409e60\n    int64_t v11; // 0x409e60\n    int64_t v12; // 0x409e60\n    int64_t v13; // 0x409e60\n    int64_t str3; // 0x409e60\n    int64_t v14; // 0x409e60\n    int64_t v15; // 0x409e60\n    int64_t v16; // 0x409e60\n    int64_t v17; // 0x409e60\n    int32_t v18; // 0x409e60\n    int32_t v19; // 0x409e60\n    int32_t v20; // 0x409e60\n    int32_t v21; // 0x409e60\n    int32_t v22; // 0x409e60\n    int32_t v23; // 0x409e60\n    int32_t v24; // 0x409e60\n    int32_t v25; // 0x409e60\n    int32_t v26; // 0x409e60\n    int32_t v27; // 0x409e60\n    int32_t v28; // 0x409e60\n    int32_t v29; // 0x409e60\n    int64_t nmemb; // 0x409e60\n    int64_t v30; // 0x409e60\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x409ebc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x409eb8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x409ec8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x409ece\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x409e98\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x409efc\n                int64_t v34; // 0x409e60\n                int64_t v35; // 0x409e60\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x409f05\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x40a080;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x409f16\n                int64_t v37 = *(int64_t *)v36; // 0x409f1a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x409ef0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x409f05\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x40a080;\n                        }\n                    }\n                    // 0x409f16\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x409f66:\n                    // 0x409f66\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x409fc0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x40a130\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x409fc0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x40a0e0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x409f8a;\n                                } else {\n                                    // 0x40a0ec\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x409f8a;\n                                    } else {\n                                        // 0x40a0fa\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x409f8a;\n                                        } else {\n                                            goto lab_0x409fc0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x409f8a;\n                            }\n                        }\n                    }\n                }\n              lab_0x409fd1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x40a1a6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x40a352\n                            flockfile(g51);\n                            int64_t v41 = *v1; // 0x40a372\n                            __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40a3bf\n                            int64_t v43 = (int64_t)g51;\n                            int64_t v44 = v43; // 0x40a3d9\n                            int64_t v45; // 0x40a3db\n                            if (*(char *)v42 != 0) {\n                                // 0x40a3db\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g51;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x40a3d3\n                            while (v17 + nmemb != v42) {\n                                // 0x40a3d5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40a3db\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g51;\n                                }\n                                // 0x40a3c8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x40a400\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g51);\n                            v40 = *v1;\n                        } else {\n                            // 0x40a1b4\n                            __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40a30f\n                        free((int64_t *)v17);\n                    }\n                    // 0x40a209\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x40a220\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40a0ce\n                    return 63;\n                }\n                // 0x409ff0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x40a074\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x40a080:;\n                    int32_t * v49 = (int32_t *)a7; // 0x40a090\n                    uint32_t v50 = *v49; // 0x40a090\n                    int64_t v51 = v50; // 0x40a090\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40a09a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x40a0a3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40a2cf\n                                __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40a27a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40a0ce\n                            return 63;\n                        }\n                        // 0x40a118\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40a42f\n                                    __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40a32d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x40a340\n                                // 0x40a0ce\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40a23e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x40a252\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40a0bb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40a0be\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x40a0c2\n                    int64_t result = v59; // 0x40a0c8\n                    if (v58 != 0) {\n                        // 0x40a0ca\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40a0ce\n                    return result;\n                }\n            } else {\n                // 0x409ece\n                v5 = v32;\n            }\n            // break -> 0x409ff5\n            break;\n        }\n    }\n    // 0x409ff5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40a00d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x40a017\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40a0ce\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x40a159\n        __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x40a046\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x40a056\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x409fc0:\n    // 0x409fc0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x409fc0\n    int64_t v63 = *(int64_t *)v62; // 0x409fc4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x409fd1\n        goto lab_0x409fd1;\n    }\n    goto lab_0x409f66;\n  lab_0x409f8a:\n    // 0x409f8a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x409e60\n    int32_t v65; // 0x409e60\n    int32_t v66; // 0x409e60\n    if (v27 != 0) {\n        goto lab_0x409fc0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x40a140\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x409fc0;\n            } else {\n                goto lab_0x409fb1;\n            }\n        } else {\n            // 0x409fa5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40a29c\n                int64_t v67 = (int64_t)mem; // 0x40a29c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x409fc0;\n                } else {\n                    // 0x40a2af\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x409fb1;\n                }\n            } else {\n                goto lab_0x409fb1;\n            }\n        }\n    }\n  lab_0x409fb1:\n    // 0x409fb1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x409fc0;\n}\n"
        },
        {
            "funcName": "function_40a480",
            "funcStartAddr": "40a480",
            "funcEndAddr": "40aa46",
            "decompiledFuncCode": "int64_t function_40a480(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x40a4a1\n    if (v3 < 1) {\n        // 0x40a65e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40a49d\n    int32_t v5 = *(int32_t *)a7; // 0x40a4a9\n    uint64_t v6 = a1 & 0xffffffff; // 0x40a4ab\n    int64_t v7 = v2; // 0x40a4b0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x40a4b3\n    *v8 = 0;\n    int64_t v9; // 0x40a480\n    int64_t v10; // 0x40a480\n    int64_t v11; // 0x40a480\n    int64_t v12; // 0x40a480\n    int64_t str; // 0x40a480\n    int64_t v13; // 0x40a480\n    int64_t v14; // 0x40a480\n    int64_t v15; // 0x40a480\n    int64_t v16; // 0x40a480\n    int64_t v17; // 0x40a480\n    int32_t v18; // 0x40a480\n    char v19; // 0x40a480\n    if (v5 == 0) {\n        // 0x40a698\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40a4ca;\n    } else {\n        // 0x40a4c3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x40a510\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x40a513\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x40a5d8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x40a526\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x40a536\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40a5ec;\n                } else {\n                    goto lab_0x40a548;\n                }\n            }\n        } else {\n            goto lab_0x40a4ca;\n        }\n    }\n  lab_0x40a4ca:\n    // 0x40a4ca\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x40a4d0\n    *v24 = 0;\n    int64_t v25; // 0x40a480\n    int64_t v26; // 0x40a480\n    int64_t v27; // 0x40a480\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x40a5c0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40a5cd;\n        }\n        case 43: {\n            // 0x40a8d0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40a5cd;\n        }\n        default: {\n            // 0x40a4ec\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40a84f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x40a968\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40a5cd;\n                } else {\n                    // 0x40a85d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40a4fa;\n                }\n            } else {\n                goto lab_0x40a4fa;\n            }\n        }\n    }\n  lab_0x40a5d8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40a5df\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x40a548;\n    } else {\n        goto lab_0x40a5ec;\n    }\n  lab_0x40a4fa:\n    // 0x40a4fa\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40a5cd;\n  lab_0x40a5cd:\n    // 0x40a5cd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x40a5d8;\n  lab_0x40a548:;\n    uint32_t v30 = *(int32_t *)a7; // 0x40a548\n    int64_t v31 = v30; // 0x40a548\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40a54a\n    if ((int64_t)*v32 > v31) {\n        // 0x40a54f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x40a552\n    if (*v33 > v30) {\n        // 0x40a557\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40a55a\n    int64_t v35 = v31; // 0x40a55e\n    int64_t v36 = v15; // 0x40a55e\n    int64_t v37; // 0x40a480\n    int64_t v38; // 0x40a480\n    int64_t v39; // 0x40a480\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x40a6c8\n        int64_t v41 = v40; // 0x40a6c8\n        v2 = v41;\n        int64_t v42; // 0x40a480\n        if (*v33 == v40) {\n            // 0x40a8b0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40a8b8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x40a6d4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40a6d8\n                function_409d80(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x40a6e8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x40a6f1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40a6fa\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x40a711\n            int64_t v47 = v45 & 0xffffffff; // 0x40a715\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40a71e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x40a724\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x40a726;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x40a700\n            int64_t v49 = v48 & 0xffffffff; // 0x40a700\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x40a711\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40a71e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x40a724\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x40a726;\n                    }\n                }\n                // 0x40a700\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x40a8c8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x40a726;\n    } else {\n        goto lab_0x40a564;\n    }\n  lab_0x40a5ec:\n    // 0x40a5ec\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40a5ef\n    int64_t v51 = v12; // 0x40a5ef\n    int64_t v52 = v14; // 0x40a5ef\n    if (*(char *)v10 == 0) {\n        goto lab_0x40a548;\n    } else {\n        goto lab_0x40a5f5;\n    }\n  lab_0x40a564:;\n    int32_t v53 = v35; // 0x40a564\n    int64_t v54; // 0x40a480\n    int64_t v55; // 0x40a480\n    int64_t v56; // 0x40a480\n    int64_t v57; // 0x40a480\n    int64_t v58; // 0x40a480\n    int64_t v59; // 0x40a480\n    char * v60; // 0x40a480\n    int64_t v61; // 0x40a480\n    int64_t v62; // 0x40a579\n    int64_t v63; // 0x40a480\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x40a6b3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x40a6b6;\n    } else {\n        // 0x40a56c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x40a480\n        int64_t v66 = v65 ? -1 : 1; // 0x40a580\n        int64_t v67 = (int64_t)\"--\"; // 0x40a480\n        int64_t v68 = v62; // 0x40a480\n        int64_t v69 = 3; // 0x40a580\n        unsigned char v70 = *(char *)v68; // 0x40a580\n        char v71 = *(char *)v67; // 0x40a580\n        char v72 = v71; // 0x40a580\n        bool v73 = false; // 0x40a580\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x40a670\n            if (*(char *)v62 == 45) {\n                // 0x40a730\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x40a730\n                if (c == 0) {\n                    goto lab_0x40a67a;\n                } else {\n                    // 0x40a73d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x40a7c0;\n                    } else {\n                        if (c == 45) {\n                            // 0x40a9a3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x40a815;\n                        } else {\n                            // 0x40a74e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x40a7c0;\n                            } else {\n                                // 0x40a753\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x40a774;\n                                } else {\n                                    // 0x40a75a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x40a7c0;\n                                    } else {\n                                        goto lab_0x40a774;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40a67a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x40a590\n            v2 = v75;\n            int32_t v76 = *v32; // 0x40a593\n            int64_t v77 = v35 + 1; // 0x40a596\n            int32_t v78 = v77; // 0x40a599\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x40a900\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x40a5a7\n                    function_409d80(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x40a5b5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x40a6b6;\n        }\n    }\n  lab_0x40a5f5:;\n    // 0x40a5f5\n    int64_t v79; // bp-104, 0x40a480\n    int64_t v80 = &v79; // 0x40a48a\n    int64_t v81 = v50 + 1; // 0x40a5f5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40a5fc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x40a601\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x40a605\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x40a609\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x40a611\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x40a616\n    int32_t c2 = v84; // 0x40a616\n    char * found_char_pos = strchr(str2, c2); // 0x40a616\n    int64_t v87 = *v82; // 0x40a61b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x40a625\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x40a630\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x40a920\n            __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40a8ed\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40a65e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x40a616\n    char v91 = *(char *)(v90 + 1); // 0x40a64b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x40a605\n        if (v91 != 58) {\n            // 0x40a65e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x40a874\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x40a978\n                *v8 = 0;\n            } else {\n                // 0x40a95c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40a89e\n            *v83 = 0;\n            // 0x40a65e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40a87e\n        if (v93 != 0) {\n            // 0x40a910\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40a89e\n            *v83 = 0;\n            // 0x40a65e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x40a891\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40a89e\n            *v83 = 0;\n            // 0x40a65e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40a9da\n            __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40a98a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x40a991\n        // 0x40a89e\n        *v83 = 0;\n        // 0x40a65e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x40a7e9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40a7eb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x40aa10\n                __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x40a9c1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x40a9c8\n            // 0x40a65e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x40a7f6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40a7fa\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x40a815;\n  lab_0x40a726:\n    // 0x40a726\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x40a564;\n  lab_0x40a815:;\n    int64_t v99 = function_409e60(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x40a833\n    // 0x40a65e\n    return v99 & 0xffffffff;\n  lab_0x40a6b6:;\n    int32_t v100 = v55; // 0x40a6b6\n    if (v100 != (int32_t)v59) {\n        // 0x40a6ba\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40a65e\n    return 0xffffffff;\n  lab_0x40a67a:\n    // 0x40a67a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x40a681\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40a65e\n    return v99 & 0xffffffff;\n  lab_0x40a7c0:\n    // 0x40a7c0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x40a5f5;\n  lab_0x40a774:\n    // 0x40a774\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_409e60(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40a79a\n    if ((int32_t)v101 != -1) {\n        // 0x40a65e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40a7af\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x40a7c0;\n}\n"
        },
        {
            "funcName": "function_40aa50",
            "funcStartAddr": "40aa50",
            "funcEndAddr": "40aaa6",
            "decompiledFuncCode": "int64_t function_40aa50(int64_t a1) {\n    // 0x40aa50\n    *(int32_t *)&g117 = *(int32_t *)&g45;\n    *(int32_t *)&g118 = g44;\n    int64_t v1; // 0x40aa50\n    int64_t result = function_40a480(v1, v1, v1, v1, v1, v1, &g117, a1 & 0xffffffff); // 0x40aa76\n    *(int32_t *)&g45 = *(int32_t *)&g117;\n    g123 = g120;\n    *(int32_t *)&g43 = g119;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40aab0",
            "funcStartAddr": "40aab0",
            "funcEndAddr": "40aac8",
            "decompiledFuncCode": "int64_t function_40aab0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40aab0\n    return function_40aa50(1);\n}\n"
        },
        {
            "funcName": "function_40aad0",
            "funcStartAddr": "40aad0",
            "funcEndAddr": "40aae3",
            "decompiledFuncCode": "int64_t function_40aad0(int64_t a1, int64_t a2, char * a3, char (**a4)[15], int32_t a5, int64_t a6) {\n    // 0x40aad0\n    return function_40aa50(0);\n}\n"
        },
        {
            "funcName": "function_40aaf0",
            "funcStartAddr": "40aaf0",
            "funcEndAddr": "40ab05",
            "decompiledFuncCode": "int64_t function_40aaf0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40aaf0\n    return function_40a480(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40ab10",
            "funcStartAddr": "40ab10",
            "funcEndAddr": "40ab26",
            "decompiledFuncCode": "int64_t function_40ab10(void) {\n    // 0x40ab10\n    return function_40aa50(0);\n}\n"
        },
        {
            "funcName": "function_40ab30",
            "funcStartAddr": "40ab30",
            "funcEndAddr": "40ab48",
            "decompiledFuncCode": "int64_t function_40ab30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40ab30\n    return function_40a480(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40ab50",
            "funcStartAddr": "40ab50",
            "funcEndAddr": "40abca",
            "decompiledFuncCode": "int64_t function_40ab50(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40ab5b\n    int64_t v2 = (int64_t)&g19; // 0x40ab5b\n    int64_t * pwc; // 0x40ab50\n    int64_t v3; // 0x40ab50\n    int64_t n; // 0x40ab50\n    if (a2 == 0) {\n        goto lab_0x40aba2;\n    } else {\n        // 0x40ab5d\n        if (a3 == 0) {\n            // 0x40ab88\n            return -2;\n        }\n        // 0x40ab69\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x40aba2;\n        } else {\n            goto lab_0x40ab74;\n        }\n    }\n  lab_0x40aba2:\n    // 0x40aba2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x40ab50\n    pwc = &v4;\n    goto lab_0x40ab74;\n  lab_0x40ab74:;\n    char * wstr = (char *)v3; // 0x40ab7a\n    int64_t ps; // 0x40ab50\n    int32_t v5 = mbrtowc((int32_t *)pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40ab7a\n    int64_t result = v5; // 0x40ab7a\n    if (v5 < 0xfffffffe) {\n        // 0x40ab88\n        return result;\n    }\n    int64_t result2 = result; // 0x40abb9\n    if ((char)function_418ae0(0, v3) == 0) {\n        // 0x40abbb\n        *(int32_t *)pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x40ab88\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40abd0",
            "funcStartAddr": "40abd0",
            "funcEndAddr": "40acd4",
            "decompiledFuncCode": "int64_t function_40abd0(int64_t result, int32_t a2, int64_t a3) {\n    // 0x40abd0\n    if (a3 == 0) {\n        // 0x40ac09\n        return 0;\n    }\n    int64_t v1 = result; // 0x40abdc\n    int64_t v2 = a3; // 0x40abdc\n    int64_t result2; // 0x40abd0\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x40abde\n        int64_t v4 = result; // 0x40abe1\n        if ((char)result == v3) {\n            // 0x40ac09\n            return result;\n        }\n        int64_t v5 = a3; // 0x40abe1\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x40abf0\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x40ac10;\n            }\n            // 0x40abf6\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x40ac09\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x40ac09\n        return result2;\n    }\n  lab_0x40ac10:;\n    int64_t result3 = v1; // 0x40ac3d\n    int64_t v6 = v2; // 0x40ac3d\n    if (v2 >= 8) {\n        uint64_t v7 = (int64_t)a2;\n        int64_t v8 = 256 * v7 & 0xff00 | v7 % 256; // 0x40ac1f\n        int64_t v9 = 0x10000 * v8 | v8; // 0x40ac2c\n        int64_t v10 = 0x100000000 * v9 | v9; // 0x40ac36\n        int64_t v11 = *(int64_t *)v1 ^ v10; // 0x40ac56\n        result3 = v1;\n        v6 = v2;\n        if (((v11 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v11 - 0x101010101010101) == 0) {\n            int64_t v12 = v2 - 8; // 0x40ac85\n            int64_t v13 = v1 + 8; // 0x40ac89\n            while (v12 >= 8) {\n                int64_t v14 = *(int64_t *)v13 ^ v10; // 0x40ac73\n                result3 = v13;\n                v6 = v12;\n                if (((v14 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v14 - 0x101010101010101) != 0) {\n                    goto lab_0x40ac9c;\n                }\n                v12 -= 8;\n                v13 += 8;\n            }\n            // 0x40ac93\n            result3 = v13;\n            v6 = v12;\n            if (v12 == 0) {\n                // 0x40ac09\n                return 0;\n            }\n        }\n    }\n  lab_0x40ac9c:;\n    char v15 = a2; // 0x40ac9c\n    if (*(char *)result3 == v15) {\n        // 0x40ac09\n        return result3;\n    }\n    int64_t v16 = result3 + 1;\n    result2 = 0;\n    while (v16 != v6 + result3) {\n        // 0x40acb0\n        result2 = v16;\n        if (*(char *)v16 == v15) {\n            // break -> 0x40ac09\n            break;\n        }\n        v16++;\n        result2 = 0;\n    }\n    // 0x40ac09\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40ace0",
            "funcStartAddr": "40ace0",
            "funcEndAddr": "40ad23",
            "decompiledFuncCode": "int64_t function_40ace0(int64_t a1, int64_t a2, int64_t a3) {\n    bool v1 = a1 == 0 | a2 == 0;\n    if (v1) {\n        // 0x40acfa\n        return 0;\n    }\n    // 0x40acf0\n    int64_t v2; // 0x40ace0\n    int64_t result = v2 & -256 | (int64_t)v1; // 0x40acec\n    int64_t v3 = *(int64_t *)(a1 + 8); // 0x40acf0\n    if (v3 != *(int64_t *)(a2 + 8)) {\n        // 0x40acfa\n        return result;\n    }\n    int64_t v4 = v3; // 0x40ad12\n    v4--;\n    int64_t result2 = 1; // 0x40ad16\n    while (v4 >= 0) {\n        int64_t v5 = 8 * v4; // 0x40ad08\n        int64_t v6 = *(int64_t *)(*(int64_t *)(a1 + 16) + v5); // 0x40ad0c\n        result2 = result;\n        if (v6 != *(int64_t *)(*(int64_t *)(a2 + 16) + v5)) {\n            // break -> 0x40acfa\n            break;\n        }\n        v4--;\n        result2 = 1;\n    }\n    // 0x40acfa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40ad30",
            "funcStartAddr": "40ad30",
            "funcEndAddr": "40ad9b",
            "decompiledFuncCode": "int64_t function_40ad30(int64_t a1, int64_t a2, int32_t a3) {\n    int64_t v1 = a1; // 0x40ad3d\n    int64_t result; // 0x40ad30\n    while (true) {\n        int64_t v2 = v1;\n        int64_t v3 = *(int64_t *)(v2 + 8); // 0x40ad43\n        v1 = v3;\n        if (v3 == 0) {\n            int64_t v4 = *(int64_t *)(v2 + 16); // 0x40ad4c\n            v1 = v4;\n            if (v4 == 0) {\n                // 0x40ad55\n                result = v4;\n                if ((int32_t)v4 != 0) {\n                    // break -> 0x40ad96\n                    break;\n                }\n                int64_t v5 = *(int64_t *)v2; // 0x40ad68\n                result = v4;\n                if (v5 == 0) {\n                    // break -> 0x40ad96\n                    break;\n                }\n                int64_t v6 = v2;\n                int64_t v7 = v5;\n                int64_t v8 = *(int64_t *)(v7 + 16); // 0x40ad70\n                v1 = v8;\n                while (v8 == 0 || v8 == v6) {\n                    // 0x40ad89\n                    result = v8;\n                    if ((int32_t)v8 != 0) {\n                        return result;\n                    }\n                    int64_t v9 = *(int64_t *)v7; // 0x40ad68\n                    result = v8;\n                    if (v9 == 0) {\n                        return result;\n                    }\n                    v6 = v7;\n                    v7 = v9;\n                    v8 = *(int64_t *)(v7 + 16);\n                    v1 = v8;\n                }\n            }\n        }\n    }\n  lab_0x40ad96_2:\n    // 0x40ad96\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ada0",
            "funcStartAddr": "40ada0",
            "funcEndAddr": "40aecf",
            "decompiledFuncCode": "int64_t function_40ada0(int64_t * a1, int64_t a2, uint64_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x40ada0\n    uint64_t v3 = *v2; // 0x40ada0\n    if (*(int64_t *)(a2 + 104) <= v3) {\n        // 0x40ae30\n        *(char *)(v1 + 8) = 2;\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x40adae\n    char v5 = *(char *)(v4 + v3); // 0x40adb9\n    *(char *)a1 = v5;\n    if (*(int32_t *)(a2 + 144) >= 2) {\n        // 0x40adc2\n        if (v3 != *(int64_t *)(a2 + 48)) {\n            // 0x40adc8\n            if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3) == -1) {\n                // 0x40ae07\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n        }\n    }\n    switch (v5) {\n        case 92: {\n            if (a3 % 2 == 0) {\n                // 0x40ae07\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n            int64_t v6 = v3 + 1;\n            if (v6 >= *(int64_t *)(a2 + 88)) {\n                // 0x40ae07\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n            // 0x40ae80\n            *v2 = v6;\n            *(char *)(v1 + 8) = 1;\n            *(char *)a1 = *(char *)(v4 + v6);\n            return 1;\n        }\n        case 91: {\n            uint64_t v7 = v3 + 1;\n            if (v7 >= *(int64_t *)(a2 + 88)) {\n                // 0x40ae5e\n                *(char *)(v1 + 8) = 1;\n                *(char *)a1 = 91;\n                return 1;\n            }\n            char v8 = *(char *)(v4 + v7); // 0x40ae4a\n            *(char *)a1 = v8;\n            switch (v8) {\n                case 58: {\n                    if ((a3 & 4) != 0) {\n                        // 0x40aec5\n                        *(char *)(v1 + 8) = 30;\n                        return 2;\n                    }\n                    // 0x40ae5e\n                    *(char *)(v1 + 8) = 1;\n                    *(char *)a1 = 91;\n                    return 1;\n                }\n                case 61: {\n                    // 0x40aeb0\n                    *(char *)(v1 + 8) = 28;\n                    return 2;\n                }\n                case 46: {\n                    // 0x40aea0\n                    *(char *)(v1 + 8) = 26;\n                    return 2;\n                }\n            }\n            // 0x40ae5e\n            *(char *)(v1 + 8) = 1;\n            *(char *)a1 = 91;\n            return 1;\n        }\n        case 93: {\n            // 0x40ae70\n            *(char *)(v1 + 8) = 21;\n            return 1;\n        }\n    }\n    if (v5 == 94) {\n        // 0x40adeb\n        *(char *)(v1 + 8) = 25;\n        return 1;\n    }\n    if (v5 == 45) {\n        // 0x40ae1d\n        *(char *)(v1 + 8) = 22;\n        return 1;\n    }\n    // 0x40ae07\n    *(char *)(v1 + 8) = 1;\n    return 1;\n}\n"
        },
        {
            "funcName": "function_40aed0",
            "funcStartAddr": "40aed0",
            "funcEndAddr": "40aeed",
            "decompiledFuncCode": "int64_t function_40aed0(int64_t a1, int64_t a2) {\n    // 0x40aed0\n    if (*(char *)(a2 + 48) != 17 || *(int64_t *)(a2 + 40) != a1) {\n        // 0x40aed6\n        return 0;\n    }\n    char * v1 = (char *)(a2 + 50); // 0x40aee6\n    *v1 = *v1 | 8;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40aef0",
            "funcStartAddr": "40aef0",
            "funcEndAddr": "40b0ff",
            "decompiledFuncCode": "int64_t function_40aef0(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = *(int64_t *)(a1 + 152); // 0x40af05\n    uint64_t v2 = 0x100000000 * a2 >> 32; // 0x40af15\n    int64_t v3 = *(int64_t *)(v1 + 48) + 24 * a4; // 0x40af1d\n    int64_t * v4 = (int64_t *)(v3 + 8); // 0x40af21\n    int64_t v5 = *v4; // 0x40af21\n    if (v5 < 1) {\n        // 0x40b0cd\n        return (int32_t)v2 >> 1;\n    }\n    int64_t v6 = 1 << a3 % 64;\n    int32_t v7 = v2;\n    int64_t v8 = v5; // 0x40af6e\n    int64_t v9 = 0; // 0x40af6e\n    int64_t v10; // 0x40af79\n    int64_t v11; // 0x40aef0\n    int64_t v12; // 0x40aef0\n    int64_t v13; // 0x40aef0\n    int64_t v14; // 0x40aef0\n    while (true) {\n      lab_0x40af83_2:\n        // 0x40af83\n        v13 = v9;\n        v10 = v8;\n        int64_t v15 = *(int64_t *)(*(int64_t *)(v3 + 16) + 8 * v13); // 0x40af87\n        int64_t v16 = 16 * v15 + *(int64_t *)v1; // 0x40af92\n        char v17 = *(char *)(v16 + 8); // 0x40af95\n        if (v17 == 8) {\n            if (v7 % 2 != 0) {\n                // 0x40afd0\n                if (*(int64_t *)v16 == a3) {\n                    // 0x40afb0\n                    return 0xffffffff;\n                }\n            }\n            goto lab_0x40af75;\n        } else {\n            if (v17 != 9) {\n                if (a5 == -1 || v17 != 4) {\n                    goto lab_0x40af75;\n                } else {\n                    // 0x40affa\n                    v14 = 24 * v15 + 16;\n                    v11 = *(int64_t *)(a1 + 216) + 40 * a5;\n                    while (true) {\n                      lab_0x40b030:\n                        // 0x40b030\n                        v12 = v11;\n                        if (*(int64_t *)v12 != v15) {\n                            goto lab_0x40b0a0;\n                        } else {\n                            if (a3 > 63) {\n                                goto lab_0x40b049;\n                            } else {\n                                // 0x40b03c\n                                if ((v6 & (int64_t)*(int16_t *)(v12 + 34)) == 0) {\n                                    goto lab_0x40b0a0;\n                                } else {\n                                    goto lab_0x40b049;\n                                }\n                            }\n                        }\n                    }\n                  lab_0x40b0ac:;\n                    int64_t v18 = v13 + 1; // 0x40b0bf\n                    uint64_t v19 = *v4; // 0x40b0c3\n                    v8 = v19;\n                    v9 = v18;\n                    if (v19 <= v18) {\n                        // break -> 0x40b0cd\n                        break;\n                    }\n                    goto lab_0x40af83_2;\n                }\n            } else {\n                if ((v7 & 2) != 0) {\n                    // 0x40afab\n                    if (*(int64_t *)v16 == a3) {\n                        // 0x40afb0\n                        return 0;\n                    }\n                }\n                goto lab_0x40af75;\n            }\n        }\n    }\n  lab_0x40b0cd:\n    // 0x40b0cd\n    return v7 >> 1;\n  lab_0x40b0a0:\n    // 0x40b0a0\n    v11 = v12 + 40;\n    if (*(char *)(v12 + 32) == 0) {\n        // break -> 0x40b0ac\n        goto lab_0x40b0ac;\n    }\n    goto lab_0x40b030;\n  lab_0x40b049:;\n    int64_t v20 = *(int64_t *)*(int64_t *)(v14 + *(int64_t *)(v1 + 40)); // 0x40b052\n    if (v20 == a4) {\n        // 0x40b0e8\n        return -((v2 % 2)) & 0xffffffff;\n    }\n    int32_t v21 = function_40aef0(a1, v2 & 0xffffffff, a3, v20, a5); // 0x40b073\n    if (v21 == -1) {\n        // 0x40afb0\n        return 0xffffffff;\n    }\n    // 0x40b07c\n    if ((v7 & 2) != 0 == v21 == 0) {\n        // 0x40afb0\n        return 0;\n    }\n    if (a3 <= 63) {\n        int16_t * v22 = (int16_t *)(v12 + 34); // 0x40b097\n        *v22 = *v22 & -1 - (int16_t)v6;\n    }\n    goto lab_0x40b0a0;\n  lab_0x40af75:;\n    int64_t v23 = v13 + 1; // 0x40af75\n    v8 = v10;\n    v9 = v23;\n    if (v10 <= v23) {\n        // break -> 0x40b0cd\n        goto lab_0x40b0cd;\n    }\n    goto lab_0x40af83;\n  lab_0x40af83:\n    // 0x40af83\n    goto lab_0x40af83_2;\n}\n"
        },
        {
            "funcName": "function_40b100",
            "funcStartAddr": "40b100",
            "funcEndAddr": "40b166",
            "decompiledFuncCode": "int64_t function_40b100(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = *(int64_t *)(a1 + 216) + 40 * a2; // 0x40b10b\n    int64_t v2 = *(int64_t *)(v1 + 16); // 0x40b10f\n    if (v2 > a5) {\n        // 0x40b136\n        return 0xffffffff;\n    }\n    int64_t v3 = *(int64_t *)(v1 + 24); // 0x40b118\n    if (v3 < a5) {\n        // 0x40b136\n        return 1;\n    }\n    if (v3 == a5) {\n        // 0x40b143\n        return function_40aef0(a1, (int64_t)(v2 == a5) | 2, a3, a4, a6);\n    }\n    // 0x40b12f\n    if (v2 == a5) {\n        // 0x40b143\n        return function_40aef0(a1, 1, a3, a4, a6);\n    }\n    // 0x40b136\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40b170",
            "funcStartAddr": "40b170",
            "funcEndAddr": "40b20c",
            "decompiledFuncCode": "int64_t function_40b170(int64_t a1, uint64_t a2) {\n    // 0x40b170\n    if (*(int32_t *)(a1 + 144) >= 2) {\n        if (a2 >= 0x2000000000000000) {\n            // 0x40b200\n            return 12;\n        }\n        int64_t * v1 = (int64_t *)(a1 + 16); // 0x40b194\n        int32_t v2 = a2;\n        int64_t * mem = realloc((int64_t *)*v1, 4 * v2); // 0x40b1a0\n        if (mem == NULL) {\n            // 0x40b200\n            return 12;\n        }\n        int64_t * v3 = (int64_t *)(a1 + 24); // 0x40b1aa\n        int64_t v4 = *v3; // 0x40b1aa\n        *v1 = (int64_t)mem;\n        if (v4 != 0) {\n            int64_t * mem2 = realloc((int64_t *)v4, 8 * v2); // 0x40b1bf\n            if (mem2 == NULL) {\n                // 0x40b200\n                return 12;\n            }\n            // 0x40b1c9\n            *v3 = (int64_t)mem2;\n        }\n    }\n    // 0x40b1cd\n    if (*(char *)(a1 + 139) == 0) {\n        // 0x40b1d6\n        *(int64_t *)(a1 + 64) = a2;\n        return 0;\n    }\n    int64_t * v5 = (int64_t *)(a1 + 8); // 0x40b1e8\n    int64_t * mem3 = realloc((int64_t *)*v5, (int32_t)a2); // 0x40b1ef\n    if (mem3 == NULL) {\n        // 0x40b200\n        return 12;\n    }\n    // 0x40b1f9\n    *v5 = (int64_t)mem3;\n    // 0x40b1d6\n    *(int64_t *)(a1 + 64) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40b210",
            "funcStartAddr": "40b210",
            "funcEndAddr": "40b274",
            "decompiledFuncCode": "int64_t function_40b210(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40b21c\n    int64_t v2 = *v1; // 0x40b21c\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x40b220\n    int64_t v4 = *v3; // 0x40b220\n    int64_t v5 = v4; // 0x40b227\n    int64_t v6 = v2; // 0x40b227\n    if (v2 == a1) {\n        int64_t v7 = a1 + 1; // 0x40b248\n        *(int64_t *)a1 = 2 * v7;\n        int64_t * mem = realloc((int64_t *)v4, 16 * (int32_t)v7); // 0x40b25a\n        if (mem == NULL) {\n            // 0x40b23a\n            return 0;\n        }\n        // 0x40b264\n        v5 = (int64_t)mem;\n        *v3 = v5;\n        v6 = *v1;\n    }\n    // 0x40b229\n    *v1 = v6 + 1;\n    *(int64_t *)(8 * v6 + v5) = a2;\n    // 0x40b23a\n    return 1;\n}\n"
        },
        {
            "funcName": "function_40b280",
            "funcStartAddr": "40b280",
            "funcEndAddr": "40b3ac",
            "decompiledFuncCode": "int64_t function_40b280(int64_t a1, int64_t a2) {\n    if (a1 == 0) {\n        // 0x40b2b8\n        abort();\n        // UNREACHABLE\n    }\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40b294\n    int64_t v2 = *v1; // 0x40b294\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x40b298\n    int64_t v4 = *v3; // 0x40b298\n    if (v2 == 0) {\n        // 0x40b2a1\n        *(int64_t *)v4 = a2;\n        *v1 = *v1 + 1;\n        // 0x40b2ae\n        return 1;\n    }\n    int64_t v5 = v4; // 0x40b2f3\n    int64_t v6 = v2; // 0x40b2f3\n    if (v2 == a1) {\n        // 0x40b380\n        *(int64_t *)a1 = 2 * a1;\n        int64_t * mem = realloc((int64_t *)v4, 16 * (int32_t)a1); // 0x40b38e\n        if (mem == NULL) {\n            // 0x40b2ae\n            return 0;\n        }\n        // 0x40b398\n        v5 = (int64_t)mem;\n        *v3 = v5;\n        v6 = *v1;\n    }\n    int64_t v7 = 8 * v6; // 0x40b2f9\n    int64_t v8; // 0x40b280\n    if (*(int64_t *)v5 > a2) {\n        // 0x40b306\n        v8 = v7;\n        if (v6 >= 1) {\n            int64_t v9 = v7 + v5;\n            int64_t v10 = v9 - 8; // 0x40b310\n            *(int64_t *)v9 = *(int64_t *)v10;\n            v8 = 0;\n            while (v10 != v5) {\n                // 0x40b310\n                v9 = v10;\n                v10 = v9 - 8;\n                *(int64_t *)v9 = *(int64_t *)v10;\n                v8 = 0;\n            }\n        }\n    } else {\n        int64_t v11 = v5 - 8; // 0x40b340\n        int64_t v12 = *(int64_t *)(v7 + v11); // 0x40b340\n        v8 = v7;\n        if (v12 > a2) {\n            *(int64_t *)(v7 + v5) = v12;\n            int64_t v13 = v7 - 8; // 0x40b354\n            uint64_t v14 = *(int64_t *)(v13 + v11); // 0x40b358\n            v8 = v13;\n            int64_t v15 = v13; // 0x40b360\n            while (v14 > a2) {\n                // 0x40b350\n                *(int64_t *)(v15 + v5) = v14;\n                v13 = v15 - 8;\n                v14 = *(int64_t *)(v13 + v11);\n                v8 = v13;\n                v15 = v13;\n            }\n        }\n    }\n    // 0x40b323\n    *(int64_t *)(v8 + v5) = a2;\n    *v1 = *v1 + 1;\n    // 0x40b2ae\n    return 1;\n}\n"
        },
        {
            "funcName": "function_40b3b0",
            "funcStartAddr": "40b3b0",
            "funcEndAddr": "40b4ab",
            "decompiledFuncCode": "int64_t function_40b3b0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a2 + 32; // 0x40b3be\n    int64_t * v2 = (int64_t *)(a2 + 16); // 0x40b3cb\n    int64_t v3 = *v2; // 0x40b3cb\n    *(int64_t *)a2 = a3;\n    *(int64_t *)(a2 + 40) = 0;\n    *(int64_t *)v1 = v3;\n    int64_t size = 8 * v3; // 0x40b3de\n    int64_t * mem = malloc((int32_t)size); // 0x40b3e6\n    *(int64_t *)(a2 + 48) = (int64_t)mem;\n    if (mem == NULL) {\n        // 0x40b42e\n        return 12;\n    }\n    if (v3 >= 0 == (v3 != 0)) {\n        int64_t v4 = 0; // 0x40b400\n        int64_t v5 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v4); // 0x40b40e\n        int64_t v6 = size; // 0x40b420\n        int64_t v7; // 0x40b425\n        if ((*(char *)(size + 8 + 16 * v5) & 8) == 0) {\n            // 0x40b422\n            v7 = function_40b210(v1, v5);\n            v6 = v1;\n            if ((char)v7 == 0) {\n                // 0x40b42e\n                return 12;\n            }\n        }\n        // 0x40b400\n        v4++;\n        int64_t v8 = v6; // 0x40b408\n        while (*v2 > v4) {\n            // 0x40b40a\n            v5 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v4);\n            v6 = v8;\n            if ((*(char *)(v8 + 8 + 16 * v5) & 8) == 0) {\n                // 0x40b422\n                v7 = function_40b210(v1, v5);\n                v6 = v1;\n                if ((char)v7 == 0) {\n                    // 0x40b42e\n                    return 12;\n                }\n            }\n            // 0x40b400\n            v4++;\n            v8 = v6;\n        }\n    }\n    int64_t v9 = 24 * (*(int64_t *)(a1 + 136) & a3) + *(int64_t *)(a1 + 64); // 0x40b458\n    int64_t * v10 = (int64_t *)v9; // 0x40b45c\n    uint64_t v11 = *v10; // 0x40b45c\n    int64_t * v12 = (int64_t *)(v9 + 16); // 0x40b45f\n    int64_t v13 = *v12; // 0x40b45f\n    int64_t v14 = v11 + 1; // 0x40b463\n    int64_t * v15 = (int64_t *)(v9 + 8); // 0x40b467\n    int64_t v16 = v13; // 0x40b46b\n    int64_t v17 = v11; // 0x40b46b\n    int64_t v18 = v14; // 0x40b46b\n    if (*v15 <= v11) {\n        int64_t * mem2 = realloc((int64_t *)v13, 16 * (int32_t)v14); // 0x40b490\n        if (mem2 == NULL) {\n            // 0x40b42e\n            return 12;\n        }\n        // 0x40b49a\n        v16 = (int64_t)mem2;\n        v17 = *v10;\n        *v12 = v16;\n        *v15 = 2 * v14;\n        v18 = v17 + 1;\n    }\n    // 0x40b46d\n    *v10 = v18;\n    *(int64_t *)(8 * v17 + v16) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40b4b0",
            "funcStartAddr": "40b4b0",
            "funcEndAddr": "40b4d6",
            "decompiledFuncCode": "int64_t function_40b4b0(uint64_t a1, int64_t a2) {\n    uint64_t wc = a1 % 256; // 0x40b4b5\n    int32_t v1 = btowc((int32_t)wc); // 0x40b4bf\n    int64_t v2 = v1; // 0x40b4bf\n    int64_t result = v2; // 0x40b4c7\n    if (v1 == -1) {\n        // 0x40b4c9\n        result = (a2 == 0 ? wc : v2) & 0xffffffff;\n    }\n    // 0x40b4cf\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b4e0",
            "funcStartAddr": "40b4e0",
            "funcEndAddr": "40b560",
            "decompiledFuncCode": "int64_t function_40b4e0(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 88); // 0x40b4e2\n    int64_t v2 = *(int64_t *)(a1 + 64); // 0x40b4e7\n    int64_t v3 = v2 - v1; // 0x40b4e7\n    uint64_t v4 = v3 == 0 | v3 < 0 != ((v3 ^ v2) & (v2 ^ v1)) < 0 ? v2 : v1; // 0x40b4ef\n    int64_t * v5 = (int64_t *)(a1 + 48); // 0x40b4f4\n    uint64_t v6 = *v5; // 0x40b4f4\n    if (v4 <= v6) {\n        // 0x40b550\n        *(int64_t *)(a1 + 56) = v6;\n        int64_t result; // 0x40b4e0\n        return result;\n    }\n    int32_t ** v7 = __ctype_toupper_loc(); // 0x40b4fd\n    int64_t v8 = v6; // 0x40b502\n    int64_t v9 = *(int64_t *)(a1 + 120); // 0x40b50c\n    int64_t v10 = (int64_t)*(char *)(v8 + a1 + *(int64_t *)(a1 + 40)); // 0x40b517\n    int64_t v11 = v10; // 0x40b51d\n    if (v9 != 0) {\n        // 0x40b548\n        v11 = (int64_t)*(char *)(v9 + v10);\n    }\n    int32_t v12 = *(int32_t *)(4 * v11 + (int64_t)*v7); // 0x40b526\n    *(char *)(*(int64_t *)(a1 + 8) + v8) = (char)v12;\n    v8++;\n    while (v4 != v8) {\n        // 0x40b508\n        v9 = *(int64_t *)(a1 + 120);\n        v10 = (int64_t)*(char *)(v8 + a1 + *(int64_t *)(a1 + 40));\n        v11 = v10;\n        if (v9 != 0) {\n            // 0x40b548\n            v11 = (int64_t)*(char *)(v9 + v10);\n        }\n        // 0x40b51f\n        v12 = *(int32_t *)(4 * v11 + (int64_t)*v7);\n        *(char *)(*(int64_t *)(a1 + 8) + v8) = (char)v12;\n        v8++;\n    }\n    // 0x40b535\n    *v5 = v4;\n    *(int64_t *)(a1 + 56) = v4;\n    return (int64_t)v7;\n}\n"
        },
        {
            "funcName": "function_40b560",
            "funcStartAddr": "40b560",
            "funcEndAddr": "40b706",
            "decompiledFuncCode": "int64_t function_40b560(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 88); // 0x40b56f\n    int64_t v2 = *v1; // 0x40b56f\n    int64_t * v3 = (int64_t *)(a1 + 48); // 0x40b573\n    int64_t v4 = *v3; // 0x40b573\n    int64_t * v5 = (int64_t *)(a1 + 64); // 0x40b577\n    int64_t v6 = *v5; // 0x40b577\n    int64_t v7 = v6 - v2; // 0x40b577\n    uint64_t v8 = v7 == 0 | v7 < 0 != ((v7 ^ v6) & (v6 ^ v2)) < 0 ? v6 : v2; // 0x40b57b\n    int64_t result; // 0x40b560\n    if (v8 <= v4) {\n        // 0x40b618\n        *v3 = v4;\n        *(int64_t *)(a1 + 56) = v4;\n        return result;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 120); // 0x40b590\n    int64_t * v10 = (int64_t *)(a1 + 32);\n    int64_t * v11 = (int64_t *)(a1 + 40);\n    int32_t * v12 = (int32_t *)(a1 + 144);\n    int64_t v13; // bp-104, 0x40b560\n    int64_t v14 = &v13;\n    int64_t v15 = v4; // 0x40b560\n    int64_t v16; // 0x40b560\n    int64_t v17; // 0x40b560\n    int64_t v18; // 0x40b560\n    int32_t v19; // bp-108, 0x40b560\n    int64_t v20; // 0x40b597\n    int64_t result2; // 0x40b6d8\n    while (true) {\n      lab_0x40b590:\n        // 0x40b590\n        v17 = v15;\n        int64_t v21 = *v9; // 0x40b590\n        v20 = *v10;\n        int64_t v22 = v8 - v17; // 0x40b59b\n        int64_t v23; // 0x40b560\n        if (v21 != 0) {\n            // 0x40b670\n            v23 = v14;\n            if (*v12 >= 1) {\n                // 0x40b67e\n                v23 = v14;\n                int64_t v24 = 0; // 0x40b688\n                int64_t v25 = v21; // 0x40b688\n                if (v22 >= 0 == (v22 != 0)) {\n                    int64_t v26 = v24 + v17;\n                    unsigned char v27 = *(char *)(v26 + v25 + *v11); // 0x40b6ae\n                    char v28 = *(char *)(v25 + (int64_t)v27); // 0x40b6b1\n                    *(char *)(*(int64_t *)(a1 + 8) + v26) = v28;\n                    *(char *)(v24 + v14) = v28;\n                    int64_t v29 = v24 + 1; // 0x40b6c2\n                    v23 = v14;\n                    while (!((v22 == v29 | (v29 & 0xffffffff) >= (int64_t)*v12))) {\n                        // 0x40b69d\n                        v25 = *v9;\n                        v26 = v29 + v17;\n                        v27 = *(char *)(v26 + v25 + *v11);\n                        v28 = *(char *)(v25 + (int64_t)v27);\n                        *(char *)(*(int64_t *)(a1 + 8) + v26) = v28;\n                        *(char *)(v29 + v14) = v28;\n                        v29++;\n                        v23 = v14;\n                    }\n                }\n            }\n        } else {\n            // 0x40b5a7\n            v23 = v21 + v17 + *v11;\n        }\n        int64_t v30 = function_40ab50((int64_t *)&v19, v23, v22); // 0x40b5b9\n        if (v30 < 0xffffffffffffffff) {\n            // 0x40b5c8\n            v16 = v30;\n            v18 = v19;\n            if (v30 == -2) {\n                // 0x40b6d8\n                result2 = *v1;\n                if (*v5 < result2) {\n                    // break -> 0x40b6e6\n                    break;\n                }\n                goto lab_0x40b630;\n            } else {\n                goto lab_0x40b5d6;\n            }\n        } else {\n            goto lab_0x40b630;\n        }\n    }\n    // 0x40b6e6\n    *v10 = v20;\n    // 0x40b618\n    *v3 = v17;\n    *(int64_t *)(a1 + 56) = v17;\n    return result2;\n  lab_0x40b630:;\n    int64_t v31 = *v9; // 0x40b633\n    unsigned char v32 = *(char *)(v17 + (int64_t)&v19 + *v11); // 0x40b63e\n    int64_t v33 = v32; // 0x40b63e\n    v19 = v32;\n    int64_t v34 = v33; // 0x40b648\n    if (v31 != 0) {\n        unsigned char v35 = *(char *)(v31 + v33); // 0x40b6ef\n        v19 = v35;\n        v34 = v35;\n    }\n    // 0x40b64e\n    *v10 = v20;\n    v16 = 1;\n    v18 = v34;\n    goto lab_0x40b5d6;\n  lab_0x40b5d6:;\n    int64_t v36 = v16;\n    int64_t v37 = *(int64_t *)(a1 + 16); // 0x40b5d6\n    int64_t v38 = v17 + 1; // 0x40b5da\n    int64_t v39 = v37 + 4 * v17;\n    *(int32_t *)v39 = (int32_t)v18;\n    int64_t v40 = v36 + v17; // 0x40b5e9\n    int64_t v41; // 0x40b560\n    if (v38 < v40) {\n        int64_t v42 = v39 + 4; // 0x40b5fa\n        *(int32_t *)v42 = -1;\n        v42 += 4;\n        while (v37 + 4 * v40 != v42) {\n            // 0x40b600\n            *(int32_t *)v42 = -1;\n            v42 += 4;\n        }\n        // 0x40b60f\n        v15 = v40;\n        result = v36;\n        v41 = v40;\n        if (v40 >= v8) {\n            // 0x40b618\n            *v3 = v41;\n            *(int64_t *)(a1 + 56) = v41;\n            return result;\n        }\n    } else {\n        // 0x40b660\n        v15 = v38;\n        result = v36;\n        v41 = v38;\n        if (v38 >= v8) {\n            // 0x40b618\n            *v3 = v41;\n            *(int64_t *)(a1 + 56) = v41;\n            return result;\n        }\n    }\n    // 0x40b590\n    goto lab_0x40b590;\n}\n"
        },
        {
            "funcName": "function_40b710",
            "funcStartAddr": "40b710",
            "funcEndAddr": "40bd0d",
            "decompiledFuncCode": "int64_t function_40b710(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 88); // 0x40b721\n    int64_t v2 = *v1; // 0x40b721\n    int64_t * v3 = (int64_t *)(a1 + 64); // 0x40b725\n    int64_t v4 = *v3; // 0x40b725\n    int64_t v5 = v4 - v2; // 0x40b725\n    int64_t v6 = v5 == 0 | v5 < 0 != ((v5 ^ v4) & (v4 ^ v2)) < 0 ? v4 : v2; // 0x40b729\n    int64_t * v7 = (int64_t *)(a1 + 48); // 0x40b735\n    int64_t v8 = *v7; // 0x40b735\n    int64_t * v9; // 0x40b710\n    int64_t * v10; // 0x40b710\n    int64_t v11; // 0x40b710\n    int64_t v12; // 0x40b710\n    int64_t v13; // 0x40b710\n    int64_t v14; // 0x40b710\n    int64_t v15; // 0x40b710\n    int64_t v16; // 0x40b710\n    int64_t v17; // 0x40b710\n    int64_t v18; // 0x40b710\n    int64_t v19; // 0x40b710\n    int64_t v20; // 0x40b710\n    int64_t wstr; // bp-120, 0x40b710\n    int64_t v21; // 0x40b710\n    int64_t v22; // 0x40b710\n    int64_t * v23; // 0x40b8d0\n    int64_t * v24; // 0x40b710\n    int64_t * v25; // 0x40b710\n    int64_t * v26; // 0x40b710\n    int64_t v27; // 0x40b710\n    int64_t v28; // 0x40b8da\n    int64_t v29; // 0x40b907\n    if (*(char *)(a1 + 138) != 0) {\n        goto lab_0x40b746;\n    } else {\n        int64_t * v30 = (int64_t *)(a1 + 120);\n        if (*v30 == 0) {\n            // 0x40b8b0\n            if (*(char *)(a1 + 140) != 0) {\n                goto lab_0x40b746;\n            } else {\n                // 0x40b8bd\n                v16 = v8;\n                if (v8 < v6) {\n                    while (true) {\n                      lab_0x40b8d0:\n                        // 0x40b8d0\n                        v14 = v13;\n                        v28 = v14 + v19 + *v23;\n                        unsigned char v31 = *(char *)v28; // 0x40b8dd\n                        if (v31 <= -1) {\n                            goto lab_0x40b8f9;\n                        } else {\n                            // 0x40b8e8\n                            struct _TYPEDEF___mbstate_t * ps; // 0x40b8ca\n                            if (mbsinit(ps) != 0) {\n                                int32_t v32 = *(int32_t *)(4 * (int64_t)v31 + (int64_t)*__ctype_toupper_loc()); // 0x40ba04\n                                *(char *)(*v24 + v14) = (char)v32;\n                                unsigned char v33 = *(char *)(*v24 + v14); // 0x40ba14\n                                *(int32_t *)(*v25 + 4 * v14) = (int32_t)v33;\n                                int64_t v34; // 0x40b710\n                                v20 = v34;\n                                v15 = v14 + 1;\n                                goto lab_0x40b9ba;\n                            } else {\n                                goto lab_0x40b8f9;\n                            }\n                        }\n                    }\n                  lab_0x40baf0:\n                    // 0x40baf0\n                    v10 = v30;\n                    v9 = v26;\n                    v21 = v27;\n                    v22 = v29;\n                    v17 = v6;\n                    v18 = &wstr;\n                    v11 = v14;\n                    v12 = v14;\n                    goto lab_0x40b770;\n                } else {\n                    goto lab_0x40b9c3;\n                }\n            }\n        } else {\n            goto lab_0x40b746;\n        }\n    }\n  lab_0x40b9c3:\n    // 0x40b9c3\n    *v7 = v16;\n    *(int64_t *)(a1 + 56) = v16;\n    // 0x40b89a\n    return 0;\n  lab_0x40b74a:;\n    // 0x40b74a\n    int64_t v35; // 0x40b710\n    int64_t v36 = v35;\n    int64_t v37; // 0x40b710\n    int64_t v38 = v37;\n    int64_t v39; // 0x40b710\n    int64_t v40 = v39;\n    int64_t v41 = v38; // 0x40b74d\n    int64_t v42 = v36; // 0x40b74d\n    int64_t v43; // 0x40b710\n    struct _TYPEDEF___mbstate_t * v44; // bp-132, 0x40b710\n    if (v40 > v36) {\n        // 0x40b753\n        v10 = (int64_t *)(a1 + 120);\n        v9 = (int64_t *)(a1 + 32);\n        v21 = (int64_t)&v44;\n        v22 = v40 - v36;\n        v17 = v40;\n        v18 = v43;\n        v11 = v38;\n        v12 = v36;\n        goto lab_0x40b770;\n    } else {\n        goto lab_0x40b890;\n    }\n  lab_0x40b8f9:\n    // 0x40b8f9\n    v29 = v6 - v14;\n    int32_t ps2 = (int32_t)*v26; // bp-128, 0x40b90a\n    uint64_t v45 = function_40ab50((int64_t *)&v44, v28, v29); // 0x40b921\n    if (v45 < 0xfffffffffffffffe) {\n        int32_t wc = (int64_t)v44; // 0x40b937\n        int32_t wc2 = towupper(wc); // 0x40b93d\n        int64_t v46; // 0x40b977\n        if (wc2 == wc) {\n            int64_t v47 = *v24; // 0x40b9d8\n            int64_t v48 = *v23; // 0x40b9dc\n            int64_t v49 = v47 + v14; // 0x40b9e6\n            memcpy((int64_t *)v49, (int64_t *)(v48 + v14 + v49), (int32_t)v45);\n        } else {\n            int32_t v50 = wcrtomb((char *)&wstr, wc2, (struct _TYPEDEF___mbstate_t *)&ps2); // 0x40b95d\n            if (v45 != (int64_t)v50) {\n                // break -> 0x40baf0\n                goto lab_0x40baf0;\n            }\n            // 0x40b96b\n            v46 = *v24 + v14;\n            memcpy((int64_t *)v46, &wstr, (int32_t)v45);\n        }\n        int64_t v51 = v46;\n        int64_t v52 = *v25; // 0x40b97f\n        int64_t v53 = v14 + 1; // 0x40b98b\n        int64_t v54 = v52 + 4 * v14;\n        *(int32_t *)v54 = wc2;\n        int64_t v55 = v45 + v14; // 0x40b993\n        v20 = v51;\n        v15 = v53;\n        if (v53 < v55) {\n            int64_t v56 = v54 + 4; // 0x40b9a4\n            *(int32_t *)v56 = -1;\n            v56 += 4;\n            v20 = v51;\n            v15 = v55;\n            while (v52 + 4 * v55 != v56) {\n                // 0x40b9a8\n                *(int32_t *)v56 = -1;\n                v56 += 4;\n                v20 = v51;\n                v15 = v55;\n            }\n        }\n    } else {\n        if (v45 != -2) {\n            unsigned char v57 = *(char *)(v14 + v27 + *v23); // 0x40ba6f\n            *(char *)(*v24 + v14) = v57;\n            *(int32_t *)(*v25 + 4 * v14) = (int32_t)v57;\n            *v26 = (int64_t)ps2;\n            v20 = v27;\n            v15 = v14 + 1;\n        } else {\n            // 0x40ba2e\n            if (*v3 < *v1) {\n                // 0x40bca7\n                *v26 = (int64_t)ps2;\n                v16 = v14;\n                goto lab_0x40b9c3;\n            }\n            unsigned char v58 = *(char *)(v14 + v27 + *v23); // 0x40ba4a\n            *(char *)(*v24 + v14) = v58;\n            *(int32_t *)(*v25 + 4 * v14) = (int32_t)v58;\n            v20 = v27;\n            v15 = v14 + 1;\n        }\n    }\n    goto lab_0x40b9ba;\n  lab_0x40b9ba:\n    // 0x40b9ba\n    v19 = v20;\n    v13 = v15;\n    v16 = v15;\n    if (v6 <= v15) {\n        goto lab_0x40b9c3;\n    }\n    goto lab_0x40b8d0;\n  lab_0x40b746:\n    // 0x40b746\n    v39 = v6;\n    v43 = a1;\n    v37 = *(int64_t *)(a1 + 56);\n    v35 = v8;\n    goto lab_0x40b74a;\n  lab_0x40b890:\n    // 0x40b890\n    *v7 = v42;\n    *(int64_t *)(a1 + 56) = v41;\n    // 0x40b89a\n    return 0;\n  lab_0x40b770:;\n    int64_t v59 = v12;\n    int64_t v60 = v11;\n    int64_t v61 = v17;\n    int64_t v62 = v22;\n    int64_t v63 = v21;\n    int64_t * v64 = v9;\n    int64_t * v65 = v10;\n    int64_t v66 = *v65; // 0x40b774\n    ps2 = (int32_t)*v64;\n    int64_t v67; // 0x40b710\n    if (v66 != 0) {\n        int32_t v68 = *(int32_t *)(a1 + 144); // 0x40ba8f\n        if (v62 < 1 || v68 < 1) {\n            // 0x40ba8f\n            v67 = &wstr;\n        } else {\n            int64_t v69 = &wstr;\n            int64_t v70 = 2 * (*(int64_t *)(a1 + 40) + v60); // 0x40babc\n            int64_t v71 = 0;\n            char v72 = *(char *)(v66 + (int64_t)*(char *)(v71 + v70)); // 0x40bad0\n            *(char *)(v71 + v69) = v72;\n            v67 = v69;\n            while (v71 != (int64_t)(v68 - 1)) {\n                int64_t v73 = v71 + 1; // 0x40bac1\n                v67 = v69;\n                if (v62 == v73) {\n                    // break -> 0x40b795\n                    break;\n                }\n                v71 = v73;\n                v72 = *(char *)(v66 + (int64_t)*(char *)(v71 + v70));\n                *(char *)(v71 + v69) = v72;\n                v67 = v69;\n            }\n        }\n    } else {\n        // 0x40b786\n        v67 = v60 + v18 + *(int64_t *)(a1 + 40);\n    }\n    int64_t v74 = v67;\n    uint64_t v75 = function_40ab50((int64_t *)&v44, v74, v62); // 0x40b7a8\n    int64_t v76; // 0x40b710\n    int32_t wc4; // 0x40b7c3\n    if (v75 < 0xfffffffffffffffe) {\n        int32_t wc3 = (int64_t)v44; // 0x40b7be\n        wc4 = towupper(wc3);\n        if (wc4 == wc3) {\n            goto lab_0x40baf8;\n        } else {\n            int32_t v77 = wcrtomb((char *)&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps2); // 0x40b7f1\n            int64_t v78 = v77; // 0x40b7f1\n            if (v75 != v78) {\n                if (v77 == -1) {\n                    goto lab_0x40baf8;\n                } else {\n                    int64_t v79 = v59 + v78; // 0x40bbcb\n                    uint64_t v80 = *v3; // 0x40bbd6\n                    if (v79 > v80) {\n                        goto lab_0x40b87f;\n                    } else {\n                        int64_t * v81 = (int64_t *)(a1 + 24); // 0x40bbe3\n                        int64_t v82 = *v81; // 0x40bbe3\n                        int64_t v83 = v82; // 0x40bbe8\n                        if (v82 == 0) {\n                            int64_t * mem = malloc(8 * (int32_t)v80); // 0x40bcc7\n                            int64_t v84 = (int64_t)mem; // 0x40bcc7\n                            *v81 = v84;\n                            v83 = v84;\n                            if (mem == NULL) {\n                                // 0x40b89a\n                                return 12;\n                            }\n                        }\n                        char * v85 = (char *)(a1 + 140); // 0x40bbee\n                        if (*v85 == 0) {\n                            int64_t v86 = v83; // 0x40bbfd\n                            if (v59 != 0) {\n                                int64_t v87 = 0;\n                                *(int64_t *)(8 * v87 + v86) = v87;\n                                int64_t v88 = v87 + 1; // 0x40bc07\n                                while (v59 != v88) {\n                                    // 0x40bc03\n                                    v87 = v88;\n                                    *(int64_t *)(8 * v87 + v86) = v87;\n                                    v88 = v87 + 1;\n                                }\n                            }\n                            // 0x40bc10\n                            *v85 = 1;\n                        }\n                        // 0x40bc18\n                        memcpy((int64_t *)(*(int64_t *)(a1 + 8) + v59), &wstr, v77);\n                        int64_t v89 = v75 - 1; // 0x40bc38\n                        int64_t v90 = *(int64_t *)(a1 + 16) + 4 * v59; // 0x40bc3c\n                        *(int32_t *)v90 = wc4;\n                        int64_t v91 = *v81 + 8 * v59; // 0x40bc47\n                        *(int64_t *)v91 = v60;\n                        if (v77 >= 2) {\n                            uint64_t v92 = 1;\n                            int64_t v93 = v92 >= v75 ? v89 : v92; // 0x40bc5f\n                            *(int64_t *)(8 * v92 + v91) = v93 + v60;\n                            *(int32_t *)(4 * v92 + v90) = -1;\n                            int64_t v94 = v92 + 1; // 0x40bc71\n                            while (v94 != v78) {\n                                // 0x40bc59\n                                v92 = v94;\n                                v93 = v92 >= v75 ? v89 : v92;\n                                *(int64_t *)(8 * v92 + v91) = v93 + v60;\n                                *(int32_t *)(4 * v92 + v90) = -1;\n                                v94 = v92 + 1;\n                            }\n                        }\n                        int64_t v95 = v78 - v75; // 0x40bc7e\n                        int64_t v96 = *v1 + v95; // 0x40bc81\n                        *v1 = v96;\n                        if (v60 < *(int64_t *)(a1 + 96)) {\n                            int64_t * v97 = (int64_t *)(a1 + 104); // 0x40bc8e\n                            *v97 = *v97 + v95;\n                        }\n                        int64_t v98 = *v3; // 0x40bc92\n                        int64_t v99 = v98 - v96; // 0x40bc92\n                        int64_t v100 = v99 == 0 | v99 < 0 != ((v99 ^ v98) & (v98 ^ v96)) < 0 ? v98 : v96; // 0x40bc9a\n                        v39 = v100;\n                        v43 = v89;\n                        v37 = v75 + v60;\n                        v35 = v79;\n                        goto lab_0x40b74a;\n                    }\n                }\n            } else {\n                int64_t v101 = *(int64_t *)(a1 + 8) + v59; // 0x40b819\n                memcpy((int64_t *)v101, &wstr, (int32_t)v75);\n                v76 = v101;\n                goto lab_0x40b825;\n            }\n        }\n    } else {\n        if (v75 != -2) {\n            goto lab_0x40bb2d;\n        } else {\n            // 0x40bb1f\n            if (*v3 < *v1) {\n                goto lab_0x40b87f;\n            } else {\n                goto lab_0x40bb2d;\n            }\n        }\n    }\n  lab_0x40baf8:;\n    int64_t v102 = *(int64_t *)(a1 + 8) + v59; // 0x40bb08\n    memcpy((int64_t *)v102, (int64_t *)v74, (int32_t)v75);\n    v76 = v102;\n    goto lab_0x40b825;\n  lab_0x40bb2d:;\n    int64_t v115 = *v65; // 0x40bb30\n    int64_t v116 = *(int64_t *)(a1 + 40); // 0x40bb37\n    int64_t v117 = (int64_t)*(char *)(v60 + v63 + v116); // 0x40bb3b\n    int64_t v118 = v117; // 0x40bb41\n    if (v115 != 0) {\n        // 0x40bd04\n        v118 = (int64_t)*(char *)(v115 + v117);\n    }\n    // 0x40bb47\n    *(char *)(*(int64_t *)(a1 + 8) + v59) = (char)v118;\n    if (*(char *)(a1 + 140) != 0) {\n        // 0x40bcf7\n        *(int64_t *)(*(int64_t *)(a1 + 24) + 8 * v59) = v60;\n    }\n    int64_t v119 = *(int64_t *)(a1 + 16); // 0x40bb60\n    int64_t v120 = v60 + 1; // 0x40bb64\n    int64_t v121 = v59 + 1; // 0x40bb68\n    *(int32_t *)(v119 + 4 * v59) = (int32_t)v118;\n    v39 = v61;\n    v43 = v63;\n    v37 = v120;\n    v35 = v121;\n    if (v75 == -1) {\n        // 0x40bb79\n        *v64 = (int64_t)ps2;\n        v39 = v61;\n        v43 = v63;\n        v37 = v120;\n        v35 = v121;\n    }\n    goto lab_0x40b74a;\n  lab_0x40b825:;\n    int64_t v103 = v76;\n    int64_t v104; // 0x40b710\n    if (*(char *)(a1 + 140) != 0) {\n        // 0x40bb90\n        v104 = v60;\n        if (v75 != 0) {\n            int64_t v105 = v75 + v60; // 0x40bba3\n            int64_t v106 = v59 - v60; // 0x40bba8\n            int64_t v107 = v60;\n            *(int64_t *)(8 * (v106 + v107) + *(int64_t *)(a1 + 24)) = v107;\n            int64_t v108 = v107 + 1; // 0x40bbb3\n            v104 = v105;\n            while (v105 != v108) {\n                // 0x40bbaf\n                v107 = v108;\n                *(int64_t *)(8 * (v106 + v107) + *(int64_t *)(a1 + 24)) = v107;\n                v108 = v107 + 1;\n                v104 = v105;\n            }\n        }\n    } else {\n        // 0x40b833\n        v104 = v75 + v60;\n    }\n    int64_t v109 = v104;\n    int64_t v110 = *(int64_t *)(a1 + 16); // 0x40b83a\n    int64_t v111 = v59 + 1; // 0x40b83e\n    int64_t v112 = v75 + v59; // 0x40b842\n    int64_t v113 = v110 + 4 * v59;\n    *(int32_t *)v113 = wc4;\n    v39 = v61;\n    v43 = v103;\n    v37 = v109;\n    v35 = v111;\n    if (v111 < v112) {\n        int64_t v114 = v113 + 4; // 0x40b864\n        while (true) {\n            // 0x40b868\n            *(int32_t *)v114 = -1;\n            v114 += 4;\n            v39 = v61;\n            v43 = v103;\n            v37 = v109;\n            v35 = v112;\n            if (v110 + 4 * v112 == v114) {\n                goto lab_0x40b74a;\n            }\n        }\n    }\n    goto lab_0x40b74a;\n  lab_0x40b87f:\n    // 0x40b87f\n    *v64 = (int64_t)ps2;\n    v41 = v60;\n    v42 = v59;\n    goto lab_0x40b890;\n}\n"
        },
        {
            "funcName": "function_40bd10",
            "funcStartAddr": "40bd10",
            "funcEndAddr": "40be5e",
            "decompiledFuncCode": "int64_t function_40bd10(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 64); // 0x40bd20\n    uint64_t v2 = *v1; // 0x40bd20\n    if (v2 >= 0xfffffffffffffff) {\n        // 0x40bdbb\n        return 12;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 88); // 0x40bd2d\n    int64_t v4 = *v3; // 0x40bd2d\n    int64_t v5 = 2 * v2; // 0x40bd31\n    int64_t v6 = 0x100000000 * a2 >> 32; // 0x40bd34\n    int64_t v7 = v5 - v4; // 0x40bd3a\n    int64_t v8 = v7 < 0 == ((v7 ^ v5) & (v4 ^ v5)) < 0 == (v7 != 0) ? v4 : v5; // 0x40bd3d\n    int64_t v9 = v8 - v6; // 0x40bd41\n    int64_t v10 = function_40b170(a1, v9 < 0 == ((v9 ^ v8) & (v8 ^ v6)) < 0 ? v8 : v6); // 0x40bd48\n    int64_t result = v10 & 0xffffffff; // 0x40bd4d\n    if ((int32_t)v10 != 0) {\n        // 0x40bdbb\n        return result;\n    }\n    int64_t * v11 = (int64_t *)(a1 + 184); // 0x40bd53\n    int64_t v12 = *v11; // 0x40bd53\n    if (v12 != 0) {\n        int64_t * mem = realloc((int64_t *)v12, 8 * (int32_t)*v1 + 8); // 0x40bd6b\n        if (mem == NULL) {\n            // 0x40bdbb\n            return 12;\n        }\n        // 0x40bd79\n        *v11 = (int64_t)mem;\n    }\n    int32_t v13 = *(int32_t *)(a1 + 144); // 0x40bd87\n    if (*(char *)(a1 + 136) != 0) {\n        if (v13 >= 2) {\n            // 0x40bd9b\n            return function_40b710(a1);\n        }\n        // 0x40be38\n        function_40b4e0(a1);\n        return result;\n    }\n    if (v13 > 1) {\n        // 0x40be20\n        function_40b560(a1);\n        return result;\n    }\n    int64_t * v14 = (int64_t *)(a1 + 120); // 0x40bdcd\n    int64_t v15 = *v14; // 0x40bdcd\n    if (v15 == 0) {\n        // 0x40bdbb\n        return result;\n    }\n    int64_t v16 = *v3; // 0x40bdd6\n    int64_t * v17 = (int64_t *)(a1 + 48); // 0x40bdda\n    uint64_t v18 = *v17; // 0x40bdda\n    int64_t v19 = *v1; // 0x40bdde\n    int64_t v20 = v19 - v16; // 0x40bdde\n    uint64_t v21 = v20 == 0 | v20 < 0 != ((v20 ^ v19) & (v19 ^ v16)) < 0 ? v19 : v16; // 0x40bde2\n    if (v21 <= v18) {\n        // 0x40bdec\n        *(int64_t *)(a1 + 56) = v18;\n        // 0x40bdbb\n        return result;\n    }\n    int64_t * v22 = (int64_t *)(a1 + 40); // 0x40bdfa\n    unsigned char v23 = *(char *)(v18 + v12 + *v22); // 0x40bdfe\n    int64_t * v24 = (int64_t *)(a1 + 8); // 0x40be05\n    *(char *)(*v24 + v18) = *(char *)(v15 + (int64_t)v23);\n    int64_t v25 = v18 + 1; // 0x40be0c\n    int64_t v26 = v25; // 0x40be13\n    if (v21 != v25) {\n        unsigned char v27 = *(char *)(v26 + v12 + *v22); // 0x40bdfe\n        *(char *)(*v24 + v26) = *(char *)(*v14 + (int64_t)v27);\n        v26++;\n        while (v21 != v26) {\n            // 0x40bdf0\n            v27 = *(char *)(v26 + v12 + *v22);\n            *(char *)(*v24 + v26) = *(char *)(*v14 + (int64_t)v27);\n            v26++;\n        }\n    }\n    // 0x40be15\n    *v17 = v21;\n    *(int64_t *)(a1 + 56) = v21;\n    // 0x40bdbb\n    return result;\n}\n"
        },
        {
            "funcName": "function_40be60",
            "funcStartAddr": "40be60",
            "funcEndAddr": "40bee6",
            "decompiledFuncCode": "int64_t function_40be60(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a1 + 64); // 0x40be67\n    int64_t * v2 = (int64_t *)(a1 + 192); // 0x40be6e\n    int64_t v3 = *v2; // 0x40be6e\n    if (v1 > a2) {\n        goto lab_0x40bea0;\n    } else {\n        // 0x40be7a\n        if (v1 < *(int64_t *)(a1 + 88)) {\n            int64_t result = function_40bd10(a1, a2 + 1 & 0xffffffff); // 0x40be86\n            if ((int32_t)result != 0) {\n                // 0x40be96\n                return result;\n            }\n            goto lab_0x40be8f;\n        } else {\n            goto lab_0x40bea0;\n        }\n    }\n  lab_0x40bea0:;\n    uint64_t v4 = *(int64_t *)(a1 + 48); // 0x40bea0\n    if (v4 <= a2) {\n        // 0x40bea9\n        if (v4 < *(int64_t *)(a1 + 88)) {\n            int64_t result2 = function_40bd10(a1, a2 + 1 & 0xffffffff); // 0x40beb5\n            if ((int32_t)result2 != 0) {\n                // 0x40be96\n                return result2;\n            }\n        }\n    }\n    goto lab_0x40be8f;\n  lab_0x40be8f:\n    // 0x40be8f\n    if (v3 < a2) {\n        int64_t v5 = *(int64_t *)(a1 + 184); // 0x40bec0\n        memset((int64_t *)(8 * v3 + 8 + v5), 0, 8 * (int32_t)(a2 - v3));\n        *v2 = a2;\n    }\n    // 0x40be96\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40bef0",
            "funcStartAddr": "40bef0",
            "funcEndAddr": "40bf0e",
            "decompiledFuncCode": "int64_t function_40bef0(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x40bef7\n    free(v1);\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    free(v1);\n    return &g127;\n}\n"
        },
        {
            "funcName": "function_40bf10",
            "funcStartAddr": "40bf10",
            "funcEndAddr": "40bf38",
            "decompiledFuncCode": "int64_t function_40bf10(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 + 8) & 0x400ff; // 0x40bf13\n    switch (result) {\n        case 6: {\n            // 0x40bf28\n            return function_40bef0(a1);\n        }\n        case 3: {\n            // 0x40bf30\n            free((int64_t *)a1);\n            return &g127;\n        }\n    }\n    // 0x40bf22\n    return result;\n}\n"
        },
        {
            "funcName": "function_40bf40",
            "funcStartAddr": "40bf40",
            "funcEndAddr": "40bf54",
            "decompiledFuncCode": "int64_t function_40bf40(int64_t a1, int64_t a2) {\n    // 0x40bf40\n    function_40bf10(a2 + 40);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40bf60",
            "funcStartAddr": "40bf60",
            "funcEndAddr": "40c12e",
            "decompiledFuncCode": "int64_t function_40bf60(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40bf60\n    int128_t v1; // 0x40bf60\n    int128_t v2 = v1;\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x40bf74\n    uint64_t v4 = *v3; // 0x40bf74\n    int64_t * v5 = (int64_t *)(a1 + 8); // 0x40bf78\n    uint64_t v6 = *v5; // 0x40bf78\n    int64_t v7; // 0x40bf60\n    int64_t v8; // 0x40bf60\n    int64_t v9; // 0x40bf60\n    if (v4 >= v6) {\n        uint64_t v10 = 2 * v6; // 0x40c03a\n        if (v10 >= 0xaaaaaaaaaaaaaab) {\n            // 0x40c018\n            return -1;\n        }\n        int32_t v11 = v6;\n        int64_t * mem = realloc((int64_t *)v4, 32 * v11); // 0x40c057\n        if (mem == NULL) {\n            // 0x40c018\n            return -1;\n        }\n        // 0x40c065\n        *(int64_t *)a1 = (int64_t)mem;\n        int64_t * v12 = (int64_t *)(a1 + 24); // 0x40c06b\n        int32_t v13 = 16 * v11; // 0x40c07d\n        int64_t * mem2 = realloc((int64_t *)*v12, v13); // 0x40c07d\n        int64_t * v14 = (int64_t *)(a1 + 32); // 0x40c082\n        int64_t * mem3 = realloc((int64_t *)*v14, v13); // 0x40c08c\n        int64_t * v15 = (int64_t *)(a1 + 40); // 0x40c091\n        int32_t v16 = 48 * v11; // 0x40c09c\n        int64_t * mem4 = realloc((int64_t *)*v15, v16); // 0x40c09c\n        int64_t * v17 = (int64_t *)(a1 + 48); // 0x40c0a1\n        int64_t * mem5 = realloc((int64_t *)*v17, v16); // 0x40c0ab\n        if (mem2 == NULL | mem3 == NULL || mem4 == NULL || mem5 == NULL) {\n            // 0x40c0f0\n            free(mem2);\n            free(mem3);\n            free(mem4);\n            free(mem5);\n            // 0x40c018\n            return -1;\n        }\n        int64_t v18 = (int64_t)mem2; // 0x40c07d\n        int64_t v19 = (int64_t)mem4; // 0x40c09c\n        *v12 = v18;\n        *v14 = (int64_t)mem3;\n        *v15 = v19;\n        *v17 = (int64_t)mem5;\n        *v5 = v10;\n        v9 = *v3;\n        v7 = v18;\n        v8 = v19;\n    } else {\n        // 0x40bf85\n        v9 = v4;\n        v7 = *(int64_t *)(a1 + 24);\n        v8 = *(int64_t *)(a1 + 40);\n    }\n    int64_t v20 = 17 * v9; // 0x40bf9c\n    char v21 = a3; // 0x40bf9f\n    int64_t v22 = v20 + 8; // 0x40bfa2\n    *(int64_t *)v22 = a3;\n    *(int64_t *)v20 = a2;\n    *(int32_t *)v22 = (int32_t)a3 & -0x3ff01;\n    bool v23 = v21 == 6; // 0x40bfb2\n    if (v21 == 5) {\n        int32_t v24 = *(int32_t *)(a1 + 180); // 0x40bfb4\n        int32_t v25 = v24 - 1; // 0x40bfb4\n        v23 = v25 < 0 == (v24 & -v24) < 0 == (v25 != 0);\n    }\n    char * v26 = (char *)(v20 + 10); // 0x40bfbe\n    int128_t v27 = __asm_pxor(v2, v2); // 0x40bfc5\n    *v26 = 16 * (char)v23 | *v26 & -17;\n    *(int64_t *)(v7 + 8 * v9) = -1;\n    int64_t v28 = 24 * *v3 + v8; // 0x40bfe1\n    __asm_movups(*(int128_t *)v28, v27);\n    *(int64_t *)(v28 + 16) = 0;\n    int64_t v29 = *(int64_t *)(a1 + 48) + 24 * *v3; // 0x40bffd\n    __asm_movups(*(int128_t *)v29, v27);\n    *(int64_t *)(v29 + 16) = 0;\n    int64_t result = *v3; // 0x40c00c\n    *v3 = result + 1;\n    // 0x40c018\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c130",
            "funcStartAddr": "40c130",
            "funcEndAddr": "40c1cf",
            "decompiledFuncCode": "int64_t function_40c130(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 16 * a2; // 0x40c137\n    int64_t v2 = v1 + a1;\n    int64_t result = function_40bf60(a1, *(int64_t *)v2, *(int64_t *)(v2 + 8)); // 0x40c156\n    if (result != -1) {\n        int64_t v3 = a3 & 0xffffffff; // 0x40c13b\n        int64_t v4 = 16 * result + v3; // 0x40c175\n        int32_t v5 = 256 * (int32_t)a3; // 0x40c178\n        int32_t * v6 = (int32_t *)(v4 + 8); // 0x40c183\n        int32_t v7 = *v6 & -0x3ff01; // 0x40c186\n        *v6 = v7 | v5 & 0x3ff00;\n        uint32_t v8 = (*(int32_t *)((v1 | 8) + v3) | v5) & 0x3ff00 | v7; // 0x40c1aa\n        *v6 = v8;\n        *(char *)(v4 + 10) = (char)(v8 / 0x10000) | 4;\n        *(int64_t *)(*(int64_t *)(a1 + 32) + 8 * result) = a2;\n    }\n    // 0x40c1c4\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c1d0",
            "funcStartAddr": "40c1d0",
            "funcEndAddr": "40c454",
            "decompiledFuncCode": "int64_t function_40c1d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t * v1 = (int64_t *)(a1 + 40);\n    int64_t * v2 = (int64_t *)(a1 + 24);\n    int64_t v3 = a1; // 0x40c1ea\n    int64_t v4 = a2; // 0x40c1ea\n    int64_t v5 = a3; // 0x40c1ea\n    int64_t v6 = a5 & 0xffffffff;\n    int32_t v7 = v6;\n    int64_t v8; // 0x40c1d0\n    int64_t v9; // 0x40c1d0\n    int64_t v10; // 0x40c1d0\n    int64_t v11; // 0x40c1d0\n    int64_t result; // 0x40c1d0\n    int64_t v12; // 0x40c1d0\n    int64_t v13; // 0x40c1d0\n    int64_t v14; // 0x40c1d0\n    int64_t v15; // 0x40c1d0\n    int64_t v16; // 0x40c384\n    int64_t v17; // 0x40c388\n    int64_t v18; // 0x40c388\n    int64_t v19; // 0x40c39f\n    int64_t v20; // 0x40c211\n    int64_t v21; // 0x40c215\n    int64_t v22; // 0x40c219\n    int64_t v23; // 0x40c3b5\n    int64_t v24; // 0x40c428\n    int64_t v25; // 0x40c22f\n    int64_t v26; // 0x40c233\n    int64_t v27; // 0x40c24b\n    int64_t v28; // 0x40c24f\n    int64_t v29; // 0x40c256\n    int64_t v30; // 0x40c25a\n    int64_t v31; // 0x40c3d9\n    int64_t v32; // 0x40c1d0\n    int64_t v33; // 0x40c413\n    int64_t v34; // 0x40c288\n    int64_t v35; // 0x40c28b\n    int64_t v36; // 0x40c1f5\n    int64_t v37; // 0x40c203\n    while (true) {\n        // 0x40c1ef\n        v8 = v5;\n        v10 = v4;\n        v13 = v3;\n        v36 = *v1;\n        v37 = v13 + 8 + 16 * v10;\n        if (*(char *)v37 == 4) {\n            // 0x40c370\n            v16 = 24 * v8;\n            v17 = 8 * v10;\n            v18 = *(int64_t *)(*v2 + v17);\n            *(int64_t *)(v36 + 8 + v16) = 0;\n            v19 = function_40c130(a1, v18, v6);\n            if (v19 == -1) {\n                return 12;\n            }\n            // 0x40c3b5\n            v23 = *v2;\n            *(int64_t *)(v23 + 8 * v8) = *(int64_t *)(v23 + v17);\n            v15 = v18;\n            v12 = v16;\n            v9 = v19;\n            goto lab_0x40c2ea;\n        } else {\n            // 0x40c20d\n            v20 = 24 * v10;\n            v21 = v36 + v20;\n            v22 = *(int64_t *)(v21 + 8);\n            if (v22 == 0) {\n                // 0x40c428\n                v24 = *v2;\n                *(int64_t *)(v24 + 8 * v8) = *(int64_t *)(v24 + 8 * v10);\n                result = 0;\n                return result;\n            }\n            // 0x40c226\n            v25 = 24 * v8;\n            v26 = v36 + v25;\n            v4 = *(int64_t *)*(int64_t *)(v21 + 16);\n            *(int64_t *)(v26 + 8) = 0;\n            if (v22 == 1) {\n                // break -> 0x40c320\n                break;\n            }\n            // 0x40c24b\n            v27 = *(int64_t *)(a1 + 16);\n            v28 = v27 - 1;\n            v29 = 16 * v28;\n            v30 = v29 + v13;\n            if (!((v28 < 1 | (*(char *)(v30 + 10) & 4) == 0))) {\n                // 0x40c270\n                v32 = 16 * v27 - 32 - v29;\n                v14 = v28;\n                v11 = v30;\n                if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                    // 0x40c2a8\n                    if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                        // 0x40c2b9\n                        if ((char)function_40b280(v26, v14) == 0) {\n                            return 12;\n                        } else {\n                            goto lab_0x40c2c2;\n                        }\n                    }\n                }\n                // 0x40c288\n                v34 = v32 + v11;\n                v35 = v14 - 1;\n                while (!((v35 < 1 | (*(char *)(v34 + 10) & 4) == 0))) {\n                    // 0x40c2a2\n                    v14 = v35;\n                    v11 = v34;\n                    if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                        // 0x40c2a8\n                        if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                            // 0x40c2b9\n                            if ((char)function_40b280(v26, v14) == 0) {\n                                return 12;\n                            } else {\n                                goto lab_0x40c2c2;\n                            }\n                        }\n                    }\n                    // 0x40c288\n                    v34 = v32 + v11;\n                    v35 = v14 - 1;\n                }\n            }\n            // 0x40c3d0\n            v31 = function_40c130(a1, v4, v6);\n            if (v31 == -1) {\n                return 12;\n            }\n            // 0x40c3eb\n            if ((char)function_40b280(*v1 + v25, v31) == 0) {\n                return 12;\n            }\n            // 0x40c402\n            v33 = function_40c1d0(a1, v4, v31, a4, v6);\n            result = v33;\n            if ((int32_t)v33 != 0) {\n                // 0x40c30a\n                return result;\n            }\n            goto lab_0x40c2c2;\n        }\n    }\n    if (v10 == a4 == (v10 != v8)) {\n        // 0x40c43b\n        result = 0;\n        if ((char)function_40b280(v26, v4) != 0) {\n            return result;\n        } else {\n            return 12;\n        }\n    }\n    int64_t v38 = (int64_t)(*(int32_t *)v37 / 256 % 1024 | v7); // 0x40c341\n    v5 = function_40c130(a1, v4, v38);\n    while (v5 != -1) {\n        // 0x40c355\n        v3 = *v1 + v25;\n        if ((char)function_40b280(v3, v5) == 0) {\n            // break -> 0x40c305\n            break;\n        }\n        v6 = v38;\n        v7 = v6;\n        while (true) {\n            // 0x40c1ef\n            v8 = v5;\n            v10 = v4;\n            v13 = v3;\n            v36 = *v1;\n            v37 = v13 + 8 + 16 * v10;\n            if (*(char *)v37 == 4) {\n                // 0x40c370\n                v16 = 24 * v8;\n                v17 = 8 * v10;\n                v18 = *(int64_t *)(*v2 + v17);\n                *(int64_t *)(v36 + 8 + v16) = 0;\n                v19 = function_40c130(a1, v18, v6);\n                if (v19 == -1) {\n                    return 12;\n                }\n                // 0x40c3b5\n                v23 = *v2;\n                *(int64_t *)(v23 + 8 * v8) = *(int64_t *)(v23 + v17);\n                v15 = v18;\n                v12 = v16;\n                v9 = v19;\n                goto lab_0x40c2ea;\n            } else {\n                // 0x40c20d\n                v20 = 24 * v10;\n                v21 = v36 + v20;\n                v22 = *(int64_t *)(v21 + 8);\n                if (v22 == 0) {\n                    // 0x40c428\n                    v24 = *v2;\n                    *(int64_t *)(v24 + 8 * v8) = *(int64_t *)(v24 + 8 * v10);\n                    result = 0;\n                    return result;\n                }\n                // 0x40c226\n                v25 = 24 * v8;\n                v26 = v36 + v25;\n                v4 = *(int64_t *)*(int64_t *)(v21 + 16);\n                *(int64_t *)(v26 + 8) = 0;\n                if (v22 == 1) {\n                    // break -> 0x40c320\n                    break;\n                }\n                // 0x40c24b\n                v27 = *(int64_t *)(a1 + 16);\n                v28 = v27 - 1;\n                v29 = 16 * v28;\n                v30 = v29 + v13;\n                if (!((v28 < 1 | (*(char *)(v30 + 10) & 4) == 0))) {\n                    // 0x40c270\n                    v32 = 16 * v27 - 32 - v29;\n                    v14 = v28;\n                    v11 = v30;\n                    if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                        // 0x40c2a8\n                        if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                            // 0x40c2b9\n                            if ((char)function_40b280(v26, v14) == 0) {\n                                return 12;\n                            } else {\n                                goto lab_0x40c2c2;\n                            }\n                        }\n                    }\n                    // 0x40c288\n                    v34 = v32 + v11;\n                    v35 = v14 - 1;\n                    while (!((v35 < 1 | (*(char *)(v34 + 10) & 4) == 0))) {\n                        // 0x40c2a2\n                        v14 = v35;\n                        v11 = v34;\n                        if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                            // 0x40c2a8\n                            if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                                // 0x40c2b9\n                                if ((char)function_40b280(v26, v14) == 0) {\n                                    return 12;\n                                } else {\n                                    goto lab_0x40c2c2;\n                                }\n                            }\n                        }\n                        // 0x40c288\n                        v34 = v32 + v11;\n                        v35 = v14 - 1;\n                    }\n                }\n                // 0x40c3d0\n                v31 = function_40c130(a1, v4, v6);\n                if (v31 == -1) {\n                    return 12;\n                }\n                // 0x40c3eb\n                if ((char)function_40b280(*v1 + v25, v31) == 0) {\n                    return 12;\n                }\n                // 0x40c402\n                v33 = function_40c1d0(a1, v4, v31, a4, v6);\n                result = v33;\n                if ((int32_t)v33 != 0) {\n                    // 0x40c30a\n                    return result;\n                }\n                goto lab_0x40c2c2;\n            }\n        }\n        if (v10 == a4 == (v10 != v8)) {\n            // 0x40c43b\n            result = 0;\n            if ((char)function_40b280(v26, v4) != 0) {\n                return result;\n            } else {\n                return 12;\n            }\n        }\n        // 0x40c330\n        v38 = (int64_t)(*(int32_t *)v37 / 256 % 1024 | v7);\n        v5 = function_40c130(a1, v4, v38);\n    }\n  lab_0x40c305_5:\n    // 0x40c30a\n    return 12;\n  lab_0x40c2ea:;\n    int64_t v39 = *v1 + v12; // 0x40c2f1\n    if ((char)function_40b280(v39, v9) == 0) {\n        return 12;\n    }\n    goto lab_0x40c1ef;\n  lab_0x40c2c2:;\n    int64_t v40 = *(int64_t *)(*(int64_t *)(v20 + 16 + *v1) + 8); // 0x40c2d1\n    int64_t v41 = function_40c130(a1, v40, v6); // 0x40c2dc\n    v15 = v40;\n    v12 = v25;\n    v9 = v41;\n    if (v41 == -1) {\n        // break (via goto) -> 0x40c305\n        goto lab_0x40c305_5;\n    }\n    goto lab_0x40c2ea;\n}\n"
        },
        {
            "funcName": "function_40c460",
            "funcStartAddr": "40c460",
            "funcEndAddr": "40c4b9",
            "decompiledFuncCode": "int64_t function_40c460(int64_t a1) {\n    // 0x40c460\n    free((int64_t *)*(int64_t *)(a1 + 48));\n    free((int64_t *)*(int64_t *)(a1 + 72));\n    int64_t * v1 = (int64_t *)(a1 + 80); // 0x40c476\n    int64_t v2 = *v1; // 0x40c476\n    if (v2 != a1 + 8) {\n        // 0x40c483\n        free((int64_t *)*(int64_t *)(v2 + 16));\n        free((int64_t *)*v1);\n    }\n    // 0x40c495\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    free((int64_t *)*(int64_t *)(a1 + 96));\n    free((int64_t *)*(int64_t *)(a1 + 88));\n    free((int64_t *)a1);\n    return &g127;\n}\n"
        },
        {
            "funcName": "function_40c4c0",
            "funcStartAddr": "40c4c0",
            "funcEndAddr": "40c4f2",
            "decompiledFuncCode": "int64_t function_40c4c0(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    free((int64_t *)*(int64_t *)(v1 + 16));\n    free((int64_t *)*(int64_t *)(v1 + 24));\n    if (*(char *)(v1 + 139) == 0) {\n        // 0x40c4df\n        return &g127;\n    }\n    // 0x40c4e8\n    free((int64_t *)*(int64_t *)(v1 + 8));\n    return &g127;\n}\n"
        },
        {
            "funcName": "function_40c500",
            "funcStartAddr": "40c500",
            "funcEndAddr": "40c5b8",
            "decompiledFuncCode": "int64_t function_40c500(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(v1 + 232); // 0x40c50b\n    if (*v2 < 1) {\n        // 0x40c599\n        *v2 = 0;\n        *(int64_t *)(v1 + 200) = 0;\n        int64_t result; // 0x40c500\n        return result;\n    }\n    int64_t v3 = 0; // 0x40c587\n    int64_t v4 = *(int64_t *)(*(int64_t *)(v1 + 248) + 8 * v3); // 0x40c527\n    int64_t * v5 = (int64_t *)(v4 + 32); // 0x40c52b\n    int64_t * v6 = (int64_t *)(v4 + 40);\n    int64_t v7 = 0; // 0x40c531\n    int64_t v8; // 0x40c53d\n    int64_t v9; // 0x40c541\n    if (*v5 >= 1) {\n        v8 = *(int64_t *)(*v6 + 8 * v7);\n        v9 = v7 + 1;\n        free((int64_t *)*(int64_t *)(v8 + 32));\n        free((int64_t *)v8);\n        v7 = v9;\n        while (*v5 > v9) {\n            // 0x40c538\n            v8 = *(int64_t *)(*v6 + 8 * v7);\n            v9 = v7 + 1;\n            free((int64_t *)*(int64_t *)(v8 + 32));\n            free((int64_t *)v8);\n            v7 = v9;\n        }\n    }\n    // 0x40c55d\n    free((int64_t *)*v6);\n    int64_t * v10 = (int64_t *)(v4 + 16); // 0x40c567\n    int64_t v11 = *v10; // 0x40c567\n    if (v11 != 0) {\n        // 0x40c571\n        free((int64_t *)*(int64_t *)(v11 + 16));\n        free((int64_t *)*v10);\n    }\n    // 0x40c584\n    v3++;\n    free((int64_t *)v4);\n    while (*v2 > v3) {\n        // 0x40c520\n        v4 = *(int64_t *)(*(int64_t *)(v1 + 248) + 8 * v3);\n        v5 = (int64_t *)(v4 + 32);\n        v6 = (int64_t *)(v4 + 40);\n        v7 = 0;\n        if (*v5 >= 1) {\n            v8 = *(int64_t *)(*v6 + 8 * v7);\n            v9 = v7 + 1;\n            free((int64_t *)*(int64_t *)(v8 + 32));\n            free((int64_t *)v8);\n            v7 = v9;\n            while (*v5 > v9) {\n                // 0x40c538\n                v8 = *(int64_t *)(*v6 + 8 * v7);\n                v9 = v7 + 1;\n                free((int64_t *)*(int64_t *)(v8 + 32));\n                free((int64_t *)v8);\n                v7 = v9;\n            }\n        }\n        // 0x40c55d\n        free((int64_t *)*v6);\n        v10 = (int64_t *)(v4 + 16);\n        v11 = *v10;\n        if (v11 != 0) {\n            // 0x40c571\n            free((int64_t *)*(int64_t *)(v11 + 16));\n            free((int64_t *)*v10);\n        }\n        // 0x40c584\n        v3++;\n        free((int64_t *)v4);\n    }\n    // 0x40c599\n    *v2 = 0;\n    *(int64_t *)(v1 + 200) = 0;\n    return &g127;\n}\n"
        },
        {
            "funcName": "function_40c5c0",
            "funcStartAddr": "40c5c0",
            "funcEndAddr": "40c840",
            "decompiledFuncCode": "int64_t function_40c5c0(int64_t a1, int64_t a2) {\n    unsigned char v1 = *(char *)(a2 + 48); // 0x40c5c4\n    int64_t v2 = v1; // 0x40c5c4\n    int64_t v3 = *(int64_t *)(a2 + 56); // 0x40c5c8\n    g126 = v2;\n    int64_t v4 = v3; // 0x40c5d3\n    switch (v1) {\n        case 2: {\n            // 0x40c698\n            if (*(int64_t *)(a2 + 32) == 0) {\n                // 0x40c5fa\n                return 0;\n            }\n            // 0x40c6a3\n            __assert_fail(\"node->next == NULL\", \"lib/regcomp.c\", 1449, \"link_nfa_nodes\");\n            v4 = 1449;\n        }\n        case 4: {\n            // 0x40c6c0\n            *(int64_t *)(8 * v4 + 0x312d203e) = *(int64_t *)0x203e207466656c38;\n            // 0x40c5fa\n            return 0;\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 12: {\n            int64_t v5 = *(int64_t *)(a1 + 40) + 24 * v3; // 0x40c735\n            int64_t * v6 = (int64_t *)v5; // 0x40c739\n            *v6 = 1;\n            int64_t * v7 = (int64_t *)(v5 + 8); // 0x40c740\n            *v7 = 1;\n            int64_t * mem = malloc(8); // 0x40c748\n            *(int64_t *)(v5 + 16) = (int64_t)mem;\n            if (mem != NULL) {\n                // 0x40c756\n                *mem = *(int64_t *)(*(int64_t *)(a2 + 32) + 56);\n                return 0;\n            }\n            // 0x40c7b0\n            *v7 = 0;\n            *v6 = 0;\n            // 0x40c5fa\n            return 12;\n        }\n        case 10: {\n        }\n        case 11: {\n            char * v8 = (char *)(a1 + 176); // 0x40c600\n            *v8 = *v8 | 1;\n            int64_t v9 = *(int64_t *)(a2 + 8); // 0x40c607\n            int64_t v10 = a2 + 32;\n            int64_t v11 = *(int64_t *)(*(int64_t *)(v9 == 0 ? v10 : v9 + 24) + 56);\n            if (v11 < 0) {\n                // 0x40c826\n                __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n                return &g127;\n            }\n            int64_t v12 = *(int64_t *)(a2 + 16); // 0x40c61c\n            int64_t v13 = *(int64_t *)(*(int64_t *)(v12 == 0 ? v10 : v12 + 24) + 56);\n            if (v13 < 0) {\n                // 0x40c80d\n                __assert_fail(\"right > -1\", \"lib/regcomp.c\", 1466, \"link_nfa_nodes\");\n                // 0x40c826\n                __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n                return &g127;\n            }\n            int64_t v14 = *(int64_t *)(a1 + 40) + 24 * v3; // 0x40c650\n            *(int64_t *)v14 = 2;\n            int64_t * mem2 = malloc(16); // 0x40c65b\n            int64_t v15 = (int64_t)mem2; // 0x40c65b\n            *(int64_t *)(v14 + 16) = v15;\n            if (mem2 == NULL) {\n                // 0x40c5fa\n                return 12;\n            }\n            int64_t * v16 = (int64_t *)(v14 + 8);\n            if (v11 == v13) {\n                // 0x40c760\n                *v16 = 1;\n                *mem2 = v11;\n                // 0x40c5fa\n                return 0;\n            }\n            // 0x40c676\n            *v16 = 2;\n            if (v11 < v13) {\n                // 0x40c684\n                *mem2 = v11;\n                *(int64_t *)(v15 + 8) = v13;\n            } else {\n                // 0x40c798\n                *mem2 = v13;\n                *(int64_t *)(v15 + 8) = v11;\n            }\n            // 0x40c5fa\n            return 0;\n        }\n        case 16: {\n            // 0x40c5fa\n            return 0;\n        }\n        default: {\n            if ((v2 & 8) == 0) {\n                int64_t v17 = *(int64_t *)(*(int64_t *)(a2 + 32) + 56); // 0x40c5ec\n                *(int64_t *)(*(int64_t *)(a1 + 24) + 8 * v3) = v17;\n                // 0x40c5fa\n                return 0;\n            }\n            // 0x40c7f4\n            __assert_fail(\"!IS_EPSILON_NODE (node->token.type)\", \"lib/regcomp.c\", 1484, \"link_nfa_nodes\");\n            // 0x40c80d\n            __assert_fail(\"right > -1\", \"lib/regcomp.c\", 1466, \"link_nfa_nodes\");\n            // 0x40c826\n            __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n            return &g127;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_40c840",
            "funcStartAddr": "40c840",
            "funcEndAddr": "40c88e",
            "decompiledFuncCode": "int64_t function_40c840(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a1 + 48); // 0x40c840\n    uint64_t v2 = a2 + 1; // 0x40c844\n    if (v2 >= v1) {\n        // 0x40c882\n        return 1;\n    }\n    int64_t v3 = *(int64_t *)(a1 + 16) + 4 * v2;\n    if (*(int32_t *)v3 != -1) {\n        // 0x40c882\n        return 1;\n    }\n    int64_t v4 = 2;\n    while (v4 != v1 - a2) {\n        int64_t v5 = v4 + 1; // 0x40c870\n        if (*(int32_t *)(v3 - 8 + 4 * v5) != -1) {\n            // break -> 0x40c882\n            break;\n        }\n        v4 = v5;\n    }\n    // 0x40c882\n    return v4 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40c890",
            "funcStartAddr": "40c890",
            "funcEndAddr": "40c8f5",
            "decompiledFuncCode": "int64_t function_40c890(int64_t a1, int64_t a2, uint64_t a3) {\n    if (a1 < 1) {\n        // 0x40c8d5\n        return 0;\n    }\n    int64_t v1 = a1 - 1; // 0x40c89a\n    int64_t v2 = 0; // 0x40c8a3\n    if (v1 != 0) {\n        int64_t v3 = 0;\n        int64_t v4 = (v3 + v1) / 2; // 0x40c8a9\n        int64_t v5 = v4; // 0x40c8b0\n        int64_t v6 = v4; // 0x40c8b0\n        int64_t v7 = v1; // 0x40c8b0\n        int64_t v8; // 0x40c890\n        int64_t v9; // 0x40c8bc\n        if (*(int64_t *)(8 * v4 + a2) >= a3) {\n            v2 = v3;\n            if (v3 >= v5) {\n                // break (via goto) -> 0x40c8cd\n                goto lab_0x40c8cd;\n            }\n            // 0x40c8b8\n            v9 = (v5 + v3) / 2;\n            v6 = v9;\n            v7 = v5;\n            while (*(int64_t *)(8 * v9 + a2) >= a3) {\n                // 0x40c8c8\n                v8 = v9;\n                v2 = v3;\n                if (v3 >= v8) {\n                    // break (via goto) -> 0x40c8cd\n                    goto lab_0x40c8cd;\n                }\n                // 0x40c8b8\n                v9 = (v8 + v3) / 2;\n                v6 = v9;\n                v7 = v8;\n            }\n        }\n        int64_t v10 = v7;\n        int64_t v11 = v6 + 1; // 0x40c8e0\n        v2 = v11;\n        while (v11 < v10) {\n            // 0x40c8a5\n            v3 = v11;\n            v4 = (v3 + v10) / 2;\n            v5 = v4;\n            v6 = v4;\n            v7 = v10;\n            if (*(int64_t *)(8 * v4 + a2) >= a3) {\n                v2 = v3;\n                if (v3 >= v5) {\n                    // break (via goto) -> 0x40c8cd\n                    goto lab_0x40c8cd;\n                }\n                // 0x40c8b8\n                v9 = (v5 + v3) / 2;\n                v6 = v9;\n                v7 = v5;\n                while (*(int64_t *)(8 * v9 + a2) >= a3) {\n                    // 0x40c8c8\n                    v8 = v9;\n                    v2 = v3;\n                    if (v3 >= v8) {\n                        // break (via goto) -> 0x40c8cd\n                        goto lab_0x40c8cd;\n                    }\n                    // 0x40c8b8\n                    v9 = (v8 + v3) / 2;\n                    v6 = v9;\n                    v7 = v8;\n                }\n            }\n            // 0x40c8e0\n            v10 = v7;\n            v11 = v6 + 1;\n            v2 = v11;\n        }\n    }\n  lab_0x40c8cd:\n    // 0x40c8cd\n    if (*(int64_t *)(8 * v2 + a2) == a3) {\n        // 0x40c8f0\n        return v2 + 1;\n    }\n    // 0x40c8d5\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40c900",
            "funcStartAddr": "40c900",
            "funcEndAddr": "40c9f9",
            "decompiledFuncCode": "int64_t function_40c900(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a2 + 16; // 0x40c907\n    int64_t * v2 = (int64_t *)(a2 + 8); // 0x40c921\n    int64_t v3 = *v2; // 0x40c921\n    if (function_40c890(v3, v1, a3) != 0) {\n      lab_0x40c9e8:\n        // 0x40c9d5\n        return 0;\n    }\n    int32_t v4 = a5;\n    int64_t * v5 = (int64_t *)(a1 + 40);\n    int64_t v6 = a3;\n    int64_t v7 = 16 * v6 + v3; // 0x40c940\n    int64_t result; // 0x40c900\n    if ((int32_t)*(char *)(v7 + 8) == v4) {\n        // 0x40c94d\n        if (*(int64_t *)v7 == a4) {\n            if (v4 != 9) {\n                return 0;\n            } else {\n                // 0x40c9be\n                result = 12;\n                if ((char)function_40b280(a2, v6) != 0) {\n                    return 0;\n                } else {\n                    return result;\n                }\n            }\n        }\n    }\n    // 0x40c952\n    result = 12;\n    while ((char)function_40b280(a2, v6) != 0) {\n        int64_t v8 = 24 * v6; // 0x40c96a\n        int64_t v9 = *v5 + v8; // 0x40c96e\n        int64_t v10 = *(int64_t *)(v9 + 8); // 0x40c971\n        if (v10 == 0) {\n            // 0x40c9d5\n            return 0;\n        }\n        int64_t v11 = *(int64_t *)(v9 + 16); // 0x40c97a\n        int64_t v12 = v11; // 0x40c982\n        if (v10 == 2) {\n            int64_t v13 = function_40c900(a1, a2, *(int64_t *)(v11 + 8), a4, a5 & 0xffffffff); // 0x40c9a0\n            result = v13;\n            if ((int32_t)v13 != 0) {\n                // break -> 0x40c9d5\n                break;\n            }\n            // 0x40c9a9\n            v12 = *(int64_t *)(v8 + 16 + *v5);\n        }\n        int64_t v14 = *(int64_t *)v12; // 0x40c984\n        int64_t v15 = *v2; // 0x40c921\n        if (function_40c890(v15, v1, v14) != 0) {\n            // 0x40c9d5\n            return 0;\n        }\n        v6 = v14;\n        v7 = 16 * v6 + v15;\n        if ((int32_t)*(char *)(v7 + 8) == v4) {\n            // 0x40c94d\n            if (*(int64_t *)v7 == a4) {\n                if (v4 != 9) {\n                    return 0;\n                } else {\n                    // 0x40c9be\n                    result = 12;\n                    if ((char)function_40b280(a2, v6) != 0) {\n                        return 0;\n                    } else {\n                        return result;\n                    }\n                }\n            }\n        }\n        // 0x40c952\n        result = 12;\n    }\n  lab_0x40c9d5:\n    // 0x40c9d5\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ca00",
            "funcStartAddr": "40ca00",
            "funcEndAddr": "40ca23",
            "decompiledFuncCode": "int64_t function_40ca00(uint64_t a1, int64_t result2, uint64_t a3) {\n    // 0x40ca00\n    if (a3 >= a1) {\n        // 0x40ca22\n        int64_t result; // 0x40ca00\n        return result;\n    }\n    int64_t v1 = a3; // 0x40ca03\n    int64_t v2 = 8 * v1 + result2;\n    *(int64_t *)v2 = *(int64_t *)(v2 + 8);\n    v1++;\n    while (v1 != a1) {\n        // 0x40ca10\n        v2 = 8 * v1 + result2;\n        *(int64_t *)v2 = *(int64_t *)(v2 + 8);\n        v1++;\n    }\n    // 0x40ca22\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40ca30",
            "funcStartAddr": "40ca30",
            "funcEndAddr": "40cabb",
            "decompiledFuncCode": "int64_t function_40ca30(int64_t a1, int64_t a2) {\n    // 0x40ca30\n    int64_t * v1; // 0x40ca40\n    int64_t v2; // 0x40ca40\n    switch (*(char *)(a2 + 48)) {\n        case 4: {\n            int64_t v3 = *(int64_t *)(a1 + 224); // 0x40ca90\n            if (v3 == 0) {\n                // 0x40ca3c\n                return 0;\n            }\n            int64_t v4 = a2 + 40; // 0x40ca9c\n            int64_t v5 = *(int64_t *)(8 * (int64_t)*(int32_t *)v4 + v3); // 0x40caa0\n            *(int64_t *)v4 = v5;\n            int64_t * v6 = (int64_t *)(a1 + 160); // 0x40cab1\n            *v6 = *v6 | (int64_t)(1 << (int32_t)v5 % 32);\n            return 0;\n        }\n        case 17: {\n            // 0x40ca40\n            v1 = (int64_t *)(a2 + 8);\n            v2 = *v1;\n            if (v2 == 0 || *(char *)(v2 + 48) != 17) {\n                // 0x40ca3c\n                return 0;\n            }\n            // break -> 0x40ca4f\n            break;\n        }\n        default: {\n            // 0x40ca3c\n            return 0;\n        }\n    }\n    uint64_t v7 = *(int64_t *)(v2 + 40); // 0x40ca4f\n    int64_t v8 = *(int64_t *)(v2 + 8); // 0x40ca53\n    *v1 = v8;\n    if (v8 != 0) {\n        // 0x40ca60\n        *(int64_t *)v8 = a2;\n    }\n    int64_t v9 = *(int64_t *)(a1 + 224); // 0x40ca63\n    int64_t v10 = *(int64_t *)(8 * *(int64_t *)(a2 + 40) + v9); // 0x40ca6e\n    *(int64_t *)(v9 + 8 * v7) = v10;\n    if (v7 > 63) {\n        // 0x40ca3c\n        return 0;\n    }\n    uint64_t v11 = v7 % 64; // 0x40ca83\n    int64_t v12 = -2; // 0x40ca83\n    if (v11 != 0) {\n        v12 = 0xfffffffffffffffe >> 64 - v11 | -2 << v11;\n    }\n    int64_t * v13 = (int64_t *)(a1 + 160); // 0x40ca86\n    *v13 = *v13 & v12;\n    // 0x40ca3c\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40cac0",
            "funcStartAddr": "40cac0",
            "funcEndAddr": "40cb17",
            "decompiledFuncCode": "int64_t function_40cac0(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a2 + 8); // 0x40cac4\n    switch (*(char *)(a2 + 48)) {\n        case 11: {\n            // 0x40caf8\n            *(int64_t *)(v1 + 32) = a2;\n            return 0;\n        }\n        case 16: {\n            int64_t v2 = *(int64_t *)(a2 + 16); // 0x40cb00\n            *(int64_t *)(v1 + 32) = *(int64_t *)(v2 + 24);\n            *(int64_t *)(v2 + 32) = *(int64_t *)(a2 + 32);\n            return 0;\n        }\n    }\n    if (v1 != 0) {\n        // 0x40cad5\n        *(int64_t *)(v1 + 32) = *(int64_t *)(a2 + 32);\n    }\n    int64_t v3 = *(int64_t *)(a2 + 16); // 0x40cadd\n    if (v3 != 0) {\n        // 0x40cae6\n        *(int64_t *)(v3 + 32) = *(int64_t *)(a2 + 32);\n    }\n    // 0x40caee\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40cb20",
            "funcStartAddr": "40cb20",
            "funcEndAddr": "40cd6e",
            "decompiledFuncCode": "int64_t function_40cb20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, uint64_t a5, int64_t a6, uint64_t a7) {\n    int64_t v1 = *(int64_t *)(a1 + 200); // 0x40cb37\n    int64_t v2 = -1; // 0x40cb51\n    int64_t v3 = -1; // 0x40cb51\n    if (v1 > 0) {\n        int64_t v4 = *(int64_t *)(a1 + 216); // 0x40cb57\n        int64_t v5 = v4 + 8;\n        int64_t v6 = 0;\n        uint64_t v7 = v6 + v1; // 0x40cb53\n        int64_t v8 = (v7 / 0x8000000000000000 + v7) / 2; // 0x40cb68\n        int64_t v9 = v8; // 0x40cb74\n        int64_t v10 = v1; // 0x40cb74\n        int64_t v11 = v8; // 0x40cb74\n        int64_t v12; // 0x40cb20\n        int64_t v13; // 0x40cb20\n        uint64_t v14; // 0x40cb80\n        int64_t v15; // 0x40cb8e\n        if (*(int64_t *)(40 * v8 + v5) >= a5) {\n            v13 = v6;\n            if (v6 >= v9) {\n                // break (via goto) -> 0x40cbab\n                goto lab_0x40cbab;\n            }\n            // 0x40cb80\n            v14 = v9 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v9;\n            v11 = v15;\n            while (*(int64_t *)(40 * v15 + v5) >= a5) {\n                // 0x40cba6\n                v12 = v15;\n                v13 = v6;\n                if (v6 >= v12) {\n                    // break (via goto) -> 0x40cbab\n                    goto lab_0x40cbab;\n                }\n                // 0x40cb80\n                v14 = v12 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v12;\n                v11 = v15;\n            }\n        }\n        int64_t v16 = v10;\n        int64_t v17 = v11 + 1; // 0x40cd18\n        v13 = v17;\n        while (v17 < v16) {\n            // 0x40cb53\n            v6 = v17;\n            v7 = v6 + v16;\n            v8 = (v7 / 0x8000000000000000 + v7) / 2;\n            v9 = v8;\n            v10 = v16;\n            v11 = v8;\n            if (*(int64_t *)(40 * v8 + v5) >= a5) {\n                v13 = v6;\n                if (v6 >= v9) {\n                    // break (via goto) -> 0x40cbab\n                    goto lab_0x40cbab;\n                }\n                // 0x40cb80\n                v14 = v9 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v9;\n                v11 = v15;\n                while (*(int64_t *)(40 * v15 + v5) >= a5) {\n                    // 0x40cba6\n                    v12 = v15;\n                    v13 = v6;\n                    if (v6 >= v12) {\n                        // break (via goto) -> 0x40cbab\n                        goto lab_0x40cbab;\n                    }\n                    // 0x40cb80\n                    v14 = v12 + v6;\n                    v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                    v10 = v12;\n                    v11 = v15;\n                }\n            }\n            // 0x40cd18\n            v16 = v10;\n            v17 = v11 + 1;\n            v13 = v17;\n        }\n      lab_0x40cbab:;\n        int64_t v18 = v13;\n        int64_t v19 = -1; // 0x40cbae\n        if (v1 > v18) {\n            // 0x40cbb4\n            v19 = *(int64_t *)(40 * v18 + 8 + v4) != a5 ? -1 : v18;\n        }\n        int64_t v20 = 0;\n        uint64_t v21 = v1 + v20; // 0x40cbdc\n        int64_t v22 = (v21 / 0x8000000000000000 + v21) / 2; // 0x40cbf2\n        int64_t v23 = v22; // 0x40cbfe\n        int64_t v24 = v1; // 0x40cbfe\n        int64_t v25 = v22; // 0x40cbfe\n        int64_t v26; // 0x40cb20\n        int64_t v27; // 0x40cb20\n        uint64_t v28; // 0x40cc08\n        int64_t v29; // 0x40cc17\n        if (*(int64_t *)(40 * v22 + v5) >= a7) {\n            v27 = v20;\n            if (v20 >= v23) {\n                // break (via goto) -> 0x40cc34\n                goto lab_0x40cc34;\n            }\n            // 0x40cc08\n            v28 = v23 + v20;\n            v29 = (v28 / 0x8000000000000000 + v28) / 2;\n            v24 = v23;\n            v25 = v29;\n            while (*(int64_t *)(40 * v29 + v5) >= a7) {\n                // 0x40cc2f\n                v26 = v29;\n                v27 = v20;\n                if (v20 >= v26) {\n                    // break (via goto) -> 0x40cc34\n                    goto lab_0x40cc34;\n                }\n                // 0x40cc08\n                v28 = v26 + v20;\n                v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                v24 = v26;\n                v25 = v29;\n            }\n        }\n        int64_t v30 = v24;\n        int64_t v31 = v25 + 1; // 0x40cd30\n        v27 = v31;\n        while (v31 < v30) {\n            // 0x40cbdc\n            v20 = v31;\n            v21 = v30 + v20;\n            v22 = (v21 / 0x8000000000000000 + v21) / 2;\n            v23 = v22;\n            v24 = v30;\n            v25 = v22;\n            if (*(int64_t *)(40 * v22 + v5) >= a7) {\n                v27 = v20;\n                if (v20 >= v23) {\n                    // break (via goto) -> 0x40cc34\n                    goto lab_0x40cc34;\n                }\n                // 0x40cc08\n                v28 = v23 + v20;\n                v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                v24 = v23;\n                v25 = v29;\n                while (*(int64_t *)(40 * v29 + v5) >= a7) {\n                    // 0x40cc2f\n                    v26 = v29;\n                    v27 = v20;\n                    if (v20 >= v26) {\n                        // break (via goto) -> 0x40cc34\n                        goto lab_0x40cc34;\n                    }\n                    // 0x40cc08\n                    v28 = v26 + v20;\n                    v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                    v24 = v26;\n                    v25 = v29;\n                }\n            }\n            // 0x40cd30\n            v30 = v24;\n            v31 = v25 + 1;\n            v27 = v31;\n        }\n      lab_0x40cc34:;\n        int64_t v32 = v27;\n        v2 = v19;\n        v3 = -1;\n        if (v1 > v32) {\n            // 0x40cc3d\n            v2 = v19;\n            v3 = *(int64_t *)(40 * v32 + 8 + v4) != a7 ? -1 : v32;\n        }\n    }\n    // 0x40cc5c\n    if (a2 < 1) {\n        // 0x40ccfe\n        return 0;\n    }\n    int64_t * v33 = (int64_t *)(a1 + 216); // 0x40cc94\n    int64_t * v34 = (int64_t *)*(int64_t *)(a1 + 152); // 0x40ccc5\n    int64_t v35 = 0; // 0x40cd45\n    int64_t v36 = 8 * v35; // 0x40cca8\n    int64_t v37 = *(int64_t *)(v36 + a3); // 0x40cca8\n    int64_t v38 = *(int64_t *)(16 * *(int64_t *)(40 * v37 + *v33) + *v34); // 0x40ccc8\n    int64_t v39 = function_40b100(a1, v37, v38, a4, a5, v2); // 0x40ccce\n    uint64_t v40 = *(int64_t *)(v38 + v36); // 0x40ccec\n    int64_t result = 1; // 0x40ccf7\n    while ((int32_t)v39 == (int32_t)function_40b100(a1, v40, v38, a6, a7, v3)) {\n        // 0x40cd40\n        v35++;\n        result = 0;\n        if (v35 >= v40) {\n            // break -> 0x40ccfe\n            break;\n        }\n        v36 = 8 * v35;\n        v37 = *(int64_t *)(v36 + v38);\n        v38 = *(int64_t *)(16 * *(int64_t *)(40 * v37 + *v33) + *v34);\n        v39 = function_40b100(a1, v37, v38, a4, a5, v2);\n        v40 = *(int64_t *)(v38 + v36);\n        result = 1;\n    }\n    // 0x40ccfe\n    return result;\n}\n"
        },
        {
            "funcName": "function_40cd70",
            "funcStartAddr": "40cd70",
            "funcEndAddr": "40cdc1",
            "decompiledFuncCode": "int64_t function_40cd70(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40cd70\n    int64_t result; // 0x40cd70\n    if ((int32_t)result != 0) {\n        // 0x40cdbc\n        return result;\n    }\n    int64_t v1 = a1; // 0x40cd8e\n    while (true) {\n        int64_t v2 = *(int64_t *)(v1 + 8); // 0x40cd90\n        int64_t v3 = v2; // 0x40cd99\n        int64_t v4 = 0; // 0x40cd99\n        int64_t v5 = v1; // 0x40cd99\n        if (v2 == 0) {\n            int64_t v6 = v5;\n            int64_t v7 = *(int64_t *)(v6 + 16); // 0x40cda3\n            v3 = v7;\n            while (v7 != v4 != v7 != 0) {\n                int64_t v8 = *(int64_t *)v6; // 0x40cdb1\n                v4 = v6;\n                if (v8 == 0) {\n                    return result;\n                }\n                v6 = v8;\n                v7 = *(int64_t *)(v6 + 16);\n                v3 = v7;\n            }\n        }\n        // 0x40cd80\n        v1 = v3;\n    }\n}\n"
        },
        {
            "funcName": "function_40cdd0",
            "funcStartAddr": "40cdd0",
            "funcEndAddr": "40cf93",
            "decompiledFuncCode": "int64_t function_40cdd0(int64_t * a1, int128_t * a2) {\n    // 0x40cdd0\n    if (a2 == NULL) {\n        // 0x40ced4\n        return 0;\n    }\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x40cdd9\n    int64_t v3 = *v2; // 0x40cdd9\n    if (v3 == 0) {\n        // 0x40ced4\n        return 0;\n    }\n    int64_t v4 = (int64_t)a1;\n    int64_t * v5 = (int64_t *)(v4 + 8); // 0x40cded\n    int64_t v6 = *v5; // 0x40cded\n    int64_t v7 = v6 + 2 * v3;\n    int64_t v8; // 0x40cdd0\n    int64_t * v9; // 0x40cdd0\n    int64_t v10; // 0x40cdd0\n    int64_t v11; // 0x40cdd0\n    int64_t v12; // 0x40cdd0\n    if (v7 > v4) {\n        int64_t v13 = v3 + v4; // 0x40cf30\n        int64_t * v14 = (int64_t *)(v4 + 16);\n        int64_t * mem = realloc((int64_t *)*v14, 16 * (int32_t)v13); // 0x40cf42\n        if (mem == NULL) {\n            // 0x40ced4\n            return 12;\n        }\n        int64_t v15 = *v5; // 0x40cf4c\n        *v14 = (int64_t)mem;\n        *a1 = 2 * v13;\n        int64_t v16 = *v2; // 0x40cf57\n        v9 = v14;\n        v11 = v16;\n        if (v15 != 0) {\n            // 0x40cf4c\n            v8 = 2 * v16 + v15;\n            v10 = v16;\n            v12 = v15;\n            goto lab_0x40ce0d;\n        } else {\n            goto lab_0x40cf65;\n        }\n    } else {\n        // 0x40ce04\n        v8 = v7;\n        v10 = v3;\n        v12 = v6;\n        if (v6 == 0) {\n            // 0x40ce04\n            v9 = (int64_t *)(v4 + 16);\n            v11 = v3;\n            goto lab_0x40cf65;\n        } else {\n            goto lab_0x40ce0d;\n        }\n    }\n  lab_0x40cf65:;\n    int64_t v17 = *v9; // 0x40cf65\n    int64_t v18 = *(int64_t *)(v1 + 16); // 0x40cf69\n    *v5 = v11;\n    memcpy((int64_t *)v17, (int64_t *)v18, 8 * (int32_t)*v2);\n    // 0x40ced4\n    return 0;\n  lab_0x40ce0d:;\n    int64_t v19 = v10 - 1; // 0x40ce11\n    int64_t v20 = -v10; // 0x40ce1c\n    int64_t v21 = v19; // 0x40ce23\n    int64_t v22 = v8; // 0x40ce23\n    if (v20 < 0) {\n        int64_t v23 = v12; // 0x40cdd0\n        int64_t v24 = v20;\n        int64_t v25 = v8; // 0x40cdd0\n        int64_t v26 = v19;\n        while (true) {\n            int64_t v27 = v23 - 1;\n            int64_t v28 = v24; // 0x40ce56\n            v21 = v26;\n            v22 = v25;\n            if (v27 < 0) {\n                // break (via goto) -> 0x40ce60\n                goto lab_0x40ce60_2;\n            }\n            int64_t v29 = v25;\n            int64_t v30 = v26;\n            int64_t v31 = *(int64_t *)(v4 + 16); // 0x40ce2f\n            uint64_t v32 = *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v30); // 0x40ce33\n            uint64_t v33 = *(int64_t *)(v31 + 8 * v27); // 0x40ce37\n            int64_t v34; // 0x40cdd0\n            int64_t v35; // 0x40cdd0\n            while (v33 != v32) {\n                // 0x40ce41\n                v34 = v30;\n                v35 = v28;\n                if (v33 >= v32) {\n                    goto lab_0x40ce20;\n                }\n                int64_t v36 = v30 - 1; // 0x40ce47\n                int64_t v37 = v29 - 1; // 0x40ce4b\n                *(int64_t *)(v31 + 8 * v37) = v32;\n                v28 = -v30;\n                v21 = v36;\n                v22 = v37;\n                if (v28 >= 0) {\n                    // break (via goto) -> 0x40ce60\n                    goto lab_0x40ce60_2;\n                }\n                v21 = v26;\n                v22 = v25;\n                if (v27 < 0) {\n                    // break (via goto) -> 0x40ce60\n                    goto lab_0x40ce60_2;\n                }\n                // 0x40ce2a\n                v29 = v37;\n                v30 = v36;\n                v31 = *(int64_t *)(v4 + 16);\n                v32 = *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v30);\n                v33 = *(int64_t *)(v31 + 8 * v27);\n            }\n            // 0x40cf00\n            v34 = v30 - 1;\n            v35 = -v30;\n          lab_0x40ce20:\n            // 0x40ce20\n            v24 = v35;\n            v26 = v34;\n            v23 = v27;\n            v25 = v29;\n            v21 = v26;\n            v22 = v29;\n            if (v24 >= 0) {\n                // break -> 0x40ce60\n                break;\n            }\n        }\n    }\n  lab_0x40ce60_2:;\n    int64_t v38 = v22; // 0x40ce63\n    if (v21 >= 0) {\n        int64_t v39 = v21 + 1; // 0x40ce65\n        int64_t v40 = *(int64_t *)(v4 + 16); // 0x40ce69\n        int64_t v41 = *(int64_t *)(v1 + 16); // 0x40ce6d\n        int64_t v42 = v22 - v39; // 0x40ce72\n        memcpy((int64_t *)(v40 + 8 * v42), (int64_t *)v41, 8 * (int32_t)v39);\n        v38 = v42;\n    }\n    int64_t v43 = *v5; // 0x40ce86\n    int64_t v44 = v43 - 1; // 0x40ce8f\n    int64_t v45 = 2 * *v2 + v44; // 0x40ce8f\n    int64_t v46 = v45 - v38 + 1; // 0x40ce9a\n    if (v46 == 0) {\n      lab_0x40ced4:\n        // 0x40ced4\n        return 0;\n    }\n    int64_t v47 = *(int64_t *)(v4 + 16); // 0x40cea7\n    *v5 = v46 + v43;\n    int64_t v48 = v44; // 0x40ceaf\n    int64_t v49 = v46; // 0x40ceaf\n    int64_t v50 = v45; // 0x40ceaf\n    while (true) {\n        int64_t v51 = v50;\n        int64_t v52 = v49;\n        uint64_t v53 = *(int64_t *)(8 * v51 + v47); // 0x40ceb0\n        uint64_t v54 = *(int64_t *)(8 * v48 + v47); // 0x40ceb4\n        int64_t v55 = 8 * (v52 + v48) + v47; // 0x40cebc\n        while (v53 > v54) {\n            // 0x40cec5\n            *(int64_t *)v55 = v53;\n            int64_t v56 = v52 - 1; // 0x40cecc\n            if (v56 == 0) {\n                return 0;\n            }\n            v51--;\n            v52 = v56;\n            v53 = *(int64_t *)(8 * v51 + v47);\n            v54 = *(int64_t *)(8 * v48 + v47);\n            v55 = 8 * (v52 + v48) + v47;\n        }\n        // 0x40cee0\n        *(int64_t *)v55 = v54;\n        int64_t v57 = v48 - 1; // 0x40cee3\n        v48 = v57;\n        v49 = v52;\n        v50 = v51;\n        if (v57 < 0) {\n            // 0x40cee9\n            memcpy((int64_t *)v47, (int64_t *)(v47 + 8 * v38), 8 * (int32_t)v52);\n            return 0;\n        }\n    }\n    // 0x40ced4\n    int64_t v58; // 0x40cdd0\n    int64_t result = v58;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40cfa0",
            "funcStartAddr": "40cfa0",
            "funcEndAddr": "40d1f4",
            "decompiledFuncCode": "int64_t function_40cfa0(int128_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 24 * a3; // 0x40cfb4\n    int64_t * v2 = (int64_t *)(a2 + 40); // 0x40cfbc\n    int64_t v3 = *v2 + v1; // 0x40cfc4\n    int64_t * v4 = (int64_t *)(v3 + 8); // 0x40cfcb\n    int64_t v5 = *v4 + 1; // 0x40cfd8\n    int128_t v6 = v5; // bp-120, 0x40cfdc\n    int64_t * mem = malloc(8 * (int32_t)v5); // 0x40cfe5\n    if (mem == NULL) {\n        // 0x40d0ca\n        return 12;\n    }\n    int64_t v7 = (int64_t)mem; // 0x40cfe5\n    int64_t * v8 = (int64_t *)(a2 + 48); // 0x40cff8\n    int64_t v9 = v1 + 8;\n    *(int64_t *)(*v8 + v9) = -1;\n    int64_t v10 = a2 + 8 + 16 * a3;\n    uint32_t v11 = *(int32_t *)v10; // 0x40d013\n    int64_t v12 = v10; // 0x40d01e\n    if ((v11 & 0x3ff00) != 0) {\n        // 0x40d140\n        if (*v4 == 0) {\n            goto lab_0x40d190;\n        } else {\n            int64_t v13 = *(int64_t *)*(int64_t *)(v3 + 16); // 0x40d14b\n            v12 = v10;\n            if ((*(char *)(a2 + 10 + 16 * v13) & 4) == 0) {\n                int64_t result = function_40c1d0(a2, a3, a3, a3, (int64_t)(v11 / 256 % 1024)); // 0x40d174\n                if ((int32_t)result != 0) {\n                    // 0x40d0ca\n                    return result;\n                }\n                // 0x40d181\n                v12 = 17 * a3 + 8;\n            }\n            goto lab_0x40d024;\n        }\n    } else {\n        goto lab_0x40d024;\n    }\n  lab_0x40d024:;\n    // 0x40d024\n    int64_t v14; // 0x40cfa0\n    int64_t v15; // 0x40cfa0\n    if ((*(char *)v12 & 8) == 0) {\n        goto lab_0x40d190;\n    } else {\n        int64_t v16 = *v2; // 0x40d02e\n        int64_t v17 = v16 + v1; // 0x40d032\n        if (*(int64_t *)(v17 + 8) < 1) {\n            goto lab_0x40d190;\n        } else {\n            int64_t v18 = 0;\n            int64_t v19 = *(int64_t *)(*(int64_t *)(v17 + 16) + 8 * v18); // 0x40d097\n            int64_t v20 = *v8; // 0x40d09b\n            int64_t v21 = 24 * v19; // 0x40d0a3\n            int64_t v22 = v20 + v21; // 0x40d0a7\n            int64_t v23 = *(int64_t *)(v22 + 8); // 0x40d0aa\n            int64_t v24 = 0; // 0x40d0b2\n            int64_t v25 = v18; // 0x40d0b2\n            int64_t v26 = v19; // 0x40d0b2\n            int64_t v27 = v21; // 0x40d0b2\n            int64_t v28 = v22; // 0x40d0b2\n            int64_t v29 = v23; // 0x40d0b2\n            int64_t v30; // 0x40cfa0\n            int64_t v31; // 0x40d0f8\n            int64_t v32; // 0x40d102\n            int64_t v33; // 0x40d097\n            int64_t v34; // 0x40d0a3\n            int64_t v35; // 0x40d0a7\n            int64_t v36; // 0x40d0aa\n            if (v23 == -1) {\n                // 0x40d0f8\n                v31 = v16 + v1;\n                v32 = v18;\n                v32++;\n                v30 = 1;\n                if (*(int64_t *)(v31 + 8) <= v32) {\n                    // break (via goto) -> 0x40d10c\n                    goto lab_0x40d10c;\n                }\n                // 0x40d093\n                v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                v34 = 24 * v33;\n                v35 = v34 + v20;\n                v36 = *(int64_t *)(v35 + 8);\n                v24 = 1;\n                v25 = v32;\n                v26 = v33;\n                v27 = v34;\n                v28 = v35;\n                v29 = v36;\n                while (v36 == -1) {\n                    // 0x40d0f8\n                    v32++;\n                    v30 = 1;\n                    if (*(int64_t *)(v31 + 8) <= v32) {\n                        // break (via goto) -> 0x40d10c\n                        goto lab_0x40d10c;\n                    }\n                    // 0x40d093\n                    v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                    v34 = 24 * v33;\n                    v35 = v34 + v20;\n                    v36 = *(int64_t *)(v35 + 8);\n                    v24 = 1;\n                    v25 = v32;\n                    v26 = v33;\n                    v27 = v34;\n                    v28 = v35;\n                    v29 = v36;\n                }\n            }\n            int64_t v37 = v29;\n            int64_t result2; // 0x40cfa0\n            int64_t v38; // 0x40cfa0\n            int128_t v39; // bp-88, 0x40cfa0\n            int64_t v40; // 0x40d0c1\n            if (v37 != 0) {\n                // 0x40d050\n                v39 = __asm_movaps(__asm_movdqu(*(int128_t *)v28));\n                v38 = *(int64_t *)(v28 + 16);\n            } else {\n                // 0x40d0b9\n                v40 = function_40cfa0(&v39, a2, v26, v37);\n                int64_t v41; // 0x40cfa0\n                v38 = v41;\n                result2 = v40;\n                if ((int32_t)v40 != 0) {\n                    // 0x40d0ca\n                    return result2;\n                }\n            }\n            int64_t v42 = function_40cdd0((int64_t *)&v6, &v39); // 0x40d06c\n            result2 = v42;\n            while ((int32_t)v42 == 0) {\n                int64_t v43 = v38;\n                int64_t v44 = v24; // 0x40d07f\n                if (*(int64_t *)(v27 + 8 + *v8) == 0) {\n                    // 0x40d0e0\n                    free((int64_t *)v43);\n                    v44 = 1;\n                }\n                int64_t v45 = *v2; // 0x40d081\n                int64_t v46 = v25 + 1; // 0x40d085\n                int64_t v47 = v45 + v1; // 0x40d089\n                int64_t v48 = v45; // 0x40d091\n                if (*(int64_t *)(v47 + 8) <= v46) {\n                    // break -> 0x40d10c\n                    break;\n                }\n                v18 = v46;\n                int64_t v49 = v43;\n                v19 = *(int64_t *)(*(int64_t *)(v47 + 16) + 8 * v18);\n                v20 = *v8;\n                v21 = 24 * v19;\n                v22 = v20 + v21;\n                v23 = *(int64_t *)(v22 + 8);\n                v24 = v44;\n                v25 = v18;\n                v26 = v19;\n                v27 = v21;\n                v28 = v22;\n                v29 = v23;\n                if (v23 == -1) {\n                    // 0x40d0f8\n                    v31 = v48 + v1;\n                    v32 = v18;\n                    v32++;\n                    v30 = 1;\n                    if (*(int64_t *)(v31 + 8) <= v32) {\n                        // break (via goto) -> 0x40d10c\n                        goto lab_0x40d10c;\n                    }\n                    // 0x40d093\n                    v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                    v34 = 24 * v33;\n                    v35 = v34 + v20;\n                    v36 = *(int64_t *)(v35 + 8);\n                    v24 = 1;\n                    v25 = v32;\n                    v26 = v33;\n                    v27 = v34;\n                    v28 = v35;\n                    v29 = v36;\n                    while (v36 == -1) {\n                        // 0x40d0f8\n                        v32++;\n                        v30 = 1;\n                        if (*(int64_t *)(v31 + 8) <= v32) {\n                            // break (via goto) -> 0x40d10c\n                            goto lab_0x40d10c;\n                        }\n                        // 0x40d093\n                        v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                        v34 = 24 * v33;\n                        v35 = v34 + v20;\n                        v36 = *(int64_t *)(v35 + 8);\n                        v24 = 1;\n                        v25 = v32;\n                        v26 = v33;\n                        v27 = v34;\n                        v28 = v35;\n                        v29 = v36;\n                    }\n                }\n                // 0x40d0b4\n                v37 = v29;\n                if (v37 != 0) {\n                    // 0x40d050\n                    v39 = __asm_movaps(__asm_movdqu(*(int128_t *)v28));\n                    v38 = *(int64_t *)(v28 + 16);\n                } else {\n                    // 0x40d0b9\n                    v40 = function_40cfa0(&v39, a2, v26, v37);\n                    v38 = v49;\n                    result2 = v40;\n                    if ((int32_t)v40 != 0) {\n                        // 0x40d0ca\n                        return result2;\n                    }\n                }\n                // 0x40d062\n                v42 = function_40cdd0((int64_t *)&v6, &v39);\n                result2 = v42;\n            }\n            // 0x40d0ca\n            return result2;\n          lab_0x40d10c:\n            // 0x40d10c\n            if ((char)function_40b280((int64_t)&v6, a3) == 0) {\n                // 0x40d0ca\n                return 12;\n            }\n            int64_t v50 = *v8; // 0x40d121\n            v15 = v50;\n            if ((char)a4 == 1 || (char)v30 == 0) {\n                goto lab_0x40d1a5;\n            } else {\n                // 0x40d135\n                *(int64_t *)(v50 + v9) = 0;\n                v14 = 0x100000000 * v7 >> 32;\n                goto lab_0x40d1b9;\n            }\n        }\n    }\n  lab_0x40d190:\n    // 0x40d190\n    if ((char)function_40b280((int64_t)&v6, a3) == 0) {\n        // 0x40d0ca\n        return 12;\n    }\n    // 0x40d1a1\n    v15 = *v8;\n    goto lab_0x40d1a5;\n  lab_0x40d1a5:;\n    int128_t v51 = __asm_movdqa(0); // 0x40d1a5\n    int64_t v52 = v15 + v1;\n    __asm_movups(*(int128_t *)v52, v51);\n    int64_t v53 = 0x100000000 * v7 >> 32;\n    *(int64_t *)(v52 + 16) = v53;\n    v14 = v53;\n    goto lab_0x40d1b9;\n  lab_0x40d1b9:;\n    int128_t v54 = __asm_movdqa(0); // 0x40d1c2\n    *(int64_t *)((int64_t)a1 + 16) = v14;\n    *a1 = (int128_t)__asm_movaps(v54);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40d200",
            "funcStartAddr": "40d200",
            "funcEndAddr": "40d33f",
            "decompiledFuncCode": "int64_t function_40d200(int64_t a1, int64_t * a2, int64_t a3, uint32_t a4) {\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x40d217\n    int64_t v3 = *v2; // 0x40d217\n    int64_t size = 8 * v3; // 0x40d224\n    int128_t v4 = v3; // bp-72, 0x40d22c\n    int64_t * mem = malloc((int32_t)size); // 0x40d231\n    if (mem == NULL) {\n        // 0x40d32d\n        return 12;\n    }\n    int64_t * v5 = (int64_t *)(v1 + 16);\n    if (v3 < 1) {\n      lab_0x40d2cd:\n        // 0x40d2cd\n        free((int64_t *)*v5);\n        int128_t v6 = __asm_movdqa(0); // 0x40d2db\n        *v5 = (int64_t)mem;\n        *(int128_t *)a2 = (int128_t)__asm_movaps(v6);\n        return 0;\n    }\n    int64_t v7 = &v4;\n    int64_t v8 = size; // 0x40d200\n    int64_t v9 = 0; // 0x40d2c3\n    int64_t v10; // 0x40d200\n    int64_t v11; // 0x40d200\n    int64_t v12; // 0x40d260\n    while (true) {\n      lab_0x40d250:;\n        int64_t v13 = *(int64_t *)(*v5 + 8 * v9); // 0x40d254\n        v12 = *(int64_t *)(a1 + 48) + 24 * v13;\n        uint64_t v14 = *(int64_t *)(v12 + 8); // 0x40d264\n        if (v14 >= 1) {\n            int64_t v15 = 0;\n            int64_t v16 = *(int64_t *)(8 * v15 + *(int64_t *)(v12 + 16)); // 0x40d289\n            int64_t v17 = 16 * v16 + v8; // 0x40d294\n            int64_t v18; // 0x40d2ba\n            if ((int32_t)*(char *)(v17 + 8) == a4) {\n                // 0x40d2a1\n                if (*(int64_t *)v17 == a3) {\n                    if (v16 == -1) {\n                        goto lab_0x40d300;\n                    } else {\n                        // 0x40d2ac\n                        v18 = function_40c900(a1, v7, v13, a3, (int64_t)a4);\n                        v11 = a1;\n                        v10 = v18;\n                        if ((int32_t)v18 != 0) {\n                            goto lab_0x40d30e_2;\n                        } else {\n                            goto lab_0x40d2c3;\n                        }\n                    }\n                }\n            }\n            int64_t v19 = v15 + 1; // 0x40d280\n            while (v14 != v19) {\n                // 0x40d289\n                v15 = v19;\n                v16 = *(int64_t *)(8 * v15 + *(int64_t *)(v12 + 16));\n                v17 = 16 * v16 + v8;\n                if ((int32_t)*(char *)(v17 + 8) == a4) {\n                    // 0x40d2a1\n                    if (*(int64_t *)v17 == a3) {\n                        if (v16 == -1) {\n                            goto lab_0x40d300;\n                        } else {\n                            // 0x40d2ac\n                            v18 = function_40c900(a1, v7, v13, a3, (int64_t)a4);\n                            v11 = a1;\n                            v10 = v18;\n                            if ((int32_t)v18 != 0) {\n                                goto lab_0x40d30e_2;\n                            } else {\n                                goto lab_0x40d2c3;\n                            }\n                        }\n                    }\n                }\n                // 0x40d280\n                v19 = v15 + 1;\n            }\n        }\n        goto lab_0x40d300;\n    }\n  lab_0x40d30e_2:\n    // 0x40d30e\n    free(mem);\n    return v10 & 0xffffffff;\n  lab_0x40d300:;\n    int64_t v20 = function_40cdd0((int64_t *)&v4, (int128_t *)v12); // 0x40d305\n    v11 = v7;\n    v10 = v20;\n    if ((int32_t)v20 != 0) {\n        // break -> 0x40d30e\n        goto lab_0x40d30e_2;\n    }\n    goto lab_0x40d2c3;\n  lab_0x40d2c3:\n    // 0x40d2c3\n    v9++;\n    v8 = v11;\n    if (*v2 <= v9) {\n        goto lab_0x40d2cd;\n    }\n    goto lab_0x40d250;\n}\n"
        },
        {
            "funcName": "function_40d340",
            "funcStartAddr": "40d340",
            "funcEndAddr": "40d4f2",
            "decompiledFuncCode": "int64_t function_40d340(int128_t * a1, int64_t a2, int64_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40d340\n    int64_t v2 = *v1; // 0x40d340\n    if (v2 == 0) {\n        // 0x40d408\n        return 0;\n    }\n    int64_t * v3 = (int64_t *)(a3 + 8); // 0x40d34f\n    int64_t v4 = *v3; // 0x40d34f\n    if (v4 == 0) {\n        // 0x40d408\n        return 0;\n    }\n    int64_t v5 = (int64_t)a1;\n    int64_t v6 = v4 + v2; // 0x40d35e\n    int64_t * v7 = (int64_t *)(v5 + 8); // 0x40d373\n    int64_t v8 = *v7; // 0x40d373\n    int64_t * v9 = (int64_t *)(v5 + 16); // 0x40d37a\n    int64_t v10 = *v9; // 0x40d37a\n    int64_t v11 = v8; // 0x40d385\n    int64_t v12 = v10; // 0x40d385\n    int64_t v13 = v4; // 0x40d385\n    int64_t v14 = v2; // 0x40d385\n    if (v8 + v6 > v5) {\n        int64_t v15 = v6 + v5; // 0x40d4ba\n        int64_t * mem = realloc((int64_t *)v10, 8 * (int32_t)v15); // 0x40d4c5\n        if (mem == NULL) {\n            // 0x40d408\n            return 12;\n        }\n        // 0x40d4d2\n        v12 = (int64_t)mem;\n        v11 = *v7;\n        v14 = *v1;\n        *v9 = v12;\n        *(int64_t *)a1 = v15;\n        v13 = *v3;\n    }\n    int64_t v16 = *(int64_t *)(a2 + 16); // 0x40d38b\n    int64_t v17 = *(int64_t *)(a3 + 16); // 0x40d38f\n    int64_t v18 = v13 - 1; // 0x40d398\n    int64_t v19 = v18; // 0x40d3ac\n    int64_t v20 = v11 - 1; // 0x40d3ac\n    int64_t v21 = *(int64_t *)(v17 + 8 * v18); // 0x40d3ac\n    int64_t v22 = v13 + v11 + v14; // 0x40d3ac\n    int64_t v23 = v14 - 1; // 0x40d3ac\n    int64_t v24; // 0x40d340\n    int64_t v25; // 0x40d340\n    int64_t v26; // 0x40d340\n    int64_t v27; // 0x40d340\n    int64_t v28; // 0x40d340\n    int64_t v29; // 0x40d340\n    int64_t v30; // 0x40d340\n    int64_t v31; // 0x40d340\n    int64_t v32; // 0x40d340\n    int64_t v33; // 0x40d340\n    int64_t v34; // 0x40d340\n    int64_t v35; // 0x40d340\n    int64_t v36; // 0x40d340\n    int64_t v37; // 0x40d340\n    while (true) {\n      lab_0x40d3b0:;\n        int64_t v38 = v21;\n        int64_t v39 = *(int64_t *)(8 * v23 + v16);\n        v26 = v24;\n        v27 = v25;\n        v32 = v19;\n        v34 = v20;\n        v21 = v38;\n        v36 = v22;\n        v30 = v39;\n        v28 = v23;\n        v33 = v19;\n        v35 = v20;\n        v37 = v22;\n        v31 = v38;\n        v29 = v23;\n        if (v39 == v38) {\n            goto lab_0x40d3c6;\n        } else {\n            goto lab_0x40d3b5;\n        }\n    }\n  lab_0x40d420_4:;\n    int64_t v40 = *v7; // 0x40d420\n    int64_t v41 = *v1 + v40 + *v3; // 0x40d42b\n    int64_t v42 = v40 - 1; // 0x40d430\n    int64_t v43; // 0x40d340\n    int64_t v44 = v41 - v43; // 0x40d438\n    *v7 = v44 + v40;\n    int64_t v45; // 0x40d340\n    int64_t v46; // 0x40d340\n    if (v42 < 0 || v44 < 1) {\n        // 0x40d4a0\n        v46 = 8 * v44;\n        v45 = v12;\n    } else {\n        int64_t v47 = v42; // 0x40d340\n        int64_t v48 = v44; // 0x40d340\n        int64_t v49 = v41 - 1; // 0x40d340\n        while (true) {\n            int64_t v50 = v47;\n            int64_t v51 = v49;\n            int64_t v52 = v48;\n            uint64_t v53 = *(int64_t *)(8 * v51 + v12); // 0x40d450\n            uint64_t v54 = *(int64_t *)(8 * v50 + v12); // 0x40d454\n            int64_t v55 = 8 * (v52 + v50) + v12; // 0x40d45c\n            while (v53 > v54) {\n                // 0x40d465\n                *(int64_t *)v55 = v53;\n                int64_t v56 = v52 - 1; // 0x40d46c\n                if (v56 == 0) {\n                    // break (via goto) -> 0x40d472\n                    goto lab_0x40d472;\n                }\n                v51--;\n                v52 = v56;\n                v53 = *(int64_t *)(8 * v51 + v12);\n                v54 = *(int64_t *)(8 * v50 + v12);\n                v55 = 8 * (v52 + v50) + v12;\n            }\n            // 0x40d480\n            *(int64_t *)v55 = v54;\n            v47 = v50 - 1;\n            v48 = v52;\n            v49 = v51;\n            if (v50 == 0) {\n                // 0x40d48d\n                v46 = 8 * v52;\n                v45 = *v9;\n                goto lab_0x40d4a4;\n            }\n        }\n      lab_0x40d472:\n        // 0x40d472\n        v46 = 0;\n        v45 = *v9;\n    }\n    goto lab_0x40d4a4;\n  lab_0x40d3e8:;\n    // 0x40d3e8\n    int64_t v58; // 0x40d340\n    int64_t v59 = v58 - 1; // 0x40d3e8\n    uint64_t v60; // 0x40d340\n    *(int64_t *)(8 * v59 + v12) = v60;\n    int64_t v61; // 0x40d340\n    int64_t v62 = v61; // 0x40d3ec\n    int64_t v63 = v59; // 0x40d3ec\n    goto lab_0x40d3f0;\n  lab_0x40d3c6:\n    // 0x40d3c6\n    v60 = v31;\n    v58 = v37;\n    int64_t v72 = v35; // 0x40d3c9\n    v61 = v35;\n    if (v35 >= 0) {\n        int64_t v73 = v72;\n        uint64_t v74 = *(int64_t *)(8 * v73 + v12); // 0x40d3da\n        while (v74 > v60) {\n            // 0x40d3d0\n            v72 = v73 - 1;\n            v61 = -1;\n            if (v73 == 0) {\n                goto lab_0x40d3e8;\n            }\n            v73 = v72;\n            v74 = *(int64_t *)(8 * v73 + v12);\n        }\n        // 0x40d3e3\n        v61 = v73;\n        v62 = v73;\n        v63 = v58;\n        if (v74 == v60) {\n            goto lab_0x40d3f0;\n        } else {\n            goto lab_0x40d3e8;\n        }\n    } else {\n        goto lab_0x40d3e8;\n    }\n  lab_0x40d3b5:;\n    int64_t v75 = v28;\n    v22 = v36;\n    v20 = v34;\n    v19 = v32;\n    int64_t v76 = v27;\n    int64_t v77 = v26;\n    int64_t v70; // 0x40d340\n    int64_t v69; // 0x40d340\n    int64_t v66; // 0x40d340\n    int64_t v67; // 0x40d340\n    int64_t v68; // 0x40d340\n    if (v77 < v76) {\n        int64_t v78 = v19 - 1; // 0x40d3b7\n        v66 = v78;\n        v67 = v20;\n        v68 = v22;\n        v69 = v30;\n        v70 = v75;\n        if (v78 < 0) {\n            // break -> 0x40d420\n            goto lab_0x40d420_4;\n        }\n        goto lab_0x40d3bd;\n    } else {\n        // 0x40d410\n        v23 = v75 - 1;\n        v24 = v77;\n        v25 = v76;\n        v43 = v22;\n        if (v23 < 0) {\n            // break -> 0x40d420\n            goto lab_0x40d420_4;\n        }\n        goto lab_0x40d3b0;\n    }\n  lab_0x40d3f0:;\n    int64_t v64 = v29 - 1; // 0x40d3f0\n    v43 = v63;\n    if (v64 < 0) {\n        // break -> 0x40d420\n        goto lab_0x40d420_4;\n    }\n    int64_t v65 = v33 - 1; // 0x40d3f6\n    v43 = v63;\n    if (v65 < 0) {\n        // break -> 0x40d420\n        goto lab_0x40d420_4;\n    }\n    // 0x40d3fc\n    v66 = v65;\n    v67 = v62;\n    v68 = v63;\n    v69 = *(int64_t *)(8 * v64 + v16);\n    v70 = v64;\n    goto lab_0x40d3bd;\n  lab_0x40d3bd:;\n    int64_t v71 = *(int64_t *)(8 * v66 + v17); // 0x40d3bd\n    v26 = v69;\n    v27 = v71;\n    v32 = v66;\n    v34 = v67;\n    v21 = v71;\n    v36 = v68;\n    v30 = v69;\n    v28 = v70;\n    v33 = v66;\n    v35 = v67;\n    v37 = v68;\n    v31 = v69;\n    v29 = v70;\n    if (v69 != v71) {\n        goto lab_0x40d3b5;\n    } else {\n        goto lab_0x40d3c6;\n    }\n  lab_0x40d4a4:;\n    int64_t v57 = v45;\n    memcpy((int64_t *)v57, (int64_t *)(v57 + 8 * v43), (int32_t)v46);\n    // 0x40d408\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40d500",
            "funcStartAddr": "40d500",
            "funcEndAddr": "40d5d7",
            "decompiledFuncCode": "int64_t function_40d500(int64_t a1, int64_t a2, int32_t a3, int32_t a4, int64_t a5) {\n    int64_t v1 = a5;\n    int32_t v2 = a2;\n    int64_t v3; // 0x40d500\n    int64_t v4; // 0x40d500\n    int32_t v5; // 0x40d500\n    int64_t v6; // 0x40d500\n    if (v2 == 15) {\n        int64_t * mem = malloc(968); // 0x40d598\n        if (mem == NULL) {\n            // 0x40d579\n            return 0;\n        }\n        int64_t v7 = (int64_t)mem; // 0x40d598\n        *(int64_t *)a1 = v7;\n        *mem = 968;\n        v5 = 1;\n        v6 = 0;\n        v4 = 8;\n        v3 = v7;\n    } else {\n        int64_t v8 = 0x100000000 * a2;\n        int64_t v9 = v8 >> 26; // 0x40d519\n        v5 = v2 + 1;\n        v6 = v9;\n        v4 = v9 | 8;\n        v3 = v8 >> 32;\n    }\n    int64_t v10 = a3;\n    int64_t v11 = a4;\n    *(int32_t *)a2 = v5;\n    int64_t result = v3 + v4; // 0x40d526\n    int64_t v12 = v3 + v6;\n    *(int64_t *)(v12 + 8) = 0;\n    *(int64_t *)(v12 + 16) = v10;\n    *(int64_t *)(v12 + 24) = v11;\n    __asm_movups(*(int128_t *)(v12 + 48), __asm_movdqu(*(int128_t *)&v1));\n    char * v13 = (char *)(v12 + 58); // 0x40d54b\n    *v13 = *v13 & -13;\n    *(int64_t *)(v12 + 32) = 0;\n    *(int64_t *)(v12 + 40) = 0;\n    *(int64_t *)(v12 + 64) = -1;\n    if (a3 != 0) {\n        // 0x40d56e\n        *(int64_t *)v10 = result;\n    }\n    // 0x40d571\n    if (a4 != 0) {\n        // 0x40d576\n        *(int64_t *)v11 = result;\n    }\n    // 0x40d579\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d5e0",
            "funcStartAddr": "40d5e0",
            "funcEndAddr": "40d689",
            "decompiledFuncCode": "int64_t function_40d5e0(int64_t a1, int64_t a2) {\n    int64_t v1 = a2 + 112; // 0x40d5e4\n    int64_t v2 = a2 + 128; // 0x40d5ea\n    int64_t v3 = function_40d500(v1, v2, 0, 0, a1 + 40); // 0x40d61d\n    int64_t v4 = v3; // bp-48, 0x40d622\n    if (v3 == 0) {\n        // 0x40d66d\n        return 0;\n    }\n    *(int64_t *)v3 = a1;\n    int64_t v5 = *&v4; // 0x40d62d\n    char * v6 = (char *)(v5 + 50); // 0x40d630\n    *v6 = *v6 | 4;\n    int64_t v7 = *(int64_t *)(a1 + 8); // 0x40d634\n    int64_t v8; // 0x40d5e0\n    int64_t v9; // 0x40d5e0\n    int64_t result; // 0x40d5e0\n    int64_t v10; // 0x40d5e0\n    int64_t v11; // 0x40d5e0\n    int64_t v12; // 0x40d5e0\n    int64_t v13; // 0x40d5e0\n    int64_t v14; // 0x40d5e0\n    int64_t v15; // 0x40d659\n    int64_t v16; // 0x40d65c\n    int64_t v17; // 0x40d64b\n    int64_t v18; // 0x40d64b\n    if (v7 != 0) {\n        // 0x40d608\n        v13 = v7;\n        v10 = v5;\n        v9 = v5 + 8;\n    } else {\n        // 0x40d64b\n        v18 = *(int64_t *)(a1 + 16);\n        v11 = v5;\n        v12 = v5;\n        v8 = v18;\n        if (v18 != 0 != v18 != 0) {\n            v14 = a1;\n            v15 = *(int64_t *)v14;\n            if (v15 == 0) {\n                // 0x40d668\n                result = v4;\n                return result;\n            }\n            // 0x40d648\n            v16 = *(int64_t *)v11;\n            v17 = *(int64_t *)(v15 + 16);\n            v11 = v16;\n            v12 = v16;\n            v8 = v17;\n            while (v17 != 0 != v17 != v14) {\n                // 0x40d659\n                v14 = v15;\n                v15 = *(int64_t *)v14;\n                if (v15 == 0) {\n                    // 0x40d668\n                    result = v4;\n                    return result;\n                }\n                // 0x40d648\n                v16 = *(int64_t *)v11;\n                v17 = *(int64_t *)(v15 + 16);\n                v11 = v16;\n                v12 = v16;\n                v8 = v17;\n            }\n        }\n        // 0x40d680\n        v13 = v8;\n        v10 = v12;\n        v9 = v12 + 16;\n    }\n    int64_t v19 = v13;\n    int64_t v20 = function_40d500(v1, v2, 0, 0, v19 + 40); // 0x40d61d\n    int64_t * v21 = (int64_t *)v9; // 0x40d622\n    *v21 = v20;\n    result = 0;\n    while (v20 != 0) {\n        int64_t v22 = v19;\n        *(int64_t *)v20 = v10;\n        v5 = *v21;\n        v6 = (char *)(v5 + 50);\n        *v6 = *v6 | 4;\n        v7 = *(int64_t *)(v22 + 8);\n        if (v7 != 0) {\n            // 0x40d608\n            v13 = v7;\n            v10 = v5;\n            v9 = v5 + 8;\n        } else {\n            // 0x40d64b\n            v18 = *(int64_t *)(v22 + 16);\n            v11 = v5;\n            int64_t v23 = v22; // 0x40d652\n            v12 = v5;\n            v8 = v18;\n            if (v18 != 0 != v18 != 0) {\n                v14 = v23;\n                v15 = *(int64_t *)v14;\n                if (v15 == 0) {\n                    // 0x40d668\n                    result = v4;\n                    return result;\n                }\n                // 0x40d648\n                v16 = *(int64_t *)v11;\n                v17 = *(int64_t *)(v15 + 16);\n                v11 = v16;\n                v12 = v16;\n                v8 = v17;\n                while (v17 != 0 != v17 != v14) {\n                    // 0x40d659\n                    v14 = v15;\n                    v15 = *(int64_t *)v14;\n                    if (v15 == 0) {\n                        // 0x40d668\n                        result = v4;\n                        return result;\n                    }\n                    // 0x40d648\n                    v16 = *(int64_t *)v11;\n                    v17 = *(int64_t *)(v15 + 16);\n                    v11 = v16;\n                    v12 = v16;\n                    v8 = v17;\n                }\n            }\n            // 0x40d680\n            v13 = v8;\n            v10 = v12;\n            v9 = v12 + 16;\n        }\n        // 0x40d60f\n        v19 = v13;\n        v20 = function_40d500(v1, v2, 0, 0, v19 + 40);\n        v21 = (int64_t *)v9;\n        *v21 = v20;\n        result = 0;\n    }\n  lab_0x40d66d:\n    // 0x40d66d\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d690",
            "funcStartAddr": "40d690",
            "funcEndAddr": "40d8aa",
            "decompiledFuncCode": "int64_t function_40d690(int32_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t result = *(int64_t *)(a3 + 8); // 0x40d6a4\n    int64_t v1; // 0x40d690\n    int64_t v2; // 0x40d690\n    int64_t v3; // 0x40d690\n    int64_t v4; // 0x40d690\n    int64_t v5; // 0x40d690\n    int64_t v6; // bp-72, 0x40d690\n    int64_t v7; // 0x40d690\n    int64_t v8; // 0x40d6df\n    int64_t v9; // 0x40d6e6\n    int64_t v10; // 0x40d690\n    int64_t v11; // 0x40d709\n    int64_t v12; // 0x40d723\n    if ((*(char *)(a2 + 56) & 16) == 0) {\n        int64_t v13 = a2 + 128; // 0x40d838\n        int64_t v14 = a2 + 112; // 0x40d83f\n        int64_t v15 = &v6;\n        int64_t v16 = function_40d500(v14, v13, 0, 0, v15); // 0x40d862\n        int64_t v17 = function_40d500(v14, v13, 0, 0, v15); // 0x40d87c\n        v10 = v15;\n        v8 = v13;\n        v11 = v16;\n        v9 = v14;\n        v12 = v17;\n        v1 = v15;\n        v7 = v13;\n        v5 = v16;\n        v2 = v17;\n        v3 = v14;\n        v4 = v17;\n        if (result != 0) {\n            goto lab_0x40d72b;\n        } else {\n            goto lab_0x40d749;\n        }\n    } else {\n        if (result == 0) {\n            int64_t v18 = a2 + 128; // 0x40d7e0\n            int64_t v19 = a2 + 112; // 0x40d7e7\n            int64_t v20 = &v6;\n            int64_t v21 = function_40d500(v19, v18, 0, 0, v20); // 0x40d80a\n            int64_t v22 = function_40d500(v19, v18, 0, 0, v20); // 0x40d824\n            v1 = v20;\n            v7 = v18;\n            v5 = v21;\n            v2 = v22;\n            v3 = v19;\n            v4 = v22;\n            goto lab_0x40d749;\n        } else {\n            uint64_t v23 = *(int64_t *)(a3 + 40); // 0x40d6c0\n            if (v23 > 63 || (*(int64_t *)(a2 + 160) & 1 << v23 % 64) == 0) {\n                // 0x40d7c7\n                return result;\n            }\n            // 0x40d6df\n            v8 = a2 + 128;\n            v9 = a2 + 112;\n            v10 = &v6;\n            v11 = function_40d500(v9, v8, 0, 0, v10);\n            v12 = function_40d500(v9, v8, 0, 0, v10);\n            goto lab_0x40d72b;\n        }\n    }\n  lab_0x40d72b:;\n    int64_t v24 = function_40d500(v9, v8, (int32_t)result, (int32_t)v12, v10); // 0x40d741\n    v1 = v10;\n    v7 = v8;\n    v5 = v11;\n    v2 = v24;\n    v3 = v9;\n    v4 = v12;\n    goto lab_0x40d749;\n  lab_0x40d749:;\n    int64_t v25 = function_40d500(v3, v7, (int32_t)v5, (int32_t)v2, v1); // 0x40d764\n    int64_t result2; // 0x40d690\n    if (v4 == 0 || v5 == 0 || v2 == 0 || v25 == 0) {\n        // 0x40d898\n        *a1 = 12;\n        result2 = 0;\n    } else {\n        int64_t v26 = *(int64_t *)(a3 + 40); // 0x40d795\n        *(int64_t *)(v4 + 40) = v26;\n        *(int64_t *)(v5 + 40) = v26;\n        char * v27 = (char *)(v4 + 50); // 0x40d7a8\n        char v28 = *(char *)(a3 + 50) & 8;\n        *v27 = *v27 & -9 | v28;\n        char * v29 = (char *)(v5 + 50); // 0x40d7bb\n        *v29 = *v29 & -9 | v28;\n        result2 = v25;\n    }\n    // 0x40d7c7\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40d8b0",
            "funcStartAddr": "40d8b0",
            "funcEndAddr": "40d92b",
            "decompiledFuncCode": "int64_t function_40d8b0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40d8bc\n    int64_t v2 = *v1; // 0x40d8bc\n    int32_t result = 0; // bp-28, 0x40d8c0\n    int64_t v3; // 0x40d8b0\n    if (v2 != 0) {\n        // 0x40d8cd\n        if (*(char *)(v2 + 48) == 17) {\n            int64_t v4 = function_40d690(&result, a1, v2, v3); // 0x40d8f8\n            *v1 = v4;\n            if (v4 != 0) {\n                // 0x40d906\n                *(int64_t *)v4 = a2;\n            }\n        }\n    }\n    int64_t * v5 = (int64_t *)(a2 + 16); // 0x40d8d3\n    int64_t v6 = *v5; // 0x40d8d3\n    if (v6 == 0 || *(char *)(v6 + 48) != 17) {\n        // 0x40d8e2\n        return result;\n    }\n    int64_t v7 = function_40d690(&result, a1, v6, v3); // 0x40d918\n    *v5 = v7;\n    if (v7 != 0) {\n        // 0x40d926\n        *(int64_t *)v7 = a2;\n    }\n    // 0x40d8e2\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d930",
            "funcStartAddr": "40d930",
            "funcEndAddr": "40d9af",
            "decompiledFuncCode": "int64_t function_40d930(int64_t a1, int64_t a2) {\n    // 0x40d930\n    int128_t v1; // 0x40d930\n    int128_t v2 = v1;\n    int64_t v3 = a1;\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x40d930\n    *(int64_t *)(a1 + 8) = v4;\n    if (v4 < 1) {\n        int128_t v5 = __asm_pxor(v2, v2); // 0x40d980\n        *(int64_t *)(v3 + 16) = 0;\n        __asm_movups(*(int128_t *)&v3, v5);\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)v3; // 0x40d94f\n    *v6 = v4;\n    int32_t size = 8 * (int32_t)v4; // 0x40d955\n    int64_t * mem = malloc(size); // 0x40d955\n    *(int64_t *)(v3 + 16) = (int64_t)mem;\n    int64_t result; // 0x40d930\n    if (mem == NULL) {\n        // 0x40d998\n        *(int64_t *)(v3 + 8) = 0;\n        *v6 = 0;\n        result = 12;\n    } else {\n        // 0x40d963\n        memcpy(mem, (int64_t *)*(int64_t *)(a2 + 16), size);\n        result = 0;\n    }\n    // 0x40d975\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d9b0",
            "funcStartAddr": "40d9b0",
            "funcEndAddr": "40db32",
            "decompiledFuncCode": "int64_t function_40d9b0(int64_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40d9b0\n    int128_t v1; // 0x40d9b0\n    int128_t v2 = v1;\n    int64_t v3 = (int64_t)a1;\n    if (a2 != 0) {\n        int64_t * v4 = (int64_t *)(a2 + 8); // 0x40d9c7\n        int64_t v5 = *v4; // 0x40d9c7\n        if (a3 != 0 && v5 >= 1) {\n            int64_t * v6 = (int64_t *)(a3 + 8); // 0x40d9dd\n            uint64_t v7 = *v6; // 0x40d9dd\n            if (v7 < 1) {\n                // 0x40dab3\n                return function_40d930(v3, a2);\n            }\n            int64_t v8 = v7 + v5; // 0x40d9ed\n            *a1 = v8;\n            int64_t * mem = malloc(8 * (int32_t)v8); // 0x40d9ff\n            int64_t v9 = (int64_t)mem; // 0x40d9ff\n            *(int64_t *)(v3 + 16) = v9;\n            if (mem == NULL) {\n                // 0x40da9a\n                return 12;\n            }\n            int64_t v10 = *(int64_t *)(a2 + 16); // 0x40da14\n            int64_t v11 = 0;\n            int64_t v12 = 0;\n            int64_t v13 = v9;\n            int64_t v14 = *(int64_t *)(a3 + 16); // 0x40da58\n            int64_t v15 = *(int64_t *)v10; // 0x40da5c\n            int64_t v16 = *(int64_t *)(v14 + 8 * v11); // 0x40da63\n            int64_t v17; // 0x40d9b0\n            int64_t v18; // 0x40d9b0\n            if (v15 > v16) {\n                // 0x40da6c\n                *(int64_t *)v13 = v16;\n                v17 = v11 + 1;\n                v18 = v12;\n            } else {\n                // 0x40da28\n                *(int64_t *)v13 = v15;\n                v17 = v11 + (int64_t)(v15 == v16);\n                v18 = v12 + 1;\n            }\n            int64_t v19 = 1; // 0x40da5f\n            int64_t v20 = v18;\n            int64_t v21 = v17;\n            uint64_t v22 = *v4; // 0x40da3a\n            int64_t v23; // 0x40d9b0\n            while (v22 > v20) {\n                int64_t v24 = v13 + 8; // 0x40da3e\n                int64_t v25 = 8 * v20 + v10; // 0x40da4b\n                if (v7 <= v21) {\n                    int64_t v26 = v22 - v20; // 0x40db10\n                    memcpy((int64_t *)v24, (int64_t *)v25, 8 * (int32_t)v26);\n                    v23 = v26 + v19;\n                    goto lab_0x40dad9;\n                }\n                v11 = v21;\n                v12 = v20;\n                v13 = v24;\n                v14 = *(int64_t *)(a3 + 16);\n                v15 = *(int64_t *)v25;\n                v16 = *(int64_t *)(v14 + 8 * v11);\n                if (v15 > v16) {\n                    // 0x40da6c\n                    *(int64_t *)v13 = v16;\n                    v17 = v11 + 1;\n                    v18 = v12;\n                } else {\n                    // 0x40da28\n                    *(int64_t *)v13 = v15;\n                    v17 = v11 + (int64_t)(v15 == v16);\n                    v18 = v12 + 1;\n                }\n                // 0x40da3a\n                v19++;\n                v20 = v18;\n                v21 = v17;\n                v22 = *v4;\n            }\n            int64_t v27 = *v6; // 0x40dad0\n            v23 = v19;\n            if (v27 > v21) {\n                int64_t v28 = v27 - v21; // 0x40dafb\n                memcpy((int64_t *)(8 * v19 + v9), (int64_t *)(8 * v21 + v14), 8 * (int32_t)v28);\n                v23 = v28 + v19;\n            }\n          lab_0x40dad9:\n            // 0x40dad9\n            *(int64_t *)(v3 + 8) = v23;\n            return 0;\n        }\n        // 0x40da78\n        if (v5 >= 0 == (v5 != 0)) {\n            // 0x40dab3\n            return function_40d930(v3, a2);\n        }\n    }\n    if (a3 != 0) {\n        int64_t v29 = *(int64_t *)(a3 + 8); // 0x40da82\n        if (v29 >= 0 == (v29 != 0)) {\n            // 0x40dab3\n            return function_40d930(v3, a3);\n        }\n    }\n    // 0x40da89\n    *(int64_t *)(v3 + 16) = 0;\n    *(int128_t *)a1 = (int128_t)__asm_movaps(__asm_pxor(v2, v2));\n    // 0x40da9a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40db40",
            "funcStartAddr": "40db40",
            "funcEndAddr": "40de40",
            "decompiledFuncCode": "int64_t function_40db40(int128_t * a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = (int64_t)a3;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x40db4e\n    uint64_t v3 = *v2; // 0x40db4e\n    if (v3 == 0) {\n        // 0x40de18\n        *(int32_t *)a1 = 0;\n        // 0x40dbe7\n        return 0;\n    }\n    uint64_t v4 = (int64_t)a4;\n    int64_t v5 = v3 + (v4 & 0xffffffff); // 0x40db5e\n    int64_t v6 = v5; // 0x40db62\n    if (v3 >= 1) {\n        int64_t v7 = *(int64_t *)(v1 + 16); // 0x40db64\n        int64_t v8 = v7; // 0x40db6c\n        int64_t v9 = v5; // 0x40db6c\n        v9 += *(int64_t *)v8;\n        v8 += 8;\n        v6 = v9;\n        while (v7 + 8 * v3 != v8) {\n            // 0x40db70\n            v9 += *(int64_t *)v8;\n            v8 += 8;\n            v6 = v9;\n        }\n    }\n    int64_t v10 = *(int64_t *)(a2 + 136) & v6; // 0x40db91\n    int64_t v11 = 24 * v10 + *(int64_t *)(a2 + 64); // 0x40db9c\n    uint64_t v12 = *(int64_t *)v11; // 0x40dba0\n    if (v12 >= 1) {\n        int64_t v13 = 0; // 0x40dbb2\n        int64_t v14 = *(int64_t *)(8 * v13 + *(int64_t *)(v11 + 16)); // 0x40dbc1\n        int64_t result; // 0x40db40\n        if (*(int64_t *)v14 == v6) {\n            // 0x40dbca\n            if ((int32_t)(*(char *)(v14 + 104) % 16) == a4) {\n                // 0x40dbd7\n                result = v14;\n                if ((char)function_40ace0(*(int64_t *)(v14 + 80), v1, 3 * v10) != 0) {\n                    // 0x40dbe7\n                    return result;\n                }\n            }\n        }\n        // 0x40dbb8\n        v13++;\n        while (v13 != v12) {\n            // 0x40dbc1\n            v14 = *(int64_t *)(8 * v13 + *(int64_t *)(v11 + 16));\n            if (*(int64_t *)v14 == v6) {\n                // 0x40dbca\n                if ((int32_t)(*(char *)(v14 + 104) % 16) == a4) {\n                    // 0x40dbd7\n                    result = v14;\n                    if ((char)function_40ace0(*(int64_t *)(v14 + 80), v1, 3 * v10) != 0) {\n                        // 0x40dbe7\n                        return result;\n                    }\n                }\n            }\n            // 0x40dbb8\n            v13++;\n        }\n    }\n    int64_t * mem = calloc(112, 1); // 0x40dc0a\n    if (mem == NULL) {\n        // 0x40dd98\n        *(int32_t *)a1 = 12;\n        // 0x40dbe7\n        return 0;\n    }\n    int64_t result2 = (int64_t)mem; // 0x40dc0a\n    int64_t v15 = result2 + 8; // 0x40dc1b\n    if ((int32_t)function_40d930(v15, v1) != 0) {\n        // 0x40de33\n        free(mem);\n        // 0x40dd98\n        *(int32_t *)a1 = 12;\n        // 0x40dbe7\n        return 0;\n    }\n    char * v16 = (char *)(result2 + 104); // 0x40dc36\n    *v16 = *v16 & -16 | (char)a4 % 16;\n    int64_t * v17 = (int64_t *)(result2 + 80); // 0x40dc56\n    *v17 = v15;\n    int64_t v18; // 0x40db40\n    int64_t v19; // 0x40db40\n    int64_t v20; // 0x40db40\n    int64_t v21; // 0x40db40\n    int64_t v22; // 0x40db40\n    int64_t v23; // 0x40db40\n    int64_t v24; // 0x40db40\n    int64_t v25; // 0x40db40\n    int64_t v26; // 0x40dc60\n    int64_t v27; // 0x40db40\n    int64_t * v28; // 0x40db40\n    uint64_t v29; // 0x40dc9a\n    if (*v2 >= 1) {\n        // 0x40dc60\n        v26 = result2 + 24;\n        v27 = result2 + 16;\n        v28 = (int64_t *)v27;\n        v23 = v1;\n        v18 = 0;\n        v21 = 0;\n        while (true) {\n          lab_0x40dc80:\n            // 0x40dc80\n            v22 = v21;\n            int64_t v30 = v18;\n            int64_t v31 = 16 * *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v22) + v23; // 0x40dc8c\n            int64_t v32 = v31 + 8; // 0x40dc90\n            uint32_t v33 = *(int32_t *)v32; // 0x40dc90\n            unsigned char v34 = *(char *)v32; // 0x40dc93\n            v25 = 1;\n            v20 = v30;\n            if (v34 == 1 == (v33 & 0x3ff00) == 0) {\n                goto lab_0x40dd5e;\n            } else {\n                char v35 = 2 * *(char *)(v31 + 10) & 32 | *v16;\n                *v16 = v35;\n                if (v34 == 2) {\n                    // 0x40ddb0\n                    *v16 = v35 | 16;\n                } else {\n                    if (v34 == 4) {\n                        // 0x40dce4\n                        *v16 = v35 | 64;\n                    }\n                }\n                int64_t v36 = v34; // 0x40dc93\n                v25 = v36;\n                v20 = v30;\n                if ((v33 & 0x3ff00) == 0) {\n                    goto lab_0x40dd5e;\n                } else {\n                    int64_t v37 = v36; // 0x40dcf9\n                    int64_t v38 = v30; // 0x40dcf9\n                    if (v15 == *v17) {\n                        int64_t * mem2 = malloc(24); // 0x40dde5\n                        int64_t v39 = (int64_t)mem2; // 0x40dde5\n                        *v17 = v39;\n                        if (mem2 == NULL) {\n                            // 0x40de26\n                            function_40c460(result2);\n                            goto lab_0x40dd98;\n                        }\n                        // 0x40ddf4\n                        if ((int32_t)function_40d930(v39, v1) != 0) {\n                          lab_0x40dd98:\n                            // 0x40dd98\n                            *(int32_t *)a1 = 12;\n                            // 0x40dbe7\n                            return 0;\n                        }\n                        // 0x40de03\n                        *v16 = *v16 | -128;\n                        v37 = v1;\n                        v38 = 0;\n                    }\n                    // 0x40dcff\n                    v29 = (int64_t)(v33 / 256 & 0xff03ff);\n                    v19 = v38;\n                    v24 = v37;\n                    if (v29 % 2 == 0) {\n                        if (v4 % 2 == 0 || (v29 & 2) == 0) {\n                            goto lab_0x40dd13;\n                        } else {\n                            goto lab_0x40dd30;\n                        }\n                    } else {\n                        if (v4 % 2 == 0) {\n                            goto lab_0x40dd30;\n                        } else {\n                            if ((v29 & 2) != 0) {\n                                goto lab_0x40dd30;\n                            } else {\n                                goto lab_0x40dd13;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40dd74:\n    // 0x40dd74\n    if ((int32_t)function_40b3b0(a2, result2, v6) == 0) {\n        // 0x40dbe7\n        return result2;\n    }\n    // 0x40dd8a\n    function_40c460(result2);\n    // 0x40dd98\n    *(int32_t *)a1 = 12;\n    // 0x40dbe7\n    return 0;\n  lab_0x40dd5e:;\n    int64_t v40 = v22 + 1; // 0x40dd5e\n    v23 = v25;\n    v18 = v20;\n    v21 = v40;\n    if (v40 >= *v2) {\n        // break -> 0x40dd74\n        goto lab_0x40dd74;\n    }\n    goto lab_0x40dc80;\n  lab_0x40dd13:\n    if ((v4 & 2) == 0 == ((v29 & 16) != 0)) {\n        goto lab_0x40dd30;\n    } else {\n        // 0x40dd1e\n        v25 = v24;\n        v20 = v19;\n        if ((v4 & 4) != 0 || (v29 & 64) == 0) {\n            goto lab_0x40dd5e;\n        } else {\n            goto lab_0x40dd30;\n        }\n    }\n  lab_0x40dd30:;\n    int64_t v41 = v22 - v19; // 0x40dd33\n    int64_t v42 = v24; // 0x40dd36\n    if (v41 >= 0) {\n        int64_t v43 = *v28; // 0x40dd38\n        v42 = v24;\n        if (v41 < v43) {\n            // 0x40dd42\n            *v28 = v43 - 1;\n            function_40ca00(v27, v26, v41);\n            v42 = v26;\n        }\n    }\n    // 0x40dd5a\n    v25 = v42;\n    v20 = v19 + 1;\n    goto lab_0x40dd5e;\n}\n"
        },
        {
            "funcName": "function_40de40",
            "funcStartAddr": "40de40",
            "funcEndAddr": "40e028",
            "decompiledFuncCode": "int64_t function_40de40(int32_t * a1, int64_t a2, int64_t * a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a3;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x40de4e\n    int64_t v3 = *v2; // 0x40de4e\n    if (v3 == 0) {\n        // 0x40e014\n        *a1 = 0;\n        // 0x40dfbf\n        return 0;\n    }\n    int64_t v4 = v3; // 0x40de5b\n    if (v3 >= 1) {\n        int64_t v5 = *(int64_t *)(v1 + 16); // 0x40de5d\n        int64_t v6 = v5; // 0x40de65\n        int64_t v7 = v3; // 0x40de65\n        v7 += *(int64_t *)v6;\n        v6 += 8;\n        v4 = v7;\n        while (v5 + 8 * v3 != v6) {\n            // 0x40de68\n            v7 += *(int64_t *)v6;\n            v6 += 8;\n            v4 = v7;\n        }\n    }\n    int64_t v8 = *(int64_t *)(a2 + 136) & v4; // 0x40de84\n    int64_t v9 = 24 * v8 + *(int64_t *)(a2 + 64); // 0x40de8f\n    uint64_t v10 = *(int64_t *)v9; // 0x40de93\n    if (v10 >= 1) {\n        int64_t v11 = 0; // 0x40dea2\n        int64_t v12 = *(int64_t *)(8 * v11 + *(int64_t *)(v9 + 16)); // 0x40dea8\n        int64_t result; // 0x40de40\n        int64_t v13; // 0x40deb8\n        if (*(int64_t *)v12 == v4) {\n            // 0x40deb1\n            v13 = function_40ace0(v12 + 8, v1, 3 * v8);\n            result = v12;\n            if ((char)v13 != 0) {\n                // 0x40dfbf\n                return result;\n            }\n        }\n        // 0x40dec5\n        v11++;\n        while (v10 != v11) {\n            // 0x40dea8\n            v12 = *(int64_t *)(8 * v11 + *(int64_t *)(v9 + 16));\n            if (*(int64_t *)v12 == v4) {\n                // 0x40deb1\n                v13 = function_40ace0(v12 + 8, v1, 3 * v8);\n                result = v12;\n                if ((char)v13 != 0) {\n                    // 0x40dfbf\n                    return result;\n                }\n            }\n            // 0x40dec5\n            v11++;\n        }\n    }\n    int64_t * mem = calloc(112, 1); // 0x40ded8\n    if (mem == NULL) {\n        // 0x40e008\n        *a1 = 12;\n        // 0x40dfbf\n        return 0;\n    }\n    int64_t result2 = (int64_t)mem; // 0x40ded8\n    int64_t v14 = result2 + 8; // 0x40dee9\n    if ((int32_t)function_40d930(v14, v1) != 0) {\n        // 0x40e000\n        free(mem);\n        // 0x40e008\n        *a1 = 12;\n        // 0x40dfbf\n        return 0;\n    }\n    uint64_t v15 = *v2; // 0x40df00\n    *(int64_t *)(result2 + 80) = v14;\n    char v16; // 0x40de40\n    int64_t v17; // 0x40de40\n    int64_t v18; // 0x40de40\n    int64_t v19; // 0x40df19\n    char * v20; // 0x40de40\n    if (v15 >= 1) {\n        int64_t v21 = *(int64_t *)(v1 + 16); // 0x40df11\n        v19 = v21 + 8 * v15;\n        v20 = (char *)(result2 + 104);\n        v17 = v21;\n        while (true) {\n          lab_0x40df64_2:\n            // 0x40df64\n            v18 = v17;\n            int64_t v22 = 16 * *(int64_t *)v18 + v21; // 0x40df6b\n            int64_t v23 = v22 + 8; // 0x40df6e\n            char v24 = *(char *)v23; // 0x40df6e\n            if (v24 != 1) {\n                char v25 = 2 * *(char *)(v22 + 10) & 32 | *v20;\n                *v20 = v25;\n                if (v24 == 2) {\n                    // 0x40dfd8\n                    *v20 = v25 | 16;\n                    goto lab_0x40df5b;\n                } else {\n                    if (v24 != 4) {\n                        // 0x40dfe8\n                        v16 = v25;\n                        if (v24 == 12) {\n                            goto lab_0x40dfa0;\n                        } else {\n                            // 0x40dfed\n                            v16 = v25;\n                            if ((*(int32_t *)v23 & 0x3ff00) == 0) {\n                                goto lab_0x40df5b;\n                            } else {\n                                goto lab_0x40dfa0;\n                            }\n                        }\n                    } else {\n                        // 0x40df55\n                        *v20 = v25 | 64;\n                        goto lab_0x40df5b;\n                    }\n                }\n            } else {\n                // 0x40df77\n                if ((*(int32_t *)v23 & 0x3ff00) == 0) {\n                    goto lab_0x40df5b;\n                } else {\n                    char v26 = 2 * *(char *)(v22 + 10) & 32 | *v20;\n                    *v20 = v26;\n                    v16 = v26;\n                    goto lab_0x40dfa0;\n                }\n            }\n        }\n    }\n  lab_0x40dfad_2:\n    // 0x40dfad\n    if ((int32_t)function_40b3b0(a2, result2, v4) == 0) {\n        // 0x40dfbf\n        return result2;\n    }\n    // 0x40e01e\n    function_40c460(result2);\n    // 0x40e008\n    *a1 = 12;\n    // 0x40dfbf\n    return 0;\n  lab_0x40df5b:;\n    int64_t v27 = v18 + 8; // 0x40df5b\n    if (v19 == v27) {\n        // break -> 0x40dfad\n        goto lab_0x40dfad_2;\n    }\n    // 0x40df64\n    v17 = v27;\n    goto lab_0x40df64_2;\n  lab_0x40dfa0:;\n    int64_t v28 = v18 + 8; // 0x40dfa0\n    *v20 = v16 | -128;\n    if (v19 == v28) {\n        // break -> 0x40dfad\n        goto lab_0x40dfad_2;\n    }\n    // 0x40df64\n    v17 = v28;\n    goto lab_0x40df64_2;\n}\n"
        },
        {
            "funcName": "function_40e030",
            "funcStartAddr": "40e030",
            "funcEndAddr": "40e0d8",
            "decompiledFuncCode": "int64_t function_40e030(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40e030\n    if (a4 < 1) {\n        // 0x40e0c8\n        return 0;\n    }\n    int64_t v1 = 0; // 0x40e030\n    int64_t result; // 0x40e030\n    while (true) {\n        int64_t v2 = v1;\n        int64_t v3 = 8 * v2; // 0x40e0a9\n        int64_t * v4 = (int64_t *)(v3 + a2); // 0x40e0a9\n        int64_t v5 = *v4; // 0x40e0a9\n        int64_t v6 = *(int64_t *)(v3 + a3); // 0x40e0ae\n        if (v5 != 0) {\n            if (v6 != 0) {\n                // 0x40e05d\n                int64_t v7; // bp-72, 0x40e030\n                int64_t v8 = function_40d9b0(&v7, v5 + 8, v6 + 8, a4); // 0x40e06a\n                int32_t v9 = v8; // 0x40e06f\n                int32_t v10 = v9; // bp-76, 0x40e06f\n                result = v8;\n                if (v9 != 0) {\n                    // break -> 0x40e0c8\n                    break;\n                }\n                // 0x40e077\n                int64_t v11; // 0x40e030\n                *v4 = function_40de40(&v10, a1, &v7, a4, v11, v11);\n                free((int64_t *)v11);\n                uint32_t v12 = v10; // 0x40e098\n                if (v12 != 0) {\n                    // 0x40e0c8\n                    result = v12;\n                    return result;\n                }\n            }\n            int64_t v13 = v2 + 1; // 0x40e0a0\n            v1 = v13;\n            result = 0;\n            if (v13 == a4) {\n                // break -> 0x40e0c8\n                break;\n            }\n        } else {\n            // 0x40e0b8\n            *v4 = v6;\n            int64_t v14 = v2 + 1; // 0x40e0bd\n            v1 = v14;\n            result = 0;\n            if (v14 == a4) {\n                // break -> 0x40e0c8\n                break;\n            }\n        }\n    }\n  lab_0x40e0c8_2:\n    // 0x40e0c8\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e0e0",
            "funcStartAddr": "40e0e0",
            "funcEndAddr": "40e462",
            "decompiledFuncCode": "int64_t function_40e0e0(int64_t a1, int128_t * a2, uint64_t a3, int64_t a4, int32_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 200); // 0x40e0f1\n    if (v1 <= 0) {\n        // 0x40e3e2\n        return 0;\n    }\n    int64_t v2 = (int64_t)a2;\n    int64_t * v3 = (int64_t *)(a1 + 216); // 0x40e104\n    int64_t v4 = *v3; // 0x40e104\n    int64_t v5 = v4 + 8; // 0x40e11c\n    int64_t v6 = 0;\n    uint64_t v7 = v6 + v1; // 0x40e100\n    int64_t v8 = (v7 / 0x8000000000000000 + v7) / 2; // 0x40e115\n    int64_t v9 = v8; // 0x40e121\n    int64_t v10 = v8; // 0x40e121\n    int64_t v11 = v1; // 0x40e121\n    int64_t v12; // 0x40e0e0\n    int64_t v13; // 0x40e0e0\n    uint64_t v14; // 0x40e130\n    int64_t v15; // 0x40e13e\n    if (*(int64_t *)(40 * v8 + v5) >= a3) {\n        v12 = v6;\n        if (v9 <= v6) {\n            // break (via goto) -> 0x40e15b\n            goto lab_0x40e15b;\n        }\n        // 0x40e130\n        v14 = v9 + v6;\n        v15 = (v14 / 0x8000000000000000 + v14) / 2;\n        v10 = v15;\n        v11 = v9;\n        while (*(int64_t *)(40 * v15 + v5) >= a3) {\n            // 0x40e156\n            v13 = v15;\n            v12 = v6;\n            if (v13 <= v6) {\n                // break (via goto) -> 0x40e15b\n                goto lab_0x40e15b;\n            }\n            // 0x40e130\n            v14 = v13 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v15;\n            v11 = v13;\n        }\n    }\n    int64_t v16 = v10 + 1; // 0x40e3d0\n    v12 = v16;\n    while (v16 < v11) {\n        // 0x40e100\n        v6 = v16;\n        v7 = v6 + v11;\n        v8 = (v7 / 0x8000000000000000 + v7) / 2;\n        v9 = v8;\n        v10 = v8;\n        if (*(int64_t *)(40 * v8 + v5) >= a3) {\n            v12 = v6;\n            if (v9 <= v6) {\n                // break (via goto) -> 0x40e15b\n                goto lab_0x40e15b;\n            }\n            // 0x40e130\n            v14 = v9 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v15;\n            v11 = v9;\n            while (*(int64_t *)(40 * v15 + v5) >= a3) {\n                // 0x40e156\n                v13 = v15;\n                v12 = v6;\n                if (v13 <= v6) {\n                    // break (via goto) -> 0x40e15b\n                    goto lab_0x40e15b;\n                }\n                // 0x40e130\n                v14 = v13 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v15;\n                v11 = v13;\n            }\n        }\n        // 0x40e3d0\n        v16 = v10 + 1;\n        v12 = v16;\n    }\n  lab_0x40e15b:\n    // 0x40e15b\n    if (v1 <= v12) {\n        // 0x40e3e2\n        return 0;\n    }\n    int64_t v17 = 40 * v12; // 0x40e16f\n    if (v12 == -1 | *(int64_t *)(v17 + 8 + v4) != a3) {\n        // 0x40e3e2\n        return 0;\n    }\n    int64_t v18 = v2 + 16; // 0x40e196\n    int64_t v19 = *(int64_t *)(a1 + 152); // 0x40e1a5\n    int64_t * v20 = (int64_t *)(a1 + 184);\n    int64_t v21; // bp-88, 0x40e0e0\n    int64_t v22 = &v21;\n    int64_t v23 = v4; // 0x40e1af\n    int64_t * v24; // 0x40e0e0\n    int64_t v25; // 0x40e0e0\n    int64_t v26; // 0x40e0e0\n    int64_t result; // 0x40e0e0\n    int64_t v27; // 0x40e0e0\n    int64_t v28; // 0x40e0e0\n    int64_t v29; // 0x40e0e0\n    int64_t v30; // 0x40e0e0\n    int32_t v31; // bp-92, 0x40e0e0\n    int64_t v32; // 0x40e2b8\n    int64_t v33; // 0x40e1d3\n    int64_t v34; // 0x40e1d7\n    int64_t v35; // 0x40e1e7\n    while (true) {\n        // 0x40e1b3\n        int64_t v36; // 0x40e0e0\n        v29 = v36;\n        v25 = v23 + v17;\n        int64_t v37; // 0x40e2e2\n        while (true) {\n          lab_0x40e298:\n            // 0x40e298\n            v26 = v25;\n            v30 = v29;\n            int64_t v38 = *(int64_t *)v26; // 0x40e298\n            int64_t v39 = *(int64_t *)(v2 + 8); // 0x40e29b\n            v28 = v30;\n            if (function_40c890(v39, v18, v38) == 0) {\n                goto lab_0x40e289;\n            } else {\n                // 0x40e2b4\n                v32 = *(int64_t *)(v26 + 24) + a3;\n                int64_t v40 = v32 - *(int64_t *)(v26 + 16); // 0x40e2be\n                if (v40 != a3) {\n                    // 0x40e1c8\n                    v33 = *(int64_t *)(*(int64_t *)(v19 + 24) + 8 * v38);\n                    v34 = 8 * v40;\n                    int64_t * v41 = (int64_t *)(*v20 + v34);\n                    v35 = *v41;\n                    if (v35 == 0) {\n                        // 0x40e380\n                        v21 = 1;\n                        int64_t * mem = malloc(8); // 0x40e39c\n                        if (mem == NULL) {\n                            // 0x40e422\n                            result = 12;\n                            return result;\n                        }\n                        // 0x40e3ab\n                        v31 = 0;\n                        *mem = v33;\n                        v24 = v41;\n                        v27 = (int64_t)mem;\n                        goto lab_0x40e24e;\n                    } else {\n                        // 0x40e1f8\n                        v28 = v30;\n                        if (function_40c890(*(int64_t *)(v35 + 16), v35 + 24, v33) != 0) {\n                            goto lab_0x40e289;\n                        } else {\n                            // 0x40e20d\n                            v31 = function_40d930(v22, v35 + 8);\n                            int64_t v42 = function_40b280(v22, v33); // 0x40e229\n                            if (v31 != 0) {\n                                goto lab_0x40e410_2;\n                            }\n                            if ((char)v42 != 1) {\n                                goto lab_0x40e410_2;\n                            }\n                            // 0x40e242\n                            v24 = (int64_t *)(*v20 + v34);\n                            v27 = v30;\n                            goto lab_0x40e24e;\n                        }\n                    }\n                } else {\n                    int64_t v43 = *(int64_t *)(v19 + 40); // 0x40e2cb\n                    v37 = *(int64_t *)*(int64_t *)(24 * v38 + 16 + v43);\n                    v28 = v30;\n                    if (function_40c890(v39, v18, v37) == 0) {\n                        // break -> 0x40e2f2\n                        break;\n                    }\n                    goto lab_0x40e289;\n                }\n            }\n        }\n        // 0x40e2f2\n        v21 = 1;\n        int64_t * mem2 = malloc(8); // 0x40e309\n        int32_t v44; // 0x40e0e0\n        if (mem2 == NULL) {\n            // 0x40e446\n            v21 = 0;\n            v44 = 12;\n        } else {\n            // 0x40e31c\n            *mem2 = v37;\n            v44 = 0;\n        }\n        // 0x40e321\n        v31 = v44;\n        int64_t v45 = function_40d200(v19, &v21, a4, a5); // 0x40e336\n        int64_t v46 = function_40cdd0((int64_t *)a2, (int128_t *)&v21); // 0x40e346\n        free(mem2);\n        uint32_t v47 = v31; // 0x40e358\n        if ((v47 || (int32_t)(v46 || v45)) != 0) {\n            // 0x40e436\n            result = v47;\n            if (v47 != 0) {\n                return result;\n            } else {\n                // 0x40e43a\n                result = ((int32_t)v45 != 0 ? v45 : v46) & 0xffffffff;\n                return result;\n            }\n        }\n        // 0x40e36a\n        v36 = (int64_t)mem2;\n        v23 = *v3;\n    }\n  lab_0x40e3e2:\n    // 0x40e3e2\n    return result;\n  lab_0x40e410_2:\n    // 0x40e410\n    free((int64_t *)v30);\n    result = v31;\n    if (v31 != 0) {\n        return result;\n    } else {\n        // 0x40e422\n        result = 12;\n        return result;\n    }\n  lab_0x40e289:\n    // 0x40e289\n    v29 = v28;\n    v25 = v26 + 40;\n    result = 0;\n    if (*(char *)(v26 + 32) == 0) {\n        return result;\n    }\n    goto lab_0x40e298;\n  lab_0x40e24e:;\n    int64_t v48 = v27;\n    *v24 = function_40de40(&v31, v19, &v21, v33, v32, v35);\n    free((int64_t *)v48);\n    v28 = v48;\n    if (*(int64_t *)(*v20 + v34) == 0) {\n        uint32_t v49 = v31; // 0x40e3f8\n        v28 = v48;\n        if (v49 != 0) {\n            // 0x40e3e2\n            result = v49;\n            goto lab_0x40e3e2;\n        }\n    }\n    goto lab_0x40e289;\n}\n"
        },
        {
            "funcName": "function_40e470",
            "funcStartAddr": "40e470",
            "funcEndAddr": "40e5b1",
            "decompiledFuncCode": "int64_t function_40e470(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = *(int64_t *)(a1 + 152); // 0x40e482\n    if (a2 < 1) {\n      lab_0x40e552:\n        // 0x40e552\n        return 0;\n    }\n    int64_t * v2 = (int64_t *)(a1 + 232);\n    int64_t * v3 = (int64_t *)(a1 + 248);\n    int64_t * v4 = (int64_t *)(a1 + 240);\n    int64_t v5 = 0; // 0x40e4a0\n    int64_t v6; // 0x40e470\n    int64_t v7; // 0x40e4b0\n    int64_t v8; // 0x40e4bb\n    uint64_t v9; // 0x40e4c5\n    while (true) {\n        // 0x40e4ad\n        v6 = v5;\n        v7 = *(int64_t *)(8 * v6 + *(int64_t *)a3);\n        v8 = 16 * v7 + *(int64_t *)v1;\n        if (*(char *)(v8 + 8) == 8) {\n            // 0x40e4c5\n            v9 = *(int64_t *)v8;\n            if (v9 <= 63) {\n                // 0x40e4ce\n                if ((*(int64_t *)(v1 + 160) & 1 << v9 % 64) != 0) {\n                    // break -> 0x40e4dc\n                    break;\n                }\n            }\n        }\n        // 0x40e4a0\n        v5 = v6 + 1;\n        if (v5 >= a2) {\n            return 0;\n        }\n    }\n    int64_t v10 = *v2; // 0x40e4dc\n    int64_t v11 = *v3; // 0x40e4e3\n    int64_t v12 = v10; // 0x40e4f1\n    int64_t v13 = v11; // 0x40e4f1\n    int64_t * mem; // 0x40e580\n    if (v10 == *v4) {\n        // 0x40e568\n        mem = realloc((int64_t *)v11, 16 * (int32_t)v10);\n        if (mem == NULL) {\n            // break -> 0x40e552\n            break;\n        }\n        // 0x40e592\n        v13 = (int64_t)mem;\n        *v3 = v13;\n        v12 = *v2;\n        *v4 = 2 * v10;\n    }\n    int64_t * mem2 = calloc(1, 48); // 0x40e50c\n    int64_t v14 = (int64_t)mem2; // 0x40e50c\n    *(int64_t *)(v13 + 8 * v12) = v14;\n    int64_t result = 12; // 0x40e522\n    while (mem2 != NULL) {\n        // 0x40e524\n        *mem2 = a4;\n        int64_t v15 = v6 + 1; // 0x40e530\n        *(int64_t *)(v14 + 8) = v7;\n        *v2 = v12 + 1;\n        result = 0;\n        if (v15 >= 48) {\n            // break -> 0x40e552\n            break;\n        }\n        v5 = v15;\n        while (true) {\n            // 0x40e4ad\n            v6 = v5;\n            v7 = *(int64_t *)(8 * v6 + *(int64_t *)a3);\n            v8 = 16 * v7 + *(int64_t *)v1;\n            if (*(char *)(v8 + 8) == 8) {\n                // 0x40e4c5\n                v9 = *(int64_t *)v8;\n                if (v9 <= 63) {\n                    // 0x40e4ce\n                    if ((*(int64_t *)(v1 + 160) & 1 << v9 % 64) != 0) {\n                        // break -> 0x40e4dc\n                        break;\n                    }\n                }\n            }\n            // 0x40e4a0\n            v5 = v6 + 1;\n            if (v5 >= 48) {\n                return 0;\n            }\n        }\n        // 0x40e4dc\n        v10 = *v2;\n        v11 = *v3;\n        v12 = v10;\n        v13 = v11;\n        if (v10 == *v4) {\n            // 0x40e568\n            mem = realloc((int64_t *)v11, 16 * (int32_t)v10);\n            result = 12;\n            if (mem == NULL) {\n                // break -> 0x40e552\n                break;\n            }\n            // 0x40e592\n            v13 = (int64_t)mem;\n            *v3 = v13;\n            v12 = *v2;\n            *v4 = 2 * v10;\n        }\n        // 0x40e4f3\n        mem2 = calloc(1, 48);\n        v14 = (int64_t)mem2;\n        *(int64_t *)(v13 + 8 * v12) = v14;\n        result = 12;\n    }\n    // 0x40e552\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e5c0",
            "funcStartAddr": "40e5c0",
            "funcEndAddr": "40e6ae",
            "decompiledFuncCode": "int64_t function_40e5c0(int64_t a1, int64_t a2, int32_t a3) {\n    if (a2 < 0) {\n        // 0x40e670\n        return (int64_t)*(int32_t *)(a1 + 112);\n    }\n    // 0x40e5d2\n    if (*(int64_t *)(a1 + 88) == a2) {\n        // 0x40e616\n        return a3 & 2 ^ 10;\n    }\n    // 0x40e5dc\n    if (*(int32_t *)(a1 + 144) < 2) {\n        unsigned char v1 = *(char *)(*(int64_t *)(a1 + 8) + a2); // 0x40e62b\n        int64_t v2 = *(int64_t *)(*(int64_t *)(a1 + 128) + (int64_t)(8 * v1 / 64)); // 0x40e636\n        if ((1 << (int64_t)(v1 % 64) & v2) != 0) {\n            // 0x40e616\n            return 1;\n        }\n        // 0x40e64a\n        if (v1 != 10) {\n            // 0x40e616\n            return 0;\n        }\n        // 0x40e651\n        return 2 * (int64_t)(*(char *)(a1 + 141) != 0);\n    }\n    int64_t v3 = a2;\n    int32_t wc = *(int32_t *)(4 * v3 + *(int64_t *)(a1 + 16)); // 0x40e5fa\n    while (wc == -1) {\n        // 0x40e5f0\n        if (v3 == 0) {\n            // 0x40e670\n            return (int64_t)*(int32_t *)(a1 + 112);\n        }\n        v3--;\n        wc = *(int32_t *)(4 * v3 + *(int64_t *)(a1 + 16));\n    }\n    // 0x40e602\n    if (*(char *)(a1 + 142) != 0) {\n        // 0x40e690\n        if (wc != 95 != (iswalnum(wc) == 0)) {\n            // 0x40e616\n            return 1;\n        }\n    }\n    // 0x40e60f\n    if (wc != 10) {\n        // 0x40e616\n        return 0;\n    }\n    // 0x40e651\n    return 2 * (int64_t)(*(char *)(a1 + 141) != 0);\n}\n"
        },
        {
            "funcName": "function_40e6b0",
            "funcStartAddr": "40e6b0",
            "funcEndAddr": "40e7db",
            "decompiledFuncCode": "int64_t function_40e6b0(int64_t a1, int64_t a2, int64_t a3) {\n    unsigned char v1 = *(char *)(*(int64_t *)(a1 + 8) + a3); // 0x40e6b4\n    int64_t v2 = a2 + 8;\n    unsigned char v3 = *(char *)v2; // 0x40e6b8\n    if (v3 == 3) {\n        uint64_t v4 = (int64_t)v1; // 0x40e6b4\n        if ((*(int64_t *)((v4 / 8 & 24) + a2) & 1 << v4 % 64) == 0) {\n            // 0x40e75f\n            return 0;\n        }\n    } else {\n        if (v3 < 4) {\n            // 0x40e768\n            if (v1 == (char)a2 != (v3 == 1)) {\n                // 0x40e75f\n                return 0;\n            }\n        } else {\n            if (v3 != 5) {\n                // 0x40e6ce\n                if (v1 < 0 || v3 != 7) {\n                    // 0x40e75f\n                    return 0;\n                }\n            }\n            if (v1 == 10) {\n                // 0x40e7c0\n                if ((*(char *)(*(int64_t *)(a1 + 152) + 216) & 64) == 0) {\n                    // 0x40e75f\n                    return 0;\n                }\n            } else {\n                if (v1 == 0) {\n                    // 0x40e6f0\n                    if (*(char *)(*(int64_t *)(a1 + 152) + 216) <= -1) {\n                        // 0x40e75f\n                        return 0;\n                    }\n                }\n            }\n        }\n    }\n    uint32_t v5 = *(int32_t *)v2; // 0x40e703\n    if ((v5 & 0x3ff00) == 0) {\n        // 0x40e75f\n        return 1;\n    }\n    int64_t v6 = v5; // 0x40e703\n    uint64_t v7 = function_40e5c0(a1, a3, *(int32_t *)(a1 + 160)); // 0x40e71f\n    if ((v6 & 1024) != 0) {\n        // 0x40e7b0\n        if ((v6 & 2048) == 0 != v7 % 2 != 0) {\n            // 0x40e75f\n            return 0;\n        }\n    } else {\n        if ((v6 & 2048) != 0) {\n            // 0x40e737\n            if (v7 % 2 != 0) {\n                // 0x40e75f\n                return 0;\n            }\n        }\n    }\n    int64_t result = 0; // 0x40e742\n    if ((v6 & 0x2000) != 0 != ((v7 & 2) == 0)) {\n        // 0x40e74b\n        result = (char)(v5 / 256) <= -1 ? v7 / 8 % 2 : 1;\n    }\n    // 0x40e75f\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e7e0",
            "funcStartAddr": "40e7e0",
            "funcEndAddr": "40e8a8",
            "decompiledFuncCode": "int64_t function_40e7e0(int64_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = (int64_t)a1;\n    uint64_t v2 = function_40e5c0(v1, a4, *(int32_t *)(v1 + 160)); // 0x40e7f6\n    if (a2 < 1) {\n        // 0x40e87c\n        return 0;\n    }\n    int64_t v3 = *(int64_t *)(v1 + 152); // 0x40e804\n    int64_t v4 = 0; // 0x40e826\n    int64_t result; // 0x40e7e0\n    uint32_t v5; // 0x40e83e\n    uint32_t v6; // 0x40e841\n    int64_t v7; // 0x40e830\n    while (true) {\n      lab_0x40e830:\n        // 0x40e830\n        v7 = *(int64_t *)(8 * v4 + v3);\n        int64_t v8 = *(int64_t *)v3 + 8 + 16 * v7; // 0x40e83e\n        if (*(char *)v8 != 2) {\n            goto lab_0x40e898;\n        } else {\n            // 0x40e851\n            v5 = *(int32_t *)v8;\n            result = v7;\n            if ((v5 & 0x3ff00) == 0) {\n                // break -> 0x40e87c\n                break;\n            }\n            // 0x40e856\n            v6 = v5 / 256;\n            int64_t v9 = v6; // 0x40e841\n            if ((v9 & 4) == 0) {\n                if (v2 % 2 == 0 || (v9 & 8) == 0) {\n                    goto lab_0x40e865;\n                } else {\n                    goto lab_0x40e898;\n                }\n            } else {\n                if (v2 % 2 == 0) {\n                    goto lab_0x40e898;\n                } else {\n                    if ((v9 & 8) != 0) {\n                        goto lab_0x40e898;\n                    } else {\n                        goto lab_0x40e865;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40e87c_2:\n    // 0x40e87c\n    return result;\n  lab_0x40e898:\n    // 0x40e898\n    v4++;\n    result = 0;\n    if (v4 == a2) {\n        return result;\n    }\n    goto lab_0x40e830;\n  lab_0x40e865:\n    if ((v2 & 2) == 0 != (v5 & 0x2000) != 0) {\n        // 0x40e870\n        result = v7;\n        if ((v2 & 8) == 0 != (char)v6 < 0) {\n            // break -> 0x40e87c\n            goto lab_0x40e87c_2;\n        }\n    }\n    goto lab_0x40e898;\n}\n"
        },
        {
            "funcName": "function_40e8b0",
            "funcStartAddr": "40e8b0",
            "funcEndAddr": "40f097",
            "decompiledFuncCode": "int64_t function_40e8b0(int64_t * a1, int64_t a2, int32_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(v1 + 40); // 0x40e8ca\n    int64_t v3 = *v2; // 0x40e8ca\n    int64_t v4 = a2 - v3; // 0x40e8d4\n    int64_t * v5; // 0x40e8b0\n    char * v6; // 0x40e8b0\n    int64_t * v7; // 0x40e8b0\n    int32_t * v8; // 0x40e8b0\n    int64_t * v9; // 0x40e8b0\n    int64_t * v10; // 0x40e8b0\n    int64_t v11; // 0x40e8b0\n    if (v3 > a2) {\n        int32_t * v12 = (int32_t *)(v1 + 144);\n        if (*v12 >= 2) {\n            // 0x40e8df\n            *(int64_t *)(v1 + 32) = 0;\n        }\n        int64_t * v13 = (int64_t *)(v1 + 48);\n        *v13 = 0;\n        *v2 = 0;\n        int64_t * v14 = (int64_t *)(v1 + 88);\n        *v14 = *(int64_t *)(v1 + 80);\n        int64_t * v15 = (int64_t *)(v1 + 56);\n        *v15 = 0;\n        int64_t * v16 = (int64_t *)(v1 + 104);\n        *v16 = *(int64_t *)(v1 + 96);\n        char * v17 = (char *)(v1 + 140);\n        *v17 = 0;\n        *(int32_t *)(v1 + 112) = 2 * a3 & 2 ^ 6;\n        v4 = a2;\n        if (*(char *)(v1 + 139) == 0) {\n            // 0x40ea00\n            *(int64_t *)(v1 + 8) = v1;\n            v7 = v13;\n            v6 = v17;\n            v5 = v15;\n            v11 = a2;\n            v10 = v16;\n            v9 = v14;\n            v8 = v12;\n            if (a2 != 0) {\n                goto lab_0x40e943;\n            } else {\n                goto lab_0x40ea10;\n            }\n        } else {\n            goto lab_0x40e93a;\n        }\n    } else {\n        goto lab_0x40e93a;\n    }\n  lab_0x40ef38:\n    // 0x40ef38\n    *v7 = 0;\n    int64_t v18; // 0x40ed37\n    int64_t v19 = v18; // 0x40ef42\n    int64_t v20; // 0x40ed3a\n    int64_t v21 = v20; // 0x40ef42\n    int64_t v22 = 0; // 0x40ef42\n    int64_t v23 = v1; // 0x40ef42\n    goto lab_0x40eddf;\n  lab_0x40eb31:;\n    // 0x40eb31\n    int64_t v41; // 0x40e8b0\n    int64_t v38; // 0x40e8b0\n    int64_t v42 = v41 + v38; // 0x40eb31\n    int64_t v43; // 0x40e8b0\n    int64_t v44; // 0x40e8b0\n    int64_t v39; // 0x40e8b0\n    int64_t v45; // 0x40e8b0\n    int64_t v46; // 0x40e8b0\n    int32_t v47; // bp-64, 0x40e8b0\n    if (v42 < a2) {\n        int64_t v48 = &v47; // 0x40eb4c\n        int64_t * v49 = (int64_t *)(v1 + 32); // 0x40eb64\n        int64_t v50 = *(int64_t *)(v1 + 80) - v42; // 0x40eb6d\n        int64_t v51 = function_40ab50((int64_t *)&v47, v42 + v39, v50); // 0x40eb80\n        int64_t v52 = v51; // 0x40eb96\n        int64_t v53 = v47; // 0x40eb96\n        int64_t v54; // 0x40e8b0\n        if (v51 >= 0xfffffffffffffffe) {\n            // 0x40efc5\n            v54 = 0;\n            if (v50 != 0 && v51 != 0) {\n                // 0x40efcf\n                v54 = (int64_t)*(char *)(v42 + v48);\n            }\n            // 0x40efd7\n            v52 = 1;\n            v53 = v54;\n        }\n        int64_t v55 = v52 + v42; // 0x40eb9c\n        int64_t v56 = v48; // 0x40eba2\n        while (v55 < a2) {\n            int64_t v57 = v55;\n            v50 = *(int64_t *)(v1 + 80) - v57;\n            v51 = function_40ab50((int64_t *)&v47, v57 + v56, v50);\n            v52 = v51;\n            v53 = v47;\n            if (v51 >= 0xfffffffffffffffe) {\n                // 0x40efc5\n                v54 = 0;\n                if (v50 != 0 && v51 != 0) {\n                    // 0x40efcf\n                    v54 = (int64_t)*(char *)(v57 + v48);\n                }\n                // 0x40efd7\n                v52 = 1;\n                v53 = v54;\n            }\n            // 0x40eb9c\n            v55 = v52 + v57;\n            v56 = v48;\n        }\n        int64_t v58 = v55 - a2; // 0x40eba4\n        *v7 = v58;\n        v46 = v53;\n        v45 = v48;\n        v43 = v58;\n        v44 = v58;\n        if ((int32_t)v53 == -1) {\n            goto lab_0x40ef51;\n        } else {\n            goto lab_0x40ebb7;\n        }\n    } else {\n        int64_t v59 = v42 - a2; // 0x40ef47\n        *v7 = v59;\n        v44 = v59;\n        goto lab_0x40ef51;\n    }\n  lab_0x40e93a:\n    // 0x40e93a\n    if (v4 == 0) {\n        // 0x40e93a\n        v10 = (int64_t *)(v1 + 104);\n        v9 = (int64_t *)(v1 + 88);\n        v8 = (int32_t *)(v1 + 144);\n        goto lab_0x40ea10;\n    } else {\n        // 0x40e93a\n        v7 = (int64_t *)(v1 + 48);\n        v6 = (char *)(v1 + 140);\n        v5 = (int64_t *)(v1 + 56);\n        v11 = v4;\n        goto lab_0x40e943;\n    }\n  lab_0x40e943:;\n    int64_t v60 = v11;\n    int64_t * v24 = v5;\n    int64_t v61 = *v24; // 0x40e943\n    char v62 = *v6; // 0x40e947\n    int64_t v63 = *v7; // 0x40e94e\n    char * v64; // 0x40e8b0\n    int64_t v30; // 0x40e8b0\n    int64_t v65; // 0x40e8b0\n    int64_t v31; // 0x40e8b0\n    int64_t v66; // 0x40e8b0\n    int64_t v33; // 0x40e8b0\n    int64_t v67; // 0x40e8b0\n    char v68; // 0x40e8b0\n    int32_t v32; // 0x40e8b0\n    int64_t v40; // 0x40ee59\n    int64_t * v69; // 0x40ebf8\n    int64_t v70; // 0x40ebf8\n    int64_t v71; // 0x40ec25\n    uint64_t v72; // 0x40ec28\n    if (v61 > v60) {\n        if (v62 != 0) {\n            // 0x40ebf8\n            v69 = (int64_t *)(v1 + 24);\n            v70 = *v69;\n            int64_t v73 = 0; // 0x40ec01\n            uint64_t v74 = v73 + v63; // 0x40ec17\n            v71 = (v74 / 0x8000000000000000 + v74) / 2;\n            v72 = *(int64_t *)(8 * v71 + v70);\n            int64_t v75 = v71; // 0x40ec33\n            int64_t v76 = v73; // 0x40ec33\n            if (v72 <= v60) {\n                if (v72 >= v60) {\n                    // 0x40ef20\n                    goto lab_0x40ec75;\n                }\n                // 0x40ec0e\n                v75 = v63;\n                v76 = v71 + 1;\n            }\n            // 0x40ec12\n            v73 = v76;\n            int64_t v77 = v75;\n            while (v73 < v77) {\n                int64_t v78 = v77;\n                v74 = v73 + v78;\n                v71 = (v74 / 0x8000000000000000 + v74) / 2;\n                v72 = *(int64_t *)(8 * v71 + v70);\n                v75 = v71;\n                v76 = v73;\n                if (v72 <= v60) {\n                    if (v72 >= v60) {\n                        // 0x40ef20\n                        goto lab_0x40ec75;\n                    }\n                    // 0x40ec0e\n                    v75 = v78;\n                    v76 = v71 + 1;\n                }\n                // 0x40ec12\n                v73 = v76;\n                v77 = v75;\n            }\n            // 0x40ec68\n            goto lab_0x40ec75;\n        } else {\n            // 0x40e963\n            *(int32_t *)(v1 + 112) = (int32_t)function_40e5c0(v1, v60 - 1, a3);\n            if (*(int32_t *)(v1 + 144) > 1) {\n                int64_t v79 = *(int64_t *)(v1 + 16); // 0x40ea20\n                int64_t v80; // 0x40e96d\n                memmove((int64_t *)v79, (int64_t *)(v79 + 4 * v60), 4 * (int32_t)v80);\n            }\n            int64_t v81 = v63 - v60;\n            char * v82 = (char *)(v1 + 139); // 0x40e985\n            char v83 = *v82; // 0x40e985\n            char v84 = v83; // 0x40e98e\n            int64_t v85 = v1; // 0x40e98e\n            int64_t v86 = v81; // 0x40e98e\n            if (v83 != 0) {\n                // 0x40ec40\n                v85 = *(int64_t *)(v1 + 8);\n                memmove((int64_t *)v85, (int64_t *)(v85 + v60), (int32_t)v81);\n                v84 = *v82;\n                v86 = *v7 - v60;\n            }\n            // 0x40e994\n            *v24 = *v24 - v60;\n            *v7 = v86;\n            v68 = v84;\n            v66 = v85;\n            goto lab_0x40e99c;\n        }\n    } else {\n        if (v62 != 0) {\n            // 0x40ef9d\n            *v6 = 0;\n            int64_t v87 = v60 - a2;\n            *(int64_t *)(v1 + 88) = *(int64_t *)(v1 + 80) + v87;\n            *(int64_t *)(v1 + 104) = *(int64_t *)(v1 + 96) + v87;\n        }\n        int32_t v88 = *(int32_t *)(v1 + 144); // 0x40eb08\n        int64_t v89 = *v2; // 0x40eb0f\n        *v7 = 0;\n        if (v88 < 2) {\n            int64_t v90 = (int64_t)*(char *)(v60 - 1 + v1 + v89); // 0x40ea5e\n            int64_t v91 = *(int64_t *)(v1 + 120); // 0x40ea64\n            *v24 = 0;\n            int64_t v92 = v90; // 0x40ea73\n            if (v91 != 0) {\n                // 0x40ea75\n                v92 = (int64_t)*(char *)(v91 + v90);\n            }\n            int64_t v93 = *(int64_t *)((v92 / 8 & 24) + *(int64_t *)(v1 + 128)); // 0x40ea87\n            int32_t v94 = 1; // 0x40ea95\n            if ((v93 & 1 << v92 % 64) == 0) {\n                // 0x40ea97\n                v94 = 0;\n                if (v92 == 10) {\n                    // 0x40ea9e\n                    v94 = 2 * (int32_t)(*(char *)(v1 + 141) != 0);\n                }\n            }\n            int64_t * v95 = (int64_t *)(v1 + 88); // 0x40eab0\n            int64_t * v96 = (int64_t *)(v1 + 104); // 0x40eab4\n            *(int32_t *)(v1 + 112) = v94;\n            int64_t v97 = *v95 - v60; // 0x40eabb\n            int64_t v98 = *v96 - v60; // 0x40eabe\n            char * v99 = (char *)(v1 + 139);\n            v30 = v97;\n            v31 = v98;\n            v32 = v88;\n            v33 = v1;\n            if (*v99 == 0) {\n                goto lab_0x40e9b4;\n            } else {\n                // 0x40eace\n                *v2 = a2;\n                *v95 = v97;\n                *v96 = v98;\n                v64 = v99;\n                v65 = v97;\n                v67 = v1;\n                goto lab_0x40eae0;\n            }\n        } else {\n            // 0x40eb24\n            v38 = v61;\n            v39 = v1;\n            v41 = v89;\n            if (*(char *)(v1 + 137) != 0) {\n                int64_t v100 = v89 + v1; // 0x40ee01\n                uint64_t v101 = v60 - (int64_t)v88 + v100; // 0x40ee05\n                int64_t v102 = v60 - 1 + v100; // 0x40ee08\n                uint64_t v103 = v101 > v1 ? v101 : v1; // 0x40ee10\n                v38 = v61;\n                v39 = v1;\n                v41 = v89;\n                if (v103 > v102) {\n                    goto lab_0x40eb31;\n                } else {\n                    int64_t v104 = v102;\n                    while ((*(char *)v104 & -64) == -128) {\n                        int64_t v105 = v104 - 1; // 0x40ee20\n                        v38 = v61;\n                        v39 = v1;\n                        v41 = v89;\n                        if (v103 > v105) {\n                            goto lab_0x40eb31;\n                        }\n                        v104 = v105;\n                    }\n                    int64_t v106 = *(int64_t *)(v1 + 120); // 0x40ee3e\n                    int64_t v107 = *(int64_t *)(v1 + 88) + v100 - v104; // 0x40ee48\n                    int64_t v108 = v104; // 0x40ee4e\n                    if (v106 != 0) {\n                        int64_t v109 = v107 - 6; // 0x40f062\n                        int32_t v110 = v109 == 0 | v109 < 0 != (5 - v107 & v107) < 0 ? (int32_t)v107 - 1 : 5; // 0x40f06f\n                        if (v110 >= 0) {\n                            int64_t v111 = v110; // 0x40f085\n                            char v112 = *(char *)(v106 + (int64_t)*(char *)(v111 + v104)); // 0x40f07c\n                            int64_t v113; // bp-120, 0x40e8b0\n                            *(char *)((int64_t)&v113 + 50 + v111) = v112;\n                            v111--;\n                            while ((int32_t)v111 >= 0) {\n                                // 0x40f077\n                                v112 = *(char *)(v106 + (int64_t)*(char *)(v111 + v104));\n                                *(char *)((int64_t)&v113 + 50 + v111) = v112;\n                                v111--;\n                            }\n                        }\n                        // 0x40f08d\n                        int64_t v114; // bp-70, 0x40e8b0\n                        v108 = &v114;\n                    }\n                    // 0x40ee54\n                    int32_t v115; // bp-76, 0x40e8b0\n                    v40 = &v115;\n                    v47 = 0;\n                    uint64_t v116 = function_40ab50((int64_t *)&v115, v108, v107); // 0x40ee6f\n                    uint64_t v117 = v100 + v60 - v104; // 0x40ee7e\n                    if (v116 >= v117 == v116 < 0xfffffffffffffffe) {\n                        int64_t v118 = v116 - v117; // 0x40ef68\n                        *(int64_t *)(v1 + 32) = 0;\n                        *v7 = v118;\n                        v46 = v115;\n                        v45 = v40;\n                        v43 = v118;\n                        if (v115 != -1) {\n                            goto lab_0x40ebb7;\n                        } else {\n                            goto lab_0x40ee90;\n                        }\n                    } else {\n                        goto lab_0x40ee90;\n                    }\n                }\n            } else {\n                goto lab_0x40eb31;\n            }\n        }\n    }\n  lab_0x40ea10:;\n    int64_t v34 = *v9; // 0x40ea1e\n    int64_t v35 = *v10; // 0x40ea1e\n    int32_t v36 = *v8; // 0x40ea1e\n    int64_t v37 = v1; // 0x40ea1e\n    goto lab_0x40e9b8;\n  lab_0x40e9b8:\n    // 0x40e9b8\n    *v2 = a2;\n    *(int64_t *)(v1 + 88) = v34;\n    *(int64_t *)(v1 + 104) = v35;\n    if (v36 >= 2) {\n        // 0x40e9cd\n        if (*(char *)(v1 + 136) != 0) {\n            int64_t result = function_40b710(v1); // 0x40ea48\n            if ((int32_t)result != 0) {\n                // 0x40e9e8\n                return result;\n            }\n        } else {\n            // 0x40e9d9\n            function_40b560(v1);\n        }\n        // 0x40e9de\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40e9e8\n        return 0;\n    }\n    // 0x40e9b8\n    v64 = (char *)(v1 + 139);\n    v65 = v34;\n    v67 = v37;\n    goto lab_0x40eae0;\n  lab_0x40eae0:;\n    int64_t v119 = v65;\n    if (*v64 == 0) {\n        // 0x40eaed\n        *(int64_t *)(v1 + 48) = v119;\n        // 0x40e9de\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40e9e8\n        return 0;\n    }\n    // 0x40eeb0\n    if (*(char *)(v1 + 136) != 0) {\n        // 0x40ef90\n        function_40b4e0(v1);\n        // 0x40e9de\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40e9e8\n        return 0;\n    }\n    int64_t * v120 = (int64_t *)(v1 + 120); // 0x40eebd\n    int64_t v121 = *v120; // 0x40eebd\n    if (v121 == 0) {\n        // 0x40e9de\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40e9e8\n        return 0;\n    }\n    int64_t v122 = *(int64_t *)(v1 + 64); // 0x40eeca\n    int64_t v123 = v122 - v119; // 0x40eeca\n    int64_t * v124 = (int64_t *)(v1 + 48); // 0x40eece\n    int64_t v125 = *v124; // 0x40eece\n    int64_t v126 = v123 == 0 | v123 < 0 != ((v123 ^ v122) & (v122 ^ v119)) < 0 ? v122 : v119; // 0x40eed2\n    int64_t v127 = v125; // 0x40eeda\n    if (v126 > v125) {\n        unsigned char v128 = *(char *)(v67 + a2 + v125); // 0x40eef6\n        int64_t * v129 = (int64_t *)(v1 + 8); // 0x40eeff\n        *(char *)(*v129 + v125) = *(char *)(v121 + (int64_t)v128);\n        int64_t v130 = v125 + 1; // 0x40ef07\n        v127 = v126;\n        if (v126 != v130) {\n            unsigned char v131 = *(char *)(v130 + v67 + *v2); // 0x40eef6\n            *(char *)(*v129 + v130) = *(char *)(*v120 + (int64_t)v131);\n            int64_t v132 = v130 + 1; // 0x40ef07\n            int64_t v133 = v132; // 0x40ef0e\n            v127 = v126;\n            while (v126 != v132) {\n                // 0x40eee8\n                v131 = *(char *)(v133 + v67 + *v2);\n                *(char *)(*v129 + v133) = *(char *)(*v120 + (int64_t)v131);\n                v132 = v133 + 1;\n                v133 = v132;\n                v127 = v126;\n            }\n        }\n    }\n    // 0x40ef10\n    *v124 = v127;\n    *(int64_t *)(v1 + 56) = v127;\n    // 0x40e9de\n    *(int64_t *)(v1 + 72) = 0;\n    // 0x40e9e8\n    return 0;\n  lab_0x40ec75:;\n    int64_t v134 = v71 + (int64_t)(v72 < v60);\n    int64_t v135 = v71 + (int64_t)(v72 >= v60);\n    *(int32_t *)(v1 + 112) = (int32_t)function_40e5c0(v1, v135, a3);\n    int64_t v25; // 0x40e8b0\n    int64_t v26; // 0x40e8b0\n    int64_t v28; // 0x40e8b0\n    char v27; // 0x40e8b0\n    if (v63 > v60 == v60 == v134) {\n        int64_t v136 = 8 * v60;\n        if (*(int64_t *)(v70 + v136) != v60) {\n            goto lab_0x40ed28;\n        } else {\n            int64_t v137 = *(int64_t *)(v1 + 16); // 0x40eca0\n            memmove((int64_t *)v137, (int64_t *)(v137 + 4 * v60), 4 * (int32_t)(v63 - v60));\n            int64_t v138 = *(int64_t *)(v1 + 8); // 0x40ecbb\n            int64_t v139 = *v7; // 0x40ecbf\n            memmove((int64_t *)v138, (int64_t *)(v138 + v60), (int32_t)(v139 - v60));\n            *v24 = *v24 - v60;\n            uint64_t v140 = *v7 - v60; // 0x40ecd7\n            *v7 = v140;\n            if (v140 >= 1) {\n                for (int64_t i = 0; i < *v7; i++) {\n                    int64_t v141 = 8 * i + *v69;\n                    *(int64_t *)v141 = *(int64_t *)(v141 + v136) - v60;\n                }\n            }\n            // 0x40ed05\n            v25 = *(int64_t *)(v1 + 88) - v60;\n            v26 = *(int64_t *)(v1 + 104) - v60;\n            v27 = *(char *)(v1 + 139);\n            v28 = v138;\n            goto lab_0x40e9b0;\n        }\n    } else {\n        goto lab_0x40ed28;\n    }\n  lab_0x40e99c:\n    // 0x40e99c\n    v25 = *(int64_t *)(v1 + 88) - v60;\n    v26 = *(int64_t *)(v1 + 104) - v60;\n    v27 = v68;\n    v28 = v66;\n    goto lab_0x40e9b0;\n  lab_0x40e9b4:;\n    int64_t * v142 = (int64_t *)(v1 + 8); // 0x40e9b4\n    *v142 = *v142 + v60;\n    v34 = v30;\n    v35 = v31;\n    v36 = v32;\n    v37 = v33;\n    goto lab_0x40e9b8;\n  lab_0x40ed28:\n    // 0x40ed28\n    *v6 = 0;\n    v18 = *(int64_t *)(v1 + 80) - a2;\n    v20 = *(int64_t *)(v1 + 96) - a2;\n    int64_t * v143 = (int64_t *)(v1 + 88); // 0x40ed41\n    *v143 = v18 + v60;\n    int64_t * v144 = (int64_t *)(v1 + 104); // 0x40ed49\n    *v144 = v20 + v60;\n    int64_t v145 = v134; // 0x40ed50\n    if (v134 >= 0 == (v134 != 0)) {\n        int64_t v146 = v134; // 0x40ed58\n        v145 = v146;\n        while (*(int64_t *)(v70 - 8 + 8 * v146) == v60) {\n            // 0x40ed58\n            v146--;\n            if (v146 == 0) {\n                // break -> 0x40ed65\n                break;\n            }\n            v145 = v146;\n        }\n    }\n    // 0x40ed65\n    int64_t v147; // 0x40e8b0\n    if (v145 < v63) {\n        int64_t v148 = v145; // 0x40ed72\n        v147 = v148;\n        while (*(int32_t *)(4 * v148 + *(int64_t *)(v1 + 16)) == -1) {\n            // 0x40ed78\n            v148++;\n            if (v148 == v63) {\n                goto lab_0x40ef38;\n            }\n            v147 = v148;\n        }\n        goto lab_0x40ed8c;\n    } else {\n        // 0x40ef2c\n        v147 = v145;\n        if (v145 != v63) {\n            goto lab_0x40ed8c;\n        } else {\n            goto lab_0x40ef38;\n        }\n    }\n  lab_0x40e9b0:;\n    int32_t v29 = *(int32_t *)(v1 + 144);\n    v30 = v25;\n    v31 = v26;\n    v32 = v29;\n    v33 = v28;\n    v34 = v25;\n    v35 = v26;\n    v36 = v29;\n    v37 = v28;\n    if (v27 != 0) {\n        goto lab_0x40e9b8;\n    } else {\n        goto lab_0x40e9b4;\n    }\n  lab_0x40ee90:\n    // 0x40ee90\n    v38 = *v24;\n    v39 = v40;\n    v41 = *v2;\n    goto lab_0x40eb31;\n  lab_0x40ef51:\n    // 0x40ef51\n    *(int32_t *)(v1 + 112) = (int32_t)function_40e5c0(v1, v63 - 1, a3);\n    int64_t v149 = v1; // 0x40ef63\n    int64_t v150 = v44; // 0x40ef63\n    goto lab_0x40ebdc;\n  lab_0x40ebb7:;\n    int64_t v164 = v46; // 0x40ebbe\n    int64_t v163 = v45; // 0x40ebbe\n    int32_t v161; // 0x40e8b0\n    int64_t v162; // 0x40e8b0\n    if (*(char *)(v1 + 142) != 0) {\n        int64_t v165 = v46 & 0xffffffff; // 0x40f034\n        int32_t wc = v46; // 0x40f036\n        v164 = v165;\n        v163 = v165;\n        v161 = 1;\n        v162 = v165;\n        if (wc != 95 == iswalnum(wc) == 0) {\n            goto lab_0x40ebc4;\n        } else {\n            goto lab_0x40ebd9;\n        }\n    } else {\n        goto lab_0x40ebc4;\n    }\n  lab_0x40ed8c:;\n    uint64_t v166 = *(int64_t *)(8 * v147 + v70) - v60; // 0x40ed91\n    *v7 = v166;\n    v19 = v18;\n    v21 = v20;\n    v22 = 0;\n    v23 = v1;\n    if (v166 != 0) {\n        if (v166 >= 1) {\n            int64_t v167 = *(int64_t *)(v1 + 16); // 0x40ed9f\n            int64_t v168 = v167; // 0x40eda7\n            *(int32_t *)v168 = -1;\n            v168 += 4;\n            while (v167 + 4 * v166 != v168) {\n                // 0x40edb0\n                *(int32_t *)v168 = -1;\n                v168 += 4;\n            }\n        }\n        int64_t v169 = *(int64_t *)(v1 + 8); // 0x40edbf\n        memset((int64_t *)v169, 255, (int32_t)v166);\n        v19 = *v143 - v60;\n        v21 = *v144 - v60;\n        v22 = *v7;\n        v23 = v169;\n    }\n    goto lab_0x40eddf;\n  lab_0x40ebdc:;\n    // 0x40ebdc\n    char * v151; // 0x40e8b0\n    int64_t v152; // 0x40e8b0\n    int64_t v153; // 0x40e8b0\n    int64_t v154; // 0x40e8b0\n    int64_t v155; // 0x40e8b0\n    char v156; // 0x40e8b0\n    if (v150 != 0) {\n        if (v150 >= 1) {\n            int64_t v157 = *(int64_t *)(v1 + 16); // 0x40efec\n            int64_t v158 = v157; // 0x40eff4\n            *(int32_t *)v158 = -1;\n            v158 += 4;\n            while (v157 + 4 * v150 != v158) {\n                // 0x40eff8\n                *(int32_t *)v158 = -1;\n                v158 += 4;\n            }\n        }\n        char * v159 = (char *)(v1 + 139);\n        v156 = 0;\n        v155 = v149;\n        v153 = v150;\n        if (*v159 == 0) {\n            goto lab_0x40ebec;\n        } else {\n            int64_t v160 = *(int64_t *)(v1 + 8); // 0x40f016\n            memset((int64_t *)v160, 255, (int32_t)v150);\n            v151 = v159;\n            v154 = v160;\n            v152 = *v7;\n            goto lab_0x40ebe5;\n        }\n    } else {\n        // 0x40ebdc\n        v151 = (char *)(v1 + 139);\n        v154 = v149;\n        v152 = v150;\n        goto lab_0x40ebe5;\n    }\n  lab_0x40ebc4:\n    // 0x40ebc4\n    v161 = 0;\n    v162 = v163;\n    if ((int32_t)v164 == 10) {\n        // 0x40ebcb\n        v161 = 2 * (int32_t)(*(char *)(v1 + 141) != 0);\n        v162 = v163;\n    }\n    goto lab_0x40ebd9;\n  lab_0x40eddf:\n    // 0x40eddf\n    *v24 = v22;\n    v25 = v19;\n    v26 = v21;\n    v27 = *(char *)(v1 + 139);\n    v28 = v23;\n    goto lab_0x40e9b0;\n  lab_0x40ebd9:\n    // 0x40ebd9\n    *(int32_t *)(v1 + 112) = v161;\n    v149 = v162;\n    v150 = v43;\n    goto lab_0x40ebdc;\n  lab_0x40ebec:\n    // 0x40ebec\n    *v24 = v153;\n    v68 = v156;\n    v66 = v155;\n    goto lab_0x40e99c;\n  lab_0x40ebe5:\n    // 0x40ebe5\n    v156 = *v151;\n    v155 = v154;\n    v153 = v152;\n    goto lab_0x40ebec;\n}\n"
        },
        {
            "funcName": "function_40f0a0",
            "funcStartAddr": "40f0a0",
            "funcEndAddr": "40f2c5",
            "decompiledFuncCode": "int64_t function_40f0a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40f0a0\n    int128_t v1; // 0x40f0a0\n    int128_t v2 = v1;\n    int128_t v3 = __asm_pxor(v2, v2); // 0x40f0a2\n    int64_t * v4 = (int64_t *)(a1 + 56); // 0x40f0b9\n    int128_t v5 = __asm_movaps(v3); // bp-88, 0x40f0bd\n    int64_t v6 = *v4 + 24 * a2; // 0x40f0c2\n    int64_t v7 = 0; // bp-72, 0x40f0cb\n    int64_t * v8 = (int64_t *)(v6 + 8); // 0x40f0d4\n    int64_t v9 = *v8; // 0x40f0d4\n    if (v9 < 1) {\n        // 0x40f281\n        free(NULL);\n        return (int32_t)&g127 ^ (int32_t)&g127;\n    }\n    int64_t v10 = v6 + 16; // 0x40f145\n    int64_t * v11 = (int64_t *)v10;\n    int64_t v12 = a3 + 8;\n    int64_t * v13 = (int64_t *)v12;\n    int64_t v14 = a3 + 16;\n    int64_t v15 = 0; // 0x40f138\n    int64_t v16 = a1; // 0x40f0a0\n    int64_t v17 = v9;\n    int64_t v18; // 0x40f0a0\n    int64_t v19; // 0x40f0a0\n    int64_t v20; // 0x40f0a0\n    int64_t v21; // 0x40f173\n    int64_t v22; // 0x40f17d\n    while (true) {\n      lab_0x40f145:\n        // 0x40f145\n        v19 = v17;\n        int64_t v23 = v16;\n        int64_t v24 = *(int64_t *)(*v11 + 8 * v15); // 0x40f149\n        v16 = v23;\n        v18 = v19;\n        if (v24 == a2) {\n            goto lab_0x40f138;\n        } else {\n            // 0x40f152\n            v16 = v23;\n            v18 = v19;\n            if ((*(char *)(v23 + 8 + 16 * v24) & 8) == 0) {\n                goto lab_0x40f138;\n            } else {\n                // 0x40f163\n                v21 = 24 * v24;\n                int64_t v25 = *(int64_t *)(a1 + 40) + v21; // 0x40f17a\n                v22 = *(int64_t *)(v25 + 16);\n                int64_t v26 = *(int64_t *)v22; // 0x40f186\n                int64_t v27 = function_40c890(v19, v10, v26); // 0x40f191\n                if (*(int64_t *)(v25 + 8) > 1) {\n                    // 0x40f0f0\n                    v20 = v19;\n                    if (v27 != 0) {\n                        goto lab_0x40f1d0;\n                    } else {\n                        int64_t v28 = *v13; // 0x40f0f9\n                        int64_t v29 = function_40c890(v28, v14, v26); // 0x40f104\n                        v20 = v28;\n                        if (v29 == 0) {\n                            goto lab_0x40f1d0;\n                        } else {\n                            goto lab_0x40f112;\n                        }\n                    }\n                } else {\n                    // 0x40f1ab\n                    v16 = v19;\n                    v18 = v19;\n                    if (v27 != 0) {\n                        goto lab_0x40f138;\n                    } else {\n                        int64_t v30 = *v13; // 0x40f1b0\n                        int64_t v31 = function_40c890(v30, v14, v26); // 0x40f1bb\n                        v16 = v30;\n                        v18 = v19;\n                        if (v31 != 0) {\n                            goto lab_0x40f112;\n                        } else {\n                            goto lab_0x40f138;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40f210:\n    if (v17 < 1) {\n        // 0x40f281\n        free((int64_t *)v7);\n        return (int32_t)&g127 ^ (int32_t)&g127;\n    }\n    int64_t v32 = 0; // 0x40f0a0\n    int64_t v33 = *(int64_t *)(*v11 + 8 * v32); // 0x40f22c\n    int64_t v34; // 0x40f0a0\n    int64_t v35; // 0x40f23d\n    int64_t v36; // 0x40f250\n    if (function_40c890(v34, (int64_t)&v7, v33) == 0) {\n        // 0x40f23d\n        v35 = *v13;\n        v36 = function_40c890(v35, v14, v33) - 1;\n        if (v36 > -1 == v36 < v35) {\n            // 0x40f25e\n            *v13 = v35 - 1;\n            function_40ca00(v12, v14, v36);\n        }\n    }\n    int64_t v37 = v32 + 1; // 0x40f272\n    v32 = v37;\n    while (*v8 > v37) {\n        // 0x40f220\n        v33 = *(int64_t *)(*v11 + 8 * v32);\n        if (function_40c890(v34, (int64_t)&v7, v33) == 0) {\n            // 0x40f23d\n            v35 = *v13;\n            v36 = function_40c890(v35, v14, v33) - 1;\n            if (v36 > -1 == v36 < v35) {\n                // 0x40f25e\n                *v13 = v35 - 1;\n                function_40ca00(v12, v14, v36);\n            }\n        }\n        // 0x40f272\n        v37 = v32 + 1;\n        v32 = v37;\n    }\n    // 0x40f281\n    free((int64_t *)v7);\n    return (int32_t)&g127 ^ (int32_t)&g127;\n  lab_0x40f138:\n    // 0x40f138\n    v17 = v18;\n    v15++;\n    if (v17 <= v15) {\n        // break -> 0x40f210\n        goto lab_0x40f210;\n    }\n    goto lab_0x40f145;\n  lab_0x40f1d0:;\n    int64_t v38 = *(int64_t *)(v22 + 8); // 0x40f1d0\n    v16 = v20;\n    v18 = v19;\n    if (v38 < 1) {\n        goto lab_0x40f138;\n    } else {\n        int64_t v39 = function_40c890(v19, v10, v38); // 0x40f1e6\n        v16 = v19;\n        v18 = v19;\n        if (v39 != 0) {\n            goto lab_0x40f138;\n        } else {\n            int64_t v40 = *v13; // 0x40f1f4\n            int64_t v41 = function_40c890(v40, v14, v38); // 0x40f1fc\n            v16 = v40;\n            v18 = v19;\n            if (v41 == 0) {\n                goto lab_0x40f138;\n            } else {\n                goto lab_0x40f112;\n            }\n        }\n    }\n  lab_0x40f112:;\n    int64_t v42 = function_40d340(&v5, a4, *v4 + v21); // 0x40f124\n    if ((int32_t)v42 != 0) {\n        // 0x40f2a0\n        free((int64_t *)v7);\n        return v42 & 0xffffffff;\n    }\n    // 0x40f131\n    v16 = &v5;\n    v18 = *v8;\n    goto lab_0x40f138;\n}\n"
        },
        {
            "funcName": "function_40f2d0",
            "funcStartAddr": "40f2d0",
            "funcEndAddr": "40fddd",
            "decompiledFuncCode": "int64_t function_40f2d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40f2d0\n    int128_t v1; // 0x40f2d0\n    int128_t v2 = v1;\n    int64_t * mem = malloc(0x3800); // 0x40f2ee\n    if (mem == NULL) {\n        // 0x40f692\n        return 0;\n    }\n    int128_t v3 = __asm_pxor(v2, v2); // 0x40f30b\n    int128_t v4 = __asm_movaps(v3); // bp-152, 0x40f30f\n    int64_t v5 = __asm_movaps(v3); // 0x40f31f\n    int64_t * v6 = (int64_t *)(a2 + 88); // 0x40f329\n    *v6 = 0;\n    int64_t * v7 = (int64_t *)(a2 + 96); // 0x40f331\n    *v7 = 0;\n    int64_t v8; // 0x40f2d0\n    int64_t v9; // 0x40f2d0\n    int64_t v10; // 0x40f2d0\n    int64_t v11; // 0x40f2d0\n    int64_t v12; // 0x40f2d0\n    int64_t v13; // 0x40f2d0\n    int64_t v14; // 0x40f2d0\n    int64_t v15; // 0x40f2d0\n    int64_t v16; // 0x40f2d0\n    int64_t v17; // 0x40f2d0\n    int64_t v18; // 0x40f2d0\n    int64_t v19; // 0x40f2d0\n    int64_t v20; // 0x40f2d0\n    int64_t v21; // 0x40f2d0\n    int64_t v22; // 0x40f2d0\n    int128_t v23; // 0x40f2d0\n    int128_t v24; // 0x40f2d0\n    int128_t v25; // 0x40f2d0\n    int128_t v26; // 0x40f2d0\n    int64_t v27; // 0x40f2d0\n    int64_t v28; // 0x40f2d0\n    int128_t v29; // bp-88, 0x40f2d0\n    int64_t v30; // 0x40f2ee\n    int64_t v31; // 0x40f314\n    int64_t v32; // 0x40f2d0\n    int64_t v33; // 0x40f2d0\n    int64_t v34; // 0x40fd12\n    int64_t v35; // 0x40f577\n    int128_t * v36; // 0x40f2d0\n    int64_t v37; // 0x40f352\n    int64_t v38; // 0x40f36b\n    uint32_t v39; // 0x40f36e\n    char v40; // 0x40f372\n    int64_t * mem2; // 0x40f3d9\n    int32_t size2; // 0x40f418\n    int64_t * mem3; // 0x40f41d\n    int64_t v41; // 0x40f41d\n    int64_t v42; // 0x40f44a\n    int64_t v43; // 0x40f45a\n    int128_t v44; // 0x40f2d0\n    int128_t v45; // 0x40f2d0\n    int128_t v46; // 0x40f2d0\n    int128_t v47; // 0x40f2d0\n    int128_t v48; // 0x40f2d0\n    if (*(int64_t *)(a2 + 16) < 1) {\n        // 0x40fcb2\n        free(mem);\n        goto lab_0x40fcbc;\n    } else {\n        // 0x40f33f\n        v30 = (int64_t)mem;\n        v31 = v30 + 0x1800;\n        v32 = &v4;\n        v33 = &v29;\n        v36 = (int128_t *)(v32 + 16);\n        v23 = v5;\n        v28 = 0;\n        v44 = v3;\n        v14 = a1;\n        v18 = a2;\n        v10 = 0;\n        while (true) {\n          lab_0x40f34d:\n            // 0x40f34d\n            v11 = v10;\n            v19 = v18;\n            v15 = v14;\n            int128_t v49 = v44;\n            int128_t v50 = v23;\n            v37 = 8 * v28;\n            int64_t v51 = *(int64_t *)(*(int64_t *)(v19 + 24) + v37); // 0x40f363\n            v38 = 16 * v51 + *(int64_t *)v15;\n            int64_t v52 = v38 + 8; // 0x40f36e\n            v39 = *(int32_t *)v52;\n            v40 = *(char *)v52;\n            v24 = v50;\n            v45 = v49;\n            v16 = v15;\n            v20 = v19;\n            v12 = v11;\n            switch (v40) {\n                case 1: {\n                    unsigned char v53 = *(char *)v38; // 0x40f6a8\n                    unsigned char v54 = v53 % 64;\n                    int64_t * v55 = (int64_t *)((int64_t)(v53 / 8 & 24) + v32); // 0x40f6c3\n                    *v55 = (v54 == 0 ? 1 : 1 << (int64_t)v54) | *v55;\n                    v25 = v50;\n                    v47 = v49;\n                    goto lab_0x40f6c7;\n                }\n                case 3: {\n                    int64_t v56 = 0;\n                    int64_t * v57 = (int64_t *)(v56 + v32); // 0x40fb32\n                    *v57 = *(int64_t *)(v56 + *(int64_t *)v38) | *v57;\n                    v25 = v50;\n                    v47 = v49;\n                    int64_t v58 = v56 + 8; // 0x40fb46\n                    while (v56 != 24) {\n                        // 0x40fb32\n                        v56 = v58;\n                        v57 = (int64_t *)(v56 + v32);\n                        *v57 = *(int64_t *)(v56 + *(int64_t *)v38) | *v57;\n                        v25 = v50;\n                        v47 = v49;\n                        v58 = v56 + 8;\n                    }\n                    goto lab_0x40f6c7;\n                }\n                case 5: {\n                    // 0x40f9e0\n                    if (*(int32_t *)(v15 + 180) < 2) {\n                        int128_t v59 = __asm_pcmpeqd(v49, v49); // 0x40fa70\n                        v4 = __asm_movaps(v59);\n                        v26 = __asm_movaps(v59);\n                        v48 = v59;\n                    } else {\n                        int64_t v60 = 0;\n                        int64_t * v61 = (int64_t *)(v60 + v32); // 0x40f9f9\n                        *v61 = *(int64_t *)(v60 + *(int64_t *)(v15 + 120)) | *v61;\n                        int64_t v62 = v60 + 8; // 0x40fa0d\n                        v26 = v50;\n                        v48 = v49;\n                        while (v60 != 24) {\n                            // 0x40f9f9\n                            v60 = v62;\n                            v61 = (int64_t *)(v60 + v32);\n                            *v61 = *(int64_t *)(v60 + *(int64_t *)(v15 + 120)) | *v61;\n                            v62 = v60 + 8;\n                            v26 = v50;\n                            v48 = v49;\n                        }\n                    }\n                    goto lab_0x40fa0f;\n                }\n                case 7: {\n                    int128_t v63 = __asm_pcmpeqd(v49, v49); // 0x40fb10\n                    v4 = __asm_movaps(v63);\n                    v26 = v50;\n                    v48 = v63;\n                    goto lab_0x40fa0f;\n                }\n                default: {\n                    goto lab_0x40f3a2;\n                }\n            }\n        }\n      lab_0x40f3b3:\n        if (v13 < 1) {\n            // 0x40fdc5\n            free(mem);\n            if (v13 != 0) {\n                // 0x40f692\n                return 0;\n            }\n            goto lab_0x40fcbc;\n        } else {\n            int64_t v64 = v13 + 1; // 0x40f3c8\n            int128_t v65 = v64; // bp-120, 0x40f3cd\n            int64_t size = 8 * v64; // 0x40f3d2\n            mem2 = malloc((int32_t)size);\n            if (mem2 == NULL) {\n                goto lab_0x40fb87;\n            } else {\n                // 0x40f3f2\n                v4 = 0;\n                if (v13 > 0xaaaaaaaaaaaa855) {\n                    goto lab_0x40fb87;\n                } else {\n                    // 0x40f40d\n                    size2 = 24 * (int32_t)v13;\n                    mem3 = malloc(size2);\n                    if (mem3 == NULL) {\n                        goto lab_0x40fb87;\n                    } else {\n                        // 0x40f430\n                        v41 = (int64_t)mem3;\n                        int64_t v66 = size - 8; // 0x40f435\n                        int128_t v67 = __asm_pxor(v46, v46); // 0x40f439\n                        v42 = v66 + v41;\n                        v43 = v42 + v66;\n                        v29 = __asm_movaps(v67);\n                        __asm_movaps(v67);\n                        int64_t * v68 = (int64_t *)(v17 + 48);\n                        int64_t v69 = 0; // 0x40f476\n                        int64_t v70 = v30 + 8; // 0x40f476\n                        int64_t v71 = v30; // 0x40f476\n                        int64_t v72 = 0; // 0x40f476\n                        while (true) {\n                            int64_t v73 = v70;\n                            int64_t v74 = v69;\n                            int64_t * v75 = (int64_t *)v73; // 0x40f48a\n                            uint64_t v76 = *v75; // 0x40f48a\n                            if (v76 >= 1) {\n                                int64_t v77 = v76; // 0x40f4d4\n                                for (int64_t i = 0; i < v77; i++) {\n                                    int64_t v78 = *(int64_t *)(v73 + 8); // 0x40f498\n                                    int64_t v79 = *(int64_t *)(v17 + 24); // 0x40f4a0\n                                    int64_t v80 = *(int64_t *)(v79 + 8 * *(int64_t *)(v78 + 8 * i)); // 0x40f4a5\n                                    int64_t v81 = v77; // 0x40f4ad\n                                    if (v80 != -1) {\n                                        int64_t v82 = function_40cdd0((int64_t *)&v65, (int128_t *)(*v68 + 24 * v80)); // 0x40f4bf\n                                        int32_t v83 = v82; // 0x40f4c4\n                                        v4 = v83;\n                                        if (v83 != 0) {\n                                            // 0x40fb75\n                                            free(mem3);\n                                            goto lab_0x40fb87;\n                                        }\n                                        // 0x40f4af\n                                        v81 = *v75;\n                                    }\n                                    // 0x40f4d0\n                                    v77 = v81;\n                                }\n                            }\n                            int64_t v84 = function_40db40(&v4, v17, (int64_t *)&v65, 0); // 0x40f4e7\n                            int64_t v85 = 8 * v72; // 0x40f4f1\n                            int64_t * v86 = (int64_t *)(v85 + v41); // 0x40f4f1\n                            *v86 = v84;\n                            if (v84 == 0) {\n                                // 0x40fc48\n                                if ((int32_t)v4 != 0) {\n                                    // break -> 0x40fb75\n                                    break;\n                                }\n                            }\n                            // 0x40f4fe\n                            int64_t v87; // 0x40f2d0\n                            if (*(char *)(v84 + 104) < 0) {\n                                int64_t v88 = function_40db40(&v4, v17, (int64_t *)&v65, 1); // 0x40fbd0\n                                *(int64_t *)(v85 + v42) = v88;\n                                if (v88 == 0) {\n                                    // 0x40fb60\n                                    if ((int32_t)v4 != 0) {\n                                        // break -> 0x40fb75\n                                        break;\n                                    }\n                                }\n                                int64_t v89 = v74; // 0x40fbf0\n                                if (v88 != *v86) {\n                                    int32_t v90 = *(int32_t *)(v17 + 180); // 0x40fbfc\n                                    v89 = v90 < 2 == (1 - v90 & v90) < 0 ? 1 : 0x100000000000000 * v74 >> 56;\n                                }\n                                int64_t v91 = v89;\n                                int64_t v92 = function_40db40(&v4, v17, (int64_t *)&v65, 2); // 0x40fc1d\n                                *(int64_t *)(v85 + v43) = v92;\n                                v87 = v91;\n                                if (v92 == 0) {\n                                    // 0x40fc34\n                                    v87 = v91;\n                                    if ((int32_t)v4 != 0) {\n                                        // break -> 0x40fb75\n                                        break;\n                                    }\n                                }\n                            } else {\n                                // 0x40f508\n                                *(int64_t *)(v85 + v42) = v84;\n                                *(int64_t *)(v85 + v43) = v84;\n                                v87 = v74;\n                            }\n                            // 0x40f51a\n                            v27 = v87;\n                            int64_t v93 = 0;\n                            int64_t * v94 = (int64_t *)(v93 + v33); // 0x40f524\n                            *v94 = *(int64_t *)(v71 + 0x1800 + v93) | *v94;\n                            int64_t v95 = v93 + 8; // 0x40f53c\n                            while (v93 != 24) {\n                                // 0x40f524\n                                v93 = v95;\n                                v94 = (int64_t *)(v93 + v33);\n                                *v94 = *(int64_t *)(v71 + 0x1800 + v93) | *v94;\n                                v95 = v93 + 8;\n                            }\n                            // 0x40f53e\n                            v72++;\n                            v69 = v27;\n                            v70 = v73 + 24;\n                            v71 += 32;\n                            if (v72 == v13) {\n                                if ((char)v27 != 0) {\n                                    int64_t * mem4 = calloc(8, 512); // 0x40fd12\n                                    v34 = (int64_t)mem4;\n                                    *v7 = v34;\n                                    if (mem4 == NULL) {\n                                        // 0x40fb75\n                                        free(mem3);\n                                        goto lab_0x40fb87;\n                                    } else {\n                                        // 0x40fd2c\n                                        v22 = v33;\n                                        v21 = v34;\n                                        v9 = v30 + 0x1820;\n                                        goto lab_0x40fd52;\n                                    }\n                                } else {\n                                    int64_t * mem5 = calloc(8, 256); // 0x40f577\n                                    v35 = (int64_t)mem5;\n                                    *v6 = v35;\n                                    if (mem5 == NULL) {\n                                        // 0x40fb75\n                                        free(mem3);\n                                        goto lab_0x40fb87;\n                                    } else {\n                                        // 0x40f591\n                                        v8 = 0;\n                                        goto lab_0x40f5af;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x40fb75\n                        free(mem3);\n                        goto lab_0x40fb87;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40f9a3:;\n    int64_t v96 = v30 + 16; // 0x40f9a8\n    int64_t v97; // 0x40f2d0\n    int64_t v98 = v97 + v96; // 0x40f9b0\n    int64_t v99 = v96; // 0x40f9b4\n    goto lab_0x40f9b8;\n  lab_0x40f7ed:;\n    // 0x40f7ed\n    int64_t v145; // 0x40f2d0\n    int64_t v146; // 0x40f806\n    while (true) {\n        // 0x40f7f6\n        int64_t v147; // 0x40f2d0\n        int64_t v148 = v147;\n        int64_t v149; // 0x40f2d0\n        int64_t v150 = v149;\n        int64_t v151 = 8 * v150; // 0x40f7f6\n        int64_t v152 = *(int64_t *)(v151 + v32); // 0x40f7f6\n        int64_t v153 = *(int64_t *)(v151 + v145); // 0x40f7fa\n        int64_t v154 = v153 & v152; // 0x40f7fa\n        int64_t v155; // 0x40f2d0\n        *(int64_t *)(v151 + v155) = v154;\n        int64_t v156 = v150 + 1; // 0x40f802\n        v146 = v154 | v148;\n        v149 = v156;\n        v147 = v146;\n        if (v156 == 4) {\n            // break -> 0x40f80f\n            break;\n        }\n    }\n    int64_t v157 = 0; // 0x40f812\n    int64_t v158 = 0; // 0x40f812\n    int64_t v159 = 0; // 0x40f812\n    int64_t v160; // 0x40f2d0\n    int64_t v161; // 0x40f2d0\n    int64_t v162; // 0x40f2d0\n    if (v146 != 0) {\n        int64_t v163 = v159;\n        int64_t v164 = v158;\n        int64_t v165 = v157;\n        int64_t v166 = 8 * v165; // 0x40f822\n        int64_t * v167 = (int64_t *)(v166 + v32); // 0x40f822\n        int64_t v168 = *v167; // 0x40f822\n        int64_t v169 = *(int64_t *)(v166 + v145); // 0x40f826\n        int64_t v170 = v169 & -1 - v168; // 0x40f830\n        int64_t v171 = v168 & -1 - v169; // 0x40f836\n        *(int64_t *)(v166 + v33) = v170;\n        int64_t v172 = v170 | v163; // 0x40f83d\n        *v167 = v171;\n        int64_t v173 = v165 + 1; // 0x40f844\n        int64_t v174 = v171 | v164; // 0x40f848\n        v157 = v173;\n        v158 = v174;\n        v159 = v172;\n        while (v173 != 4) {\n            // 0x40f822\n            v163 = v159;\n            v164 = v158;\n            v165 = v157;\n            v166 = 8 * v165;\n            v167 = (int64_t *)(v166 + v32);\n            v168 = *v167;\n            v169 = *(int64_t *)(v166 + v145);\n            v170 = v169 & -1 - v168;\n            v171 = v168 & -1 - v169;\n            *(int64_t *)(v166 + v33) = v170;\n            v172 = v170 | v163;\n            *v167 = v171;\n            v173 = v165 + 1;\n            v174 = v171 | v164;\n            v157 = v173;\n            v158 = v174;\n            v159 = v172;\n        }\n        // 0x40f851\n        int64_t v175; // 0x40f2d0\n        int64_t v176 = 24 * v175 + v30; // 0x40f85b\n        int64_t v177 = v176; // 0x40f862\n        int64_t v178; // 0x40f2d0\n        int64_t v179 = v178; // 0x40f862\n        if (v172 != 0) {\n            int128_t v180 = v29; // 0x40f864\n            int128_t v181 = __asm_movdqa(v180); // 0x40f864\n            int64_t v182 = 32 * v178 + v31; // 0x40f879\n            int128_t v183 = *(int128_t *)v182; // 0x40f87e\n            __asm_movups(v183, v181);\n            int128_t v184; // 0x40f2d0\n            int128_t v185 = __asm_movdqa(v184); // 0x40f881\n            int128_t v186 = *(int128_t *)(v182 + 16); // 0x40f88a\n            __asm_movups(v186, v185);\n            int128_t v187 = __asm_movdqa(0); // 0x40f88e\n            int64_t v188 = 24 * v178;\n            int128_t v189 = *(int128_t *)v145; // 0x40f8a0\n            __asm_movups(v189, v187);\n            int128_t v190; // 0x40f2d0\n            int128_t v191 = __asm_movdqa(v190); // 0x40f8a5\n            int128_t v192 = *(int128_t *)(v145 + 16); // 0x40f8ae\n            __asm_movups(v192, v191);\n            if ((int32_t)function_40d930(v188 + v30, v176) != 0) {\n                goto lab_0x40f9a3;\n            }\n            // 0x40f8c1\n            v177 = 0x100000000 * v176 >> 32;\n            v179 = v178 + 1;\n        }\n        int64_t v193 = v179;\n        int64_t v194 = v177;\n        int64_t * v195; // 0x40f2d0\n        int64_t v196 = *v195; // 0x40f8d4\n        int64_t v197 = *(int64_t *)(v196 + v37); // 0x40f8d8\n        if ((char)function_40b280(v194, v197) == 0) {\n            // 0x40f8ca\n            goto lab_0x40f9a3;\n        }\n        // 0x40f8ec\n        int64_t v198; // 0x40f2d0\n        v162 = v198;\n        v160 = v193;\n        v161 = v175;\n        if (v174 == 0) {\n            // break -> 0x40f905\n            goto lab_0x40f905_2;\n        }\n    }\n    goto lab_0x40f7ce;\n  lab_0x40f7ce:;\n    // 0x40f7ce\n    int64_t v199; // 0x40f2d0\n    int64_t v200 = v199;\n    int64_t v201; // 0x40f2d0\n    int64_t v202 = v201 + 1; // 0x40f7ce\n    v199 = v200;\n    int64_t v203; // 0x40f2d0\n    v203 += 32;\n    v201 = v202;\n    v162 = 0x100000000000000 * v19 >> 56;\n    v160 = v200;\n    v161 = v202;\n    if (v202 >= v200) {\n        // break -> 0x40f905\n        goto lab_0x40f905_2;\n    }\n    goto lab_0x40f7df;\n  lab_0x40f3a2:\n    // 0x40f3a2\n    v13 = v12;\n    v17 = v16;\n    v46 = v45;\n    int64_t v206 = v28 + 1; // 0x40f3a2\n    v23 = v24;\n    v28 = v206;\n    v44 = v46;\n    v14 = v17;\n    v18 = v20;\n    v10 = v13;\n    if (v206 >= *(int64_t *)(v20 + 16)) {\n        // break -> 0x40f3b3\n        goto lab_0x40f3b3;\n    }\n    goto lab_0x40f34d;\n  lab_0x40f6c7:;\n    uint32_t v207 = v39 / 256; // 0x40f377\n    uint32_t v208 = v207 & 0xff03ff;\n    int128_t v209 = v47;\n    int128_t v210 = v25;\n    int128_t v211 = v209; // 0x40f6ca\n    int64_t v212; // 0x40f37a\n    int128_t v213; // 0x40f2d0\n    if ((int16_t)v208 == 0) {\n        goto lab_0x40f780;\n    } else {\n        // 0x40f6d0\n        v212 = v208;\n        v213 = v209;\n        if ((v212 & 32) != 0) {\n            int128_t v214 = v4; // 0x40fa40\n            int128_t v215 = __asm_pxor(v209, v209); // 0x40fa45\n            v4 = __asm_movaps(v215);\n            *v36 = (int128_t)__asm_movaps(v215);\n            v24 = v210;\n            v45 = v215;\n            v16 = v15;\n            v20 = v19;\n            v12 = v11;\n            if ((v214 & 1024) == 0) {\n                goto lab_0x40f3a2;\n            } else {\n                // 0x40fa59\n                v4 = 1024;\n                v213 = v215;\n                goto lab_0x40f6d8;\n            }\n        } else {\n            goto lab_0x40f6d8;\n        }\n    }\n  lab_0x40fa0f:;\n    int128_t v216 = v48;\n    int128_t v217 = v26;\n    int64_t v218 = *(int64_t *)(v15 + 216); // 0x40fa0f\n    if ((v218 & 64) == 0) {\n        // 0x40fa1b\n        v4 = (int64_t)v4 & -1025;\n    }\n    // 0x40fa24\n    v25 = v217;\n    v47 = v216;\n    if ((char)v218 <= 255) {\n        // 0x40fa30\n        v4 = (int64_t)v4 & -2;\n        v25 = v217;\n        v47 = v216;\n    }\n    goto lab_0x40f6c7;\n  lab_0x40f780:;\n    int128_t v219 = v211;\n    v162 = v19;\n    v160 = v11;\n    v161 = 0;\n    if (v11 >= 1) {\n        // 0x40f791\n        v199 = v11;\n        v203 = v31;\n        v201 = 0;\n        while (true) {\n          lab_0x40f7df:\n            // 0x40f7df\n            if (v40 == 1) {\n                unsigned char v204 = *(char *)v38; // 0x40f7b0\n                int64_t v205 = *(int64_t *)(32 * v201 + v31 + (int64_t)(v204 / 8 & 24)); // 0x40f7c3\n                if ((1 << (int64_t)(v204 % 64) & v205) != 0) {\n                    goto lab_0x40f7ed;\n                } else {\n                    goto lab_0x40f7ce;\n                }\n            } else {\n                goto lab_0x40f7ed;\n            }\n        }\n    }\n  lab_0x40f905_2:;\n    int64_t v220 = v160;\n    int64_t v221 = v162;\n    v24 = v210;\n    v45 = v219;\n    v16 = v15;\n    v20 = v221;\n    v12 = v220;\n    int64_t v222; // 0x40f2d0\n    int64_t v223; // 0x40f2d0\n    int64_t v224; // 0x40f2d0\n    int64_t result; // 0x40f2d0\n    int128_t v225; // 0x40f2d0\n    if (v220 != v161) {\n        goto lab_0x40f3a2;\n    } else {\n        int128_t v226 = __asm_movdqa(v4); // 0x40f90e\n        int64_t v227 = 32 * v220 + v31; // 0x40f925\n        __asm_movups(*(int128_t *)v227, v226);\n        __asm_movups(*(int128_t *)(v227 + 16), __asm_movdqa(v210));\n        v97 = 24 * v220;\n        int64_t v228 = v97 + v30; // 0x40f94d\n        int64_t * v229 = (int64_t *)v228;\n        *v229 = 1;\n        int64_t * v230 = (int64_t *)(v228 + 8);\n        *v230 = 1;\n        int64_t * mem6 = malloc(8); // 0x40f966\n        *(int64_t *)(v228 + 16) = (int64_t)mem6;\n        if (mem6 == NULL) {\n            // 0x40f66b\n            *v230 = 0;\n            *v229 = 0;\n            if (v220 != 0) {\n                goto lab_0x40f9a3;\n            } else {\n                // 0x40f684\n                free(mem);\n                result = 0;\n                goto lab_0x40f692;\n            }\n        }\n        // 0x40f982\n        *mem6 = *(int64_t *)(*(int64_t *)(v221 + 24) + v37);\n        v225 = v219;\n        v223 = 0x100000000000000 * v15 >> 56;\n        v224 = v221;\n        v222 = v220 + 1;\n        goto lab_0x40f989;\n    }\n  lab_0x40f6d8:;\n    int128_t v231 = v213;\n    v225 = v231;\n    v223 = v15;\n    v224 = v19;\n    v222 = v11;\n    if ((char)v207 <= -1) {\n        goto lab_0x40f989;\n    } else {\n        if ((v212 & 4) == 0) {\n            goto lab_0x40f730;\n        } else {\n            if (v40 == 1) {\n                // 0x40faf0\n                v225 = v231;\n                v223 = v15;\n                v224 = v19;\n                v222 = v11;\n                if ((*(char *)(v38 + 10) & 64) == 0) {\n                    goto lab_0x40f989;\n                } else {\n                    // 0x40fafb\n                    if (*(int32_t *)(v15 + 180) > 1) {\n                        goto lab_0x40f6fb;\n                    } else {\n                        goto lab_0x40fac0;\n                    }\n                }\n            } else {\n                // 0x40f6ed\n                if (*(int32_t *)(v15 + 180) < 2) {\n                    goto lab_0x40fac0;\n                } else {\n                    goto lab_0x40f6fb;\n                }\n            }\n        }\n    }\n  lab_0x40f989:;\n    int128_t v232 = v225;\n    int128_t v233 = __asm_pxor(v232, v232); // 0x40f989\n    v4 = __asm_movaps(v233);\n    *v36 = (int128_t)__asm_movaps(v233);\n    v24 = v210;\n    v45 = v233;\n    v16 = v223;\n    v20 = v224;\n    v12 = v222;\n    goto lab_0x40f3a2;\n  lab_0x40f730:\n    // 0x40f730\n    v211 = v231;\n    if ((v212 & 8) == 0) {\n        goto lab_0x40f780;\n    } else {\n        if (v40 == 1) {\n            // 0x40fb50\n            v225 = v231;\n            v223 = v15;\n            v224 = v19;\n            v222 = v11;\n            if ((*(char *)(v38 + 10) & 64) == 0) {\n                goto lab_0x40f73d;\n            } else {\n                goto lab_0x40f989;\n            }\n        } else {\n            goto lab_0x40f73d;\n        }\n    }\n  lab_0x40f73d:\n    // 0x40f73d\n    if (*(int32_t *)(v15 + 180) < 2) {\n        int64_t v234 = 0; // 0x40fa9f\n        int64_t v235 = 8 * v234; // 0x40fa8c\n        int64_t * v236 = (int64_t *)(v235 + v32); // 0x40fa97\n        int64_t v237 = *v236 & -1 - *(int64_t *)(v15 + 184 + v235); // 0x40fa97\n        *v236 = v237;\n        v234++;\n        int64_t v238 = v237; // 0x40faa3\n        int64_t v239 = v238; // 0x40faaa\n        while (v234 != 4) {\n            // 0x40fa8c\n            v235 = 8 * v234;\n            v236 = (int64_t *)(v235 + v32);\n            v237 = *v236 & -1 - *(int64_t *)(v15 + 184 + v235);\n            *v236 = v237;\n            v234++;\n            v238 = v237 | v239;\n            v239 = v238;\n        }\n        // 0x40faac\n        v24 = v210;\n        v45 = v231;\n        v16 = v15;\n        v20 = v19;\n        v12 = v11;\n        v211 = v231;\n        if (v238 == 0) {\n            goto lab_0x40f3a2;\n        } else {\n            goto lab_0x40f780;\n        }\n    } else {\n        int64_t v240 = 0; // 0x40f751\n        int64_t v241 = 8 * v240; // 0x40f753\n        int64_t v242 = *(int64_t *)(v241 + *(int64_t *)(v15 + 120)); // 0x40f75b\n        int64_t * v243 = (int64_t *)(v241 + v32); // 0x40f762\n        int64_t v244 = *v243 & -1 - (v242 & *(int64_t *)(v15 + 184 + v241)); // 0x40f762\n        *v243 = v244;\n        v240++;\n        int64_t v245 = v244; // 0x40f76e\n        int64_t v246 = v245; // 0x40f775\n        while (v240 != 4) {\n            // 0x40f753\n            v241 = 8 * v240;\n            v242 = *(int64_t *)(v241 + *(int64_t *)(v15 + 120));\n            v243 = (int64_t *)(v241 + v32);\n            v244 = *v243 & -1 - (v242 & *(int64_t *)(v15 + 184 + v241));\n            *v243 = v244;\n            v240++;\n            v245 = v244 | v246;\n            v246 = v245;\n        }\n        // 0x40f777\n        v24 = v210;\n        v45 = v231;\n        v16 = v15;\n        v20 = v19;\n        v12 = v11;\n        v211 = v231;\n        if (v245 == 0) {\n            goto lab_0x40f3a2;\n        } else {\n            goto lab_0x40f780;\n        }\n    }\n  lab_0x40fac0:;\n    int64_t v247 = 0; // 0x40fac2\n    int64_t v248 = 8 * v247; // 0x40fac4\n    int64_t * v249 = (int64_t *)(v248 + v32); // 0x40fac4\n    int64_t v250 = *(int64_t *)(v15 + 184 + v248) & *v249; // 0x40fac8\n    *v249 = v250;\n    int64_t v251 = v247 + 1; // 0x40fad4\n    int64_t v252 = v250; // 0x40fad8\n    v247 = v251;\n    int64_t v253 = v252; // 0x40fadf\n    while (v251 != 4) {\n        // 0x40fac4\n        v248 = 8 * v247;\n        v249 = (int64_t *)(v248 + v32);\n        v250 = *(int64_t *)(v15 + 184 + v248) & *v249;\n        *v249 = v250;\n        v251 = v247 + 1;\n        v252 = v250 | v253;\n        v247 = v251;\n        v253 = v252;\n    }\n    // 0x40fae1\n    v24 = v210;\n    v45 = v231;\n    v16 = v15;\n    v20 = v19;\n    v12 = v11;\n    if (v252 != 0) {\n        goto lab_0x40f730;\n    } else {\n        goto lab_0x40f3a2;\n    }\n  lab_0x40f6fb:;\n    int64_t v254 = 0; // 0x40f701\n    int64_t v255 = 8 * v254; // 0x40f703\n    int64_t v256 = *(int64_t *)(v255 + *(int64_t *)(v15 + 120)); // 0x40f703\n    int64_t * v257 = (int64_t *)(v255 + v32); // 0x40f712\n    int64_t v258 = (*(int64_t *)(v15 + 184 + v255) | -1 - v256) & *v257; // 0x40f712\n    *v257 = v258;\n    int64_t v259 = v254 + 1; // 0x40f71a\n    int64_t v260 = v258; // 0x40f71e\n    v254 = v259;\n    int64_t v261 = v260; // 0x40f725\n    while (v259 != 4) {\n        // 0x40f703\n        v255 = 8 * v254;\n        v256 = *(int64_t *)(v255 + *(int64_t *)(v15 + 120));\n        v257 = (int64_t *)(v255 + v32);\n        v258 = (*(int64_t *)(v15 + 184 + v255) | -1 - v256) & *v257;\n        *v257 = v258;\n        v259 = v254 + 1;\n        v260 = v258 | v261;\n        v254 = v259;\n        v261 = v260;\n    }\n    // 0x40f727\n    v24 = v210;\n    v45 = v231;\n    v16 = v15;\n    v20 = v19;\n    v12 = v11;\n    if (v260 == 0) {\n        goto lab_0x40f3a2;\n    } else {\n        goto lab_0x40f730;\n    }\n  lab_0x40fcbc:;\n    int64_t * mem7 = calloc(8, 256); // 0x40fcc6\n    int64_t v262 = (int64_t)mem7; // 0x40fcc6\n    *v6 = v262;\n    // 0x40f692\n    return v262 & -256 | (int64_t)(mem7 != NULL);\n  lab_0x40fb87:\n    // 0x40fb87\n    free(mem2);\n    int64_t v263 = v30 + 16; // 0x40fb94\n    int64_t v264 = v263 + 24; // 0x40fba3\n    free((int64_t *)*(int64_t *)v263);\n    int64_t v265 = v264; // 0x40fbaf\n    while (v264 != 24 * v13 + v263) {\n        // 0x40fba0\n        v264 = v265 + 24;\n        free((int64_t *)*(int64_t *)v265);\n        v265 = v264;\n    }\n    // 0x40fbb1\n    free(mem);\n    result = 0;\n  lab_0x40f692:\n    // 0x40f692\n    return result;\n  lab_0x40f9b8:;\n    int64_t v100 = v99 + 24; // 0x40f9bb\n    free((int64_t *)*(int64_t *)v99);\n    v99 = v100;\n    if (v98 != v100) {\n        goto lab_0x40f9b8;\n    } else {\n        // 0x40f9c9\n        free(mem);\n        result = 0;\n        goto lab_0x40f692;\n    }\n  lab_0x40fd52:;\n    int64_t v101 = v9;\n    int64_t v102 = v21;\n    int64_t v103 = *(int64_t *)v22; // 0x40fd52\n    int64_t v104; // 0x40f2d0\n    int64_t v105; // 0x40f2d0\n    int64_t v106; // 0x40f2d0\n    int64_t * v107; // 0x40f2d0\n    if (v103 == 0) {\n        goto lab_0x40fd72;\n    } else {\n        // 0x40fd62\n        v107 = (int64_t *)(v101 - 32);\n        v105 = v103;\n        v106 = 1;\n        v104 = v102;\n        goto lab_0x40fd62_2;\n    }\n  lab_0x40f5af:;\n    int64_t v108 = v8;\n    int64_t v109 = *(int64_t *)(v108 + v33); // 0x40f5b2\n    int64_t v110; // 0x40f2d0\n    int64_t v111; // 0x40f2d0\n    int64_t v112; // 0x40f2d0\n    int64_t * v113; // 0x40f2d0\n    int64_t v114; // 0x40f2d0\n    int64_t * v115; // 0x40f2d0\n    if (v109 == 0) {\n        goto lab_0x40f5e4;\n    } else {\n        // 0x40f5d0\n        v113 = (int64_t *)(v108 + v31);\n        v114 = v30 + 0x1820 + v108;\n        v115 = (int64_t *)(v17 + 184 + v108);\n        v110 = v109;\n        v111 = 1;\n        v112 = 64 * v108 + v35;\n        goto lab_0x40f5d0_2;\n    }\n  lab_0x40fd72:;\n    int64_t v116 = v22 + 8; // 0x40fd72\n    int64_t v117 = v34; // 0x40fd84\n    v22 = v116;\n    v21 = v102 + 512;\n    v9 = v101 + 8;\n    int64_t v118; // bp-56, 0x40f2d0\n    if (v116 != (int64_t)&v118) {\n        goto lab_0x40fd52;\n    } else {\n        goto lab_0x40f5ee;\n    }\n  lab_0x40f5e4:\n    // 0x40f5e4\n    v8 = v108 + 8;\n    v117 = v35;\n    if (v108 != 24) {\n        goto lab_0x40f5af;\n    } else {\n        goto lab_0x40f5ee;\n    }\n  lab_0x40f5ee:;\n    int64_t v119; // 0x40f2d0\n    char v120; // 0x40f2d0\n    if ((v120 & 4) == 0) {\n        goto lab_0x40f61d;\n    } else {\n        // 0x40f5ff\n        v119 = 0;\n        goto lab_0x40f5ff_2;\n    }\n  lab_0x40fd62_2:;\n    int64_t v121 = v104;\n    int64_t v122 = v106;\n    uint64_t v123 = v105;\n    int64_t v124; // 0x40f2d0\n    int64_t v125; // 0x40f2d0\n    int64_t v126; // 0x40f2d0\n    if (v123 % 2 != 0) {\n        // 0x40fd8b\n        v126 = 0;\n        v125 = v101;\n        v124 = 0;\n        if ((*v107 & v122) != 0) {\n            goto lab_0x40fdac;\n        } else {\n            goto lab_0x40fd96;\n        }\n    } else {\n        goto lab_0x40fd66;\n    }\n  lab_0x40f5d0_2:;\n    int64_t v127 = v112;\n    int64_t v128 = v111;\n    uint64_t v129 = v110;\n    int64_t v130; // 0x40f2d0\n    int64_t v131; // 0x40f2d0\n    int64_t v132; // 0x40f2d0\n    if (v129 % 2 != 0) {\n        // 0x40fc60\n        v131 = v114;\n        v130 = 0;\n        v132 = 0;\n        if ((*v113 & v128) != 0) {\n            goto lab_0x40fc8f;\n        } else {\n            goto lab_0x40fc78;\n        }\n    } else {\n        goto lab_0x40f5d8;\n    }\n  lab_0x40f61d:\n    // 0x40f61d\n    free(mem3);\n    free(mem2);\n    int64_t v133 = v30 + 16; // 0x40f63e\n    int64_t v134 = v133; // 0x40f645\n    goto lab_0x40f648;\n  lab_0x40fd66:\n    // 0x40fd66\n    v105 = v123 / 2;\n    v106 = 2 * v122;\n    v104 = v121 + 8;\n    if (v123 >= 2) {\n        goto lab_0x40fd62_2;\n    } else {\n        goto lab_0x40fd72;\n    }\n  lab_0x40f5d8:\n    // 0x40f5d8\n    v110 = v129 / 2;\n    v111 = 2 * v128;\n    v112 = v127 + 8;\n    if (v129 >= 2) {\n        goto lab_0x40f5d0_2;\n    } else {\n        goto lab_0x40f5e4;\n    }\n  lab_0x40f648:;\n    int64_t v135 = v134 + 24; // 0x40f64c\n    free((int64_t *)*(int64_t *)v134);\n    v134 = v135;\n    if (v133 + (int64_t)size2 != v135) {\n        goto lab_0x40f648;\n    } else {\n        // 0x40f65a\n        free(mem);\n        result = 1;\n        goto lab_0x40f692;\n    }\n  lab_0x40f5ff_2:;\n    int64_t v136 = v119;\n    if ((*(char *)(v30 + 0x1801 + 32 * v136) & 4) != 0) {\n        int64_t v137 = *(int64_t *)(8 * v136 + v43); // 0x40fcee\n        *(int64_t *)(v117 + 80) = v137;\n        if ((char)v27 == 0) {\n            goto lab_0x40f61d;\n        } else {\n            // 0x40fcfc\n            *(int64_t *)(v117 + 2128) = v137;\n            goto lab_0x40f61d;\n        }\n    } else {\n        int64_t v138 = v136 + 1; // 0x40f614\n        v119 = v138;\n        if (v138 != v13) {\n            goto lab_0x40f5ff_2;\n        } else {\n            goto lab_0x40f61d;\n        }\n    }\n  lab_0x40fdac:;\n    int64_t v139 = 8 * v124; // 0x40fdac\n    *(int64_t *)v121 = *(int64_t *)(v139 + v41);\n    *(int64_t *)(v121 + 2048) = *(int64_t *)(v139 + v42);\n    goto lab_0x40fd66;\n  lab_0x40fd96:;\n    int64_t v140 = v125;\n    int64_t v141 = v126 + 1; // 0x40fd99\n    v126 = v141;\n    v125 = v140 + 32;\n    v124 = v141;\n    if ((*(int64_t *)v140 & v122) == 0) {\n        goto lab_0x40fd96;\n    } else {\n        goto lab_0x40fdac;\n    }\n  lab_0x40fc8f:;\n    int64_t v142 = v132;\n    if ((*v115 & v128) == 0) {\n        // 0x40fca5\n        *(int64_t *)v127 = *(int64_t *)(v142 + v41);\n        goto lab_0x40f5d8;\n    } else {\n        // 0x40fc99\n        *(int64_t *)v127 = *(int64_t *)(v142 + v42);\n        goto lab_0x40f5d8;\n    }\n  lab_0x40fc78:;\n    int64_t v143 = v131;\n    int64_t v144 = v130 + 1; // 0x40fc7b\n    v131 = v143 + 32;\n    v130 = v144;\n    if ((*(int64_t *)v143 & v128) == 0) {\n        goto lab_0x40fc78;\n    } else {\n        // 0x40fc8b\n        v132 = 8 * v144;\n        goto lab_0x40fc8f;\n    }\n}\n"
        },
        {
            "funcName": "function_40fde0",
            "funcStartAddr": "40fde0",
            "funcEndAddr": "40fe67",
            "decompiledFuncCode": "int64_t function_40fde0(int64_t a1, int64_t a2) {\n    int64_t v1 = a2 + 48; // 0x40fde0\n    char * v2 = (char *)v1; // 0x40fde0\n    if (*v2 == 16) {\n        int64_t v3 = *(int64_t *)(a2 + 8); // 0x40fde6\n        *(int64_t *)(a2 + 24) = *(int64_t *)(v3 + 24);\n        *(int64_t *)(a2 + 56) = *(int64_t *)(v3 + 56);\n        return 0;\n    }\n    // 0x40fe00\n    *(int64_t *)(a2 + 24) = a2;\n    int64_t v4 = a2 + 40; // 0x40fe14\n    int64_t v5 = function_40bf60(a1, *(int64_t *)v4, *(int64_t *)v1); // 0x40fe18\n    *(int64_t *)(a2 + 56) = v5;\n    if (v5 == -1) {\n        // 0x40fe56\n        return 12;\n    }\n    // 0x40fe2a\n    if (*v2 == 12) {\n        int32_t * v6 = (int32_t *)(a1 + 8 + 16 * v5); // 0x40fe48\n        *v6 = *v6 & -0x3ff01 | 256 * *(int32_t *)v4 & 0x3ff00;\n    }\n    // 0x40fe56\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40fe70",
            "funcStartAddr": "40fe70",
            "funcEndAddr": "40ffec",
            "decompiledFuncCode": "int64_t function_40fe70(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 16);\n    if (a1 != 0) {\n        int64_t v2 = 0; // 0x40fe8b\n        if (*v1 != 0) {\n            int64_t v3 = v2 + 1; // 0x40fe9f\n            int64_t v4 = a1 + 16 * v2; // 0x40fea7\n            function_40bf10(v4);\n            v2 = v3;\n            int64_t v5 = v4; // 0x40feb4\n            while (*v1 > v3) {\n                // 0x40fe9c\n                v3 = v2 + 1;\n                v4 = v5 + 16 * v2;\n                function_40bf10(v4);\n                v2 = v3;\n                v5 = v4;\n            }\n        }\n    }\n    // 0x40feb6\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    int64_t * v6; // 0x40fe70\n    int64_t * v7; // 0x40fe70\n    int64_t * v8; // 0x40fe70\n    if (*v1 == 0) {\n        // 0x40feb6\n        v7 = (int64_t *)(a1 + 56);\n        v6 = (int64_t *)(a1 + 48);\n        v8 = (int64_t *)(a1 + 40);\n    } else {\n        int64_t * v9 = (int64_t *)(a1 + 48);\n        int64_t * v10 = (int64_t *)(a1 + 56);\n        int64_t * v11 = (int64_t *)(a1 + 40);\n        int64_t v12 = 0;\n        int64_t v13 = *v9; // 0x40fed0\n        if (v13 != 0) {\n            // 0x40feda\n            free((int64_t *)*(int64_t *)(v13 + 16 + 24 * v12));\n        }\n        int64_t v14 = *v10; // 0x40fee8\n        if (v14 != 0) {\n            // 0x40fef2\n            free((int64_t *)*(int64_t *)(24 * v12 + 16 + v14));\n        }\n        int64_t v15 = *v11; // 0x40ff00\n        if (v15 != 0) {\n            // 0x40ff0a\n            free((int64_t *)*(int64_t *)(24 * v12 + 16 + v15));\n        }\n        int64_t v16 = v12 + 1; // 0x40ff18\n        v7 = v10;\n        v6 = v9;\n        v8 = v11;\n        while (*v1 > v16) {\n            // 0x40fed0\n            v12 = v16;\n            v13 = *v9;\n            if (v13 != 0) {\n                // 0x40feda\n                free((int64_t *)*(int64_t *)(v13 + 16 + 24 * v12));\n            }\n            // 0x40fee8\n            v14 = *v10;\n            if (v14 != 0) {\n                // 0x40fef2\n                free((int64_t *)*(int64_t *)(24 * v12 + 16 + v14));\n            }\n            // 0x40ff00\n            v15 = *v11;\n            if (v15 != 0) {\n                // 0x40ff0a\n                free((int64_t *)*(int64_t *)(24 * v12 + 16 + v15));\n            }\n            // 0x40ff18\n            v16 = v12 + 1;\n            v7 = v10;\n            v6 = v9;\n            v8 = v11;\n        }\n    }\n    // 0x40ff23\n    free((int64_t *)*v8);\n    free((int64_t *)*v6);\n    int64_t * v17 = (int64_t *)*v7; // 0x40ff3f\n    free(v17);\n    free(v17);\n    int64_t * v18 = (int64_t *)(a1 + 64); // 0x40ff4d\n    int64_t v19 = *v18; // 0x40ff4d\n    int64_t * v20 = NULL; // 0x40ff55\n    if (v19 != 0) {\n        int64_t v21 = 0; // 0x40ff93\n        int64_t v22 = 24 * v21 + v19; // 0x40ff67\n        int64_t * v23 = (int64_t *)v22; // 0x40ff6b\n        int64_t * v24 = (int64_t *)(v22 + 16);\n        int64_t v25 = 0; // 0x40ff70\n        int64_t v26; // 0x40ff80\n        if (*v23 >= 1) {\n            v26 = v25 + 1;\n            function_40c460(*(int64_t *)(*v24 + 8 * v25));\n            v25 = v26;\n            while (v26 < *v23) {\n                // 0x40ff78\n                v26 = v25 + 1;\n                function_40c460(*(int64_t *)(*v24 + 8 * v25));\n                v25 = v26;\n            }\n        }\n        // 0x40ff8f\n        v21++;\n        free((int64_t *)*v24);\n        int64_t v27 = *v18;\n        while (*(int64_t *)(a1 + 136) >= v21) {\n            // 0x40ff60\n            v22 = 24 * v21 + v27;\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 16);\n            v25 = 0;\n            if (*v23 >= 1) {\n                v26 = v25 + 1;\n                function_40c460(*(int64_t *)(*v24 + 8 * v25));\n                v25 = v26;\n                while (v26 < *v23) {\n                    // 0x40ff78\n                    v26 = v25 + 1;\n                    function_40c460(*(int64_t *)(*v24 + 8 * v25));\n                    v25 = v26;\n                }\n            }\n            // 0x40ff8f\n            v21++;\n            free((int64_t *)*v24);\n            v27 = *v18;\n        }\n        // 0x40ffb5\n        v20 = (int64_t *)v27;\n    }\n    // 0x40ffb5\n    free(v20);\n    int64_t v28 = *(int64_t *)(a1 + 120); // 0x40ffba\n    if (v28 != (int64_t)&g20) {\n        // 0x40ffc8\n        free((int64_t *)v28);\n    }\n    // 0x40ffcd\n    free((int64_t *)*(int64_t *)(a1 + 224));\n    free((int64_t *)a1);\n    return &g127;\n}\n"
        },
        {
            "funcName": "function_40fff0",
            "funcStartAddr": "40fff0",
            "funcEndAddr": "41003e",
            "decompiledFuncCode": "int64_t function_40fff0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 16);\n    if (a1 < 1) {\n        // 0x410030\n        free((int64_t *)*v1);\n        return &g127;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = v2 + 1; // 0x410009\n    int64_t v4 = 48 * v2; // 0x41000d\n    free((int64_t *)*(int64_t *)(*v1 + 40 + v4));\n    uint64_t v5 = *(int64_t *)(v4 + 16 + *v1); // 0x410020\n    free((int64_t *)v5);\n    while (v3 < v5) {\n        // 0x410000\n        v2 = v3;\n        v3 = v2 + 1;\n        v4 = 48 * v2;\n        free((int64_t *)*(int64_t *)(*v1 + 40 + v4));\n        v5 = *(int64_t *)(v4 + 16 + *v1);\n        free((int64_t *)v5);\n    }\n    // 0x410030\n    free((int64_t *)*v1);\n    return &g127;\n}\n"
        },
        {
            "funcName": "function_410040",
            "funcStartAddr": "410040",
            "funcEndAddr": "4100d0",
            "decompiledFuncCode": "int64_t function_410040(int64_t a1, int64_t a2, int64_t * a3, int64_t a4, int64_t a5, int128_t * a6) {\n    int64_t v1 = a1 - 1; // 0x410047\n    *(int64_t *)a1 = v1;\n    if (v1 < 0) {\n        // 0x4100b2\n        __assert_fail(\"num >= 0\", \"lib/regexec.c\", 1359, \"pop_fail_stack\");\n        return &g127;\n    }\n    int64_t v2 = 48 * v1; // 0x41005e\n    int64_t v3 = v2 + a2; // 0x410068\n    *a3 = *(int64_t *)v3;\n    int64_t v4 = *(int64_t *)(v3 + 16); // 0x410071\n    memcpy((int64_t *)a5, (int64_t *)v4, 16 * (int32_t)a4);\n    int64_t * v5 = (int64_t *)((int64_t)a6 + 16); // 0x41007d\n    free((int64_t *)*v5);\n    int64_t v6 = v4 + v2;\n    free((int64_t *)*(int64_t *)(v6 + 16));\n    *a6 = (int128_t)__asm_movaps(__asm_movdqu(*(int128_t *)(v6 + 24)));\n    *v5 = *(int64_t *)(v6 + 40);\n    return *(int64_t *)(v6 + 8);\n}\n"
        },
        {
            "funcName": "function_4100d0",
            "funcStartAddr": "4100d0",
            "funcEndAddr": "41011c",
            "decompiledFuncCode": "int64_t function_4100d0(int64_t a1, int64_t str) {\n    // 0x4100d0\n    int64_t v1; // 0x4100d0\n    uint64_t v2 = v1;\n    int32_t len = strlen((char *)str); // 0x4100df\n    if (len != 1) {\n        // 0x410110\n        return 3;\n    }\n    int64_t * v3 = (int64_t *)((v2 / 8 & 24) + a1); // 0x4100fa\n    *v3 = *v3 | (int64_t)len << v2 % 64;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_410120",
            "funcStartAddr": "410120",
            "funcEndAddr": "4108e6",
            "decompiledFuncCode": "int64_t function_410120(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6, int64_t a7) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = a4; // 0x410141\n    int64_t v3 = a6; // 0x410141\n    int64_t v4; // 0x410120\n    int64_t v5; // 0x410120\n    int64_t v6; // 0x410120\n    int64_t v7; // 0x410120\n    int64_t v8; // 0x410120\n    bool v9; // 0x410120\n    if ((a7 & 0x400000) == 0) {\n        goto lab_0x410165;\n    } else {\n        int64_t v10 = v9 ? -1 : 1;\n        int64_t v11 = (int64_t)\"upper\"; // 0x410120\n        int64_t v12 = a6; // 0x410120\n        unsigned char v13 = *(char *)v12; // 0x410150\n        char v14 = *(char *)v11; // 0x410150\n        v2 = 5;\n        char v15 = v14; // 0x410150\n        bool v16 = false; // 0x410150\n        while (v13 == v14) {\n            // 0x410143\n            v11 += v10;\n            v12 += v10;\n            v15 = v13;\n            v16 = true;\n            if (v2 == 0) {\n                // break -> \n                break;\n            }\n            v13 = *(char *)v12;\n            v14 = *(char *)v11;\n            v2--;\n            v15 = v14;\n            v16 = false;\n        }\n        unsigned char v17 = v15;\n        v3 = (int64_t)\"alpha\";\n        int64_t v18 = (int64_t)\"lower\"; // 0x410159\n        int64_t v19 = a6; // 0x410159\n        if ((v13 >= v17 && !v16) != v13 < v17) {\n            unsigned char v20 = *(char *)v19; // 0x410263\n            char v21 = *(char *)v18; // 0x410263\n            int64_t v22 = 5; // 0x410263\n            char v23 = v21; // 0x410263\n            bool v24 = false; // 0x410263\n            while (v20 == v21) {\n                // 0x410256\n                v18 += v10;\n                v19 += v10;\n                v23 = v20;\n                v24 = true;\n                if (v22 == 0) {\n                    // break -> \n                    break;\n                }\n                v20 = *(char *)v19;\n                v21 = *(char *)v18;\n                v22--;\n                v23 = v21;\n                v24 = false;\n            }\n            unsigned char v25 = v23;\n            int64_t v26 = !((v20 < v25 | v24)) == v20 < v25 ? (int64_t)\"alpha\" : a6; // 0x410275\n            v6 = a3;\n            v8 = v22;\n            v4 = v26;\n            v7 = v22;\n            v5 = v26;\n            if (v22 != v1) {\n                goto lab_0x410175;\n            } else {\n                goto lab_0x410285;\n            }\n        } else {\n            goto lab_0x410165;\n        }\n    }\n  lab_0x410165:\n    // 0x410165\n    v6 = a3;\n    v8 = v2;\n    v4 = v3;\n    v7 = v1;\n    v5 = v3;\n    if (v2 == v1) {\n        goto lab_0x410285;\n    } else {\n        goto lab_0x410175;\n    }\n  lab_0x410285:;\n    int64_t v27 = 2 * v7 | 1; // 0x410285\n    int64_t * v28 = (int64_t *)a3; // 0x41029e\n    int64_t * mem = realloc(v28, 8 * (int32_t)v27); // 0x41029e\n    if (mem == NULL) {\n        // 0x410206\n        return 12;\n    }\n    int64_t v29 = (int64_t)mem; // 0x41029e\n    *v28 = v29;\n    *a5 = v27;\n    v6 = v29;\n    v8 = v7;\n    v4 = v5;\n    goto lab_0x410175;\n  lab_0x410175:\n    // 0x410175\n    *(int64_t *)a4 = v8 + 1;\n    char * name = (char *)v4; // 0x410184\n    *(int64_t *)(8 * v8 + v6) = (int64_t)wctype(name);\n    int64_t v30 = v9 ? -1 : 1;\n    int64_t v31 = (int64_t)\"alnum\"; // 0x410120\n    int64_t v32 = v4; // 0x410120\n    int64_t v33 = 6; // 0x410120\n    unsigned char v34 = *(char *)v32; // 0x41019a\n    char v35 = *(char *)v31; // 0x41019a\n    char v36 = v35; // 0x41019a\n    bool v37 = false; // 0x41019a\n    while (v34 == v35) {\n        int64_t v38 = v33 - 1; // 0x41019a\n        v31 += v30;\n        v32 += v30;\n        v33 = v38;\n        v36 = v34;\n        v37 = true;\n        if (v38 == 0) {\n            // break -> \n            break;\n        }\n        v34 = *(char *)v32;\n        v35 = *(char *)v31;\n        v36 = v35;\n        v37 = false;\n    }\n    unsigned char v39 = v36;\n    int64_t v40 = (int64_t)\"cntrl\"; // 0x4101a3\n    int64_t v41 = v4; // 0x4101a3\n    int64_t v42 = 6; // 0x4101a3\n    if ((v34 >= v39 && !v37) == v34 < v39) {\n        int64_t v43 = (int64_t)*__ctype_b_loc(); // 0x410224\n        if (a1 != 0) {\n            int64_t v44 = 0;\n            unsigned char v45; // 0x41044e\n            unsigned char v46; // 0x410120\n            int64_t * v47; // 0x410463\n            if ((*(char *)(2 * v44 + v43) & 8) != 0) {\n                // 0x41044e\n                v45 = *(char *)(v44 + a1);\n                v46 = v45 % 64;\n                v47 = (int64_t *)((int64_t)(v45 / 8 & 24) + a2);\n                *v47 = (v46 == 0 ? 1 : 1 << (int64_t)v46) | *v47;\n            }\n            int64_t v48 = v44 + 1; // 0x410471\n            while (v44 != 255) {\n                // 0x410448\n                v44 = v48;\n                if ((*(char *)(2 * v44 + v43) & 8) != 0) {\n                    // 0x41044e\n                    v45 = *(char *)(v44 + a1);\n                    v46 = v45 % 64;\n                    v47 = (int64_t *)((int64_t)(v45 / 8 & 24) + a2);\n                    *v47 = (v46 == 0 ? 1 : 1 << (int64_t)v46) | *v47;\n                }\n                // 0x410467\n                v48 = v44 + 1;\n            }\n        } else {\n            int64_t v49 = 0;\n            int64_t * v50; // 0x410243\n            if ((*(char *)(2 * v49 + v43) & 8) != 0) {\n                // 0x410236\n                v50 = (int64_t *)(8 * (v49 >> 6) + a2);\n                *v50 = *v50 | 1 << v49 % 64;\n            }\n            int64_t v51 = v49 + 1; // 0x410252\n            while (v49 != 255) {\n                // 0x410230\n                v49 = v51;\n                if ((*(char *)(2 * v49 + v43) & 8) != 0) {\n                    // 0x410236\n                    v50 = (int64_t *)(8 * (v49 >> 6) + a2);\n                    *v50 = *v50 | 1 << v49 % 64;\n                }\n                // 0x410247\n                v51 = v49 + 1;\n            }\n        }\n        // 0x410206\n        return 0;\n    }\n    unsigned char v52 = *(char *)v41; // 0x4101b2\n    char v53 = *(char *)v40; // 0x4101b2\n    char v54 = v53; // 0x4101b2\n    bool v55 = false; // 0x4101b2\n    while (v52 == v53) {\n        int64_t v56 = v42 - 1; // 0x4101b2\n        v40 += v30;\n        v41 += v30;\n        v42 = v56;\n        v54 = v52;\n        v55 = true;\n        if (v56 == 0) {\n            // break -> \n            break;\n        }\n        v52 = *(char *)v41;\n        v53 = *(char *)v40;\n        v54 = v53;\n        v55 = false;\n    }\n    unsigned char v57 = v54;\n    int64_t v58 = (int64_t)\"lower\"; // 0x4101bb\n    int64_t v59 = v4; // 0x4101bb\n    int64_t v60 = 6; // 0x4101bb\n    if ((v52 >= v57 && !v55) == v52 < v57) {\n        int64_t v61 = (int64_t)*__ctype_b_loc(); // 0x4101cd\n        if (a1 != 0) {\n            int64_t v62 = 0;\n            unsigned char v63; // 0x410486\n            unsigned char v64; // 0x410120\n            int64_t * v65; // 0x41049b\n            if ((*(char *)(2 * v62 + v61) & 2) != 0) {\n                // 0x410486\n                v63 = *(char *)(v62 + a1);\n                v64 = v63 % 64;\n                v65 = (int64_t *)((int64_t)(v63 / 8 & 24) + a2);\n                *v65 = (v64 == 0 ? 1 : 1 << (int64_t)v64) | *v65;\n            }\n            int64_t v66 = v62 + 1; // 0x4104a9\n            while (v62 != 255) {\n                // 0x410480\n                v62 = v66;\n                if ((*(char *)(2 * v62 + v61) & 2) != 0) {\n                    // 0x410486\n                    v63 = *(char *)(v62 + a1);\n                    v64 = v63 % 64;\n                    v65 = (int64_t *)((int64_t)(v63 / 8 & 24) + a2);\n                    *v65 = (v64 == 0 ? 1 : 1 << (int64_t)v64) | *v65;\n                }\n                // 0x41049f\n                v66 = v62 + 1;\n            }\n        } else {\n            int64_t v67 = 0;\n            int64_t * v68; // 0x4101f3\n            if ((*(char *)(2 * v67 + v61) & 2) != 0) {\n                // 0x4101e6\n                v68 = (int64_t *)(8 * (v67 >> 6) + a2);\n                *v68 = *v68 | 1 << v67 % 64;\n            }\n            int64_t v69 = v67 + 1; // 0x410202\n            while (v67 != 255) {\n                // 0x4101e0\n                v67 = v69;\n                if ((*(char *)(2 * v67 + v61) & 2) != 0) {\n                    // 0x4101e6\n                    v68 = (int64_t *)(8 * (v67 >> 6) + a2);\n                    *v68 = *v68 | 1 << v67 % 64;\n                }\n                // 0x4101f7\n                v69 = v67 + 1;\n            }\n        }\n        // 0x410206\n        return 0;\n    }\n    unsigned char v70 = *(char *)v59; // 0x4102d1\n    char v71 = *(char *)v58; // 0x4102d1\n    char v72 = v71; // 0x4102d1\n    bool v73 = false; // 0x4102d1\n    while (v70 == v71) {\n        int64_t v74 = v60 - 1; // 0x4102d1\n        v58 += v30;\n        v59 += v30;\n        v60 = v74;\n        v72 = v70;\n        v73 = true;\n        if (v74 == 0) {\n            // break -> \n            break;\n        }\n        v70 = *(char *)v59;\n        v71 = *(char *)v58;\n        v72 = v71;\n        v73 = false;\n    }\n    unsigned char v75 = v72;\n    int64_t v76 = (int64_t)\"space\"; // 0x4102da\n    int64_t v77 = v4; // 0x4102da\n    int64_t v78 = 6; // 0x4102da\n    if ((v70 >= v75 && !v73) == v70 < v75) {\n        int64_t v79 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v80 = 0;\n            unsigned char v81; // 0x4104bf\n            unsigned char v82; // 0x410120\n            int64_t * v83; // 0x4104d4\n            if ((*(char *)(2 * v80 + v79) & 2) != 0) {\n                // 0x4104bf\n                v81 = *(char *)(v80 + a1);\n                v82 = v81 % 64;\n                v83 = (int64_t *)((int64_t)(v81 / 8 & 24) + a2);\n                *v83 = (v82 == 0 ? 1 : 1 << (int64_t)v82) | *v83;\n            }\n            int64_t v84 = v80 + 1; // 0x4104e2\n            while (v80 != 255) {\n                // 0x4104b8\n                v80 = v84;\n                if ((*(char *)(2 * v80 + v79) & 2) != 0) {\n                    // 0x4104bf\n                    v81 = *(char *)(v80 + a1);\n                    v82 = v81 % 64;\n                    v83 = (int64_t *)((int64_t)(v81 / 8 & 24) + a2);\n                    *v83 = (v82 == 0 ? 1 : 1 << (int64_t)v82) | *v83;\n                }\n                // 0x4104d8\n                v84 = v80 + 1;\n            }\n        } else {\n            int64_t v85 = 0;\n            int64_t * v86; // 0x41036c\n            if ((*(char *)(2 * v85 + v79) & 2) != 0) {\n                // 0x41035f\n                v86 = (int64_t *)(8 * (v85 >> 6) + a2);\n                *v86 = *v86 | 1 << v85 % 64;\n            }\n            int64_t v87 = v85 + 1; // 0x41037b\n            while (v85 != 255) {\n                // 0x410358\n                v85 = v87;\n                if ((*(char *)(2 * v85 + v79) & 2) != 0) {\n                    // 0x41035f\n                    v86 = (int64_t *)(8 * (v85 >> 6) + a2);\n                    *v86 = *v86 | 1 << v85 % 64;\n                }\n                // 0x410370\n                v87 = v85 + 1;\n            }\n        }\n        // 0x410206\n        return 0;\n    }\n    unsigned char v88 = *(char *)v77; // 0x4102e9\n    char v89 = *(char *)v76; // 0x4102e9\n    char v90 = v89; // 0x4102e9\n    bool v91 = false; // 0x4102e9\n    while (v88 == v89) {\n        // 0x4102dc\n        v78--;\n        v76 += v30;\n        v77 += v30;\n        v90 = v88;\n        v91 = true;\n        if (v78 == 0) {\n            // break -> \n            break;\n        }\n        v88 = *(char *)v77;\n        v89 = *(char *)v76;\n        v90 = v89;\n        v91 = false;\n    }\n    unsigned char v92 = v90;\n    int64_t v93 = (int64_t)\"alpha\"; // 0x4102f2\n    int64_t v94 = v4; // 0x4102f2\n    int64_t v95 = 6; // 0x4102f2\n    if ((v88 >= v92 && !v91) == v88 < v92) {\n        int64_t v96 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v97 = 0;\n            unsigned char v98; // 0x410647\n            unsigned char v99; // 0x410120\n            int64_t * v100; // 0x41065c\n            if ((*(char *)(2 * v97 + v96) & 32) != 0) {\n                // 0x410647\n                v98 = *(char *)(v97 + a1);\n                v99 = v98 % 64;\n                v100 = (int64_t *)((int64_t)(v98 / 8 & 24) + a2);\n                *v100 = (v99 == 0 ? 1 : 1 << (int64_t)v99) | *v100;\n            }\n            int64_t v101 = v97 + 1; // 0x41066a\n            while (v97 != 255) {\n                // 0x410640\n                v97 = v101;\n                if ((*(char *)(2 * v97 + v96) & 32) != 0) {\n                    // 0x410647\n                    v98 = *(char *)(v97 + a1);\n                    v99 = v98 % 64;\n                    v100 = (int64_t *)((int64_t)(v98 / 8 & 24) + a2);\n                    *v100 = (v99 == 0 ? 1 : 1 << (int64_t)v99) | *v100;\n                }\n                // 0x410660\n                v101 = v97 + 1;\n            }\n        } else {\n            int64_t v102 = 0;\n            int64_t * v103; // 0x410324\n            if ((*(char *)(2 * v102 + v96) & 32) != 0) {\n                // 0x410317\n                v103 = (int64_t *)(8 * (v102 >> 6) + a2);\n                *v103 = *v103 | 1 << v102 % 64;\n            }\n            int64_t v104 = v102 + 1; // 0x410333\n            while (v102 != 255) {\n                // 0x410310\n                v102 = v104;\n                if ((*(char *)(2 * v102 + v96) & 32) != 0) {\n                    // 0x410317\n                    v103 = (int64_t *)(8 * (v102 >> 6) + a2);\n                    *v103 = *v103 | 1 << v102 % 64;\n                }\n                // 0x410328\n                v104 = v102 + 1;\n            }\n        }\n        // 0x410206\n        return 0;\n    }\n    unsigned char v105 = *(char *)v94; // 0x41038f\n    char v106 = *(char *)v93; // 0x41038f\n    char v107 = v106; // 0x41038f\n    bool v108 = false; // 0x41038f\n    while (v105 == v106) {\n        int64_t v109 = v95 - 1; // 0x41038f\n        v93 += v30;\n        v94 += v30;\n        v95 = v109;\n        v107 = v105;\n        v108 = true;\n        if (v109 == 0) {\n            // break -> \n            break;\n        }\n        v105 = *(char *)v94;\n        v106 = *(char *)v93;\n        v107 = v106;\n        v108 = false;\n    }\n    unsigned char v110 = v107;\n    int64_t v111 = (int64_t)\"digit\"; // 0x410398\n    int64_t v112 = v4; // 0x410398\n    int64_t v113 = 6; // 0x410398\n    if ((v105 >= v110 && !v108) == v105 < v110) {\n        int64_t v114 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v115 = 0;\n            unsigned char v116; // 0x410614\n            unsigned char v117; // 0x410120\n            int64_t * v118; // 0x410629\n            if ((*(char *)(2 * v115 + v114) & 4) != 0) {\n                // 0x410614\n                v116 = *(char *)(v115 + a1);\n                v117 = v116 % 64;\n                v118 = (int64_t *)((int64_t)(v116 / 8 & 24) + a2);\n                *v118 = (v117 == 0 ? 1 : 1 << (int64_t)v117) | *v118;\n            }\n            int64_t v119 = v115 + 1; // 0x410637\n            while (v115 != 255) {\n                // 0x41060d\n                v115 = v119;\n                if ((*(char *)(2 * v115 + v114) & 4) != 0) {\n                    // 0x410614\n                    v116 = *(char *)(v115 + a1);\n                    v117 = v116 % 64;\n                    v118 = (int64_t *)((int64_t)(v116 / 8 & 24) + a2);\n                    *v118 = (v117 == 0 ? 1 : 1 << (int64_t)v117) | *v118;\n                }\n                // 0x41062d\n                v119 = v115 + 1;\n            }\n        } else {\n            int64_t v120 = 0;\n            int64_t * v121; // 0x41042c\n            if ((*(char *)(2 * v120 + v114) & 4) != 0) {\n                // 0x41041f\n                v121 = (int64_t *)(8 * (v120 >> 6) + a2);\n                *v121 = *v121 | 1 << v120 % 64;\n            }\n            int64_t v122 = v120 + 1; // 0x41043b\n            while (v120 != 255) {\n                // 0x410418\n                v120 = v122;\n                if ((*(char *)(2 * v120 + v114) & 4) != 0) {\n                    // 0x41041f\n                    v121 = (int64_t *)(8 * (v120 >> 6) + a2);\n                    *v121 = *v121 | 1 << v120 % 64;\n                }\n                // 0x410430\n                v122 = v120 + 1;\n            }\n        }\n        // 0x410206\n        return 0;\n    }\n    unsigned char v123 = *(char *)v112; // 0x4103a7\n    char v124 = *(char *)v111; // 0x4103a7\n    char v125 = v124; // 0x4103a7\n    bool v126 = false; // 0x4103a7\n    while (v123 == v124) {\n        // 0x41039a\n        v113--;\n        v111 += v30;\n        v112 += v30;\n        v125 = v123;\n        v126 = true;\n        if (v113 == 0) {\n            // break -> \n            break;\n        }\n        v123 = *(char *)v112;\n        v124 = *(char *)v111;\n        v125 = v124;\n        v126 = false;\n    }\n    unsigned char v127 = v125;\n    int64_t v128 = (int64_t)\"print\"; // 0x4103b0\n    int64_t v129 = v4; // 0x4103b0\n    int64_t v130 = 6; // 0x4103b0\n    if ((v123 >= v127 && !v126) == v123 < v127) {\n        int64_t v131 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v132 = 0;\n            unsigned char v133; // 0x41067a\n            unsigned char v134; // 0x410120\n            int64_t * v135; // 0x41068f\n            if ((*(char *)(2 * v132 + v131) & 8) != 0) {\n                // 0x41067a\n                v133 = *(char *)(v132 + a1);\n                v134 = v133 % 64;\n                v135 = (int64_t *)((int64_t)(v133 / 8 & 24) + a2);\n                *v135 = (v134 == 0 ? 1 : 1 << (int64_t)v134) | *v135;\n            }\n            int64_t v136 = v132 + 1; // 0x41069d\n            while (v132 != 255) {\n                // 0x410673\n                v132 = v136;\n                if ((*(char *)(2 * v132 + v131) & 8) != 0) {\n                    // 0x41067a\n                    v133 = *(char *)(v132 + a1);\n                    v134 = v133 % 64;\n                    v135 = (int64_t *)((int64_t)(v133 / 8 & 24) + a2);\n                    *v135 = (v134 == 0 ? 1 : 1 << (int64_t)v134) | *v135;\n                }\n                // 0x410693\n                v136 = v132 + 1;\n            }\n        } else {\n            int64_t v137 = 0;\n            int64_t * v138; // 0x4103e4\n            if ((*(char *)(2 * v137 + v131) & 8) != 0) {\n                // 0x4103d7\n                v138 = (int64_t *)(8 * (v137 >> 6) + a2);\n                *v138 = *v138 | 1 << v137 % 64;\n            }\n            int64_t v139 = v137 + 1; // 0x4103f3\n            while (v137 != 255) {\n                // 0x4103d0\n                v137 = v139;\n                if ((*(char *)(2 * v137 + v131) & 8) != 0) {\n                    // 0x4103d7\n                    v138 = (int64_t *)(8 * (v137 >> 6) + a2);\n                    *v138 = *v138 | 1 << v137 % 64;\n                }\n                // 0x4103e8\n                v139 = v137 + 1;\n            }\n        }\n        // 0x410206\n        return 0;\n    }\n    unsigned char v140 = *(char *)v129; // 0x4104f6\n    char v141 = *(char *)v128; // 0x4104f6\n    char v142 = v141; // 0x4104f6\n    bool v143 = false; // 0x4104f6\n    while (v140 == v141) {\n        int64_t v144 = v130 - 1; // 0x4104f6\n        v128 += v30;\n        v129 += v30;\n        v130 = v144;\n        v142 = v140;\n        v143 = true;\n        if (v144 == 0) {\n            // break -> \n            break;\n        }\n        v140 = *(char *)v129;\n        v141 = *(char *)v128;\n        v142 = v141;\n        v143 = false;\n    }\n    unsigned char v145 = v142;\n    int64_t v146 = (int64_t)\"upper\"; // 0x4104ff\n    int64_t v147 = v4; // 0x4104ff\n    int64_t v148 = 6; // 0x4104ff\n    if ((v140 >= v145 && !v143) == v140 < v145) {\n        int64_t v149 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v150 = 0;\n            unsigned char v151; // 0x410851\n            unsigned char v152; // 0x410120\n            int64_t * v153; // 0x410866\n            if ((*(char *)(2 * v150 + v149) & 64) != 0) {\n                // 0x410851\n                v151 = *(char *)(v150 + a1);\n                v152 = v151 % 64;\n                v153 = (int64_t *)((int64_t)(v151 / 8 & 24) + a2);\n                *v153 = (v152 == 0 ? 1 : 1 << (int64_t)v152) | *v153;\n            }\n            int64_t v154 = v150 + 1; // 0x410874\n            while (v150 != 255) {\n                // 0x41084a\n                v150 = v154;\n                if ((*(char *)(2 * v150 + v149) & 64) != 0) {\n                    // 0x410851\n                    v151 = *(char *)(v150 + a1);\n                    v152 = v151 % 64;\n                    v153 = (int64_t *)((int64_t)(v151 / 8 & 24) + a2);\n                    *v153 = (v152 == 0 ? 1 : 1 << (int64_t)v152) | *v153;\n                }\n                // 0x41086a\n                v154 = v150 + 1;\n            }\n        } else {\n            int64_t v155 = 0;\n            int64_t * v156; // 0x410534\n            if ((*(char *)(2 * v155 + v149) & 64) != 0) {\n                // 0x410527\n                v156 = (int64_t *)(8 * (v155 >> 6) + a2);\n                *v156 = *v156 | 1 << v155 % 64;\n            }\n            int64_t v157 = v155 + 1; // 0x410543\n            while (v155 != 255) {\n                // 0x410520\n                v155 = v157;\n                if ((*(char *)(2 * v155 + v149) & 64) != 0) {\n                    // 0x410527\n                    v156 = (int64_t *)(8 * (v155 >> 6) + a2);\n                    *v156 = *v156 | 1 << v155 % 64;\n                }\n                // 0x410538\n                v157 = v155 + 1;\n            }\n        }\n        // 0x410206\n        return 0;\n    }\n    unsigned char v158 = *(char *)v147; // 0x410557\n    char v159 = *(char *)v146; // 0x410557\n    char v160 = v159; // 0x410557\n    bool v161 = false; // 0x410557\n    while (v158 == v159) {\n        int64_t v162 = v148 - 1; // 0x410557\n        v146 += v30;\n        v147 += v30;\n        v148 = v162;\n        v160 = v158;\n        v161 = true;\n        if (v162 == 0) {\n            // break -> \n            break;\n        }\n        v158 = *(char *)v147;\n        v159 = *(char *)v146;\n        v160 = v159;\n        v161 = false;\n    }\n    unsigned char v163 = v160;\n    int64_t v164 = (int64_t)\"blank\"; // 0x410560\n    int64_t v165 = v4; // 0x410560\n    int64_t v166 = 6; // 0x410560\n    if ((v158 >= v163 && !v161) == v158 < v163) {\n        int64_t v167 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v168 = 0;\n            unsigned char v169; // 0x4108bb\n            unsigned char v170; // 0x410120\n            int64_t * v171; // 0x4108d0\n            if (*(char *)(2 * v168 + v167) % 2 != 0) {\n                // 0x4108bb\n                v169 = *(char *)(v168 + a1);\n                v170 = v169 % 64;\n                v171 = (int64_t *)((int64_t)(v169 / 8 & 24) + a2);\n                *v171 = (v170 == 0 ? 1 : 1 << (int64_t)v170) | *v171;\n            }\n            int64_t v172 = v168 + 1; // 0x4108df\n            while (v168 != 255) {\n                // 0x4108b4\n                v168 = v172;\n                if (*(char *)(2 * v168 + v167) % 2 != 0) {\n                    // 0x4108bb\n                    v169 = *(char *)(v168 + a1);\n                    v170 = v169 % 64;\n                    v171 = (int64_t *)((int64_t)(v169 / 8 & 24) + a2);\n                    *v171 = (v170 == 0 ? 1 : 1 << (int64_t)v170) | *v171;\n                }\n                // 0x4108d4\n                v172 = v168 + 1;\n            }\n        } else {\n            int64_t v173 = 0;\n            int64_t * v174; // 0x41058e\n            if (*(char *)(2 * v173 + v167) % 2 != 0) {\n                // 0x410581\n                v174 = (int64_t *)(8 * (v173 >> 6) + a2);\n                *v174 = *v174 | 1 << v173 % 64;\n            }\n            int64_t v175 = v173 + 1; // 0x41059d\n            while (v173 != 255) {\n                // 0x41057a\n                v173 = v175;\n                if (*(char *)(2 * v173 + v167) % 2 != 0) {\n                    // 0x410581\n                    v174 = (int64_t *)(8 * (v173 >> 6) + a2);\n                    *v174 = *v174 | 1 << v173 % 64;\n                }\n                // 0x410592\n                v175 = v173 + 1;\n            }\n        }\n        // 0x410206\n        return 0;\n    }\n    unsigned char v176 = *(char *)v165; // 0x4105bb\n    char v177 = *(char *)v164; // 0x4105bb\n    char v178 = v177; // 0x4105bb\n    bool v179 = false; // 0x4105bb\n    while (v176 == v177) {\n        int64_t v180 = v166 - 1; // 0x4105bb\n        v164 += v30;\n        v165 += v30;\n        v166 = v180;\n        v178 = v176;\n        v179 = true;\n        if (v180 == 0) {\n            // break -> \n            break;\n        }\n        v176 = *(char *)v165;\n        v177 = *(char *)v164;\n        v178 = v177;\n        v179 = false;\n    }\n    unsigned char v181 = v178;\n    int64_t v182 = (int64_t)\"graph\"; // 0x4105c4\n    int64_t v183 = v4; // 0x4105c4\n    int64_t v184 = 6; // 0x4105c4\n    if ((v176 >= v181 && !v179) == v176 < v181) {\n        int64_t v185 = (int64_t)*__ctype_b_loc(); // 0x4105d6\n        if (a1 != 0) {\n            int64_t v186 = 0;\n            unsigned char v187; // 0x410888\n            unsigned char v188; // 0x410120\n            int64_t * v189; // 0x41089d\n            if (*(char *)(2 * v186 + v185) % 2 != 0) {\n                // 0x410888\n                v187 = *(char *)(v186 + a1);\n                v188 = v187 % 64;\n                v189 = (int64_t *)((int64_t)(v187 / 8 & 24) + a2);\n                *v189 = (v188 == 0 ? 1 : 1 << (int64_t)v188) | *v189;\n            }\n            int64_t v190 = v186 + 1; // 0x4108ab\n            while (v186 != 255) {\n                // 0x410882\n                v186 = v190;\n                if (*(char *)(2 * v186 + v185) % 2 != 0) {\n                    // 0x410888\n                    v187 = *(char *)(v186 + a1);\n                    v188 = v187 % 64;\n                    v189 = (int64_t *)((int64_t)(v187 / 8 & 24) + a2);\n                    *v189 = (v188 == 0 ? 1 : 1 << (int64_t)v188) | *v189;\n                }\n                // 0x4108a1\n                v190 = v186 + 1;\n            }\n        } else {\n            int64_t v191 = 0;\n            int64_t * v192; // 0x4105f5\n            if (*(char *)(2 * v191 + v185) % 2 != 0) {\n                // 0x4105e8\n                v192 = (int64_t *)(8 * (v191 >> 6) + a2);\n                *v192 = *v192 | 1 << v191 % 64;\n            }\n            int64_t v193 = v191 + 1; // 0x410604\n            while (v191 != 255) {\n                // 0x4105e2\n                v191 = v193;\n                if (*(char *)(2 * v191 + v185) % 2 != 0) {\n                    // 0x4105e8\n                    v192 = (int64_t *)(8 * (v191 >> 6) + a2);\n                    *v192 = *v192 | 1 << v191 % 64;\n                }\n                // 0x4105f9\n                v193 = v191 + 1;\n            }\n        }\n        // 0x410206\n        return 0;\n    }\n    unsigned char v194 = *(char *)v183; // 0x4106b1\n    char v195 = *(char *)v182; // 0x4106b1\n    char v196 = v195; // 0x4106b1\n    bool v197 = false; // 0x4106b1\n    while (v194 == v195) {\n        int64_t v198 = v184 - 1; // 0x4106b1\n        v182 += v30;\n        v183 += v30;\n        v184 = v198;\n        v196 = v194;\n        v197 = true;\n        if (v198 == 0) {\n            // break -> \n            break;\n        }\n        v194 = *(char *)v183;\n        v195 = *(char *)v182;\n        v196 = v195;\n        v197 = false;\n    }\n    unsigned char v199 = v196;\n    if ((v194 >= v199 && !v197) == v194 < v199) {\n        int64_t v200 = (int64_t)*__ctype_b_loc(); // 0x4106c8\n        if (a1 != 0) {\n            int64_t v201 = 0;\n            unsigned char v202; // 0x410708\n            unsigned char v203; // 0x410120\n            int64_t * v204; // 0x41071d\n            if (*(int16_t *)(2 * v201 + v200) < 0) {\n                // 0x410708\n                v202 = *(char *)(v201 + a1);\n                v203 = v202 % 64;\n                v204 = (int64_t *)((int64_t)(v202 / 8 & 24) + a2);\n                *v204 = (v203 == 0 ? 1 : 1 << (int64_t)v203) | *v204;\n            }\n            int64_t v205 = v201 + 1; // 0x41072b\n            while (v201 != 255) {\n                // 0x410701\n                v201 = v205;\n                if (*(int16_t *)(2 * v201 + v200) < 0) {\n                    // 0x410708\n                    v202 = *(char *)(v201 + a1);\n                    v203 = v202 % 64;\n                    v204 = (int64_t *)((int64_t)(v202 / 8 & 24) + a2);\n                    *v204 = (v203 == 0 ? 1 : 1 << (int64_t)v203) | *v204;\n                }\n                // 0x410721\n                v205 = v201 + 1;\n            }\n        } else {\n            int64_t v206 = 0;\n            int64_t * v207; // 0x4106e4\n            if (*(int16_t *)(2 * v206 + v200) < 0) {\n                // 0x4106d7\n                v207 = (int64_t *)(8 * (v206 >> 6) + a2);\n                *v207 = *v207 | 1 << v206 % 64;\n            }\n            int64_t v208 = v206 + 1; // 0x4106f3\n            while (v206 != 255) {\n                // 0x4106d0\n                v206 = v208;\n                if (*(int16_t *)(2 * v206 + v200) < 0) {\n                    // 0x4106d7\n                    v207 = (int64_t *)(8 * (v206 >> 6) + a2);\n                    *v207 = *v207 | 1 << v206 % 64;\n                }\n                // 0x4106e8\n                v208 = v206 + 1;\n            }\n        }\n        // 0x410206\n        return 0;\n    }\n    // 0x410732\n    if (strcmp(name, \"punct\") == 0) {\n        int64_t v209 = (int64_t)*__ctype_b_loc(); // 0x41074f\n        if (a1 != 0) {\n            int64_t v210 = 0;\n            unsigned char v211; // 0x41078d\n            unsigned char v212; // 0x410120\n            int64_t * v213; // 0x4107a2\n            if ((*(char *)(2 * v210 + v209) & 4) != 0) {\n                // 0x41078d\n                v211 = *(char *)(v210 + a1);\n                v212 = v211 % 64;\n                v213 = (int64_t *)((int64_t)(v211 / 8 & 24) + a2);\n                *v213 = (v212 == 0 ? 1 : 1 << (int64_t)v212) | *v213;\n            }\n            int64_t v214 = v210 + 1; // 0x4107b0\n            while (v210 != 255) {\n                // 0x410787\n                v210 = v214;\n                if ((*(char *)(2 * v210 + v209) & 4) != 0) {\n                    // 0x41078d\n                    v211 = *(char *)(v210 + a1);\n                    v212 = v211 % 64;\n                    v213 = (int64_t *)((int64_t)(v211 / 8 & 24) + a2);\n                    *v213 = (v212 == 0 ? 1 : 1 << (int64_t)v212) | *v213;\n                }\n                // 0x4107a6\n                v214 = v210 + 1;\n            }\n        } else {\n            int64_t v215 = 0;\n            int64_t * v216; // 0x41076a\n            if ((*(char *)(2 * v215 + v209) & 4) != 0) {\n                // 0x41075d\n                v216 = (int64_t *)(8 * (v215 >> 6) + a2);\n                *v216 = *v216 | 1 << v215 % 64;\n            }\n            int64_t v217 = v215 + 1; // 0x410779\n            while (v215 != 255) {\n                // 0x410757\n                v215 = v217;\n                if ((*(char *)(2 * v215 + v209) & 4) != 0) {\n                    // 0x41075d\n                    v216 = (int64_t *)(8 * (v215 >> 6) + a2);\n                    *v216 = *v216 | 1 << v215 % 64;\n                }\n                // 0x41076e\n                v217 = v215 + 1;\n            }\n        }\n        // 0x410206\n        return 0;\n    }\n    // 0x4107b7\n    if (strcmp(name, \"xdigit\") != 0) {\n        // 0x410206\n        return 4;\n    }\n    int64_t v218 = (int64_t)*__ctype_b_loc() + 1;\n    if (a1 == 0) {\n        int64_t v219 = 0;\n        int64_t * v220; // 0x4107f0\n        if ((*(char *)(2 * v219 + v218) & 16) != 0) {\n            // 0x4107e3\n            v220 = (int64_t *)(8 * (v219 >> 6) + a2);\n            *v220 = *v220 | 1 << v219 % 64;\n        }\n        int64_t v221 = v219 + 1; // 0x4107ff\n        while (v219 != 255) {\n            // 0x4107dc\n            v219 = v221;\n            if ((*(char *)(2 * v219 + v218) & 16) != 0) {\n                // 0x4107e3\n                v220 = (int64_t *)(8 * (v219 >> 6) + a2);\n                *v220 = *v220 | 1 << v219 % 64;\n            }\n            // 0x4107f4\n            v221 = v219 + 1;\n        }\n        // 0x410206\n        return 0;\n    }\n    int64_t v222 = 0;\n    unsigned char v223; // 0x410814\n    unsigned char v224; // 0x410120\n    int64_t * v225; // 0x410829\n    if ((*(char *)(2 * v222 + v218) & 16) != 0) {\n        // 0x410814\n        v223 = *(char *)(v222 + a1);\n        v224 = v223 % 64;\n        v225 = (int64_t *)((int64_t)(v223 / 8 & 24) + a2);\n        *v225 = (v224 == 0 ? 1 : 1 << (int64_t)v224) | *v225;\n    }\n    int64_t v226 = v222 + 1; // 0x410837\n    while (v222 != 255) {\n        // 0x41080d\n        v222 = v226;\n        if ((*(char *)(2 * v222 + v218) & 16) != 0) {\n            // 0x410814\n            v223 = *(char *)(v222 + a1);\n            v224 = v223 % 64;\n            v225 = (int64_t *)((int64_t)(v223 / 8 & 24) + a2);\n            *v225 = (v224 == 0 ? 1 : 1 << (int64_t)v224) | *v225;\n        }\n        // 0x41082d\n        v226 = v222 + 1;\n    }\n    // 0x410206\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4108f0",
            "funcStartAddr": "4108f0",
            "funcEndAddr": "410b25",
            "decompiledFuncCode": "int64_t function_4108f0(int64_t a1, int64_t a2, char * a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 0; // bp-96, 0x41091d\n    int64_t * mem = calloc(32, 1); // 0x410926\n    if (mem == NULL) {\n        // 0x410ac0\n        *(int32_t *)a6 = 12;\n        // 0x410a99\n        return 0;\n    }\n    int64_t * mem2 = calloc(80, 1); // 0x410941\n    if (mem2 == NULL) {\n        // 0x410ae0\n        free(mem);\n        *(int32_t *)a6 = 12;\n        // 0x410a99\n        return 0;\n    }\n    int64_t v2 = (int64_t)mem; // 0x410926\n    int64_t v3 = (int64_t)mem2; // 0x410941\n    char * v4 = (char *)(v3 + 32); // 0x410956\n    unsigned char v5 = (char)a5; // 0x41095a\n    *v4 = *v4 & -2 | v5 % 2;\n    int64_t v6 = function_410120(a2, v2, v3 + 24, v3 + 72, &v1, (int64_t)a3, 0); // 0x410983\n    int32_t v7 = v6; // 0x41098a\n    if (v7 != 0) {\n        // 0x410b00\n        free(mem);\n        function_40bef0(v3);\n        *(int32_t *)a6 = v7;\n        // 0x410a99\n        return 0;\n    }\n    // 0x410992\n    int64_t v8; // 0x4108f0\n    char v9 = *(char *)&v8; // 0x410992\n    int64_t v10 = v9; // 0x410992\n    v8 = v10;\n    v8 = v10;\n    int64_t v11 = (int64_t)a4; // 0x41099e\n    if (v9 != 0) {\n        int64_t v12 = v8;\n        v11++;\n        char v13 = *(char *)v11; // 0x4109cd\n        v8 = v13;\n        int64_t * v14 = (int64_t *)(8 * ((v12 >= 0 ? v12 : v12 + 63) >> 6) + v2); // 0x4109d2\n        *v14 = *v14 | 1 << v12 % 64;\n        while (v13 != 0) {\n            v12 = v8;\n            v11++;\n            v13 = *(char *)v11;\n            v8 = v13;\n            v14 = (int64_t *)(8 * ((v12 >= 0 ? v12 : v12 + 63) >> 6) + v2);\n            *v14 = *v14 | 1 << v12 % 64;\n        }\n    }\n    if (v5 != 0) {\n        int64_t v15 = v2;\n        int64_t * v16 = (int64_t *)v15; // 0x4109e6\n        *v16 = -1 - *v16;\n        int64_t v17 = v15 + 8; // 0x4109f0\n        while (v2 + 24 != v15) {\n            // 0x4109e6\n            v15 = v17;\n            v16 = (int64_t *)v15;\n            *v16 = -1 - *v16;\n            v17 = v15 + 8;\n        }\n    }\n    int32_t * v18 = (int32_t *)(a1 + 180); // 0x4109f2\n    if (*v18 >= 2) {\n        int64_t v19 = *(int64_t *)(a1 + 120); // 0x4109fb\n        v8 = v19;\n        *mem = *mem & *(int64_t *)v19;\n        int64_t v20 = 0; // 0x410a09\n        v20 += 8;\n        int64_t * v21 = (int64_t *)(v20 + v2); // 0x410a05\n        *v21 = *v21 & *(int64_t *)(v20 + v19);\n        while (v20 != 24) {\n            // 0x410a01\n            v20 += 8;\n            v21 = (int64_t *)(v20 + v2);\n            *v21 = *v21 & *(int64_t *)(v20 + v8);\n        }\n    }\n    int64_t v22 = a1 + 112; // 0x410a13\n    int64_t v23 = a1 + 128; // 0x410a17\n    v8 = 0;\n    int64_t v24; // bp-88, 0x4108f0\n    int64_t v25 = &v24; // 0x410a22\n    v24 = v2;\n    int64_t result = function_40d500(v22, v23, 0, 0, v25); // 0x410a37\n    if (result != 0) {\n        // 0x410a44\n        if (*v18 < 2) {\n            // 0x410ad0\n            function_40bef0(v3);\n            // 0x410a99\n            return result;\n        }\n        char * v26 = (char *)(a1 + 176); // 0x410a51\n        *v26 = *v26 | 2;\n        v24 = v3;\n        int64_t v27 = function_40d500(v22, v23, 0, 0, v25); // 0x410a71\n        if (v27 != 0) {\n            // 0x410a7b\n            int64_t v28; // bp-72, 0x4108f0\n            int64_t result2 = function_40d500(v22, v23, (int32_t)result, (int32_t)v27, (int64_t)&v28); // 0x410a91\n            // 0x410a99\n            return result2;\n        }\n    }\n    // 0x410ab0\n    free(mem);\n    function_40bef0(v3);\n    // 0x410ac0\n    *(int32_t *)a6 = 12;\n    // 0x410a99\n    return 0;\n}\n"
        },
        {
            "funcName": "function_410b30",
            "funcStartAddr": "410b30",
            "funcEndAddr": "411008",
            "decompiledFuncCode": "int64_t function_410b30(int64_t result, int64_t result2, int64_t a3, int64_t a4) {\n    int64_t v1 = a4;\n    int32_t * v2 = (int32_t *)(result + 180); // 0x410b47\n    int32_t v3 = 0; // 0x410b52\n    if (*v2 == 1) {\n        // 0x410b54\n        v3 = (int32_t)(*(int64_t *)(result + 24) / 0x400000) % 2;\n    }\n    // 0x410b63\n    if (result2 < 1) {\n        // 0x410d23\n        return result;\n    }\n    char * v4 = (char *)(result + 26);\n    int64_t * v5 = (int64_t *)(result + 16);\n    char wstr; // bp-312, 0x410b30\n    int64_t v6 = &wstr;\n    char ps; // bp-320, 0x410b30\n    int64_t v7 = &ps;\n    int64_t v8 = a3; // 0x410b81\n    int64_t v9 = 0; // 0x410b81\n    int64_t v10 = result; // 0x410b81\n    int64_t v11; // 0x410b30\n    int64_t v12; // 0x410b30\n    int64_t v13; // 0x410b30\n    int64_t v14; // 0x410b30\n    int64_t v15; // 0x410b30\n    int64_t v16; // 0x410b30\n    unsigned char v17; // 0x410be4\n    int64_t v18; // 0x410d39\n    while (true) {\n      lab_0x410bc1_2:\n        // 0x410bc1\n        v13 = v10;\n        v11 = v9;\n        int64_t v19 = *(int64_t *)(8 * v11 + v8); // 0x410bc9\n        v1 = v13;\n        int64_t v20 = 16 * v19; // 0x410bd7\n        v16 = v20 + v13;\n        v17 = *(char *)(v16 + 8);\n        if (v17 != 1) {\n            int64_t v21 = v17; // 0x410be4\n            char * v22 = NULL; // 0x410b30\n            int64_t v23 = v13; // 0x410b30\n            switch (v17) {\n                case 3: {\n                    int64_t v24 = (int64_t)v22; // 0x410e88\n                    int64_t v25 = *(int64_t *)(*(int64_t *)(v23 + v20) + v24); // 0x410e8d\n                    int64_t v26 = 0; // 0x410e99\n                    int64_t v27 = 8 * v24;\n                    int64_t v28 = v23;\n                    int64_t v29 = v28; // 0x410ea4\n                    char * v30; // 0x410b30\n                    char * v31; // 0x410b30\n                    int64_t v32; // 0x410eb4\n                    int32_t v33; // 0x410ecb\n                    if ((1 << v26 % 64 & v25) != 0) {\n                        // 0x410ea6\n                        v31 = (char *)(v27 + a4);\n                        *v31 = 1;\n                        v29 = v28;\n                        if (v3 != 0) {\n                            // 0x410eb4\n                            v32 = v27 + 128;\n                            v30 = v31;\n                            if ((int32_t)v32 < 384) {\n                                // 0x410ec3\n                                v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                v30 = (char *)((int64_t)v33 + a4);\n                            }\n                            // 0x410ed2\n                            *v30 = 1;\n                            v29 = v32 & 0xffffffff;\n                        }\n                    }\n                    int64_t v34 = v29;\n                    int64_t v35 = v27 + 1; // 0x410ed9\n                    v26 = v26 + 1 & 0xffffffff;\n                    while (8 * (int32_t)v24 + 64 != (int32_t)v35) {\n                        // 0x410ea0\n                        v27 = v35;\n                        v28 = v34;\n                        v29 = v28;\n                        if ((1 << v26 % 64 & v25) != 0) {\n                            // 0x410ea6\n                            v31 = (char *)(v27 + a4);\n                            *v31 = 1;\n                            v29 = v28;\n                            if (v3 != 0) {\n                                // 0x410eb4\n                                v32 = v27 + 128;\n                                v30 = v31;\n                                if ((int32_t)v32 < 384) {\n                                    // 0x410ec3\n                                    v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                    v30 = (char *)((int64_t)v33 + a4);\n                                }\n                                // 0x410ed2\n                                *v30 = 1;\n                                v29 = v32 & 0xffffffff;\n                            }\n                        }\n                        // 0x410ed5\n                        v34 = v29;\n                        v35 = v27 + 1;\n                        v26 = v26 + 1 & 0xffffffff;\n                    }\n                    // 0x410ee3\n                    v14 = v21;\n                    v15 = v16;\n                    v12 = v34;\n                    while (v22 != (char *)24) {\n                        // 0x410ef8\n                        v1 = v34;\n                        v22 = (char *)(v24 + 8);\n                        v24 = (int64_t)v22;\n                        v25 = *(int64_t *)(*(int64_t *)(v34 + v20) + v24);\n                        v26 = 0;\n                        v27 = 8 * v24;\n                        v28 = v34;\n                        v29 = v28;\n                        if ((1 << v26 % 64 & v25) != 0) {\n                            // 0x410ea6\n                            v31 = (char *)(v27 + a4);\n                            *v31 = 1;\n                            v29 = v28;\n                            if (v3 != 0) {\n                                // 0x410eb4\n                                v32 = v27 + 128;\n                                v30 = v31;\n                                if ((int32_t)v32 < 384) {\n                                    // 0x410ec3\n                                    v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                    v30 = (char *)((int64_t)v33 + a4);\n                                }\n                                // 0x410ed2\n                                *v30 = 1;\n                                v29 = v32 & 0xffffffff;\n                            }\n                        }\n                        // 0x410ed5\n                        v34 = v29;\n                        v35 = v27 + 1;\n                        v26 = v26 + 1 & 0xffffffff;\n                        while (8 * (int32_t)v24 + 64 != (int32_t)v35) {\n                            // 0x410ea0\n                            v27 = v35;\n                            v28 = v34;\n                            v29 = v28;\n                            if ((1 << v26 % 64 & v25) != 0) {\n                                // 0x410ea6\n                                v31 = (char *)(v27 + a4);\n                                *v31 = 1;\n                                v29 = v28;\n                                if (v3 != 0) {\n                                    // 0x410eb4\n                                    v32 = v27 + 128;\n                                    v30 = v31;\n                                    if ((int32_t)v32 < 384) {\n                                        // 0x410ec3\n                                        v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                        v30 = (char *)((int64_t)v33 + a4);\n                                    }\n                                    // 0x410ed2\n                                    *v30 = 1;\n                                    v29 = v32 & 0xffffffff;\n                                }\n                            }\n                            // 0x410ed5\n                            v34 = v29;\n                            v35 = v27 + 1;\n                            v26 = v26 + 1 & 0xffffffff;\n                        }\n                        // 0x410ee3\n                        v14 = v21;\n                        v15 = v16;\n                        v12 = v34;\n                    }\n                    goto lab_0x410baf;\n                }\n                case 6: {\n                    // 0x410d35\n                    v18 = *(int64_t *)v16;\n                    if (*v2 < 2) {\n                        goto lab_0x410d66;\n                    } else {\n                        // 0x410d45\n                        if (*(int64_t *)(v18 + 72) != 0) {\n                            goto lab_0x410e2c;\n                        } else {\n                            // 0x410d50\n                            if (*(char *)(v18 + 32) % 2 != 0) {\n                                goto lab_0x410e2c;\n                            } else {\n                                // 0x410d5b\n                                if (*(int64_t *)(v18 + 64) != 0) {\n                                    goto lab_0x410e2c;\n                                } else {\n                                    goto lab_0x410d66;\n                                }\n                            }\n                        }\n                    }\n                }\n                default: {\n                    int64_t v36 = v21 & 253; // 0x410b9a\n                    if (v36 == 5) {\n                        // break -> 0x410f04\n                        break;\n                    }\n                    // 0x410ba6\n                    v14 = v36;\n                    v15 = v16;\n                    v12 = v13;\n                    if (v17 == 2) {\n                        int128_t v37 = __asm_movdqa(g22); // 0x410f80\n                        __asm_movups(*(int128_t *)&v1, v37);\n                        __asm_movups(*(int128_t *)(a4 + 16), v37);\n                        __asm_movups(*(int128_t *)(a4 + 32), v37);\n                        __asm_movups(*(int128_t *)(a4 + 48), v37);\n                        __asm_movups(*(int128_t *)(a4 + 64), v37);\n                        __asm_movups(*(int128_t *)(a4 + 80), v37);\n                        __asm_movups(*(int128_t *)(a4 + 96), v37);\n                        __asm_movups(*(int128_t *)(a4 + 112), v37);\n                        __asm_movups(*(int128_t *)(a4 + 128), v37);\n                        __asm_movups(*(int128_t *)(a4 + 144), v37);\n                        __asm_movups(*(int128_t *)(a4 + 160), v37);\n                        __asm_movups(*(int128_t *)(a4 + 176), v37);\n                        __asm_movups(*(int128_t *)(a4 + 192), v37);\n                        __asm_movups(*(int128_t *)(a4 + 208), v37);\n                        __asm_movups(*(int128_t *)(a4 + 224), v37);\n                        __asm_movups(*(int128_t *)(a4 + 240), v37);\n                        goto lab_0x410fef;\n                    }\n                    goto lab_0x410baf;\n                }\n            }\n        } else {\n            char * v38 = (char *)v16; // 0x410bef\n            int64_t v39 = (int64_t)*v38; // 0x410bef\n            *(char *)(v39 + a4) = 1;\n            if (v3 != 0) {\n                int32_t v40 = *(int32_t *)(4 * v39 + (int64_t)*__ctype_tolower_loc()); // 0x410c0e\n                *(char *)((int64_t)v40 + a4) = 1;\n            }\n            // 0x410c17\n            v14 = v39;\n            v15 = v16;\n            v12 = v13;\n            if ((*v4 & 64) == 0) {\n                goto lab_0x410baf;\n            } else {\n                // 0x410c22\n                v14 = v39;\n                v15 = v16;\n                v12 = v13;\n                if (*v2 < 2) {\n                    goto lab_0x410baf;\n                } else {\n                    // 0x410c2f\n                    v1 = v20;\n                    wstr = *v38;\n                    int64_t v41 = v19 + 1; // 0x410c42\n                    int64_t v42 = 1; // 0x410c4a\n                    if (*v5 > v41) {\n                        // 0x410c50\n                        v42 = 1;\n                        if ((*(int32_t *)(v16 + 24) & 0x2000ff) == 0x200001) {\n                            int64_t v43 = v41; // 0x410c9e\n                            int64_t v44; // bp-311, 0x410b30\n                            int64_t v45 = &v44; // 0x410b30\n                            int64_t v46 = v45 + 1; // 0x410c9a\n                            v43++;\n                            *(char *)v45 = *(char *)(v16 + 16);\n                            while (*v5 > v43) {\n                                int64_t v47 = 16 * v43 + v13; // 0x410c83\n                                v45 = v46;\n                                if ((*(int32_t *)(v47 + 8) & 0x2000ff) != 0x200001) {\n                                    // break -> 0x410caf\n                                    break;\n                                }\n                                v46 = v45 + 1;\n                                v43++;\n                                *(char *)v45 = *(char *)v47;\n                            }\n                            // 0x410caf\n                            v42 = v46 - v6;\n                        }\n                    }\n                    // 0x410cba\n                    ps = 0;\n                    int32_t wc; // bp-324, 0x410b30\n                    int64_t v48 = function_40ab50((int64_t *)&wc, v6, v42); // 0x410cd5\n                    v14 = v42;\n                    v15 = v6;\n                    v12 = &wc;\n                    if (v48 != v42) {\n                        goto lab_0x410baf;\n                    } else {\n                        uint32_t wc2 = towlower(wc); // 0x410ce7\n                        int64_t v49 = wc2; // 0x410cf6\n                        int32_t v50 = wcrtomb(&wstr, wc2, (struct _TYPEDEF___mbstate_t *)&ps); // 0x410cf8\n                        v14 = v7;\n                        v15 = v49;\n                        v12 = v6;\n                        if (v50 == -1) {\n                            goto lab_0x410baf;\n                        } else {\n                            int64_t v51 = v11 + 1; // 0x410d0c\n                            *(char *)((int64_t)wstr + a4) = 1;\n                            v8 = v7;\n                            v9 = v51;\n                            v10 = v6;\n                            if (v51 >= v49) {\n                                // 0x410d23\n                                return result2;\n                            }\n                            goto lab_0x410bc1_2;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (v17 != 2) {\n        // 0x410d23\n    }\n  lab_0x410baf:;\n    int64_t v52 = v11 + 1; // 0x410bb4\n    v8 = v14;\n    v9 = v52;\n    v10 = v12;\n    if (v52 >= v15) {\n        // 0x410d23\n        return result2;\n    }\n    goto lab_0x410bc1_2;\n  lab_0x410d66:;\n    int64_t * v53 = (int64_t *)(v18 + 40); // 0x410d69\n    int64_t v54 = *v53; // 0x410d69\n    v14 = 6;\n    v15 = v16;\n    v12 = v13;\n    if (v54 >= 0 == (v54 != 0)) {\n        int64_t * v55 = (int64_t *)v18; // 0x410d8f\n        int64_t v56 = 0; // 0x410d78\n        ps = 0;\n        int64_t v57 = 4 * v56; // 0x410d9d\n        uint32_t wc3 = *(int32_t *)(*v55 + v57); // 0x410da5\n        int32_t v58 = wcrtomb(&wstr, wc3, (struct _TYPEDEF___mbstate_t *)&ps); // 0x410da9\n        int64_t v59 = v7; // 0x410db2\n        int32_t v60; // 0x410dd5\n        int64_t v61; // 0x410db4\n        if (v58 != -1) {\n            // 0x410db4\n            v61 = wstr;\n            *(char *)(v61 + a4) = 1;\n            v59 = v61;\n            if (v3 != 0) {\n                // 0x410dc8\n                v60 = *(int32_t *)(4 * v61 + (int64_t)*__ctype_tolower_loc());\n                *(char *)((int64_t)v60 + a4) = 1;\n                v59 = v61;\n            }\n        }\n        int64_t v62 = wc3; // 0x410da5\n        int64_t v63 = v59;\n        int64_t v64 = v63; // 0x410de7\n        int64_t v65 = v62; // 0x410de7\n        uint32_t wc4; // 0x410dfd\n        int64_t v66; // 0x410e0c\n        int32_t v67; // 0x410e0e\n        if ((*v4 & 64) != 0) {\n            // 0x410de9\n            v64 = v63;\n            v65 = v62;\n            if (*v2 >= 2) {\n                // 0x410df6\n                wc4 = towlower(*(int32_t *)(*v55 + v57));\n                v66 = wc4;\n                v67 = wcrtomb(&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps);\n                v64 = v7;\n                v65 = v66;\n                if (v67 != -1) {\n                    // 0x410e1d\n                    *(char *)((int64_t)wstr + a4) = 1;\n                    v64 = v7;\n                    v65 = v66;\n                }\n            }\n        }\n        // 0x410d78\n        v56++;\n        v14 = v64;\n        v15 = v65;\n        v12 = v6;\n        while (v56 < *v53) {\n            // 0x410d86\n            ps = 0;\n            v57 = 4 * v56;\n            wc3 = *(int32_t *)(*v55 + v57);\n            v58 = wcrtomb(&wstr, wc3, (struct _TYPEDEF___mbstate_t *)&ps);\n            v59 = v7;\n            if (v58 != -1) {\n                // 0x410db4\n                v61 = wstr;\n                *(char *)(v61 + a4) = 1;\n                v59 = v61;\n                if (v3 != 0) {\n                    // 0x410dc8\n                    v60 = *(int32_t *)(4 * v61 + (int64_t)*__ctype_tolower_loc());\n                    *(char *)((int64_t)v60 + a4) = 1;\n                    v59 = v61;\n                }\n            }\n            // 0x410dde\n            v62 = wc3;\n            v63 = v59;\n            v64 = v63;\n            v65 = v62;\n            if ((*v4 & 64) != 0) {\n                // 0x410de9\n                v64 = v63;\n                v65 = v62;\n                if (*v2 >= 2) {\n                    // 0x410df6\n                    wc4 = towlower(*(int32_t *)(*v55 + v57));\n                    v66 = wc4;\n                    v67 = wcrtomb(&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps);\n                    v64 = v7;\n                    v65 = v66;\n                    if (v67 != -1) {\n                        // 0x410e1d\n                        *(char *)((int64_t)wstr + a4) = 1;\n                        v64 = v7;\n                        v65 = v66;\n                    }\n                }\n            }\n            // 0x410d78\n            v56++;\n            v14 = v64;\n            v15 = v65;\n            v12 = v6;\n        }\n    }\n    goto lab_0x410baf;\n    // 0x410bc1\n    goto lab_0x410bc1_2;\n  lab_0x410e2c:\n    // 0x410e2c\n    ps = 0;\n    wstr = 0;\n    if (function_40ab50(NULL, v7, 1) == -2) {\n        // 0x410e5d\n        *(char *)((int64_t)ps + a4) = 1;\n    }\n    char v68 = ps + 1; // 0x410e67\n    ps = v68;\n    v14 = 1;\n    v15 = v7;\n    v12 = 0;\n    while (v68 != 0) {\n        // 0x410e38\n        wstr = 0;\n        if (function_40ab50(NULL, v7, 1) == -2) {\n            // 0x410e5d\n            *(char *)((int64_t)ps + a4) = 1;\n        }\n        // 0x410e67\n        v68 = ps + 1;\n        ps = v68;\n        v14 = 1;\n        v15 = v7;\n        v12 = 0;\n    }\n    goto lab_0x410baf;\n  lab_0x410fef:;\n    char * v69 = (char *)(result + 56); // 0x410ff4\n    *v69 = *v69 | 1;\n    // 0x410d23\n    return result;\n}\n"
        },
        {
            "funcName": "function_411010",
            "funcStartAddr": "411010",
            "funcEndAddr": "411294",
            "decompiledFuncCode": "int64_t function_411010(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = 16 * a3 + a1; // 0x411018\n    char v2 = *(char *)(v1 + 8); // 0x411022\n    if (v2 == 7) {\n        int64_t v3 = *(int64_t *)(a4 + 8); // 0x411138\n        int64_t v4 = v3 + a5; // 0x41113c\n        unsigned char v5 = *(char *)v4; // 0x41113c\n        if (v5 < 194) {\n            // 0x411060\n            return 0;\n        }\n        uint64_t v6 = *(int64_t *)(a4 + 88); // 0x41114a\n        uint64_t v7 = a5 + 1;\n        if (v7 >= v6) {\n            // 0x411060\n            return 0;\n        }\n        int64_t v8 = v3 + v7;\n        unsigned char v9 = *(char *)v8; // 0x41115b\n        if (v5 < 224) {\n            // 0x411233\n            if (v9 == -65 || (v9 ^ -128) < 63) {\n                // 0x411060\n                return 2;\n            }\n            // 0x411060\n            return 0;\n        }\n        int64_t v10; // 0x411010\n        if (v5 < 240) {\n            // 0x411173\n            v10 = 3;\n            if (v5 == -32 == v9 < 160) {\n                // 0x411060\n                return 0;\n            }\n        } else {\n            if (v5 < 248) {\n                // 0x411215\n                v10 = 4;\n                if (v5 == -16 == v9 < 144) {\n                    // 0x411060\n                    return 0;\n                }\n            } else {\n                if (v5 < 252) {\n                    // 0x41124f\n                    v10 = 5;\n                    if (v5 == -8 == v9 < 136) {\n                        // 0x411060\n                        return 0;\n                    }\n                } else {\n                    if (v5 >= 254) {\n                        // 0x411060\n                        return 0;\n                    }\n                    // 0x411276\n                    v10 = 6;\n                    if (v5 == -4 == v9 < 132) {\n                        // 0x411060\n                        return 0;\n                    }\n                }\n            }\n        }\n        // 0x41118c\n        if (v6 < v10 + a5) {\n            // 0x411060\n            return 0;\n        }\n        // 0x411199\n        if (v9 != -65 && (v9 ^ -128) >= 63) {\n            // 0x411060\n            return 0;\n        }\n        int64_t v11 = v8; // 0x4111be\n        v11++;\n        while (v10 + v4 != v11) {\n            char v12 = *(char *)v11;\n            if (v12 != -65 && (v12 ^ -128) >= 63) {\n                // 0x411060\n                return 0;\n            }\n            v11++;\n        }\n        // 0x411060\n        return v10 & 0xffffffff;\n    }\n    // 0x411031\n    if (*(int32_t *)(a4 + 144) == 1) {\n        // 0x411060\n        return 0;\n    }\n    int64_t v13 = function_40c840(a4, a5); // 0x411046\n    int64_t v14 = v13 & 0xffffffff; // 0x41104b\n    if (v2 == 5) {\n        if ((int32_t)v13 < 2) {\n            // 0x411060\n            return 0;\n        }\n        if ((a5 & 64) == 0) {\n            // 0x41107c\n            if (*(char *)(*(int64_t *)(a4 + 8) + a5) == 10) {\n                // 0x411060\n                return 0;\n            }\n        }\n        // 0x411087\n        if ((char)a5 > -1) {\n            // 0x411060\n            return v14 & 0xffffffff;\n        }\n        // 0x41108b\n        if (*(char *)(*(int64_t *)(a4 + 8) + a5) == 0) {\n            // 0x411060\n            return 0;\n        }\n        // 0x411060\n        return v14 & 0xffffffff;\n    }\n    if (v2 == 6 != (int32_t)v13 > 1) {\n        // 0x411060\n        return 0;\n    }\n    int64_t v15 = *(int64_t *)v1; // 0x4110a0\n    int64_t * v16 = (int64_t *)(v15 + 64); // 0x4110a3\n    int64_t v17 = *v16; // 0x4110a3\n    int64_t v18 = *(int64_t *)(v15 + 40); // 0x4110a7\n    if (v17 != 0) {\n        goto lab_0x4110bd;\n    } else {\n        // 0x4110b0\n        if ((*(int64_t *)(v15 + 72) || v18) == 0) {\n            goto lab_0x4111fd;\n        } else {\n            goto lab_0x4110bd;\n        }\n    }\n  lab_0x411122_2:\n    // 0x411122\n    if (*(char *)(v15 + 32) % 2 == 0) {\n        // 0x411060\n        return v14 & 0xffffffff;\n    }\n    // 0x411060\n    return 0;\n  lab_0x4110bd:;\n    uint32_t wc = *(int32_t *)(*(int64_t *)(a4 + 16) + 4 * a5); // 0x4110c1\n    if (v18 < 1) {\n        goto lab_0x4110ef;\n    } else {\n        int64_t v19 = *(int64_t *)v15; // 0x4110ca\n        if (*(int32_t *)v19 == wc) {\n            goto lab_0x411122_2;\n        } else {\n            int64_t v20 = 1; // 0x4110e6\n            while (v18 != v20) {\n                // 0x4110e0\n                if (*(int32_t *)(4 * v20 + v19) == wc) {\n                    goto lab_0x411122_2;\n                }\n                v20++;\n            }\n            goto lab_0x4110ef;\n        }\n    }\n  lab_0x4110ef:;\n    int64_t * v21 = (int64_t *)(v15 + 72); // 0x4110ef\n    int64_t v22 = v17; // 0x4110f6\n    if (*v21 < 1) {\n        goto lab_0x4111cc;\n    } else {\n        int64_t v23 = 0; // 0x411100\n        int64_t v24 = *(int64_t *)(v15 + 24); // 0x41110e\n        while (iswctype(wc, (int32_t)*(int64_t *)(v24 + 8 * v23)) == 0) {\n            // 0x411100\n            v23++;\n            if (v23 >= *v21) {\n                // 0x4111c8\n                v22 = *v16;\n                goto lab_0x4111cc;\n            }\n            v24 = *(int64_t *)(v15 + 24);\n        }\n        goto lab_0x411122_2;\n    }\n  lab_0x4111fd:\n    // 0x4111fd\n    if (*(char *)(v15 + 32) % 2 != 0) {\n        // 0x411060\n        return v14 & 0xffffffff;\n    }\n    // 0x411060\n    return 0;\n  lab_0x4111cc:\n    // 0x4111cc\n    if (v22 >= 1) {\n        int64_t v25 = 0; // 0x4111d7\n        int64_t v26 = 4 * v25; // 0x4111e0\n        if (*(int32_t *)(v26 + *(int64_t *)(v15 + 8)) <= wc) {\n            // 0x4111e6\n            if (*(int32_t *)(*(int64_t *)(v15 + 16) + v26) >= wc) {\n                goto lab_0x411122_2;\n            }\n        }\n        // 0x4111f4\n        v25++;\n        while (v25 != v22) {\n            // 0x4111e0\n            v26 = 4 * v25;\n            if (*(int32_t *)(v26 + *(int64_t *)(v15 + 8)) <= wc) {\n                // 0x4111e6\n                if (*(int32_t *)(*(int64_t *)(v15 + 16) + v26) >= wc) {\n                    goto lab_0x411122_2;\n                }\n            }\n            // 0x4111f4\n            v25++;\n        }\n    }\n    goto lab_0x4111fd;\n}\n"
        },
        {
            "funcName": "function_4112a0",
            "funcStartAddr": "4112a0",
            "funcEndAddr": "4119bf",
            "decompiledFuncCode": "int64_t function_4112a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    // 0x4112a0\n    int128_t v1; // 0x4112a0\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 152); // 0x4112c1\n    int64_t * v4 = (int64_t *)(a2 + 8); // 0x4112c8\n    int64_t v5 = *v4; // 0x4112c8\n    int64_t v6 = *(int64_t *)(*(int64_t *)v3 + 16 * a3); // 0x4112d9\n    int32_t * v7 = (int32_t *)(a1 + 224); // 0x4112eb\n    int32_t result = 0; // bp-128, 0x4112f2\n    int64_t v8 = (int64_t)*v7 + a6; // 0x4112fa\n    int64_t * v9; // 0x4112a0\n    int64_t v10; // 0x4112a0\n    if (v8 < v5) {\n        // 0x4112a0\n        v9 = (int64_t *)(a2 + 16);\n        v10 = a2;\n    } else {\n        int64_t v11 = v8 + 1; // 0x4118f0\n        if (0x7fffffffffffffff - v5 < v11) {\n            // 0x411766\n            return 12;\n        }\n        uint64_t v12 = v11 + v5; // 0x411910\n        if (v12 >= 0x2000000000000000) {\n            // 0x411766\n            return 12;\n        }\n        int64_t * v13 = (int64_t *)(a2 + 16);\n        int64_t * mem = realloc((int64_t *)*v13, 8 * (int32_t)v12); // 0x41192a\n        if (mem == NULL) {\n            // 0x411766\n            return 12;\n        }\n        int64_t v14 = (int64_t)mem; // 0x41192a\n        *v13 = v14;\n        *v4 = v12;\n        memset((int64_t *)(8 * v5 + v14), 0, 8 * (int32_t)v11);\n        v9 = v13;\n        v10 = 0;\n    }\n    int64_t * v15 = (int64_t *)(a1 + 184); // 0x411306\n    int64_t v16 = *v15; // 0x411306\n    int32_t * v17 = (int32_t *)(a1 + 160); // 0x411313\n    int32_t v18 = *v17; // 0x411313\n    int64_t v19 = *v9; // 0x41131e\n    int64_t * v20 = (int64_t *)(a1 + 72); // 0x411327\n    int64_t v21 = *v20; // 0x411327\n    *v15 = v19;\n    int128_t v22; // bp-120, 0x4112a0\n    int32_t v23; // 0x4112a0\n    int64_t v24; // 0x41135f\n    if (v10 == 0) {\n        // 0x411860\n        *v20 = a4;\n        v23 = function_40e5c0(a1, a4 - 1, v18);\n        goto lab_0x411874;\n    } else {\n        // 0x411342\n        *v20 = v10;\n        v23 = function_40e5c0(a1, v10 - 1, v18);\n        if (v10 == a4) {\n            goto lab_0x411874;\n        } else {\n            // 0x41135f\n            v24 = *(int64_t *)(v19 + 8 * v10);\n            if (v24 == 0) {\n                goto lab_0x411373;\n            } else {\n                // 0x411368\n                if ((*(char *)(v24 + 104) & 64) != 0) {\n                    int64_t v25 = function_40d930((int64_t)&v22, v24 + 8); // 0x41178f\n                } else {\n                    goto lab_0x411373;\n                }\n            }\n        }\n    }\n  lab_0x411740_2:\n    // 0x411740\n    free(NULL);\n    result = 12;\n    int64_t v26; // 0x4112a0\n    int64_t v27 = v26; // 0x41174d\n    goto lab_0x411755_2;\n  lab_0x4115b0_2:\n    // 0x4115b0\n    free(NULL);\n    int32_t v52; // bp-124, 0x4112a0\n    int32_t v53 = v52; // 0x4115c2\n    result = v53;\n    int128_t v54; // 0x411412\n    int128_t v45 = v54; // 0x4115cc\n    v27 = v26;\n    if (v53 != 0) {\n        goto lab_0x411755_2;\n    } else {\n        goto lab_0x41163c;\n    }\n  lab_0x4116ad_2:\n    // 0x4116ad\n    free((int64_t *)v26);\n    int64_t v55 = *(int64_t *)(*v15 + 8 * a6); // 0x4116c7\n    int64_t result2; // 0x4112a0\n    int64_t v33; // 0x4112a0\n    if (v55 == 0) {\n        // 0x411988\n        *(int64_t *)a2 = v33;\n        *v15 = v16;\n        *v20 = v21;\n        result2 = 1;\n    } else {\n        // 0x4116d4\n        *(int64_t *)a2 = v33;\n        *v15 = v16;\n        *v20 = v21;\n        result2 = function_40c890(*(int64_t *)(v55 + 16), v55 + 24, a5) == 0;\n    }\n    // 0x411766\n    return result2;\n  lab_0x411460:;\n    // 0x411460\n    int64_t v56; // 0x4112a0\n    int64_t v57 = v56;\n    int64_t v58; // 0x4112a0\n    if ((char)function_40e6b0(a1, v57, v58) == 0) {\n        goto lab_0x41149f;\n    } else {\n        goto lab_0x41147d;\n    }\n  lab_0x41149f:;\n    // 0x41149f\n    int64_t v59; // 0x4112a0\n    int64_t v60 = v59 + 1; // 0x41149f\n    int64_t * v61; // 0x411416\n    uint64_t v62 = *v61; // 0x4114a3\n    int64_t v63 = v60; // 0x4114a7\n    if (v60 >= v62) {\n        // break -> 0x41181d\n        goto lab_0x41181d;\n    }\n    goto lab_0x4114ad;\n  lab_0x41147d:;\n    // 0x41147d\n    int64_t * v77; // 0x4112a0\n    int64_t v92 = *v77; // 0x41147d\n    int64_t v68; // 0x4114b5\n    int64_t v93 = *(int64_t *)(v92 + 8 * v68); // 0x41148e\n    int64_t v94; // 0x4112a0\n    if ((char)function_40b280(v94, v93) == 0) {\n        goto lab_0x411740_2;\n    }\n    goto lab_0x41149f;\n  lab_0x411412:;\n    // 0x411412\n    int128_t v40; // 0x4112a0\n    v54 = __asm_pxor(v40, v40);\n    v52 = 0;\n    int128_t v83 = __asm_movaps(v54); // bp-88, 0x41142b\n    int64_t v39; // 0x4112a0\n    if (*(int64_t *)(v39 + 40) >= 1) {\n        // 0x411445\n        int64_t v88; // 0x41141b\n        int64_t v73 = v88 + 216; // 0x411447\n        int64_t * v65 = (int64_t *)(v39 + 48); // 0x4114ad\n        int64_t * v67 = (int64_t *)v88; // 0x4114b1\n        int32_t v95; // 0x4113d2\n        v58 = v95;\n        v77 = (int64_t *)(v88 + 24);\n        v63 = 0;\n        while (true) {\n          lab_0x4114ad:\n            // 0x4114ad\n            v59 = v63;\n            int64_t v64 = *v65; // 0x4114ad\n            int64_t v66 = *v67; // 0x4114b1\n            v68 = *(int64_t *)(v64 + 8 * v59);\n            int64_t v69 = 16 * v68; // 0x4114bc\n            int64_t v70 = v69 + v66; // 0x4114c0\n            char v71 = *(char *)(v70 + 10); // 0x4114c4\n            v56 = v70;\n            if ((v71 & 16) == 0) {\n                goto lab_0x411460;\n            } else {\n                int64_t v72 = function_411010(v66, v73, v68, a1, v58); // 0x4114d9\n                int32_t v74 = v72; // 0x4114e1\n                if (v74 < 2) {\n                    if (v74 != 0) {\n                        goto lab_0x41147d;\n                    } else {\n                        int64_t v75 = *v67; // 0x411718\n                        v56 = v75 + v69;\n                        goto lab_0x411460;\n                    }\n                } else {\n                    int64_t v76 = *v77; // 0x4114f5\n                    int64_t v78 = *v15; // 0x411502\n                    int64_t v79 = *(int64_t *)(v76 + 8 * v68); // 0x41150a\n                    int64_t v80 = 8 * ((0x100000000 * v72 >> 32) + v58); // 0x41150e\n                    int64_t v81 = *(int64_t *)(v78 + v80); // 0x411516\n                    if (v81 != 0) {\n                        int64_t v82 = function_40cdd0((int64_t *)&v83, (int128_t *)(v81 + 8)); // 0x41153c\n                        int32_t v84 = v82; // 0x411546\n                        v52 = v84;\n                        if (v84 != 0) {\n                            goto lab_0x4115b0_2;\n                        }\n                    }\n                    // 0x41154e\n                    int64_t v85; // 0x4112a0\n                    if ((char)function_40b280(v85, v79) == 0) {\n                        goto lab_0x411740_2;\n                    }\n                    int64_t v86 = *v15; // 0x411576\n                    int64_t v87 = function_40de40(&v52, v88, (int64_t *)&v83, v58, v58, a6); // 0x41157e\n                    *(int64_t *)(v86 + v80) = v87;\n                    int64_t v89 = *v15; // 0x411587\n                    int64_t v90 = *(int64_t *)(v89 + v80); // 0x41158f\n                    int32_t v91 = v52; // 0x41159a\n                    if (v90 == 0 && v91 != 0) {\n                        goto lab_0x4115b0_2;\n                    }\n                    goto lab_0x41147d;\n                }\n            }\n        }\n    }\n  lab_0x41181d:\n    // 0x41181d\n    free(NULL);\n    result = 0;\n    v45 = v54;\n    goto lab_0x41163c;\n  lab_0x41163c:;\n    // 0x41163c\n    int64_t v42; // 0x4112a0\n    int64_t v96 = function_40e5c0(a1, (int64_t)((int32_t)v42 - 1), *v17); // 0x41164b\n    int64_t v97 = function_40db40((int128_t *)&result, v3, (int64_t *)&v22, (int32_t)v96); // 0x411664\n    int64_t v98; // 0x4112a0\n    int64_t v41; // 0x4112a0\n    int64_t v99; // 0x4112a0\n    int64_t v43; // 0x4113c2\n    if (v97 == 0) {\n        // 0x411830\n        v27 = v26;\n        if (result != 0) {\n            // break -> 0x411755\n            goto lab_0x411755_2;\n        }\n        int64_t v100 = *v15; // 0x41183c\n        *(int64_t *)(v100 + v43) = 0;\n        v99 = v41 + 1;\n        v98 = v100;\n    } else {\n        int64_t v101 = *v15; // 0x411675\n        *(int64_t *)(v101 + v43) = v97;\n        v99 = 0;\n        v98 = v101;\n    }\n    // 0x41168f\n    v33 = v42;\n    if (v42 >= a6) {\n        goto lab_0x4116ad_2;\n    }\n    int64_t v34 = v99; // 0x4116a7\n    int128_t v35 = v45; // 0x4116a7\n    int64_t v36 = v98; // 0x4116a7\n    int64_t v37 = v42; // 0x4116a7\n    int64_t v38 = v97; // 0x4116a7\n    v33 = v42;\n    if (v99 > (int64_t)*v7) {\n        goto lab_0x4116ad_2;\n    }\n    goto lab_0x4113be;\n  lab_0x411874:\n    // 0x411874\n    v22 = 1;\n    int64_t * mem2 = malloc(8); // 0x411891\n    if (mem2 == NULL) {\n        // 0x411766\n        return 12;\n    }\n    int64_t v102 = (int64_t)mem2; // 0x411891\n    *mem2 = a3;\n    int32_t v103 = 0x100000000 * a7 >> 32;\n    result = 0;\n    int32_t v104 = function_40d200(v3, (int64_t *)&v22, v6, v103); // 0x4118d6\n    result = v104;\n    v27 = v102;\n    if (v104 == 0) {\n        goto lab_0x4117b2;\n    } else {\n        goto lab_0x411755_2;\n    }\n  lab_0x4117b2:;\n    int32_t v105 = function_40e0e0(a1, &v22, a4, v6, v103); // 0x4117cd\n    result = v105;\n    v27 = v102;\n    int64_t v51 = a4; // 0x4117d3\n    int64_t v50 = v102; // 0x4117d3\n    int32_t v49 = v23; // 0x4117d3\n    if (v105 != 0) {\n        goto lab_0x411755_2;\n    } else {\n        goto lab_0x4117d5;\n    }\n  lab_0x411755_2:\n    // 0x411755\n    free((int64_t *)v27);\n    // 0x411766\n    return result;\n  lab_0x411373:;\n    int128_t v28 = __asm_pxor(v2, v2); // 0x41137f\n    v22 = __asm_movaps(v28);\n    int64_t v29 = 0; // 0x411383\n    int128_t v30 = v28; // 0x411383\n    int64_t v31 = v10; // 0x411383\n    int64_t v32 = v24; // 0x411383\n    goto lab_0x41138b;\n  lab_0x4117d5:;\n    int64_t v48 = function_40db40((int128_t *)&result, v3, (int64_t *)&v22, v49); // 0x4117e5\n    v27 = v50;\n    if (v48 != 0 || result == 0) {\n        // 0x4117f6\n        *(int64_t *)(*v15 + 8 * v51) = v48;\n        v29 = v50;\n        v31 = v51;\n        v32 = v48;\n        goto lab_0x41138b;\n    } else {\n        goto lab_0x411755_2;\n    }\n  lab_0x41138b:\n    // 0x41138b\n    v26 = v29;\n    v33 = v31;\n    if (v31 < a6) {\n        // 0x411396\n        v33 = v31;\n        if (*v7 < 0) {\n            goto lab_0x4116ad_2;\n        } else {\n            // 0x4113a6\n            v34 = 0;\n            v35 = v30;\n            v36 = *v15;\n            v37 = v31;\n            v38 = v32;\n            while (true) {\n              lab_0x4113be:\n                // 0x4113be\n                v39 = v38;\n                v40 = v35;\n                v41 = v34;\n                v42 = v37 + 1;\n                v43 = 8 * v42;\n                int64_t v44 = *(int64_t *)(v43 + v36); // 0x4113c2\n                if (v44 == 0) {\n                    // 0x411728\n                    v45 = v40;\n                    if (v39 != 0) {\n                        goto lab_0x411412;\n                    } else {\n                        goto lab_0x41163c;\n                    }\n                } else {\n                    int64_t v46 = function_40cdd0((int64_t *)&v22, (int128_t *)(v44 + 8)); // 0x4113f8\n                    int32_t v47 = v46; // 0x4113fd\n                    result = v47;\n                    v27 = v26;\n                    if (v47 != 0) {\n                        // break -> 0x411755\n                        break;\n                    }\n                    // 0x411409\n                    v45 = v40;\n                    if (v39 == 0) {\n                        goto lab_0x41163c;\n                    } else {\n                        goto lab_0x411412;\n                    }\n                }\n            }\n            goto lab_0x411755_2;\n        }\n    } else {\n        goto lab_0x4116ad_2;\n    }\n}\n"
        },
        {
            "funcName": "function_4119c0",
            "funcStartAddr": "4119c0",
            "funcEndAddr": "412283",
            "decompiledFuncCode": "int64_t function_4119c0(int64_t a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x4119c0\n    int128_t v1; // 0x4119c0\n    int128_t v2 = v1;\n    int64_t v3 = 0; // bp-88, 0x4119e4\n    int64_t v4 = 0; // 0x411a06\n    if ((char)a5 != 0) {\n        int64_t * mem = malloc(96); // 0x411a15\n        v4 = &v3;\n        if (mem == NULL) {\n            // 0x411d29\n            return 12;\n        }\n    }\n    int128_t v5 = __asm_pxor(v2, v2); // 0x411a35\n    int64_t v6 = 0; // bp-104, 0x411a39\n    int128_t v7 = __asm_movaps(v5); // bp-120, 0x411a41\n    uint64_t v8 = 16 * a3; // 0x411a53\n    int32_t size = v8; // 0x411a57\n    int64_t result; // 0x4119c0\n    int64_t v9; // 0x4119c0\n    char v10; // 0x4119c0\n    if (v8 < 4031) {\n        // 0x411a6a\n        v10 = 0;\n        int64_t v11; // bp-216, 0x4119c0\n        v9 = (int64_t)&v11 + -1 - v8 & -16;\n    } else {\n        int64_t * mem2 = malloc(size); // 0x4121a7\n        v10 = 1;\n        v9 = (int64_t)mem2;\n        if (mem2 == NULL) {\n            // 0x4121c3\n            result = 12;\n            if (v4 != 0) {\n                // 0x4121d3\n                function_40fff0(v4);\n                result = 12;\n            }\n          lab_0x411d29:\n            // 0x411d29\n            return result;\n        }\n    }\n    int64_t * v12 = (int64_t *)v9; // 0x411a99\n    int64_t * v13 = (int64_t *)a4; // 0x411a99\n    memcpy(v12, v13, size);\n    int64_t v14 = a4; // bp-128, 0x411aaa\n    int64_t * v15 = (int64_t *)(a4 + 8); // 0x411b99\n    int64_t v16 = *v15; // 0x411b99\n    if (v16 < a4) {\n      lab_0x411d00_2:\n        // 0x411d00\n        free((int64_t *)v6);\n        if (v10 != 0) {\n            // 0x4121dd\n            free(v12);\n            if (v4 == 0) {\n                // 0x411d29\n                return 0;\n            }\n        } else {\n            // 0x411d16\n            if (v4 == 0) {\n                // 0x411d29\n                return 0;\n            }\n        }\n        // 0x411d22\n        function_40fff0(v4);\n        // 0x411d29\n        return 0;\n    }\n    int64_t v17 = (int64_t)a2;\n    int64_t v18 = v4 + 16;\n    int64_t v19 = &v7;\n    int64_t * v20 = (int64_t *)(v17 + 184);\n    int64_t * v21 = (int64_t *)v4;\n    int64_t * v22 = (int64_t *)(v4 + 8);\n    int64_t * v23 = (int64_t *)v18;\n    int64_t v24 = v16; // 0x411b99\n    int64_t v25 = *(int64_t *)(a1 + 144); // 0x4119c0\n    int64_t v26 = a4; // 0x411b95\n    int64_t v27; // 0x4119c0\n    int64_t v28; // 0x4119c0\n    int64_t v29; // 0x4119c0\n    int64_t v30; // 0x4119c0\n    int64_t v31; // 0x4119c0\n    int64_t v32; // 0x4119c0\n    int64_t v33; // 0x4119c0\n    int64_t v34; // 0x4119c0\n    int64_t v35; // 0x4119c0\n    int64_t v36; // 0x411bb3\n    int64_t v37; // 0x411d58\n    while (true) {\n        // 0x411ba6\n        int64_t v38; // 0x4119c0\n        v34 = v38;\n        v28 = v24;\n        v31 = v26;\n        v29 = v25;\n        while (true) {\n          lab_0x411ba6:\n            // 0x411ba6\n            v30 = v29;\n            v32 = v31;\n            int64_t v39 = v28;\n            v35 = v34;\n            v36 = 16 * v30;\n            int64_t v40 = v36 + a1; // 0x411bba\n            char v41 = *(char *)(v40 + 8); // 0x411bbd\n            if (v41 != 8) {\n                // 0x411ac0\n                v27 = v39;\n                if (v41 == 9) {\n                    int64_t v42 = *(int64_t *)v40 + 1; // 0x411d43\n                    v27 = v39;\n                    if (v42 < a3) {\n                        int64_t v43 = 16 * v42; // 0x411d54\n                        v37 = v43 + a4;\n                        if (*(int64_t *)v37 < v32) {\n                            // 0x4120d0\n                            *(int64_t *)(v37 + 8) = v32;\n                            memcpy(v12, v13, size);\n                            v27 = *v15;\n                            goto lab_0x411ac9;\n                        } else {\n                            // 0x411d66\n                            if ((*(char *)(v40 + 10) & 8) == 0) {\n                                goto lab_0x411d7e;\n                            } else {\n                                // 0x411d6c\n                                if (*(int64_t *)(v43 + v9) != -1) {\n                                    // 0x412110\n                                    memcpy(v13, v12, size);\n                                    int64_t v44 = *v15; // 0x41212d\n                                    v27 = v44;\n                                    goto lab_0x411ac9;\n                                } else {\n                                    goto lab_0x411d7e;\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x411ac9;\n                    }\n                } else {\n                    goto lab_0x411ac9;\n                }\n            } else {\n                int64_t v45 = *(int64_t *)v40 + 1; // 0x411bcd\n                v27 = v39;\n                if (v45 < a3) {\n                    int64_t v46 = 16 * v45 + a4; // 0x411be2\n                    *(int64_t *)(v46 + 8) = -1;\n                    *(int64_t *)v46 = v32;\n                    v27 = *v15;\n                }\n                goto lab_0x411ac9;\n            }\n        }\n      lab_0x411b95_2:\n        // 0x411b95\n        v26 = v14;\n        v24 = *v15;\n        v38 = v33;\n        if (v24 < v26) {\n            goto lab_0x411d00_2;\n        }\n    }\n  lab_0x412090_3:\n    // 0x412090\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x412200\n        free(v12);\n        goto lab_0x4120a6;\n    } else {\n        goto lab_0x4120a6;\n    }\n  lab_0x411f9a_3:\n    // 0x411f9a\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x412272\n        free(v12);\n        // 0x411fb0\n        function_40fff0(v4);\n        result = 0;\n        return result;\n    } else {\n        // 0x411fb0\n        function_40fff0(v4);\n        result = 0;\n        return result;\n    }\n  lab_0x411ac9:;\n    int64_t v47 = v30; // 0x411acc\n    int64_t v48 = v36; // 0x411acc\n    if (v32 == v27) {\n        // 0x411ace\n        v47 = v30;\n        v48 = v36;\n        if (*(int64_t *)(v17 + 176) == v30) {\n            if (v4 == 0) {\n                // 0x412249\n                free((int64_t *)v6);\n                result = 0;\n                if (v10 == 0) {\n                    return result;\n                } else {\n                    // 0x41225f\n                    free(v12);\n                    result = (int32_t)&g127 ^ (int32_t)&g127;\n                    return result;\n                }\n            }\n            int64_t v49 = a4; // 0x411f70\n            int64_t v50 = 0; // 0x411f70\n            if (a3 == 0) {\n                goto lab_0x411f9a_3;\n            }\n            int64_t v51; // 0x4119c0\n            while (true) {\n                // 0x411f80\n                v51 = v50;\n                int64_t v52 = v49;\n                if (*(int64_t *)v52 >= 0) {\n                    // 0x411f86\n                    if (*(int64_t *)(v52 + 8) == -1) {\n                        // break -> 0x411fc8\n                        break;\n                    }\n                }\n                // 0x411f8d\n                v50 = v51 + 1;\n                v49 = v52 + 16;\n                if (v50 == a3) {\n                    goto lab_0x411f9a_3;\n                }\n            }\n            if (v51 == a3) {\n                goto lab_0x411f9a_3;\n            }\n            int64_t v53 = function_410040(v4, v18, &v14, a3, a4, &v7); // 0x411fee\n            v47 = v53;\n            v48 = 16 * v53;\n        }\n    }\n    int64_t v54 = v48;\n    int64_t v55 = v47;\n    int64_t v56 = *(int64_t *)(v17 + 152); // 0x411adc\n    int64_t * v57 = (int64_t *)v56; // 0x411ae4\n    int64_t v58 = *v57; // 0x411ae4\n    int64_t v59 = v58 + v54; // 0x411ae7\n    char v60 = *(char *)(v59 + 8); // 0x411aeb\n    int64_t v61; // 0x4119c0\n    int64_t v62; // 0x4119c0\n    int64_t v63; // 0x4119c0\n    int64_t v64; // 0x4119c0\n    int64_t v65; // 0x4119c0\n    int64_t v66; // 0x4119c0\n    int64_t v67; // 0x4119c0\n    int64_t v68; // 0x4119c0\n    int64_t v69; // 0x4119c0\n    int64_t v70; // 0x4119c0\n    int64_t v71; // 0x4119c0\n    int64_t v72; // 0x4119c0\n    int64_t v73; // 0x411e8e\n    int64_t v74; // 0x411c70\n    if ((v60 & 8) != 0) {\n        int64_t v75 = *(int64_t *)(8 * v14 + *v20); // 0x411c13\n        if ((char)function_40b280(v19, v55) == 0) {\n            // break (via goto) -> 0x412090\n            goto lab_0x412090_3;\n        }\n        int64_t v76 = *(int64_t *)(v56 + 40) + 24 * v55; // 0x411c26\n        int64_t v77 = *(int64_t *)(v76 + 8); // 0x411c3e\n        v71 = v35;\n        if (v77 < 1) {\n            goto lab_0x411cba;\n        } else {\n            // 0x411c47\n            v61 = -1;\n            int64_t v78 = 0;\n            v74 = *(int64_t *)(8 * v78 + *(int64_t *)(v76 + 16));\n            int64_t v79 = v61; // 0x411c85\n            int64_t v80; // 0x411e95\n            int64_t v81; // 0x4119c0\n            int64_t * mem3; // 0x412162\n            int64_t v82; // 0x412162\n            int64_t v83; // 0x411e70\n            if (function_40c890(*(int64_t *)(v75 + 16), v75 + 24, v74) != 0) {\n                // 0x411c87\n                v79 = v74;\n                if (v61 != -1) {\n                    // 0x411e58\n                    v83 = function_40c890(v35, (int64_t)&v6, v61);\n                    v69 = v35;\n                    v63 = v83 != 0 ? v74 : v61;\n                    if (v4 == 0 || v83 != 0) {\n                        goto lab_0x411b8c;\n                    } else {\n                        // 0x411e8e\n                        v73 = *v21;\n                        v80 = v73 + 1;\n                        *v21 = v80;\n                        v81 = *v23;\n                        v62 = v81;\n                        if (v80 == *v22) {\n                            // 0x412148\n                            mem3 = realloc((int64_t *)v81, 96 * (int32_t)v80);\n                            if (mem3 == NULL) {\n                                goto lab_0x411f00;\n                            } else {\n                                // 0x412170\n                                v82 = (int64_t)mem3;\n                                *v22 = 2 * *v22;\n                                *v23 = v82;\n                                v62 = v82;\n                                goto lab_0x411eaa;\n                            }\n                        } else {\n                            goto lab_0x411eaa;\n                        }\n                    }\n                }\n            }\n            int64_t v84 = v79;\n            int64_t v85 = v78 + 1; // 0x411c94\n            while (v77 != v85) {\n                // 0x411c70\n                v61 = v84;\n                v78 = v85;\n                v74 = *(int64_t *)(8 * v78 + *(int64_t *)(v76 + 16));\n                v79 = v61;\n                if (function_40c890(*(int64_t *)(v75 + 16), v75 + 24, v74) != 0) {\n                    // 0x411c87\n                    v79 = v74;\n                    if (v61 != -1) {\n                        // 0x411e58\n                        v83 = function_40c890(v35, (int64_t)&v6, v61);\n                        v69 = v35;\n                        v63 = v83 != 0 ? v74 : v61;\n                        if (v4 == 0 || v83 != 0) {\n                            goto lab_0x411b8c;\n                        } else {\n                            // 0x411e8e\n                            v73 = *v21;\n                            v80 = v73 + 1;\n                            *v21 = v80;\n                            v81 = *v23;\n                            v62 = v81;\n                            if (v80 == *v22) {\n                                // 0x412148\n                                mem3 = realloc((int64_t *)v81, 96 * (int32_t)v80);\n                                if (mem3 == NULL) {\n                                    goto lab_0x411f00;\n                                } else {\n                                    // 0x412170\n                                    v82 = (int64_t)mem3;\n                                    *v22 = 2 * *v22;\n                                    *v23 = v82;\n                                    v62 = v82;\n                                    goto lab_0x411eaa;\n                                }\n                            } else {\n                                goto lab_0x411eaa;\n                            }\n                        }\n                    }\n                }\n                // 0x411c94\n                v84 = v79;\n                v85 = v78 + 1;\n            }\n            // 0x411c9d\n            v33 = v35;\n            v25 = v84;\n            v70 = v35;\n            v64 = v84;\n            if (v84 >= 0) {\n                // break -> 0x411b95\n                goto lab_0x411b95_2;\n            }\n            goto lab_0x411cb0;\n        }\n    } else {\n        // 0x411af7\n        if ((*(char *)(v59 + 10) & 16) != 0) {\n            int64_t v86 = 0x100000000 * function_411010(v58, v56 + 216, v55, v17, v14);\n            v67 = v86 >> 32;\n            if (v86 != 0) {\n                goto lab_0x411f49;\n            } else {\n                // 0x411db9\n                v65 = v14;\n                v68 = *v57 + v54;\n                goto lab_0x411b0d;\n            }\n        } else {\n            if (v60 == 4) {\n                int64_t v87 = a4 + 16 + 16 * *(int64_t *)v59; // 0x411ddb\n                int64_t v88 = *(int64_t *)(v87 + 8); // 0x411dde\n                int64_t v89 = *(int64_t *)v87; // 0x411de2\n                int64_t n = v88 - v89; // 0x411de8\n                if (v4 == 0) {\n                    // 0x411f40\n                    v67 = n;\n                    if (n == 0) {\n                        goto lab_0x412008;\n                    } else {\n                        goto lab_0x411f49;\n                    }\n                } else {\n                    // 0x411df9\n                    v72 = v35;\n                    if (v88 == -1 || v89 == -1) {\n                        goto lab_0x411cc8;\n                    } else {\n                        if (n == 0) {\n                            goto lab_0x412008;\n                        } else {\n                            int64_t v90 = *(int64_t *)(v17 + 8); // 0x411e16\n                            int32_t memcmp_rc = memcmp((int64_t *)(v90 + v89), (int64_t *)(v14 + v90), (int32_t)n); // 0x411e30\n                            v72 = v35;\n                            v66 = n;\n                            if (memcmp_rc != 0) {\n                                goto lab_0x411cc8;\n                            } else {\n                                goto lab_0x411e44;\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 0x411b09\n                v65 = v14;\n                v68 = v59;\n                goto lab_0x411b0d;\n            }\n        }\n    }\n  lab_0x411cba:\n    // 0x411cba\n    v72 = v71;\n    if (v4 == 0) {\n        // 0x412211\n        free((int64_t *)v6);\n        result = 1;\n        if (v10 == 0) {\n            return result;\n        } else {\n            // 0x41222c\n            free(v12);\n            result = 1;\n            return result;\n        }\n    }\n    goto lab_0x411cc8;\n  lab_0x411d7e:\n    // 0x411d7e\n    *(int64_t *)(v37 + 8) = v32;\n    v27 = *v15;\n    goto lab_0x411ac9;\n  lab_0x411cc8:;\n    int64_t v91 = function_410040(v4, v18, &v14, a3, a4, &v7); // 0x411ce5\n    int64_t v92 = *v15; // 0x411cf1\n    v34 = v72;\n    v28 = v92;\n    v31 = v14;\n    v29 = v91;\n    if (v92 < v14) {\n        goto lab_0x411d00_2;\n    }\n    goto lab_0x411ba6;\n  lab_0x411cb0:\n    // 0x411cb0\n    v71 = v70;\n    if (v64 == -2) {\n        // break (via goto) -> 0x412090\n        goto lab_0x412090_3;\n    }\n    goto lab_0x411cba;\n  lab_0x411f49:\n    // 0x411f49\n    v66 = v67;\n    goto lab_0x411e44;\n  lab_0x411e44:;\n    int64_t v93 = v14 + v66; // 0x411e50\n    goto lab_0x411b3a;\n  lab_0x411b0d:\n    // 0x411b0d\n    if ((char)function_40e6b0(v17, v68, v65) == 0) {\n        goto lab_0x411cba;\n    } else {\n        // 0x411b2e\n        v93 = v65 + 1;\n        goto lab_0x411b3a;\n    }\n  lab_0x411b3a:;\n    int64_t v94 = v93;\n    int64_t v95 = *(int64_t *)(*(int64_t *)(v56 + 24) + 8 * v55);\n    v14 = v94;\n    v69 = 0;\n    v63 = v95;\n    if (v4 == 0) {\n        goto lab_0x411b8c;\n    } else {\n        // 0x411b48\n        v72 = v35;\n        if (v94 > *(int64_t *)(v17 + 168)) {\n            goto lab_0x411cc8;\n        } else {\n            int64_t v96 = *(int64_t *)(*v20 + 8 * v94); // 0x411b5e\n            v72 = v35;\n            if (v96 == 0) {\n                goto lab_0x411cc8;\n            } else {\n                int64_t v97 = function_40c890(*(int64_t *)(v96 + 16), v96 + 24, v95); // 0x411b76\n                v69 = 0;\n                v63 = v95;\n                v72 = v35;\n                if (v97 == 0) {\n                    goto lab_0x411cc8;\n                } else {\n                    goto lab_0x411b8c;\n                }\n            }\n        }\n    }\n  lab_0x412008:\n    // 0x412008\n    if ((char)function_40b280(v19, v55) == 0) {\n        // break (via goto) -> 0x412090\n        goto lab_0x412090_3;\n    }\n    int64_t v98 = v14; // 0x412027\n    int64_t v99 = *(int64_t *)(24 * v55 + 16 + *(int64_t *)(v56 + 40)); // 0x412036\n    int64_t v100 = *(int64_t *)v99; // 0x41203a\n    int64_t v101 = *(int64_t *)(*v20 + 8 * v98); // 0x412045\n    int64_t v102 = function_40c890(*(int64_t *)(v101 + 16), v101 + 24, v100); // 0x412054\n    v69 = v35;\n    v63 = v100;\n    if (v102 != 0) {\n        goto lab_0x411b8c;\n    } else {\n        // 0x412062\n        v65 = v98;\n        v68 = *v57 + v54;\n        goto lab_0x411b0d;\n    }\n  lab_0x411b8c:\n    // 0x411b8c\n    v33 = v69;\n    v25 = v63;\n    v70 = v69;\n    v64 = v63;\n    if (v63 >= 0) {\n        // break -> 0x411b95\n        goto lab_0x411b95_2;\n    }\n    goto lab_0x411cb0;\n  lab_0x4120a6:\n    // 0x4120a6\n    if (v4 != 0) {\n      lab_0x411f16:\n        // 0x411f16\n        function_40fff0(v4);\n        return 12;\n    }\n    // 0x411d29\n    return 12;\n  lab_0x411eaa:;\n    int64_t v103 = v62 + 48 * v73; // 0x411eb2\n    *(int64_t *)(v103 + 8) = v74;\n    *(int64_t *)v103 = v14;\n    int64_t * mem4 = malloc(size); // 0x411ec6\n    *(int64_t *)(v103 + 16) = (int64_t)mem4;\n    if (mem4 == NULL) {\n        goto lab_0x411f00;\n    } else {\n        // 0x411ed4\n        memcpy(mem4, v13, size);\n        v69 = v35;\n        v63 = v61;\n        if ((int32_t)function_40d930(v103 + 24, v19) == 0) {\n            goto lab_0x411b8c;\n        } else {\n            goto lab_0x411f00;\n        }\n    }\n  lab_0x411f00:\n    // 0x411f00\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x412200\n        free(v12);\n        goto lab_0x4120a6;\n    } else {\n        goto lab_0x411f16;\n    }\n}\n"
        },
        {
            "funcName": "function_412290",
            "funcStartAddr": "412290",
            "funcEndAddr": "412426",
            "decompiledFuncCode": "int64_t function_412290(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a3 + 16; // 0x4122a4\n    int64_t * v2 = (int64_t *)(a3 + 8); // 0x4122b7\n    int64_t result = function_4112a0(a1, v1, a3, *v2, a4, a5, 8); // 0x4122c0\n    if ((int32_t)result != 0) {\n        // 0x4122cb\n        return result;\n    }\n    int64_t v3 = *v2; // 0x4122e0\n    int64_t * v4 = (int64_t *)(a1 + 200); // 0x4122e4\n    uint64_t v5 = *v4; // 0x4122e4\n    int64_t * v6 = (int64_t *)(a1 + 208); // 0x4122eb\n    uint64_t v7 = *v6; // 0x4122eb\n    int64_t * v8 = (int64_t *)(a1 + 216); // 0x4122f6\n    int64_t v9 = *v8; // 0x4122f6\n    int64_t v10 = v5; // 0x412303\n    int64_t v11 = v9; // 0x412303\n    if (v5 >= v7) {\n        int64_t * mem = realloc((int64_t *)v9, 80 * (int32_t)v7); // 0x4123ad\n        if (mem == NULL) {\n            // 0x412410\n            free((int64_t *)*v8);\n            // 0x4122cb\n            return 12;\n        }\n        int64_t v12 = (int64_t)mem; // 0x4123ad\n        *v8 = v12;\n        memset((int64_t *)(40 * *v4 + v12), 0, 40 * (int32_t)*v6);\n        *v6 = 2 * *v6;\n        v10 = *v4;\n        v11 = *v8;\n    }\n    int64_t v13 = 40 * v10; // 0x41230d\n    int64_t v14; // 0x412290\n    if (v10 < 1) {\n        // 0x412309\n        v14 = v11 + v13;\n    } else {\n        int64_t v15 = v13 + v11;\n        v14 = v15;\n        if (*(int64_t *)(v15 - 32) == a5) {\n            // 0x412390\n            *(char *)(v15 - 8) = 1;\n            v14 = v15;\n        }\n    }\n    // 0x412321\n    *(int64_t *)v14 = a4;\n    *(int64_t *)(v14 + 8) = a5;\n    *(int16_t *)(v14 + 34) = (int16_t)(v3 == v1);\n    *(int64_t *)(v14 + 16) = v1;\n    *(int64_t *)(v14 + 24) = v3;\n    *v4 = v10 + 1;\n    *(char *)(v14 + 32) = 0;\n    int32_t * v16 = (int32_t *)(a1 + 224); // 0x412353\n    if (v3 - v1 > (int64_t)*v16) {\n        // 0x412362\n        *v16 = (int32_t)v3 - (int32_t)v1;\n    }\n    // 0x41236c\n    return function_40be60(a1, 0);\n}\n"
        },
        {
            "funcName": "function_412430",
            "funcStartAddr": "412430",
            "funcEndAddr": "412ca2",
            "decompiledFuncCode": "int64_t function_412430(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x412430\n    if (a2 >= 0 != a2 != 0) {\n        // 0x4128bb\n        return 0;\n    }\n    // 0x4124c9\n    int64_t v1; // bp-232, 0x412430\n    int64_t v2 = &v1; // 0x41243d\n    int64_t * v3 = (int64_t *)(v2 + 8); // 0x4124ce\n    int64_t * v4 = (int64_t *)(v2 + 56); // 0x4124da\n    int32_t * v5 = (int32_t *)(a1 + 160);\n    int64_t * v6 = (int64_t *)(a1 + 200);\n    int64_t * v7 = (int64_t *)(a1 + 216);\n    int64_t * v8 = (int64_t *)(a1 + 232);\n    int64_t * v9 = (int64_t *)(v2 + 104);\n    int64_t * v10 = (int64_t *)(v2 + 96);\n    int64_t * v11 = (int64_t *)(a1 + 8);\n    int64_t * v12 = (int64_t *)(v2 + 24);\n    int64_t * v13 = (int64_t *)(v2 + 16);\n    int64_t * v14 = (int64_t *)(v2 + 32);\n    int64_t * v15 = (int64_t *)(v2 + 64);\n    int64_t * v16 = (int64_t *)(v2 + 112);\n    int64_t v17 = v2 + 40;\n    int64_t * v18 = (int64_t *)v17;\n    int64_t * v19 = (int64_t *)(v2 + 120);\n    int64_t * v20 = (int64_t *)(v2 + 48);\n    int64_t * v21 = (int64_t *)(a1 + 184);\n    int64_t v22 = v2 + 140;\n    int32_t * v23 = (int32_t *)v22;\n    int64_t * v24 = (int64_t *)(v2 + 88);\n    int32_t * v25 = (int32_t *)v17;\n    int64_t * v26 = (int64_t *)(v2 + 144);\n    int128_t * v27 = (int128_t *)v22;\n    int64_t * v28 = (int64_t *)(v2 + 160);\n    int64_t v29 = *v3; // 0x4124b5\n    int64_t v30 = *(int64_t *)(a1 + 72); // 0x412430\n    int64_t v31; // 0x412430\n    int64_t v32; // 0x4124d6\n    int64_t v33; // 0x4124e5\n    uint32_t v34; // 0x4124f2\n    int64_t v35; // 0x4124f2\n    uint64_t v36; // 0x41250d\n    while (true) {\n      lab_0x4124c9:\n        // 0x4124c9\n        v31 = v30;\n        v32 = *(int64_t *)(*(int64_t *)*(int64_t *)(v2 + 72) + 8 * v29);\n        v33 = 16 * v32;\n        int64_t v37 = (v33 | 8) + *(int64_t *)*v4; // 0x4124ec\n        v30 = v31;\n        if (*(char *)v37 != 4) {\n            goto lab_0x4124b0_3;\n        } else {\n            // 0x4124f2\n            v34 = *(int32_t *)v37;\n            if ((v34 & 0x3ff00) == 0) {\n                goto lab_0x412540;\n            } else {\n                // 0x4124fd\n                v35 = v34;\n                v36 = function_40e5c0(a1, v31, *v5);\n                if ((v35 & 1024) != 0) {\n                    // 0x412480\n                    v30 = v31;\n                    if (v36 % 2 == 0) {\n                        goto lab_0x4124b0_3;\n                    } else {\n                        // 0x412484\n                        v30 = v31;\n                        if ((v35 & 2048) != 0) {\n                            goto lab_0x4124b0_3;\n                        } else {\n                            goto lab_0x412489;\n                        }\n                    }\n                } else {\n                    // 0x412524\n                    v30 = v31;\n                    if ((v35 & 2048) == 0 || v36 % 2 == 0) {\n                        goto lab_0x412489;\n                    } else {\n                        goto lab_0x4124b0_3;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4128bb_7:;\n    // 0x4128bb\n    int64_t result; // 0x412430\n    return result;\n  lab_0x412608:;\n    int64_t v38 = *(int64_t *)(a1 + 152); // 0x412608\n    int64_t v39 = *(int64_t *)v38; // 0x412617\n    *v9 = v38;\n    *v10 = *(int64_t *)(v39 + v33);\n    int64_t v40; // 0x412430\n    int64_t v41; // 0x412430\n    int64_t v42; // 0x412430\n    int64_t v43; // 0x412430\n    int64_t v44; // 0x412430\n    int64_t v45; // 0x412430\n    int64_t v46; // 0x412430\n    int64_t v47; // 0x412430\n    int64_t v48; // 0x412430\n    int64_t v49; // 0x412430\n    int64_t v50; // 0x412430\n    int64_t v51; // 0x412430\n    int64_t v52; // 0x412430\n    int64_t v53; // 0x412430\n    int64_t v54; // 0x412540\n    int64_t v55; // 0x41265c\n    int64_t * v56; // 0x412660\n    int64_t * v57; // 0x4128d0\n    int64_t * v58; // 0x4128d5\n    int64_t v59; // 0x412690\n    if (*v8 < 1) {\n        // 0x4125df\n        *v23 = 0;\n        v30 = v31;\n        goto lab_0x4124b0_3;\n    } else {\n        // 0x41262a\n        *v12 = v31;\n        *v13 = 0;\n        *v14 = *v11;\n        *v15 = v32;\n        *v16 = v54;\n        v40 = *v13;\n        v51 = v39;\n        while (true) {\n          lab_0x41264b:\n            // 0x41264b\n            v55 = *(int64_t *)(*(int64_t *)(a1 + 248) + 8 * v40);\n            v56 = (int64_t *)(v55 + 8);\n            if (*v10 == *(int64_t *)(16 * *v56 + v51)) {\n                // 0x4128d0\n                v57 = (int64_t *)(v55 + 32);\n                v58 = (int64_t *)v55;\n                int64_t v60 = *v58; // 0x4128d5\n                int64_t v61 = *v12; // 0x4128d8\n                v41 = v61;\n                v42 = v60;\n                if (*v57 < 1) {\n                    goto lab_0x412a83;\n                } else {\n                    int64_t v62 = v61;\n                    v49 = 0;\n                    int64_t v63 = v60;\n                    int64_t v64 = *(int64_t *)(*(int64_t *)(v55 + 40) + 8 * v49); // 0x412910\n                    int64_t v65 = *(int64_t *)(v64 + 8); // 0x412914\n                    int64_t v66 = v65 - v63; // 0x41291b\n                    int64_t v67 = v66 + v62; // 0x41291e\n                    int64_t v68 = v64; // 0x412925\n                    int64_t v69; // 0x412430\n                    int64_t v70; // 0x412430\n                    int32_t memcmp_rc; // 0x412948\n                    int64_t v71; // 0x412a24\n                    int64_t v72; // 0x412a31\n                    int64_t n; // 0x412a35\n                    int64_t v73; // 0x412a3a\n                    int64_t v74; // 0x412a3f\n                    int64_t v75; // 0x412a44\n                    if (v66 >= 1) {\n                        // 0x412927\n                        v69 = *v14;\n                        v75 = v63;\n                        n = v66;\n                        v74 = v62;\n                        v73 = v64;\n                        v72 = v69;\n                        if (*(int64_t *)(a1 + 48) < v67) {\n                            // 0x412a00\n                            *v18 = v66;\n                            *v14 = v64;\n                            v50 = v63;\n                            v48 = v62;\n                            v43 = v69;\n                            if (*(int64_t *)(a1 + 88) < v67) {\n                                goto lab_0x412c10_2;\n                            }\n                            // 0x412a14\n                            *v19 = v62;\n                            *v20 = v63;\n                            v71 = function_40be60(a1, v67);\n                            result = v71;\n                            if ((int32_t)v71 != 0) {\n                                // break (via goto) -> 0x4128bb\n                                goto lab_0x4128bb_7;\n                            }\n                            // 0x412a31\n                            v72 = *v11;\n                            n = *v18;\n                            v73 = *v14;\n                            v74 = *v19;\n                            v75 = *v20;\n                        }\n                        // 0x412931\n                        v70 = v72;\n                        *v20 = v73;\n                        *v18 = v75;\n                        *v14 = v74;\n                        memcmp_rc = memcmp((int64_t *)(v70 + v74), (int64_t *)(v70 + v75), (int32_t)n);\n                        v68 = *v20;\n                        v50 = *v18;\n                        v48 = *v14;\n                        v43 = v70;\n                        if (memcmp_rc != 0) {\n                            goto lab_0x412c10_2;\n                        }\n                    }\n                    int64_t v76 = function_412290(a1, v55, v68, *v15, *v12); // 0x412977\n                    int64_t v77 = *v11; // 0x41297c\n                    result = v76;\n                    if ((int32_t)v76 >= 2) {\n                        // break (via goto) -> 0x4128bb\n                        goto lab_0x4128bb_7;\n                    }\n                    int64_t v78 = v49 + 1; // 0x4128f8\n                    while (v78 < *v57) {\n                        // 0x41290c\n                        v62 = v67;\n                        v49 = v78;\n                        v63 = v65;\n                        v64 = *(int64_t *)(*(int64_t *)(v55 + 40) + 8 * v49);\n                        v65 = *(int64_t *)(v64 + 8);\n                        v66 = v65 - v63;\n                        v67 = v66 + v62;\n                        v68 = v64;\n                        if (v66 >= 1) {\n                            // 0x412927\n                            v69 = v77;\n                            v75 = v63;\n                            n = v66;\n                            v74 = v62;\n                            v73 = v64;\n                            v72 = v69;\n                            if (*(int64_t *)(a1 + 48) < v67) {\n                                // 0x412a00\n                                *v18 = v66;\n                                *v14 = v64;\n                                v50 = v63;\n                                v48 = v62;\n                                v43 = v69;\n                                if (*(int64_t *)(a1 + 88) < v67) {\n                                    goto lab_0x412c10_2;\n                                }\n                                // 0x412a14\n                                *v19 = v62;\n                                *v20 = v63;\n                                v71 = function_40be60(a1, v67);\n                                result = v71;\n                                if ((int32_t)v71 != 0) {\n                                    // break (via goto) -> 0x4128bb\n                                    goto lab_0x4128bb_7;\n                                }\n                                // 0x412a31\n                                v72 = *v11;\n                                n = *v18;\n                                v73 = *v14;\n                                v74 = *v19;\n                                v75 = *v20;\n                            }\n                            // 0x412931\n                            v70 = v72;\n                            *v20 = v73;\n                            *v18 = v75;\n                            *v14 = v74;\n                            memcmp_rc = memcmp((int64_t *)(v70 + v74), (int64_t *)(v70 + v75), (int32_t)n);\n                            v68 = *v20;\n                            v50 = *v18;\n                            v48 = *v14;\n                            v43 = v70;\n                            if (memcmp_rc != 0) {\n                                goto lab_0x412c10_2;\n                            }\n                        }\n                        // 0x412964\n                        v76 = function_412290(a1, v55, v68, *v15, *v12);\n                        v77 = *v11;\n                        result = v76;\n                        if ((int32_t)v76 >= 2) {\n                            // break (via goto) -> 0x4128bb\n                            goto lab_0x4128bb_7;\n                        }\n                        // 0x4128f8\n                        v78 = v49 + 1;\n                    }\n                    // 0x412a77\n                    *v14 = v77;\n                    v44 = v65;\n                    v47 = v67;\n                    goto lab_0x412a7c;\n                }\n            } else {\n                goto lab_0x412672_2;\n            }\n        }\n      lab_0x412690:\n        // 0x412690\n        v59 = *v12;\n        int64_t v79 = *v15; // 0x412695\n        *v23 = 0;\n        int64_t v80 = *v16; // 0x4126a5\n        v30 = v59;\n        if (v80 < *v6) {\n            int64_t v81 = *v4; // 0x4126bf\n            *v15 = 8 * v79;\n            *v10 = 24 * v79;\n            int64_t * v82 = (int64_t *)(v81 + 48);\n            int64_t * v83 = (int64_t *)(v81 + 24);\n            int64_t * v84 = (int64_t *)(v81 + 40);\n            v45 = v80;\n            while (true) {\n              lab_0x412819_2:\n                // 0x412819\n                v46 = v45;\n                int64_t v85 = *v7 + 40 * v46; // 0x412824\n                if (v79 != *(int64_t *)v85) {\n                    goto lab_0x412808;\n                } else {\n                    // 0x41282d\n                    if (v59 != *(int64_t *)(v85 + 8)) {\n                        goto lab_0x412808;\n                    } else {\n                        int64_t v86 = *(int64_t *)(v85 + 24); // 0x412833\n                        int64_t v87 = *(int64_t *)(v85 + 16); // 0x412837\n                        int64_t v88 = v86 - v87; // 0x412843\n                        *v14 = v88;\n                        int64_t v89; // 0x412430\n                        if (v88 == 0) {\n                            // 0x4126e8\n                            v89 = *(int64_t *)(*v84 + 16 + *v10);\n                        } else {\n                            // 0x412851\n                            v89 = *v15 + *v83;\n                        }\n                        // 0x412707\n                        *v12 = 24 * *(int64_t *)v89 + *v82;\n                        int64_t v90 = v86 + v59 - v87; // 0x412713\n                        int64_t v91 = function_40e5c0(a1, v90 - 1, *v5); // 0x41271a\n                        int64_t v92 = 8 * v90; // 0x412724\n                        *v13 = 0;\n                        int64_t v93 = *v21; // 0x412737\n                        int64_t v94 = v93 + v92; // 0x41273e\n                        int64_t v95 = *(int64_t *)(v93 + *v24); // 0x412742\n                        int64_t v96 = *(int64_t *)v94; // 0x412746\n                        if (v95 != 0) {\n                            // 0x41274e\n                            *v13 = *(int64_t *)(v95 + 16);\n                        }\n                        if (v96 == 0) {\n                            // 0x412878\n                            *v18 = v94;\n                            int64_t v97 = function_40db40(v27, v81, (int64_t *)*v12, (int32_t)v91); // 0x41288d\n                            int64_t v98 = *v21; // 0x412897\n                            *(int64_t *)*v18 = v97;\n                            v52 = v98;\n                            v53 = v98;\n                            if (*(int64_t *)(v98 + v92) != 0) {\n                                goto lab_0x4127e2;\n                            } else {\n                                goto lab_0x4128ac;\n                            }\n                        } else {\n                            // 0x412760\n                            *v25 = (int32_t)v91;\n                            *v20 = v92;\n                            int64_t v99 = function_40d9b0(v26, *(int64_t *)(v96 + 80), *v12, v91 & 0xffffffff); // 0x41277a\n                            int32_t v100 = v99; // 0x412788\n                            *v23 = v100;\n                            if (v100 != 0) {\n                                // 0x412a50\n                                free((int64_t *)*v28);\n                                result = (int64_t)*v23;\n                                goto lab_0x4128bb_7;\n                            }\n                            // 0x412797\n                            *v18 = *v21 + *v20;\n                            *(int64_t *)*v18 = function_40db40(v27, v81, v26, *v25);\n                            free((int64_t *)*v28);\n                            int64_t v101 = *v21; // 0x4127d0\n                            v52 = v101;\n                            v53 = v101;\n                            if (*(int64_t *)(v101 + v92) == 0) {\n                                goto lab_0x4128ac;\n                            } else {\n                                goto lab_0x4127e2;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        goto lab_0x4124b0_3;\n    }\n  lab_0x412c10_2:;\n    int64_t v102 = v48;\n    int64_t v103 = v50;\n    *v14 = v43;\n    if (*v57 > v49) {\n        goto lab_0x412672_2;\n    } else {\n        // 0x412c25\n        v44 = v103;\n        v47 = v102;\n        v41 = v102;\n        v42 = v103;\n        if (v49 == 0) {\n            goto lab_0x412a83;\n        } else {\n            goto lab_0x412a7c;\n        }\n    }\n  lab_0x412bc4:;\n    // 0x412bc4\n    int64_t v104; // 0x412430\n    int64_t v105 = v104 + 1; // 0x412bc4\n    int64_t v106 = v105; // 0x412bcd\n    if (*v12 < v105) {\n        // break -> 0x412672\n        goto lab_0x412672_2;\n    }\n    goto lab_0x412aa0;\n  lab_0x412808:;\n    int64_t v130 = v46 + 1; // 0x412808\n    v30 = v59;\n    int64_t v131 = v130; // 0x412813\n    if (v130 >= *v6) {\n        // break -> 0x4124b0\n        goto lab_0x4124b0_3;\n    }\n    // 0x412819\n    v45 = v131;\n    goto lab_0x412819_2;\n  lab_0x4127e2:\n    // 0x4127e2\n    if (*v14 != 0) {\n        goto lab_0x412808;\n    } else {\n        // 0x4127ea\n        if (*(int64_t *)(*(int64_t *)(*v24 + v52) + 16) > *v13) {\n            int64_t v132 = *v12; // 0x412990\n            int64_t v133 = v132 + 16; // 0x41299b\n            int64_t v134 = v132 + 8; // 0x41299f\n            *v13 = v133;\n            int64_t v135 = function_40e470(a1, v134, v133, v59); // 0x4129ae\n            int32_t v136 = v135; // 0x4129b3\n            *v23 = v136;\n            result = v135;\n            if (v136 != 0) {\n                // break (via goto) -> 0x4128bb\n                goto lab_0x4128bb_7;\n            }\n            int64_t v137 = function_412430(a1, v134, *v13); // 0x4129d0\n            int32_t v138 = v137; // 0x4129d5\n            *v23 = v138;\n            result = v137;\n            if (v138 != 0) {\n                // break (via goto) -> 0x4128bb\n                goto lab_0x4128bb_7;\n            }\n            int64_t v139 = v46 + 1; // 0x4129e4\n            v30 = v59;\n            v131 = v139;\n            if (v139 >= *v6) {\n                // break -> 0x4124b0\n                goto lab_0x4124b0_3;\n            }\n            // 0x412819\n            v45 = v131;\n            goto lab_0x412819_2;\n        } else {\n            goto lab_0x412808;\n        }\n    }\n  lab_0x4128ac:;\n    uint32_t v140 = *v23; // 0x4128ac\n    v52 = v53;\n    if (v140 != 0) {\n        // 0x4128bb\n        result = v140;\n        goto lab_0x4128bb_7;\n    }\n    goto lab_0x4127e2;\n  lab_0x412672_2:;\n    int64_t v141 = *v13 + 1; // 0x412672\n    *v13 = v141;\n    if (v141 >= *v8) {\n        // break -> 0x412690\n        goto lab_0x412690;\n    }\n    // 0x412686\n    v40 = v141;\n    v51 = *(int64_t *)*v9;\n    goto lab_0x41264b;\n  lab_0x412a83:;\n    int64_t v142 = v42;\n    int64_t v122; // 0x412b15\n    int64_t v128; // 0x412bec\n    int64_t v127; // 0x412bf1\n    int64_t * v143; // 0x412430\n    int64_t * v144; // 0x412430\n    if (*v12 >= v142) {\n        int64_t * v126 = (int64_t *)(v55 + 16);\n        v143 = (int64_t *)(v55 + 24);\n        v144 = (int64_t *)(v55 + 40);\n        v106 = v142;\n        int64_t v145 = v41; // 0x412a96\n        while (true) {\n          lab_0x412aa0:\n            // 0x412aa0\n            v104 = v106;\n            if (v104 - *v58 >= 1) {\n                // 0x412aab\n                int64_t * v107; // 0x412430\n                int64_t v108 = *v107; // 0x412aab\n                int64_t v109; // 0x412430\n                int64_t v110; // 0x412430\n                if (v108 > v110) {\n                    int64_t v111 = *v14;\n                    v109 = v111;\n                } else {\n                    // 0x412c40\n                    int64_t * v112; // 0x412430\n                    uint64_t v113 = *v112; // 0x412c40\n                    if (v113 <= v110) {\n                        // break -> 0x412672\n                        break;\n                    }\n                    int64_t v114 = function_40bd10(a1, v110 + 1 & 0xffffffff); // 0x412c51\n                    result = v114;\n                    if ((int32_t)v114 != 0) {\n                        // break (via goto) -> 0x4128bb\n                        goto lab_0x4128bb_7;\n                    }\n                    int64_t v115 = *v11; // 0x412c5e\n                    *v14 = v115;\n                    v109 = v115;\n                }\n                int64_t v116 = v109; // 0x412ab5\n                char v117 = *(char *)(v104 - 1 + v116); // 0x412abe\n                char v118 = *(char *)(v116 + v110); // 0x412ac4\n                if (v118 != v117) {\n                    // break -> 0x412672\n                    break;\n                }\n            }\n            int64_t v119 = *(int64_t *)(*v21 + 8 * v104); // 0x412ad8\n            if (v119 != 0) {\n                uint64_t v120 = *(int64_t *)(v119 + 16); // 0x412ae5\n                if (v120 >= 1) {\n                    int64_t v121 = 0;\n                    v122 = *(int64_t *)(8 * v121 + *(int64_t *)(v119 + 24));\n                    int64_t v123 = 16 * v122 + *(int64_t *)*v9; // 0x412b20\n                    int64_t v124; // 0x412b38\n                    int64_t v125; // 0x412b3c\n                    int64_t * mem; // 0x412bec\n                    if (*(char *)(v123 + 8) == 9) {\n                        // 0x412b29\n                        if (*v10 == *(int64_t *)v123) {\n                            if (v122 == -1) {\n                                goto lab_0x412bc4;\n                            } else {\n                                // 0x412b38\n                                v124 = *v126;\n                                v127 = *v58;\n                                v128 = v124;\n                                if (v124 == 0) {\n                                    // 0x412bd8\n                                    *v18 = v125;\n                                    mem = calloc(24, (int32_t)(v104 - v125) + 1);\n                                    v128 = (int64_t)mem;\n                                    v127 = *v18;\n                                    *v126 = v128;\n                                    result = 12;\n                                    if (mem != NULL) {\n                                        goto lab_0x412b48;\n                                    } else {\n                                        goto lab_0x4128bb_7;\n                                    }\n                                } else {\n                                    goto lab_0x412b48;\n                                }\n                            }\n                        }\n                    }\n                    int64_t v129 = v121 + 1; // 0x412b08\n                    while (v120 != v129) {\n                        // 0x412b15\n                        v121 = v129;\n                        v122 = *(int64_t *)(8 * v121 + *(int64_t *)(v119 + 24));\n                        v123 = 16 * v122 + *(int64_t *)*v9;\n                        if (*(char *)(v123 + 8) == 9) {\n                            // 0x412b29\n                            if (*v10 == *(int64_t *)v123) {\n                                if (v122 == -1) {\n                                    goto lab_0x412bc4;\n                                } else {\n                                    // 0x412b38\n                                    v124 = *v126;\n                                    v125 = *v58;\n                                    v127 = v125;\n                                    v128 = v124;\n                                    if (v124 == 0) {\n                                        // 0x412bd8\n                                        *v18 = v125;\n                                        mem = calloc(24, (int32_t)(v104 - v125) + 1);\n                                        v128 = (int64_t)mem;\n                                        v127 = *v18;\n                                        *v126 = v128;\n                                        result = 12;\n                                        if (mem != NULL) {\n                                            goto lab_0x412b48;\n                                        } else {\n                                            goto lab_0x4128bb_7;\n                                        }\n                                    } else {\n                                        goto lab_0x412b48;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x412b08\n                        v129 = v121 + 1;\n                    }\n                }\n            }\n            goto lab_0x412bc4;\n        }\n    }\n    goto lab_0x412672_2;\n  lab_0x412a7c:\n    // 0x412a7c\n    v41 = v47;\n    v42 = v44 + 1;\n    goto lab_0x412a83;\n  lab_0x4124b0_3:\n    // 0x4124b0\n    v29 = *v3 + 1;\n    *v3 = v29;\n    if (v29 >= *(int64_t *)*(int64_t *)(v2 + 80)) {\n        // break -> 0x4128bb\n        goto lab_0x4128bb_7;\n    }\n    goto lab_0x4124c9;\n  lab_0x412540:\n    // 0x412540\n    v54 = *v6;\n    if (v54 > 0) {\n        int64_t v146 = *v7; // 0x412555\n        int64_t v147 = v146 + 8; // 0x41256d\n        int64_t v148 = 0;\n        uint64_t v149 = v148 + v54; // 0x412551\n        int64_t v150 = (v149 / 0x8000000000000000 + v149) / 2; // 0x412566\n        int64_t v151 = v150; // 0x412572\n        int64_t v152 = v54; // 0x412572\n        int64_t v153 = v150; // 0x412572\n        int64_t v154; // 0x412430\n        int64_t v155; // 0x412430\n        uint64_t v156; // 0x412580\n        int64_t v157; // 0x41258e\n        if (v31 <= *(int64_t *)(40 * v150 + v147)) {\n            v155 = v151;\n            v154 = v148;\n            if (v155 <= v148) {\n                // break (via goto) -> 0x4125a7\n                goto lab_0x4125a7;\n            }\n            // 0x412580\n            v156 = v155 + v148;\n            v157 = (v156 / 0x8000000000000000 + v156) / 2;\n            v152 = v155;\n            v153 = v157;\n            while (v31 <= *(int64_t *)(40 * v157 + v147)) {\n                // 0x4125a2\n                v155 = v157;\n                v154 = v148;\n                if (v155 <= v148) {\n                    // break (via goto) -> 0x4125a7\n                    goto lab_0x4125a7;\n                }\n                // 0x412580\n                v156 = v155 + v148;\n                v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                v152 = v155;\n                v153 = v157;\n            }\n        }\n        int64_t v158 = v152;\n        int64_t v159 = v153 + 1; // 0x4125f8\n        v154 = v159;\n        while (v159 < v158) {\n            // 0x412551\n            v148 = v159;\n            v149 = v148 + v158;\n            v150 = (v149 / 0x8000000000000000 + v149) / 2;\n            v151 = v150;\n            v152 = v158;\n            v153 = v150;\n            if (v31 <= *(int64_t *)(40 * v150 + v147)) {\n                v155 = v151;\n                v154 = v148;\n                if (v155 <= v148) {\n                    // break (via goto) -> 0x4125a7\n                    goto lab_0x4125a7;\n                }\n                // 0x412580\n                v156 = v155 + v148;\n                v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                v152 = v155;\n                v153 = v157;\n                while (v31 <= *(int64_t *)(40 * v157 + v147)) {\n                    // 0x4125a2\n                    v155 = v157;\n                    v154 = v148;\n                    if (v155 <= v148) {\n                        // break (via goto) -> 0x4125a7\n                        goto lab_0x4125a7;\n                    }\n                    // 0x412580\n                    v156 = v155 + v148;\n                    v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                    v152 = v155;\n                    v153 = v157;\n                }\n            }\n            // 0x4125f8\n            v158 = v152;\n            v159 = v153 + 1;\n            v154 = v159;\n        }\n      lab_0x4125a7:;\n        int64_t v160 = v154;\n        if (v54 > v160) {\n            int64_t v161 = v146 + 40 * v160; // 0x4125b7\n            int64_t v162 = v161; // 0x4125bf\n            if (v160 != -1 == *(int64_t *)(v161 + 8) == v31) {\n                int64_t v163 = v162;\n                while (v32 != *(int64_t *)v163) {\n                    // 0x4125d0\n                    v162 = v163 + 40;\n                    if (*(char *)(v163 + 32) == 0) {\n                        goto lab_0x412608;\n                    }\n                    v163 = v162;\n                }\n                // 0x4125df\n                *v23 = 0;\n                v30 = v31;\n                goto lab_0x4124b0_3;\n            } else {\n                goto lab_0x412608;\n            }\n        } else {\n            goto lab_0x412608;\n        }\n    } else {\n        goto lab_0x412608;\n    }\n  lab_0x412489:\n    // 0x412489\n    v30 = v31;\n    if ((v35 & 0x2000) != 0 == (v36 & 2) == 0) {\n        goto lab_0x4124b0_3;\n    } else {\n        if ((char)(v34 / 256) > -1) {\n            goto lab_0x412540;\n        } else {\n            // 0x41249e\n            v30 = v31;\n            if ((v36 & 8) != 0) {\n                goto lab_0x412540;\n            } else {\n                goto lab_0x4124b0_3;\n            }\n        }\n    }\n  lab_0x412b48:\n    // 0x412b48\n    *(int64_t *)(v2 - 16) = 9;\n    int64_t v164 = function_4112a0(a1, v128, *v56, v127, v122, v104, (int64_t)&g127); // 0x412b5b\n    int32_t v165 = v164; // 0x412b62\n    if (v165 == 1) {\n        goto lab_0x412bc4;\n    } else {\n        // 0x412b67\n        result = v164;\n        if (v165 != 0) {\n            goto lab_0x4128bb_7;\n        } else {\n            int64_t v166 = *v143; // 0x412b6f\n            if (*v57 == v166) {\n                int64_t v167 = 2 * v166 | 1; // 0x412c6c\n                *v18 = v167;\n                int64_t * mem2 = realloc((int64_t *)*v144, 8 * (int32_t)v167); // 0x412c82\n                result = 12;\n                if (mem2 == NULL) {\n                    goto lab_0x4128bb_7;\n                } else {\n                    // 0x412c90\n                    *v144 = (int64_t)mem2;\n                    *v143 = *v18;\n                    goto lab_0x412b7d;\n                }\n            } else {\n                goto lab_0x412b7d;\n            }\n        }\n    }\n  lab_0x412b7d:;\n    int64_t * mem3 = calloc(1, 40); // 0x412b87\n    result = 12;\n    if (mem3 == NULL) {\n        goto lab_0x4128bb_7;\n    } else {\n        int64_t v168 = (int64_t)mem3; // 0x412b87\n        int64_t v169 = *v57; // 0x412b91\n        *(int64_t *)(*v144 + 8 * v169) = v168;\n        *mem3 = v122;\n        *(int64_t *)(v168 + 8) = v104;\n        *v57 = v169 + 1;\n        function_412290(a1, v55, v168, *v15, *v12);\n        goto lab_0x412bc4;\n    }\n}\n"
        },
        {
            "funcName": "function_412cb0",
            "funcStartAddr": "412cb0",
            "funcEndAddr": "412e67",
            "decompiledFuncCode": "int64_t function_412cb0(int32_t * a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 72); // 0x412cc4\n    int64_t v3 = *v2; // 0x412cc4\n    int64_t * v4 = (int64_t *)(v1 + 184); // 0x412cc8\n    int64_t v5 = *(int64_t *)(v1 + 152); // 0x412ccf\n    int64_t v6 = 8 * v3; // 0x412cd6\n    int64_t * v7 = (int64_t *)(v1 + 192); // 0x412ce1\n    int64_t * v8 = (int64_t *)(*v4 + v6);\n    int64_t result; // 0x412cb0\n    if (*v7 < v3) {\n        // 0x412cea\n        *v8 = a3;\n        *v7 = v3;\n        result = a3;\n    } else {\n        int64_t v9 = *v8; // 0x412d20\n        if (v9 == 0) {\n            // 0x412df8\n            *v8 = a3;\n            result = a3;\n        } else {\n            int64_t v10 = *(int64_t *)(v9 + 80); // 0x412d2c\n            int64_t v11; // bp-88, 0x412cb0\n            if (a3 == 0) {\n                // 0x412db0\n                v11 = __asm_movaps(__asm_movdqu(*(int128_t *)v10));\n                int64_t v12 = function_40e5c0(v1, v3 - 1, *(int32_t *)(v1 + 160)); // 0x412dd0\n                int64_t v13 = function_40db40((int128_t *)a1, v5, &v11, (int32_t)v12); // 0x412de2\n                *v8 = v13;\n                result = v13;\n            } else {\n                int64_t v14 = *(int64_t *)(a3 + 80); // 0x412d35\n                int64_t v15; // 0x412cb0\n                int32_t v16 = function_40d9b0(&v11, v14, v10, v15); // 0x412d49\n                *a1 = v16;\n                if (v16 != 0) {\n                    // 0x412d05\n                    return 0;\n                }\n                int64_t v17 = function_40e5c0(v1, *v2 - 1, *(int32_t *)(v1 + 160)); // 0x412d66\n                int64_t v18 = function_40db40((int128_t *)a1, v5, &v11, (int32_t)v17); // 0x412d87\n                *(int64_t *)(*v4 + v6) = v18;\n                result = v18;\n                if (v14 != 0) {\n                    // 0x412da0\n                    free((int64_t *)v15);\n                    result = v18;\n                }\n            }\n        }\n    }\n    // 0x412cf7\n    if (*(int64_t *)(v5 + 152) == 0) {\n        // 0x412d05\n        return result;\n    }\n    // 0x412e08\n    if (result == 0) {\n        // 0x412d05\n        return 0;\n    }\n    int64_t v19 = result + 16; // 0x412e0d\n    int64_t v20 = result + 24; // 0x412e11\n    int32_t v21 = function_40e470(v1, v19, v20, v3); // 0x412e26\n    *a1 = v21;\n    if (v21 != 0) {\n        // 0x412d05\n        return 0;\n    }\n    // 0x412e2e\n    if ((*(char *)(result + 104) & 64) == 0) {\n        // 0x412d05\n        return result;\n    }\n    int32_t v22 = function_412430(v1, v19, v20); // 0x412e46\n    *a1 = v22;\n    int64_t result2 = 0; // 0x412e4c\n    if (v22 == 0) {\n        // 0x412e4e\n        result2 = *(int64_t *)(*v4 + v6);\n    }\n    // 0x412d05\n    return result2;\n}\n"
        },
        {
            "funcName": "function_412e70",
            "funcStartAddr": "412e70",
            "funcEndAddr": "413194",
            "decompiledFuncCode": "int64_t function_412e70(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 24); // 0x412e89\n    uint64_t v2 = *v1; // 0x412e89\n    int64_t * mem = malloc(8); // 0x412ea3\n    if (mem == NULL) {\n        // 0x413180\n        return 12;\n    }\n    // 0x412eb6\n    int64_t v3; // bp-152, 0x412e70\n    int64_t v4 = &v3; // 0x412e85\n    int64_t v5 = (int64_t)mem; // 0x412ea3\n    *mem = *(int64_t *)(a2 + 16);\n    int64_t v6 = v5; // 0x412ece\n    int64_t v7; // 0x412e70\n    int64_t v8; // 0x412e70\n    int64_t v9; // 0x412e70\n    int64_t v10; // 0x412e70\n    int64_t * v11; // 0x412e70\n    int64_t * v12; // 0x412e70\n    int64_t v13; // 0x412e70\n    int64_t v14; // 0x412f2e\n    int64_t * v15; // 0x412f49\n    int64_t * v16; // 0x412e70\n    int64_t v17; // 0x41301e\n    if ((int32_t)v5 == 0) {\n        // 0x412ed4\n        v6 = 0;\n        if (v2 >= 1) {\n            // 0x412eee\n            v11 = (int64_t *)(v4 + 16);\n            int32_t * v18 = (int32_t *)(v4 + 28);\n            int32_t * v19 = (int32_t *)(a1 + 224);\n            int64_t * v20 = (int64_t *)(a1 + 152);\n            v12 = (int64_t *)(v4 + 8);\n            int64_t * v21 = (int64_t *)(v4 + 40);\n            int64_t * v22 = (int64_t *)(v4 + 48);\n            int64_t * v23 = (int64_t *)(v4 + 32);\n            v13 = a2 + 40;\n            int64_t v24 = v2; // 0x412e70\n            while (true) {\n                int64_t v25 = 8 * v24; // 0x412ef1\n                *v11 = v25;\n                if (*(int64_t *)(v25 + a2) == 0) {\n                    uint32_t v26 = *v18 + 1; // 0x413140\n                    *v18 = v26;\n                    if ((int64_t)*v19 < (int64_t)v26) {\n                        // break -> 0x413156\n                        break;\n                    }\n                } else {\n                    // 0x412f09\n                    *v18 = 0;\n                    if (*v19 < 0) {\n                        // break -> 0x413156\n                        break;\n                    }\n                }\n                int64_t v27 = *(int64_t *)(a1 + 184); // 0x412f22\n                v14 = v24 - 1;\n                *(int64_t *)(v4 + 72) = 0;\n                int64_t v28 = *(int64_t *)(v27 - 8 + *v11); // 0x412f3b\n                v9 = v27;\n                if (v28 != 0) {\n                    // 0x412f49\n                    v15 = (int64_t *)(v28 + 40);\n                    int64_t v29 = *v20; // 0x412f4e\n                    v9 = v27;\n                    if (*v15 >= 1) {\n                        // 0x412f5b\n                        *v12 = 0;\n                        int64_t * v30 = (int64_t *)v29; // 0x41301a\n                        v16 = (int64_t *)(v29 + 24);\n                        v7 = 0;\n                        while (true) {\n                          lab_0x413011:\n                            // 0x413011\n                            v17 = *(int64_t *)(8 * v7 + *(int64_t *)(v28 + 48));\n                            int64_t v31 = 16 * v17; // 0x413025\n                            int64_t v32 = v31 + *v30; // 0x413029\n                            v10 = v32;\n                            if ((*(char *)(v32 + 10) & 16) == 0) {\n                                goto lab_0x412f70;\n                            } else {\n                                int64_t v33 = *v20; // 0x413036\n                                *v21 = v31;\n                                int64_t v34 = v33 + 216; // 0x413052\n                                *v22 = v33;\n                                *v23 = *v1;\n                                int64_t v35 = function_411010(*(int64_t *)v33, v34, v17, a1, v14); // 0x413063\n                                int64_t v36 = *v21; // 0x413068\n                                int32_t v37 = v35; // 0x41306d\n                                int64_t v38 = v35 & 0xffffffff; // 0x41306f\n                                if (v37 < 1) {\n                                    // 0x4130d0\n                                    v8 = v38;\n                                    if (v37 != 0) {\n                                        goto lab_0x412fb1;\n                                    } else {\n                                        // 0x4130d6\n                                        v10 = *v30 + v36;\n                                        goto lab_0x412f70;\n                                    }\n                                } else {\n                                    int64_t v39 = (0x100000000 * v35 >> 32) + v14; // 0x413076\n                                    v8 = v38;\n                                    if (*v23 < v39) {\n                                        goto lab_0x412fb1;\n                                    } else {\n                                        int64_t v40 = *(int64_t *)(8 * v39 + v34); // 0x41308c\n                                        if (v40 == 0) {\n                                            // 0x4130d6\n                                            v10 = *v30 + v36;\n                                            goto lab_0x412f70;\n                                        } else {\n                                            // 0x413095\n                                            *v23 = v36;\n                                            int64_t v41 = *(int64_t *)(*(int64_t *)(*v22 + 24) + 8 * v17); // 0x4130a6\n                                            v8 = v38;\n                                            if (function_40c890(*(int64_t *)(v40 + 16), v40 + 24, v41) != 0) {\n                                                goto lab_0x412fb1;\n                                            } else {\n                                                // 0x4130b8\n                                                v10 = *v30 + *v23;\n                                                goto lab_0x412f70;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n              lab_0x4130e8:\n                // 0x4130e8\n                v6 = v9;\n                if ((int32_t)v9 != 0) {\n                    goto lab_0x413115_3;\n                }\n                // 0x4130ff\n                v24 = v14;\n                v6 = 0;\n                if (v14 == 0) {\n                    goto lab_0x413115_3;\n                }\n            }\n            // 0x413156\n            memset((int64_t *)a2, 0, (int32_t)*v11);\n            free((int64_t *)*(int64_t *)(v4 + 80));\n            return (int32_t)&g127 ^ (int32_t)&g127;\n        }\n    }\n  lab_0x413115_3:;\n    int32_t * v42 = (int32_t *)(v4 + 8); // 0x41311a\n    *v42 = (int32_t)v6;\n    free((int64_t *)*(int64_t *)(v4 + 80));\n    return (int64_t)*v42;\n  lab_0x412f70:;\n    int64_t v43 = v10;\n    if ((char)function_40e6b0(a1, v43, v14) == 0) {\n        goto lab_0x412ffc;\n    } else {\n        int64_t v44 = *(int64_t *)(*v11 + v43); // 0x412f87\n        if (v44 == 0) {\n            goto lab_0x412ffc;\n        } else {\n            int64_t v45 = *(int64_t *)(*v16 + 8 * v17); // 0x412f9d\n            v8 = 1;\n            if (function_40c890(*(int64_t *)(v44 + 16), v44 + 24, v45) == 0) {\n                goto lab_0x412ffc;\n            } else {\n                goto lab_0x412fb1;\n            }\n        }\n    }\n  lab_0x412ffc:;\n    int64_t v46 = *v12 + 1; // 0x412ffc\n    *v12 = v46;\n    v7 = v46;\n    v9 = v46;\n    if (v46 >= *v15) {\n        // break -> 0x4130e8\n        goto lab_0x4130e8;\n    }\n    goto lab_0x413011;\n  lab_0x412fb1:\n    // 0x412fb1\n    if (*(int64_t *)v13 == 0) {\n        goto lab_0x412fe7;\n    } else {\n        int64_t v47 = *(int64_t *)(*v16 + 8 * v17); // 0x412fd2\n        *(int64_t *)(v4 - 16) = v14;\n        int64_t v48 = *(int64_t *)(v4 + 56); // 0x412fd7\n        int64_t v49 = function_40cb20(a1, v13, v48, v47, (0x100000000 * v8 >> 32) + v14, v17, (int64_t)&g127); // 0x412fdc\n        if ((char)v49 != 0) {\n            goto lab_0x412ffc;\n        } else {\n            goto lab_0x412fe7;\n        }\n    }\n  lab_0x412fe7:\n    // 0x412fe7\n    v6 = 12;\n    if ((char)function_40b280(v4 + 64, v17) == 0) {\n        goto lab_0x413115_3;\n    }\n    goto lab_0x412ffc;\n}\n"
        },
        {
            "funcName": "function_4131a0",
            "funcStartAddr": "4131a0",
            "funcEndAddr": "415129",
            "decompiledFuncCode": "int64_t function_4131a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, uint64_t a7, int64_t a8, int64_t a9) {\n    // 0x4131a0\n    int64_t v1; // 0x4131a0\n    int64_t v2 = v1;\n    int64_t v3; // bp-312, 0x4131a0\n    __asm_rep_stosq_memset((char *)&v3, 0, 32);\n    int64_t v4 = *(int64_t *)(a1 + 32); // 0x4131ec\n    char * v5 = (char *)v4; // 0x4131f8\n    char * v6 = v5; // 0x413200\n    if (v4 != 0) {\n        unsigned char v7 = *(char *)(a1 + 56); // 0x413202\n        v6 = NULL;\n        if (a4 != a5 && (v7 & 8) != 0) {\n            // 0x413218\n            v6 = v7 % 2 == 0 ? v5 : NULL;\n        }\n    }\n    int64_t * v8 = (int64_t *)(a1 + 48); // 0x413235\n    uint64_t v9 = *v8; // 0x413235\n    int64_t v10 = 0; // 0x413241\n    int64_t v11 = a7; // 0x413241\n    if (v9 < a7) {\n        // 0x413243\n        v10 = -1 - v9 + a7;\n        v11 = v9 + 1;\n    }\n    int64_t v12 = *(int64_t *)(a1 + 16); // 0x41326d\n    if (v12 == 0) {\n        // 0x413c10\n        return 1;\n    }\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x41327d\n    int64_t v14 = *v13; // 0x41327d\n    if (v14 == 0) {\n        // 0x413c10\n        return 1;\n    }\n    int64_t * v15 = (int64_t *)(a1 + 80); // 0x41328a\n    int64_t v16 = *v15; // 0x41328a\n    if (v16 == 0) {\n        // 0x413c10\n        return 1;\n    }\n    int64_t * v17 = (int64_t *)(a1 + 88); // 0x413297\n    int64_t v18 = *v17; // 0x413297\n    if (v18 == 0) {\n        // 0x413c10\n        return 1;\n    }\n    int64_t * v19 = (int64_t *)(a1 + 96); // 0x4132a4\n    if (*v19 == 0) {\n        // 0x413c10\n        return 1;\n    }\n    int64_t v20 = a4; // 0x4132b4\n    int64_t v21 = a5; // 0x4132b4\n    if (*(int64_t *)(v14 + 16) != 0) {\n        goto lab_0x4132e8;\n    } else {\n        // 0x4132b6\n        v20 = a4;\n        v21 = a5;\n        if (*(int64_t *)(v16 + 16) != 0) {\n            goto lab_0x4132e8;\n        } else {\n            // 0x4132bd\n            if (*(int64_t *)(v18 + 16) == 0) {\n                goto lab_0x4132ca;\n            } else {\n                // 0x4132c4\n                if (*(char *)(a1 + 56) < 0) {\n                    goto lab_0x4132e8;\n                } else {\n                    goto lab_0x4132ca;\n                }\n            }\n        }\n    }\n  lab_0x413bf0_9:;\n    // 0x413bf0\n    int64_t v22; // 0x4131a0\n    free((int64_t *)v22);\n    int64_t * v23; // 0x4131a0\n    int64_t v24; // 0x4131a0\n    int64_t v25; // 0x4131a0\n    if (*v23 != 0) {\n        // 0x414408\n        function_40c500(&v3);\n        free((int64_t *)v24);\n        free((int64_t *)v25);\n    }\n    // 0x413c08\n    function_40c4c0(&v3);\n    // 0x413c10\n    int64_t v26; // 0x4131a0\n    return v26 & 0xffffffff;\n  lab_0x414158_3:;\n    // 0x414158\n    int32_t v27; // 0x4131a0\n    int32_t v28 = v27; // bp-392, 0x414158\n    int32_t v29; // 0x4131a0\n    int32_t v30 = v29; // 0x414162\n    int64_t v31; // 0x4131a0\n    int64_t v32 = v31; // 0x414162\n    int64_t v33 = 0; // 0x414162\n    int64_t v34; // 0x4131a0\n    int64_t v35 = v34; // 0x414162\n    int64_t v36; // 0x4131a0\n    int64_t v37 = v36; // 0x414162\n    int64_t v38; // 0x4131a0\n    int64_t v39 = v38; // 0x414162\n    int64_t * v40; // 0x4131a0\n    v23 = v40;\n    v26 = 12;\n    int64_t v41; // 0x4131a0\n    v25 = v41;\n    int64_t v42; // 0x4131a0\n    v24 = v42;\n    v22 = 0;\n    int64_t v43; // 0x4131a0\n    if (v43 == 0) {\n        goto lab_0x413bf0_9;\n    } else {\n        goto lab_0x413948;\n    }\n  lab_0x4139ef:;\n    // 0x4139ef\n    int64_t v44; // 0x4131a0\n    int64_t v45 = v44;\n    int64_t v46; // 0x4131a0\n    int64_t v47 = v46;\n    int64_t v48; // 0x4131a0\n    int64_t v49 = v48;\n    int32_t v50; // 0x4131a0\n    int32_t v51 = v50;\n    v23 = v40;\n    v26 = 12;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    int64_t v52; // 0x4131a0\n    int64_t v53 = v52; // 0x4131a0\n    int128_t v54; // 0x4131a0\n    int128_t v55 = v54; // 0x4131a0\n    int64_t v56; // 0x4131a0\n    int64_t v57 = v56; // 0x4131a0\n    int32_t v58; // 0x4131a0\n    int64_t v59; // 0x4131a0\n    int64_t v60; // 0x4131a0\n    int64_t v61; // 0x4131a0\n    int64_t v62; // 0x4131a0\n    int64_t v63; // 0x4131a0\n    int64_t v64; // 0x4131a0\n    int64_t v65; // 0x4131a0\n    int64_t v66; // 0x4131a0\n    int64_t v67; // bp-376, 0x4131a0\n    int64_t v68; // 0x4131a0\n    int64_t * mem; // 0x41426f\n    int64_t v69; // 0x4131a0\n    int64_t * mem2; // 0x414296\n    int64_t v70; // 0x414296\n    int128_t v71; // 0x4142be\n    int64_t v72; // 0x41339d\n    char * v73; // 0x4131a0\n    char * v74; // 0x4131a0\n    int64_t v75; // 0x4131a0\n    int128_t v76; // 0x4131a0\n    switch (v45) {\n        case -1: {\n            goto lab_0x414050;\n        }\n        case -2: {\n            goto lab_0x413bf0_9;\n        }\n        default: {\n            // 0x413a03\n            int64_t v77; // 0x4131a0\n            if (v11 < 2 | (*v73 & 16) != 0) {\n                // 0x413bc0\n                v65 = v45;\n                v64 = v43;\n                if (*v40 == 0) {\n                    goto lab_0x413bd3_2;\n                }\n                int64_t v78 = *(int64_t *)(8 * v45 + v43); // 0x41421e\n                int64_t v79 = function_40e7e0(&v3, *(int64_t *)(v78 + 16), v78 + 24, v45); // 0x41422a\n                v77 = v79;\n            } else {\n                int64_t v80 = *(int64_t *)(8 * v45 + v43); // 0x413a37\n                int64_t v81 = function_40e7e0(&v3, *(int64_t *)(v80 + 16), v80 + 24, v45); // 0x413a43\n                v77 = v81;\n                if (*v74 % 2 == 0) {\n                    // 0x413a65\n                    v65 = v45;\n                    v64 = v43;\n                    v77 = v81;\n                    if (*v40 == 0) {\n                        goto lab_0x413bd3_2;\n                    }\n                }\n            }\n            // 0x41423f\n            if (v45 >= 0x1fffffffffffffff) {\n                // break -> 0x413bf0\n                break;\n            }\n            int64_t v82 = v45 + 1; // 0x41425f\n            int32_t size = 8 * (int32_t)v82; // 0x41426f\n            mem = malloc(size);\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            if (mem == NULL) {\n                // break -> 0x413bf0\n                break;\n            }\n            int64_t v83 = v77;\n            v69 = (int64_t)mem;\n            if (*v40 == 0) {\n                int128_t v84 = __asm_pxor(v54, v54); // 0x413fd0\n                v67 = v69;\n                __asm_movaps(v84);\n                int64_t v85 = function_412e70(v72, v75); // 0x414017\n                free(NULL);\n                int32_t v86 = v85;\n                v58 = v86;\n                v68 = 0;\n                v66 = v83;\n                v76 = v84;\n                v63 = v85;\n                if (v86 != 0) {\n                    goto lab_0x414802;\n                } else {\n                    // 0x414035\n                    v60 = v45;\n                    if (*mem != 0) {\n                        goto lab_0x4143a8;\n                    }\n                    // 0x41403f\n                    free(mem);\n                    v53 = v83;\n                    v55 = v84;\n                    v57 = v69;\n                    goto lab_0x414050;\n                }\n            } else {\n                // 0x414293\n                mem2 = malloc(size);\n                v70 = (int64_t)mem2;\n                int64_t v87 = v45; // 0x4142a6\n                if (mem2 == NULL) {\n                    // 0x414844\n                    free(mem);\n                    v23 = v40;\n                    v26 = 12;\n                    v25 = v41;\n                    v24 = v42;\n                    v22 = v43;\n                    goto lab_0x413bf0_9;\n                }\n                v61 = v83;\n                v62 = v82;\n                int128_t v88 = v54;\n                memset(mem2, 0, 8 * (int32_t)v62);\n                v71 = __asm_pxor(v88, v88);\n                __asm_movaps(v71);\n                v67 = v69;\n                int64_t v89 = function_412e70(v72, v75); // 0x414301\n                free(NULL);\n                int32_t v90 = v89;\n                v58 = v90;\n                v68 = v70;\n                v66 = v61;\n                v76 = v71;\n                v63 = v89;\n                while (v90 == 0) {\n                    // 0x414323\n                    v59 = v87;\n                    if (*mem != 0) {\n                        goto lab_0x41437d_2;\n                    }\n                    // 0x414329\n                    if (*mem2 != 0) {\n                        goto lab_0x41437d_2;\n                    }\n                    int64_t v91 = v59; // 0x414348\n                    if (v59 == 0) {\n                        goto lab_0x414430_2;\n                    }\n                    int64_t v92; // 0x4131a0\n                    int64_t v93; // 0x4131a0\n                    int64_t v94; // 0x41434e\n                    while (true) {\n                        // 0x41434e\n                        v92 = v91;\n                        v93 = v92 - 1;\n                        v94 = *(int64_t *)(8 * v93 + v43);\n                        if (v94 != 0) {\n                            // 0x414357\n                            if ((*(char *)(v94 + 104) & 16) != 0) {\n                                // break -> 0x41435d\n                                break;\n                            }\n                        }\n                        // 0x414340\n                        v91 = v93;\n                        if (v93 == 0) {\n                            goto lab_0x414430_2;\n                        }\n                    }\n                    int64_t v95 = function_40e7e0(&v3, *(int64_t *)(v94 + 16), v94 + 24, v93); // 0x414370\n                    v87 = v93;\n                    v61 = v95;\n                    v62 = v92;\n                    v88 = v71;\n                    memset(mem2, 0, 8 * (int32_t)v62);\n                    v71 = __asm_pxor(v88, v88);\n                    __asm_movaps(v71);\n                    v67 = v69;\n                    v89 = function_412e70(v72, v75);\n                    free(NULL);\n                    v90 = v89;\n                    v58 = v90;\n                    v68 = v70;\n                    v66 = v61;\n                    v76 = v71;\n                    v63 = v89;\n                }\n                goto lab_0x414802;\n            }\n        }\n    }\n  lab_0x413e6e:;\n    // 0x413e6e\n    int64_t v96; // 0x4131a0\n    int64_t v97 = v96 + 1; // 0x413e6e\n    int64_t v98; // 0x4131a0\n    int64_t v99 = v98; // 0x413e76\n    int64_t v100; // 0x4131a0\n    int64_t v101 = v100; // 0x413e76\n    int64_t v102; // 0x4131a0\n    int64_t v103 = v102; // 0x413e76\n    int64_t v104; // 0x4131a0\n    int64_t v105 = v104; // 0x413e76\n    int64_t v106; // 0x4131a0\n    int64_t v107 = v106; // 0x413e76\n    int64_t v108 = v97; // 0x413e76\n    int64_t v109 = v98; // 0x413e76\n    int64_t v110 = v100; // 0x413e76\n    int64_t v111 = v102; // 0x413e76\n    int64_t v112 = v106; // 0x413e76\n    int64_t v113 = v104; // 0x413e76\n    int64_t v114 = v106; // 0x413e76\n    int64_t v115 = v36; // 0x413e76\n    int64_t v116; // 0x4131a0\n    int64_t v117 = v116; // 0x413e76\n    int64_t * v118; // 0x413d00\n    if (v97 >= *v118) {\n        // break -> 0x4141c3\n        goto lab_0x4141c3;\n    }\n    goto lab_0x413e7c;\n  lab_0x413d60:;\n    // 0x413d60\n    int64_t v119; // 0x4131a0\n    int64_t v121; // 0x413e84\n    int64_t v135 = function_411010(v36, a1 + 216, v121, v72, v119); // 0x413d6e\n    int64_t v120; // 0x4131a0\n    v98 = v120;\n    v100 = v72;\n    v102 = v121;\n    v104 = v36;\n    int64_t v136; // 0x4131a0\n    v106 = v136;\n    v116 = v121;\n    int64_t v137; // 0x4131a0\n    int64_t v138; // 0x4131a0\n    int64_t v139; // 0x4131a0\n    int64_t v140; // 0x4131a0\n    int32_t v141; // bp-388, 0x4131a0\n    int64_t v142; // 0x413dce\n    int64_t * v143; // 0x413312\n    int32_t v127; // 0x4131a0\n    int64_t v144; // 0x4131a0\n    if ((int32_t)v135 == 0) {\n        goto lab_0x413e6e;\n    } else {\n        int64_t v145 = (0x100000000 * v135 >> 32) + v136; // 0x413d7e\n        int32_t v146 = function_40be60(v72, v145);\n        v141 = v146;\n        v27 = v146;\n        v31 = v120;\n        v34 = v119;\n        v38 = v121;\n        if (v146 != 0) {\n            goto lab_0x414158_3;\n        }\n        int64_t v147 = 8 * v145; // 0x413dc6\n        v142 = v147 + v43;\n        int64_t v148 = *v8 + 24 * *(int64_t *)(*v143 + 8 * v121); // 0x413dde\n        int64_t * v149 = (int64_t *)v142; // 0x413de2\n        int64_t v150 = *v149; // 0x413de2\n        if (v150 == 0) {\n            // 0x413f00\n            v67 = __asm_movaps(__asm_movdqu(*(int128_t *)v148));\n            int64_t v151 = *(int64_t *)(v148 + 16); // 0x413f13\n            int64_t v152 = function_40e5c0(v72, v145 - 1, v127); // 0x413f26\n            int64_t v153 = v152 & 0xffffffff; // 0x413f3e\n            int64_t v154 = function_40db40((int128_t *)&v141, a1, &v67, (int32_t)v152); // 0x413f40\n            *v149 = v154;\n            v98 = v151;\n            v100 = v153;\n            v102 = v43;\n            v104 = v144;\n            v106 = v136;\n            v116 = v147;\n            v140 = v151;\n            v138 = v153;\n            v139 = v144;\n            v137 = v147;\n            if (v154 != 0) {\n                goto lab_0x413e6e;\n            } else {\n                goto lab_0x413f60;\n            }\n        } else {\n            int64_t v155 = function_40d9b0(&v67, *(int64_t *)(v150 + 80), v148, v72); // 0x413dfa\n            int32_t v156 = v155;\n            v141 = v156;\n            v27 = v156;\n            v31 = v120;\n            v34 = v142;\n            v38 = v147;\n            if (v156 != 0) {\n                goto lab_0x414158_3;\n            }\n            int64_t v157 = function_40e5c0(v72, v145 - 1, v127); // 0x413e1c\n            int64_t v158 = v157 & 0xffffffff; // 0x413e34\n            int64_t v159 = function_40db40((int128_t *)&v141, a1, &v67, (int32_t)v157); // 0x413e3e\n            *v149 = v159;\n            free((int64_t *)v120);\n            v98 = v120;\n            v100 = v158;\n            v102 = v43;\n            v104 = v120;\n            v106 = v136;\n            v116 = v142;\n            v140 = v120;\n            v138 = v158;\n            v139 = v120;\n            v137 = v142;\n            if (*v149 == 0) {\n                goto lab_0x413f60;\n            } else {\n                goto lab_0x413e6e;\n            }\n        }\n    }\n  lab_0x413d41:;\n    // 0x413d41\n    int64_t v132; // 0x4131a0\n    int64_t v160 = v132;\n    v98 = v120;\n    int64_t v129; // 0x413ed4\n    v100 = v129;\n    v102 = v160;\n    v104 = v72;\n    v106 = v119;\n    v116 = v121;\n    uint64_t v125; // 0x413e98\n    uint64_t v126; // 0x413ebe\n    int64_t v128; // 0x413ecf\n    if ((v125 & 0x2000) != 0 == (v126 & 2) == 0) {\n        goto lab_0x413e6e;\n    } else {\n        uint32_t v161 = (int32_t)v128 & 128; // 0x413d4e\n        if (v161 == 0) {\n            goto lab_0x413d60;\n        } else {\n            // 0x413d56\n            v98 = v120;\n            v100 = v161;\n            v102 = v160;\n            v104 = v72;\n            v106 = v119;\n            v116 = v121;\n            if ((v126 & 8) == 0) {\n                goto lab_0x413e6e;\n            } else {\n                goto lab_0x413d60;\n            }\n        }\n    }\n  lab_0x413f60:\n    // 0x413f60\n    v98 = v140;\n    v100 = v138;\n    v102 = v43;\n    v104 = v139;\n    v106 = v136;\n    v116 = v137;\n    v27 = v141;\n    v31 = v140;\n    v34 = v142;\n    v38 = v137;\n    if (v141 != 0) {\n        goto lab_0x414158_3;\n    }\n    goto lab_0x413e6e;\n  lab_0x413bd3_2:\n    // 0x413bd3\n    v23 = v40;\n    int64_t v162; // 0x413725\n    v26 = v162;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    int64_t v163; // 0x4131a0\n    int64_t v164; // 0x4131a0\n    int64_t v165; // 0x4131a0\n    int64_t v166; // 0x414597\n    if (v11 != 0) {\n        // 0x414578\n        v165 = a8 + 16;\n        v166 = 16 * v11 + a8;\n        v163 = v165;\n        if (v11 < 2) {\n            // 0x414884\n            *(int64_t *)a8 = 0;\n            *(int64_t *)(a8 + 8) = v65;\n            v164 = 0;\n            goto lab_0x414652;\n        } else {\n            goto lab_0x4145b0;\n        }\n    } else {\n        goto lab_0x413bf0_9;\n    }\n  lab_0x4143a8:\n    // 0x4143a8\n    free((int64_t *)v43);\n    v65 = v60;\n    v64 = v69;\n    goto lab_0x413bd3_2;\n  lab_0x41437d_2:;\n    int64_t v167 = function_40e030(a1, v69, v70, v62); // 0x41438b\n    free(mem2);\n    int32_t v168 = v167;\n    v60 = v59;\n    v58 = v168;\n    v68 = 0;\n    v66 = v61;\n    v76 = v71;\n    v63 = v167;\n    if (v168 != 0) {\n        goto lab_0x414802;\n    } else {\n        goto lab_0x4143a8;\n    }\n  lab_0x414430_2:\n    // 0x414430\n    free(mem);\n    free(mem2);\n    function_40c500(&v3);\n    int32_t v169 = v51; // 0x414450\n    int64_t v170 = v61; // 0x414450\n    int128_t v171 = v71; // 0x414450\n    int64_t v172; // bp-384, 0x4131a0\n    int64_t v173 = v172; // 0x414450\n    int64_t v174 = v49; // 0x414450\n    int64_t v175 = v47; // 0x414450\n    int64_t v176 = v69; // 0x414450\n    goto lab_0x414060;\n  lab_0x413914:;\n    // 0x413914\n    int64_t v298; // 0x4131a0\n    int64_t v469 = v298;\n    int64_t v297; // 0x4131a0\n    int64_t v470 = v297;\n    int64_t v296; // 0x4131a0\n    int64_t v471 = v296;\n    int64_t v293; // 0x4131a0\n    int64_t v472 = v293;\n    int64_t v291; // 0x4131a0\n    int64_t v473 = v291;\n    int64_t v294; // 0x4131a0\n    int32_t v474 = (int32_t)v294 + 1; // 0x413918\n    int64_t v326; // 0x4131a0\n    int64_t v475 = (int64_t)*(char *)(v294 + v326); // 0x413928\n    int64_t v282; // 0x4131a0\n    int64_t * v476 = (int64_t *)(v282 + 88); // 0x41392c\n    int64_t v477 = *v476; // 0x41392c\n    int64_t v295; // 0x4131a0\n    int64_t v478 = v295; // 0x413933\n    int64_t v479 = v477; // 0x413933\n    int64_t v480; // 0x4131a0\n    int64_t v292; // 0x4131a0\n    int64_t v481; // 0x4131a0\n    int64_t v482; // 0x4131a0\n    int64_t v347; // 0x4131a0\n    if (v477 == 0) {\n        int64_t v483 = v292;\n        int64_t v484 = *(int64_t *)(v282 + 96); // 0x413f78\n        while (v484 == 0) {\n            // 0x414170\n            if ((char)function_40f2d0(a1, v282, v472, v483, v471) == 0) {\n                // 0x414188\n                v28 = 12;\n                v30 = v474;\n                v32 = v473;\n                v33 = 0;\n                v35 = v471;\n                v37 = v470;\n                v39 = v469;\n                v23 = v40;\n                v26 = 12;\n                v25 = v41;\n                v24 = v42;\n                v22 = 0;\n                if (v43 != 0) {\n                    goto lab_0x413948;\n                } else {\n                    goto lab_0x413bf0_9;\n                }\n            }\n            int64_t v485 = *v476; // 0x41392c\n            v478 = a1;\n            v479 = v485;\n            if (v485 != 0) {\n                goto lab_0x413939;\n            }\n            v484 = *(int64_t *)(v282 + 96);\n        }\n        int64_t v486 = v484 + 8 * v475;\n        int64_t v487 = function_40e5c0(v72, (int64_t)v474 - 1, v127) % 2 == 0 ? v486 : v486 + 2048;\n        v482 = v347;\n        v480 = v487;\n        v481 = v72;\n    } else {\n      lab_0x413939:\n        // 0x413939\n        v482 = v472;\n        v480 = v479 + 8 * v475;\n        v481 = v478;\n    }\n    int64_t v488 = *(int64_t *)v480;\n    v30 = v474;\n    v32 = v473;\n    v33 = v488;\n    v35 = v471;\n    v37 = v470;\n    v39 = v469;\n    int32_t v489 = v474; // 0x413946\n    int64_t v490 = v473; // 0x413946\n    int64_t v491 = v482; // 0x413946\n    int64_t v492 = v488; // 0x413946\n    int64_t v493 = v481; // 0x413946\n    int64_t v494 = v471; // 0x413946\n    int64_t v495 = v470; // 0x413946\n    int64_t v496 = v469; // 0x413946\n    if (v43 == 0) {\n        goto lab_0x41395e;\n    } else {\n        goto lab_0x413948;\n    }\n  lab_0x413d00:;\n    // 0x413d00\n    int64_t v300; // 0x4131a0\n    int64_t v497 = v300;\n    int64_t v299; // 0x4131a0\n    int64_t v498 = v299;\n    v118 = (int64_t *)(v282 + 16);\n    int64_t v277; // 0x4131a0\n    v109 = v277;\n    int64_t v284; // 0x4138d9\n    v110 = v284;\n    int64_t v278; // 0x4131a0\n    v111 = v278;\n    v112 = v498;\n    v113 = v497;\n    int64_t v280; // 0x4131a0\n    v114 = v280;\n    int64_t v281; // 0x4131a0\n    v115 = v281;\n    int64_t v283; // 0x4131a0\n    v117 = v283;\n    if (*v118 >= 1) {\n        int64_t * v122 = (int64_t *)(v282 + 24); // 0x413e7c\n        v136 = v29;\n        v99 = v277;\n        v101 = v284;\n        v103 = v278;\n        v105 = v497;\n        v107 = v498;\n        v108 = 0;\n        while (true) {\n          lab_0x413e7c:\n            // 0x413e7c\n            v96 = v108;\n            v119 = v107;\n            v36 = v105;\n            v120 = v99;\n            v121 = *(int64_t *)(*v122 + 8 * v96);\n            int64_t v123 = 16 * v121 + v36; // 0x413e8f\n            v98 = v120;\n            v100 = v101;\n            v102 = v103;\n            v104 = v36;\n            v106 = v119;\n            v116 = v121;\n            if ((*(char *)(v123 + 10) & 16) == 0) {\n                goto lab_0x413e6e;\n            } else {\n                uint32_t v124 = *(int32_t *)(v123 + 8); // 0x413e98\n                if ((v124 & 0x3ff00) == 0) {\n                    goto lab_0x413d60;\n                } else {\n                    // 0x413ea7\n                    v125 = (int64_t)v124;\n                    v126 = function_40e5c0(v72, v119, v127);\n                    v128 = v125 / 256;\n                    v129 = v128 & 0xff03ff;\n                    if ((v125 & 1024) != 0) {\n                        // 0x413d30\n                        v98 = v120;\n                        v100 = v129;\n                        v102 = v128;\n                        v104 = v72;\n                        v106 = v119;\n                        v116 = v121;\n                        if (v126 % 2 == 0) {\n                            goto lab_0x413e6e;\n                        } else {\n                            uint32_t v130 = (int32_t)v128 & 8; // 0x413d38\n                            int64_t v131 = v130; // 0x413d38\n                            v132 = v131;\n                            v98 = v120;\n                            v100 = v129;\n                            v102 = v131;\n                            v104 = v72;\n                            v106 = v119;\n                            v116 = v121;\n                            if (v130 != 0) {\n                                goto lab_0x413e6e;\n                            } else {\n                                goto lab_0x413d41;\n                            }\n                        }\n                    } else {\n                        uint32_t v133 = (int32_t)v128 & 8; // 0x413ee2\n                        int64_t v134 = v133; // 0x413ee2\n                        v132 = v134;\n                        v98 = v120;\n                        v100 = v129;\n                        v102 = v134;\n                        v104 = v72;\n                        v106 = v119;\n                        v116 = v121;\n                        if (v133 == 0 || v126 % 2 == 0) {\n                            goto lab_0x413d41;\n                        } else {\n                            goto lab_0x413e6e;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4141c3:\n    // 0x4141c3\n    v28 = 0;\n    v291 = v109;\n    v292 = v110;\n    v293 = v111;\n    v294 = v112;\n    v295 = v113;\n    v296 = v114;\n    v297 = v115;\n    v298 = v117;\n    goto lab_0x413914;\n  lab_0x41395e:;\n    int64_t v499 = v496;\n    int64_t v500 = v495;\n    int64_t v501 = v494;\n    int64_t v502 = v490;\n    int32_t v503 = v489;\n    int32_t v504 = v503; // 0x413961\n    int64_t v505 = v491; // 0x413961\n    int64_t v506 = v492; // 0x413961\n    int64_t v507 = v493; // 0x413961\n    int64_t v265; // 0x4131a0\n    int64_t v263; // 0x4131a0\n    int64_t v264; // 0x4131a0\n    int32_t v261; // 0x4131a0\n    int64_t v262; // 0x4131a0\n    int64_t v260; // 0x4131a0\n    int64_t v276; // 0x4131a0\n    int64_t v259; // 0x4131a0\n    int64_t v275; // 0x4131a0\n    int64_t v274; // 0x4131a0\n    int32_t v258; // 0x4131a0\n    int32_t v272; // 0x4131a0\n    int64_t v348; // 0x4131a0\n    char v349; // 0x4131a0\n    if (v492 == 0) {\n        // 0x413967\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v28 != 0) {\n            // break (via goto) -> 0x413bf0\n            goto lab_0x413bf0_9;\n        }\n        // 0x41397e\n        v258 = v272;\n        v259 = v275;\n        v260 = v276;\n        v261 = v503;\n        v262 = v502;\n        v263 = v501;\n        v264 = v500;\n        v265 = v499;\n        if (v43 == 0) {\n            // break -> 0x4139dd\n            goto lab_0x4139dd_6;\n        }\n        int32_t v508 = v503; // 0x413996\n        v258 = v272;\n        v259 = v275;\n        v260 = v276;\n        v261 = v503;\n        v262 = v502;\n        v263 = v501;\n        v264 = v500;\n        v265 = v499;\n        if ((v349 & (char)v274) != 0) {\n            // break -> 0x4139dd\n            goto lab_0x4139dd_6;\n        }\n        int32_t v509 = v508;\n        v258 = v272;\n        v259 = v275;\n        v260 = v276;\n        v261 = v509;\n        v262 = v502;\n        v263 = v501;\n        v264 = v500;\n        v265 = v499;\n        if (v509 > -1) {\n            // break (via goto) -> 0x4139dd\n            goto lab_0x4139dd_6;\n        }\n        int64_t v510 = (int64_t)v509 + 1;\n        int64_t v511; // 0x4139c3\n        while (*(int64_t *)(8 * v510 + v43) == 0) {\n            // 0x4139c3\n            v511 = v510 + 1;\n            v258 = v272;\n            v259 = v275;\n            v260 = v276;\n            v261 = 0;\n            v262 = v502;\n            v263 = v501;\n            v264 = v500;\n            v265 = v499;\n            if (v511 > 0) {\n                // break (via goto) -> 0x4139dd\n                goto lab_0x4139dd_6;\n            }\n            v510 = v511;\n        }\n        int64_t v512 = function_412cb0(&v28, &v3, 0); // 0x413c45\n        uint32_t v513 = v28; // 0x413c4a\n        int32_t v514 = v510;\n        while (v513 == 0) {\n            // 0x413c55\n            v508 = v514;\n            if (v512 != 0) {\n                // 0x413870\n                v504 = v514;\n                v505 = v513;\n                v506 = v512;\n                v507 = v348;\n                goto lab_0x413870_2;\n            }\n            v509 = v508;\n            v258 = v272;\n            v259 = v275;\n            v260 = v276;\n            v261 = v509;\n            v262 = v502;\n            v263 = v501;\n            v264 = v500;\n            v265 = v499;\n            if (v509 > -1) {\n                // break (via goto) -> 0x4139dd\n                goto lab_0x4139dd_6;\n            }\n            // 0x4139b0\n            v510 = (int64_t)v509 + 1;\n            while (*(int64_t *)(8 * v510 + v43) == 0) {\n                // 0x4139c3\n                v511 = v510 + 1;\n                v258 = v272;\n                v259 = v275;\n                v260 = v276;\n                v261 = 0;\n                v262 = v502;\n                v263 = v501;\n                v264 = v500;\n                v265 = v499;\n                if (v511 > 0) {\n                    // break (via goto) -> 0x4139dd\n                    goto lab_0x4139dd_6;\n                }\n                v510 = v511;\n            }\n            // 0x413c30\n            v512 = function_412cb0(&v28, &v3, 0);\n            v513 = v28;\n            v514 = v510;\n        }\n        // 0x413c70\n        v504 = v514;\n        v505 = v513;\n        v506 = v512;\n        v507 = v348;\n        v258 = v272;\n        v259 = v275;\n        v260 = v276;\n        v261 = v514;\n        v262 = v502;\n        v263 = v501;\n        v264 = v500;\n        v265 = v499;\n        if (v512 == 0) {\n            // break -> 0x4139dd\n            goto lab_0x4139dd_6;\n        }\n    }\n    goto lab_0x413870_2;\n  lab_0x413948:;\n    int64_t v564 = function_412cb0(&v28, &v3, v33); // 0x413956\n    v489 = v30;\n    v490 = v32;\n    v491 = v33;\n    v492 = v564;\n    v493 = v348;\n    v494 = v35;\n    v495 = v37;\n    v496 = v39;\n    goto lab_0x41395e;\n  lab_0x413870_2:;\n    int64_t v515 = v507;\n    int64_t v516 = v506;\n    int64_t v517 = v505;\n    int32_t v518 = v504;\n    int64_t v519 = v518; // 0x413873\n    char v520 = *(char *)(v516 + 104); // 0x413895\n    int64_t v521 = v274; // 0x41389b\n    int64_t v522 = v275; // 0x41389b\n    int64_t v523 = v276; // 0x41389b\n    int64_t v524 = v517; // 0x41389b\n    int64_t v525 = v515; // 0x41389b\n    int64_t v526; // 0x4131a0\n    int64_t v527; // 0x4131a0\n    if ((v520 & 16) == 0) {\n        goto lab_0x4138c8;\n    } else {\n        // 0x41389d\n        v527 = v517;\n        v526 = v515;\n        if (v520 < 0) {\n            int64_t v528 = v516 + 24; // 0x413c94\n            int64_t v529 = function_40e7e0(&v3, *(int64_t *)(v516 + 16), v528, v519); // 0x413c9e\n            v527 = v528;\n            v526 = v72;\n            v521 = v274;\n            v522 = v275;\n            v523 = v276;\n            v524 = v528;\n            v525 = v72;\n            if (v529 == 0) {\n                goto lab_0x4138c8;\n            } else {\n                goto lab_0x4138a5;\n            }\n        } else {\n            goto lab_0x4138a5;\n        }\n    }\n  lab_0x4138c8:;\n    // 0x4138c8\n    char v273; // 0x4131a0\n    char v530 = v273 & (char)(v282 == v516); // 0x41387e\n    int32_t v531 = v530 == 0 ? (int64_t)v272 : v284;\n    int64_t v243 = v499; // 0x4138d3\n    int64_t v244 = v516; // 0x4138d3\n    int64_t v245 = v500; // 0x4138d3\n    int64_t v246 = v501; // 0x4138d3\n    int64_t v247 = v525; // 0x4138d3\n    int64_t v248 = v519; // 0x4138d3\n    int64_t v249 = v524; // 0x4138d3\n    int64_t v250 = v502; // 0x4138d3\n    int64_t v252 = v523; // 0x4138d3\n    int64_t v253 = v522; // 0x4138d3\n    int64_t v254 = v521; // 0x4138d3\n    char v255 = v530; // 0x4138d3\n    int32_t v256 = v518; // 0x4138d3\n    int32_t v257 = v531; // 0x4138d3\n    v258 = v531;\n    v259 = v522;\n    v260 = v523;\n    v261 = v518;\n    v262 = v502;\n    v263 = v501;\n    v264 = v500;\n    v265 = v499;\n    if (v519 >= a6) {\n        // break -> 0x4139dd\n        goto lab_0x4139dd_6;\n    }\n    goto lab_0x4138d9;\n  lab_0x4138a5:\n    // 0x4138a5\n    v521 = 1;\n    v522 = v519;\n    v523 = 0;\n    v524 = v527;\n    v525 = v526;\n    v50 = v518;\n    v52 = v502;\n    v48 = v501;\n    v46 = v500;\n    v44 = v519;\n    v56 = v499;\n    int32_t v309; // 0x4131a0\n    if (v309 == 0) {\n        goto lab_0x4139ef;\n    }\n    goto lab_0x4138c8;\n  lab_0x4136a0:\n    // 0x4136a0\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    int64_t v353; // 0x4131a0\n    int64_t v179; // 0x41358c\n    if (v179 > v353) {\n        // break -> 0x413bf0\n        goto lab_0x413bf0_9;\n    }\n    char v532 = 0;\n    int64_t v533 = v353;\n    int64_t v534 = 0; // 0x4136ef\n    if (v533 < a3) {\n        // 0x4136f1\n        v534 = (int64_t)*(char *)(v533 + a2);\n    }\n    int64_t v535 = v534;\n    int64_t v536 = v535; // 0x4136f9\n    int64_t v313; // 0x41330e\n    if (v313 != 0) {\n        // 0x4136fb\n        v536 = (int64_t)*(char *)(v535 + v313);\n    }\n    int64_t v345; // 0x4131a0\n    while (*(char *)(v536 + v345) == 0) {\n        int64_t v537 = v533 - 1; // 0x4136d8\n        if (v537 < v179) {\n            // 0x4144a8\n            v172 = v537;\n            v23 = v40;\n            v26 = 1;\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            goto lab_0x413bf0_9;\n        }\n        v532 = 1;\n        v533 = v537;\n        v534 = 0;\n        if (v533 < a3) {\n            // 0x4136f1\n            v534 = (int64_t)*(char *)(v533 + a2);\n        }\n        // 0x4136f6\n        v535 = v534;\n        v536 = v535;\n        if (v313 != 0) {\n            // 0x4136fb\n            v536 = (int64_t)*(char *)(v535 + v313);\n        }\n    }\n    // 0x413705\n    int32_t v356; // 0x4131a0\n    int32_t v235 = v356; // 0x413707\n    int64_t v355; // 0x4131a0\n    int64_t v236 = v355; // 0x413707\n    int128_t v354; // 0x4131a0\n    int128_t v237 = v354; // 0x413707\n    int64_t v238 = v353; // 0x413707\n    int64_t v239 = a3; // 0x413707\n    int64_t v240 = v179; // 0x413707\n    int64_t v350; // 0x4131a0\n    int64_t v241 = v350; // 0x413707\n    if (v532 != 0) {\n        // 0x413709\n        v172 = v533;\n        v235 = v356;\n        v236 = v355;\n        v237 = v354;\n        v238 = v533;\n        v239 = a3;\n        v240 = v179;\n        v241 = v350;\n    }\n    goto lab_0x413718;\n  lab_0x413718:;\n    int64_t v538 = v238;\n    v162 = function_40e8b0(&v3, v538, v127);\n    v23 = v40;\n    v26 = v162;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if ((int32_t)v162 != 0) {\n        // break -> 0x413bf0\n        goto lab_0x413bf0_9;\n    }\n    int64_t v234 = v241;\n    int64_t v233 = v240;\n    int64_t v232 = v239;\n    v54 = v237;\n    int64_t v231 = v236;\n    int32_t v215 = v235;\n    int64_t v285; // 0x4131a0\n    int32_t v339; // 0x4135af\n    if (v285 == 0 || v339 == 1) {\n        goto lab_0x41375c;\n    } else {\n        // 0x41374b\n        v169 = v215;\n        v170 = v231;\n        v171 = v54;\n        v173 = v538;\n        v174 = v232;\n        v175 = v233;\n        v176 = v234;\n        int32_t * v539; // 0x4131a0\n        if (*v539 == -1) {\n            goto lab_0x414060;\n        } else {\n            goto lab_0x41375c;\n        }\n    }\n  lab_0x41409c:;\n    // 0x41409c\n    int64_t v191; // 0x4131a0\n    int64_t v540 = v191;\n    uint64_t v541 = v540 - v1; // 0x414103\n    int64_t v542; // 0x414127\n    if (v285 <= v541) {\n        // 0x414115\n        v542 = function_40e8b0(&v3, v540, v127);\n        v23 = v40;\n        v26 = v542;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if ((int32_t)v542 != 0) {\n            // break (via goto) -> 0x413bf0\n            goto lab_0x413bf0_9;\n        }\n    }\n    int64_t v543 = v345; // 0x4140c6\n    if (v540 < a3) {\n        // 0x4140c8\n        v543 = (int64_t)*(char *)(v541 + v326) + v345;\n    }\n    // 0x4140d7\n    int32_t v188; // 0x4131a0\n    v235 = v188;\n    int64_t v189; // 0x4131a0\n    v236 = v189;\n    int128_t v190; // 0x4131a0\n    v237 = v190;\n    v238 = v540;\n    int64_t v192; // 0x4131a0\n    v239 = v192;\n    int64_t v193; // 0x4131a0\n    v240 = v193;\n    v241 = v179;\n    int64_t v180; // 0x41359b\n    int64_t v178; // 0x4131a0\n    while (*(char *)v543 == 0) {\n        int64_t v544 = v540 + v178; // 0x4140e3\n        v172 = v544;\n        v23 = v40;\n        v26 = 1;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v544 < v179 || v544 > v180) {\n            // break (via goto) -> 0x413bf0\n            goto lab_0x413bf0_9;\n        }\n        v540 = v544;\n        v541 = v540 - v1;\n        if (v285 <= v541) {\n            // 0x414115\n            v542 = function_40e8b0(&v3, v540, v127);\n            v23 = v40;\n            v26 = v542;\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            if ((int32_t)v542 != 0) {\n                // break (via goto) -> 0x413bf0\n                goto lab_0x413bf0_9;\n            }\n        }\n        // 0x4140c0\n        v543 = v345;\n        if (v540 < a3) {\n            // 0x4140c8\n            v543 = (int64_t)*(char *)(v541 + v326) + v345;\n        }\n        // 0x4140d7\n        v235 = v188;\n        v236 = v189;\n        v237 = v190;\n        v238 = v540;\n        v239 = v192;\n        v240 = v193;\n        v241 = v179;\n    }\n    goto lab_0x413718;\n  lab_0x413afc:;\n    // 0x413afc\n    int64_t v358; // 0x4131a0\n    int64_t v545 = v358;\n    int64_t v357; // 0x4131a0\n    int64_t v546 = v357;\n    v235 = v356;\n    v236 = v355;\n    v237 = v354;\n    v238 = v546;\n    v239 = v545;\n    int64_t v351; // 0x4131a0\n    v240 = v351;\n    v241 = v350;\n    char * v346; // 0x4131a0\n    if (v180 == v546) {\n        int64_t v547 = 0; // 0x413b13\n        if (v180 < a3) {\n            // 0x413b15\n            v547 = (int64_t)*v346;\n        }\n        int64_t v548 = v547;\n        int64_t v549 = v548; // 0x413b29\n        if (v313 != 0) {\n            // 0x413b2b\n            v549 = (int64_t)*(char *)(v548 + v313);\n        }\n        // 0x413b2f\n        v235 = v356;\n        v236 = v355;\n        v237 = v354;\n        v238 = v546;\n        v239 = v545;\n        v240 = v351;\n        v241 = v350;\n        v23 = v40;\n        v26 = 1;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (*(char *)(v549 + v345) == 0) {\n            // break -> 0x413bf0\n            goto lab_0x413bf0_9;\n        }\n    }\n    goto lab_0x413718;\n  lab_0x41375c:;\n    int64_t v550 = *v13; // 0x413783\n    v28 = 0;\n    int64_t v218 = v347; // 0x4137b7\n    int64_t v220 = v72; // 0x4137b7\n    int64_t v222 = v550; // 0x4137b7\n    int64_t v223; // 0x4131a0\n    int64_t v221; // 0x4131a0\n    int64_t v219; // 0x4131a0\n    if (*(char *)(v550 + 104) >= 0) {\n        goto lab_0x413800;\n    } else {\n        uint64_t v551 = function_40e5c0(v72, (int64_t)v215 - 1, v127); // 0x4137c7\n        if (v551 % 2 != 0) {\n            // 0x414458\n            v219 = v347;\n            v221 = v72;\n            v223 = *v15;\n            goto lab_0x41445c;\n        } else {\n            int32_t v552 = v551; // 0x4137d4\n            v218 = v347;\n            v220 = v72;\n            v222 = v550;\n            if (v552 == 0) {\n                goto lab_0x413800;\n            } else {\n                int64_t v553 = v551 & 6; // 0x4137da\n                if (v553 == 6) {\n                    // 0x4147f0\n                    v219 = 6;\n                    v221 = v72;\n                    v223 = *v19;\n                    goto lab_0x41445c;\n                } else {\n                    if ((v551 & 2) != 0) {\n                        // 0x414520\n                        v219 = v553;\n                        v221 = v72;\n                        v223 = *v17;\n                        goto lab_0x41445c;\n                    } else {\n                        // 0x4137ee\n                        v218 = v553;\n                        v220 = v72;\n                        v222 = v550;\n                        if ((v551 & 4) != 0) {\n                            int64_t v554 = *(int64_t *)(v550 + 80); // 0x414530\n                            int64_t v555 = function_40db40((int128_t *)&v28, a1, (int64_t *)v554, v552); // 0x414541\n                            v219 = v554;\n                            v221 = v348;\n                            v223 = v555;\n                            goto lab_0x41445c;\n                        } else {\n                            goto lab_0x413800;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x413800:;\n    int64_t v198 = v222;\n    int64_t v202 = v220;\n    int64_t v200 = v218;\n    int64_t v242; // 0x4131a0\n    char v197; // 0x4131a0\n    int64_t v201; // 0x4131a0\n    int64_t v199; // 0x4131a0\n    char v196; // 0x4131a0\n    if (v43 == 0) {\n        goto lab_0x413824;\n    } else {\n        // 0x41380d\n        *(int64_t *)(8 * (int64_t)v215 + v43) = v198;\n        if (*v40 != 0) {\n            int64_t v556 = v198 + 16; // 0x4147a8\n            int64_t v557 = v198 + 24; // 0x4147ac\n            int64_t v558 = function_40e470(v72, v556, v557, 0); // 0x4147bb\n            int32_t v559 = v558; // 0x4147c0\n            v28 = v559;\n            v242 = v558;\n            if (v559 != 0) {\n                goto lab_0x4148ae;\n            } else {\n                char * v560 = (char *)(v198 + 104); // 0x4147cf\n                char v561 = *v560; // 0x4147cf\n                v196 = 0;\n                v197 = v561;\n                v199 = v557;\n                v201 = v72;\n                if ((v561 & 64) != 0) {\n                    int64_t v562 = function_412430(v72, v556, v557); // 0x41486a\n                    int32_t v563 = v562; // 0x41486f\n                    v28 = v563;\n                    v242 = v562;\n                    if (v563 != 0) {\n                        goto lab_0x4148ae;\n                    } else {\n                        // 0x41487a\n                        v196 = 0;\n                        v197 = *v560;\n                        v199 = v557;\n                        v201 = v72;\n                        goto lab_0x413838;\n                    }\n                } else {\n                    goto lab_0x413838;\n                }\n            }\n        } else {\n            goto lab_0x413824;\n        }\n    }\n  lab_0x414060:;\n    int64_t v177 = v173 + v178; // 0x414068\n    v172 = v177;\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if (v177 < v179 || v177 > v180) {\n        // break -> 0x413bf0\n        goto lab_0x413bf0_9;\n    }\n    int32_t v181 = v169; // 0x414096\n    int64_t v182 = v170; // 0x414096\n    int128_t v183 = v171; // 0x414096\n    int64_t v184 = v177; // 0x414096\n    int64_t v185 = v174; // 0x414096\n    int64_t v186 = v175; // 0x414096\n    int64_t v187 = v176; // 0x414096\n    v188 = v169;\n    v189 = v170;\n    v190 = v171;\n    v191 = v177;\n    v192 = v174;\n    v193 = v175;\n    int32_t v194; // 0x4131a0\n    if (v194 < 9) {\n        goto lab_0x413668;\n    } else {\n        goto lab_0x41409c;\n    }\n  lab_0x413824:;\n    // 0x413824\n    char v195; // 0x413646\n    v196 = v195;\n    v197 = *(char *)(v198 + 104);\n    v199 = v200;\n    v201 = v202;\n    goto lab_0x413838;\n  lab_0x413838:;\n    int64_t v203 = v201;\n    int64_t v204 = v199;\n    char v205 = v196;\n    int64_t v206; // 0x4131a0\n    int64_t v207; // 0x4131a0\n    int64_t v208; // 0x4131a0\n    int64_t v209; // 0x4131a0\n    int64_t v210; // 0x4131a0\n    int64_t v211; // 0x4131a0\n    int64_t v212; // 0x4131a0\n    int64_t v213; // 0x4131a0\n    if ((v197 & 16) != 0) {\n        // 0x4144c8\n        if (*(char *)(v198 + 104) < 0) {\n            int64_t v214 = v215;\n            int64_t v216 = v198 + 24; // 0x414559\n            int64_t v217 = function_40e7e0(&v3, *(int64_t *)(v198 + 16), v216, v214); // 0x414560\n            v206 = v214;\n            v213 = 0;\n            v212 = v216;\n            v210 = v72;\n            v208 = -1;\n            v207 = v214;\n            v211 = v216;\n            v209 = v72;\n            if (v217 == 0) {\n                goto lab_0x413850;\n            } else {\n                goto lab_0x4144d3;\n            }\n        } else {\n            // 0x4144c8\n            v207 = v215;\n            v211 = v204;\n            v209 = v203;\n            goto lab_0x4144d3;\n        }\n    } else {\n        // 0x413838\n        v206 = v215;\n        v213 = 0;\n        v212 = v204;\n        v210 = v203;\n        v208 = -1;\n        goto lab_0x413850;\n    }\n  lab_0x41445c:\n    // 0x41445c\n    v218 = v219;\n    v220 = v221;\n    v222 = v223;\n    int64_t v224; // 0x4131a0\n    int64_t v225; // 0x4131a0\n    int64_t v226; // 0x4131a0\n    int64_t v227; // 0x4131a0\n    int32_t v228; // 0x4131a0\n    int64_t v229; // 0x4131a0\n    int128_t v230; // 0x4131a0\n    if (v223 != 0) {\n        goto lab_0x413800;\n    } else {\n        // 0x414465\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v28 == 12) {\n            // break -> 0x413bf0\n            goto lab_0x413bf0_9;\n        }\n        // 0x414479\n        __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 1073, \"check_matching\");\n        v228 = v215;\n        v229 = v231;\n        v230 = v54;\n        v227 = a1;\n        v225 = v232;\n        v226 = v233;\n        v224 = v234;\n      lab_0x414498_2:\n        // 0x414498\n        v172 = v227;\n        v235 = v228;\n        v236 = v229;\n        v237 = v230;\n        v238 = v227;\n        v239 = v225;\n        v240 = v226;\n        v241 = v224;\n        goto lab_0x413718;\n    }\n  lab_0x4148ae:\n    // 0x4148ae\n    v50 = v215;\n    v52 = v231;\n    v48 = v232;\n    v46 = v233;\n    v44 = 0x100000000 * v242 >> 32;\n    v56 = v234;\n    goto lab_0x4139ef;\n  lab_0x413850:\n    // 0x413850\n    v243 = v234;\n    v244 = v198;\n    v245 = v233;\n    v246 = v232;\n    v247 = v210;\n    v248 = v206;\n    v249 = v212;\n    v250 = v231;\n    int64_t v251; // 0x413637\n    v252 = v251;\n    v253 = v208;\n    v254 = v213;\n    v255 = v205;\n    v256 = v215;\n    v257 = v215;\n    v258 = v215;\n    v259 = v208;\n    v260 = v251;\n    v261 = v215;\n    v262 = v231;\n    v263 = v232;\n    v264 = v233;\n    v265 = v234;\n    int64_t v266; // 0x4131a0\n    int64_t v267; // bp-576, 0x4131a0\n    int32_t v268; // bp-688, 0x4131a0\n    int32_t result; // bp-692, 0x4131a0\n    int64_t v269; // 0x41493e\n    int64_t v270; // 0x4149b3\n    int64_t * v271; // 0x4149b3\n    if (v206 < a6) {\n        while (true) {\n          lab_0x4138d9:\n            // 0x4138d9\n            v272 = v257;\n            v29 = v256;\n            v273 = v255;\n            v274 = v254;\n            v275 = v253;\n            v276 = v252;\n            v277 = v250;\n            v278 = v249;\n            int64_t v279 = v248;\n            v280 = v246;\n            v281 = v245;\n            v282 = v244;\n            v283 = v243;\n            v284 = v279 + 1;\n            if (v2 < a3 == v284 >= v2 || v285 < a3 == v284 >= v285) {\n                int32_t v286 = function_40bd10(v72, v279 + 2 & 0xffffffff);\n                v28 = v286;\n                if (v286 != 0) {\n                    // 0x4141e8\n                    v23 = v40;\n                    v26 = 12;\n                    v25 = v41;\n                    v24 = v42;\n                    v22 = v43;\n                    if (v286 != 12) {\n                        // 0x4148dd\n                        __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 1128, \"check_matching\");\n                        v267 = v283;\n                        v269 = *(int64_t *)0x40c5e000002340;\n                        result = 0;\n                        if (v269 == 0) {\n                            int64_t v287 = function_40de40(&result, 0x40c69800000000, (int64_t *)\"check_matching\", 0x40c5e000002340, v280, v281); // 0x414dfb\n                            *(int64_t *)0x656765722f628cac = v287;\n                            // 0x414979\n                            return result;\n                        }\n                        // 0x414990\n                        v268 = 0;\n                        int64_t v288 = function_40de40(&v268, 0x40c69800000000, (int64_t *)\"check_matching\", 0x40c5e000002340, v280, v281); // 0x4149a3\n                        uint32_t result2 = v268; // 0x4149ab\n                        if (result2 != 0) {\n                            // 0x414979\n                            return result2;\n                        }\n                        // 0x4149b3\n                        v270 = v288 + 56;\n                        v271 = (int64_t *)v270;\n                        int64_t v289 = *v271; // 0x4149b3\n                        if (v289 != 0) {\n                            goto lab_0x414a40;\n                        } else {\n                            // 0x4149c5\n                            *(int64_t *)(v288 + 64) = 0;\n                            *v271 = 0x676e69686374;\n                            int64_t * mem3 = malloc(0x4b431ba0); // 0x4149d9\n                            *(int64_t *)(v288 + 72) = (int64_t)mem3;\n                            if (mem3 == NULL) {\n                                // 0x414979\n                                return 12;\n                            }\n                            // 0x4149e7\n                            v268 = 0;\n                            v266 = v289;\n                            goto lab_0x414a0a;\n                        }\n                    } else {\n                        goto lab_0x413bf0_9;\n                    }\n                }\n                int64_t v290 = v29; // 0x413ce4\n                v291 = v277;\n                v292 = v284;\n                v293 = v278;\n                v294 = v290;\n                v295 = v72;\n                v296 = v280;\n                v297 = v281;\n                v298 = v283;\n                v299 = v290;\n                v300 = v72;\n                if ((*(char *)(v282 + 104) & 32) == 0) {\n                    goto lab_0x413914;\n                } else {\n                    goto lab_0x413d00;\n                }\n            } else {\n                // 0x413909\n                v291 = v277;\n                v292 = v284;\n                v293 = v278;\n                v294 = v279;\n                v295 = v247;\n                v296 = v280;\n                v297 = v281;\n                v298 = v283;\n                v299 = v279;\n                v300 = v247;\n                if ((*(char *)(v282 + 104) & 32) != 0) {\n                    goto lab_0x413d00;\n                } else {\n                    goto lab_0x413914;\n                }\n            }\n        }\n    }\n  lab_0x4139dd_6:;\n    int64_t v301 = v265;\n    int64_t v302 = v264;\n    int64_t v303 = v263;\n    int64_t v304 = v262;\n    int32_t v305 = v261;\n    int64_t v306 = v260;\n    int64_t v307 = v259;\n    v50 = v305;\n    v52 = v304;\n    v48 = v303;\n    v46 = v302;\n    v44 = v307;\n    v56 = v301;\n    if (v306 != 0) {\n        int64_t * v308 = (int64_t *)v306; // 0x4139ec\n        *v308 = *v308 + (int64_t)v258;\n        v50 = v305;\n        v52 = v304;\n        v48 = v303;\n        v46 = v302;\n        v44 = v307;\n        v56 = v301;\n    }\n    goto lab_0x4139ef;\n  lab_0x4144d3:\n    // 0x4144d3\n    v206 = v207;\n    v213 = 1;\n    v212 = v211;\n    v210 = v209;\n    v208 = v207;\n    v50 = v215;\n    v52 = v231;\n    v48 = v232;\n    v46 = v233;\n    v44 = v207;\n    v56 = v234;\n    if (v309 != 0) {\n        goto lab_0x413850;\n    } else {\n        goto lab_0x4139ef;\n    }\n  lab_0x414050:\n    // 0x414050\n    function_40c500(&v3);\n    v169 = v51;\n    v170 = v53;\n    v171 = v55;\n    v173 = v172;\n    v174 = v49;\n    v175 = v47;\n    v176 = v57;\n    goto lab_0x414060;\n  lab_0x414802:\n    // 0x414802\n    free(mem);\n    free((int64_t *)v68);\n    v53 = v66;\n    v55 = v76;\n    v57 = v69;\n    if (v58 != 1) {\n        // 0x413bf0\n        v23 = v40;\n        v26 = v63 & 0xffffffff;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        goto lab_0x413bf0_9;\n    }\n    goto lab_0x414050;\n  lab_0x4132e8:;\n    int64_t v310 = v21;\n    int64_t v311 = v20;\n    int32_t v312 = 1; // 0x4132f9\n    if (v11 == 0) {\n        // 0x413670\n        v312 = *(int64_t *)(a1 + 152) != 0;\n    }\n    // 0x4132ff\n    v313 = *(int64_t *)(a1 + 40);\n    v143 = (int64_t *)(a1 + 24);\n    int32_t * v314 = (int32_t *)(a1 + 180); // 0x413316\n    int64_t v315 = v12 + 1; // 0x41332d\n    int64_t v316 = (int64_t)*v314; // 0x413336\n    int64_t v317 = v315 - v316; // 0x413339\n    int64_t v318 = v317 < 0 == ((v317 ^ v315) & (v315 ^ v316)) < 0 ? v315 : v316; // 0x413344\n    int64_t v319 = a3 + 1; // 0x413348\n    int64_t v320 = v318 - v319; // 0x41335c\n    int64_t v321 = v320 < 0 == ((v320 ^ v318) & (v318 ^ v319)) < 0 == (v320 != 0) ? v319 : v318; // 0x413367\n    v3 = a2;\n    v72 = &v3;\n    int64_t v322 = function_40b170(v72, v321); // 0x4133cc\n    int64_t v323; // 0x4131a0\n    int64_t v324; // 0x4131a0\n    int64_t v325; // 0x4131a0\n    if ((int32_t)v322 != 0) {\n        // 0x4132ff\n        v23 = (int64_t *)(a1 + 152);\n        v26 = v322;\n        goto lab_0x413bf0_9;\n    } else {\n        // 0x4133dd\n        v309 = v312;\n        if ((*v143 & 0x400000 || v313) != 0) {\n            goto lab_0x413433;\n        } else {\n            // 0x413413\n            v323 = a2;\n            v324 = a2;\n            v325 = a3;\n            if (*v314 < 2) {\n                goto lab_0x413435;\n            } else {\n                goto lab_0x413433;\n            }\n        }\n    }\n  lab_0x413433:\n    // 0x413433\n    v324 = v323;\n    v325 = 0;\n    goto lab_0x413435;\n  lab_0x4132ca:\n    // 0x4132ca\n    v20 = 0;\n    v21 = 0;\n    if (a4 != 0 == (a5 != 0)) {\n        // 0x413c10\n        return 1;\n    }\n    goto lab_0x4132e8;\n  lab_0x413435:\n    // 0x413435\n    v285 = v325;\n    v326 = v324;\n    v40 = (int64_t *)(a1 + 152);\n    int64_t v327 = *v40; // 0x413471\n    int64_t v328 = 2 * v327; // 0x41348b\n    int64_t v329; // 0x4131a0\n    int64_t v330; // 0x4131a0\n    if (v328 < 1) {\n        goto lab_0x4134ec;\n    } else {\n        // 0x41349b\n        v23 = v40;\n        v26 = 12;\n        if (v328 > 0x666666666666666) {\n            goto lab_0x413bf0_9;\n        } else {\n            int32_t v331 = v327;\n            int64_t * mem4 = malloc(80 * v331); // 0x4134b6\n            int64_t v332 = (int64_t)mem4; // 0x4134b6\n            int64_t * mem5 = malloc(16 * v331); // 0x4134cd\n            int64_t v333 = (int64_t)mem5; // 0x4134cd\n            v330 = v332;\n            v329 = v333;\n            v23 = v40;\n            v26 = 12;\n            v25 = v332;\n            v24 = v333;\n            if (mem4 == NULL || mem5 == NULL) {\n                goto lab_0x413bf0_9;\n            } else {\n                goto lab_0x4134ec;\n            }\n        }\n    }\n  lab_0x4134ec:\n    // 0x4134ec\n    v42 = v329;\n    v41 = v330;\n    int64_t v334; // 0x4131a0\n    if (v11 < 2) {\n        // 0x4143e0\n        v334 = 0;\n        if ((*(char *)(a1 + 176) & 2) != 0) {\n            goto lab_0x413516;\n        } else {\n            goto lab_0x413552;\n        }\n    } else {\n        goto lab_0x413516;\n    }\n  lab_0x413516:\n    // 0x413516\n    v23 = v40;\n    v26 = 12;\n    v25 = v41;\n    v24 = v42;\n    if (v2 < 0x1fffffffffffffff) {\n        // 0x413531\n        g134 = &v267;\n        int64_t * mem6 = malloc(8 * (int32_t)v2 + 8); // 0x413539\n        int64_t v335 = (int64_t)mem6; // 0x413539\n        v334 = v335;\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v335;\n        if (mem6 == NULL) {\n            goto lab_0x413bf0_9;\n        } else {\n            goto lab_0x413552;\n        }\n    } else {\n        goto lab_0x413bf0_9;\n    }\n  lab_0x413552:\n    // 0x413552\n    v43 = v334;\n    v172 = v311;\n    int64_t v336 = v311 - v310; // 0x413578\n    bool v337 = v336 == 0 | v336 < 0 != ((v336 ^ v311) & (v310 ^ v311)) < 0;\n    int32_t v338 = v337; // 0x41357b\n    v339 = *v314;\n    int32_t v340 = 8; // 0x4135c1\n    if (v6 != NULL) {\n        int32_t v341 = 4; // 0x4135cb\n        if (v339 != 1) {\n            // 0x4135cd\n            v341 = 4 * (int32_t)((*v143 & 0x400000 | v313) == 0);\n        }\n        // 0x4135f0\n        v340 = 2 * v338 | (int32_t)(v313 != 0) | v341;\n    }\n    // 0x41360c\n    v179 = v337 ? v311 : v310;\n    v180 = v336 < 0 == ((v336 ^ v311) & (v310 ^ v311)) < 0 ? v311 : v310;\n    int64_t v342 = v311 - v180; // 0x41360c\n    int64_t v343 = v311 - v179; // 0x413614\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if (v342 < 0 == ((v342 ^ v311) & (v180 ^ v311)) < 0 != v342 != 0 && v343 < 0 == ((v343 ^ v311) & (v179 ^ v311)) < 0) {\n        int64_t v344 = 0x100000000 * a9 >> 32;\n        v194 = v340;\n        v251 = v337 ? (int64_t)&v172 : 0;\n        v195 = v251 != 0;\n        v345 = (int64_t)v6;\n        v346 = (char *)(v180 + a2);\n        v127 = v344;\n        v178 = (int32_t)!((v336 == 0 | v336 < 0 != ((v336 ^ v311) & (v310 ^ v311)) < 0)) + v338;\n        v347 = v344 & 0xffffffff;\n        v348 = &v28;\n        v144 = &v141;\n        v349 = (char)v309 ^ 1;\n        v73 = (char *)(a1 + 56);\n        v74 = (char *)(a1 + 176);\n        v75 = &v67;\n        v184 = v311;\n        v185 = a5;\n        v186 = a6;\n        v187 = v327;\n        while (true) {\n          lab_0x413668:\n            // 0x413668\n            v350 = v187;\n            v351 = v186;\n            int64_t v352 = v185;\n            v353 = v184;\n            v354 = v183;\n            v355 = v182;\n            v356 = v181;\n            v235 = v356;\n            v236 = v355;\n            v237 = v354;\n            v238 = v353;\n            v239 = v352;\n            v240 = v351;\n            v241 = v350;\n            v188 = v356;\n            v189 = v355;\n            v190 = v354;\n            v191 = v353;\n            v192 = v352;\n            v193 = v351;\n            switch (g134) {\n                case 0: {\n                    goto lab_0x4136a0;\n                }\n                case 1: {\n                    goto lab_0x4136a0;\n                }\n                case 2: {\n                    // 0x413b58\n                    v357 = v353;\n                    v358 = v352;\n                    if (v180 > v353) {\n                        // 0x413b5f\n                        v235 = v356;\n                        v236 = v355;\n                        v237 = v354;\n                        v238 = v353;\n                        v239 = v352;\n                        v240 = v351;\n                        v241 = v350;\n                        int64_t v359 = v353; // 0x413b75\n                        if (*(char *)((int64_t)*(char *)(v353 + a2) + v345) != 0) {\n                            goto lab_0x413718;\n                        } else {\n                            int64_t v360 = v359 + 1;\n                            while (v180 != v360) {\n                                // 0x413b90\n                                v359 = v360;\n                                v228 = v356;\n                                v229 = v355;\n                                v230 = v354;\n                                v227 = v360;\n                                v225 = v352;\n                                v226 = v351;\n                                v224 = v350;\n                                if (*(char *)((int64_t)*(char *)(v360 + a2) + v345) != 0) {\n                                    goto lab_0x414498_2;\n                                }\n                                v360 = v359 + 1;\n                            }\n                            // 0x413baa\n                            v172 = v180;\n                            v357 = v360;\n                            v358 = v352;\n                            goto lab_0x413afc;\n                        }\n                    } else {\n                        goto lab_0x413afc;\n                    }\n                }\n                case 3: {\n                    // 0x413a80\n                    v357 = v353;\n                    v358 = v352;\n                    if (v180 > v353) {\n                        unsigned char v361 = *(char *)(v313 + (int64_t)*(char *)(v353 + a2)); // 0x413a98\n                        v235 = v356;\n                        v236 = v355;\n                        v237 = v354;\n                        v238 = v353;\n                        v239 = v352;\n                        v240 = v351;\n                        v241 = v350;\n                        int64_t v362 = v353; // 0x413aa9\n                        if (*(char *)((int64_t)v361 + v345) != 0) {\n                            goto lab_0x413718;\n                        } else {\n                            int64_t v363 = v362 + 1;\n                            while (v180 != v363) {\n                                unsigned char v364 = *(char *)(v313 + (int64_t)*(char *)(v363 + a2)); // 0x413ad5\n                                v362 = v363;\n                                v228 = v356;\n                                v229 = v355;\n                                v230 = v354;\n                                v227 = v363;\n                                v225 = a2;\n                                v226 = v351;\n                                v224 = v350;\n                                if (*(char *)((int64_t)v364 + v345) != 0) {\n                                    goto lab_0x414498_2;\n                                }\n                                v363 = v362 + 1;\n                            }\n                            // 0x413aef\n                            v172 = v180;\n                            v357 = v363;\n                            v358 = a2;\n                            goto lab_0x413afc;\n                        }\n                    } else {\n                        goto lab_0x413afc;\n                    }\n                }\n                case 4: {\n                    goto lab_0x413718;\n                }\n                default: {\n                    goto lab_0x41409c;\n                }\n            }\n        }\n    }\n    goto lab_0x413bf0_9;\n  lab_0x414a40:;\n    int64_t v365 = v269 + 8; // 0x414a4d\n    int64_t result3 = function_40d340((int128_t *)\"check_matching\", v365, v270); // 0x414a59\n    int32_t v366 = result3; // 0x414a5e\n    result = v366;\n    int64_t v367 = v280; // 0x414a64\n    int64_t v368 = v281; // 0x414a64\n    int64_t v369 = 0; // 0x414a64\n    if (v366 != 0) {\n        // 0x414979\n        return result3;\n    }\n    goto lab_0x414ef0;\n  lab_0x414ef0:;\n    int64_t v370 = v368;\n    int64_t v371 = v367;\n    int64_t v372 = *(int64_t *)((int64_t)\"lib/regexec.c\" + 48); // 0x414ef0\n    int64_t v373 = 40 * *(int64_t *)(v372 + 8 * v369); // 0x414f01\n    int64_t v374 = 0x40c60000000000; // 0x414f09\n    int64_t v375 = v371; // 0x414f09\n    int64_t v376 = v370; // 0x414f09\n    int64_t v377; // 0x4131a0\n    int64_t v378; // 0x4131a0\n    int64_t v379; // 0x4131a0\n    int64_t v380; // 0x4131a0\n    int64_t v381; // 0x4131a0\n    int64_t v382; // 0x4131a0\n    int64_t v383; // 0x414f1c\n    int64_t v384; // 0x414f28\n    if (*(int64_t *)(v373 + 0x40c60000000010) < 1128) {\n        // 0x414f0f\n        v374 = 0x40c60000000000;\n        v375 = v371;\n        v376 = v370;\n        if (*(int64_t *)(v373 + 0x40c60000000008) < 1128) {\n            goto lab_0x414fad;\n        } else {\n            // 0x414f19\n            v383 = *(int64_t *)0x40c69800000000;\n            int64_t v385 = 16 * *(int64_t *)(v373 + 0x40c60000000000); // 0x414f24\n            v384 = *(int64_t *)(v383 + v385);\n            v377 = v383;\n            v380 = v385;\n            v378 = 0;\n            v381 = 0x61666e5f6b6e696c;\n            v382 = -1;\n            v379 = -1;\n            if (*(int64_t *)(v373 + 0x40c60000000018) == 1128) {\n                goto lab_0x415006;\n            } else {\n                goto lab_0x414f5e;\n            }\n        }\n    } else {\n        goto lab_0x414fad;\n    }\n  lab_0x414fad:;\n    int64_t v386 = v376;\n    int64_t v387 = v375;\n    int64_t v388 = v369 + 1; // 0x414fad\n    v367 = v387;\n    v368 = v386;\n    v369 = v388;\n    if (v388 >= *(int64_t *)((int64_t)\"lib/regexec.c\" + 40)) {\n        // 0x414fbb\n        result = 0;\n        int64_t v389 = function_40de40(&result, 0x40c69800000000, (int64_t *)\"check_matching\", v374, v387, v386); // 0x414a88\n        *(int64_t *)0x656765722f628cac = v389;\n        uint32_t v390 = result; // 0x414a91\n        // 0x414979\n        return v390 != 0 ? (int64_t)v390 : 0;\n    }\n    goto lab_0x414ef0;\n  lab_0x414a0a:;\n    int64_t v391 = *(int64_t *)(8 * v266 + 0x61666e5f6b6e696c); // 0x414a11\n    int64_t v392 = *(int64_t *)0x40c69800000038; // 0x414a19\n    int32_t v393 = function_40cdd0(v271, (int128_t *)(v392 + 24 * v391)); // 0x414a27\n    v268 = v393;\n    if (v393 != 0) {\n        // 0x414979\n        return 12;\n    }\n    int64_t v394 = v266 + 1; // 0x414a00\n    v266 = v394;\n    if (v394 > 0x676e69686373) {\n        goto lab_0x414a40;\n    } else {\n        goto lab_0x414a0a;\n    }\n  lab_0x415006:;\n    int64_t v395 = v382;\n    int64_t v396 = v381; // 0x4131a0\n    int64_t v397 = v379; // 0x4131a0\n    goto lab_0x415006_2;\n  lab_0x414f5e:;\n    int64_t v410 = v378;\n    int64_t v414 = v380;\n    int64_t v412 = v377;\n    int64_t v416 = *(int64_t *)(8 * v410 + 0x61666e5f6b6e696c); // 0x414f62\n    int64_t v417 = 16 * v416 + v412; // 0x414f6d\n    int64_t v411; // 0x4131a0\n    int64_t v415; // 0x4131a0\n    int64_t result4; // 0x4131a0\n    int64_t v413; // 0x4131a0\n    if ((*(char *)(v417 + 8) || 1) == 9) {\n        // 0x414f7c\n        if (v384 != *(int64_t *)v417) {\n            goto lab_0x414f50;\n        } else {\n            int64_t v418 = function_40f0a0(0x40c69800000000, v416, (int64_t)\"check_matching\", v365); // 0x414f8c\n            result4 = v418;\n            if ((int32_t)v418 != 0) {\n                // 0x414979\n                return result4;\n            }\n            int64_t v419 = v410 + 1; // 0x414f99\n            v374 = v365;\n            v375 = v384;\n            v376 = v370;\n            if (v419 < 0x676e69686374) {\n                // 0x414f99\n                v411 = *(int64_t *)0x40c69800000000;\n                v413 = v365;\n                v415 = v419;\n                goto lab_0x414f5a;\n            } else {\n                goto lab_0x414fad;\n            }\n        }\n    } else {\n        goto lab_0x414f50;\n    }\n  lab_0x415006_2:;\n    int64_t v398 = v397;\n    int64_t v399 = v396;\n    int64_t v400 = *(int64_t *)v399; // 0x415006\n    int64_t v401 = 16 * v400 + v383; // 0x415010\n    char v402 = *(char *)(v401 + 8); // 0x415013\n    int64_t v403; // 0x4131a0\n    int64_t v404; // 0x4131a0\n    int64_t v405; // 0x4131a0\n    int64_t v406; // 0x414ff9\n    if (v402 != 8) {\n        // 0x414ff0\n        v406 = v398;\n        if (v402 != 9) {\n            goto lab_0x414ffd;\n        } else {\n            // 0x414ff6\n            v406 = v384 == *(int64_t *)v401 ? v400 : v398;\n            goto lab_0x414ffd;\n        }\n    } else {\n        int64_t v407 = v384 == *(int64_t *)v401 ? v400 : v395; // 0x415021\n        int64_t v408 = v399 + 8; // 0x415025\n        v381 = v408;\n        v382 = v407;\n        v379 = v398;\n        v404 = v408;\n        v405 = v407;\n        v403 = v398;\n        if (v408 != 0x6169a9d2b6b1850c) {\n            goto lab_0x415006;\n        } else {\n            goto lab_0x41502e;\n        }\n    }\n  lab_0x414f50:;\n    int64_t v409 = v410 + 1; // 0x414f50\n    v411 = v412;\n    v413 = v414;\n    v415 = v409;\n    v374 = v414;\n    v375 = v384;\n    v376 = v370;\n    if (v409 > 0x676e69686373) {\n        goto lab_0x414fad;\n    } else {\n        goto lab_0x414f5a;\n    }\n  lab_0x414f5a:\n    // 0x414f5a\n    v377 = v411;\n    v380 = v413;\n    v378 = v415;\n    goto lab_0x414f5e;\n  lab_0x414ffd:;\n    int64_t v420 = v399 + 8; // 0x414ffd\n    v396 = v420;\n    v397 = v406;\n    v404 = 0x6169a9d2b6b1850c;\n    v405 = v395;\n    v403 = v406;\n    if (v420 == 0x6169a9d2b6b1850c) {\n        goto lab_0x41502e;\n    } else {\n        goto lab_0x415006_2;\n    }\n  lab_0x41502e:;\n    int64_t v421 = v403;\n    int64_t v422 = v405;\n    int64_t v423; // 0x4131a0\n    if (v422 >= 0) {\n        int64_t v424 = function_40f0a0(0x40c69800000000, v422, (int64_t)\"check_matching\", v365); // 0x4150db\n        result4 = v424;\n        if ((int32_t)v424 != 0) {\n            // 0x414979\n            return result4;\n        }\n        // 0x4150e8\n        v374 = v365;\n        v375 = v384;\n        v376 = v421;\n        v423 = v365;\n        if (v421 < 0) {\n            goto lab_0x414fad;\n        } else {\n            goto lab_0x41504b;\n        }\n    } else {\n        // 0x41503f\n        v374 = v404;\n        v375 = v384;\n        v376 = v421;\n        v423 = v404;\n        if (v421 < 0) {\n            goto lab_0x414fad;\n        } else {\n            goto lab_0x41504b;\n        }\n    }\n  lab_0x41504b:;\n    int64_t v425 = v423; // 0x41505b\n    int64_t v426 = 0; // 0x41505b\n    goto lab_0x415072;\n  lab_0x415072:;\n    int64_t v427 = v426;\n    int64_t v428 = v425;\n    int64_t v429 = *(int64_t *)(8 * v427 + 0x61666e5f6b6e696c); // 0x415072\n    int64_t v430 = 24 * v429; // 0x415082\n    int64_t v431 = *(int64_t *)0x40c69800000038 + v430; // 0x415086\n    int64_t v432 = v430; // 0x415099\n    int64_t v433; // 0x4131a0\n    int64_t v434; // 0x4131a0\n    int64_t v435; // 0x4131a0\n    if (function_40c890(*(int64_t *)(v431 + 8), v431 + 16, v421) != 0) {\n        goto lab_0x415060;\n    } else {\n        int64_t v436 = *(int64_t *)0x40c69800000030 + v430; // 0x41509b\n        int64_t v437 = function_40c890(*(int64_t *)(v436 + 8), v436 + 16, v421); // 0x4150a8\n        v432 = v436;\n        if (v437 != 0) {\n            goto lab_0x415060;\n        } else {\n            int64_t v438 = function_40f0a0(0x40c69800000000, v429, (int64_t)\"check_matching\", v365); // 0x4150c0\n            result4 = v438;\n            v435 = v365;\n            v434 = v427;\n            v433 = v436;\n            if ((int32_t)v438 != 0) {\n                // 0x414979\n                return result4;\n            }\n            goto lab_0x415064;\n        }\n    }\n  lab_0x415060:\n    // 0x415060\n    v435 = v428;\n    v434 = v427 + 1;\n    v433 = v432;\n    goto lab_0x415064;\n  lab_0x415064:\n    // 0x415064\n    v374 = v435;\n    v375 = v384;\n    v376 = v433;\n    v425 = v435;\n    v426 = v434;\n    if (v434 > 0x676e69686373) {\n        goto lab_0x414fad;\n    } else {\n        goto lab_0x415072;\n    }\n  lab_0x4145b0:\n    // 0x4145b0\n    *(int64_t *)(v163 + 8) = -1;\n    int64_t v439 = v163 + 16; // 0x4145b4\n    *(int64_t *)v163 = -1;\n    v163 = v439;\n    int64_t v440; // 0x4131a0\n    int64_t * v441; // 0x4145d1\n    if (v166 != v439) {\n        goto lab_0x4145b0;\n    } else {\n        // 0x4145c1\n        v441 = (int64_t *)a8;\n        *v441 = 0;\n        *(int64_t *)(a8 + 8) = v65;\n        v164 = 0;\n        if (v11 == 1 | (*v73 & 16) != 0) {\n            goto lab_0x414652;\n        } else {\n            // 0x414602\n            v440 = 0;\n            if (*v74 % 2 == 0) {\n                goto lab_0x414622;\n            } else {\n                int64_t v442 = *v40; // 0x414616\n                v440 = v442 >= 0 == (v442 != 0);\n                goto lab_0x414622;\n            }\n        }\n    }\n  lab_0x414652:;\n    int64_t v443 = a8; // 0x41468d\n    int64_t v444 = 0; // 0x41468d\n    int64_t v445 = v164; // 0x41468d\n    goto lab_0x414693;\n  lab_0x414693:;\n    int64_t v446 = v445;\n    int64_t v447 = v443;\n    int64_t * v448; // 0x4131a0\n    int64_t v449; // 0x4131a0\n    int64_t v450; // 0x4131a0\n    int64_t * v451; // 0x414699\n    int64_t v452; // 0x414699\n    int64_t v453; // 0x4148bb\n    if (v446 == -1) {\n        goto lab_0x4146b3;\n    } else {\n        // 0x414699\n        v451 = (int64_t *)(v447 + 8);\n        v452 = *v451;\n        char v454; // 0x4131a0\n        if (v454 != 0) {\n            // 0x4148b6\n            v453 = v285;\n            if (v285 == v446) {\n                goto lab_0x4148bf;\n            } else {\n                // 0x4148bb\n                v453 = *(int64_t *)(8 * v446 + v1);\n                goto lab_0x4148bf;\n            }\n        } else {\n            // 0x414699\n            v448 = (int64_t *)v447;\n            v449 = v446;\n            v450 = v452;\n            goto lab_0x4146a6;\n        }\n    }\n  lab_0x4146b3:;\n    int64_t v455 = v444 + 1; // 0x4146b3\n    if (v455 != v11) {\n        int64_t v456 = v447 + 16; // 0x4146b7\n        v443 = v456;\n        v444 = v455;\n        v445 = *(int64_t *)v456;\n        goto lab_0x414693;\n    } else {\n        if (v10 < 1) {\n            goto lab_0x414718;\n        } else {\n            // 0x4146cb\n            goto lab_0x414708;\n        }\n    }\n  lab_0x414622:;\n    int64_t v457 = function_4119c0(a1, &v3, v11, a8, v440); // 0x41463a\n    v23 = v40;\n    v26 = v457;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    if ((int32_t)v457 != 0) {\n        goto lab_0x413bf0_9;\n    } else {\n        // 0x414647\n        v164 = *v441;\n        goto lab_0x414652;\n    }\n  lab_0x414718:;\n    int64_t v458 = *(int64_t *)(a1 + 224); // 0x414725\n    v23 = v40;\n    v26 = v162;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    int64_t v459; // 0x4131a0\n    int64_t v460; // 0x41473d\n    int64_t v461; // 0x4131a0\n    if (v458 == 0) {\n        goto lab_0x413bf0_9;\n    } else {\n        // 0x414735\n        v460 = v11 - 1;\n        v23 = v40;\n        v26 = v162;\n        v25 = v41;\n        v24 = v42;\n        v22 = v64;\n        if (v460 != 0) {\n            // 0x414748\n            v461 = a8 + 24;\n            v459 = 0;\n            goto lab_0x414748_2;\n        } else {\n            goto lab_0x413bf0_9;\n        }\n    }\n  lab_0x4148bf:;\n    int64_t v462 = v453;\n    int64_t * v463 = (int64_t *)v447;\n    *v463 = v462;\n    v448 = v463;\n    v449 = v462;\n    v450 = v285;\n    if (v285 == v452) {\n        goto lab_0x4146a6;\n    } else {\n        // 0x4148c7\n        v448 = v463;\n        v449 = v462;\n        v450 = *(int64_t *)(8 * v452 + v1);\n        goto lab_0x4146a6;\n    }\n  lab_0x4146a6:\n    // 0x4146a6\n    *v448 = v449 + v172;\n    *v451 = v450 + v172;\n    goto lab_0x4146b3;\n  lab_0x414708:\n    // 0x414708\n    *(int64_t *)v166 = -1;\n    *(int64_t *)(v166 + 8) = -1;\n    if (16 * (v11 + v10) + a8 != v166 + 16) {\n        goto lab_0x414708;\n    } else {\n        goto lab_0x414718;\n    }\n  lab_0x414748_2:;\n    int64_t v464 = v459;\n    int64_t * v465 = (int64_t *)(8 * v464 + v458); // 0x414748\n    int64_t v466 = *v465; // 0x414748\n    if (v466 == v464) {\n        goto lab_0x414797;\n    } else {\n        int64_t v467 = 16 * v464; // 0x414770\n        *(int64_t *)(v467 + v165) = *(int64_t *)(16 * v466 + v165);\n        *(int64_t *)(v467 + v461) = *(int64_t *)(16 * *v465 + v461);\n        goto lab_0x414797;\n    }\n  lab_0x414797:;\n    int64_t v468 = v464 + 1; // 0x414797\n    v23 = v40;\n    v26 = v162;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    v459 = v468;\n    if (v468 != v460) {\n        goto lab_0x414748_2;\n    } else {\n        goto lab_0x413bf0_9;\n    }\n}\n"
        },
        {
            "funcName": "function_415130",
            "funcStartAddr": "415130",
            "funcEndAddr": "41534d",
            "decompiledFuncCode": "int64_t function_415130(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    int32_t * v1 = (int32_t *)(a2 + 144); // 0x415146\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x41514d\n    if (*v1 != 1) {\n        int64_t v3 = function_40c840(a2, a2); // 0x415159\n        if ((int32_t)v3 > 1) {\n            // 0x4151a8\n            *(int32_t *)a1 = 1;\n            *(int32_t *)(a1 + 8) = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * a2);\n            *v2 = (0x100000000 * v3 >> 32) + a2;\n            return 0;\n        }\n    }\n    char * v4 = (char *)(a3 + 8); // 0x415163\n    char v5 = *v4; // 0x415163\n    int64_t v6 = a2 + (0x100000000 * a4 >> 32); // 0x415167\n    *v2 = v6;\n    int64_t v7; // 0x415130\n    int64_t v8; // 0x415130\n    char v9; // 0x415130\n    int64_t v10; // 0x415130\n    int64_t v11; // 0x415130\n    char v12; // 0x415130\n    int64_t v13; // 0x415130\n    int64_t v14; // 0x415130\n    int64_t v15; // 0x415130\n    int64_t v16; // 0x415130\n    int64_t * v17; // 0x4151d0\n    int64_t * v18; // 0x415130\n    int64_t * v19; // 0x415130\n    int64_t * v20; // 0x415130\n    switch (v5) {\n        case 30: {\n        }\n        case 28: {\n        }\n        case 26: {\n            // 0x4151d0\n            v17 = (int64_t *)(a2 + 104);\n            if (v6 >= *v17) {\n                // 0x415198\n                return 7;\n            }\n            // 0x4151da\n            v18 = (int64_t *)(a2 + 40);\n            v19 = (int64_t *)(a2 + 8);\n            v20 = (int64_t *)(a1 + 8);\n            v12 = v5;\n            v14 = a2;\n            v10 = 0;\n            v7 = v6;\n            while (true) {\n              lab_0x415202:\n                // 0x415202\n                v8 = v7;\n                v11 = v10;\n                v15 = v14;\n                if (v12 == 30) {\n                    // 0x415280\n                    if (*(char *)(a2 + 139) == 0) {\n                        goto lab_0x415209;\n                    } else {\n                        // 0x41528e\n                        if (*(char *)(a2 + 140) == 0) {\n                            int64_t v21 = v8 + 1; // 0x4152f8\n                            *v2 = v21;\n                            v13 = v21;\n                            v16 = v15;\n                            v9 = *(char *)(v8 + v15 + *v18);\n                            goto lab_0x41521a;\n                        } else {\n                            // 0x415298\n                            if (v8 == *(int64_t *)(a2 + 48)) {\n                                goto lab_0x4152ad;\n                            } else {\n                                // 0x41529e\n                                if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v8) == -1) {\n                                    goto lab_0x415209;\n                                } else {\n                                    goto lab_0x4152ad;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    goto lab_0x415209;\n                }\n            }\n          lab_0x415198_3:\n            // 0x415198\n            return 0;\n        }\n    }\n    if ((char)a6 == 0 == v5 == 22) {\n        // 0x415310\n        int64_t v22; // bp-56, 0x415130\n        function_40ada0(&v22, a2, a5);\n        char v23; // 0x415130\n        if (v23 != 21) {\n            // 0x415198\n            return 11;\n        }\n    }\n    // 0x415189\n    *(int32_t *)a1 = 0;\n    int64_t v24; // 0x415130\n    *(char *)(a1 + 8) = *(char *)&v24;\n    // 0x415198\n    return 0;\n  lab_0x415209:;\n    int64_t v25 = v8 + 1; // 0x41520d\n    *v2 = v25;\n    v13 = v25;\n    v16 = v15;\n    v9 = *(char *)(*v19 + v8);\n    goto lab_0x41521a;\n  lab_0x41521a:;\n    uint64_t v26 = v13;\n    if (*v17 <= v26) {\n        // break -> 0x415198\n        goto lab_0x415198_3;\n    }\n    // 0x415220\n    if (*(char *)&v24 == v9) {\n        // 0x415225\n        if (*(char *)(*v19 + v26) == 93) {\n            // 0x41522f\n            *v2 = v26 + 1;\n            *(char *)(*v20 + (0x100000000 * v11 >> 32)) = 0;\n            unsigned char v27 = *v4; // 0x415240\n            v24 = v27;\n            switch (v27) {\n                case 28: {\n                    // 0x415340\n                    *(int32_t *)a1 = 2;\n                    goto lab_0x415198_3;\n                }\n                case 30: {\n                    // 0x415333\n                    *(int32_t *)a1 = 4;\n                    goto lab_0x415198_3;\n                }\n                default: {\n                    // 0x415256\n                    if (v27 != 26) {\n                        goto lab_0x415198_3;\n                    } else {\n                        // 0x415261\n                        *(int32_t *)a1 = 3;\n                        goto lab_0x415198_3;\n                    }\n                }\n            }\n        }\n    }\n    // 0x4151e8\n    *(char *)(*v20 + v11) = v9;\n    if (v11 == 31) {\n        // break -> 0x415198\n        goto lab_0x415198_3;\n    }\n    // 0x4151fa\n    v12 = *v4;\n    v14 = v16;\n    v10 = v11 + 1;\n    v7 = *v2;\n    goto lab_0x415202;\n  lab_0x4152ad:;\n    int64_t v28 = *(int64_t *)(a2 + 24); // 0x4152ad\n    char v29 = *(char *)(*(int64_t *)(v28 + 8 * v8) + v15 + *v18); // 0x4152bc\n    if (v29 <= -1) {\n        goto lab_0x415209;\n    } else {\n        int64_t v30 = 1; // 0x4152d7\n        int64_t v31 = v15; // 0x4152d7\n        if (*v1 != 1) {\n            // 0x4152d9\n            v30 = 0x100000000 * function_40c840(a2, v8) >> 32;\n            v31 = v8;\n        }\n        int64_t v32 = v30 + v8; // 0x4152e6\n        *v2 = v32;\n        v13 = v32;\n        v16 = v31;\n        v9 = v29;\n        goto lab_0x41521a;\n    }\n}\n"
        },
        {
            "funcName": "function_415350",
            "funcStartAddr": "415350",
            "funcEndAddr": "4159f3",
            "decompiledFuncCode": "int64_t function_415350(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x41535e\n    uint64_t v3 = *v2; // 0x41535e\n    if (*(int64_t *)(a2 + 104) <= v3) {\n        // 0x415478\n        *(char *)(v1 + 8) = 2;\n        // 0x41547e\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x41536f\n    char * v5 = (char *)(v1 + 10); // 0x415373\n    int32_t v6 = *(int32_t *)(a2 + 144); // 0x41537b\n    int64_t v7 = v4 + v3;\n    unsigned char v8 = *(char *)v7; // 0x415384\n    char v9 = *v5 & -97;\n    *v5 = v9;\n    *(char *)a1 = v8;\n    char v10; // 0x415350\n    if (v6 < 2) {\n        if (v8 == 92) {\n            goto lab_0x415450;\n        } else {\n            // 0x415416\n            *(char *)(v1 + 8) = 1;\n            uint16_t v11 = *(int16_t *)(2 * (int64_t)v8 + (int64_t)*__ctype_b_loc()); // 0x41542b\n            v10 = 64 * ((char)(v11 / 8) % 2 | (char)(v8 == 95)) | v9;\n            goto lab_0x4153f5;\n        }\n    } else {\n        // 0x415399\n        if (v3 != *(int64_t *)(a2 + 48)) {\n            // 0x41539f\n            if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3) == -1) {\n                int32_t * v12 = (int32_t *)(v1 + 8); // 0x415500\n                *v12 = *v12 & -0x200100 | 0x200001;\n                // 0x41547e\n                return 1;\n            }\n        }\n        if (v8 == 92) {\n            goto lab_0x415450;\n        } else {\n            // 0x4153b8\n            *(char *)(v1 + 8) = 1;\n            int32_t wc = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3); // 0x4153c5\n            v10 = 64 * (char)(wc == 95 | iswalnum(wc) != 0) | *v5 & -65;\n            goto lab_0x4153f5;\n        }\n    }\n  lab_0x415450:;\n    uint64_t v13 = v3 + 1;\n    if (v13 >= *(int64_t *)(a2 + 88)) {\n        // 0x41545b\n        *(char *)(v1 + 8) = 36;\n        return 1;\n    }\n    // 0x415490\n    char v14; // 0x415350\n    int32_t v15; // 0x415957\n    if (*(char *)(a2 + 139) != 0) {\n        if (v6 < 2) {\n            goto lab_0x415972;\n        } else {\n            int64_t v16 = *(int64_t *)(a2 + 16) + 4 * v13;\n            v15 = *(int32_t *)v16;\n            if (v15 == -1) {\n                goto lab_0x4159db;\n            } else {\n                // 0x41595f\n                if (*(int64_t *)(a2 + 48) == v3 + 2) {\n                    goto lab_0x415972;\n                } else {\n                    // 0x41596a\n                    if (*(int32_t *)(v16 + 4) == -1) {\n                        goto lab_0x4159db;\n                    } else {\n                        goto lab_0x415972;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x41549e\n        v14 = *(char *)(v4 + v13);\n        goto lab_0x4154ab;\n    }\n  lab_0x4153f5:\n    // 0x4153f5\n    *v5 = v10;\n    g130 = v8 - 10;\n    switch (v8) {\n        case 10: {\n            // 0x415688\n            if ((a3 & 2048) == 0) {\n                // 0x41547e\n                return 1;\n            }\n            // 0x41569a\n            *(char *)(v1 + 8) = 10;\n            // 0x41547e\n            return 1;\n        }\n        case 36: {\n            if ((a3 & 8) != 0) {\n                // 0x4156f0\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x41547e\n                return 1;\n            }\n            int64_t v17 = v3 + 1; // 0x4156b6\n            if (v17 == *(int64_t *)(a2 + 88)) {\n                // 0x4156f0\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x41547e\n                return 1;\n            }\n            // 0x4156c0\n            *v2 = v17;\n            int64_t v18; // bp-72, 0x415350\n            function_415350(&v18, a2, a3);\n            *v2 = *v2 - 1;\n            char v19; // 0x415350\n            if (v19 < 11) {\n                // 0x4156f0\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x41547e\n                return 1;\n            }\n            // break -> 0x41547e\n            break;\n        }\n        case 40: {\n            // 0x415558\n            if ((a3 & 0x2000) == 0) {\n                // 0x41547e\n                return 1;\n            }\n            // 0x41556a\n            *(char *)(v1 + 8) = 8;\n            // 0x41547e\n            return 1;\n        }\n        case 41: {\n            // 0x415578\n            if ((a3 & 0x2000) == 0) {\n                // 0x41547e\n                return 1;\n            }\n            // 0x41558a\n            *(char *)(v1 + 8) = 9;\n            // 0x41547e\n            return 1;\n        }\n        case 42: {\n            // 0x415598\n            *(char *)(v1 + 8) = 11;\n            // 0x41547e\n            return 1;\n        }\n        case 43: {\n            // 0x4155b0\n            if ((a3 & 1026) != 0) {\n                // 0x41547e\n                return 1;\n            }\n            // 0x4155c2\n            *(char *)(v1 + 8) = 18;\n            // 0x41547e\n            return 1;\n        }\n        case 46: {\n            // 0x4155d0\n            *(char *)(v1 + 8) = 5;\n            // 0x41547e\n            return 1;\n        }\n        case 63: {\n            // 0x4155e0\n            if ((a3 & 1026) != 0) {\n                // 0x41547e\n                return 1;\n            }\n            // 0x4155f2\n            *(char *)(v1 + 8) = 19;\n            // 0x41547e\n            return 1;\n        }\n        case 91: {\n            // 0x415600\n            *(char *)(v1 + 8) = 20;\n            // 0x41547e\n            return 1;\n        }\n        case 94: {\n            if ((a3 & 0x800008) == 0 == (v3 != 0)) {\n                // 0x4159aa\n                if ((a3 & 2048) == 0 | *(char *)(v7 - 1) != 10) {\n                    // 0x41547e\n                    return 1;\n                }\n            }\n            // 0x415622\n            *(char *)(v1 + 8) = 12;\n            *(int32_t *)a1 = 16;\n            // 0x41547e\n            return 1;\n        }\n        case 123: {\n            // 0x415640\n            if ((a3 & 0x1200) != 0x1200) {\n                // 0x41547e\n                return 1;\n            }\n            // 0x415659\n            *(char *)(v1 + 8) = 23;\n            // 0x41547e\n            return 1;\n        }\n        case 124: {\n            // 0x415668\n            if ((a3 & 0x8400) != 0x8000) {\n                // 0x41547e\n                return 1;\n            }\n            // 0x41569a\n            *(char *)(v1 + 8) = 10;\n            // 0x41547e\n            return 1;\n        }\n        case 125: {\n            // 0x415708\n            if ((a3 & 0x1200) != 0x1200) {\n                // 0x41547e\n                return 1;\n            }\n            // 0x415721\n            *(char *)(v1 + 8) = 24;\n            // 0x41547e\n            return 1;\n        }\n    }\n    // 0x41547e\n    return 1;\n  lab_0x415972:;\n    int64_t v20 = *(int64_t *)(a2 + 40); // 0x41597e\n    if (*(char *)(a2 + 140) == 0) {\n        // 0x4159c8\n        v14 = *(char *)(v20 + a2 + v13);\n        goto lab_0x4154ab;\n    } else {\n        int64_t v21 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v13); // 0x41598b\n        char v22 = *(char *)(v20 + a2 + v21); // 0x41598f\n        v14 = v22;\n        if (v22 > -1) {\n            goto lab_0x4154ab;\n        } else {\n            // 0x41549e\n            v14 = *(char *)(v4 + v13);\n            goto lab_0x4154ab;\n        }\n    }\n  lab_0x4154ab:;\n    int64_t v23 = v14;\n    int32_t v24 = v14;\n    *(char *)a1 = v14;\n    *(char *)(v1 + 8) = 1;\n    int64_t v25; // 0x415350\n    int64_t v26; // 0x415350\n    int32_t wc2; // 0x415350\n    int32_t v27; // 0x415350\n    int32_t v28; // 0x415350\n    char v29; // 0x415350\n    if (v6 < 2) {\n        uint16_t v30 = *(int16_t *)(2 * v23 + (int64_t)*__ctype_b_loc()); // 0x41552c\n        char v31 = *v5; // 0x415540\n        v29 = 64 * ((char)(v30 / 8) % 2 | (char)(v14 == 95)) | v31 & -65;\n        v28 = v24;\n        v26 = v23;\n        goto lab_0x4154e3;\n    } else {\n        // 0x4154b7\n        v27 = v24;\n        wc2 = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v13);\n        v25 = v23;\n        goto lab_0x4154be;\n    }\n  lab_0x4159db:;\n    unsigned char v32 = *(char *)(v4 + v13); // 0x4159db\n    *(char *)(v1 + 8) = 1;\n    *(char *)a1 = v32;\n    v27 = v32;\n    wc2 = v15;\n    v25 = v32;\n    goto lab_0x4154be;\n  lab_0x4154be:;\n    int32_t v33 = iswalnum(wc2); // 0x4154c0\n    v29 = 64 * (char)(wc2 == 95 | v33 != 0) | *v5 & -65;\n    v28 = v27;\n    v26 = v25;\n    goto lab_0x4154e3;\n  lab_0x4154e3:\n    // 0x4154e3\n    *v5 = v29;\n    uint64_t v34 = v26 + 0xffffffd9; // 0x4154e3\n    g131 = v34 % 256;\n    switch ((char)v34) {\n        case 0: {\n            // 0x41591b\n            if ((a3 & 0x80000) == 0) {\n                // 0x41592d\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 128;\n            }\n            // 0x41547e\n            return 2;\n        }\n        case 1: {\n            // 0x415904\n            if ((a3 & 0x2000) != 0) {\n                // 0x41547e\n                return 2;\n            }\n            // 0x41556a\n            *(char *)(v1 + 8) = 8;\n            // 0x41547e\n            return 2;\n        }\n        case 2: {\n            // 0x4158ed\n            if ((a3 & 0x2000) != 0) {\n                // 0x41547e\n                return 2;\n            }\n            // 0x41558a\n            *(char *)(v1 + 8) = 9;\n            // 0x41547e\n            return 2;\n        }\n        case 4: {\n            // 0x4158d2\n            if ((a3 & 1026) != 2) {\n                // 0x41547e\n                return 2;\n            }\n            // 0x4155c2\n            *(char *)(v1 + 8) = 18;\n            // 0x41547e\n            return 2;\n        }\n        case 10: {\n        }\n        case 11: {\n        }\n        case 12: {\n        }\n        case 13: {\n        }\n        case 14: {\n        }\n        case 15: {\n        }\n        case 16: {\n        }\n        case 17: {\n        }\n        case 18: {\n            // 0x4158aa\n            if ((a3 & 0x4000) == 0) {\n                // 0x4158bc\n                *(char *)(v1 + 8) = 4;\n                *a1 = (int64_t)(v28 - 49);\n            }\n            // 0x41547e\n            return 2;\n        }\n        case 21: {\n            // 0x415889\n            if ((a3 & 0x80000) == 0) {\n                // 0x41589b\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 6;\n            }\n            // 0x41547e\n            return 2;\n        }\n        case 23: {\n            // 0x415868\n            if ((a3 & 0x80000) == 0) {\n                // 0x41587a\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 9;\n            }\n            // 0x41547e\n            return 2;\n        }\n        case 24: {\n            // 0x41584d\n            if ((a3 & 1026) != 2) {\n                // 0x41547e\n                return 2;\n            }\n            // 0x4155f2\n            *(char *)(v1 + 8) = 19;\n            // 0x41547e\n            return 2;\n        }\n        case 27: {\n            // 0x41582c\n            if ((a3 & 0x80000) == 0) {\n                // 0x41583e\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 512;\n            }\n            // 0x41547e\n            return 2;\n        }\n        case 44: {\n            // 0x415811\n            if ((a3 & 0x80000) == 0) {\n                // 0x415823\n                *(char *)(v1 + 8) = 35;\n            }\n            // 0x41547e\n            return 2;\n        }\n        case 48: {\n            // 0x4157f6\n            if ((a3 & 0x80000) == 0) {\n                // 0x415808\n                *(char *)(v1 + 8) = 33;\n            }\n            // 0x41547e\n            return 2;\n        }\n        case 57: {\n            // 0x4157d5\n            if ((a3 & 0x80000) == 0) {\n                // 0x4157e7\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 64;\n            }\n            // 0x41547e\n            return 2;\n        }\n        case 59: {\n            // 0x4157b4\n            if ((a3 & 0x80000) == 0) {\n                // 0x4157c6\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 256;\n            }\n            // 0x41547e\n            return 2;\n        }\n        case 76: {\n            // 0x415799\n            if ((a3 & 0x80000) == 0) {\n                // 0x4157ab\n                *(char *)(v1 + 8) = 34;\n            }\n            // 0x41547e\n            return 2;\n        }\n        case 80: {\n            // 0x41577e\n            if ((a3 & 0x80000) == 0) {\n                // 0x415790\n                *(char *)(v1 + 8) = 32;\n            }\n            // 0x41547e\n            return 2;\n        }\n        case 84: {\n            // 0x415760\n            if ((a3 & 0x1200) != 512) {\n                // 0x41547e\n                return 2;\n            }\n            // 0x415659\n            *(char *)(v1 + 8) = 23;\n            // 0x41547e\n            return 2;\n        }\n        case 85: {\n            // 0x415745\n            if ((a3 & 0x8400) == 0) {\n                // 0x415757\n                *(char *)(v1 + 8) = 10;\n            }\n            // 0x41547e\n            return 2;\n        }\n        case 86: {\n            // 0x41572a\n            if ((a3 & 0x1200) != 512) {\n                // 0x41547e\n                return 2;\n            }\n            // 0x415721\n            *(char *)(v1 + 8) = 24;\n            // 0x41547e\n            return 2;\n        }\n    }\n    // 0x41547e\n    return 2;\n}\n"
        },
        {
            "funcName": "function_415a00",
            "funcStartAddr": "415a00",
            "funcEndAddr": "415ab6",
            "decompiledFuncCode": "int64_t function_415a00(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t * v1 = (int64_t *)(a1 + 72);\n    int64_t result2 = -1;\n    *v1 = (0x100000000 * function_415350((int64_t *)a2, a1, a3) >> 32) + *v1;\n    char v2 = *(char *)(a2 + 8); // 0x415a39\n    int64_t result = result2; // 0x415a00\n    switch (v2) {\n        case 2: {\n            // 0x415a97\n            return -2;\n        }\n        case 24: {\n            // 0x415a97\n            return result;\n        }\n    }\n    // 0x415a46\n    int64_t v3; // 0x415a00\n    unsigned char v4 = (char)v3; // 0x415a2e\n    while (v4 != 44) {\n        int64_t v5 = -2; // 0x415a4d\n        if (v2 == 1) {\n            // 0x415a58\n            v5 = -2;\n            if (result2 != -2 && v4 <= 57) {\n                int64_t v6 = v4; // 0x415a2e\n                if (result2 == -1) {\n                    // 0x415aa8\n                    v5 = v6 - 48;\n                } else {\n                    int64_t v7 = 10 * result2 + v6; // 0x415a6f\n                    int64_t v8 = v7 - 0x8030; // 0x415a78\n                    v5 = v8 < 0 == (0x802f - v7 & v7) < 0 == (v8 != 0) ? 0x8000 : v7 - 48;\n                }\n            }\n        }\n        // 0x415a20\n        result2 = v5;\n        *v1 = (0x100000000 * function_415350((int64_t *)a2, a1, a3) >> 32) + *v1;\n        v2 = *(char *)(a2 + 8);\n        result = result2;\n        switch (v2) {\n            case 2: {\n                // 0x415a97\n                return -2;\n            }\n            case 24: {\n                // 0x415a97\n                return result;\n            }\n        }\n        // 0x415a46\n        int64_t v9; // 0x415a00\n        v4 = *(char *)&v9;\n    }\n    // 0x415a97\n    return result2;\n}\n"
        },
        {
            "funcName": "function_415ac0",
            "funcStartAddr": "415ac0",
            "funcEndAddr": "416fa4",
            "decompiledFuncCode": "int64_t function_415ac0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x415ac0\n    int128_t v1; // 0x415ac0\n    int128_t v2 = v1;\n    int64_t v3 = a6;\n    int64_t v4 = a3;\n    int64_t v5; // bp-280, 0x415ac0\n    int64_t v6 = &v5; // 0x415aca\n    unsigned char v7 = *(char *)(a3 + 8); // 0x415ad9\n    int64_t v8 = v7; // 0x415ad9\n    int64_t v9 = v4; // 0x415ae5\n    v4 = v8;\n    g132 = v8;\n    int32_t v10 = v7;\n    int64_t * v11; // 0x415ac0\n    int32_t v12; // 0x415ac0\n    int64_t v13; // 0x415ac0\n    int64_t v14; // bp-88, 0x415ac0\n    int64_t v15; // 0x415ac0\n    int64_t v16; // 0x41681b\n    char v17; // 0x416822\n    int64_t * mem2; // 0x416209\n    int64_t v18; // 0x416209\n    int64_t * v19; // 0x416230\n    char * v20; // 0x416237\n    switch (v7) {\n        case 1: {\n            int64_t v21 = a2 + 112; // 0x416387\n            int64_t v22 = a2 + 128; // 0x41638b\n            int64_t v23 = function_40d500(v21, v22, 0, 0, v9); // 0x416398\n            if (v23 == 0) {\n                // 0x416451\n                *(int32_t *)a6 = 12;\n                // 0x415c38\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x415b8a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x4163ab\n            if (*(int32_t *)(a2 + 180) >= 2) {\n                int64_t * v24 = (int64_t *)(a1 + 72); // 0x4163c8\n                int64_t v25 = &v14;\n                int64_t v26 = 0x100000000 * v23 >> 32; // 0x416435\n                uint64_t v27 = *v24; // 0x4163c8\n                while (*(int64_t *)(a1 + 104) > v27) {\n                    // 0x4163d6\n                    if (v27 == *(int64_t *)(a1 + 48)) {\n                        // break -> 0x415b60\n                        break;\n                    }\n                    // 0x4163e0\n                    if (*(int32_t *)(*(int64_t *)(a1 + 16) + 4 * v27) != -1) {\n                        // break -> 0x415b60\n                        break;\n                    }\n                    // 0x4163ee\n                    *v24 = (0x100000000 * function_415350((int64_t *)v9, a1, a4) >> 32) + *v24;\n                    int64_t v28 = function_40d500(v21, v22, 0, 0, v9); // 0x416411\n                    v26 = function_40d500(v21, v22, (int32_t)v26, (int32_t)v28, v25);\n                    if (v28 == 0 || v26 == 0) {\n                        // 0x416451\n                        *(int32_t *)a6 = 12;\n                        // 0x415c38\n                        *(int64_t *)(v6 + 24) = 0;\n                        // 0x415b8a\n                        return *(int64_t *)(v6 + 24);\n                    }\n                    v27 = *v24;\n                }\n            }\n            goto lab_0x415b60;\n        }\n        case 4: {\n            int64_t v29 = 1 << v10 % 32; // 0x416471\n            if ((*(int64_t *)(a2 + 168) & v29) == 0) {\n                // 0x416aec\n                *(int32_t *)a6 = 6;\n                // 0x415b8a\n                return *(int64_t *)(v6 + 24);\n            }\n            int64_t * v30 = (int64_t *)(a2 + 160); // 0x41648c\n            *v30 = *v30 | v29;\n            if (function_40d500(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n                // 0x416451\n                *(int32_t *)a6 = 12;\n                // 0x415c38\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x415b8a\n                return *(int64_t *)(v6 + 24);\n            }\n            int64_t * v31 = (int64_t *)(a2 + 152); // 0x4164ad\n            *v31 = *v31 + 1;\n            char * v32 = (char *)(a2 + 176); // 0x4164b5\n            *v32 = *v32 | 2;\n            goto lab_0x415b60;\n        }\n        case 5: {\n            // 0x4164c1\n            if (function_40d500(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n                // 0x416451\n                *(int32_t *)a6 = 12;\n                // 0x415c38\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x415b8a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x4164eb\n            if (*(int32_t *)(a2 + 180) >= 2) {\n                char * v33 = (char *)(a2 + 176); // 0x4164f8\n                *v33 = *v33 | 2;\n            }\n            goto lab_0x415b60;\n        }\n        case 8: {\n            int64_t * v34 = (int64_t *)(a2 + 48); // 0x415ba1\n            uint64_t v35 = *v34; // 0x415ba1\n            v5 = a5;\n            *v34 = v35 + 1;\n            int64_t v36 = function_415350((int64_t *)v9, a1, a4 | 0x800000); // 0x415bc6\n            int64_t * v37 = (int64_t *)(a1 + 72); // 0x415bcd\n            *v37 = (0x100000000 * v36 >> 32) + *v37;\n            char * v38 = (char *)(v9 + 8); // 0x415bd3\n            int64_t v39 = 0; // 0x415bd9\n            if (*v38 != 9) {\n                // 0x415bdf\n                v4 = v9;\n                int64_t v40 = function_4170f0(a1, a2, v9, a4, v5 + 1, a6); // 0x415bfb\n                if (*(int32_t *)&v3 != 0) {\n                    // 0x415c38\n                    *(int64_t *)(v6 + 24) = 0;\n                    // 0x415b8a\n                    return *(int64_t *)(v6 + 24);\n                }\n                // 0x415c09\n                v39 = v40;\n                if (*v38 != 9) {\n                    if (v40 != 0) {\n                        // 0x415c1a\n                        function_40ad30(v40, 0x40bf40, 0);\n                    }\n                    // 0x415c29\n                    *(int32_t *)a6 = 8;\n                  lab_0x415c38:\n                    // 0x415c38\n                    *(int64_t *)(v6 + 24) = 0;\n                    // 0x415b8a\n                    return *(int64_t *)(v6 + 24);\n                }\n            }\n            // 0x416662\n            if (v35 < 9) {\n                int32_t v41 = 1 << (int32_t)v35 % 32;\n                v4 = v41;\n                int64_t * v42 = (int64_t *)(a2 + 168); // 0x4166ba\n                *v42 = *v42 | (int64_t)v41;\n            }\n            int64_t v43 = function_40d500(a2 + 112, a2 + 128, (int32_t)v39, 0, (int64_t)&v14); // 0x41668d\n            if (v43 == 0) {\n                // 0x416451\n                *(int32_t *)a6 = 12;\n                // 0x415c38\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x415b8a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x4166a0\n            *(int64_t *)(v43 + 40) = v35;\n            goto lab_0x415b60;\n        }\n        case 9: {\n            if ((a4 & 0x20000) == 0) {\n                // 0x416649\n                *(int32_t *)a6 = 16;\n                // 0x415b8a\n                return *(int64_t *)(v6 + 24);\n            }\n            goto lab_0x415b30;\n        }\n        case 11: {\n            goto lab_0x415b11;\n        }\n        case 12: {\n            char * v44 = (char *)(a2 + 176); // 0x416516\n            unsigned char v45 = *v44; // 0x416516\n            if ((v45 & 16) != 0) {\n                // 0x416570\n            } else {\n                int64_t v46 = v45; // 0x416516\n                *v44 = v45 | 16;\n                v13 = 0;\n                v15 = 0;\n                if ((v46 & 8) != 0) {\n                    goto lab_0x416d65;\n                } else {\n                    // 0x416537\n                    *(int64_t *)(a2 + 184) = 0x3ff000000000000;\n                    *(int64_t *)(a2 + 192) = 0x7fffffe87fffffe;\n                    v13 = 128;\n                    v15 = 2;\n                    if ((v46 & 4) == 0) {\n                        goto lab_0x416d65;\n                    } else {\n                        // 0x416561\n                        __asm_movups(*(int128_t *)(a2 + 200), __asm_pxor(v2, v2));\n                        v12 = *(int32_t *)&v4;\n                        goto lab_0x416570_2;\n                    }\n                }\n            }\n        }\n        case 18: {\n            goto lab_0x415b11;\n        }\n        case 19: {\n            goto lab_0x415b11;\n        }\n        case 20: {\n            int64_t * mem = calloc(32, 1); // 0x4161f3\n            v5 = (int64_t)mem;\n            mem2 = calloc(80, 1);\n            if (mem == NULL || mem2 == NULL) {\n                // 0x416ad6\n                free((int64_t *)v5);\n                free(mem2);\n                // 0x416451\n                *(int32_t *)a6 = 12;\n                // 0x415c38\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x415b8a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x416225\n            v18 = (int64_t)mem2;\n            v19 = (int64_t *)v9;\n            int64_t v47 = function_40ada0(v19, a1, a4); // 0x416230\n            v20 = (char *)(v9 + 8);\n            char v48 = *v20; // 0x416237\n            v17 = v48;\n            v16 = v47;\n            switch (v48) {\n                case 2: {\n                    // 0x416aaa\n                    *(int32_t *)a6 = 2;\n                    v11 = (int64_t *)(v6 + 48);\n                    goto lab_0x41677b_3;\n                }\n                case 25: {\n                    char * v49 = (char *)(v18 + 32); // 0x4167ee\n                    *v49 = *v49 | 1;\n                    if ((a4 & 256) != 0) {\n                        int64_t * v50 = (int64_t *)v5; // 0x416802\n                        *v50 = *v50 | 1024;\n                    }\n                    int64_t * v51 = (int64_t *)(a1 + 72); // 0x41680c\n                    *v51 = *v51 + (0x100000000 * v47 >> 32);\n                    v16 = function_40ada0(v19, a1, a4);\n                    v17 = *v20;\n                    if (v17 == 2) {\n                        // 0x416aaa\n                        *(int32_t *)a6 = 2;\n                        v11 = (int64_t *)(v6 + 48);\n                        goto lab_0x41677b_3;\n                    } else {\n                        goto lab_0x416252;\n                    }\n                }\n                default: {\n                    goto lab_0x416252;\n                }\n            }\n        }\n        case 23: {\n            if ((a4 & 0x1000000) != 0) {\n              lab_0x415e35:\n                // 0x415e35\n                *(int64_t *)(v6 + 24) = 0;\n                *(int32_t *)*(int64_t *)(v6 + 48) = 13;\n                // 0x415b8a\n                return *(int64_t *)(v6 + 24);\n            }\n            goto lab_0x415b11;\n        }\n        case 24: {\n            goto lab_0x415b30;\n        }\n        case 32: {\n            goto lab_0x4162f4;\n        }\n        case 33: {\n            goto lab_0x4162f4;\n        }\n        case 34: {\n            goto lab_0x416340;\n        }\n        case 35: {\n            goto lab_0x416340;\n        }\n        case 36: {\n            // 0x416362\n            *(int32_t *)a6 = 5;\n            // 0x415b8a\n            return *(int64_t *)(v6 + 24);\n        }\n        default: {\n            goto lab_0x415c38;\n        }\n    }\n  lab_0x41614b:;\n    // 0x41614b\n    int64_t * v52; // 0x415ac0\n    if (*v52 == 0) {\n        goto lab_0x415c38;\n    } else {\n        goto lab_0x415eeb;\n    }\n  lab_0x415eeb:\n    // 0x415eeb\n    function_40ad30(*v52, 0x40bf40, 0);\n    *v52 = 0;\n    return *(int64_t *)(v6 + 24);\n  lab_0x415fe2:;\n    // 0x415fe2\n    int64_t v53; // 0x415ac0\n    char * v54 = (char *)(v53 + 8);\n    char * v55 = v54; // 0x415feb\n    int128_t v56; // 0x415ac0\n    int128_t v57 = v56; // 0x415feb\n    int64_t * v58; // 0x415b60\n    int64_t * v59; // 0x415ac0\n    if ((*v58 & 0x200000) == 0) {\n        // 0x416aba\n        if (*v54 != 2) {\n            // 0x416140\n            *(int32_t *)*v59 = 10;\n            goto lab_0x41614b;\n        } else {\n            // 0x416ac6\n            *(int32_t *)*v59 = 9;\n            goto lab_0x41614b;\n        }\n    }\n    goto lab_0x415ff1;\n  lab_0x416104:;\n    // 0x416104\n    int64_t v83; // 0x415ac0\n    int64_t v336 = v83; // 0x416106\n    int64_t v337 = v336 - 0x7fff; // 0x416106\n    int64_t v84; // 0x415ac0\n    int64_t v316 = v84; // 0x416114\n    if (v337 < 0 == (0x7ffe - v336 & v336) < 0 == (v337 != 0)) {\n        // 0x416116\n        *(int32_t *)*v59 = 15;\n        goto lab_0x41614b;\n    }\n    goto lab_0x4160a9;\n  lab_0x416049:;\n    int64_t v338 = *v58; // 0x416049\n    v4 = v338;\n    int128_t v80; // 0x415fb5\n    int128_t * v78; // 0x415ac0\n    *v78 = (int128_t)__asm_movaps(v80);\n    int64_t v66; // 0x415ac0\n    int64_t v339 = function_415a00(v66, v53, v338); // 0x416059\n    v5 = v339;\n    v56 = __asm_movdqa(*v78);\n    int64_t v81; // 0x415ac0\n    if (v339 == -2) {\n        goto lab_0x415fe2;\n    } else {\n        int64_t v340 = v81;\n        if (v339 != -1 == v339 < v340) {\n            // 0x416140\n            *(int32_t *)*v59 = 10;\n            goto lab_0x41614b;\n        }\n        // 0x416085\n        if (*(char *)(v53 + 8) != 24) {\n            // 0x416140\n            *(int32_t *)*v59 = 10;\n            goto lab_0x41614b;\n        }\n        // 0x416091\n        v83 = v339;\n        v84 = v340;\n        if (v339 != -1) {\n            goto lab_0x416104;\n        } else {\n            int64_t v341 = v340 - 0x7fff; // 0x41609a\n            v316 = v340;\n            if (v341 < 0 == (0x7ffe - v340 & v340) < 0 == (v341 != 0)) {\n                // 0x416116\n                *(int32_t *)*v59 = 15;\n                goto lab_0x41614b;\n            }\n            goto lab_0x4160a9;\n        }\n    }\n  lab_0x415ff1:;\n    // 0x415ff1\n    int64_t * v60; // 0x415c66\n    int64_t v61; // 0x415c66\n    *v60 = v61;\n    int128_t * v62; // 0x415c6a\n    *v62 = (int128_t)__asm_movaps(v57);\n    *v55 = 1;\n    int64_t v63 = *v52; // 0x416005\n    int64_t v64 = v53; // 0x416005\n    int64_t v65 = v66; // 0x416005\n    goto lab_0x415dde;\n  lab_0x416010:\n    // 0x416010\n    if (*(int32_t *)*v59 != 0) {\n        // 0x415c38\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x415b8a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x41601f;\n  lab_0x4160a9:;\n    int64_t v315 = v316;\n    int64_t v317 = *v58; // 0x4160a9\n    v4 = v317;\n    int64_t v318 = function_415350((int64_t *)v53, v66, v317); // 0x4160b4\n    int64_t v319 = *v52; // 0x4160b9\n    *v60 = *v60 + (0x100000000 * v318 >> 32);\n    int64_t v127; // 0x415ac0\n    int64_t v99; // 0x415ac0\n    int64_t v132; // 0x415ac0\n    int64_t v128; // 0x415ac0\n    int64_t v101; // 0x415ac0\n    int64_t v135; // 0x415ac0\n    int64_t v102; // 0x415ac0\n    int64_t v103; // 0x415ac0\n    int64_t v136; // 0x415ac0\n    int64_t v129; // 0x415ac0\n    int64_t v134; // 0x415ac0\n    int64_t v100; // 0x415ac0\n    int64_t v133; // 0x415ac0\n    int64_t * v89; // 0x415ac0\n    int64_t * v110; // 0x415ac0\n    int64_t * v118; // 0x415ac0\n    int64_t v114; // 0x415ac0\n    char * v108; // 0x415ac0\n    if (v319 == 0) {\n        goto lab_0x416010;\n    } else {\n        int64_t v320 = v5; // 0x4160cd\n        if ((v320 || v315) != 0) {\n            if (v315 < 1) {\n                // 0x416f98\n                v4 = 0;\n                v132 = 0;\n                v133 = v315;\n                v134 = *v52;\n                v135 = v53;\n                v136 = v66;\n                goto lab_0x4161c2;\n            } else {\n                int64_t v321; // 0x415ac0\n                int64_t v322; // 0x415ac0\n                int64_t v323; // 0x415ac0\n                int64_t v324; // 0x415ac0\n                int64_t v325; // 0x415ac0\n                if (v315 == 1) {\n                    int64_t v326 = *v52; // 0x416f67\n                    v321 = v320;\n                    v322 = v53;\n                    v323 = v326;\n                    v324 = v66;\n                    v325 = v326;\n                } else {\n                    int64_t v327 = *v110; // 0x415e63\n                    int64_t v328 = *v52; // 0x415e68\n                    *v89 = v66;\n                    *v118 = v53;\n                    int64_t v329 = v327 + 112; // 0x415e7f\n                    int64_t v330 = v327 + 128; // 0x415e83\n                    int64_t v331 = 2; // 0x415e8d\n                    int64_t v332 = function_40d5e0(v328, *v110); // 0x415eaa\n                    v4 = v328;\n                    *v108 = 16;\n                    int64_t v333 = function_40d500(v329, v330, (int32_t)v328, (int32_t)v332, v114); // 0x415ece\n                    if (v332 == 0 || v333 == 0) {\n                        // 0x415ee0\n                        *(int32_t *)*v59 = 12;\n                        goto lab_0x415eeb;\n                    }\n                    // 0x415e95\n                    v331++;\n                    int64_t v334 = v333; // 0x415e9c\n                    int64_t v335 = v332; // 0x415e9c\n                    while (v315 >= v331) {\n                        // 0x415ea2\n                        v332 = function_40d5e0(v335, *v110);\n                        v4 = v334;\n                        *v108 = 16;\n                        v333 = function_40d500(v329, v330, (int32_t)v334, (int32_t)v332, v114);\n                        if (v332 == 0 || v333 == 0) {\n                            // 0x415ee0\n                            *(int32_t *)*v59 = 12;\n                            goto lab_0x415eeb;\n                        }\n                        // 0x415e95\n                        v331++;\n                        v334 = v333;\n                        v335 = v332;\n                    }\n                    // 0x416160\n                    v321 = v5;\n                    v322 = *v118;\n                    v323 = v332;\n                    v324 = *v89;\n                    v325 = v333;\n                }\n                // 0x416173\n                v4 = v325;\n                v127 = v325;\n                v128 = v322;\n                v129 = v324;\n                v99 = v325;\n                v100 = v315;\n                v101 = v322;\n                v102 = v323;\n                v103 = v324;\n                if (v315 != v321) {\n                    goto lab_0x41619f;\n                } else {\n                    goto lab_0x416180;\n                }\n            }\n        } else {\n            // 0x4160da\n            v4 = 0;\n            function_40ad30(v319, 0x40bf40, 0);\n            if (*(int32_t *)*v59 != 0) {\n                goto lab_0x415eeb;\n            }\n            goto lab_0x41601f;\n        }\n    }\n  lab_0x415dde:;\n    uint32_t v67 = *(int32_t *)*v59; // 0x415de3\n    v4 = v67;\n    if (v63 == 0 == (v67 != 0)) {\n        goto lab_0x41614b;\n    }\n    // 0x415df2\n    *v52 = v63;\n    int64_t v68 = v63; // 0x415df2\n    int64_t v69 = v64; // 0x415df2\n    int64_t v70 = v65; // 0x415df2\n    goto lab_0x415df7;\n  lab_0x41601f:\n    // 0x41601f\n    *v52 = 0;\n    v68 = 0;\n    v69 = v53;\n    v70 = v66;\n    goto lab_0x415df7;\n  lab_0x415f78:;\n    // 0x415f78\n    int64_t v96; // 0x415ac0\n    int64_t v104 = v96;\n    function_40ad30(v104, 0x40aed0, (int32_t)*(int64_t *)(v104 + 40));\n    goto lab_0x415f89;\n  lab_0x415cda:;\n    // 0x415cda\n    int64_t v94; // 0x415ac0\n    int64_t v105 = v94;\n    int64_t v93; // 0x415ac0\n    int64_t v106 = v93;\n    int64_t v92; // 0x415ac0\n    int64_t v107 = v92;\n    char v90; // 0x415ac0\n    *v108 = v90;\n    int64_t v109 = *v110; // 0x415ce1\n    int64_t v111 = v109 + 112; // 0x415cf3\n    int64_t v112 = v109 + 128; // 0x415cf7\n    int64_t v113 = function_40d500(v111, v112, (int32_t)v107, 0, v114); // 0x415d04\n    v4 = v113;\n    if (v113 == 0) {\n        // 0x415ee0\n        *(int32_t *)*v59 = 12;\n        goto lab_0x415eeb;\n    }\n    // 0x415d15\n    int64_t v91; // 0x415ac0\n    int64_t v115 = v91 + 2; // 0x415d15\n    int64_t v116 = v113; // 0x415d1d\n    int64_t v117 = v106; // 0x415d1d\n    if (v115 <= v5) {\n        // 0x415d23\n        *v118 = v106;\n        int64_t v119 = v115; // 0x415d2b\n        int64_t v120 = v107; // 0x415d2b\n        v120 = function_40d5e0(v120, *v110);\n        v4 = v113;\n        *v108 = 16;\n        int64_t v121 = function_40d500(v111, v112, (int32_t)v113, (int32_t)v120, v114); // 0x415d5a\n        if (v120 == 0 || v121 == 0) {\n            // 0x415ee0\n            *(int32_t *)*v59 = 12;\n            goto lab_0x415eeb;\n        }\n        // 0x415d71\n        v4 = v121;\n        *v108 = 10;\n        int64_t v122 = function_40d500(v111, v112, (int32_t)v121, 0, v114); // 0x415d8c\n        if (v122 == 0) {\n            // 0x415ee0\n            *(int32_t *)*v59 = 12;\n            goto lab_0x415eeb;\n        }\n        // 0x415d9d\n        v119++;\n        int64_t v123 = v122; // 0x415da5\n        while (v119 <= v5) {\n            // 0x415d2e\n            v120 = function_40d5e0(v120, *v110);\n            v4 = v123;\n            *v108 = 16;\n            v121 = function_40d500(v111, v112, (int32_t)v123, (int32_t)v120, v114);\n            if (v120 == 0 || v121 == 0) {\n                // 0x415ee0\n                *(int32_t *)*v59 = 12;\n                goto lab_0x415eeb;\n            }\n            // 0x415d71\n            v4 = v121;\n            *v108 = 10;\n            v122 = function_40d500(v111, v112, (int32_t)v121, 0, v114);\n            if (v122 == 0) {\n                // 0x415ee0\n                *(int32_t *)*v59 = 12;\n                goto lab_0x415eeb;\n            }\n            // 0x415d9d\n            v119++;\n            v123 = v122;\n        }\n        // 0x415da7\n        v4 = v122;\n        v116 = v122;\n        v117 = *v118;\n    }\n    int64_t v124 = v117;\n    int64_t v125 = v116; // 0x415dbd\n    int64_t v126 = *v89; // 0x415daf\n    v127 = v125;\n    v128 = v124;\n    v129 = v105;\n    if (v126 == 0) {\n        goto lab_0x416180;\n    } else {\n        // 0x415dbd\n        *v108 = 16;\n        v63 = function_40d500(v111, v112, (int32_t)v126, (int32_t)v125, v114);\n        v64 = v124;\n        v65 = v105;\n        goto lab_0x415dde;\n    }\n  lab_0x415df7:;\n    unsigned char v71 = *(char *)(v69 + 8); // 0x415df7\n    if ((*v58 & 0x1000000) != 0) {\n        if (v71 != 11 != v71 != 23) {\n            // 0x415e1c\n            if (v68 == 0) {\n                goto lab_0x415e35;\n            } else {\n                // 0x415e26\n                function_40ad30(v68, 0x40bf40, 0);\n                goto lab_0x415e35;\n            }\n        }\n    }\n    char v72 = v71; // 0x415b84\n    int64_t v73 = v70; // 0x415b84\n    int64_t v74 = v69; // 0x415b84\n    if (v71 >= 24) {\n        // break -> 0x415b8a\n        goto lab_0x415b8a_2;\n    }\n    goto lab_0x415c50;\n  lab_0x415f89:\n    // 0x415f89\n    v90 = v5 == -1 ? 11 : 10;\n    int64_t v95; // 0x415ac0\n    v91 = v95;\n    v92 = v104;\n    int64_t v97; // 0x415ac0\n    v93 = v97;\n    int64_t v98; // 0x415ac0\n    v94 = v98;\n    goto lab_0x415cda;\n  lab_0x416180:\n    // 0x416180\n    *v52 = v127;\n    v68 = v127;\n    v69 = v128;\n    v70 = v129;\n    goto lab_0x415df7;\n  lab_0x41619f:\n    // 0x41619f\n    *v89 = v99;\n    int64_t v130 = function_40d5e0(v102, *v110); // 0x4161ac\n    int64_t v131 = *v89; // 0x4161b1\n    v4 = v131;\n    v132 = v131;\n    v133 = v100;\n    v134 = v130;\n    v135 = v101;\n    v136 = v103;\n    if (v130 == 0) {\n        // 0x415ee0\n        *(int32_t *)*v59 = 12;\n        goto lab_0x415eeb;\n    }\n    goto lab_0x4161c2;\n  lab_0x4161c2:\n    // 0x4161c2\n    *v89 = v132;\n    v95 = v133;\n    v96 = v134;\n    v97 = v135;\n    v98 = v136;\n    if (*(char *)(v134 + 48) != 17) {\n        goto lab_0x415f89;\n    } else {\n        goto lab_0x415f78;\n    }\n  lab_0x416dba:;\n    // 0x416dba\n    uint64_t v137; // 0x415ac0\n    int64_t v138 = 1 << v137;\n    v4 = v138;\n    int64_t * v139; // 0x415ac0\n    *v139 = *v139 | v138;\n    goto lab_0x416da8;\n  lab_0x416da8:;\n    int64_t v140 = v137 + 1; // 0x416db0\n    if (v137 == 63) {\n        // break -> 0x416dc9\n        goto lab_0x416dc9;\n    }\n    goto lab_0x416db2;\n  lab_0x41677b_3:\n    // 0x41677b\n    free((int64_t *)v5);\n    function_40bef0(v18);\n    if (*(int32_t *)*v11 != 0) {\n        // 0x415c38\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x415b8a\n        return *(int64_t *)(v6 + 24);\n    }\n    // 0x41679d\n    *(int64_t *)(v6 + 24) = 0;\n    goto lab_0x415b60;\n  lab_0x416c1e:;\n    // 0x416c1e\n    int64_t * v177; // 0x415ac0\n    *(int32_t *)*v177 = 12;\n    v11 = v177;\n    goto lab_0x41677b_3;\n  lab_0x416e26_3:\n    // 0x416e26\n    *(int32_t *)*v177 = 11;\n    v11 = v177;\n    goto lab_0x41677b_3;\n  lab_0x416d25_5:\n    // 0x416d25\n    *(int32_t *)*v177 = 3;\n    v11 = v177;\n    goto lab_0x41677b_3;\n  lab_0x4162e4:;\n    // 0x4162e4\n    int64_t v188; // 0x4162b9\n    int64_t v254 = v188 & 0xffffffff; // 0x4162be\n    int64_t v234; // 0x415ac0\n    int64_t v255; // 0x415ac0\n    int64_t v235; // 0x415ac0\n    int64_t * v152; // 0x416294\n    int32_t * v168; // 0x415ac0\n    int64_t v178; // 0x415ac0\n    int64_t * v179; // 0x415ac0\n    int64_t * v180; // 0x415ac0\n    int64_t * v181; // 0x415ac0\n    int64_t * v182; // 0x415ac0\n    int64_t v148; // 0x416263\n    int64_t * v149; // 0x41627e\n    int64_t v151; // 0x416294\n    switch (g133) {\n        case 0: {\n            unsigned char v256 = *(char *)v151; // 0x416721\n            unsigned char v257 = v256 % 64;\n            int64_t v258 = v257 == 0 ? 1 : 1 << (int64_t)v257;\n            v4 = v258;\n            int64_t * v259 = (int64_t *)(v148 + (int64_t)(v256 / 8 & 24)); // 0x416738\n            *v259 = v258 | *v259;\n            v255 = v254;\n            goto lab_0x4166df;\n        }\n        case 1: {\n            int64_t v260 = *v181; // 0x4166fd\n            v4 = v260;\n            int64_t v261 = *mem2; // 0x416701\n            int64_t v262 = v260; // 0x41670a\n            int64_t v263 = v261; // 0x41670a\n            if (v260 == *v182) {\n                int64_t v264 = 2 * v260 | 1; // 0x416b26\n                *v182 = v264;\n                int64_t * mem3 = realloc((int64_t *)v261, 4 * (int32_t)v264); // 0x416b38\n                if (mem3 == NULL) {\n                    goto lab_0x416c1e;\n                }\n                // 0x416b46\n                v263 = (int64_t)mem3;\n                *mem2 = v263;\n                v262 = *v181;\n                v4 = v262;\n            }\n            // 0x416710\n            *v181 = v262 + 1;\n            *(int32_t *)(4 * v4 + v263) = *v168;\n            v255 = v254;\n            goto lab_0x4166df;\n        }\n        case 2: {\n            int32_t v265 = function_4100d0(v148, *v152); // 0x4166d5\n            *(int32_t *)*v177 = v265;\n            v255 = v254;\n            v11 = v177;\n            if (v265 != 0) {\n                goto lab_0x41677b_3;\n            }\n            goto lab_0x4166df;\n        }\n        case 3: {\n            int32_t v266 = function_4100d0(v148, *v152); // 0x4167bd\n            *(int32_t *)*v177 = v266;\n            v255 = v254;\n            v11 = v177;\n            if (v266 != 0) {\n                goto lab_0x41677b_3;\n            }\n            goto lab_0x4166df;\n        }\n        case 4: {\n            int64_t v267 = *(int64_t *)(a1 + 120); // 0x416743\n            *v179 = *v149;\n            int64_t v268 = function_410120(v267, v148, v18 + 24, v178, v180, *v152, (int64_t)&g127); // 0x416763\n            int32_t v269 = v268; // 0x41676d\n            *(int32_t *)*v177 = v269;\n            v3 = *v179;\n            v255 = v254;\n            v11 = v177;\n            if (v269 != 0) {\n                goto lab_0x41677b_3;\n            }\n            goto lab_0x4166df;\n        }\n        default: {\n            // 0x416f24\n            __assert_fail(\"0\", \"lib/regcomp.c\", 3315, \"parse_bracket_exp\");\n            v234 = &g127;\n            v235 = (int64_t)\"parse_bracket_exp\";\n            goto lab_0x416f3d_3;\n        }\n    }\n  lab_0x416845:\n    // 0x416845\n    *(int32_t *)*v177 = 7;\n    v11 = v177;\n    goto lab_0x41677b_3;\n  lab_0x4166df:;\n    int64_t v270 = v255;\n    int64_t v183 = v270; // 0x415ac0\n    int64_t v184 = 0; // 0x415ac0\n    int64_t * v156; // 0x415ac0\n    int64_t * v163; // 0x415ac0\n    switch (*v20) {\n        case 2: {\n            goto lab_0x416845;\n        }\n        case 21: {\n            // 0x416b53\n            *v156 = *v156 + (0x100000000 * v270 >> 32);\n            if (*(char *)(v6 + 56) != 0) {\n                // 0x416b61\n                v4 = v5 + 32;\n                int64_t v271 = v5; // 0x416b68\n                int64_t * v272 = (int64_t *)v271; // 0x416b6c\n                *v272 = -1 - *v272;\n                v271 += 8;\n                while (v4 != v271) {\n                    // 0x416b6c\n                    v272 = (int64_t *)v271;\n                    *v272 = -1 - *v272;\n                    v271 += 8;\n                }\n            }\n            uint32_t v273 = *(int32_t *)(*v163 + 180); // 0x416b7d\n            v4 = v273;\n            if (v273 >= 2) {\n                int64_t v274 = 0;\n                int64_t * v275 = (int64_t *)(v274 + v5); // 0x416b9b\n                *v275 = *v275 & *(int64_t *)(v274 + *(int64_t *)(*v163 + 120));\n                int64_t v276 = v274 + 8; // 0x416ba7\n                while (v274 != 24) {\n                    // 0x416b97\n                    v274 = v276;\n                    v275 = (int64_t *)(v274 + v5);\n                    *v275 = *v275 & *(int64_t *)(v274 + *(int64_t *)(*v163 + 120));\n                    v276 = v274 + 8;\n                }\n            }\n            // 0x416ba9\n            if (*v181 != 0) {\n                goto lab_0x416c2e;\n            } else {\n                // 0x416bb0\n                if (*(int64_t *)(v18 + 48) != 0) {\n                    goto lab_0x416c2e;\n                } else {\n                    // 0x416bb7\n                    if (*(int64_t *)(v18 + 56) != 0) {\n                        goto lab_0x416c2e;\n                    } else {\n                        // 0x416bbe\n                        if (*(int64_t *)(v18 + 64) != 0) {\n                            goto lab_0x416c2e;\n                        } else {\n                            int64_t v277 = v4; // 0x416bc5\n                            v4 = v277 + 0xffffffff & 0xffffffff;\n                            if ((int32_t)v277 < 2) {\n                                goto lab_0x416bd8;\n                            } else {\n                                // 0x416bca\n                                if (*(int64_t *)v178 != 0) {\n                                    goto lab_0x416c2e;\n                                } else {\n                                    // 0x416bd1\n                                    if (*(char *)(v18 + 32) % 2 != 0) {\n                                        goto lab_0x416c2e;\n                                    } else {\n                                        goto lab_0x416bd8;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        default: {\n            goto lab_0x41627e;\n        }\n    }\n  lab_0x4169bf:;\n    // 0x4169bf\n    int64_t v203; // 0x415ac0\n    int64_t v278 = (int64_t)*(char *)v203;\n    int64_t v220 = v278; // 0x4169c1\n    int64_t v216; // 0x415ac0\n    char v218; // 0x415ac0\n    int64_t v217; // 0x415ac0\n    int64_t v219; // 0x415ac0\n    int64_t * v162; // 0x415ac0\n    int32_t v197; // 0x416986\n    if (v197 == 0) {\n        goto lab_0x416e19;\n    } else {\n        // 0x4169c7\n        v218 = 0;\n        v219 = v278;\n        if (v197 != 3) {\n            goto lab_0x4169da;\n        } else {\n            int64_t v279 = *v162; // 0x4169ce\n            v3 = v279;\n            v216 = v279;\n            v217 = v278;\n            goto lab_0x4169d6;\n        }\n    }\n  lab_0x416e19:;\n    // 0x416e19\n    int64_t v161; // 0x415ac0\n    v218 = *(char *)v161;\n    v219 = v220;\n    goto lab_0x4169da;\n  lab_0x4169d6:\n    // 0x4169d6\n    v218 = *(char *)v216;\n    v219 = v217;\n    goto lab_0x4169da;\n  lab_0x4169da:;\n    int64_t v280 = v219;\n    unsigned char v281 = v218;\n    int64_t v282; // 0x415ac0\n    int64_t v283; // 0x415ac0\n    int32_t v284; // 0x415ac0\n    char * v165; // 0x415ac0\n    int32_t v195; // 0x41695d\n    if (v195 == 0) {\n        goto lab_0x416de4;\n    } else {\n        // 0x4169e3\n        v283 = v281;\n        v284 = v197;\n        v282 = (int64_t)*v168;\n        if (*v165 != 0) {\n            goto lab_0x416de4;\n        } else {\n            goto lab_0x4169f3;\n        }\n    }\n  lab_0x416de4:;\n    // 0x416de4\n    int32_t * v170; // 0x415ac0\n    *v170 = (int32_t)v281;\n    int64_t * v171; // 0x415ac0\n    *v171 = v4;\n    int64_t v285 = function_40b4b0(v280, v4); // 0x416df0\n    v4 = *v171;\n    v283 = (int64_t)*v170;\n    int32_t * v160; // 0x415ac0\n    v284 = *v160;\n    v282 = v285 & 0xffffffff;\n    goto lab_0x4169f3;\n  lab_0x4169f3:;\n    int64_t v286 = v282;\n    int32_t v287 = v284;\n    int64_t v288 = v283;\n    int64_t v289; // 0x415ac0\n    int64_t v290; // 0x415ac0\n    if (v287 == 0) {\n        goto lab_0x416d35;\n    } else {\n        int64_t v291 = (int64_t)*(int32_t *)v161; // 0x4169fb\n        v3 = v291;\n        v289 = v291;\n        v290 = v286;\n        if (v287 == 3) {\n            goto lab_0x416d35;\n        } else {\n            goto lab_0x416a0c;\n        }\n    }\n  lab_0x416d35:\n    // 0x416d35\n    *v170 = (int32_t)v286;\n    *v171 = v4;\n    int64_t v292 = function_40b4b0(v288, v4); // 0x416d44\n    v4 = *v171;\n    int64_t v293 = v292 & 0xffffffff; // 0x416d53\n    v3 = v293;\n    v289 = v293;\n    v290 = (int64_t)*v170;\n    goto lab_0x416a0c;\n  lab_0x416a0c:;\n    int32_t v294 = v290;\n    if (v294 == -1) {\n        goto lab_0x416d25_5;\n    }\n    uint32_t v295 = (int32_t)v289; // 0x416a16\n    if (v295 == -1) {\n        goto lab_0x416d25_5;\n    }\n    // 0x416a20\n    if (v294 > v295 == ((*v149 & 0x10000) != 0)) {\n        goto lab_0x416e26_3;\n    }\n    int64_t v296 = v4; // 0x416a34\n    int32_t v297 = v294; // 0x416a37\n    int64_t * v172; // 0x415ac0\n    int32_t * v173; // 0x415ac0\n    int32_t * v174; // 0x415ac0\n    int64_t * v175; // 0x415ac0\n    int64_t * v176; // 0x415ac0\n    if (v296 != 0) {\n        int64_t v298 = *(int64_t *)(v296 + 64); // 0x416a39\n        int64_t v299 = *(int64_t *)(v296 + 8); // 0x416a3d\n        int32_t v300 = v294; // 0x416a46\n        int64_t v301 = v298; // 0x416a46\n        int64_t v302 = v299; // 0x416a46\n        if (v298 == *v172) {\n            // 0x416ea2\n            *v173 = v295;\n            *v174 = v294;\n            *v171 = v4;\n            int64_t v303 = 2 * v298 | 1; // 0x416ebc\n            int64_t v304 = 4 * v303; // 0x416ec0\n            *v172 = v303;\n            *v175 = v304;\n            *v176 = (int64_t)realloc((int64_t *)v299, (int32_t)v304);\n            int64_t * mem4 = realloc((int64_t *)*(int64_t *)(*v171 + 16), (int32_t)*v175); // 0x416ef0\n            int64_t v305 = *v176; // 0x416ef5\n            if (v305 == 0) {\n                // 0x416f3d\n                v234 = (int64_t)mem4;\n                v235 = v305;\n                goto lab_0x416f3d_3;\n            }\n            int64_t v306 = *v171; // 0x416f02\n            v4 = v306;\n            v300 = *v174;\n            v3 = (int64_t)*v173;\n            if (mem4 == NULL) {\n                // 0x416f3d\n                v234 = (int64_t)mem4;\n                v235 = v305;\n                goto lab_0x416f3d_3;\n            }\n            // 0x416f13\n            *(int64_t *)(v306 + 16) = (int64_t)mem4;\n            v301 = *(int64_t *)(v4 + 64);\n            *(int64_t *)(v4 + 8) = v305;\n            v302 = v305;\n        }\n        int64_t v307 = 4 * v301; // 0x416a4c\n        *(int32_t *)(v302 + v307) = v300;\n        *(int64_t *)(v4 + 64) = v301 + 1;\n        *(int32_t *)(*(int64_t *)(v4 + 16) + v307) = (int32_t)v3;\n        v297 = v300;\n    }\n    int64_t v308 = 0;\n    uint32_t v309 = (int32_t)v308; // 0x416a72\n    int64_t v310; // 0x416a82\n    int64_t * v311; // 0x416a89\n    if (v297 <= v309) {\n        // 0x416a77\n        if ((int32_t)v3 >= v309) {\n            // 0x416a7c\n            v310 = v308 >> 6;\n            v4 = v310;\n            v311 = (int64_t *)(8 * v310 + v148);\n            *v311 = *v311 | 1 << v308 % 64;\n        }\n    }\n    int64_t v312 = v308 + 1; // 0x416a98\n    while (v308 != 255) {\n        // 0x416a70\n        v308 = v312;\n        v309 = (int32_t)v308;\n        if (v297 <= v309) {\n            // 0x416a77\n            if ((int32_t)v3 >= v309) {\n                // 0x416a7c\n                v310 = v308 >> 6;\n                v4 = v310;\n                v311 = (int64_t *)(8 * v310 + v148);\n                *v311 = *v311 | 1 << v308 % 64;\n            }\n        }\n        // 0x416a8e\n        v312 = v308 + 1;\n    }\n    // 0x416a9a\n    *(int32_t *)*v177 = 0;\n    int64_t v194; // 0x416958\n    v255 = v194 & 0xffffffff;\n    goto lab_0x4166df;\n  lab_0x415b11:\n    if ((a4 & 32) != 0) {\n        // 0x415e35\n        *(int64_t *)(v6 + 24) = 0;\n        *(int32_t *)*(int64_t *)(v6 + 48) = 13;\n        // 0x415b8a\n        return *(int64_t *)(v6 + 24);\n    }\n    if ((a4 & 16) != 0) {\n        // 0x416855\n        v5 = a5;\n        int64_t v313 = function_415350((int64_t *)v9, a1, a4); // 0x416865\n        int64_t * v314 = (int64_t *)(a1 + 72); // 0x416877\n        *v314 = (0x100000000 * v313 >> 32) + *v314;\n        function_415ac0(a1, a2, v9, a4, v5, a6);\n        // 0x415b8a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x415b30;\n  lab_0x415b30:\n    // 0x415b30\n    *(char *)(v9 + 8) = 1;\n    if (function_40d500(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n        // 0x416451\n        *(int32_t *)a6 = 12;\n        // 0x415c38\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x415b8a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x415b60;\n  lab_0x4162f4:;\n    int64_t v223 = &g2; // 0x416310\n    int64_t v222 = (int64_t)\"alnum\"; // 0x416310\n    bool v224 = v7 == 33; // 0x416310\n    goto lab_0x416314;\n  lab_0x416340:\n    // 0x416340\n    v223 = (int64_t)&g19;\n    v222 = (int64_t)\"space\";\n    v224 = v7 == 35;\n    goto lab_0x416314;\n  lab_0x415b60:\n    // 0x415b60\n    v58 = (int64_t *)(v6 + 8);\n    int64_t v144 = function_415350((int64_t *)v9, a1, *v58); // 0x415b6b\n    unsigned char v145 = *(char *)(v9 + 8); // 0x415b70\n    int64_t * v146 = (int64_t *)(a1 + 72); // 0x415b78\n    *v146 = *v146 + (0x100000000 * v144 >> 32);\n    if (v145 >= 24) {\n        // 0x415b8a\n        return *(int64_t *)(v6 + 24);\n    }\n    // 0x415c50\n    v52 = (int64_t *)(v6 + 24);\n    int64_t v147 = v6 + 32;\n    v89 = (int64_t *)v147;\n    v78 = (int128_t *)v147;\n    v59 = (int64_t *)(v6 + 48);\n    v110 = (int64_t *)(v6 + 16);\n    v118 = (int64_t *)(v6 + 56);\n    v114 = v6 + 192;\n    v108 = (char *)(v6 + 200);\n    v72 = v145;\n    v73 = a1;\n    v74 = v9;\n    while (true) {\n      lab_0x415c50:;\n        unsigned char v75 = v72;\n        if ((1 << (int64_t)(v75 % 64) & 0x8c0800) == 0) {\n            // break -> 0x415b8a\n            break;\n        }\n        // 0x415c66\n        v53 = v74;\n        v66 = v73;\n        v60 = (int64_t *)(v66 + 72);\n        v61 = *v60;\n        v62 = (int128_t *)v53;\n        int128_t v76 = __asm_movdqa(*v62); // 0x415c6a\n        if (v75 == 23) {\n            int64_t v77 = *v58; // 0x415fa0\n            v4 = v77;\n            *v78 = (int128_t)__asm_movaps(v76);\n            int64_t v79 = function_415a00(v66, v53, v77); // 0x415fb0\n            v80 = __asm_movdqa(*v78);\n            v5 = v79;\n            v56 = v80;\n            switch (v79) {\n                case -1: {\n                    // 0x416030\n                    if (*(char *)(v53 + 8) != 1) {\n                        // 0x416140\n                        *(int32_t *)*v59 = 10;\n                        goto lab_0x41614b;\n                    }\n                    // 0x41603c\n                    v81 = 0;\n                    if (*(char *)v53 != 44) {\n                        // 0x416140\n                        *(int32_t *)*v59 = 10;\n                        goto lab_0x41614b;\n                    }\n                    goto lab_0x416049;\n                }\n                case -2: {\n                    goto lab_0x415fe2;\n                }\n                default: {\n                    char * v82 = (char *)(v53 + 8);\n                    v56 = v80;\n                    v83 = v79;\n                    v84 = v79;\n                    switch (*v82) {\n                        case 24: {\n                            goto lab_0x416104;\n                        }\n                        case 1: {\n                            // 0x416123\n                            v81 = v79;\n                            if (*(char *)v53 == 44) {\n                                goto lab_0x416049;\n                            } else {\n                                // 0x41612e\n                                v55 = v82;\n                                v57 = v80;\n                                if ((*v58 & 0x200000) == 0) {\n                                    // 0x416140\n                                    *(int32_t *)*v59 = 10;\n                                    goto lab_0x41614b;\n                                }\n                                goto lab_0x415ff1;\n                            }\n                        }\n                        default: {\n                            goto lab_0x415fe2;\n                        }\n                    }\n                }\n            }\n        } else {\n            int64_t v85 = *v58;\n            v4 = v85;\n            int64_t v86 = function_415350((int64_t *)v53, v66, v85);\n            *v60 = (0x100000000 * v86 >> 32) + *v60;\n            int64_t v87 = *v52;\n            if (v75 == 19) {\n                if (v87 == 0) {\n                    goto lab_0x416010;\n                } else {\n                    int64_t v88 = v75 == 18; // 0x415c59\n                    v5 = 1;\n                    *v89 = 0;\n                    v90 = 10;\n                    v91 = v88;\n                    v92 = v87;\n                    v93 = v53;\n                    v94 = v66;\n                    v95 = v88;\n                    v96 = v87;\n                    v97 = v53;\n                    v98 = v66;\n                    if (*(char *)(v87 + 48) == 17) {\n                        goto lab_0x415f78;\n                    } else {\n                        goto lab_0x415cda;\n                    }\n                }\n            } else {\n                if (v87 == 0) {\n                    goto lab_0x416010;\n                } else {\n                    if (v75 == 18) {\n                        // 0x41618a\n                        v5 = -1;\n                        v4 = v87;\n                        v99 = v87;\n                        v100 = 1;\n                        v101 = v53;\n                        v102 = v87;\n                        v103 = v66;\n                        goto lab_0x41619f;\n                    } else {\n                        // 0x415cb3\n                        v5 = -1;\n                        if (*(char *)(v87 + 48) == 17) {\n                            // 0x415f60\n                            *v89 = 0;\n                            v95 = 0;\n                            v96 = *v52;\n                            v97 = v53;\n                            v98 = v66;\n                            goto lab_0x415f78;\n                        } else {\n                            // 0x415cc2\n                            *v89 = 0;\n                            v90 = 11;\n                            v91 = 0;\n                            v92 = v87;\n                            v93 = v53;\n                            v94 = v66;\n                            goto lab_0x415cda;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // 0x415b8a\n    return *(int64_t *)(v6 + 24);\n  lab_0x416252:\n    // 0x416252\n    if (v17 == 21) {\n        // 0x41683a\n        *v20 = 1;\n    }\n    // 0x41625a\n    v148 = v5;\n    v149 = (int64_t *)(v6 + 8);\n    int64_t v150 = v6 + 112; // 0x41628f\n    v151 = v6 + 120;\n    v152 = (int64_t *)v151;\n    int64_t v153; // bp-120, 0x415ac0\n    int64_t v154 = &v153;\n    int32_t * v155 = (int32_t *)v150; // 0x416299\n    v156 = (int64_t *)(a1 + 72);\n    int64_t v157 = v6 + 144;\n    int64_t v158 = v6 + 192;\n    int64_t v159 = v6 + 128;\n    v160 = (int32_t *)v159;\n    v161 = v6 + 136;\n    v162 = (int64_t *)v161;\n    v163 = (int64_t *)(v6 + 16);\n    int64_t v164 = v6 + 64;\n    v165 = (char *)v164;\n    bool v166; // 0x415ac0\n    int64_t v167 = v166 ? -1 : 1;\n    v168 = (int32_t *)v151;\n    int64_t v169 = v6 + 72;\n    v170 = (int32_t *)v169;\n    v171 = (int64_t *)v164;\n    v172 = (int64_t *)(v6 + 32);\n    v173 = (int32_t *)(v6 + 92);\n    v174 = (int32_t *)(v6 + 88);\n    v175 = (int64_t *)(v6 + 80);\n    v176 = (int64_t *)v169;\n    v177 = (int64_t *)(v6 + 48);\n    v178 = v18 + 72;\n    v179 = (int64_t *)(v6 - 16);\n    v180 = (int64_t *)(v6 + 104);\n    v181 = (int64_t *)(v18 + 40);\n    v182 = (int64_t *)(v6 + 24);\n    v183 = v16 & 0xffffffff;\n    v184 = 1;\n    int32_t v185; // 0x415ac0\n    while (true) {\n      lab_0x41627e:\n        // 0x41627e\n        v3 = v184;\n        int64_t v186 = *v149; // 0x41627e\n        v3 = v184;\n        *v152 = v154;\n        *v155 = 3;\n        int32_t v187 = function_415130(v150, a1, v9, v183, v186, (int32_t)v184);\n        v185 = v187;\n        if (v187 != 0) {\n            // break -> 0x416894\n            break;\n        }\n        // 0x4162ae\n        g133 = v6 - 8;\n        v188 = function_40ada0(v19, a1, *v149);\n        if ((*v155 - 2 & -3) == 0) {\n            goto lab_0x4162e4;\n        } else {\n            unsigned char v189 = *v20; // 0x4162cc\n            v4 = v189;\n            switch (v189) {\n                case 2: {\n                    goto lab_0x416845;\n                }\n                case 22: {\n                    int64_t v190 = 0x100000000 * v188;\n                    *v156 = *v156 + (v190 >> 32);\n                    int64_t v191 = *v149; // 0x4168db\n                    int64_t v192 = function_40ada0((int64_t *)v157, a1, v191); // 0x4168eb\n                    unsigned char v193 = *(char *)(v6 + 152); // 0x4168f0\n                    v4 = v193;\n                    switch (v193) {\n                        case 2: {\n                            goto lab_0x416845;\n                        }\n                        case 21: {\n                            // 0x416b05\n                            *v156 = *v156 + (-v190 >> 32);\n                            *v20 = 1;\n                            goto lab_0x4162e4;\n                        }\n                        default: {\n                            // 0x41690a\n                            *v160 = 3;\n                            *v162 = v158;\n                            if ((int32_t)function_415130(v159, a1, v157, v192 & 0xffffffff, v191, 1) != 0) {\n                                // break -> 0x416894\n                                break;\n                            }\n                            // 0x41694d\n                            v194 = function_40ada0(v19, a1, *v149);\n                            v195 = *v155;\n                            int32_t v196 = *(int32_t *)(*v163 + 180); // 0x41696e\n                            v4 = v196 < 2 == (1 - v196 & v196) < 0 ? v18 : 0;\n                            if ((v195 - 2 & -3) == 0) {\n                                goto lab_0x416e26_3;\n                            }\n                            // 0x416986\n                            v197 = *v160;\n                            if ((v197 - 2 & -3) == 0) {\n                                goto lab_0x416e26_3;\n                            }\n                            // 0x416999\n                            *v165 = (char)(v195 == 3);\n                            if (v195 == 3) {\n                                int64_t v198 = *v152; // 0x416e6d\n                                int64_t v199 = -1; // 0x416e7e\n                                int64_t v200 = v198; // 0x416e7e\n                                int64_t v201; // 0x415ac0\n                                while (v199 != 0) {\n                                    int64_t v202 = v200;\n                                    v199--;\n                                    v200 = v202 + v167;\n                                    v201 = v199;\n                                    if (*(char *)v202 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                }\n                                if (-v201 >= 4) {\n                                    goto lab_0x416d25_5;\n                                }\n                                // 0x416e90\n                                v203 = v198;\n                                if (v197 == 3) {\n                                    // 0x416d01\n                                    int64_t v204; // 0x415ac0\n                                    while (v204 != 0) {\n                                        int64_t v205; // 0x415ac0\n                                        int64_t v206 = v205;\n                                        char v207 = *(char *)v206; // 0x416d0f\n                                        int64_t v208; // 0x415ac0\n                                        int64_t v209 = v208 - 1; // 0x416d0f\n                                        v204 = v209;\n                                        v205 = v206 + v167;\n                                        int64_t v210 = v209; // 0x416d0f\n                                        if (v207 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v208 = v204;\n                                        v210 = 0;\n                                    }\n                                    v203 = v198;\n                                }\n                                goto lab_0x4169bf;\n                            } else {\n                                if (v197 == 3) {\n                                    int64_t v211 = *v162; // 0x416e36\n                                    v3 = v211;\n                                    int64_t v212 = v211; // 0x416e47\n                                    int64_t v213 = -1; // 0x416e47\n                                    int64_t v214 = 0; // 0x416e47\n                                    while (v213 != 0) {\n                                        int64_t v215 = v212;\n                                        v213--;\n                                        v212 = v215 + v167;\n                                        v214 = v213;\n                                        if (*(char *)v215 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v214 = 0;\n                                    }\n                                    if (-v214 >= 4) {\n                                        goto lab_0x416d25_5;\n                                    }\n                                    // 0x416e5d\n                                    v203 = v151;\n                                    v216 = v211;\n                                    v217 = 0;\n                                    if (v195 != 0) {\n                                        goto lab_0x4169d6;\n                                    } else {\n                                        goto lab_0x4169bf;\n                                    }\n                                } else {\n                                    // 0x4169b1\n                                    v203 = v151;\n                                    if (v195 != 0) {\n                                        // 0x416e0d\n                                        v218 = 0;\n                                        v219 = 0;\n                                        v220 = 0;\n                                        if (v197 != 0) {\n                                            goto lab_0x4169da;\n                                        } else {\n                                            goto lab_0x416e19;\n                                        }\n                                    } else {\n                                        goto lab_0x4169bf;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                default: {\n                    goto lab_0x4162e4;\n                }\n            }\n        }\n    }\n    // 0x416894\n    *(int32_t *)*v177 = v185;\n    v11 = v177;\n    goto lab_0x41677b_3;\n  lab_0x416314:;\n    int64_t v221 = *(int64_t *)(a1 + 120);\n    v4 = v222;\n    v3 = a6;\n    if (!(((int32_t)a6 == 0 | function_4108f0(a2, v221, (char *)v222, (int64_t *)v223, (int64_t)v224, a6) != 0))) {\n        // 0x415c38\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x415b8a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x415b60;\n  lab_0x4167c9:;\n    // 0x4167c9\n    int64_t v225; // 0x416575\n    int64_t v226; // 0x416579\n    if (function_40d500(v225, v226, 0, 0, v9) == 0) {\n        // 0x416451\n        *(int32_t *)a6 = 12;\n        // 0x415c38\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x415b8a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x41661f;\n  lab_0x416d65:;\n    int16_t * v250 = *__ctype_b_loc(); // 0x416d79\n    v3 = (v13 | 256) - 64 * v15;\n    int64_t v251 = v13; // 0x416d8f\n    int64_t v252 = 8 * v15 + a2; // 0x416d8f\n    int64_t v141 = 2 * v13 + (int64_t)v250; // 0x416d8f\n    while (true) {\n        int64_t v143 = v251;\n        v139 = (int64_t *)(v252 + 184);\n        v140 = 0;\n        while (true) {\n          lab_0x416db2:\n            // 0x416db2\n            v137 = v140;\n            if ((*(char *)(2 * v137 + v141) & 8) == 0) {\n                int64_t v142 = v137 + v143; // 0x416da0\n                v4 = v142 & 0xffffffff;\n                if ((int32_t)v142 == 95) {\n                    goto lab_0x416dba;\n                } else {\n                    goto lab_0x416da8;\n                }\n            } else {\n                goto lab_0x416dba;\n            }\n        }\n      lab_0x416dc9:;\n        int64_t v253 = v143 + 64; // 0x416dc9\n        v12 = v10;\n        v251 = v253 & 0xffffffff;\n        v252 += 8;\n        v141 += 128;\n        if ((int32_t)v3 == (int32_t)v253) {\n            // break -> 0x416570\n            break;\n        }\n    }\n    goto lab_0x416570_2;\n  lab_0x41661f:;\n    int64_t v227 = function_415350((int64_t *)v9, a1, a4); // 0x41662a\n    int64_t * v228 = (int64_t *)(a1 + 72); // 0x416631\n    *v228 = (0x100000000 * v227 >> 32) + *v228;\n    // 0x415b8a\n    return *(int64_t *)(v6 + 24);\n  lab_0x416570_2:;\n    int32_t v229 = v12;\n    v225 = a2 + 112;\n    v226 = a2 + 128;\n    if ((v229 - 256 & -257) != 0) {\n        goto lab_0x4167c9;\n    } else {\n        int32_t * v230 = (int32_t *)v9;\n        int64_t v231; // 0x415ac0\n        if (v229 == 256) {\n            // 0x4168aa\n            *v230 = 6;\n            v4 = 0;\n            v231 = function_40d500(v225, v226, 0, 0, v9);\n        } else {\n            // 0x41659f\n            *v230 = 5;\n            v4 = 0;\n            v231 = function_40d500(v225, v226, 0, 0, v9);\n        }\n        // 0x4165c4\n        *v230 = 10;\n        int64_t v232 = function_40d500(v225, v226, 0, 0, v9); // 0x4165d1\n        int64_t v233 = function_40d500(v225, v226, (int32_t)v231, (int32_t)v232, (int64_t)&v14); // 0x4165f5\n        if (v233 == 0 || v231 == 0 || v232 == 0) {\n            // 0x416451\n            *(int32_t *)a6 = 12;\n            // 0x415c38\n            *(int64_t *)(v6 + 24) = 0;\n            // 0x415b8a\n            return *(int64_t *)(v6 + 24);\n        }\n        goto lab_0x41661f;\n    }\n  lab_0x416f3d_3:\n    // 0x416f3d\n    *v182 = v234;\n    free((int64_t *)v235);\n    free((int64_t *)*v182);\n    *(int32_t *)*v177 = 12;\n    v11 = v177;\n    goto lab_0x41677b_3;\n  lab_0x416c2e:;\n    int64_t v236 = *v163; // 0x416c2e\n    char * v237 = (char *)(v236 + 176); // 0x416c3a\n    *v237 = *v237 | 2;\n    int64_t v238 = v236 + 112; // 0x416c41\n    int64_t v239 = v236 + 128; // 0x416c45\n    char * v240 = (char *)(v6 + 168); // 0x416c52\n    *v240 = 6;\n    int64_t * v241 = (int64_t *)(v6 + 160); // 0x416c5a\n    *v241 = v18;\n    int64_t v242 = function_40d500(v238, v239, 0, 0, v154); // 0x416c62\n    *v182 = v242;\n    int64_t v243 = v5 + 32; // 0x416c73\n    v4 = v243;\n    int64_t v244 = v5; // 0x416c7d\n    if (v242 == 0) {\n        goto lab_0x416c1e;\n    } else {\n        while (*(int64_t *)v244 == 0) {\n            int64_t v245 = v244 + 8; // 0x416c85\n            v244 = v245;\n            if (v243 == v245) {\n                // 0x416c8e\n                free((int64_t *)v5);\n                goto lab_0x415b60;\n            }\n        }\n        // 0x416c9c\n        *v240 = 3;\n        *v241 = v5;\n        int64_t v246 = function_40d500(v238, v239, 0, 0, v154); // 0x416cbd\n        if (v246 == 0) {\n            goto lab_0x416c1e;\n        } else {\n            // 0x416ccb\n            *(char *)(v6 + 200) = 10;\n            int64_t v247 = function_40d500(v238, v239, (int32_t)v246, (int32_t)*v182, v158); // 0x416ce9\n            *v182 = v247;\n            if (v247 != 0) {\n                goto lab_0x415b60;\n            } else {\n                goto lab_0x416c1e;\n            }\n        }\n    }\n  lab_0x416bd8:\n    // 0x416bd8\n    function_40bef0(v18);\n    *(char *)(v6 + 168) = 3;\n    *(int64_t *)(v6 + 160) = v5;\n    int64_t v248 = *v163; // 0x416bfb\n    int64_t v249 = function_40d500(v248 + 112, v248 + 128, 0, 0, v154); // 0x416c0b\n    *v182 = v249;\n    if (v249 != 0) {\n        goto lab_0x415b60;\n    } else {\n        goto lab_0x416c1e;\n    }\n}\n"
        },
        {
            "funcName": "function_416fb0",
            "funcStartAddr": "416fb0",
            "funcEndAddr": "4170ee",
            "decompiledFuncCode": "int64_t function_416fb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t result = function_415ac0(a1, a2, a3, a4, a5, a6); // 0x416fda\n    int64_t v1; // 0x416fb0\n    if ((int32_t)v1 != 0 == result == 0) {\n        // 0x417085\n        return 0;\n    }\n    char * v2 = (char *)(a3 + 8); // 0x416ff8\n    char v3 = *v2; // 0x416ff8\n    if ((v3 & -9) == 2) {\n        // 0x417085\n        return result;\n    }\n    // 0x417006\n    int64_t v4; // bp-72, 0x416fb0\n    int64_t v5 = &v4;\n    int64_t v6 = result;\n    int64_t result2 = v6; // 0x417008\n    if (a5 != 0 == v3 == 9) {\n        return result2;\n    }\n    int64_t v7 = function_415ac0(a1, a2, a3, a4, a5, a6); // 0x417023\n    int32_t v8 = v7;\n    if (v7 == 0 == (v8 != 0)) {\n        // 0x4170ac\n        result2 = 0;\n        if (v6 == 0) {\n            return result2;\n        } else {\n            // 0x4170b1\n            function_40ad30(v6, 0x40bf40, 0);\n            result2 = 0;\n            return result2;\n        }\n    }\n    int64_t v9; // 0x417065\n    char v10; // 0x417077\n    while (v6 != 0 && v7 != 0) {\n        // 0x417040\n        v9 = function_40d500(a2 + 112, a2 + 128, (int32_t)v6, v8, v5);\n        if (v9 == 0) {\n            // 0x4170c5\n            function_40ad30(v7, 0x40bf40, 0);\n            function_40ad30(v6, 0x40bf40, 0);\n            *(int32_t *)a6 = 12;\n            result2 = 0;\n            return result2;\n        }\n        // 0x417074\n        v10 = *v2;\n        result2 = v9;\n        if ((v10 & -9) == 2) {\n            return result2;\n        }\n        v6 = v9;\n        result2 = v6;\n        if (a5 != 0 == v10 == 9) {\n            return result2;\n        }\n        // 0x41700f\n        v7 = function_415ac0(a1, a2, a3, a4, a5, a6);\n        v8 = v7;\n        if (v7 == 0 == (v8 != 0)) {\n            // 0x4170ac\n            result2 = 0;\n            if (v6 == 0) {\n                return result2;\n            } else {\n                // 0x4170b1\n                function_40ad30(v6, 0x40bf40, 0);\n                result2 = 0;\n                return result2;\n            }\n        }\n    }\n    int64_t v11 = v6 == 0 ? v7 : v6; // 0x4170a3\n    char v12 = *v2; // 0x416ff8\n    result2 = v11;\n    while ((v12 & -9) != 2) {\n        // 0x417006\n        v6 = v11;\n        result2 = v6;\n        if (a5 != 0 == v12 == 9) {\n            return result2;\n        }\n        // 0x41700f\n        v7 = function_415ac0(a1, a2, a3, a4, a5, a6);\n        v8 = v7;\n        if (v7 == 0 == (v8 != 0)) {\n            // 0x4170ac\n            result2 = 0;\n            if (v6 == 0) {\n                return result2;\n            } else {\n                // 0x4170b1\n                function_40ad30(v6, 0x40bf40, 0);\n                result2 = 0;\n                return result2;\n            }\n        }\n        while (v6 != 0 && v7 != 0) {\n            // 0x417040\n            v9 = function_40d500(a2 + 112, a2 + 128, (int32_t)v6, v8, v5);\n            if (v9 == 0) {\n                // 0x4170c5\n                function_40ad30(v7, 0x40bf40, 0);\n                function_40ad30(v6, 0x40bf40, 0);\n                *(int32_t *)a6 = 12;\n                result2 = 0;\n                return result2;\n            }\n            // 0x417074\n            v10 = *v2;\n            result2 = v9;\n            if ((v10 & -9) == 2) {\n                return result2;\n            }\n            v6 = v9;\n            result2 = v6;\n            if (a5 != 0 == v10 == 9) {\n                return result2;\n            }\n            // 0x41700f\n            v7 = function_415ac0(a1, a2, a3, a4, a5, a6);\n            v8 = v7;\n            if (v7 == 0 == (v8 != 0)) {\n                // 0x4170ac\n                result2 = 0;\n                if (v6 == 0) {\n                    return result2;\n                } else {\n                    // 0x4170b1\n                    function_40ad30(v6, 0x40bf40, 0);\n                    result2 = 0;\n                    return result2;\n                }\n            }\n        }\n        // 0x4170a0\n        v11 = v6 == 0 ? v7 : v6;\n        v12 = *v2;\n        result2 = v11;\n    }\n  lab_0x417085_2:\n    // 0x417085\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4170f0",
            "funcStartAddr": "4170f0",
            "funcEndAddr": "417241",
            "decompiledFuncCode": "int64_t function_4170f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a2 + 168); // 0x417112\n    int64_t v2 = function_416fb0(a1, a2, a3, a4, a5, a6); // 0x417122\n    int64_t v3; // 0x4170f0\n    if ((int32_t)v3 != 0 && v2 == 0) {\n        // 0x417141\n        return 0;\n    }\n    char * v4 = (char *)(a3 + 8); // 0x4171d9\n    int64_t * v5 = (int64_t *)(a1 + 72);\n    int64_t v6 = a2 + 112;\n    int64_t v7; // bp-72, 0x4170f0\n    int64_t v8 = &v7;\n    int64_t v9 = v2;\n    int64_t result = v9; // 0x4171dd\n    while (*v4 == 10) {\n        // 0x4171e3\n        *v5 = (0x100000000 * function_415350((int64_t *)a3, a1, a4 | 0x800000) >> 32) + *v5;\n        char v10 = *v4; // 0x4171ff\n        int64_t v11 = 0; // 0x41720b\n        if ((v10 & -9) != 2 && a5 != 0 != (v10 == 9)) {\n            // 0x417167\n            v11 = function_416fb0(a1, a2, a3, a4, a5, a6);\n            int64_t v12; // 0x4170f0\n            if (v11 == 0 == (*(int32_t *)&v12 != 0)) {\n                // 0x417224\n                result = 0;\n                if (v9 == 0) {\n                    return result;\n                } else {\n                    // 0x41722d\n                    function_40ad30(v9, 0x40bf40, 0);\n                    result = 0;\n                    return result;\n                }\n            }\n        }\n        int64_t v13 = function_40d500(v6, a2 + 128, (int32_t)v9, (int32_t)v11, v8); // 0x4171cc\n        if (v13 == 0) {\n            // 0x417218\n            *(int32_t *)a6 = 12;\n            result = 0;\n            return result;\n        }\n        v9 = v13;\n        result = v9;\n    }\n  lab_0x417141:\n    // 0x417141\n    return result;\n}\n"
        },
        {
            "funcName": "function_417250",
            "funcStartAddr": "417250",
            "funcEndAddr": "417ffa",
            "decompiledFuncCode": "int64_t function_417250(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x417250\n    int128_t v1; // 0x417250\n    int128_t v2 = v1;\n    int64_t v3; // 0x417250\n    int64_t v4 = v3;\n    char * v5 = (char *)(a1 + 56); // 0x41726d\n    *v5 = *v5 & -112;\n    int64_t v6 = a1 + 8;\n    int64_t * v7 = (int64_t *)v6; // 0x417271\n    int32_t result = 0; // bp-268, 0x417279\n    *(int64_t *)(a1 + 24) = a4;\n    int64_t * v8 = (int64_t *)(a1 + 16); // 0x417288\n    *v8 = 0;\n    int64_t * v9 = (int64_t *)(a1 + 48); // 0x417290\n    *v9 = 0;\n    int64_t v10 = v6; // 0x417298\n    int64_t v11 = a1; // 0x417298\n    if (*v7 < 232) {\n        int64_t * v12 = (int64_t *)a1; // 0x417dd8\n        int64_t * mem = realloc(v12, 232); // 0x417dd8\n        if (mem == NULL) {\n            // 0x417b9b\n            return 12;\n        }\n        // 0x417de9\n        v11 = (int64_t)mem;\n        *v7 = 232;\n        *v12 = v11;\n        v10 = v11 + 8;\n    }\n    // 0x41729e\n    *v8 = 232;\n    int64_t v13 = v10 & -8; // 0x4172af\n    int64_t * v14 = (int64_t *)v11; // 0x4172b3\n    *v14 = 0;\n    *(int64_t *)(v11 + 224) = 0;\n    __asm_rep_stosq_memset((char *)v13, 0, (v11 + 232 - v13) / 8 % 0x20000000);\n    *(int32_t *)(v11 + 128) = 15;\n    int64_t v15; // 0x417250\n    int64_t v16; // 0x417250\n    uint64_t v17; // 0x417250\n    int64_t v18; // 0x417250\n    int64_t v19; // 0x417250\n    int64_t v20; // 0x4172f1\n    int64_t * v21; // 0x41733d\n    int32_t * v22; // 0x41734b\n    char * v23; // 0x4173a8\n    if (a3 < 0x555555555555555) {\n        // 0x4172f1\n        v20 = a3 + 1;\n        *(int64_t *)v10 = v20;\n        *v14 = (int64_t)malloc(16 * (int32_t)v20);\n        int64_t size = 1; // 0x417311\n        int64_t v24 = 0; // 0x417311\n        if (a3 != 0) {\n            int64_t v25 = 2; // 0x417320\n            int64_t v26 = v25; // 0x417326\n            while (v25 <= a3) {\n                // 0x417320\n                v25 = 2 * v26;\n                v26 = v25;\n            }\n            // 0x417328\n            size = v25;\n            v24 = v25 - 1;\n        }\n        int64_t * mem2 = calloc(24, (int32_t)size); // 0x417331\n        *(int64_t *)(v11 + 136) = v24;\n        v21 = (int64_t *)(v11 + 64);\n        *v21 = (int64_t)mem2;\n        int32_t v27 = __ctype_get_mb_cur_max(); // 0x417341\n        v22 = (int32_t *)(v11 + 180);\n        *v22 = v27;\n        char * v28 = nl_langinfo(14); // 0x417351\n        if ((*v28 & -33) == 85) {\n            int64_t v29 = (int64_t)v28; // 0x417351\n            if ((*(char *)(v29 + 1) & -33) == 84) {\n                // 0x41736d\n                if ((*(char *)(v29 + 2) & -33) == 70) {\n                    int64_t v30 = v29 + 3; // 0x41737b\n                    bool v31; // 0x417250\n                    int64_t v32 = v31 ? -1 : 1; // 0x417391\n                    int64_t v33 = (int64_t)&g13; // 0x417250\n                    int64_t v34 = v30 + (int64_t)(*(char *)v30 == 45); // 0x417250\n                    int64_t v35 = 2; // 0x417391\n                    unsigned char v36 = *(char *)v34; // 0x417391\n                    char v37 = *(char *)v33; // 0x417391\n                    char v38 = v37; // 0x417391\n                    bool v39 = false; // 0x417391\n                    while (v36 == v37) {\n                        v35--;\n                        v33 += v32;\n                        v34 += v32;\n                        v38 = v36;\n                        v39 = true;\n                        if (v35 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v36 = *(char *)v34;\n                        v37 = *(char *)v33;\n                        v38 = v37;\n                        v39 = false;\n                    }\n                    unsigned char v40 = v38;\n                    if ((v36 >= v40 && !v39) == v36 < v40) {\n                        char * v41 = (char *)(v11 + 176); // 0x41739c\n                        *v41 = *v41 | 4;\n                    }\n                }\n            }\n        }\n        // 0x4173a8\n        v23 = (char *)(v11 + 176);\n        char v42 = *v23; // 0x4173a8\n        *v23 = v42 & -9;\n        if (*v22 < 2) {\n            goto lab_0x4173d3;\n        } else {\n            if ((v42 & 4) == 0) {\n                int64_t * mem3 = calloc(32, 1); // 0x417c4a\n                int64_t * v43 = (int64_t *)(v11 + 120); // 0x417c4f\n                *v43 = (int64_t)mem3;\n                int64_t v44 = 0; // 0x417c56\n                if (mem3 == NULL) {\n                    // 0x417c30\n                    result = 12;\n                    goto lab_0x417c0e;\n                } else {\n                    while (true) {\n                        int64_t v45 = v44;\n                        v16 = 0;\n                        v18 = 8 * v45;\n                        while (true) {\n                          lab_0x417c86_2:\n                            // 0x417c86\n                            v19 = v18;\n                            v17 = v16;\n                            int32_t wc = v19; // 0x417c86\n                            int32_t v46 = btowc(wc); // 0x417c8f\n                            int64_t v47 = v19 & 0xffffff80; // 0x417c9d\n                            if (v46 == -1) {\n                                if (v47 != 0) {\n                                    goto lab_0x417c7b;\n                                } else {\n                                    // 0x417c74\n                                    *v23 = *v23 | 8;\n                                    goto lab_0x417c7b;\n                                }\n                            } else {\n                                int64_t * v48 = (int64_t *)(*v43 + v45); // 0x417cb5\n                                *v48 = *v48 | 1 << v17 % 64;\n                                if (v47 != 0) {\n                                    goto lab_0x417c7b;\n                                } else {\n                                    if (v46 != wc) {\n                                        // 0x417c74\n                                        *v23 = *v23 | 8;\n                                        goto lab_0x417c7b;\n                                    } else {\n                                        int64_t v49 = v17 + 1; // 0x417cc0\n                                        v15 = v49;\n                                        if ((int32_t)v49 == 64) {\n                                            // break -> 0x417cd0\n                                            break;\n                                        }\n                                        goto lab_0x417c86;\n                                    }\n                                }\n                            }\n                        }\n                      lab_0x417cd0:\n                        // 0x417cd0\n                        v44 = v45 + 8;\n                        if (v45 == 24) {\n                            // break -> 0x4173d3\n                            break;\n                        }\n                    }\n                    goto lab_0x4173d3;\n                }\n            } else {\n                // 0x4173cb\n                *(int64_t *)(v11 + 120) = (int64_t)&g20;\n                goto lab_0x4173d3;\n            }\n        }\n    } else {\n        // 0x417c30\n        result = 12;\n        goto lab_0x417c0e;\n    }\n  lab_0x417c7b:;\n    int64_t v50 = v17 + 1; // 0x417c7b\n    v15 = v50;\n    if ((int32_t)v50 == 64) {\n        // break -> 0x417cd0\n        goto lab_0x417cd0;\n    }\n    goto lab_0x417c86;\n  lab_0x417c86:\n    // 0x417c86\n    v16 = v15 & 0xffffffff;\n    v18 = v19 + 1 & 0xffffffff;\n    goto lab_0x417c86_2;\n  lab_0x417e90_2:\n    // 0x417e90\n    result = 0;\n    int64_t v51; // 0x417250\n    int64_t v52 = v51; // 0x417e98\n    int64_t v53 = v51; // 0x417e98\n    goto lab_0x417599;\n  lab_0x417780:;\n    // 0x417780\n    int64_t * v83; // 0x417250\n    int64_t v91 = *v83; // 0x417780\n    int64_t v92 = function_40ad30(v91, 0x40d8b0, (int32_t)a1); // 0x41778c\n    int64_t v93 = v92; // 0x417793\n    int64_t v94 = v91; // 0x417793\n    int64_t v95; // 0x417250\n    int64_t v73; // 0x417250\n    int64_t v96; // bp-232, 0x417250\n    int64_t v68; // bp-248, 0x417250\n    int64_t * v80; // 0x4176d7\n    int64_t * v97; // 0x417250\n    if ((int32_t)v92 != 0) {\n        goto lab_0x4179a8_2;\n    } else {\n        int64_t v98 = *v83; // 0x417799\n        int64_t v99 = function_40ad30(v98, 0x40fde0, (int32_t)v73); // 0x4177a5\n        v93 = v99;\n        v94 = v98;\n        if ((int32_t)v99 != 0) {\n            goto lab_0x4179a8_2;\n        } else {\n            // 0x4177b2\n            function_40cd70(*v83, 0x40cac0, v73);\n            int64_t v100 = *v83; // 0x4177c3\n            int64_t v101 = function_40cd70(v100, 0x40c5c0, v73); // 0x4177cf\n            v93 = v101;\n            v94 = v100;\n            if ((int32_t)v101 != 0) {\n                goto lab_0x4179a8_2;\n            } else {\n                // 0x4177e8\n                v97 = (int64_t *)(v73 + 16);\n                int64_t v102 = 0; // 0x417250\n                int64_t v103 = 0; // 0x417250\n                int64_t v104; // 0x417250\n                while (true) {\n                    int64_t v105 = *v97; // 0x4177e8\n                    int64_t v106 = v105; // 0x4177ec\n                    int64_t v107 = v102; // 0x4177ec\n                    int64_t v108 = v103; // 0x4177ec\n                    int64_t v109 = v103; // 0x4177ec\n                    int64_t v110 = v102; // 0x4177ec\n                    v104 = v103;\n                    int64_t v111; // 0x417250\n                    if (v105 == v103) {\n                      lab_0x41780c:\n                        // 0x41780c\n                        v111 = v109;\n                        if ((char)v110 == 0) {\n                            // break -> 0x4178a0\n                            break;\n                        }\n                      lab_0x417815:\n                        // 0x417815\n                        v106 = v111;\n                        v107 = 0;\n                        v108 = 0;\n                    }\n                    int64_t v112 = v107;\n                    int64_t v113 = v106; // 0x417806\n                    int64_t v114 = v108;\n                    int64_t v115; // 0x417802\n                    while (*(int64_t *)(*v80 + 8 + 24 * v114) != 0) {\n                        // 0x417802\n                        v115 = v114 + 1;\n                        v109 = v113;\n                        v110 = v112;\n                        v104 = v115;\n                        if (v113 == v115) {\n                            goto lab_0x41780c;\n                        }\n                        v114 = v115;\n                    }\n                    int64_t v116 = function_40cfa0((int128_t *)&v68, v73, v114, 1); // 0x417833\n                    if ((int32_t)v116 != 0) {\n                        // 0x4179a8\n                        v93 = v116;\n                        v94 = &v68;\n                        goto lab_0x4179a8_2;\n                    }\n                    int64_t v117 = v114 + 1; // 0x417849\n                    v102 = v112;\n                    v103 = v117;\n                    while (*(int64_t *)((0x1800000000 * v114 >> 32) + 8 + *v80) == 0) {\n                        // 0x417855\n                        free((int64_t *)v96);\n                        int64_t v118 = *v97; // 0x417865\n                        v111 = v118;\n                        if (v118 == v117) {\n                            goto lab_0x417815;\n                        }\n                        v112 = 1;\n                        v113 = v118;\n                        v114 = v117;\n                        while (*(int64_t *)(*v80 + 8 + 24 * v114) != 0) {\n                            // 0x417802\n                            v115 = v114 + 1;\n                            v109 = v113;\n                            v110 = v112;\n                            v104 = v115;\n                            if (v113 == v115) {\n                                goto lab_0x41780c;\n                            }\n                            v114 = v115;\n                        }\n                        // 0x417820\n                        v116 = function_40cfa0((int128_t *)&v68, v73, v114, 1);\n                        if ((int32_t)v116 != 0) {\n                            // 0x4179a8\n                            v93 = v116;\n                            v94 = &v68;\n                            goto lab_0x4179a8_2;\n                        }\n                        // 0x417840\n                        v117 = v114 + 1;\n                        v102 = v112;\n                        v103 = v117;\n                    }\n                }\n                // 0x4178a0\n                v95 = v104;\n                if ((*v5 & 16) != 0) {\n                    goto lab_0x4179b8;\n                } else {\n                    // 0x4178aa\n                    if (*v9 == 0) {\n                        goto lab_0x4179b8;\n                    } else {\n                        // 0x4178b5\n                        if (*(char *)(v73 + 176) % 2 == 0) {\n                            goto lab_0x4179b8;\n                        } else {\n                            goto lab_0x4178c3;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4179a8_2:\n    // 0x4179a8\n    result = v93;\n    int64_t v67 = v94; // 0x4179b0\n    goto lab_0x417bb8;\n  lab_0x417a48:;\n    // 0x417a48\n    int64_t v140; // 0x417250\n    int64_t v141 = v140 + 1; // 0x417a48\n    uint64_t v78; // 0x417250\n    if (v78 <= v141) {\n        // break -> 0x417af0\n        goto lab_0x417af0;\n    }\n    int64_t v142 = v141; // 0x417250\n    goto lab_0x417a55_2;\n  lab_0x4173d3:;\n    // 0x4173d3\n    int64_t v129; // bp-208, 0x417250\n    int64_t v124; // bp-216, 0x417250\n    int64_t * v158; // 0x4173f4\n    int64_t v128; // 0x4173f4\n    if (*v14 == 0) {\n        // 0x417c30\n        result = 12;\n        goto lab_0x417c0e;\n    } else {\n        // 0x4173dd\n        if (*v21 == 0) {\n            // 0x417c30\n            result = 12;\n            goto lab_0x417c0e;\n        } else {\n            // 0x4173e8\n            v158 = (int64_t *)(a1 + 40);\n            v128 = *v158;\n            result = 0;\n            __asm_rep_stosq_memset((char *)&v129, 0, 18);\n            v124 = a2;\n            if (a3 != 0) {\n                int64_t v159 = &v124; // 0x417875\n                int64_t v160 = function_40b170(v159, v20); // 0x41787a\n                v93 = v160;\n                v94 = v159;\n                if ((int32_t)v160 != 0) {\n                    goto lab_0x4179a8_2;\n                } else {\n                    // 0x417887\n                    goto lab_0x417492;\n                }\n            } else {\n                goto lab_0x417492;\n            }\n        }\n    }\n  lab_0x417c0e:\n    // 0x417c0e\n    function_40fe70(v11);\n    *(int64_t *)a1 = 0;\n    *v7 = 0;\n    // 0x417b9b\n    return result;\n  lab_0x417492:;\n    int64_t v125 = a4 & 0x400000; // 0x417417\n    int32_t v126 = *v22;\n    int64_t v127 = (v128 | v125) == 0 ? a2 : v129;\n    v129 = v127;\n    if (v125 == 0) {\n        if (v126 > 1) {\n            int64_t v130 = &v124;\n            function_40b560(v130);\n            result = 0;\n            v52 = v130;\n            v53 = v130;\n        } else {\n            if ((v128 || v125) != 0) {\n                int64_t v131 = a3 - v4; // 0x417526\n                int64_t v132 = v131 == 0 | v131 < 0 != ((v131 ^ a3) & (v4 ^ a3)) < 0 ? a3 : v4; // 0x417536\n                if (v132 > v3) {\n                    unsigned char v133 = *(char *)(2 * v3 + v124); // 0x41756d\n                    *(char *)(v127 + v3) = *(char *)(v128 + (int64_t)v133);\n                    int64_t v134 = v3 + 1; // 0x417578\n                    int64_t v135 = v134; // 0x41757f\n                    if (v132 != v134) {\n                        unsigned char v136 = *(char *)(v135 + v3 + v124); // 0x41756d\n                        *(char *)(v129 + v135) = *(char *)(v128 + (int64_t)v136);\n                        int64_t v137 = v135 + 1; // 0x417578\n                        v135 = v137;\n                        while (v132 != v137) {\n                            // 0x417550\n                            v136 = *(char *)(v135 + v3 + v124);\n                            *(char *)(v129 + v135) = *(char *)(v128 + (int64_t)v136);\n                            v137 = v135 + 1;\n                            v135 = v137;\n                        }\n                    }\n                }\n            }\n            // 0x417581\n            result = 0;\n            v52 = &v124;\n            v53 = v126;\n        }\n        goto lab_0x417599;\n    } else {\n        // 0x4174a8\n        v51 = &v124;\n        if (v126 < 2) {\n            // 0x417db8\n            function_40b4e0(v51);\n            result = 0;\n            v52 = v51;\n            v53 = v51;\n            goto lab_0x417599;\n        } else {\n            int64_t v138 = function_40b710(v51); // 0x4174b6\n            v93 = v138;\n            v94 = v51;\n            // 0x4174b1\n            while ((int32_t)v138 == 0) {\n                if (v3 >= a3) {\n                    goto lab_0x417e90_2;\n                }\n                // 0x4174d1\n                if (v4 > v3 + (int64_t)*v22) {\n                    goto lab_0x417e90_2;\n                }\n                int64_t v139 = function_40b170(v51, 2 * v4); // 0x4174f9\n                v93 = v139;\n                v94 = v51;\n                if ((int32_t)v139 != 0) {\n                    // break -> 0x4179a8\n                    break;\n                }\n                v138 = function_40b710(v51);\n                v93 = v138;\n                v94 = v51;\n            }\n            goto lab_0x4179a8_2;\n        }\n    }\n  lab_0x417bb8:;\n    int64_t * v119 = (int64_t *)(v67 + 112); // 0x417bb8\n    int64_t v120 = *v119; // 0x417bb8\n    if (v120 != 0) {\n        int64_t * v121 = (int64_t *)v120; // 0x417bc8\n        int64_t v122 = *v121; // 0x417bc8\n        free(v121);\n        while (v122 != 0) {\n            // 0x417bc8\n            v121 = (int64_t *)v122;\n            v122 = *v121;\n            free(v121);\n        }\n    }\n    // 0x417bd8\n    *v119 = 0;\n    int64_t * v123 = (int64_t *)(v67 + 32); // 0x417be0\n    *(int32_t *)(v67 + 128) = 15;\n    *(int64_t *)(v67 + 104) = 0;\n    free((int64_t *)*v123);\n    *v123 = 0;\n    function_40c4c0(&v124);\n    goto lab_0x417c0e;\n  lab_0x417599:;\n    int64_t v54 = v53;\n    int64_t v55 = v52;\n    *v9 = 0;\n    *(int64_t *)(v54 + 216) = a4;\n    int32_t v56; // bp-264, 0x417250\n    function_415350((int64_t *)&v56, v55, a4 | 0x800000);\n    int64_t v57 = &v56; // 0x4175d1\n    int64_t v58 = function_4170f0(v55, a1, v57, a4, 0, (int64_t)&result); // 0x4175e8\n    int64_t v59; // 0x417250\n    int64_t v60; // 0x417250\n    int64_t v61; // 0x417250\n    int64_t v62; // 0x417250\n    int64_t v63; // 0x417e39\n    int64_t v64; // 0x417e47\n    int64_t v65; // 0x417250\n    int64_t v66; // 0x417e62\n    if (result != 0) {\n        if (v58 == 0) {\n            // 0x417fb2\n            *(int64_t *)(v11 + 104) = 0;\n            v67 = v55;\n            goto lab_0x417bb8;\n        } else {\n            // 0x417e39\n            v63 = v54 + 112;\n            v64 = v54 + 128;\n            v65 = &v68;\n            v66 = function_40d500(v63, v64, 0, 0, v65);\n            goto lab_0x417637;\n        }\n    } else {\n        int64_t v69 = v54 + 112; // 0x4175f9\n        int64_t v70 = v54 + 128; // 0x417607\n        int64_t v71 = &v68;\n        int64_t v72 = function_40d500(v69, v70, 0, 0, v71); // 0x417622\n        v65 = v71;\n        v64 = v70;\n        v66 = v72;\n        v63 = v69;\n        v62 = 2;\n        v61 = v72;\n        v60 = v69;\n        v59 = v72;\n        if (v58 == 0) {\n            goto lab_0x417656;\n        } else {\n            goto lab_0x417637;\n        }\n    }\n  lab_0x417656:\n    // 0x417656\n    v73 = v60;\n    int64_t * v74; // 0x417250\n    int64_t * v75; // 0x417672\n    int64_t * v76; // 0x41770d\n    int64_t * v77; // 0x417250\n    if (v61 == 0 || v59 == 0) {\n        // 0x417e78\n        result = 12;\n        *(int64_t *)(v11 + 104) = 0;\n        v67 = v73;\n        goto lab_0x417bb8;\n    } else {\n        // 0x41766e\n        v78 = v62;\n        v75 = (int64_t *)(v11 + 104);\n        *v75 = v59;\n        int32_t v79 = (int32_t)*(int64_t *)(v73 + 8);\n        int32_t size2 = 8 * v79; // 0x41768f\n        int64_t * mem4 = malloc(size2); // 0x41768f\n        *(int64_t *)(v73 + 24) = (int64_t)mem4;\n        int64_t * mem5 = malloc(size2); // 0x4176a3\n        *(int64_t *)(v73 + 32) = (int64_t)mem5;\n        int32_t size3 = 24 * v79; // 0x4176b4\n        int64_t * mem6 = malloc(size3); // 0x4176b4\n        *(int64_t *)(v73 + 40) = (int64_t)mem6;\n        int64_t * mem7 = malloc(size3); // 0x4176c5\n        v80 = (int64_t *)(v73 + 48);\n        *v80 = (int64_t)mem7;\n        if (mem4 == NULL | mem5 == NULL || mem6 == NULL || mem7 == NULL) {\n            // 0x417bb0\n            result = 12;\n            v67 = v73;\n            goto lab_0x417bb8;\n        } else {\n            int64_t v81 = *v9; // 0x4176fc\n            int64_t * mem8 = malloc(8 * (int32_t)v81); // 0x417708\n            int64_t v82 = (int64_t)mem8; // 0x417708\n            v76 = (int64_t *)(v73 + 224);\n            *v76 = v82;\n            if (mem8 == NULL) {\n                // 0x4176fc\n                v83 = (int64_t *)(v73 + 104);\n                goto lab_0x417780;\n            } else {\n                // 0x417719\n                if (v81 != 0) {\n                    int64_t v84 = 0;\n                    *(int64_t *)(8 * v84 + v82) = v84;\n                    int64_t v85 = v84 + 1; // 0x417724\n                    while (v85 != v81) {\n                        // 0x417720\n                        v84 = v85;\n                        *(int64_t *)(8 * v84 + v82) = v84;\n                        v85 = v84 + 1;\n                    }\n                }\n                // 0x41772d\n                v77 = (int64_t *)(v73 + 104);\n                function_40cd70(*v77, 0x40ca30, v73);\n                int64_t v86 = *v9; // 0x41773e\n                int64_t v87 = *v76;\n                v74 = (int64_t *)v87;\n                if (v86 == 0) {\n                    goto lab_0x41776f;\n                } else {\n                    // 0x41774b\n                    v83 = v77;\n                    if (*v74 == 0) {\n                        int64_t v88 = 1; // 0x417766\n                        while (v88 != v86) {\n                            int64_t v89 = v88; // 0x417764\n                            v83 = v77;\n                            if (*(int64_t *)(8 * v88 + v87) != v88) {\n                                goto lab_0x417780;\n                            }\n                            v88 = v89 + 1;\n                        }\n                        goto lab_0x41776f;\n                    } else {\n                        goto lab_0x417780;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x417637:;\n    int64_t v90 = function_40d500(v63, v64, (int32_t)v58, (int32_t)v66, v65); // 0x41764b\n    v62 = 16;\n    v61 = v66;\n    v60 = v63;\n    v59 = v90;\n    goto lab_0x417656;\n  lab_0x41776f:\n    // 0x41776f\n    free(v74);\n    *v76 = 0;\n    v83 = v77;\n    goto lab_0x417780;\n  lab_0x4179b8:\n    // 0x4179b8\n    if (*(int64_t *)(v73 + 152) != 0) {\n        goto lab_0x4178c3;\n    } else {\n        goto lab_0x4179c6;\n    }\n  lab_0x4178c3:;\n    int64_t size4 = 24 * v95; // 0x4178c7\n    int64_t * mem9 = malloc((int32_t)size4); // 0x4178cb\n    int64_t v161 = (int64_t)mem9; // 0x4178cb\n    int64_t * v162 = (int64_t *)(v73 + 56); // 0x4178d0\n    *v162 = v161;\n    if (mem9 == NULL) {\n        // 0x417f90\n        result = 12;\n        v67 = size4;\n        goto lab_0x417bb8;\n    } else {\n        if (v95 != 0) {\n            int128_t v163 = __asm_pxor(v2, v2); // 0x4178f8\n            __asm_movups(*(int128_t *)mem9, v163);\n            *(int64_t *)(v161 + 16) = 0;\n            uint64_t v164 = *v97; // 0x41790f\n            int64_t v165 = 1; // 0x417916\n            int128_t v166 = v163; // 0x417916\n            int64_t v167 = v164; // 0x417916\n            if (v164 > 1) {\n                int128_t v168 = v166;\n                int128_t v169 = __asm_pxor(v168, v168); // 0x4178f8\n                int64_t v170 = v165 + 1; // 0x4178fc\n                int64_t v171 = *v162 + 24 * v165; // 0x417900\n                __asm_movups(*(int128_t *)v171, v169);\n                *(int64_t *)(v171 + 16) = 0;\n                uint64_t v172 = *v97; // 0x41790f\n                v165 = v170;\n                v167 = v172;\n                while (v172 > v170) {\n                    // 0x4178f0\n                    v168 = v169;\n                    v169 = __asm_pxor(v168, v168);\n                    v170 = v165 + 1;\n                    v171 = *v162 + 24 * v165;\n                    __asm_movups(*(int128_t *)v171, v169);\n                    *(int64_t *)(v171 + 16) = 0;\n                    v172 = *v97;\n                    v165 = v170;\n                    v167 = v172;\n                }\n            }\n            int64_t v173 = v167;\n            if (v173 != 0) {\n                int64_t v174 = *v80; // 0x41792a\n                int64_t v175 = 0;\n                int64_t v176 = 24 * v175; // 0x41793a\n                int64_t v177 = v176 + v174; // 0x417947\n                int64_t v178 = *(int64_t *)(v177 + 8); // 0x41794a\n                int64_t v179 = v173; // 0x417953\n                int64_t v180 = v174; // 0x417953\n                int64_t v181; // 0x417250\n                int64_t v182; // 0x41798e\n                int64_t v183; // 0x417997\n                int64_t v184; // 0x417960\n                int64_t v185; // 0x417969\n                if (v178 >= 0 == (v178 != 0)) {\n                    // 0x41797d\n                    v181 = *(int64_t *)(v177 + 16);\n                    v185 = 0;\n                    v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                    v183 = function_40b210(v182, v175);\n                    v93 = 12;\n                    v94 = v182;\n                    if ((char)v183 == 0) {\n                        goto lab_0x4179a8_2;\n                    }\n                    // 0x417960\n                    v184 = *v80;\n                    v185++;\n                    v181 = 0x100000000 * v181 >> 32;\n                    while (v185 < *(int64_t *)(v176 + 8 + v184)) {\n                        // 0x41797d\n                        v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                        v183 = function_40b210(v182, v175);\n                        v93 = 12;\n                        v94 = v182;\n                        if ((char)v183 == 0) {\n                            goto lab_0x4179a8_2;\n                        }\n                        // 0x417960\n                        v184 = *v80;\n                        v185++;\n                        v181 = 0x100000000 * v181 >> 32;\n                    }\n                    // 0x417e10\n                    v179 = *v97;\n                    v180 = v184;\n                }\n                // 0x417e10\n                v174 = v180;\n                int64_t v186 = v179; // 0x417e1b\n                int64_t v187 = v175 + 1; // 0x417e10\n                while (v186 > v187) {\n                    // 0x41792e\n                    v175 = v187;\n                    v176 = 24 * v175;\n                    v177 = v176 + v174;\n                    v178 = *(int64_t *)(v177 + 8);\n                    v179 = v186;\n                    v180 = v174;\n                    if (v178 >= 0 == (v178 != 0)) {\n                        // 0x41797d\n                        v181 = *(int64_t *)(v177 + 16);\n                        v185 = 0;\n                        v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                        v183 = function_40b210(v182, v175);\n                        v93 = 12;\n                        v94 = v182;\n                        if ((char)v183 == 0) {\n                            goto lab_0x4179a8_2;\n                        }\n                        // 0x417960\n                        v184 = *v80;\n                        v185++;\n                        v181 = 0x100000000 * v181 >> 32;\n                        while (v185 < *(int64_t *)(v176 + 8 + v184)) {\n                            // 0x41797d\n                            v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                            v183 = function_40b210(v182, v175);\n                            v93 = 12;\n                            v94 = v182;\n                            if ((char)v183 == 0) {\n                                goto lab_0x4179a8_2;\n                            }\n                            // 0x417960\n                            v184 = *v80;\n                            v185++;\n                            v181 = 0x100000000 * v181 >> 32;\n                        }\n                        // 0x417e10\n                        v179 = *v97;\n                        v180 = v184;\n                    }\n                    // 0x417e10\n                    v174 = v180;\n                    v186 = v179;\n                    v187 = v175 + 1;\n                }\n            }\n        }\n        goto lab_0x4179c6;\n    }\n  lab_0x4179c6:\n    // 0x4179c6\n    result = 0;\n    unsigned char result2 = *v23 / 4 & (char)(v125 == 0); // 0x4179e0\n    if (result2 != 0) {\n        // 0x417d00\n        if (*v158 == 0) {\n            // 0x417d0b\n            if (*(int64_t *)(v11 + 16) != 0) {\n                // 0x417d18\n                return result2;\n            }\n            int64_t v188 = *(int64_t *)(v11 + 152); // 0x417fc6\n            *v22 = 1;\n            *v23 = 2 * (char)(v188 >= 0 == (v188 != 0)) | *v23 & -7;\n        }\n    }\n    int64_t v155 = &v68; // 0x4179ec\n    int64_t v189 = *(int64_t *)(*(int64_t *)(*v75 + 24) + 56); // 0x4179f3\n    *(int64_t *)(v11 + 144) = v189;\n    int64_t * v153 = (int64_t *)(v11 + 48); // 0x417a02\n    int64_t v190 = function_40d930(v155, *v153 + 24 * v189); // 0x417a0a\n    int64_t v191 = v190 & 0xffffffff; // 0x417a0f\n    int32_t v192 = v190; // 0x417a12\n    v56 = v192;\n    int64_t v154 = v155; // 0x417a18\n    int64_t v156 = v191; // 0x417a18\n    if (v192 != 0) {\n        goto lab_0x417b2f;\n    } else {\n        // 0x417a1e\n        if (*(int64_t *)(v11 + 152) >= 1) {\n            int64_t v152 = &v96;\n            v142 = 0;\n            while (true) {\n              lab_0x417a55_2:\n                // 0x417a55\n                v140 = v142;\n                int64_t v143 = *v14; // 0x417a5a\n                int64_t v144 = *(int64_t *)(v96 + 8 * v140); // 0x417a5d\n                int64_t v145 = 16 * v144 + v143; // 0x417a68\n                if (*(char *)(v145 + 8) == 4) {\n                    int64_t * v146 = (int64_t *)v145;\n                    int64_t v147 = 0;\n                    int64_t v148 = 16 * *(int64_t *)(8 * v147 + v96) + v143; // 0x417a89\n                    int64_t v149; // 0x417a9a\n                    int64_t v150; // 0x417ab0\n                    int64_t v151; // 0x417acf\n                    if (*(char *)(v148 + 8) == 9) {\n                        // 0x417a92\n                        if (*(int64_t *)v148 == *v146) {\n                            // 0x417a9a\n                            v149 = *(int64_t *)(v11 + 40);\n                            v150 = *(int64_t *)*(int64_t *)(24 * v144 + 16 + v149);\n                            if (function_40c890(v78, v152, v150) != 0) {\n                                goto lab_0x417a48;\n                            } else {\n                                // 0x417ac0\n                                v151 = function_40cdd0(&v68, (int128_t *)(*v153 + 24 * v150));\n                                if ((int32_t)v151 != 0) {\n                                    // 0x417f50\n                                    v154 = v155;\n                                    v156 = v151 & 0xffffffff;\n                                    goto lab_0x417b2f;\n                                } else {\n                                    // 0x417a55\n                                    v142 = 1;\n                                    goto lab_0x417a55_2;\n                                }\n                            }\n                        }\n                    }\n                    int64_t v157 = v147 + 1; // 0x417a78\n                    while (v78 != v157) {\n                        // 0x417a81\n                        v147 = v157;\n                        v148 = 16 * *(int64_t *)(8 * v147 + v96) + v143;\n                        if (*(char *)(v148 + 8) == 9) {\n                            // 0x417a92\n                            if (*(int64_t *)v148 == *v146) {\n                                // 0x417a9a\n                                v149 = *(int64_t *)(v11 + 40);\n                                v150 = *(int64_t *)*(int64_t *)(24 * v144 + 16 + v149);\n                                if (function_40c890(v78, v152, v150) != 0) {\n                                    goto lab_0x417a48;\n                                } else {\n                                    // 0x417ac0\n                                    v151 = function_40cdd0(&v68, (int128_t *)(*v153 + 24 * v150));\n                                    if ((int32_t)v151 != 0) {\n                                        // 0x417f50\n                                        v154 = v155;\n                                        v156 = v151 & 0xffffffff;\n                                        goto lab_0x417b2f;\n                                    } else {\n                                        // 0x417a55\n                                        v142 = 1;\n                                        goto lab_0x417a55_2;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x417a78\n                        v157 = v147 + 1;\n                    }\n                }\n                goto lab_0x417a48;\n            }\n        }\n      lab_0x417af0:;\n        int64_t v193 = function_40db40((int128_t *)&v56, v11, &v68, 0); // 0x417afd\n        *(int64_t *)(v11 + 72) = v193;\n        if (v193 == 0) {\n            goto lab_0x417da8;\n        } else {\n            // 0x417b0f\n            if (*(char *)(v193 + 104) < 0) {\n                int64_t v194 = function_40db40((int128_t *)&v56, v11, &v68, 1); // 0x417d50\n                int64_t * v195 = (int64_t *)(v11 + 80); // 0x417d60\n                *v195 = v194;\n                int64_t v196 = function_40db40((int128_t *)&v56, v11, &v68, 2); // 0x417d69\n                int64_t * v197 = (int64_t *)(v11 + 88); // 0x417d79\n                *v197 = v196;\n                int64_t v198 = function_40db40((int128_t *)&v56, v11, &v68, 6); // 0x417d82\n                *(int64_t *)(v11 + 96) = v198;\n                if (*v195 == 0) {\n                    goto lab_0x417da8;\n                } else {\n                    // 0x417d92\n                    if (v198 != 0 == (*v197 != 0)) {\n                        goto lab_0x417b25;\n                    } else {\n                        goto lab_0x417da8;\n                    }\n                }\n            } else {\n                // 0x417b19\n                *(int64_t *)(v11 + 96) = v193;\n                *(int64_t *)(v11 + 88) = v193;\n                *(int64_t *)(v11 + 80) = v193;\n                goto lab_0x417b25;\n            }\n        }\n    }\n  lab_0x417b2f:\n    // 0x417b2f\n    result = v156;\n    int64_t * v199 = (int64_t *)(v154 + 112); // 0x417b38\n    int64_t v200 = *v199; // 0x417b38\n    if (v200 != 0) {\n        int64_t * v201 = (int64_t *)v200; // 0x417b48\n        int64_t v202 = *v201; // 0x417b48\n        free(v201);\n        while (v202 != 0) {\n            // 0x417b48\n            v201 = (int64_t *)v202;\n            v202 = *v201;\n            free(v201);\n        }\n    }\n    // 0x417b58\n    *v199 = 0;\n    int64_t * v203 = (int64_t *)(v154 + 32); // 0x417b61\n    *(int32_t *)(v154 + 128) = 15;\n    *(int64_t *)(v154 + 104) = 0;\n    free((int64_t *)*v203);\n    *v203 = 0;\n    function_40c4c0(&v124);\n    if (result == 0) {\n        // 0x417b9b\n        return result;\n    }\n    goto lab_0x417c0e;\n  lab_0x417da8:\n    // 0x417da8\n    v154 = v57;\n    v156 = v56;\n    goto lab_0x417b2f;\n  lab_0x417b25:\n    // 0x417b25\n    free((int64_t *)v96);\n    v154 = v96;\n    v156 = v191;\n    goto lab_0x417b2f;\n}\n"
        },
        {
            "funcName": "function_418000",
            "funcStartAddr": "418000",
            "funcEndAddr": "418067",
            "decompiledFuncCode": "int64_t function_418000(int64_t a1, int64_t a2, int64_t a3) {\n    char * v1 = (char *)(a3 + 56); // 0x418020\n    *v1 = *v1 & 111 | (char)(g124 / 0x200000) & 16 | -128;\n    int64_t v2; // 0x418000\n    int64_t v3 = function_417250(a3, a1, a2, g124, a1, v2); // 0x418035\n    if ((int32_t)v3 == 0) {\n        // 0x418060\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)((0x100000000 * v3 >> 29) + (int64_t)&g21); // 0x418047\n    return (int64_t)dcgettext(NULL, (char *)(v4 + (int64_t)\"Success\"), 5);\n}\n"
        },
        {
            "funcName": "function_418070",
            "funcStartAddr": "418070",
            "funcEndAddr": "41807f",
            "decompiledFuncCode": "int64_t function_418070(int64_t a1) {\n    int64_t result = g124; // 0x418070\n    g124 = a1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_418080",
            "funcStartAddr": "418080",
            "funcEndAddr": "418143",
            "decompiledFuncCode": "int64_t function_418080(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 32); // 0x418086\n    *(int64_t *)v1 = 0;\n    *(int64_t *)(v1 + 248) = 0;\n    int64_t v2 = v1 + 8 & -8; // 0x4180aa\n    __asm_rep_stosq_memset((char *)v2, 0, (v1 + 256 - v2) / 8 % 0x20000000);\n    int64_t * v3 = (int64_t *)(a1 + 72); // 0x4180c3\n    int64_t v4 = *v3; // 0x4180c3\n    function_410b30(a1, v4 + 16, v4 + 24, v1);\n    int64_t v5 = *(int64_t *)(a1 + 80); // 0x4180d5\n    int64_t v6 = v5; // 0x4180df\n    if (*v3 != v5) {\n        // 0x4180e1\n        function_410b30(a1, v5 + 16, v5 + 24, v1);\n        v6 = *v3;\n    }\n    int64_t v7 = *(int64_t *)(a1 + 88); // 0x4180f9\n    int64_t v8 = v6; // 0x418101\n    if (v7 != v6) {\n        // 0x418103\n        function_410b30(a1, v7 + 16, v7 + 24, v1);\n        v8 = *v3;\n    }\n    int64_t v9 = *(int64_t *)(a1 + 96); // 0x41811b\n    if (v9 != v8) {\n        // 0x418125\n        function_410b30(a1, v9 + 16, v9 + 24, v1);\n    }\n    char * v10 = (char *)(a1 + 56); // 0x418138\n    *v10 = *v10 | 8;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_418150",
            "funcStartAddr": "418150",
            "funcEndAddr": "4186db",
            "decompiledFuncCode": "int64_t function_418150(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x418150\n    if (a4 < 0 || a4 > a3) {\n        // 0x41827f\n        return -1;\n    }\n    int64_t v1 = a5 + a4; // 0x418155\n    int64_t v2 = a3; // 0x418191\n    if (v1 > a3) {\n        goto lab_0x4181bc;\n    } else {\n        // 0x418197\n        v2 = a3;\n        if (a5 > -1 == v1 < a4) {\n            goto lab_0x4181bc;\n        } else {\n            if (v1 < 0) {\n                goto lab_0x418478;\n            } else {\n                // 0x4181ae\n                v2 = v1;\n                if (a5 >= 0 || v1 < a4) {\n                    goto lab_0x4181bc;\n                } else {\n                    goto lab_0x418478;\n                }\n            }\n        }\n    }\n  lab_0x4181bc:;\n    char * v3 = (char *)(a1 + 56); // 0x4181bc\n    int64_t v4 = (int64_t)*v3; // 0x4181bc\n    int64_t v5 = v4; // 0x4181d2\n    int64_t v6 = v2; // 0x4181d2\n    if (v2 > a4) {\n        // 0x4181d4\n        v5 = v4;\n        v6 = v2;\n        if ((v4 & 8) == 0 == (*(int64_t *)(a1 + 32) != 0)) {\n            // 0x4183d0\n            function_418080(a1);\n            v5 = (int64_t)*v3;\n            v6 = v2;\n        }\n    }\n    goto lab_0x4181e3;\n  lab_0x4181e3:;\n    int64_t size = 16; // 0x4181e5\n    int64_t v7 = 0; // 0x4181e5\n    int64_t v8 = 1; // 0x4181e5\n    int64_t v9; // 0x418150\n    if (a7 == 0 || (v5 & 16) != 0) {\n        goto lab_0x418211;\n    } else {\n        uint64_t v10 = *(int64_t *)(a1 + 48); // 0x4181f7\n        if ((v5 & 6) == 4) {\n            int64_t v11 = *(int64_t *)a7; // 0x418390\n            if (v11 > v10) {\n                // 0x418203\n                v9 = v10 + 1;\n                goto lab_0x41820a;\n            } else {\n                // 0x41839d\n                v9 = v11;\n                size = 16;\n                v7 = 0;\n                v8 = 1;\n                if (v11 >= 0 == (v11 != 0)) {\n                    goto lab_0x41820a;\n                } else {\n                    goto lab_0x418211;\n                }\n            }\n        } else {\n            // 0x418203\n            v9 = v10 + 1;\n            goto lab_0x41820a;\n        }\n    }\n  lab_0x418211:;\n    int64_t * mem = malloc((int32_t)size); // 0x418220\n    if (mem == NULL) {\n        // 0x41827f\n        return -2;\n    }\n    uint64_t v12 = v8;\n    int64_t v13 = (int64_t)mem; // 0x418220\n    int64_t result = -1; // 0x418150\n    int64_t v14; // 0x418150\n    int64_t v15; // 0x418150\n    int64_t v16; // 0x418150\n    int64_t v17; // 0x418150\n    int64_t v18; // 0x418150\n    int64_t v19; // 0x418150\n    int64_t v20; // 0x418150\n    int64_t v21; // 0x418150\n    int64_t v22; // 0x418150\n    int64_t v23; // 0x418150\n    int64_t v24; // 0x418150\n    int64_t v25; // 0x418150\n    int64_t v26; // 0x418150\n    int64_t v27; // 0x418150\n    int64_t v28; // 0x418150\n    int64_t v29; // 0x418150\n    int64_t v30; // 0x418150\n    int64_t v31; // 0x418150\n    int64_t v32; // 0x418150\n    int64_t v33; // 0x418150\n    int64_t v34; // 0x418150\n    int64_t v35; // 0x418150\n    int64_t v36; // 0x418150\n    int64_t v37; // 0x418150\n    int64_t v38; // 0x418150\n    char * v39; // 0x4182a1\n    switch ((int32_t)v40) {\n        case 0: {\n            // 0x418298\n            v14 = v7;\n            v36 = a2;\n            v26 = a3;\n            v31 = v6;\n            v16 = v6;\n            v21 = a6;\n            if (v14 == 0) {\n                goto lab_0x418368;\n            } else {\n                // 0x4182a1\n                v39 = (char *)(a1 + 56);\n                int64_t v41 = v12 + 1; // 0x4182a6\n                unsigned char v42 = *v39 / 2 % 4;\n                switch (v42) {\n                    case 0: {\n                        int32_t size2 = 8 * (int32_t)v41; // 0x418420\n                        int64_t * mem2 = malloc(size2); // 0x418420\n                        int64_t v43 = (int64_t)mem2; // 0x418420\n                        *(int64_t *)(v14 + 8) = v43;\n                        v35 = v41;\n                        v25 = a3;\n                        int64_t v44; // 0x418150\n                        v30 = v44;\n                        v15 = v44;\n                        v20 = 0;\n                        if (mem2 == NULL) {\n                            goto lab_0x41834d;\n                        } else {\n                            int64_t * mem3 = malloc(size2); // 0x418445\n                            *(int64_t *)(v14 + 16) = (int64_t)mem3;\n                            if (mem3 == NULL) {\n                                // 0x41853a\n                                free(mem2);\n                                v35 = v41;\n                                v25 = a3;\n                                v30 = v43;\n                                v15 = v44;\n                                v20 = 0;\n                                goto lab_0x41834d;\n                            } else {\n                                // 0x418462\n                                *(int64_t *)v14 = v41;\n                                v34 = v41;\n                                v24 = a3;\n                                v29 = v43;\n                                v19 = 1;\n                                goto lab_0x4182d7;\n                            }\n                        }\n                    }\n                    case 1: {\n                        int64_t * v45 = (int64_t *)v14; // 0x4184be\n                        v34 = a2;\n                        v24 = a3;\n                        v29 = v6;\n                        v19 = 1;\n                        if (*v45 >= v41) {\n                            goto lab_0x4182d7;\n                        } else {\n                            int64_t v46 = 8 * v41; // 0x4184c8\n                            int64_t * v47 = (int64_t *)(v14 + 8); // 0x4184d0\n                            int32_t v48 = v46; // 0x4184e7\n                            int64_t * mem4 = realloc((int64_t *)*v47, v48); // 0x4184e7\n                            v35 = v46;\n                            v25 = 1;\n                            v30 = v41;\n                            v15 = v6;\n                            v20 = 0;\n                            if (mem4 == NULL) {\n                                goto lab_0x41834d;\n                            } else {\n                                int64_t * v49 = (int64_t *)(v14 + 16); // 0x4184f9\n                                int64_t * mem5 = realloc((int64_t *)*v49, v48); // 0x418501\n                                if (mem5 == NULL) {\n                                    // 0x41854a\n                                    free(mem4);\n                                    v35 = v46;\n                                    v25 = 1;\n                                    v30 = v41;\n                                    v15 = v6;\n                                    v20 = 0;\n                                    goto lab_0x41834d;\n                                } else {\n                                    // 0x418516\n                                    *v47 = (int64_t)mem4;\n                                    *v49 = (int64_t)mem5;\n                                    *v45 = v41;\n                                    v34 = v46;\n                                    v24 = 1;\n                                    v29 = v41;\n                                    v19 = 1;\n                                    goto lab_0x4182d7;\n                                }\n                            }\n                        }\n                    }\n                    default: {\n                        // 0x4182be\n                        v38 = a2;\n                        v28 = a3;\n                        v33 = v6;\n                        v18 = v6;\n                        v23 = a6;\n                        if (v42 != 2) {\n                            goto lab_0x41858c;\n                        } else {\n                            // 0x4182c7\n                            v34 = a2;\n                            v24 = a3;\n                            v29 = v6;\n                            v19 = 2;\n                            v37 = a2;\n                            v27 = a3;\n                            v32 = v6;\n                            v17 = v6;\n                            v22 = a6;\n                            if (v12 > *(int64_t *)v14) {\n                                goto lab_0x418573;\n                            } else {\n                                goto lab_0x4182d7;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        case 1: {\n            goto lab_0x418277;\n        }\n        default: {\n            goto lab_0x418270;\n        }\n    }\n  lab_0x418478:\n    // 0x418478\n    v5 = (int64_t)*(char *)(a1 + 56);\n    v6 = 0;\n    goto lab_0x4181e3;\n  lab_0x418270:\n    // 0x418270\n    result = -2;\n  lab_0x418277:\n    // 0x418277\n    free(mem);\n    // 0x41827f\n    return result;\n  lab_0x418368:;\n    int64_t v50 = *mem; // 0x41836d\n    result = v50;\n    if ((char)a8 == 0) {\n        // 0x418277\n        free(mem);\n        // 0x41827f\n        return result;\n    }\n    if (v50 == a4) {\n        // 0x418277\n        free(mem);\n        // 0x41827f\n        return *(int64_t *)(v13 + 8) - v50;\n    }\n    // 0x41855a\n    __assert_fail(\"pmatch[0].rm_so == start\", \"lib/regexec.c\", 445, \"re_search_stub\");\n    v37 = v36;\n    v27 = v26;\n    v32 = v31;\n    v17 = v16;\n    v22 = v21;\n    goto lab_0x418573;\n  lab_0x41820a:\n    // 0x41820a\n    size = 16 * v9;\n    v7 = a7;\n    v8 = v9;\n    goto lab_0x418211;\n  lab_0x418573:\n    // 0x418573\n    __assert_fail(\"regs->num_regs >= nregs\", \"lib/regexec.c\", 506, \"re_copy_regs\");\n    v38 = v37;\n    v28 = v27;\n    v33 = v32;\n    v18 = v17;\n    v23 = v22;\n    goto lab_0x41858c;\n  lab_0x41858c:\n    // 0x41858c\n    __assert_fail(\"regs_allocated == REGS_FIXED\", \"lib/regexec.c\", 504, \"re_copy_regs\");\n    if ((v18 || v28) <= -1) {\n        // 0x41827f\n        return -2;\n    }\n    int64_t size3 = v18 + 504; // 0x4185fc\n    if ((size3 & (v18 ^ -0x8000000000000000)) < 0) {\n        // 0x41827f\n        return -2;\n    }\n    int64_t * v51 = NULL; // 0x418608\n    int64_t v52 = (int64_t)\"lib/regexec.c\"; // 0x418608\n    if (v18 != 0) {\n        int64_t * mem6 = malloc((int32_t)size3); // 0x418672\n        if (mem6 == NULL) {\n            // 0x41827f\n            return -2;\n        }\n        int64_t v53 = (int64_t)mem6; // 0x418672\n        memcpy(mem6, (int64_t *)\"lib/regexec.c\", 504);\n        memcpy((int64_t *)(v53 + 504), (int64_t *)\"re_copy_regs\", (int32_t)v18);\n        v51 = mem6;\n        v52 = v53;\n    }\n    int64_t result2 = function_418150((int64_t)\"regs_allocated == REGS_FIXED\", v52, size3, v23, v38, v28, v33, a6 % 256); // 0x418633\n    free(v51);\n    // 0x41827f\n    return result2;\n  lab_0x41834d:\n    // 0x41834d\n    *v39 = *v39 & -7 | 2 * (char)v20;\n    v36 = v35;\n    v26 = v25;\n    v31 = v30;\n    v16 = v15;\n    v21 = v20;\n    if (v20 == 0) {\n        goto lab_0x418270;\n    } else {\n        goto lab_0x418368;\n    }\n  lab_0x4182d7:;\n    int64_t v54 = v19;\n    int64_t v55 = v29;\n    int64_t v56 = v24;\n    int64_t v57 = v34;\n    int64_t v58 = 0; // 0x4182da\n    int64_t v59 = v6; // 0x4182da\n    if (v12 >= 1) {\n        int64_t v60 = *(int64_t *)(v14 + 8); // 0x4182e0\n        int64_t v61 = 0; // 0x4182f7\n        int64_t v62 = 2 * v61; // 0x418300\n        *(int64_t *)(v61 + v60) = *(int64_t *)(v62 + v13);\n        int64_t v63 = *(int64_t *)(v13 + 8 + v62); // 0x418309\n        *(int64_t *)(v61 + *(int64_t *)(v14 + 16)) = v63;\n        v61 += 8;\n        v58 = v12;\n        v59 = v60;\n        while (v61 != 8 * v12) {\n            // 0x418300\n            v62 = 2 * v61;\n            *(int64_t *)(v61 + v60) = *(int64_t *)(v62 + v13);\n            v63 = *(int64_t *)(v13 + 8 + v62);\n            *(int64_t *)(v61 + *(int64_t *)(v14 + 16)) = v63;\n            v61 += 8;\n            v58 = v12;\n            v59 = v60;\n        }\n    }\n    int64_t v64 = v59;\n    int64_t v65 = v58;\n    int64_t * v66 = (int64_t *)v14; // 0x41831b\n    v35 = v57;\n    v25 = v56;\n    v30 = v55;\n    v15 = v64;\n    v20 = v54;\n    if (*v66 > v65) {\n        int64_t v67 = v65 + 1; // 0x418338\n        int64_t v68 = 8 * v65; // 0x41833c\n        *(int64_t *)(v68 + *(int64_t *)(v14 + 16)) = -1;\n        *(int64_t *)(v68 + *(int64_t *)(v14 + 8)) = -1;\n        v35 = v57;\n        v25 = v56;\n        v30 = v55;\n        v15 = v64;\n        v20 = v54;\n        while (*v66 > v67) {\n            int64_t v69 = v67;\n            v67 = v69 + 1;\n            v68 = 8 * v69;\n            *(int64_t *)(v68 + *(int64_t *)(v14 + 16)) = -1;\n            *(int64_t *)(v68 + *(int64_t *)(v14 + 8)) = -1;\n            v35 = v57;\n            v25 = v56;\n            v30 = v55;\n            v15 = v64;\n            v20 = v54;\n        }\n    }\n    goto lab_0x41834d;\n}\n"
        },
        {
            "funcName": "function_4186e0",
            "funcStartAddr": "4186e0",
            "funcEndAddr": "4187f0",
            "decompiledFuncCode": "int64_t function_4186e0(int64_t a1, int64_t str, uint64_t a3) {\n    // 0x4186e0\n    *(int64_t *)a1 = 0;\n    *(int64_t *)(a1 + 8) = 0;\n    *(int64_t *)(a1 + 16) = 0;\n    int64_t * mem = malloc(256); // 0x418725\n    int64_t * v1 = (int64_t *)(a1 + 32); // 0x41872a\n    *v1 = (int64_t)mem;\n    if (mem == NULL) {\n        // 0x4187e0\n        return 12;\n    }\n    int64_t v2 = (a3 % 2 == 0 ? 0x10102c6 : 0x3b2fc) | 0x200000 * a3 & 0x400000; // 0x418747\n    int64_t v3 = (a3 & 4) != 0 ? v2 & 0x143b2be | 256 : v2;\n    *(int64_t *)(a1 + 40) = 0;\n    char * v4 = (char *)(a1 + 56); // 0x418762\n    *v4 = ((a3 & 4) != 0 ? -128 : 0) | 2 * (char)a3 & 16 | *v4 & 111;\n    int64_t v5; // 0x4186e0\n    int64_t v6 = function_417250(a1, str, (int64_t)strlen((char *)str), v3, v5, v5); // 0x418787\n    int32_t v7 = v6; // 0x41878e\n    int64_t v8 = 8; // 0x418791\n    if (v7 != 16) {\n        // 0x418793\n        v8 = v6 & 0xffffffff;\n        if (v7 == 0) {\n            // 0x418797\n            function_418080(a1);\n            // 0x41879f\n            return v8 & 0xffffffff;\n        }\n    }\n    // 0x4187cd\n    free((int64_t *)*v1);\n    *v1 = 0;\n    // 0x41879f\n    return v8 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4187f0",
            "funcStartAddr": "4187f0",
            "funcEndAddr": "41886d",
            "decompiledFuncCode": "int64_t function_4187f0(int64_t a1, int64_t a2, int64_t a3, uint64_t a4) {\n    int64_t v1 = *(int64_t *)((0x100000000 * a1 >> 29) + (int64_t)&g21); // 0x418811\n    char * str = dcgettext(NULL, (char *)(v1 + (int64_t)\"Success\"), 5); // 0x418822\n    int64_t result = (int64_t)strlen(str) + 1; // 0x418832\n    if (a4 == 0) {\n        // 0x41884e\n        return result;\n    }\n    int64_t v2 = result; // 0x418841\n    if (result > a4) {\n        // 0x418860\n        v2 = a4 - 1;\n        *(char *)(v2 + a3) = 0;\n    }\n    // 0x418843\n    memcpy((int64_t *)a3, (int64_t *)str, (int32_t)v2);\n    // 0x41884e\n    return result;\n}\n"
        },
        {
            "funcName": "function_418870",
            "funcStartAddr": "418870",
            "funcEndAddr": "4188b4",
            "decompiledFuncCode": "int64_t function_418870(int64_t a1) {\n    if (a1 != 0) {\n        // 0x41887c\n        function_40fe70(a1);\n    }\n    // 0x418881\n    *(int64_t *)a1 = 0;\n    int64_t * v1 = (int64_t *)(a1 + 32); // 0x418888\n    *(int64_t *)(a1 + 8) = 0;\n    free((int64_t *)*v1);\n    *v1 = 0;\n    int64_t * v2 = (int64_t *)(a1 + 40); // 0x4188a1\n    free((int64_t *)*v2);\n    *v2 = 0;\n    return &g127;\n}\n"
        },
        {
            "funcName": "function_4188c0",
            "funcStartAddr": "4188c0",
            "funcEndAddr": "418956",
            "decompiledFuncCode": "int64_t function_4188c0(int64_t a1, int64_t str, int64_t a3, int64_t a4, int64_t a5) {\n    if ((a5 & 0xfffffff8) != 0) {\n        // 0x418950\n        return 2;\n    }\n    int64_t v1; // 0x4188c0\n    int64_t v2; // 0x4188c0\n    int64_t v3; // 0x4188c0\n    int64_t v4; // 0x4188c0\n    int64_t v5; // 0x4188c0\n    int64_t v6; // 0x4188c0\n    if ((a5 & 4) != 0) {\n        int64_t v7 = *(int64_t *)(a4 + 8); // 0x418933\n        v5 = 0;\n        v1 = a4;\n        v3 = v7;\n        v6 = 0;\n        v2 = a4;\n        v4 = v7;\n        if ((*(char *)(a1 + 56) & 16) != 0) {\n            goto lab_0x418906;\n        } else {\n            goto lab_0x41893d;\n        }\n    } else {\n        int64_t len = strlen((char *)str); // 0x4188ed\n        v5 = 0;\n        v1 = 0;\n        v3 = len;\n        v6 = 0;\n        v2 = 0;\n        v4 = len;\n        if ((*(char *)(a1 + 56) & 16) == 0) {\n            goto lab_0x41893d;\n        } else {\n            goto lab_0x418906;\n        }\n    }\n  lab_0x418906:;\n    int64_t v8 = v3;\n    return (int32_t)function_4131a0(a1, str, v8, v1, v8, v8, v6, v5, a5 & 0xffffffff) != 0;\n  lab_0x41893d:\n    // 0x41893d\n    v5 = a4;\n    v1 = v2;\n    v3 = v4;\n    v6 = a3;\n    goto lab_0x418906;\n}\n"
        },
        {
            "funcName": "function_418960",
            "funcStartAddr": "418960",
            "funcEndAddr": "418978",
            "decompiledFuncCode": "int64_t function_418960(int64_t * a1, int64_t a2, int64_t a3, int32_t a4, int32_t a5) {\n    // 0x418960\n    return function_418150((int64_t)a1, a2, a3, (int64_t)a4, 0, a3, (int64_t)a5, 1);\n}\n"
        },
        {
            "funcName": "function_418980",
            "funcStartAddr": "418980",
            "funcEndAddr": "418995",
            "decompiledFuncCode": "int64_t function_418980(int64_t * a1, int64_t a2, int64_t a3, int32_t a4, int64_t a5, int64_t * a6) {\n    // 0x418980\n    return function_418150((int64_t)a1, a2, a3, (int64_t)a4, a5, a3, (int64_t)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4189a0",
            "funcStartAddr": "4189a0",
            "funcEndAddr": "4189ba",
            "decompiledFuncCode": "int64_t function_4189a0(int64_t a1, int64_t a2) {\n    // 0x4189a0\n    int64_t result; // 0x4189a0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4189c0",
            "funcStartAddr": "4189c0",
            "funcEndAddr": "4189dc",
            "decompiledFuncCode": "int64_t function_4189c0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4189c0\n    int64_t result; // 0x4189c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4189e0",
            "funcStartAddr": "4189e0",
            "funcEndAddr": "418a1c",
            "decompiledFuncCode": "int64_t function_4189e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    char * v1 = (char *)(a1 + 56);\n    char v2 = *v1 & -7;\n    if (a3 == 0) {\n        // 0x418a00\n        *v1 = v2;\n        *(int64_t *)a2 = 0;\n        *(int64_t *)(a2 + 16) = 0;\n        *(int64_t *)(a2 + 8) = 0;\n        int64_t result; // 0x4189e0\n        return result;\n    }\n    unsigned char result2 = v2 | 2;\n    *v1 = result2;\n    *(int64_t *)a2 = a3;\n    *(int64_t *)(a2 + 8) = a4;\n    *(int64_t *)(a2 + 16) = a5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_418a20",
            "funcStartAddr": "418a20",
            "funcEndAddr": "418a79",
            "decompiledFuncCode": "int64_t function_418a20(int64_t a1, char * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    if (v1 == a1) {\n        // 0x418a78\n        return 0;\n    }\n    int64_t v2 = 0; // 0x418a25\n    unsigned char v3 = *(char *)(v2 + a1); // 0x418a38\n    int64_t v4 = v3; // 0x418a38\n    uint64_t v5 = v3 == 90 | (int32_t)v3 < 90 ? v4 + 32 : v4;\n    unsigned char v6 = *(char *)(v2 + v1); // 0x418a50\n    bool v7 = v6 == 90 | (int32_t)v6 < 90; // 0x418a60\n    char v8 = v5; // 0x418a69\n    while (v8 != 0) {\n        // 0x418a30\n        v2++;\n        if ((v7 ? v6 + 32 : v6) != v8) {\n            // break -> 0x418a6d\n            break;\n        }\n        v3 = *(char *)(v2 + a1);\n        v4 = v3;\n        v5 = v3 == 90 | (int32_t)v3 < 90 ? v4 + 32 : v4;\n        v6 = *(char *)(v2 + v1);\n        v7 = v6 == 90 | (int32_t)v6 < 90;\n        v8 = v5;\n    }\n    int64_t v9 = v6; // 0x418a50\n    // 0x418a78\n    return v5 % 256 - (v7 ? v9 + 32 : v9) % 256 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_418a80",
            "funcStartAddr": "418a80",
            "funcEndAddr": "418add",
            "decompiledFuncCode": "int64_t function_418a80(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x418a87\n    int64_t v2; // 0x418a80\n    int64_t result = function_409bc0(a1, v2); // 0x418a98\n    if ((v2 & 32) != 0) {\n        // 0x418ac0\n        if ((int32_t)result == 0) {\n            // 0x418ac4\n            *__errno_location() = 0;\n        }\n        // 0x418aba\n        return 0xffffffff;\n    }\n    // 0x418aa1\n    if ((int32_t)result == 0) {\n        // 0x418aba\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x418aa8\n    if (v1 == 0) {\n        // 0x418aaa\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x418aba\n    return result2;\n}\n"
        },
        {
            "funcName": "function_418ae0",
            "funcStartAddr": "418ae0",
            "funcEndAddr": "418b3e",
            "decompiledFuncCode": "int64_t function_418ae0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x418ae6\n    if (locale == NULL) {\n        // 0x418b13\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x418ae6\n    bool v2; // 0x418ae0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g23; // 0x418ae0\n    int64_t v5 = v1; // 0x418ae0\n    int64_t v6 = 2; // 0x418b05\n    unsigned char v7 = *(char *)v5; // 0x418b05\n    char v8 = *(char *)v4; // 0x418b05\n    char v9 = v8; // 0x418b05\n    bool v10 = false; // 0x418b05\n    while (v7 == v8) {\n        // 0x418af8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x418b11\n    int64_t v13 = v1; // 0x418b11\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x418b13\n        return 0;\n    }\n    int64_t v14 = 6; // 0x418b11\n    unsigned char v15 = *(char *)v13; // 0x418b2d\n    char v16 = *(char *)v12; // 0x418b2d\n    char v17 = v16; // 0x418b2d\n    bool v18 = false; // 0x418b2d\n    while (v15 == v16) {\n        // 0x418b20\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_418b40",
            "funcStartAddr": "418b40",
            "funcEndAddr": "4190a2",
            "decompiledFuncCode": "int64_t function_418b40(void) {\n    char * v1 = nl_langinfo(14); // 0x418b56\n    char * v2 = g121; // 0x418b5b\n    char * v3; // 0x418b40\n    int64_t v4; // 0x418b40\n    int64_t v5; // 0x418b40\n    int64_t v6; // 0x418b40\n    int64_t v7; // 0x418b40\n    int32_t size; // 0x418b40\n    int32_t size2; // 0x418b40\n    int32_t len; // 0x418c12\n    int64_t v8; // 0x418c12\n    char * env_val; // 0x418bfd\n    if (v2 == NULL) {\n        // 0x418bf8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x418c65;\n        } else {\n            // 0x418c0a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x418c65;\n            } else {\n                // 0x418c0f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x418bfd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x419095\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x418c65;\n                    } else {\n                        // 0x419009\n                        size2 = len + 14;\n                        goto lab_0x418c2b;\n                    }\n                } else {\n                    goto lab_0x418c2b;\n                }\n            }\n        }\n    } else {\n        // 0x418b40\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x418b7a;\n    }\n  lab_0x418eac:;\n    // 0x418eac\n    struct _IO_FILE * stream; // 0x418ceb\n    int32_t v10 = __uflow(stream); // 0x418eaf\n    int64_t v11; // 0x418b40\n    int64_t v12 = v11; // 0x418eb9\n    int64_t v13; // 0x418b40\n    int64_t v14 = v13; // 0x418eb9\n    int32_t v15 = v10; // 0x418eb9\n    int64_t v16; // 0x418b40\n    int64_t v17 = v16; // 0x418eb9\n    int64_t v18 = v11; // 0x418eb9\n    int64_t v19 = v13; // 0x418eb9\n    int64_t v20 = v16; // 0x418eb9\n    if (v10 == -1) {\n        // break -> 0x418ebf\n        goto lab_0x418ebf;\n    }\n    goto lab_0x418d39;\n  lab_0x418d2e:;\n    // 0x418d2e\n    int64_t v90; // 0x418b40\n    int64_t * v32; // 0x418d20\n    *v32 = v90 + 1;\n    int64_t v89; // 0x418b40\n    v12 = v89;\n    int64_t v91; // 0x418b40\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x418b40\n    v17 = v92;\n    goto lab_0x418d39;\n  lab_0x418d39:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x418b40\n    int32_t v25; // bp-120, 0x418b40\n    int32_t v26; // bp-184, 0x418b40\n    int64_t v27; // 0x418ceb\n    int64_t v28; // 0x418d08\n    int64_t v29; // 0x418d0d\n    int64_t * v30; // 0x418d24\n    switch (c) {\n        case 32: {\n            goto lab_0x418d20;\n        }\n        case 10: {\n            goto lab_0x418d20;\n        }\n        case 9: {\n            goto lab_0x418d20;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x418f11\n            int32_t v33; // 0x418b40\n            char v34; // 0x418b40\n            int32_t v35; // 0x418f1e\n            if (v31 < *v30) {\n                // 0x418ef0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x418f1b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x418f11\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x418ef0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x418f1b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x418f00\n                v36 = v33;\n            }\n            // 0x418fef\n            if (v36 == -1) {\n                // break -> 0x418ebf\n                break;\n            }\n            goto lab_0x418d20;\n        }\n        default: {\n            // 0x418d4f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x418ebf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x418d78\n            int64_t v39 = v37 + 4; // 0x418d7a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x418d86\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x418d88\n            while (v41 == 0) {\n                // 0x418d78\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x418da6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x418db2\n            int64_t v45 = v43 + 4; // 0x418db4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x418dc0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x418dc2\n            while (v47 == 0) {\n                // 0x418db2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x418daf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x418dd8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x418de8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x418dec\n            int64_t v52 = v51 + v48; // 0x418df5\n            int64_t * mem; // 0x418b40\n            int64_t v53; // 0x418b40\n            int64_t v54; // 0x418b40\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x418f2b\n                int64_t v56 = v55 + 3; // 0x418f37\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x418e11\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x418e20\n            if (mem == NULL) {\n                // 0x41904c\n                free((int64_t *)v21);\n                function_409bc0(v27, v53);\n                v24 = (int64_t)&g19;\n                goto lab_0x418cc4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x418e38\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x418e42\n            uint32_t v62 = (int32_t)v59; // 0x418e45\n            int64_t v63; // 0x418b40\n            if (v62 >= 8) {\n                // 0x418f54\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x418f6e\n                int64_t v66 = v61 - v65; // 0x418f72\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x418f7d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x418f8e\n                    int64_t v70 = v69 & 0xffffffff; // 0x418f8e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x418f8b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x41901f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x418e57\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x418e5b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x418e6b\n            int64_t v74 = v60 - 1; // 0x418e6f\n            uint32_t v75 = (int32_t)v73; // 0x418e74\n            int64_t v76; // 0x418b40\n            if (v75 >= 8) {\n                // 0x418fa2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x418fac\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x418fbc\n                int64_t v80 = v74 - v79; // 0x418fc0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x418fcb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x418fdb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x418fd9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x419036\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x41903e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x418e86\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x418e8a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x419083\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x418e9e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x418d2e;\n            } else {\n                goto lab_0x418eac;\n            }\n        }\n    }\n  lab_0x418d20:;\n    int64_t v93 = v23; // 0x418b40\n    int64_t v94 = v22; // 0x418b40\n    int64_t v95 = v21; // 0x418b40\n    goto lab_0x418d20_2;\n  lab_0x418c65:;\n    int64_t * mem3 = malloc(size); // 0x418c65\n    int64_t v97 = (int64_t)&g19; // 0x418c70\n    int64_t v98; // 0x418b40\n    int64_t path; // 0x418b40\n    if (mem3 == NULL) {\n        goto lab_0x418c42;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x418c65\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x418c86;\n    }\n  lab_0x418b7a:;\n    int64_t str = v1 == NULL ? (int64_t)&g19 : (int64_t)v1; // 0x418b6d\n    char v100 = *v3; // 0x418b7a\n    int64_t v101; // 0x418b40\n    if (v100 == 0) {\n        // 0x418bd4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x418b40\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x418b40\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x418bc0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x418bc7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x418b90\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x418b9d\n        char v107 = *(char *)v106; // 0x418ba2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x418bd4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x418bab\n    v104 = v103 + 1;\n  lab_0x418bc7:\n    // 0x418bd4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x418c42:;\n    char * v108 = (char *)v97;\n    g121 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x418b7a;\n  lab_0x418c86:;\n    int64_t v109 = v98 + path; // 0x418c86\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x418cb2\n    v24 = (int64_t)&g19;\n    if (fd >= 0) {\n        // 0x418ce1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x419012\n            close(fd);\n            v24 = (int64_t)&g19;\n        } else {\n            // 0x418d05\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x418d20_2:;\n                uint64_t v96 = *v32; // 0x418d20\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x418eac;\n                } else {\n                    goto lab_0x418d2e;\n                }\n            }\n          lab_0x418ebf:\n            // 0x418ebf\n            function_409bc0(v27, v19);\n            v24 = (int64_t)&g19;\n            if (v18 != 0) {\n                // 0x418ede\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x418cc4;\n  lab_0x418c2b:;\n    int64_t * mem4 = malloc(size2); // 0x418c2b\n    v97 = (int64_t)&g19;\n    if (mem4 != NULL) {\n        // 0x418cd1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x418c86;\n    } else {\n        goto lab_0x418c42;\n    }\n  lab_0x418cc4:\n    // 0x418cc4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x418c42;\n}\n"
        },
        {
            "funcName": "function_4190b0",
            "funcStartAddr": "4190b0",
            "funcEndAddr": "4190d1",
            "decompiledFuncCode": "int64_t function_4190b0(int64_t a1) {\n    int32_t wc = a1; // 0x4190b3\n    int32_t result = wcwidth(wc); // 0x4190b3\n    if (result < 0) {\n        // 0x4190c0\n        return iswcntrl(wc) == 0;\n    }\n    // 0x4190bc\n    return result;\n}\n"
        },
        {
            "funcName": "function_4190e0",
            "funcStartAddr": "4190e0",
            "funcEndAddr": "419136",
            "decompiledFuncCode": "int64_t function_4190e0(int64_t a1, int64_t a2) {\n    // 0x4190e0\n    *(int64_t *)a1 = a2;\n    char v1 = *(char *)(a2 + 16); // 0x4190ff\n    *(int64_t *)(a1 + 8) = *(int64_t *)(a2 + 8);\n    *(char *)(a1 + 16) = v1;\n    int64_t result = 0; // 0x41910c\n    if (v1 != 0) {\n        uint32_t v2 = *(int32_t *)(a2 + 20); // 0x41910e\n        *(int32_t *)(a1 + 20) = v2;\n        result = v2;\n    }\n    // 0x419114\n    return result;\n}\n"
        },
        {
            "funcName": "function_419140",
            "funcStartAddr": "419140",
            "funcEndAddr": "419157",
            "decompiledFuncCode": "int64_t function_419140(uint64_t a1) {\n    uint32_t v1 = *(int32_t *)((a1 / 8 & 28) + (int64_t)&g24); // 0x41914a\n    return (v1 >> (int32_t)a1 % 32) % 2;\n}\n"
        },
        {
            "funcName": "function_419160",
            "funcStartAddr": "419160",
            "funcEndAddr": "4192e3",
            "decompiledFuncCode": "int64_t function_419160(int64_t a1, int64_t a2, uint64_t a3, int64_t * a4, int64_t a5) {\n    int64_t v1 = 8 * a3; // 0x419179\n    int64_t v2 = v1; // 0x419179\n    if (v1 < 0) {\n        // 0x419280\n        return 0;\n    }\n    if (a3 >= 0x2000000000000000) {\n        // 0x419280\n        return 0;\n    }\n    int64_t v3; // 0x419160\n    if (v1 < 4016) {\n        // 0x41919c\n        int64_t v4; // bp-56, 0x419160\n        int64_t v5 = 31 - (v1 + 39 & -16) + (int64_t)&v4 & -16; // 0x4191b0\n        v2 = v5;\n        v3 = v5;\n        if (v5 == 0) {\n            // 0x419280\n            return 0;\n        }\n    } else {\n        int64_t v6 = function_41b0d0(v1, a2, a3, (int64_t)a4); // 0x419263\n        v2 = v6;\n        v3 = v6;\n        if (v6 == 0) {\n            // 0x419280\n            return 0;\n        }\n    }\n    // 0x4191bd\n    *(int64_t *)(v3 + 8) = 1;\n    if (a3 >= 3) {\n        int64_t v7 = 0;\n        int64_t v8 = 2;\n        char v9 = *(char *)(a2 - 1 + v8); // 0x4191d8\n        int64_t v10 = v7; // 0x4191e2\n        int64_t v11 = v7; // 0x4191e2\n        int64_t v12; // 0x419160\n        int64_t v13; // 0x419160\n        int64_t v14; // 0x4192c8\n        int64_t v15; // 0x4191f0\n        if (v9 != *(char *)(v7 + a2)) {\n            v12 = v10;\n            while (v12 != 0) {\n                // 0x4191f0\n                v15 = v12 - *(int64_t *)(8 * v12 + v2);\n                if (*(char *)(v15 + a2) == v9) {\n                    goto lab_0x4192c8;\n                }\n                v12 = v15;\n            }\n            // 0x419203\n            *(int64_t *)(v2 + 8 * v8) = v8;\n            v13 = 0;\n        } else {\n            // 0x4192c8\n            v14 = v11 + 1;\n            *(int64_t *)(v2 + 8 * v8) = v8 - v14;\n            v13 = v14;\n        }\n        // 0x41920a\n        v7 = v13;\n        int64_t v16 = v8 + 1; // 0x41920a\n        while (v16 != a3) {\n            // 0x4191d8\n            v8 = v16;\n            v9 = *(char *)(a2 - 1 + v8);\n            v10 = v7;\n            v11 = v7;\n            if (v9 != *(char *)(v7 + a2)) {\n                v12 = v10;\n                while (v12 != 0) {\n                    // 0x4191f0\n                    v15 = v12 - *(int64_t *)(8 * v12 + v2);\n                    if (*(char *)(v15 + a2) == v9) {\n                        goto lab_0x4192c8;\n                    }\n                    v12 = v15;\n                }\n                // 0x419203\n                *(int64_t *)(v2 + 8 * v8) = v8;\n                v13 = 0;\n            } else {\n                // 0x4192c8\n                v14 = v11 + 1;\n                *(int64_t *)(v2 + 8 * v8) = v8 - v14;\n                v13 = v14;\n            }\n            // 0x41920a\n            v7 = v13;\n            v16 = v8 + 1;\n        }\n    }\n    // 0x419213\n    *a4 = 0;\n    char v17 = *(char *)&v2;\n    char v18 = v17; // 0x41922b\n    int64_t v19 = a1; // 0x41922b\n    int64_t v20 = a1; // 0x41922b\n    int64_t v21 = 0; // 0x41922b\n    if (v17 == 0) {\n        // 0x419247\n        function_41b140(v2);\n        return 1;\n    }\n    int64_t v22; // 0x419160\n    while (true) {\n        char v23 = v18;\n        int64_t v24 = v20; // 0x419231\n        int64_t v25 = v21; // 0x419231\n        int64_t v26 = v21; // 0x419231\n        int64_t v27 = v20; // 0x419231\n        if (*(char *)(v21 + a2) == v23) {\n          lab_0x419290:\n            // 0x419290\n            v22 = v27;\n            int64_t v28 = v26 + 1; // 0x419290\n            v21 = v28;\n            v20 = v22;\n            if (v28 == a3) {\n                // break -> 0x4192db\n                break;\n            }\n        } else {\n            int64_t v29 = v25;\n            int64_t v30 = v24;\n            while (v29 != 0) {\n                int64_t v31 = *(int64_t *)(8 * v29 + v2); // 0x419238\n                int64_t v32 = v31 + v30; // 0x41923c\n                int64_t v33 = v29 - v31; // 0x41923f\n                v24 = v32;\n                v25 = v33;\n                v26 = v33;\n                v27 = v32;\n                if (*(char *)(v33 + a2) == v23) {\n                    goto lab_0x419290;\n                }\n                v29 = v25;\n                v30 = v24;\n            }\n            // 0x4192b0\n            v21 = 0;\n            v20 = v30 + 1;\n        }\n        // 0x419228\n        v19++;\n        v18 = *(char *)v19;\n        if (v18 == 0) {\n            // 0x419247\n            function_41b140(v2);\n            return 1;\n        }\n    }\n    // 0x4192db\n    *a4 = v22;\n    // 0x419247\n    function_41b140(v2);\n    return 1;\n}\n"
        },
        {
            "funcName": "function_4192f0",
            "funcStartAddr": "4192f0",
            "funcEndAddr": "419310",
            "decompiledFuncCode": "int64_t function_4192f0(void) {\n    // 0x4192f0\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n    return &g127;\n}\n"
        },
        {
            "funcName": "function_419310",
            "funcStartAddr": "419310",
            "funcEndAddr": "419cf0",
            "decompiledFuncCode": "int64_t function_419310(int64_t a1, int64_t a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3; // bp-280, 0x419331\n    uint64_t v2 = function_41b1d0(a2); // 0x419338\n    uint128_t v3 = 56 * (int128_t)v2; // 0x41934f\n    if ((int64_t)v3 < 0 || v3 % 0x3f0000000000000001 != 0) {\n        // 0x419721\n        return 0;\n    }\n    int64_t v4 = 0x100000000 * v2 / 0x100000000; // 0x41936a\n    uint64_t v5 = 56 * v4; // 0x41937c\n    int64_t v6; // 0x419310\n    if (v5 < 4015) {\n        // 0x41938d\n        v6 = (int64_t)&v1 + 31 - (v5 + 39 & -16) & -16;\n    } else {\n        // 0x4197fe\n        v6 = function_41b0d0(v5, a2, (int64_t)(v3 % 0x3f0000000000000001 != 0), v2);\n    }\n    int64_t len3 = 0; // 0x4193a8\n    if (v6 == 0) {\n      lab_0x419721:\n        // 0x419721\n        return len3;\n    }\n    int64_t ps = 0; // bp-244, 0x4193d1\n    int64_t v7 = v6 + 48 * v4; // 0x4193e0\n    int64_t v8 = a2; // 0x4193e3\n    char v9 = 0; // 0x4193e3\n    int64_t v10 = v6; // 0x4193e3\n    int64_t v11; // 0x419310\n    int32_t v12; // bp-212, 0x419310\n    char v13; // 0x419310\n    int32_t len; // 0x419310\n    int64_t str; // 0x419310\n    char v14; // 0x419310\n    while (true) {\n      lab_0x419495:\n        // 0x419495\n        v11 = v10;\n        str = v8;\n        v14 = v9;\n        if (v9 == 0) {\n            unsigned char v15 = *(char *)str; // 0x4193f7\n            int32_t v16 = *(int32_t *)((int64_t)(4 * v15 / 32) + (int64_t)&g24); // 0x419402\n            if ((1 << (int32_t)(v15 % 32) & v16) == 0) {\n                int32_t v17 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x41981b\n                v14 = 1;\n                if (v17 == 0) {\n                    // break -> 0x419caf\n                    break;\n                }\n                goto lab_0x4194a2;\n            } else {\n                // 0x419413\n                v12 = v15;\n                v9 = 0;\n                len = 1;\n                v13 = 1;\n                if (v15 == 0) {\n                    goto lab_0x419557_2;\n                }\n                goto lab_0x41944a;\n            }\n        } else {\n            goto lab_0x4194a2;\n        }\n    }\n  lab_0x419caf:\n    // 0x419caf\n    __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n    // 0x419cc8\n    function_4192f0();\n    // 0x419ccd\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n    return &g127;\n  lab_0x419557_2:\n    // 0x419557\n    *(int64_t *)(v7 + 8) = 1;\n    struct _TYPEDEF___mbstate_t * v18 = (struct _TYPEDEF___mbstate_t *)2; // 0x41957a\n    int64_t v19 = v6; // 0x41957a\n    int64_t v20 = 0; // 0x41957a\n    if ((int32_t)v2 < 3) {\n        goto lab_0x41960b;\n    } else {\n        goto lab_0x419580;\n    }\n  lab_0x4194a2:;\n    char v21 = v14;\n    int64_t v22 = function_4085c0(str, (int64_t)__ctype_get_mb_cur_max()); // 0x4194b4\n    int64_t v23 = function_40ab50((int64_t *)&v12, str, v22); // 0x4194ce\n    v9 = v21;\n    len = 1;\n    v13 = 0;\n    switch (v23) {\n        case -1: {\n            goto lab_0x41944a;\n        }\n        case -2: {\n            // 0x419880\n            v9 = v21;\n            len = strlen((char *)str);\n            v13 = 0;\n            goto lab_0x41944a;\n        }\n        default: {\n            int32_t v24 = v23; // 0x4194f1\n            if (v23 == 0) {\n                // 0x4194f3\n                if (*(char *)str != 0) {\n                    // 0x419c96\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x419caf;\n                }\n                // 0x41950e\n                v24 = 1;\n                if (v12 != 0) {\n                    // 0x419cc8\n                    function_4192f0();\n                    // 0x419ccd\n                    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n                    return &g127;\n                }\n            }\n            int32_t v25 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x419530\n            v9 = v25 == 0 ? v21 : 0;\n            len = v24;\n            v13 = 1;\n            if (v12 == 0) {\n                goto lab_0x419557_2;\n            }\n            goto lab_0x41944a;\n        }\n    }\n  lab_0x41944a:;\n    int32_t v26 = len;\n    int64_t v27; // bp-208, 0x419310\n    if (str == (int64_t)&v27) {\n        int64_t * dest_mem = memcpy((int64_t *)(v11 + 24), &v27, v26); // 0x41983f\n        *(int64_t *)v11 = (int64_t)dest_mem;\n    } else {\n        // 0x41946c\n        *(int64_t *)v11 = str;\n    }\n    int64_t v28 = v26;\n    *(int64_t *)(v11 + 8) = v28;\n    *(char *)(v11 + 16) = v13;\n    if (v13 != 0) {\n        // 0x41947a\n        *(int32_t *)(v11 + 20) = v12;\n    }\n    // 0x419483\n    v8 = str + v28;\n    v10 = v11 + 48;\n    goto lab_0x419495;\n  lab_0x41960b:\n    // 0x41960b\n    *(int64_t *)v1 = 0;\n    int64_t ps3 = 0; // bp-180, 0x41964f\n    int64_t ps2 = 0; // bp-116, 0x41965a\n    char v29 = 0; // 0x41967a\n    char v30 = 0; // 0x41967a\n    char v31 = 0; // 0x41967a\n    int64_t v32 = a1; // 0x41967a\n    int64_t v33 = a1; // 0x41967a\n    int64_t v34 = 0; // 0x41967a\n    goto lab_0x419680;\n  lab_0x419580:;\n    struct _TYPEDEF___mbstate_t * v137 = v18;\n    int64_t v142 = v19 + 48;\n    int32_t * v67 = (int32_t *)(v19 + 68);\n    int64_t * v77 = (int64_t *)(v19 + 56);\n    int64_t * str2 = (int64_t *)v142;\n    int64_t v65 = v20; // 0x419585\n    goto lab_0x4195ad;\n  lab_0x419680:;\n    int64_t v35 = v34;\n    int64_t v36 = v33;\n    int64_t v37 = v32;\n    char v38 = v31;\n    char v39 = v30;\n    char v40 = v29;\n    char v41 = v40; // 0x419682\n    char v42 = v39; // 0x419682\n    int64_t v43 = v37; // 0x419682\n    int64_t v44 = v36; // 0x419682\n    int64_t v45 = v35; // 0x419682\n    int64_t v46; // 0x419310\n    int64_t v47; // 0x419310\n    int64_t v48; // 0x419310\n    int64_t v49; // 0x419310\n    char v50; // 0x419310\n    char v51; // 0x419310\n    char v52; // 0x419310\n    char v53; // 0x419310\n    int64_t v54; // 0x419310\n    int64_t v55; // 0x419310\n    char v56; // 0x419310\n    char v57; // 0x419310\n    char v58; // 0x419310\n    char v59; // 0x419310\n    char v60; // 0x419310\n    int64_t v61; // 0x419310\n    int64_t v62; // 0x419310\n    int64_t v63; // 0x419310\n    if (v38 == 0) {\n        goto lab_0x419742;\n    } else {\n        // 0x419688\n        v52 = v40;\n        v56 = v39;\n        v50 = v38;\n        v54 = v37;\n        v48 = v36;\n        v59 = v58;\n        v62 = v61;\n        v46 = v35;\n        v53 = v40;\n        v57 = v39;\n        v51 = v38;\n        v55 = v37;\n        v49 = v36;\n        v60 = v58;\n        v63 = v61;\n        v47 = v35;\n        if (v58 != 0) {\n            goto lab_0x419782;\n        } else {\n            goto lab_0x419692;\n        }\n    }\n  lab_0x4195ad:;\n    int64_t v64 = v65;\n    int64_t v66 = 48 * v64 + v6; // 0x4195b5\n    if (*(char *)(v19 + 64) != 0) {\n        // 0x419590\n        if (*(char *)(v66 + 16) == 0) {\n            goto lab_0x4195bc;\n        } else {\n            // 0x419596\n            if (*v67 == *(int32_t *)(v66 + 20)) {\n                goto lab_0x4195d5;\n            } else {\n                goto lab_0x41959f;\n            }\n        }\n    } else {\n        goto lab_0x4195bc;\n    }\n  lab_0x419742:;\n    int64_t v68 = v45;\n    int64_t str4 = v44;\n    int64_t v69 = v43;\n    char v70 = v42;\n    char v71 = v41;\n    char v72 = v71; // 0x419746\n    int32_t v73; // bp-84, 0x419310\n    if (v71 != 0) {\n        goto lab_0x4198c8;\n    } else {\n        unsigned char v74 = *(char *)str4; // 0x419750\n        int32_t v75 = *(int32_t *)((int64_t)(4 * v74 / 32) + (int64_t)&g24); // 0x41975b\n        if ((1 << (int32_t)(v74 % 32) & v75) == 0) {\n            int32_t v76 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps2); // 0x4198b7\n            v72 = 1;\n            if (v76 == 0) {\n                goto lab_0x419caf;\n            } else {\n                goto lab_0x4198c8;\n            }\n        } else {\n            // 0x41976c\n            v73 = v74;\n            v53 = v71;\n            v57 = v70;\n            v51 = 1;\n            v55 = v69;\n            v49 = str4;\n            v60 = 1;\n            v63 = 1;\n            v47 = v68;\n            goto lab_0x419782;\n        }\n    }\n  lab_0x4195bc:;\n    int64_t n = *v77; // 0x4195bc\n    if (n != *(int64_t *)(v66 + 8)) {\n        goto lab_0x41959f;\n    } else {\n        int64_t str3 = *(int64_t *)v66; // 0x4195c6\n        if (memcmp((int64_t *)*str2, (int64_t *)str3, (int32_t)n) != 0) {\n            goto lab_0x41959f;\n        } else {\n            goto lab_0x4195d5;\n        }\n    }\n  lab_0x4198c8:;\n    char v78 = v72;\n    int64_t v79 = function_4085c0(str4, (int64_t)__ctype_get_mb_cur_max()); // 0x4198d7\n    int64_t v80 = function_40ab50((int64_t *)&v73, str4, v79); // 0x4198ee\n    v52 = v78;\n    v56 = v70;\n    v50 = 1;\n    v54 = v69;\n    v48 = str4;\n    v59 = 0;\n    v62 = 1;\n    v46 = v68;\n    int64_t v81; // 0x419310\n    switch (v80) {\n        case -1: {\n            goto lab_0x419692;\n        }\n        case -2: {\n            int32_t len2 = strlen((char *)str4); // 0x419c2c\n            v52 = v78;\n            v56 = v70;\n            v50 = 1;\n            v54 = v69;\n            v48 = str4;\n            v59 = 0;\n            v62 = len2;\n            v46 = v68;\n            goto lab_0x419692;\n        }\n        default: {\n            // 0x41990b\n            v81 = v80;\n            if (v80 != 0) {\n                goto lab_0x419930;\n            } else {\n                // 0x419910\n                if (*(char *)str4 != 0) {\n                    // 0x419c96\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x419caf;\n                } else {\n                    // 0x419925\n                    v81 = 1;\n                    if (v73 != 0) {\n                        goto lab_0x419cc8;\n                    } else {\n                        goto lab_0x419930;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x419782:;\n    int32_t v82 = v73; // 0x419782\n    if (v82 == 0) {\n        // 0x4197d1\n        function_41b140(v6);\n        return 1;\n    }\n    int64_t v83 = v47;\n    int64_t v84 = v63;\n    char v85 = v60;\n    int64_t v86 = v49;\n    int64_t v87 = v55;\n    char v88 = v51;\n    char v89 = v57;\n    char v90 = v53;\n    int64_t v91 = 48 * v83 + v6; // 0x419791\n    char v92 = v90; // 0x419798\n    char v93 = v89; // 0x419798\n    char v94 = v88; // 0x419798\n    int64_t v95 = v87; // 0x419798\n    int64_t v96 = v86; // 0x419798\n    char v97 = v85; // 0x419798\n    int64_t v98 = v84; // 0x419798\n    int64_t v99 = v91; // 0x419798\n    int64_t v100 = v83; // 0x419798\n    int64_t v101; // 0x419310\n    int64_t v102; // 0x419310\n    int64_t v103; // 0x419310\n    int64_t v104; // 0x419310\n    char v105; // 0x419310\n    char v106; // 0x419310\n    char v107; // 0x419310\n    int64_t v108; // 0x419310\n    int64_t v109; // 0x419310\n    char v110; // 0x419310\n    char v111; // 0x419310\n    char v112; // 0x419310\n    int64_t v113; // 0x419310\n    int64_t v114; // 0x419310\n    if (*(char *)(v91 + 16) == 0) {\n        goto lab_0x41969d;\n    } else {\n        // 0x41979e\n        v106 = v90;\n        v110 = v89;\n        v105 = v88;\n        v108 = v87;\n        v103 = v86;\n        v112 = v85;\n        v113 = v84;\n        v102 = v83;\n        v107 = v90;\n        v111 = v89;\n        v109 = v87;\n        v104 = v86;\n        v114 = v84;\n        v101 = v83;\n        if (*(int32_t *)(v91 + 20) != v82) {\n            goto lab_0x4196ab;\n        } else {\n            goto lab_0x4197a7;\n        }\n    }\n  lab_0x419692:\n    // 0x419692\n    v92 = v52;\n    v93 = v56;\n    v94 = v50;\n    v95 = v54;\n    v96 = v48;\n    v97 = v59;\n    v98 = v62;\n    v99 = 48 * v46 + v6;\n    v100 = v46;\n    goto lab_0x41969d;\n  lab_0x41959f:;\n    int64_t v139; // 0x419310\n    int64_t v140; // 0x419310\n    if (v64 == 0) {\n        int64_t v184 = (int64_t)v137;\n        *(int64_t *)(8 * v184 + v7) = v184;\n        v139 = v184;\n        v140 = 0;\n        goto lab_0x4195eb;\n    } else {\n        // 0x4195a8\n        v65 = v64 - *(int64_t *)(8 * v64 + v7);\n        goto lab_0x4195ad;\n    }\n  lab_0x41969d:;\n    int64_t v115 = v100;\n    int64_t v116 = v99;\n    int64_t n2 = v98;\n    char v117 = v97;\n    int64_t str6 = v96;\n    int64_t v118 = v95;\n    char v119 = v94;\n    char v120 = v93;\n    char v121 = v92;\n    v106 = v121;\n    v110 = v120;\n    v105 = v119;\n    v108 = v118;\n    v103 = str6;\n    v112 = v117;\n    v113 = n2;\n    v102 = v115;\n    int64_t v122; // 0x419310\n    int64_t v123; // 0x419310\n    int64_t v124; // 0x419310\n    int64_t v125; // 0x419310\n    char v126; // 0x419310\n    char v127; // 0x419310\n    char v128; // 0x419310\n    int64_t v129; // 0x419310\n    int64_t v130; // 0x419310\n    char v131; // 0x419310\n    char v132; // 0x419310\n    char v133; // 0x419310\n    int64_t v134; // 0x419310\n    int64_t v135; // 0x419310\n    if (*(int64_t *)(v116 + 8) == n2) {\n        int64_t str5 = *(int64_t *)v116; // 0x41995c\n        int32_t memcmp_rc = memcmp((int64_t *)str5, (int64_t *)str6, (int32_t)n2); // 0x41995f\n        v107 = v121;\n        v111 = v120;\n        v109 = v118;\n        v104 = str6;\n        v114 = n2;\n        v101 = v115;\n        if (memcmp_rc == 0) {\n            goto lab_0x4197a7;\n        } else {\n            // 0x41996c\n            v128 = v121;\n            v131 = v120;\n            v129 = v118;\n            v124 = str6;\n            v134 = n2;\n            v123 = 0;\n            v127 = v121;\n            v132 = v120;\n            v126 = v119;\n            v130 = v118;\n            v125 = str6;\n            v133 = v117;\n            v135 = n2;\n            v122 = v115;\n            if (v115 == 0) {\n                goto lab_0x4196c1;\n            } else {\n                goto lab_0x419975;\n            }\n        }\n    } else {\n        goto lab_0x4196ab;\n    }\n  lab_0x4195d5:;\n    int64_t v136 = (int64_t)v137;\n    int64_t v138 = v64 + 1; // 0x4195dc\n    *(int64_t *)(8 * v136 + v7) = v136 - v138;\n    v139 = v136;\n    v140 = v138;\n    goto lab_0x4195eb;\n  lab_0x419930:;\n    int32_t v183 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps2); // 0x41993c\n    v53 = v183 == 0 ? v78 : 0;\n    v57 = v70;\n    v51 = 1;\n    v55 = v69;\n    v49 = str4;\n    v60 = 1;\n    v63 = v81;\n    v47 = v68;\n    goto lab_0x419782;\n  lab_0x4196ab:\n    // 0x4196ab\n    v128 = v106;\n    v131 = v110;\n    v129 = v108;\n    v124 = v103;\n    v134 = v113;\n    v123 = v102;\n    v127 = v106;\n    v132 = v110;\n    v126 = v105;\n    v130 = v108;\n    v125 = v103;\n    v133 = v112;\n    v135 = v113;\n    v122 = v102;\n    if (v102 != 0) {\n        goto lab_0x419975;\n    } else {\n        goto lab_0x4196c1;\n    }\n  lab_0x4195eb:;\n    int64_t v141 = v139 + 1; // 0x4195eb\n    v18 = (struct _TYPEDEF___mbstate_t *)v141;\n    v19 = v142;\n    v20 = v140;\n    if (v141 != v4) {\n        goto lab_0x419580;\n    } else {\n        goto lab_0x41960b;\n    }\n  lab_0x4197a7:;\n    int64_t v143 = v109;\n    int64_t v144 = v101 + 1; // 0x4197ab\n    v41 = v107;\n    v42 = v111;\n    v43 = v143;\n    v44 = v114 + v104;\n    v45 = v144;\n    if (v144 == v4) {\n        // 0x4197c0\n        *(int64_t *)v1 = v143;\n        // 0x4197d1\n        function_41b140(v6);\n        return 1;\n    }\n    goto lab_0x419742;\n  lab_0x419975:;\n    int64_t v145 = *(int64_t *)(8 * v122 + v7); // 0x419975\n    int64_t v146 = v122 - v145; // 0x419981\n    char v147 = v132; // 0x419987\n    int64_t v148 = v130; // 0x419987\n    int64_t v149 = v122; // 0x419987\n    char v150 = v132; // 0x419987\n    int64_t v151 = v130; // 0x419987\n    int64_t v152 = v145; // 0x419987\n    if (v145 == 0) {\n        goto lab_0x419680_2;\n    } else {\n        goto lab_0x4199be;\n    }\n  lab_0x4196c1:;\n    int64_t str7 = v129;\n    char v153 = v131;\n    char v154 = v153; // 0x4196c8\n    int32_t v155; // bp-148, 0x419310\n    int64_t v156; // 0x419310\n    char v157; // 0x419310\n    if (v153 != 0) {\n        goto lab_0x419b63;\n    } else {\n        unsigned char v158 = *(char *)str7; // 0x4196d5\n        int32_t v159 = *(int32_t *)((int64_t)(4 * v158 / 32) + (int64_t)&g24); // 0x4196e0\n        if ((1 << (int32_t)(v158 % 32) & v159) == 0) {\n            int32_t v160 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x419b4f\n            v154 = 1;\n            if (v160 == 0) {\n                goto lab_0x419caf;\n            } else {\n                goto lab_0x419b63;\n            }\n        } else {\n            // 0x4196f1\n            v155 = v158;\n            v157 = v153;\n            v156 = 1;\n            goto lab_0x419713;\n        }\n    }\n  lab_0x419680_2:\n    // 0x419680\n    v29 = v127;\n    v30 = v147;\n    v31 = v126;\n    v32 = v148;\n    v33 = v125;\n    v58 = v133;\n    v61 = v135;\n    v34 = v149;\n    goto lab_0x419680;\n  lab_0x4199be:;\n    int64_t str8 = v151;\n    char v161 = v150;\n    char v162 = v161; // 0x4199c5\n    int32_t v163; // 0x419310\n    int64_t v164; // 0x419310\n    int64_t v165; // 0x419310\n    char v166; // 0x419310\n    if (v161 != 0) {\n        goto lab_0x419a3b;\n    } else {\n        unsigned char v167 = *(char *)str8; // 0x4199ce\n        int32_t v168 = *(int32_t *)((int64_t)(4 * v167 / 32) + (int64_t)&g24); // 0x4199d9\n        if ((1 << (int32_t)(v167 % 32) & v168) == 0) {\n            int32_t v169 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x419a27\n            v162 = 1;\n            if (v169 == 0) {\n                goto lab_0x419caf;\n            } else {\n                goto lab_0x419a3b;\n            }\n        } else {\n            int32_t v170 = v167; // 0x4199fb\n            v155 = v170;\n            v163 = v170;\n            v166 = v161;\n            v165 = 1;\n            v164 = v167;\n            goto lab_0x419a08;\n        }\n    }\n  lab_0x419b63:;\n    int64_t v171 = function_4085c0(str7, (int64_t)__ctype_get_mb_cur_max()); // 0x419b75\n    int64_t v172 = function_40ab50((int64_t *)&v155, str7, v171); // 0x419b92\n    len3 = -1;\n    int64_t v173; // 0x419310\n    switch (v172) {\n        case -1: {\n            goto lab_0x419721;\n        }\n        case -2: {\n            // 0x419c77\n            len3 = strlen((char *)str7);\n            goto lab_0x419721;\n        }\n        default: {\n            // 0x419bb2\n            v173 = v172;\n            if (v172 != 0) {\n                goto lab_0x419be0;\n            } else {\n                // 0x419bb7\n                if (*(char *)str7 != 0) {\n                    // 0x419c96\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x419caf;\n                } else {\n                    // 0x419bd2\n                    v173 = 1;\n                    if (v155 != 0) {\n                        goto lab_0x419cc8;\n                    } else {\n                        goto lab_0x419be0;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x419a3b:;\n    char v174 = v162;\n    int64_t v175 = function_4085c0(str8, (int64_t)__ctype_get_mb_cur_max()); // 0x419a4d\n    int64_t v176 = function_40ab50((int64_t *)&v155, str8, v175); // 0x419a67\n    char v177 = v174; // 0x419310\n    int64_t len4 = 1; // 0x419310\n    int64_t v178; // 0x419310\n    switch (v176) {\n        case -1: {\n            goto lab_0x41999f;\n        }\n        case -2: {\n            // 0x419b00\n            v177 = v174;\n            len4 = strlen((char *)str8);\n            goto lab_0x41999f;\n        }\n        default: {\n            // 0x419a83\n            v178 = v176;\n            if (v176 != 0) {\n                goto lab_0x419ab1;\n            } else {\n                // 0x419a88\n                if (*(char *)str8 != 0) {\n                    // 0x419c96\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    goto lab_0x419caf;\n                } else {\n                    // 0x419aa3\n                    v178 = 1;\n                    if (v155 != 0) {\n                        goto lab_0x419ccd;\n                    } else {\n                        goto lab_0x419ab1;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x41999f:;\n    int64_t v179 = len4 + str8; // 0x4199ad\n    int64_t v180 = v152 - 1; // 0x4199b4\n    v147 = v177;\n    v148 = v179;\n    v149 = v146;\n    v150 = v177;\n    v151 = v179;\n    v152 = v180;\n    if (v180 == 0) {\n        goto lab_0x419680_2;\n    } else {\n        goto lab_0x4199be;\n    }\n  lab_0x419be0:;\n    int32_t v181 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x419bf2\n    v157 = v181 == 0 ? v154 : 0;\n    v156 = v173;\n    goto lab_0x419713;\n  lab_0x419713:\n    // 0x419713\n    v41 = v128;\n    v42 = v157;\n    v43 = v156 + str7;\n    v44 = v134 + v124;\n    v45 = v123;\n    goto lab_0x419742;\n  lab_0x419ab1:;\n    int32_t v182 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x419ac3\n    v163 = v155;\n    v166 = v182 == 0 ? v174 : 0;\n    v165 = v178;\n    v164 = v182;\n    goto lab_0x419a08;\n  lab_0x419a08:\n    // 0x419a08\n    len3 = v164;\n    v177 = v166;\n    len4 = v165;\n    if (v163 != 0) {\n        goto lab_0x41999f;\n    } else {\n        goto lab_0x419721;\n    }\n}\n"
        },
        {
            "funcName": "function_419cf0",
            "funcStartAddr": "419cf0",
            "funcEndAddr": "41abc0",
            "decompiledFuncCode": "int64_t function_419cf0(int64_t result, int64_t str2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x419cf0\n    int64_t v1; // 0x419cf0\n    char v2 = v1;\n    int64_t v3; // 0x419cf0\n    int64_t v4; // 0x419cf0\n    int64_t v5; // 0x419cf0\n    int64_t v6; // 0x419cf0\n    int64_t v7; // 0x419cf0\n    int64_t v8; // 0x419cf0\n    int64_t v9; // 0x419cf0\n    int64_t v10; // 0x419cf0\n    int64_t result2; // 0x419cf0\n    int64_t v11; // 0x419cf0\n    int64_t v12; // 0x419cf0\n    char v13; // 0x419cf0\n    int64_t v14; // 0x419cf0\n    int64_t v15; // 0x419db2\n    int64_t v16; // 0x419daa\n    if (__ctype_get_mb_cur_max() < 2) {\n        // 0x419d16\n        if (v2 == 0) {\n            // 0x419e4d\n            return result;\n        }\n        char v17 = v1;\n        if (v17 == 0) {\n            // 0x419e4d\n            return 0;\n        }\n        // 0x419daa\n        v10 = 1;\n        v13 = v17;\n        v14 = 0;\n        v11 = result;\n        v6 = 0;\n        v8 = str2;\n        v3 = 0;\n        while (true) {\n          lab_0x419daa:;\n            int64_t str = v8;\n            int64_t v18 = v6;\n            int64_t v19 = v11;\n            int64_t v20 = v14;\n            v15 = v19 + 1;\n            int64_t v21; // 0x419cf0\n            if (v13 == v2) {\n                char v22 = *(char *)(str2 + 1); // 0x419e60\n                result2 = v19;\n                if (v22 == 0) {\n                    // break -> 0x419e4d\n                    break;\n                }\n                char v23 = *(char *)v15; // 0x419e69\n                result2 = 0;\n                if (v23 == 0) {\n                    // break -> 0x419e4d\n                    break;\n                }\n                int64_t v24 = v20 + 2; // 0x419e76\n                v21 = v24;\n                if (v22 == v23) {\n                    int64_t v25 = v24; // 0x419e8e\n                    char v26 = *(char *)(str2 - v20 + v25); // 0x419eaa\n                    result2 = v19;\n                    if (v26 == 0) {\n                        return result2;\n                    }\n                    char v27 = *(char *)(v19 - v20 + v25); // 0x419e90\n                    result2 = 0;\n                    if (v27 == 0) {\n                        return result2;\n                    }\n                    // 0x419e9d\n                    v25++;\n                    v21 = v25;\n                    while (v26 == v27) {\n                        // 0x419eaa\n                        v26 = *(char *)(str2 - v20 + v25);\n                        result2 = v19;\n                        if (v26 == 0) {\n                            return result2;\n                        }\n                        // 0x419e90\n                        v27 = *(char *)(v19 - v20 + v25);\n                        result2 = 0;\n                        if (v27 == 0) {\n                            return result2;\n                        }\n                        // 0x419e9d\n                        v25++;\n                        v21 = v25;\n                    }\n                }\n            } else {\n                // 0x419dbf\n                v21 = v20 + 1;\n                result2 = 0;\n                if (*(char *)v15 == 0) {\n                    // break -> 0x419e4d\n                    break;\n                }\n            }\n            // 0x419dc9\n            v16 = v3 + 1;\n            v12 = v21;\n            unsigned char v28 = (char)(v16 >= 10) & (char)v10; // 0x419dd0\n            v9 = v10;\n            v5 = v18;\n            v7 = str;\n            if (v28 == 0) {\n                goto lab_0x419da0;\n            } else {\n                int64_t v29 = v28; // 0x419dd0\n                v9 = v29;\n                v5 = v18;\n                v7 = str;\n                if (v12 >= 5 * v16) {\n                    // 0x419d48\n                    v4 = v18;\n                    if (str == 0) {\n                        goto lab_0x419d6f;\n                    } else {\n                        int64_t v30 = str + (int64_t)strnlen((char *)str, (int32_t)(v12 - v18)); // 0x419d66\n                        v4 = v12;\n                        v9 = v29;\n                        v5 = v12;\n                        v7 = v30;\n                        if (*(char *)v30 != 0) {\n                            goto lab_0x419da0;\n                        } else {\n                            goto lab_0x419d6f;\n                        }\n                    }\n                } else {\n                    goto lab_0x419da0;\n                }\n            }\n        }\n      lab_0x419e4d_2:\n        // 0x419e4d\n        return result2;\n    }\n    int64_t ps = 0; // bp-372, 0x419e0b\n    int32_t * v31 = (int32_t *)((v1 / 8 & 28) + (int64_t)&g24); // 0x419e1a\n    int32_t v32 = 1 << (int32_t)(v2 % 32);\n    int32_t v33; // 0x419cf0\n    int32_t v34; // 0x419cf0\n    char v35; // 0x419cf0\n    int64_t v36; // 0x419cf0\n    int32_t v37; // bp-340, 0x419cf0\n    bool v38; // 0x419cf0\n    int64_t v39; // 0x419cf0\n    int64_t len; // 0x419cf0\n    if ((*v31 & v32) == 0) {\n        // 0x41aa30\n        if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps) == 0) {\n          lab_0x41ab8c_5:\n            // 0x41ab8c\n            __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n            // 0x41aba5\n            __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n            return &g127;\n        }\n        int64_t v40 = function_4085c0(str2, (int64_t)__ctype_get_mb_cur_max()); // 0x41aa55\n        int64_t v41 = function_40ab50((int64_t *)&v37, str2, v40); // 0x41aa68\n        len = 1;\n        v38 = true;\n        switch (v41) {\n            case -1: {\n                goto lab_0x419ec7;\n            }\n            case -2: {\n                // 0x41ab3e\n                len = strlen((char *)str2);\n                v38 = true;\n                goto lab_0x419ec7;\n            }\n            default: {\n                // 0x41aa86\n                if (v41 == 0) {\n                    if (v2 != 0) {\n                        // 0x41aba5\n                        __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    }\n                    int32_t v42; // 0x41aaa2\n                    if (v42 != 0) {\n                      lab_0x41aaaa_6:\n                        // 0x41aaaa\n                        function_4192f0();\n                    }\n                }\n                // 0x41aab0\n                mbsinit((struct _TYPEDEF___mbstate_t *)&ps);\n                v33 = v37;\n                v39 = v41;\n                int32_t v43; // 0x419cf0\n                v34 = v43;\n                char v44; // 0x419cf0\n                v35 = v44;\n                int64_t v45; // 0x419cf0\n                v36 = v45;\n                goto lab_0x419e42;\n            }\n        }\n    } else {\n        int32_t v46 = v2; // 0x419e34\n        v37 = v46;\n        v33 = v46;\n        v39 = 1;\n        goto lab_0x419e42;\n    }\n  lab_0x419da0:\n    // 0x419da0\n    v10 = v9;\n    v13 = *(char *)v15;\n    v14 = v12;\n    v11 = v15;\n    v6 = v5;\n    v8 = v7;\n    v3 = v16;\n    goto lab_0x419daa;\n  lab_0x419d6f:;\n    int32_t len2 = strlen((char *)str2); // 0x419d76\n    char v47; // bp-120, 0x419cf0\n    int64_t v48 = function_419160(v15, str2, (int64_t)len2, (int64_t *)&v47, v4); // 0x419d8c\n    v9 = v48;\n    v5 = v4;\n    v7 = 0;\n    if ((char)v48 != 0) {\n        // 0x41ab31\n        result2 = v47;\n        goto lab_0x419e4d_2;\n    }\n    goto lab_0x419da0;\n  lab_0x41a203:;\n    // 0x41a203\n    int64_t str3; // 0x419cf0\n    int64_t v49 = function_4085c0(str3, (int64_t)__ctype_get_mb_cur_max()); // 0x41a216\n    int32_t v50; // bp-84, 0x419cf0\n    int64_t v51 = function_40ab50((int64_t *)&v50, str3, v49); // 0x41a235\n    int64_t len3 = 1; // 0x419cf0\n    char v52 = 0; // 0x419cf0\n    int64_t ps2; // bp-116, 0x419cf0\n    int64_t str6; // 0x419cf0\n    switch (v51) {\n        case -1: {\n            goto lab_0x41a137;\n        }\n        case -2: {\n            // 0x41a5e8\n            len3 = strlen((char *)str3);\n            v52 = 0;\n            goto lab_0x41a137;\n        }\n        default: {\n            // 0x41a256\n            if (v51 == 0) {\n                char v53 = *(char *)str3; // 0x41a26f\n                if (v53 != 0) {\n                    // 0x41aba5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g127;\n                }\n                int32_t v54 = v50; // 0x41a278\n                if (v54 != 0) {\n                    goto lab_0x41aaaa_6;\n                }\n            }\n            // 0x41a287\n            if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps2) != 0) {\n                // 0x41a2a0\n                v47 = 0;\n            }\n            // 0x41a2a8\n            result2 = str6;\n            len3 = v51;\n            v52 = 1;\n            if (v50 == 0) {\n                // 0x419e4d\n                return result2;\n            }\n            goto lab_0x41a137;\n        }\n    }\n  lab_0x41a137:;\n    // 0x41a137\n    int64_t v55; // 0x419cf0\n    int64_t v56 = v55 + 1;\n    int64_t str5; // 0x419cf0\n    char * str4 = (char *)str5;\n    char v57 = v52;\n    int64_t v58 = len3;\n    char v59; // 0x419cf0\n    char v60 = v59; // 0x41a13f\n    int32_t v61; // 0x419cf0\n    int32_t v62; // bp-148, 0x419cf0\n    int32_t v63; // 0x419cf0\n    int64_t ps3; // bp-180, 0x419cf0\n    char v64; // 0x419cf0\n    if (v59 != 0) {\n        goto lab_0x41a345;\n    } else {\n        unsigned char v65 = *str4; // 0x41a14d\n        int32_t v66 = *(int32_t *)((int64_t)(4 * v65 / 32) + (int64_t)&g24); // 0x41a158\n        if ((1 << (int32_t)(v65 % 32) & v66) == 0) {\n            int32_t v67 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x41a330\n            v60 = 1;\n            if (v67 == 0) {\n                // break (via goto) -> 0x41ab8c\n                goto lab_0x41ab8c_5;\n            }\n            goto lab_0x41a345;\n        } else {\n            int32_t v68 = v65; // 0x41a180\n            v62 = v68;\n            v63 = 1;\n            v64 = v59;\n            v61 = v68;\n            if (v65 == 0) {\n                // 0x419e4d\n                return 0;\n            }\n            goto lab_0x41a19e;\n        }\n    }\n  lab_0x41a345:;\n    char v69 = v60;\n    int64_t v70 = function_4085c0(str5, (int64_t)__ctype_get_mb_cur_max()); // 0x41a358\n    int64_t v71 = function_40ab50((int64_t *)&v62, str5, v70); // 0x41a377\n    int32_t len4 = 1; // 0x419cf0\n    char v72 = v69; // 0x419cf0\n    switch (v71) {\n        case -1: {\n            goto lab_0x41a2ec;\n        }\n        case -2: {\n            // 0x41a618\n            len4 = strlen(str4);\n            v72 = v69;\n            goto lab_0x41a2ec;\n        }\n        default: {\n            int32_t v73 = v71; // 0x41a39b\n            if (v71 == 0) {\n                // 0x41a39d\n                if (*str4 != 0) {\n                    // 0x41aba5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g127;\n                }\n                // 0x41a3ba\n                v73 = 1;\n                if (v62 != 0) {\n                    goto lab_0x41aaaa_6;\n                }\n            }\n            int32_t v74 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps3); // 0x41a3d9\n            v63 = v73;\n            v64 = v74 == 0 ? v69 : 0;\n            v61 = v62;\n            if (v62 == 0) {\n                // 0x419e4d\n                return 0;\n            }\n            goto lab_0x41a19e;\n        }\n    }\n  lab_0x41a2ec:;\n    int32_t n = len4;\n    int64_t v75; // 0x419cf0\n    int64_t v76 = v75; // 0x41a2fc\n    char v77; // 0x419cf0\n    char v78 = v77; // 0x41a2fc\n    char v79; // 0x419cf0\n    char v80 = v79; // 0x41a2fc\n    int128_t v81; // 0x419cf0\n    int128_t v82 = v81; // 0x41a2fc\n    int64_t v83; // 0x419cf0\n    int64_t v84 = v83; // 0x41a2fc\n    int32_t v85; // 0x419cf0\n    int32_t v86 = v85; // 0x41a2fc\n    int32_t v87 = n; // 0x41a2fc\n    char v88; // 0x419cf0\n    char v89 = v88; // 0x41a2fc\n    int64_t v90; // 0x419cf0\n    int64_t v91 = v90; // 0x41a2fc\n    int64_t v92 = v56; // 0x41a2fc\n    int64_t v93; // 0x419cf0\n    int64_t v94 = v93; // 0x41a2fc\n    if (v58 != (int64_t)n) {\n        // break -> 0x41a302\n        goto lab_0x41a302_3;\n    }\n    int32_t memcmp_rc = memcmp((int64_t *)str5, (int64_t *)str3, n); // 0x41a438\n    int32_t v95 = n; // 0x41a442\n    char v96 = v72; // 0x41a442\n    bool v97 = memcmp_rc == 0; // 0x41a442\n    goto lab_0x41a1b6;\n  lab_0x41a19e:;\n    char v305 = v64;\n    int32_t v306 = v63;\n    len4 = v306;\n    v72 = v305;\n    if (v57 == 0) {\n        goto lab_0x41a2ec;\n    } else {\n        // 0x41a1ac\n        v95 = v306;\n        v96 = v305;\n        v97 = v50 == v61;\n        goto lab_0x41a1b6;\n    }\n  lab_0x41a1b6:;\n    int32_t v98 = v95;\n    v76 = v75;\n    v78 = v77;\n    v80 = v79;\n    v82 = v81;\n    v84 = v83;\n    v86 = v85;\n    v87 = v98;\n    v89 = v88;\n    v91 = v90;\n    v92 = v56;\n    v94 = v93;\n    if (!v97) {\n        // break -> 0x41a302\n        goto lab_0x41a302_3;\n    }\n    int64_t v99 = v58 + str3; // 0x41a1ed\n    int64_t v100 = str5 + (int64_t)v98; // 0x41a1ed\n    char v101 = v96; // 0x41a1ed\n    v55 = v56;\n    goto lab_0x41a1f5;\n  lab_0x41a539:;\n    // 0x41a539\n    int128_t v104; // 0x419cf0\n    int128_t v105 = v104;\n    int64_t v106 = function_4085c0(str6, (int64_t)__ctype_get_mb_cur_max()); // 0x41a550\n    int32_t v107; // bp-212, 0x419cf0\n    int64_t v108 = function_40ab50((int64_t *)&v107, str6, v106); // 0x41a567\n    int32_t len5 = 1; // 0x419cf0\n    int32_t v109; // 0x419cf0\n    int32_t v110; // 0x419cf0\n    int64_t ps4; // bp-244, 0x419cf0\n    int128_t v111; // 0x419cf0\n    switch (v108) {\n        case -1: {\n            goto lab_0x41a494;\n        }\n        case -2: {\n            // 0x41a808\n            len5 = strlen((char *)str6);\n            goto lab_0x41a494;\n        }\n        default: {\n            int32_t v112 = v108; // 0x41a58b\n            if (v108 == 0) {\n                // 0x41a58d\n                if (*(char *)str6 != 0) {\n                    // 0x41aba5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g127;\n                }\n                // 0x41a5aa\n                v112 = 1;\n                if (v107 != 0) {\n                    goto lab_0x41aaaa_6;\n                }\n            }\n            int32_t v113 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps4); // 0x41a5c5\n            v109 = v107;\n            v111 = v113 == 0 ? v105 : 0;\n            v110 = v112;\n            goto lab_0x419f80;\n        }\n    }\n  lab_0x41a494:;\n    int32_t v114 = len5;\n    uint64_t v115; // 0x419cf0\n    int64_t v116; // 0x419cf0\n    unsigned char v117 = (char)(v115 >= 10) & (char)v116; // 0x41a49b\n    int64_t v118; // 0x419cf0\n    int64_t v119; // 0x419cf0\n    int64_t v120; // 0x419cf0\n    int128_t v121; // 0x419cf0\n    int128_t v122; // 0x419cf0\n    int32_t v123; // 0x419cf0\n    int32_t v124; // 0x419cf0\n    int128_t v125; // 0x419cf0\n    int128_t v126; // 0x419cf0\n    char v127; // 0x419cf0\n    char v128; // 0x419cf0\n    int64_t v129; // 0x419cf0\n    int64_t v130; // 0x419cf0\n    int64_t v131; // 0x419cf0\n    int64_t v132; // 0x419cf0\n    char v133; // 0x419cf0\n    char v134; // 0x419cf0\n    char v135; // 0x419cf0\n    char v136; // 0x419cf0\n    int64_t v137; // 0x419cf0\n    int64_t v138; // 0x419cf0\n    if (v117 == 0) {\n        // 0x41a658\n        v132 = v131;\n        v136 = v135;\n        v134 = v133;\n        v125 = v105;\n        v138 = v137;\n        v123 = v114;\n        v121 = 0;\n        v128 = v127;\n        v130 = v129;\n        v120 = v119 + 1;\n        v118 = v116;\n        goto lab_0x41a4b8;\n    } else {\n        // 0x41a4a4\n        v126 = v105;\n        v124 = v114;\n        v122 = 0;\n        if (v119 >= 5 * v115) {\n            goto lab_0x41a668;\n        } else {\n            // 0x41a4b1\n            v132 = v131;\n            v136 = v135;\n            v134 = v133;\n            v125 = v105;\n            v138 = v137;\n            v123 = v114;\n            v121 = 0;\n            v128 = v127;\n            v130 = v129;\n            v120 = v119 + 1;\n            v118 = v117;\n            goto lab_0x41a4b8;\n        }\n    }\n  lab_0x419f80:\n    // 0x419f80\n    if (v109 == 0) {\n        // 0x419e4d\n        return 0;\n    }\n    int32_t v139 = v110;\n    int128_t v140 = v111;\n    unsigned char v141 = (char)(v115 >= 10) & (char)v116; // 0x419f98\n    int64_t v142; // 0x419cf0\n    int64_t v143; // 0x419cf0\n    int128_t v144; // 0x419cf0\n    int32_t v145; // 0x419cf0\n    int128_t v146; // 0x419cf0\n    char v147; // 0x419cf0\n    int64_t v148; // 0x419cf0\n    int64_t v149; // 0x419cf0\n    char v150; // 0x419cf0\n    char v151; // 0x419cf0\n    int64_t v152; // 0x419cf0\n    if (v141 == 0) {\n        // 0x41a648\n        v149 = v131;\n        v151 = v135;\n        v150 = v133;\n        v146 = v140;\n        v152 = v137;\n        v145 = v139;\n        v144 = 1;\n        v147 = v127;\n        v148 = v129;\n        v143 = v119 + 1;\n        v142 = v116;\n        goto lab_0x419fb5;\n    } else {\n        // 0x419fa1\n        v126 = v140;\n        v124 = v139;\n        v122 = 1;\n        if (v119 >= 5 * v115) {\n            goto lab_0x41a668;\n        } else {\n            // 0x419fae\n            v149 = v131;\n            v151 = v135;\n            v150 = v133;\n            v146 = v140;\n            v152 = v137;\n            v145 = v139;\n            v144 = 1;\n            v147 = v127;\n            v148 = v129;\n            v143 = v119 + 1;\n            v142 = v141;\n            goto lab_0x419fb5;\n        }\n    }\n  lab_0x41a4b8:;\n    int64_t v153 = v118;\n    int64_t v154 = v120;\n    int64_t v155 = v130;\n    char v156 = v128;\n    int32_t n2 = v123;\n    int64_t v157 = v138;\n    int128_t v158 = v125;\n    char v159 = v134;\n    char v160 = v136;\n    int64_t v161 = v132;\n    int64_t v162 = n2; // 0x41a4b8\n    int64_t v163 = v161; // 0x41a4c5\n    char v164 = v160; // 0x41a4c5\n    char v165 = v159; // 0x41a4c5\n    int128_t v166 = v158; // 0x41a4c5\n    int64_t v167 = v157; // 0x41a4c5\n    int32_t v168; // 0x419cf0\n    int32_t v169 = v168; // 0x41a4c5\n    char v170 = v156; // 0x41a4c5\n    int64_t v171 = v155; // 0x41a4c5\n    int64_t v172 = v154; // 0x41a4c5\n    int64_t v173 = v153; // 0x41a4c5\n    int64_t v174 = v162; // 0x41a4c5\n    int64_t v175; // 0x419cf0\n    int64_t v176; // 0x419cf0\n    int128_t v177; // 0x419cf0\n    int32_t v178; // 0x419cf0\n    int128_t v179; // 0x419cf0\n    char v180; // 0x419cf0\n    int64_t v181; // 0x419cf0\n    int64_t v182; // 0x419cf0\n    char v183; // 0x419cf0\n    char v184; // 0x419cf0\n    int64_t v185; // 0x419cf0\n    int64_t v186; // 0x419cf0\n    if (v185 != v162) {\n        goto lab_0x41a30a;\n    } else {\n        int32_t memcmp_rc2 = memcmp((int64_t *)str6, (int64_t *)str2, n2); // 0x41a4db\n        v182 = v161;\n        v184 = v160;\n        v183 = v159;\n        v179 = v158;\n        v186 = v157;\n        v178 = n2;\n        v177 = v121;\n        v180 = v156;\n        v181 = v155;\n        v176 = v154;\n        v175 = v153;\n        v163 = v161;\n        v164 = v160;\n        v165 = v159;\n        v166 = v158;\n        v167 = v157;\n        v169 = v168;\n        v170 = v156;\n        v171 = v155;\n        v172 = v154;\n        v173 = v153;\n        v174 = v162;\n        if (memcmp_rc2 != 0) {\n            goto lab_0x41a30a;\n        } else {\n            goto lab_0x419fd1;\n        }\n    }\n  lab_0x41a668:;\n    int128_t v187 = v122;\n    int32_t v188 = v124;\n    int128_t v189 = v126;\n    int64_t v190 = v119 - v137; // 0x41a670\n    int64_t v191; // 0x419cf0\n    int64_t v192; // 0x419cf0\n    char v193; // 0x419cf0\n    char v194; // 0x419cf0\n    char v195; // 0x419cf0\n    int64_t v196; // 0x419cf0\n    int64_t v197; // 0x419cf0\n    int64_t v198; // 0x419cf0\n    int64_t v199; // 0x419cf0\n    int64_t v200; // 0x419cf0\n    int64_t v201; // 0x419cf0\n    int64_t v202; // 0x419cf0\n    int64_t v203; // 0x419cf0\n    int64_t v204; // 0x419cf0\n    int64_t v205; // 0x419cf0\n    char v206; // 0x419cf0\n    char v207; // 0x419cf0\n    char v208; // 0x419cf0\n    char v209; // 0x419cf0\n    char v210; // 0x419cf0\n    char v211; // 0x419cf0\n    char v212; // 0x419cf0\n    char v213; // 0x419cf0\n    char v214; // 0x419cf0\n    if (v190 == 0) {\n        // 0x41ab74\n        v200 = v131;\n        v209 = v135;\n        if (v133 == 0) {\n            goto lab_0x41a838;\n        } else {\n            // 0x41ab7c\n            v201 = v131;\n            v210 = v135;\n            v207 = v133;\n            v194 = v127;\n            v196 = v129;\n            v202 = v131;\n            v211 = v135;\n            v208 = v133;\n            v195 = 0;\n            v197 = v129;\n            if (v127 == 0) {\n                goto lab_0x41a88c;\n            } else {\n                goto lab_0x41a87e;\n            }\n        }\n    } else {\n        // 0x41a67b\n        v204 = v131;\n        v213 = v135;\n        v192 = v190;\n        if (v133 == 0) {\n            goto lab_0x41a69f;\n        } else {\n            // 0x41a67f\n            v203 = v131;\n            v212 = v135;\n            v198 = v129;\n            v191 = v190;\n            v205 = v131;\n            v214 = v135;\n            v206 = v133;\n            v193 = v127;\n            v199 = v129;\n            if (v127 != 0) {\n                goto lab_0x41a6e1;\n            } else {\n                goto lab_0x41a686;\n            }\n        }\n    }\n  lab_0x419fb5:;\n    int64_t v215 = v142;\n    int64_t v216 = v143;\n    int64_t v217 = v148;\n    char v218 = v147;\n    int128_t v219 = v144;\n    int32_t v220 = v145;\n    int64_t v221 = v152;\n    int128_t v222 = v146;\n    char v223 = v150;\n    char v224 = v151;\n    int64_t v225 = v149;\n    v132 = v225;\n    v136 = v224;\n    v134 = v223;\n    v125 = v222;\n    v138 = v221;\n    v123 = v220;\n    v121 = v219;\n    v128 = v218;\n    v130 = v217;\n    v120 = v216;\n    v118 = v215;\n    bool v226; // 0x419cf0\n    if (v226) {\n        goto lab_0x41a4b8;\n    } else {\n        // 0x419fc0\n        v182 = v225;\n        v184 = v224;\n        v183 = v223;\n        v179 = v222;\n        v186 = v221;\n        v178 = v220;\n        v177 = v219;\n        v180 = v218;\n        v181 = v217;\n        v176 = v216;\n        v175 = v215;\n        v76 = v225;\n        v78 = v224;\n        v80 = v223;\n        v82 = v222;\n        v84 = v221;\n        v86 = v220;\n        v87 = v168;\n        v89 = v218;\n        v91 = v217;\n        v92 = v216;\n        v94 = v215;\n        if (v107 != v37) {\n            goto lab_0x41a302_3;\n        } else {\n            goto lab_0x419fd1;\n        }\n    }\n  lab_0x41a30a:;\n    int64_t v227 = v163; // 0x41a31e\n    char v228 = v164; // 0x41a31e\n    char v229 = v165; // 0x41a31e\n    int64_t v230 = v174 + str6; // 0x41a31e\n    int128_t v231 = v166; // 0x41a31e\n    int64_t v232 = v167; // 0x41a31e\n    int32_t v233 = v169; // 0x41a31e\n    char v234 = v170; // 0x41a31e\n    int64_t v235 = v171; // 0x41a31e\n    int64_t v236 = v172; // 0x41a31e\n    int64_t v237 = v115 + 1; // 0x41a31e\n    int64_t v238 = v173; // 0x41a31e\n    goto lab_0x419f20;\n  lab_0x419fd1:\n    // 0x419fd1\n    v93 = v175;\n    int64_t v244 = v176;\n    v90 = v181;\n    v88 = v180;\n    v85 = v178;\n    v83 = v186;\n    v81 = v179;\n    v79 = v183;\n    v77 = v184;\n    v75 = v182;\n    int128_t v245 = __asm_movdqa((int128_t)str6); // 0x419fd6\n    int128_t v246 = __asm_movdqa(0); // 0x419fef\n    v47 = 0;\n    int64_t v247 = __asm_movaps(v245); // 0x41a000\n    int128_t v248 = __asm_movdqa(v177); // 0x41a010\n    int128_t v249; // 0x419cf0\n    int128_t v250 = __asm_movdqa(v249); // 0x41a023\n    int64_t v251 = __asm_movaps(v246); // 0x41a02f\n    __asm_movaps(v248);\n    __asm_movaps(v250);\n    ps2 = 0;\n    int64_t v252; // 0x419cf0\n    if ((*v31 & v32) == 0) {\n        // 0x41a8b8\n        if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps2) == 0) {\n            // break -> 0x41ab8c\n            goto lab_0x41ab8c_5;\n        }\n        // 0x41a8c8\n        v47 = 1;\n        int64_t v253 = function_4085c0(str2, (int64_t)__ctype_get_mb_cur_max()); // 0x41a8e7\n        int64_t v254 = function_40ab50((int64_t *)&v50, str2, v253); // 0x41a901\n        result2 = -1;\n        switch (v254) {\n            case -1: {\n                goto lab_0x419e4d_2;\n            }\n            case -2: {\n                // 0x419e4d\n                return strlen((char *)str2);\n            }\n            default: {\n                int64_t v255 = v254; // 0x41a925\n                if (v254 == 0) {\n                    if (v2 != 0) {\n                        // 0x41aba5\n                        __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                        return &g127;\n                    }\n                    // 0x41a944\n                    v255 = 1;\n                    if (v50 != 0) {\n                        goto lab_0x41aaaa_6;\n                    }\n                }\n                int64_t v256 = v255;\n                int32_t v257 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps2); // 0x41a963\n                v252 = v256;\n                if (v257 != 0) {\n                    // 0x41a96c\n                    v47 = 0;\n                    v252 = v256;\n                }\n                goto lab_0x41a09a;\n            }\n        }\n    } else {\n        // 0x41a077\n        v50 = v2;\n        v252 = 1;\n        goto lab_0x41a09a;\n    }\n  lab_0x41a838:;\n    char v258 = v209;\n    int64_t str7 = v200;\n    char v259 = v258; // 0x41a83d\n    int32_t v260; // 0x419cf0\n    int32_t v261; // bp-276, 0x419cf0\n    char v262; // 0x419cf0\n    int64_t v263; // 0x419cf0\n    int64_t v264; // 0x419cf0\n    char v265; // 0x419cf0\n    int64_t ps5; // bp-308, 0x419cf0\n    char v266; // 0x419cf0\n    if (v258 != 0) {\n        goto lab_0x41a998;\n    } else {\n        unsigned char v267 = *(char *)str7; // 0x41a848\n        int32_t v268 = *(int32_t *)((int64_t)(4 * v267 / 32) + (int64_t)&g24); // 0x41a853\n        if ((1 << (int32_t)(v267 % 32) & v268) == 0) {\n            int32_t v269 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps5); // 0x41a986\n            v259 = 1;\n            if (v269 == 0) {\n                // break -> 0x41ab8c\n                goto lab_0x41ab8c_5;\n            }\n            goto lab_0x41a998;\n        } else {\n            int32_t v270 = v267; // 0x41a875\n            v261 = v270;\n            v260 = v270;\n            v264 = str7;\n            v266 = v258;\n            v265 = 1;\n            v262 = 1;\n            v263 = 1;\n            goto lab_0x41a87e_2;\n        }\n    }\n  lab_0x41a69f:;\n    int64_t v271 = v192;\n    char v272 = v213;\n    int64_t str8 = v204;\n    char v273 = v272; // 0x41a6a4\n    if (v272 != 0) {\n        goto lab_0x41a73f;\n    } else {\n        unsigned char v274 = *(char *)str8; // 0x41a6af\n        int32_t v275 = *(int32_t *)((int64_t)(4 * v274 / 32) + (int64_t)&g24); // 0x41a6ba\n        if ((1 << (int32_t)(v274 % 32) & v275) == 0) {\n            int32_t v276 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps5); // 0x41a72d\n            v273 = 1;\n            if (v276 == 0) {\n                // break -> 0x41ab8c\n                goto lab_0x41ab8c_5;\n            }\n            goto lab_0x41a73f;\n        } else {\n            // 0x41a6c7\n            v261 = v274;\n            v205 = str8;\n            v214 = v272;\n            v206 = 1;\n            v193 = 1;\n            v199 = 1;\n            goto lab_0x41a6e1;\n        }\n    }\n  lab_0x41a302_3:\n    // 0x41a302\n    v163 = v76;\n    v164 = v78;\n    v165 = v80;\n    v166 = v82;\n    v167 = v84;\n    v169 = v87;\n    v170 = v89;\n    v171 = v91;\n    v172 = v92;\n    v173 = v94;\n    v174 = v86;\n    goto lab_0x41a30a;\n  lab_0x41a998:;\n    char v277 = v259;\n    int64_t v278 = function_4085c0(str7, (int64_t)__ctype_get_mb_cur_max()); // 0x41a9a8\n    int64_t v279 = function_40ab50((int64_t *)&v261, str7, v278); // 0x41a9c1\n    v202 = str7;\n    v211 = v277;\n    v208 = 1;\n    v195 = 0;\n    v197 = 1;\n    switch (v279) {\n        case -1: {\n            goto lab_0x41a88c;\n        }\n        case -2: {\n            int32_t len6 = strlen((char *)str7); // 0x41ab18\n            v202 = str7;\n            v211 = v277;\n            v208 = 1;\n            v195 = 0;\n            v197 = len6;\n            goto lab_0x41a88c;\n        }\n        default: {\n            int64_t v280 = v279; // 0x41a9e2\n            if (v279 == 0) {\n                // 0x41a9e4\n                if (*(char *)str7 != 0) {\n                    // 0x41aba5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g127;\n                }\n                // 0x41a9fb\n                v280 = 1;\n                if (v261 != 0) {\n                    goto lab_0x41aaaa_6;\n                }\n            }\n            int32_t v281 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps5); // 0x41aa13\n            v201 = str7;\n            v210 = v281 == 0 ? v277 : 0;\n            v207 = 1;\n            v194 = 1;\n            v196 = v280;\n            goto lab_0x41a87e;\n        }\n    }\n  lab_0x41a88c:;\n    int64_t v282 = v202; // 0x41a894\n    char v283 = v211; // 0x41a894\n    char v284 = v208; // 0x41a894\n    char v285 = v195; // 0x41a894\n    int64_t v286 = v197; // 0x41a894\n    int64_t v287 = 1; // 0x41a894\n    goto lab_0x41a89a;\n  lab_0x41a87e:\n    // 0x41a87e\n    v260 = v261;\n    v264 = v201;\n    v266 = v210;\n    v265 = v207;\n    v262 = v194;\n    v263 = v196;\n    goto lab_0x41a87e_2;\n  lab_0x41a73f:;\n    char v298 = v273;\n    int64_t v299 = function_4085c0(str8, (int64_t)__ctype_get_mb_cur_max()); // 0x41a74f\n    int64_t v300 = function_40ab50((int64_t *)&v261, str8, v299); // 0x41a768\n    v203 = str8;\n    v212 = v298;\n    v198 = 1;\n    v191 = v271;\n    switch (v300) {\n        case -1: {\n            goto lab_0x41a686;\n        }\n        case -2: {\n            int32_t len7 = strlen((char *)str8); // 0x41a7ed\n            v203 = str8;\n            v212 = v298;\n            v198 = len7;\n            v191 = v271;\n            goto lab_0x41a686;\n        }\n        default: {\n            int64_t v301 = v300; // 0x41a781\n            if (v300 == 0) {\n                // 0x41a783\n                if (*(char *)str8 != 0) {\n                    // 0x41aba5\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    return &g127;\n                }\n                // 0x41a79a\n                v301 = 1;\n                if (v261 != 0) {\n                    goto lab_0x41aaaa_6;\n                }\n            }\n            int32_t v302 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps5); // 0x41a7b2\n            v205 = str8;\n            v214 = v302 == 0 ? v298 : 0;\n            v206 = 1;\n            v193 = 1;\n            v199 = v301;\n            goto lab_0x41a6e1;\n        }\n    }\n  lab_0x41a6e1:;\n    int64_t v289 = v205; // 0x41a6e9\n    char v290 = v214; // 0x41a6e9\n    char v291 = v206; // 0x41a6e9\n    char v292 = v193; // 0x41a6e9\n    int64_t v293 = v199; // 0x41a6e9\n    if (v261 != 0) {\n        goto lab_0x41a686;\n    } else {\n        goto lab_0x41a6f6;\n    }\n  lab_0x41a686:;\n    int64_t v303 = v198 + v203; // 0x41a690\n    int64_t v304 = v191 - 1; // 0x41a695\n    v204 = v303;\n    v213 = v212;\n    v192 = v304;\n    v200 = v303;\n    v209 = v212;\n    if (v304 == 0) {\n        goto lab_0x41a838;\n    } else {\n        goto lab_0x41a69f;\n    }\n  lab_0x41a09a:\n    // 0x41a09a\n    v99 = v252 + str2;\n    v100 = v247 + (int64_t)v168;\n    v101 = v251;\n    v55 = v244;\n    while (true) {\n      lab_0x41a1f5:\n        // 0x41a1f5\n        v59 = v101;\n        str5 = v100;\n        str3 = v99;\n        if (v47 == 0) {\n            unsigned char v102 = *(char *)str3; // 0x41a0d8\n            int32_t v103 = *(int32_t *)((int64_t)(4 * v102 / 32) + (int64_t)&g24); // 0x41a0e3\n            if ((1 << (int32_t)(v102 % 32) & v103) == 0) {\n                // 0x41a450\n                if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps2) == 0) {\n                    // break (via goto) -> 0x41ab8c\n                    goto lab_0x41ab8c_5;\n                }\n                // 0x41a465\n                v47 = 1;\n                goto lab_0x41a203;\n            } else {\n                // 0x41a0f4\n                v50 = v102;\n                result2 = str6;\n                len3 = 1;\n                v52 = 1;\n                if (v102 == 0) {\n                    // 0x419e4d\n                    return result2;\n                }\n                goto lab_0x41a137;\n            }\n        } else {\n            goto lab_0x41a203;\n        }\n    }\n    goto lab_0x41a302_3;\n  lab_0x41a89a:;\n    int64_t v288 = v119 + 1; // 0x41a89a\n    v149 = v282;\n    v151 = v283;\n    v150 = v284;\n    v146 = v189;\n    v152 = v119;\n    v145 = v188;\n    v144 = v187;\n    v147 = v285;\n    v148 = v286;\n    v143 = v288;\n    v142 = v287;\n    v132 = v282;\n    v136 = v283;\n    v134 = v284;\n    v125 = v189;\n    v138 = v119;\n    v123 = v188;\n    v121 = v187;\n    v128 = v285;\n    v130 = v286;\n    v120 = v288;\n    v118 = v287;\n    if ((char)v187 != 0) {\n        goto lab_0x419fb5;\n    } else {\n        goto lab_0x41a4b8;\n    }\n  lab_0x41a87e_2:\n    // 0x41a87e\n    v289 = v264;\n    v290 = v266;\n    v291 = v265;\n    v292 = v262;\n    v293 = v263;\n    v202 = v264;\n    v211 = v266;\n    v208 = v265;\n    v195 = v262;\n    v197 = v263;\n    if (v260 == 0) {\n        goto lab_0x41a6f6;\n    } else {\n        goto lab_0x41a88c;\n    }\n  lab_0x41a6f6:;\n    int64_t v294 = function_419310(result, str2, (int64_t *)&v47); // 0x41a704\n    if ((char)v294 != 0) {\n        // 0x41ab31\n        result2 = v47;\n        goto lab_0x419e4d_2;\n    }\n    // 0x41a714\n    v282 = v289;\n    v283 = v290;\n    v284 = v291;\n    v285 = v292;\n    v286 = v293;\n    v287 = v294 & 0xffffffff;\n    goto lab_0x41a89a;\n  lab_0x419ec7:\n    // 0x419ec7\n    v226 = v38;\n    v185 = len;\n    ps5 = 0;\n    ps4 = 0;\n    v227 = str2;\n    v228 = 0;\n    v229 = 0;\n    v230 = result;\n    v231 = 0;\n    v232 = 0;\n    int32_t v295; // 0x419cf0\n    v233 = v295;\n    char v296; // 0x419cf0\n    v234 = v296;\n    int64_t v297; // 0x419cf0\n    v235 = v297;\n    v236 = 0;\n    v237 = 0;\n    v238 = 1;\n    while (true) {\n      lab_0x419f20:\n        // 0x419f20\n        v116 = v238;\n        v115 = v237;\n        v119 = v236;\n        v129 = v235;\n        v127 = v234;\n        v168 = v233;\n        v137 = v232;\n        int128_t v239 = v231;\n        str6 = v230;\n        v133 = v229;\n        v135 = v228;\n        v131 = v227;\n        v104 = v239;\n        if ((char)v239 != 0) {\n            goto lab_0x41a539;\n        } else {\n            unsigned char v240 = *(char *)str6; // 0x419f3e\n            int32_t v241 = *(int32_t *)((int64_t)(4 * v240 / 32) + (int64_t)&g24); // 0x419f49\n            if ((1 << (int32_t)(v240 % 32) & v241) == 0) {\n                int32_t v242 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps4); // 0x41a524\n                v104 = 1;\n                if (v242 == 0) {\n                    // break -> 0x41ab8c\n                    break;\n                }\n                goto lab_0x41a539;\n            } else {\n                int32_t v243 = v240; // 0x419f71\n                v107 = v243;\n                v109 = v243;\n                v111 = v239;\n                v110 = 1;\n                goto lab_0x419f80;\n            }\n        }\n    }\n  lab_0x41ab8c_5:\n    // 0x41ab8c\n    __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n    // 0x41aba5\n    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n    return &g127;\n  lab_0x419e42:\n    // 0x419e42\n    len = v39;\n    v38 = false;\n    v295 = v34;\n    v296 = v35;\n    v297 = v36;\n    if (v33 == 0) {\n        // 0x419e4d\n        return result;\n    }\n    goto lab_0x419ec7;\n}\n"
        },
        {
            "funcName": "function_41abc0",
            "funcStartAddr": "41abc0",
            "funcEndAddr": "41ae09",
            "decompiledFuncCode": "int64_t function_41abc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x41abc0\n    int64_t outbytesleft3; // bp-4152, 0x41abc0\n    int64_t v1 = &outbytesleft3; // 0x41abe6\n    int64_t * cd = (int64_t *)a3; // 0x41ac04\n    iconv(cd, NULL, NULL, NULL, NULL);\n    int64_t inbuf = a1; // bp-4184, 0x41ac09\n    int64_t inbytesleft = a2; // bp-4176, 0x41ac11\n    char ** outbuf2; // 0x41abc0\n    int32_t * outbytesleft2; // 0x41abc0\n    int64_t v2; // 0x41abc0\n    int64_t outbytesleft; // bp-4160, 0x41abc0\n    int64_t outbuf; // bp-4168, 0x41abc0\n    if (a2 != 0) {\n        int64_t v3 = 0; // 0x41ac28\n        outbuf = v1;\n        outbytesleft = 0x1000;\n        int32_t v4 = iconv(cd, (char **)&inbuf, (int32_t *)&inbytesleft, (char **)&outbuf, (int32_t *)&outbytesleft); // 0x41ac54\n        if (v4 == -1) {\n            // 0x41ac5f\n            if (*__errno_location() != 7) {\n                // 0x41ac6b\n            }\n        }\n        // 0x41ac20\n        v3 += outbuf - v1;\n        outbytesleft2 = (int32_t *)&outbytesleft;\n        outbuf2 = (char **)&outbuf;\n        v2 = v3;\n        while (inbytesleft != 0) {\n            // 0x41ac33\n            outbuf = v1;\n            outbytesleft = 0x1000;\n            v4 = iconv(cd, (char **)&inbuf, (int32_t *)&inbytesleft, (char **)&outbuf, (int32_t *)&outbytesleft);\n            if (v4 == -1) {\n                // 0x41ac5f\n                if (*__errno_location() != 7) {\n                    // 0x41ac6b\n                    outbytesleft2 = (int32_t *)&outbytesleft;\n                }\n            }\n            // 0x41ac20\n            v3 += outbuf - v1;\n            outbytesleft2 = (int32_t *)&outbytesleft;\n            outbuf2 = (char **)&outbuf;\n            v2 = v3;\n        }\n    } else {\n        // 0x41abc0\n        outbytesleft2 = (int32_t *)&outbytesleft;\n        outbuf2 = (char **)&outbuf;\n        v2 = 0;\n    }\n    goto lab_0x41ac74;\n  lab_0x41ad3a:;\n    // 0x41ad3a\n    int64_t v8; // 0x41abc0\n    int64_t v5; // 0x41acc9\n    if (iconv(cd, NULL, NULL, (char **)&outbytesleft, (int32_t *)&outbytesleft3) != -1) {\n        // 0x41ad56\n        *(int64_t *)a4 = v8;\n        *(int64_t *)a5 = v5;\n        // 0x41ad78\n        return 0;\n    }\n    goto lab_0x41adde;\n  lab_0x41ac74:\n    // 0x41ac74\n    outbuf = v1;\n    outbytesleft = 0x1000;\n    if (iconv(cd, NULL, NULL, outbuf2, outbytesleft2) == -1) {\n        // 0x41ad78\n        return 0xffffffff;\n    }\n    int64_t size = outbuf - v1 + v2; // 0x41aca6\n    if (size == 0) {\n        // 0x41adc0\n        *(int64_t *)a5 = 0;\n        // 0x41ad78\n        return 0;\n    }\n    // 0x41acc4\n    v5 = 0x100000000 * size >> 32;\n    int64_t * v6 = &outbuf; // 0x41acd0\n    if (v5 > (int64_t)&outbytesleft) {\n        int64_t * mem = malloc((int32_t)size); // 0x41ad94\n        v6 = mem;\n        if (mem == NULL) {\n            // 0x41ada5\n            *__errno_location() = 12;\n            // 0x41ad78\n            return 0xffffffff;\n        }\n    }\n    int64_t * v7 = v6;\n    v8 = (int64_t)v7;\n    iconv(cd, NULL, NULL, NULL, NULL);\n    outbuf = a2;\n    outbytesleft = v8;\n    inbytesleft = a1;\n    outbytesleft3 = v5;\n    if (a2 != 0) {\n        while (iconv(cd, (char **)&inbytesleft, (int32_t *)&outbuf, (char **)&outbytesleft, (int32_t *)&outbytesleft3) != -1) {\n            // 0x41ad30\n            if (outbuf == 0) {\n                goto lab_0x41ad3a;\n            }\n        }\n        // 0x41add0\n        if (*__errno_location() == 22) {\n            goto lab_0x41ad3a;\n        } else {\n            goto lab_0x41adde;\n        }\n    } else {\n        // 0x41acd6\n        goto lab_0x41ad3a;\n    }\n  lab_0x41adde:\n    // 0x41adde\n    if (&outbytesleft != v7) {\n        int32_t * v9 = __errno_location(); // 0x41aded\n        free(v7);\n    }\n    // 0x41ad78\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_41ae10",
            "funcStartAddr": "41ae10",
            "funcEndAddr": "41afd5",
            "decompiledFuncCode": "int64_t function_41ae10(int64_t str, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t inbuf = str; // bp-88, 0x41ae21\n    int32_t len = strlen((char *)str); // 0x41ae25\n    int64_t v1 = len; // 0x41ae25\n    int64_t inbytesleft = v1; // bp-80, 0x41ae2d\n    int64_t v2 = len >= 0x10000000 ? v1 : 16 * v1; // 0x41ae3c\n    int64_t size = v2 + 1; // 0x41ae40\n    int64_t * mem = malloc((int32_t)size); // 0x41ae47\n    int64_t result = (int64_t)mem; // 0x41ae47\n    if (mem == NULL) {\n        // 0x41afc8\n        *__errno_location() = 12;\n        // 0x41afb2\n        return result;\n    }\n    int64_t * cd = (int64_t *)a2; // 0x41ae64\n    iconv(cd, NULL, NULL, NULL, NULL);\n    char * outbuf = (char *)mem; // bp-72, 0x41ae69\n    int64_t outbytesleft = v2;\n    int32_t v3 = iconv(cd, (char **)&inbuf, (int32_t *)&inbytesleft, &outbuf, (int32_t *)&outbytesleft); // 0x41aeee\n    int64_t v4 = result; // 0x41aef7\n    int64_t v5 = result; // 0x41aef7\n    int64_t v6 = size; // 0x41aef7\n    int64_t v7; // 0x41ae10\n    int64_t v8; // 0x41ae10\n    int32_t * v9; // 0x41ae10\n    if (v3 == -1) {\n        int64_t v10 = size;\n        int32_t * v11 = __errno_location(); // 0x41ae78\n        int32_t v12 = *v11; // 0x41ae80\n        v5 = v4;\n        v6 = v10;\n        while (v12 != 22) {\n            // 0x41ae8b\n            v8 = v4;\n            if (v12 != 7) {\n                goto lab_0x41afa7;\n            }\n            int64_t v13 = 2 * v10; // 0x41ae99\n            v7 = v4;\n            v9 = v11;\n            if (v10 >= v13) {\n                goto lab_0x41afa0_4;\n            }\n            int64_t * mem2 = realloc((int64_t *)v4, (int32_t)v13); // 0x41aeb0\n            v7 = v4;\n            v9 = v11;\n            if (mem2 == NULL) {\n                goto lab_0x41afa0_4;\n            }\n            int64_t v14 = (int64_t)outbuf - v4; // 0x41ae9e\n            v4 = (int64_t)mem2;\n            outbuf = (char *)(v14 + v4);\n            outbytesleft = v13 + -1 - v14;\n            int32_t v15 = iconv(cd, (char **)&inbuf, (int32_t *)&inbytesleft, &outbuf, (int32_t *)&outbytesleft); // 0x41aeee\n            v5 = v4;\n            v6 = v13;\n            if (v15 != -1) {\n                // break -> 0x41af4e\n                break;\n            }\n            v10 = v13;\n            v11 = __errno_location();\n            v12 = *v11;\n            v5 = v4;\n            v6 = v10;\n        }\n    }\n    int32_t v16 = iconv(cd, NULL, NULL, &outbuf, (int32_t *)&outbytesleft); // 0x41af5f\n    int64_t v17 = v6; // 0x41af68\n    int64_t v18 = v5; // 0x41af68\n    int64_t v19 = v5; // 0x41af68\n    int64_t v20 = v6; // 0x41af68\n    if (v16 == -1) {\n        int32_t * v21 = __errno_location(); // 0x41af00\n        v8 = v18;\n        while (*v21 == 7) {\n            uint64_t v22 = v17;\n            v17 = 2 * v22;\n            v7 = v18;\n            v9 = v21;\n            if (v22 >= v17) {\n                goto lab_0x41afa0_4;\n            }\n            int64_t * mem3 = realloc((int64_t *)v18, (int32_t)v17); // 0x41af29\n            v7 = v18;\n            v9 = v21;\n            if (mem3 == NULL) {\n                goto lab_0x41afa0_4;\n            }\n            int64_t v23 = (int64_t)outbuf - v18; // 0x41af1b\n            v18 = (int64_t)mem3;\n            outbuf = (char *)(v23 + v18);\n            outbytesleft = v17 + -1 - v23;\n            int32_t v24 = iconv(cd, NULL, NULL, &outbuf, (int32_t *)&outbytesleft); // 0x41af5f\n            v19 = v18;\n            v20 = v17;\n            if (v24 != -1) {\n                goto lab_0x41af6a;\n            }\n            v21 = __errno_location();\n            v8 = v18;\n        }\n      lab_0x41afa7:\n        // 0x41afa7\n        free((int64_t *)v8);\n        // 0x41afb2\n        return 0;\n    }\n  lab_0x41af6a:;\n    char * v25 = outbuf; // 0x41af6a\n    outbuf = (char *)((int64_t)v25 + 1);\n    *v25 = 0;\n    uint64_t v26 = (int64_t)outbuf - v19; // 0x41af80\n    int64_t result2 = v19; // 0x41af86\n    if (v20 > v26) {\n        int64_t * mem4 = realloc((int64_t *)v19, (int32_t)v26); // 0x41af8b\n        result2 = mem4 != NULL ? (int64_t)mem4 : v19;\n    }\n    // 0x41afb2\n    return result2;\n  lab_0x41afa0_4:\n    // 0x41afa0\n    *v9 = 12;\n    v8 = v7;\n    goto lab_0x41afa7;\n}\n"
        },
        {
            "funcName": "function_41afe0",
            "funcStartAddr": "41afe0",
            "funcEndAddr": "41b0cc",
            "decompiledFuncCode": "int64_t function_41afe0(int64_t str, int64_t fromcode, int64_t a3) {\n    // 0x41afe0\n    int64_t v1; // 0x41afe0\n    if ((char)v1 != 0) {\n        char * tocode = (char *)a3; // 0x41affe\n        if ((int32_t)function_418a20(fromcode, tocode, a3) != 0) {\n            int64_t * cd = iconv_open(tocode, (char *)fromcode); // 0x41b02e\n            if (cd == (int64_t *)-1) {\n                // 0x41b017\n                return 0;\n            }\n            int64_t v2 = function_41ae10(str, (int64_t)cd, a3, v1, v1); // 0x41b042\n            if (v2 == 0) {\n                int32_t * v3 = __errno_location(); // 0x41b0b0\n                iconv_close(cd);\n                // 0x41b017\n                return 0;\n            }\n            int64_t result = v2; // 0x41b059\n            if (iconv_close(cd) < 0) {\n                int32_t * v4 = __errno_location(); // 0x41b05b\n                free((int64_t *)v2);\n                result = 0;\n            }\n            // 0x41b017\n            return result;\n        }\n    }\n    char * v5 = strdup((char *)str); // 0x41b00a\n    int64_t result2 = (int64_t)v5; // 0x41b00a\n    if (v5 != NULL) {\n        // 0x41b017\n        return result2;\n    }\n    // 0x41b080\n    *__errno_location() = 12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_41b0d0",
            "funcStartAddr": "41b0d0",
            "funcEndAddr": "41b13c",
            "decompiledFuncCode": "int64_t function_41b0d0(uint64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x41b0d0\n    if (a1 > 0xffffffffffffffef) {\n        // 0x41b12e\n        return 0;\n    }\n    int64_t * mem = malloc((int32_t)a1 + 16); // 0x41b0da\n    int64_t result = 0; // 0x41b0e7\n    if (mem != NULL) {\n        int64_t v1 = (int64_t)mem; // 0x41b0da\n        result = v1 + 16;\n        *(int32_t *)(v1 + 12) = 0x1415fb4a;\n        int64_t v2 = g122; // 0x41b11b\n        g122 = result;\n        *mem = v2;\n    }\n    // 0x41b12e\n    return result;\n}\n"
        },
        {
            "funcName": "function_41b140",
            "funcStartAddr": "41b140",
            "funcEndAddr": "41b1c6",
            "decompiledFuncCode": "int64_t function_41b140(int64_t a1) {\n    if (a1 == 0 || *(int32_t *)(a1 - 4) != 0x1415fb4a) {\n        // 0x41b14e\n        int64_t result; // 0x41b140\n        return result;\n    }\n    // 0x41b150\n    if (g122 == 0) {\n        // 0x41b14e\n        return 0;\n    }\n    int64_t * v1 = &g122; // 0x41b184\n    if (g122 == a1) {\n      lab_0x41b1ac:;\n        int64_t * v2 = (int64_t *)(a1 - 16); // 0x41b1ac\n        *v1 = *v2;\n        free(v2);\n        return &g127;\n    }\n    int64_t * v3 = (int64_t *)(g122 - 16);\n    int64_t result2 = *v3; // 0x41b198\n    while (result2 != 0) {\n        // 0x41b190\n        v1 = v3;\n        if (result2 == a1) {\n            goto lab_0x41b1ac;\n        }\n        v3 = (int64_t *)(result2 - 16);\n        result2 = *v3;\n    }\n    // 0x41b14e\n    return result2;\n}\n"
        },
        {
            "funcName": "function_41b1d0",
            "funcStartAddr": "41b1d0",
            "funcEndAddr": "41b3fd",
            "decompiledFuncCode": "int64_t function_41b1d0(int64_t str) {\n    // 0x41b1d0\n    if ((uint32_t)__ctype_get_mb_cur_max() < 2) {\n        // 0x41b1ef\n        return strlen((char *)str);\n    }\n    int64_t ps = 0; // bp-84, 0x41b20b\n    char v1 = 0; // 0x41b219\n    int64_t v2 = str; // 0x41b219\n    int64_t v3 = 0; // 0x41b219\n    int32_t v4; // 0x41b1d0\n    int64_t v5; // 0x41b1d0\n    int32_t v6; // bp-52, 0x41b1d0\n    int64_t v7; // 0x41b1d0\n    int64_t str2; // 0x41b1d0\n    char v8; // 0x41b1d0\n    char v9; // 0x41b1d0\n    while (true) {\n      lab_0x41b271:\n        // 0x41b271\n        v5 = v3;\n        str2 = v2;\n        v9 = v1;\n        if (v1 == 0) {\n            unsigned char v10 = *(char *)str2; // 0x41b225\n            int32_t v11 = *(int32_t *)((int64_t)(4 * v10 / 32) + (int64_t)&g24); // 0x41b230\n            if ((1 << (int32_t)(v10 % 32) & v11) == 0) {\n                int32_t v12 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x41b305\n                v9 = 1;\n                if (v12 == 0) {\n                    // break -> 0x41b351\n                    break;\n                }\n                goto lab_0x41b277;\n            } else {\n                int32_t v13 = v10; // 0x41b252\n                v6 = v13;\n                v4 = v13;\n                v8 = 0;\n                v7 = 1;\n                goto lab_0x41b256;\n            }\n        } else {\n            goto lab_0x41b277;\n        }\n    }\n    // 0x41b351\n    __assert_fail(\"mbsinit (&iter->state)\", \"lib/mbuiter.h\", 150, \"mbuiter_multi_next\");\n    // 0x41b36a\n    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n    // 0x41b383\n    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n    return function_401a88();\n  lab_0x41b277:;\n    char v14 = v9;\n    int64_t v15 = function_4085c0(str2, (int64_t)__ctype_get_mb_cur_max()); // 0x41b287\n    int64_t v16 = function_40ab50((int64_t *)&v6, str2, v15); // 0x41b29c\n    v1 = v14;\n    int64_t len = 1; // 0x41b1d0\n    switch (v16) {\n        case -1: {\n            goto lab_0x41b25e;\n        }\n        case -2: {\n            // 0x41b338\n            v1 = v14;\n            len = strlen((char *)str2);\n            goto lab_0x41b25e;\n        }\n        default: {\n            int64_t v17 = v16; // 0x41b2b9\n            if (v16 == 0) {\n                // 0x41b2bb\n                if (*(char *)str2 != 0) {\n                    // 0x41b36a\n                    __assert_fail(\"*iter->cur.ptr == '\\\\0'\", \"lib/mbuiter.h\", 178, \"mbuiter_multi_next\");\n                    // 0x41b383\n                    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n                    return function_401a88();\n                }\n                // 0x41b2d2\n                v17 = 1;\n                if (v6 != 0) {\n                    // 0x41b383\n                    __assert_fail(\"iter->cur.wc == 0\", \"lib/mbuiter.h\", 179, \"mbuiter_multi_next\");\n                    return function_401a88();\n                }\n            }\n            int32_t v18 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x41b2e8\n            v4 = v6;\n            v8 = v18 == 0 ? v14 : 0;\n            v7 = v17;\n            goto lab_0x41b256;\n        }\n    }\n  lab_0x41b25e:\n    // 0x41b25e\n    v2 = len + str2;\n    v3 = v5 + 1;\n    goto lab_0x41b271;\n  lab_0x41b256:;\n    int64_t result = v5; // 0x41b25c\n    v1 = v8;\n    len = v7;\n    if (v4 == 0) {\n        // 0x41b1ef\n        return result;\n    }\n    goto lab_0x41b25e;\n}\n"
        },
        {
            "funcName": "function_41b400",
            "funcStartAddr": "41b400",
            "funcEndAddr": "41b401",
            "decompiledFuncCode": "int64_t function_41b400(void) {\n    // 0x41b400\n    int64_t result; // 0x41b400\n    return result;\n}\n"
        },
        {
            "funcName": "function_41b410",
            "funcStartAddr": "41b410",
            "funcEndAddr": "41b428",
            "decompiledFuncCode": "int64_t function_41b410(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x41b410\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g29);\n}\n"
        },
        {
            "funcName": "function_41b428",
            "funcStartAddr": "41b428",
            "funcEndAddr": "41b448",
            "decompiledFuncCode": "int64_t function_41b428(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g25; // 0x41b432\n    while (*(int64_t *)v1 != -1) {\n        // 0x41b433\n        v1 -= 8;\n    }\n    // 0x41b444\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_ptx.elf"
}