{
    "funcInfo": [
        {
            "funcName": "function_401580",
            "funcStartAddr": "401580",
            "funcEndAddr": "401585",
            "decompiledFuncCode": "int64_t function_401580(void) {\n    // 0x401580\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401585",
            "funcStartAddr": "401585",
            "funcEndAddr": "40158a",
            "decompiledFuncCode": "int64_t function_401585(void) {\n    // 0x401585\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40158a",
            "funcStartAddr": "40158a",
            "funcEndAddr": "40158f",
            "decompiledFuncCode": "int64_t function_40158a(void) {\n    // 0x40158a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40158f",
            "funcStartAddr": "40158f",
            "funcEndAddr": "401594",
            "decompiledFuncCode": "int64_t function_40158f(void) {\n    // 0x40158f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401594",
            "funcStartAddr": "401594",
            "funcEndAddr": "401599",
            "decompiledFuncCode": "int64_t function_401594(void) {\n    // 0x401594\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401599",
            "funcStartAddr": "401599",
            "funcEndAddr": "40159e",
            "decompiledFuncCode": "int64_t function_401599(void) {\n    // 0x401599\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4015a0",
            "funcStartAddr": "4015a0",
            "funcEndAddr": "401748",
            "decompiledFuncCode": "int64_t function_4015a0(int64_t a1, int64_t a2) {\n    uint64_t v1 = a1 & 0xffffffff; // 0x4015a3\n    function_401cf0(a2);\n    setlocale(LC_ALL, (char *)&g12);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x4015a0\n    function_405770(0x401b40, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    function_401be0(v1, a2, \"link\", \"GNU coreutils\", (int64_t)g19, 0x401830);\n    int64_t v3 = function_404eb0(v1, a2, (int64_t *)&g12, &g2, 0, 0x401830); // 0x40161f\n    if ((int32_t)v3 != -1) {\n        // 0x401693\n        function_401830(1);\n        // UNREACHABLE\n    }\n    int32_t v4 = *(int32_t *)0x60923c; // 0x40162b\n    int64_t v5 = v4; // 0x40162b\n    int64_t v6 = v5; // 0x401637\n    int64_t v7 = a2; // 0x401637\n    int64_t v8 = v1; // 0x401637\n    if (v1 > (int64_t)(v4 + 1)) {\n        int64_t v9 = 8 * v5 + a2;\n        if ((v5 + 2 & 0xffffffff) < v1) {\n            // 0x401664\n            function_403910(*(int64_t *)(v9 + 16));\n            // 0x40167b\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"extra operand %s\", 5));\n            // 0x401693\n            function_401830(1);\n            // UNREACHABLE\n        }\n        int64_t path1 = *(int64_t *)v9; // 0x40164f\n        if (link((char *)path1, (char *)*(int64_t *)(v9 + 8)) == 0) {\n            // 0x40165d\n            return 0;\n        }\n        // 0x40169d\n        function_4035e0(1, 4, *(int64_t *)(8 * (int64_t)g28 + a2));\n        v8 = function_4035e0(0, 4, *(int64_t *)(a2 + 8 + 8 * (int64_t)g28));\n        char * format = dcgettext(NULL, \"cannot create link %s to %s\", 5); // 0x4016e1\n        error(1, *__errno_location(), format);\n        v6 = &g49;\n        v7 = (int64_t)format;\n    }\n    // 0x401705\n    if (v6 >= v8) {\n        // 0x401709\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n        // 0x401693\n        function_401830(1);\n        // UNREACHABLE\n    }\n    // 0x40172d\n    function_403910(*(int64_t *)(v7 + 8 * v6));\n    // 0x40167b\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing operand after %s\", 5));\n    // 0x401693\n    function_401830(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401750",
            "funcEndAddr": "40177b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401750\n    int64_t v1; // 0x401750\n    __libc_start_main(0x4015a0, (int32_t)a4, (char **)&v1, (void (*)())0x405700, (void (*)())0x405760, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40177b",
            "funcStartAddr": "40177b",
            "funcEndAddr": "40179a",
            "decompiledFuncCode": "int64_t function_40177b(void) {\n    // 0x40177b\n    return &g29;\n}\n"
        },
        {
            "funcName": "function_40179a",
            "funcStartAddr": "40179a",
            "funcEndAddr": "4017d1",
            "decompiledFuncCode": "int64_t function_40179a(void) {\n    // 0x40179a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4017d1",
            "funcStartAddr": "4017d1",
            "funcEndAddr": "401828",
            "decompiledFuncCode": "int64_t function_4017d1(void) {\n    // 0x4017d1\n    if (g33 != 0) {\n        // 0x401827\n        int64_t result; // 0x4017d1\n        return result;\n    }\n    int64_t v1 = g34; // 0x401804\n    int64_t result2; // 0x401816\n    if (g34 >= ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x401816\n        result2 = function_40177b();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x401806\n        v1++;\n    }\n    // 0x4017fa\n    g34 = v1;\n    // 0x401816\n    result2 = function_40177b();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401828",
            "funcStartAddr": "401828",
            "funcEndAddr": "40182d",
            "decompiledFuncCode": "int64_t function_401828(void) {\n    // 0x401828\n    return function_40179a();\n}\n"
        },
        {
            "funcName": "function_401830",
            "funcStartAddr": "401830",
            "funcEndAddr": "401b1d",
            "decompiledFuncCode": "int64_t function_401830(int64_t a1) {\n    int32_t status = a1; // 0x401846\n    if (status != 0) {\n        // 0x40184a\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40186f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401876\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s FILE1 FILE2\\n  or:  %s OPTION\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Call the link function to create a link named FILE2 to an existing FILE1.\\n\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    int64_t v1 = &g1; // bp-136, 0x401900\n    bool v2; // 0x401830\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x401980\n    int64_t v6 = *(int64_t *)v5; // 0x401984\n    int64_t v7 = 5; // 0x40198a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"link\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x401996\n        char v11 = *(char *)v9; // 0x401996\n        char v12 = v11; // 0x401996\n        bool v13 = false; // 0x401996\n        while (v10 == v11) {\n            // 0x40198c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x401996\n            int64_t v15 = v8 + v3; // 0x401996\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4019a2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x4019a2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x401ab4;\n        } else {\n            // 0x401a9e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401af3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401a04;\n            } else {\n                goto lab_0x401ab4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x401a04;\n        } else {\n            // 0x4019ea\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401af3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401a04;\n            } else {\n                goto lab_0x401a04;\n            }\n        }\n    }\n  lab_0x401ab4:\n    // 0x401ab4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401a44\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40186f\n    exit(status);\n    // UNREACHABLE\n  lab_0x401a04:\n    // 0x401a04\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401a44\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40186f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b20",
            "funcStartAddr": "401b20",
            "funcEndAddr": "401b28",
            "decompiledFuncCode": "int64_t function_401b20(int64_t a1) {\n    // 0x401b20\n    g36 = a1;\n    int64_t result; // 0x401b20\n    return result;\n}\n"
        },
        {
            "funcName": "function_401b30",
            "funcStartAddr": "401b30",
            "funcEndAddr": "401b38",
            "decompiledFuncCode": "int64_t function_401b30(int64_t a1) {\n    // 0x401b30\n    g35 = a1;\n    int64_t result; // 0x401b30\n    return result;\n}\n"
        },
        {
            "funcName": "function_401b40",
            "funcStartAddr": "401b40",
            "funcEndAddr": "401bde",
            "decompiledFuncCode": "int64_t function_401b40(void) {\n    // 0x401b40\n    int32_t * err_num; // 0x401b56\n    if ((int32_t)function_404fb0((int64_t)g30) == 0) {\n        goto lab_0x401b6c;\n    } else {\n        // 0x401b56\n        err_num = __errno_location();\n        if (g35 == 0) {\n            goto lab_0x401b83;\n        } else {\n            // 0x401b67\n            if (*err_num != 32) {\n                goto lab_0x401b83;\n            } else {\n                goto lab_0x401b6c;\n            }\n        }\n    }\n  lab_0x401b6c:;\n    int64_t result = function_404fb0((int64_t)g32); // 0x401b73\n    if ((int32_t)result == 0) {\n        // 0x401b7c\n        return result;\n    }\n    // 0x401bbe\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x401b83:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x401b8f\n    if (g36 == 0) {\n        // 0x401bc9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x401ba3\n        error(0, *err_num, \"%s: %s\", (char *)function_403760((int64_t)g36), v1);\n    }\n    // 0x401bbe\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401be0",
            "funcStartAddr": "401be0",
            "funcEndAddr": "401ce2",
            "decompiledFuncCode": "int64_t function_401be0(int64_t a1, int64_t a2, char * a3, char * a4, int64_t a5, int64_t a6) {\n    // 0x401be0\n    int64_t v1; // 0x401be0\n    if ((char)v1 != 0) {\n        // 0x401bf3\n        int128_t v2; // 0x401be0\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int32_t v3 = g27; // 0x401c2a\n    g27 = 0;\n    if ((int32_t)a1 != 2) {\n        // 0x401c3f\n        g27 = v3;\n        g28 = 0;\n        int64_t result; // 0x401be0\n        return result;\n    }\n    int64_t result2 = function_404eb0(a1, a2, &g3, (int64_t *)&g4, 0, a6); // 0x401c79\n    int32_t v4 = result2; // 0x401c7e\n    switch (v4) {\n        default: {\n            // 0x401c88\n            if (v4 == 118) {\n                int64_t v5 = 48; // bp-240, 0x401caa\n                function_403d30((int64_t)g30, (int64_t)a3, (int64_t)a4, a5, &v5, a6);\n                exit(0);\n                // UNREACHABLE\n            }\n        }\n        case -1: {\n        }\n        case 104: {\n            // 0x401c3f\n            g27 = v3;\n            g28 = 0;\n            return result2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_401cf0",
            "funcStartAddr": "401cf0",
            "funcEndAddr": "401d89",
            "decompiledFuncCode": "int64_t function_401cf0(int64_t str) {\n    // 0x401cf0\n    if (str == 0) {\n        // 0x401d69\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x401cfe\n    int64_t result = (int64_t)found_char_pos; // 0x401cfe\n    if (found_char_pos == NULL) {\n        // 0x401d59\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x401d08\n    if (v1 - str < 7) {\n        // 0x401d59\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x401d18\n    bool v2; // 0x401cf0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x401cf0\n    int64_t v5 = result - 6; // 0x401cf0\n    int64_t v6 = 7; // 0x401d26\n    unsigned char v7 = *(char *)v5; // 0x401d26\n    char v8 = *(char *)v4; // 0x401d26\n    char v9 = v8; // 0x401d26\n    bool v10 = false; // 0x401d26\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x401d30\n    int64_t v13 = v1; // 0x401d30\n    int64_t v14 = 3; // 0x401d30\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x401d59\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x401d42\n    char v16 = *(char *)v12; // 0x401d42\n    char v17 = v16; // 0x401d42\n    bool v18 = false; // 0x401d42\n    while (v15 == v16) {\n        // 0x401d32\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x401d4c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x401d4e\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x401d59\n    g37 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_401d90",
            "funcStartAddr": "401d90",
            "funcEndAddr": "401e82",
            "decompiledFuncCode": "int64_t function_401d90(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x401da4\n    int64_t result = (int64_t)v1; // 0x401da4\n    if (result != a1) {\n        // 0x401db1\n        return result;\n    }\n    int64_t v2 = function_405070(); // 0x401dc0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x401e76\n    if (v3 == 85) {\n        // 0x401dd0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x401e68\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x401dfe\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x401e0b\n        // 0x401db1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x401e68\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x401e4d\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x401e5a\n    // 0x401db1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_401e90",
            "funcStartAddr": "401e90",
            "funcEndAddr": "401ee7",
            "decompiledFuncCode": "int64_t function_401e90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x401e90\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x401ed8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ee7",
            "funcStartAddr": "401ee7",
            "funcEndAddr": "4030b1",
            "decompiledFuncCode": "int64_t function_401ee7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x401f31\n    int64_t v3 = 0; // 0x401f31\n    int64_t v4; // 0x401ee7\n    int64_t v5; // 0x401ee7\n    int64_t v6; // 0x401ee7\n    int64_t v7; // 0x401ee7\n    int64_t v8; // 0x401ee7\n    int64_t v9; // 0x401ee7\n    int64_t v10; // 0x401ee7\n    int64_t v11; // 0x401ee7\n    int64_t v12; // 0x401ee7\n    int64_t v13; // 0x401ee7\n    int64_t v14; // 0x401ee7\n    int64_t v15; // 0x401ee7\n    int64_t v16; // 0x401ee7\n    int64_t v17; // 0x401ee7\n    int64_t v18; // 0x401ee7\n    int64_t result; // 0x401ee7\n    int64_t v19; // 0x401ee7\n    int32_t wc; // bp+132, 0x401ee7\n    int64_t ps; // bp+136, 0x401ee7\n    char v20; // 0x4024a0\n    int64_t v21; // 0x4024a0\n    int64_t v22; // 0x402848\n    int64_t v23; // 0x401ee7\n    int64_t v24; // 0x402867\n    int32_t v25; // 0x401ee7\n    while (true) {\n      lab_0x401f38_2:\n        // 0x401f38\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x401ee7\n        int64_t v27; // 0x401f6c\n        while (true) {\n          lab_0x401f38:\n            // 0x401f38\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x401f43\n            if (v15 == -1) {\n                // 0x401f45\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x401f53\n            if (v28) {\n                // break (via goto) -> 0x4026b8\n                goto lab_0x4026b8;\n            }\n            // 0x401f5c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g48 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40254b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402091;\n                    }\n                    // 0x40296d\n                    v26 = v5 + 1;\n                    goto lab_0x401f38;\n                }\n                case 7: {\n                    goto lab_0x402091;\n                }\n                case 8: {\n                    goto lab_0x402091;\n                }\n                case 9: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402091;\n                }\n                case 12: {\n                    goto lab_0x402091;\n                }\n                case 13: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40205d;\n                }\n                case 36: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402091;\n                }\n                case 38: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402091;\n                }\n                case 44: {\n                    goto lab_0x402091;\n                }\n                case 45: {\n                    goto lab_0x402091;\n                }\n                case 46: {\n                    goto lab_0x402091;\n                }\n                case 47: {\n                    goto lab_0x402091;\n                }\n                case 48: {\n                    goto lab_0x402091;\n                }\n                case 49: {\n                    goto lab_0x402091;\n                }\n                case 50: {\n                    goto lab_0x402091;\n                }\n                case 51: {\n                    goto lab_0x402091;\n                }\n                case 52: {\n                    goto lab_0x402091;\n                }\n                case 53: {\n                    goto lab_0x402091;\n                }\n                case 54: {\n                    goto lab_0x402091;\n                }\n                case 55: {\n                    goto lab_0x402091;\n                }\n                case 56: {\n                    goto lab_0x402091;\n                }\n                case 57: {\n                    goto lab_0x402091;\n                }\n                case 58: {\n                    goto lab_0x402091;\n                }\n                case 59: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402091;\n                }\n                case 66: {\n                    goto lab_0x402091;\n                }\n                case 67: {\n                    goto lab_0x402091;\n                }\n                case 68: {\n                    goto lab_0x402091;\n                }\n                case 69: {\n                    goto lab_0x402091;\n                }\n                case 70: {\n                    goto lab_0x402091;\n                }\n                case 71: {\n                    goto lab_0x402091;\n                }\n                case 72: {\n                    goto lab_0x402091;\n                }\n                case 73: {\n                    goto lab_0x402091;\n                }\n                case 74: {\n                    goto lab_0x402091;\n                }\n                case 75: {\n                    goto lab_0x402091;\n                }\n                case 76: {\n                    goto lab_0x402091;\n                }\n                case 77: {\n                    goto lab_0x402091;\n                }\n                case 78: {\n                    goto lab_0x402091;\n                }\n                case 79: {\n                    goto lab_0x402091;\n                }\n                case 80: {\n                    goto lab_0x402091;\n                }\n                case 81: {\n                    goto lab_0x402091;\n                }\n                case 82: {\n                    goto lab_0x402091;\n                }\n                case 83: {\n                    goto lab_0x402091;\n                }\n                case 84: {\n                    goto lab_0x402091;\n                }\n                case 85: {\n                    goto lab_0x402091;\n                }\n                case 86: {\n                    goto lab_0x402091;\n                }\n                case 87: {\n                    goto lab_0x402091;\n                }\n                case 88: {\n                    goto lab_0x402091;\n                }\n                case 89: {\n                    goto lab_0x402091;\n                }\n                case 90: {\n                    goto lab_0x402091;\n                }\n                case 91: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402091;\n                }\n                case 94: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402091;\n                }\n                case 96: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402091;\n                }\n                case 98: {\n                    goto lab_0x402091;\n                }\n                case 99: {\n                    goto lab_0x402091;\n                }\n                case 100: {\n                    goto lab_0x402091;\n                }\n                case 101: {\n                    goto lab_0x402091;\n                }\n                case 102: {\n                    goto lab_0x402091;\n                }\n                case 103: {\n                    goto lab_0x402091;\n                }\n                case 104: {\n                    goto lab_0x402091;\n                }\n                case 105: {\n                    goto lab_0x402091;\n                }\n                case 106: {\n                    goto lab_0x402091;\n                }\n                case 107: {\n                    goto lab_0x402091;\n                }\n                case 108: {\n                    goto lab_0x402091;\n                }\n                case 109: {\n                    goto lab_0x402091;\n                }\n                case 110: {\n                    goto lab_0x402091;\n                }\n                case 111: {\n                    goto lab_0x402091;\n                }\n                case 112: {\n                    goto lab_0x402091;\n                }\n                case 113: {\n                    goto lab_0x402091;\n                }\n                case 114: {\n                    goto lab_0x402091;\n                }\n                case 115: {\n                    goto lab_0x402091;\n                }\n                case 116: {\n                    goto lab_0x402091;\n                }\n                case 117: {\n                    goto lab_0x402091;\n                }\n                case 118: {\n                    goto lab_0x402091;\n                }\n                case 119: {\n                    goto lab_0x402091;\n                }\n                case 120: {\n                    goto lab_0x402091;\n                }\n                case 121: {\n                    goto lab_0x402091;\n                }\n                case 122: {\n                    goto lab_0x402091;\n                }\n                case 123: {\n                    goto lab_0x402035;\n                }\n                case 124: {\n                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402035;\n                }\n                case 126: {\n                    goto lab_0x40205d;\n                }\n                default: {\n                    goto lab_0x402435;\n                }\n            }\n        }\n      lab_0x402435:\n        if (v23 != 1) {\n            // 0x4027a0\n            ps = 0;\n            int64_t len = v15; // 0x4027b0\n            if (v15 == -1) {\n                // 0x4027b2\n                len = strlen((char *)str);\n            }\n            // 0x4027de\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40283f:\n                // 0x40283f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x402844\n                int64_t v30 = v29 + str;\n                v24 = function_404f30(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x402dba_2;\n                    }\n                    case -1: {\n                        goto lab_0x402dba_2;\n                    }\n                    case -2: {\n                        // 0x402e9d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x402ed7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x402eda\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x402ee7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x402ee0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x402dba\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x402dba_2;\n                    }\n                    case 1: {\n                        goto lab_0x402810;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4028bc\n                        char v34 = *(char *)v33; // 0x4028cd\n                        unsigned char v35; // 0x401ee7\n                        if (v34 < 125) {\n                            // 0x4028d8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4028ef\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4028c0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4028cd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4028d8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4028ef\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4028c0\n                            v33++;\n                        }\n                        goto lab_0x402810;\n                    }\n                }\n            }\n            goto lab_0x402dba_2;\n        } else {\n            // 0x402484\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402091;\n        }\n    }\n  lab_0x4026b8:\n    // 0x4026b8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x402fba\n        if (v8 > result) {\n            // 0x402fc3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4022e7\n        return result;\n    }\n    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402091:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4020a0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4022aa_2;\n        }\n    }\n    int64_t v39 = result; // 0x4021a1\n    char v40 = v20; // 0x4021a1\n    int64_t v41 = v38; // 0x4021a1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4021a1\n    int64_t v43 = v36; // 0x4021a1\n    goto lab_0x40211d;\n  lab_0x4022aa_2:\n    // 0x4022e7\n    return function_401e90(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402dba_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402091;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40298e\n        int64_t v50 = v5 + 1; // 0x402a71\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x402a78\n        char v52 = v20; // 0x402a78\n        int64_t v53 = result; // 0x402a78\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x402a41\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x402a45\n            int64_t v56 = v54 + 1; // 0x402a4a\n            int64_t v57 = v51 + 1; // 0x402a71\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x402a3c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x402a41\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x402a45\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40211d;\n    }\n  lab_0x402810:\n    // 0x402810\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40282f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402832\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x402dba\n        goto lab_0x402dba_2;\n    }\n    goto lab_0x40283f;\n  lab_0x40205d:\n    // 0x40205d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4022aa_2;\n    }\n    goto lab_0x402091;\n  lab_0x402035:;\n    bool v60 = v15 == 1; // 0x402040\n    if (v15 == -1) {\n        // 0x402042\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40204e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402091;\n    } else {\n        goto lab_0x40205d;\n    }\n  lab_0x40211d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402122\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402126\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x401f38_2;\n}\n"
        },
        {
            "funcName": "function_4030c0",
            "funcStartAddr": "4030c0",
            "funcEndAddr": "40325e",
            "decompiledFuncCode": "int64_t function_4030c0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4030c2\n    int32_t * v3 = __errno_location(); // 0x4030dc\n    int64_t v4 = (int64_t)g22; // 0x4030e1\n    int32_t v5 = *v3; // 0x4030eb\n    int64_t v6 = v4; // 0x403101\n    if (v2 >= (int64_t)*(int32_t *)&g25) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403259\n            function_404120(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403110\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403117\n        int64_t v9; // 0x4030c0\n        if (g22 == &g23) {\n            int64_t v10 = function_403f30(0, v8); // 0x40323a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g23); // 0x40323f\n            *(int64_t *)&g22 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_403f30(v4, v8); // 0x40312b\n            *(int64_t *)&g22 = v12;\n            v9 = v12;\n        }\n        // 0x40313a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g25; // 0x40313a\n        int32_t v14 = v7; // 0x403141\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g25 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403171\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40317b\n    int64_t * v17 = (int64_t *)v15; // 0x40317e\n    uint64_t v18 = *v17; // 0x40317e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403181\n    int64_t result = *v19; // 0x403181\n    int64_t v20; // 0x4030c0\n    uint64_t v21 = function_401e90(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4031a4\n    if (v18 > v21) {\n        // 0x40321b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4031b7\n    *v17 = v22;\n    if (result != (int64_t)&g38) {\n        // 0x4031c7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_403ed0(v22); // 0x4031e1\n    *v19 = result2;\n    int64_t v23; // 0x4030c0\n    function_401e90(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40321b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403260",
            "funcStartAddr": "403260",
            "funcEndAddr": "403294",
            "decompiledFuncCode": "int64_t function_403260(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403267\n    int64_t result = function_4040d0(a1 == 0 ? (int64_t)&g39 : a1, 56); // 0x403286\n    return result;\n}\n"
        },
        {
            "funcName": "function_4032a0",
            "funcStartAddr": "4032a0",
            "funcEndAddr": "4032af",
            "decompiledFuncCode": "int64_t function_4032a0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g39 : a1); // 0x4032ac\n    return result;\n}\n"
        },
        {
            "funcName": "function_4032b0",
            "funcStartAddr": "4032b0",
            "funcEndAddr": "4032bf",
            "decompiledFuncCode": "int64_t function_4032b0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x4032b8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_4032c0",
            "funcStartAddr": "4032c0",
            "funcEndAddr": "4032f3",
            "decompiledFuncCode": "int64_t function_4032c0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 + 8 : a1 + 8; // 0x4032d9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4032de\n    uint32_t v3 = *v2; // 0x4032de\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4032e2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403300",
            "funcStartAddr": "403300",
            "funcEndAddr": "403313",
            "decompiledFuncCode": "int64_t function_403300(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g39 + 4 : a1 + 4); // 0x40330c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403320",
            "funcStartAddr": "403320",
            "funcEndAddr": "40334b",
            "decompiledFuncCode": "int64_t function_403320(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x403328\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403345\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40333c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_403350",
            "funcStartAddr": "403350",
            "funcEndAddr": "4033c2",
            "decompiledFuncCode": "int64_t function_403350(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g39 : a5; // 0x403372\n    int32_t * v2 = __errno_location(); // 0x40337b\n    uint32_t v3 = *(int32_t *)v1; // 0x40339b\n    int64_t result = function_401e90(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4033aa\n    return result;\n}\n"
        },
        {
            "funcName": "function_4033d0",
            "funcStartAddr": "4033d0",
            "funcEndAddr": "4034b1",
            "decompiledFuncCode": "int64_t function_4033d0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g39 : a4; // 0x4033f2\n    int32_t * v2 = __errno_location(); // 0x4033f8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403417\n    int32_t * v4 = (int32_t *)v1; // 0x40341a\n    int64_t v5 = function_401e90(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403435\n    int64_t v6 = v5 + 1; // 0x40343a\n    int64_t result = function_403ed0(v6); // 0x40344f\n    function_401e90(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403494\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40349d\n    return result;\n}\n"
        },
        {
            "funcName": "function_4034c0",
            "funcStartAddr": "4034c0",
            "funcEndAddr": "4034ca",
            "decompiledFuncCode": "int64_t function_4034c0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4034c0\n    return function_4033d0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4034d0",
            "funcStartAddr": "4034d0",
            "funcEndAddr": "403565",
            "decompiledFuncCode": "int64_t function_4034d0(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x4034d0\n    int64_t v2 = v1; // 0x4034d0\n    int64_t v3 = v2; // 0x4034e4\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x403503\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g49;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403500\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g49;\n        }\n    }\n    int64_t v6 = v3; // 0x40351d\n    if (g23 != 0x6092a0) {\n        // 0x40351f\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g38;\n        v6 = &g49;\n    }\n    int64_t result = v6; // 0x403541\n    if (g22 != &g23) {\n        // 0x403543\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g49;\n    }\n    // 0x403556\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403570",
            "funcStartAddr": "403570",
            "funcEndAddr": "403581",
            "decompiledFuncCode": "int64_t function_403570(void) {\n    // 0x403570\n    int64_t v1; // 0x403570\n    return function_4030c0(v1, v1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403590",
            "funcStartAddr": "403590",
            "funcEndAddr": "40359a",
            "decompiledFuncCode": "int64_t function_403590(void) {\n    // 0x403590\n    int64_t v1; // 0x403590\n    return function_4030c0(v1, v1, v1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_4035a0",
            "funcStartAddr": "4035a0",
            "funcEndAddr": "4035b6",
            "decompiledFuncCode": "int64_t function_4035a0(int64_t a1) {\n    // 0x4035a0\n    return function_4030c0(0, a1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_4035c0",
            "funcStartAddr": "4035c0",
            "funcEndAddr": "4035d2",
            "decompiledFuncCode": "int64_t function_4035c0(int64_t a1, int64_t a2) {\n    // 0x4035c0\n    return function_4030c0(0, a1, a2, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_4035e0",
            "funcStartAddr": "4035e0",
            "funcEndAddr": "403648",
            "decompiledFuncCode": "int64_t function_4035e0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4035f0\n    return function_4030c0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403650",
            "funcStartAddr": "403650",
            "funcEndAddr": "4036b4",
            "decompiledFuncCode": "int64_t function_403650(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403660\n    return function_4030c0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4036c0",
            "funcStartAddr": "4036c0",
            "funcEndAddr": "4036cc",
            "decompiledFuncCode": "int64_t function_4036c0(int64_t a1, int64_t a2) {\n    // 0x4036c0\n    return function_4035e0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4036d0",
            "funcStartAddr": "4036d0",
            "funcEndAddr": "4036df",
            "decompiledFuncCode": "int64_t function_4036d0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4036d0\n    return function_403650(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4036e0",
            "funcStartAddr": "4036e0",
            "funcEndAddr": "403750",
            "decompiledFuncCode": "int64_t function_4036e0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x4036ed\n    int128_t v2 = __asm_movdqa(g40); // 0x4036f5\n    int128_t v3 = __asm_movdqa(g41); // 0x4036fd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x403712\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x403728\n    uint32_t v6 = *v5; // 0x403728\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40372d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4030c0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_403750",
            "funcStartAddr": "403750",
            "funcEndAddr": "40375d",
            "decompiledFuncCode": "int64_t function_403750(int64_t a1, int64_t a2) {\n    // 0x403750\n    return function_4036e0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403760",
            "funcStartAddr": "403760",
            "funcEndAddr": "403771",
            "decompiledFuncCode": "int64_t function_403760(int64_t a1) {\n    // 0x403760\n    return function_4036e0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403780",
            "funcStartAddr": "403780",
            "funcEndAddr": "40378a",
            "decompiledFuncCode": "int64_t function_403780(void) {\n    // 0x403780\n    int64_t v1; // 0x403780\n    return function_4036e0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403790",
            "funcStartAddr": "403790",
            "funcEndAddr": "4037fe",
            "decompiledFuncCode": "int64_t function_403790(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4037aa\n    return function_4030c0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403800",
            "funcStartAddr": "403800",
            "funcEndAddr": "40386c",
            "decompiledFuncCode": "int64_t function_403800(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x403807\n    int128_t v2 = __asm_movdqa(g40); // 0x40380f\n    int128_t v3 = __asm_movdqa(g41); // 0x403817\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x403839\n    if (a2 == 0 || a3 == 0) {\n        // 0x403867\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40384a\n    return function_4030c0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403870",
            "funcStartAddr": "403870",
            "funcEndAddr": "403879",
            "decompiledFuncCode": "int64_t function_403870(void) {\n    // 0x403870\n    int64_t v1; // 0x403870\n    return function_403800(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403880",
            "funcStartAddr": "403880",
            "funcEndAddr": "403897",
            "decompiledFuncCode": "int64_t function_403880(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403880\n    return function_403800(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4038a0",
            "funcStartAddr": "4038a0",
            "funcEndAddr": "4038b3",
            "decompiledFuncCode": "int64_t function_4038a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4038a0\n    return function_403800(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4038c0",
            "funcStartAddr": "4038c0",
            "funcEndAddr": "4038ca",
            "decompiledFuncCode": "int64_t function_4038c0(void) {\n    // 0x4038c0\n    int64_t v1; // 0x4038c0\n    return function_4030c0(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_4038d0",
            "funcStartAddr": "4038d0",
            "funcEndAddr": "4038e2",
            "decompiledFuncCode": "int64_t function_4038d0(int64_t a1, int64_t a2) {\n    // 0x4038d0\n    return function_4030c0(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_4038f0",
            "funcStartAddr": "4038f0",
            "funcEndAddr": "403901",
            "decompiledFuncCode": "int64_t function_4038f0(void) {\n    // 0x4038f0\n    int64_t v1; // 0x4038f0\n    return function_4030c0(v1, v1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_403910",
            "funcStartAddr": "403910",
            "funcEndAddr": "403926",
            "decompiledFuncCode": "int64_t function_403910(int64_t a1) {\n    // 0x403910\n    return function_4030c0(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_403930",
            "funcStartAddr": "403930",
            "funcEndAddr": "403d0d",
            "decompiledFuncCode": "int64_t function_403930(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4039c8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40394c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403966\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4039ab\n    if (a6 < 10) {\n        // 0x4039ba\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x403ab2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_403d10",
            "funcStartAddr": "403d10",
            "funcEndAddr": "403d30",
            "decompiledFuncCode": "int64_t function_403d10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403d10\n    if (a5 == 0) {\n        // 0x403d2b\n        return function_403930(a1, a2, a3, a4, a5, 0, (int64_t)&g49);\n    }\n    int64_t v1 = 0; // 0x403d17\n    v1++;\n    int64_t v2 = v1; // 0x403d29\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x403d20\n        v1++;\n        v2 = v1;\n    }\n    // 0x403d2b\n    return function_403930(a1, a2, a3, a4, a5, v2, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_403d30",
            "funcStartAddr": "403d30",
            "funcEndAddr": "403d90",
            "decompiledFuncCode": "int64_t function_403d30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = v1;\n    int64_t v3; // bp-88, 0x403d30\n    int64_t v4 = &v3; // 0x403d30\n    int64_t v5 = 0;\n    uint32_t v6 = (int32_t)v1; // 0x403d63\n    int64_t v7; // 0x403d4d\n    int64_t * v8; // 0x403d6b\n    int64_t v9; // 0x403d6b\n    int64_t v10; // 0x403d77\n    if (v6 < 48) {\n        // 0x403d40\n        *(int32_t *)v2 = v6 + 8;\n        v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n        *(int64_t *)(8 * v5 + v4) = v7;\n        if (v7 == 0) {\n            // break -> 0x403d83\n            break;\n        }\n    } else {\n        // 0x403d6b\n        v8 = (int64_t *)(v2 + 8);\n        v9 = *v8;\n        *v8 = v9 + 8;\n        v10 = *(int64_t *)v9;\n        *(int64_t *)(8 * v5 + v4) = v10;\n        if (v10 == 0) {\n            // break -> 0x403d83\n            break;\n        }\n    }\n    int64_t v11 = 10; // 0x403d61\n    while (v5 != 9) {\n        // 0x403d59\n        v5++;\n        v6 = *(int32_t *)&v2;\n        if (v6 < 48) {\n            // 0x403d40\n            *(int32_t *)v2 = v6 + 8;\n            v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n            *(int64_t *)(8 * v5 + v4) = v7;\n            v11 = v5;\n            if (v7 == 0) {\n                // break -> 0x403d83\n                break;\n            }\n        } else {\n            // 0x403d6b\n            v8 = (int64_t *)(v2 + 8);\n            v9 = *v8;\n            *v8 = v9 + 8;\n            v10 = *(int64_t *)v9;\n            *(int64_t *)(8 * v5 + v4) = v10;\n            v11 = v5;\n            if (v10 == 0) {\n                // break -> 0x403d83\n                break;\n            }\n        }\n        // 0x403d59\n        v11 = 10;\n    }\n    // 0x403d83\n    return function_403930(a1, a2, a3, a4, v4, v11, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_403d90",
            "funcStartAddr": "403d90",
            "funcEndAddr": "403e4c",
            "decompiledFuncCode": "int64_t function_403d90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403d90\n    int64_t v1; // bp-168, 0x403d90\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x403d90\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x403d90\n    int64_t v8; // 0x403d90\n    int64_t v9; // bp-56, 0x403d90\n    int64_t v10; // 0x403df5\n    int64_t v11; // 0x403e19\n    if ((int32_t)v6 < 48) {\n        // 0x403de0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x403e30\n            break;\n        }\n    } else {\n        // 0x403e12\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x403e30\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x403e0a\n    int64_t v13 = 10; // 0x403e0a\n    while (v5 != 9) {\n        // 0x403e0c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x403de0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x403e30\n                break;\n            }\n        } else {\n            // 0x403e12\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x403e30\n                break;\n            }\n        }\n        // 0x403e02\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x403e30\n    int64_t v14; // bp-136, 0x403d90\n    int64_t result = function_403930(a1, a2, a3, a4, (int64_t)&v14, v13, (int64_t)&g49); // 0x403e3f\n    return result;\n}\n"
        },
        {
            "funcName": "function_403e50",
            "funcStartAddr": "403e50",
            "funcEndAddr": "403ec4",
            "decompiledFuncCode": "int64_t function_403e50(int64_t a1) {\n    // 0x403e50\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x403eb3\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_403ed0",
            "funcStartAddr": "403ed0",
            "funcEndAddr": "403eea",
            "decompiledFuncCode": "int64_t function_403ed0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x403ed4\n    if (size != 0 != (mem == NULL)) {\n        // 0x403ee3\n        return (int64_t)mem;\n    }\n    // 0x403ee5\n    function_404120(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403ef0",
            "funcStartAddr": "403ef0",
            "funcEndAddr": "403f11",
            "decompiledFuncCode": "int64_t function_403ef0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x403ef3\n    int64_t v2 = v1; // 0x403ef3\n    if (v2 < 0) {\n        // 0x403f0b\n        function_404120(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x403f09\n        return function_403ed0(v2);\n    }\n    // 0x403f0b\n    function_404120(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403f20",
            "funcStartAddr": "403f20",
            "funcEndAddr": "403f22",
            "decompiledFuncCode": "int64_t function_403f20(void) {\n    // 0x403f20\n    int64_t v1; // 0x403f20\n    return function_403ed0(v1);\n}\n"
        },
        {
            "funcName": "function_403f30",
            "funcStartAddr": "403f30",
            "funcEndAddr": "403f66",
            "decompiledFuncCode": "int64_t function_403f30(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x403f58\n        free(v1);\n        return (int32_t)&g49 ^ (int32_t)&g49;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x403f41\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x403f50\n        return (int64_t)mem;\n    }\n    // 0x403f61\n    function_404120(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403f70",
            "funcStartAddr": "403f70",
            "funcEndAddr": "403f91",
            "decompiledFuncCode": "int64_t function_403f70(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x403f73\n    int64_t v2 = v1; // 0x403f73\n    if (v2 < 0) {\n        // 0x403f8b\n        function_404120(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x403f89\n        return function_403f30(a1, v2);\n    }\n    // 0x403f8b\n    function_404120(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403fa0",
            "funcStartAddr": "403fa0",
            "funcEndAddr": "404026",
            "decompiledFuncCode": "int64_t function_403fa0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x403ffb\n            function_404120(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_403f30(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x403fe3\n    if (a2 == 0) {\n        // 0x404008\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x403fe8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x403ffb\n        function_404120(a1);\n        // UNREACHABLE\n    }\n    // 0x403fca\n    *(int64_t *)a2 = v2;\n    return function_403f30(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404030",
            "funcStartAddr": "404030",
            "funcEndAddr": "404080",
            "decompiledFuncCode": "int64_t function_404030(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404030\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40407a\n            function_404120(a1);\n            // UNREACHABLE\n        }\n        // 0x404052\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_403f30(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404065\n        *(int64_t *)a2 = 128;\n        return function_403f30(0, 128);\n    }\n    // 0x404078\n    if (a2 < 0) {\n        // 0x40407a\n        function_404120(a1);\n        // UNREACHABLE\n    }\n    // 0x404052\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_403f30(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404080",
            "funcStartAddr": "404080",
            "funcEndAddr": "404097",
            "decompiledFuncCode": "int64_t function_404080(int64_t a1, int64_t a2) {\n    // 0x404080\n    return (int64_t)memset((int64_t *)function_403ed0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4040a0",
            "funcStartAddr": "4040a0",
            "funcEndAddr": "4040ce",
            "decompiledFuncCode": "int64_t function_4040a0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4040a7\n    if ((int64_t)v1 < 0) {\n        // 0x4040c9\n        function_404120(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4040c9\n        function_404120(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4040ba\n    if (mem != NULL) {\n        // 0x4040c4\n        return (int64_t)mem;\n    }\n    // 0x4040c9\n    function_404120(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4040d0",
            "funcStartAddr": "4040d0",
            "funcEndAddr": "4040f8",
            "decompiledFuncCode": "int64_t function_4040d0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_403ed0(a2); // 0x4040df\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404100",
            "funcStartAddr": "404100",
            "funcEndAddr": "404113",
            "decompiledFuncCode": "int64_t function_404100(int64_t str) {\n    // 0x404100\n    return function_4040d0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404120",
            "funcStartAddr": "404120",
            "funcEndAddr": "404151",
            "decompiledFuncCode": "int64_t function_404120(int64_t a1) {\n    // 0x404120\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404160",
            "funcStartAddr": "404160",
            "funcEndAddr": "40423f",
            "decompiledFuncCode": "int64_t function_404160(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40416c\n    uint32_t v2 = *v1; // 0x40416c\n    int64_t v3 = a2 & 0xffffffff; // 0x404171\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x404174\n    uint64_t v5 = (int64_t)*v4; // 0x404174\n    int64_t v6; // 0x4041e2\n    if (v3 <= v5) {\n      lab_0x4041dc_2:\n        // 0x4041dc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x404162\n    int64_t v8 = v2; // 0x404160\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4041dc\n        goto lab_0x4041dc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404198\n    int64_t v17; // 0x4041a6\n    int64_t * v18; // 0x4041c0\n    int64_t * v19; // 0x4041c3\n    int64_t v20; // 0x4041ce\n    int64_t v21; // 0x4041a6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x4041a3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x4041c0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4041d7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4041dc\n            goto lab_0x4041dc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4041dc\n            goto lab_0x4041dc_2;\n        }\n        // 0x404192\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40421b\n    int64_t * v23 = (int64_t *)v22; // 0x404220\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x404223\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x404220\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x404237\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40418d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4041dc\n            goto lab_0x4041dc_2;\n        }\n        // 0x404192\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x4041a3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x4041c0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4041d7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4041dc\n                goto lab_0x4041dc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4041dc\n                goto lab_0x4041dc_2;\n            }\n            // 0x404192\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x404200\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x404220\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x404237\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4041dc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404240",
            "funcStartAddr": "404240",
            "funcEndAddr": "40485c",
            "decompiledFuncCode": "int64_t function_404240(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40425f\n    int64_t v2 = *v1; // 0x40425f\n    char * str2 = (char *)v2; // 0x40426c\n    char c = *str2; // 0x40426c\n    int64_t v3 = v2; // 0x404298\n    int64_t v4 = 0; // 0x404240\n    int32_t v5; // 0x404240\n    int64_t v6; // 0x404240\n    int64_t v7; // 0x404240\n    int64_t v8; // 0x404240\n    int64_t v9; // 0x404240\n    int64_t v10; // 0x404240\n    int64_t v11; // 0x404240\n    int64_t v12; // 0x404240\n    int64_t v13; // 0x404240\n    int64_t str3; // 0x404240\n    int64_t v14; // 0x404240\n    int64_t v15; // 0x404240\n    int64_t v16; // 0x404240\n    int64_t v17; // 0x404240\n    int32_t v18; // 0x404240\n    int32_t v19; // 0x404240\n    int32_t v20; // 0x404240\n    int32_t v21; // 0x404240\n    int32_t v22; // 0x404240\n    int32_t v23; // 0x404240\n    int32_t v24; // 0x404240\n    int32_t v25; // 0x404240\n    int32_t v26; // 0x404240\n    int32_t v27; // 0x404240\n    int32_t v28; // 0x404240\n    int32_t v29; // 0x404240\n    int64_t nmemb; // 0x404240\n    int64_t v30; // 0x404240\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40429c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404298\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4042a8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4042ae\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x404278\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4042dc\n                int64_t v34; // 0x404240\n                int64_t v35; // 0x404240\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4042e5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x404460;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4042f6\n                int64_t v37 = *(int64_t *)v36; // 0x4042fa\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4042d0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4042e5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x404460;\n                        }\n                    }\n                    // 0x4042f6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x404346:\n                    // 0x404346\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4043a0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x404510\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4043a0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4044c0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40436a;\n                                } else {\n                                    // 0x4044cc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40436a;\n                                    } else {\n                                        // 0x4044da\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40436a;\n                                        } else {\n                                            goto lab_0x4043a0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40436a;\n                            }\n                        }\n                    }\n                }\n              lab_0x4043b1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x404586\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x404732\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x404752\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40479f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x4047b9\n                            int64_t v45; // 0x4047bb\n                            if (*(char *)v42 != 0) {\n                                // 0x4047bb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4047b3\n                            while (v17 + nmemb != v42) {\n                                // 0x4047b5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4047bb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x4047a8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4047e0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x404594\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4046ef\n                        free((int64_t *)v17);\n                    }\n                    // 0x4045e9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x404600\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4044ae\n                    return 63;\n                }\n                // 0x4043d0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x404454\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x404460:;\n                    int32_t * v49 = (int32_t *)a7; // 0x404470\n                    uint32_t v50 = *v49; // 0x404470\n                    int64_t v51 = v50; // 0x404470\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40447a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x404483\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4046af\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40465a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4044ae\n                            return 63;\n                        }\n                        // 0x4044f8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40480f\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40470d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x404720\n                                // 0x4044ae\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40461e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x404632\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40449b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40449e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4044a2\n                    int64_t result = v59; // 0x4044a8\n                    if (v58 != 0) {\n                        // 0x4044aa\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4044ae\n                    return result;\n                }\n            } else {\n                // 0x4042ae\n                v5 = v32;\n            }\n            // break -> 0x4043d5\n            break;\n        }\n    }\n    // 0x4043d5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x4043ed\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4043f7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4044ae\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x404539\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x404426\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x404436\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4043a0:\n    // 0x4043a0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4043a0\n    int64_t v63 = *(int64_t *)v62; // 0x4043a4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x4043b1\n        goto lab_0x4043b1;\n    }\n    goto lab_0x404346;\n  lab_0x40436a:\n    // 0x40436a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x404240\n    int32_t v65; // 0x404240\n    int32_t v66; // 0x404240\n    if (v27 != 0) {\n        goto lab_0x4043a0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x404520\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4043a0;\n            } else {\n                goto lab_0x404391;\n            }\n        } else {\n            // 0x404385\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40467c\n                int64_t v67 = (int64_t)mem; // 0x40467c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4043a0;\n                } else {\n                    // 0x40468f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x404391;\n                }\n            } else {\n                goto lab_0x404391;\n            }\n        }\n    }\n  lab_0x404391:\n    // 0x404391\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4043a0;\n}\n"
        },
        {
            "funcName": "function_404860",
            "funcStartAddr": "404860",
            "funcEndAddr": "404e26",
            "decompiledFuncCode": "int64_t function_404860(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x404881\n    if (v3 < 1) {\n        // 0x404a3e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40487d\n    int32_t v5 = *(int32_t *)a7; // 0x404889\n    uint64_t v6 = a1 & 0xffffffff; // 0x40488b\n    int64_t v7 = v2; // 0x404890\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x404893\n    *v8 = 0;\n    int64_t v9; // 0x404860\n    int64_t v10; // 0x404860\n    int64_t v11; // 0x404860\n    int64_t v12; // 0x404860\n    int64_t str; // 0x404860\n    int64_t v13; // 0x404860\n    int64_t v14; // 0x404860\n    int64_t v15; // 0x404860\n    int64_t v16; // 0x404860\n    int64_t v17; // 0x404860\n    int32_t v18; // 0x404860\n    char v19; // 0x404860\n    if (v5 == 0) {\n        // 0x404a78\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4048aa;\n    } else {\n        // 0x4048a3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4048f0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4048f3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4049b8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x404906\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x404916\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4049cc;\n                } else {\n                    goto lab_0x404928;\n                }\n            }\n        } else {\n            goto lab_0x4048aa;\n        }\n    }\n  lab_0x4048aa:\n    // 0x4048aa\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4048b0\n    *v24 = 0;\n    int64_t v25; // 0x404860\n    int64_t v26; // 0x404860\n    int64_t v27; // 0x404860\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4049a0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4049ad;\n        }\n        case 43: {\n            // 0x404cb0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4049ad;\n        }\n        default: {\n            // 0x4048cc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x404c2f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x404d48\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4049ad;\n                } else {\n                    // 0x404c3d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4048da;\n                }\n            } else {\n                goto lab_0x4048da;\n            }\n        }\n    }\n  lab_0x4049b8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4049bf\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x404928;\n    } else {\n        goto lab_0x4049cc;\n    }\n  lab_0x4048da:\n    // 0x4048da\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4049ad;\n  lab_0x4049ad:\n    // 0x4049ad\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4049b8;\n  lab_0x404928:;\n    uint32_t v30 = *(int32_t *)a7; // 0x404928\n    int64_t v31 = v30; // 0x404928\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40492a\n    if ((int64_t)*v32 > v31) {\n        // 0x40492f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x404932\n    if (*v33 > v30) {\n        // 0x404937\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40493a\n    int64_t v35 = v31; // 0x40493e\n    int64_t v36 = v15; // 0x40493e\n    int64_t v37; // 0x404860\n    int64_t v38; // 0x404860\n    int64_t v39; // 0x404860\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x404aa8\n        int64_t v41 = v40; // 0x404aa8\n        v2 = v41;\n        int64_t v42; // 0x404860\n        if (*v33 == v40) {\n            // 0x404c90\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x404c98\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x404ab4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x404ac8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x404ad1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x404ada\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x404af1\n            int64_t v47 = v45 & 0xffffffff; // 0x404af5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x404afe\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x404b04\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x404b06;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x404ae0\n            int64_t v49 = v48 & 0xffffffff; // 0x404ae0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x404af1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x404afe\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x404b04\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x404b06;\n                    }\n                }\n                // 0x404ae0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x404ca8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x404b06;\n    } else {\n        goto lab_0x404944;\n    }\n  lab_0x4049cc:\n    // 0x4049cc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4049cf\n    int64_t v51 = v12; // 0x4049cf\n    int64_t v52 = v14; // 0x4049cf\n    if (*(char *)v10 == 0) {\n        goto lab_0x404928;\n    } else {\n        goto lab_0x4049d5;\n    }\n  lab_0x404944:;\n    int32_t v53 = v35; // 0x404944\n    int64_t v54; // 0x404860\n    int64_t v55; // 0x404860\n    int64_t v56; // 0x404860\n    int64_t v57; // 0x404860\n    int64_t v58; // 0x404860\n    int64_t v59; // 0x404860\n    char * v60; // 0x404860\n    int64_t v61; // 0x404860\n    int64_t v62; // 0x404959\n    int64_t v63; // 0x404860\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x404a93\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x404a96;\n    } else {\n        // 0x40494c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x404860\n        int64_t v66 = v65 ? -1 : 1; // 0x404960\n        int64_t v67 = (int64_t)\"--\"; // 0x404860\n        int64_t v68 = v62; // 0x404860\n        int64_t v69 = 3; // 0x404960\n        unsigned char v70 = *(char *)v68; // 0x404960\n        char v71 = *(char *)v67; // 0x404960\n        char v72 = v71; // 0x404960\n        bool v73 = false; // 0x404960\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x404a50\n            if (*(char *)v62 == 45) {\n                // 0x404b10\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x404b10\n                if (c == 0) {\n                    goto lab_0x404a5a;\n                } else {\n                    // 0x404b1d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x404ba0;\n                    } else {\n                        if (c == 45) {\n                            // 0x404d83\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x404bf5;\n                        } else {\n                            // 0x404b2e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x404ba0;\n                            } else {\n                                // 0x404b33\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x404b54;\n                                } else {\n                                    // 0x404b3a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x404ba0;\n                                    } else {\n                                        goto lab_0x404b54;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x404a5a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x404970\n            v2 = v75;\n            int32_t v76 = *v32; // 0x404973\n            int64_t v77 = v35 + 1; // 0x404976\n            int32_t v78 = v77; // 0x404979\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x404ce0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x404987\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x404995\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x404a96;\n        }\n    }\n  lab_0x4049d5:;\n    // 0x4049d5\n    int64_t v79; // bp-104, 0x404860\n    int64_t v80 = &v79; // 0x40486a\n    int64_t v81 = v50 + 1; // 0x4049d5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4049dc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4049e1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4049e5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4049e9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4049f1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4049f6\n    int32_t c2 = v84; // 0x4049f6\n    char * found_char_pos = strchr(str2, c2); // 0x4049f6\n    int64_t v87 = *v82; // 0x4049fb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x404a05\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x404a10\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x404d00\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x404ccd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x404a3e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4049f6\n    char v91 = *(char *)(v90 + 1); // 0x404a2b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4049e5\n        if (v91 != 58) {\n            // 0x404a3e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x404c54\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x404d58\n                *v8 = 0;\n            } else {\n                // 0x404d3c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x404c7e\n            *v83 = 0;\n            // 0x404a3e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x404c5e\n        if (v93 != 0) {\n            // 0x404cf0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x404c7e\n            *v83 = 0;\n            // 0x404a3e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x404c71\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x404c7e\n            *v83 = 0;\n            // 0x404a3e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x404dba\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x404d6a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x404d71\n        // 0x404c7e\n        *v83 = 0;\n        // 0x404a3e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x404bc9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x404bcb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x404df0\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x404da1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x404da8\n            // 0x404a3e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x404bd6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x404bda\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x404bf5;\n  lab_0x404b06:\n    // 0x404b06\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x404944;\n  lab_0x404bf5:;\n    int64_t v99 = function_404240(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x404c13\n    // 0x404a3e\n    return v99 & 0xffffffff;\n  lab_0x404a96:;\n    int32_t v100 = v55; // 0x404a96\n    if (v100 != (int32_t)v59) {\n        // 0x404a9a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x404a3e\n    return 0xffffffff;\n  lab_0x404a5a:\n    // 0x404a5a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x404a61\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x404a3e\n    return v99 & 0xffffffff;\n  lab_0x404ba0:\n    // 0x404ba0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4049d5;\n  lab_0x404b54:\n    // 0x404b54\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_404240(v6, a2, str, a4, a5, v57, v1, v11, &g11); // 0x404b7a\n    if ((int32_t)v101 != -1) {\n        // 0x404a3e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x404b8f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x404ba0;\n}\n"
        },
        {
            "funcName": "function_404e30",
            "funcStartAddr": "404e30",
            "funcEndAddr": "404e86",
            "decompiledFuncCode": "int64_t function_404e30(int64_t a1) {\n    // 0x404e30\n    *(int32_t *)&g42 = g28;\n    *(int32_t *)&g43 = g27;\n    int64_t v1; // 0x404e30\n    int64_t result = function_404860(v1, v1, v1, v1, v1, v1, &g42, a1 & 0xffffffff); // 0x404e56\n    g28 = *(int32_t *)&g42;\n    g47 = g45;\n    *(int32_t *)&g26 = g44;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404e90",
            "funcStartAddr": "404e90",
            "funcEndAddr": "404ea8",
            "decompiledFuncCode": "int64_t function_404e90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404e90\n    return function_404e30(1);\n}\n"
        },
        {
            "funcName": "function_404eb0",
            "funcStartAddr": "404eb0",
            "funcEndAddr": "404ec3",
            "decompiledFuncCode": "int64_t function_404eb0(int64_t a1, int64_t a2, int64_t * a3, int64_t * a4, int32_t a5, int64_t a6) {\n    // 0x404eb0\n    return function_404e30(0);\n}\n"
        },
        {
            "funcName": "function_404ed0",
            "funcStartAddr": "404ed0",
            "funcEndAddr": "404ee5",
            "decompiledFuncCode": "int64_t function_404ed0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404ed0\n    return function_404860(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_404ef0",
            "funcStartAddr": "404ef0",
            "funcEndAddr": "404f06",
            "decompiledFuncCode": "int64_t function_404ef0(void) {\n    // 0x404ef0\n    return function_404e30(0);\n}\n"
        },
        {
            "funcName": "function_404f10",
            "funcStartAddr": "404f10",
            "funcEndAddr": "404f28",
            "decompiledFuncCode": "int64_t function_404f10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404f10\n    return function_404860(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_404f30",
            "funcStartAddr": "404f30",
            "funcEndAddr": "404faa",
            "decompiledFuncCode": "int64_t function_404f30(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x404f3b\n    int64_t v2 = (int64_t)&g12; // 0x404f3b\n    int32_t * pwc; // 0x404f30\n    int64_t v3; // 0x404f30\n    int64_t n; // 0x404f30\n    if (a2 == 0) {\n        goto lab_0x404f82;\n    } else {\n        // 0x404f3d\n        if (a3 == 0) {\n            // 0x404f68\n            return -2;\n        }\n        // 0x404f49\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x404f82;\n        } else {\n            goto lab_0x404f54;\n        }\n    }\n  lab_0x404f82:\n    // 0x404f82\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x404f30\n    pwc = (int32_t *)&v4;\n    goto lab_0x404f54;\n  lab_0x404f54:;\n    char * wstr = (char *)v3; // 0x404f5a\n    int64_t ps; // 0x404f30\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x404f5a\n    int64_t result = v5; // 0x404f5a\n    if (v5 < 0xfffffffe) {\n        // 0x404f68\n        return result;\n    }\n    int64_t result2 = result; // 0x404f99\n    if ((char)function_405010(0, v3) == 0) {\n        // 0x404f9b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x404f68\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404fb0",
            "funcStartAddr": "404fb0",
            "funcEndAddr": "40500d",
            "decompiledFuncCode": "int64_t function_404fb0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x404fb7\n    int64_t v2; // 0x404fb0\n    int64_t result = function_4055e0(a1, v2); // 0x404fc8\n    if ((v2 & 32) != 0) {\n        // 0x404ff0\n        if ((int32_t)result == 0) {\n            // 0x404ff4\n            *__errno_location() = 0;\n        }\n        // 0x404fea\n        return 0xffffffff;\n    }\n    // 0x404fd1\n    if ((int32_t)result == 0) {\n        // 0x404fea\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x404fd8\n    if (v1 == 0) {\n        // 0x404fda\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x404fea\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405010",
            "funcStartAddr": "405010",
            "funcEndAddr": "40506e",
            "decompiledFuncCode": "int64_t function_405010(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405016\n    if (locale == NULL) {\n        // 0x405043\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405016\n    bool v2; // 0x405010\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g13; // 0x405010\n    int64_t v5 = v1; // 0x405010\n    int64_t v6 = 2; // 0x405035\n    unsigned char v7 = *(char *)v5; // 0x405035\n    char v8 = *(char *)v4; // 0x405035\n    char v9 = v8; // 0x405035\n    bool v10 = false; // 0x405035\n    while (v7 == v8) {\n        // 0x405028\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405041\n    int64_t v13 = v1; // 0x405041\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405043\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405041\n    unsigned char v15 = *(char *)v13; // 0x40505d\n    char v16 = *(char *)v12; // 0x40505d\n    char v17 = v16; // 0x40505d\n    bool v18 = false; // 0x40505d\n    while (v15 == v16) {\n        // 0x405050\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405070",
            "funcStartAddr": "405070",
            "funcEndAddr": "4055d2",
            "decompiledFuncCode": "int64_t function_405070(void) {\n    char * v1 = nl_langinfo(14); // 0x405086\n    char * v2 = g46; // 0x40508b\n    char * v3; // 0x405070\n    int64_t v4; // 0x405070\n    int64_t v5; // 0x405070\n    int64_t v6; // 0x405070\n    int64_t v7; // 0x405070\n    int32_t size; // 0x405070\n    int32_t size2; // 0x405070\n    int32_t len; // 0x405142\n    int64_t v8; // 0x405142\n    char * env_val; // 0x40512d\n    if (v2 == NULL) {\n        // 0x405128\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405195;\n        } else {\n            // 0x40513a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405195;\n            } else {\n                // 0x40513f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40512d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4055c5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405195;\n                    } else {\n                        // 0x405539\n                        size2 = len + 14;\n                        goto lab_0x40515b;\n                    }\n                } else {\n                    goto lab_0x40515b;\n                }\n            }\n        }\n    } else {\n        // 0x405070\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x4050aa;\n    }\n  lab_0x4053dc:;\n    // 0x4053dc\n    struct _IO_FILE * stream; // 0x40521b\n    int32_t v10 = __uflow(stream); // 0x4053df\n    int64_t v11; // 0x405070\n    int64_t v12 = v11; // 0x4053e9\n    int64_t v13; // 0x405070\n    int64_t v14 = v13; // 0x4053e9\n    int32_t v15 = v10; // 0x4053e9\n    int64_t v16; // 0x405070\n    int64_t v17 = v16; // 0x4053e9\n    int64_t v18 = v11; // 0x4053e9\n    int64_t v19 = v13; // 0x4053e9\n    int64_t v20 = v16; // 0x4053e9\n    if (v10 == -1) {\n        // break -> 0x4053ef\n        goto lab_0x4053ef;\n    }\n    goto lab_0x405269;\n  lab_0x40525e:;\n    // 0x40525e\n    int64_t v90; // 0x405070\n    int64_t * v32; // 0x405250\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405070\n    v12 = v89;\n    int64_t v91; // 0x405070\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405070\n    v17 = v92;\n    goto lab_0x405269;\n  lab_0x405269:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405070\n    int32_t v25; // bp-120, 0x405070\n    int32_t v26; // bp-184, 0x405070\n    int64_t v27; // 0x40521b\n    int64_t v28; // 0x405238\n    int64_t v29; // 0x40523d\n    int64_t * v30; // 0x405254\n    switch (c) {\n        case 32: {\n            goto lab_0x405250;\n        }\n        case 10: {\n            goto lab_0x405250;\n        }\n        case 9: {\n            goto lab_0x405250;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x405441\n            int32_t v33; // 0x405070\n            char v34; // 0x405070\n            int32_t v35; // 0x40544e\n            if (v31 < *v30) {\n                // 0x405420\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40544b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x405441\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x405420\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40544b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x405430\n                v36 = v33;\n            }\n            // 0x40551f\n            if (v36 == -1) {\n                // break -> 0x4053ef\n                break;\n            }\n            goto lab_0x405250;\n        }\n        default: {\n            // 0x40527f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4053ef\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x4052a8\n            int64_t v39 = v37 + 4; // 0x4052aa\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x4052b6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x4052b8\n            while (v41 == 0) {\n                // 0x4052a8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4052d6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4052e2\n            int64_t v45 = v43 + 4; // 0x4052e4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4052f0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4052f2\n            while (v47 == 0) {\n                // 0x4052e2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4052df\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x405308\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x405318\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40531c\n            int64_t v52 = v51 + v48; // 0x405325\n            int64_t * mem; // 0x405070\n            int64_t v53; // 0x405070\n            int64_t v54; // 0x405070\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40545b\n                int64_t v56 = v55 + 3; // 0x405467\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x405341\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x405350\n            if (mem == NULL) {\n                // 0x40557c\n                free((int64_t *)v21);\n                function_4055e0(v27, v53);\n                v24 = (int64_t)&g12;\n                goto lab_0x4051f4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x405368\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x405372\n            uint32_t v62 = (int32_t)v59; // 0x405375\n            int64_t v63; // 0x405070\n            if (v62 >= 8) {\n                // 0x405484\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40549e\n                int64_t v66 = v61 - v65; // 0x4054a2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x4054ad\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4054be\n                    int64_t v70 = v69 & 0xffffffff; // 0x4054be\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4054bb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40554f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x405387\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40538b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40539b\n            int64_t v74 = v60 - 1; // 0x40539f\n            uint32_t v75 = (int32_t)v73; // 0x4053a4\n            int64_t v76; // 0x405070\n            if (v75 >= 8) {\n                // 0x4054d2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4054dc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4054ec\n                int64_t v80 = v74 - v79; // 0x4054f0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4054fb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40550b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x405509\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x405566\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40556e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4053b6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4053ba\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4055b3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4053ce\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40525e;\n            } else {\n                goto lab_0x4053dc;\n            }\n        }\n    }\n  lab_0x405250:;\n    int64_t v93 = v23; // 0x405070\n    int64_t v94 = v22; // 0x405070\n    int64_t v95 = v21; // 0x405070\n    goto lab_0x405250_2;\n  lab_0x405195:;\n    int64_t * mem3 = malloc(size); // 0x405195\n    int64_t v97 = (int64_t)&g12; // 0x4051a0\n    int64_t v98; // 0x405070\n    int64_t path; // 0x405070\n    if (mem3 == NULL) {\n        goto lab_0x405172;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405195\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x4051b6;\n    }\n  lab_0x4050aa:;\n    int64_t str = v1 == NULL ? (int64_t)&g12 : (int64_t)v1; // 0x40509d\n    char v100 = *v3; // 0x4050aa\n    int64_t v101; // 0x405070\n    if (v100 == 0) {\n        // 0x405104\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405070\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405070\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4050f0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4050f7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4050c0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4050cd\n        char v107 = *(char *)v106; // 0x4050d2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405104\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4050db\n    v104 = v103 + 1;\n  lab_0x4050f7:\n    // 0x405104\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405172:;\n    char * v108 = (char *)v97;\n    g46 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x4050aa;\n  lab_0x4051b6:;\n    int64_t v109 = v98 + path; // 0x4051b6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4051e2\n    v24 = (int64_t)&g12;\n    if (fd >= 0) {\n        // 0x405211\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x405542\n            close(fd);\n            v24 = (int64_t)&g12;\n        } else {\n            // 0x405235\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405250_2:;\n                uint64_t v96 = *v32; // 0x405250\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4053dc;\n                } else {\n                    goto lab_0x40525e;\n                }\n            }\n          lab_0x4053ef:\n            // 0x4053ef\n            function_4055e0(v27, v19);\n            v24 = (int64_t)&g12;\n            if (v18 != 0) {\n                // 0x40540e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4051f4;\n  lab_0x40515b:;\n    int64_t * mem4 = malloc(size2); // 0x40515b\n    v97 = (int64_t)&g12;\n    if (mem4 != NULL) {\n        // 0x405201\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x4051b6;\n    } else {\n        goto lab_0x405172;\n    }\n  lab_0x4051f4:\n    // 0x4051f4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405172;\n}\n"
        },
        {
            "funcName": "function_4055e0",
            "funcStartAddr": "4055e0",
            "funcEndAddr": "40565b",
            "decompiledFuncCode": "int64_t function_4055e0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4055e7\n    if (fileno(stream) < 0) {\n        // 0x405647\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4055fa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40562b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405647\n            return fclose(stream);\n        }\n    }\n    // 0x4055fc\n    if ((int32_t)function_405660(a1, v1) == 0) {\n        // 0x405647\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405608\n    int32_t v3 = *v2; // 0x405610\n    int64_t result = fclose(stream); // 0x40561e\n    if (v3 != 0) {\n        // 0x405650\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405620\n    return result;\n}\n"
        },
        {
            "funcName": "function_405660",
            "funcStartAddr": "405660",
            "funcEndAddr": "4056a0",
            "decompiledFuncCode": "int64_t function_405660(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40567a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40567a\n        return fflush(stream);\n    }\n    // 0x405688\n    function_4056a0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4056a0",
            "funcStartAddr": "4056a0",
            "funcEndAddr": "4056f7",
            "decompiledFuncCode": "int64_t function_4056a0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4056a0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4056aa\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4056db\n    int64_t result = -1; // 0x4056e4\n    if (v1 != -1) {\n        // 0x4056e6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4056f2\n    return result;\n}\n"
        },
        {
            "funcName": "function_405700",
            "funcStartAddr": "405700",
            "funcEndAddr": "40575d",
            "decompiledFuncCode": "int64_t function_405700(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405700\n    return function_401228();\n}\n"
        },
        {
            "funcName": "function_405760",
            "funcStartAddr": "405760",
            "funcEndAddr": "405761",
            "decompiledFuncCode": "int64_t function_405760(void) {\n    // 0x405760\n    int64_t result; // 0x405760\n    return result;\n}\n"
        },
        {
            "funcName": "function_405770",
            "funcStartAddr": "405770",
            "funcEndAddr": "405788",
            "decompiledFuncCode": "int64_t function_405770(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405770\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g18);\n}\n"
        },
        {
            "funcName": "function_405788",
            "funcStartAddr": "405788",
            "funcEndAddr": "4057a8",
            "decompiledFuncCode": "int64_t function_405788(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g14; // 0x405792\n    while (*(int64_t *)v1 != -1) {\n        // 0x405793\n        v1 -= 8;\n    }\n    // 0x4057a4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_link.elf"
}