{
    "funcInfo": [
        {
            "funcName": "function_401820",
            "funcStartAddr": "401820",
            "funcEndAddr": "401825",
            "decompiledFuncCode": "int64_t function_401820(void) {\n    // 0x401820\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401825",
            "funcStartAddr": "401825",
            "funcEndAddr": "40182a",
            "decompiledFuncCode": "int64_t function_401825(void) {\n    // 0x401825\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40182a",
            "funcStartAddr": "40182a",
            "funcEndAddr": "40182f",
            "decompiledFuncCode": "int64_t function_40182a(void) {\n    // 0x40182a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40182f",
            "funcStartAddr": "40182f",
            "funcEndAddr": "401834",
            "decompiledFuncCode": "int64_t function_40182f(void) {\n    // 0x40182f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401834",
            "funcStartAddr": "401834",
            "funcEndAddr": "401839",
            "decompiledFuncCode": "int64_t function_401834(void) {\n    // 0x401834\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401839",
            "funcStartAddr": "401839",
            "funcEndAddr": "40183e",
            "decompiledFuncCode": "int64_t function_401839(void) {\n    // 0x401839\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401840",
            "funcStartAddr": "401840",
            "funcEndAddr": "401dd4",
            "decompiledFuncCode": "int64_t function_401840(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401855\n    int64_t v2; // bp-136, 0x401840\n    int64_t v3 = &v2; // 0x401862\n    function_4024c0(a2);\n    setlocale(LC_ALL, (char *)&g11);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_406170(0x402420, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v4 = 0xffffffff; // 0x40189b\n    int64_t v5 = 0; // 0x40189b\n    int64_t v6 = 0; // 0x40189b\n    int32_t v7; // 0x401840\n    int64_t v8; // 0x401840\n    int64_t v9; // 0x401840\n    int64_t v10; // 0x401840\n    int64_t v11; // 0x401840\n    int64_t v12; // 0x401840\n    int32_t v13; // 0x401840\n    int64_t v14; // 0x401840\n    int64_t v15; // 0x401840\n    while (true) {\n      lab_0x4018a0_2:\n        // 0x4018a0\n        v14 = v4;\n        v8 = v5;\n        v10 = v6;\n        uint32_t v16; // 0x401840\n        while (true) {\n          lab_0x4018a0:\n            // 0x4018a0\n            v11 = v10;\n            v9 = v8;\n            int64_t v17 = function_405680(v1, a2, \"0::1::2::3::4::5::6::7::8::9::A::B::C::D::E::F::G::H::I::J::K::M::N::O::P::Q::R::S::T::U::V::W::X::Y::Z::Lln:s:t\", &g3, 0, a6); // 0x4018b3\n            v16 = (int32_t)v17;\n            v12 = 1;\n            switch (v16) {\n                case -1: {\n                    goto lab_0x401a01;\n                }\n                case 76: {\n                    goto lab_0x4018ee;\n                }\n                default: {\n                    if (v16 <= 76) {\n                        // break -> 0x401978\n                        break;\n                    }\n                    // 0x4018d0\n                    v12 = v11;\n                    if (v16 != 108) {\n                        if (v16 <= 108) {\n                            if (v16 > 90) {\n                                goto lab_0x40190a;\n                            } else {\n                                // 0x40191e\n                                v13 = g27;\n                                goto lab_0x401925;\n                            }\n                        }\n                        if (v16 == 115) {\n                            // 0x401a50\n                            v15 = g47;\n                            goto lab_0x401955;\n                        }\n                        // 0x4018e2\n                        v12 = 1;\n                        if (v16 != 116) {\n                            if (v16 == 110) {\n                                // 0x401a50\n                                v15 = g47;\n                                goto lab_0x401955;\n                            } else {\n                                goto lab_0x40190a;\n                            }\n                        }\n                    }\n                    goto lab_0x4018ee;\n                }\n            }\n        }\n        if (v16 > 57) {\n            if (v16 <= 64) {\n                // 0x40190a\n                function_401ec0(1);\n                // UNREACHABLE\n            }\n            int32_t v18 = g27; // 0x40191e\n            v13 = v18;\n            goto lab_0x401925;\n        } else {\n            if (v16 <= 47) {\n                if (v16 == -131) {\n                    struct _IO_FILE * v19 = g30; // 0x40199d\n                    char (*v20)[5] = g18; // 0x4019a4\n                    function_404560((int64_t)v19, \"kill\", \"GNU coreutils\", (int64_t)v20, \"Paul Eggert\", 0);\n                    exit(0);\n                    // UNREACHABLE\n                }\n                if (v16 == -130) {\n                    // 0x4019dd\n                    function_401ec0(0);\n                    // UNREACHABLE\n                }\n                goto lab_0x40190a;\n            }\n            int32_t v21 = g27; // 0x4019e8\n            v13 = 2;\n            if (v21 != 2) {\n                int32_t v22 = v21 - 1; // 0x4019f8\n                g27 = v22;\n                v7 = v22;\n                goto lab_0x401a01_2;\n            }\n            goto lab_0x401925;\n        }\n    }\n  lab_0x401a01:\n    // 0x401a01\n    v7 = g27;\n    goto lab_0x401a01_2;\n  lab_0x401a90:;\n    // 0x401a90\n    int64_t v76; // 0x401840\n    function_4040e0(v76);\n    error(0, (int32_t)\"%s: invalid process id\" ^ (int32_t)\"%s: invalid process id\", dcgettext(NULL, \"%s: invalid process id\", 5));\n    int64_t v77 = 1; // 0x401abe\n    goto lab_0x401ac3;\n  lab_0x401ac3:;\n    // 0x401ac3\n    int64_t v75; // 0x401840\n    int64_t v79 = v75 + 8; // 0x401ac3\n    int64_t v80 = *(int64_t *)v79; // 0x401ac7\n    int64_t v73 = v80; // 0x401acd\n    int64_t v74 = v77; // 0x401acd\n    v75 = v79;\n    int64_t v78 = v77; // 0x401acd\n    if (v80 == 0) {\n        // break -> 0x401afb\n        goto lab_0x401afb;\n    }\n    goto lab_0x401acf;\n  lab_0x4018ee:\n    // 0x4018ee\n    v8 = 1;\n    v10 = v12;\n    int64_t v71 = (int64_t)\"multiple -l or -t options specified\"; // 0x4018f1\n    if (v9 != 0) {\n        goto lab_0x401d7a;\n    }\n    goto lab_0x4018a0;\n  lab_0x401925:;\n    int64_t v81 = *(int64_t *)(a2 - 8 + 8 * (int64_t)v13); // 0x401931\n    int64_t v82 = g47; // 0x401937\n    int64_t v83 = v81; // 0x401937\n    if (g47 == 0) {\n        int64_t v84 = -1; // 0x401a64\n        int64_t v85 = 0; // 0x401a64\n        while (v84 != 0) {\n            int64_t v86 = v83;\n            v84--;\n            bool v87; // 0x401840\n            v83 = v86 + (v87 ? -1 : 1);\n            v85 = v84;\n            if (*(char *)v86 == 0) {\n                // break -> \n                break;\n            }\n            v85 = 0;\n        }\n        int64_t v88 = v81 - 1 + -1 - v85; // 0x401a69\n        g47 = v88;\n        v82 = v88;\n    }\n    // 0x40193d\n    if (v82 != v81 + 2) {\n        // 0x401d94\n        error(0, (int32_t)\"invalid option -- %c\" ^ (int32_t)\"invalid option -- %c\", dcgettext(NULL, \"invalid option -- %c\", 5));\n        function_401ec0(1);\n        // UNREACHABLE\n    }\n    int64_t v89 = v81 + 1; // 0x40194a\n    g47 = v89;\n    v15 = v89;\n    goto lab_0x401955;\n  lab_0x401955:;\n    int64_t v90 = v15;\n    if (v14 != 0xffffffff) {\n        // 0x401d3c\n        function_4040e0(v90);\n        error(0, (int32_t)\"%s: multiple signals specified\" ^ (int32_t)\"%s: multiple signals specified\", dcgettext(NULL, \"%s: multiple signals specified\", 5));\n        function_401ec0(1);\n        // UNREACHABLE\n    }\n    // 0x40195e\n    int64_t v91; // bp-120, 0x401840\n    int64_t v92 = function_402250(v90, &v91); // 0x401963\n    v4 = v92 & 0xffffffff;\n    v5 = v9;\n    v6 = v11;\n    if ((int32_t)v92 < 0) {\n      lab_0x40190a:\n        // 0x40190a\n        function_401ec0(1);\n        // UNREACHABLE\n    }\n    goto lab_0x4018a0_2;\n  lab_0x401a01_2:;\n    int64_t v23 = v7; // 0x401a01\n    int64_t v24; // 0x401840\n    char * str; // bp-88, 0x401840\n    if (v14 == 0xffffffff) {\n        // 0x401b0d\n        v24 = 15;\n        if (v9 != 0) {\n            int64_t v25 = v1 > v23 ? 8 * v23 + a2 : 0;\n            if ((char)v11 == 0) {\n                if (v25 == 0) {\n                    int64_t v26 = 1; // 0x401840\n                    int64_t v27 = function_4058e0(v26, (int64_t *)&str, (int64_t)\"0::1::2::3::4::5::6::7::8::9::A::B::C::D::E::F::G::H::I::J::K::M::N::O::P::Q::R::S::T::U::V::W::X::Y::Z::Lln:s:t\"); // 0x401d29\n                    if ((int32_t)v27 == 0) {\n                        // 0x401d32\n                        puts((char *)&str);\n                    }\n                    int64_t v28 = v26 + 1; // 0x401d18\n                    v26 = v28 & 0xffffffff;\n                    while ((int32_t)v28 != 65) {\n                        // 0x401d24\n                        v27 = function_4058e0(v26, (int64_t *)&str, (int64_t)\"0::1::2::3::4::5::6::7::8::9::A::B::C::D::E::F::G::H::I::J::K::M::N::O::P::Q::R::S::T::U::V::W::X::Y::Z::Lln:s:t\");\n                        if ((int32_t)v27 == 0) {\n                            // 0x401d32\n                            puts((char *)&str);\n                        }\n                        // 0x401d18\n                        v28 = v26 + 1;\n                        v26 = v28 & 0xffffffff;\n                    }\n                    // 0x401afb\n                    return 0;\n                }\n                int64_t * v29 = (int64_t *)v25; // 0x401c32\n                int64_t v30 = *v29; // 0x401c32\n                if (v30 == 0) {\n                    // 0x401afb\n                    return 0;\n                }\n                int64_t v31 = v25; // 0x401c2e\n                int64_t v32 = function_402250(v30, (int64_t *)&str); // 0x401c44\n                int64_t v33 = 1; // 0x401c4b\n                int64_t v34; // 0x401840\n                char v35; // 0x401c19\n                if ((int32_t)v32 >= 0) {\n                    // 0x401c15\n                    v34 = 0;\n                    v35 = *(char *)*v29;\n                    if (v35 == 57 || (int32_t)v35 < 57) {\n                        // 0x401c24\n                        puts((char *)&str);\n                        v33 = v34;\n                    } else {\n                        // 0x401c8d\n                        __printf_chk(1, \"%d\\n\", v32 & 0xffffffff);\n                        v33 = v34;\n                    }\n                }\n                // 0x401c2e\n                v31 += 8;\n                int64_t * v36 = (int64_t *)v31; // 0x401c32\n                int64_t v37 = *v36; // 0x401c32\n                int64_t * v38 = v36; // 0x401c39\n                int64_t v39 = v33; // 0x401c39\n                while (v37 != 0) {\n                    // 0x401c3f\n                    v32 = function_402250(v37, (int64_t *)&str);\n                    v33 = 1;\n                    if ((int32_t)v32 >= 0) {\n                        // 0x401c15\n                        v34 = v39;\n                        v35 = *(char *)*v38;\n                        if (v35 == 57 || (int32_t)v35 < 57) {\n                            // 0x401c24\n                            puts((char *)&str);\n                            v33 = v34;\n                        } else {\n                            // 0x401c8d\n                            __printf_chk(1, \"%d\\n\", v32 & 0xffffffff);\n                            v33 = v34;\n                        }\n                    }\n                    // 0x401c2e\n                    v31 += 8;\n                    v36 = (int64_t *)v31;\n                    v37 = *v36;\n                    v38 = v36;\n                    v39 = v33;\n                }\n                // 0x401afb\n                return v33 & 0xffffffff;\n            }\n            int64_t v40 = (int64_t)&str; // 0x401b33\n            int64_t v41 = (int64_t)\"0::1::2::3::4::5::6::7::8::9::A::B::C::D::E::F::G::H::I::J::K::M::N::O::P::Q::R::S::T::U::V::W::X::Y::Z::Lln:s:t\"; // 0x401b38\n            int64_t v42 = 1; // 0x401b38\n            int64_t v43 = 0;\n            int64_t v44 = function_4058e0(v42, (int64_t *)&str, v41); // 0x401b46\n            int64_t v45 = v41; // 0x401b4d\n            int64_t v46 = v43; // 0x401b4d\n            int64_t v47; // 0x401840\n            int32_t v48; // 0x401b52\n            int64_t v49; // 0x401b54\n            int32_t v50; // 0x401b60\n            uint32_t v51; // 0x401b62\n            unsigned char v52; // 0x401b80\n            if ((int32_t)v44 == 0) {\n                v47 = v40;\n                v48 = *(int32_t *)v47;\n                v49 = v47 + 4;\n                v50 = v48 - 0x1010101 & (v48 ^ -0x7f7f7f80);\n                v51 = v50 & -0x7f7f7f80;\n                while (v51 == 0) {\n                    // 0x401b52\n                    v47 = v49;\n                    v48 = *(int32_t *)v47;\n                    v49 = v47 + 4;\n                    v50 = v48 - 0x1010101 & (v48 ^ -0x7f7f7f80);\n                    v51 = v50 & -0x7f7f7f80;\n                }\n                // 0x401b69\n                v52 = (char)((v50 & 0x8080) == 0 ? v51 / 0x10000 : v51);\n                v45 = ((v50 & 0x8080) == 0 ? v47 + 6 : v49) - (-1 - v52 < v52 ? 4 : 3) - v40;\n                v46 = (v45 > (v43 & 0xffffffff) ? v45 : v43) & 0xffffffff;\n            }\n            int64_t v53 = v46;\n            int64_t v54 = v45;\n            int64_t v55 = v42 + 1; // 0x401b94\n            v41 = v54;\n            v42 = v55 & 0xffffffff;\n            while ((int32_t)v55 != 65) {\n                // 0x401b40\n                v43 = v53;\n                v44 = function_4058e0(v42, (int64_t *)&str, v41);\n                v45 = v41;\n                v46 = v43;\n                if ((int32_t)v44 == 0) {\n                    v47 = v40;\n                    v48 = *(int32_t *)v47;\n                    v49 = v47 + 4;\n                    v50 = v48 - 0x1010101 & (v48 ^ -0x7f7f7f80);\n                    v51 = v50 & -0x7f7f7f80;\n                    while (v51 == 0) {\n                        // 0x401b52\n                        v47 = v49;\n                        v48 = *(int32_t *)v47;\n                        v49 = v47 + 4;\n                        v50 = v48 - 0x1010101 & (v48 ^ -0x7f7f7f80);\n                        v51 = v50 & -0x7f7f7f80;\n                    }\n                    // 0x401b69\n                    v52 = (char)((v50 & 0x8080) == 0 ? v51 / 0x10000 : v51);\n                    v45 = ((v50 & 0x8080) == 0 ? v47 + 6 : v49) - (-1 - v52 < v52 ? 4 : 3) - v40;\n                    v46 = (v45 > (v43 & 0xffffffff) ? v45 : v43) & 0xffffffff;\n                }\n                // 0x401b94\n                v53 = v46;\n                v54 = v45;\n                v55 = v42 + 1;\n                v41 = v54;\n                v42 = v55 & 0xffffffff;\n            }\n            if (v25 == 0) {\n                int64_t * v56 = (int64_t *)(v3 - 16);\n                int64_t sig_num = 1;\n                int64_t v57 = function_4058e0(sig_num, (int64_t *)&str, v54); // 0x401cc9\n                int64_t v58 = v54; // 0x401cd0\n                char * v59; // 0x401cd4\n                if ((int32_t)v57 == 0) {\n                    // 0x401cd2\n                    v59 = strsignal((int32_t)sig_num);\n                    *(int64_t *)(v3 - 8) = v54;\n                    *v56 = v59 == NULL ? (int64_t)&g2 : (int64_t)v59;\n                    __printf_chk(1, \"%*d %-*s %s\\n\", 2, sig_num, v53 & 0xffffffff, &str);\n                    v58 = 2;\n                }\n                int64_t v60 = sig_num + 1; // 0x401cb8\n                while ((int32_t)v60 != 65) {\n                    // 0x401cc4\n                    sig_num = v60 & 0xffffffff;\n                    int64_t v61 = v58;\n                    v57 = function_4058e0(sig_num, (int64_t *)&str, v61);\n                    v58 = v61;\n                    if ((int32_t)v57 == 0) {\n                        // 0x401cd2\n                        v59 = strsignal((int32_t)sig_num);\n                        *(int64_t *)(v3 - 8) = v61;\n                        *v56 = v59 == NULL ? (int64_t)&g2 : (int64_t)v59;\n                        __printf_chk(1, \"%*d %-*s %s\\n\", 2, sig_num, v53 & 0xffffffff, &str);\n                        v58 = 2;\n                    }\n                    // 0x401cb8\n                    v60 = sig_num + 1;\n                }\n                // 0x401afb\n                return 0;\n            }\n            int64_t v62 = *(int64_t *)v25; // 0x401bb5\n            if (v62 == 0) {\n                // 0x401afb\n                return 0;\n            }\n            int64_t * v63 = (int64_t *)(v3 - 16);\n            int64_t v64 = v25; // 0x401bb1\n            int64_t v65 = function_402250(v62, (int64_t *)&str); // 0x401bc5\n            uint32_t sig_num2 = (int32_t)v65; // 0x401bcd\n            int64_t v66 = 1; // 0x401bcf\n            int64_t v67; // 0x401bca\n            char * v68; // 0x401bd3\n            if (sig_num2 >= 0) {\n                // 0x401bd1\n                v66 = 0;\n                v67 = v65 & 0xffffffff;\n                v68 = strsignal(sig_num2);\n                *(int64_t *)(v3 - 8) = v67;\n                *v63 = v68 == NULL ? (int64_t)&g2 : (int64_t)v68;\n                __printf_chk(1, \"%*d %-*s %s\\n\", 2, v67, v53 & 0xffffffff, &str);\n            }\n            // 0x401bb1\n            v64 += 8;\n            int64_t v69 = *(int64_t *)v64; // 0x401bb5\n            int64_t v70 = v66; // 0x401bbc\n            while (v69 != 0) {\n                // 0x401bc2\n                v65 = function_402250(v69, (int64_t *)&str);\n                sig_num2 = (int32_t)v65;\n                v66 = 1;\n                if (sig_num2 >= 0) {\n                    // 0x401bd1\n                    v66 = v70;\n                    v67 = v65 & 0xffffffff;\n                    v68 = strsignal(sig_num2);\n                    *(int64_t *)(v3 - 8) = v67;\n                    *v63 = v68 == NULL ? (int64_t)&g2 : (int64_t)v68;\n                    __printf_chk(1, \"%*d %-*s %s\\n\", 2, v67, v53 & 0xffffffff, &str);\n                }\n                // 0x401bb1\n                v64 += 8;\n                v69 = *(int64_t *)v64;\n                v70 = v66;\n            }\n            // 0x401afb\n            return v66 & 0xffffffff;\n        }\n    } else {\n        // 0x401a11\n        v24 = v14;\n        v71 = (int64_t)\"cannot combine signal with -l or -t\";\n        if (v9 != 0) {\n          lab_0x401d7a:\n            // 0x401d7a\n            error(0, 0, dcgettext(NULL, (char *)v71, 5));\n            // 0x40190a\n            function_401ec0(1);\n            // UNREACHABLE\n        }\n    }\n    // 0x401a24\n    if (v1 <= v23) {\n        // 0x401d7a\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"no process ID specified\", 5));\n        // 0x40190a\n        function_401ec0(1);\n        // UNREACHABLE\n    }\n    int64_t v72 = 8 * v23 + a2; // 0x401a37\n    int32_t * err_num = __errno_location(); // 0x401a43\n    int32_t sig_num3 = v24;\n    v73 = *(int64_t *)v72;\n    v74 = 0;\n    v75 = v72;\n    while (true) {\n      lab_0x401acf:\n        // 0x401acf\n        v76 = v73;\n        *err_num = 0;\n        int32_t pid = __strtol_internal((char *)v76, &str, 10, 0); // 0x401ae3\n        if (*err_num == 34) {\n            goto lab_0x401a90;\n        } else {\n            if ((int64_t)pid >= 0x80000000) {\n                goto lab_0x401a90;\n            } else {\n                // 0x401af6\n                if (v76 == (int64_t)str) {\n                    goto lab_0x401a90;\n                } else {\n                    // 0x401a87\n                    if (*str == 0) {\n                        // 0x401c55\n                        v77 = v74;\n                        if (kill(pid, sig_num3) != 0) {\n                            // 0x401c66\n                            error(0, *err_num, \"%s\", (char *)function_4040e0(v76));\n                            v77 = 1;\n                        }\n                        goto lab_0x401ac3;\n                    } else {\n                        goto lab_0x401a90;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x401afb:\n    // 0x401afb\n    return v78 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401de0",
            "funcEndAddr": "401e0b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401de0\n    int64_t v1; // 0x401de0\n    __libc_start_main(0x401840, (int32_t)a4, (char **)&v1, (void (*)())0x406100, (void (*)())0x406160, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e0b",
            "funcStartAddr": "401e0b",
            "funcEndAddr": "401e2a",
            "decompiledFuncCode": "int64_t function_401e0b(void) {\n    // 0x401e0b\n    return 0x609428;\n}\n"
        },
        {
            "funcName": "function_401e2a",
            "funcStartAddr": "401e2a",
            "funcEndAddr": "401e61",
            "decompiledFuncCode": "int64_t function_401e2a(void) {\n    // 0x401e2a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401e61",
            "funcStartAddr": "401e61",
            "funcEndAddr": "401eb8",
            "decompiledFuncCode": "int64_t function_401e61(void) {\n    // 0x401e61\n    if (g33 != 0) {\n        // 0x401eb7\n        int64_t result; // 0x401e61\n        return result;\n    }\n    int64_t v1 = g34; // 0x401e94\n    int64_t result2; // 0x401ea6\n    if (g34 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401ea6\n        result2 = function_401e0b();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401e96\n        v1++;\n    }\n    // 0x401e8a\n    g34 = v1;\n    // 0x401ea6\n    result2 = function_401e0b();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401eb8",
            "funcStartAddr": "401eb8",
            "funcEndAddr": "401ebd",
            "decompiledFuncCode": "int64_t function_401eb8(void) {\n    // 0x401eb8\n    return function_401e2a();\n}\n"
        },
        {
            "funcName": "function_401ec0",
            "funcStartAddr": "401ec0",
            "funcEndAddr": "402245",
            "decompiledFuncCode": "int64_t function_401ec0(int64_t a1) {\n    int32_t status = a1; // 0x401ed6\n    if (status != 0) {\n        // 0x401eda\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401eff\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401f06\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [-s SIGNAL | -SIGNAL] PID...\\n  or:  %s -l [SIGNAL]...\\n  or:  %s -t [SIGNAL]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Send signals to processes, or list signals.\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"  -s, --signal=SIGNAL, -SIGNAL\\n                   specify the name or number of the signal to be sent\\n  -l, --list       list signal names, or convert signal names to/from numbers\\n  -t, --table      print a table of signal information\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"\\nSIGNAL may be a signal name like 'HUP', or a signal number like '1',\\nor the exit status of a process terminated by a signal.\\nPID is an integer; if negative it identifies a process group.\\n\", 5), g30);\n    __printf_chk(1, dcgettext(NULL, \"\\nNOTE: your shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x402021\n    bool v2; // 0x401ec0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4020a8\n    int64_t v6 = *(int64_t *)v5; // 0x4020ac\n    int64_t v7 = 5; // 0x4020b2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"kill\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4020be\n        char v11 = *(char *)v9; // 0x4020be\n        char v12 = v11; // 0x4020be\n        bool v13 = false; // 0x4020be\n        while (v10 == v11) {\n            // 0x4020b4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4020be\n            int64_t v15 = v8 + v3; // 0x4020be\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4020ca\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x4020ca\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4021dc;\n        } else {\n            // 0x4021c6\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40221b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40212c;\n            } else {\n                goto lab_0x4021dc;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40212c;\n        } else {\n            // 0x402112\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40221b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40212c;\n            } else {\n                goto lab_0x40212c;\n            }\n        }\n    }\n  lab_0x4021dc:\n    // 0x4021dc\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40216c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401eff\n    exit(status);\n    // UNREACHABLE\n  lab_0x40212c:\n    // 0x40212c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40216c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401eff\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402250",
            "funcStartAddr": "402250",
            "funcEndAddr": "4023f4",
            "decompiledFuncCode": "int64_t function_402250(int64_t str, int64_t * a2) {\n    char v1 = str;\n    int64_t v2; // 0x402250\n    int64_t v3; // 0x402250\n    int32_t result; // bp-52, 0x402250\n    int64_t v4; // 0x4022f8\n    if (v1 == 57 || (int32_t)v1 < 57) {\n        int32_t * v5 = __errno_location(); // 0x402271\n        *v5 = 0;\n        char * endptr; // bp-48, 0x402250\n        int32_t str_as_l = strtol((char *)str, &endptr, 10); // 0x40228c\n        if ((int64_t)endptr == str) {\n            // 0x4022b8\n            result = -1;\n            goto lab_0x4022c0;\n        } else {\n            // 0x40229b\n            if (*endptr != 0) {\n                // 0x4022b8\n                result = -1;\n                goto lab_0x4022c0;\n            } else {\n                // 0x4022a0\n                if (*v5 != 0) {\n                    // 0x4022b8\n                    result = -1;\n                    goto lab_0x4022c0;\n                } else {\n                    if (str_as_l == -1) {\n                        // 0x4023eb\n                        result = -1;\n                        goto lab_0x4022c0;\n                    } else {\n                        int64_t v6 = str_as_l; // 0x40228c\n                        int32_t v7 = str_as_l - 254; // 0x4023cd\n                        int64_t v8 = (v7 < 0 == (253 - str_as_l & str_as_l) < 0 == (v7 != 0) ? 255 : 127) & v6; // 0x4023e0\n                        result = v8;\n                        v3 = v6;\n                        v2 = v8;\n                        goto lab_0x402359;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x4022f8\n        v4 = function_4048d0(str);\n        char * v9 = (char *)v4; // 0x4022fd\n        char c = *v9; // 0x4022fd\n        if (c != 0) {\n            if (strchr(\"abcdefghijklmnopqrstuvwxyz\", (int32_t)c) != NULL) {\n                // 0x402322\n                *(char *)v4 = c - 32;\n            }\n            int64_t v10 = v4 + 1; // 0x402328\n            char v11 = *(char *)v10; // 0x40232c\n            while (v11 != 0) {\n                int64_t v12 = v10;\n                char c2 = v11;\n                if (strchr(\"abcdefghijklmnopqrstuvwxyz\", (int32_t)c2) != NULL) {\n                    // 0x402322\n                    *(char *)v12 = c2 - 32;\n                }\n                // 0x402328\n                v10 = v12 + 1;\n                v11 = *(char *)v10;\n            }\n        }\n        // 0x402334\n        if ((int32_t)function_405780(v4, &result) != 0) {\n            // 0x402380\n            if (*v9 == 83) {\n                // 0x4023a0\n                if (*(char *)(v4 + 1) != 73) {\n                    // 0x402387\n                    result = -1;\n                    free((int64_t *)v4);\n                    goto lab_0x4022c0;\n                } else {\n                    // 0x4023a7\n                    if (*(char *)(v4 + 2) != 71) {\n                        // 0x402387\n                        result = -1;\n                        free((int64_t *)v4);\n                        goto lab_0x4022c0;\n                    } else {\n                        // 0x4023ae\n                        if ((int32_t)function_405780(v4 + 3, &result) != 0) {\n                            // 0x402387\n                            result = -1;\n                            free((int64_t *)v4);\n                            goto lab_0x4022c0;\n                        } else {\n                            goto lab_0x402345;\n                        }\n                    }\n                }\n            } else {\n                // 0x402387\n                result = -1;\n                free((int64_t *)v4);\n                goto lab_0x4022c0;\n            }\n        } else {\n            goto lab_0x402345;\n        }\n    }\n  lab_0x402345:\n    // 0x402345\n    free((int64_t *)v4);\n    v2 = result;\n    if (result < 0) {\n        goto lab_0x4022c0;\n    } else {\n        goto lab_0x402359;\n    }\n  lab_0x4022c0:\n    // 0x4022c0\n    function_4040e0(str);\n    error(0, (int32_t)\"%s: invalid signal\" ^ (int32_t)\"%s: invalid signal\", dcgettext(NULL, \"%s: invalid signal\", 5));\n    // 0x40236f\n    return 0xffffffff;\n  lab_0x402359:\n    // 0x402359\n    if ((int32_t)function_4058e0(v2 & 0xffffffff, a2, v3) == 0) {\n        // 0x40236f\n        return result;\n    }\n    goto lab_0x4022c0;\n}\n"
        },
        {
            "funcName": "function_402400",
            "funcStartAddr": "402400",
            "funcEndAddr": "402408",
            "decompiledFuncCode": "int64_t function_402400(int64_t a1) {\n    // 0x402400\n    g36 = a1;\n    int64_t result; // 0x402400\n    return result;\n}\n"
        },
        {
            "funcName": "function_402410",
            "funcStartAddr": "402410",
            "funcEndAddr": "402418",
            "decompiledFuncCode": "int64_t function_402410(int64_t a1) {\n    // 0x402410\n    g35 = a1;\n    int64_t result; // 0x402410\n    return result;\n}\n"
        },
        {
            "funcName": "function_402420",
            "funcStartAddr": "402420",
            "funcEndAddr": "4024be",
            "decompiledFuncCode": "int64_t function_402420(void) {\n    // 0x402420\n    int32_t * err_num; // 0x402436\n    if ((int32_t)function_4059b0((int64_t)g30) == 0) {\n        goto lab_0x40244c;\n    } else {\n        // 0x402436\n        err_num = __errno_location();\n        if (g35 == 0) {\n            goto lab_0x402463;\n        } else {\n            // 0x402447\n            if (*err_num != 32) {\n                goto lab_0x402463;\n            } else {\n                goto lab_0x40244c;\n            }\n        }\n    }\n  lab_0x40244c:;\n    int64_t result = function_4059b0((int64_t)g32); // 0x402453\n    if ((int32_t)result == 0) {\n        // 0x40245c\n        return result;\n    }\n    // 0x40249e\n    _exit(g19);\n    // UNREACHABLE\n  lab_0x402463:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40246f\n    if (g36 == 0) {\n        // 0x4024a9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402483\n        error(0, *err_num, \"%s: %s\", (char *)function_403f30((int64_t)g36), v1);\n    }\n    // 0x40249e\n    _exit(g19);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4024c0",
            "funcStartAddr": "4024c0",
            "funcEndAddr": "402559",
            "decompiledFuncCode": "int64_t function_4024c0(int64_t str) {\n    // 0x4024c0\n    if (str == 0) {\n        // 0x402539\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4024ce\n    int64_t result = (int64_t)found_char_pos; // 0x4024ce\n    if (found_char_pos == NULL) {\n        // 0x402529\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4024d8\n    if (v1 - str < 7) {\n        // 0x402529\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x4024e8\n    bool v2; // 0x4024c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4024c0\n    int64_t v5 = result - 6; // 0x4024c0\n    int64_t v6 = 7; // 0x4024f6\n    unsigned char v7 = *(char *)v5; // 0x4024f6\n    char v8 = *(char *)v4; // 0x4024f6\n    char v9 = v8; // 0x4024f6\n    bool v10 = false; // 0x4024f6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402500\n    int64_t v13 = v1; // 0x402500\n    int64_t v14 = 3; // 0x402500\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402529\n        g37 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402512\n    char v16 = *(char *)v12; // 0x402512\n    char v17 = v16; // 0x402512\n    bool v18 = false; // 0x402512\n    while (v15 == v16) {\n        // 0x402502\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40251c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40251e\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x402529\n    g37 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402560",
            "funcStartAddr": "402560",
            "funcEndAddr": "402652",
            "decompiledFuncCode": "int64_t function_402560(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402574\n    int64_t result = (int64_t)v1; // 0x402574\n    if (result != a1) {\n        // 0x402581\n        return result;\n    }\n    int64_t v2 = function_405a70(); // 0x402590\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402646\n    if (v3 == 85) {\n        // 0x4025a0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402638\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x4025ce\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x4025db\n        // 0x402581\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402638\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x40261d\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x40262a\n    // 0x402581\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402660",
            "funcStartAddr": "402660",
            "funcEndAddr": "4026b7",
            "decompiledFuncCode": "int64_t function_402660(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402660\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4026a8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4026b7",
            "funcStartAddr": "4026b7",
            "funcEndAddr": "403881",
            "decompiledFuncCode": "int64_t function_4026b7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402701\n    int64_t v3 = 0; // 0x402701\n    int64_t v4; // 0x4026b7\n    int64_t v5; // 0x4026b7\n    int64_t v6; // 0x4026b7\n    int64_t v7; // 0x4026b7\n    int64_t v8; // 0x4026b7\n    int64_t v9; // 0x4026b7\n    int64_t v10; // 0x4026b7\n    int64_t v11; // 0x4026b7\n    int64_t v12; // 0x4026b7\n    int64_t v13; // 0x4026b7\n    int64_t v14; // 0x4026b7\n    int64_t v15; // 0x4026b7\n    int64_t v16; // 0x4026b7\n    int64_t v17; // 0x4026b7\n    int64_t v18; // 0x4026b7\n    int64_t result; // 0x4026b7\n    int64_t v19; // 0x4026b7\n    int32_t wc; // bp+132, 0x4026b7\n    int64_t ps; // bp+136, 0x4026b7\n    char v20; // 0x402c70\n    int64_t v21; // 0x402c70\n    int64_t v22; // 0x403018\n    int64_t v23; // 0x4026b7\n    int64_t v24; // 0x403037\n    int32_t v25; // 0x4026b7\n    while (true) {\n      lab_0x402708_2:\n        // 0x402708\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4026b7\n        int64_t v27; // 0x40273c\n        while (true) {\n          lab_0x402708:\n            // 0x402708\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402713\n            if (v15 == -1) {\n                // 0x402715\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402723\n            if (v28) {\n                // break (via goto) -> 0x402e88\n                goto lab_0x402e88;\n            }\n            // 0x40272c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g48 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x402d1b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402861;\n                    }\n                    // 0x40313d\n                    v26 = v5 + 1;\n                    goto lab_0x402708;\n                }\n                case 7: {\n                    goto lab_0x402861;\n                }\n                case 8: {\n                    goto lab_0x402861;\n                }\n                case 9: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402861;\n                }\n                case 12: {\n                    goto lab_0x402861;\n                }\n                case 13: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40282d;\n                }\n                case 36: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402861;\n                }\n                case 38: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402861;\n                }\n                case 44: {\n                    goto lab_0x402861;\n                }\n                case 45: {\n                    goto lab_0x402861;\n                }\n                case 46: {\n                    goto lab_0x402861;\n                }\n                case 47: {\n                    goto lab_0x402861;\n                }\n                case 48: {\n                    goto lab_0x402861;\n                }\n                case 49: {\n                    goto lab_0x402861;\n                }\n                case 50: {\n                    goto lab_0x402861;\n                }\n                case 51: {\n                    goto lab_0x402861;\n                }\n                case 52: {\n                    goto lab_0x402861;\n                }\n                case 53: {\n                    goto lab_0x402861;\n                }\n                case 54: {\n                    goto lab_0x402861;\n                }\n                case 55: {\n                    goto lab_0x402861;\n                }\n                case 56: {\n                    goto lab_0x402861;\n                }\n                case 57: {\n                    goto lab_0x402861;\n                }\n                case 58: {\n                    goto lab_0x402861;\n                }\n                case 59: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402861;\n                }\n                case 66: {\n                    goto lab_0x402861;\n                }\n                case 67: {\n                    goto lab_0x402861;\n                }\n                case 68: {\n                    goto lab_0x402861;\n                }\n                case 69: {\n                    goto lab_0x402861;\n                }\n                case 70: {\n                    goto lab_0x402861;\n                }\n                case 71: {\n                    goto lab_0x402861;\n                }\n                case 72: {\n                    goto lab_0x402861;\n                }\n                case 73: {\n                    goto lab_0x402861;\n                }\n                case 74: {\n                    goto lab_0x402861;\n                }\n                case 75: {\n                    goto lab_0x402861;\n                }\n                case 76: {\n                    goto lab_0x402861;\n                }\n                case 77: {\n                    goto lab_0x402861;\n                }\n                case 78: {\n                    goto lab_0x402861;\n                }\n                case 79: {\n                    goto lab_0x402861;\n                }\n                case 80: {\n                    goto lab_0x402861;\n                }\n                case 81: {\n                    goto lab_0x402861;\n                }\n                case 82: {\n                    goto lab_0x402861;\n                }\n                case 83: {\n                    goto lab_0x402861;\n                }\n                case 84: {\n                    goto lab_0x402861;\n                }\n                case 85: {\n                    goto lab_0x402861;\n                }\n                case 86: {\n                    goto lab_0x402861;\n                }\n                case 87: {\n                    goto lab_0x402861;\n                }\n                case 88: {\n                    goto lab_0x402861;\n                }\n                case 89: {\n                    goto lab_0x402861;\n                }\n                case 90: {\n                    goto lab_0x402861;\n                }\n                case 91: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402861;\n                }\n                case 94: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402861;\n                }\n                case 96: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402861;\n                }\n                case 98: {\n                    goto lab_0x402861;\n                }\n                case 99: {\n                    goto lab_0x402861;\n                }\n                case 100: {\n                    goto lab_0x402861;\n                }\n                case 101: {\n                    goto lab_0x402861;\n                }\n                case 102: {\n                    goto lab_0x402861;\n                }\n                case 103: {\n                    goto lab_0x402861;\n                }\n                case 104: {\n                    goto lab_0x402861;\n                }\n                case 105: {\n                    goto lab_0x402861;\n                }\n                case 106: {\n                    goto lab_0x402861;\n                }\n                case 107: {\n                    goto lab_0x402861;\n                }\n                case 108: {\n                    goto lab_0x402861;\n                }\n                case 109: {\n                    goto lab_0x402861;\n                }\n                case 110: {\n                    goto lab_0x402861;\n                }\n                case 111: {\n                    goto lab_0x402861;\n                }\n                case 112: {\n                    goto lab_0x402861;\n                }\n                case 113: {\n                    goto lab_0x402861;\n                }\n                case 114: {\n                    goto lab_0x402861;\n                }\n                case 115: {\n                    goto lab_0x402861;\n                }\n                case 116: {\n                    goto lab_0x402861;\n                }\n                case 117: {\n                    goto lab_0x402861;\n                }\n                case 118: {\n                    goto lab_0x402861;\n                }\n                case 119: {\n                    goto lab_0x402861;\n                }\n                case 120: {\n                    goto lab_0x402861;\n                }\n                case 121: {\n                    goto lab_0x402861;\n                }\n                case 122: {\n                    goto lab_0x402861;\n                }\n                case 123: {\n                    goto lab_0x402805;\n                }\n                case 124: {\n                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402805;\n                }\n                case 126: {\n                    goto lab_0x40282d;\n                }\n                default: {\n                    goto lab_0x402c05;\n                }\n            }\n        }\n      lab_0x402c05:\n        if (v23 != 1) {\n            // 0x402f70\n            ps = 0;\n            int64_t len = v15; // 0x402f80\n            if (v15 == -1) {\n                // 0x402f82\n                len = strlen((char *)str);\n            }\n            // 0x402fae\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40300f:\n                // 0x40300f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403014\n                int64_t v30 = v29 + str;\n                v24 = function_405700(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40358a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40358a_2;\n                    }\n                    case -2: {\n                        // 0x40366d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4036a7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4036aa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4036b7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4036b0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40358a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40358a_2;\n                    }\n                    case 1: {\n                        goto lab_0x402fe0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40308c\n                        char v34 = *(char *)v33; // 0x40309d\n                        unsigned char v35; // 0x4026b7\n                        if (v34 < 125) {\n                            // 0x4030a8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4030bf\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403090\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40309d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4030a8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4030bf\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403090\n                            v33++;\n                        }\n                        goto lab_0x402fe0;\n                    }\n                }\n            }\n            goto lab_0x40358a_2;\n        } else {\n            // 0x402c54\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402861;\n        }\n    }\n  lab_0x402e88:\n    // 0x402e88\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40378a\n        if (v8 > result) {\n            // 0x403793\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402ab7\n        return result;\n    }\n    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402861:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402870\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402a7a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402971\n    char v40 = v20; // 0x402971\n    int64_t v41 = v38; // 0x402971\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402971\n    int64_t v43 = v36; // 0x402971\n    goto lab_0x4028ed;\n  lab_0x402a7a_2:\n    // 0x402ab7\n    return function_402660(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40358a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402861;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40315e\n        int64_t v50 = v5 + 1; // 0x403241\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403248\n        char v52 = v20; // 0x403248\n        int64_t v53 = result; // 0x403248\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403211\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403215\n            int64_t v56 = v54 + 1; // 0x40321a\n            int64_t v57 = v51 + 1; // 0x403241\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40320c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403211\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403215\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x4028ed;\n    }\n  lab_0x402fe0:\n    // 0x402fe0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x402fff\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403002\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40358a\n        goto lab_0x40358a_2;\n    }\n    goto lab_0x40300f;\n  lab_0x40282d:\n    // 0x40282d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402a7a_2;\n    }\n    goto lab_0x402861;\n  lab_0x402805:;\n    bool v60 = v15 == 1; // 0x402810\n    if (v15 == -1) {\n        // 0x402812\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40281e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402861;\n    } else {\n        goto lab_0x40282d;\n    }\n  lab_0x4028ed:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4028f2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4028f6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402708_2;\n}\n"
        },
        {
            "funcName": "function_403890",
            "funcStartAddr": "403890",
            "funcEndAddr": "403a2e",
            "decompiledFuncCode": "int64_t function_403890(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403892\n    int32_t * v3 = __errno_location(); // 0x4038ac\n    int64_t v4 = (int64_t)g21; // 0x4038b1\n    int32_t v5 = *v3; // 0x4038bb\n    int64_t v6 = v4; // 0x4038d1\n    if (v2 >= (int64_t)*(int32_t *)&g24) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403a29\n            function_4048f0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4038e0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4038e7\n        int64_t v9; // 0x403890\n        if (g21 == &g22) {\n            int64_t v10 = function_404700(0, v8); // 0x403a0a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g22); // 0x403a0f\n            *(int64_t *)&g21 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404700(v4, v8); // 0x4038fb\n            *(int64_t *)&g21 = v12;\n            v9 = v12;\n        }\n        // 0x40390a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g24; // 0x40390a\n        int32_t v14 = v7; // 0x403911\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g24 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403941\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40394b\n    int64_t * v17 = (int64_t *)v15; // 0x40394e\n    uint64_t v18 = *v17; // 0x40394e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403951\n    int64_t result = *v19; // 0x403951\n    int64_t v20; // 0x403890\n    uint64_t v21 = function_402660(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403974\n    if (v18 > v21) {\n        // 0x4039eb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403987\n    *v17 = v22;\n    if (result != (int64_t)&g38) {\n        // 0x403997\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4046a0(v22); // 0x4039b1\n    *v19 = result2;\n    int64_t v23; // 0x403890\n    function_402660(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x4039eb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403a30",
            "funcStartAddr": "403a30",
            "funcEndAddr": "403a64",
            "decompiledFuncCode": "int64_t function_403a30(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403a37\n    int64_t result = function_4048a0(a1 == 0 ? (int64_t)&g39 : a1, 56); // 0x403a56\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a70",
            "funcStartAddr": "403a70",
            "funcEndAddr": "403a7f",
            "decompiledFuncCode": "int64_t function_403a70(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g39 : a1); // 0x403a7c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a80",
            "funcStartAddr": "403a80",
            "funcEndAddr": "403a8f",
            "decompiledFuncCode": "int64_t function_403a80(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x403a88\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_403a90",
            "funcStartAddr": "403a90",
            "funcEndAddr": "403ac3",
            "decompiledFuncCode": "int64_t function_403a90(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 + 8 : a1 + 8; // 0x403aa9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x403aae\n    uint32_t v3 = *v2; // 0x403aae\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403ab2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403ad0",
            "funcStartAddr": "403ad0",
            "funcEndAddr": "403ae3",
            "decompiledFuncCode": "int64_t function_403ad0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g39 + 4 : a1 + 4); // 0x403adc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403af0",
            "funcStartAddr": "403af0",
            "funcEndAddr": "403b1b",
            "decompiledFuncCode": "int64_t function_403af0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x403af8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403b15\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403b0c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_403b20",
            "funcStartAddr": "403b20",
            "funcEndAddr": "403b92",
            "decompiledFuncCode": "int64_t function_403b20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g39 : a5; // 0x403b42\n    int32_t * v2 = __errno_location(); // 0x403b4b\n    uint32_t v3 = *(int32_t *)v1; // 0x403b6b\n    int64_t result = function_402660(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x403b7a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ba0",
            "funcStartAddr": "403ba0",
            "funcEndAddr": "403c81",
            "decompiledFuncCode": "int64_t function_403ba0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g39 : a4; // 0x403bc2\n    int32_t * v2 = __errno_location(); // 0x403bc8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403be7\n    int32_t * v4 = (int32_t *)v1; // 0x403bea\n    int64_t v5 = function_402660(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403c05\n    int64_t v6 = v5 + 1; // 0x403c0a\n    int64_t result = function_4046a0(v6); // 0x403c1f\n    function_402660(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403c64\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x403c6d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403c90",
            "funcStartAddr": "403c90",
            "funcEndAddr": "403c9a",
            "decompiledFuncCode": "int64_t function_403c90(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403c90\n    return function_403ba0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403ca0",
            "funcStartAddr": "403ca0",
            "funcEndAddr": "403d35",
            "decompiledFuncCode": "int64_t function_403ca0(void) {\n    uint32_t v1 = *(int32_t *)&g24; // 0x403ca0\n    int64_t v2 = v1; // 0x403ca0\n    int64_t v3 = v2; // 0x403cb4\n    if (v1 >= 2) {\n        int64_t v4 = &g24;\n        int64_t v5 = v4 + 16; // 0x403cd3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g49;\n        while (v5 != (int64_t)g21 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403cd0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g49;\n        }\n    }\n    int64_t v6 = v3; // 0x403ced\n    if (g22 != 0x6094a0) {\n        // 0x403cef\n        free((int64_t *)g22);\n        g22 = 256;\n        *(int64_t *)&g23 = (int64_t)&g38;\n        v6 = &g49;\n    }\n    int64_t result = v6; // 0x403d11\n    if (g21 != &g22) {\n        // 0x403d13\n        free(g21);\n        *(int64_t *)&g21 = (int64_t)&g22;\n        result = &g49;\n    }\n    // 0x403d26\n    *(int32_t *)&g24 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403d40",
            "funcStartAddr": "403d40",
            "funcEndAddr": "403d51",
            "decompiledFuncCode": "int64_t function_403d40(void) {\n    // 0x403d40\n    int64_t v1; // 0x403d40\n    return function_403890(v1, v1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403d60",
            "funcStartAddr": "403d60",
            "funcEndAddr": "403d6a",
            "decompiledFuncCode": "int64_t function_403d60(void) {\n    // 0x403d60\n    int64_t v1; // 0x403d60\n    return function_403890(v1, v1, v1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403d70",
            "funcStartAddr": "403d70",
            "funcEndAddr": "403d86",
            "decompiledFuncCode": "int64_t function_403d70(int64_t a1) {\n    // 0x403d70\n    return function_403890(0, a1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403d90",
            "funcStartAddr": "403d90",
            "funcEndAddr": "403da2",
            "decompiledFuncCode": "int64_t function_403d90(int64_t a1, int64_t a2) {\n    // 0x403d90\n    return function_403890(0, a1, a2, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_403db0",
            "funcStartAddr": "403db0",
            "funcEndAddr": "403e18",
            "decompiledFuncCode": "int64_t function_403db0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403dc0\n    return function_403890((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403e20",
            "funcStartAddr": "403e20",
            "funcEndAddr": "403e84",
            "decompiledFuncCode": "int64_t function_403e20(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403e30\n    return function_403890((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403e90",
            "funcStartAddr": "403e90",
            "funcEndAddr": "403e9c",
            "decompiledFuncCode": "int64_t function_403e90(int64_t a1, int64_t a2) {\n    // 0x403e90\n    return function_403db0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_403ea0",
            "funcStartAddr": "403ea0",
            "funcEndAddr": "403eaf",
            "decompiledFuncCode": "int64_t function_403ea0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403ea0\n    return function_403e20(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_403eb0",
            "funcStartAddr": "403eb0",
            "funcEndAddr": "403f20",
            "decompiledFuncCode": "int64_t function_403eb0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x403ebd\n    int128_t v2 = __asm_movdqa(g40); // 0x403ec5\n    int128_t v3 = __asm_movdqa(g41); // 0x403ecd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x403ee2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x403ef8\n    uint32_t v6 = *v5; // 0x403ef8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x403efd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403890(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_403f20",
            "funcStartAddr": "403f20",
            "funcEndAddr": "403f2d",
            "decompiledFuncCode": "int64_t function_403f20(int64_t a1, int64_t a2) {\n    // 0x403f20\n    return function_403eb0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403f30",
            "funcStartAddr": "403f30",
            "funcEndAddr": "403f41",
            "decompiledFuncCode": "int64_t function_403f30(int64_t a1) {\n    // 0x403f30\n    return function_403eb0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403f50",
            "funcStartAddr": "403f50",
            "funcEndAddr": "403f5a",
            "decompiledFuncCode": "int64_t function_403f50(void) {\n    // 0x403f50\n    int64_t v1; // 0x403f50\n    return function_403eb0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403f60",
            "funcStartAddr": "403f60",
            "funcEndAddr": "403fce",
            "decompiledFuncCode": "int64_t function_403f60(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403f7a\n    return function_403890(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403fd0",
            "funcStartAddr": "403fd0",
            "funcEndAddr": "40403c",
            "decompiledFuncCode": "int64_t function_403fd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x403fd7\n    int128_t v2 = __asm_movdqa(g40); // 0x403fdf\n    int128_t v3 = __asm_movdqa(g41); // 0x403fe7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404009\n    if (a2 == 0 || a3 == 0) {\n        // 0x404037\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40401a\n    return function_403890(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404040",
            "funcStartAddr": "404040",
            "funcEndAddr": "404049",
            "decompiledFuncCode": "int64_t function_404040(void) {\n    // 0x404040\n    int64_t v1; // 0x404040\n    return function_403fd0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404050",
            "funcStartAddr": "404050",
            "funcEndAddr": "404067",
            "decompiledFuncCode": "int64_t function_404050(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404050\n    return function_403fd0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404070",
            "funcStartAddr": "404070",
            "funcEndAddr": "404083",
            "decompiledFuncCode": "int64_t function_404070(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404070\n    return function_403fd0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404090",
            "funcStartAddr": "404090",
            "funcEndAddr": "40409a",
            "decompiledFuncCode": "int64_t function_404090(void) {\n    // 0x404090\n    int64_t v1; // 0x404090\n    return function_403890(v1, v1, v1, &g20);\n}\n"
        },
        {
            "funcName": "function_4040a0",
            "funcStartAddr": "4040a0",
            "funcEndAddr": "4040b2",
            "decompiledFuncCode": "int64_t function_4040a0(int64_t a1, int64_t a2) {\n    // 0x4040a0\n    return function_403890(0, a1, a2, &g20);\n}\n"
        },
        {
            "funcName": "function_4040c0",
            "funcStartAddr": "4040c0",
            "funcEndAddr": "4040d1",
            "decompiledFuncCode": "int64_t function_4040c0(void) {\n    // 0x4040c0\n    int64_t v1; // 0x4040c0\n    return function_403890(v1, v1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_4040e0",
            "funcStartAddr": "4040e0",
            "funcEndAddr": "4040f6",
            "decompiledFuncCode": "int64_t function_4040e0(int64_t a1) {\n    // 0x4040e0\n    return function_403890(0, a1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_404100",
            "funcStartAddr": "404100",
            "funcEndAddr": "4044dd",
            "decompiledFuncCode": "int64_t function_404100(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404198\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40411c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404136\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40417b\n    if (a6 < 10) {\n        // 0x40418a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404282\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_4044e0",
            "funcStartAddr": "4044e0",
            "funcEndAddr": "404500",
            "decompiledFuncCode": "int64_t function_4044e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4044e0\n    if (a5 == 0) {\n        // 0x4044fb\n        return function_404100(a1, a2, a3, a4, a5, 0, (int64_t)&g49);\n    }\n    int64_t v1 = 0; // 0x4044e7\n    v1++;\n    int64_t v2 = v1; // 0x4044f9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4044f0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4044fb\n    return function_404100(a1, a2, a3, a4, a5, v2, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_404500",
            "funcStartAddr": "404500",
            "funcEndAddr": "404560",
            "decompiledFuncCode": "int64_t function_404500(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404500\n    int64_t v3 = &v2; // 0x404500\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404533\n    int64_t v6; // 0x40451d\n    int64_t * v7; // 0x40453b\n    int64_t v8; // 0x40453b\n    int64_t v9; // 0x404547\n    if (v5 < 48) {\n        // 0x404510\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404553\n            break;\n        }\n    } else {\n        // 0x40453b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404553\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404531\n    while (v4 != 9) {\n        // 0x404529\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404510\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404553\n                break;\n            }\n        } else {\n            // 0x40453b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404553\n                break;\n            }\n        }\n        // 0x404529\n        v10 = 10;\n    }\n    // 0x404553\n    return function_404100(a1, a2, a3, a4, v3, v10, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_404560",
            "funcStartAddr": "404560",
            "funcEndAddr": "40461c",
            "decompiledFuncCode": "int64_t function_404560(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x404560\n    int64_t v1; // bp-168, 0x404560\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404560\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404560\n    int64_t v8; // 0x404560\n    int64_t v9; // bp-56, 0x404560\n    int64_t v10; // 0x4045c5\n    int64_t v11; // 0x4045e9\n    if ((int32_t)v6 < 48) {\n        // 0x4045b0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404600\n            break;\n        }\n    } else {\n        // 0x4045e2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404600\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4045da\n    int64_t v13 = 10; // 0x4045da\n    while (v5 != 9) {\n        // 0x4045dc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4045b0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404600\n                break;\n            }\n        } else {\n            // 0x4045e2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404600\n                break;\n            }\n        }\n        // 0x4045d2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404600\n    int64_t v14; // bp-136, 0x404560\n    int64_t result = function_404100(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g49); // 0x40460f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404620",
            "funcStartAddr": "404620",
            "funcEndAddr": "404694",
            "decompiledFuncCode": "int64_t function_404620(int64_t a1) {\n    // 0x404620\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404683\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_4046a0",
            "funcStartAddr": "4046a0",
            "funcEndAddr": "4046ba",
            "decompiledFuncCode": "int64_t function_4046a0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4046a4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4046b3\n        return (int64_t)mem;\n    }\n    // 0x4046b5\n    function_4048f0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4046c0",
            "funcStartAddr": "4046c0",
            "funcEndAddr": "4046e1",
            "decompiledFuncCode": "int64_t function_4046c0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4046c3\n    int64_t v2 = v1; // 0x4046c3\n    if (v2 < 0) {\n        // 0x4046db\n        function_4048f0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4046d9\n        return function_4046a0(v2);\n    }\n    // 0x4046db\n    function_4048f0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4046f0",
            "funcStartAddr": "4046f0",
            "funcEndAddr": "4046f2",
            "decompiledFuncCode": "int64_t function_4046f0(void) {\n    // 0x4046f0\n    int64_t v1; // 0x4046f0\n    return function_4046a0(v1);\n}\n"
        },
        {
            "funcName": "function_404700",
            "funcStartAddr": "404700",
            "funcEndAddr": "404736",
            "decompiledFuncCode": "int64_t function_404700(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404728\n        free(v1);\n        return (int32_t)&g49 ^ (int32_t)&g49;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404711\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404720\n        return (int64_t)mem;\n    }\n    // 0x404731\n    function_4048f0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404740",
            "funcStartAddr": "404740",
            "funcEndAddr": "404761",
            "decompiledFuncCode": "int64_t function_404740(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404743\n    int64_t v2 = v1; // 0x404743\n    if (v2 < 0) {\n        // 0x40475b\n        function_4048f0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404759\n        return function_404700(a1, v2);\n    }\n    // 0x40475b\n    function_4048f0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404770",
            "funcStartAddr": "404770",
            "funcEndAddr": "4047f6",
            "decompiledFuncCode": "int64_t function_404770(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4047cb\n            function_4048f0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404700(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4047b3\n    if (a2 == 0) {\n        // 0x4047d8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4047b8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4047cb\n        function_4048f0(a1);\n        // UNREACHABLE\n    }\n    // 0x40479a\n    *(int64_t *)a2 = v2;\n    return function_404700(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404800",
            "funcStartAddr": "404800",
            "funcEndAddr": "404850",
            "decompiledFuncCode": "int64_t function_404800(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404800\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40484a\n            function_4048f0(a1);\n            // UNREACHABLE\n        }\n        // 0x404822\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404700(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404835\n        *(int64_t *)a2 = 128;\n        return function_404700(0, 128);\n    }\n    // 0x404848\n    if (a2 < 0) {\n        // 0x40484a\n        function_4048f0(a1);\n        // UNREACHABLE\n    }\n    // 0x404822\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404700(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404850",
            "funcStartAddr": "404850",
            "funcEndAddr": "404867",
            "decompiledFuncCode": "int64_t function_404850(int64_t a1, int64_t a2) {\n    // 0x404850\n    return (int64_t)memset((int64_t *)function_4046a0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404870",
            "funcStartAddr": "404870",
            "funcEndAddr": "40489e",
            "decompiledFuncCode": "int64_t function_404870(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404877\n    if ((int64_t)v1 < 0) {\n        // 0x404899\n        function_4048f0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404899\n        function_4048f0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40488a\n    if (mem != NULL) {\n        // 0x404894\n        return (int64_t)mem;\n    }\n    // 0x404899\n    function_4048f0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4048a0",
            "funcStartAddr": "4048a0",
            "funcEndAddr": "4048c8",
            "decompiledFuncCode": "int64_t function_4048a0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4046a0(a2); // 0x4048af\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4048d0",
            "funcStartAddr": "4048d0",
            "funcEndAddr": "4048e3",
            "decompiledFuncCode": "int64_t function_4048d0(int64_t str) {\n    // 0x4048d0\n    return function_4048a0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4048f0",
            "funcStartAddr": "4048f0",
            "funcEndAddr": "404921",
            "decompiledFuncCode": "int64_t function_4048f0(int64_t a1) {\n    // 0x4048f0\n    error(g19, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404930",
            "funcStartAddr": "404930",
            "funcEndAddr": "404a0f",
            "decompiledFuncCode": "int64_t function_404930(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40493c\n    uint32_t v2 = *v1; // 0x40493c\n    int64_t v3 = a2 & 0xffffffff; // 0x404941\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x404944\n    uint64_t v5 = (int64_t)*v4; // 0x404944\n    int64_t v6; // 0x4049b2\n    if (v3 <= v5) {\n      lab_0x4049ac_2:\n        // 0x4049ac\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x404932\n    int64_t v8 = v2; // 0x404930\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4049ac\n        goto lab_0x4049ac_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404968\n    int64_t v17; // 0x404976\n    int64_t * v18; // 0x404990\n    int64_t * v19; // 0x404993\n    int64_t v20; // 0x40499e\n    int64_t v21; // 0x404976\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x404973\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x404990\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4049a7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4049ac\n            goto lab_0x4049ac_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4049ac\n            goto lab_0x4049ac_2;\n        }\n        // 0x404962\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4049eb\n    int64_t * v23 = (int64_t *)v22; // 0x4049f0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4049f3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4049f0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x404a07\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40495d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4049ac\n            goto lab_0x4049ac_2;\n        }\n        // 0x404962\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x404973\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x404990\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4049a7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4049ac\n                goto lab_0x4049ac_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4049ac\n                goto lab_0x4049ac_2;\n            }\n            // 0x404962\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4049d0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4049f0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x404a07\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4049ac\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404a10",
            "funcStartAddr": "404a10",
            "funcEndAddr": "40502c",
            "decompiledFuncCode": "int64_t function_404a10(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x404a2f\n    int64_t v2 = *v1; // 0x404a2f\n    char * str2 = (char *)v2; // 0x404a3c\n    char c = *str2; // 0x404a3c\n    int64_t v3 = v2; // 0x404a68\n    int64_t v4 = 0; // 0x404a10\n    int32_t v5; // 0x404a10\n    int64_t v6; // 0x404a10\n    int64_t v7; // 0x404a10\n    int64_t v8; // 0x404a10\n    int64_t v9; // 0x404a10\n    int64_t v10; // 0x404a10\n    int64_t v11; // 0x404a10\n    int64_t v12; // 0x404a10\n    int64_t v13; // 0x404a10\n    int64_t str3; // 0x404a10\n    int64_t v14; // 0x404a10\n    int64_t v15; // 0x404a10\n    int64_t v16; // 0x404a10\n    int64_t v17; // 0x404a10\n    int32_t v18; // 0x404a10\n    int32_t v19; // 0x404a10\n    int32_t v20; // 0x404a10\n    int32_t v21; // 0x404a10\n    int32_t v22; // 0x404a10\n    int32_t v23; // 0x404a10\n    int32_t v24; // 0x404a10\n    int32_t v25; // 0x404a10\n    int32_t v26; // 0x404a10\n    int32_t v27; // 0x404a10\n    int32_t v28; // 0x404a10\n    int32_t v29; // 0x404a10\n    int64_t nmemb; // 0x404a10\n    int64_t v30; // 0x404a10\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x404a6c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404a68\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404a78\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x404a7e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x404a48\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x404aac\n                int64_t v34; // 0x404a10\n                int64_t v35; // 0x404a10\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x404ab5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x404c30;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x404ac6\n                int64_t v37 = *(int64_t *)v36; // 0x404aca\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x404aa0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x404ab5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x404c30;\n                        }\n                    }\n                    // 0x404ac6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x404b16:\n                    // 0x404b16\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x404b70;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x404ce0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x404b70;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x404c90\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x404b3a;\n                                } else {\n                                    // 0x404c9c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x404b3a;\n                                    } else {\n                                        // 0x404caa\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x404b3a;\n                                        } else {\n                                            goto lab_0x404b70;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x404b3a;\n                            }\n                        }\n                    }\n                }\n              lab_0x404b81:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x404d56\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x404f02\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x404f22\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x404f6f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x404f89\n                            int64_t v45; // 0x404f8b\n                            if (*(char *)v42 != 0) {\n                                // 0x404f8b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x404f83\n                            while (v17 + nmemb != v42) {\n                                // 0x404f85\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x404f8b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x404f78\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x404fb0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x404d64\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x404ebf\n                        free((int64_t *)v17);\n                    }\n                    // 0x404db9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x404dd0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x404c7e\n                    return 63;\n                }\n                // 0x404ba0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x404c24\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x404c30:;\n                    int32_t * v49 = (int32_t *)a7; // 0x404c40\n                    uint32_t v50 = *v49; // 0x404c40\n                    int64_t v51 = v50; // 0x404c40\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x404c4a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x404c53\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x404e7f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x404e2a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x404c7e\n                            return 63;\n                        }\n                        // 0x404cc8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x404fdf\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x404edd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x404ef0\n                                // 0x404c7e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x404dee\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x404e02\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x404c6b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x404c6e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x404c72\n                    int64_t result = v59; // 0x404c78\n                    if (v58 != 0) {\n                        // 0x404c7a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x404c7e\n                    return result;\n                }\n            } else {\n                // 0x404a7e\n                v5 = v32;\n            }\n            // break -> 0x404ba5\n            break;\n        }\n    }\n    // 0x404ba5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x404bbd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x404bc7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x404c7e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x404d09\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x404bf6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x404c06\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x404b70:\n    // 0x404b70\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x404b70\n    int64_t v63 = *(int64_t *)v62; // 0x404b74\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x404b81\n        goto lab_0x404b81;\n    }\n    goto lab_0x404b16;\n  lab_0x404b3a:\n    // 0x404b3a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x404a10\n    int32_t v65; // 0x404a10\n    int32_t v66; // 0x404a10\n    if (v27 != 0) {\n        goto lab_0x404b70;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x404cf0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x404b70;\n            } else {\n                goto lab_0x404b61;\n            }\n        } else {\n            // 0x404b55\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x404e4c\n                int64_t v67 = (int64_t)mem; // 0x404e4c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x404b70;\n                } else {\n                    // 0x404e5f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x404b61;\n                }\n            } else {\n                goto lab_0x404b61;\n            }\n        }\n    }\n  lab_0x404b61:\n    // 0x404b61\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x404b70;\n}\n"
        },
        {
            "funcName": "function_405030",
            "funcStartAddr": "405030",
            "funcEndAddr": "4055f6",
            "decompiledFuncCode": "int64_t function_405030(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405051\n    if (v3 < 1) {\n        // 0x40520e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40504d\n    int32_t v5 = *(int32_t *)a7; // 0x405059\n    uint64_t v6 = a1 & 0xffffffff; // 0x40505b\n    int64_t v7 = v2; // 0x405060\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405063\n    *v8 = 0;\n    int64_t v9; // 0x405030\n    int64_t v10; // 0x405030\n    int64_t v11; // 0x405030\n    int64_t v12; // 0x405030\n    int64_t str; // 0x405030\n    int64_t v13; // 0x405030\n    int64_t v14; // 0x405030\n    int64_t v15; // 0x405030\n    int64_t v16; // 0x405030\n    int64_t v17; // 0x405030\n    int32_t v18; // 0x405030\n    char v19; // 0x405030\n    if (v5 == 0) {\n        // 0x405248\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40507a;\n    } else {\n        // 0x405073\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4050c0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4050c3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405188;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4050d6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4050e6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40519c;\n                } else {\n                    goto lab_0x4050f8;\n                }\n            }\n        } else {\n            goto lab_0x40507a;\n        }\n    }\n  lab_0x40507a:\n    // 0x40507a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405080\n    *v24 = 0;\n    int64_t v25; // 0x405030\n    int64_t v26; // 0x405030\n    int64_t v27; // 0x405030\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405170\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40517d;\n        }\n        case 43: {\n            // 0x405480\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40517d;\n        }\n        default: {\n            // 0x40509c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4053ff\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405518\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40517d;\n                } else {\n                    // 0x40540d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4050aa;\n                }\n            } else {\n                goto lab_0x4050aa;\n            }\n        }\n    }\n  lab_0x405188:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40518f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4050f8;\n    } else {\n        goto lab_0x40519c;\n    }\n  lab_0x4050aa:\n    // 0x4050aa\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40517d;\n  lab_0x40517d:\n    // 0x40517d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405188;\n  lab_0x4050f8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4050f8\n    int64_t v31 = v30; // 0x4050f8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4050fa\n    if ((int64_t)*v32 > v31) {\n        // 0x4050ff\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405102\n    if (*v33 > v30) {\n        // 0x405107\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40510a\n    int64_t v35 = v31; // 0x40510e\n    int64_t v36 = v15; // 0x40510e\n    int64_t v37; // 0x405030\n    int64_t v38; // 0x405030\n    int64_t v39; // 0x405030\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405278\n        int64_t v41 = v40; // 0x405278\n        v2 = v41;\n        int64_t v42; // 0x405030\n        if (*v33 == v40) {\n            // 0x405460\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405468\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405284\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405298\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4052a1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4052aa\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4052c1\n            int64_t v47 = v45 & 0xffffffff; // 0x4052c5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4052ce\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4052d4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4052d6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4052b0\n            int64_t v49 = v48 & 0xffffffff; // 0x4052b0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4052c1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4052ce\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4052d4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4052d6;\n                    }\n                }\n                // 0x4052b0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405478\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4052d6;\n    } else {\n        goto lab_0x405114;\n    }\n  lab_0x40519c:\n    // 0x40519c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40519f\n    int64_t v51 = v12; // 0x40519f\n    int64_t v52 = v14; // 0x40519f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4050f8;\n    } else {\n        goto lab_0x4051a5;\n    }\n  lab_0x405114:;\n    int32_t v53 = v35; // 0x405114\n    int64_t v54; // 0x405030\n    int64_t v55; // 0x405030\n    int64_t v56; // 0x405030\n    int64_t v57; // 0x405030\n    int64_t v58; // 0x405030\n    int64_t v59; // 0x405030\n    char * v60; // 0x405030\n    int64_t v61; // 0x405030\n    int64_t v62; // 0x405129\n    int64_t v63; // 0x405030\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405263\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405266;\n    } else {\n        // 0x40511c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405030\n        int64_t v66 = v65 ? -1 : 1; // 0x405130\n        int64_t v67 = (int64_t)\"--\"; // 0x405030\n        int64_t v68 = v62; // 0x405030\n        int64_t v69 = 3; // 0x405130\n        unsigned char v70 = *(char *)v68; // 0x405130\n        char v71 = *(char *)v67; // 0x405130\n        char v72 = v71; // 0x405130\n        bool v73 = false; // 0x405130\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405220\n            if (*(char *)v62 == 45) {\n                // 0x4052e0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4052e0\n                if (c == 0) {\n                    goto lab_0x40522a;\n                } else {\n                    // 0x4052ed\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405370;\n                    } else {\n                        if (c == 45) {\n                            // 0x405553\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4053c5;\n                        } else {\n                            // 0x4052fe\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405370;\n                            } else {\n                                // 0x405303\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x405324;\n                                } else {\n                                    // 0x40530a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405370;\n                                    } else {\n                                        goto lab_0x405324;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40522a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405140\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405143\n            int64_t v77 = v35 + 1; // 0x405146\n            int32_t v78 = v77; // 0x405149\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4054b0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405157\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405165\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405266;\n        }\n    }\n  lab_0x4051a5:;\n    // 0x4051a5\n    int64_t v79; // bp-104, 0x405030\n    int64_t v80 = &v79; // 0x40503a\n    int64_t v81 = v50 + 1; // 0x4051a5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4051ac\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4051b1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4051b5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4051b9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4051c1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4051c6\n    int32_t c2 = v84; // 0x4051c6\n    char * found_char_pos = strchr(str2, c2); // 0x4051c6\n    int64_t v87 = *v82; // 0x4051cb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4051d5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4051e0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4054d0\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40549d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40520e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4051c6\n    char v91 = *(char *)(v90 + 1); // 0x4051fb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4051b5\n        if (v91 != 58) {\n            // 0x40520e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405424\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405528\n                *v8 = 0;\n            } else {\n                // 0x40550c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40544e\n            *v83 = 0;\n            // 0x40520e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40542e\n        if (v93 != 0) {\n            // 0x4054c0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40544e\n            *v83 = 0;\n            // 0x40520e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405441\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40544e\n            *v83 = 0;\n            // 0x40520e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40558a\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40553a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405541\n        // 0x40544e\n        *v83 = 0;\n        // 0x40520e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405399\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40539b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4055c0\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405571\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405578\n            // 0x40520e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4053a6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4053aa\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4053c5;\n  lab_0x4052d6:\n    // 0x4052d6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405114;\n  lab_0x4053c5:;\n    int64_t v99 = function_404a10(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4053e3\n    // 0x40520e\n    return v99 & 0xffffffff;\n  lab_0x405266:;\n    int32_t v100 = v55; // 0x405266\n    if (v100 != (int32_t)v59) {\n        // 0x40526a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40520e\n    return 0xffffffff;\n  lab_0x40522a:\n    // 0x40522a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405231\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40520e\n    return v99 & 0xffffffff;\n  lab_0x405370:\n    // 0x405370\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4051a5;\n  lab_0x405324:\n    // 0x405324\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_404a10(v6, a2, str, a4, a5, v57, v1, v11, &g10); // 0x40534a\n    if ((int32_t)v101 != -1) {\n        // 0x40520e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40535f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405370;\n}\n"
        },
        {
            "funcName": "function_405600",
            "funcStartAddr": "405600",
            "funcEndAddr": "405656",
            "decompiledFuncCode": "int64_t function_405600(int64_t a1) {\n    // 0x405600\n    *(int32_t *)&g42 = g27;\n    *(int32_t *)&g43 = g26;\n    int64_t v1; // 0x405600\n    int64_t result = function_405030(v1, v1, v1, v1, v1, v1, &g42, a1 & 0xffffffff); // 0x405626\n    g27 = *(int32_t *)&g42;\n    g47 = g45;\n    *(int32_t *)&g25 = g44;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405660",
            "funcStartAddr": "405660",
            "funcEndAddr": "405678",
            "decompiledFuncCode": "int64_t function_405660(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405660\n    return function_405600(1);\n}\n"
        },
        {
            "funcName": "function_405680",
            "funcStartAddr": "405680",
            "funcEndAddr": "405693",
            "decompiledFuncCode": "int64_t function_405680(int64_t a1, int64_t a2, char * a3, char (**a4)[5], int32_t a5, int64_t a6) {\n    // 0x405680\n    return function_405600(0);\n}\n"
        },
        {
            "funcName": "function_4056a0",
            "funcStartAddr": "4056a0",
            "funcEndAddr": "4056b5",
            "decompiledFuncCode": "int64_t function_4056a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4056a0\n    return function_405030(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4056c0",
            "funcStartAddr": "4056c0",
            "funcEndAddr": "4056d6",
            "decompiledFuncCode": "int64_t function_4056c0(void) {\n    // 0x4056c0\n    return function_405600(0);\n}\n"
        },
        {
            "funcName": "function_4056e0",
            "funcStartAddr": "4056e0",
            "funcEndAddr": "4056f8",
            "decompiledFuncCode": "int64_t function_4056e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4056e0\n    return function_405030(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405700",
            "funcStartAddr": "405700",
            "funcEndAddr": "40577a",
            "decompiledFuncCode": "int64_t function_405700(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40570b\n    int64_t v2 = (int64_t)&g11; // 0x40570b\n    int32_t * pwc; // 0x405700\n    int64_t v3; // 0x405700\n    int64_t n; // 0x405700\n    if (a2 == 0) {\n        goto lab_0x405752;\n    } else {\n        // 0x40570d\n        if (a3 == 0) {\n            // 0x405738\n            return -2;\n        }\n        // 0x405719\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405752;\n        } else {\n            goto lab_0x405724;\n        }\n    }\n  lab_0x405752:\n    // 0x405752\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405700\n    pwc = (int32_t *)&v4;\n    goto lab_0x405724;\n  lab_0x405724:;\n    char * wstr = (char *)v3; // 0x40572a\n    int64_t ps; // 0x405700\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40572a\n    int64_t result = v5; // 0x40572a\n    if (v5 < 0xfffffffe) {\n        // 0x405738\n        return result;\n    }\n    int64_t result2 = result; // 0x405769\n    if ((char)function_405a10(0, v3) == 0) {\n        // 0x40576b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405738\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405780",
            "funcStartAddr": "405780",
            "funcEndAddr": "4058da",
            "decompiledFuncCode": "int64_t function_405780(int64_t a1, int32_t * a2) {\n    char v1 = a1;\n    char * str2 = (char *)a1;\n    int64_t str = (int64_t)\"HUP\"; // 0x4057a1\n    int64_t v2; // 0x405780\n    int64_t v3; // 0x405780\n    int64_t v4; // 0x405780\n    int32_t v5; // 0x405810\n    int64_t v6; // 0x405815\n    int32_t v7; // 0x405818\n    int64_t v8; // 0x40581d\n    int64_t v9; // 0x405831\n    bool v10; // 0x405780\n    if (v1 != 57 && (int32_t)v1 >= 57) {\n        int64_t v11 = 0;\n        while (strcmp((char *)str, str2) != 0) {\n            int64_t v12 = v11 + 1; // 0x4057a8\n            str += 12;\n            if ((int32_t)v12 == 35) {\n                // 0x405810\n                v5 = __libc_current_sigrtmin();\n                v6 = v5;\n                v7 = __libc_current_sigrtmax();\n                v8 = v7;\n                if (v5 < 1) {\n                    goto lab_0x40583c;\n                } else {\n                    // 0x405824\n                    v9 = v10 ? -1 : 1;\n                    v2 = (int64_t)\"RTMIN\";\n                    v4 = a1;\n                    v3 = 5;\n                    goto lab_dec_label_pc_unknown;\n                }\n            }\n            v11 = v12 & 0xffffffff;\n        }\n        int32_t v13 = *(int32_t *)(12 * v11 + (int64_t)&g28);\n        *a2 = v13;\n        // 0x4057d4\n        return v13 >> 31;\n    }\n    // 0x4057e0\n    char * endptr; // bp-48, 0x405780\n    int32_t str_as_l = strtol(str2, &endptr, 10); // 0x4057ea\n    int32_t v14 = str_as_l; // 0x4057f7\n    if (str_as_l < 65 == *endptr == 0) {\n      lab_0x4057ce:\n        // 0x4057ce\n        *a2 = v14;\n        // 0x4057d4\n        return v14 >> 31;\n    }\n  lab_0x405800:\n    // 0x405800\n    *a2 = -1;\n    // 0x4057d4\n    return 0xffffffff;\n  lab_0x40583c:;\n    int64_t v15; // 0x405780\n    int64_t v16; // 0x405780\n    int64_t v17; // 0x405780\n    int64_t v18; // 0x40584d\n    if (v7 < 1) {\n        goto lab_0x405800;\n    } else {\n        // 0x405840\n        v18 = v10 ? -1 : 1;\n        v15 = (int64_t)\"RTMAX\";\n        v17 = a1;\n        v16 = 5;\n        goto lab_dec_label_pc_unknown_2;\n    }\n  lab_dec_label_pc_unknown:;\n    unsigned char v19 = *(char *)v4; // 0x405831\n    char v20 = *(char *)v2; // 0x405831\n    char v21 = v20; // 0x405831\n    bool v22 = false; // 0x405831\n    if (v19 == v20) {\n        int64_t v23 = v3 - 1; // 0x405831\n        v2 += v9;\n        v4 += v9;\n        v3 = v23;\n        v21 = v19;\n        v22 = true;\n        if (v23 == 0) {\n            goto lab_dec_label_pc_unknown_4;\n        } else {\n            goto lab_dec_label_pc_unknown;\n        }\n    } else {\n        goto lab_dec_label_pc_unknown_4;\n    }\n  lab_dec_label_pc_unknown_2:;\n    unsigned char v24 = *(char *)v17; // 0x40584d\n    char v25 = *(char *)v15; // 0x40584d\n    char v26 = v25; // 0x40584d\n    bool v27 = false; // 0x40584d\n    if (v24 == v25) {\n        int64_t v28 = v16 - 1; // 0x40584d\n        v15 += v18;\n        v17 += v18;\n        v16 = v28;\n        v26 = v24;\n        v27 = true;\n        if (v28 == 0) {\n            goto lab_dec_label_pc_unknown_6;\n        } else {\n            goto lab_dec_label_pc_unknown_2;\n        }\n    } else {\n        goto lab_dec_label_pc_unknown_6;\n    }\n  lab_dec_label_pc_unknown_4:;\n    unsigned char v29 = v21;\n    if ((v19 >= v29 && !v22) == v19 < v29) {\n        int32_t str_as_l2 = strtol((char *)(a1 + 5), &endptr, 10); // 0x4058a7\n        if (str_as_l2 < 0 | *endptr != 0) {\n            goto lab_0x405800;\n        } else {\n            if (0x100000000 * (v8 - v6) >> 32 < (int64_t)str_as_l2) {\n                goto lab_0x405800;\n            } else {\n                // 0x4058d2\n                v14 = str_as_l2 + v5;\n                goto lab_0x4057ce;\n            }\n        }\n    } else {\n        goto lab_0x40583c;\n    }\n  lab_dec_label_pc_unknown_6:;\n    unsigned char v30 = v26;\n    if ((v24 >= v30 && !v27) != v24 < v30) {\n        goto lab_0x405800;\n    } else {\n        int32_t str_as_l3 = strtol((char *)(a1 + 5), &endptr, 10); // 0x405867\n        if (*endptr != 0) {\n            goto lab_0x405800;\n        } else {\n            if (0x100000000 * (v6 - v8) >> 32 > (int64_t)str_as_l3) {\n                goto lab_0x405800;\n            } else {\n                if (str_as_l3 >= 0 == (str_as_l3 != 0)) {\n                    goto lab_0x405800;\n                } else {\n                    // 0x40588e\n                    v14 = str_as_l3 + v7;\n                    goto lab_0x4057ce;\n                }\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_4058e0",
            "funcStartAddr": "4058e0",
            "funcEndAddr": "4059ac",
            "decompiledFuncCode": "int64_t function_4058e0(int64_t a1, int64_t * str, int64_t a3) {\n    int64_t v1 = (int64_t)str;\n    uint64_t v2 = a1 & 0xffffffff; // 0x4058ee\n    int32_t v3 = a1;\n    int64_t v4 = (int64_t)&g28; // 0x4058f0\n    int64_t v5 = 0;\n    int32_t v6; // 0x4058e0\n    int64_t result; // 0x4058e0\n    while (*(int32_t *)v4 != v3) {\n        int64_t v7 = v5 + 1; // 0x4058f8\n        v4 += 12;\n        if ((int32_t)v7 == 35) {\n            int32_t v8 = __libc_current_sigrtmin(); // 0x405928\n            int32_t v9 = __libc_current_sigrtmax(); // 0x405930\n            result = 0xffffffff;\n            if (v2 < (int64_t)v8 || v2 > (int64_t)v9) {\n                return result;\n            } else {\n                if (v2 > (int64_t)((v9 - v8 >> 1) + v8)) {\n                    // 0x40594c\n                    *(int32_t *)str = 0x414d5452;\n                    *(int16_t *)(v1 + 4) = 88;\n                    v6 = v9;\n                    goto lab_0x40595f;\n                } else {\n                    // 0x405990\n                    *(int32_t *)str = 0x494d5452;\n                    *(int16_t *)(v1 + 4) = 78;\n                    v6 = v8;\n                    goto lab_0x40595f;\n                }\n            }\n        }\n        v5 = v7 & 0xffffffff;\n    }\n    // 0x405908\n    strcpy((char *)str, (char *)(12 * v5 + (int64_t)\"HUP\"));\n    result = 0;\n  lab_0x40591e:\n    // 0x40591e\n    return result;\n  lab_0x40595f:;\n    uint32_t v10 = v3 - v6; // 0x405961\n    result = 0;\n    if (v10 != 0) {\n        // 0x405966\n        __sprintf_chk((char *)(v1 + 5), 1, -1, \"%+d\", (int64_t)v10);\n        return 0;\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_4059b0",
            "funcStartAddr": "4059b0",
            "funcEndAddr": "405a0d",
            "decompiledFuncCode": "int64_t function_4059b0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4059b7\n    int64_t v2; // 0x4059b0\n    int64_t result = function_405fe0(a1, v2); // 0x4059c8\n    if ((v2 & 32) != 0) {\n        // 0x4059f0\n        if ((int32_t)result == 0) {\n            // 0x4059f4\n            *__errno_location() = 0;\n        }\n        // 0x4059ea\n        return 0xffffffff;\n    }\n    // 0x4059d1\n    if ((int32_t)result == 0) {\n        // 0x4059ea\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4059d8\n    if (v1 == 0) {\n        // 0x4059da\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4059ea\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405a10",
            "funcStartAddr": "405a10",
            "funcEndAddr": "405a6e",
            "decompiledFuncCode": "int64_t function_405a10(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405a16\n    if (locale == NULL) {\n        // 0x405a43\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405a16\n    bool v2; // 0x405a10\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g12; // 0x405a10\n    int64_t v5 = v1; // 0x405a10\n    int64_t v6 = 2; // 0x405a35\n    unsigned char v7 = *(char *)v5; // 0x405a35\n    char v8 = *(char *)v4; // 0x405a35\n    char v9 = v8; // 0x405a35\n    bool v10 = false; // 0x405a35\n    while (v7 == v8) {\n        // 0x405a28\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405a41\n    int64_t v13 = v1; // 0x405a41\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405a43\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405a41\n    unsigned char v15 = *(char *)v13; // 0x405a5d\n    char v16 = *(char *)v12; // 0x405a5d\n    char v17 = v16; // 0x405a5d\n    bool v18 = false; // 0x405a5d\n    while (v15 == v16) {\n        // 0x405a50\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405a70",
            "funcStartAddr": "405a70",
            "funcEndAddr": "405fd2",
            "decompiledFuncCode": "int64_t function_405a70(void) {\n    char * v1 = nl_langinfo(14); // 0x405a86\n    char * v2 = g46; // 0x405a8b\n    char * v3; // 0x405a70\n    int64_t v4; // 0x405a70\n    int64_t v5; // 0x405a70\n    int64_t v6; // 0x405a70\n    int64_t v7; // 0x405a70\n    int32_t size; // 0x405a70\n    int32_t size2; // 0x405a70\n    int32_t len; // 0x405b42\n    int64_t v8; // 0x405b42\n    char * env_val; // 0x405b2d\n    if (v2 == NULL) {\n        // 0x405b28\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405b95;\n        } else {\n            // 0x405b3a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405b95;\n            } else {\n                // 0x405b3f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x405b2d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x405fc5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405b95;\n                    } else {\n                        // 0x405f39\n                        size2 = len + 14;\n                        goto lab_0x405b5b;\n                    }\n                } else {\n                    goto lab_0x405b5b;\n                }\n            }\n        }\n    } else {\n        // 0x405a70\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x405aaa;\n    }\n  lab_0x405ddc:;\n    // 0x405ddc\n    struct _IO_FILE * stream; // 0x405c1b\n    int32_t v10 = __uflow(stream); // 0x405ddf\n    int64_t v11; // 0x405a70\n    int64_t v12 = v11; // 0x405de9\n    int64_t v13; // 0x405a70\n    int64_t v14 = v13; // 0x405de9\n    int32_t v15 = v10; // 0x405de9\n    int64_t v16; // 0x405a70\n    int64_t v17 = v16; // 0x405de9\n    int64_t v18 = v11; // 0x405de9\n    int64_t v19 = v13; // 0x405de9\n    int64_t v20 = v16; // 0x405de9\n    if (v10 == -1) {\n        // break -> 0x405def\n        goto lab_0x405def;\n    }\n    goto lab_0x405c69;\n  lab_0x405c5e:;\n    // 0x405c5e\n    int64_t v90; // 0x405a70\n    int64_t * v32; // 0x405c50\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405a70\n    v12 = v89;\n    int64_t v91; // 0x405a70\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405a70\n    v17 = v92;\n    goto lab_0x405c69;\n  lab_0x405c69:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405a70\n    int32_t v25; // bp-120, 0x405a70\n    int32_t v26; // bp-184, 0x405a70\n    int64_t v27; // 0x405c1b\n    int64_t v28; // 0x405c38\n    int64_t v29; // 0x405c3d\n    int64_t * v30; // 0x405c54\n    switch (c) {\n        case 32: {\n            goto lab_0x405c50;\n        }\n        case 10: {\n            goto lab_0x405c50;\n        }\n        case 9: {\n            goto lab_0x405c50;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x405e41\n            int32_t v33; // 0x405a70\n            char v34; // 0x405a70\n            int32_t v35; // 0x405e4e\n            if (v31 < *v30) {\n                // 0x405e20\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x405e4b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x405e41\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x405e20\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x405e4b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x405e30\n                v36 = v33;\n            }\n            // 0x405f1f\n            if (v36 == -1) {\n                // break -> 0x405def\n                break;\n            }\n            goto lab_0x405c50;\n        }\n        default: {\n            // 0x405c7f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x405def\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405ca8\n            int64_t v39 = v37 + 4; // 0x405caa\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405cb6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405cb8\n            while (v41 == 0) {\n                // 0x405ca8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x405cd6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x405ce2\n            int64_t v45 = v43 + 4; // 0x405ce4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x405cf0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x405cf2\n            while (v47 == 0) {\n                // 0x405ce2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x405cdf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x405d08\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x405d18\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x405d1c\n            int64_t v52 = v51 + v48; // 0x405d25\n            int64_t * mem; // 0x405a70\n            int64_t v53; // 0x405a70\n            int64_t v54; // 0x405a70\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x405e5b\n                int64_t v56 = v55 + 3; // 0x405e67\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x405d41\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x405d50\n            if (mem == NULL) {\n                // 0x405f7c\n                free((int64_t *)v21);\n                function_405fe0(v27, v53);\n                v24 = (int64_t)&g11;\n                goto lab_0x405bf4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x405d68\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x405d72\n            uint32_t v62 = (int32_t)v59; // 0x405d75\n            int64_t v63; // 0x405a70\n            if (v62 >= 8) {\n                // 0x405e84\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x405e9e\n                int64_t v66 = v61 - v65; // 0x405ea2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x405ead\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x405ebe\n                    int64_t v70 = v69 & 0xffffffff; // 0x405ebe\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x405ebb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x405f4f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x405d87\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x405d8b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x405d9b\n            int64_t v74 = v60 - 1; // 0x405d9f\n            uint32_t v75 = (int32_t)v73; // 0x405da4\n            int64_t v76; // 0x405a70\n            if (v75 >= 8) {\n                // 0x405ed2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x405edc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x405eec\n                int64_t v80 = v74 - v79; // 0x405ef0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x405efb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x405f0b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x405f09\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x405f66\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x405f6e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x405db6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x405dba\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x405fb3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x405dce\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x405c5e;\n            } else {\n                goto lab_0x405ddc;\n            }\n        }\n    }\n  lab_0x405c50:;\n    int64_t v93 = v23; // 0x405a70\n    int64_t v94 = v22; // 0x405a70\n    int64_t v95 = v21; // 0x405a70\n    goto lab_0x405c50_2;\n  lab_0x405b95:;\n    int64_t * mem3 = malloc(size); // 0x405b95\n    int64_t v97 = (int64_t)&g11; // 0x405ba0\n    int64_t v98; // 0x405a70\n    int64_t path; // 0x405a70\n    if (mem3 == NULL) {\n        goto lab_0x405b72;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405b95\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405bb6;\n    }\n  lab_0x405aaa:;\n    int64_t str = v1 == NULL ? (int64_t)&g11 : (int64_t)v1; // 0x405a9d\n    char v100 = *v3; // 0x405aaa\n    int64_t v101; // 0x405a70\n    if (v100 == 0) {\n        // 0x405b04\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405a70\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405a70\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405af0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405af7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405ac0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x405acd\n        char v107 = *(char *)v106; // 0x405ad2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405b04\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x405adb\n    v104 = v103 + 1;\n  lab_0x405af7:\n    // 0x405b04\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405b72:;\n    char * v108 = (char *)v97;\n    g46 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x405aaa;\n  lab_0x405bb6:;\n    int64_t v109 = v98 + path; // 0x405bb6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405be2\n    v24 = (int64_t)&g11;\n    if (fd >= 0) {\n        // 0x405c11\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x405f42\n            close(fd);\n            v24 = (int64_t)&g11;\n        } else {\n            // 0x405c35\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405c50_2:;\n                uint64_t v96 = *v32; // 0x405c50\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x405ddc;\n                } else {\n                    goto lab_0x405c5e;\n                }\n            }\n          lab_0x405def:\n            // 0x405def\n            function_405fe0(v27, v19);\n            v24 = (int64_t)&g11;\n            if (v18 != 0) {\n                // 0x405e0e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405bf4;\n  lab_0x405b5b:;\n    int64_t * mem4 = malloc(size2); // 0x405b5b\n    v97 = (int64_t)&g11;\n    if (mem4 != NULL) {\n        // 0x405c01\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405bb6;\n    } else {\n        goto lab_0x405b72;\n    }\n  lab_0x405bf4:\n    // 0x405bf4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405b72;\n}\n"
        },
        {
            "funcName": "function_405fe0",
            "funcStartAddr": "405fe0",
            "funcEndAddr": "40605b",
            "decompiledFuncCode": "int64_t function_405fe0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405fe7\n    if (fileno(stream) < 0) {\n        // 0x406047\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x405ffa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40602b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x406047\n            return fclose(stream);\n        }\n    }\n    // 0x405ffc\n    if ((int32_t)function_406060(a1, v1) == 0) {\n        // 0x406047\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x406008\n    int32_t v3 = *v2; // 0x406010\n    int64_t result = fclose(stream); // 0x40601e\n    if (v3 != 0) {\n        // 0x406050\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x406020\n    return result;\n}\n"
        },
        {
            "funcName": "function_406060",
            "funcStartAddr": "406060",
            "funcEndAddr": "4060a0",
            "decompiledFuncCode": "int64_t function_406060(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40607a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40607a\n        return fflush(stream);\n    }\n    // 0x406088\n    function_4060a0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4060a0",
            "funcStartAddr": "4060a0",
            "funcEndAddr": "4060f7",
            "decompiledFuncCode": "int64_t function_4060a0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4060a0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4060aa\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4060db\n    int64_t result = -1; // 0x4060e4\n    if (v1 != -1) {\n        // 0x4060e6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4060f2\n    return result;\n}\n"
        },
        {
            "funcName": "function_406100",
            "funcStartAddr": "406100",
            "funcEndAddr": "40615d",
            "decompiledFuncCode": "int64_t function_406100(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406100\n    return function_401448();\n}\n"
        },
        {
            "funcName": "function_406160",
            "funcStartAddr": "406160",
            "funcEndAddr": "406161",
            "decompiledFuncCode": "int64_t function_406160(void) {\n    // 0x406160\n    int64_t result; // 0x406160\n    return result;\n}\n"
        },
        {
            "funcName": "function_406170",
            "funcStartAddr": "406170",
            "funcEndAddr": "406188",
            "decompiledFuncCode": "int64_t function_406170(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406170\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_406188",
            "funcStartAddr": "406188",
            "funcEndAddr": "4061a8",
            "decompiledFuncCode": "int64_t function_406188(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x406192\n    while (*(int64_t *)v1 != -1) {\n        // 0x406193\n        v1 -= 8;\n    }\n    // 0x4061a4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_kill.elf"
}