{
    "funcInfo": [
        {
            "funcName": "function_401780",
            "funcStartAddr": "401780",
            "funcEndAddr": "401785",
            "decompiledFuncCode": "int64_t function_401780(void) {\n    // 0x401780\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401785",
            "funcStartAddr": "401785",
            "funcEndAddr": "40178a",
            "decompiledFuncCode": "int64_t function_401785(void) {\n    // 0x401785\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40178a",
            "funcStartAddr": "40178a",
            "funcEndAddr": "40178f",
            "decompiledFuncCode": "int64_t function_40178a(void) {\n    // 0x40178a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40178f",
            "funcStartAddr": "40178f",
            "funcEndAddr": "401794",
            "decompiledFuncCode": "int64_t function_40178f(void) {\n    // 0x40178f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401794",
            "funcStartAddr": "401794",
            "funcEndAddr": "401799",
            "decompiledFuncCode": "int64_t function_401794(void) {\n    // 0x401794\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401799",
            "funcStartAddr": "401799",
            "funcEndAddr": "40179e",
            "decompiledFuncCode": "int64_t function_401799(void) {\n    // 0x401799\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017a0",
            "funcStartAddr": "4017a0",
            "funcEndAddr": "4028a8",
            "decompiledFuncCode": "int64_t function_4017a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x4017a0\n    int64_t v1; // 0x4017a0\n    int64_t v2 = v1;\n    function_4036d0(a2);\n    setlocale(LC_ALL, (char *)&g11);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_407800(0x4034c0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    g35 = 0;\n    g37 = 0;\n    *(char *)&g36 = 10;\n    int32_t v3 = 1; // 0x40180a\n    int32_t v4 = 10; // 0x40180a\n    int64_t v5 = 0; // 0x40180a\n    int64_t v6 = a2; // 0x40180a\n    int64_t v7 = a1; // 0x40180a\n    int64_t v8; // 0x4017a0\n    int64_t v9; // 0x4017a0\n    int64_t v10; // 0x4017a0\n    int64_t v11; // 0x4017a0\n    int64_t v12; // 0x4017a0\n    int64_t v13; // 0x4017a0\n    int64_t v14; // 0x4017a0\n    int64_t v15; // 0x4017a0\n    int64_t v16; // 0x4017a0\n    int64_t v17; // 0x4017a0\n    int64_t v18; // 0x4017a0\n    int64_t v19; // 0x4017a0\n    int64_t v20; // 0x4017a0\n    int64_t v21; // 0x4017a0\n    int64_t v22; // 0x4017a0\n    int64_t v23; // 0x4017a0\n    int64_t v24; // 0x4017a0\n    int64_t v25; // 0x4017a0\n    int64_t v26; // 0x4017a0\n    int64_t v27; // 0x4017a0\n    int32_t v28; // 0x4017a0\n    char * format; // 0x4017a0\n    int64_t v29; // 0x40180c\n    int64_t * v30; // 0x40180c\n    int64_t v31; // 0x4019c8\n    int64_t v32; // 0x4019e0\n    char * v33; // 0x4017a0\n    if ((int32_t)a1 < 2) {\n        goto lab_0x401829;\n    } else {\n        // 0x40180c\n        v29 = a2 + 8;\n        v30 = (int64_t *)v29;\n        int64_t v34 = *v30; // 0x40180c\n        v3 = 1;\n        v4 = 10;\n        v5 = 0;\n        v6 = a2;\n        v7 = a1;\n        if (*(char *)v34 == 45) {\n            // 0x4019c8\n            v31 = v34 + 1;\n            char v35 = *(char *)v31; // 0x4019c8\n            v3 = 1;\n            v4 = 10;\n            v5 = 0;\n            v6 = a2;\n            v7 = a1;\n            if (v35 == 57 || (int32_t)v35 < 57) {\n                v23 = v31;\n                v32 = v23 + 1;\n                v33 = (char *)v32;\n                char v36 = *v33; // 0x4019e4\n                while (v36 == 57 || (int32_t)v36 < 57) {\n                    // 0x4019e0\n                    v23 = v32;\n                    v32 = v23 + 1;\n                    v33 = (char *)v32;\n                    v36 = *v33;\n                }\n                // 0x4019f2\n                v28 = 1;\n                v27 = a3;\n                v22 = 0;\n                v15 = a5;\n                if (v36 != 0) {\n                    // 0x401a18\n                    v26 = v32;\n                    v19 = 0;\n                    v24 = 0;\n                    v12 = 0;\n                    v16 = 10;\n                    v8 = 1;\n                    v10 = (int64_t)v36 & 0xffffffff;\n                    while (true) {\n                      lab_0x401a18:\n                        // 0x401a18\n                        v11 = v10;\n                        int64_t v37 = v8;\n                        v17 = v16;\n                        v13 = v12;\n                        int64_t v38 = v24;\n                        v20 = v19;\n                        uint64_t v39 = v11 + 0xffffff9e; // 0x401a18\n                        g52 = v39 % 256;\n                        v21 = v20;\n                        v25 = v38;\n                        v14 = 1;\n                        v18 = 0;\n                        v9 = v37;\n                        switch ((char)v39) {\n                            case 0: {\n                                goto lab_0x401aab;\n                            }\n                            case 1: {\n                                // 0x401aa4\n                                v21 = v20;\n                                v25 = 0;\n                                v14 = v13;\n                                v18 = v17;\n                                v9 = 0;\n                                goto lab_0x401a40;\n                            }\n                            case 9: {\n                                goto lab_0x401aab;\n                            }\n                            case 10: {\n                                // 0x401a9c\n                                v21 = v20;\n                                v25 = v38;\n                                v14 = v13;\n                                v18 = v17;\n                                v9 = 1;\n                                goto lab_0x401a40;\n                            }\n                            case 11: {\n                                goto lab_0x401aab;\n                            }\n                            case 15: {\n                                // 0x401a95\n                                v21 = 2;\n                                v25 = v38;\n                                v14 = v13;\n                                v18 = v17;\n                                v9 = v37;\n                                goto lab_0x401a40;\n                            }\n                            case 20: {\n                                // 0x401a8e\n                                v21 = 1;\n                                v25 = v38;\n                                v14 = v13;\n                                v18 = v17;\n                                v9 = v37;\n                                goto lab_0x401a40;\n                            }\n                            case 24: {\n                                goto lab_0x401a40;\n                            }\n                            default: {\n                                goto lab_0x40238d;\n                            }\n                        }\n                    }\n                  lab_0x40238d:\n                    if ((char)v13 != 0) {\n                        // 0x402392\n                        *(char *)&g36 = (char)v17;\n                    }\n                    // 0x402399\n                    format = dcgettext(NULL, \"invalid trailing option -- %c\", 5);\n                  lab_0x40237a:\n                    // 0x40237a\n                    error(0, 0, format);\n                    // 0x4018f3\n                    function_4030d0(1);\n                    // UNREACHABLE\n                }\n                goto lab_0x401a6a;\n            } else {\n                goto lab_0x401829;\n            }\n        } else {\n            goto lab_0x401829;\n        }\n    }\n  lab_0x402576_4:;\n    // 0x402576\n    char * v40; // 0x4017a0\n    free((int64_t *)v40);\n    int32_t v41; // 0x4017a0\n    int32_t v42 = v41; // 0x402585\n    char * v43; // 0x4017a0\n    char * v44 = v43; // 0x402585\n    int64_t v45; // 0x4017a0\n    int64_t v46 = v45; // 0x402585\n    int32_t v47; // 0x4017a0\n    int32_t v48 = v47; // 0x402585\n    int64_t v49; // 0x4017a0\n    int64_t v50 = v49; // 0x402585\n    int64_t v51; // 0x4017a0\n    int64_t v52 = v51; // 0x402585\n    int64_t v53; // 0x4017a0\n    int64_t v54 = v53; // 0x402585\n    int64_t v55; // 0x4017a0\n    int64_t v56 = v55; // 0x402585\n    int64_t v57; // 0x4017a0\n    int64_t v58 = v57; // 0x402585\n    int64_t v59; // 0x4017a0\n    int64_t v60 = v59; // 0x402585\n    int64_t v61; // 0x4017a0\n    int64_t v62 = v61; // 0x402585\n    int32_t v63; // 0x4017a0\n    int32_t v64 = v63; // 0x402585\n    int32_t v65; // 0x4017a0\n    int32_t v66 = v65; // 0x402585\n    int64_t v67; // 0x4017a0\n    int32_t v68 = v67; // 0x402585\n    int64_t v69; // 0x4017a0\n    int64_t v70 = v69; // 0x402585\n    int64_t v71; // 0x4017a0\n    int64_t v72 = v71; // 0x402585\n    int64_t v73; // 0x4017a0\n    int64_t v74 = v73; // 0x402585\n    goto lab_0x4024b7;\n  lab_0x402609:;\n    // 0x402609\n    int64_t v229; // 0x4017a0\n    int64_t v230; // 0x4017a0\n    int64_t v212; // 0x402532\n    function_402a90(*(int64_t *)(v229 + v212) + 0x2000, v230);\n    int64_t v227; // 0x4017a0\n    int64_t v570 = v227; // 0x40261b\n    int64_t v228; // 0x4017a0\n    int64_t v571 = v228; // 0x40261b\n    int64_t v238 = v227; // 0x40261b\n    int64_t v239 = v228; // 0x40261b\n    uint64_t v221; // 0x40253d\n    uint64_t v208; // 0x4024fc\n    if (v221 > v208) {\n        goto lab_0x402636;\n    } else {\n        goto lab_0x40261d;\n    }\n  lab_0x402641:;\n    // 0x402641\n    int64_t v226; // 0x4017a0\n    int64_t v220; // 0x402532\n    function_402a90(v220, v226);\n    int64_t v224; // 0x4017a0\n    v570 = v224;\n    int64_t v225; // 0x4017a0\n    v571 = v225;\n    goto lab_0x40261d;\n  lab_0x402636:;\n    int64_t v581 = v221 - v208; // 0x402636\n    int64_t v582 = v238 + v581; // 0x402639\n    v570 = v582;\n    v571 = v239;\n    v224 = v582;\n    v225 = v239;\n    v226 = v581;\n    if (v581 == 0) {\n        goto lab_0x40261d;\n    } else {\n        goto lab_0x402641;\n    }\n  lab_0x40261d:;\n    // 0x40261d\n    int32_t v204; // 0x4017a0\n    v41 = v204;\n    char * v202; // 0x4017a0\n    v43 = v202;\n    int64_t v200; // 0x4017a0\n    v45 = v200;\n    int32_t v198; // 0x4017a0\n    v47 = v198;\n    int64_t v196; // 0x4017a0\n    v49 = v196;\n    int64_t v194; // 0x4017a0\n    v51 = v194;\n    int64_t v192; // 0x4017a0\n    v53 = v192;\n    int64_t v190; // 0x4017a0\n    v55 = v190;\n    int64_t v188; // 0x4017a0\n    v57 = v188;\n    int64_t v186; // 0x4017a0\n    v59 = v186;\n    int64_t v184; // 0x4017a0\n    v61 = v184;\n    int32_t v182; // 0x4017a0\n    v63 = v182;\n    int32_t v181; // 0x4017a0\n    v65 = v181;\n    char * v209; // 0x402506\n    v40 = v209;\n    v69 = v571;\n    v67 = v570;\n    int64_t v210; // 0x402520\n    v71 = v210;\n    int64_t v177; // 0x4017a0\n    v73 = v177;\n    int64_t v232 = v570; // 0x402622\n    int64_t v217; // 0x4017a0\n    int64_t v233 = v217 ^ 1; // 0x402622\n    if ((char)v571 != 0) {\n        goto lab_0x402576_4;\n    }\n    goto lab_0x4025b3;\n  lab_0x4025b3:;\n    int64_t v213 = 0; // 0x4025b8\n    int64_t v214 = v233; // 0x4025b8\n    int64_t v215 = v232; // 0x4025b8\n    goto lab_0x402525;\n  lab_0x401de7:;\n    // 0x401de7\n    int64_t v274; // 0x4017a0\n    int64_t v572 = v274;\n    int64_t v273; // 0x4017a0\n    int64_t v573 = v273;\n    char * v271; // 0x4017a0\n    char * v559 = v271;\n    int32_t v270; // 0x4017a0\n    int32_t v574 = v270;\n    int64_t v258; // 0x4017a0\n    int64_t v556 = (v258 + 1) % v186;\n    int64_t v272; // 0x4017a0\n    int64_t v557; // 0x4017a0\n    int64_t v283; // 0x4017a0\n    char * v282; // 0x4017a0\n    int32_t v281; // 0x4017a0\n    int64_t v251; // 0x401d81\n    uint64_t v560; // 0x402421\n    int32_t v558; // 0x40244f\n    if ((char)v573 != 0) {\n        // 0x40241b\n        v557 = v272;\n        if ((char)v572 == 0) {\n            int64_t v575 = v573 & 0xffffffff; // 0x40241e\n            v281 = v574;\n            v282 = v559;\n            v283 = v575;\n            if (v188 != v258) {\n                goto lab_0x40248f;\n            } else {\n                int64_t v576 = v557 - v196; // 0x4026c3\n                int32_t v577 = v574 + (int32_t)v576; // 0x4026cb\n                v281 = v577;\n                v282 = v559;\n                v283 = v575;\n                if (v576 == 0) {\n                    goto lab_0x40248f;\n                } else {\n                    // 0x4026d9\n                    function_402a90(*(int64_t *)(8 * v556 + v251), v576);\n                    v281 = v577;\n                    v282 = v559;\n                    v283 = v575;\n                    goto lab_0x40248f;\n                }\n            }\n        } else {\n            // 0x40243b\n            v560 = 0x100000000000000 * v572 >> 56;\n            uint64_t v578 = 0x2000 - v557; // 0x40244c\n            v558 = v574 + (int32_t)v194;\n            int64_t v579 = *(int64_t *)(8 * v258 + v251) + v557; // 0x402454\n            if (v194 < v578) {\n                // 0x40281b\n                function_402a90(v579, v194);\n                v281 = v558;\n                v282 = v559;\n                v283 = v560 % 256;\n                goto lab_0x40248f;\n            } else {\n                if (v578 == 0) {\n                    // 0x402460\n                    goto lab_0x4027fd;\n                } else {\n                    // 0x40246d\n                    function_402a90(v579, v578);\n                    v281 = v558;\n                    v282 = v559;\n                    v283 = v560 % 256;\n                    if (v557 != v196) {\n                        goto lab_0x4027fd;\n                    } else {\n                        goto lab_0x40248f;\n                    }\n                }\n            }\n        }\n    }\n    int32_t v241 = v574; // 0x401e06\n    char * v242 = v559; // 0x401e06\n    int64_t v243 = v556; // 0x401e06\n    int64_t v250; // 0x4017a0\n    int64_t v244 = v250; // 0x401e06\n    int64_t v245 = v251; // 0x401e06\n    int64_t v246 = v572; // 0x401e06\n    int32_t v252 = v574; // 0x401e06\n    char * v253 = v559; // 0x401e06\n    int64_t v254 = v258; // 0x401e06\n    int64_t v255 = v556; // 0x401e06\n    int64_t v256 = v572; // 0x401e06\n    if (v250 == v258) {\n        goto lab_0x401d58;\n    } else {\n        goto lab_0x401d94;\n    }\n  lab_0x401dd3:;\n    // 0x401dd3\n    int64_t v268; // 0x4017a0\n    int32_t v260; // 0x4017a0\n    int32_t v580 = v260 + (int32_t)v268; // 0x401dd3\n    v270 = v580;\n    char * v267; // 0x4017a0\n    v271 = v267;\n    v272 = v268;\n    int64_t v269; // 0x4017a0\n    v273 = v269;\n    int64_t v240; // 0x4017a0\n    v274 = v240;\n    int32_t v277 = v580; // 0x401de1\n    char * v278 = v267; // 0x401de1\n    int64_t v279 = v268; // 0x401de1\n    int64_t v280 = v269; // 0x401de1\n    if (v268 != 0) {\n        goto lab_0x401ea3;\n    } else {\n        goto lab_0x401de7;\n    }\n  lab_0x401ea3:\n    // 0x401ea3\n    function_402a90(*(int64_t *)(8 * v258 + v251), v279);\n    v270 = v277;\n    v271 = v278;\n    v272 = v279;\n    v273 = v280;\n    v274 = v240;\n    goto lab_0x401de7;\n  lab_0x401838_4:;\n    // 0x401838\n    int32_t v454; // 0x4017a0\n    int32_t v457 = v454; // 0x4017a0\n    int64_t v455; // 0x4017a0\n    int32_t v458 = v455; // 0x4017a0\n    bool v456; // 0x4017a0\n    int32_t v459 = v456; // 0x4017a0\n    int64_t v460; // 0x4017a0\n    int64_t v461 = v460; // 0x4017a0\n    goto lab_0x401838_5;\n  lab_0x401aab:\n    // 0x401aab\n    v21 = v20;\n    v25 = v11;\n    v14 = v13;\n    v18 = v17;\n    v9 = 0;\n    goto lab_0x401a40;\n  lab_0x401a40:;\n    int64_t v476 = v9;\n    int64_t v477 = v18;\n    int64_t v478 = v14;\n    int64_t v479 = v25;\n    int64_t v480 = v21;\n    int64_t v481 = v26 + 1; // 0x401a40\n    unsigned char v482 = *(char *)v481; // 0x401a44\n    v26 = v481;\n    v19 = v480;\n    v24 = v479;\n    v12 = v478;\n    v16 = v477;\n    v8 = v476;\n    v10 = v482;\n    if (v482 == 0) {\n        if ((char)v478 == 0) {\n            goto lab_0x401a5e;\n        } else {\n            // 0x401a57\n            *(char *)&g36 = (char)v477;\n            goto lab_0x401a5e;\n        }\n    }\n    goto lab_0x401a18;\n  lab_0x401829:;\n    int64_t v483 = v7;\n    int64_t v484; // 0x4017a0\n    int64_t v453 = v484;\n    int64_t v467 = v6;\n    int64_t v466 = v483 & 0xffffffff;\n    v457 = v3;\n    v458 = v4;\n    v459 = 0;\n    v461 = v5;\n    int32_t v463; // 0x4017a0\n    int32_t v462; // 0x4017a0\n    int32_t v206; // 0x4017a0\n    char v452; // 0x40189f\n    char * v451; // 0x4018b0\n    while (true) {\n      lab_0x401838_5:\n        // 0x401838\n        v462 = v459;\n        v206 = v458;\n        v463 = v457;\n        int64_t v464 = v461; // 0x4017a0\n        while (true) {\n          lab_0x401838_3:\n            // 0x401838\n            v460 = v464;\n            while (true) {\n              lab_0x401838:;\n                int64_t v465 = function_406e30(v466, v467, \"c:n:qvz0123456789\", &g3, 0, v453); // 0x40184b\n                uint32_t v468 = (int32_t)v465;\n                switch (v468) {\n                    case -1: {\n                        goto lab_0x401ab3;\n                    }\n                    case 110: {\n                        goto lab_0x401948;\n                    }\n                    default: {\n                        if (v468 <= 110) {\n                            if (v468 == -130) {\n                                // 0x402839\n                                function_4030d0(0);\n                                // UNREACHABLE\n                            }\n                            if (v468 != 99) {\n                                if (v468 == -131) {\n                                    // 0x401990\n                                    function_4057d0((int64_t)g30, \"head\", \"GNU coreutils\", (int64_t)g19, \"David MacKenzie\", \"Jim Meyering\");\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                if (v468 < 58) {\n                                    // 0x402366\n                                    format = dcgettext(NULL, \"invalid trailing option -- %c\", 5);\n                                    goto lab_0x40237a;\n                                } else {\n                                    goto lab_0x4018f3;\n                                }\n                            } else {\n                                char * v469 = g51; // 0x401898\n                                v452 = *v469;\n                                v451 = v469;\n                                if (v452 != 45) {\n                                    goto lab_0x4018b7;\n                                } else {\n                                    // 0x4018ac\n                                    v451 = (char *)((int64_t)v469 + 1);\n                                    g51 = v451;\n                                    goto lab_0x4018b7;\n                                }\n                            }\n                        }\n                        // 0x401864\n                        if (v468 == 118) {\n                            // break -> 0x401838\n                            break;\n                        }\n                        if (v468 <= 118) {\n                            // 0x401920\n                            if (v468 != 113) {\n                                goto lab_0x4018f3;\n                            } else {\n                                // 0x401838\n                                v464 = 2;\n                                goto lab_0x401838_3;\n                            }\n                        }\n                        if (v468 != 122) {\n                            if (v468 != 128) {\n                                // 0x4018f3\n                                function_4030d0(1);\n                                // UNREACHABLE\n                            }\n                            // 0x40190b\n                            *(char *)&g38 = 1;\n                        } else {\n                            // 0x40187c\n                            *(char *)&g36 = 0;\n                        }\n                        goto lab_0x401838;\n                    }\n                }\n            }\n            // 0x401838\n            int64_t v470; // 0x4017a0\n            int64_t v471 = v470;\n            v464 = v471;\n            goto lab_0x401838_3;\n        }\n      lab_0x401948:;\n        char * v472 = g51; // 0x401948\n        char v473 = *v472; // 0x40194f\n        char * v474 = v472; // 0x40195a\n        if (v473 == 45) {\n            // 0x40195c\n            v474 = (char *)((int64_t)v472 + 1);\n            g51 = v474;\n        }\n        int64_t v475 = function_402990(1, (int64_t)v474, v473, (int64_t)&g3, 0, v453); // 0x401973\n        v454 = 1;\n        v455 = v475;\n        v456 = v473 == 45;\n        goto lab_0x401838_4;\n    }\n  lab_0x401ab3:;\n    int32_t v485 = v460; // 0x401ab3\n    if (v485 == 1) {\n        // 0x401cac\n        g37 = 1;\n        goto lab_0x401ad1;\n    } else {\n        if (v485 != 0) {\n            goto lab_0x401ad1;\n        } else {\n            // 0x401ac0\n            if ((int32_t)v483 - 1 > *(int32_t *)0x60b27c) {\n                // 0x401cac\n                g37 = 1;\n                goto lab_0x401ad1;\n            } else {\n                goto lab_0x401ad1;\n            }\n        }\n    }\n  lab_0x401ad1:;\n    int64_t v486; // bp-200, 0x4017a0\n    int128_t v487; // 0x4017a0\n    if ((char)v463 != 0) {\n        goto lab_0x401aeb;\n    } else {\n        if (v206 < 0 == (v462 != 0)) {\n            int64_t v488 = function_403680((int64_t)v206, &v486); // 0x40284d\n            error(1, EOVERFLOW, \"%s: %s\", dcgettext(NULL, \"invalid number of bytes\", 5), (char *)function_4052f0(v488));\n            v41 = v462;\n            v59 = v487;\n            v69 = v462;\n            v67 = &g56;\n            char * v489; // 0x4017a0\n            v71 = (int64_t)v489;\n            v73 = (int64_t)v489;\n            goto lab_0x402576_4;\n        } else {\n            goto lab_0x401aeb;\n        }\n    }\n  lab_0x401aeb:;\n    int64_t v490 = g28; // 0x401aeb\n    int64_t v491 = (int64_t)&g2; // 0x401af5\n    int64_t v492 = (int64_t)\"-\"; // 0x401af5\n    int64_t v172; // 0x4017a0\n    int32_t v166; // 0x4017a0\n    int32_t v163; // 0x4017a0\n    if (v466 > v490) {\n        int64_t v493 = 8 * v490 + v467; // 0x401afb\n        int64_t v494 = *(int64_t *)v493; // 0x401b00\n        v491 = v493;\n        v492 = v494;\n        v163 = v462;\n        v166 = 1;\n        v172 = v487;\n        if (v494 == 0) {\n            goto lab_0x401ecc;\n        } else {\n            goto lab_0x401b15;\n        }\n    } else {\n        goto lab_0x401b15;\n    }\n  lab_0x401a6a:;\n    // 0x401a6a\n    int64_t v495; // 0x4017a0\n    int64_t v496 = function_402990(v28 % 256, v31, (char)v27, v32, v15, v495); // 0x401a77\n    *v30 = *(int64_t *)a2;\n    v3 = v28;\n    v4 = v496;\n    v5 = v22;\n    v6 = v29;\n    v484 = v495;\n    v7 = a1 + 0xffffffff;\n    goto lab_0x401829;\n  lab_0x401b15:;\n    int64_t v497 = v206; // 0x401b15\n    int64_t v498 = v206 % 0x2000; // 0x401b33\n    int64_t v499 = 0x2000 - v498; // 0x401b39\n    int64_t v500 = v497 + 0x2000; // 0x401b52\n    int64_t v501 = (v499 + v497) / 0x2000; // 0x401b64\n    int64_t v502 = v501 + 1; // 0x401b6d\n    int32_t v151 = v462; // 0x401b83\n    char * v152 = \"-\"; // 0x401b83\n    int64_t v153 = v491 + 8; // 0x401b83\n    int32_t v154 = 1; // 0x401b83\n    int64_t v155 = v498; // 0x401b83\n    int64_t v156 = v499; // 0x401b83\n    int64_t v157 = v500; // 0x401b83\n    int64_t v158 = 2 * v500; // 0x401b83\n    int64_t v159 = v501; // 0x401b83\n    int64_t v160 = v502; // 0x401b83\n    int64_t v161 = v502 / 2; // 0x401b83\n    int64_t v162 = v492; // 0x401b83\n    goto lab_0x401c32;\n  lab_0x401ecc:;\n    uint32_t v555 = v166;\n    if (g35 == 0 || close(0) >= 0) {\n        // 0x401ed9\n        return v555 % 256 ^ 1;\n    }\n    // 0x4022a4\n    error(1, *__errno_location(), \"-\");\n    int32_t v543 = v163; // 0x4022b7\n    char * v164; // 0x4017a0\n    char * v542 = v164; // 0x4022b7\n    int64_t v165; // 0x4017a0\n    int64_t v541 = v165; // 0x4022b7\n    int32_t v540 = v555; // 0x4022b7\n    int64_t v167; // 0x4017a0\n    int64_t v539 = v167; // 0x4022b7\n    int64_t v168; // 0x4017a0\n    int64_t v538 = v168; // 0x4022b7\n    int64_t v169; // 0x4017a0\n    int64_t v537 = v169; // 0x4022b7\n    int64_t v170; // 0x4017a0\n    int64_t v536 = v170; // 0x4022b7\n    int64_t v171; // 0x4017a0\n    int64_t v535 = v171; // 0x4022b7\n    int64_t v534 = v172; // 0x4022b7\n    int64_t v173; // 0x4017a0\n    int64_t v533 = v173; // 0x4022b7\n    int32_t v174; // 0x4017a0\n    int32_t v532 = v174; // 0x4022b7\n    int64_t v175; // 0x4017a0\n    int64_t v531 = v175; // 0x4022b7\n    int64_t v176; // 0x4017a0\n    int64_t v530 = v176; // 0x4022b7\n    goto lab_0x4022bc;\n  lab_0x401c32:;\n    int64_t path = v162;\n    int64_t v503 = v161;\n    int64_t v504 = v160;\n    int64_t v505 = v159;\n    int64_t v506 = v158;\n    int64_t v507 = v157;\n    int64_t v508 = v156;\n    int64_t v509 = v155;\n    int32_t v510 = v154;\n    int64_t v511 = v153;\n    char * v512 = v152;\n    int32_t v513 = v151;\n    bool v514; // 0x4017a0\n    int64_t v515 = v514 ? -1 : 1; // 0x401c3f\n    int64_t v516 = 2; // 0x4017a0\n    int64_t v517 = path;\n    int64_t v518 = (int64_t)v512;\n    unsigned char v519 = *(char *)v517; // 0x401c3f\n    char v520 = *(char *)v518; // 0x401c3f\n    char v521 = v520; // 0x401c3f\n    bool v522 = false; // 0x401c3f\n    while (v519 == v520) {\n        int64_t v523 = v516 - 1; // 0x401c3f\n        int64_t v524 = v518 + v515; // 0x401c3f\n        int64_t v525 = v517 + v515; // 0x401c3f\n        v516 = v523;\n        v521 = v519;\n        v522 = true;\n        if (v523 == 0) {\n            // break -> \n            break;\n        }\n        v517 = v525;\n        v518 = v524;\n        v519 = *(char *)v517;\n        v520 = *(char *)v518;\n        v521 = v520;\n        v522 = false;\n    }\n    unsigned char v526 = v521;\n    int64_t v527 = (int64_t)!((v519 < v526 | v522)) - (int64_t)(v519 < v526); // 0x401c44\n    int64_t v146; // 0x4017a0\n    int64_t v528; // 0x4017a0\n    int64_t v138; // 0x4017a0\n    int64_t v139; // 0x4017a0\n    int64_t v141; // 0x4017a0\n    int64_t v144; // 0x4017a0\n    int64_t v142; // 0x4017a0\n    int64_t v140; // 0x4017a0\n    int64_t v143; // 0x4017a0\n    char * v135; // 0x4017a0\n    int32_t v137; // 0x4017a0\n    int32_t v134; // 0x4017a0\n    int32_t v529; // 0x4017a0\n    int32_t v145; // 0x4017a0\n    int64_t v136; // 0x4017a0\n    int64_t v147; // 0x4017a0\n    if ((int32_t)v527 == 0) {\n        // 0x401b88\n        g35 = 1;\n        v529 = 0;\n        v528 = (int64_t)dcgettext(NULL, \"standard input\", 5);\n        goto lab_0x401bab;\n    } else {\n        int32_t fd = open((char *)path, O_RDONLY); // 0x401c5a\n        v529 = fd;\n        v528 = path;\n        if (fd >= 0) {\n            goto lab_0x401bab;\n        } else {\n            // 0x401c6b\n            function_4050a0(4, path);\n            v134 = v513;\n            v135 = v512;\n            v136 = v511;\n            v137 = v510;\n            v138 = v509;\n            v139 = v508;\n            v140 = v507;\n            v141 = v506;\n            v142 = v505;\n            v143 = v504;\n            v144 = v503;\n            v145 = fd;\n            v146 = v527;\n            v147 = (int64_t)\"cannot open %s for reading\";\n            goto lab_0x401c85;\n        }\n    }\n  lab_0x4022bc:;\n    int64_t v429 = v530;\n    int64_t v428 = v531;\n    int32_t v427 = v532;\n    int64_t v426 = v533;\n    int64_t v425 = v534;\n    int64_t v424 = v535;\n    int64_t v423 = v536;\n    int64_t v422 = v537;\n    int64_t v421 = v538;\n    int64_t v420 = v539;\n    int32_t v419 = v540;\n    int64_t v418 = v541;\n    char * v417 = v542;\n    int32_t v416 = v543;\n    int64_t v544 = function_4029f0(v427, 0, 1, v429); // 0x4022ca\n    int32_t v434 = v416; // 0x4022d7\n    char * v435 = v417; // 0x4022d7\n    int64_t v436 = v418; // 0x4022d7\n    int32_t v437 = v419; // 0x4022d7\n    int64_t v438 = v420; // 0x4022d7\n    int64_t v439 = v421; // 0x4022d7\n    int64_t v440 = v422; // 0x4022d7\n    int64_t v441 = v423; // 0x4022d7\n    int64_t v442 = v424; // 0x4022d7\n    int64_t v443 = v425; // 0x4022d7\n    int64_t v444 = v426; // 0x4022d7\n    int32_t v445 = v427; // 0x4022d7\n    int64_t v446 = v428; // 0x4022d7\n    int64_t v447 = v429; // 0x4022d7\n    int64_t v431; // 0x4017a0\n    int64_t v103; // 0x4017a0\n    int64_t v180; // 0x4017a0\n    int64_t v104; // 0x4017a0\n    int64_t v178; // 0x4017a0\n    int64_t v285; // 0x4017a0\n    int64_t v102; // 0x4017a0\n    int64_t v94; // 0x4017a0\n    int64_t v197; // 0x4017a0\n    int64_t v301; // 0x4017a0\n    int64_t v95; // 0x4017a0\n    int64_t v195; // 0x4017a0\n    int64_t v299; // 0x4017a0\n    int64_t v97; // 0x4017a0\n    int64_t v191; // 0x4017a0\n    int64_t v295; // 0x4017a0\n    int64_t v100; // 0x4017a0\n    int64_t v185; // 0x4017a0\n    int64_t v289; // 0x4017a0\n    int64_t v98; // 0x4017a0\n    int64_t v189; // 0x4017a0\n    int64_t v293; // 0x4017a0\n    int32_t v311; // 0x4017a0\n    int64_t v96; // 0x4017a0\n    int64_t v193; // 0x4017a0\n    int64_t v297; // 0x4017a0\n    int64_t v99; // 0x4017a0\n    int64_t v187; // 0x4017a0\n    int64_t v291; // 0x4017a0\n    char * v91; // 0x4017a0\n    char * v203; // 0x4017a0\n    char * v307; // 0x4017a0\n    int32_t v93; // 0x4017a0\n    int32_t v199; // 0x4017a0\n    int32_t v303; // 0x4017a0\n    int32_t v90; // 0x4017a0\n    int32_t v309; // 0x4017a0\n    int32_t v205; // 0x4017a0\n    int32_t v101; // 0x4017a0\n    int32_t v183; // 0x4017a0\n    int32_t v287; // 0x4017a0\n    int64_t v92; // 0x4017a0\n    int64_t v201; // 0x4017a0\n    int64_t v305; // 0x4017a0\n    if (v544 < 0) {\n        goto lab_0x402234;\n    } else {\n        int32_t v545 = v544; // 0x4022cf\n        if ((char)v463 == 0) {\n            // 0x4023b0\n            v205 = v416;\n            v203 = v417;\n            v201 = v418;\n            v199 = v419;\n            v197 = v420;\n            v195 = v421;\n            v193 = v422;\n            v191 = v423;\n            v189 = v424;\n            v187 = v425;\n            v185 = v426;\n            v183 = v427;\n            v180 = v428;\n            v178 = v429;\n            unsigned char v546; // 0x4022ea\n            if (v546 != 0) {\n                goto lab_0x401d16;\n            } else {\n                int64_t v547 = v2 < 0x2000000000000001 ? v2 : 512; // 0x4023d6\n                v205 = v416;\n                v203 = v417;\n                v201 = v418;\n                v199 = v419;\n                v197 = v420;\n                v195 = v421;\n                v193 = v422;\n                v191 = v423;\n                v189 = v424;\n                v187 = v425;\n                v185 = v426;\n                v183 = v427;\n                v180 = v428;\n                v178 = v429;\n                int64_t v548; // 0x4017a0\n                if (v548 > v547) {\n                    int64_t v549 = v548 - (0x100000000 * v544 >> 32); // 0x4023e3\n                    uint64_t v550 = v549 > 0 ? v549 : 0; // 0x4023ed\n                    uint64_t v551 = (int64_t)v206; // 0x4023f1\n                    if (v550 <= v551) {\n                        goto lab_0x402411;\n                    } else {\n                        int64_t v552 = function_402b10(v427, v550 - v551); // 0x402404\n                        if ((int32_t)v552 != 0) {\n                            // 0x4027ee\n                            function_402e00(v552 & 0xffffffff, v429);\n                            v90 = v416;\n                            v91 = v417;\n                            v92 = v418;\n                            v93 = v419;\n                            v94 = v420;\n                            v95 = v421;\n                            v96 = v422;\n                            v97 = v423;\n                            v98 = v424;\n                            v99 = v425;\n                            v100 = v426;\n                            v101 = v427;\n                            v102 = v546;\n                            v103 = v428;\n                            v104 = v429;\n                            goto lab_0x401c0d;\n                        } else {\n                            goto lab_0x402411;\n                        }\n                    }\n                } else {\n                    goto lab_0x401d16;\n                }\n            }\n        } else {\n            // 0x4022f7\n            v309 = v416;\n            v307 = v417;\n            v305 = v418;\n            v303 = v419;\n            v301 = v420;\n            v299 = v421;\n            v297 = v422;\n            v295 = v423;\n            v293 = v424;\n            v291 = v425;\n            v289 = v426;\n            v287 = v427;\n            v311 = v545;\n            v431 = v428;\n            v285 = v429;\n            if (*(char *)&g38 != 0) {\n                goto lab_0x401f0e;\n            } else {\n                // 0x4022ff\n                v309 = v416;\n                v307 = v417;\n                v305 = v418;\n                v303 = v419;\n                v301 = v420;\n                v299 = v421;\n                v297 = v422;\n                v295 = v423;\n                v293 = v424;\n                v291 = v425;\n                v289 = v426;\n                v287 = v427;\n                v311 = v545;\n                v431 = v428;\n                v285 = v429;\n                if ((v2 < 0x2000000000000001 ? v2 : 512) < v1) {\n                    int64_t v553 = 0x100000000 * v544 >> 32; // 0x40232f\n                    int64_t v554 = 1; // 0x402334\n                    if (v1 > v553) {\n                        // 0x40272d\n                        v554 = function_402e80(v429, v427, (int64_t)v206, v553, v1) % 256;\n                    }\n                    // 0x40233a\n                    v90 = v416;\n                    v91 = v417;\n                    v92 = v418;\n                    v93 = v419;\n                    v94 = v420;\n                    v95 = v421;\n                    v96 = v422;\n                    v97 = v423;\n                    v98 = v424;\n                    v99 = v425;\n                    v100 = v426;\n                    v101 = v427;\n                    v102 = v554 % 2;\n                    v103 = v428;\n                    v104 = v429;\n                    goto lab_0x401c0d;\n                } else {\n                    goto lab_0x401f0e;\n                }\n            }\n        }\n    }\n  lab_0x4024b7:;\n    int64_t v75 = v74;\n    int64_t v76 = v70;\n    int32_t v77 = v64;\n    int64_t v78 = v62;\n    int64_t v79 = v60;\n    int64_t v80 = v58;\n    int64_t v81 = v56;\n    int64_t v82 = v54;\n    int64_t v83 = v52;\n    int64_t v84 = v50;\n    int32_t v85 = v48;\n    int64_t v86 = v46;\n    char * v87 = v44;\n    int32_t v88 = v42;\n    int64_t v89 = v72 & 0xffffffff;\n    v90 = v88;\n    v91 = v87;\n    v92 = v86;\n    v93 = v85;\n    v94 = v84;\n    v95 = v83;\n    v96 = v82;\n    v97 = v81;\n    v98 = v80;\n    v99 = v79;\n    v100 = v78;\n    v101 = v77;\n    v102 = v76;\n    v103 = v89;\n    v104 = v75;\n    if (v66 != -1) {\n        int64_t v105 = function_4029f0(v77, (int64_t)v68, 0, v75) >= 0 ? v76 : 0;\n        v90 = v88;\n        v91 = v87;\n        v92 = v86;\n        v93 = v85;\n        v94 = v84;\n        v95 = v83;\n        v96 = v82;\n        v97 = v81;\n        v98 = v80;\n        v99 = v79;\n        v100 = v78;\n        v101 = v77;\n        v102 = v105;\n        v103 = v89;\n        v104 = v75;\n    }\n    goto lab_0x401c0d;\n  lab_0x402234:\n    // 0x402234\n    v90 = v434;\n    v91 = v435;\n    v92 = v436;\n    v93 = v437;\n    v94 = v438;\n    v95 = v439;\n    v96 = v440;\n    v97 = v441;\n    v98 = v442;\n    v99 = v443;\n    v100 = v444;\n    v101 = v445;\n    v102 = 0;\n    v103 = v446;\n    v104 = v447;\n    goto lab_0x401c0d;\n  lab_0x401bab:;\n    int64_t v563 = v528;\n    int32_t v564 = v529;\n    if (g37 != 0) {\n        char * v565 = g18 == 0 ? (char *)&g10 : (char *)&g11; // 0x401bd8\n        __printf_chk(1, \"%s==> %s <==\\n\", v565, (char *)v563);\n        g18 = 0;\n    }\n    if (v513 != 0) {\n        // 0x401cc4\n        if (__fxstat(1, v564, (struct stat *)&v486) != 0) {\n            // 0x402254\n            function_4050a0(4, v563);\n            error(0, *__errno_location(), dcgettext(NULL, \"cannot fstat %s\", 5));\n            v90 = v513;\n            v91 = v512;\n            v92 = v511;\n            v93 = v510;\n            v94 = v509;\n            v95 = v508;\n            v96 = v507;\n            v97 = v506;\n            v98 = v505;\n            v99 = v504;\n            v100 = v503;\n            v101 = v564;\n            v102 = 0;\n            v103 = v527;\n            v104 = v563;\n            goto lab_0x401c0d;\n        } else {\n            // 0x401ce2\n            v543 = v513;\n            v542 = v512;\n            v541 = v511;\n            v540 = v510;\n            v539 = v509;\n            v538 = v508;\n            v537 = v507;\n            v536 = v506;\n            v535 = v505;\n            v534 = v504;\n            v533 = v503;\n            v532 = v564;\n            v531 = v527;\n            v530 = v563;\n            int32_t v566; // 0x4017a0\n            if ((v566 & 0xd000) == 0x8000 == *(char *)&g38 == 0) {\n                goto lab_0x4022bc;\n            } else {\n                // 0x401d02\n                v205 = v513;\n                v203 = v512;\n                v201 = v511;\n                v199 = v510;\n                v197 = v509;\n                v195 = v508;\n                v193 = v507;\n                v191 = v506;\n                v189 = v505;\n                v187 = v504;\n                v185 = v503;\n                v183 = v564;\n                v180 = v527;\n                v178 = v563;\n                v309 = v513;\n                v307 = v512;\n                v305 = v511;\n                v303 = v510;\n                v301 = v509;\n                v299 = v508;\n                v297 = v507;\n                v295 = v506;\n                v293 = v505;\n                v291 = v504;\n                v289 = v503;\n                v287 = v564;\n                v311 = -1;\n                v431 = v527;\n                v285 = v563;\n                if ((char)v463 != 0) {\n                    goto lab_0x401f0e;\n                } else {\n                    goto lab_0x401d16;\n                }\n            }\n        }\n    } else {\n        int64_t v567 = v206; // 0x401bf4\n        if ((char)v463 == 0) {\n            int64_t v568 = function_402d30(v563, v564, v567); // 0x401cb8\n            v90 = v513;\n            v91 = v512;\n            v92 = v511;\n            v93 = v510;\n            v94 = v509;\n            v95 = v508;\n            v96 = v507;\n            v97 = v506;\n            v98 = v505;\n            v99 = v504;\n            v100 = v503;\n            v101 = v564;\n            v102 = v568 & 0xffffffff;\n            v103 = v527;\n            v104 = v563;\n        } else {\n            int64_t v569 = function_402bc0(v563, v564, v567); // 0x401c06\n            v90 = v513;\n            v91 = v512;\n            v92 = v511;\n            v93 = v510;\n            v94 = v509;\n            v95 = v508;\n            v96 = v507;\n            v97 = v506;\n            v98 = v505;\n            v99 = v504;\n            v100 = v503;\n            v101 = v564;\n            v102 = v569 & 0xffffffff;\n            v103 = v527;\n            v104 = v563;\n        }\n        goto lab_0x401c0d;\n    }\n  lab_0x401c0d:;\n    int64_t v106 = v103;\n    int64_t v107 = v102;\n    int32_t fd2 = v101;\n    int64_t v108 = v100;\n    int64_t v109 = v99;\n    int64_t v110 = v98;\n    int64_t v111 = v97;\n    int64_t v112 = v96;\n    int64_t v113 = v95;\n    int64_t v114 = v94;\n    int32_t v115 = v93;\n    int64_t v116 = v92;\n    char * v117 = v91;\n    int32_t v118 = v90;\n    int32_t v119 = v118; // 0x401c10\n    char * v120 = v117; // 0x401c10\n    int64_t v121 = v116; // 0x401c10\n    int32_t v122 = v115; // 0x401c10\n    int64_t v123 = v114; // 0x401c10\n    int64_t v124 = v113; // 0x401c10\n    int64_t v125 = v112; // 0x401c10\n    int64_t v126 = v111; // 0x401c10\n    int64_t v127 = v110; // 0x401c10\n    int64_t v128 = v109; // 0x401c10\n    int64_t v129 = v108; // 0x401c10\n    int32_t v130 = fd2; // 0x401c10\n    int64_t v131 = v107; // 0x401c10\n    int64_t v132 = v106; // 0x401c10\n    if ((int32_t)v106 != 0) {\n        int32_t v133 = close(fd2); // 0x401e15\n        v119 = v118;\n        v120 = v117;\n        v121 = v116;\n        v122 = v115;\n        v123 = v114;\n        v124 = v113;\n        v125 = v112;\n        v126 = v111;\n        v127 = v110;\n        v128 = v109;\n        v129 = v108;\n        v130 = fd2;\n        v131 = v107;\n        v132 = v106;\n        if (v133 == 0) {\n            goto lab_0x401c16;\n        } else {\n            // 0x401e22\n            function_4050a0(4, v104);\n            v134 = v118;\n            v135 = v117;\n            v136 = v116;\n            v137 = v115;\n            v138 = v114;\n            v139 = v113;\n            v140 = v112;\n            v141 = v111;\n            v142 = v110;\n            v143 = v109;\n            v144 = v108;\n            v145 = fd2;\n            v146 = v106;\n            v147 = (int64_t)\"failed to close %s\";\n            goto lab_0x401c85;\n        }\n    } else {\n        goto lab_0x401c16;\n    }\n  lab_0x401c85:\n    // 0x401c85\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v147, 5));\n    v119 = v134;\n    v120 = v135;\n    v121 = v136;\n    v122 = v137;\n    v123 = v138;\n    v124 = v139;\n    v125 = v140;\n    v126 = v141;\n    v127 = v142;\n    v128 = v143;\n    v129 = v144;\n    v130 = v145;\n    v131 = 0;\n    v132 = v146;\n    goto lab_0x401c16;\n  lab_0x401c16:;\n    int64_t v148 = v121 + 8; // 0x401c16\n    int32_t v149 = 0x1000000 * (v122 & (int32_t)v131) >> 24; // 0x401c21\n    int64_t v150 = *(int64_t *)v121; // 0x401c25\n    v151 = v119;\n    v152 = v120;\n    v153 = v148;\n    v154 = v149;\n    v155 = v123;\n    v156 = v124;\n    v157 = v125;\n    v158 = v126;\n    v159 = v127;\n    v160 = v128;\n    v161 = v129;\n    v162 = v150;\n    v163 = v119;\n    v164 = v120;\n    v165 = v148;\n    v166 = v149;\n    v167 = v123;\n    v168 = v124;\n    v169 = v125;\n    v170 = v126;\n    v171 = v127;\n    v172 = v128;\n    v173 = v129;\n    v174 = v130;\n    v175 = v132;\n    v176 = 0;\n    if (v150 == 0) {\n        goto lab_0x401ecc;\n    } else {\n        goto lab_0x401c32;\n    }\n  lab_0x401d16:\n    // 0x401d16\n    v177 = v178;\n    int64_t v179 = v180;\n    v181 = -1;\n    v182 = v183;\n    v184 = v185;\n    v186 = v187;\n    v188 = v189;\n    v190 = v191;\n    v192 = v193;\n    v194 = v195;\n    v196 = v197;\n    v198 = v199;\n    v200 = v201;\n    v202 = v203;\n    v204 = v205;\n    if (v206 < 0x100001) {\n        int64_t v207 = v204; // 0x4024f7\n        v208 = (int64_t)v206;\n        v209 = (char *)(function_405910(v190) & 0xffffffff);\n        v210 = 0x100000000 * v179 >> 32;\n        int64_t v211; // bp-360, 0x4017a0\n        v212 = (int64_t)&v211 + 144;\n        v213 = v207;\n        v214 = 0;\n        v215 = v181;\n        int64_t v216; // 0x4017a0\n        int32_t * err_num; // 0x40254c\n        while (true) {\n          lab_0x402525:\n            // 0x402525\n            v216 = v215;\n            v217 = v214;\n            int64_t v218 = v213;\n            int64_t v219 = 8 * v217 & 2040; // 0x402532\n            v220 = *(int64_t *)(v219 + v212);\n            v221 = function_403560(v182, v220, v192);\n            if (v192 > v221) {\n                // 0x40254c\n                err_num = __errno_location();\n                if (*err_num != 0) {\n                    // break -> 0x402798\n                    break;\n                }\n                if (v221 > v208) {\n                    if ((char)v218 != 0) {\n                        int64_t v222 = v221 - v208; // 0x402658\n                        int64_t v223 = v222 + v216; // 0x40265b\n                        v41 = v204;\n                        v43 = v202;\n                        v45 = v200;\n                        v47 = v198;\n                        v49 = v196;\n                        v51 = v194;\n                        v53 = v192;\n                        v55 = v190;\n                        v57 = v188;\n                        v59 = v186;\n                        v61 = v184;\n                        v63 = v182;\n                        v65 = v181;\n                        v40 = v209;\n                        v69 = v218;\n                        v67 = v223;\n                        v71 = v210;\n                        v73 = v177;\n                        v224 = v223;\n                        v225 = v218;\n                        v226 = v222;\n                        if (v222 == 0) {\n                            goto lab_0x402576_4;\n                        }\n                        goto lab_0x402641;\n                    } else {\n                        if (v206 == 0) {\n                            // 0x4026ae\n                            v224 = v221 + v216;\n                            v225 = v207;\n                            v226 = v221;\n                            goto lab_0x402641;\n                        } else {\n                            // 0x4025fa\n                            v227 = v216 + v208;\n                            v228 = v207;\n                            v229 = v219 ^ 8;\n                            v230 = v208;\n                            goto lab_0x402609;\n                        }\n                    }\n                } else {\n                    // 0x40255f\n                    v41 = v204;\n                    v43 = v202;\n                    v45 = v200;\n                    v47 = v198;\n                    v49 = v196;\n                    v51 = v194;\n                    v53 = v192;\n                    v55 = v190;\n                    v57 = v188;\n                    v59 = v186;\n                    v61 = v184;\n                    v63 = v182;\n                    v65 = v181;\n                    v40 = v209;\n                    v69 = v207;\n                    v67 = v216;\n                    v71 = v210;\n                    v73 = v177;\n                    if ((char)v218 != 0) {\n                        goto lab_0x402576_4;\n                    }\n                    int64_t v231 = v221 + v216; // 0x402665\n                    v41 = v204;\n                    v43 = v202;\n                    v45 = v200;\n                    v47 = v198;\n                    v49 = v196;\n                    v51 = v194;\n                    v53 = v192;\n                    v55 = v190;\n                    v57 = v188;\n                    v59 = v186;\n                    v61 = v184;\n                    v63 = v182;\n                    v65 = v181;\n                    v40 = v209;\n                    v69 = v207;\n                    v67 = v231;\n                    v71 = v210;\n                    v73 = v177;\n                    if (v221 == 0) {\n                        goto lab_0x402576_4;\n                    }\n                    // 0x40267f\n                    v227 = v231;\n                    v228 = v207;\n                    v229 = v219 ^ 8;\n                    v230 = v221;\n                    goto lab_0x402609;\n                }\n            } else {\n                if ((char)v218 != 0) {\n                    if (v221 <= v208) {\n                        // 0x402696\n                        v232 = v216;\n                        v233 = v217 ^ 1;\n                        goto lab_0x4025b3;\n                    } else {\n                        int64_t v234 = v221 - v208; // 0x4025c6\n                        int64_t v235 = v234 + v216; // 0x4025c9\n                        v224 = v235;\n                        v225 = 0;\n                        v226 = v234;\n                        if (v234 != 0) {\n                            goto lab_0x402641;\n                        } else {\n                            // 0x4025d4\n                            v232 = v235;\n                            v233 = v217 ^ 1;\n                            goto lab_0x4025b3;\n                        }\n                    }\n                } else {\n                    int64_t v236 = v216 + v208; // 0x402590\n                    int64_t v237 = v217 ^ 1; // 0x402594\n                    v227 = v236;\n                    v228 = v218;\n                    v229 = 8 * v237 & 2040;\n                    v230 = v208;\n                    if (v206 != 0) {\n                        goto lab_0x402609;\n                    } else {\n                        // 0x4025a8\n                        v232 = v236;\n                        v233 = v237;\n                        v238 = v236;\n                        v239 = v218;\n                        if (v221 > v208) {\n                            goto lab_0x402636;\n                        } else {\n                            goto lab_0x4025b3;\n                        }\n                    }\n                }\n            }\n        }\n        // 0x402798\n        function_4050a0(4, v177);\n        error(0, *err_num, dcgettext(NULL, \"error reading %s\", 5));\n        v41 = v204;\n        v43 = v202;\n        v45 = v200;\n        v47 = v198;\n        v49 = v196;\n        v51 = v194;\n        v53 = v192;\n        v55 = v190;\n        v57 = v188;\n        v59 = v186;\n        v61 = v184;\n        v63 = v182;\n        v65 = v181;\n        v40 = v209;\n        v69 = 0;\n        v67 = v216;\n        v71 = v210;\n        v73 = v177;\n        goto lab_0x402576_4;\n    } else {\n        // 0x401d58\n        v240 = v204;\n        v241 = v181;\n        v242 = NULL;\n        v243 = 1;\n        v244 = 0;\n        v245 = 0;\n        v246 = 0;\n        int32_t * err_num2; // 0x4017a0\n        char * v247; // 0x4017a0\n        while (true) {\n          lab_0x401d58:;\n            int64_t v248 = v244;\n            int64_t v249 = v186 < 16 ? v186 : 16; // 0x401d5b\n            if (v248 != 0) {\n                // 0x401ef6\n                v249 = v184 < v248 ? v186 : 2 * v248;\n            }\n            // 0x401d73\n            v250 = v249;\n            v251 = function_405970(v245, 8 * v250);\n            v252 = v241;\n            v253 = v242;\n            v254 = v248;\n            v255 = v243;\n            v256 = v246;\n            while (true) {\n              lab_0x401d94:;\n                int64_t v257 = v256;\n                v258 = v255;\n                int64_t v259 = v254;\n                v260 = v252;\n                int64_t v261 = 8 * v259 + v251; // 0x401d94\n                if ((char)v257 == 0) {\n                    int64_t v262 = function_405910(0x2000); // 0x401e49\n                    *(int64_t *)v261 = v262;\n                    char * v263 = (char *)(v259 + 1);\n                    int64_t v264 = function_403560(v182, v262, 0x2000); // 0x401e67\n                    int64_t v265 = 0; // 0x401e75\n                    if (v264 < 0x2000) {\n                        int32_t * v266 = __errno_location(); // 0x401e77\n                        v265 = v240;\n                        v247 = v263;\n                        err_num2 = v266;\n                        if (*v266 != 0) {\n                            // break (via goto) -> 0x4026e7\n                            goto lab_0x4026e7_2;\n                        }\n                    }\n                    // 0x401e8b\n                    v267 = v263;\n                    v268 = v264;\n                    v269 = v265;\n                    v270 = v260;\n                    v271 = v263;\n                    v272 = v264;\n                    v273 = v265;\n                    v274 = v257;\n                    if (v188 != v259) {\n                        goto lab_0x401de7;\n                    } else {\n                        goto lab_0x401dd3;\n                    }\n                } else {\n                    char * v275 = v253;\n                    int64_t v276 = function_403560(v182, *(int64_t *)v261, 0x2000); // 0x401dae\n                    if (v276 < 0x2000) {\n                        // 0x401dc2\n                        if (*__errno_location() != 0) {\n                            // break (via goto) -> 0x4026e7\n                            goto lab_0x4026e7_2;\n                        }\n                        // 0x401dd0\n                        v267 = v275;\n                        v268 = v276;\n                        v269 = v257 & 0xffffffff;\n                        goto lab_0x401dd3;\n                    } else {\n                        // 0x401e9b\n                        v277 = v260 + (int32_t)v276;\n                        v278 = v275;\n                        v279 = v276;\n                        v280 = 0;\n                        goto lab_0x401ea3;\n                    }\n                }\n            }\n        }\n      lab_0x4026e7_2:\n        // 0x4026e7\n        function_4050a0(4, v177);\n        error(0, *err_num2, dcgettext(NULL, \"error reading %s\", 5));\n        v281 = v260;\n        v282 = v247;\n        v283 = 0;\n        goto lab_0x40248f;\n    }\n  lab_0x401f0e:;\n    int64_t v284 = v285;\n    int32_t v286 = v287;\n    int64_t v288 = v289;\n    int64_t v290 = v291;\n    int64_t v292 = v293;\n    int64_t v294 = v295;\n    int64_t v296 = v297;\n    int64_t v298 = v299;\n    int64_t v300 = v301;\n    int32_t v302 = v303;\n    int64_t v304 = v305;\n    char * v306 = v307;\n    int32_t v308 = v309;\n    char * v310 = (char *)(int64_t)v311; // 0x401f18\n    int64_t v312 = function_405910(0x2018); // 0x401f1d\n    *(int64_t *)(v312 + 0x2008) = 0;\n    *(int64_t *)(v312 + 0x2000) = 0;\n    *(int64_t *)(v312 + 0x2010) = 0;\n    int32_t v313 = v312; // 0x401f4b\n    int64_t v314 = function_405910(0x2018); // 0x401f50\n    int64_t v315 = function_405310(v286, v314, 0x2000); // 0x401f7c\n    int64_t v316 = v312; // 0x401f8c\n    int32_t v317 = v313; // 0x401f8c\n    int64_t v318 = v314; // 0x401f8c\n    char * v319 = v310; // 0x401f8c\n    int64_t v320 = 0; // 0x401f8c\n    int64_t v321 = v315; // 0x401f8c\n    int64_t v322; // 0x4017a0\n    int64_t * v323; // 0x4017a0\n    int64_t v324; // 0x4017a0\n    char * v325; // 0x4017a0\n    int32_t v326; // 0x4017a0\n    int64_t v327; // 0x4017a0\n    if (v315 < 0xffffffffffffffff) {\n        uint64_t v328 = (int64_t)v206;\n        int64_t v329 = v315; // 0x401f7c\n        int64_t v330 = v312; // 0x402064\n        int64_t v331 = v314; // 0x4017a0\n        int64_t v332 = 0;\n        char * v333 = v310;\n        int32_t v334 = v313;\n        while (true) {\n            int64_t v335 = v330;\n            int64_t * v336 = (int64_t *)(v335 + 0x2008);\n            int64_t v337 = v329; // 0x401f7c\n            int64_t v338 = v331; // 0x4020bf\n            int64_t v339 = v332; // 0x4017a0\n            char * v340 = v333; // 0x4017a0\n            int32_t v341 = v334;\n            int64_t v342; // 0x4017a0\n            char * v343; // 0x4017a0\n            int64_t v344; // 0x401ff9\n            int64_t v345; // 0x4017a0\n            while (true) {\n                int32_t v346 = v341;\n                int64_t v347 = v339;\n                v342 = v338;\n                int64_t * v348 = (int64_t *)(v342 + 0x2000);\n                int64_t * v349 = (int64_t *)(v342 + 0x2008);\n                int64_t * v350 = (int64_t *)(v342 + 0x2010);\n                int64_t v351 = v346;\n                int64_t * v352 = (int64_t *)(v351 + 0x2000);\n                int64_t * v353 = (int64_t *)v342;\n                int64_t * v354 = (int64_t *)(v351 + 0x2008);\n                int64_t v355 = v337; // 0x401f7c\n                char * v356 = v340;\n                while (true) {\n                    // 0x401f92\n                    v343 = v356;\n                    int64_t v357 = v355;\n                    int64_t v358 = v357; // 0x401f7c\n                    int64_t v359 = v347; // 0x4017a0\n                    while (v206 != 0) {\n                        int64_t v360 = v358;\n                        *v348 = v360;\n                        int64_t v361 = v360 + v342; // 0x401fa5\n                        *v349 = 0;\n                        *v350 = 0;\n                        int64_t v362 = (int64_t)*(char *)&g36 & 0xffffffff; // 0x401fe1\n                        int64_t v363 = function_406f30(v342, v362, v360); // 0x401fe6\n                        int64_t v364 = v363; // 0x401ff2\n                        int64_t v365 = 0; // 0x401ff2\n                        if (v363 != 0) {\n                            int64_t v366 = v364;\n                            int64_t v367 = 1;\n                            *v349 = v367;\n                            int64_t v368 = function_406f30(v366 + 1, v362, v361 + -1 - v366); // 0x401fe6\n                            int64_t v369 = v367 + 1; // 0x401ff2\n                            v365 = v367;\n                            while (v368 != 0) {\n                                // 0x401fd0\n                                v366 = v368;\n                                v367 = v369;\n                                *v349 = v367;\n                                v368 = function_406f30(v366 + 1, v362, v361 + -1 - v366);\n                                v369 = v367 + 1;\n                                v365 = v367;\n                            }\n                        }\n                        // 0x401ff4\n                        v344 = v365 + v359;\n                        int64_t v370 = *v352; // 0x401ffe\n                        if (v370 + v360 >= 0x2000) {\n                            // break (via goto) -> 0x402011\n                            goto lab_0x402011;\n                        }\n                        // 0x402086\n                        memcpy((int64_t *)(v370 + v351), v353, (int32_t)v360);\n                        *v352 = *v352 + *v348;\n                        *v354 = *v354 + *v349;\n                        v358 = function_405310(v286, v342, 0x2000);\n                        v359 = v344;\n                        v323 = v353;\n                        v324 = v335;\n                        v326 = v346;\n                        v325 = v343;\n                        v327 = v344;\n                        v322 = v358;\n                        if (v358 >= 0xffffffffffffffff) {\n                            // break (via goto) -> 0x4020d1\n                            goto lab_0x4020d1_2;\n                        }\n                    }\n                    // 0x402071\n                    v356 = (char *)(v357 + (int64_t)v343);\n                    function_402a90(v342, v357);\n                    v355 = function_405310(v286, v342, 0x2000);\n                    v323 = v353;\n                    v324 = v335;\n                    v326 = v346;\n                    v325 = v356;\n                    v327 = v347;\n                    v322 = v355;\n                    if (v355 >= 0xffffffffffffffff) {\n                        // break (via goto) -> 0x4020d1\n                        goto lab_0x4020d1_2;\n                    }\n                }\n              lab_0x402011:\n                // 0x402011\n                *(int64_t *)(v351 + 0x2010) = v342;\n                v345 = v344 - *v336;\n                if (v345 > v328) {\n                    // break -> 0x402035\n                    break;\n                }\n                // 0x4020ba\n                v338 = function_405910(0x2018);\n                v341 = v342;\n                v337 = function_405310(v286, v338, 0x2000);\n                v339 = v344;\n                v340 = v343;\n                v316 = v335;\n                v317 = v341;\n                v318 = v338;\n                v319 = v343;\n                v320 = v344;\n                v321 = v337;\n                if (v337 >= 0xffffffffffffffff) {\n                    goto lab_0x401f70_2;\n                }\n            }\n            int64_t v371 = *(int64_t *)(v335 + 0x2000); // 0x402035\n            int64_t v372 = v345; // 0x402045\n            if (v371 != 0) {\n                // 0x402047\n                function_402a90(v335, v371);\n                v372 = v344 - *v336;\n            }\n            // 0x40204f\n            v333 = (char *)(v371 + (int64_t)v343);\n            v332 = v372;\n            v334 = v342;\n            v330 = *(int64_t *)(v335 + 0x2010);\n            v329 = function_405310(v286, v335, 0x2000);\n            v331 = v335;\n            v316 = v330;\n            v317 = v334;\n            v318 = v335;\n            v319 = v333;\n            v320 = v332;\n            v321 = v329;\n            if (v329 >= 0xffffffffffffffff) {\n                goto lab_0x401f70_2;\n            }\n        }\n    } else {\n      lab_0x401f70_2:\n        // 0x401f70\n        v323 = (int64_t *)v318;\n        v324 = v316;\n        v326 = v317;\n        v325 = v319;\n        v327 = v320;\n        v322 = v321;\n    }\n  lab_0x4020d1_2:;\n    char * v373 = v325;\n    int64_t v374 = v324;\n    free(v323);\n    int64_t v375; // 0x4017a0\n    int64_t v376; // 0x4017a0\n    int64_t v377; // 0x4017a0\n    char * v378; // 0x4017a0\n    char * v379; // 0x4017a0\n    if (v322 == -1) {\n        // 0x40274b\n        function_4050a0(4, v284);\n        error(0, *__errno_location(), dcgettext(NULL, \"error reading %s\", 5));\n        v378 = v373;\n        v375 = 0;\n        v377 = v374;\n        v379 = v373;\n        v376 = 0;\n        if (v374 == 0) {\n            goto lab_0x40220c;\n        } else {\n            goto lab_0x4021f8;\n        }\n    } else {\n        int64_t v380 = v327;\n        int64_t v381 = v326; // 0x4020f0\n        int64_t v382 = *(int64_t *)(v381 + 0x2000); // 0x4020f5\n        int64_t v383 = v380; // 0x4020ff\n        if (v382 != 0) {\n            // 0x402342\n            v383 = v380;\n            if (*(char *)(v381 - 1 + v382) != *(char *)&g36) {\n                int64_t * v384 = (int64_t *)(v381 + 0x2008); // 0x402353\n                *v384 = *v384 + 1;\n                v383 = v380 + 1;\n            }\n        }\n        int64_t v385 = v383;\n        uint64_t v386 = (int64_t)v206; // 0x402115\n        char * v387 = v373; // 0x40211a\n        int64_t v388 = v385; // 0x40211a\n        int64_t v389 = v374; // 0x40211a\n        int64_t v390 = v374; // 0x40211a\n        if (v385 - *(int64_t *)(v374 + 0x2008) > v386) {\n            int64_t v391 = v374;\n            int64_t v392 = *(int64_t *)(v391 + 0x2000); // 0x402130\n            if (v392 != 0) {\n                // 0x40213f\n                function_402a90(v391, v392);\n            }\n            int64_t v393 = v392 + (int64_t)v373; // 0x402137\n            int64_t v394 = v385 - *(int64_t *)(v391 + 0x2008); // 0x402147\n            int64_t v395 = *(int64_t *)(v391 + 0x2010); // 0x40214e\n            int64_t v396 = v394; // 0x402162\n            int64_t v397 = v393; // 0x402162\n            while (v394 - *(int64_t *)(v395 + 0x2008) > v386) {\n                // 0x402130\n                v391 = v395;\n                v392 = *(int64_t *)(v391 + 0x2000);\n                if (v392 != 0) {\n                    // 0x40213f\n                    function_402a90(v391, v392);\n                }\n                // 0x402147\n                v393 = v392 + v397;\n                v394 = v396 - *(int64_t *)(v391 + 0x2008);\n                v395 = *(int64_t *)(v391 + 0x2010);\n                v396 = v394;\n                v397 = v393;\n            }\n            // 0x402164\n            v387 = (char *)v393;\n            v388 = v394;\n            v389 = 0x100000000 * v374 >> 32;\n            v390 = v395;\n        }\n        uint64_t v398 = v388;\n        char * v399 = v387;\n        char * v400 = v399; // 0x402180\n        if (v398 > v386) {\n            int64_t v401 = v390;\n            int64_t v402 = *(int64_t *)(v401 + 0x2000) + v401; // 0x40219b\n            int64_t v403 = (int64_t)*(char *)&g36 & 0xffffffff; // 0x40219e\n            int64_t * v404 = (int64_t *)(v401 + 0x2008);\n            int64_t v405 = v398 - v386; // 0x4021a1\n            int64_t v406 = v401;\n            int64_t v407 = function_406f30(v406, v403, v402 - v406); // 0x4021b0\n            int64_t v408 = 0; // 0x4021b8\n            while (v407 != 0) {\n                int64_t v409 = v407 + 1; // 0x4021ba\n                *v404 = *v404 + 1;\n                v405--;\n                v408 = v409;\n                if (v405 == 0) {\n                    // break -> 0x4021cc\n                    break;\n                }\n                v406 = v409;\n                v407 = function_406f30(v406, v403, v402 - v406);\n                v408 = 0;\n            }\n            int64_t v410 = v408 - v401; // 0x4021cc\n            char * v411 = (char *)(v410 + (int64_t)v399); // 0x4021d4\n            v400 = v411;\n            if (v410 != 0) {\n                // 0x4021de\n                function_402a90(v401, v410);\n                v400 = v411;\n            }\n        }\n        // 0x4021e9\n        v378 = v400;\n        v375 = v308;\n        v377 = v389;\n        goto lab_0x4021f8;\n    }\n  lab_0x40248f:;\n    int64_t v412 = 8 * (int64_t)v282; // 0x402497\n    int64_t v413 = v412 + v251; // 0x402497\n    int64_t v414 = v251; // 0x4024ad\n    if (v412 != 0) {\n        int64_t v415 = v414 + 8; // 0x4024a1\n        free((int64_t *)*(int64_t *)v414);\n        v414 = v415;\n        while (v415 != v413) {\n            // 0x40249d\n            v415 = v414 + 8;\n            free((int64_t *)*(int64_t *)v414);\n            v414 = v415;\n        }\n    }\n    // 0x4024af\n    free((int64_t *)v251);\n    v42 = v204;\n    v44 = v202;\n    v46 = v200;\n    v48 = v198;\n    v50 = v196;\n    v52 = v194;\n    v54 = v192;\n    v56 = v190;\n    v58 = v188;\n    v60 = v186;\n    v62 = v184;\n    v64 = v182;\n    v66 = v181;\n    v68 = v281;\n    v70 = v283;\n    v72 = v179;\n    v74 = v177;\n    goto lab_0x4024b7;\n  lab_0x402411:\n    // 0x402411\n    v90 = v416;\n    v91 = v417;\n    v92 = v418;\n    v93 = v419;\n    v94 = v420;\n    v95 = v421;\n    v96 = v422;\n    v97 = v423;\n    v98 = v424;\n    v99 = v425;\n    v100 = v426;\n    v101 = v427;\n    v102 = v416;\n    v103 = v428;\n    v104 = v429;\n    goto lab_0x401c0d;\n  lab_0x40220c:;\n    int64_t v430 = v431 & 0xffffffff;\n    int64_t v432 = v376;\n    v90 = v308;\n    v91 = v306;\n    v92 = v304;\n    v93 = v302;\n    v94 = v300;\n    v95 = v298;\n    v96 = v296;\n    v97 = v294;\n    v98 = v292;\n    v99 = v290;\n    v100 = v288;\n    v101 = v286;\n    v102 = v432;\n    v103 = v430;\n    v104 = v284;\n    if (v311 == -1) {\n        goto lab_0x401c0d;\n    } else {\n        int64_t v433 = function_4029f0(v286, (int64_t)v379, 0, v284); // 0x402226\n        v90 = v308;\n        v91 = v306;\n        v92 = v304;\n        v93 = v302;\n        v94 = v300;\n        v95 = v298;\n        v96 = v296;\n        v97 = v294;\n        v98 = v292;\n        v99 = v290;\n        v100 = v288;\n        v101 = v286;\n        v102 = v432;\n        v103 = v430;\n        v104 = v284;\n        v434 = v308;\n        v435 = v306;\n        v436 = v304;\n        v437 = v302;\n        v438 = v300;\n        v439 = v298;\n        v440 = v296;\n        v441 = v294;\n        v442 = v292;\n        v443 = v290;\n        v444 = v288;\n        v445 = v286;\n        v446 = v430;\n        v447 = v284;\n        if (v433 >= 0) {\n            goto lab_0x401c0d;\n        } else {\n            goto lab_0x402234;\n        }\n    }\n  lab_0x4021f8:;\n    int64_t v448 = *(int64_t *)(v377 + 0x2010); // 0x4021f8\n    free((int64_t *)v377);\n    int64_t v449 = v448; // 0x40220a\n    v379 = v378;\n    v376 = v375;\n    while (v448 != 0) {\n        // 0x4021f8\n        v448 = *(int64_t *)(v449 + 0x2010);\n        free((int64_t *)v449);\n        v449 = v448;\n        v379 = v378;\n        v376 = v375;\n    }\n    goto lab_0x40220c;\n  lab_0x4018b7:;\n    int64_t v450 = function_402990(0, (int64_t)v451, v452, (int64_t)&g3, 0, v453); // 0x4018c0\n    v454 = 0;\n    v455 = v450;\n    v456 = v452 == 45;\n    goto lab_0x401838_4;\n  lab_0x4027fd:\n    // 0x4027fd\n    function_402a90(*(int64_t *)(8 * v556 + v251), v557 - v196);\n    v281 = v558;\n    v282 = v559;\n    v283 = v560 % 256;\n    goto lab_0x40248f;\n  lab_0x401a5e:;\n    int32_t v561 = 0x1000000 * (int32_t)v476 >> 24; // 0x401a4d\n    char v562 = v479; // 0x401a5e\n    *v33 = v562;\n    v28 = v561;\n    v27 = v481;\n    v22 = v480;\n    v15 = v478;\n    v495 = v477;\n    if (v562 == 0) {\n        goto lab_0x401a6a;\n    } else {\n        // 0x401a66\n        *(char *)(v23 + 2) = 0;\n        v28 = v561;\n        v27 = v481;\n        v22 = v480;\n        v15 = v478;\n        v495 = v477;\n        goto lab_0x401a6a;\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4028b0",
            "funcEndAddr": "4028db",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4028b0\n    int64_t v1; // 0x4028b0\n    __libc_start_main(0x4017a0, (int32_t)a4, (char **)&v1, (void (*)())0x407790, (void (*)())0x4077f0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4028db",
            "funcStartAddr": "4028db",
            "funcEndAddr": "4028fa",
            "decompiledFuncCode": "int64_t function_4028db(void) {\n    // 0x4028db\n    return &g29;\n}\n"
        },
        {
            "funcName": "function_4028fa",
            "funcStartAddr": "4028fa",
            "funcEndAddr": "402931",
            "decompiledFuncCode": "int64_t function_4028fa(void) {\n    // 0x4028fa\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402931",
            "funcStartAddr": "402931",
            "funcEndAddr": "402988",
            "decompiledFuncCode": "int64_t function_402931(void) {\n    // 0x402931\n    if (g33 != 0) {\n        // 0x402987\n        int64_t result; // 0x402931\n        return result;\n    }\n    int64_t v1 = g34; // 0x402964\n    int64_t result2; // 0x402976\n    if (g34 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x402976\n        result2 = function_4028db();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x402966\n        v1++;\n    }\n    // 0x40295a\n    g34 = v1;\n    // 0x402976\n    result2 = function_4028db();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402988",
            "funcStartAddr": "402988",
            "funcEndAddr": "40298d",
            "decompiledFuncCode": "int64_t function_402988(void) {\n    // 0x402988\n    return function_4028fa();\n}\n"
        },
        {
            "funcName": "function_402990",
            "funcStartAddr": "402990",
            "funcEndAddr": "4029e1",
            "decompiledFuncCode": "int64_t function_402990(int32_t a1, int64_t a2, char a3, int64_t a4, int64_t a5, int64_t a6) {\n    char * v1; // 0x402990\n    if ((char)a1 == 0) {\n        // 0x4029d0\n        v1 = dcgettext(NULL, \"invalid number of bytes\", 5);\n    } else {\n        // 0x40299e\n        v1 = dcgettext(NULL, \"invalid number of lines\", 5);\n    }\n    // 0x4029ad\n    return function_405c70(a2, 0, -1, \"bkKmMGTPEZY0\", (int64_t)v1, 0);\n}\n"
        },
        {
            "funcName": "function_4029f0",
            "funcStartAddr": "4029f0",
            "funcEndAddr": "402a86",
            "decompiledFuncCode": "int64_t function_4029f0(int32_t fd, int64_t offset, int32_t whence, int64_t a4) {\n    int32_t v1 = lseek(fd, (int32_t)offset, whence); // 0x402a02\n    int64_t result = v1; // 0x402a02\n    if (v1 >= 0) {\n        // 0x402a0f\n        return result;\n    }\n    // 0x402a20\n    int64_t v2; // bp-72, 0x4029f0\n    function_4035e0(offset, &v2);\n    function_405170(0, 3, a4);\n    char * v3 = whence != 0 ? \"%s: cannot seek to relative offset %s\" : \"%s: cannot seek to offset %s\"; // 0x402a57\n    error(0, *__errno_location(), dcgettext(NULL, v3, 5));\n    return result;\n}\n"
        },
        {
            "funcName": "function_402a90",
            "funcStartAddr": "402a90",
            "funcEndAddr": "402b10",
            "decompiledFuncCode": "int64_t function_402a90(int64_t data, uint64_t n) {\n    uint64_t result = (int64_t)fwrite_unlocked((int64_t *)data, 1, (int32_t)n, g30); // 0x402aa8\n    if (result >= n) {\n        // 0x402ab2\n        return result;\n    }\n    // 0x402ab9\n    clearerr_unlocked(g30);\n    function_4050a0(4, (int64_t)\"standard output\");\n    error(1, *__errno_location(), dcgettext(NULL, \"error writing %s\", 5));\n    return &g56;\n}\n"
        },
        {
            "funcName": "function_402b10",
            "funcStartAddr": "402b10",
            "funcEndAddr": "402bb4",
            "decompiledFuncCode": "int64_t function_402b10(int32_t a1, int64_t a2) {\n    // 0x402b10\n    if (a2 == 0) {\n        // 0x402b78\n        return 0;\n    }\n    // 0x402b5a\n    int64_t v1; // bp-8216, 0x402b10\n    int64_t v2 = &v1; // 0x402b64\n    uint64_t v3 = a2;\n    int64_t v4 = function_405310(a1, v2, v3 < 0x2000 ? v3 : 0x2000); // 0x402b6d\n    int64_t result = 1; // 0x402b76\n    while (v4 != -1) {\n        int64_t v5 = v3 - v4; // 0x402b38\n        result = 2;\n        if (v4 == 0 == (v5 != 0)) {\n            // break -> 0x402b78\n            break;\n        }\n        if (v4 != 0) {\n            // 0x402b4a\n            function_402a90(v2, v4);\n        }\n        // 0x402b55\n        result = 0;\n        if (v5 == 0) {\n            // break -> 0x402b78\n            break;\n        }\n        v3 = v5;\n        v4 = function_405310(a1, v2, v3 < 0x2000 ? v3 : 0x2000);\n        result = 1;\n    }\n    // 0x402b78\n    return result;\n}\n"
        },
        {
            "funcName": "function_402bc0",
            "funcStartAddr": "402bc0",
            "funcEndAddr": "402d21",
            "decompiledFuncCode": "int64_t function_402bc0(int64_t a1, int32_t fd, int64_t a3) {\n    // 0x402bc0\n    if (a3 == 0) {\n        // 0x402d08\n        return 1;\n    }\n    // 0x402bc9\n    int64_t v1; // bp-8232, 0x402bc0\n    int64_t v2 = &v1;\n    int64_t v3 = a3; // 0x402bdf\n    while (true) {\n        int64_t v4 = function_405310(fd, v2, 0x2000); // 0x402bf0\n        switch (v4) {\n            case -1: {\n                // 0x402cbe\n                function_4050a0(4, a1);\n                error(0, *__errno_location(), dcgettext(NULL, \"error reading %s\", 5));\n                return (int32_t)&g56 ^ (int32_t)&g56;\n            }\n            case 0: {\n                // 0x402d08\n                return 1;\n            }\n        }\n        char v5 = *(char *)&g36; // 0x402c08\n        int64_t v6 = v3;\n        int64_t v7 = 1; // 0x402c1d\n        v3 = v6;\n        int64_t v8; // bp-8376, 0x402bc0\n        int64_t offset; // 0x402c3b\n        int32_t v9; // 0x402bc0\n        if (*(char *)((int64_t)&v8 + 143 + v7) == v5) {\n            // 0x402c2a\n            v3 = v6 - 1;\n            if (v3 == 0) {\n                // 0x402c30\n                offset = v7 - v4;\n                if (lseek(fd, (int32_t)offset, SEEK_CUR) >= 0) {\n                    // 0x402c4b\n                    function_402a90(v2, v7);\n                    return 1;\n                }\n                // 0x402c85\n                if (__fxstat(1, fd, (struct stat *)&v8) != 0) {\n                    // 0x402ca9\n                    function_4029f0(fd, offset, 1, a1);\n                    // 0x402c4b\n                    function_402a90(v2, v7);\n                    return 1;\n                }\n                if ((v9 & 0xf000) != 0x8000) {\n                    // 0x402c4b\n                    function_402a90(v2, v7);\n                    return 1;\n                }\n                // 0x402ca9\n                function_4029f0(fd, offset, 1, a1);\n                // 0x402c4b\n                function_402a90(v2, v7);\n                return 1;\n            }\n        }\n        int64_t v10 = v7; // 0x402c1b\n        while (v7 != v4) {\n            // 0x402c1d\n            v6 = v3;\n            v7 = v10 + 1;\n            v3 = v6;\n            if (*(char *)((int64_t)&v8 + 143 + v7) == v5) {\n                // 0x402c2a\n                v3 = v6 - 1;\n                if (v3 == 0) {\n                    // 0x402c30\n                    offset = v7 - v4;\n                    if (lseek(fd, (int32_t)offset, SEEK_CUR) >= 0) {\n                        // 0x402c4b\n                        function_402a90(v2, v7);\n                        return 1;\n                    }\n                    // 0x402c85\n                    if (__fxstat(1, fd, (struct stat *)&v8) != 0) {\n                        // 0x402ca9\n                        function_4029f0(fd, offset, 1, a1);\n                        // 0x402c4b\n                        function_402a90(v2, v7);\n                        return 1;\n                    }\n                    if ((v9 & 0xf000) != 0x8000) {\n                        // 0x402c4b\n                        function_402a90(v2, v7);\n                        return 1;\n                    }\n                    // 0x402ca9\n                    function_4029f0(fd, offset, 1, a1);\n                    // 0x402c4b\n                    function_402a90(v2, v7);\n                    return 1;\n                }\n            }\n            // 0x402c18\n            v10 = v7;\n        }\n        // 0x402c70\n        function_402a90(v2, v4);\n    }\n    // 0x402cbe\n    function_4050a0(4, a1);\n    error(0, *__errno_location(), dcgettext(NULL, \"error reading %s\", 5));\n    return (int32_t)&g56 ^ (int32_t)&g56;\n}\n"
        },
        {
            "funcName": "function_402d30",
            "funcStartAddr": "402d30",
            "funcEndAddr": "402dfb",
            "decompiledFuncCode": "int64_t function_402d30(int64_t a1, int32_t a2, int64_t a3) {\n    if (a3 == 0) {\n        // 0x402de0\n        return 1;\n    }\n    // 0x402d75\n    int64_t v1; // bp-8232, 0x402d30\n    int64_t v2 = &v1; // 0x402d78\n    uint64_t v3 = 0x2000;\n    uint64_t v4 = a3;\n    int64_t v5 = v3 > v4 ? v4 : v3; // 0x402d7e\n    int64_t v6 = function_405310(a2, v2, v5); // 0x402d85\n    while (v6 != -1) {\n        if (v6 == 0) {\n            // 0x402de0\n            return 1;\n        }\n        // 0x402d65\n        function_402a90(v2, v6);\n        int64_t v7 = v4 - v6; // 0x402d70\n        if (v7 == 0) {\n            // 0x402de0\n            return 1;\n        }\n        v3 = v5;\n        v4 = v7;\n        v5 = v3 > v4 ? v4 : v3;\n        v6 = function_405310(a2, v2, v5);\n    }\n    // 0x402d93\n    function_4050a0(4, a1);\n    error(0, *__errno_location(), dcgettext(NULL, \"error reading %s\", 5));\n    return (int32_t)&g56 ^ (int32_t)&g56;\n}\n"
        },
        {
            "funcName": "function_402e00",
            "funcStartAddr": "402e00",
            "funcEndAddr": "402e78",
            "decompiledFuncCode": "int64_t function_402e00(int64_t a1, int64_t a2) {\n    int32_t v1 = a1; // 0x402e06\n    int64_t v2; // 0x402e00\n    if (v1 != 1) {\n        if (v1 != 2) {\n            // 0x402e73\n            abort();\n            // UNREACHABLE\n        }\n        // 0x402e55\n        function_405170(0, 3, a2);\n        v2 = (int64_t)\"%s: file has shrunk too much\";\n    } else {\n        // 0x402e0b\n        function_4050a0(4, a2);\n        v2 = (int64_t)\"error reading %s\";\n    }\n    // 0x402e22\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v2, 5));\n    return &g56;\n}\n"
        },
        {
            "funcName": "function_402e80",
            "funcStartAddr": "402e80",
            "funcEndAddr": "4030c1",
            "decompiledFuncCode": "int64_t function_402e80(int64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 - a4; // 0x402e99\n    uint64_t v2 = (v1 >> 63) / 0x8000000000000; // 0x402eaa\n    int64_t v3 = a1; // bp-8264, 0x402eae\n    int64_t v4 = (v2 + v1) % 0x2000 - v2; // 0x402ec6\n    int64_t v5 = v4 != 0 ? v4 : 0x2000; // 0x402ec9\n    int64_t v6 = a5 - v5; // 0x402ecf\n    if (function_4029f0(a2, v6, 0, a1) < 0) {\n        // 0x403002\n        return 0;\n    }\n    // 0x402ee6\n    int64_t v7; // bp-8248, 0x402e80\n    int64_t v8 = &v7; // 0x402ee6\n    int64_t v9 = function_405310(a2, v8, v5); // 0x402ef4\n    if (v9 == -1) {\n      lab_0x40306d:\n        // 0x40306d\n        function_4050a0(4, v3);\n        error(0, *__errno_location(), dcgettext(NULL, \"error reading %s\", 5));\n        // 0x403002\n        return (int32_t)&g56 ^ (int32_t)&g56;\n    }\n    int64_t v10 = a3; // 0x402f09\n    if (a3 != 0 && v9 != 0) {\n        char v11 = *(char *)((int64_t)&v3 + 15 + v9); // 0x402f1f\n        v10 = a3 - (int64_t)(v11 != *(char *)&g36);\n    }\n    int64_t v12 = v6;\n    int64_t v13 = v10; // 0x402f33\n    int64_t v14; // 0x402e80\n    int64_t v15; // 0x402e80\n    int64_t v16; // 0x402e80\n    int64_t v17; // 0x402e80\n    int64_t v18; // 0x402e80\n    int64_t v19; // 0x402e80\n    int32_t v20; // 0x402e80\n    int64_t v21; // 0x402f48\n    int64_t * v22; // 0x402f6f\n    int64_t v23; // 0x402f7d\n    if (v9 != 0) {\n        // 0x402f39\n        v20 = (int32_t)*(char *)&g36;\n        if (a3 == 0) {\n            // 0x402f48\n            v21 = v9 - 1;\n            v15 = v21;\n            v18 = v21;\n            if (v10 == 0) {\n                goto lab_0x402f8c_2;\n            }\n        } else {\n            // 0x402f66\n            v22 = memrchr(&v7, v20, (int32_t)v9);\n            if (v22 == NULL) {\n                // break -> 0x403020\n                break;\n            }\n            // 0x402f7d\n            v23 = (int64_t)v22 - v8;\n            v15 = v23;\n            v18 = v23;\n            if (v10 == 0) {\n                goto lab_0x402f8c_2;\n            }\n        }\n        // 0x402f55\n        v16 = v15;\n        v19 = v10 - 1;\n        v13 = v19;\n        while (v16 != 0) {\n            // 0x402f61\n            v14 = v19;\n            v17 = v16;\n            if (a3 == 0) {\n                // 0x402f48\n                v21 = v17 - 1;\n                v15 = v21;\n                v18 = v21;\n                if (v14 == 0) {\n                    goto lab_0x402f8c_2;\n                }\n            } else {\n                // 0x402f66\n                v22 = memrchr(&v7, v20, (int32_t)v17);\n                v13 = v14;\n                if (v22 == NULL) {\n                    // break -> 0x403020\n                    break;\n                }\n                // 0x402f7d\n                v23 = (int64_t)v22 - v8;\n                v15 = v23;\n                v18 = v23;\n                if (v14 == 0) {\n                    goto lab_0x402f8c_2;\n                }\n            }\n            // 0x402f55\n            v16 = v15;\n            v19 = v14 - 1;\n            v13 = v19;\n        }\n    }\n    int64_t result = 1; // 0x403025\n    while (v12 != a4) {\n        int64_t v24 = v12 - 0x2000; // 0x403027\n        result = 0;\n        if (function_4029f0(a2, v24, 0, v3) < 0) {\n            // break -> 0x403002\n            break;\n        }\n        int64_t v25 = function_405310(a2, v8, 0x2000); // 0x40304f\n        if (v25 == -1) {\n            goto lab_0x40306d;\n        }\n        // 0x40305d\n        result = 1;\n        if (v25 == 0) {\n            // break -> 0x403002\n            break;\n        }\n        int64_t v26 = v13;\n        v12 = v24;\n        int64_t v27 = v25;\n        v13 = v26;\n        if (v27 != 0) {\n            // 0x402f39\n            v20 = (int32_t)*(char *)&g36;\n            v14 = v26;\n            v17 = v27;\n            if (a3 == 0) {\n                // 0x402f48\n                v21 = v17 - 1;\n                v15 = v21;\n                v18 = v21;\n                if (v14 == 0) {\n                    goto lab_0x402f8c_2;\n                }\n            } else {\n                // 0x402f66\n                v22 = memrchr(&v7, v20, (int32_t)v17);\n                if (v22 == NULL) {\n                    // break -> 0x403020\n                    break;\n                }\n                // 0x402f7d\n                v23 = (int64_t)v22 - v8;\n                v15 = v23;\n                v18 = v23;\n                if (v14 == 0) {\n                    goto lab_0x402f8c_2;\n                }\n            }\n            // 0x402f55\n            v16 = v15;\n            v19 = v14 - 1;\n            v13 = v19;\n            while (v16 != 0) {\n                // 0x402f61\n                v14 = v19;\n                v17 = v16;\n                if (a3 == 0) {\n                    // 0x402f48\n                    v21 = v17 - 1;\n                    v15 = v21;\n                    v18 = v21;\n                    if (v14 == 0) {\n                        goto lab_0x402f8c_2;\n                    }\n                } else {\n                    // 0x402f66\n                    v22 = memrchr(&v7, v20, (int32_t)v17);\n                    v13 = v14;\n                    if (v22 == NULL) {\n                        // break -> 0x403020\n                        break;\n                    }\n                    // 0x402f7d\n                    v23 = (int64_t)v22 - v8;\n                    v15 = v23;\n                    v18 = v23;\n                    if (v14 == 0) {\n                        goto lab_0x402f8c_2;\n                    }\n                }\n                // 0x402f55\n                v16 = v15;\n                v19 = v14 - 1;\n                v13 = v19;\n            }\n        }\n        // 0x403020\n        result = 1;\n    }\n    // 0x403002\n    return result;\n  lab_0x402f8c_2:\n    // 0x402f8c\n    if (v12 > a4) {\n        // 0x402f96\n        result = 0;\n        if (function_4029f0(a2, a4, 0, v3) < 0) {\n            return result;\n        } else {\n            int64_t v28 = function_402b10(a2, v12 - a4); // 0x402fba\n            if ((int32_t)v28 != 0) {\n                // 0x4030af\n                function_402e00(v28 & 0xffffffff, v3);\n                result = 0;\n                return result;\n            } else {\n                goto lab_0x402fcc;\n            }\n        }\n    } else {\n        goto lab_0x402fcc;\n    }\n  lab_0x402fcc:;\n    int64_t v29 = v18 + 1; // 0x402fcf\n    if (v29 == 0) {\n        goto lab_0x402fe0;\n    } else {\n        // 0x402fd5\n        function_402a90(v8, v29);\n        goto lab_0x402fe0;\n    }\n  lab_0x402fe0:\n    // 0x402fe0\n    result = function_4029f0(a2, v29 + v12, 0, v3) >> 63 ^ 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4030d0",
            "funcStartAddr": "4030d0",
            "funcEndAddr": "403495",
            "decompiledFuncCode": "int64_t function_4030d0(int64_t a1) {\n    int32_t status = a1; // 0x4030e6\n    if (status != 0) {\n        // 0x4030ea\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40310f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x403116\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"Print the first %d lines of each FILE to standard output.\\nWith more than one FILE, precede each with a header giving the file name.\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g30);\n    __printf_chk(1, dcgettext(NULL, \"  -c, --bytes=[-]NUM       print the first NUM bytes of each file;\\n                             with the leading '-', print all but the last\\n                             NUM bytes of each file\\n  -n, --lines=[-]NUM       print the first NUM lines instead of the first %d;\\n                             with the leading '-', print all but the last\\n                             NUM lines of each file\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"  -q, --quiet, --silent    never print headers giving file names\\n  -v, --verbose            always print headers giving file names\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"  -z, --zero-terminated    line delimiter is NUL, not newline\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"\\nNUM may have a multiplier suffix:\\nb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\\nGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\\n\", 5), g30);\n    int64_t v1 = &g1; // bp-136, 0x403273\n    bool v2; // 0x4030d0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4032f8\n    int64_t v6 = *(int64_t *)v5; // 0x4032fc\n    int64_t v7 = 5; // 0x403302\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"head\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x40330e\n        char v11 = *(char *)v9; // 0x40330e\n        char v12 = v11; // 0x40330e\n        bool v13 = false; // 0x40330e\n        while (v10 == v11) {\n            // 0x403304\n            v7--;\n            int64_t v14 = v9 + v3; // 0x40330e\n            int64_t v15 = v8 + v3; // 0x40330e\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x40331a\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x40331a\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x40342c;\n        } else {\n            // 0x403416\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40346b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40337c;\n            } else {\n                goto lab_0x40342c;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40337c;\n        } else {\n            // 0x403362\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40346b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40337c;\n            } else {\n                goto lab_0x40337c;\n            }\n        }\n    }\n  lab_0x40342c:\n    // 0x40342c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4033bc\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40310f\n    exit(status);\n    // UNREACHABLE\n  lab_0x40337c:\n    // 0x40337c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4033bc\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40310f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4034a0",
            "funcStartAddr": "4034a0",
            "funcEndAddr": "4034a8",
            "decompiledFuncCode": "int64_t function_4034a0(int64_t a1) {\n    // 0x4034a0\n    g40 = a1;\n    int64_t result; // 0x4034a0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4034b0",
            "funcStartAddr": "4034b0",
            "funcEndAddr": "4034b8",
            "decompiledFuncCode": "int64_t function_4034b0(int64_t a1) {\n    // 0x4034b0\n    g39 = a1;\n    int64_t result; // 0x4034b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4034c0",
            "funcStartAddr": "4034c0",
            "funcEndAddr": "40355e",
            "decompiledFuncCode": "int64_t function_4034c0(void) {\n    // 0x4034c0\n    int32_t * err_num; // 0x4034d6\n    if ((int32_t)function_407040((int64_t)g30) == 0) {\n        goto lab_0x4034ec;\n    } else {\n        // 0x4034d6\n        err_num = __errno_location();\n        if (g39 == 0) {\n            goto lab_0x403503;\n        } else {\n            // 0x4034e7\n            if (*err_num != 32) {\n                goto lab_0x403503;\n            } else {\n                goto lab_0x4034ec;\n            }\n        }\n    }\n  lab_0x4034ec:;\n    int64_t result = function_407040((int64_t)g32); // 0x4034f3\n    if ((int32_t)result == 0) {\n        // 0x4034fc\n        return result;\n    }\n    // 0x40353e\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x403503:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40350f\n    if (g40 == 0) {\n        // 0x403549\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x403523\n        error(0, *err_num, \"%s: %s\", (char *)function_405140((int64_t)g40), v1);\n    }\n    // 0x40353e\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403560",
            "funcStartAddr": "403560",
            "funcEndAddr": "4035d6",
            "decompiledFuncCode": "int64_t function_403560(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a3; // 0x40356d\n    int64_t v2 = a2; // 0x40356d\n    if (a3 == 0) {\n        // 0x4035a4\n        return 0;\n    }\n    int64_t result = 0;\n    int64_t v3 = function_405310(a1, v2, v1); // 0x403599\n    int64_t result2 = result; // 0x4035a2\n    while (v3 != -1) {\n        if (v3 == 0) {\n            // 0x4035b8\n            *__errno_location() = 0;\n            return result;\n        }\n        int64_t v4 = v3 + result; // 0x403585\n        v1 -= v3;\n        v2 += v3;\n        result2 = v4;\n        if (v1 == 0) {\n            // break -> 0x4035a4\n            break;\n        }\n        result = v4;\n        v3 = function_405310(a1, v2, v1);\n        result2 = result;\n    }\n    // 0x4035a4\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4035e0",
            "funcStartAddr": "4035e0",
            "funcEndAddr": "40367c",
            "decompiledFuncCode": "int64_t function_4035e0(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x4035e0\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x403605\n    if (a1 >= 0) {\n        result--;\n        *(char *)result = (char)a1 + 48;\n        // 0x403636\n        return result;\n    }\n    int64_t v2 = v1;\n    int64_t v3 = a1 / 0x8000000000000000; // 0x403658\n    int64_t v4 = v2 - 1; // 0x403668\n    *(char *)v4 = 48 - (char)a1 + 10 * (char)v3;\n    while (v3 != 0) {\n        uint64_t v5 = v3;\n        v2 = v4;\n        v3 = v5 / 0x8000000000000000;\n        v4 = v2 - 1;\n        *(char *)v4 = 48 - (char)v5 + 10 * (char)v3;\n    }\n    int64_t result2 = v2 - 2; // 0x403670\n    *(char *)result2 = 45;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403680",
            "funcStartAddr": "403680",
            "funcEndAddr": "4036c8",
            "decompiledFuncCode": "int64_t function_403680(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x403680\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x403692\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x40369b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x4036c4\n    return result;\n}\n"
        },
        {
            "funcName": "function_4036d0",
            "funcStartAddr": "4036d0",
            "funcEndAddr": "403769",
            "decompiledFuncCode": "int64_t function_4036d0(int64_t str) {\n    // 0x4036d0\n    if (str == 0) {\n        // 0x403749\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4036de\n    int64_t result = (int64_t)found_char_pos; // 0x4036de\n    if (found_char_pos == NULL) {\n        // 0x403739\n        g41 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4036e8\n    if (v1 - str < 7) {\n        // 0x403739\n        g41 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x4036f8\n    bool v2; // 0x4036d0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4036d0\n    int64_t v5 = result - 6; // 0x4036d0\n    int64_t v6 = 7; // 0x403706\n    unsigned char v7 = *(char *)v5; // 0x403706\n    char v8 = *(char *)v4; // 0x403706\n    char v9 = v8; // 0x403706\n    bool v10 = false; // 0x403706\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403710\n    int64_t v13 = v1; // 0x403710\n    int64_t v14 = 3; // 0x403710\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403739\n        g41 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403722\n    char v16 = *(char *)v12; // 0x403722\n    char v17 = v16; // 0x403722\n    bool v18 = false; // 0x403722\n    while (v15 == v16) {\n        // 0x403712\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40372c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40372e\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x403739\n    g41 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403770",
            "funcStartAddr": "403770",
            "funcEndAddr": "403862",
            "decompiledFuncCode": "int64_t function_403770(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x403784\n    int64_t result = (int64_t)v1; // 0x403784\n    if (result != a1) {\n        // 0x403791\n        return result;\n    }\n    int64_t v2 = function_407100(); // 0x4037a0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403856\n    if (v3 == 85) {\n        // 0x4037b0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403848\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x4037de\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x4037eb\n        // 0x403791\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403848\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x40382d\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x40383a\n    // 0x403791\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403870",
            "funcStartAddr": "403870",
            "funcEndAddr": "4038c7",
            "decompiledFuncCode": "int64_t function_403870(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x403870\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4038b8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4038c7",
            "funcStartAddr": "4038c7",
            "funcEndAddr": "404a91",
            "decompiledFuncCode": "int64_t function_4038c7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403911\n    int64_t v3 = 0; // 0x403911\n    int64_t v4; // 0x4038c7\n    int64_t v5; // 0x4038c7\n    int64_t v6; // 0x4038c7\n    int64_t v7; // 0x4038c7\n    int64_t v8; // 0x4038c7\n    int64_t v9; // 0x4038c7\n    int64_t v10; // 0x4038c7\n    int64_t v11; // 0x4038c7\n    int64_t v12; // 0x4038c7\n    int64_t v13; // 0x4038c7\n    int64_t v14; // 0x4038c7\n    int64_t v15; // 0x4038c7\n    int64_t v16; // 0x4038c7\n    int64_t v17; // 0x4038c7\n    int64_t v18; // 0x4038c7\n    int64_t result; // 0x4038c7\n    int64_t v19; // 0x4038c7\n    int32_t wc; // bp+132, 0x4038c7\n    int64_t ps; // bp+136, 0x4038c7\n    char v20; // 0x403e80\n    int64_t v21; // 0x403e80\n    int64_t v22; // 0x404228\n    int64_t v23; // 0x4038c7\n    int64_t v24; // 0x404247\n    int32_t v25; // 0x4038c7\n    while (true) {\n      lab_0x403918_2:\n        // 0x403918\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4038c7\n        int64_t v27; // 0x40394c\n        while (true) {\n          lab_0x403918:\n            // 0x403918\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403923\n            if (v15 == -1) {\n                // 0x403925\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403933\n            if (v28) {\n                // break (via goto) -> 0x404098\n                goto lab_0x404098;\n            }\n            // 0x40393c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g55 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x403f2b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x403a71;\n                    }\n                    // 0x40434d\n                    v26 = v5 + 1;\n                    goto lab_0x403918;\n                }\n                case 7: {\n                    goto lab_0x403a71;\n                }\n                case 8: {\n                    goto lab_0x403a71;\n                }\n                case 9: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x403a71;\n                }\n                case 12: {\n                    goto lab_0x403a71;\n                }\n                case 13: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x403a3d;\n                }\n                case 36: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x403a71;\n                }\n                case 38: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x403a71;\n                }\n                case 44: {\n                    goto lab_0x403a71;\n                }\n                case 45: {\n                    goto lab_0x403a71;\n                }\n                case 46: {\n                    goto lab_0x403a71;\n                }\n                case 47: {\n                    goto lab_0x403a71;\n                }\n                case 48: {\n                    goto lab_0x403a71;\n                }\n                case 49: {\n                    goto lab_0x403a71;\n                }\n                case 50: {\n                    goto lab_0x403a71;\n                }\n                case 51: {\n                    goto lab_0x403a71;\n                }\n                case 52: {\n                    goto lab_0x403a71;\n                }\n                case 53: {\n                    goto lab_0x403a71;\n                }\n                case 54: {\n                    goto lab_0x403a71;\n                }\n                case 55: {\n                    goto lab_0x403a71;\n                }\n                case 56: {\n                    goto lab_0x403a71;\n                }\n                case 57: {\n                    goto lab_0x403a71;\n                }\n                case 58: {\n                    goto lab_0x403a71;\n                }\n                case 59: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x403a71;\n                }\n                case 66: {\n                    goto lab_0x403a71;\n                }\n                case 67: {\n                    goto lab_0x403a71;\n                }\n                case 68: {\n                    goto lab_0x403a71;\n                }\n                case 69: {\n                    goto lab_0x403a71;\n                }\n                case 70: {\n                    goto lab_0x403a71;\n                }\n                case 71: {\n                    goto lab_0x403a71;\n                }\n                case 72: {\n                    goto lab_0x403a71;\n                }\n                case 73: {\n                    goto lab_0x403a71;\n                }\n                case 74: {\n                    goto lab_0x403a71;\n                }\n                case 75: {\n                    goto lab_0x403a71;\n                }\n                case 76: {\n                    goto lab_0x403a71;\n                }\n                case 77: {\n                    goto lab_0x403a71;\n                }\n                case 78: {\n                    goto lab_0x403a71;\n                }\n                case 79: {\n                    goto lab_0x403a71;\n                }\n                case 80: {\n                    goto lab_0x403a71;\n                }\n                case 81: {\n                    goto lab_0x403a71;\n                }\n                case 82: {\n                    goto lab_0x403a71;\n                }\n                case 83: {\n                    goto lab_0x403a71;\n                }\n                case 84: {\n                    goto lab_0x403a71;\n                }\n                case 85: {\n                    goto lab_0x403a71;\n                }\n                case 86: {\n                    goto lab_0x403a71;\n                }\n                case 87: {\n                    goto lab_0x403a71;\n                }\n                case 88: {\n                    goto lab_0x403a71;\n                }\n                case 89: {\n                    goto lab_0x403a71;\n                }\n                case 90: {\n                    goto lab_0x403a71;\n                }\n                case 91: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x403a71;\n                }\n                case 94: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x403a71;\n                }\n                case 96: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x403a71;\n                }\n                case 98: {\n                    goto lab_0x403a71;\n                }\n                case 99: {\n                    goto lab_0x403a71;\n                }\n                case 100: {\n                    goto lab_0x403a71;\n                }\n                case 101: {\n                    goto lab_0x403a71;\n                }\n                case 102: {\n                    goto lab_0x403a71;\n                }\n                case 103: {\n                    goto lab_0x403a71;\n                }\n                case 104: {\n                    goto lab_0x403a71;\n                }\n                case 105: {\n                    goto lab_0x403a71;\n                }\n                case 106: {\n                    goto lab_0x403a71;\n                }\n                case 107: {\n                    goto lab_0x403a71;\n                }\n                case 108: {\n                    goto lab_0x403a71;\n                }\n                case 109: {\n                    goto lab_0x403a71;\n                }\n                case 110: {\n                    goto lab_0x403a71;\n                }\n                case 111: {\n                    goto lab_0x403a71;\n                }\n                case 112: {\n                    goto lab_0x403a71;\n                }\n                case 113: {\n                    goto lab_0x403a71;\n                }\n                case 114: {\n                    goto lab_0x403a71;\n                }\n                case 115: {\n                    goto lab_0x403a71;\n                }\n                case 116: {\n                    goto lab_0x403a71;\n                }\n                case 117: {\n                    goto lab_0x403a71;\n                }\n                case 118: {\n                    goto lab_0x403a71;\n                }\n                case 119: {\n                    goto lab_0x403a71;\n                }\n                case 120: {\n                    goto lab_0x403a71;\n                }\n                case 121: {\n                    goto lab_0x403a71;\n                }\n                case 122: {\n                    goto lab_0x403a71;\n                }\n                case 123: {\n                    goto lab_0x403a15;\n                }\n                case 124: {\n                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403a15;\n                }\n                case 126: {\n                    goto lab_0x403a3d;\n                }\n                default: {\n                    goto lab_0x403e15;\n                }\n            }\n        }\n      lab_0x403e15:\n        if (v23 != 1) {\n            // 0x404180\n            ps = 0;\n            int64_t len = v15; // 0x404190\n            if (v15 == -1) {\n                // 0x404192\n                len = strlen((char *)str);\n            }\n            // 0x4041be\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40421f:\n                // 0x40421f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x404224\n                int64_t v30 = v29 + str;\n                v24 = function_406eb0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40479a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40479a_2;\n                    }\n                    case -2: {\n                        // 0x40487d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4048b7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4048ba\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4048c7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4048c0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40479a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40479a_2;\n                    }\n                    case 1: {\n                        goto lab_0x4041f0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40429c\n                        char v34 = *(char *)v33; // 0x4042ad\n                        unsigned char v35; // 0x4038c7\n                        if (v34 < 125) {\n                            // 0x4042b8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4042cf\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4042a0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4042ad\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4042b8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4042cf\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4042a0\n                            v33++;\n                        }\n                        goto lab_0x4041f0;\n                    }\n                }\n            }\n            goto lab_0x40479a_2;\n        } else {\n            // 0x403e64\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x403a71;\n        }\n    }\n  lab_0x404098:\n    // 0x404098\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40499a\n        if (v8 > result) {\n            // 0x4049a3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403cc7\n        return result;\n    }\n    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403a71:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x403a80\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x403c8a_2;\n        }\n    }\n    int64_t v39 = result; // 0x403b81\n    char v40 = v20; // 0x403b81\n    int64_t v41 = v38; // 0x403b81\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x403b81\n    int64_t v43 = v36; // 0x403b81\n    goto lab_0x403afd;\n  lab_0x403c8a_2:\n    // 0x403cc7\n    return function_403870(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40479a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x403a71;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40436e\n        int64_t v50 = v5 + 1; // 0x404451\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x404458\n        char v52 = v20; // 0x404458\n        int64_t v53 = result; // 0x404458\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x404421\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x404425\n            int64_t v56 = v54 + 1; // 0x40442a\n            int64_t v57 = v51 + 1; // 0x404451\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40441c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x404421\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x404425\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x403afd;\n    }\n  lab_0x4041f0:\n    // 0x4041f0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40420f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404212\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40479a\n        goto lab_0x40479a_2;\n    }\n    goto lab_0x40421f;\n  lab_0x403a3d:\n    // 0x403a3d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x403c8a_2;\n    }\n    goto lab_0x403a71;\n  lab_0x403a15:;\n    bool v60 = v15 == 1; // 0x403a20\n    if (v15 == -1) {\n        // 0x403a22\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x403a2e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x403a71;\n    } else {\n        goto lab_0x403a3d;\n    }\n  lab_0x403afd:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403b02\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403b06\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403918_2;\n}\n"
        },
        {
            "funcName": "function_404aa0",
            "funcStartAddr": "404aa0",
            "funcEndAddr": "404c3e",
            "decompiledFuncCode": "int64_t function_404aa0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x404aa2\n    int32_t * v3 = __errno_location(); // 0x404abc\n    int64_t v4 = (int64_t)g22; // 0x404ac1\n    int32_t v5 = *v3; // 0x404acb\n    int64_t v6 = v4; // 0x404ae1\n    if (v2 >= (int64_t)*(int32_t *)&g25) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x404c39\n            function_405b60(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x404af0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x404af7\n        int64_t v9; // 0x404aa0\n        if (g22 == &g23) {\n            int64_t v10 = function_405970(0, v8); // 0x404c1a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g23); // 0x404c1f\n            *(int64_t *)&g22 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_405970(v4, v8); // 0x404b0b\n            *(int64_t *)&g22 = v12;\n            v9 = v12;\n        }\n        // 0x404b1a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g25; // 0x404b1a\n        int32_t v14 = v7; // 0x404b21\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g25 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x404b51\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x404b5b\n    int64_t * v17 = (int64_t *)v15; // 0x404b5e\n    uint64_t v18 = *v17; // 0x404b5e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x404b61\n    int64_t result = *v19; // 0x404b61\n    int64_t v20; // 0x404aa0\n    uint64_t v21 = function_403870(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x404b84\n    if (v18 > v21) {\n        // 0x404bfb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x404b97\n    *v17 = v22;\n    if (result != (int64_t)&g42) {\n        // 0x404ba7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_405910(v22); // 0x404bc1\n    *v19 = result2;\n    int64_t v23; // 0x404aa0\n    function_403870(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x404bfb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404c40",
            "funcStartAddr": "404c40",
            "funcEndAddr": "404c74",
            "decompiledFuncCode": "int64_t function_404c40(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x404c47\n    int64_t result = function_405b10(a1 == 0 ? (int64_t)&g43 : a1, 56); // 0x404c66\n    return result;\n}\n"
        },
        {
            "funcName": "function_404c80",
            "funcStartAddr": "404c80",
            "funcEndAddr": "404c8f",
            "decompiledFuncCode": "int64_t function_404c80(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g43 : a1); // 0x404c8c\n    return result;\n}\n"
        },
        {
            "funcName": "function_404c90",
            "funcStartAddr": "404c90",
            "funcEndAddr": "404c9f",
            "decompiledFuncCode": "int64_t function_404c90(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g43 : a1; // 0x404c98\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g43;\n}\n"
        },
        {
            "funcName": "function_404ca0",
            "funcStartAddr": "404ca0",
            "funcEndAddr": "404cd3",
            "decompiledFuncCode": "int64_t function_404ca0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g43 + 8 : a1 + 8; // 0x404cb9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x404cbe\n    uint32_t v3 = *v2; // 0x404cbe\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404cc2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404ce0",
            "funcStartAddr": "404ce0",
            "funcEndAddr": "404cf3",
            "decompiledFuncCode": "int64_t function_404ce0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g43 + 4 : a1 + 4); // 0x404cec\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404d00",
            "funcStartAddr": "404d00",
            "funcEndAddr": "404d2b",
            "decompiledFuncCode": "int64_t function_404d00(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g43 : a1; // 0x404d08\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404d25\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404d1c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g43;\n}\n"
        },
        {
            "funcName": "function_404d30",
            "funcStartAddr": "404d30",
            "funcEndAddr": "404da2",
            "decompiledFuncCode": "int64_t function_404d30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g43 : a5; // 0x404d52\n    int32_t * v2 = __errno_location(); // 0x404d5b\n    uint32_t v3 = *(int32_t *)v1; // 0x404d7b\n    int64_t result = function_403870(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x404d8a\n    return result;\n}\n"
        },
        {
            "funcName": "function_404db0",
            "funcStartAddr": "404db0",
            "funcEndAddr": "404e91",
            "decompiledFuncCode": "int64_t function_404db0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g43 : a4; // 0x404dd2\n    int32_t * v2 = __errno_location(); // 0x404dd8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404df7\n    int32_t * v4 = (int32_t *)v1; // 0x404dfa\n    int64_t v5 = function_403870(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404e15\n    int64_t v6 = v5 + 1; // 0x404e1a\n    int64_t result = function_405910(v6); // 0x404e2f\n    function_403870(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404e74\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x404e7d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404ea0",
            "funcStartAddr": "404ea0",
            "funcEndAddr": "404eaa",
            "decompiledFuncCode": "int64_t function_404ea0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404ea0\n    return function_404db0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404eb0",
            "funcStartAddr": "404eb0",
            "funcEndAddr": "404f45",
            "decompiledFuncCode": "int64_t function_404eb0(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x404eb0\n    int64_t v2 = v1; // 0x404eb0\n    int64_t v3 = v2; // 0x404ec4\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x404ee3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g56;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404ee0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g56;\n        }\n    }\n    int64_t v6 = v3; // 0x404efd\n    if (g23 != 0x60b2e0) {\n        // 0x404eff\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g42;\n        v6 = &g56;\n    }\n    int64_t result = v6; // 0x404f21\n    if (g22 != &g23) {\n        // 0x404f23\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g56;\n    }\n    // 0x404f36\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404f50",
            "funcStartAddr": "404f50",
            "funcEndAddr": "404f61",
            "decompiledFuncCode": "int64_t function_404f50(void) {\n    // 0x404f50\n    int64_t v1; // 0x404f50\n    return function_404aa0(v1, v1, -1, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404f70",
            "funcStartAddr": "404f70",
            "funcEndAddr": "404f7a",
            "decompiledFuncCode": "int64_t function_404f70(void) {\n    // 0x404f70\n    int64_t v1; // 0x404f70\n    return function_404aa0(v1, v1, v1, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404f80",
            "funcStartAddr": "404f80",
            "funcEndAddr": "404f96",
            "decompiledFuncCode": "int64_t function_404f80(int64_t a1) {\n    // 0x404f80\n    return function_404aa0(0, a1, -1, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404fa0",
            "funcStartAddr": "404fa0",
            "funcEndAddr": "404fb2",
            "decompiledFuncCode": "int64_t function_404fa0(int64_t a1, int64_t a2) {\n    // 0x404fa0\n    return function_404aa0(0, a1, a2, (int64_t *)&g43);\n}\n"
        },
        {
            "funcName": "function_404fc0",
            "funcStartAddr": "404fc0",
            "funcEndAddr": "405028",
            "decompiledFuncCode": "int64_t function_404fc0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404fd0\n    return function_404aa0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405030",
            "funcStartAddr": "405030",
            "funcEndAddr": "405094",
            "decompiledFuncCode": "int64_t function_405030(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405040\n    return function_404aa0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4050a0",
            "funcStartAddr": "4050a0",
            "funcEndAddr": "4050ac",
            "decompiledFuncCode": "int64_t function_4050a0(int64_t a1, int64_t a2) {\n    // 0x4050a0\n    return function_404fc0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4050b0",
            "funcStartAddr": "4050b0",
            "funcEndAddr": "4050bf",
            "decompiledFuncCode": "int64_t function_4050b0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4050b0\n    return function_405030(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4050c0",
            "funcStartAddr": "4050c0",
            "funcEndAddr": "405130",
            "decompiledFuncCode": "int64_t function_4050c0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g43); // 0x4050cd\n    int128_t v2 = __asm_movdqa(g44); // 0x4050d5\n    int128_t v3 = __asm_movdqa(g45); // 0x4050dd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x4050f2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x405108\n    uint32_t v6 = *v5; // 0x405108\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40510d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_404aa0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_405130",
            "funcStartAddr": "405130",
            "funcEndAddr": "40513d",
            "decompiledFuncCode": "int64_t function_405130(int64_t a1, int64_t a2) {\n    // 0x405130\n    return function_4050c0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_405140",
            "funcStartAddr": "405140",
            "funcEndAddr": "405151",
            "decompiledFuncCode": "int64_t function_405140(int64_t a1) {\n    // 0x405140\n    return function_4050c0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_405160",
            "funcStartAddr": "405160",
            "funcEndAddr": "40516a",
            "decompiledFuncCode": "int64_t function_405160(void) {\n    // 0x405160\n    int64_t v1; // 0x405160\n    return function_4050c0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_405170",
            "funcStartAddr": "405170",
            "funcEndAddr": "4051de",
            "decompiledFuncCode": "int64_t function_405170(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40518a\n    return function_404aa0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4051e0",
            "funcStartAddr": "4051e0",
            "funcEndAddr": "40524c",
            "decompiledFuncCode": "int64_t function_4051e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g43); // 0x4051e7\n    int128_t v2 = __asm_movdqa(g44); // 0x4051ef\n    int128_t v3 = __asm_movdqa(g45); // 0x4051f7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x405219\n    if (a2 == 0 || a3 == 0) {\n        // 0x405247\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40522a\n    return function_404aa0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_405250",
            "funcStartAddr": "405250",
            "funcEndAddr": "405259",
            "decompiledFuncCode": "int64_t function_405250(void) {\n    // 0x405250\n    int64_t v1; // 0x405250\n    return function_4051e0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_405260",
            "funcStartAddr": "405260",
            "funcEndAddr": "405277",
            "decompiledFuncCode": "int64_t function_405260(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405260\n    return function_4051e0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_405280",
            "funcStartAddr": "405280",
            "funcEndAddr": "405293",
            "decompiledFuncCode": "int64_t function_405280(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405280\n    return function_4051e0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4052a0",
            "funcStartAddr": "4052a0",
            "funcEndAddr": "4052aa",
            "decompiledFuncCode": "int64_t function_4052a0(void) {\n    // 0x4052a0\n    int64_t v1; // 0x4052a0\n    return function_404aa0(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_4052b0",
            "funcStartAddr": "4052b0",
            "funcEndAddr": "4052c2",
            "decompiledFuncCode": "int64_t function_4052b0(int64_t a1, int64_t a2) {\n    // 0x4052b0\n    return function_404aa0(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_4052d0",
            "funcStartAddr": "4052d0",
            "funcEndAddr": "4052e1",
            "decompiledFuncCode": "int64_t function_4052d0(void) {\n    // 0x4052d0\n    int64_t v1; // 0x4052d0\n    return function_404aa0(v1, v1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_4052f0",
            "funcStartAddr": "4052f0",
            "funcEndAddr": "405306",
            "decompiledFuncCode": "int64_t function_4052f0(int64_t a1) {\n    // 0x4052f0\n    return function_404aa0(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_405310",
            "funcStartAddr": "405310",
            "funcEndAddr": "40536e",
            "decompiledFuncCode": "int64_t function_405310(int32_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = read(fd, (int64_t *)buf, (int32_t)nbyte); // 0x405331\n    while (result < 0) {\n        // 0x40533e\n        if (*__errno_location() != 4) {\n            // break -> 0x40534a\n            break;\n        }\n        result = read(fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_405370",
            "funcStartAddr": "405370",
            "funcEndAddr": "40574d",
            "decompiledFuncCode": "int64_t function_405370(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405408\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40538c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x4053a6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4053eb\n    if (a6 < 10) {\n        // 0x4053fa\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4054f2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405750",
            "funcStartAddr": "405750",
            "funcEndAddr": "405770",
            "decompiledFuncCode": "int64_t function_405750(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405750\n    if (a5 == 0) {\n        // 0x40576b\n        return function_405370(a1, a2, a3, a4, a5, 0, (int64_t)&g56);\n    }\n    int64_t v1 = 0; // 0x405757\n    v1++;\n    int64_t v2 = v1; // 0x405769\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405760\n        v1++;\n        v2 = v1;\n    }\n    // 0x40576b\n    return function_405370(a1, a2, a3, a4, a5, v2, (int64_t)&g56);\n}\n"
        },
        {
            "funcName": "function_405770",
            "funcStartAddr": "405770",
            "funcEndAddr": "4057d0",
            "decompiledFuncCode": "int64_t function_405770(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405770\n    int64_t v3 = &v2; // 0x405770\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4057a3\n    int64_t v6; // 0x40578d\n    int64_t * v7; // 0x4057ab\n    int64_t v8; // 0x4057ab\n    int64_t v9; // 0x4057b7\n    if (v5 < 48) {\n        // 0x405780\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4057c3\n            break;\n        }\n    } else {\n        // 0x4057ab\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4057c3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4057a1\n    while (v4 != 9) {\n        // 0x405799\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405780\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4057c3\n                break;\n            }\n        } else {\n            // 0x4057ab\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4057c3\n                break;\n            }\n        }\n        // 0x405799\n        v10 = 10;\n    }\n    // 0x4057c3\n    return function_405370(a1, a2, a3, a4, v3, v10, (int64_t)&g56);\n}\n"
        },
        {
            "funcName": "function_4057d0",
            "funcStartAddr": "4057d0",
            "funcEndAddr": "40588c",
            "decompiledFuncCode": "int64_t function_4057d0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x4057d0\n    int64_t v1; // bp-168, 0x4057d0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4057d0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4057d0\n    int64_t v8; // 0x4057d0\n    int64_t v9; // bp-56, 0x4057d0\n    int64_t v10; // 0x405835\n    int64_t v11; // 0x405859\n    if ((int32_t)v6 < 48) {\n        // 0x405820\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405870\n            break;\n        }\n    } else {\n        // 0x405852\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405870\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40584a\n    int64_t v13 = 10; // 0x40584a\n    while (v5 != 9) {\n        // 0x40584c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405820\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405870\n                break;\n            }\n        } else {\n            // 0x405852\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405870\n                break;\n            }\n        }\n        // 0x405842\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405870\n    int64_t v14; // bp-136, 0x4057d0\n    int64_t result = function_405370(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g56); // 0x40587f\n    return result;\n}\n"
        },
        {
            "funcName": "function_405890",
            "funcStartAddr": "405890",
            "funcEndAddr": "405904",
            "decompiledFuncCode": "int64_t function_405890(int64_t a1) {\n    // 0x405890\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4058f3\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_405910",
            "funcStartAddr": "405910",
            "funcEndAddr": "40592a",
            "decompiledFuncCode": "int64_t function_405910(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x405914\n    if (size != 0 != (mem == NULL)) {\n        // 0x405923\n        return (int64_t)mem;\n    }\n    // 0x405925\n    function_405b60(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405930",
            "funcStartAddr": "405930",
            "funcEndAddr": "405951",
            "decompiledFuncCode": "int64_t function_405930(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405933\n    int64_t v2 = v1; // 0x405933\n    if (v2 < 0) {\n        // 0x40594b\n        function_405b60(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405949\n        return function_405910(v2);\n    }\n    // 0x40594b\n    function_405b60(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405960",
            "funcStartAddr": "405960",
            "funcEndAddr": "405962",
            "decompiledFuncCode": "int64_t function_405960(void) {\n    // 0x405960\n    int64_t v1; // 0x405960\n    return function_405910(v1);\n}\n"
        },
        {
            "funcName": "function_405970",
            "funcStartAddr": "405970",
            "funcEndAddr": "4059a6",
            "decompiledFuncCode": "int64_t function_405970(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x405998\n        free(v1);\n        return (int32_t)&g56 ^ (int32_t)&g56;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405981\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x405990\n        return (int64_t)mem;\n    }\n    // 0x4059a1\n    function_405b60(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4059b0",
            "funcStartAddr": "4059b0",
            "funcEndAddr": "4059d1",
            "decompiledFuncCode": "int64_t function_4059b0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4059b3\n    int64_t v2 = v1; // 0x4059b3\n    if (v2 < 0) {\n        // 0x4059cb\n        function_405b60(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4059c9\n        return function_405970(a1, v2);\n    }\n    // 0x4059cb\n    function_405b60(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4059e0",
            "funcStartAddr": "4059e0",
            "funcEndAddr": "405a66",
            "decompiledFuncCode": "int64_t function_4059e0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x405a3b\n            function_405b60(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405970(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405a23\n    if (a2 == 0) {\n        // 0x405a48\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405a28\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x405a3b\n        function_405b60(a1);\n        // UNREACHABLE\n    }\n    // 0x405a0a\n    *(int64_t *)a2 = v2;\n    return function_405970(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405a70",
            "funcStartAddr": "405a70",
            "funcEndAddr": "405ac0",
            "decompiledFuncCode": "int64_t function_405a70(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405a70\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x405aba\n            function_405b60(a1);\n            // UNREACHABLE\n        }\n        // 0x405a92\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405970(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405aa5\n        *(int64_t *)a2 = 128;\n        return function_405970(0, 128);\n    }\n    // 0x405ab8\n    if (a2 < 0) {\n        // 0x405aba\n        function_405b60(a1);\n        // UNREACHABLE\n    }\n    // 0x405a92\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405970(a1, v1);\n}\n"
        },
        {
            "funcName": "function_405ac0",
            "funcStartAddr": "405ac0",
            "funcEndAddr": "405ad7",
            "decompiledFuncCode": "int64_t function_405ac0(int64_t a1, int64_t a2) {\n    // 0x405ac0\n    return (int64_t)memset((int64_t *)function_405910(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_405ae0",
            "funcStartAddr": "405ae0",
            "funcEndAddr": "405b0e",
            "decompiledFuncCode": "int64_t function_405ae0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x405ae7\n    if ((int64_t)v1 < 0) {\n        // 0x405b09\n        function_405b60(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x405b09\n        function_405b60(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x405afa\n    if (mem != NULL) {\n        // 0x405b04\n        return (int64_t)mem;\n    }\n    // 0x405b09\n    function_405b60(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405b10",
            "funcStartAddr": "405b10",
            "funcEndAddr": "405b38",
            "decompiledFuncCode": "int64_t function_405b10(int64_t a1, int64_t a2) {\n    int64_t v1 = function_405910(a2); // 0x405b1f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405b40",
            "funcStartAddr": "405b40",
            "funcEndAddr": "405b53",
            "decompiledFuncCode": "int64_t function_405b40(int64_t str) {\n    // 0x405b40\n    return function_405b10(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405b60",
            "funcStartAddr": "405b60",
            "funcEndAddr": "405b91",
            "decompiledFuncCode": "int64_t function_405b60(int64_t a1) {\n    // 0x405b60\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405ba0",
            "funcStartAddr": "405ba0",
            "funcEndAddr": "405c70",
            "decompiledFuncCode": "int64_t function_405ba0(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, int64_t a5, int64_t a6, int64_t a7) {\n    // 0x405ba0\n    int64_t result2; // bp-64, 0x405ba0\n    int32_t v1 = function_405ca0(a1, 0, a2 & 0xffffffff, &result2, a5, a6); // 0x405bcc\n    int32_t * v2; // 0x405ba0\n    if (v1 != 0) {\n        int32_t * v3 = __errno_location(); // 0x405c4a\n        if (v1 == 1) {\n            // 0x405c68\n            *v3 = 75;\n            v2 = v3;\n        } else {\n            // 0x405c57\n            v2 = v3;\n            if (v1 == 3) {\n                // 0x405c5c\n                *v3 = 0;\n                v2 = v3;\n            }\n        }\n    } else {\n        uint64_t result = result2; // 0x405bd0\n        if (result >= a3 && result <= a4) {\n            // 0x405c32\n            return result;\n        }\n        int32_t * v4 = __errno_location(); // 0x405bdf\n        *v4 = result < 0x40000000 ? 34 : 75;\n        v2 = v4;\n    }\n    int64_t v5 = function_4052f0(a1); // 0x405bfc\n    int32_t v6 = *v2; // 0x405c01\n    int32_t err_num = v6 == 22 ? 0 : v6; // 0x405c17\n    int32_t v7 = a7; // 0x405c1a\n    error(v7 == 0 ? 1 : v7, err_num, \"%s: %s\", (char *)a6, (char *)v5);\n    // 0x405c32\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405c70",
            "funcStartAddr": "405c70",
            "funcEndAddr": "405c91",
            "decompiledFuncCode": "int64_t function_405c70(int64_t a1, int32_t a2, int64_t a3, char * a4, int64_t a5, int32_t a6) {\n    // 0x405c70\n    return function_405ba0(a1, 10, (int64_t)a2, a3, (int64_t)a4, a5, (int64_t)a6);\n}\n"
        },
        {
            "funcName": "function_405ca0",
            "funcStartAddr": "405ca0",
            "funcEndAddr": "4061bf",
            "decompiledFuncCode": "int64_t function_405ca0(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x405cae\n    if (v1 >= 37) {\n        // 0x40615c\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        *(int32_t *)\"<= 36\" = 0x2f62696c;\n        *(int32_t *)\"ase <= 36\" = 0x1ca79f91;\n        return 0xfc422c30;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x405cd2\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x405d02\n    int64_t v4 = a1; // 0x405d07\n    char v5 = c; // 0x405d07\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x405cfc\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x405cf8\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x405d09\n    if (v5 == 45) {\n        // 0x405d45\n        return 4;\n    }\n    // 0x405d0e\n    int64_t v7; // bp-64, 0x405ca0\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x405cce\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x405d16\n    int64_t * v10 = (int64_t *)v8; // 0x405d1b\n    int64_t v11 = *v10; // 0x405d1b\n    char v12; // 0x405ca0\n    int64_t v13; // 0x405ca0\n    int64_t v14; // 0x405ca0\n    int64_t v15; // 0x405ca0\n    int64_t v16; // 0x405ca0\n    int64_t v17; // 0x405ca0\n    int64_t v18; // 0x405ca0\n    if (v11 == a1) {\n        // 0x405d78\n        if (c == 0 || str == 0) {\n            // 0x405d45\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x405d99\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x405d45\n            return 4;\n        }\n        goto lab_0x405da7;\n    } else {\n        int32_t v19 = *v2; // 0x405d26\n        int64_t v20 = 0; // 0x405d2c\n        if (v19 != 0) {\n            // 0x405d60\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x405d45\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x405d16\n        v16 = v21;\n        v13 = v20;\n        if (str == 0) {\n            goto lab_0x405d42;\n        } else {\n            char c2 = *(char *)v11; // 0x405d35\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x405ea3\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x405da7;\n                } else {\n                    goto lab_0x405eb5;\n                }\n            } else {\n                goto lab_0x405d42;\n            }\n        }\n    }\n  lab_0x405da7:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x405daf\n    int64_t v24 = 1; // 0x405daf\n    int64_t v25; // 0x405ca0\n    int64_t v26; // 0x405ca0\n    int64_t v27; // 0x405ca0\n    int64_t v28; // 0x405ca0\n    int64_t v29; // 0x405ca0\n    int64_t v30; // 0x405ca0\n    int64_t v31; // 0x405ca0\n    int64_t v32; // 0x405ca0\n    int64_t v33; // 0x405ca0\n    int64_t v34; // 0x405ca0\n    int64_t v35; // 0x405ca0\n    int64_t v36; // 0x405ca0\n    int64_t v37; // 0x405ca0\n    int64_t v38; // 0x405ca0\n    int64_t v39; // 0x405ca0\n    int64_t v40; // 0x405ca0\n    int64_t v41; // 0x405ca0\n    int64_t v42; // 0x405ca0\n    int64_t v43; // 0x405ca0\n    int64_t v44; // 0x405ca0\n    if (v22 < 48) {\n        // 0x405db1\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x405e1a;\n        } else {\n            // 0x405dc4\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x405e1a;\n            } else {\n                // 0x405de0\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x405e1a;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x406049\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x405e1a;\n                    }\n                    default: {\n                        // 0x405df5\n                        g53 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x405fbb;\n                            }\n                            case 70: {\n                                goto lab_0x405eb5;\n                            }\n                            case 71: {\n                                goto lab_0x405ff3;\n                            }\n                            case 72: {\n                                goto lab_0x405eb5;\n                            }\n                            case 73: {\n                                goto lab_0x405eb5;\n                            }\n                            case 74: {\n                                goto lab_0x405eb5;\n                            }\n                            case 75: {\n                                goto lab_0x405e7c;\n                            }\n                            case 76: {\n                                goto lab_0x405eb5;\n                            }\n                            case 77: {\n                                goto lab_0x405e3e;\n                            }\n                            case 78: {\n                                goto lab_0x405eb5;\n                            }\n                            case 79: {\n                                goto lab_0x405eb5;\n                            }\n                            case 80: {\n                                goto lab_0x405f88;\n                            }\n                            case 81: {\n                                goto lab_0x405eb5;\n                            }\n                            case 82: {\n                                goto lab_0x405eb5;\n                            }\n                            case 83: {\n                                goto lab_0x405eb5;\n                            }\n                            case 84: {\n                                goto lab_0x405f58;\n                            }\n                            case 85: {\n                                goto lab_0x405eb5;\n                            }\n                            case 86: {\n                                goto lab_0x405eb5;\n                            }\n                            case 87: {\n                                goto lab_0x405eb5;\n                            }\n                            case 88: {\n                                goto lab_0x405eb5;\n                            }\n                            case 89: {\n                                goto lab_0x405f26;\n                            }\n                            case 90: {\n                                goto lab_0x405eeb;\n                            }\n                            case 91: {\n                                goto lab_0x405eb5;\n                            }\n                            case 92: {\n                                goto lab_0x405eb5;\n                            }\n                            case 93: {\n                                goto lab_0x405eb5;\n                            }\n                            case 94: {\n                                goto lab_0x405eb5;\n                            }\n                            case 95: {\n                                goto lab_0x405eb5;\n                            }\n                            case 96: {\n                                goto lab_0x405eb5;\n                            }\n                            case 97: {\n                                goto lab_0x405eb5;\n                            }\n                            case 98: {\n                                goto lab_0x405ecf;\n                            }\n                            case 99: {\n                                goto lab_0x405e58;\n                            }\n                            case 100: {\n                                goto lab_0x405eb5;\n                            }\n                            case 101: {\n                                goto lab_0x405eb5;\n                            }\n                            case 102: {\n                                goto lab_0x405eb5;\n                            }\n                            case 103: {\n                                goto lab_0x405ff3;\n                            }\n                            case 104: {\n                                goto lab_0x405eb5;\n                            }\n                            case 105: {\n                                goto lab_0x405eb5;\n                            }\n                            case 106: {\n                                goto lab_0x405eb5;\n                            }\n                            case 107: {\n                                goto lab_0x405e7c;\n                            }\n                            case 108: {\n                                goto lab_0x405eb5;\n                            }\n                            case 109: {\n                                goto lab_0x405e3e;\n                            }\n                            case 110: {\n                                goto lab_0x405eb5;\n                            }\n                            case 111: {\n                                goto lab_0x405eb5;\n                            }\n                            case 112: {\n                                goto lab_0x405eb5;\n                            }\n                            case 113: {\n                                goto lab_0x405eb5;\n                            }\n                            case 114: {\n                                goto lab_0x405eb5;\n                            }\n                            case 115: {\n                                goto lab_0x405eb5;\n                            }\n                            case 116: {\n                                goto lab_0x405f58;\n                            }\n                            default: {\n                                goto lab_0x405e1a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x405e1a;\n    }\n  lab_0x405d42:\n    // 0x405d42\n    *a4 = v16;\n    // 0x405d45\n    return v13 & 0xffffffff;\n  lab_0x405e1a:\n    // 0x405e1a\n    g54 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x405ca0\n    switch (v12) {\n        case 66: {\n            // 0x406014\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x405e87;\n            } else {\n                // 0x406021\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x405e58;\n            }\n        }\n        case 69: {\n            goto lab_0x405fbb;\n        }\n        case 71: {\n            goto lab_0x405ff3;\n        }\n        case 75: {\n            goto lab_0x405e7c;\n        }\n        case 77: {\n            goto lab_0x405e3e;\n        }\n        case 80: {\n            goto lab_0x405f88;\n        }\n        case 84: {\n            goto lab_0x405f58;\n        }\n        case 89: {\n            goto lab_0x405f26;\n        }\n        case 90: {\n            goto lab_0x405eeb;\n        }\n        case 98: {\n            goto lab_0x405ecf;\n        }\n        case 99: {\n            goto lab_0x405e58;\n        }\n        case 103: {\n            goto lab_0x405ff3;\n        }\n        case 107: {\n            goto lab_0x405e7c;\n        }\n        case 109: {\n            goto lab_0x405e3e;\n        }\n        case 116: {\n            goto lab_0x405f58;\n        }\n        case 119: {\n            // 0x405ec0\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x405e87;\n            } else {\n                // 0x405ec5\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x405e58;\n            }\n        }\n        default: {\n            goto lab_0x405eb5;\n        }\n    }\n  lab_0x405fbb:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x405fd3\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x405fdf\n    int64_t v51 = v48; // 0x405fe2\n    int64_t v52 = v37; // 0x405fe2\n    int64_t v53 = v49; // 0x405fe2\n    int32_t v54 = v50; // 0x405fe2\n    int64_t v55 = v49; // 0x405fe2\n    while (v50 != 0) {\n        // 0x405fd0\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x405f14;\n  lab_0x405ff3:\n    // 0x405ff3\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x405ffe\n        int128_t v56; // 0x405ff9\n        uint128_t v57; // 0x405ff9\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x405ffe\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x405ca0\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x406003\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x406008\n                v26 = v60;\n                int64_t v61; // 0x405ca0\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x405e58;\n  lab_0x405e7c:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x405e7f\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x405e58;\n    } else {\n        goto lab_0x405e87;\n    }\n  lab_0x405e3e:;\n    int128_t v65 = v27; // 0x405e44\n    uint128_t v66 = v65 * (int128_t)v17; // 0x405e44\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x405e87;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x405e49\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x405e87;\n        } else {\n            // 0x405e4e\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x405e58;\n        }\n    }\n  lab_0x405f88:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x405f9b\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x405fa7\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x405faa\n    int64_t v73 = v70; // 0x405faa\n    while (v71 != 0) {\n        // 0x405f98\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x405f14;\n  lab_0x405f58:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x405f6b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x405f77\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x405f7a\n    int64_t v79 = v76; // 0x405f7a\n    while (v77 != 0) {\n        // 0x405f68\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x405f14;\n  lab_0x405f26:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x405f3b\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x405f47\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x405f4a\n    int64_t v85 = v82; // 0x405f4a\n    while (v83 != 0) {\n        // 0x405f38\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x405f14;\n  lab_0x405eeb:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x405f03\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x405f0f\n    int32_t v90 = v89; // 0x405f12\n    int64_t v91 = v88; // 0x405f12\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x405f00\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x405f14;\n  lab_0x405ecf:\n    // 0x405ecf\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x405e87;\n    } else {\n        // 0x405ed8\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x405e58;\n    }\n  lab_0x405e58:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x405e5d\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x405d42;\n  lab_0x405eb5:\n    // 0x405eb5\n    *a4 = v18;\n    // 0x405d45\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x405e87:\n    // 0x405e87\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x405e58;\n  lab_0x405f14:\n    // 0x405f14\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x405e58;\n}\n"
        },
        {
            "funcName": "function_4061c0",
            "funcStartAddr": "4061c0",
            "funcEndAddr": "4067dc",
            "decompiledFuncCode": "int64_t function_4061c0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4061df\n    int64_t v2 = *v1; // 0x4061df\n    char * str2 = (char *)v2; // 0x4061ec\n    char c = *str2; // 0x4061ec\n    int64_t v3 = v2; // 0x406218\n    int64_t v4 = 0; // 0x4061c0\n    int32_t v5; // 0x4061c0\n    int64_t v6; // 0x4061c0\n    int64_t v7; // 0x4061c0\n    int64_t v8; // 0x4061c0\n    int64_t v9; // 0x4061c0\n    int64_t v10; // 0x4061c0\n    int64_t v11; // 0x4061c0\n    int64_t v12; // 0x4061c0\n    int64_t v13; // 0x4061c0\n    int64_t str3; // 0x4061c0\n    int64_t v14; // 0x4061c0\n    int64_t v15; // 0x4061c0\n    int64_t v16; // 0x4061c0\n    int64_t v17; // 0x4061c0\n    int32_t v18; // 0x4061c0\n    int32_t v19; // 0x4061c0\n    int32_t v20; // 0x4061c0\n    int32_t v21; // 0x4061c0\n    int32_t v22; // 0x4061c0\n    int32_t v23; // 0x4061c0\n    int32_t v24; // 0x4061c0\n    int32_t v25; // 0x4061c0\n    int32_t v26; // 0x4061c0\n    int32_t v27; // 0x4061c0\n    int32_t v28; // 0x4061c0\n    int32_t v29; // 0x4061c0\n    int64_t nmemb; // 0x4061c0\n    int64_t v30; // 0x4061c0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40621c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x406218\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x406228\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40622e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4061f8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40625c\n                int64_t v34; // 0x4061c0\n                int64_t v35; // 0x4061c0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x406265\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4063e0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x406276\n                int64_t v37 = *(int64_t *)v36; // 0x40627a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x406250\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x406265\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4063e0;\n                        }\n                    }\n                    // 0x406276\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4062c6:\n                    // 0x4062c6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x406320;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x406490\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x406320;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x406440\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4062ea;\n                                } else {\n                                    // 0x40644c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4062ea;\n                                    } else {\n                                        // 0x40645a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4062ea;\n                                        } else {\n                                            goto lab_0x406320;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4062ea;\n                            }\n                        }\n                    }\n                }\n              lab_0x406331:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x406506\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4066b2\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x4066d2\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40671f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x406739\n                            int64_t v45; // 0x40673b\n                            if (*(char *)v42 != 0) {\n                                // 0x40673b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x406733\n                            while (v17 + nmemb != v42) {\n                                // 0x406735\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40673b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x406728\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x406760\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x406514\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40666f\n                        free((int64_t *)v17);\n                    }\n                    // 0x406569\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x406580\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40642e\n                    return 63;\n                }\n                // 0x406350\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4063d4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4063e0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x4063f0\n                    uint32_t v50 = *v49; // 0x4063f0\n                    int64_t v51 = v50; // 0x4063f0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x4063fa\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x406403\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40662f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4065da\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40642e\n                            return 63;\n                        }\n                        // 0x406478\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40678f\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40668d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4066a0\n                                // 0x40642e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40659e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4065b2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40641b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40641e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x406422\n                    int64_t result = v59; // 0x406428\n                    if (v58 != 0) {\n                        // 0x40642a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40642e\n                    return result;\n                }\n            } else {\n                // 0x40622e\n                v5 = v32;\n            }\n            // break -> 0x406355\n            break;\n        }\n    }\n    // 0x406355\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40636d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x406377\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40642e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4064b9\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4063a6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4063b6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x406320:\n    // 0x406320\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x406320\n    int64_t v63 = *(int64_t *)v62; // 0x406324\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x406331\n        goto lab_0x406331;\n    }\n    goto lab_0x4062c6;\n  lab_0x4062ea:\n    // 0x4062ea\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4061c0\n    int32_t v65; // 0x4061c0\n    int32_t v66; // 0x4061c0\n    if (v27 != 0) {\n        goto lab_0x406320;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4064a0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x406320;\n            } else {\n                goto lab_0x406311;\n            }\n        } else {\n            // 0x406305\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x4065fc\n                int64_t v67 = (int64_t)mem; // 0x4065fc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x406320;\n                } else {\n                    // 0x40660f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x406311;\n                }\n            } else {\n                goto lab_0x406311;\n            }\n        }\n    }\n  lab_0x406311:\n    // 0x406311\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x406320;\n}\n"
        },
        {
            "funcName": "function_4067e0",
            "funcStartAddr": "4067e0",
            "funcEndAddr": "406da6",
            "decompiledFuncCode": "int64_t function_4067e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x406801\n    if (v3 < 1) {\n        // 0x4069be\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x4067fd\n    int32_t v5 = *(int32_t *)a7; // 0x406809\n    uint64_t v6 = a1 & 0xffffffff; // 0x40680b\n    int64_t v7 = v2; // 0x406810\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x406813\n    *v8 = 0;\n    int64_t v9; // 0x4067e0\n    int64_t v10; // 0x4067e0\n    int64_t v11; // 0x4067e0\n    int64_t v12; // 0x4067e0\n    int64_t str; // 0x4067e0\n    int64_t v13; // 0x4067e0\n    int64_t v14; // 0x4067e0\n    int64_t v15; // 0x4067e0\n    int64_t v16; // 0x4067e0\n    int64_t v17; // 0x4067e0\n    int32_t v18; // 0x4067e0\n    char v19; // 0x4067e0\n    if (v5 == 0) {\n        // 0x4069f8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40682a;\n    } else {\n        // 0x406823\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x406870\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x406873\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x406938;\n            } else {\n                int64_t v22 = v7 + 1; // 0x406886\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x406896\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40694c;\n                } else {\n                    goto lab_0x4068a8;\n                }\n            }\n        } else {\n            goto lab_0x40682a;\n        }\n    }\n  lab_0x40682a:\n    // 0x40682a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x406830\n    *v24 = 0;\n    int64_t v25; // 0x4067e0\n    int64_t v26; // 0x4067e0\n    int64_t v27; // 0x4067e0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x406920\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40692d;\n        }\n        case 43: {\n            // 0x406c30\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40692d;\n        }\n        default: {\n            // 0x40684c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x406baf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x406cc8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40692d;\n                } else {\n                    // 0x406bbd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40685a;\n                }\n            } else {\n                goto lab_0x40685a;\n            }\n        }\n    }\n  lab_0x406938:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40693f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4068a8;\n    } else {\n        goto lab_0x40694c;\n    }\n  lab_0x40685a:\n    // 0x40685a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40692d;\n  lab_0x40692d:\n    // 0x40692d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x406938;\n  lab_0x4068a8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4068a8\n    int64_t v31 = v30; // 0x4068a8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4068aa\n    if ((int64_t)*v32 > v31) {\n        // 0x4068af\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4068b2\n    if (*v33 > v30) {\n        // 0x4068b7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4068ba\n    int64_t v35 = v31; // 0x4068be\n    int64_t v36 = v15; // 0x4068be\n    int64_t v37; // 0x4067e0\n    int64_t v38; // 0x4067e0\n    int64_t v39; // 0x4067e0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406a28\n        int64_t v41 = v40; // 0x406a28\n        v2 = v41;\n        int64_t v42; // 0x4067e0\n        if (*v33 == v40) {\n            // 0x406c10\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406c18\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x406a34\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x406a48\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x406a51\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x406a5a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x406a71\n            int64_t v47 = v45 & 0xffffffff; // 0x406a75\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x406a7e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x406a84\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x406a86;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x406a60\n            int64_t v49 = v48 & 0xffffffff; // 0x406a60\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x406a71\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x406a7e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x406a84\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x406a86;\n                    }\n                }\n                // 0x406a60\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x406c28\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x406a86;\n    } else {\n        goto lab_0x4068c4;\n    }\n  lab_0x40694c:\n    // 0x40694c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40694f\n    int64_t v51 = v12; // 0x40694f\n    int64_t v52 = v14; // 0x40694f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4068a8;\n    } else {\n        goto lab_0x406955;\n    }\n  lab_0x4068c4:;\n    int32_t v53 = v35; // 0x4068c4\n    int64_t v54; // 0x4067e0\n    int64_t v55; // 0x4067e0\n    int64_t v56; // 0x4067e0\n    int64_t v57; // 0x4067e0\n    int64_t v58; // 0x4067e0\n    int64_t v59; // 0x4067e0\n    char * v60; // 0x4067e0\n    int64_t v61; // 0x4067e0\n    int64_t v62; // 0x4068d9\n    int64_t v63; // 0x4067e0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x406a13\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x406a16;\n    } else {\n        // 0x4068cc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4067e0\n        int64_t v66 = v65 ? -1 : 1; // 0x4068e0\n        int64_t v67 = (int64_t)\"--\"; // 0x4067e0\n        int64_t v68 = v62; // 0x4067e0\n        int64_t v69 = 3; // 0x4068e0\n        unsigned char v70 = *(char *)v68; // 0x4068e0\n        char v71 = *(char *)v67; // 0x4068e0\n        char v72 = v71; // 0x4068e0\n        bool v73 = false; // 0x4068e0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4069d0\n            if (*(char *)v62 == 45) {\n                // 0x406a90\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x406a90\n                if (c == 0) {\n                    goto lab_0x4069da;\n                } else {\n                    // 0x406a9d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406b20;\n                    } else {\n                        if (c == 45) {\n                            // 0x406d03\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x406b75;\n                        } else {\n                            // 0x406aae\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406b20;\n                            } else {\n                                // 0x406ab3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x406ad4;\n                                } else {\n                                    // 0x406aba\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406b20;\n                                    } else {\n                                        goto lab_0x406ad4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4069da;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x4068f0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x4068f3\n            int64_t v77 = v35 + 1; // 0x4068f6\n            int32_t v78 = v77; // 0x4068f9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x406c60\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x406907\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x406915\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x406a16;\n        }\n    }\n  lab_0x406955:;\n    // 0x406955\n    int64_t v79; // bp-104, 0x4067e0\n    int64_t v80 = &v79; // 0x4067ea\n    int64_t v81 = v50 + 1; // 0x406955\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40695c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x406961\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x406965\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x406969\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x406971\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x406976\n    int32_t c2 = v84; // 0x406976\n    char * found_char_pos = strchr(str2, c2); // 0x406976\n    int64_t v87 = *v82; // 0x40697b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x406985\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x406990\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x406c80\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x406c4d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4069be\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x406976\n    char v91 = *(char *)(v90 + 1); // 0x4069ab\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x406965\n        if (v91 != 58) {\n            // 0x4069be\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x406bd4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x406cd8\n                *v8 = 0;\n            } else {\n                // 0x406cbc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x406bfe\n            *v83 = 0;\n            // 0x4069be\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x406bde\n        if (v93 != 0) {\n            // 0x406c70\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x406bfe\n            *v83 = 0;\n            // 0x4069be\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x406bf1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x406bfe\n            *v83 = 0;\n            // 0x4069be\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x406d3a\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x406cea\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x406cf1\n        // 0x406bfe\n        *v83 = 0;\n        // 0x4069be\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x406b49\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x406b4b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x406d70\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x406d21\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x406d28\n            // 0x4069be\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x406b56\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x406b5a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x406b75;\n  lab_0x406a86:\n    // 0x406a86\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4068c4;\n  lab_0x406b75:;\n    int64_t v99 = function_4061c0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x406b93\n    // 0x4069be\n    return v99 & 0xffffffff;\n  lab_0x406a16:;\n    int32_t v100 = v55; // 0x406a16\n    if (v100 != (int32_t)v59) {\n        // 0x406a1a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4069be\n    return 0xffffffff;\n  lab_0x4069da:\n    // 0x4069da\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x4069e1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4069be\n    return v99 & 0xffffffff;\n  lab_0x406b20:\n    // 0x406b20\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x406955;\n  lab_0x406ad4:\n    // 0x406ad4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4061c0(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x406afa\n    if ((int32_t)v101 != -1) {\n        // 0x4069be\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x406b0f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406b20;\n}\n"
        },
        {
            "funcName": "function_406db0",
            "funcStartAddr": "406db0",
            "funcEndAddr": "406e06",
            "decompiledFuncCode": "int64_t function_406db0(int64_t a1) {\n    // 0x406db0\n    *(int32_t *)&g46 = g28;\n    *(int32_t *)&g47 = g27;\n    int64_t v1; // 0x406db0\n    int64_t result = function_4067e0(v1, v1, v1, v1, v1, v1, &g46, a1 & 0xffffffff); // 0x406dd6\n    g28 = *(int32_t *)&g46;\n    g51 = (char *)g49;\n    *(int32_t *)&g26 = g48;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406e10",
            "funcStartAddr": "406e10",
            "funcEndAddr": "406e28",
            "decompiledFuncCode": "int64_t function_406e10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406e10\n    return function_406db0(1);\n}\n"
        },
        {
            "funcName": "function_406e30",
            "funcStartAddr": "406e30",
            "funcEndAddr": "406e43",
            "decompiledFuncCode": "int64_t function_406e30(int64_t a1, int64_t a2, char * a3, char (**a4)[6], int32_t a5, int64_t a6) {\n    // 0x406e30\n    return function_406db0(0);\n}\n"
        },
        {
            "funcName": "function_406e50",
            "funcStartAddr": "406e50",
            "funcEndAddr": "406e65",
            "decompiledFuncCode": "int64_t function_406e50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406e50\n    return function_4067e0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406e70",
            "funcStartAddr": "406e70",
            "funcEndAddr": "406e86",
            "decompiledFuncCode": "int64_t function_406e70(void) {\n    // 0x406e70\n    return function_406db0(0);\n}\n"
        },
        {
            "funcName": "function_406e90",
            "funcStartAddr": "406e90",
            "funcEndAddr": "406ea8",
            "decompiledFuncCode": "int64_t function_406e90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406e90\n    return function_4067e0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406eb0",
            "funcStartAddr": "406eb0",
            "funcEndAddr": "406f2a",
            "decompiledFuncCode": "int64_t function_406eb0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x406ebb\n    int64_t v2 = (int64_t)&g11; // 0x406ebb\n    int32_t * pwc; // 0x406eb0\n    int64_t v3; // 0x406eb0\n    int64_t n; // 0x406eb0\n    if (a2 == 0) {\n        goto lab_0x406f02;\n    } else {\n        // 0x406ebd\n        if (a3 == 0) {\n            // 0x406ee8\n            return -2;\n        }\n        // 0x406ec9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x406f02;\n        } else {\n            goto lab_0x406ed4;\n        }\n    }\n  lab_0x406f02:\n    // 0x406f02\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x406eb0\n    pwc = (int32_t *)&v4;\n    goto lab_0x406ed4;\n  lab_0x406ed4:;\n    char * wstr = (char *)v3; // 0x406eda\n    int64_t ps; // 0x406eb0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x406eda\n    int64_t result = v5; // 0x406eda\n    if (v5 < 0xfffffffe) {\n        // 0x406ee8\n        return result;\n    }\n    int64_t result2 = result; // 0x406f19\n    if ((char)function_4070a0(0, v3) == 0) {\n        // 0x406f1b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x406ee8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406f30",
            "funcStartAddr": "406f30",
            "funcEndAddr": "407034",
            "decompiledFuncCode": "int64_t function_406f30(int64_t result, uint64_t a2, int64_t a3) {\n    // 0x406f30\n    if (a3 == 0) {\n        // 0x406f69\n        return 0;\n    }\n    int64_t v1 = result; // 0x406f3c\n    int64_t v2 = a3; // 0x406f3c\n    int64_t result2; // 0x406f30\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x406f3e\n        int64_t v4 = result; // 0x406f41\n        if ((char)result == v3) {\n            // 0x406f69\n            return result;\n        }\n        int64_t v5 = a3; // 0x406f41\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x406f50\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x406f70;\n            }\n            // 0x406f56\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x406f69\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x406f69\n        return result2;\n    }\n  lab_0x406f70:;\n    int64_t result3 = v1; // 0x406f9d\n    int64_t v6 = v2; // 0x406f9d\n    if (v2 >= 8) {\n        int64_t v7 = 256 * a2 & 0xff00 | a2 % 256; // 0x406f7f\n        int64_t v8 = 0x10000 * v7 | v7; // 0x406f8c\n        int64_t v9 = 0x100000000 * v8 | v8; // 0x406f96\n        int64_t v10 = *(int64_t *)v1 ^ v9; // 0x406fb6\n        result3 = v1;\n        v6 = v2;\n        if (((v10 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v10 - 0x101010101010101) == 0) {\n            int64_t v11 = v2 - 8; // 0x406fe5\n            int64_t v12 = v1 + 8; // 0x406fe9\n            while (v11 >= 8) {\n                int64_t v13 = *(int64_t *)v12 ^ v9; // 0x406fd3\n                result3 = v12;\n                v6 = v11;\n                if (((v13 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v13 - 0x101010101010101) != 0) {\n                    goto lab_0x406ffc;\n                }\n                v11 -= 8;\n                v12 += 8;\n            }\n            // 0x406ff3\n            result3 = v12;\n            v6 = v11;\n            if (v11 == 0) {\n                // 0x406f69\n                return 0;\n            }\n        }\n    }\n  lab_0x406ffc:;\n    char v14 = a2; // 0x406ffc\n    if (*(char *)result3 == v14) {\n        // 0x406f69\n        return result3;\n    }\n    int64_t v15 = result3 + 1;\n    result2 = 0;\n    while (v15 != v6 + result3) {\n        // 0x407010\n        result2 = v15;\n        if (*(char *)v15 == v14) {\n            // break -> 0x406f69\n            break;\n        }\n        v15++;\n        result2 = 0;\n    }\n    // 0x406f69\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407040",
            "funcStartAddr": "407040",
            "funcEndAddr": "40709d",
            "decompiledFuncCode": "int64_t function_407040(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x407047\n    int64_t v2; // 0x407040\n    int64_t result = function_407670(a1, v2); // 0x407058\n    if ((v2 & 32) != 0) {\n        // 0x407080\n        if ((int32_t)result == 0) {\n            // 0x407084\n            *__errno_location() = 0;\n        }\n        // 0x40707a\n        return 0xffffffff;\n    }\n    // 0x407061\n    if ((int32_t)result == 0) {\n        // 0x40707a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x407068\n    if (v1 == 0) {\n        // 0x40706a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40707a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4070a0",
            "funcStartAddr": "4070a0",
            "funcEndAddr": "4070fe",
            "decompiledFuncCode": "int64_t function_4070a0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4070a6\n    if (locale == NULL) {\n        // 0x4070d3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4070a6\n    bool v2; // 0x4070a0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g12; // 0x4070a0\n    int64_t v5 = v1; // 0x4070a0\n    int64_t v6 = 2; // 0x4070c5\n    unsigned char v7 = *(char *)v5; // 0x4070c5\n    char v8 = *(char *)v4; // 0x4070c5\n    char v9 = v8; // 0x4070c5\n    bool v10 = false; // 0x4070c5\n    while (v7 == v8) {\n        // 0x4070b8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4070d1\n    int64_t v13 = v1; // 0x4070d1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4070d3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4070d1\n    unsigned char v15 = *(char *)v13; // 0x4070ed\n    char v16 = *(char *)v12; // 0x4070ed\n    char v17 = v16; // 0x4070ed\n    bool v18 = false; // 0x4070ed\n    while (v15 == v16) {\n        // 0x4070e0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_407100",
            "funcStartAddr": "407100",
            "funcEndAddr": "407662",
            "decompiledFuncCode": "int64_t function_407100(void) {\n    char * v1 = nl_langinfo(14); // 0x407116\n    char * v2 = g50; // 0x40711b\n    char * v3; // 0x407100\n    int64_t v4; // 0x407100\n    int64_t v5; // 0x407100\n    int64_t v6; // 0x407100\n    int64_t v7; // 0x407100\n    int32_t size; // 0x407100\n    int32_t size2; // 0x407100\n    int32_t len; // 0x4071d2\n    int64_t v8; // 0x4071d2\n    char * env_val; // 0x4071bd\n    if (v2 == NULL) {\n        // 0x4071b8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x407225;\n        } else {\n            // 0x4071ca\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x407225;\n            } else {\n                // 0x4071cf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4071bd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x407655\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x407225;\n                    } else {\n                        // 0x4075c9\n                        size2 = len + 14;\n                        goto lab_0x4071eb;\n                    }\n                } else {\n                    goto lab_0x4071eb;\n                }\n            }\n        }\n    } else {\n        // 0x407100\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40713a;\n    }\n  lab_0x40746c:;\n    // 0x40746c\n    struct _IO_FILE * stream; // 0x4072ab\n    int32_t v10 = __uflow(stream); // 0x40746f\n    int64_t v11; // 0x407100\n    int64_t v12 = v11; // 0x407479\n    int64_t v13; // 0x407100\n    int64_t v14 = v13; // 0x407479\n    int32_t v15 = v10; // 0x407479\n    int64_t v16; // 0x407100\n    int64_t v17 = v16; // 0x407479\n    int64_t v18 = v11; // 0x407479\n    int64_t v19 = v13; // 0x407479\n    int64_t v20 = v16; // 0x407479\n    if (v10 == -1) {\n        // break -> 0x40747f\n        goto lab_0x40747f;\n    }\n    goto lab_0x4072f9;\n  lab_0x4072ee:;\n    // 0x4072ee\n    int64_t v90; // 0x407100\n    int64_t * v32; // 0x4072e0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x407100\n    v12 = v89;\n    int64_t v91; // 0x407100\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x407100\n    v17 = v92;\n    goto lab_0x4072f9;\n  lab_0x4072f9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x407100\n    int32_t v25; // bp-120, 0x407100\n    int32_t v26; // bp-184, 0x407100\n    int64_t v27; // 0x4072ab\n    int64_t v28; // 0x4072c8\n    int64_t v29; // 0x4072cd\n    int64_t * v30; // 0x4072e4\n    switch (c) {\n        case 32: {\n            goto lab_0x4072e0;\n        }\n        case 10: {\n            goto lab_0x4072e0;\n        }\n        case 9: {\n            goto lab_0x4072e0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4074d1\n            int32_t v33; // 0x407100\n            char v34; // 0x407100\n            int32_t v35; // 0x4074de\n            if (v31 < *v30) {\n                // 0x4074b0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4074db\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4074d1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4074b0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4074db\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4074c0\n                v36 = v33;\n            }\n            // 0x4075af\n            if (v36 == -1) {\n                // break -> 0x40747f\n                break;\n            }\n            goto lab_0x4072e0;\n        }\n        default: {\n            // 0x40730f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40747f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x407338\n            int64_t v39 = v37 + 4; // 0x40733a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x407346\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x407348\n            while (v41 == 0) {\n                // 0x407338\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x407366\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x407372\n            int64_t v45 = v43 + 4; // 0x407374\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x407380\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x407382\n            while (v47 == 0) {\n                // 0x407372\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40736f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x407398\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4073a8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4073ac\n            int64_t v52 = v51 + v48; // 0x4073b5\n            int64_t * mem; // 0x407100\n            int64_t v53; // 0x407100\n            int64_t v54; // 0x407100\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4074eb\n                int64_t v56 = v55 + 3; // 0x4074f7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4073d1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4073e0\n            if (mem == NULL) {\n                // 0x40760c\n                free((int64_t *)v21);\n                function_407670(v27, v53);\n                v24 = (int64_t)&g11;\n                goto lab_0x407284;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4073f8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x407402\n            uint32_t v62 = (int32_t)v59; // 0x407405\n            int64_t v63; // 0x407100\n            if (v62 >= 8) {\n                // 0x407514\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40752e\n                int64_t v66 = v61 - v65; // 0x407532\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40753d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40754e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40754e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40754b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4075df\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x407417\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40741b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40742b\n            int64_t v74 = v60 - 1; // 0x40742f\n            uint32_t v75 = (int32_t)v73; // 0x407434\n            int64_t v76; // 0x407100\n            if (v75 >= 8) {\n                // 0x407562\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40756c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40757c\n                int64_t v80 = v74 - v79; // 0x407580\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40758b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40759b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x407599\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x4075f6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x4075fe\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x407446\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40744a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x407643\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40745e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4072ee;\n            } else {\n                goto lab_0x40746c;\n            }\n        }\n    }\n  lab_0x4072e0:;\n    int64_t v93 = v23; // 0x407100\n    int64_t v94 = v22; // 0x407100\n    int64_t v95 = v21; // 0x407100\n    goto lab_0x4072e0_2;\n  lab_0x407225:;\n    int64_t * mem3 = malloc(size); // 0x407225\n    int64_t v97 = (int64_t)&g11; // 0x407230\n    int64_t v98; // 0x407100\n    int64_t path; // 0x407100\n    if (mem3 == NULL) {\n        goto lab_0x407202;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x407225\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x407246;\n    }\n  lab_0x40713a:;\n    int64_t str = v1 == NULL ? (int64_t)&g11 : (int64_t)v1; // 0x40712d\n    char v100 = *v3; // 0x40713a\n    int64_t v101; // 0x407100\n    if (v100 == 0) {\n        // 0x407194\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x407100\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x407100\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x407180\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x407187;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x407150\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40715d\n        char v107 = *(char *)v106; // 0x407162\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x407194\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40716b\n    v104 = v103 + 1;\n  lab_0x407187:\n    // 0x407194\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x407202:;\n    char * v108 = (char *)v97;\n    g50 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40713a;\n  lab_0x407246:;\n    int64_t v109 = v98 + path; // 0x407246\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x407272\n    v24 = (int64_t)&g11;\n    if (fd >= 0) {\n        // 0x4072a1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4075d2\n            close(fd);\n            v24 = (int64_t)&g11;\n        } else {\n            // 0x4072c5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4072e0_2:;\n                uint64_t v96 = *v32; // 0x4072e0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40746c;\n                } else {\n                    goto lab_0x4072ee;\n                }\n            }\n          lab_0x40747f:\n            // 0x40747f\n            function_407670(v27, v19);\n            v24 = (int64_t)&g11;\n            if (v18 != 0) {\n                // 0x40749e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x407284;\n  lab_0x4071eb:;\n    int64_t * mem4 = malloc(size2); // 0x4071eb\n    v97 = (int64_t)&g11;\n    if (mem4 != NULL) {\n        // 0x407291\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x407246;\n    } else {\n        goto lab_0x407202;\n    }\n  lab_0x407284:\n    // 0x407284\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x407202;\n}\n"
        },
        {
            "funcName": "function_407670",
            "funcStartAddr": "407670",
            "funcEndAddr": "4076eb",
            "decompiledFuncCode": "int64_t function_407670(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x407677\n    if (fileno(stream) < 0) {\n        // 0x4076d7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40768a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x4076bb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4076d7\n            return fclose(stream);\n        }\n    }\n    // 0x40768c\n    if ((int32_t)function_4076f0(a1, v1) == 0) {\n        // 0x4076d7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x407698\n    int32_t v3 = *v2; // 0x4076a0\n    int64_t result = fclose(stream); // 0x4076ae\n    if (v3 != 0) {\n        // 0x4076e0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x4076b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4076f0",
            "funcStartAddr": "4076f0",
            "funcEndAddr": "407730",
            "decompiledFuncCode": "int64_t function_4076f0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40770a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40770a\n        return fflush(stream);\n    }\n    // 0x407718\n    function_407730(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_407730",
            "funcStartAddr": "407730",
            "funcEndAddr": "407787",
            "decompiledFuncCode": "int64_t function_407730(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x407730\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40773a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40776b\n    int64_t result = -1; // 0x407774\n    if (v1 != -1) {\n        // 0x407776\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x407782\n    return result;\n}\n"
        },
        {
            "funcName": "function_407790",
            "funcStartAddr": "407790",
            "funcEndAddr": "4077ed",
            "decompiledFuncCode": "int64_t function_407790(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407790\n    return function_4013c0();\n}\n"
        },
        {
            "funcName": "function_4077f0",
            "funcStartAddr": "4077f0",
            "funcEndAddr": "4077f1",
            "decompiledFuncCode": "int64_t function_4077f0(void) {\n    // 0x4077f0\n    int64_t result; // 0x4077f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_407800",
            "funcStartAddr": "407800",
            "funcEndAddr": "407818",
            "decompiledFuncCode": "int64_t function_407800(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407800\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_407818",
            "funcStartAddr": "407818",
            "funcEndAddr": "407838",
            "decompiledFuncCode": "int64_t function_407818(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x407822\n    while (*(int64_t *)v1 != -1) {\n        // 0x407823\n        v1 -= 8;\n    }\n    // 0x407834\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_head.elf"
}