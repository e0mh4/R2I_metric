{
    "funcInfo": [
        {
            "funcName": "function_401b40",
            "funcStartAddr": "401b40",
            "funcEndAddr": "401b45",
            "decompiledFuncCode": "int64_t function_401b40(void) {\n    // 0x401b40\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b45",
            "funcStartAddr": "401b45",
            "funcEndAddr": "401b4a",
            "decompiledFuncCode": "int64_t function_401b45(void) {\n    // 0x401b45\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b4a",
            "funcStartAddr": "401b4a",
            "funcEndAddr": "401b4f",
            "decompiledFuncCode": "int64_t function_401b4a(void) {\n    // 0x401b4a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b4f",
            "funcStartAddr": "401b4f",
            "funcEndAddr": "401b54",
            "decompiledFuncCode": "int64_t function_401b4f(void) {\n    // 0x401b4f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b54",
            "funcStartAddr": "401b54",
            "funcEndAddr": "401b59",
            "decompiledFuncCode": "int64_t function_401b54(void) {\n    // 0x401b54\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b59",
            "funcStartAddr": "401b59",
            "funcEndAddr": "401b5e",
            "decompiledFuncCode": "int64_t function_401b59(void) {\n    // 0x401b59\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401b60",
            "funcStartAddr": "401b60",
            "funcEndAddr": "4028d0",
            "decompiledFuncCode": "int64_t function_401b60(int64_t a1, int64_t a2) {\n    // 0x401b60\n    function_405970(a2);\n    char * locale = setlocale(LC_ALL, (char *)&g21); // 0x401b86\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    char * v1 = nl_langinfo(0x10000); // 0x401bac\n    g57 = v1;\n    char * str3; // 0x401b60\n    if (v1 == NULL) {\n        // 0x401ca0\n        g57 = (char *)&g2;\n        str3 = (char *)&g2;\n        goto lab_0x401bca;\n    } else {\n        // 0x401bc1\n        str3 = v1;\n        if (*v1 == 0) {\n            // 0x401ca0\n            g57 = (char *)&g2;\n            str3 = (char *)&g2;\n            goto lab_0x401bca;\n        } else {\n            goto lab_0x401bca;\n        }\n    }\n  lab_0x4023c0:;\n    // 0x4023c0\n    int64_t v2; // 0x401b60\n    int64_t v3 = v2 + 1;\n    int64_t v4; // 0x401b60\n    int64_t str = v3 + v4; // 0x401b60\n    int64_t v5 = v3; // 0x401b60\n    goto lab_0x4023c0_2;\n  lab_0x401f60:;\n    int64_t v11 = g37; // 0x401f70\n    int64_t v12 = function_4053b0(\"--round\", (int64_t)g91, g9, (int64_t *)&g8, 4, v11); // 0x401f83\n    g35 = *(int32_t *)(4 * v12 + (int64_t)&g8);\n    int64_t v13; // 0x401b60\n    int64_t v14 = v13; // 0x401f95\n    int64_t v15 = v11; // 0x401f95\n    goto lab_0x401bf0;\n  lab_0x401bf0:;\n    int64_t v16 = v14; // 0x401b60\n    int64_t v17 = v15; // 0x401b60\n    goto lab_0x401bf0_2;\n  lab_0x401e87:\n    // 0x401e87\n    g58 = 1;\n    int64_t v19; // 0x401b60\n    v14 = v19;\n    int64_t v18; // 0x401b60\n    v15 = v18;\n    goto lab_0x401bf0;\n  lab_0x401f29:;\n    int64_t v31 = function_407590((int64_t)g91); // 0x401f30\n    error(1, (int32_t)\"invalid header value %s\" ^ (int32_t)\"invalid header value %s\", dcgettext(NULL, \"invalid header value %s\", 5));\n    v13 = v31;\n    goto lab_0x401f60;\n  lab_0x401bca:;\n    uint64_t v21 = a1 & 0xffffffff; // 0x401b68\n    g56 = strlen(str3);\n    int64_t v32; // 0x401b60\n    function_409fa0(0x405490, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v32);\n    v16 = (int64_t)locale;\n    char * format2; // 0x4028ab\n    char * format; // 0x402889\n    while (true) {\n      lab_0x401bf0_2:\n        // 0x401bf0\n        v18 = v17;\n        v19 = v16;\n        int32_t v20 = function_4096e0(v21, a2, \"d:z\", &g5, 0, v18);\n        v13 = v19;\n        switch (v20) {\n            case -1: {\n                goto lab_0x401fdf;\n            }\n            case 132: {\n                goto lab_0x401f60;\n            }\n            default: {\n                if (v20 > 132) {\n                    if (v20 == 137) {\n                        goto lab_0x401e87;\n                    } else {\n                        if (v20 > 137) {\n                            if (v20 == 139) {\n                                // 0x401ef0\n                                if (g91 == NULL) {\n                                    // 0x401fcf\n                                    g59 = 1;\n                                    v14 = v19;\n                                    v15 = v18;\n                                    goto lab_0x401bf0;\n                                } else {\n                                    int64_t v22 = function_408550((int64_t)g91, 0, 10, &g59, (int64_t *)&g21, v18); // 0x401f12\n                                    if ((int32_t)v22 != 0) {\n                                        goto lab_0x401f29;\n                                    } else {\n                                        // 0x401f1b\n                                        if (g59 != 0) {\n                                            goto lab_0x401bf0;\n                                        } else {\n                                            goto lab_0x401f29;\n                                        }\n                                    }\n                                }\n                            } else {\n                                if (v20 < 139) {\n                                    // 0x401e80\n                                    g55 = 1;\n                                    goto lab_0x401e87;\n                                } else {\n                                    if (v20 != 140) {\n                                        if (v20 != 141) {\n                                            // 0x401e73\n                                            function_404360(1);\n                                            // UNREACHABLE\n                                        }\n                                        int64_t v23 = g37; // 0x401d93\n                                        int64_t v24 = function_4053b0(\"--invalid\", (int64_t)g91, g7, (int64_t *)&g6, 4, v23); // 0x401da6\n                                        g70 = *(int32_t *)(4 * v24 + (int64_t)&g6);\n                                        v14 = v19;\n                                        v15 = v23;\n                                    } else {\n                                        // 0x401cfc\n                                        *(int64_t *)&g63 = (int64_t)g91;\n                                        v14 = v19;\n                                        v15 = v18;\n                                    }\n                                    goto lab_0x401bf0;\n                                }\n                            }\n                        } else {\n                            if (v20 == 134) {\n                                // 0x401ed8\n                                g68 = 1;\n                                v14 = v19;\n                                v15 = v18;\n                            } else {\n                                if (v20 < 134) {\n                                    // 0x401ec0\n                                    *(int64_t *)&g69 = (int64_t)g91;\n                                    v14 = v19;\n                                    v15 = v18;\n                                } else {\n                                    if (v20 != 135) {\n                                        if (v20 != 136) {\n                                            // 0x401e73\n                                            function_404360(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x401cbb\n                                        if (g90 != 0) {\n                                            // 0x40287d\n                                            format = dcgettext(NULL, \"multiple field specifications\", 5);\n                                            error(1, (int32_t)\"multiple field specifications\" ^ (int32_t)\"multiple field specifications\", format);\n                                            // 0x40289f\n                                            format2 = dcgettext(NULL, \"the delimiter must be a single character\", 5);\n                                            error(1, (int32_t)\"the delimiter must be a single character\" ^ (int32_t)\"the delimiter must be a single character\", format2);\n                                            return &g93;\n                                        }\n                                        // 0x401cc9\n                                        function_404b00((int64_t)g91, 1);\n                                        v14 = v19;\n                                        v15 = v18;\n                                    } else {\n                                        int64_t v25 = function_407e00((int64_t)g91, 0, 10, (int64_t *)&g65, (int64_t *)&g21); // 0x401c64\n                                        if ((int32_t)v25 != 0) {\n                                            goto lab_0x402849_2;\n                                        }\n                                        // 0x401c71\n                                        if (g65 == NULL) {\n                                            goto lab_0x402849_2;\n                                        }\n                                        // 0x401c81\n                                        v14 = v19;\n                                        v15 = v18;\n                                        if (g65 < NULL) {\n                                            // 0x401c87\n                                            g30 = 0;\n                                            g65 = (char *)-(int64_t)g65;\n                                            v14 = v19;\n                                            v15 = v18;\n                                        }\n                                    }\n                                }\n                            }\n                            goto lab_0x401bf0;\n                        }\n                    }\n                } else {\n                    if (v20 == 122) {\n                        // 0x401eb0\n                        *(char *)&g28 = 0;\n                        v14 = v19;\n                        v15 = v18;\n                    } else {\n                        if (v20 > 122) {\n                            if (v20 == 129) {\n                                // 0x401e98\n                                g34 = function_4029b0((int64_t)g91);\n                                v14 = v19;\n                                v15 = v18;\n                            } else {\n                                if (v20 > 129) {\n                                    if (v20 != 130) {\n                                        if (v20 != 131) {\n                                          lab_0x401e73:\n                                            // 0x401e73\n                                            function_404360(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x401dcb\n                                        g33 = function_4029b0((int64_t)g91);\n                                        v14 = v19;\n                                        v15 = v18;\n                                    } else {\n                                        int64_t v26 = g37; // 0x401d4b\n                                        int64_t v27 = function_4053b0(\"--to\", (int64_t)g91, g11, (int64_t *)&g10, 4, v26); // 0x401d5e\n                                        g72 = *(int32_t *)(4 * v27 + (int64_t)&g10);\n                                        v14 = v19;\n                                        v15 = v26;\n                                    }\n                                } else {\n                                    if (v20 != 128) {\n                                        // 0x401e73\n                                        function_404360(1);\n                                        // UNREACHABLE\n                                    }\n                                    int64_t v28 = g37; // 0x401e03\n                                    int64_t v29 = function_4053b0(\"--from\", (int64_t)g91, g13, (int64_t *)&g12, 4, v28); // 0x401e16\n                                    g74 = *(int32_t *)(4 * v29 + (int64_t)&g12);\n                                    v14 = v19;\n                                    v15 = v28;\n                                }\n                            }\n                        } else {\n                            if (v20 == -130) {\n                                // 0x4026de\n                                function_404360(0);\n                                // UNREACHABLE\n                            }\n                            if (v20 != 100) {\n                                if (v20 == -131) {\n                                    // 0x401fa0\n                                    function_407a10((int64_t)g49, \"numfmt\", \"GNU coreutils\", (int64_t)g36, \"Assaf Gordon\", 0);\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x401e73;\n                            }\n                            char v30 = *g91; // 0x401e47\n                            if (v30 != 0) {\n                                // 0x401e4e\n                                if (*(char *)((int64_t)g91 + 1) != 0) {\n                                    // 0x40289f\n                                    format2 = dcgettext(NULL, \"the delimiter must be a single character\", 5);\n                                    error(1, (int32_t)\"the delimiter must be a single character\" ^ (int32_t)\"the delimiter must be a single character\", format2);\n                                    return &g93;\n                                }\n                            }\n                            // 0x401e58\n                            g29 = v30;\n                            v14 = v19;\n                            v15 = v18;\n                        }\n                    }\n                    goto lab_0x401bf0;\n                }\n            }\n        }\n    }\n  lab_0x401fdf:;\n    // 0x401fdf\n    int64_t v33; // 0x401b60\n    if (g63 == NULL) {\n        goto lab_0x401ff6;\n    } else {\n        // 0x401fe9\n        v33 = v19;\n        if (g68 != 0) {\n            goto lab_0x402745;\n        } else {\n            goto lab_0x401ff6;\n        }\n    }\n  lab_0x401ff6:\n    if (v19 != 0) {\n        // 0x402008\n        goto lab_0x402008_2;\n    } else {\n        // 0x401ffb\n        if (g58 != 0) {\n            // 0x40254f\n            error(0, (int32_t)\"failed to set locale\" ^ (int32_t)\"failed to set locale\", dcgettext(NULL, \"failed to set locale\", 5));\n            // 0x402008\n            goto lab_0x402008_2;\n        } else {\n            goto lab_0x402008_2;\n        }\n    }\n  lab_0x402745:\n    // 0x402745\n    error(1, (int32_t)\"--grouping cannot be combined with --format\" ^ (int32_t)\"--grouping cannot be combined with --format\", dcgettext(NULL, \"--grouping cannot be combined with --format\", 5));\n    int64_t v34 = v33; // 0x402762\n    goto lab_0x402767;\n  lab_0x402008_2:;\n    // 0x402008\n    int64_t v39; // 0x401b60\n    if (g58 == 0) {\n        goto lab_0x402065;\n    } else {\n        // 0x402011\n        if ((g72 || g74) != 0) {\n            goto lab_0x402065;\n        } else {\n            int64_t v67 = (int64_t)g63; // 0x402026\n            if (g68 != 0) {\n                // 0x4025a6\n                v39 = v67;\n                if (g63 != NULL) {\n                    goto lab_0x402075;\n                } else {\n                    goto lab_0x40237d;\n                }\n            } else {\n                // 0x402033\n                if (g65 != NULL) {\n                    // 0x4026c2\n                    if (g63 != NULL) {\n                        goto lab_0x402075;\n                    } else {\n                        goto lab_0x4021af;\n                    }\n                } else {\n                    // 0x402041\n                    v39 = v67;\n                    if (g63 != NULL) {\n                        goto lab_0x402075;\n                    } else {\n                        // 0x402046\n                        error(0, (int32_t)\"no conversion option specified\" ^ (int32_t)\"no conversion option specified\", dcgettext(NULL, \"no conversion option specified\", 5));\n                        goto lab_0x402065;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x402767:\n    // 0x402767\n    error(1, (int32_t)\"grouping cannot be combined with --to\" ^ (int32_t)\"grouping cannot be combined with --to\", dcgettext(NULL, \"grouping cannot be combined with --to\", 5));\n    int64_t v35 = function_407590(v34); // 0x40278c\n    error(1, (int32_t)\"format %s has too many %% directives\" ^ (int32_t)\"format %s has too many %% directives\", dcgettext(NULL, \"format %s has too many %% directives\", 5));\n    int64_t v36 = function_407590(v35); // 0x4027bc\n    error(1, (int32_t)\"invalid format %s, directive must be %%[0]['][-][N][.][N]f\" ^ (int32_t)\"invalid format %s, directive must be %%[0]['][-][N][.][N]f\", dcgettext(NULL, \"invalid format %s, directive must be %%[0]['][-][N][.][N]f\", 5));\n    int64_t v37 = function_407590(v36); // 0x4027ec\n    error(1, (int32_t)\"format %s ends in %%\" ^ (int32_t)\"format %s ends in %%\", dcgettext(NULL, \"format %s ends in %%\", 5));\n    // 0x402819\n    function_407590(v37);\n    error(1, (int32_t)\"invalid precision in format %s\" ^ (int32_t)\"invalid precision in format %s\", dcgettext(NULL, \"invalid precision in format %s\", 5));\n  lab_0x402849_2:\n    // 0x402849\n    function_407590((int64_t)g91);\n    error(1, (int32_t)\"invalid padding value %s\" ^ (int32_t)\"invalid padding value %s\", dcgettext(NULL, \"invalid padding value %s\", 5));\n    // 0x40287d\n    format = dcgettext(NULL, \"multiple field specifications\", 5);\n    error(1, (int32_t)\"multiple field specifications\" ^ (int32_t)\"multiple field specifications\", format);\n    // 0x40289f\n    format2 = dcgettext(NULL, \"the delimiter must be a single character\", 5);\n    error(1, (int32_t)\"the delimiter must be a single character\" ^ (int32_t)\"the delimiter must be a single character\", format2);\n    return &g93;\n  lab_0x402065:;\n    int64_t v38 = (int64_t)g63; // 0x402065\n    v39 = v38;\n    if (g63 == NULL) {\n        // 0x4021a2\n        if (g68 != 0) {\n            // 0x402363\n            v34 = v38;\n            if (g72 != 0) {\n                goto lab_0x402767;\n            } else {\n                // 0x402370\n                if (g58 == 0) {\n                    goto lab_0x4021af;\n                } else {\n                    goto lab_0x40237d;\n                }\n            }\n        } else {\n            goto lab_0x4021af;\n        }\n    } else {\n        goto lab_0x402075;\n    }\n  lab_0x402075:\n    // 0x402075\n    v4 = v39;\n    char * endptr = NULL; // bp-64, 0x402075\n    int64_t v40 = 0; // 0x402083\n    int64_t v41 = 0; // 0x402083\n    while (true) {\n        int64_t v42 = v40;\n        char v43 = *(char *)(v42 + v4); // 0x40209c\n        int64_t v44; // 0x401b60\n        if (v43 != 37) {\n            // 0x402088\n            v44 = 1;\n            if (v43 == 0) {\n                // break -> 0x4026e5\n                break;\n            }\n        } else {\n            // 0x4020a5\n            v44 = 2;\n            v2 = v42;\n            if (*(char *)(v42 + v4 + 1) != 37) {\n                goto lab_0x4023c0;\n            }\n        }\n        // 0x402095\n        v40 = v44 + v42;\n        v41++;\n    }\n    int64_t v45 = function_407590(v4); // 0x4026e8\n    error(1, (int32_t)\"format %s has no %% directive\" ^ (int32_t)\"format %s has no %% directive\", dcgettext(NULL, \"format %s has no %% directive\", 5));\n    int64_t v46 = function_407590(v45); // 0x402718\n    error(1, (int32_t)\"invalid format %s (width overflow)\" ^ (int32_t)\"invalid format %s (width overflow)\", dcgettext(NULL, \"invalid format %s (width overflow)\", 5));\n    v33 = v46;\n    goto lab_0x402745;\n  lab_0x4021af:;\n    uint64_t v47 = (int64_t)g65; // 0x4021af\n    if (g66 <= v47) {\n        // 0x402359\n        function_402bd0(v47);\n    }\n    // 0x4021c3\n    g60 = g65 == NULL == g29 == 128;\n    if (g70 != 0) {\n        // 0x4021ed\n        g31 = 0;\n    }\n    int64_t v48 = (int64_t)*(int32_t *)0x6102fc; // 0x4021f7\n    int64_t v49; // 0x401b60\n    if (v21 > v48) {\n        int64_t v50 = v48; // 0x40231a\n        if (g58 != 0) {\n            // 0x40231c\n            v50 = v48;\n            if (g59 != 0) {\n                // 0x402573\n                error(0, (int32_t)\"--header ignored with command-line input\" ^ (int32_t)\"--header ignored with command-line input\", dcgettext(NULL, \"--header ignored with command-line input\", 5));\n                int64_t v51 = g46; // 0x402592\n                v50 = v51;\n                if (v21 <= v51) {\n                    // 0x402304\n                    return 0;\n                }\n            }\n        }\n        int64_t v52 = 1; // 0x40232f\n        v52 &= function_4041a0(*(int64_t *)((0x100000000 * v50 >> 29) + a2), 1);\n        g46 = &g47;\n        v49 = v52;\n        int64_t v53 = &g47; // 0x402355\n        while (v21 > (int64_t)&g47) {\n            // 0x402330\n            v52 &= function_4041a0(*(int64_t *)((0x100000000 * v53 >> 29) + a2), 1);\n            g46 = &g47;\n            v49 = v52;\n            v53 = &g47;\n        }\n    } else {\n        int64_t v54 = g59; // 0x402206\n        char * lineptr = NULL; // bp-72, 0x402217\n        endptr = NULL;\n        g59 = v54 - 1;\n        if (v54 != 0) {\n            unsigned char delim = *(char *)&g28; // 0x402268\n            int32_t v55 = getdelim(&lineptr, (int32_t *)&endptr, (int32_t)delim, g50); // 0x40227c\n            while (v55 >= 0 == (v55 != 0)) {\n                // 0x402240\n                fputs_unlocked(lineptr, g49);\n                int64_t v56 = g59; // 0x402251\n                g59 = v56 - 1;\n                if (v56 == 0) {\n                    // break -> 0x402286\n                    break;\n                }\n                delim = *(char *)&g28;\n                v55 = getdelim(&lineptr, (int32_t *)&endptr, (int32_t)delim, g50);\n            }\n        }\n        unsigned char delim2 = *(char *)&g28; // 0x4022bf\n        int32_t v57 = getdelim(&lineptr, (int32_t *)&endptr, (int32_t)delim2, g50); // 0x4022d3\n        int64_t v58 = 1; // 0x4022db\n        if (v57 >= 0 == (v57 != 0)) {\n            int64_t v59 = (int64_t)lineptr; // 0x402290\n            unsigned char v60 = *(char *)&g28; // 0x40229a\n            char * v61 = (char *)((int64_t)v57 - 1 + v59); // 0x4022a1\n            char v62 = *v61; // 0x4022a1\n            int64_t v63 = v59; // 0x4022aa\n            if ((int32_t)v62 == (int32_t)v60) {\n                // 0x4022ac\n                *v61 = 0;\n                v63 = (int64_t)lineptr;\n            }\n            int64_t v64 = function_4041a0(v63, (int64_t)((int32_t)v62 == (int32_t)v60)) & 1;\n            unsigned char delim3 = *(char *)&g28; // 0x4022bf\n            int32_t v65 = getdelim(&lineptr, (int32_t *)&endptr, (int32_t)delim3, g50); // 0x4022d3\n            int64_t v66 = v64; // 0x4022db\n            v58 = v64;\n            while (v65 >= 0 == (v65 != 0)) {\n                // 0x402290\n                v59 = (int64_t)lineptr;\n                v60 = *(char *)&g28;\n                v61 = (char *)((int64_t)v65 - 1 + v59);\n                v62 = *v61;\n                v63 = v59;\n                if ((int32_t)v62 == (int32_t)v60) {\n                    // 0x4022ac\n                    *v61 = 0;\n                    v63 = (int64_t)lineptr;\n                }\n                // 0x4022b4\n                v64 = function_4041a0(v63, (int64_t)((int32_t)v62 == (int32_t)v60)) & v66;\n                delim3 = *(char *)&g28;\n                v65 = getdelim(&lineptr, (int32_t *)&endptr, (int32_t)delim3, g50);\n                v66 = v64;\n                v58 = v64;\n            }\n        }\n        // 0x4022dd\n        v49 = v58;\n        if ((*(char *)g50 & 32) != 0) {\n            // 0x4025c8\n            error(0, *__errno_location(), dcgettext(NULL, \"error reading input\", 5));\n            v49 = v58;\n        }\n    }\n    // 0x4022ed\n    if (g58 == 0) {\n        // 0x40250a\n        if ((int32_t)v49 != 0) {\n            // 0x402304\n            return 0;\n        }\n        // 0x402304\n        return (g70 | 1) == 3 ? 0 : 2;\n    }\n    // 0x4022fa\n    if ((int32_t)v49 != 0) {\n        // 0x402304\n        return 0;\n    }\n    // 0x40252e\n    error(0, (int32_t)\"failed to convert some of the input numbers\" ^ (int32_t)\"failed to convert some of the input numbers\", dcgettext(NULL, \"failed to convert some of the input numbers\", 5));\n    // 0x402304\n    return (g70 | 1) == 3 ? 0 : 2;\n  lab_0x40237d:\n    // 0x40237d\n    if (*nl_langinfo(0x10001) == 0) {\n        // 0x402390\n        error(0, (int32_t)\"grouping has no effect in this locale\" ^ (int32_t)\"grouping has no effect in this locale\", dcgettext(NULL, \"grouping has no effect in this locale\", 5));\n    }\n    goto lab_0x4021af;\n  lab_0x4023c0_2:;\n    int32_t ini_seg_bytes = strspn((char *)str, \" \"); // 0x4023c8\n    int64_t v6 = v5 + (int64_t)ini_seg_bytes; // 0x4023cd\n    int64_t v7 = v6 + v4; // 0x4023d0\n    char * str2 = (char *)v7;\n    v2 = v6;\n    int64_t v8; // 0x401b60\n    int64_t v9; // 0x401b60\n    switch (*str2) {\n        case 39: {\n            // 0x4024e0\n            g68 = 1;\n            int64_t v10 = v6 + 1; // 0x4024ea\n            v9 = v10 + v4;\n            v8 = v10;\n            goto lab_0x4023c0_3;\n        }\n        case 48: {\n            goto lab_0x4023c0;\n        }\n        default: {\n            // 0x4023e9\n            v9 = v7;\n            v8 = v6;\n            if (ini_seg_bytes != 0) {\n                goto lab_0x4023c0_3;\n            } else {\n                // 0x4023ee\n                *__errno_location() = 0;\n                strtol(str2, &endptr, 10);\n            }\n        }\n    }\n  lab_0x4023c0_3:\n    // 0x4023c0\n    str = v9;\n    v5 = v8;\n    goto lab_0x4023c0_2;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4028d0",
            "funcEndAddr": "4028fb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4028d0\n    int64_t v1; // 0x4028d0\n    __libc_start_main(0x401b60, (int32_t)a4, (char **)&v1, (void (*)())0x409f30, (void (*)())0x409f90, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4028fb",
            "funcStartAddr": "4028fb",
            "funcEndAddr": "40291a",
            "decompiledFuncCode": "int64_t function_4028fb(void) {\n    // 0x4028fb\n    return &g48;\n}\n"
        },
        {
            "funcName": "function_40291a",
            "funcStartAddr": "40291a",
            "funcEndAddr": "402951",
            "decompiledFuncCode": "int64_t function_40291a(void) {\n    // 0x40291a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402951",
            "funcStartAddr": "402951",
            "funcEndAddr": "4029a8",
            "decompiledFuncCode": "int64_t function_402951(void) {\n    // 0x402951\n    if (g53 != 0) {\n        // 0x4029a7\n        int64_t result; // 0x402951\n        return result;\n    }\n    int64_t v1 = g54; // 0x402984\n    int64_t result2; // 0x402996\n    if (g54 >= ((int64_t)&g25 - (int64_t)&g24 >> 3) - 1) {\n        // 0x402996\n        result2 = function_4028fb();\n        g53 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g25 - (int64_t)&g24 >> 3) - 1) {\n        // 0x402986\n        v1++;\n    }\n    // 0x40297a\n    g54 = v1;\n    // 0x402996\n    result2 = function_4028fb();\n    g53 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4029a8",
            "funcStartAddr": "4029a8",
            "funcEndAddr": "4029ad",
            "decompiledFuncCode": "int64_t function_4029a8(void) {\n    // 0x4029a8\n    return function_40291a();\n}\n"
        },
        {
            "funcName": "function_4029b0",
            "funcStartAddr": "4029b0",
            "funcEndAddr": "402bc9",
            "decompiledFuncCode": "int64_t function_4029b0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x4029bb\n    char * v1 = NULL; // bp-40, 0x4029c0\n    int64_t v2 = (int64_t)\"KMGTPEZY\"; // 0x4029cb\n    int64_t v3 = str; // 0x4029cb\n    int64_t v4 = 0; // 0x4029cb\n    int64_t v5; // 0x402a44\n    int64_t v6; // 0x402a4f\n    int64_t dest_mem; // 0x402a59\n    int64_t v7; // 0x4029bb\n    if (len == 0) {\n        goto lab_0x4029ed;\n    } else {\n        // 0x4029cd\n        v7 = len;\n        int64_t v8 = v7 - 1;\n        char v9 = *(char *)(v8 + str); // 0x4029d4\n        v2 = (int64_t)\"KMGTPEZY\";\n        v3 = str;\n        v4 = 0;\n        if (v9 == 57 || (int32_t)v9 < 57) {\n            goto lab_0x4029ed;\n        } else {\n            // 0x402a40\n            v5 = function_407b50(v7 + 2);\n            v6 = v5 + v8;\n            char * v10 = (char *)v6; // 0x402a55\n            v1 = v10;\n            dest_mem = (int64_t)memcpy((int64_t *)v5, (int64_t *)str, len);\n            if (len == 1 | *v10 != 105) {\n                goto lab_0x402a90;\n            } else {\n                char v11 = *(char *)(v6 - 1); // 0x402a6e\n                if (v11 == 57 || (int32_t)v11 < 57) {\n                    goto lab_0x402a90;\n                } else {\n                    // 0x402a7c\n                    *v10 = 0;\n                    v2 = (int64_t)\"KMGTPEZY\";\n                    v3 = dest_mem;\n                    v4 = dest_mem;\n                    goto lab_0x4029ed;\n                }\n            }\n        }\n    }\n  lab_0x402b35:;\n    // 0x402b35\n    int64_t v12; // 0x4029b0\n    uint32_t v13 = (int32_t)v12; // 0x402b35\n    int64_t v14; // 0x4029b0\n    int64_t v15 = v14; // 0x402b39\n    int64_t result; // 0x4029b0\n    int3_t v16; // 0x402b1e\n    if (v13 >= 19) {\n        // 0x402b3b\n        v15 = 1;\n        if (v13 >= 28) {\n            // 0x402bc0\n            __frontend_reg_store_fpr(v16, __frontend_reg_load_fpr(v16));\n            result = 2;\n            return result;\n        }\n    }\n    // 0x402b46\n    int64_t v17; // 0x4029b0\n    int64_t v18 = v17 + 1;\n    int3_t v19; // 0x402b20\n    __frontend_reg_store_fpr(v19, 10.0L);\n    *(int64_t *)1 = v18;\n    __frontend_reg_store_fpr(v16, __frontend_reg_load_fpr(v19) * __frontend_reg_load_fpr(v16));\n    int64_t v20; // 0x4029b0\n    __frontend_reg_store_fpr(v19, (float80_t)(int32_t)v20);\n    __frontend_reg_store_fpr(v16, __frontend_reg_load_fpr(v19) + __frontend_reg_load_fpr(v16));\n    int3_t v21 = v16; // 0x402b5e\n    int64_t v22 = v15; // 0x402b5e\n    if (v18 == 0) {\n        // break -> 0x402b9d\n        goto lab_0x402b9d_3;\n    }\n    int64_t v23 = (int64_t)*(char *)v18 + 0xffffffd0; // 0x402b67\n    v14 = v15;\n    v17 = v18;\n    int64_t v24 = v23; // 0x402b6d\n    int64_t v25 = v12; // 0x402b6d\n    v21 = v16;\n    v22 = v15;\n    if ((int32_t)v23 >= 10) {\n        // break -> 0x402b9d\n        goto lab_0x402b9d_3;\n    }\n    goto lab_0x402b20;\n  lab_0x4029ed:;\n    int64_t v27 = v3;\n    int64_t result2; // bp-32, 0x4029b0\n    int64_t v28 = function_408550(v27, (int32_t)(int64_t)&v1, 10, &result2, (int64_t *)v2, v27); // 0x4029fd\n    if ((int32_t)v28 == 0) {\n        // 0x402a0a\n        if (*v1 == 0) {\n            // 0x402a17\n            if (result2 != 0) {\n                // 0x402a25\n                free((int64_t *)v4);\n                return result2;\n            }\n        }\n    }\n    // 0x402ab2\n    free((int64_t *)v4);\n    function_407590(str);\n    char * format = dcgettext(NULL, \"invalid unit size: %s\", 5); // 0x402ad1\n    error(1, (int32_t)\"invalid unit size: %s\" ^ (int32_t)\"invalid unit size: %s\", format);\n    int64_t v29 = *(int64_t *)1; // 0x402afc\n    char * str2 = (char *)v29;\n    int3_t v30; // 0x4029b0\n    if (v29 == 0) {\n        goto lab_0x402b78;\n    } else {\n        int64_t v31 = (int64_t)*str2 + 0xffffffd0; // 0x402b07\n        if ((int32_t)v31 < 10) {\n            // 0x402b0f\n            v16 = v30 - 1;\n            __frontend_reg_store_fpr(v16, 0.0L);\n            v19 = v30 - 2;\n            v14 = 0;\n            v17 = v29;\n            v24 = v31;\n            v25 = 0;\n            while (true) {\n              lab_0x402b20:;\n                int64_t v26 = v25;\n                v20 = v24;\n                __frontend_reg_store_fpr(v19, 0.0L);\n                if (__frontend_reg_load_fpr(v19) != __frontend_reg_load_fpr(v16)) {\n                    // 0x402bb0\n                    v12 = v26 + 1 & 0xffffffff;\n                    goto lab_0x402b35;\n                } else {\n                    // 0x402b31\n                    v12 = v26;\n                    if ((int32_t)v20 != 0) {\n                        // 0x402bb0\n                        v12 = v26 + 1 & 0xffffffff;\n                        goto lab_0x402b35;\n                    } else {\n                        goto lab_0x402b35;\n                    }\n                }\n            }\n            goto lab_0x402b9d_3;\n        } else {\n            goto lab_0x402b78;\n        }\n    }\n  lab_0x402b78:\n    // 0x402b78\n    if (strncmp(str2, g57, g56) != 0) {\n        // 0x402ba7\n        return 3;\n    }\n    int3_t v32 = v30 - 1; // 0x402b9b\n    __frontend_reg_store_fpr(v32, 0.0L);\n    v21 = v32;\n    v22 = 0;\n    goto lab_0x402b9d_3;\n  lab_0x402b9d_3:;\n    int3_t v33 = v21;\n    if (*format != 0) {\n        // 0x402ba2\n        __frontend_reg_store_fpr(v33, -__frontend_reg_load_fpr(v33));\n    }\n    float80_t v34 = __frontend_reg_load_fpr(v33); // 0x402ba4\n    *(float80_t *)((int32_t)\"invalid unit size: %s\" ^ (int32_t)\"invalid unit size: %s\") = v34;\n    result = v22;\n    // 0x402ba7\n    return result;\n  lab_0x402a90:\n    // 0x402a90\n    v1 = (char *)(v6 + 2);\n    *(int16_t *)(v5 + v7) = 66;\n    v2 = (int64_t)\"KMGTPEZY0\";\n    v3 = dest_mem;\n    v4 = dest_mem;\n    goto lab_0x4029ed;\n}\n"
        },
        {
            "funcName": "function_402bd0",
            "funcStartAddr": "402bd0",
            "funcEndAddr": "402bf7",
            "decompiledFuncCode": "int64_t function_402bd0(int64_t a1) {\n    int64_t v1 = a1 + 1; // 0x402bd4\n    g66 = v1;\n    int64_t result = function_407bb0((int64_t)g67, v1); // 0x402be6\n    g67 = (char *)result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402c00",
            "funcStartAddr": "402c00",
            "funcEndAddr": "4041a0",
            "decompiledFuncCode": "int64_t function_402c00(int64_t str, uint64_t a2, int64_t a3, int64_t a4) {\n    // 0x402c00\n    int128_t v1; // 0x402c00\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    float80_t v4; // 0x402c00\n    float80_t v5 = v4;\n    if (g89 != 0) {\n        int64_t v6 = *(int64_t *)g89; // 0x402c37\n        if (v6 != -1) {\n            if (v6 <= a2) {\n                // 0x402c2d\n                if (*(int64_t *)(g89 + 8) >= a2) {\n                    goto lab_0x402c76;\n                }\n            }\n            int64_t v7 = g89 + 16; // 0x402c33\n            int64_t v8 = *(int64_t *)v7; // 0x402c37\n            while (v8 != -1) {\n                int64_t v9 = v7;\n                if (v8 <= a2) {\n                    // 0x402c2d\n                    if (*(int64_t *)(v9 + 8) >= a2) {\n                        goto lab_0x402c76;\n                    }\n                }\n                // 0x402c33\n                v7 = v9 + 16;\n                v8 = *(int64_t *)v7;\n            }\n        }\n        // 0x402c40\n        fputs_unlocked((char *)str, g49);\n        // 0x402c54\n        return 1;\n    }\n    if (a2 != 1) {\n        // 0x402c40\n        fputs_unlocked((char *)str, g49);\n        // 0x402c54\n        return 1;\n    }\n  lab_0x402c76:;\n    // 0x402c76\n    int64_t v10; // 0x402c00\n    if (g69 != NULL) {\n        int32_t len = strlen((char *)str); // 0x402c85\n        int32_t len2 = strlen(g69); // 0x402c90\n        if (len > len2) {\n            char * str2 = (char *)((int64_t)len + str - (int64_t)len2); // 0x402ca6\n            if (strcmp(g69, str2) != 0) {\n                if (g55 != 0) {\n                    // 0x403447\n                    fwrite((int64_t *)\"no valid suffix found\\n\", 1, 22, g52);\n                    v10 = (int64_t)g52;\n                }\n            } else {\n                // 0x402cba\n                *str2 = 0;\n                if (g55 != 0) {\n                    int64_t v11 = function_407590((int64_t)g69); // 0x4035d7\n                    __fprintf_chk(g52, 1, \"trimming suffix %s\\n\", (char *)v11);\n                    v10 = v11;\n                }\n            }\n        }\n    }\n    // 0x402cc8\n    int64_t v12; // 0x402c00\n    char v13 = *(char *)&v12; // 0x402cc8\n    int64_t v14 = str; // 0x402ccf\n    int64_t v15 = 0; // 0x402ccf\n    if (v13 != 0) {\n        int16_t * v16 = *__ctype_b_loc(); // 0x402cdd\n        char v17 = v13; // 0x402ce0\n        int64_t v18 = str; // 0x402ce0\n        int64_t v19 = v18; // 0x402cf9\n        while (*(char *)(2 * (int64_t)v17 + (int64_t)v16) % 2 != 0) {\n            // 0x402ce8\n            v18++;\n            v17 = *(char *)v18;\n            v19 = v18;\n            if (v17 == 0) {\n                // break -> 0x402cfb\n                break;\n            }\n            v19 = v18;\n        }\n        // 0x402cfb\n        v14 = v19;\n        v15 = str - v19 & 0xffffffff;\n    }\n    // 0x402d01\n    int64_t v20; // 0x402c00\n    int64_t v21; // 0x402c00\n    int32_t v22; // 0x402c00\n    float32_t v23; // bp-360, 0x402c00\n    int80_t v24; // 0x402c00\n    if (g60 == 0) {\n        goto lab_0x402fcd;\n    } else {\n        // 0x402d0f\n        if (a2 > 1 || v15 != 0) {\n            uint64_t len3 = (int64_t)strlen((char *)str); // 0x403133\n            g65 = (char *)len3;\n            if (g66 <= len3) {\n                // 0x40314c\n                function_402bd0(len3);\n            }\n        } else {\n            // 0x402d21\n            g65 = NULL;\n        }\n        // 0x402d2c\n        if (g55 != 0) {\n            // 0x402fae\n            __fprintf_chk(g52, 1, \"setting Auto-Padding to %ld characters\\n\", (int32_t)(int64_t)g65);\n            goto lab_0x402fcd;\n        } else {\n            // 0x402d39\n            v23 = (int32_t)__asm_movss(__asm_pxor(v2, v2));\n            v24 = v3;\n            v22 = g74;\n            v21 = v10;\n            v20 = g74 < 5 ? 1024 : 1000;\n            goto lab_0x402d64;\n        }\n    }\n  lab_0x402fcd:;\n    int64_t v25 = g74; // 0x402fcd\n    int128_t v26 = __asm_pxor(v3, v3); // 0x402fd3\n    int64_t v27 = 0; // bp-264, 0x402fde\n    v23 = (int32_t)__asm_movss(v26);\n    int80_t v28 = v26;\n    v24 = v28;\n    v22 = g74;\n    v21 = v25;\n    v20 = (-(int32_t)((int32_t)&g73 < 2) & 24) + 1000;\n    if (g55 != 0) {\n        int64_t v29 = function_407570(1, (int64_t *)g57, (int64_t)&g73, v25); // 0x40301c\n        int64_t v30 = function_407570(0, (int64_t *)v14, (int64_t)&g73, v25); // 0x403029\n        __fprintf_chk(g52, 1, \"simple_strtod_human:\\n  input string: %s\\n  locale decimal-point: %s\\n  MAX_UNSCALED_DIGITS: %d\\n\", (char *)v30, (char *)v29, 18);\n        v24 = v28;\n        v22 = g74;\n        v21 = v30;\n        v20 = (-(int32_t)((int32_t)&g73 < 2) & 24) + 1000;\n    }\n    goto lab_0x402d64;\n  lab_0x402d64:;\n    int64_t v31 = &v23; // 0x402c10\n    char v32 = *(char *)v14; // 0x402d66\n    int64_t str3 = v14 + (int64_t)(v32 == 45);\n    v12 = &v27;\n    v27 = str3;\n    int64_t v33 = str3 & 0xffffffff; // 0x402d96\n    uint32_t v34 = (int32_t)str3; // 0x402d98\n    int64_t v35; // 0x402c00\n    int64_t v36; // 0x402c00\n    int64_t v37; // 0x402c00\n    int64_t v38; // 0x402c00\n    float80_t v39; // 0x402c00\n    if (v34 < 2) {\n        // 0x402da1\n        v12 = str3;\n        v35 = 0;\n        if (strncmp((char *)str3, g57, g56) == 0) {\n            int64_t v40 = str3 + (int64_t)g56; // 0x403063\n            v27 = v40;\n            char v41 = *(char *)v40; // 0x403072\n            int64_t v42 = v41 == 45;\n            int64_t v43 = v40 + v42;\n            int64_t v44; // bp-256, 0x402c00\n            v12 = &v44;\n            v44 = v43;\n            if (v41 == 45) {\n                goto lab_0x4036e4;\n            } else {\n                // 0x4030fb\n                v27 = v43;\n                v39 = v4 + (v32 == 45 ? -v5 : v5);\n                v35 = v42;\n                goto lab_0x402dca;\n            }\n        } else {\n            goto lab_0x402dca;\n        }\n    } else {\n        // 0x4031b3\n        g94 = v33;\n        v38 = (int64_t)\"value too large to be converted: %s\";\n        v37 = v33;\n        v36 = 0;\n        switch (v34) {\n            case 2: {\n                goto lab_0x4034ed;\n            }\n            case 3: {\n                goto lab_0x4036e4;\n            }\n            case 4: {\n                // 0x4035fc\n                v38 = (int64_t)\"rejecting suffix in input: %s (consider using --from)\";\n                v37 = v33;\n                v36 = 0;\n                goto lab_0x4034ed;\n            }\n            case 5: {\n                // 0x403551\n                v38 = (int64_t)\"invalid suffix in input: %s\";\n                v37 = v33;\n                v36 = 0;\n                goto lab_0x4034ed;\n            }\n            case 6: {\n                // 0x40361a\n                v38 = (int64_t)\"missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)\";\n                v37 = v33;\n                v36 = 0;\n                goto lab_0x4034ed;\n            }\n            default: {\n                // 0x403687\n                v38 = 0;\n                v37 = v33;\n                v36 = 0;\n                goto lab_0x4034ed;\n            }\n        }\n    }\n  lab_0x402dca:;\n    int64_t v45 = v21; // 0x402dd1\n    if (g55 != 0) {\n        // 0x403414\n        v12 = (int64_t)g52;\n        __fprintf_chk(g52, 1, \"  parsed numeric value: %Lf\\n  input precision = %d\\n\", (float80_t)(int80_t)v1, v35);\n        v45 = v35;\n    }\n    int64_t v46 = v27; // 0x402dd7\n    unsigned char v47 = *(char *)v46; // 0x402ddc\n    int64_t v48; // 0x402c00\n    int64_t v49; // 0x402c00\n    int64_t v50; // 0x402c00\n    int64_t v51; // 0x402c00\n    int64_t v52; // 0x402c00\n    int64_t v53; // 0x402c00\n    int64_t v54; // 0x402c00\n    int64_t v55; // 0x402c00\n    int64_t v56; // 0x402c00\n    int64_t v57; // 0x402c00\n    int64_t v58; // 0x402c00\n    int64_t v59; // 0x402c00\n    int64_t v60; // 0x402c00\n    int64_t v61; // 0x402c00\n    if (v47 == 0) {\n        // 0x4033f8\n        v38 = (int64_t)\"missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)\";\n        v37 = 6;\n        v36 = v35;\n        if (v22 == 4) {\n            goto lab_0x4034ed;\n        } else {\n            // 0x403403\n            v57 = v45;\n            v60 = g55;\n            v55 = v20;\n            v61 = v31;\n            v53 = v33;\n            v52 = 0;\n            v48 = str;\n            v49 = v14;\n            v50 = v35;\n            goto lab_0x402eb4;\n        }\n    } else {\n        int16_t * v62 = *__ctype_b_loc(); // 0x402df6\n        v58 = v47;\n        if (*(char *)(2 * v58 + (int64_t)v62) % 2 != 0) {\n            int64_t v63; // 0x402c00\n            v27 = v63;\n            int64_t v64; // 0x402df6\n            while (*(char *)(2 * (int64_t)*(char *)v63 + v64) % 2 != 0) {\n                int64_t v65 = v63;\n                v27 = v65;\n                unsigned char v66 = *(char *)v65; // 0x402e05\n                int64_t v67 = v66;\n                int64_t v68 = v65 + 1; // 0x402e10\n                unsigned char v69 = *(char *)(2 * v67 + v64); // 0x402e14\n                v63 = v68;\n            }\n        }\n        // 0x402e1a\n        v12 = (int64_t)\"KMGTPEZY\";\n        uint32_t c = (int32_t)v47; // 0x402e22\n        v38 = (int64_t)\"invalid suffix in input: %s\";\n        v37 = 5;\n        v36 = v35;\n        if (strchr(\"KMGTPEZY\", c) == NULL) {\n            goto lab_0x4034ed;\n        } else {\n            // 0x402e34\n            v38 = (int64_t)\"rejecting suffix in input: %s (consider using --from)\";\n            v37 = 4;\n            v36 = v35;\n            if (v22 == 0) {\n                goto lab_0x4034ed;\n            } else {\n                int64_t v70 = v46 + 1;\n                uint32_t v71 = c % 256 - 69; // 0x402e4a\n                v51 = 0;\n                if ((char)v71 < 22) {\n                    uint32_t v72 = *(int32_t *)((4 * (int64_t)v71 & 1020) + (int64_t)&g4); // 0x402e55\n                    v51 = v72;\n                }\n                // 0x402e5d\n                v27 = v70;\n                switch (v22) {\n                    case 1: {\n                        int64_t v73 = g55; // 0x403c6d\n                        v56 = v58;\n                        v59 = v73;\n                        v54 = v20;\n                        if (*(char *)v70 == 105) {\n                            // 0x403de1\n                            v27 = v46 + 2;\n                            v56 = v58;\n                            v59 = v73;\n                            v54 = 1024;\n                            if (g55 != 0) {\n                                // 0x403ffe\n                                v12 = (int64_t)g52;\n                                __fprintf_chk(g52, 1, \"  Auto-scaling, found 'i', switching to base %d\\n\", 1024);\n                                v56 = 1024;\n                                v59 = g55;\n                                v54 = 1024;\n                            }\n                        }\n                        goto lab_0x402e8b;\n                    }\n                    case 4: {\n                        // 0x40352e\n                        v38 = (int64_t)\"missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)\";\n                        v37 = 6;\n                        v36 = 0;\n                        if (*(char *)v70 != 105) {\n                            goto lab_0x4034ed;\n                        } else {\n                            // 0x403539\n                            v27 = v46 + 2;\n                            goto lab_0x402e7c;\n                        }\n                    }\n                    default: {\n                        goto lab_0x402e7c;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4034ed:;\n    int64_t v74 = v31; // 0x4034f4\n    int64_t v75 = v37; // 0x4034f4\n    int64_t v76 = str; // 0x4034f4\n    int64_t v77 = v36; // 0x4034f4\n    if (g70 != 3) {\n        // 0x4034fa\n        function_407590(v14);\n        v12 = g31;\n        error(g31, 0, dcgettext(NULL, (char *)v38, 5));\n        v74 = v31;\n        v75 = v37;\n        v76 = str;\n        v77 = v36;\n    }\n    goto lab_0x402f40;\n  lab_0x4036e4:\n    // 0x4036e4\n    v38 = (int64_t)\"invalid number: %s\";\n    v37 = 3;\n    v36 = 0;\n    goto lab_0x4034ed;\n  lab_0x402f40:;\n    int64_t v78 = v76;\n    int64_t v79 = v74;\n    float80_t v80; // 0x402c00\n    float80_t v81 = v80;\n    float80_t v82; // 0x402c00\n    float80_t v83 = v82; // 0x402f56\n    if (g34 != 1 || g33 != 1) {\n        // 0x402f5c\n        *(int64_t *)(v79 + 16) = (int64_t)g33;\n        float80_t v84 = g33; // 0x402f77\n        v83 = g33 < 0 ? v84 + 18446744073709551616.0L : v84;\n    }\n    if ((int32_t)v75 >= 2) {\n        // 0x402f98\n        fputs_unlocked((char *)v78, g49);\n        // 0x402c54\n        return 0;\n    }\n    // 0x4031d0\n    if (v83 >= -1.18973e+4932L) {\n        while (true) {\n            // continue -> 0x403210\n        }\n    }\n    int32_t v85 = g32; // 0x4031d0\n    uint64_t v86 = v85 != -1 ? (int64_t)v85 : v77; // 0x4031e3\n    if (v86 >= 19 && g72 == 0) {\n        // 0x403691\n        if (g70 != 3) {\n            float80_t * v87 = (float80_t *)v79; // 0x4036a4\n            *v87 = -1.18973e+4932L;\n            char * format = dcgettext(NULL, \"value/precision too large to be printed: '%Lg/%lu' (consider using --to)\", 5); // 0x4036bc\n            *(float80_t *)(v79 - 16) = *v87;\n            error(g31, (int32_t)\"value/precision too large to be printed: '%Lg/%lu' (consider using --to)\" ^ (int32_t)\"value/precision too large to be printed: '%Lg/%lu' (consider using --to)\", format);\n        }\n        // 0x402f98\n        fputs_unlocked((char *)v78, g49);\n        // 0x402c54\n        return 0;\n    }\n    int64_t v88 = v79 + 112; // 0x4032b2\n    char * v89 = (char *)v88; // 0x4032b2\n    *v89 = 37;\n    int64_t v90 = v79 + 113; // 0x4032bc\n    int64_t v91 = v90; // 0x4032cb\n    if (g68 != 0) {\n        // 0x4032cd\n        *(char *)v90 = 39;\n        v91 = v79 + 114;\n    }\n    int64_t v92 = v91;\n    float80_t v93 = -1.18973e+4932L; // 0x4032e0\n    int64_t v94 = v92; // 0x4032e0\n    if (g64 != 0) {\n        // 0x403656\n        v12 = v92;\n        float80_t * v95 = (float80_t *)(v79 + 16); // 0x403670\n        *v95 = -1.18973e+4932L;\n        int32_t v96 = __snprintf_chk((char *)v92, 62, 1, 63, \"0%ld\", g64); // 0x403674\n        v93 = *v95;\n        v94 = v92 + (int64_t)v96;\n    }\n    int64_t v97 = v94;\n    float80_t v98 = v93;\n    float80_t v99 = v98; // 0x4032ef\n    if (g55 != 0) {\n        // 0x403627\n        v12 = (int64_t)\"double_to_human:\\n\";\n        float80_t * v100 = (float80_t *)(v79 + 16); // 0x40363d\n        *v100 = v98;\n        fwrite((int64_t *)\"double_to_human:\\n\", 1, 17, g52);\n        v99 = *v100;\n    }\n    float80_t v101 = v99;\n    int64_t * v102; // 0x402c00\n    int64_t v103; // 0x402c00\n    int64_t v104; // 0x402c00\n    int32_t v105; // 0x402c00\n    int64_t v106; // 0x402c00\n    int64_t v107; // 0x402c00\n    int64_t v108; // 0x402c00\n    int64_t v109; // 0x402c00\n    int64_t v110; // 0x402c00\n    float80_t v111; // 0x402c00\n    float80_t * v112; // 0x402c00\n    float80_t v113; // 0x402c00\n    float80_t v114; // 0x402c00\n    float80_t v115; // 0x402c00\n    float80_t v116; // 0x402c00\n    float80_t v117; // 0x402c00\n    float80_t v118; // 0x402c00\n    float80_t v119; // 0x402c00\n    float80_t v120; // 0x402c00\n    float80_t v121; // 0x402c00\n    float80_t v122; // 0x402c00\n    float80_t v123; // 0x402c00\n    float80_t v124; // 0x402c00\n    float80_t v125; // 0x402c00\n    float80_t v126; // 0x402c00\n    float80_t v127; // 0x402c00\n    float80_t v128; // 0x403f06\n    int64_t v129; // 0x4032ac\n    int80_t v130; // 0x402c00\n    int80_t v131; // 0x402c00\n    int80_t v132; // 0x402c00\n    if (g72 == 0) {\n        int32_t v133 = v86; // 0x40355e\n        int64_t v134; // 0x402c00\n        int64_t result; // 0x402c00\n        float80_t v135; // 0x402c00\n        float80_t v136; // 0x402c00\n        float80_t v137; // 0x402c00\n        if (v133 == 0) {\n            uint16_t v138 = *(int16_t *)(v79 + 78) | 3072;\n            *(int16_t *)(v79 + 76) = v138;\n            int64_t v139 = v79 + 16;\n            *(int64_t *)v139 = (int64_t)(v101 / 9.22337e+18L);\n            result = v138;\n            v134 = v139;\n            v135 = v101;\n            v136 = 0.0L;\n            v137 = v81;\n            if (g35 < 5) {\n                // 0x402c54\n                return result;\n            }\n        } else {\n            int32_t v140 = v133 - 1; // 0x40356a\n            int64_t v141 = v140; // 0x40356a\n            float80_t v142 = v101; // 0x40356d\n            int32_t v143 = v140; // 0x40356d\n            if (v140 == 0) {\n                // 0x40406e\n                *(int16_t *)(v79 + 76) = *(int16_t *)(v79 + 78) | 3072;\n                int64_t v144 = v79 + 16;\n                *(int64_t *)v144 = (int64_t)(10.0L * v101 / 9.22337e+18L);\n                v134 = v144;\n                v135 = v101;\n                v136 = 0.0L;\n                v137 = v81;\n                if (g35 < 5) {\n                    int64_t result2 = result;\n                    return result2;\n                }\n            } else {\n                float80_t v145 = -1.18973e+4932L * v142; // 0x403580\n                int32_t v146 = v143 - 1; // 0x403582\n                v142 = v145;\n                v143 = v146;\n                while (v146 != 0) {\n                    // 0x403580\n                    v145 = -1.18973e+4932L * v142;\n                    v146 = v143 - 1;\n                    v142 = v145;\n                    v143 = v146;\n                }\n                float80_t v147 = v81 * v145; // 0x40358b\n                float80_t v148 = v147 / 9.22337e+18L; // 0x40359d\n                *(int16_t *)(v79 + 76) = *(int16_t *)(v79 + 78) | 3072;\n                int64_t v149 = v79 + 16;\n                *(int64_t *)v149 = (int64_t)v148;\n                result = v141;\n                if (g35 < 5) {\n                    // 0x402c54\n                    return result;\n                }\n                int32_t v150 = v140; // 0x40371f\n                float80_t v151 = v81 * (v147 - 9.22337e+18L * v148); // 0x403720\n                v150--;\n                float80_t v152 = v151; // 0x403725\n                while (v150 != 0) {\n                    // 0x403720\n                    v151 = v81 * v152;\n                    v150--;\n                    v152 = v151;\n                }\n                // 0x403727\n                v134 = v149;\n                v135 = v151;\n                v136 = v151;\n                v137 = 0.0L;\n            }\n        }\n        float80_t v153 = v136;\n        float80_t v154 = v135;\n        float80_t * v155 = (float80_t *)v134;\n        int64_t v156; // 0x402c00\n        float80_t * v157; // 0x402c00\n        float80_t * v158; // 0x402c00\n        float80_t v159; // 0x402c00\n        float80_t v160; // 0x402c00\n        if (g55 == 0) {\n            int64_t v161 = v79 - 16; // 0x40379d\n            v158 = (float80_t *)v79;\n            v157 = (float80_t *)v161;\n            v156 = v161;\n            v159 = v153;\n            v160 = v154;\n        } else {\n            // 0x403732\n            *v155 = v153;\n            *(int32_t *)(v79 + 32) = v133;\n            int64_t v162 = v79 - 16;\n            float80_t * v163 = (float80_t *)v162;\n            *v163 = v154;\n            float80_t * v164 = (float80_t *)v79;\n            *v164 = v154;\n            char * v165 = g68 == 0 ? \"  no scaling, returning value: %.*Lf\\n\" : \"  no scaling, returning (grouped) value: %'.*Lf\\n\"; // 0x40376c\n            __fprintf_chk(g52, 1, v165);\n            v158 = v164;\n            v157 = v163;\n            v156 = v162;\n            v159 = *v155;\n            v160 = *v164;\n        }\n        // 0x403785\n        *v155 = v159;\n        int64_t v166 = v79 + 176; // 0x403795\n        *(int32_t *)v97 = 0x664c2a2e;\n        v12 = v166;\n        *(char *)(v97 + 4) = 0;\n        *v157 = v160;\n        *v158 = v160;\n        if (__snprintf_chk((char *)v166, 128, 1, 128, v89) < 128) {\n            // 0x4037dd\n            v112 = v155;\n            v131 = v1;\n            v110 = v79;\n            v106 = v166;\n            goto lab_0x4037ea;\n        } else {\n            int64_t v167 = g72;\n            int64_t * v168 = (int64_t *)(v79 - 8); // 0x4037cf\n            int64_t * v169 = (int64_t *)v156; // 0x4037cd\n            *v158 = v160;\n            char * format2 = dcgettext(NULL, \"failed to prepare value '%Lf' for printing\", 5); // 0x4040fe\n            v12 = 1;\n            *v168 = v167;\n            *v169 = v167;\n            *v157 = *v158;\n            error(1, (int32_t)\"failed to prepare value '%Lf' for printing\" ^ (int32_t)\"failed to prepare value '%Lf' for printing\", format2);\n            v115 = 1.0L;\n            v126 = v137;\n            v57 = 128;\n            v60 = (int64_t)format2;\n            v55 = v167;\n            v61 = v156;\n            v53 = v166;\n            v52 = v88;\n            v48 = *v169;\n            v49 = *v168;\n            v50 = 0;\n            goto lab_0x402eb4;\n        }\n    } else {\n        if ((int32_t)&g71 < 1 || (int32_t)&g71 == 1) {\n            int128_t v170 = __asm_movsd(0x4090000000000000); // 0x403cbf\n            *(int32_t *)(v79 + 32) = 1024;\n            *(int64_t *)(v79 + 16) = __asm_movsd_1(v170);\n        } else {\n            int128_t v171 = __asm_movsd(0x408f400000000000); // 0x403309\n            *(int32_t *)(v79 + 32) = 1000;\n            *(int64_t *)(v79 + 16) = __asm_movsd_1(v171);\n        }\n        int64_t v172 = 0; // 0x40332b\n        float80_t v173 = -1.18973e+4932L; // 0x40332b\n        v103 = 0;\n        if (v101 >= -1.18973e+4932L) {\n            float80_t v174 = -1.18973e+4932L;\n            bool v175 = false; // 0x403358\n            bool v176 = false; // 0x403358\n            if (v174 >= 0.0L) {\n                v175 = true;\n                v176 = false;\n                if (v174 <= 0.0L) {\n                    v175 = v174 != 0.0L;\n                    v176 = true;\n                }\n            }\n            v173 = v174;\n            v103 = v172;\n            while ((v175 | v176 ? v174 : -v174) >= -1.18973e+4932L) {\n                // 0x40334a\n                v172 = v172 + 1 & 0xffffffff;\n                v174 /= -1.18973e+4932L;\n                v175 = false;\n                v176 = false;\n                if (v174 >= 0.0L) {\n                    v175 = true;\n                    v176 = false;\n                    if (v174 <= 0.0L) {\n                        v175 = v174 != 0.0L;\n                        v176 = true;\n                    }\n                }\n                v173 = v174;\n                v103 = v172;\n            }\n        }\n        float80_t v177 = v173; // 0x403364\n        v128 = v173;\n        v130 = v1;\n        if (g55 != 0) {\n            float80_t * v178 = (float80_t *)(v79 + 48); // 0x403ec6\n            *v178 = v173;\n            int128_t v179 = __asm_movsd(*(int64_t *)(v79 + 16)); // 0x403ed6\n            v12 = (int64_t)g52;\n            *(float80_t *)(v79 - 16) = v173;\n            float80_t * v180 = (float80_t *)(v79 + 32); // 0x403ef2\n            *v180 = v173;\n            __fprintf_chk(g52, 1, \"  scaled value to %Lf * %0.f ^ %u\\n\");\n            v128 = *v178;\n            v177 = *v180;\n            v130 = v179;\n        }\n        // 0x40336a\n        v129 = g35;\n        v111 = v177;\n        v107 = g55;\n        if (g32 == -1) {\n            bool v181 = false; // 0x403e69\n            bool v182 = false; // 0x403e69\n            if (v111 >= 0.0L) {\n                v181 = true;\n                v182 = false;\n                if (v111 <= 0.0L) {\n                    v181 = v111 != 0.0L;\n                    v182 = true;\n                }\n            }\n            if ((v181 || v182 ? v111 : -v111) >= 10.0L) {\n                goto lab_0x403d0d;\n            } else {\n                goto lab_0x403e7f;\n            }\n        } else {\n            int64_t v183 = g32; // 0x40336a\n            int64_t v184 = 3 * v103 & 0xffffffff; // 0x40337b\n            int64_t v185 = v184 - v183; // 0x403380\n            int64_t v186 = v185 < 0 == (v185 & v183) < 0 == (v185 != 0) ? v183 : v184; // 0x403383\n            v12 = v186 & 0xffffffff;\n            int32_t v187 = v186; // 0x403389\n            if (v187 == 0) {\n                goto lab_0x403d0d;\n            } else {\n                int32_t v188 = v187 - 1; // 0x403391\n                if (v188 == 0) {\n                    goto lab_0x403e7f;\n                } else {\n                    float80_t v189 = v128 * v111; // 0x4033a8\n                    int32_t v190 = v188 - 1; // 0x4033aa\n                    float80_t v191 = v189; // 0x4033ad\n                    int32_t v192 = v190; // 0x4033ad\n                    while (v190 != 0) {\n                        // 0x4033a8\n                        v189 = v128 * v191;\n                        v190 = v192 - 1;\n                        v191 = v189;\n                        v192 = v190;\n                    }\n                    float80_t v193 = v81 * v189; // 0x4033b3\n                    *(int16_t *)(v79 + 76) = *(int16_t *)(v79 + 78) | 3072;\n                    float80_t v194 = v193 / 9.22337e+18L; // 0x4033ca\n                    int64_t * v195 = (int64_t *)(v79 + 32);\n                    *v195 = (int64_t)v194;\n                    float80_t v196 = 9.22337e+18L * v194; // 0x4033dc\n                    float80_t v197 = v193 - v196; // 0x4033de\n                    g95 = v129;\n                    v102 = v195;\n                    v113 = v196;\n                    v127 = v128;\n                    v114 = v196;\n                    v119 = v197;\n                    v122 = 0.0L;\n                    v132 = v130;\n                    v105 = v188;\n                    v108 = v107;\n                    v109 = v79;\n                    v104 = v103;\n                    v116 = v196;\n                    v120 = v196;\n                    v123 = v128;\n                    v117 = v196;\n                    v121 = v196;\n                    v124 = v128;\n                    v118 = v196;\n                    v125 = v128;\n                    switch (g35) {\n                        case 0: {\n                            goto lab_0x403a1f;\n                        }\n                        case 1: {\n                            goto lab_0x403c10;\n                        }\n                        case 2: {\n                            goto lab_0x403b7e;\n                        }\n                        case 3: {\n                            // 0x403c25\n                            *v195 = (int64_t)v4;\n                            v119 = v197;\n                            v122 = v128 + v4;\n                            v132 = v130;\n                            v105 = v188;\n                            v108 = v107;\n                            v109 = v79;\n                            v104 = v103;\n                            goto lab_0x403a62;\n                        }\n                        case 4: {\n                            goto lab_0x403bd6;\n                        }\n                        default: {\n                            goto lab_0x403a62;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x402eb4:;\n    int64_t v198 = v50;\n    int64_t v199 = v49;\n    int64_t v200 = v48;\n    int64_t v201 = v53;\n    int64_t v202 = v61;\n    int64_t v203 = v60;\n    float80_t v204 = v126;\n    float80_t v205 = v115;\n    int64_t v206; // 0x402c00\n    int64_t v207; // 0x402c00\n    float80_t v208; // 0x402c00\n    if ((char)v203 != 0) {\n        // 0x403467\n        v12 = (int64_t)g52;\n        int64_t v209 = v55 & 0xffffffff; // 0x403474\n        float80_t * v210 = (float80_t *)(v202 - 16); // 0x403478\n        *v210 = v205;\n        float80_t * v211 = (float80_t *)(v202 + 16); // 0x403485\n        *v211 = v205;\n        __fprintf_chk(g52, 1, \"  suffix power=%d^%d = %Lf\\n\", v209, v52, (float80_t)(int80_t)v1);\n        float80_t * v212 = (float80_t *)(v202 + 112); // 0x40348e\n        float80_t v213 = *v212 * *v211; // 0x4034a0\n        *v212 = v213;\n        v208 = v213;\n        v206 = v209;\n        v207 = (int64_t)\"  suffix power=%d^%d = %Lf\\n\";\n        if (g55 != 0) {\n            // 0x4034b5\n            *v210 = v213;\n            v12 = (int64_t)g52;\n            *(float80_t *)(v202 - 32) = v213;\n            __fprintf_chk(g52, 1, \"  returning value: %Lf (%LG)\\n\", (float80_t)(int80_t)v1, (float80_t)v24);\n            v208 = v213;\n            v206 = v209;\n            v207 = (int64_t)\"  returning value: %Lf (%LG)\\n\";\n        }\n    } else {\n        float80_t * v214 = (float80_t *)(v202 + 112); // 0x402ebc\n        float80_t v215 = v205 * *v214; // 0x402ec0\n        *v214 = v215;\n        v208 = v215;\n        v206 = v57;\n        v207 = v203;\n    }\n    float80_t v216 = v208;\n    int64_t v217 = *(int64_t *)(v202 + 96); // 0x402ed0\n    if (v217 == 0) {\n        goto lab_0x403160;\n    } else {\n        // 0x402ede\n        if (*(char *)v217 == 0) {\n            goto lab_0x403160;\n        } else {\n            // 0x402ee7\n            v82 = v216;\n            v80 = v204;\n            v74 = v202;\n            v75 = 5;\n            v76 = v200;\n            v77 = v198;\n            if (g70 != 3) {\n                // 0x402ef5\n                function_407570(1, (int64_t *)v217, v207, v206);\n                function_407570(0, (int64_t *)v199, v207, v206);\n                v12 = g31;\n                error(g31, (int32_t)\"invalid suffix in input %s: %s\" ^ (int32_t)\"invalid suffix in input %s: %s\", dcgettext(NULL, \"invalid suffix in input %s: %s\", 5));\n                v82 = v216;\n                v80 = v204;\n                v74 = v202;\n                v75 = 5;\n                v76 = v200;\n                v77 = v198;\n            }\n            goto lab_0x402f40;\n        }\n    }\n  lab_0x403160:\n    // 0x403160\n    v82 = v216;\n    v80 = v204;\n    v74 = v202;\n    v75 = v201;\n    v76 = v200;\n    v77 = v198;\n    if ((int32_t)v201 == 1 && g58 != 0) {\n        // 0x403176\n        function_407590(v199);\n        v12 = 0;\n        error(0, (int32_t)\"large input value %s: possible precision loss\" ^ (int32_t)\"large input value %s: possible precision loss\", dcgettext(NULL, \"large input value %s: possible precision loss\", 5));\n        v82 = v216;\n        v80 = v204;\n        v74 = v202;\n        v75 = v201;\n        v76 = v200;\n        v77 = v198;\n    }\n    goto lab_0x402f40;\n  lab_0x402e7c:\n    // 0x402e7c\n    v56 = v58;\n    v59 = g55;\n    v54 = v20;\n    goto lab_0x402e8b;\n  lab_0x4037ea:;\n    float80_t v367 = *v112;\n    float80_t v328 = v367; // 0x4037f4\n    int80_t v329 = v131; // 0x4037f4\n    char v330 = g55; // 0x4037f4\n    int64_t v331 = v110; // 0x4037f4\n    int64_t v332 = v106; // 0x4037f4\n    char * v333 = g69; // 0x4037f4\n    float80_t v229 = v367; // 0x4037f4\n    int80_t v231 = v131; // 0x4037f4\n    char v227 = g55; // 0x4037f4\n    int64_t v225 = v110; // 0x4037f4\n    int64_t v226 = v106; // 0x4037f4\n    if (g69 == NULL) {\n        goto lab_0x40384a;\n    } else {\n        goto lab_0x4037f6;\n    }\n  lab_0x403d0d:;\n    float80_t v368 = v111 / 9.22337e+18L; // 0x403d1e\n    *(int16_t *)(v79 + 76) = *(int16_t *)(v79 + 78) | 3072;\n    int64_t * v369 = (int64_t *)(v79 + 32);\n    *v369 = (int64_t)v368;\n    float80_t v370 = v111 - 9.22337e+18L * v368; // 0x403d3a\n    g96 = v129;\n    float80_t v364 = v370; // 0x403d49\n    float80_t v365 = v128; // 0x403d49\n    float80_t v366 = v370; // 0x403d49\n    int64_t v276; // 0x402c00\n    int64_t v274; // 0x402c00\n    int64_t v275; // 0x402c00\n    float80_t v270; // 0x402c00\n    float80_t v271; // 0x402c00\n    float80_t v337; // 0x402c00\n    float80_t v266; // 0x402c00\n    float80_t v272; // 0x402c00\n    int80_t v273; // 0x402c00\n    switch (g35) {\n        case 0: {\n            // 0x403d60\n            v12 = 0;\n            v102 = v369;\n            v113 = v81;\n            v266 = v128;\n            v127 = v370;\n            goto lab_0x403a1f;\n        }\n        case 1: {\n            // 0x403d57\n            v12 = 0;\n            v118 = v81;\n            v337 = v128;\n            v125 = v370;\n            goto lab_0x403c10;\n        }\n        case 2: {\n            // 0x403d50\n            v12 = 0;\n            v116 = v370;\n            v120 = v128;\n            v123 = v81;\n            goto lab_0x403b7e;\n        }\n        case 3: {\n            // 0x403d70\n            *v369 = (int64_t)v81;\n            v270 = v81;\n            v271 = v128 + v81;\n            v272 = v370;\n            v273 = v130;\n            v274 = v107;\n            v275 = v79;\n            v276 = v103;\n            goto lab_0x403a73;\n        }\n        case 4: {\n            // 0x403d69\n            v12 = 0;\n            v117 = v370;\n            v121 = v128;\n            v124 = v81;\n            goto lab_0x403bd6;\n        }\n        default: {\n            goto lab_0x40418c;\n        }\n    }\n  lab_0x403e7f:;\n    float80_t v371 = v111 * v128; // 0x403e83\n    float80_t v372 = v371 / 9.22337e+18L; // 0x403e95\n    *(int16_t *)(v79 + 76) = *(int16_t *)(v79 + 78) | 3072;\n    int64_t * v373 = (int64_t *)(v79 + 32);\n    *v373 = (int64_t)v372;\n    float80_t v374 = v371 - 9.22337e+18L * v372; // 0x403eae\n    g97 = v129;\n    v364 = v111;\n    v365 = v374;\n    v366 = v81;\n    float80_t v279; // 0x402c00\n    float80_t v280; // 0x402c00\n    switch (g35) {\n        case 0: {\n            // 0x403a08\n            v12 = 1;\n            v102 = v373;\n            v113 = v111;\n            v127 = v374;\n            goto lab_0x403a1f;\n        }\n        case 1: {\n            // 0x403bfd\n            v12 = 1;\n            v118 = v111;\n            v125 = v374;\n            goto lab_0x403c10;\n        }\n        case 2: {\n            // 0x403b6f\n            v12 = 1;\n            v116 = v111;\n            v120 = v111;\n            v123 = v374;\n            goto lab_0x403b7e;\n        }\n        case 3: {\n            // 0x403c47\n            *v373 = (int64_t)v4;\n            v279 = v81;\n            v280 = v374 + v4;\n            goto lab_0x403c5d;\n        }\n        case 4: {\n            // 0x403bc7\n            v12 = 1;\n            v117 = v111;\n            v121 = v111;\n            v124 = v374;\n            goto lab_0x403bd6;\n        }\n        default: {\n            goto lab_0x40418c;\n        }\n    }\n  lab_0x402e8b:;\n    int32_t v218 = v51; // 0x402e8b\n    v115 = 1.0L;\n    v57 = v56;\n    v60 = v59;\n    v55 = v54;\n    v61 = v31;\n    v53 = v33;\n    v52 = v51;\n    v48 = str;\n    v49 = v14;\n    v50 = 0;\n    if (v218 != 0) {\n        int32_t v219 = v218 - 1; // 0x402e99\n        v57 = v56;\n        v60 = v59;\n        v55 = v54;\n        v61 = v31;\n        v53 = v33;\n        v52 = 1;\n        v48 = str;\n        v49 = v14;\n        v50 = 0;\n        if (v219 != 0) {\n            float80_t v220; // 0x402c00\n            float80_t v221 = v39 * v220; // 0x402ea8\n            int32_t v222 = v219 - 1; // 0x402eaa\n            v220 = v221;\n            int32_t v223 = v222; // 0x402ead\n            v115 = v221;\n            v57 = v56;\n            v60 = v59;\n            v55 = v54;\n            v61 = v31;\n            v53 = v33;\n            v52 = v51;\n            v48 = str;\n            v49 = v14;\n            v50 = 0;\n            while (v222 != 0) {\n                // 0x402ea8\n                v221 = v39 * v220;\n                v222 = v223 - 1;\n                v220 = v221;\n                v223 = v222;\n                v115 = v221;\n                v57 = v56;\n                v60 = v59;\n                v55 = v54;\n                v61 = v31;\n                v53 = v33;\n                v52 = v51;\n                v48 = str;\n                v49 = v14;\n                v50 = 0;\n            }\n        }\n    }\n    goto lab_0x402eb4;\n  lab_0x40384a:;\n    int64_t v224 = v225; // 0x40384c\n    int64_t str4 = v226; // 0x40384c\n    if (v227 != 0) {\n        float80_t * v228 = (float80_t *)v225; // 0x403851\n        *v228 = v229;\n        int64_t v230 = function_407590(v226); // 0x403854\n        *(float80_t *)(v225 - 16) = *v228;\n        __fprintf_chk(g52, 1, \"formatting output:\\n  value: %Lf\\n  humanized: %s\\n\", (float80_t)v231, (char *)v230);\n        v224 = v225;\n        str4 = v226;\n    }\n    goto lab_0x403884;\n  lab_0x4037f6:;\n    int64_t v354 = v332;\n    int64_t v355 = v354;\n    int32_t v356 = *(int32_t *)v355; // 0x4037f9\n    int64_t v357 = v355 + 4; // 0x4037fb\n    int32_t v358 = v356 - 0x1010101 & (v356 ^ -0x7f7f7f80); // 0x403807\n    uint32_t v359 = v358 & -0x7f7f7f80; // 0x403809\n    while (v359 == 0) {\n        // 0x4037f9\n        v355 = v357;\n        v356 = *(int32_t *)v355;\n        v357 = v355 + 4;\n        v358 = v356 - 0x1010101 & (v356 ^ -0x7f7f7f80);\n        v359 = v358 & -0x7f7f7f80;\n    }\n    float80_t * v360 = (float80_t *)v331; // 0x403815\n    *v360 = v328;\n    int64_t v361 = (v358 & 0x8080) == 0 ? v355 + 6 : v357; // 0x403827\n    unsigned char v362 = (char)((v358 & 0x8080) == 0 ? v359 / 0x10000 : v359); // 0x40382d\n    int64_t v363 = -1 - v362 < v362 ? 4 : 3; // 0x403837\n    __strncat_chk((char *)v354, v333, (int32_t)(v354 - v361 + v363) + 127, 128);\n    v229 = *v360;\n    v231 = v329;\n    v227 = v330;\n    v225 = v331;\n    v226 = v354;\n    goto lab_0x40384a;\n  lab_0x40418c:;\n    float80_t v246 = v364; // 0x40418e\n    float80_t v263 = v365; // 0x40418e\n    float80_t v248 = v366; // 0x40418e\n    int80_t v250 = v130; // 0x40418e\n    int64_t v252 = v107; // 0x40418e\n    int64_t v254 = v79; // 0x40418e\n    int64_t v256 = v103; // 0x40418e\n    goto lab_0x403a7d;\n  lab_0x403884:;\n    int64_t v232 = str4;\n    int32_t v233 = *(int32_t *)v232; // 0x40388e\n    int64_t v234 = v232 + 4; // 0x403890\n    int32_t v235 = v233 - 0x1010101 & (v233 ^ -0x7f7f7f80); // 0x40389c\n    uint32_t v236 = v235 & -0x7f7f7f80; // 0x40389e\n    while (v236 == 0) {\n        // 0x40388e\n        v232 = v234;\n        v233 = *(int32_t *)v232;\n        v234 = v232 + 4;\n        v235 = v233 - 0x1010101 & (v233 ^ -0x7f7f7f80);\n        v236 = v235 & -0x7f7f7f80;\n    }\n    uint64_t v237 = (int64_t)g65; // 0x403884\n    unsigned char v238 = (char)((v235 & 0x8080) == 0 ? v236 / 0x10000 : v236); // 0x4038c3\n    int64_t v239 = -1 - v238 < v238 ? 4 : 3; // 0x4038c6\n    uint64_t v240 = ((v235 & 0x8080) == 0 ? v232 + 6 : v234) - v239 - str4; // 0x4038ca\n    if (g65 != NULL == v240 < v237) {\n        int64_t v241 = v224 + 112; // 0x403e02\n        *(int64_t *)v241 = v237;\n        function_405530(str4, (int64_t)g67, g66, v241, g30, 2);\n        if (g55 != 0) {\n            int64_t v242 = function_407590((int64_t)g67); // 0x403e3c\n            __fprintf_chk(g52, 1, \"  After padding: %s\\n\", (char *)v242);\n        }\n    } else {\n        int64_t v243 = v240 + 1; // 0x4038db\n        v12 = v243;\n        if (v243 >= g66) {\n            // 0x4038e4\n            function_402bd0(v243);\n        }\n        // 0x4038e9\n        strcpy(g67, (char *)str4);\n    }\n    // 0x4038f8\n    v12 = (int64_t)g62;\n    struct _IO_FILE * v244 = g49; // 0x403909\n    if (g62 != NULL) {\n        // 0x40390b\n        fputs_unlocked(g62, g49);\n        v244 = g49;\n    }\n    // 0x403917\n    fputs_unlocked(g67, v244);\n    v12 = (int64_t)g61;\n    if (g61 != NULL) {\n        // 0x403938\n        fputs_unlocked(g61, g49);\n    }\n    // 0x402c54\n    return 1;\n  lab_0x403a7d:;\n    float80_t v245 = v246; // 0x403a7f\n    float80_t v247 = v248; // 0x403a7f\n    int80_t v249 = v250; // 0x403a7f\n    int64_t v251 = v252; // 0x403a7f\n    int64_t v253 = v254; // 0x403a7f\n    int64_t v255 = v256; // 0x403a7f\n    float80_t v257 = v246; // 0x403a7f\n    float80_t v258 = v248; // 0x403a7f\n    int80_t v259 = v250; // 0x403a7f\n    int64_t v260 = v252; // 0x403a7f\n    int64_t v261 = v254; // 0x403a7f\n    int64_t v262 = v256; // 0x403a7f\n    if (v246 < v263) {\n        goto lab_0x403a8f;\n    } else {\n        goto lab_0x403a85;\n    }\n  lab_0x403a1f:\n    // 0x403a1f\n    *v102 = (int64_t)v113;\n    float80_t v264 = v113; // 0x403a33\n    float80_t v265 = v266; // 0x403a33\n    float80_t v267 = v127; // 0x403a33\n    goto lab_0x403a4b;\n  lab_0x403c10:;\n    float80_t v335 = -v118; // 0x403c10\n    int64_t v336 = v335; // 0x403c18\n    *(int64_t *)(v79 + 64) = v336;\n    int64_t v282 = v336; // 0x403c20\n    float80_t v286 = v335; // 0x403c20\n    float80_t v288 = v337; // 0x403c20\n    float80_t v289 = v125; // 0x403c20\n    goto lab_0x403b9a;\n  lab_0x403b7e:\n    // 0x403b7e\n    if (v123 >= 0.0L) {\n        // 0x403b7e\n        v102 = (int64_t *)(v79 + 32);\n        v113 = v123;\n        v266 = v120;\n        v127 = v116;\n        goto lab_0x403a1f;\n    } else {\n        float80_t v338 = -v123; // 0x403b8a\n        int64_t v339 = v338; // 0x403b92\n        *(int64_t *)(v79 + 64) = v339;\n        v282 = v339;\n        v286 = v338;\n        v288 = v120;\n        v289 = v116;\n        goto lab_0x403b9a;\n    }\n  lab_0x403a73:;\n    int64_t v340 = v276;\n    int64_t v341 = v275;\n    int64_t v342 = v274;\n    int80_t v343 = v273;\n    float80_t v344 = v272;\n    float80_t v345 = v271;\n    float80_t v346 = v270;\n    bool v347 = false; // 0x403a75\n    bool v348 = false; // 0x403a75\n    if (v346 >= 0.0L) {\n        v347 = true;\n        v348 = false;\n        if (v346 <= 0.0L) {\n            v347 = v346 != 0.0L;\n            v348 = true;\n        }\n    }\n    v246 = v346;\n    v263 = v345;\n    v248 = v344;\n    v250 = v343;\n    v252 = v342;\n    v254 = v341;\n    v256 = v340;\n    int64_t v304; // 0x402c00\n    int64_t v300; // 0x402c00\n    int64_t v302; // 0x402c00\n    float80_t v291; // 0x402c00\n    float80_t v296; // 0x402c00\n    int80_t v298; // 0x402c00\n    if (v347 || v348) {\n        goto lab_0x403a7d;\n    } else {\n        // 0x403cda\n        v245 = v346;\n        v247 = v344;\n        v249 = v343;\n        v251 = v342;\n        v253 = v341;\n        v255 = v340;\n        v291 = v346;\n        v296 = v345;\n        v298 = v343;\n        v300 = v342;\n        v302 = v341;\n        v304 = v340;\n        if (v345 <= -v346) {\n            goto lab_0x403a85;\n        } else {\n            goto lab_0x403cec;\n        }\n    }\n  lab_0x403bd6:\n    // 0x403bd6\n    if (v124 >= 0.0L) {\n        // 0x403be0\n        *(int64_t *)(v79 + 32) = (int64_t)v121;\n        v264 = v124 + 0.5L;\n        v265 = v121;\n        v267 = v117;\n    } else {\n        float80_t v349 = v124 - 0.5L; // 0x4040c2\n        *(int64_t *)(v79 + 32) = (int64_t)v349;\n        v264 = v349;\n        v265 = v121;\n        v267 = v117;\n    }\n    goto lab_0x403a4b;\n  lab_0x403c5d:;\n    // 0x403c5d\n    float80_t v278; // 0x402c00\n    v270 = v278;\n    v271 = v279 / v278;\n    v272 = v280;\n    v273 = v130;\n    v274 = v107;\n    v275 = v79;\n    v276 = v103;\n    goto lab_0x403a73;\n  lab_0x403a62:;\n    float80_t v350 = v119 * v114; // 0x403a68\n    int32_t v351 = v105 - 1; // 0x403a6a\n    float80_t v352 = v350; // 0x403a6d\n    int32_t v353 = v351; // 0x403a6d\n    while (v351 != 0) {\n        // 0x403a68\n        v350 = v119 * v352;\n        v351 = v353 - 1;\n        v352 = v350;\n        v353 = v351;\n    }\n    // 0x403a6f\n    v270 = v350;\n    v271 = v350;\n    v272 = v122 / v350;\n    v273 = v132;\n    v274 = v108;\n    v275 = v109;\n    v276 = v104;\n    goto lab_0x403a73;\n  lab_0x403a8f:;\n    float80_t v294 = 0.0L; // 0x403a97\n    float80_t v295 = v258; // 0x403a97\n    int80_t v297 = v259; // 0x403a97\n    int64_t v299 = v260; // 0x403a97\n    int64_t v301 = v261; // 0x403a97\n    int64_t v303 = v262; // 0x403a97\n    int32_t v305 = 0; // 0x403a97\n    v291 = 0.0L;\n    v296 = v258;\n    v298 = v259;\n    v300 = v260;\n    v302 = v261;\n    v304 = v262;\n    if (v257 != 0.0L) {\n        goto lab_0x403cec;\n    } else {\n        goto lab_0x403aa6;\n    }\n  lab_0x403a85:\n    // 0x403a85\n    v257 = v245;\n    v258 = v247;\n    v259 = v249;\n    v260 = v251;\n    v261 = v253;\n    v262 = v255 + 1 & 0xffffffff;\n    goto lab_0x403a8f;\n  lab_0x403a4b:;\n    float80_t v268 = v264 + v265; // 0x403a4b\n    int32_t v269 = v12; // 0x403a4d\n    v270 = v264;\n    v271 = v268;\n    v272 = v267;\n    v273 = v130;\n    v274 = v107;\n    v275 = v79;\n    v276 = v103;\n    if (v269 == 0) {\n        goto lab_0x403a73;\n    } else {\n        int32_t v277 = v269 - 1; // 0x403a59\n        v114 = v264;\n        v119 = v268;\n        v122 = v267;\n        v132 = v130;\n        v105 = v277;\n        v108 = v107;\n        v109 = v79;\n        v104 = v103;\n        v278 = v264;\n        v279 = v268;\n        v280 = v267;\n        if (v277 == 0) {\n            goto lab_0x403c5d;\n        } else {\n            goto lab_0x403a62;\n        }\n    }\n  lab_0x403b9a:;\n    int64_t * v281 = (int64_t *)(v79 + 32); // 0x403ba1\n    *v281 = v282;\n    float80_t v283 = v282; // 0x403ba6\n    bool v284 = false; // 0x403bac\n    bool v285 = false; // 0x403bac\n    if (v286 <= v283) {\n        v284 = true;\n        v285 = false;\n        if (v286 >= v283) {\n            v284 = v286 != v283;\n            v285 = true;\n        }\n    }\n    int64_t v287 = -((v282 + (int64_t)!((v284 | v285)))); // 0x403bb6\n    *v281 = v287;\n    v264 = v287;\n    v265 = v288;\n    v267 = v289;\n    goto lab_0x403a4b;\n  lab_0x403cec:;\n    float80_t v290 = v291;\n    bool v292 = false; // 0x403cfb\n    bool v293 = false; // 0x403cfb\n    if (v290 >= 10.0L) {\n        v292 = true;\n        v293 = false;\n        if (v290 <= 10.0L) {\n            v292 = v290 != 10.0L;\n            v293 = true;\n        }\n    }\n    v294 = v290;\n    v295 = v296;\n    v297 = v298;\n    v299 = v300;\n    v301 = v302;\n    v303 = v304;\n    v305 = !(((int32_t)v304 == 0 | v292 | v293));\n    goto lab_0x403aa6;\n  lab_0x403aa6:;\n    int64_t v306 = v303;\n    int64_t v307 = v301;\n    float80_t v308 = v294;\n    float80_t v309 = v308; // 0x403aa8\n    float80_t v310 = v308; // 0x403aa8\n    int80_t v311 = v297; // 0x403aa8\n    if ((char)v299 != 0) {\n        float80_t * v312 = (float80_t *)(v307 + 32); // 0x403d8b\n        *v312 = v308;\n        *(int32_t *)(v307 + 48) = v305;\n        int128_t v313 = __asm_movsd(*(int64_t *)(v307 + 16)); // 0x403db1\n        *(float80_t *)(v307 - 16) = v308;\n        float80_t * v314 = (float80_t *)v307; // 0x403dbc\n        *v314 = v308;\n        __fprintf_chk(g52, 1, \"  after rounding, value=%Lf * %0.f ^ %u\\n\");\n        v309 = *v314;\n        v310 = *v312;\n        v311 = v313;\n    }\n    int80_t v315 = v311;\n    float80_t v316 = v309;\n    *(int32_t *)v97 = 0x664c2a2e;\n    *(int16_t *)(v97 + 4) = 0x7325;\n    *(char *)(v97 + 6) = 0;\n    uint32_t v317 = (int32_t)v306; // 0x403ad4\n    int64_t v318 = (int64_t)\"(error)\"; // 0x403ad8\n    if (v317 < 9) {\n        int64_t v319 = *(int64_t *)((8 * v306 & 0x7fffffff8) + (int64_t)&g3); // 0x403adf\n        v318 = v319;\n    }\n    // 0x403aeb\n    *(float80_t *)(v307 + 16) = v310;\n    int64_t v320 = v307 + 176; // 0x403af9\n    v12 = v320;\n    int64_t v321 = v307 - 16; // 0x403b0d\n    int64_t * v322 = (int64_t *)v321; // 0x403b0d\n    *v322 = v318;\n    *(float80_t *)(v307 - 32) = v316;\n    float80_t * v323 = (float80_t *)v307;\n    *v323 = v316;\n    char * v324 = (char *)v320; // 0x403b25\n    uint32_t v325 = __snprintf_chk(v324, 127, 1, 128, (char *)(v307 + 112)); // 0x403b25\n    if (v325 < 127) {\n        float80_t v326 = v316; // 0x403b3e\n        if (g72 == 4 == (v317 != 0)) {\n            // 0x403fcc\n            *v323 = v316;\n            __strncat_chk(v324, \"i\", 127 - v325, 128);\n            v326 = *v323;\n        }\n        // 0x403b49\n        if (g55 != 0) {\n            // 0x403f13\n            *v323 = v326;\n            int64_t v327 = function_407590(v320); // 0x403f19\n            __fprintf_chk(g52, 1, \"  returning value: %s\\n\", (char *)v327);\n            v112 = v323;\n            v131 = v315;\n            v110 = v307;\n            v106 = v320;\n            goto lab_0x4037ea;\n        } else {\n            // 0x403b58\n            v328 = v326;\n            v329 = v315;\n            v330 = g55;\n            v331 = v307;\n            v332 = v320;\n            v333 = g69;\n            v224 = v307;\n            str4 = v320;\n            if (g69 != NULL) {\n                goto lab_0x4037f6;\n            } else {\n                goto lab_0x403884;\n            }\n        }\n    } else {\n        char * format3 = dcgettext(NULL, \"failed to prepare value '%Lf' for printing\", 5); // 0x40414a\n        float80_t v334 = *v323; // 0x40414f\n        *(int64_t *)(v307 - 8) = 128;\n        *v322 = 128;\n        *(float80_t *)v321 = v334;\n        error(1, (int32_t)\"failed to prepare value '%Lf' for printing\" ^ (int32_t)\"failed to prepare value '%Lf' for printing\", format3);\n        v114 = v334;\n        v119 = v295;\n        v122 = 0.0L;\n        v132 = v315;\n        v105 = &g93;\n        v108 = 128;\n        v109 = v321;\n        v104 = v306;\n        goto lab_0x403a62;\n    }\n}\n"
        },
        {
            "funcName": "function_4041a0",
            "funcStartAddr": "4041a0",
            "funcEndAddr": "40435e",
            "decompiledFuncCode": "int64_t function_4041a0(int64_t a1, int64_t a2) {\n    int32_t v1 = g29; // 0x4041c7\n    int64_t v2 = 1; // 0x4041c7\n    int64_t v3 = 0; // 0x4041c7\n    int64_t v4 = a1; // 0x4041c7\n    char * v5; // 0x4041a0\n    int64_t v6; // 0x4041a0\n    int64_t v7; // 0x4041a0\n    char v8; // 0x4041a0\n    int64_t v9; // 0x4041a0\n    int64_t v10; // 0x4041a0\n    int64_t v11; // 0x4041a0\n    int64_t v12; // 0x4041a0\n    int64_t v13; // 0x4041a0\n    int64_t v14; // 0x4041a0\n    int64_t v15; // 0x4041a0\n    int64_t v16; // 0x4041a0\n    while (true) {\n      lab_0x4041d0:\n        // 0x4041d0\n        v7 = v4;\n        v6 = v2;\n        int32_t v17 = v1;\n        v3++;\n        char v18 = *(char *)v7; // 0x4041d4\n        if (v17 == 128) {\n            // 0x404270\n            v13 = v12;\n            if (v18 == 0) {\n                // break -> 0x404213\n                break;\n            }\n            int64_t v19 = (int64_t)*__ctype_b_loc(); // 0x40427d\n            char v20 = v18; // 0x40427d\n            int64_t v21 = v7;\n            int64_t v22 = v20;\n            while (v20 == 10 | *(char *)(2 * v22 + v19) % 2 != 0) {\n                int64_t v23 = v21 + 1; // 0x404308\n                v20 = *(char *)v23;\n                v13 = v22;\n                if (v20 == 0) {\n                    // break (via goto) -> 0x404213\n                    goto lab_0x404213_4;\n                }\n                v21 = v23;\n                v22 = v20;\n            }\n            unsigned char v24 = *(char *)v21; // 0x404290\n            v13 = 0;\n            if (v24 == 0) {\n                // break -> 0x404213\n                break;\n            }\n            int64_t v25 = v24; // 0x404290\n            v9 = v21;\n            v14 = v25;\n            int64_t v26 = v21; // 0x4042a2\n            if (v24 != 10 == *(char *)(2 * v25 + v19) % 2 == 0) {\n                int64_t v27 = v26 + 1; // 0x404320\n                unsigned char v28 = *(char *)v27; // 0x404324\n                int64_t v29 = v28; // 0x404324\n                v13 = v29;\n                if (v28 == 0) {\n                    // break (via goto) -> 0x404213\n                    goto lab_0x404213_4;\n                }\n                // 0x40429b\n                v15 = v29;\n                v10 = v27;\n                v8 = v28;\n                v26 = v27;\n                while (v28 != 10 == *(char *)(2 * v29 + v19) % 2 == 0) {\n                    // 0x404320\n                    v27 = v26 + 1;\n                    v28 = *(char *)v27;\n                    v29 = v28;\n                    v13 = v29;\n                    if (v28 == 0) {\n                        // break (via goto) -> 0x404213\n                        goto lab_0x404213_4;\n                    }\n                    // 0x40429b\n                    v15 = v29;\n                    v10 = v27;\n                    v8 = v28;\n                    v26 = v27;\n                }\n                goto lab_0x4042ac_2;\n            } else {\n                goto lab_0x4042ac;\n            }\n        } else {\n            // 0x4041e3\n            v15 = v18;\n            v10 = v7;\n            v8 = v18;\n            if (v17 == (int32_t)v18) {\n                goto lab_0x4042ac_2;\n            } else {\n                // 0x4041ef\n                if (v18 == 0) {\n                    // break -> 0x404213\n                    break;\n                }\n                int64_t v30 = v7 + 1; // 0x404208\n                char * v31 = (char *)v30;\n                char v32 = *v31; // 0x40420c\n                if (v32 == 0) {\n                    // 0x404213\n                    v13 = v32;\n                    goto lab_0x404213_4;\n                }\n                int64_t v33 = v30; // 0x404202\n                while (v17 != (int32_t)v32) {\n                    // 0x404208\n                    v30 = v33 + 1;\n                    v31 = (char *)v30;\n                    v32 = *v31;\n                    if (v32 == 0) {\n                        // 0x404213\n                        v13 = v32;\n                        goto lab_0x404213_4;\n                    }\n                    // 0x404200\n                    v33 = v30;\n                }\n                // 0x4042b5\n                v5 = v31;\n                v16 = v32;\n                v11 = v30;\n                goto lab_0x4042b5;\n            }\n        }\n    }\n    goto lab_0x404213_4;\n  lab_0x404213_4:;\n    int64_t v34 = function_402c00(v7, v3, v13, (int64_t)&g93); // 0x404219\n    if ((char)a2 == 0) {\n        // 0x404256\n        return (char)v34 == 0 ? 0 : v6;\n    }\n    int64_t v35 = (int64_t)g49; // 0x404230\n    unsigned char v36 = *(char *)&g28; // 0x404237\n    int64_t * v37 = (int64_t *)(v35 + 40); // 0x40423e\n    uint64_t v38 = *v37; // 0x40423e\n    if (v38 >= *(int64_t *)(v35 + 48)) {\n        // 0x404351\n        __overflow(g49, (int32_t)v36);\n    } else {\n        // 0x40424c\n        *v37 = v38 + 1;\n        *(char *)v38 = v36;\n    }\n    // 0x404256\n    return (char)v34 == 0 ? 0 : v6;\n  lab_0x4042ac:\n    // 0x4042ac\n    v5 = (char *)v9;\n    v16 = v14;\n    v11 = v9;\n    goto lab_0x4042b5;\n  lab_0x4042ac_2:\n    // 0x4042ac\n    v13 = v15;\n    v9 = v10;\n    v14 = v15;\n    if (v8 == 0) {\n        // break -> 0x404213\n        goto lab_0x404213_4;\n    }\n    goto lab_0x4042ac;\n  lab_0x4042b5:\n    // 0x4042b5\n    *v5 = 0;\n    int64_t v39 = function_402c00(v7, v3, v16, (int64_t)&g93); // 0x4042be\n    int64_t v40 = (int64_t)g49; // 0x4042c3\n    int32_t v41 = g29; // 0x4042d1\n    int64_t * v42 = (int64_t *)(v40 + 40); // 0x4042db\n    uint64_t v43 = *v42; // 0x4042db\n    int64_t v44 = v41 != 128 ? (int64_t)v41 : 32; // 0x4042e4\n    if (v43 >= *(int64_t *)(v40 + 48)) {\n        // 0x404340\n        __overflow(g49, (int32_t)v44 % 256);\n        v1 = g29;\n    } else {\n        // 0x4042ed\n        *v42 = v43 + 1;\n        *(char *)v43 = (char)v44;\n        v1 = v41;\n    }\n    // 0x4042f8\n    v12 = v43;\n    v2 = (char)v39 == 0 ? 0 : v6;\n    v4 = v11 + 1;\n    goto lab_0x4041d0;\n}\n"
        },
        {
            "funcName": "function_404360",
            "funcStartAddr": "404360",
            "funcEndAddr": "404a0d",
            "decompiledFuncCode": "int64_t function_404360(int64_t a1) {\n    int32_t status = a1; // 0x404376\n    if (status != 0) {\n        // 0x40437a\n        __fprintf_chk(g52, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40439f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4043a6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [NUMBER]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Reformat NUMBER(s), or the numbers from standard input if none are specified.\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --debug          print warnings about invalid input\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"  -d, --delimiter=X    use X instead of whitespace for field delimiter\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --field=FIELDS   replace the numbers in these input fields (default=1)\\n                         see FIELDS below\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --format=FORMAT  use printf style floating-point FORMAT;\\n                         see FORMAT below for details\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --from=UNIT      auto-scale input numbers to UNITs; default is 'none';\\n                         see UNIT below\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --from-unit=N    specify the input unit size (instead of the default 1)\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --grouping       use locale-defined grouping of digits, e.g. 1,000,000\\n                         (which means it has no effect in the C/POSIX locale)\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --header[=N]     print (without converting) the first N header lines;\\n                         N defaults to 1 if not specified\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --invalid=MODE   failure mode for invalid numbers: MODE can be:\\n                         abort (default), fail, warn, ignore\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --padding=N      pad the output to N characters; positive N will\\n                         right-align; negative N will left-align;\\n                         padding is ignored if the output is wider than N;\\n                         the default is to automatically pad if a whitespace\\n                         is found\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --round=METHOD   use METHOD for rounding when scaling; METHOD can be:\\n                         up, down, from-zero (default), towards-zero, nearest\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --suffix=SUFFIX  add SUFFIX to output numbers, and accept optional\\n                         SUFFIX in input numbers\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --to=UNIT        auto-scale output numbers to UNITs; see UNIT below\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --to-unit=N      the output unit size (instead of the default 1)\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"  -z, --zero-terminated    line delimiter is NUL, not newline\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"\\nUNIT options:\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"  none       no auto-scaling is done; suffixes will trigger an error\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"  auto       accept optional single/two letter suffix:\\n               1K = 1000,\\n               1Ki = 1024,\\n               1M = 1000000,\\n               1Mi = 1048576,\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"  si         accept optional single letter suffix:\\n               1K = 1000,\\n               1M = 1000000,\\n               ...\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"  iec        accept optional single letter suffix:\\n               1K = 1024,\\n               1M = 1048576,\\n               ...\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"  iec-i      accept optional two-letter suffix:\\n               1Ki = 1024,\\n               1Mi = 1048576,\\n               ...\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"\\nFIELDS supports cut(1) style field ranges:\\n  N    N'th field, counted from 1\\n  N-   from N'th field, to end of line\\n  N-M  from N'th to M'th field (inclusive)\\n  -M   from first to M'th field (inclusive)\\n  -    all fields\\nMultiple fields/ranges can be separated with commas\\n\", 5), g49);\n    fputs_unlocked(dcgettext(NULL, \"\\nFORMAT must be suitable for printing one floating-point argument '%f'.\\nOptional quote (%'f) will enable --grouping (if supported by current locale).\\nOptional width value (%10f) will pad output. Optional zero (%010f) width\\nwill zero pad the number. Optional negative values (%-10f) will left align.\\nOptional precision (%.1f) will override the input determined precision.\\n\", 5), g49);\n    __printf_chk(1, dcgettext(NULL, \"\\nExit status is 0 if all input numbers were successfully converted.\\nBy default, %s will stop at the first conversion error with exit status 2.\\nWith --invalid='fail' a warning is printed for each conversion error\\nand the exit status is 2.  With --invalid='warn' each conversion error is\\ndiagnosed, but the exit status is 0.  With --invalid='ignore' conversion\\nerrors are not diagnosed and the exit status is 0.\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"\\nExamples:\\n  $ %s --to=si 1000\\n            -> \\\"1.0K\\\"\\n  $ %s --to=iec 2048\\n           -> \\\"2.0K\\\"\\n  $ %s --to=iec-i 4096\\n           -> \\\"4.0Ki\\\"\\n  $ echo 1K | %s --from=si\\n           -> \\\"1000\\\"\\n  $ echo 1K | %s --from=iec\\n           -> \\\"1024\\\"\\n  $ df -B1 | %s --header --field 2-4 --to=si\\n  $ ls -l  | %s --header --field 5 --to=iec\\n  $ ls -lh | %s --header --field 5 --from=iec --padding=10\\n  $ ls -lh | %s --header --field 5 --from=iec --format %%10f\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x4047d8\n    bool v2; // 0x404360\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x404870\n    int64_t v6 = *(int64_t *)v5; // 0x404874\n    int64_t v7 = 7; // 0x40487a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"numfmt\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x404886\n        char v11 = *(char *)v9; // 0x404886\n        char v12 = v11; // 0x404886\n        bool v13 = false; // 0x404886\n        while (v10 == v11) {\n            // 0x40487c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x404886\n            int64_t v15 = v8 + v3; // 0x404886\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x404892\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 7;\n    }\n    // 0x404892\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4049a4;\n        } else {\n            // 0x40498e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4049e3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4048f4;\n            } else {\n                goto lab_0x4049a4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4048f4;\n        } else {\n            // 0x4048da\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4049e3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4048f4;\n            } else {\n                goto lab_0x4048f4;\n            }\n        }\n    }\n  lab_0x4049a4:\n    // 0x4049a4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x404934\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40439f\n    exit(status);\n    // UNREACHABLE\n  lab_0x4048f4:\n    // 0x4048f4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x404934\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40439f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a10",
            "funcStartAddr": "404a10",
            "funcEndAddr": "404a22",
            "decompiledFuncCode": "int64_t function_404a10(void) {\n    int64_t result = 0xffffffff; // 0x404a19\n    int64_t v1; // 0x404a10\n    if (0x100000000 * v1 >> 32 >= (v1 & 0xffffffff)) {\n        int32_t v2 = v1;\n        int32_t v3 = v2 - (int32_t)v1; // 0x404a17\n        result = v3 < 0 == ((v3 ^ v2) & (int32_t)(v1 ^ v1)) < 0 == (v3 != 0);\n    }\n    // 0x404a21\n    return result;\n}\n"
        },
        {
            "funcName": "function_404a30",
            "funcStartAddr": "404a30",
            "funcEndAddr": "404afc",
            "decompiledFuncCode": "int64_t function_404a30(int64_t a1, int64_t a2) {\n    int32_t v1 = g90; // 0x404a3c\n    int64_t v2 = v1; // 0x404a3c\n    int64_t v3 = g89; // 0x404a54\n    int64_t v4 = v2; // 0x404a54\n    if (g76 == v2) {\n        int64_t v5; // 0x404a30\n        int64_t v6; // 0x404a30\n        if (g89 == 0) {\n            // 0x404ac8\n            v5 = 8;\n            v6 = 128;\n            if (v1 != 0) {\n                // 0x404acd\n                v5 = v2;\n                v6 = 16 * v2;\n                if (v1 > -1 != v1 > -1) {\n                    // 0x404ae7\n                    function_407da0(a1);\n                    // UNREACHABLE\n                }\n            }\n        } else {\n            if (v1 <= 0xffffffff) {\n                // 0x404ae7\n                function_407da0(a1);\n                // UNREACHABLE\n            }\n            int64_t v7 = v2 + 1 + v2 / 2; // 0x404a9a\n            v5 = v7;\n            v6 = 16 * v7;\n        }\n        // 0x404aa6\n        g76 = v5;\n        v3 = function_407bb0(g89, v6);\n        g89 = v3;\n        v4 = g90;\n    }\n    int64_t result = 16 * v4 + v3; // 0x404a61\n    *(int64_t *)result = a1;\n    *(int64_t *)(result + 8) = a2;\n    g90 = (int32_t)v4 + 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404b00",
            "funcStartAddr": "404b00",
            "funcEndAddr": "40509e",
            "decompiledFuncCode": "int64_t function_404b00(int64_t a1, uint64_t a2) {\n    int64_t v1 = a1; // 0x404b1e\n    int64_t v2 = 0; // 0x404b1e\n    if (a2 % 2 != 0) {\n        // 0x404b20\n        bool v3; // 0x404b00\n        int64_t v4 = v3 ? -1 : 1; // 0x404b2d\n        int64_t v5 = (int64_t)&g20; // 0x404b00\n        int64_t v6 = a1; // 0x404b00\n        int64_t v7 = 2; // 0x404b2d\n        unsigned char v8 = *(char *)v6; // 0x404b2d\n        char v9 = *(char *)v5; // 0x404b2d\n        char v10 = v9; // 0x404b2d\n        bool v11 = false; // 0x404b2d\n        while (v8 == v9) {\n            // 0x404b20\n            v7--;\n            v5 += v4;\n            v6 += v4;\n            v10 = v8;\n            v11 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = *(char *)v6;\n            v9 = *(char *)v5;\n            v10 = v9;\n            v11 = false;\n        }\n        unsigned char v12 = v10;\n        v2 = !((v8 < v12 | v11)) == v8 < v12;\n        v1 = v2 + a1;\n    }\n    int32_t v13 = 1; // 0x404b51\n    int64_t v14 = v2; // 0x404b51\n    int64_t v15 = v2; // 0x404b51\n    int64_t v16 = v2; // 0x404b51\n    int64_t v17 = 0; // 0x404b51\n    int64_t v18 = 0; // 0x404b51\n    int64_t v19 = v1; // 0x404b51\n    char * str; // 0x404f23\n    int64_t v20; // 0x404b00\n    int64_t v21; // 0x404b00\n    int64_t v22; // 0x404b00\n    char * format; // 0x404b00\n    int64_t v23; // 0x404b00\n    int64_t v24; // 0x404b00\n    uint64_t v25; // 0x404b00\n    int32_t v26; // 0x404b00\n    int32_t v27; // 0x404b00\n    char * format2; // 0x404b00\n    char * v28; // 0x404be2\n    while (true) {\n      lab_0x404be2:\n        // 0x404be2\n        v22 = v19;\n        v21 = v18;\n        v25 = v16;\n        v23 = v15;\n        v24 = v14;\n        v28 = (char *)v22;\n        char v29 = *v28; // 0x404be2\n        if (v29 != 45) {\n            // 0x404b60\n            v27 = v13;\n            if (v29 == 44) {\n                goto lab_0x404b8c;\n            } else {\n                unsigned char v30 = *(char *)(2 * (int64_t)v29 + (int64_t)*__ctype_b_loc()); // 0x404b7c\n                if (v29 != 0 == v30 % 2 == 0) {\n                    if ((int32_t)v29 >= 58) {\n                        // 0x405048\n                        function_407590(v22);\n                        if ((a2 & 4) == 0) {\n                            // 0x405090\n                            format2 = dcgettext(NULL, \"invalid field value %s\", 5);\n                            goto lab_0x40506b;\n                        } else {\n                            // 0x40505f\n                            format2 = dcgettext(NULL, \"invalid byte/character position %s\", 5);\n                            goto lab_0x40506b;\n                        }\n                    }\n                    char * v31 = g75; // 0x404dc5\n                    if ((char)v17 == 0 || g75 == NULL) {\n                        // 0x404e28\n                        g75 = v28;\n                        v31 = v28;\n                    }\n                    // 0x404dd1\n                    str = v31;\n                    if (v25 >= 0x199999999999999a) {\n                        goto lab_0x404f23_2;\n                    }\n                    int64_t v32 = (0x100000000 * (int64_t)v29 - 0x3000000000 >> 32) + 10 * v25; // 0x404dfc\n                    v26 = v27;\n                    v14 = (char)v23 == 0 ? 1 : v24 & 0xffffffff;\n                    v15 = v23;\n                    v16 = v32;\n                    v20 = 1;\n                    v18 = ((char)v23 != 0 ? v23 : v21) & 0xffffffff;\n                    if (v32 < v25 || v32 == -1) {\n                        goto lab_0x404f23_2;\n                    }\n                    goto lab_0x404bde;\n                } else {\n                    goto lab_0x404b8c;\n                }\n            }\n        } else {\n            if ((char)v23 != 0) {\n                // break -> 0x404fbb\n                break;\n            }\n            char v33 = v24; // 0x404bff\n            unsigned char v34 = (char)(v25 == 0) & v33; // 0x404bff\n            if (v34 != 0) {\n                if ((a2 & 4) == 0) {\n                    // 0x404fd8\n                    format = dcgettext(NULL, \"fields are numbered from 1\", 5);\n                    goto lab_0x404f0b;\n                } else {\n                    // 0x404faa\n                    format = dcgettext(NULL, \"byte/character positions are numbered from 1\", 5);\n                    goto lab_0x404f0b;\n                }\n            }\n            if (v33 != 0) {\n                // 0x404da0\n                v26 = v25;\n                v14 = v24;\n                v15 = v24 & 0xffffffff;\n                v16 = 0;\n                v20 = v34;\n                v18 = v21;\n            } else {\n                // 0x404c12\n                v26 = 1;\n                v14 = v24;\n                v15 = 1;\n                v16 = 0;\n                v20 = v24 & 0xffffffff;\n                v18 = v21;\n            }\n            goto lab_0x404bde;\n        }\n    }\n    if ((a2 & 4) == 0) {\n        // 0x404fe9\n        format = dcgettext(NULL, \"invalid field range\", 5);\n    } else {\n        // 0x404fc7\n        format = dcgettext(NULL, \"invalid byte or character range\", 5);\n    }\n  lab_0x404f0b:\n    // 0x404f0b\n    error(0, 0, format);\n    function_404360(1);\n    // UNREACHABLE\n  lab_0x404c47_2:;\n    // 0x404c47\n    int64_t v35; // 0x404b00\n    int64_t v36; // 0x404b00\n    int64_t v37; // 0x404b00\n    int64_t v38; // 0x404b00\n    int64_t v39; // 0x404b00\n    int64_t v40; // 0x404b00\n    if (g90 == 0) {\n        // 0x405026\n        v40 = (int64_t)\"missing list of fields\";\n        if ((a2 & 4) == 0) {\n            goto lab_0x404f04_2;\n        } else {\n            // 0x405032\n            format = dcgettext(NULL, \"missing list of byte/character positions\", 5);\n            goto lab_0x404f0b;\n        }\n    } else {\n        // 0x404c57\n        qsort((int64_t *)g89, g90, 16, (int32_t (*)(int64_t *, int64_t *))0x404a10);\n        int64_t v41 = g90; // 0x404c70\n        v37 = 0;\n        v35 = g89;\n        v38 = v41;\n        v39 = v41;\n        v36 = g89;\n        if (g90 == 0) {\n            goto lab_0x404d11;\n        } else {\n            goto lab_0x404c89;\n        }\n    }\n  lab_0x404f04_2:\n    // 0x404f04\n    format = dcgettext(NULL, (char *)v40, 5);\n    goto lab_0x404f0b;\n  lab_0x404f23_2:\n    // 0x404f23\n    strspn(str, \"0123456789\");\n    int64_t v42 = function_407de0(); // 0x404f3d\n    function_407590(v42);\n    char * format3; // 0x404b00\n    if ((a2 & 4) == 0) {\n        // 0x405015\n        format3 = dcgettext(NULL, \"field number %s is too large\", 5);\n        goto lab_0x404f6c;\n    } else {\n        // 0x404f60\n        format3 = dcgettext(NULL, \"byte/character offset %s is too large\", 5);\n        goto lab_0x404f6c;\n    }\n  lab_0x404b8c:\n    if ((char)v23 == 0) {\n        if (v25 == 0) {\n            if ((a2 & 4) == 0) {\n                // 0x404fd8\n                format = dcgettext(NULL, \"fields are numbered from 1\", 5);\n                goto lab_0x404f0b;\n            } else {\n                // 0x405006\n                format = dcgettext(NULL, \"byte/character positions are numbered from 1\", 5);\n                goto lab_0x404f0b;\n            }\n        }\n        // 0x404c39\n        function_404a30(v25, v25);\n        v26 = v27;\n        v14 = 0;\n        v15 = 0;\n        v16 = 0;\n        v20 = 0;\n        v18 = 0;\n        if (*v28 == 0) {\n            goto lab_0x404c47_2;\n        }\n        goto lab_0x404bde;\n    } else {\n        if ((char)v24 != 0) {\n            // 0x404d70\n            if ((char)v21 == 0) {\n                goto lab_0x404bbb;\n            } else {\n                goto lab_0x404d79;\n            }\n        } else {\n            if ((char)v21 != 0) {\n                goto lab_0x404d79;\n            } else {\n                // 0x404ba6\n                v40 = (int64_t)\"invalid range with no endpoint: -\";\n                if (a2 % 2 == 0) {\n                    goto lab_0x404f04_2;\n                }\n                goto lab_0x404bbb;\n            }\n        }\n    }\n  lab_0x404bde:\n    // 0x404bde\n    v13 = v26;\n    v17 = v20;\n    v19 = v22 + 1;\n    goto lab_0x404be2;\n  lab_0x404bbb:;\n    int32_t v43 = 1;\n    function_404a30((int64_t)v43, -1);\n    int32_t v44 = v43; // 0x404bc7\n    goto lab_0x404bcc;\n  lab_0x404d79:;\n    uint64_t v86 = (int64_t)v27; // 0x404d79\n    v40 = (int64_t)\"invalid decreasing range\";\n    if (v25 < v86) {\n        goto lab_0x404f04_2;\n    }\n    // 0x404d84\n    function_404a30(v86, v25);\n    v44 = v27;\n    goto lab_0x404bcc;\n  lab_0x404bcc:\n    // 0x404bcc\n    v26 = v44;\n    v14 = 0;\n    v15 = 0;\n    v16 = 0;\n    v20 = 0;\n    v18 = 0;\n    if (*v28 == 0) {\n        goto lab_0x404c47_2;\n    }\n    goto lab_0x404bde;\n  lab_0x40506b:\n    // 0x40506b\n    error(0, 0, format2);\n    function_404360(1);\n    // UNREACHABLE\n  lab_0x404d11:;\n    int64_t v45 = v39; // 0x404d16\n    int64_t v46 = v36; // 0x404d16\n    int64_t * v47; // 0x404e4f\n    if ((a2 & 2) != 0) {\n        // 0x404e44\n        g89 = 0;\n        v47 = (int64_t *)v36;\n        uint64_t v48 = *v47; // 0x404e4f\n        g90 = 0;\n        g76 = 0;\n        if (v48 < 2) {\n            goto lab_0x404e6e;\n        } else {\n            // 0x404ee7\n            function_404a30(1, v48 - 1);\n            goto lab_0x404e6e;\n        }\n    } else {\n        goto lab_0x404d1c;\n    }\n  lab_0x404c89:;\n    int64_t v49 = v37 + 1; // 0x404c89\n    int64_t v50 = v49; // 0x404c90\n    int64_t v51 = v38; // 0x404c90\n    int64_t v52 = v35; // 0x404c90\n    int64_t v53 = v49; // 0x404c90\n    int64_t v54 = v35; // 0x404c90\n    int64_t v55 = v38; // 0x404c90\n    if (v49 >= v38) {\n        goto lab_0x404c80;\n    } else {\n        goto lab_0x404c92;\n    }\n  lab_0x404d1c:;\n    int64_t v56 = v45 + 1; // 0x404d1c\n    g90 = v56;\n    int64_t v57 = function_407bb0(v46, 16 * v56); // 0x404d31\n    g89 = v57;\n    int64_t result = v57 - 16 + 16 * (int64_t)g90; // 0x404d48\n    *(int64_t *)(result + 8) = -1;\n    *(int64_t *)result = -1;\n    return result;\n  lab_0x404c80:\n    // 0x404c80\n    v37 = v50;\n    v35 = v52;\n    v38 = v51;\n    v39 = v51;\n    v36 = v52;\n    if (v50 >= v51) {\n        goto lab_0x404d11;\n    } else {\n        goto lab_0x404c89;\n    }\n  lab_0x404c92:;\n    int64_t v58 = v55;\n    int64_t v59 = v54;\n    int64_t v60 = v53;\n    int64_t v61 = 16 * v60; // 0x404c95\n    int64_t v62 = v61 - 16; // 0x404c99\n    int64_t v63 = v61 + v59; // 0x404c9d\n    int64_t v64 = v62 + v59; // 0x404ca1\n    uint64_t v65 = *(int64_t *)(v64 + 8); // 0x404ca5\n    v50 = v60;\n    v51 = v58;\n    v52 = v59;\n    int64_t v66; // 0x404b00\n    int64_t v67; // 0x404b00\n    int64_t v68; // 0x404b00\n    int64_t v69; // 0x404b00\n    int64_t v70; // 0x404b00\n    int64_t v71; // 0x404cae\n    if (v65 < *(int64_t *)v63) {\n        goto lab_0x404c80;\n    } else {\n        // 0x404cae\n        v71 = v61 + 16;\n        v67 = v65;\n        v70 = v64;\n        v68 = v58;\n        v69 = v63;\n        v66 = v59;\n        goto lab_0x404cb8;\n    }\n  lab_0x404e6e:;\n    int64_t v72 = 16 * v39 + v36;\n    int64_t v73; // 0x404b00\n    if (v39 < 2) {\n        goto lab_0x404eab;\n    } else {\n        // 0x404e88\n        v73 = v36 + 16;\n        goto lab_0x404e88_2;\n    }\n  lab_0x404eab:;\n    int64_t v74 = *(int64_t *)(v72 - 8); // 0x404eaf\n    if (v74 != -1) {\n        // 0x404ed5\n        function_404a30(v74 + 1, -1);\n        goto lab_0x404eba;\n    } else {\n        goto lab_0x404eba;\n    }\n  lab_0x404cb8:;\n    uint64_t v75 = v67;\n    uint64_t v76 = *(int64_t *)(v69 + 8); // 0x404cb8\n    *(int64_t *)(v70 + 8) = v76 >= v75 ? v76 : v75;\n    memmove((int64_t *)v69, (int64_t *)(v71 + v66), 16 * (int32_t)(v68 - v60) - 16);\n    int64_t v77 = g89; // 0x404ce0\n    int64_t v78 = (int64_t)g90 - 1; // 0x404ce7\n    g90 = v78;\n    v50 = v60;\n    v51 = v78;\n    v52 = v77;\n    if (v78 > v60) {\n        int64_t v79 = v77 + v62; // 0x404cf7\n        int64_t v80 = v77 + v61; // 0x404cfb\n        uint64_t v81 = *(int64_t *)(v79 + 8); // 0x404cff\n        v67 = v81;\n        v70 = v79;\n        v68 = v78;\n        v69 = v80;\n        v66 = v77;\n        if (*(int64_t *)v80 > v81) {\n            int64_t v82 = v60 + 1; // 0x404c89\n            v50 = v82;\n            v51 = v78;\n            v52 = v77;\n            v53 = v82;\n            v54 = v77;\n            v55 = v78;\n            if (v82 >= v78) {\n                goto lab_0x404c80;\n            } else {\n                goto lab_0x404c92;\n            }\n        } else {\n            goto lab_0x404cb8;\n        }\n    } else {\n        goto lab_0x404c80;\n    }\n  lab_0x404eba:\n    // 0x404eba\n    free(v47);\n    v45 = g90;\n    v46 = g89;\n    goto lab_0x404d1c;\n  lab_0x404e88_2:;\n    int64_t v83 = *(int64_t *)v73; // 0x404e8c\n    int64_t v84 = *(int64_t *)(v73 - 8) + 1; // 0x404e90\n    if (v84 == v83) {\n        goto lab_0x404ea2;\n    } else {\n        // 0x404e99\n        function_404a30(v84, v83 - 1);\n        goto lab_0x404ea2;\n    }\n  lab_0x404ea2:;\n    int64_t v85 = v73 + 16; // 0x404ea2\n    v73 = v85;\n    if (v72 != v85) {\n        goto lab_0x404e88_2;\n    } else {\n        goto lab_0x404eab;\n    }\n  lab_0x404f6c:\n    // 0x404f6c\n    error(0, 0, format3);\n    free((int64_t *)v42);\n    function_404360(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4050a0",
            "funcStartAddr": "4050a0",
            "funcEndAddr": "4050d6",
            "decompiledFuncCode": "int64_t function_4050a0(void) {\n    // 0x4050a0\n    g90 = 0;\n    g76 = 0;\n    free((int64_t *)g89);\n    g89 = 0;\n    return &g93;\n}\n"
        },
        {
            "funcName": "function_4050e0",
            "funcStartAddr": "4050e0",
            "funcEndAddr": "4050ea",
            "decompiledFuncCode": "int64_t function_4050e0(void) {\n    // 0x4050e0\n    return function_404360(1);\n}\n"
        },
        {
            "funcName": "function_4050f0",
            "funcStartAddr": "4050f0",
            "funcEndAddr": "405206",
            "decompiledFuncCode": "int64_t function_4050f0(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x405111\n    int32_t len = strlen(str); // 0x405111\n    if (a2 == 0) {\n        // 0x4051dd\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x405177\n    int64_t v4 = a3; // 0x4050f0\n    int64_t v5 = a2; // 0x40517e\n    int64_t str4; // 0x4050f0\n    int64_t v6; // 0x4050f0\n    int32_t v7; // 0x4050f0\n    int32_t v8; // 0x4050f0\n    int32_t v9; // 0x4050f0\n    int64_t v10; // 0x4050f0\n    int64_t result; // 0x4050f0\n    int32_t v11; // 0x405173\n    char * str2; // 0x405192\n    while (true) {\n        // 0x405187\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x40519b\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x4051dd\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x4051af\n                break;\n            }\n            // 0x405140\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x40514e\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x405177\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x4051b3\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x4051ba\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x405187\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x405187\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x40519b\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x4051dd\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x4051af\n                    break;\n                }\n                // 0x405140\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x40514e\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x405177\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x4051af\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x4051c8:\n    // 0x4051dd\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_405210",
            "funcStartAddr": "405210",
            "funcEndAddr": "405281",
            "decompiledFuncCode": "int64_t function_405210(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405210\n    char * format; // 0x405210\n    if (a3 == -1) {\n        // 0x405270\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x405225\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x405234\n    int64_t v1; // 0x405210\n    function_407570(1, (int64_t *)a1, 5, v1);\n    function_407260(0, 8, a2);\n    error(0, 0, format);\n    return &g93;\n}\n"
        },
        {
            "funcName": "function_405290",
            "funcStartAddr": "405290",
            "funcEndAddr": "4053a8",
            "decompiledFuncCode": "int64_t function_405290(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x4052bd\n    fputs_unlocked(v1, g52);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x405330\n        int64_t v5; // 0x405337\n        int64_t v6; // 0x405357\n        while (v3 != 0) {\n            // 0x40531b\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x4052e0\n                break;\n            }\n            // 0x40532d\n            v4 = v3 + 1;\n            v5 = function_407590(v2);\n            __fprintf_chk(g52, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x405360\n                goto lab_0x405360;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x4052e3\n        int64_t v8 = function_407590(v2); // 0x4052ed\n        __fprintf_chk(g52, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x40530d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x40531b\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x4052e0\n                    break;\n                }\n                // 0x40532d\n                v4 = v3 + 1;\n                v5 = function_407590(v2);\n                __fprintf_chk(g52, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x405360\n                    goto lab_0x405360;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x4052e0\n            v7 = v3 + 1;\n            v8 = function_407590(v2);\n            __fprintf_chk(g52, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x405360:;\n    int64_t v10 = (int64_t)g52; // 0x405360\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x405367\n    uint64_t result = *v11; // 0x405367\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x405390\n        return __overflow(g52, 10);\n    }\n    // 0x405371\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4053b0",
            "funcStartAddr": "4053b0",
            "funcEndAddr": "405420",
            "decompiledFuncCode": "int64_t function_4053b0(char * a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_4050f0(a2, v2, v1, a5); // 0x4053dc\n    int64_t result = v3; // 0x4053e4\n    if (v3 < 0) {\n        // 0x4053f8\n        function_405210((int64_t)a1, a2, v3);\n        function_405290(v2, v1, a5);\n        result = -1;\n    }\n    // 0x4053e6\n    return result;\n}\n"
        },
        {
            "funcName": "function_405420",
            "funcStartAddr": "405420",
            "funcEndAddr": "40546d",
            "decompiledFuncCode": "int64_t function_405420(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x405420\n    if (result == 0) {\n        // 0x405461\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x405458\n    int32_t n = a4; // 0x405458\n    int64_t v1 = result; // 0x40545f\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x405461\n        return result;\n    }\n    int64_t str3 = str2; // 0x40545f\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x405440\n    int64_t result2 = 0; // 0x40544d\n    while (v2 != 0) {\n        // 0x40544f\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x405461\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x405461\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405470",
            "funcStartAddr": "405470",
            "funcEndAddr": "405478",
            "decompiledFuncCode": "int64_t function_405470(int64_t a1) {\n    // 0x405470\n    g78 = a1;\n    int64_t result; // 0x405470\n    return result;\n}\n"
        },
        {
            "funcName": "function_405480",
            "funcStartAddr": "405480",
            "funcEndAddr": "405488",
            "decompiledFuncCode": "int64_t function_405480(int64_t a1) {\n    // 0x405480\n    g77 = a1;\n    int64_t result; // 0x405480\n    return result;\n}\n"
        },
        {
            "funcName": "function_405490",
            "funcStartAddr": "405490",
            "funcEndAddr": "40552e",
            "decompiledFuncCode": "int64_t function_405490(void) {\n    // 0x405490\n    int32_t * err_num; // 0x4054a6\n    if ((int32_t)function_4097e0((int64_t)g49) == 0) {\n        goto lab_0x4054bc;\n    } else {\n        // 0x4054a6\n        err_num = __errno_location();\n        if (g77 == 0) {\n            goto lab_0x4054d3;\n        } else {\n            // 0x4054b7\n            if (*err_num != 32) {\n                goto lab_0x4054d3;\n            } else {\n                goto lab_0x4054bc;\n            }\n        }\n    }\n  lab_0x4054bc:;\n    int64_t result = function_4097e0((int64_t)g52); // 0x4054c3\n    if ((int32_t)result == 0) {\n        // 0x4054cc\n        return result;\n    }\n    // 0x40550e\n    _exit(g38);\n    // UNREACHABLE\n  lab_0x4054d3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4054df\n    if (g78 == 0) {\n        // 0x405519\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4054f3\n        error(0, *err_num, \"%s: %s\", (char *)function_4073e0((int64_t)g78), v1);\n    }\n    // 0x40550e\n    _exit(g38);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405530",
            "funcStartAddr": "405530",
            "funcEndAddr": "4058cb",
            "decompiledFuncCode": "int64_t function_405530(int64_t a1, int64_t a2, int64_t a3, uint64_t a4, int32_t a5, uint64_t a6) {\n    char * str = (char *)a1; // 0x405556\n    int32_t len = strlen(str); // 0x405556\n    int64_t v1 = len; // 0x405556\n    int32_t * v2 = NULL; // 0x405562\n    int64_t v3 = a1; // 0x405562\n    int64_t v4 = 0; // 0x405562\n    int64_t v5 = v1; // 0x405562\n    int64_t v6 = v1; // 0x405562\n    int64_t v7; // 0x405530\n    int64_t result; // 0x405530\n    int64_t v8; // 0x405530\n    int64_t v9; // 0x405530\n    int32_t * v10; // 0x405530\n    int32_t v11; // 0x405530\n    int64_t v12; // 0x405740\n    int64_t * mem; // 0x405714\n    if ((a6 & 2) == 0) {\n        // 0x4056b0\n        v2 = NULL;\n        v3 = a1;\n        v4 = 0;\n        v5 = v1;\n        v6 = v1;\n        if (__ctype_get_mb_cur_max() < 2) {\n            goto lab_0x405576;\n        } else {\n            int32_t v13 = mbstowcs(NULL, str, 0); // 0x4056cb\n            if (v13 != -1) {\n                int32_t n = v13 + 1; // 0x405700\n                int32_t size = 4 * n; // 0x40570f\n                mem = malloc(size);\n                if (mem == NULL) {\n                    // 0x40582a\n                    v2 = (int32_t *)mem;\n                    v3 = a1;\n                    v4 = 0;\n                    v5 = v1;\n                    v6 = v1;\n                    v10 = NULL;\n                    v7 = 0;\n                    result = -1;\n                    if (a6 % 2 != 0) {\n                        goto lab_0x405576;\n                    } else {\n                        goto lab_0x40564e;\n                    }\n                } else {\n                    int32_t v14 = mbstowcs((int32_t *)mem, str, n); // 0x405732\n                    v2 = (int32_t *)mem;\n                    v3 = a1;\n                    v4 = 0;\n                    v5 = v1;\n                    v6 = v1;\n                    if (v14 == 0) {\n                        goto lab_0x405576;\n                    } else {\n                        // 0x405740\n                        v12 = (int64_t)mem;\n                        *(int32_t *)((int64_t)size - 4 + v12) = 0;\n                        int32_t wc = *(int32_t *)mem; // 0x405751\n                        if (wc == 0) {\n                            // 0x40583f\n                            v9 = wcswidth((int32_t *)mem, n);\n                            goto lab_0x405850;\n                        } else {\n                            int32_t v15 = 0; // 0x405779\n                            if (iswprint(wc) == 0) {\n                                // 0x40577b\n                                *(int32_t *)v12 = 0xfffd;\n                                v15 = 1;\n                            }\n                            int32_t v16 = v15;\n                            int64_t v17 = v12 + 4; // 0x405786\n                            int32_t v18 = *(int32_t *)v17; // 0x40578a\n                            int32_t wc2 = v18; // 0x40578e\n                            while (v18 != 0) {\n                                int64_t v19 = v17;\n                                v15 = v16;\n                                if (iswprint(wc2) == 0) {\n                                    // 0x40577b\n                                    *(int32_t *)v19 = 0xfffd;\n                                    v15 = 1;\n                                }\n                                // 0x405786\n                                v16 = v15;\n                                v17 = v19 + 4;\n                                v18 = *(int32_t *)v17;\n                                wc2 = v18;\n                            }\n                            int64_t v20 = wcswidth((int32_t *)mem, n); // 0x405797\n                            v9 = v20;\n                            if ((char)v16 == 0) {\n                                goto lab_0x405850;\n                            } else {\n                                // 0x4057aa\n                                v8 = v20;\n                                v11 = wcstombs(NULL, (int32_t *)mem, 0);\n                                goto lab_0x4057c0;\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 0x4056d6\n                v2 = NULL;\n                v3 = a1;\n                v4 = 0;\n                v5 = v1;\n                v6 = v1;\n                v10 = NULL;\n                v7 = 0;\n                result = -1;\n                if (a6 % 2 != 0) {\n                    goto lab_0x405576;\n                } else {\n                    goto lab_0x40564e;\n                }\n            }\n        }\n    } else {\n        goto lab_0x405576;\n    }\n  lab_0x405576:;\n    int32_t * v21 = v2; // 0x40557d\n    int64_t v22 = v3; // 0x40557d\n    int64_t v23 = a4; // 0x40557d\n    int64_t v24 = v4; // 0x40557d\n    int64_t v25 = a4; // 0x40557d\n    int32_t * v26 = v2; // 0x40557d\n    int64_t v27 = v3; // 0x40557d\n    int64_t v28 = v4; // 0x40557d\n    int64_t v29 = v5; // 0x40557d\n    int64_t v30 = v6; // 0x40557d\n    if (v6 <= a4) {\n        goto lab_0x40567b;\n    } else {\n        goto lab_0x405588;\n    }\n  lab_0x40567b:\n    // 0x40567b\n    v21 = v26;\n    v22 = v27;\n    v23 = v30;\n    v24 = v28;\n    v25 = v29;\n    int64_t v31; // 0x405530\n    int64_t v32; // 0x405530\n    int64_t v33; // 0x405530\n    int64_t v34; // 0x405530\n    int64_t v35; // 0x405530\n    int64_t v36; // 0x405530\n    int64_t v37; // 0x405530\n    int32_t * v38; // 0x405530\n    int32_t * v39; // 0x405530\n    int64_t v40; // 0x405530\n    int64_t v41; // 0x405530\n    if (v30 >= a4) {\n        goto lab_0x405588;\n    } else {\n        int64_t v42 = a4 - v30; // 0x40568e\n        *(int64_t *)a4 = v30;\n        v38 = v26;\n        v40 = v27;\n        v36 = v42;\n        v31 = v28;\n        v34 = v29;\n        v39 = v26;\n        v41 = v27;\n        v37 = 0;\n        v32 = v28;\n        v33 = v42;\n        v35 = v29;\n        if (a5 != 0) {\n            goto lab_0x405598;\n        } else {\n            goto lab_0x4055ac;\n        }\n    }\n  lab_0x405588:\n    // 0x405588\n    *(int64_t *)a4 = v23;\n    v38 = v21;\n    v40 = v22;\n    v36 = 0;\n    v31 = v24;\n    v34 = v25;\n    v39 = v21;\n    v41 = v22;\n    v37 = 0;\n    v32 = v24;\n    v33 = 0;\n    v35 = v25;\n    if (a5 == 0) {\n        goto lab_0x4055ac;\n    } else {\n        goto lab_0x405598;\n    }\n  lab_0x4055ac:;\n    uint64_t v43 = v35;\n    int64_t v44 = (a6 & 4) == 0 ? v37 : 0;\n    int64_t v45 = (a6 & 8) != 0 ? 0 : v33; // 0x4055c8\n    if (a3 != 0) {\n        uint64_t v46 = a2 - 1 + a3; // 0x4055d1\n        if (v46 > a2 == (v44 != 0)) {\n            int64_t v47 = -v44; // 0x4055fb\n            int64_t v48 = a2; // 0x405530\n            int64_t v49 = v48;\n            int64_t v50 = v49 + 1; // 0x4055ed\n            *(char *)v49 = 32;\n            v48 = v50;\n            while (v46 > v50 == (a2 - v50 != v47)) {\n                // 0x4055ed\n                v49 = v48;\n                v50 = v49 + 1;\n                *(char *)v49 = 32;\n                v48 = v50;\n            }\n        }\n        // 0x405600\n        *(char *)a2 = 0;\n        uint64_t v51 = v46 - a2; // 0x40560b\n        int64_t v52 = v51 > v43 ? v43 : v51; // 0x405611\n        int64_t v53 = (int64_t)mempcpy((int64_t *)a2, (int64_t *)v41, (int32_t)v52); // 0x405615\n        int64_t v54 = v53; // 0x405620\n        if (v45 != 0 == v46 > v53) {\n            int64_t v55 = v53 + 1; // 0x405635\n            *(char *)v53 = 32;\n            v54 = v55;\n            while (v46 > v55 == (v45 - v55 != -v53)) {\n                int64_t v56 = v55;\n                v55 = v56 + 1;\n                *(char *)v56 = 32;\n                v54 = v55;\n            }\n        }\n        // 0x405648\n        *(char *)v54 = 0;\n    }\n    // 0x40564b\n    v10 = v39;\n    v7 = v32;\n    result = v43 + v44 + v45;\n    goto lab_0x40564e;\n  lab_0x405598:\n    // 0x405598\n    v39 = v38;\n    v41 = v40;\n    v37 = v36;\n    v32 = v31;\n    v33 = 0;\n    v35 = v34;\n    if (a5 != 1) {\n        int64_t v70 = v36 / 2; // 0x4055a6\n        v39 = v38;\n        v41 = v40;\n        v37 = v36 % 2 + v70;\n        v32 = v31;\n        v33 = v70;\n        v35 = v34;\n    }\n    goto lab_0x4055ac;\n  lab_0x40564e:\n    // 0x40564e\n    free((int64_t *)v10);\n    free((int64_t *)v7);\n    return result;\n  lab_0x405850:\n    // 0x405850\n    v26 = (int32_t *)mem;\n    v27 = a1;\n    v28 = 0;\n    v29 = v1;\n    v30 = v9;\n    v8 = v9;\n    v11 = len;\n    if (v9 <= a4) {\n        goto lab_0x40567b;\n    } else {\n        goto lab_0x4057c0;\n    }\n  lab_0x4057c0:;\n    int32_t size2 = v11 + 1;\n    int64_t * mem2 = malloc(size2); // 0x4057c5\n    int64_t v57 = (int64_t)mem2; // 0x4057c5\n    if (mem2 == NULL) {\n        // 0x4058a0\n        v2 = (int32_t *)mem;\n        v3 = a1;\n        v4 = v57;\n        v5 = v1;\n        v6 = v8;\n        v10 = (int32_t *)mem;\n        v7 = v57;\n        result = -1;\n        if (a6 % 2 != 0) {\n            goto lab_0x405576;\n        } else {\n            goto lab_0x40564e;\n        }\n    } else {\n        int32_t v58 = *(int32_t *)mem; // 0x4057de\n        int32_t * v59 = (int32_t *)mem; // 0x4057e8\n        int64_t v60 = 0; // 0x4057e8\n        if (v58 != 0) {\n            int64_t v61 = 0;\n            int64_t v62 = v12;\n            int32_t v63 = wcwidth(v58); // 0x405812\n            int64_t v64; // 0x405530\n            if (v63 != -1) {\n                // 0x4057f8\n                v64 = v63;\n            } else {\n                // 0x40581c\n                *(int32_t *)v62 = 0xfffd;\n                v64 = 1;\n            }\n            int64_t v65 = v64 + v61; // 0x4057fa\n            while (v65 <= a4) {\n                int64_t v66 = v62 + 4; // 0x405804\n                int32_t * v67 = (int32_t *)v66;\n                int32_t v68 = *v67; // 0x405808\n                v59 = v67;\n                v60 = v65;\n                if (v68 == 0) {\n                    goto lab_0x405878;\n                }\n                v61 = v65;\n                v62 = v66;\n                v63 = wcwidth(v68);\n                if (v63 != -1) {\n                    // 0x4057f8\n                    v64 = v63;\n                } else {\n                    // 0x40581c\n                    *(int32_t *)v62 = 0xfffd;\n                    v64 = 1;\n                }\n                // 0x4057fa\n                v65 = v64 + v61;\n            }\n            // 0x405878\n            v59 = (int32_t *)v62;\n            v60 = v61;\n        }\n      lab_0x405878:\n        // 0x405878\n        *v59 = 0;\n        int32_t v69 = wcstombs((char *)mem2, (int32_t *)mem, size2); // 0x40588b\n        v2 = (int32_t *)mem;\n        v3 = v57;\n        v4 = v57;\n        v5 = v69;\n        v6 = v60;\n        goto lab_0x405576;\n    }\n}\n"
        },
        {
            "funcName": "function_4058d0",
            "funcStartAddr": "4058d0",
            "funcEndAddr": "40596d",
            "decompiledFuncCode": "int64_t function_4058d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    uint64_t v1 = a2 + 1; // 0x4058f8\n    int64_t * v2 = (int64_t *)0;\n    int64_t * mem = realloc(v2, (int32_t)v1); // 0x405902\n    while (mem != NULL) {\n        int64_t v3 = (int64_t)mem;\n        *(int64_t *)a2 = a2;\n        int64_t v4 = function_405530(a1, v3, v1, a2, (int32_t)a3, a4 & 0xffffffff); // 0x405929\n        int64_t result; // 0x4058d0\n        if (v4 == -1) {\n            // 0x405960\n            free(mem);\n            result = 0;\n            return result;\n        }\n        // 0x405934\n        result = v3;\n        if (v1 > v4) {\n            // 0x40593c\n            return result;\n        }\n        v1 = v4 + 1;\n        v2 = (int64_t *)v3;\n        mem = realloc(v2, (int32_t)v1);\n    }\n    // 0x405950\n    free(v2);\n    // 0x40593c\n    return 0;\n}\n"
        },
        {
            "funcName": "function_405970",
            "funcStartAddr": "405970",
            "funcEndAddr": "405a09",
            "decompiledFuncCode": "int64_t function_405970(int64_t str) {\n    // 0x405970\n    if (str == 0) {\n        // 0x4059e9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g52);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40597e\n    int64_t result = (int64_t)found_char_pos; // 0x40597e\n    if (found_char_pos == NULL) {\n        // 0x4059d9\n        g79 = str;\n        g51 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x405988\n    if (v1 - str < 7) {\n        // 0x4059d9\n        g79 = str;\n        g51 = str;\n        return result;\n    }\n    // 0x405998\n    bool v2; // 0x405970\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x405970\n    int64_t v5 = result - 6; // 0x405970\n    int64_t v6 = 7; // 0x4059a6\n    unsigned char v7 = *(char *)v5; // 0x4059a6\n    char v8 = *(char *)v4; // 0x4059a6\n    char v9 = v8; // 0x4059a6\n    bool v10 = false; // 0x4059a6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4059b0\n    int64_t v13 = v1; // 0x4059b0\n    int64_t v14 = 3; // 0x4059b0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4059d9\n        g79 = str;\n        g51 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4059c2\n    char v16 = *(char *)v12; // 0x4059c2\n    char v17 = v16; // 0x4059c2\n    bool v18 = false; // 0x4059c2\n    while (v15 == v16) {\n        // 0x4059b2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4059cc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4059ce\n        v20 = result + 4;\n        g48 = v20;\n    }\n    // 0x4059d9\n    g79 = v20;\n    g51 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405a10",
            "funcStartAddr": "405a10",
            "funcEndAddr": "405b02",
            "decompiledFuncCode": "int64_t function_405a10(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x405a24\n    int64_t result = (int64_t)v1; // 0x405a24\n    if (result != a1) {\n        // 0x405a31\n        return result;\n    }\n    int64_t v2 = function_4098a0(); // 0x405a40\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x405af6\n    if (v3 == 85) {\n        // 0x405a50\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x405ae8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g19 : (int64_t)&g14;\n            return result2;\n        }\n        char v4 = *v1; // 0x405a7e\n        int64_t result3 = v4 != 96 ? (int64_t)&g15 : (int64_t)&g18; // 0x405a8b\n        // 0x405a31\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x405ae8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g19 : (int64_t)&g14;\n        return result2;\n    }\n    char v5 = *v1; // 0x405acd\n    int64_t result4 = v5 != 96 ? (int64_t)&g16 : (int64_t)&g17; // 0x405ada\n    // 0x405a31\n    return result4;\n}\n"
        },
        {
            "funcName": "function_405b10",
            "funcStartAddr": "405b10",
            "funcEndAddr": "405b67",
            "decompiledFuncCode": "int64_t function_405b10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x405b10\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x405b58\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405b67",
            "funcStartAddr": "405b67",
            "funcEndAddr": "406d31",
            "decompiledFuncCode": "int64_t function_405b67(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x405bb1\n    int64_t v3 = 0; // 0x405bb1\n    int64_t v4; // 0x405b67\n    int64_t v5; // 0x405b67\n    int64_t v6; // 0x405b67\n    int64_t v7; // 0x405b67\n    int64_t v8; // 0x405b67\n    int64_t v9; // 0x405b67\n    int64_t v10; // 0x405b67\n    int64_t v11; // 0x405b67\n    int64_t v12; // 0x405b67\n    int64_t v13; // 0x405b67\n    int64_t v14; // 0x405b67\n    int64_t v15; // 0x405b67\n    int64_t v16; // 0x405b67\n    int64_t v17; // 0x405b67\n    int64_t v18; // 0x405b67\n    int64_t result; // 0x405b67\n    int64_t v19; // 0x405b67\n    int32_t wc; // bp+132, 0x405b67\n    int64_t ps; // bp+136, 0x405b67\n    char v20; // 0x406120\n    int64_t v21; // 0x406120\n    int64_t v22; // 0x4064c8\n    int64_t v23; // 0x405b67\n    int64_t v24; // 0x4064e7\n    int32_t v25; // 0x405b67\n    while (true) {\n      lab_0x405bb8_2:\n        // 0x405bb8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x405b67\n        int64_t v27; // 0x405bec\n        while (true) {\n          lab_0x405bb8:\n            // 0x405bb8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x405bc3\n            if (v15 == -1) {\n                // 0x405bc5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x405bd3\n            if (v28) {\n                // break (via goto) -> 0x406338\n                goto lab_0x406338;\n            }\n            // 0x405bdc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g92 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4061cb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x405d11;\n                    }\n                    // 0x4065ed\n                    v26 = v5 + 1;\n                    goto lab_0x405bb8;\n                }\n                case 7: {\n                    goto lab_0x405d11;\n                }\n                case 8: {\n                    goto lab_0x405d11;\n                }\n                case 9: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x405d11;\n                }\n                case 12: {\n                    goto lab_0x405d11;\n                }\n                case 13: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x405cdd;\n                }\n                case 36: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x405d11;\n                }\n                case 38: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x405d11;\n                }\n                case 44: {\n                    goto lab_0x405d11;\n                }\n                case 45: {\n                    goto lab_0x405d11;\n                }\n                case 46: {\n                    goto lab_0x405d11;\n                }\n                case 47: {\n                    goto lab_0x405d11;\n                }\n                case 48: {\n                    goto lab_0x405d11;\n                }\n                case 49: {\n                    goto lab_0x405d11;\n                }\n                case 50: {\n                    goto lab_0x405d11;\n                }\n                case 51: {\n                    goto lab_0x405d11;\n                }\n                case 52: {\n                    goto lab_0x405d11;\n                }\n                case 53: {\n                    goto lab_0x405d11;\n                }\n                case 54: {\n                    goto lab_0x405d11;\n                }\n                case 55: {\n                    goto lab_0x405d11;\n                }\n                case 56: {\n                    goto lab_0x405d11;\n                }\n                case 57: {\n                    goto lab_0x405d11;\n                }\n                case 58: {\n                    goto lab_0x405d11;\n                }\n                case 59: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x405d11;\n                }\n                case 66: {\n                    goto lab_0x405d11;\n                }\n                case 67: {\n                    goto lab_0x405d11;\n                }\n                case 68: {\n                    goto lab_0x405d11;\n                }\n                case 69: {\n                    goto lab_0x405d11;\n                }\n                case 70: {\n                    goto lab_0x405d11;\n                }\n                case 71: {\n                    goto lab_0x405d11;\n                }\n                case 72: {\n                    goto lab_0x405d11;\n                }\n                case 73: {\n                    goto lab_0x405d11;\n                }\n                case 74: {\n                    goto lab_0x405d11;\n                }\n                case 75: {\n                    goto lab_0x405d11;\n                }\n                case 76: {\n                    goto lab_0x405d11;\n                }\n                case 77: {\n                    goto lab_0x405d11;\n                }\n                case 78: {\n                    goto lab_0x405d11;\n                }\n                case 79: {\n                    goto lab_0x405d11;\n                }\n                case 80: {\n                    goto lab_0x405d11;\n                }\n                case 81: {\n                    goto lab_0x405d11;\n                }\n                case 82: {\n                    goto lab_0x405d11;\n                }\n                case 83: {\n                    goto lab_0x405d11;\n                }\n                case 84: {\n                    goto lab_0x405d11;\n                }\n                case 85: {\n                    goto lab_0x405d11;\n                }\n                case 86: {\n                    goto lab_0x405d11;\n                }\n                case 87: {\n                    goto lab_0x405d11;\n                }\n                case 88: {\n                    goto lab_0x405d11;\n                }\n                case 89: {\n                    goto lab_0x405d11;\n                }\n                case 90: {\n                    goto lab_0x405d11;\n                }\n                case 91: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x405d11;\n                }\n                case 94: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x405d11;\n                }\n                case 96: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x405d11;\n                }\n                case 98: {\n                    goto lab_0x405d11;\n                }\n                case 99: {\n                    goto lab_0x405d11;\n                }\n                case 100: {\n                    goto lab_0x405d11;\n                }\n                case 101: {\n                    goto lab_0x405d11;\n                }\n                case 102: {\n                    goto lab_0x405d11;\n                }\n                case 103: {\n                    goto lab_0x405d11;\n                }\n                case 104: {\n                    goto lab_0x405d11;\n                }\n                case 105: {\n                    goto lab_0x405d11;\n                }\n                case 106: {\n                    goto lab_0x405d11;\n                }\n                case 107: {\n                    goto lab_0x405d11;\n                }\n                case 108: {\n                    goto lab_0x405d11;\n                }\n                case 109: {\n                    goto lab_0x405d11;\n                }\n                case 110: {\n                    goto lab_0x405d11;\n                }\n                case 111: {\n                    goto lab_0x405d11;\n                }\n                case 112: {\n                    goto lab_0x405d11;\n                }\n                case 113: {\n                    goto lab_0x405d11;\n                }\n                case 114: {\n                    goto lab_0x405d11;\n                }\n                case 115: {\n                    goto lab_0x405d11;\n                }\n                case 116: {\n                    goto lab_0x405d11;\n                }\n                case 117: {\n                    goto lab_0x405d11;\n                }\n                case 118: {\n                    goto lab_0x405d11;\n                }\n                case 119: {\n                    goto lab_0x405d11;\n                }\n                case 120: {\n                    goto lab_0x405d11;\n                }\n                case 121: {\n                    goto lab_0x405d11;\n                }\n                case 122: {\n                    goto lab_0x405d11;\n                }\n                case 123: {\n                    goto lab_0x405cb5;\n                }\n                case 124: {\n                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x405cb5;\n                }\n                case 126: {\n                    goto lab_0x405cdd;\n                }\n                default: {\n                    goto lab_0x4060b5;\n                }\n            }\n        }\n      lab_0x4060b5:\n        if (v23 != 1) {\n            // 0x406420\n            ps = 0;\n            int64_t len = v15; // 0x406430\n            if (v15 == -1) {\n                // 0x406432\n                len = strlen((char *)str);\n            }\n            // 0x40645e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4064bf:\n                // 0x4064bf\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x4064c4\n                int64_t v30 = v29 + str;\n                v24 = function_409760(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x406a3a_2;\n                    }\n                    case -1: {\n                        goto lab_0x406a3a_2;\n                    }\n                    case -2: {\n                        // 0x406b1d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x406b57\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x406b5a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x406b67\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x406b60\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x406a3a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x406a3a_2;\n                    }\n                    case 1: {\n                        goto lab_0x406490;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40653c\n                        char v34 = *(char *)v33; // 0x40654d\n                        unsigned char v35; // 0x405b67\n                        if (v34 < 125) {\n                            // 0x406558\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40656f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x406540\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40654d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x406558\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40656f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x406540\n                            v33++;\n                        }\n                        goto lab_0x406490;\n                    }\n                }\n            }\n            goto lab_0x406a3a_2;\n        } else {\n            // 0x406104\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x405d11;\n        }\n    }\n  lab_0x406338:\n    // 0x406338\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x406c3a\n        if (v8 > result) {\n            // 0x406c43\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x405f67\n        return result;\n    }\n    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x405d11:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x405d20\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x405f2a_2;\n        }\n    }\n    int64_t v39 = result; // 0x405e21\n    char v40 = v20; // 0x405e21\n    int64_t v41 = v38; // 0x405e21\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x405e21\n    int64_t v43 = v36; // 0x405e21\n    goto lab_0x405d9d;\n  lab_0x405f2a_2:\n    // 0x405f67\n    return function_405b10(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x406a3a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x405d11;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40660e\n        int64_t v50 = v5 + 1; // 0x4066f1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x4066f8\n        char v52 = v20; // 0x4066f8\n        int64_t v53 = result; // 0x4066f8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x4066c1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x4066c5\n            int64_t v56 = v54 + 1; // 0x4066ca\n            int64_t v57 = v51 + 1; // 0x4066f1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x4066bc\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x4066c1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x4066c5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x405d9d;\n    }\n  lab_0x406490:\n    // 0x406490\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x4064af\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4064b2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x406a3a\n        goto lab_0x406a3a_2;\n    }\n    goto lab_0x4064bf;\n  lab_0x405cdd:\n    // 0x405cdd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x405f2a_2;\n    }\n    goto lab_0x405d11;\n  lab_0x405cb5:;\n    bool v60 = v15 == 1; // 0x405cc0\n    if (v15 == -1) {\n        // 0x405cc2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x405cce\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x405d11;\n    } else {\n        goto lab_0x405cdd;\n    }\n  lab_0x405d9d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x405da2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x405da6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x405bb8_2;\n}\n"
        },
        {
            "funcName": "function_406d40",
            "funcStartAddr": "406d40",
            "funcEndAddr": "406ede",
            "decompiledFuncCode": "int64_t function_406d40(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x406d42\n    int32_t * v3 = __errno_location(); // 0x406d5c\n    int64_t v4 = (int64_t)g40; // 0x406d61\n    int32_t v5 = *v3; // 0x406d6b\n    int64_t v6 = v4; // 0x406d81\n    if (v2 >= (int64_t)*(int32_t *)&g43) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x406ed9\n            function_407da0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x406d90\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x406d97\n        int64_t v9; // 0x406d40\n        if (g40 == &g41) {\n            int64_t v10 = function_407bb0(0, v8); // 0x406eba\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g41); // 0x406ebf\n            *(int64_t *)&g40 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_407bb0(v4, v8); // 0x406dab\n            *(int64_t *)&g40 = v12;\n            v9 = v12;\n        }\n        // 0x406dba\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g43; // 0x406dba\n        int32_t v14 = v7; // 0x406dc1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g43 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x406df1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x406dfb\n    int64_t * v17 = (int64_t *)v15; // 0x406dfe\n    uint64_t v18 = *v17; // 0x406dfe\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x406e01\n    int64_t result = *v19; // 0x406e01\n    int64_t v20; // 0x406d40\n    uint64_t v21 = function_405b10(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x406e24\n    if (v18 > v21) {\n        // 0x406e9b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x406e37\n    *v17 = v22;\n    if (result != (int64_t)&g80) {\n        // 0x406e47\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_407b50(v22); // 0x406e61\n    *v19 = result2;\n    int64_t v23; // 0x406d40\n    function_405b10(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x406e9b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406ee0",
            "funcStartAddr": "406ee0",
            "funcEndAddr": "406f14",
            "decompiledFuncCode": "int64_t function_406ee0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x406ee7\n    int64_t result = function_407d50(a1 == 0 ? (int64_t)&g81 : a1, 56); // 0x406f06\n    return result;\n}\n"
        },
        {
            "funcName": "function_406f20",
            "funcStartAddr": "406f20",
            "funcEndAddr": "406f2f",
            "decompiledFuncCode": "int64_t function_406f20(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g81 : a1); // 0x406f2c\n    return result;\n}\n"
        },
        {
            "funcName": "function_406f30",
            "funcStartAddr": "406f30",
            "funcEndAddr": "406f3f",
            "decompiledFuncCode": "int64_t function_406f30(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g81 : a1; // 0x406f38\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g81;\n}\n"
        },
        {
            "funcName": "function_406f40",
            "funcStartAddr": "406f40",
            "funcEndAddr": "406f73",
            "decompiledFuncCode": "int64_t function_406f40(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g81 + 8 : a1 + 8; // 0x406f59\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x406f5e\n    uint32_t v3 = *v2; // 0x406f5e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x406f62\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_406f80",
            "funcStartAddr": "406f80",
            "funcEndAddr": "406f93",
            "decompiledFuncCode": "int64_t function_406f80(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g81 + 4 : a1 + 4); // 0x406f8c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_406fa0",
            "funcStartAddr": "406fa0",
            "funcEndAddr": "406fcb",
            "decompiledFuncCode": "int64_t function_406fa0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g81 : a1; // 0x406fa8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x406fc5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x406fbc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g81;\n}\n"
        },
        {
            "funcName": "function_406fd0",
            "funcStartAddr": "406fd0",
            "funcEndAddr": "407042",
            "decompiledFuncCode": "int64_t function_406fd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g81 : a5; // 0x406ff2\n    int32_t * v2 = __errno_location(); // 0x406ffb\n    uint32_t v3 = *(int32_t *)v1; // 0x40701b\n    int64_t result = function_405b10(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40702a\n    return result;\n}\n"
        },
        {
            "funcName": "function_407050",
            "funcStartAddr": "407050",
            "funcEndAddr": "407131",
            "decompiledFuncCode": "int64_t function_407050(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g81 : a4; // 0x407072\n    int32_t * v2 = __errno_location(); // 0x407078\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x407097\n    int32_t * v4 = (int32_t *)v1; // 0x40709a\n    int64_t v5 = function_405b10(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4070b5\n    int64_t v6 = v5 + 1; // 0x4070ba\n    int64_t result = function_407b50(v6); // 0x4070cf\n    function_405b10(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x407114\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40711d\n    return result;\n}\n"
        },
        {
            "funcName": "function_407140",
            "funcStartAddr": "407140",
            "funcEndAddr": "40714a",
            "decompiledFuncCode": "int64_t function_407140(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407140\n    return function_407050(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_407150",
            "funcStartAddr": "407150",
            "funcEndAddr": "4071e5",
            "decompiledFuncCode": "int64_t function_407150(void) {\n    uint32_t v1 = *(int32_t *)&g43; // 0x407150\n    int64_t v2 = v1; // 0x407150\n    int64_t v3 = v2; // 0x407164\n    if (v1 >= 2) {\n        int64_t v4 = &g43;\n        int64_t v5 = v4 + 16; // 0x407183\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g93;\n        while (v5 != (int64_t)g40 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x407180\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g93;\n        }\n    }\n    int64_t v6 = v3; // 0x40719d\n    if (g41 != 0x6103e0) {\n        // 0x40719f\n        free((int64_t *)g41);\n        g41 = 256;\n        *(int64_t *)&g42 = (int64_t)&g80;\n        v6 = &g93;\n    }\n    int64_t result = v6; // 0x4071c1\n    if (g40 != &g41) {\n        // 0x4071c3\n        free(g40);\n        *(int64_t *)&g40 = (int64_t)&g41;\n        result = &g93;\n    }\n    // 0x4071d6\n    *(int32_t *)&g43 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4071f0",
            "funcStartAddr": "4071f0",
            "funcEndAddr": "407201",
            "decompiledFuncCode": "int64_t function_4071f0(void) {\n    // 0x4071f0\n    int64_t v1; // 0x4071f0\n    return function_406d40(v1, v1, -1, (int64_t *)&g81);\n}\n"
        },
        {
            "funcName": "function_407210",
            "funcStartAddr": "407210",
            "funcEndAddr": "40721a",
            "decompiledFuncCode": "int64_t function_407210(void) {\n    // 0x407210\n    int64_t v1; // 0x407210\n    return function_406d40(v1, v1, v1, (int64_t *)&g81);\n}\n"
        },
        {
            "funcName": "function_407220",
            "funcStartAddr": "407220",
            "funcEndAddr": "407236",
            "decompiledFuncCode": "int64_t function_407220(int64_t a1) {\n    // 0x407220\n    return function_406d40(0, a1, -1, (int64_t *)&g81);\n}\n"
        },
        {
            "funcName": "function_407240",
            "funcStartAddr": "407240",
            "funcEndAddr": "407252",
            "decompiledFuncCode": "int64_t function_407240(int64_t a1, int64_t a2) {\n    // 0x407240\n    return function_406d40(0, a1, a2, (int64_t *)&g81);\n}\n"
        },
        {
            "funcName": "function_407260",
            "funcStartAddr": "407260",
            "funcEndAddr": "4072c8",
            "decompiledFuncCode": "int64_t function_407260(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x407270\n    return function_406d40((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4072d0",
            "funcStartAddr": "4072d0",
            "funcEndAddr": "407334",
            "decompiledFuncCode": "int64_t function_4072d0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4072e0\n    return function_406d40((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_407340",
            "funcStartAddr": "407340",
            "funcEndAddr": "40734c",
            "decompiledFuncCode": "int64_t function_407340(int64_t a1, int64_t a2) {\n    // 0x407340\n    return function_407260(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_407350",
            "funcStartAddr": "407350",
            "funcEndAddr": "40735f",
            "decompiledFuncCode": "int64_t function_407350(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407350\n    return function_4072d0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_407360",
            "funcStartAddr": "407360",
            "funcEndAddr": "4073d0",
            "decompiledFuncCode": "int64_t function_407360(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g81); // 0x40736d\n    int128_t v2 = __asm_movdqa(g82); // 0x407375\n    int128_t v3 = __asm_movdqa(g83); // 0x40737d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x407392\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4073a8\n    uint32_t v6 = *v5; // 0x4073a8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4073ad\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_406d40(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4073d0",
            "funcStartAddr": "4073d0",
            "funcEndAddr": "4073dd",
            "decompiledFuncCode": "int64_t function_4073d0(int64_t a1, int64_t a2) {\n    // 0x4073d0\n    return function_407360(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4073e0",
            "funcStartAddr": "4073e0",
            "funcEndAddr": "4073f1",
            "decompiledFuncCode": "int64_t function_4073e0(int64_t a1) {\n    // 0x4073e0\n    return function_407360(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_407400",
            "funcStartAddr": "407400",
            "funcEndAddr": "40740a",
            "decompiledFuncCode": "int64_t function_407400(void) {\n    // 0x407400\n    int64_t v1; // 0x407400\n    return function_407360(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_407410",
            "funcStartAddr": "407410",
            "funcEndAddr": "40747e",
            "decompiledFuncCode": "int64_t function_407410(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40742a\n    return function_406d40(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_407480",
            "funcStartAddr": "407480",
            "funcEndAddr": "4074ec",
            "decompiledFuncCode": "int64_t function_407480(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g81); // 0x407487\n    int128_t v2 = __asm_movdqa(g82); // 0x40748f\n    int128_t v3 = __asm_movdqa(g83); // 0x407497\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x4074b9\n    if (a2 == 0 || a3 == 0) {\n        // 0x4074e7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4074ca\n    return function_406d40(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4074f0",
            "funcStartAddr": "4074f0",
            "funcEndAddr": "4074f9",
            "decompiledFuncCode": "int64_t function_4074f0(void) {\n    // 0x4074f0\n    int64_t v1; // 0x4074f0\n    return function_407480(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_407500",
            "funcStartAddr": "407500",
            "funcEndAddr": "407517",
            "decompiledFuncCode": "int64_t function_407500(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407500\n    return function_407480(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_407520",
            "funcStartAddr": "407520",
            "funcEndAddr": "407533",
            "decompiledFuncCode": "int64_t function_407520(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x407520\n    return function_407480(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_407540",
            "funcStartAddr": "407540",
            "funcEndAddr": "40754a",
            "decompiledFuncCode": "int64_t function_407540(void) {\n    // 0x407540\n    int64_t v1; // 0x407540\n    return function_406d40(v1, v1, v1, &g39);\n}\n"
        },
        {
            "funcName": "function_407550",
            "funcStartAddr": "407550",
            "funcEndAddr": "407562",
            "decompiledFuncCode": "int64_t function_407550(int64_t a1, int64_t a2) {\n    // 0x407550\n    return function_406d40(0, a1, a2, &g39);\n}\n"
        },
        {
            "funcName": "function_407570",
            "funcStartAddr": "407570",
            "funcEndAddr": "407581",
            "decompiledFuncCode": "int64_t function_407570(int64_t a1, int64_t * a2, int64_t a3, int64_t a4) {\n    // 0x407570\n    return function_406d40(a1, (int64_t)a2, -1, &g39);\n}\n"
        },
        {
            "funcName": "function_407590",
            "funcStartAddr": "407590",
            "funcEndAddr": "4075a6",
            "decompiledFuncCode": "int64_t function_407590(int64_t a1) {\n    // 0x407590\n    return function_406d40(0, a1, -1, &g39);\n}\n"
        },
        {
            "funcName": "function_4075b0",
            "funcStartAddr": "4075b0",
            "funcEndAddr": "40798d",
            "decompiledFuncCode": "int64_t function_4075b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x407648\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x4075cc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x4075e6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40762b\n    if (a6 < 10) {\n        // 0x40763a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x407732\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_407990",
            "funcStartAddr": "407990",
            "funcEndAddr": "4079b0",
            "decompiledFuncCode": "int64_t function_407990(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407990\n    if (a5 == 0) {\n        // 0x4079ab\n        return function_4075b0(a1, a2, a3, a4, a5, 0, (int64_t)&g93);\n    }\n    int64_t v1 = 0; // 0x407997\n    v1++;\n    int64_t v2 = v1; // 0x4079a9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4079a0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4079ab\n    return function_4075b0(a1, a2, a3, a4, a5, v2, (int64_t)&g93);\n}\n"
        },
        {
            "funcName": "function_4079b0",
            "funcStartAddr": "4079b0",
            "funcEndAddr": "407a10",
            "decompiledFuncCode": "int64_t function_4079b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4079b0\n    int64_t v3 = &v2; // 0x4079b0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4079e3\n    int64_t v6; // 0x4079cd\n    int64_t * v7; // 0x4079eb\n    int64_t v8; // 0x4079eb\n    int64_t v9; // 0x4079f7\n    if (v5 < 48) {\n        // 0x4079c0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x407a03\n            break;\n        }\n    } else {\n        // 0x4079eb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x407a03\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4079e1\n    while (v4 != 9) {\n        // 0x4079d9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4079c0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x407a03\n                break;\n            }\n        } else {\n            // 0x4079eb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x407a03\n                break;\n            }\n        }\n        // 0x4079d9\n        v10 = 10;\n    }\n    // 0x407a03\n    return function_4075b0(a1, a2, a3, a4, v3, v10, (int64_t)&g93);\n}\n"
        },
        {
            "funcName": "function_407a10",
            "funcStartAddr": "407a10",
            "funcEndAddr": "407acc",
            "decompiledFuncCode": "int64_t function_407a10(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x407a10\n    int64_t v1; // bp-168, 0x407a10\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x407a10\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x407a10\n    int64_t v8; // 0x407a10\n    int64_t v9; // bp-56, 0x407a10\n    int64_t v10; // 0x407a75\n    int64_t v11; // 0x407a99\n    if ((int32_t)v6 < 48) {\n        // 0x407a60\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x407ab0\n            break;\n        }\n    } else {\n        // 0x407a92\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x407ab0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x407a8a\n    int64_t v13 = 10; // 0x407a8a\n    while (v5 != 9) {\n        // 0x407a8c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x407a60\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x407ab0\n                break;\n            }\n        } else {\n            // 0x407a92\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x407ab0\n                break;\n            }\n        }\n        // 0x407a82\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x407ab0\n    int64_t v14; // bp-136, 0x407a10\n    int64_t result = function_4075b0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g93); // 0x407abf\n    return result;\n}\n"
        },
        {
            "funcName": "function_407ad0",
            "funcStartAddr": "407ad0",
            "funcEndAddr": "407b44",
            "decompiledFuncCode": "int64_t function_407ad0(int64_t a1) {\n    // 0x407ad0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x407b33\n    return fputs_unlocked(v1, g49);\n}\n"
        },
        {
            "funcName": "function_407b50",
            "funcStartAddr": "407b50",
            "funcEndAddr": "407b6a",
            "decompiledFuncCode": "int64_t function_407b50(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x407b54\n    if (size != 0 != (mem == NULL)) {\n        // 0x407b63\n        return (int64_t)mem;\n    }\n    // 0x407b65\n    function_407da0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407b70",
            "funcStartAddr": "407b70",
            "funcEndAddr": "407b91",
            "decompiledFuncCode": "int64_t function_407b70(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x407b73\n    int64_t v2 = v1; // 0x407b73\n    if (v2 < 0) {\n        // 0x407b8b\n        function_407da0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x407b89\n        return function_407b50(v2);\n    }\n    // 0x407b8b\n    function_407da0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407ba0",
            "funcStartAddr": "407ba0",
            "funcEndAddr": "407ba2",
            "decompiledFuncCode": "int64_t function_407ba0(void) {\n    // 0x407ba0\n    int64_t v1; // 0x407ba0\n    return function_407b50(v1);\n}\n"
        },
        {
            "funcName": "function_407bb0",
            "funcStartAddr": "407bb0",
            "funcEndAddr": "407be6",
            "decompiledFuncCode": "int64_t function_407bb0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x407bd8\n        free(v1);\n        return (int32_t)&g93 ^ (int32_t)&g93;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x407bc1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x407bd0\n        return (int64_t)mem;\n    }\n    // 0x407be1\n    function_407da0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407bf0",
            "funcStartAddr": "407bf0",
            "funcEndAddr": "407c11",
            "decompiledFuncCode": "int64_t function_407bf0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x407bf3\n    int64_t v2 = v1; // 0x407bf3\n    if (v2 < 0) {\n        // 0x407c0b\n        function_407da0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x407c09\n        return function_407bb0(a1, v2);\n    }\n    // 0x407c0b\n    function_407da0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407c20",
            "funcStartAddr": "407c20",
            "funcEndAddr": "407ca6",
            "decompiledFuncCode": "int64_t function_407c20(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x407c7b\n            function_407da0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_407bb0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x407c63\n    if (a2 == 0) {\n        // 0x407c88\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x407c68\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x407c7b\n        function_407da0(a1);\n        // UNREACHABLE\n    }\n    // 0x407c4a\n    *(int64_t *)a2 = v2;\n    return function_407bb0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_407cb0",
            "funcStartAddr": "407cb0",
            "funcEndAddr": "407d00",
            "decompiledFuncCode": "int64_t function_407cb0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x407cb0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x407cfa\n            function_407da0(a1);\n            // UNREACHABLE\n        }\n        // 0x407cd2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_407bb0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x407ce5\n        *(int64_t *)a2 = 128;\n        return function_407bb0(0, 128);\n    }\n    // 0x407cf8\n    if (a2 < 0) {\n        // 0x407cfa\n        function_407da0(a1);\n        // UNREACHABLE\n    }\n    // 0x407cd2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_407bb0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_407d00",
            "funcStartAddr": "407d00",
            "funcEndAddr": "407d17",
            "decompiledFuncCode": "int64_t function_407d00(int64_t a1, int64_t a2) {\n    // 0x407d00\n    return (int64_t)memset((int64_t *)function_407b50(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_407d20",
            "funcStartAddr": "407d20",
            "funcEndAddr": "407d4e",
            "decompiledFuncCode": "int64_t function_407d20(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x407d27\n    if ((int64_t)v1 < 0) {\n        // 0x407d49\n        function_407da0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x407d49\n        function_407da0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x407d3a\n    if (mem != NULL) {\n        // 0x407d44\n        return (int64_t)mem;\n    }\n    // 0x407d49\n    function_407da0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407d50",
            "funcStartAddr": "407d50",
            "funcEndAddr": "407d78",
            "decompiledFuncCode": "int64_t function_407d50(int64_t a1, int64_t a2) {\n    int64_t v1 = function_407b50(a2); // 0x407d5f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_407d80",
            "funcStartAddr": "407d80",
            "funcEndAddr": "407d93",
            "decompiledFuncCode": "int64_t function_407d80(int64_t str) {\n    // 0x407d80\n    return function_407d50(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_407da0",
            "funcStartAddr": "407da0",
            "funcEndAddr": "407dd1",
            "decompiledFuncCode": "int64_t function_407da0(int64_t a1) {\n    // 0x407da0\n    error(g38, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407de0",
            "funcStartAddr": "407de0",
            "funcEndAddr": "407df8",
            "decompiledFuncCode": "int64_t function_407de0(void) {\n    // 0x407de0\n    int64_t str; // 0x407de0\n    char * v1 = strndup((char *)str, (int32_t)str); // 0x407de4\n    if (v1 != NULL) {\n        // 0x407dee\n        return (int64_t)v1;\n    }\n    // 0x407df3\n    function_407da0(str);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407e00",
            "funcStartAddr": "407e00",
            "funcEndAddr": "408550",
            "decompiledFuncCode": "int64_t function_407e00(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t * str2) {\n    uint32_t base = (int32_t)a3; // 0x407e12\n    if (base >= 37) {\n        // 0x408529\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtol\");\n        return &g93;\n    }\n    // 0x407e1b\n    int64_t v1; // bp-64, 0x407e00\n    int64_t endptr = a2 == 0 ? (int64_t)&v1 : (int64_t)a2; // 0x407e28\n    int32_t * v2 = __errno_location(); // 0x407e32\n    *v2 = 0;\n    char * str = (char *)a1;\n    int32_t str_as_l = strtol(str, (char **)endptr, base); // 0x407e48\n    int64_t * v3 = (int64_t *)endptr; // 0x407e4d\n    int64_t v4 = *v3; // 0x407e4d\n    int64_t v5; // 0x407e00\n    int64_t v6; // 0x407e00\n    int64_t v7; // 0x407e00\n    char v8; // 0x407e00\n    int64_t v9; // 0x407e00\n    int64_t v10; // 0x407e00\n    int64_t v11; // 0x407e00\n    if (v4 == a1) {\n        // 0x407ea8\n        if (str2 == NULL) {\n            // 0x407e7c\n            return 4;\n        }\n        char c = *str; // 0x407eb1\n        if (c == 0) {\n            // 0x407e7c\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x407ecf\n        v10 = 1;\n        v6 = 0;\n        v8 = c;\n        if (found_char_pos == NULL) {\n            // 0x407e7c\n            return 4;\n        }\n        goto lab_0x407edd;\n    } else {\n        int32_t v12 = *v2; // 0x407e58\n        int64_t v13 = 0; // 0x407e5e\n        if (v12 != 0) {\n            // 0x407e90\n            v13 = 1;\n            if (v12 != 34) {\n                // 0x407e7c\n                return 4;\n            }\n        }\n        int64_t v14 = str_as_l; // 0x407e48\n        v9 = v14;\n        v5 = v13;\n        if (str2 == NULL) {\n            goto lab_0x407e75;\n        } else {\n            char c2 = *(char *)v4; // 0x407e68\n            v9 = v14;\n            v5 = v13;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x407f77\n                v10 = v14;\n                v6 = v13;\n                v8 = c2;\n                v11 = v14;\n                v7 = v13;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x407edd;\n                } else {\n                    goto lab_0x407f85;\n                }\n            } else {\n                goto lab_0x407e75;\n            }\n        }\n    }\n  lab_0x407edd:;\n    int64_t v15 = v6;\n    int64_t v16 = v10;\n    unsigned char v17 = v8 - 69;\n    int64_t v18 = 1024; // 0x407ee4\n    int64_t v19 = 1; // 0x407ee4\n    int64_t v20; // 0x407e00\n    int64_t v21; // 0x407e00\n    int64_t v22; // 0x407e00\n    int64_t v23; // 0x407e00\n    int64_t v24; // 0x407e00\n    int64_t v25; // 0x407e00\n    int64_t v26; // 0x407e00\n    int64_t v27; // 0x407e00\n    int64_t v28; // 0x407e00\n    int64_t v29; // 0x407e00\n    int64_t v30; // 0x407e00\n    int64_t v31; // 0x407e00\n    int64_t v32; // 0x407e00\n    int64_t v33; // 0x407e00\n    int64_t v34; // 0x407e00\n    int64_t v35; // 0x407e00\n    int64_t v36; // 0x407e00\n    int64_t v37; // 0x407e00\n    int64_t v38; // 0x407e00\n    if (v17 < 48) {\n        // 0x407f10\n        v18 = 1024;\n        v19 = 1;\n        if ((1 << (int64_t)((v8 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x407ef0;\n        } else {\n            // 0x407f24\n            v18 = 1024;\n            v19 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x407ef0;\n            } else {\n                // 0x407f36\n                v18 = 1000;\n                v19 = 2;\n                switch (*(char *)(v4 + 1)) {\n                    case 68: {\n                        goto lab_0x407ef0;\n                    }\n                    case 105: {\n                        char v39 = *(char *)(v4 + 2); // 0x408512\n                        v18 = 1024;\n                        v19 = (v39 == 66 ? 2 : 1) + (int64_t)(v39 == 66);\n                        goto lab_0x407ef0;\n                    }\n                    default: {\n                        // 0x407f4b\n                        g99 = v17;\n                        v18 = 1000;\n                        v19 = 2;\n                        v11 = v16;\n                        v7 = v15;\n                        v21 = v16;\n                        v28 = 1;\n                        v20 = v15;\n                        v22 = 1024;\n                        v29 = 1;\n                        v33 = -0x20000000000000;\n                        v34 = 1;\n                        v23 = 1024;\n                        v30 = 1;\n                        v36 = -0x20000000000000;\n                        v24 = 1024;\n                        v31 = 1;\n                        v38 = -0x20000000000000;\n                        v25 = 1024;\n                        v32 = 1;\n                        v37 = -0x20000000000000;\n                        v26 = 1024;\n                        v27 = 1;\n                        v35 = -0x20000000000000;\n                        switch (v8) {\n                            case 69: {\n                                goto lab_0x4081d8;\n                            }\n                            case 70: {\n                                goto lab_0x407f85;\n                            }\n                            case 71: {\n                                goto lab_0x408240;\n                            }\n                            case 72: {\n                                goto lab_0x407f85;\n                            }\n                            case 73: {\n                                goto lab_0x407f85;\n                            }\n                            case 74: {\n                                goto lab_0x407f85;\n                            }\n                            case 75: {\n                                goto lab_0x408025;\n                            }\n                            case 76: {\n                                goto lab_0x407f85;\n                            }\n                            case 77: {\n                                goto lab_0x408068;\n                            }\n                            case 78: {\n                                goto lab_0x407f85;\n                            }\n                            case 79: {\n                                goto lab_0x407f85;\n                            }\n                            case 80: {\n                                goto lab_0x408108;\n                            }\n                            case 81: {\n                                goto lab_0x407f85;\n                            }\n                            case 82: {\n                                goto lab_0x407f85;\n                            }\n                            case 83: {\n                                goto lab_0x407f85;\n                            }\n                            case 84: {\n                                goto lab_0x408170;\n                            }\n                            case 85: {\n                                goto lab_0x407f85;\n                            }\n                            case 86: {\n                                goto lab_0x407f85;\n                            }\n                            case 87: {\n                                goto lab_0x407f85;\n                            }\n                            case 88: {\n                                goto lab_0x407f85;\n                            }\n                            case 89: {\n                                goto lab_0x4082a8;\n                            }\n                            case 90: {\n                                goto lab_0x408310;\n                            }\n                            case 91: {\n                                goto lab_0x407f85;\n                            }\n                            case 92: {\n                                goto lab_0x407f85;\n                            }\n                            case 93: {\n                                goto lab_0x407f85;\n                            }\n                            case 94: {\n                                goto lab_0x407f85;\n                            }\n                            case 95: {\n                                goto lab_0x407f85;\n                            }\n                            case 96: {\n                                goto lab_0x407f85;\n                            }\n                            case 97: {\n                                goto lab_0x407f85;\n                            }\n                            case 98: {\n                                goto lab_0x4080d5;\n                            }\n                            case 99: {\n                                goto lab_0x407fc8;\n                            }\n                            case 100: {\n                                goto lab_0x407f85;\n                            }\n                            case 101: {\n                                goto lab_0x407f85;\n                            }\n                            case 102: {\n                                goto lab_0x407f85;\n                            }\n                            case 103: {\n                                goto lab_0x408240;\n                            }\n                            case 104: {\n                                goto lab_0x407f85;\n                            }\n                            case 105: {\n                                goto lab_0x407f85;\n                            }\n                            case 106: {\n                                goto lab_0x407f85;\n                            }\n                            case 107: {\n                                goto lab_0x408025;\n                            }\n                            case 108: {\n                                goto lab_0x407f85;\n                            }\n                            case 109: {\n                                goto lab_0x408068;\n                            }\n                            case 110: {\n                                goto lab_0x407f85;\n                            }\n                            case 111: {\n                                goto lab_0x407f85;\n                            }\n                            case 112: {\n                                goto lab_0x407f85;\n                            }\n                            case 113: {\n                                goto lab_0x407f85;\n                            }\n                            case 114: {\n                                goto lab_0x407f85;\n                            }\n                            case 115: {\n                                goto lab_0x407f85;\n                            }\n                            case 116: {\n                                goto lab_0x408170;\n                            }\n                            default: {\n                                goto lab_0x407ef0;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x407ef0;\n    }\n  lab_0x407e75:\n    // 0x407e75\n    *a4 = v9;\n    // 0x407e7c\n    return v5 & 0xffffffff;\n  lab_0x407ef0:\n    // 0x407ef0\n    g98 = v8 - 66;\n    v11 = v16;\n    v7 = v15;\n    v21 = v16;\n    v28 = v19;\n    v20 = v15;\n    v34 = v19;\n    switch (v8) {\n        case 66: {\n            // 0x407fc1\n            v21 = 1024 * v16;\n            v28 = v19;\n            v20 = v15;\n            goto lab_0x407fc8;\n        }\n        case 69: {\n            // 0x4081c0\n            v25 = v18;\n            v32 = v19;\n            v37 = -0x8000000000000000 / (int128_t)v18;\n            goto lab_0x4081d8;\n        }\n        case 71: {\n            goto lab_0x408240;\n        }\n        case 75: {\n            goto lab_0x408025;\n        }\n        case 77: {\n            goto lab_0x408050;\n        }\n        case 80: {\n            // 0x4080f0\n            v23 = v18;\n            v30 = v19;\n            v36 = -0x8000000000000000 / (int128_t)v18;\n            goto lab_0x408108;\n        }\n        case 84: {\n            goto lab_0x408158;\n        }\n        case 89: {\n            // 0x408290\n            goto lab_0x4082a8;\n        }\n        case 90: {\n            // 0x4082f8\n            v26 = v18;\n            v27 = v19;\n            v35 = -0x8000000000000000 / (int128_t)v18;\n            goto lab_0x408310;\n        }\n        case 98: {\n            goto lab_0x4080d5;\n        }\n        case 99: {\n            goto lab_0x407fc8;\n        }\n        case 103: {\n            goto lab_0x408240;\n        }\n        case 107: {\n            goto lab_0x408025;\n        }\n        case 109: {\n            goto lab_0x408050;\n        }\n        case 116: {\n            goto lab_0x408158;\n        }\n        case 119: {\n            // 0x408009\n            v21 = 2 * v16;\n            v28 = v19;\n            v20 = v15;\n            goto lab_0x407fc8;\n        }\n        default: {\n            goto lab_0x407f85;\n        }\n    }\n    // 0x408228\n    goto lab_0x408240;\n    // 0x408010\n    goto lab_0x408025;\n  lab_0x408050:\n    // 0x408050\n    v22 = v18;\n    v29 = v19;\n    v33 = -0x8000000000000000 / (int128_t)v18;\n    goto lab_0x408068;\n  lab_0x408158:\n    // 0x408158\n    v24 = v18;\n    v31 = v19;\n    v38 = -0x8000000000000000 / (int128_t)v18;\n    goto lab_0x408170;\n  lab_0x4080d5:\n    // 0x4080d5\n    v21 = 512 * v16;\n    v28 = v34;\n    v20 = v15;\n    goto lab_0x407fc8;\n  lab_0x407fc8:;\n    int64_t v59 = v20;\n    int64_t v60 = v28 + v4; // 0x407fc8\n    *v3 = v60;\n    v9 = v21;\n    v5 = (*(char *)v60 != 0 ? v59 | 2 : v59) & 0xffffffff;\n    goto lab_0x407e75;\n  lab_0x407f85:\n    // 0x407f85\n    *a4 = v11;\n    // 0x407e7c\n    return (v7 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x4081d8:;\n    uint64_t v61 = v25;\n    int64_t v62 = v16;\n    int64_t v63 = -0x8000000000000000; // 0x408211\n    int64_t v64 = 1; // 0x408211\n    if (v62 >= v37) {\n        // 0x4081f0\n        v63 = v62 > 0x7fffffffffffffff / v61 ? 0x7fffffffffffffff : v62 * v61;\n        v64 = v62 > 0x7fffffffffffffff / v61 ? 1 : 0;\n    }\n    int32_t v65 = 5; // 0x408205\n    int32_t v66 = v65; // 0x408208\n    int64_t v67 = v64; // 0x408208\n    int64_t v55 = v63; // 0x408208\n    int64_t v57 = v32; // 0x408208\n    int64_t v58 = v64; // 0x408208\n    while (v65 != 0) {\n        // 0x40820e\n        v62 = v63;\n        v63 = -0x8000000000000000;\n        v64 = 1;\n        if (v62 >= v37) {\n            // 0x4081f0\n            v63 = v62 > 0x7fffffffffffffff / v61 ? 0x7fffffffffffffff : v62 * v61;\n            v64 = v62 > 0x7fffffffffffffff / v61 ? 1 : v67;\n        }\n        // 0x408205\n        v65 = v66 - 1;\n        v66 = v65;\n        v67 = v64;\n        v55 = v63;\n        v57 = v32;\n        v58 = v64;\n    }\n    goto lab_0x408440;\n  lab_0x408240:\n    // 0x408240\n    while (true) {\n        // 0x408276\n        int32_t v40; // 0x407e00\n        int32_t v41 = v40;\n        int64_t v42; // 0x407e00\n        int64_t v43 = v42;\n        int64_t v44 = -0x8000000000000000; // 0x408279\n        int64_t v45 = 1; // 0x408279\n        int64_t v46; // 0x407e00\n        uint64_t v47; // 0x407e00\n        if (v43 >= v47) {\n            int64_t v48 = v46;\n            uint64_t v49; // 0x407e00\n            int64_t v50 = v43 > 0x7fffffffffffffff / v49 ? 0x7fffffffffffffff : v43 * v49;\n            int64_t v51 = v43 > 0x7fffffffffffffff / v49 ? 1 : v48;\n            v44 = v50;\n            v45 = v51;\n        }\n        int64_t v52 = v45;\n        int64_t v53 = v44;\n        int32_t v54 = v41 - 1; // 0x40826d\n        v42 = v53;\n        v40 = v54;\n        v46 = v52;\n        v55 = v53;\n        int64_t v56; // 0x407e00\n        v57 = v56;\n        v58 = v52;\n        if (v54 == 0) {\n            // break -> 0x408440\n            break;\n        }\n    }\n    goto lab_0x408440;\n  lab_0x408025:;\n    int64_t v72 = 1;\n    v21 = -0x8000000000000000;\n    v28 = v72;\n    v20 = 1;\n    int64_t v69; // 0x407e00\n    int64_t v70; // 0x407e00\n    int64_t v71; // 0x407e00\n    int64_t v68; // 0x407e00\n    if (v16 < -0x20000000000000) {\n        goto lab_0x407fc8;\n    } else {\n        int64_t v73 = 1024;\n        v69 = 0x7fffffffffffffff / v73;\n        v71 = v73;\n        v70 = v16;\n        v68 = v72;\n        goto lab_0x40803c;\n    }\n  lab_0x408068:\n    // 0x408068\n    v21 = -0x8000000000000000;\n    v28 = v29;\n    v20 = 1;\n    if (v16 < v33) {\n        goto lab_0x407fc8;\n    } else {\n        int64_t v74 = 0x7fffffffffffffff / v22;\n        v21 = 0x7fffffffffffffff;\n        v28 = v29;\n        v20 = 1;\n        if (v16 > v74) {\n            goto lab_0x407fc8;\n        } else {\n            int64_t v75 = v22 * v16; // 0x408088\n            v21 = -0x8000000000000000;\n            v28 = v29;\n            v20 = 1;\n            v69 = v74;\n            v71 = v22;\n            v70 = v75;\n            v68 = v29;\n            if (v75 < v33) {\n                goto lab_0x407fc8;\n            } else {\n                goto lab_0x40803c;\n            }\n        }\n    }\n  lab_0x408108:;\n    uint64_t v76 = v23;\n    int64_t v77 = v16;\n    int64_t v78 = -0x8000000000000000; // 0x408141\n    int64_t v79 = 1; // 0x408141\n    if (v36 <= v77) {\n        // 0x408120\n        v78 = v77 > 0x7fffffffffffffff / v76 ? 0x7fffffffffffffff : v77 * v76;\n        v79 = v77 > 0x7fffffffffffffff / v76 ? 1 : 0;\n    }\n    int32_t v80 = 4; // 0x408135\n    int32_t v81 = v80; // 0x408138\n    int64_t v82 = v79; // 0x408138\n    v55 = v78;\n    v57 = v30;\n    v58 = v79;\n    while (v80 != 0) {\n        // 0x40813e\n        v77 = v78;\n        v78 = -0x8000000000000000;\n        v79 = 1;\n        if (v36 <= v77) {\n            // 0x408120\n            v78 = v77 > 0x7fffffffffffffff / v76 ? 0x7fffffffffffffff : v77 * v76;\n            v79 = v77 > 0x7fffffffffffffff / v76 ? 1 : v82;\n        }\n        // 0x408135\n        v80 = v81 - 1;\n        v81 = v80;\n        v82 = v79;\n        v55 = v78;\n        v57 = v30;\n        v58 = v79;\n    }\n    goto lab_0x408440;\n  lab_0x408170:;\n    uint64_t v83 = v24;\n    int64_t v84 = v16;\n    int64_t v85 = -0x8000000000000000; // 0x4081a9\n    int64_t v86 = 1; // 0x4081a9\n    if (v38 <= v84) {\n        // 0x408188\n        v85 = v84 > 0x7fffffffffffffff / v83 ? 0x7fffffffffffffff : v84 * v83;\n        v86 = v84 > 0x7fffffffffffffff / v83 ? 1 : 0;\n    }\n    int32_t v87 = 3; // 0x40819d\n    int32_t v88 = v87; // 0x4081a0\n    int64_t v89 = v86; // 0x4081a0\n    v55 = v85;\n    v57 = v31;\n    v58 = v86;\n    while (v87 != 0) {\n        // 0x4081a6\n        v84 = v85;\n        v85 = -0x8000000000000000;\n        v86 = 1;\n        if (v38 <= v84) {\n            // 0x408188\n            v85 = v84 > 0x7fffffffffffffff / v83 ? 0x7fffffffffffffff : v84 * v83;\n            v86 = v84 > 0x7fffffffffffffff / v83 ? 1 : v89;\n        }\n        // 0x40819d\n        v87 = v88 - 1;\n        v88 = v87;\n        v89 = v86;\n        v55 = v85;\n        v57 = v31;\n        v58 = v86;\n    }\n    goto lab_0x408440;\n  lab_0x4082a8:\n    // 0x4082a8\n    while (true) {\n        // 0x4082de\n        int32_t v90; // 0x407e00\n        int32_t v91 = v90;\n        int64_t v92; // 0x407e00\n        int64_t v93 = v92;\n        int64_t v94 = -0x8000000000000000; // 0x4082e1\n        int64_t v95 = 1; // 0x4082e1\n        int64_t v96; // 0x407e00\n        uint64_t v97; // 0x407e00\n        if (v97 <= v93) {\n            int64_t v98 = v96;\n            uint64_t v99; // 0x407e00\n            int64_t v100 = v93 > 0x7fffffffffffffff / v99 ? 0x7fffffffffffffff : v93 * v99;\n            int64_t v101 = v93 > 0x7fffffffffffffff / v99 ? 1 : v98;\n            v94 = v100;\n            v95 = v101;\n        }\n        int64_t v102 = v95;\n        int64_t v103 = v94;\n        int32_t v104 = v91 - 1; // 0x4082d5\n        v92 = v103;\n        v90 = v104;\n        v96 = v102;\n        v55 = v103;\n        int64_t v105; // 0x407e00\n        v57 = v105;\n        v58 = v102;\n        if (v104 == 0) {\n            // break -> 0x408440\n            break;\n        }\n    }\n    goto lab_0x408440;\n  lab_0x408310:;\n    uint64_t v106 = v26;\n    int64_t v107 = v16;\n    int64_t v108 = -0x8000000000000000; // 0x408349\n    int64_t v109 = 1; // 0x408349\n    if (v35 <= v107) {\n        // 0x408328\n        v108 = v107 > 0x7fffffffffffffff / v106 ? 0x7fffffffffffffff : v107 * v106;\n        v109 = v107 > 0x7fffffffffffffff / v106 ? 1 : 0;\n    }\n    int32_t v110 = 6; // 0x40833d\n    int32_t v111 = v110; // 0x408340\n    int64_t v112 = v109; // 0x408340\n    v55 = v108;\n    v57 = v27;\n    v58 = v109;\n    while (v110 != 0) {\n        // 0x408346\n        v107 = v108;\n        v108 = -0x8000000000000000;\n        v109 = 1;\n        if (v35 <= v107) {\n            // 0x408328\n            v108 = v107 > 0x7fffffffffffffff / v106 ? 0x7fffffffffffffff : v107 * v106;\n            v109 = v107 > 0x7fffffffffffffff / v106 ? 1 : v112;\n        }\n        // 0x40833d\n        v110 = v111 - 1;\n        v111 = v110;\n        v112 = v109;\n        v55 = v108;\n        v57 = v27;\n        v58 = v109;\n    }\n    goto lab_0x408440;\n  lab_0x408440:\n    // 0x408440\n    v21 = v55;\n    v28 = v57;\n    v20 = (v58 | v15) & 0xffffffff;\n    goto lab_0x407fc8;\n  lab_0x40803c:\n    // 0x40803c\n    v21 = 0x7fffffffffffffff;\n    v28 = v68;\n    v20 = 1;\n    if (v69 >= v70) {\n        // 0x408045\n        v21 = v70 * v71;\n        v28 = v68;\n        v20 = v15;\n    }\n    goto lab_0x407fc8;\n}\n"
        },
        {
            "funcName": "function_408550",
            "funcStartAddr": "408550",
            "funcEndAddr": "408a6f",
            "decompiledFuncCode": "int64_t function_408550(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t * str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x40855e\n    if (v1 >= 37) {\n        // 0x408a0c\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        *(int32_t *)\"<= 36\" = 0x2f62696c;\n        *(int32_t *)\"ase <= 36\" = 0x1ca79f91;\n        return 0xfc422c30;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x408582\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x4085b2\n    int64_t v4 = a1; // 0x4085b7\n    char v5 = c; // 0x4085b7\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x4085ac\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x4085a8\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x4085b9\n    if (v5 == 45) {\n        // 0x4085f5\n        return 4;\n    }\n    // 0x4085be\n    int64_t v7; // bp-64, 0x408550\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x40857e\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x4085c6\n    int64_t * v10 = (int64_t *)v8; // 0x4085cb\n    int64_t v11 = *v10; // 0x4085cb\n    char v12; // 0x408550\n    int64_t v13; // 0x408550\n    int64_t v14; // 0x408550\n    int64_t v15; // 0x408550\n    int64_t v16; // 0x408550\n    int64_t v17; // 0x408550\n    int64_t v18; // 0x408550\n    if (v11 == a1) {\n        // 0x408628\n        if (c == 0 || str == NULL) {\n            // 0x4085f5\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x408649\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x4085f5\n            return 4;\n        }\n        goto lab_0x408657;\n    } else {\n        int32_t v19 = *v2; // 0x4085d6\n        int64_t v20 = 0; // 0x4085dc\n        if (v19 != 0) {\n            // 0x408610\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x4085f5\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x4085c6\n        v16 = v21;\n        v13 = v20;\n        if (str == NULL) {\n            goto lab_0x4085f2;\n        } else {\n            char c2 = *(char *)v11; // 0x4085e5\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x408753\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x408657;\n                } else {\n                    goto lab_0x408765;\n                }\n            } else {\n                goto lab_0x4085f2;\n            }\n        }\n    }\n  lab_0x408657:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x40865f\n    int64_t v24 = 1; // 0x40865f\n    int64_t v25; // 0x408550\n    int64_t v26; // 0x408550\n    int64_t v27; // 0x408550\n    int64_t v28; // 0x408550\n    int64_t v29; // 0x408550\n    int64_t v30; // 0x408550\n    int64_t v31; // 0x408550\n    int64_t v32; // 0x408550\n    int64_t v33; // 0x408550\n    int64_t v34; // 0x408550\n    int64_t v35; // 0x408550\n    int64_t v36; // 0x408550\n    int64_t v37; // 0x408550\n    int64_t v38; // 0x408550\n    int64_t v39; // 0x408550\n    int64_t v40; // 0x408550\n    int64_t v41; // 0x408550\n    int64_t v42; // 0x408550\n    int64_t v43; // 0x408550\n    int64_t v44; // 0x408550\n    if (v22 < 48) {\n        // 0x408661\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x4086ca;\n        } else {\n            // 0x408674\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x4086ca;\n            } else {\n                // 0x408690\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x4086ca;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x4088f9\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x4086ca;\n                    }\n                    default: {\n                        // 0x4086a5\n                        g100 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x40886b;\n                            }\n                            case 70: {\n                                goto lab_0x408765;\n                            }\n                            case 71: {\n                                goto lab_0x4088a3;\n                            }\n                            case 72: {\n                                goto lab_0x408765;\n                            }\n                            case 73: {\n                                goto lab_0x408765;\n                            }\n                            case 74: {\n                                goto lab_0x408765;\n                            }\n                            case 75: {\n                                goto lab_0x40872c;\n                            }\n                            case 76: {\n                                goto lab_0x408765;\n                            }\n                            case 77: {\n                                goto lab_0x4086ee;\n                            }\n                            case 78: {\n                                goto lab_0x408765;\n                            }\n                            case 79: {\n                                goto lab_0x408765;\n                            }\n                            case 80: {\n                                goto lab_0x408838;\n                            }\n                            case 81: {\n                                goto lab_0x408765;\n                            }\n                            case 82: {\n                                goto lab_0x408765;\n                            }\n                            case 83: {\n                                goto lab_0x408765;\n                            }\n                            case 84: {\n                                goto lab_0x408808;\n                            }\n                            case 85: {\n                                goto lab_0x408765;\n                            }\n                            case 86: {\n                                goto lab_0x408765;\n                            }\n                            case 87: {\n                                goto lab_0x408765;\n                            }\n                            case 88: {\n                                goto lab_0x408765;\n                            }\n                            case 89: {\n                                goto lab_0x4087d6;\n                            }\n                            case 90: {\n                                goto lab_0x40879b;\n                            }\n                            case 91: {\n                                goto lab_0x408765;\n                            }\n                            case 92: {\n                                goto lab_0x408765;\n                            }\n                            case 93: {\n                                goto lab_0x408765;\n                            }\n                            case 94: {\n                                goto lab_0x408765;\n                            }\n                            case 95: {\n                                goto lab_0x408765;\n                            }\n                            case 96: {\n                                goto lab_0x408765;\n                            }\n                            case 97: {\n                                goto lab_0x408765;\n                            }\n                            case 98: {\n                                goto lab_0x40877f;\n                            }\n                            case 99: {\n                                goto lab_0x408708;\n                            }\n                            case 100: {\n                                goto lab_0x408765;\n                            }\n                            case 101: {\n                                goto lab_0x408765;\n                            }\n                            case 102: {\n                                goto lab_0x408765;\n                            }\n                            case 103: {\n                                goto lab_0x4088a3;\n                            }\n                            case 104: {\n                                goto lab_0x408765;\n                            }\n                            case 105: {\n                                goto lab_0x408765;\n                            }\n                            case 106: {\n                                goto lab_0x408765;\n                            }\n                            case 107: {\n                                goto lab_0x40872c;\n                            }\n                            case 108: {\n                                goto lab_0x408765;\n                            }\n                            case 109: {\n                                goto lab_0x4086ee;\n                            }\n                            case 110: {\n                                goto lab_0x408765;\n                            }\n                            case 111: {\n                                goto lab_0x408765;\n                            }\n                            case 112: {\n                                goto lab_0x408765;\n                            }\n                            case 113: {\n                                goto lab_0x408765;\n                            }\n                            case 114: {\n                                goto lab_0x408765;\n                            }\n                            case 115: {\n                                goto lab_0x408765;\n                            }\n                            case 116: {\n                                goto lab_0x408808;\n                            }\n                            default: {\n                                goto lab_0x4086ca;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4086ca;\n    }\n  lab_0x4085f2:\n    // 0x4085f2\n    *a4 = v16;\n    // 0x4085f5\n    return v13 & 0xffffffff;\n  lab_0x4086ca:\n    // 0x4086ca\n    g101 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x408550\n    switch (v12) {\n        case 66: {\n            // 0x4088c4\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x408737;\n            } else {\n                // 0x4088d1\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x408708;\n            }\n        }\n        case 69: {\n            goto lab_0x40886b;\n        }\n        case 71: {\n            goto lab_0x4088a3;\n        }\n        case 75: {\n            goto lab_0x40872c;\n        }\n        case 77: {\n            goto lab_0x4086ee;\n        }\n        case 80: {\n            goto lab_0x408838;\n        }\n        case 84: {\n            goto lab_0x408808;\n        }\n        case 89: {\n            goto lab_0x4087d6;\n        }\n        case 90: {\n            goto lab_0x40879b;\n        }\n        case 98: {\n            goto lab_0x40877f;\n        }\n        case 99: {\n            goto lab_0x408708;\n        }\n        case 103: {\n            goto lab_0x4088a3;\n        }\n        case 107: {\n            goto lab_0x40872c;\n        }\n        case 109: {\n            goto lab_0x4086ee;\n        }\n        case 116: {\n            goto lab_0x408808;\n        }\n        case 119: {\n            // 0x408770\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x408737;\n            } else {\n                // 0x408775\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x408708;\n            }\n        }\n        default: {\n            goto lab_0x408765;\n        }\n    }\n  lab_0x40886b:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x408883\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x40888f\n    int64_t v51 = v48; // 0x408892\n    int64_t v52 = v37; // 0x408892\n    int64_t v53 = v49; // 0x408892\n    int32_t v54 = v50; // 0x408892\n    int64_t v55 = v49; // 0x408892\n    while (v50 != 0) {\n        // 0x408880\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x4087c4;\n  lab_0x4088a3:\n    // 0x4088a3\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x4088ae\n        int128_t v56; // 0x4088a9\n        uint128_t v57; // 0x4088a9\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x4088ae\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x408550\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x4088b3\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x4088b8\n                v26 = v60;\n                int64_t v61; // 0x408550\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x408708;\n  lab_0x40872c:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x40872f\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x408708;\n    } else {\n        goto lab_0x408737;\n    }\n  lab_0x4086ee:;\n    int128_t v65 = v27; // 0x4086f4\n    uint128_t v66 = v65 * (int128_t)v17; // 0x4086f4\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x408737;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x4086f9\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x408737;\n        } else {\n            // 0x4086fe\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x408708;\n        }\n    }\n  lab_0x408838:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x40884b\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x408857\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x40885a\n    int64_t v73 = v70; // 0x40885a\n    while (v71 != 0) {\n        // 0x408848\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x4087c4;\n  lab_0x408808:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x40881b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x408827\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x40882a\n    int64_t v79 = v76; // 0x40882a\n    while (v77 != 0) {\n        // 0x408818\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x4087c4;\n  lab_0x4087d6:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x4087eb\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x4087f7\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x4087fa\n    int64_t v85 = v82; // 0x4087fa\n    while (v83 != 0) {\n        // 0x4087e8\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x4087c4;\n  lab_0x40879b:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x4087b3\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x4087bf\n    int32_t v90 = v89; // 0x4087c2\n    int64_t v91 = v88; // 0x4087c2\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x4087b0\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x4087c4;\n  lab_0x40877f:\n    // 0x40877f\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x408737;\n    } else {\n        // 0x408788\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x408708;\n    }\n  lab_0x408708:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x40870d\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x4085f2;\n  lab_0x408765:\n    // 0x408765\n    *a4 = v18;\n    // 0x4085f5\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x408737:\n    // 0x408737\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x408708;\n  lab_0x4087c4:\n    // 0x4087c4\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x408708;\n}\n"
        },
        {
            "funcName": "function_408a70",
            "funcStartAddr": "408a70",
            "funcEndAddr": "40908c",
            "decompiledFuncCode": "int64_t function_408a70(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x408a8f\n    int64_t v2 = *v1; // 0x408a8f\n    char * str2 = (char *)v2; // 0x408a9c\n    char c = *str2; // 0x408a9c\n    int64_t v3 = v2; // 0x408ac8\n    int64_t v4 = 0; // 0x408a70\n    int32_t v5; // 0x408a70\n    int64_t v6; // 0x408a70\n    int64_t v7; // 0x408a70\n    int64_t v8; // 0x408a70\n    int64_t v9; // 0x408a70\n    int64_t v10; // 0x408a70\n    int64_t v11; // 0x408a70\n    int64_t v12; // 0x408a70\n    int64_t v13; // 0x408a70\n    int64_t str3; // 0x408a70\n    int64_t v14; // 0x408a70\n    int64_t v15; // 0x408a70\n    int64_t v16; // 0x408a70\n    int64_t v17; // 0x408a70\n    int32_t v18; // 0x408a70\n    int32_t v19; // 0x408a70\n    int32_t v20; // 0x408a70\n    int32_t v21; // 0x408a70\n    int32_t v22; // 0x408a70\n    int32_t v23; // 0x408a70\n    int32_t v24; // 0x408a70\n    int32_t v25; // 0x408a70\n    int32_t v26; // 0x408a70\n    int32_t v27; // 0x408a70\n    int32_t v28; // 0x408a70\n    int32_t v29; // 0x408a70\n    int64_t nmemb; // 0x408a70\n    int64_t v30; // 0x408a70\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x408acc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x408ac8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x408ad8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x408ade\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x408aa8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x408b0c\n                int64_t v34; // 0x408a70\n                int64_t v35; // 0x408a70\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x408b15\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x408c90;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x408b26\n                int64_t v37 = *(int64_t *)v36; // 0x408b2a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x408b00\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x408b15\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x408c90;\n                        }\n                    }\n                    // 0x408b26\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x408b76:\n                    // 0x408b76\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x408bd0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x408d40\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x408bd0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x408cf0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x408b9a;\n                                } else {\n                                    // 0x408cfc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x408b9a;\n                                    } else {\n                                        // 0x408d0a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x408b9a;\n                                        } else {\n                                            goto lab_0x408bd0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x408b9a;\n                            }\n                        }\n                    }\n                }\n              lab_0x408be1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x408db6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x408f62\n                            flockfile(g52);\n                            int64_t v41 = *v1; // 0x408f82\n                            __fprintf_chk(g52, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x408fcf\n                            int64_t v43 = (int64_t)g52;\n                            int64_t v44 = v43; // 0x408fe9\n                            int64_t v45; // 0x408feb\n                            if (*(char *)v42 != 0) {\n                                // 0x408feb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g52;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x408fe3\n                            while (v17 + nmemb != v42) {\n                                // 0x408fe5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x408feb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g52;\n                                }\n                                // 0x408fd8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x409010\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g52);\n                            v40 = *v1;\n                        } else {\n                            // 0x408dc4\n                            __fprintf_chk(g52, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x408f1f\n                        free((int64_t *)v17);\n                    }\n                    // 0x408e19\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x408e30\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x408cde\n                    return 63;\n                }\n                // 0x408c00\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x408c84\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x408c90:;\n                    int32_t * v49 = (int32_t *)a7; // 0x408ca0\n                    uint32_t v50 = *v49; // 0x408ca0\n                    int64_t v51 = v50; // 0x408ca0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x408caa\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x408cb3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x408edf\n                                __fprintf_chk(g52, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x408e8a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x408cde\n                            return 63;\n                        }\n                        // 0x408d28\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40903f\n                                    __fprintf_chk(g52, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x408f3d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x408f50\n                                // 0x408cde\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x408e4e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x408e62\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x408ccb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x408cce\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x408cd2\n                    int64_t result = v59; // 0x408cd8\n                    if (v58 != 0) {\n                        // 0x408cda\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x408cde\n                    return result;\n                }\n            } else {\n                // 0x408ade\n                v5 = v32;\n            }\n            // break -> 0x408c05\n            break;\n        }\n    }\n    // 0x408c05\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x408c1d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x408c27\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x408cde\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x408d69\n        __fprintf_chk(g52, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x408c56\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x408c66\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x408bd0:\n    // 0x408bd0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x408bd0\n    int64_t v63 = *(int64_t *)v62; // 0x408bd4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x408be1\n        goto lab_0x408be1;\n    }\n    goto lab_0x408b76;\n  lab_0x408b9a:\n    // 0x408b9a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x408a70\n    int32_t v65; // 0x408a70\n    int32_t v66; // 0x408a70\n    if (v27 != 0) {\n        goto lab_0x408bd0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x408d50\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x408bd0;\n            } else {\n                goto lab_0x408bc1;\n            }\n        } else {\n            // 0x408bb5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x408eac\n                int64_t v67 = (int64_t)mem; // 0x408eac\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x408bd0;\n                } else {\n                    // 0x408ebf\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x408bc1;\n                }\n            } else {\n                goto lab_0x408bc1;\n            }\n        }\n    }\n  lab_0x408bc1:\n    // 0x408bc1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x408bd0;\n}\n"
        },
        {
            "funcName": "function_409090",
            "funcStartAddr": "409090",
            "funcEndAddr": "409656",
            "decompiledFuncCode": "int64_t function_409090(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x4090b1\n    if (v3 < 1) {\n        // 0x40926e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x4090ad\n    int32_t v5 = *(int32_t *)a7; // 0x4090b9\n    uint64_t v6 = a1 & 0xffffffff; // 0x4090bb\n    int64_t v7 = v2; // 0x4090c0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x4090c3\n    *v8 = 0;\n    int64_t v9; // 0x409090\n    int64_t v10; // 0x409090\n    int64_t v11; // 0x409090\n    int64_t v12; // 0x409090\n    int64_t str; // 0x409090\n    int64_t v13; // 0x409090\n    int64_t v14; // 0x409090\n    int64_t v15; // 0x409090\n    int64_t v16; // 0x409090\n    int64_t v17; // 0x409090\n    int32_t v18; // 0x409090\n    char v19; // 0x409090\n    if (v5 == 0) {\n        // 0x4092a8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4090da;\n    } else {\n        // 0x4090d3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x409120\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x409123\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4091e8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x409136\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x409146\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4091fc;\n                } else {\n                    goto lab_0x409158;\n                }\n            }\n        } else {\n            goto lab_0x4090da;\n        }\n    }\n  lab_0x4090da:\n    // 0x4090da\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4090e0\n    *v24 = 0;\n    int64_t v25; // 0x409090\n    int64_t v26; // 0x409090\n    int64_t v27; // 0x409090\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4091d0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4091dd;\n        }\n        case 43: {\n            // 0x4094e0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4091dd;\n        }\n        default: {\n            // 0x4090fc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40945f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x409578\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4091dd;\n                } else {\n                    // 0x40946d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40910a;\n                }\n            } else {\n                goto lab_0x40910a;\n            }\n        }\n    }\n  lab_0x4091e8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4091ef\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x409158;\n    } else {\n        goto lab_0x4091fc;\n    }\n  lab_0x40910a:\n    // 0x40910a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4091dd;\n  lab_0x4091dd:\n    // 0x4091dd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4091e8;\n  lab_0x409158:;\n    uint32_t v30 = *(int32_t *)a7; // 0x409158\n    int64_t v31 = v30; // 0x409158\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40915a\n    if ((int64_t)*v32 > v31) {\n        // 0x40915f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x409162\n    if (*v33 > v30) {\n        // 0x409167\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40916a\n    int64_t v35 = v31; // 0x40916e\n    int64_t v36 = v15; // 0x40916e\n    int64_t v37; // 0x409090\n    int64_t v38; // 0x409090\n    int64_t v39; // 0x409090\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x4092d8\n        int64_t v41 = v40; // 0x4092d8\n        v2 = v41;\n        int64_t v42; // 0x409090\n        if (*v33 == v40) {\n            // 0x4094c0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4094c8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x4092e4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4092f8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x409301\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40930a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x409321\n            int64_t v47 = v45 & 0xffffffff; // 0x409325\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40932e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x409334\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x409336;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x409310\n            int64_t v49 = v48 & 0xffffffff; // 0x409310\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x409321\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40932e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x409334\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x409336;\n                    }\n                }\n                // 0x409310\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x4094d8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x409336;\n    } else {\n        goto lab_0x409174;\n    }\n  lab_0x4091fc:\n    // 0x4091fc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4091ff\n    int64_t v51 = v12; // 0x4091ff\n    int64_t v52 = v14; // 0x4091ff\n    if (*(char *)v10 == 0) {\n        goto lab_0x409158;\n    } else {\n        goto lab_0x409205;\n    }\n  lab_0x409174:;\n    int32_t v53 = v35; // 0x409174\n    int64_t v54; // 0x409090\n    int64_t v55; // 0x409090\n    int64_t v56; // 0x409090\n    int64_t v57; // 0x409090\n    int64_t v58; // 0x409090\n    int64_t v59; // 0x409090\n    char * v60; // 0x409090\n    int64_t v61; // 0x409090\n    int64_t v62; // 0x409189\n    int64_t v63; // 0x409090\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x4092c3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x4092c6;\n    } else {\n        // 0x40917c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x409090\n        int64_t v66 = v65 ? -1 : 1; // 0x409190\n        int64_t v67 = (int64_t)\"--\"; // 0x409090\n        int64_t v68 = v62; // 0x409090\n        int64_t v69 = 3; // 0x409190\n        unsigned char v70 = *(char *)v68; // 0x409190\n        char v71 = *(char *)v67; // 0x409190\n        char v72 = v71; // 0x409190\n        bool v73 = false; // 0x409190\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x409280\n            if (*(char *)v62 == 45) {\n                // 0x409340\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x409340\n                if (c == 0) {\n                    goto lab_0x40928a;\n                } else {\n                    // 0x40934d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x4093d0;\n                    } else {\n                        if (c == 45) {\n                            // 0x4095b3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x409425;\n                        } else {\n                            // 0x40935e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x4093d0;\n                            } else {\n                                // 0x409363\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x409384;\n                                } else {\n                                    // 0x40936a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x4093d0;\n                                    } else {\n                                        goto lab_0x409384;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40928a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x4091a0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x4091a3\n            int64_t v77 = v35 + 1; // 0x4091a6\n            int32_t v78 = v77; // 0x4091a9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x409510\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x4091b7\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x4091c5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x4092c6;\n        }\n    }\n  lab_0x409205:;\n    // 0x409205\n    int64_t v79; // bp-104, 0x409090\n    int64_t v80 = &v79; // 0x40909a\n    int64_t v81 = v50 + 1; // 0x409205\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40920c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x409211\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x409215\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x409219\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x409221\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x409226\n    int32_t c2 = v84; // 0x409226\n    char * found_char_pos = strchr(str2, c2); // 0x409226\n    int64_t v87 = *v82; // 0x40922b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x409235\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x409240\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x409530\n            __fprintf_chk(g52, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4094fd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40926e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x409226\n    char v91 = *(char *)(v90 + 1); // 0x40925b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x409215\n        if (v91 != 58) {\n            // 0x40926e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x409484\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x409588\n                *v8 = 0;\n            } else {\n                // 0x40956c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x4094ae\n            *v83 = 0;\n            // 0x40926e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40948e\n        if (v93 != 0) {\n            // 0x409520\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x4094ae\n            *v83 = 0;\n            // 0x40926e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x4094a1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x4094ae\n            *v83 = 0;\n            // 0x40926e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x4095ea\n            __fprintf_chk(g52, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40959a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x4095a1\n        // 0x4094ae\n        *v83 = 0;\n        // 0x40926e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4093f9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4093fb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x409620\n                __fprintf_chk(g52, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x4095d1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x4095d8\n            // 0x40926e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x409406\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40940a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x409425;\n  lab_0x409336:\n    // 0x409336\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x409174;\n  lab_0x409425:;\n    int64_t v99 = function_408a70(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x409443\n    // 0x40926e\n    return v99 & 0xffffffff;\n  lab_0x4092c6:;\n    int32_t v100 = v55; // 0x4092c6\n    if (v100 != (int32_t)v59) {\n        // 0x4092ca\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40926e\n    return 0xffffffff;\n  lab_0x40928a:\n    // 0x40928a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x409291\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40926e\n    return v99 & 0xffffffff;\n  lab_0x4093d0:\n    // 0x4093d0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x409205;\n  lab_0x409384:\n    // 0x409384\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_408a70(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)&g20); // 0x4093aa\n    if ((int32_t)v101 != -1) {\n        // 0x40926e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x4093bf\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x4093d0;\n}\n"
        },
        {
            "funcName": "function_409660",
            "funcStartAddr": "409660",
            "funcEndAddr": "4096b6",
            "decompiledFuncCode": "int64_t function_409660(int64_t a1) {\n    // 0x409660\n    *(int32_t *)&g84 = g46;\n    *(int32_t *)&g85 = g45;\n    int64_t v1; // 0x409660\n    int64_t result = function_409090(v1, v1, v1, v1, v1, v1, &g84, a1 & 0xffffffff); // 0x409686\n    g46 = *(int32_t *)&g84;\n    g91 = (char *)g87;\n    *(int32_t *)&g44 = g86;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4096c0",
            "funcStartAddr": "4096c0",
            "funcEndAddr": "4096d8",
            "decompiledFuncCode": "int64_t function_4096c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4096c0\n    return function_409660(1);\n}\n"
        },
        {
            "funcName": "function_4096e0",
            "funcStartAddr": "4096e0",
            "funcEndAddr": "4096f3",
            "decompiledFuncCode": "int64_t function_4096e0(int64_t a1, int64_t a2, char * a3, char (**a4)[5], int32_t a5, int64_t a6) {\n    // 0x4096e0\n    return function_409660(0);\n}\n"
        },
        {
            "funcName": "function_409700",
            "funcStartAddr": "409700",
            "funcEndAddr": "409715",
            "decompiledFuncCode": "int64_t function_409700(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409700\n    return function_409090(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_409720",
            "funcStartAddr": "409720",
            "funcEndAddr": "409736",
            "decompiledFuncCode": "int64_t function_409720(void) {\n    // 0x409720\n    return function_409660(0);\n}\n"
        },
        {
            "funcName": "function_409740",
            "funcStartAddr": "409740",
            "funcEndAddr": "409758",
            "decompiledFuncCode": "int64_t function_409740(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409740\n    return function_409090(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_409760",
            "funcStartAddr": "409760",
            "funcEndAddr": "4097da",
            "decompiledFuncCode": "int64_t function_409760(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40976b\n    int64_t v2 = (int64_t)&g21; // 0x40976b\n    int32_t * pwc; // 0x409760\n    int64_t v3; // 0x409760\n    int64_t n; // 0x409760\n    if (a2 == 0) {\n        goto lab_0x4097b2;\n    } else {\n        // 0x40976d\n        if (a3 == 0) {\n            // 0x409798\n            return -2;\n        }\n        // 0x409779\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x4097b2;\n        } else {\n            goto lab_0x409784;\n        }\n    }\n  lab_0x4097b2:\n    // 0x4097b2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x409760\n    pwc = (int32_t *)&v4;\n    goto lab_0x409784;\n  lab_0x409784:;\n    char * wstr = (char *)v3; // 0x40978a\n    int64_t ps; // 0x409760\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40978a\n    int64_t result = v5; // 0x40978a\n    if (v5 < 0xfffffffe) {\n        // 0x409798\n        return result;\n    }\n    int64_t result2 = result; // 0x4097c9\n    if ((char)function_409840(0, v3) == 0) {\n        // 0x4097cb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x409798\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4097e0",
            "funcStartAddr": "4097e0",
            "funcEndAddr": "40983d",
            "decompiledFuncCode": "int64_t function_4097e0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4097e7\n    int64_t v2; // 0x4097e0\n    int64_t result = function_409e10(a1, v2); // 0x4097f8\n    if ((v2 & 32) != 0) {\n        // 0x409820\n        if ((int32_t)result == 0) {\n            // 0x409824\n            *__errno_location() = 0;\n        }\n        // 0x40981a\n        return 0xffffffff;\n    }\n    // 0x409801\n    if ((int32_t)result == 0) {\n        // 0x40981a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x409808\n    if (v1 == 0) {\n        // 0x40980a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40981a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409840",
            "funcStartAddr": "409840",
            "funcEndAddr": "40989e",
            "decompiledFuncCode": "int64_t function_409840(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x409846\n    if (locale == NULL) {\n        // 0x409873\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x409846\n    bool v2; // 0x409840\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g22; // 0x409840\n    int64_t v5 = v1; // 0x409840\n    int64_t v6 = 2; // 0x409865\n    unsigned char v7 = *(char *)v5; // 0x409865\n    char v8 = *(char *)v4; // 0x409865\n    char v9 = v8; // 0x409865\n    bool v10 = false; // 0x409865\n    while (v7 == v8) {\n        // 0x409858\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x409871\n    int64_t v13 = v1; // 0x409871\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x409873\n        return 0;\n    }\n    int64_t v14 = 6; // 0x409871\n    unsigned char v15 = *(char *)v13; // 0x40988d\n    char v16 = *(char *)v12; // 0x40988d\n    char v17 = v16; // 0x40988d\n    bool v18 = false; // 0x40988d\n    while (v15 == v16) {\n        // 0x409880\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4098a0",
            "funcStartAddr": "4098a0",
            "funcEndAddr": "409e02",
            "decompiledFuncCode": "int64_t function_4098a0(void) {\n    char * v1 = nl_langinfo(14); // 0x4098b6\n    char * v2 = g88; // 0x4098bb\n    char * v3; // 0x4098a0\n    int64_t v4; // 0x4098a0\n    int64_t v5; // 0x4098a0\n    int64_t v6; // 0x4098a0\n    int64_t v7; // 0x4098a0\n    int32_t size; // 0x4098a0\n    int32_t size2; // 0x4098a0\n    int32_t len; // 0x409972\n    int64_t v8; // 0x409972\n    char * env_val; // 0x40995d\n    if (v2 == NULL) {\n        // 0x409958\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x4099c5;\n        } else {\n            // 0x40996a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x4099c5;\n            } else {\n                // 0x40996f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40995d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x409df5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x4099c5;\n                    } else {\n                        // 0x409d69\n                        size2 = len + 14;\n                        goto lab_0x40998b;\n                    }\n                } else {\n                    goto lab_0x40998b;\n                }\n            }\n        }\n    } else {\n        // 0x4098a0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x4098da;\n    }\n  lab_0x409c0c:;\n    // 0x409c0c\n    struct _IO_FILE * stream; // 0x409a4b\n    int32_t v10 = __uflow(stream); // 0x409c0f\n    int64_t v11; // 0x4098a0\n    int64_t v12 = v11; // 0x409c19\n    int64_t v13; // 0x4098a0\n    int64_t v14 = v13; // 0x409c19\n    int32_t v15 = v10; // 0x409c19\n    int64_t v16; // 0x4098a0\n    int64_t v17 = v16; // 0x409c19\n    int64_t v18 = v11; // 0x409c19\n    int64_t v19 = v13; // 0x409c19\n    int64_t v20 = v16; // 0x409c19\n    if (v10 == -1) {\n        // break -> 0x409c1f\n        goto lab_0x409c1f;\n    }\n    goto lab_0x409a99;\n  lab_0x409a8e:;\n    // 0x409a8e\n    int64_t v90; // 0x4098a0\n    int64_t * v32; // 0x409a80\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4098a0\n    v12 = v89;\n    int64_t v91; // 0x4098a0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4098a0\n    v17 = v92;\n    goto lab_0x409a99;\n  lab_0x409a99:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4098a0\n    int32_t v25; // bp-120, 0x4098a0\n    int32_t v26; // bp-184, 0x4098a0\n    int64_t v27; // 0x409a4b\n    int64_t v28; // 0x409a68\n    int64_t v29; // 0x409a6d\n    int64_t * v30; // 0x409a84\n    switch (c) {\n        case 32: {\n            goto lab_0x409a80;\n        }\n        case 10: {\n            goto lab_0x409a80;\n        }\n        case 9: {\n            goto lab_0x409a80;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x409c71\n            int32_t v33; // 0x4098a0\n            char v34; // 0x4098a0\n            int32_t v35; // 0x409c7e\n            if (v31 < *v30) {\n                // 0x409c50\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x409c7b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x409c71\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x409c50\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x409c7b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x409c60\n                v36 = v33;\n            }\n            // 0x409d4f\n            if (v36 == -1) {\n                // break -> 0x409c1f\n                break;\n            }\n            goto lab_0x409a80;\n        }\n        default: {\n            // 0x409aaf\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x409c1f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x409ad8\n            int64_t v39 = v37 + 4; // 0x409ada\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x409ae6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x409ae8\n            while (v41 == 0) {\n                // 0x409ad8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x409b06\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x409b12\n            int64_t v45 = v43 + 4; // 0x409b14\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x409b20\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x409b22\n            while (v47 == 0) {\n                // 0x409b12\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x409b0f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x409b38\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x409b48\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x409b4c\n            int64_t v52 = v51 + v48; // 0x409b55\n            int64_t * mem; // 0x4098a0\n            int64_t v53; // 0x4098a0\n            int64_t v54; // 0x4098a0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x409c8b\n                int64_t v56 = v55 + 3; // 0x409c97\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x409b71\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x409b80\n            if (mem == NULL) {\n                // 0x409dac\n                free((int64_t *)v21);\n                function_409e10(v27, v53);\n                v24 = (int64_t)&g21;\n                goto lab_0x409a24;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x409b98\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x409ba2\n            uint32_t v62 = (int32_t)v59; // 0x409ba5\n            int64_t v63; // 0x4098a0\n            if (v62 >= 8) {\n                // 0x409cb4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x409cce\n                int64_t v66 = v61 - v65; // 0x409cd2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x409cdd\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x409cee\n                    int64_t v70 = v69 & 0xffffffff; // 0x409cee\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x409ceb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x409d7f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x409bb7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x409bbb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x409bcb\n            int64_t v74 = v60 - 1; // 0x409bcf\n            uint32_t v75 = (int32_t)v73; // 0x409bd4\n            int64_t v76; // 0x4098a0\n            if (v75 >= 8) {\n                // 0x409d02\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x409d0c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x409d1c\n                int64_t v80 = v74 - v79; // 0x409d20\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x409d2b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x409d3b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x409d39\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x409d96\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x409d9e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x409be6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x409bea\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x409de3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x409bfe\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x409a8e;\n            } else {\n                goto lab_0x409c0c;\n            }\n        }\n    }\n  lab_0x409a80:;\n    int64_t v93 = v23; // 0x4098a0\n    int64_t v94 = v22; // 0x4098a0\n    int64_t v95 = v21; // 0x4098a0\n    goto lab_0x409a80_2;\n  lab_0x4099c5:;\n    int64_t * mem3 = malloc(size); // 0x4099c5\n    int64_t v97 = (int64_t)&g21; // 0x4099d0\n    int64_t v98; // 0x4098a0\n    int64_t path; // 0x4098a0\n    if (mem3 == NULL) {\n        goto lab_0x4099a2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x4099c5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x4099e6;\n    }\n  lab_0x4098da:;\n    int64_t str = v1 == NULL ? (int64_t)&g21 : (int64_t)v1; // 0x4098cd\n    char v100 = *v3; // 0x4098da\n    int64_t v101; // 0x4098a0\n    if (v100 == 0) {\n        // 0x409934\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4098a0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4098a0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x409920\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x409927;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4098f0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4098fd\n        char v107 = *(char *)v106; // 0x409902\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x409934\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40990b\n    v104 = v103 + 1;\n  lab_0x409927:\n    // 0x409934\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4099a2:;\n    char * v108 = (char *)v97;\n    g88 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x4098da;\n  lab_0x4099e6:;\n    int64_t v109 = v98 + path; // 0x4099e6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x409a12\n    v24 = (int64_t)&g21;\n    if (fd >= 0) {\n        // 0x409a41\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x409d72\n            close(fd);\n            v24 = (int64_t)&g21;\n        } else {\n            // 0x409a65\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x409a80_2:;\n                uint64_t v96 = *v32; // 0x409a80\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x409c0c;\n                } else {\n                    goto lab_0x409a8e;\n                }\n            }\n          lab_0x409c1f:\n            // 0x409c1f\n            function_409e10(v27, v19);\n            v24 = (int64_t)&g21;\n            if (v18 != 0) {\n                // 0x409c3e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x409a24;\n  lab_0x40998b:;\n    int64_t * mem4 = malloc(size2); // 0x40998b\n    v97 = (int64_t)&g21;\n    if (mem4 != NULL) {\n        // 0x409a31\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x4099e6;\n    } else {\n        goto lab_0x4099a2;\n    }\n  lab_0x409a24:\n    // 0x409a24\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4099a2;\n}\n"
        },
        {
            "funcName": "function_409e10",
            "funcStartAddr": "409e10",
            "funcEndAddr": "409e8b",
            "decompiledFuncCode": "int64_t function_409e10(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x409e17\n    if (fileno(stream) < 0) {\n        // 0x409e77\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x409e2a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x409e5b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x409e77\n            return fclose(stream);\n        }\n    }\n    // 0x409e2c\n    if ((int32_t)function_409e90(a1, v1) == 0) {\n        // 0x409e77\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x409e38\n    int32_t v3 = *v2; // 0x409e40\n    int64_t result = fclose(stream); // 0x409e4e\n    if (v3 != 0) {\n        // 0x409e80\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x409e50\n    return result;\n}\n"
        },
        {
            "funcName": "function_409e90",
            "funcStartAddr": "409e90",
            "funcEndAddr": "409ed0",
            "decompiledFuncCode": "int64_t function_409e90(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x409eaa\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x409eaa\n        return fflush(stream);\n    }\n    // 0x409eb8\n    function_409ed0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_409ed0",
            "funcStartAddr": "409ed0",
            "funcEndAddr": "409f27",
            "decompiledFuncCode": "int64_t function_409ed0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x409ed0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x409eda\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x409f0b\n    int64_t result = -1; // 0x409f14\n    if (v1 != -1) {\n        // 0x409f16\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x409f22\n    return result;\n}\n"
        },
        {
            "funcName": "function_409f30",
            "funcStartAddr": "409f30",
            "funcEndAddr": "409f8d",
            "decompiledFuncCode": "int64_t function_409f30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409f30\n    return function_4016e8();\n}\n"
        },
        {
            "funcName": "function_409f90",
            "funcStartAddr": "409f90",
            "funcEndAddr": "409f91",
            "decompiledFuncCode": "int64_t function_409f90(void) {\n    // 0x409f90\n    int64_t result; // 0x409f90\n    return result;\n}\n"
        },
        {
            "funcName": "function_409fa0",
            "funcStartAddr": "409fa0",
            "funcEndAddr": "409fb8",
            "decompiledFuncCode": "int64_t function_409fa0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409fa0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g27);\n}\n"
        },
        {
            "funcName": "function_409fb8",
            "funcStartAddr": "409fb8",
            "funcEndAddr": "409fd8",
            "decompiledFuncCode": "int64_t function_409fb8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g23; // 0x409fc2\n    while (*(int64_t *)v1 != -1) {\n        // 0x409fc3\n        v1 -= 8;\n    }\n    // 0x409fd4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf"
}