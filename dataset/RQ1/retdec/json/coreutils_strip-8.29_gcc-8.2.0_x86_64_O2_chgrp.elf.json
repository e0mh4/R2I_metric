{
    "funcInfo": [
        {
            "funcName": "function_402090",
            "funcStartAddr": "402090",
            "funcEndAddr": "402095",
            "decompiledFuncCode": "int64_t function_402090(void) {\n    // 0x402090\n    return abort();\n}\n"
        },
        {
            "funcName": "function_402095",
            "funcStartAddr": "402095",
            "funcEndAddr": "40209a",
            "decompiledFuncCode": "int64_t function_402095(void) {\n    // 0x402095\n    return abort();\n}\n"
        },
        {
            "funcName": "function_40209a",
            "funcStartAddr": "40209a",
            "funcEndAddr": "40209f",
            "decompiledFuncCode": "int64_t function_40209a(void) {\n    // 0x40209a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40209f",
            "funcStartAddr": "40209f",
            "funcEndAddr": "4020a4",
            "decompiledFuncCode": "int64_t function_40209f(void) {\n    // 0x40209f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4020a4",
            "funcStartAddr": "4020a4",
            "funcEndAddr": "4020a9",
            "decompiledFuncCode": "int64_t function_4020a4(void) {\n    // 0x4020a4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4020a9",
            "funcStartAddr": "4020a9",
            "funcEndAddr": "4020ae",
            "decompiledFuncCode": "int64_t function_4020a9(void) {\n    // 0x4020a9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4020ae",
            "funcStartAddr": "4020ae",
            "funcEndAddr": "4020b3",
            "decompiledFuncCode": "int64_t function_4020ae(void) {\n    // 0x4020ae\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4020b3",
            "funcStartAddr": "4020b3",
            "funcEndAddr": "4020b8",
            "decompiledFuncCode": "int64_t function_4020b3(void) {\n    // 0x4020b3\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4020b8",
            "funcStartAddr": "4020b8",
            "funcEndAddr": "4020bd",
            "decompiledFuncCode": "int64_t function_4020b8(void) {\n    // 0x4020b8\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4020bd",
            "funcStartAddr": "4020bd",
            "funcEndAddr": "4020c2",
            "decompiledFuncCode": "int64_t function_4020bd(void) {\n    // 0x4020bd\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4020c2",
            "funcStartAddr": "4020c2",
            "funcEndAddr": "4020c7",
            "decompiledFuncCode": "int64_t function_4020c2(void) {\n    // 0x4020c2\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4020c7",
            "funcStartAddr": "4020c7",
            "funcEndAddr": "4020cc",
            "decompiledFuncCode": "int64_t function_4020c7(void) {\n    // 0x4020c7\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4020cc",
            "funcStartAddr": "4020cc",
            "funcEndAddr": "4020d1",
            "decompiledFuncCode": "int64_t function_4020cc(void) {\n    // 0x4020cc\n    return abort();\n}\n"
        },
        {
            "funcName": "function_4020d1",
            "funcStartAddr": "4020d1",
            "funcEndAddr": "4020d6",
            "decompiledFuncCode": "int64_t function_4020d1(void) {\n    // 0x4020d1\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4020e0",
            "funcStartAddr": "4020e0",
            "funcEndAddr": "402574",
            "decompiledFuncCode": "int64_t function_4020e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 0x100000000 * a1 >> 32; // 0x4020f7\n    function_403b60(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_40c0f0(0x403a70, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v2; // bp-248, 0x4020e0\n    function_402b00(&v2);\n    int64_t v3 = 16; // 0x40214d\n    int64_t v4 = 0; // 0x40214d\n    int64_t v5 = 0xffffffff; // 0x40214d\n    int64_t v6; // 0x4020e0\n    int64_t v7; // 0x4020e0\n    int64_t v8; // 0x4020e0\n    char v9; // 0x4020e0\n    char v10; // 0x4020e0\n    char v11; // 0x4020e0\n    while (true) {\n      lab_0x402150_2:\n        // 0x402150\n        v7 = v5;\n        v6 = v4;\n        v8 = v3;\n        v11 = v10;\n        int32_t v12 = function_409760(v1 & 0xffffffff, a2, \"HLPRcfhv\", &g2, 0, a6);\n        switch (v12) {\n            case -1: {\n                goto lab_0x4022da;\n            }\n            case 99: {\n                // 0x4022c0\n                v2 = 1;\n                v9 = v11;\n                v3 = v8;\n                v4 = v6;\n                v5 = v7;\n                goto lab_0x402150;\n            }\n            default: {\n                if (v12 > 99) {\n                    // 0x40217c\n                    v9 = v11;\n                    v3 = v8;\n                    v4 = v6;\n                    v5 = 1;\n                    if (v12 != 128) {\n                        if (v12 > 128) {\n                            // 0x4021d8\n                            v9 = v11;\n                            v3 = v8;\n                            v4 = 1;\n                            v5 = v7;\n                            if (v12 != 130) {\n                                // 0x4021e3\n                                v9 = v11;\n                                v3 = v8;\n                                v4 = 0;\n                                v5 = v7;\n                                if (v12 >= 130) {\n                                    if (v12 != 131) {\n                                        // 0x4021c9\n                                        function_402660(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x402247\n                                    *(int64_t *)&g36 = (int64_t)g51;\n                                    v9 = v11;\n                                    v3 = v8;\n                                    v4 = v6;\n                                    v5 = v7;\n                                }\n                            }\n                        } else {\n                            // 0x402189\n                            v9 = v11;\n                            v3 = v8;\n                            v4 = v6;\n                            v5 = 0;\n                            if (v12 != 104) {\n                                if (v12 != 118) {\n                                    // 0x4021c0\n                                    v9 = v11;\n                                    v3 = v8;\n                                    v4 = v6;\n                                    v5 = v7;\n                                    if (v12 != 102) {\n                                        // 0x4021c9\n                                        function_402660(1);\n                                        // UNREACHABLE\n                                    }\n                                } else {\n                                    // 0x402197\n                                    v2 = 0;\n                                    v9 = v11;\n                                    v3 = v8;\n                                    v4 = v6;\n                                    v5 = v7;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    // 0x4021a0\n                    v9 = v11;\n                    v3 = 17;\n                    v4 = v6;\n                    v5 = v7;\n                    if (v12 != 72) {\n                        if (v12 <= 72) {\n                            if (v12 == -131) {\n                                // 0x402207\n                                function_405c50((int64_t)g30, \"chgrp\", \"GNU coreutils\", (int64_t)g19, \"David MacKenzie\", \"Jim Meyering\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            if (v12 == -130) {\n                                // 0x402265\n                                function_402660(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x4021c9;\n                        }\n                        // 0x4021ab\n                        v9 = v11;\n                        v3 = 16;\n                        v4 = v6;\n                        v5 = v7;\n                        if (v12 != 80) {\n                            // 0x4021b4\n                            v9 = 1;\n                            v3 = v8;\n                            v4 = v6;\n                            v5 = v7;\n                            if (v12 != 82) {\n                                // 0x4021f0\n                                v9 = v11;\n                                v3 = 2;\n                                v4 = v6;\n                                v5 = v7;\n                                if (v12 != 76) {\n                                  lab_0x4021c9:\n                                    // 0x4021c9\n                                    function_402660(1);\n                                    // UNREACHABLE\n                                }\n                            }\n                        }\n                    }\n                }\n                goto lab_0x402150;\n            }\n        }\n    }\n  lab_0x4022da:;\n    int64_t v13 = 16; // 0x4022df\n    int64_t v14; // 0x4020e0\n    int64_t v15; // 0x4020e0\n    if (v11 != 0) {\n        // 0x402396\n        v13 = v8;\n        if (v8 == 16 == v7 == 1) {\n            // 0x40251e\n            error(1, (int32_t)\"-R --dereference requires either -H or -L\" ^ (int32_t)\"-R --dereference requires either -H or -L\", dcgettext(NULL, \"-R --dereference requires either -H or -L\", 5));\n            v15 = a2;\n            v14 = v1;\n            goto lab_0x402540;\n        } else {\n            goto lab_0x4022ea;\n        }\n    } else {\n        goto lab_0x4022ea;\n    }\n  lab_0x402150:\n    // 0x402150\n    v10 = v9;\n    goto lab_0x402150_2;\n  lab_0x4022ea:;\n    int32_t v16 = *(int32_t *)0x61131c; // 0x4022ed\n    int64_t v17 = v16; // 0x4022ed\n    int64_t v18 = (int64_t)g36; // 0x4022f4\n    int32_t v19 = (int32_t)v1 - v16; // 0x402303\n    int64_t v20; // 0x4020e0\n    int64_t v21; // 0x4020e0\n    int64_t v22; // 0x4020e0\n    int64_t v23; // 0x4020e0\n    int64_t v24; // 0x4020e0\n    int64_t v25; // 0x4020e0\n    int64_t v26; // 0x4020e0\n    int64_t v27; // 0x4020e0\n    int64_t v28; // 0x4020e0\n    int64_t v29; // 0x4020e0\n    int64_t v30; // 0x4020e0\n    int64_t v31; // 0x4020e0\n    int64_t v32; // 0x4020e0\n    int64_t v33; // 0x4020e0\n    int64_t v34; // 0x4020e0\n    int64_t v35; // 0x4020e0\n    int64_t v36; // 0x4020e0\n    int64_t v37; // 0x4020e0\n    int64_t v38; // 0x4020e0\n    int64_t v39; // 0x4020e0\n    int32_t v40; // bp-200, 0x4020e0\n    if (g36 == NULL) {\n        // 0x4023b1\n        v32 = v17;\n        v39 = a2;\n        v24 = v1;\n        if (v19 < 2) {\n            goto lab_0x4024f5;\n        } else {\n            int64_t v41 = *(int64_t *)(8 * v17 + a2); // 0x4023ba\n            g28 = v16 + 1;\n            char * name = (char *)v41; // 0x4023c7\n            char v42 = *name;\n            int64_t v43 = v42 != 0 ? v41 : v18; // 0x4023cb\n            v36 = a2;\n            v33 = v13;\n            v20 = 0xffffffff;\n            v25 = v43;\n            v29 = v41;\n            if (v42 == 0) {\n                goto lab_0x402342;\n            } else {\n                struct group * v44 = getgrnam(name); // 0x4023e5\n                v38 = a2;\n                v35 = v13;\n                v22 = 0xffffffff;\n                v27 = v43;\n                v31 = v41;\n                if (v44 == NULL) {\n                    goto lab_0x402454;\n                } else {\n                    // 0x4023ef\n                    v37 = a2;\n                    v34 = v13;\n                    v21 = (int64_t)*(int32_t *)((int64_t)v44 + 16);\n                    v26 = v43;\n                    v30 = v41;\n                    goto lab_0x4023f3;\n                }\n            }\n        }\n    } else {\n        // 0x40230e\n        v32 = v17;\n        v39 = a2;\n        v24 = v1;\n        if (v19 < 1) {\n            goto lab_0x4024f5;\n        } else {\n            int32_t v45 = __xstat(1, g36, (struct stat *)&v40); // 0x402323\n            v23 = v1;\n            v28 = v18;\n            if (v45 != 0) {\n                goto lab_0x4024b8;\n            } else {\n                // 0x402330\n                int32_t v46; // 0x4020e0\n                int64_t v47 = (uint32_t)v46; // 0x402330\n                function_402b40(v47);\n                v36 = a2;\n                v33 = v13;\n                v20 = v47;\n                v25 = v18;\n                v29 = 1;\n                goto lab_0x402342;\n            }\n        }\n    }\n  lab_0x402540:\n    // 0x402540\n    function_405780(*(int64_t *)(v15 - 8 + 8 * v14));\n    error(0, (int32_t)\"missing operand after %s\" ^ (int32_t)\"missing operand after %s\", dcgettext(NULL, \"missing operand after %s\", 5));\n    // 0x4021c9\n    function_402660(1);\n    // UNREACHABLE\n  lab_0x4024f5:\n    // 0x4024f5\n    v15 = v39;\n    v14 = v24;\n    if (v32 >= v24) {\n        // 0x4024fa\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n        // 0x4021c9\n        function_402660(1);\n        // UNREACHABLE\n    }\n    goto lab_0x402540;\n  lab_0x402342:;\n    int64_t v48 = v20;\n    int64_t v49 = v33;\n    int64_t v50 = v36;\n    if (v11 != 0 != v6 != 0 || function_4057a0(&g35) != 0) {\n        uint64_t v51 = function_403930(8 * (int64_t)g28 + v50, (int32_t)v49 | 1024, 0xffffffff, v48 & 0xffffffff, 0xffffffff, -1, &v2); // 0x402379\n        return v51 % 256 ^ 1;\n    }\n    int64_t v52 = function_405530(4, (int64_t *)\"/\"); // 0x40241f\n    char * format = dcgettext(NULL, \"failed to get attributes of %s\", 5); // 0x402433\n    error(1, *__errno_location(), format);\n    v38 = (int64_t)format;\n    v35 = v52;\n    v22 = v48;\n    v27 = v25;\n    v31 = v29;\n    goto lab_0x402454;\n  lab_0x4024b8:\n    // 0x4024b8\n    function_405530(4, (int64_t *)v28);\n    char * format2 = dcgettext(NULL, \"failed to get attributes of %s\", 5); // 0x4024d4\n    error(1, *__errno_location(), format2);\n    v32 = &g56;\n    v39 = (int64_t)format2;\n    v24 = v23;\n    goto lab_0x4024f5;\n  lab_0x402454:;\n    int64_t v53 = v31;\n    int64_t v54 = v27;\n    int64_t v55 = function_4060a0(v53, 0, 10, (int64_t *)&v40, (int64_t *)&g10, a6); // 0x402469\n    int64_t v56 = v22; // 0x402470\n    if ((int32_t)v55 != 0) {\n        goto lab_0x402488;\n    } else {\n        int64_t v57 = v40; // 0x40247c\n        v37 = v38;\n        v34 = v35;\n        v21 = v57;\n        v26 = v54;\n        v30 = v53;\n        v56 = v57;\n        if (v40 > -1) {\n            goto lab_0x4023f3;\n        } else {\n            goto lab_0x402488;\n        }\n    }\n  lab_0x402488:\n    // 0x402488\n    function_405780(v53);\n    error(1, (int32_t)\"invalid group: %s\" ^ (int32_t)\"invalid group: %s\", dcgettext(NULL, \"invalid group: %s\", 5));\n    v23 = v56;\n    v28 = v54;\n    goto lab_0x4024b8;\n  lab_0x4023f3:\n    // 0x4023f3\n    endgrent();\n    v36 = v37;\n    v33 = v34;\n    v20 = v21;\n    v25 = v26;\n    v29 = v30;\n    goto lab_0x402342;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402580",
            "funcEndAddr": "4025ab",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402580\n    int64_t v1; // 0x402580\n    __libc_start_main(0x4020e0, (int32_t)a4, (char **)&v1, (void (*)())0x40c080, (void (*)())0x40c0e0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4025ab",
            "funcStartAddr": "4025ab",
            "funcEndAddr": "4025ca",
            "decompiledFuncCode": "int64_t function_4025ab(void) {\n    // 0x4025ab\n    return &g29;\n}\n"
        },
        {
            "funcName": "function_4025ca",
            "funcStartAddr": "4025ca",
            "funcEndAddr": "402601",
            "decompiledFuncCode": "int64_t function_4025ca(void) {\n    // 0x4025ca\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402601",
            "funcStartAddr": "402601",
            "funcEndAddr": "402658",
            "decompiledFuncCode": "int64_t function_402601(void) {\n    // 0x402601\n    if (g33 != 0) {\n        // 0x402657\n        int64_t result; // 0x402601\n        return result;\n    }\n    int64_t v1 = g34; // 0x402634\n    int64_t result2; // 0x402646\n    if (g34 >= ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x402646\n        result2 = function_4025ab();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x402636\n        v1++;\n    }\n    // 0x40262a\n    g34 = v1;\n    // 0x402646\n    result2 = function_4025ab();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402658",
            "funcStartAddr": "402658",
            "funcEndAddr": "40265d",
            "decompiledFuncCode": "int64_t function_402658(void) {\n    // 0x402658\n    return function_4025ca();\n}\n"
        },
        {
            "funcName": "function_402660",
            "funcStartAddr": "402660",
            "funcEndAddr": "402a75",
            "decompiledFuncCode": "int64_t function_402660(int64_t a1) {\n    int32_t status = a1; // 0x402676\n    if (status != 0) {\n        // 0x40267a\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40269f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4026a6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... GROUP FILE...\\n  or:  %s [OPTION]... --reference=RFILE FILE...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Change the group of each FILE to GROUP.\\nWith --reference, change the group of each FILE to that of RFILE.\\n\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"  -c, --changes          like verbose but report only when a change is made\\n  -f, --silent, --quiet  suppress most error messages\\n  -v, --verbose          output a diagnostic for every file processed\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --dereference      affect the referent of each symbolic link (this is\\n                         the default), rather than the symbolic link itself\\n  -h, --no-dereference   affect symbolic links instead of any referenced file\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"                         (useful only on systems that can change the\\n                         ownership of a symlink)\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --no-preserve-root  do not treat '/' specially (the default)\\n      --preserve-root    fail to operate recursively on '/'\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --reference=RFILE  use RFILE's group rather than specifying a\\n                         GROUP value\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"  -R, --recursive        operate on files and directories recursively\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe following options modify how a hierarchy is traversed when the -R\\noption is also specified.  If more than one is specified, only the final\\none takes effect.\\n\\n  -H                     if a command line argument is a symbolic link\\n                         to a directory, traverse it\\n  -L                     traverse every symbolic link to a directory\\n                         encountered\\n  -P                     do not traverse any symbolic links (default)\\n\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    __printf_chk(1, dcgettext(NULL, \"\\nExamples:\\n  %s staff /u      Change the group of /u to \\\"staff\\\".\\n  %s -hR staff /u  Change the group of /u and subfiles to \\\"staff\\\".\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x402852\n    bool v2; // 0x402660\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4028d8\n    int64_t v6 = *(int64_t *)v5; // 0x4028dc\n    int64_t v7 = 6; // 0x4028e2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"chgrp\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4028ee\n        char v11 = *(char *)v9; // 0x4028ee\n        char v12 = v11; // 0x4028ee\n        bool v13 = false; // 0x4028ee\n        while (v10 == v11) {\n            // 0x4028e4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4028ee\n            int64_t v15 = v8 + v3; // 0x4028ee\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4028fa\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x4028fa\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402a0c;\n        } else {\n            // 0x4029f6\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402a4b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40295c;\n            } else {\n                goto lab_0x402a0c;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40295c;\n        } else {\n            // 0x402942\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402a4b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40295c;\n            } else {\n                goto lab_0x40295c;\n            }\n        }\n    }\n  lab_0x402a0c:\n    // 0x402a0c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40299c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40269f\n    exit(status);\n    // UNREACHABLE\n  lab_0x40295c:\n    // 0x40295c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40299c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40269f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a80",
            "funcStartAddr": "402a80",
            "funcEndAddr": "402af5",
            "decompiledFuncCode": "int64_t function_402a80(int64_t a1, int64_t a2) {\n    if (a1 == 0) {\n        // 0x402ad8\n        if (a2 == 0) {\n            // 0x402acb\n            return 0;\n        }\n        // 0x402ae0\n        return function_405fc0(a2);\n    }\n    // 0x402a89\n    if (a2 == 0) {\n        // 0x402ae0\n        return function_405fc0(a1);\n    }\n    char * str = (char *)a1; // 0x402a94\n    int32_t len = strlen(str); // 0x402a94\n    char * str2 = (char *)a2; // 0x402a9f\n    int64_t str3 = function_405d90((int64_t)len + 2 + (int64_t)strlen(str2)); // 0x402aa9\n    char * v1 = stpcpy((char *)str3, str); // 0x402ab7\n    *v1 = 58;\n    strcpy((char *)((int64_t)v1 + 1), str2);\n    // 0x402acb\n    return str3;\n}\n"
        },
        {
            "funcName": "function_402b00",
            "funcStartAddr": "402b00",
            "funcEndAddr": "402b2c",
            "decompiledFuncCode": "int64_t function_402b00(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    *(int32_t *)a1 = 2;\n    *(char *)(v1 + 4) = 0;\n    *(int64_t *)(v1 + 8) = 0;\n    *(int16_t *)(v1 + 16) = 1;\n    *(int64_t *)(v1 + 24) = 0;\n    *(int64_t *)(v1 + 32) = 0;\n    return 1;\n}\n"
        },
        {
            "funcName": "function_402b30",
            "funcStartAddr": "402b30",
            "funcEndAddr": "402b31",
            "decompiledFuncCode": "int64_t function_402b30(void) {\n    // 0x402b30\n    int64_t result; // 0x402b30\n    return result;\n}\n"
        },
        {
            "funcName": "function_402b40",
            "funcStartAddr": "402b40",
            "funcEndAddr": "402b78",
            "decompiledFuncCode": "int64_t function_402b40(int64_t gid) {\n    struct group * v1 = getgrgid((int32_t)gid); // 0x402b47\n    if (v1 != NULL) {\n        // 0x402b51\n        return function_405fc0(*(int64_t *)v1);\n    }\n    // 0x402b60\n    int64_t v2; // bp-40, 0x402b40\n    int64_t v3 = function_403b10(gid & 0xffffffff, &v2); // 0x402b65\n    return function_405fc0(v3);\n}\n"
        },
        {
            "funcName": "function_402b80",
            "funcStartAddr": "402b80",
            "funcEndAddr": "402bb8",
            "decompiledFuncCode": "int64_t function_402b80(uint32_t uid) {\n    struct passwd * v1 = getpwuid(uid); // 0x402b87\n    if (v1 != NULL) {\n        // 0x402b91\n        return function_405fc0(*(int64_t *)v1);\n    }\n    // 0x402ba0\n    int64_t v2; // bp-40, 0x402b80\n    int64_t v3 = function_403b10((int64_t)uid, &v2); // 0x402ba5\n    return function_405fc0(v3);\n}\n"
        },
        {
            "funcName": "function_402bc0",
            "funcStartAddr": "402bc0",
            "funcEndAddr": "40392d",
            "decompiledFuncCode": "int64_t function_402bc0(int64_t a1, int64_t a2, uint32_t owner, int64_t a4, int64_t a5, int64_t a6, int64_t a7) {\n    int64_t v1 = *(int64_t *)(a2 + 56); // 0x402bdd\n    int16_t * v2 = (int16_t *)(a2 + 112); // 0x402be1\n    uint16_t v3 = *v2; // 0x402be1\n    int64_t v4 = v3; // 0x402be1\n    g52 = v4;\n    int64_t v5 = a6; // 0x402bfe\n    int64_t v6; // 0x402bc0\n    char v7; // 0x402bc0\n    char v8; // 0x402bc0\n    int64_t v9; // 0x402bc0\n    int64_t format; // 0x402bc0\n    bool v10; // 0x402bc0\n    switch (v3) {\n        case 1: {\n            unsigned char v11 = *(char *)(a7 + 4); // 0x402e78\n            v6 = 0;\n            v5 = a6;\n            if (v11 != 0) {\n                int64_t v12 = *(int64_t *)(a7 + 8); // 0x402e85\n                if (v12 == 0 || *(int64_t *)(a2 + 128) != *(int64_t *)v12 || *(int64_t *)(a2 + 120) != *(int64_t *)(v12 + 8)) {\n                    // 0x402e5d\n                    return (int64_t)v11 & 0xffffffff;\n                }\n                int64_t v13 = v10 ? -1 : 1; // 0x402eb2\n                int64_t v14 = (int64_t)\"/\"; // 0x402bc0\n                int64_t v15 = v1; // 0x402bc0\n                int64_t v16 = 2; // 0x402eb2\n                unsigned char v17 = *(char *)v15; // 0x402eb2\n                char v18 = *(char *)v14; // 0x402eb2\n                char v19 = v18; // 0x402eb2\n                bool v20 = false; // 0x402eb2\n                while (v17 == v18) {\n                    v16--;\n                    v14 += v13;\n                    v15 += v13;\n                    v19 = v17;\n                    v20 = true;\n                    if (v16 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v17 = *(char *)v15;\n                    v18 = *(char *)v14;\n                    v19 = v18;\n                    v20 = false;\n                }\n                unsigned char v21 = v19;\n                if ((v17 >= v21 && !v20) != v17 < v21) {\n                    // 0x403893\n                    function_405450(1, 4, (int64_t *)\"/\");\n                    function_405450(0, 4, (int64_t *)v1);\n                    error(0, (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\" ^ (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\", dcgettext(NULL, \"it is dangerous to operate recursively on %s (same as %s)\", 5));\n                } else {\n                    // 0x402ec1\n                    function_405530(4, (int64_t *)v1);\n                    error(0, (int32_t)\"it is dangerous to operate recursively on %s\" ^ (int32_t)\"it is dangerous to operate recursively on %s\", dcgettext(NULL, \"it is dangerous to operate recursively on %s\", 5));\n                }\n                // 0x402ef4\n                error(0, (int32_t)\"use --no-preserve-root to override this failsafe\" ^ (int32_t)\"use --no-preserve-root to override this failsafe\", dcgettext(NULL, \"use --no-preserve-root to override this failsafe\", 5));\n                fts_set(a1, a2, 4);\n                fts_read(a1);\n                // 0x402e5d\n                return 0;\n            }\n            goto lab_0x402c31;\n        }\n        case 2: {\n            // 0x402c08\n            v5 = a6 & 0xffffffff;\n            if ((char)function_406070(a1, a2) != 0) {\n                // 0x4034a0\n                function_405600(0, 3, v1);\n                error(0, (int32_t)\"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\" ^ (int32_t)\"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\", dcgettext(NULL, \"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\", 5));\n                // 0x402e5d\n                return 0;\n            }\n            goto lab_0x402c31;\n        }\n        case 4: {\n            char v22 = *(char *)(a7 + 17); // 0x402fc0\n            if (v22 != 0) {\n                goto lab_0x402f45;\n            } else {\n                // 0x402fcd\n                function_405530(4, (int64_t *)v1);\n                v7 = v22;\n                v9 = (int64_t)\"cannot read directory %s\";\n                goto lab_0x402fe8;\n            }\n        }\n        case 6: {\n            // 0x403018\n            v5 = a6;\n            if (*(char *)(a7 + 4) == 0) {\n                // 0x402e5d\n                return 1;\n            }\n            goto lab_0x402c31;\n        }\n        case 7: {\n            // 0x402f38\n            if (*(char *)(a7 + 17) == 0) {\n                // 0x403588\n                function_405600(0, 3, v1);\n                v8 = 0;\n                format = (int64_t)\"%s\";\n                goto lab_0x402ffa;\n            } else {\n                goto lab_0x402f45;\n            }\n        }\n        case 10: {\n            // 0x402f88\n            if (*(int64_t *)(a2 + 88) == 0) {\n                int64_t * v23 = (int64_t *)(a2 + 32); // 0x402f8f\n                if (*v23 == 0) {\n                    // 0x4037c0\n                    *v23 = 1;\n                    fts_set(a1, a2, 1);\n                    // 0x402e5d\n                    return 1;\n                }\n            }\n            char v24 = *(char *)(a7 + 17); // 0x402f9a\n            if (v24 != 0) {\n                goto lab_0x402f45;\n            } else {\n                // 0x402fa3\n                function_405530(4, (int64_t *)v1);\n                v7 = v24;\n                v9 = (int64_t)\"cannot access %s\";\n                goto lab_0x402fe8;\n            }\n        }\n        default: {\n            goto lab_0x402c31;\n        }\n    }\n  lab_0x402c31:;\n    int64_t v25 = owner; // 0x402bc2\n    int64_t group = 0x100000000 * a4 >> 32; // 0x402be5\n    int64_t v26 = *(int64_t *)(a2 + 48); // 0x402c31\n    int64_t v27 = a2 + 120; // 0x402c39\n    int64_t v28 = v5 & 0xffffffff;\n    char * v29 = (char *)(v26 & 0xffffffff); // 0x402c41\n    char * v30 = (char *)(a7 + 16); // 0x402c46\n    char v31 = *v30; // 0x402c46\n    int64_t v32; // 0x402bc0\n    int64_t v33; // 0x402bc0\n    int64_t v34; // 0x402bc0\n    char v35; // 0x402bc0\n    int64_t v36; // 0x402bc0\n    if ((v28 & a5) == 0xffffffff) {\n        // 0x4031a0\n        if (*(int32_t *)a7 != 2) {\n            goto lab_0x402c54;\n        } else {\n            // 0x4031a9\n            if (*(int64_t *)(a7 + 8) != 0) {\n                goto lab_0x402c54;\n            } else {\n                if (v31 != 0) {\n                    goto lab_0x402c58;\n                } else {\n                    // 0x4031bc\n                    v35 = v31;\n                    v34 = v5;\n                    v32 = v27;\n                    if (v3 < 3 || (v3 - 4 & -3) == 0) {\n                        // 0x4031d4\n                        v36 = (int64_t)*(int32_t *)(a1 + 44);\n                        v33 = v27;\n                        goto lab_0x402d11;\n                    } else {\n                        goto lab_0x402d05;\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x402c54;\n    }\n  lab_0x402c54:;\n    int64_t v37 = v4; // 0x402c56\n    int64_t v38 = v5; // 0x402c56\n    int64_t v39 = v27; // 0x402c56\n    if (v31 == 0) {\n        goto lab_0x402c70;\n    } else {\n        goto lab_0x402c58;\n    }\n  lab_0x402f45:;\n    int32_t v40 = *(int32_t *)a7; // 0x402f45\n    int64_t v41 = 0; // 0x402f4c\n    int32_t v42 = v40; // 0x402f4c\n    int64_t v43 = 0; // 0x402f4c\n    if (v40 == 2) {\n        goto lab_0x402e53;\n    } else {\n        goto lab_0x402f52;\n    }\n  lab_0x402c70:;\n    int64_t v44 = v37;\n    int64_t v45 = v44 & 0xff00 | v6 & 0xffffff00 | (int64_t)((v44 & 0xfffd) == 4) | (int64_t)((int16_t)v44 < 3);\n    int32_t v46 = a5; // 0x402c89\n    int64_t v47; // 0x402bc0\n    int64_t v48; // 0x402bc0\n    int64_t v49; // 0x402bc0\n    if (v46 == -1) {\n        goto lab_0x402cd8;\n    } else {\n        // 0x402c8f\n        if (*(int32_t *)(v39 + 28) == v46) {\n            goto lab_0x402cd8;\n        } else {\n            if ((char)v45 == 0) {\n                int32_t v50 = *(int32_t *)a7; // 0x403378\n                v41 = 1;\n                v49 = 4;\n                v48 = 1;\n                v47 = v39;\n                if (v50 == 2 || v50 != 0) {\n                    goto lab_0x402e53;\n                } else {\n                    goto lab_0x403308;\n                }\n            } else {\n                int64_t v51 = *(int64_t *)(a7 + 8); // 0x402c9e\n                if (v51 == 0) {\n                    goto lab_0x402cb4;\n                } else {\n                    // 0x402ca7\n                    if (*(int64_t *)v51 == *(int64_t *)(v39 + 8)) {\n                        // 0x4035d0\n                        if (*(int64_t *)v39 == *(int64_t *)(v51 + 8)) {\n                            goto lab_0x403060;\n                        } else {\n                            goto lab_0x4035dd;\n                        }\n                    } else {\n                        goto lab_0x402cb4;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x402c58:\n    // 0x402c58\n    v37 = v4;\n    v38 = v5;\n    v39 = v27;\n    int32_t v52; // 0x402bc0\n    int64_t v53; // bp-344, 0x402bc0\n    if ((*(int32_t *)(a2 + 144) & 0xf000) == 0xa000) {\n        // 0x403408\n        if (__fxstatat(1, *(int32_t *)(a1 + 44), v29, (struct stat *)&v53, 0) != 0) {\n            // 0x4036a0\n            if (*(char *)(a7 + 17) == 0) {\n                // 0x403848\n                function_405530(4, (int64_t *)v1);\n                error(0, *__errno_location(), dcgettext(NULL, \"cannot dereference %s\", 5));\n                int32_t v54 = *(int32_t *)a7; // 0x403883\n                v41 = 0;\n                v52 = v54;\n                if (v54 != 2) {\n                    goto lab_0x4036ba;\n                } else {\n                    goto lab_0x402e53;\n                }\n            } else {\n                int32_t v55 = *(int32_t *)a7; // 0x4036ad\n                v41 = 0;\n                v52 = v55;\n                if (v55 == 2) {\n                    goto lab_0x402e53;\n                } else {\n                    goto lab_0x4036ba;\n                }\n            }\n        } else {\n            // 0x40343a\n            v37 = (int64_t)*v2;\n            v38 = v28;\n            v39 = &v53;\n            goto lab_0x402c70;\n        }\n    } else {\n        goto lab_0x402c70;\n    }\n  lab_0x402e53:\n    // 0x402e53\n    if (*(char *)(a7 + 4) == 0) {\n        // 0x4030e0\n        fts_set(a1, a2, 4);\n    }\n    // 0x402e5d\n    return v41 & 0xffffffff;\n  lab_0x402f52:;\n    int64_t v56 = 3; // 0x402f54\n    char * v57 = NULL; // 0x402f54\n    int64_t v58 = 0; // 0x402f54\n    int64_t v59 = 0; // 0x402f54\n    v41 = v43;\n    if (v42 != 0) {\n        goto lab_0x402e53;\n    } else {\n        goto lab_0x402d9b;\n    }\n  lab_0x402fe8:\n    // 0x402fe8\n    v8 = v7;\n    format = (int64_t)dcgettext(NULL, (char *)v9, 5);\n    goto lab_0x402ffa;\n  lab_0x402ffa:;\n    int64_t v60 = v8;\n    error(0, *(int32_t *)(a2 + 64), (char *)format);\n    int32_t v61 = *(int32_t *)a7; // 0x403003\n    v41 = v60;\n    v42 = v61;\n    v43 = v60;\n    if (v61 != 2) {\n        goto lab_0x402f52;\n    } else {\n        goto lab_0x402e53;\n    }\n  lab_0x402cd8:;\n    int32_t v62 = v38; // 0x402cd8\n    if (v62 == -1) {\n        if ((char)v45 == 0) {\n            goto lab_0x402d01;\n        } else {\n            int64_t v63 = *(int64_t *)(a7 + 8); // 0x403039\n            if (v63 == 0) {\n                goto lab_0x402d01;\n            } else {\n                // 0x403046\n                if (*(int64_t *)(v39 + 8) != *(int64_t *)v63) {\n                    goto lab_0x402d01;\n                } else {\n                    // 0x403053\n                    if (*(int64_t *)v39 != *(int64_t *)(v63 + 8)) {\n                        goto lab_0x402d01;\n                    } else {\n                        goto lab_0x403060;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x402ce2\n        if ((char)v45 == 0) {\n            goto lab_0x402cf8;\n        } else {\n            // 0x402ceb\n            if (*(int64_t *)(a7 + 8) != 0) {\n                // 0x4035b0\n                int64_t v64; // 0x402ceb\n                int64_t v65 = *(int64_t *)v64; // 0x4035b0\n                int64_t v66; // 0x402bc0\n                int64_t v67 = *(int64_t *)(v66 + 8); // 0x4035b3\n                if (v67 != v65) {\n                    goto lab_0x402cf8;\n                } else {\n                    int64_t v68 = *(int64_t *)(v64 + 8); // 0x4035bd\n                    int64_t v69 = *(int64_t *)v66; // 0x4035c1\n                    if (v69 != v68) {\n                        goto lab_0x402cf8;\n                    } else {\n                        goto lab_0x403060;\n                    }\n                }\n            } else {\n                goto lab_0x402cf8;\n            }\n        }\n    }\n  lab_0x402d9b:;\n    int64_t v70 = v59;\n    int64_t v71 = v58;\n    char * v72 = v57;\n    int64_t v73 = v56;\n    int64_t v74 = *(int64_t *)(a7 + 32);\n    int64_t v75 = *(int64_t *)(a7 + 24);\n    int64_t v76 = function_402a80(v75, v74); // 0x402da1\n    int64_t v77 = v74 != 0 ? v71 : 0; // 0x402dae\n    int64_t v78 = 0x100000000 * v76 >> 32; // 0x402db4\n    char * v79; // 0x402bc0\n    int64_t v80; // 0x402bc0\n    int64_t v81; // 0x402bc0\n    int64_t v82; // 0x402bc0\n    if (v75 == 0) {\n        int64_t v83 = 0x100000000 * function_402a80(0, v77) >> 32; // 0x403217\n        int32_t v84 = v73; // 0x403220\n        v81 = v83;\n        if (v84 == 3) {\n            goto lab_0x4031e0;\n        } else {\n            if (v84 != 4) {\n                if (v74 == 0) {\n                    // 0x403788\n                    v82 = v78;\n                    v80 = v83;\n                    v79 = dcgettext(NULL, \"no change to ownership of %s\\n\", 5);\n                } else {\n                    // 0x40356e\n                    v82 = v78;\n                    v80 = v83;\n                    v79 = dcgettext(NULL, \"changed group of %s from %s to %s\\n\", 5);\n                }\n            } else {\n                if (v74 == 0) {\n                    // 0x403548\n                    v82 = v78;\n                    v80 = v83;\n                    v79 = dcgettext(NULL, \"ownership of %s retained\\n\", 5);\n                } else {\n                    // 0x40323c\n                    v82 = v78;\n                    v80 = v83;\n                    v79 = dcgettext(NULL, \"group of %s retained as %s\\n\", 5);\n                }\n            }\n            goto lab_0x402e00;\n        }\n    } else {\n        int64_t v85 = 0x100000000 * function_402a80(0x100000000 * (int64_t)v72 >> 32, v77) >> 32; // 0x402dcc\n        v81 = v85;\n        switch ((int32_t)v73) {\n            case 3: {\n                goto lab_0x4031e0;\n            }\n            case 4: {\n                // 0x4033a0\n                v82 = v78;\n                v80 = v85;\n                v79 = dcgettext(NULL, \"ownership of %s retained as %s\\n\", 5);\n                goto lab_0x402e00;\n            }\n            default: {\n                // 0x402de7\n                v82 = v78;\n                v80 = v85;\n                v79 = dcgettext(NULL, \"changed ownership of %s from %s to %s\\n\", 5);\n                goto lab_0x402e00;\n            }\n        }\n    }\n  lab_0x402d05:;\n    int32_t * v86 = (int32_t *)(a1 + 44); // 0x402d05\n    uint32_t v87 = *v86; // 0x402d05\n    int64_t v88 = v87; // 0x402d05\n    v36 = v88;\n    v33 = v32;\n    int64_t v89; // 0x402bc0\n    int32_t v90; // 0x402bc0\n    int32_t * v91; // 0x403102\n    if (v35 != 0) {\n        // 0x4030f8\n        v89 = v88;\n        if ((v28 & a5) == 0xffffffff) {\n            goto lab_0x402d40;\n        } else {\n            // 0x403102\n            v91 = (int32_t *)(v32 + 24);\n            int32_t v92 = *v91 & 0xf000; // 0x403106\n            v90 = 2304;\n            if (v92 == 0x8000) {\n                goto lab_0x403129;\n            } else {\n                // 0x403116\n                v89 = v88;\n                v90 = 0x10900;\n                if (v92 != 0x4000) {\n                    goto lab_0x402d40;\n                } else {\n                    goto lab_0x403129;\n                }\n            }\n        }\n    } else {\n        goto lab_0x402d11;\n    }\n  lab_0x402d01:\n    // 0x402d01\n    v35 = *v30;\n    v34 = v38;\n    v32 = v39;\n    goto lab_0x402d05;\n  lab_0x402cf8:\n    if (*(int32_t *)(v39 + 32) != v62) {\n        goto lab_0x4035dd;\n    } else {\n        goto lab_0x402d01;\n    }\n  lab_0x4031e0:;\n    int64_t v93 = v81;\n    if ((v93 & 0xffffffff) == 0) {\n        int64_t v94 = v74 != 0 ? (int64_t)\"failed to change group of %s to %s\\n\" : (int64_t)\"failed to change ownership of %s\\n\";\n        int64_t v95 = v75 == 0 ? v94 : (int64_t)\"failed to change ownership of %s to %s\\n\";\n        v82 = 0;\n        v80 = v78;\n        v79 = dcgettext(NULL, (char *)v95, 5);\n    } else {\n        if (v75 == 0) {\n            if (v74 == 0) {\n                // 0x4037e0\n                v82 = v78;\n                v80 = v93;\n                v79 = dcgettext(NULL, \"failed to change ownership of %s\\n\", 5);\n            } else {\n                // 0x403469\n                v82 = v78;\n                v80 = v93;\n                v79 = dcgettext(NULL, \"failed to change group of %s from %s to %s\\n\", 5);\n            }\n        } else {\n            // 0x4031fa\n            v82 = v78;\n            v80 = v93;\n            v79 = dcgettext(NULL, \"failed to change ownership of %s from %s to %s\\n\", 5);\n        }\n    }\n    goto lab_0x402e00;\n  lab_0x402d11:;\n    int64_t v128 = v33; // 0x402d30\n    int64_t v104; // 0x402bc0\n    int64_t v98; // 0x402bc0\n    char * v96; // 0x402bc0\n    int64_t v97; // 0x402bc0\n    if ((int32_t)function_4064d0(v36, (int32_t)v26, v25, (int32_t)group, 256) == 0) {\n        goto lab_0x402d49;\n    } else {\n        int32_t v137 = *__errno_location(); // 0x402d37\n        v104 = v33;\n        if (v137 == 95) {\n            int32_t v138 = *(int32_t *)a7; // 0x4035f8\n            v41 = 1;\n            if (v138 == 2 || v138 != 0) {\n                goto lab_0x402e53;\n            } else {\n                int64_t v139 = function_402b80(*(int32_t *)(v33 + 28)); // 0x403614\n                int64_t v140 = function_402b40((int64_t)*(int32_t *)(v33 + 32)); // 0x403622\n                function_405530(4, (int64_t *)v1);\n                __printf_chk(1, dcgettext(NULL, \"neither symbolic link %s nor referent has been changed\\n\", 5));\n                v96 = (char *)(v139 & 0xffffffff);\n                v97 = 0x100000000 * v140 >> 32;\n                v98 = 1;\n                goto lab_0x402e3f;\n            }\n        } else {\n            goto lab_0x403170;\n        }\n    }\n  lab_0x4035dd:;\n    int32_t v141 = *(int32_t *)a7; // 0x4035dd\n    int32_t v136 = v141; // 0x4035e7\n    int64_t v135 = 1; // 0x4035e7\n    v41 = 1;\n    if (v141 != 2) {\n        goto lab_0x402cbf;\n    } else {\n        goto lab_0x402e53;\n    }\n  lab_0x403308:;\n    int64_t v119 = v49; // 0x403310\n    int64_t v120 = v48; // 0x403310\n    int32_t v121 = *(int32_t *)(v47 + 28); // 0x403310\n    int32_t v122 = *(int32_t *)(v47 + 32); // 0x403310\n    goto lab_0x402d7c;\n  lab_0x402cb4:;\n    int32_t v142 = *(int32_t *)a7; // 0x402cb4\n    v136 = v142;\n    v135 = v45;\n    v41 = v45;\n    if (v142 == 2) {\n        goto lab_0x402e53;\n    } else {\n        goto lab_0x402cbf;\n    }\n  lab_0x4036ba:\n    // 0x4036ba\n    v41 = 0;\n    if (v52 != 0) {\n        goto lab_0x402e53;\n    } else {\n        // 0x4036c2\n        v49 = 3;\n        v48 = 0;\n        v47 = &v53;\n        goto lab_0x403308;\n    }\n  lab_0x402e00:\n    // 0x402e00\n    function_405530(4, (int64_t *)v1);\n    __printf_chk(1, v79);\n    free((int64_t *)(0x100000000 * v80 >> 32));\n    free((int64_t *)(0x100000000 * v82 >> 32));\n    v96 = v72;\n    v97 = v71;\n    v98 = v70;\n    goto lab_0x402e3f;\n  lab_0x402d49:;\n    int32_t v129 = *(int32_t *)a7; // 0x402d49\n    v41 = 1;\n    int64_t v118; // 0x402bc0\n    if (v129 == 2) {\n        goto lab_0x402e53;\n    } else {\n        // 0x402d54\n        v118 = v128;\n        if (owner == -1) {\n            goto lab_0x403250;\n        } else {\n            int32_t v134 = *(int32_t *)(v118 + 28); // 0x402d5e\n            if (v134 == owner) {\n                goto lab_0x403250;\n            } else {\n                // 0x402d6b\n                v119 = 2;\n                v120 = 1;\n                v121 = v134;\n                v122 = *(int32_t *)(v118 + 32);\n                goto lab_0x402d7c;\n            }\n        }\n    }\n  lab_0x402d40:\n    // 0x402d40\n    v128 = v32;\n    v104 = v32;\n    if ((int32_t)function_4064d0(v89, (int32_t)v26, v25, (int32_t)group, 0) != 0) {\n        goto lab_0x403170;\n    } else {\n        goto lab_0x402d49;\n    }\n  lab_0x402cbf:\n    // 0x402cbf\n    v41 = v135;\n    v49 = 4;\n    v48 = v135;\n    v47 = v39;\n    if (v136 != 0) {\n        goto lab_0x402e53;\n    } else {\n        goto lab_0x403308;\n    }\n  lab_0x402d7c:\n    // 0x402d7c\n    v56 = v119;\n    v57 = (char *)(function_402b80(v121) & 0xffffffff);\n    v58 = 0x100000000 * function_402b40((int64_t)v122) >> 32;\n    v59 = v120;\n    goto lab_0x402d9b;\n  lab_0x402e3f:\n    // 0x402e3f\n    free((int64_t *)v96);\n    free((int64_t *)v97);\n    v41 = v98;\n    goto lab_0x402e53;\n  lab_0x403170:;\n    // 0x403170\n    int32_t v99; // 0x402bc0\n    if (*(char *)(a7 + 17) == 0) {\n        // 0x403318\n        function_405530(4, (int64_t *)v1);\n        char * format2; // 0x402bc0\n        if (owner == -1) {\n            // 0x403510\n            format2 = dcgettext(NULL, \"changing group of %s\", 5);\n        } else {\n            // 0x40333a\n            format2 = dcgettext(NULL, \"changing ownership of %s\", 5);\n        }\n        // 0x403349\n        error(0, *__errno_location(), format2);\n        int32_t v100 = *(int32_t *)a7; // 0x403361\n        v41 = 0;\n        v99 = v100;\n        if (v100 != 2) {\n            goto lab_0x40318a;\n        } else {\n            goto lab_0x402e53;\n        }\n    } else {\n        int32_t v101 = *(int32_t *)a7; // 0x40317d\n        v41 = 0;\n        v99 = v101;\n        if (v101 == 2) {\n            goto lab_0x402e53;\n        } else {\n            goto lab_0x40318a;\n        }\n    }\n  lab_0x403129:;\n    int32_t v102 = __openat_2(v87, v29, v90); // 0x40313e\n    int32_t fd = v102; // 0x403151\n    if (v102 >= 0) {\n        goto lab_0x403280;\n    } else {\n        int32_t * v103 = __errno_location(); // 0x403157\n        v104 = v32;\n        if (*v103 == 13) {\n            // 0x4033c0\n            if ((*v91 & 0xf000) == 0x8000) {\n                int32_t v105 = __openat_2(v87, v29, v90 | 1); // 0x4036f5\n                fd = v105;\n                if (v105 >= 0) {\n                    goto lab_0x403280;\n                } else {\n                    // 0x403713\n                    v104 = v32;\n                    if (*(int32_t *)(0x100000000 * (int64_t)v103 >> 32) != 13) {\n                        goto lab_0x403170;\n                    } else {\n                        // 0x4033de\n                        v89 = (int64_t)*v86;\n                        goto lab_0x402d40;\n                    }\n                }\n            } else {\n                // 0x4033de\n                v89 = (int64_t)*v86;\n                goto lab_0x402d40;\n            }\n        } else {\n            goto lab_0x403170;\n        }\n    }\n  lab_0x403060:;\n    int64_t v106 = v10 ? -1 : 1; // 0x40306e\n    int64_t v107 = (int64_t)\"/\"; // 0x402bc0\n    int64_t v108 = v1; // 0x402bc0\n    int64_t v109 = 2; // 0x402bc0\n    unsigned char v110 = *(char *)v108; // 0x40306e\n    char v111 = *(char *)v107; // 0x40306e\n    char v112 = v111; // 0x40306e\n    bool v113 = false; // 0x40306e\n    while (v110 == v111) {\n        int64_t v114 = v109 - 1; // 0x40306e\n        v107 += v106;\n        v108 += v106;\n        v109 = v114;\n        v112 = v110;\n        v113 = true;\n        if (v114 == 0) {\n            // break -> \n            break;\n        }\n        v110 = *(char *)v108;\n        v111 = *(char *)v107;\n        v112 = v111;\n        v113 = false;\n    }\n    unsigned char v115 = v112;\n    if ((v110 >= v115 && !v113) != v110 < v115) {\n        // 0x4037f4\n        function_405450(1, 4, (int64_t *)\"/\");\n        function_405450(0, 4, (int64_t *)v1);\n        error(0, (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\" ^ (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\", dcgettext(NULL, \"it is dangerous to operate recursively on %s (same as %s)\", 5));\n    } else {\n        // 0x40307d\n        function_405530(4, (int64_t *)v1);\n        error(0, (int32_t)\"it is dangerous to operate recursively on %s\" ^ (int32_t)\"it is dangerous to operate recursively on %s\", dcgettext(NULL, \"it is dangerous to operate recursively on %s\", 5));\n    }\n    // 0x4030b0\n    error(0, (int32_t)\"use --no-preserve-root to override this failsafe\" ^ (int32_t)\"use --no-preserve-root to override this failsafe\", dcgettext(NULL, \"use --no-preserve-root to override this failsafe\", 5));\n    // 0x402e5d\n    return 0;\n  lab_0x403250:;\n    int32_t v116 = group; // 0x403254\n    if (v116 == -1) {\n        goto lab_0x403528;\n    } else {\n        int32_t v117 = *(int32_t *)(v118 + 32); // 0x40325d\n        if (v117 == v116) {\n            goto lab_0x403528;\n        } else {\n            // 0x40326a\n            v119 = 2;\n            v120 = 1;\n            v121 = *(int32_t *)(v118 + 28);\n            v122 = v117;\n            goto lab_0x402d7c;\n        }\n    }\n  lab_0x403280:;\n    // 0x403280\n    int64_t v123; // bp-200, 0x402bc0\n    if (__fxstat(1, fd, (struct stat *)&v123) != 0) {\n        goto lab_0x4034e0;\n    } else {\n        // 0x4032ae\n        int64_t v124; // 0x402bc0\n        if (*(int64_t *)(v32 + 8) == v124) {\n            // 0x403730\n            if (*(int64_t *)v32 != v123) {\n                goto lab_0x4032ca;\n            } else {\n                int32_t v125 = a5; // 0x403741\n                int32_t v126; // 0x402bc0\n                if (v125 == -1 || v126 == v125) {\n                    int32_t v127 = v34; // 0x4038e7\n                    if (v127 != -1 == (v126 != v127)) {\n                        goto lab_0x403759;\n                    } else {\n                        // 0x4038fb\n                        if (fchown(fd, owner, (int32_t)group) != 0) {\n                            goto lab_0x4034e0;\n                        } else {\n                            // 0x403919\n                            v128 = v32;\n                            v104 = v32;\n                            if (close(fd) != 0) {\n                                goto lab_0x403170;\n                            } else {\n                                goto lab_0x402d49;\n                            }\n                        }\n                    }\n                } else {\n                    goto lab_0x403759;\n                }\n            }\n        } else {\n            goto lab_0x4032ca;\n        }\n    }\n  lab_0x403528:\n    // 0x403528\n    v41 = 1;\n    v49 = 4;\n    v48 = 1;\n    v47 = v118;\n    if (v129 != 0) {\n        goto lab_0x402e53;\n    } else {\n        goto lab_0x403308;\n    }\n  lab_0x40318a:\n    // 0x40318a\n    v41 = 0;\n    v49 = 3;\n    v48 = 0;\n    v47 = v104;\n    if (v99 == 0) {\n        goto lab_0x403308;\n    } else {\n        goto lab_0x402e53;\n    }\n  lab_0x4034e0:;\n    int32_t * v130 = __errno_location(); // 0x4034e4\n    close(fd);\n    v104 = v32;\n    goto lab_0x403170;\n  lab_0x4032ca:;\n    int32_t * v131 = __errno_location(); // 0x4032ce\n    close(fd);\n    int32_t v132 = *(int32_t *)a7; // 0x4032e4\n    v41 = 0;\n    v49 = 3;\n    v48 = 0;\n    v47 = v32;\n    if (v132 == 2 || v132 != 0) {\n        goto lab_0x402e53;\n    } else {\n        goto lab_0x403308;\n    }\n  lab_0x403759:;\n    int32_t * v133 = __errno_location(); // 0x40375d\n    close(fd);\n    v128 = v32;\n    goto lab_0x402d49;\n}\n"
        },
        {
            "funcName": "function_403930",
            "funcStartAddr": "403930",
            "funcEndAddr": "403a4e",
            "decompiledFuncCode": "int64_t function_403930(int64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5, uint32_t a6, int64_t * a7) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a2;\n    int64_t v3 = v2; // 0x403959\n    if (((int32_t)a5 & a6) == -1) {\n        // 0x4039e0\n        v3 = v2;\n        if (*(char *)(v1 + 16) == 0) {\n            // 0x4039ec\n            v3 = (*(int32_t *)a7 == 2 ? v2 | 8 : v2) & 0xffffffff;\n        }\n    }\n    int64_t v4 = function_406020(a1, v3); // 0x403966\n    int64_t v5 = fts_read(v4); // 0x403995\n    int64_t v6 = 1; // 0x40399d\n    if (v5 != 0) {\n        int64_t v7 = a4 & 0xffffffff; // 0x403935\n        int64_t v8; // bp-72, 0x403930\n        int64_t v9 = &v8; // 0x403949\n        int64_t v10 = 1;\n        *(int64_t *)(v9 - 16) = v1;\n        int32_t v11 = *(int32_t *)(v9 + 12); // 0x40397f\n        v10 &= function_402bc0(v4, v5, v11, v7, a5 & 0xffffffff, (int64_t)a6, (int64_t)&g56);\n        int64_t v12 = fts_read(v4); // 0x403995\n        v6 = v10;\n        while (v12 != 0) {\n            // 0x403970\n            *(int64_t *)(v9 - 16) = v1;\n            v11 = *(int32_t *)(v9 + 12);\n            v10 &= function_402bc0(v4, v12, v11, v7, a5 & 0xffffffff, (int64_t)a6, (int64_t)&g56);\n            v12 = fts_read(v4);\n            v6 = v10;\n        }\n    }\n    int32_t * err_num = __errno_location(); // 0x40399f\n    int64_t v13 = v6; // 0x4039ab\n    if (*err_num != 0) {\n        // 0x4039ad\n        v13 = 0;\n        if (*(char *)(v1 + 17) == 0) {\n            // 0x403a28\n            error(0, *err_num, dcgettext(NULL, \"fts_read failed\", 5));\n            v13 = 0;\n        }\n    }\n    int64_t v14 = v13; // 0x4039c3\n    if ((int32_t)fts_close(v4) != 0) {\n        // 0x403a00\n        error(0, *err_num, dcgettext(NULL, \"fts_close failed\", 5));\n        v14 = 0;\n    }\n    // 0x4039c5\n    return v14 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_403a50",
            "funcStartAddr": "403a50",
            "funcEndAddr": "403a58",
            "decompiledFuncCode": "int64_t function_403a50(int64_t a1) {\n    // 0x403a50\n    g38 = a1;\n    int64_t result; // 0x403a50\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a60",
            "funcStartAddr": "403a60",
            "funcEndAddr": "403a68",
            "decompiledFuncCode": "int64_t function_403a60(int64_t a1) {\n    // 0x403a60\n    g37 = a1;\n    int64_t result; // 0x403a60\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a70",
            "funcStartAddr": "403a70",
            "funcEndAddr": "403b0e",
            "decompiledFuncCode": "int64_t function_403a70(void) {\n    // 0x403a70\n    int32_t * err_num; // 0x403a86\n    if ((int32_t)function_409990((int64_t)g30) == 0) {\n        goto lab_0x403a9c;\n    } else {\n        // 0x403a86\n        err_num = __errno_location();\n        if (g37 == 0) {\n            goto lab_0x403ab3;\n        } else {\n            // 0x403a97\n            if (*err_num != 32) {\n                goto lab_0x403ab3;\n            } else {\n                goto lab_0x403a9c;\n            }\n        }\n    }\n  lab_0x403a9c:;\n    int64_t result = function_409990((int64_t)g32); // 0x403aa3\n    if ((int32_t)result == 0) {\n        // 0x403aac\n        return result;\n    }\n    // 0x403aee\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x403ab3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x403abf\n    if (g38 == 0) {\n        // 0x403af9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x403ad3\n        error(0, *err_num, \"%s: %s\", (char *)function_4055d0((int64_t)g38), v1);\n    }\n    // 0x403aee\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403b10",
            "funcStartAddr": "403b10",
            "funcEndAddr": "403b58",
            "decompiledFuncCode": "int64_t function_403b10(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x403b10\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x403b22\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x403b2b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x403b54\n    return result;\n}\n"
        },
        {
            "funcName": "function_403b60",
            "funcStartAddr": "403b60",
            "funcEndAddr": "403bf9",
            "decompiledFuncCode": "int64_t function_403b60(int64_t str) {\n    // 0x403b60\n    if (str == 0) {\n        // 0x403bd9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x403b6e\n    int64_t result = (int64_t)found_char_pos; // 0x403b6e\n    if (found_char_pos == NULL) {\n        // 0x403bc9\n        g39 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403b78\n    if (v1 - str < 7) {\n        // 0x403bc9\n        g39 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x403b88\n    bool v2; // 0x403b60\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403b60\n    int64_t v5 = result - 6; // 0x403b60\n    int64_t v6 = 7; // 0x403b96\n    unsigned char v7 = *(char *)v5; // 0x403b96\n    char v8 = *(char *)v4; // 0x403b96\n    char v9 = v8; // 0x403b96\n    bool v10 = false; // 0x403b96\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403ba0\n    int64_t v13 = v1; // 0x403ba0\n    int64_t v14 = 3; // 0x403ba0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403bc9\n        g39 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403bb2\n    char v16 = *(char *)v12; // 0x403bb2\n    char v17 = v16; // 0x403bb2\n    bool v18 = false; // 0x403bb2\n    while (v15 == v16) {\n        // 0x403ba2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x403bbc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x403bbe\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x403bc9\n    g39 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403c00",
            "funcStartAddr": "403c00",
            "funcEndAddr": "403cf2",
            "decompiledFuncCode": "int64_t function_403c00(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x403c14\n    int64_t result = (int64_t)v1; // 0x403c14\n    if (result != a1) {\n        // 0x403c21\n        return result;\n    }\n    int64_t v2 = function_40ae40(); // 0x403c30\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403ce6\n    if (v3 == 85) {\n        // 0x403c40\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403cd8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g13 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x403c6e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x403c7b\n        // 0x403c21\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403cd8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g13 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x403cbd\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x403cca\n    // 0x403c21\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403d00",
            "funcStartAddr": "403d00",
            "funcEndAddr": "403d57",
            "decompiledFuncCode": "int64_t function_403d00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x403d00\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403d48\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403d57",
            "funcStartAddr": "403d57",
            "funcEndAddr": "404f21",
            "decompiledFuncCode": "int64_t function_403d57(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403da1\n    int64_t v3 = 0; // 0x403da1\n    int64_t v4; // 0x403d57\n    int64_t v5; // 0x403d57\n    int64_t v6; // 0x403d57\n    int64_t v7; // 0x403d57\n    int64_t v8; // 0x403d57\n    int64_t v9; // 0x403d57\n    int64_t v10; // 0x403d57\n    int64_t v11; // 0x403d57\n    int64_t v12; // 0x403d57\n    int64_t v13; // 0x403d57\n    int64_t v14; // 0x403d57\n    int64_t v15; // 0x403d57\n    int64_t v16; // 0x403d57\n    int64_t v17; // 0x403d57\n    int64_t v18; // 0x403d57\n    int64_t result; // 0x403d57\n    int64_t v19; // 0x403d57\n    int32_t wc; // bp+132, 0x403d57\n    int64_t ps; // bp+136, 0x403d57\n    char v20; // 0x404310\n    int64_t v21; // 0x404310\n    int64_t v22; // 0x4046b8\n    int64_t v23; // 0x403d57\n    int64_t v24; // 0x4046d7\n    int32_t v25; // 0x403d57\n    while (true) {\n      lab_0x403da8_2:\n        // 0x403da8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403d57\n        int64_t v27; // 0x403ddc\n        while (true) {\n          lab_0x403da8:\n            // 0x403da8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403db3\n            if (v15 == -1) {\n                // 0x403db5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403dc3\n            if (v28) {\n                // break (via goto) -> 0x404528\n                goto lab_0x404528;\n            }\n            // 0x403dcc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g55 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4043bb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x403f01;\n                    }\n                    // 0x4047dd\n                    v26 = v5 + 1;\n                    goto lab_0x403da8;\n                }\n                case 7: {\n                    goto lab_0x403f01;\n                }\n                case 8: {\n                    goto lab_0x403f01;\n                }\n                case 9: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x403f01;\n                }\n                case 12: {\n                    goto lab_0x403f01;\n                }\n                case 13: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x403ecd;\n                }\n                case 36: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x403f01;\n                }\n                case 38: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x403f01;\n                }\n                case 44: {\n                    goto lab_0x403f01;\n                }\n                case 45: {\n                    goto lab_0x403f01;\n                }\n                case 46: {\n                    goto lab_0x403f01;\n                }\n                case 47: {\n                    goto lab_0x403f01;\n                }\n                case 48: {\n                    goto lab_0x403f01;\n                }\n                case 49: {\n                    goto lab_0x403f01;\n                }\n                case 50: {\n                    goto lab_0x403f01;\n                }\n                case 51: {\n                    goto lab_0x403f01;\n                }\n                case 52: {\n                    goto lab_0x403f01;\n                }\n                case 53: {\n                    goto lab_0x403f01;\n                }\n                case 54: {\n                    goto lab_0x403f01;\n                }\n                case 55: {\n                    goto lab_0x403f01;\n                }\n                case 56: {\n                    goto lab_0x403f01;\n                }\n                case 57: {\n                    goto lab_0x403f01;\n                }\n                case 58: {\n                    goto lab_0x403f01;\n                }\n                case 59: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x403f01;\n                }\n                case 66: {\n                    goto lab_0x403f01;\n                }\n                case 67: {\n                    goto lab_0x403f01;\n                }\n                case 68: {\n                    goto lab_0x403f01;\n                }\n                case 69: {\n                    goto lab_0x403f01;\n                }\n                case 70: {\n                    goto lab_0x403f01;\n                }\n                case 71: {\n                    goto lab_0x403f01;\n                }\n                case 72: {\n                    goto lab_0x403f01;\n                }\n                case 73: {\n                    goto lab_0x403f01;\n                }\n                case 74: {\n                    goto lab_0x403f01;\n                }\n                case 75: {\n                    goto lab_0x403f01;\n                }\n                case 76: {\n                    goto lab_0x403f01;\n                }\n                case 77: {\n                    goto lab_0x403f01;\n                }\n                case 78: {\n                    goto lab_0x403f01;\n                }\n                case 79: {\n                    goto lab_0x403f01;\n                }\n                case 80: {\n                    goto lab_0x403f01;\n                }\n                case 81: {\n                    goto lab_0x403f01;\n                }\n                case 82: {\n                    goto lab_0x403f01;\n                }\n                case 83: {\n                    goto lab_0x403f01;\n                }\n                case 84: {\n                    goto lab_0x403f01;\n                }\n                case 85: {\n                    goto lab_0x403f01;\n                }\n                case 86: {\n                    goto lab_0x403f01;\n                }\n                case 87: {\n                    goto lab_0x403f01;\n                }\n                case 88: {\n                    goto lab_0x403f01;\n                }\n                case 89: {\n                    goto lab_0x403f01;\n                }\n                case 90: {\n                    goto lab_0x403f01;\n                }\n                case 91: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x403f01;\n                }\n                case 94: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x403f01;\n                }\n                case 96: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x403f01;\n                }\n                case 98: {\n                    goto lab_0x403f01;\n                }\n                case 99: {\n                    goto lab_0x403f01;\n                }\n                case 100: {\n                    goto lab_0x403f01;\n                }\n                case 101: {\n                    goto lab_0x403f01;\n                }\n                case 102: {\n                    goto lab_0x403f01;\n                }\n                case 103: {\n                    goto lab_0x403f01;\n                }\n                case 104: {\n                    goto lab_0x403f01;\n                }\n                case 105: {\n                    goto lab_0x403f01;\n                }\n                case 106: {\n                    goto lab_0x403f01;\n                }\n                case 107: {\n                    goto lab_0x403f01;\n                }\n                case 108: {\n                    goto lab_0x403f01;\n                }\n                case 109: {\n                    goto lab_0x403f01;\n                }\n                case 110: {\n                    goto lab_0x403f01;\n                }\n                case 111: {\n                    goto lab_0x403f01;\n                }\n                case 112: {\n                    goto lab_0x403f01;\n                }\n                case 113: {\n                    goto lab_0x403f01;\n                }\n                case 114: {\n                    goto lab_0x403f01;\n                }\n                case 115: {\n                    goto lab_0x403f01;\n                }\n                case 116: {\n                    goto lab_0x403f01;\n                }\n                case 117: {\n                    goto lab_0x403f01;\n                }\n                case 118: {\n                    goto lab_0x403f01;\n                }\n                case 119: {\n                    goto lab_0x403f01;\n                }\n                case 120: {\n                    goto lab_0x403f01;\n                }\n                case 121: {\n                    goto lab_0x403f01;\n                }\n                case 122: {\n                    goto lab_0x403f01;\n                }\n                case 123: {\n                    goto lab_0x403ea5;\n                }\n                case 124: {\n                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403ea5;\n                }\n                case 126: {\n                    goto lab_0x403ecd;\n                }\n                default: {\n                    goto lab_0x4042a5;\n                }\n            }\n        }\n      lab_0x4042a5:\n        if (v23 != 1) {\n            // 0x404610\n            ps = 0;\n            int64_t len = v15; // 0x404620\n            if (v15 == -1) {\n                // 0x404622\n                len = strlen((char *)str);\n            }\n            // 0x40464e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4046af:\n                // 0x4046af\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x4046b4\n                int64_t v30 = v29 + str;\n                v24 = function_4097e0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x404c2a_2;\n                    }\n                    case -1: {\n                        goto lab_0x404c2a_2;\n                    }\n                    case -2: {\n                        // 0x404d0d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404d47\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x404d4a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404d57\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404d50\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x404c2a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x404c2a_2;\n                    }\n                    case 1: {\n                        goto lab_0x404680;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40472c\n                        char v34 = *(char *)v33; // 0x40473d\n                        unsigned char v35; // 0x403d57\n                        if (v34 < 125) {\n                            // 0x404748\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40475f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x404730\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40473d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x404748\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40475f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x404730\n                            v33++;\n                        }\n                        goto lab_0x404680;\n                    }\n                }\n            }\n            goto lab_0x404c2a_2;\n        } else {\n            // 0x4042f4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x403f01;\n        }\n    }\n  lab_0x404528:\n    // 0x404528\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x404e2a\n        if (v8 > result) {\n            // 0x404e33\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x404157\n        return result;\n    }\n    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403f01:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x403f10\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40411a_2;\n        }\n    }\n    int64_t v39 = result; // 0x404011\n    char v40 = v20; // 0x404011\n    int64_t v41 = v38; // 0x404011\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x404011\n    int64_t v43 = v36; // 0x404011\n    goto lab_0x403f8d;\n  lab_0x40411a_2:\n    // 0x404157\n    return function_403d00(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x404c2a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x403f01;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4047fe\n        int64_t v50 = v5 + 1; // 0x4048e1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x4048e8\n        char v52 = v20; // 0x4048e8\n        int64_t v53 = result; // 0x4048e8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x4048b1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x4048b5\n            int64_t v56 = v54 + 1; // 0x4048ba\n            int64_t v57 = v51 + 1; // 0x4048e1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x4048ac\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x4048b1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x4048b5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x403f8d;\n    }\n  lab_0x404680:\n    // 0x404680\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40469f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4046a2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x404c2a\n        goto lab_0x404c2a_2;\n    }\n    goto lab_0x4046af;\n  lab_0x403ecd:\n    // 0x403ecd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40411a_2;\n    }\n    goto lab_0x403f01;\n  lab_0x403ea5:;\n    bool v60 = v15 == 1; // 0x403eb0\n    if (v15 == -1) {\n        // 0x403eb2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x403ebe\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x403f01;\n    } else {\n        goto lab_0x403ecd;\n    }\n  lab_0x403f8d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403f92\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403f96\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403da8_2;\n}\n"
        },
        {
            "funcName": "function_404f30",
            "funcStartAddr": "404f30",
            "funcEndAddr": "4050ce",
            "decompiledFuncCode": "int64_t function_404f30(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x404f32\n    int32_t * v3 = __errno_location(); // 0x404f4c\n    int32_t v4 = v2; // 0x404f61\n    if (v4 < 0) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v5 = (int64_t)g22; // 0x404f51\n    int32_t v6 = *v3; // 0x404f5b\n    int64_t v7 = v5; // 0x404f71\n    if (v2 >= (int64_t)*(int32_t *)&g25) {\n        if (v4 == 0x7fffffff) {\n            // 0x4050c9\n            function_405fe0(a1);\n            // UNREACHABLE\n        }\n        int64_t v8 = v2 + 1; // 0x404f80\n        int64_t v9 = 0x100000000 * v8 >> 28; // 0x404f87\n        int64_t v10; // 0x404f30\n        if (g22 == &g23) {\n            int64_t v11 = function_405df0(0, v9); // 0x4050aa\n            int128_t v12 = __asm_movdqa(*(int128_t *)&g23); // 0x4050af\n            *(int64_t *)&g22 = v11;\n            __asm_movups(*(int128_t *)v11, v12);\n            v10 = v11;\n        } else {\n            int64_t v13 = function_405df0(v5, v9); // 0x404f9b\n            *(int64_t *)&g22 = v13;\n            v10 = v13;\n        }\n        // 0x404faa\n        v7 = v10;\n        int32_t v14 = *(int32_t *)&g25; // 0x404faa\n        int32_t v15 = v8; // 0x404fb1\n        memset((int64_t *)(16 * (int64_t)v14 + v7), 0, 16 * (v15 - v14));\n        *(int32_t *)&g25 = v15;\n    }\n    int64_t v16 = v7 + (v1 >> 28); // 0x404fe1\n    int32_t v17 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x404feb\n    int64_t * v18 = (int64_t *)v16; // 0x404fee\n    uint64_t v19 = *v18; // 0x404fee\n    int64_t * v20 = (int64_t *)(v16 + 8); // 0x404ff1\n    int64_t result = *v20; // 0x404ff1\n    int64_t v21; // 0x404f30\n    uint64_t v22 = function_403d00(result, v19, a2, a3, v21 & 0xffffffff, v17); // 0x405014\n    if (v19 > v22) {\n        // 0x40508b\n        *v3 = v6;\n        return result;\n    }\n    int64_t v23 = v22 + 1; // 0x405027\n    *v18 = v23;\n    if (result != (int64_t)&g40) {\n        // 0x405037\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_405d90(v23); // 0x405051\n    *v20 = result2;\n    int64_t v24; // 0x404f30\n    function_403d00(result2, v23, a2, a3, (int64_t)*(int32_t *)&v24, v17);\n    // 0x40508b\n    *v3 = v6;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4050d0",
            "funcStartAddr": "4050d0",
            "funcEndAddr": "405104",
            "decompiledFuncCode": "int64_t function_4050d0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4050d7\n    int64_t result = function_405f90(a1 == 0 ? (int64_t)&g41 : a1, 56); // 0x4050f6\n    return result;\n}\n"
        },
        {
            "funcName": "function_405110",
            "funcStartAddr": "405110",
            "funcEndAddr": "40511f",
            "decompiledFuncCode": "int64_t function_405110(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g41 : a1); // 0x40511c\n    return result;\n}\n"
        },
        {
            "funcName": "function_405120",
            "funcStartAddr": "405120",
            "funcEndAddr": "40512f",
            "decompiledFuncCode": "int64_t function_405120(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g41 : a1; // 0x405128\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g41;\n}\n"
        },
        {
            "funcName": "function_405130",
            "funcStartAddr": "405130",
            "funcEndAddr": "405163",
            "decompiledFuncCode": "int64_t function_405130(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g41 + 8 : a1 + 8; // 0x405149\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40514e\n    uint32_t v3 = *v2; // 0x40514e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x405152\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_405170",
            "funcStartAddr": "405170",
            "funcEndAddr": "405183",
            "decompiledFuncCode": "int64_t function_405170(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g41 + 4 : a1 + 4); // 0x40517c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_405190",
            "funcStartAddr": "405190",
            "funcEndAddr": "4051bb",
            "decompiledFuncCode": "int64_t function_405190(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g41 : a1; // 0x405198\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4051b5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4051ac\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g41;\n}\n"
        },
        {
            "funcName": "function_4051c0",
            "funcStartAddr": "4051c0",
            "funcEndAddr": "405232",
            "decompiledFuncCode": "int64_t function_4051c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g41 : a5; // 0x4051e2\n    int32_t * v2 = __errno_location(); // 0x4051eb\n    uint32_t v3 = *(int32_t *)v1; // 0x40520b\n    int64_t result = function_403d00(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40521a\n    return result;\n}\n"
        },
        {
            "funcName": "function_405240",
            "funcStartAddr": "405240",
            "funcEndAddr": "405321",
            "decompiledFuncCode": "int64_t function_405240(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g41 : a4; // 0x405262\n    int32_t * v2 = __errno_location(); // 0x405268\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x405287\n    int32_t * v4 = (int32_t *)v1; // 0x40528a\n    int64_t v5 = function_403d00(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4052a5\n    int64_t v6 = v5 + 1; // 0x4052aa\n    int64_t result = function_405d90(v6); // 0x4052bf\n    function_403d00(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x405304\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40530d\n    return result;\n}\n"
        },
        {
            "funcName": "function_405330",
            "funcStartAddr": "405330",
            "funcEndAddr": "40533a",
            "decompiledFuncCode": "int64_t function_405330(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405330\n    return function_405240(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_405340",
            "funcStartAddr": "405340",
            "funcEndAddr": "4053d5",
            "decompiledFuncCode": "int64_t function_405340(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x405340\n    int64_t v2 = v1; // 0x405340\n    int64_t v3 = v2; // 0x405354\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x405373\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g56;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x405370\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g56;\n        }\n    }\n    int64_t v6 = v3; // 0x40538d\n    if (g23 != 0x6113a0) {\n        // 0x40538f\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g40;\n        v6 = &g56;\n    }\n    int64_t result = v6; // 0x4053b1\n    if (g22 != &g23) {\n        // 0x4053b3\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g56;\n    }\n    // 0x4053c6\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4053e0",
            "funcStartAddr": "4053e0",
            "funcEndAddr": "4053f1",
            "decompiledFuncCode": "int64_t function_4053e0(void) {\n    // 0x4053e0\n    int64_t v1; // 0x4053e0\n    return function_404f30(v1, v1, -1, (int64_t *)&g41);\n}\n"
        },
        {
            "funcName": "function_405400",
            "funcStartAddr": "405400",
            "funcEndAddr": "40540a",
            "decompiledFuncCode": "int64_t function_405400(void) {\n    // 0x405400\n    int64_t v1; // 0x405400\n    return function_404f30(v1, v1, v1, (int64_t *)&g41);\n}\n"
        },
        {
            "funcName": "function_405410",
            "funcStartAddr": "405410",
            "funcEndAddr": "405426",
            "decompiledFuncCode": "int64_t function_405410(int64_t a1) {\n    // 0x405410\n    return function_404f30(0, a1, -1, (int64_t *)&g41);\n}\n"
        },
        {
            "funcName": "function_405430",
            "funcStartAddr": "405430",
            "funcEndAddr": "405442",
            "decompiledFuncCode": "int64_t function_405430(int64_t a1, int64_t a2) {\n    // 0x405430\n    return function_404f30(0, a1, a2, (int64_t *)&g41);\n}\n"
        },
        {
            "funcName": "function_405450",
            "funcStartAddr": "405450",
            "funcEndAddr": "4054b8",
            "decompiledFuncCode": "int64_t function_405450(int64_t a1, int64_t a2, int64_t * a3) {\n    if ((int32_t)a2 == 10) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405460\n    return function_404f30(a1, (int64_t)a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4054c0",
            "funcStartAddr": "4054c0",
            "funcEndAddr": "405524",
            "decompiledFuncCode": "int64_t function_4054c0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4054d0\n    return function_404f30((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_405530",
            "funcStartAddr": "405530",
            "funcEndAddr": "40553c",
            "decompiledFuncCode": "int64_t function_405530(int64_t a1, int64_t * a2) {\n    // 0x405530\n    return function_405450(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_405540",
            "funcStartAddr": "405540",
            "funcEndAddr": "40554f",
            "decompiledFuncCode": "int64_t function_405540(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405540\n    return function_4054c0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_405550",
            "funcStartAddr": "405550",
            "funcEndAddr": "4055c0",
            "decompiledFuncCode": "int64_t function_405550(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g41); // 0x40555d\n    int128_t v2 = __asm_movdqa(g42); // 0x405565\n    int128_t v3 = __asm_movdqa(g43); // 0x40556d\n    int64_t v4 = __asm_movaps_6(v1); // bp-72, 0x405582\n    __asm_movaps_6(v2);\n    __asm_movaps_6(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x405598\n    uint32_t v6 = *v5; // 0x405598\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40559d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_404f30(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4055c0",
            "funcStartAddr": "4055c0",
            "funcEndAddr": "4055cd",
            "decompiledFuncCode": "int64_t function_4055c0(int64_t a1, int64_t a2) {\n    // 0x4055c0\n    return function_405550(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4055d0",
            "funcStartAddr": "4055d0",
            "funcEndAddr": "4055e1",
            "decompiledFuncCode": "int64_t function_4055d0(int64_t a1) {\n    // 0x4055d0\n    return function_405550(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4055f0",
            "funcStartAddr": "4055f0",
            "funcEndAddr": "4055fa",
            "decompiledFuncCode": "int64_t function_4055f0(void) {\n    // 0x4055f0\n    int64_t v1; // 0x4055f0\n    return function_405550(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_405600",
            "funcStartAddr": "405600",
            "funcEndAddr": "40566e",
            "decompiledFuncCode": "int64_t function_405600(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40561a\n    return function_404f30((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405670",
            "funcStartAddr": "405670",
            "funcEndAddr": "4056dc",
            "decompiledFuncCode": "int64_t function_405670(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g41); // 0x405677\n    int128_t v2 = __asm_movdqa(g42); // 0x40567f\n    int128_t v3 = __asm_movdqa(g43); // 0x405687\n    __asm_movaps_6(v1);\n    __asm_movaps_6(v2);\n    __asm_movaps_6(v3);\n    int64_t v4 = 10; // bp-72, 0x4056a9\n    if (a2 == 0 || a3 == 0) {\n        // 0x4056d7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4056ba\n    return function_404f30(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4056e0",
            "funcStartAddr": "4056e0",
            "funcEndAddr": "4056e9",
            "decompiledFuncCode": "int64_t function_4056e0(void) {\n    // 0x4056e0\n    int64_t v1; // 0x4056e0\n    return function_405670(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4056f0",
            "funcStartAddr": "4056f0",
            "funcEndAddr": "405707",
            "decompiledFuncCode": "int64_t function_4056f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4056f0\n    return function_405670(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_405710",
            "funcStartAddr": "405710",
            "funcEndAddr": "405723",
            "decompiledFuncCode": "int64_t function_405710(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405710\n    return function_405670(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_405730",
            "funcStartAddr": "405730",
            "funcEndAddr": "40573a",
            "decompiledFuncCode": "int64_t function_405730(void) {\n    // 0x405730\n    int64_t v1; // 0x405730\n    return function_404f30(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_405740",
            "funcStartAddr": "405740",
            "funcEndAddr": "405752",
            "decompiledFuncCode": "int64_t function_405740(int64_t a1, int64_t a2) {\n    // 0x405740\n    return function_404f30(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_405760",
            "funcStartAddr": "405760",
            "funcEndAddr": "405771",
            "decompiledFuncCode": "int64_t function_405760(void) {\n    // 0x405760\n    int64_t v1; // 0x405760\n    return function_404f30(v1, v1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_405780",
            "funcStartAddr": "405780",
            "funcEndAddr": "405796",
            "decompiledFuncCode": "int64_t function_405780(int64_t a1) {\n    // 0x405780\n    return function_404f30(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_4057a0",
            "funcStartAddr": "4057a0",
            "funcEndAddr": "4057eb",
            "decompiledFuncCode": "int64_t function_4057a0(int64_t * a1) {\n    // 0x4057a0\n    int64_t v1; // bp-152, 0x4057a0\n    if (__lxstat(1, \"/\", (struct stat *)&v1) != 0) {\n        // 0x4057e0\n        return 0;\n    }\n    int64_t result = (int64_t)a1;\n    *(int64_t *)(result + 8) = v1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4057f0",
            "funcStartAddr": "4057f0",
            "funcEndAddr": "405bcd",
            "decompiledFuncCode": "int64_t function_4057f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405888\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40580c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405826\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40586b\n    if (a6 < 10) {\n        // 0x40587a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x405972\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405bd0",
            "funcStartAddr": "405bd0",
            "funcEndAddr": "405bf0",
            "decompiledFuncCode": "int64_t function_405bd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405bd0\n    if (a5 == 0) {\n        // 0x405beb\n        return function_4057f0(a1, a2, a3, a4, a5, 0, (int64_t)&g56);\n    }\n    int64_t v1 = 0; // 0x405bd7\n    v1++;\n    int64_t v2 = v1; // 0x405be9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405be0\n        v1++;\n        v2 = v1;\n    }\n    // 0x405beb\n    return function_4057f0(a1, a2, a3, a4, a5, v2, (int64_t)&g56);\n}\n"
        },
        {
            "funcName": "function_405bf0",
            "funcStartAddr": "405bf0",
            "funcEndAddr": "405c50",
            "decompiledFuncCode": "int64_t function_405bf0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405bf0\n    int64_t v3 = &v2; // 0x405bf0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405c23\n    int64_t v6; // 0x405c0d\n    int64_t * v7; // 0x405c2b\n    int64_t v8; // 0x405c2b\n    int64_t v9; // 0x405c37\n    if (v5 < 48) {\n        // 0x405c00\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x405c43\n            break;\n        }\n    } else {\n        // 0x405c2b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x405c43\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405c21\n    while (v4 != 9) {\n        // 0x405c19\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405c00\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x405c43\n                break;\n            }\n        } else {\n            // 0x405c2b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x405c43\n                break;\n            }\n        }\n        // 0x405c19\n        v10 = 10;\n    }\n    // 0x405c43\n    return function_4057f0(a1, a2, a3, a4, v3, v10, (int64_t)&g56);\n}\n"
        },
        {
            "funcName": "function_405c50",
            "funcStartAddr": "405c50",
            "funcEndAddr": "405d0c",
            "decompiledFuncCode": "int64_t function_405c50(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x405c50\n    int64_t v1; // bp-168, 0x405c50\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x405c50\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x405c50\n    int64_t v8; // 0x405c50\n    int64_t v9; // bp-56, 0x405c50\n    int64_t v10; // 0x405cb5\n    int64_t v11; // 0x405cd9\n    if ((int32_t)v6 < 48) {\n        // 0x405ca0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405cf0\n            break;\n        }\n    } else {\n        // 0x405cd2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405cf0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x405cca\n    int64_t v13 = 10; // 0x405cca\n    while (v5 != 9) {\n        // 0x405ccc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405ca0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405cf0\n                break;\n            }\n        } else {\n            // 0x405cd2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405cf0\n                break;\n            }\n        }\n        // 0x405cc2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405cf0\n    int64_t v14; // bp-136, 0x405c50\n    int64_t result = function_4057f0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g56); // 0x405cff\n    return result;\n}\n"
        },
        {
            "funcName": "function_405d10",
            "funcStartAddr": "405d10",
            "funcEndAddr": "405d84",
            "decompiledFuncCode": "int64_t function_405d10(int64_t a1) {\n    // 0x405d10\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x405d73\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_405d90",
            "funcStartAddr": "405d90",
            "funcEndAddr": "405daa",
            "decompiledFuncCode": "int64_t function_405d90(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x405d94\n    if (size != 0 != (mem == NULL)) {\n        // 0x405da3\n        return (int64_t)mem;\n    }\n    // 0x405da5\n    function_405fe0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405db0",
            "funcStartAddr": "405db0",
            "funcEndAddr": "405dd1",
            "decompiledFuncCode": "int64_t function_405db0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405db3\n    int64_t v2 = v1; // 0x405db3\n    if (v2 < 0) {\n        // 0x405dcb\n        function_405fe0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405dc9\n        return function_405d90(v2);\n    }\n    // 0x405dcb\n    function_405fe0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405de0",
            "funcStartAddr": "405de0",
            "funcEndAddr": "405de2",
            "decompiledFuncCode": "int64_t function_405de0(void) {\n    // 0x405de0\n    int64_t v1; // 0x405de0\n    return function_405d90(v1);\n}\n"
        },
        {
            "funcName": "function_405df0",
            "funcStartAddr": "405df0",
            "funcEndAddr": "405e26",
            "decompiledFuncCode": "int64_t function_405df0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x405e18\n        free(v1);\n        return (int32_t)&g56 ^ (int32_t)&g56;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405e01\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x405e10\n        return (int64_t)mem;\n    }\n    // 0x405e21\n    function_405fe0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405e30",
            "funcStartAddr": "405e30",
            "funcEndAddr": "405e51",
            "decompiledFuncCode": "int64_t function_405e30(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x405e33\n    int64_t v2 = v1; // 0x405e33\n    if (v2 < 0) {\n        // 0x405e4b\n        function_405fe0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405e49\n        return function_405df0(a1, v2);\n    }\n    // 0x405e4b\n    function_405fe0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405e60",
            "funcStartAddr": "405e60",
            "funcEndAddr": "405ee6",
            "decompiledFuncCode": "int64_t function_405e60(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x405ebb\n            function_405fe0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405df0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405ea3\n    if (a2 == 0) {\n        // 0x405ec8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405ea8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x405ebb\n        function_405fe0(a1);\n        // UNREACHABLE\n    }\n    // 0x405e8a\n    *(int64_t *)a2 = v2;\n    return function_405df0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405ef0",
            "funcStartAddr": "405ef0",
            "funcEndAddr": "405f40",
            "decompiledFuncCode": "int64_t function_405ef0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405ef0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x405f3a\n            function_405fe0(a1);\n            // UNREACHABLE\n        }\n        // 0x405f12\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405df0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405f25\n        *(int64_t *)a2 = 128;\n        return function_405df0(0, 128);\n    }\n    // 0x405f38\n    if (a2 < 0) {\n        // 0x405f3a\n        function_405fe0(a1);\n        // UNREACHABLE\n    }\n    // 0x405f12\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405df0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_405f40",
            "funcStartAddr": "405f40",
            "funcEndAddr": "405f57",
            "decompiledFuncCode": "int64_t function_405f40(int64_t a1, int64_t a2) {\n    // 0x405f40\n    return (int64_t)memset((int64_t *)function_405d90(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_405f60",
            "funcStartAddr": "405f60",
            "funcEndAddr": "405f8e",
            "decompiledFuncCode": "int64_t function_405f60(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x405f67\n    if ((int64_t)v1 < 0) {\n        // 0x405f89\n        function_405fe0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x405f89\n        function_405fe0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x405f7a\n    if (mem != NULL) {\n        // 0x405f84\n        return (int64_t)mem;\n    }\n    // 0x405f89\n    function_405fe0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405f90",
            "funcStartAddr": "405f90",
            "funcEndAddr": "405fb8",
            "decompiledFuncCode": "int64_t function_405f90(int64_t a1, int64_t a2) {\n    int64_t v1 = function_405d90(a2); // 0x405f9f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405fc0",
            "funcStartAddr": "405fc0",
            "funcEndAddr": "405fd3",
            "decompiledFuncCode": "int64_t function_405fc0(int64_t str) {\n    // 0x405fc0\n    return function_405f90(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405fe0",
            "funcStartAddr": "405fe0",
            "funcEndAddr": "406011",
            "decompiledFuncCode": "int64_t function_405fe0(int64_t a1) {\n    // 0x405fe0\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406020",
            "funcStartAddr": "406020",
            "funcEndAddr": "406070",
            "decompiledFuncCode": "int64_t function_406020(int64_t a1, int64_t a2) {\n    // 0x406020\n    int64_t v1; // 0x406020\n    int64_t result = fts_open(a1, (int32_t)a2 | 512, v1); // 0x40602a\n    if (result != 0) {\n        // 0x406034\n        return result;\n    }\n    // 0x406040\n    if (*__errno_location() == 22) {\n        // 0x406050\n        __assert_fail(\"errno != EINVAL\", \"lib/xfts.c\", 41, \"xfts_open\");\n        return &g56;\n    }\n    // 0x40604a\n    function_405fe0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406070",
            "funcStartAddr": "406070",
            "funcEndAddr": "406099",
            "decompiledFuncCode": "int64_t function_406070(int64_t a1, int64_t a2) {\n    int64_t result = 1; // 0x406070\n    int32_t v1; // 0x406070\n    switch (v1 & 17) {\n        case 17: {\n            // 0x406090\n            return *(int64_t *)(a2 + 88) != 0;\n        }\n        default: {\n            // 0x406087\n            result = 0;\n        }\n        case 16: {\n            // 0x406087\n            return result;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_4060a0",
            "funcStartAddr": "4060a0",
            "funcEndAddr": "4064d0",
            "decompiledFuncCode": "int64_t function_4060a0(int64_t str, int32_t a2, int64_t a3, int64_t * a4, int64_t * str2, int64_t a6) {\n    uint32_t base = (int32_t)a3; // 0x4060ae\n    if (base >= 37) {\n        // 0x4064ab\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoul\");\n        return &g56;\n    }\n    char c = str;\n    int32_t * v1 = __errno_location(); // 0x4060d2\n    *v1 = 0;\n    int64_t v2 = (int64_t)*__ctype_b_loc() + 1; // 0x406102\n    int64_t v3 = str; // 0x406107\n    char v4 = c; // 0x406107\n    if ((*(char *)(v2 + (2 * str & 510)) & 32) != 0) {\n        v3++;\n        unsigned char v5 = *(char *)v3; // 0x4060fc\n        v4 = v5;\n        while ((*(char *)(2 * (int64_t)v5 + v2) & 32) != 0) {\n            // 0x4060f8\n            v3++;\n            v5 = *(char *)v3;\n            v4 = v5;\n        }\n    }\n    // 0x406109\n    if (v4 == 45) {\n        // 0x406143\n        return 4;\n    }\n    // 0x40610e\n    int64_t v6; // bp-64, 0x4060a0\n    int64_t endptr = a2 == 0 ? (int64_t)&v6 : (int64_t)a2; // 0x4060ce\n    int32_t str_as_ul = strtoul((char *)str, (char **)endptr, base); // 0x406114\n    int64_t * v7 = (int64_t *)endptr; // 0x406119\n    int64_t v8 = *v7; // 0x406119\n    char v9; // 0x4060a0\n    int64_t v10; // 0x4060a0\n    int64_t v11; // 0x4060a0\n    int64_t v12; // 0x4060a0\n    int64_t v13; // 0x4060a0\n    int64_t v14; // 0x4060a0\n    int64_t v15; // 0x4060a0\n    if (v8 == str) {\n        // 0x406170\n        if (c == 0 || str2 == NULL) {\n            // 0x406143\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x406191\n        v14 = 1;\n        v11 = 0;\n        v9 = c;\n        if (found_char_pos == NULL) {\n            // 0x406143\n            return 4;\n        }\n        goto lab_0x40619f;\n    } else {\n        int32_t v16 = *v1; // 0x406124\n        int64_t v17 = 0; // 0x40612a\n        if (v16 != 0) {\n            // 0x406158\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x406143\n                return 4;\n            }\n        }\n        int64_t v18 = str_as_ul; // 0x406114\n        v13 = v18;\n        v10 = v17;\n        if (str2 == NULL) {\n            goto lab_0x406140;\n        } else {\n            char c2 = *(char *)v8; // 0x406133\n            v13 = v18;\n            v10 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x406293\n                v14 = v18;\n                v11 = v17;\n                v9 = c2;\n                v15 = v18;\n                v12 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x40619f;\n                } else {\n                    goto lab_0x4062a5;\n                }\n            } else {\n                goto lab_0x406140;\n            }\n        }\n    }\n  lab_0x40619f:;\n    unsigned char v19 = v9 - 69;\n    int64_t v20 = 1024; // 0x4061a7\n    int64_t v21 = 1; // 0x4061a7\n    int64_t v22; // 0x4060a0\n    int64_t v23; // 0x4060a0\n    int64_t v24; // 0x4060a0\n    int64_t v25; // 0x4060a0\n    int64_t v26; // 0x4060a0\n    int64_t v27; // 0x4060a0\n    int64_t v28; // 0x4060a0\n    int64_t v29; // 0x4060a0\n    int64_t v30; // 0x4060a0\n    int64_t v31; // 0x4060a0\n    int64_t v32; // 0x4060a0\n    int64_t v33; // 0x4060a0\n    int64_t v34; // 0x4060a0\n    int64_t v35; // 0x4060a0\n    int64_t v36; // 0x4060a0\n    int64_t v37; // 0x4060a0\n    int64_t v38; // 0x4060a0\n    int64_t v39; // 0x4060a0\n    int64_t v40; // 0x4060a0\n    int64_t v41; // 0x4060a0\n    if (v19 < 48) {\n        // 0x4061a9\n        v20 = 1024;\n        v21 = 1;\n        if ((1 << (int64_t)((v9 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x40620a;\n        } else {\n            // 0x4061bc\n            v20 = 1024;\n            v21 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x40620a;\n            } else {\n                // 0x4061d8\n                v20 = 1000;\n                v21 = 2;\n                switch (*(char *)(v8 + 1)) {\n                    case 68: {\n                        goto lab_0x40620a;\n                    }\n                    case 105: {\n                        char v42 = *(char *)(v8 + 2); // 0x406439\n                        v20 = 1024;\n                        v21 = (v42 == 66 ? 2 : 1) + (int64_t)(v42 == 66);\n                        goto lab_0x40620a;\n                    }\n                    default: {\n                        // 0x4061ed\n                        g53 = v19;\n                        v20 = 1000;\n                        v21 = 2;\n                        v24 = 1024;\n                        v36 = 1;\n                        v23 = v14;\n                        v22 = v11;\n                        v37 = 1;\n                        v25 = 1024;\n                        v38 = 1;\n                        v15 = v14;\n                        v12 = v11;\n                        v39 = 1;\n                        v26 = 1024;\n                        v40 = 1;\n                        v27 = 1024;\n                        v41 = 1;\n                        v28 = 1024;\n                        v32 = 1;\n                        v29 = 1024;\n                        v33 = 1;\n                        v30 = 1024;\n                        v34 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        switch (v9) {\n                            case 69: {\n                                goto lab_0x4063ab;\n                            }\n                            case 70: {\n                                goto lab_0x4062a5;\n                            }\n                            case 71: {\n                                goto lab_0x4063e3;\n                            }\n                            case 72: {\n                                goto lab_0x4062a5;\n                            }\n                            case 73: {\n                                goto lab_0x4062a5;\n                            }\n                            case 74: {\n                                goto lab_0x4062a5;\n                            }\n                            case 75: {\n                                goto lab_0x40626c;\n                            }\n                            case 76: {\n                                goto lab_0x4062a5;\n                            }\n                            case 77: {\n                                goto lab_0x40622e;\n                            }\n                            case 78: {\n                                goto lab_0x4062a5;\n                            }\n                            case 79: {\n                                goto lab_0x4062a5;\n                            }\n                            case 80: {\n                                goto lab_0x406378;\n                            }\n                            case 81: {\n                                goto lab_0x4062a5;\n                            }\n                            case 82: {\n                                goto lab_0x4062a5;\n                            }\n                            case 83: {\n                                goto lab_0x4062a5;\n                            }\n                            case 84: {\n                                goto lab_0x406348;\n                            }\n                            case 85: {\n                                goto lab_0x4062a5;\n                            }\n                            case 86: {\n                                goto lab_0x4062a5;\n                            }\n                            case 87: {\n                                goto lab_0x4062a5;\n                            }\n                            case 88: {\n                                goto lab_0x4062a5;\n                            }\n                            case 89: {\n                                goto lab_0x406316;\n                            }\n                            case 90: {\n                                goto lab_0x4062db;\n                            }\n                            case 91: {\n                                goto lab_0x4062a5;\n                            }\n                            case 92: {\n                                goto lab_0x4062a5;\n                            }\n                            case 93: {\n                                goto lab_0x4062a5;\n                            }\n                            case 94: {\n                                goto lab_0x4062a5;\n                            }\n                            case 95: {\n                                goto lab_0x4062a5;\n                            }\n                            case 96: {\n                                goto lab_0x4062a5;\n                            }\n                            case 97: {\n                                goto lab_0x4062a5;\n                            }\n                            case 98: {\n                                goto lab_0x4062bf;\n                            }\n                            case 99: {\n                                goto lab_0x406248;\n                            }\n                            case 100: {\n                                goto lab_0x4062a5;\n                            }\n                            case 101: {\n                                goto lab_0x4062a5;\n                            }\n                            case 102: {\n                                goto lab_0x4062a5;\n                            }\n                            case 103: {\n                                goto lab_0x4063e3;\n                            }\n                            case 104: {\n                                goto lab_0x4062a5;\n                            }\n                            case 105: {\n                                goto lab_0x4062a5;\n                            }\n                            case 106: {\n                                goto lab_0x4062a5;\n                            }\n                            case 107: {\n                                goto lab_0x40626c;\n                            }\n                            case 108: {\n                                goto lab_0x4062a5;\n                            }\n                            case 109: {\n                                goto lab_0x40622e;\n                            }\n                            case 110: {\n                                goto lab_0x4062a5;\n                            }\n                            case 111: {\n                                goto lab_0x4062a5;\n                            }\n                            case 112: {\n                                goto lab_0x4062a5;\n                            }\n                            case 113: {\n                                goto lab_0x4062a5;\n                            }\n                            case 114: {\n                                goto lab_0x4062a5;\n                            }\n                            case 115: {\n                                goto lab_0x4062a5;\n                            }\n                            case 116: {\n                                goto lab_0x406348;\n                            }\n                            default: {\n                                goto lab_0x40620a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40620a;\n    }\n  lab_0x406140:\n    // 0x406140\n    *a4 = v13;\n    // 0x406143\n    return v10 & 0xffffffff;\n  lab_0x40620a:\n    // 0x40620a\n    g54 = v9 - 66;\n    v24 = v20;\n    v36 = v21;\n    v23 = v14;\n    v22 = v11;\n    v37 = v21;\n    v25 = v20;\n    v38 = v21;\n    v15 = v14;\n    v12 = v11;\n    v39 = v21;\n    v26 = v20;\n    v40 = v21;\n    v27 = v20;\n    v41 = v21;\n    v28 = v20;\n    v32 = v21;\n    v29 = v20;\n    v33 = v21;\n    v30 = v20;\n    v34 = v21;\n    v31 = v20;\n    v35 = v21;\n    int64_t v43; // 0x4060a0\n    switch (v9) {\n        case 66: {\n            // 0x406404\n            v43 = v21;\n            if (v14 >= 0x40000000000000) {\n                goto lab_0x406277;\n            } else {\n                // 0x406411\n                v23 = 1024 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x406248;\n            }\n        }\n        case 69: {\n            goto lab_0x4063ab;\n        }\n        case 71: {\n            goto lab_0x4063e3;\n        }\n        case 75: {\n            goto lab_0x40626c;\n        }\n        case 77: {\n            goto lab_0x40622e;\n        }\n        case 80: {\n            goto lab_0x406378;\n        }\n        case 84: {\n            goto lab_0x406348;\n        }\n        case 89: {\n            goto lab_0x406316;\n        }\n        case 90: {\n            goto lab_0x4062db;\n        }\n        case 98: {\n            goto lab_0x4062bf;\n        }\n        case 99: {\n            goto lab_0x406248;\n        }\n        case 103: {\n            goto lab_0x4063e3;\n        }\n        case 107: {\n            goto lab_0x40626c;\n        }\n        case 109: {\n            goto lab_0x40622e;\n        }\n        case 116: {\n            goto lab_0x406348;\n        }\n        case 119: {\n            // 0x4062b0\n            v43 = v21;\n            if (v14 < 0) {\n                goto lab_0x406277;\n            } else {\n                // 0x4062b5\n                v23 = 2 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x406248;\n            }\n        }\n        default: {\n            goto lab_0x4062a5;\n        }\n    }\n  lab_0x4063ab:;\n    uint128_t v44 = (int128_t)v14 * (int128_t)v30; // 0x4063c3\n    int64_t v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n    int64_t v46 = v44 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v47 = 5; // 0x4063cf\n    int64_t v48 = v45; // 0x4063d2\n    int64_t v49 = v34; // 0x4063d2\n    int64_t v50 = v46; // 0x4063d2\n    int32_t v51 = v47; // 0x4063d2\n    int64_t v52 = v46; // 0x4063d2\n    while (v47 != 0) {\n        // 0x4063c0\n        v44 = (int128_t)v45 * (int128_t)v30;\n        v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n        v46 = v44 > 0xffffffffffffffff ? 1 : v52;\n        v47 = v51 - 1;\n        v48 = v45;\n        v49 = v34;\n        v50 = v46;\n        v51 = v47;\n        v52 = v46;\n    }\n    goto lab_0x406304;\n  lab_0x4063e3:\n    // 0x4063e3\n    v23 = -1;\n    v22 = 1;\n    v37 = v35;\n    if ((int128_t)v31 * (int128_t)v14 <= 0xffffffffffffffff) {\n        // 0x4063ee\n        int128_t v53; // 0x4063e9\n        uint128_t v54; // 0x4063e9\n        uint128_t v55 = (v54 & 0xffffffffffffffff) * v53; // 0x4063ee\n        v23 = -1;\n        v22 = 1;\n        int64_t v56; // 0x4060a0\n        v37 = v56;\n        if (v55 <= 0xffffffffffffffff) {\n            uint128_t v57 = (v55 & 0xffffffffffffffff) * v53; // 0x4063f3\n            v23 = -1;\n            v22 = 1;\n            v37 = v56;\n            if (v57 <= 0xffffffffffffffff) {\n                // 0x4063f8\n                v23 = v57;\n                int64_t v58; // 0x4060a0\n                v22 = v58 & 0xffffffff;\n                v37 = v56;\n            }\n        }\n    }\n    goto lab_0x406248;\n  lab_0x40626c:;\n    uint128_t v61 = (int128_t)v25 * (int128_t)v14; // 0x40626f\n    v23 = v61;\n    v22 = v11;\n    v37 = v38;\n    v43 = v38;\n    if (v61 <= 0xffffffffffffffff) {\n        goto lab_0x406248;\n    } else {\n        goto lab_0x406277;\n    }\n  lab_0x40622e:;\n    int128_t v62 = v24; // 0x406234\n    uint128_t v63 = v62 * (int128_t)v14; // 0x406234\n    v43 = v36;\n    if (v63 > 0xffffffffffffffff) {\n        goto lab_0x406277;\n    } else {\n        uint128_t v64 = (v63 & 0xffffffffffffffff) * v62; // 0x406239\n        v43 = v36;\n        if (v64 > 0xffffffffffffffff) {\n            goto lab_0x406277;\n        } else {\n            // 0x40623e\n            v23 = v64;\n            v22 = v11;\n            v37 = v36;\n            goto lab_0x406248;\n        }\n    }\n  lab_0x406378:;\n    uint128_t v65 = (int128_t)v14 * (int128_t)v29; // 0x40638b\n    int64_t v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n    int64_t v67 = v65 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v68 = 4; // 0x406397\n    v48 = v66;\n    v49 = v33;\n    v50 = v67;\n    int32_t v69 = v68; // 0x40639a\n    int64_t v70 = v67; // 0x40639a\n    while (v68 != 0) {\n        // 0x406388\n        v65 = (int128_t)v66 * (int128_t)v29;\n        v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n        v67 = v65 > 0xffffffffffffffff ? 1 : v70;\n        v68 = v69 - 1;\n        v48 = v66;\n        v49 = v33;\n        v50 = v67;\n        v69 = v68;\n        v70 = v67;\n    }\n    goto lab_0x406304;\n  lab_0x406348:;\n    uint128_t v71 = (int128_t)v14 * (int128_t)v28; // 0x40635b\n    int64_t v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n    int64_t v73 = v71 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v74 = 3; // 0x406367\n    v48 = v72;\n    v49 = v32;\n    v50 = v73;\n    int32_t v75 = v74; // 0x40636a\n    int64_t v76 = v73; // 0x40636a\n    while (v74 != 0) {\n        // 0x406358\n        v71 = (int128_t)v72 * (int128_t)v28;\n        v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n        v73 = v71 > 0xffffffffffffffff ? 1 : v76;\n        v74 = v75 - 1;\n        v48 = v72;\n        v49 = v32;\n        v50 = v73;\n        v75 = v74;\n        v76 = v73;\n    }\n    goto lab_0x406304;\n  lab_0x406316:;\n    uint128_t v77 = (int128_t)v14 * (int128_t)v27; // 0x40632b\n    int64_t v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n    int64_t v79 = v77 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v80 = 7; // 0x406337\n    v48 = v78;\n    v49 = v41;\n    v50 = v79;\n    int32_t v81 = v80; // 0x40633a\n    int64_t v82 = v79; // 0x40633a\n    while (v80 != 0) {\n        // 0x406328\n        v77 = (int128_t)v78 * (int128_t)v27;\n        v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n        v79 = v77 > 0xffffffffffffffff ? 1 : v82;\n        v80 = v81 - 1;\n        v48 = v78;\n        v49 = v41;\n        v50 = v79;\n        v81 = v80;\n        v82 = v79;\n    }\n    goto lab_0x406304;\n  lab_0x4062db:;\n    uint128_t v83 = (int128_t)v14 * (int128_t)v26; // 0x4062f3\n    int64_t v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n    int64_t v85 = v83 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v86 = 6; // 0x4062ff\n    int32_t v87 = v86; // 0x406302\n    int64_t v88 = v85; // 0x406302\n    v48 = v84;\n    v49 = v40;\n    v50 = v85;\n    while (v86 != 0) {\n        // 0x4062f0\n        v83 = (int128_t)v84 * (int128_t)v26;\n        v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n        v85 = v83 > 0xffffffffffffffff ? 1 : v88;\n        v86 = v87 - 1;\n        v87 = v86;\n        v88 = v85;\n        v48 = v84;\n        v49 = v40;\n        v50 = v85;\n    }\n    goto lab_0x406304;\n  lab_0x4062bf:\n    // 0x4062bf\n    v43 = v39;\n    if (v14 >= 0x80000000000000) {\n        goto lab_0x406277;\n    } else {\n        // 0x4062c8\n        v23 = 512 * v14;\n        v22 = v11;\n        v37 = v39;\n        goto lab_0x406248;\n    }\n  lab_0x406248:;\n    int64_t v59 = v22;\n    int64_t v60 = (0x100000000 * v37 >> 32) + v8; // 0x40624d\n    *v7 = v60;\n    v13 = v23;\n    v10 = (*(char *)v60 != 0 ? v59 | 2 : v59) & 0xffffffff;\n    goto lab_0x406140;\n  lab_0x4062a5:\n    // 0x4062a5\n    *a4 = v15;\n    // 0x406143\n    return (v12 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x406277:\n    // 0x406277\n    v23 = -1;\n    v22 = 1;\n    v37 = v43;\n    goto lab_0x406248;\n  lab_0x406304:\n    // 0x406304\n    v23 = v48;\n    v22 = (v50 | v11) & 0xffffffff;\n    v37 = v49;\n    goto lab_0x406248;\n}\n"
        },
        {
            "funcName": "function_4064d0",
            "funcStartAddr": "4064d0",
            "funcEndAddr": "40673e",
            "decompiledFuncCode": "int64_t function_4064d0(int64_t a1, int32_t a2, int64_t a3, int32_t group, int64_t a5) {\n    if ((a5 & 0xfffffeff) != 0) {\n        // 0x406710\n        *__errno_location() = 22;\n        // 0x40660e\n        return 0xffffffff;\n    }\n    int64_t v1 = a2;\n    int32_t fd = a1; // 0x4064fc\n    if (fd == -100 || (char)a2 == 47) {\n        char * path = (char *)v1;\n        int32_t owner = a3;\n        int64_t result; // 0x4064d0\n        if ((int32_t)a5 == 256) {\n            // 0x406668\n            result = lchown(path, owner, group);\n        } else {\n            // 0x406639\n            result = chown(path, owner, group);\n        }\n        // 0x40660e\n        return result;\n    }\n    // 0x40650e\n    int32_t v2; // bp-4088, 0x4064d0\n    int64_t v3 = function_409860((int64_t *)&v2, a1 & 0xffffffff, v1); // 0x406518\n    if (v3 != 0) {\n        char * path2 = (char *)v3;\n        int32_t owner2 = a3;\n        int32_t v4; // 0x4064d0\n        if ((int32_t)a5 == 256) {\n            // 0x406678\n            v4 = lchown(path2, owner2, group);\n        } else {\n            // 0x40653b\n            v4 = chown(path2, owner2, group);\n        }\n        int32_t * v5 = __errno_location(); // 0x40654b\n        uint32_t v6 = *v5; // 0x406559\n        if (v3 != (int64_t)&v2) {\n            // 0x406560\n            free((int64_t *)v3);\n        }\n        int64_t result2 = v4;\n        if (v4 != -1) {\n            // 0x40660e\n            return result2;\n        }\n        if (v6 < 39) {\n            if ((1 << (int64_t)(v6 % 64) & 0x4000102006) == 0) {\n                // 0x406651\n                *v5 = v6;\n                // 0x40660e\n                return result2;\n            }\n        } else {\n            if (v6 != 95) {\n                // 0x406651\n                *v5 = v6;\n                // 0x40660e\n                return result2;\n            }\n        }\n    }\n    // 0x4065a0\n    if ((int32_t)function_40b460((int64_t *)&v2) != 0) {\n        int32_t v7 = *__errno_location(); // 0x406737\n        function_40b3b0(v7);\n        // UNREACHABLE\n    }\n    // 0x4065b2\n    if (fd > -1 == v2 == fd) {\n        // 0x4066f0\n        function_40b4d0((int64_t *)&v2);\n        *__errno_location() = 9;\n        // 0x40660e\n        return 0xffffffff;\n    }\n    // 0x4065c0\n    if (fchdir(fd) != 0) {\n        int32_t * v8 = __errno_location(); // 0x4066c8\n        function_40b4d0((int64_t *)&v2);\n        // 0x40660e\n        return 0xffffffff;\n    }\n    char * path3 = (char *)v1;\n    int32_t owner3 = a3;\n    int32_t result3; // 0x4064d0\n    if ((int32_t)a5 == 256) {\n        // 0x406658\n        result3 = lchown(path3, owner3, group);\n    } else {\n        // 0x4065e0\n        result3 = chown(path3, owner3, group);\n    }\n    // 0x4065e8\n    int32_t v9; // 0x40672b\n    if (result3 != -1) {\n        // 0x4065f2\n        if ((int32_t)function_40b4b0((int64_t *)&v2) == 0) {\n            // 0x406604\n            function_40b4d0((int64_t *)&v2);\n            // 0x40660e\n            return result3;\n        }\n        // 0x406726\n        v9 = *__errno_location();\n        function_40b3e0(v9);\n        // UNREACHABLE\n    }\n    int32_t * v10 = __errno_location(); // 0x406690\n    int32_t v11 = *v10; // 0x40669d\n    if ((int32_t)function_40b4b0((int64_t *)&v2) != 0) {\n        // 0x406726\n        v9 = *__errno_location();\n        function_40b3e0(v9);\n        // UNREACHABLE\n    }\n    // 0x4066a8\n    function_40b4d0((int64_t *)&v2);\n    if (v11 != 0) {\n        // 0x4066ba\n        *v10 = v11;\n    }\n    // 0x40660e\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_406740",
            "funcStartAddr": "406740",
            "funcEndAddr": "40675a",
            "decompiledFuncCode": "int64_t function_406740(int64_t a1, int64_t a2) {\n    // 0x406740\n    if (*(int64_t *)(a1 + 8) == *(int64_t *)(a2 + 8)) {\n        // 0x406750\n        return a2 & -256 | (int64_t)(a1 == a2);\n    }\n    // 0x40674c\n    return 0;\n}\n"
        },
        {
            "funcName": "function_406760",
            "funcStartAddr": "406760",
            "funcEndAddr": "40676d",
            "decompiledFuncCode": "int64_t function_406760(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x406760\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_406770",
            "funcStartAddr": "406770",
            "funcEndAddr": "40677c",
            "decompiledFuncCode": "int64_t function_406770(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x406770\n    return a1 % a2;\n}\n"
        },
        {
            "funcName": "function_406780",
            "funcStartAddr": "406780",
            "funcEndAddr": "40678a",
            "decompiledFuncCode": "int64_t function_406780(int64_t a1, int64_t a2) {\n    // 0x406780\n    return a2 & -256 | (int64_t)(bool)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_406790",
            "funcStartAddr": "406790",
            "funcEndAddr": "4067b2",
            "decompiledFuncCode": "int64_t function_406790(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a2 + 128); // 0x40679b\n    uint64_t v2 = *(int64_t *)(a1 + 128); // 0x4067a2\n    return v2 < v1 ? 0xffffffff : (int64_t)(v2 > v1);\n}\n"
        },
        {
            "funcName": "function_4067c0",
            "funcStartAddr": "4067c0",
            "funcEndAddr": "40696a",
            "decompiledFuncCode": "int64_t function_4067c0(int64_t a1, int64_t a2, int32_t a3) {\n    int64_t v1 = a2 + 120; // 0x4067c6\n    int64_t v2 = a1 + 72; // 0x4067ce\n    uint64_t v3 = (int64_t)*(int32_t *)v2; // 0x4067ce\n    int64_t * v4 = (int64_t *)(a2 + 88); // 0x4067d1\n    int64_t * v5 = (int64_t *)(a2 + 48); // 0x4067d6\n    int64_t v6 = *v5; // 0x4067d6\n    int32_t v7; // 0x4067c0\n    if (*v4 != 0 || v3 % 2 == 0) {\n        if ((v3 & 2) != 0) {\n            goto lab_0x4067e0;\n        } else {\n            if ((char)a3 != 0) {\n                goto lab_0x4067e0;\n            } else {\n                int32_t v8 = *(int32_t *)(a1 + 44); // 0x40683b\n                if (__fxstatat(1, v8, (char *)v6, (struct stat *)v1, 256) != 0) {\n                    // 0x406890\n                    v7 = *__errno_location();\n                    goto lab_0x406897;\n                } else {\n                    goto lab_0x406857;\n                }\n            }\n        }\n    } else {\n        goto lab_0x4067e0;\n    }\n  lab_0x4067e0:;\n    struct stat * v9 = (struct stat *)v1; // 0x4067e8\n    if (__xstat(1, (char *)v6, v9) == 0) {\n        goto lab_0x406857;\n    } else {\n        int32_t * v10 = __errno_location(); // 0x4067f1\n        int32_t v11 = *v10; // 0x4067f9\n        v7 = v11;\n        if (v11 == 2) {\n            // 0x406804\n            if (__lxstat(1, (char *)*v5, v9) == 0) {\n                // 0x40681d\n                *v10 = 0;\n                return 13;\n            }\n            // 0x406940\n            v7 = *v10;\n        }\n        goto lab_0x406897;\n    }\n  lab_0x406857:;\n    int32_t v12 = *(int32_t *)(a2 + 144) & 0xf000; // 0x40685d\n    int64_t v13; // 0x4067c0\n    switch ((int16_t)v12) {\n        case 0x4000: {\n            uint64_t v14 = *(int64_t *)(a2 + 136); // 0x4068d0\n            v13 = -1;\n            if (v14 >= 2) {\n                // 0x4068dd\n                v13 = -1;\n                if (*v4 >= 1) {\n                    // 0x4068e4\n                    v13 = (*(char *)v2 & 32) == 0 ? v14 - 2 : v14;\n                }\n            }\n            // break -> 0x4068f2\n            break;\n        }\n        case -0x6000: {\n            // 0x406883\n            return 12;\n        }\n        default: {\n            // 0x406883\n            return 4 * (int64_t)(v12 == 0x8000) + (v12 == 0x8000 ? 4 : 3);\n        }\n    }\n    int64_t v15 = a2 + 264; // 0x4068f2\n    *(int64_t *)(a2 + 104) = v13;\n    if (*(char *)v15 != 46) {\n        // 0x406883\n        return 1;\n    }\n    // 0x406908\n    if (*(char *)(a2 + 265) == 0) {\n        // 0x406883\n        return *v4 == 0 ? 1 : 5;\n    }\n    // 0x406911\n    if ((*(int32_t *)v15 & 0xffff00) != 0x2e00) {\n        // 0x406883\n        return 1;\n    }\n    // 0x406883\n    return *v4 == 0 ? 1 : 5;\n  lab_0x406897:\n    // 0x406897\n    *(int32_t *)(a2 + 64) = v7;\n    int64_t v16 = a2 + 128 & -8; // 0x4068a0\n    *(int64_t *)v1 = 0;\n    *(int64_t *)(a2 + 256) = 0;\n    __asm_rep_stosq_memset((char *)v16, 0, (a2 + 264 - v16) / 8 % 0x20000000);\n    return 10;\n}\n"
        },
        {
            "funcName": "function_406970",
            "funcStartAddr": "406970",
            "funcEndAddr": "406a6d",
            "decompiledFuncCode": "int64_t function_406970(int64_t a1, int64_t result, uint64_t nmemb) {\n    int64_t v1 = *(int64_t *)(a1 + 64); // 0x406983\n    int64_t * v2 = (int64_t *)(a1 + 16); // 0x406987\n    int64_t v3 = *v2; // 0x406987\n    int64_t * v4 = (int64_t *)(a1 + 56); // 0x40698b\n    int64_t base = v3; // 0x40698f\n    if (*v4 < nmemb) {\n        uint64_t v5 = nmemb + 40; // 0x40699b\n        *v4 = v5;\n        if (v5 >= 0x2000000000000000) {\n            // 0x406a41\n            free((int64_t *)v3);\n            *v2 = 0;\n            *v4 = 0;\n            return result;\n        }\n        int64_t * mem = realloc((int64_t *)v3, 8 * (int32_t)v5); // 0x4069b0\n        if (mem == NULL) {\n            // 0x406a41\n            free((int64_t *)*v2);\n            *v2 = 0;\n            *v4 = 0;\n            return result;\n        }\n        // 0x4069c1\n        base = (int64_t)mem;\n        *v2 = base;\n    }\n    int64_t v6 = base; // 0x4069cb\n    int64_t v7 = result; // 0x4069cb\n    if (result != 0) {\n        *(int64_t *)v6 = v7;\n        v7 += 16;\n        v6 += 8;\n        while (v7 != 0) {\n            // 0x4069d0\n            *(int64_t *)v6 = v7;\n            v7 += 16;\n            v6 += 8;\n        }\n    }\n    // 0x4069e1\n    qsort((int64_t *)base, (int32_t)nmemb, 8, (int32_t (*)(int64_t *, int64_t *))v1);\n    int64_t v8 = *v2; // 0x4069f1\n    int64_t result2 = *(int64_t *)v8; // 0x4069f8\n    if (nmemb == 1) {\n        // 0x406a2a\n        *(int64_t *)(result2 + 16) = 0;\n        return result2;\n    }\n    int64_t v9 = v8 + 8; // 0x406a13\n    int64_t * v10 = (int64_t *)v9; // 0x406a13\n    *(int64_t *)(result2 + 16) = *v10;\n    int64_t v11 = nmemb - 2; // 0x406a1f\n    int64_t v12 = v11; // 0x406a23\n    int64_t v13 = v9; // 0x406a23\n    if (v11 != 0) {\n        v13 += 8;\n        int64_t * v14 = (int64_t *)v13; // 0x406a13\n        *(int64_t *)(*v10 + 16) = *v14;\n        v12--;\n        while (v12 != 0) {\n            int64_t * v15 = v14;\n            v13 += 8;\n            v14 = (int64_t *)v13;\n            *(int64_t *)(*v15 + 16) = *v14;\n            v12--;\n        }\n    }\n    // 0x406a2a\n    *(int64_t *)(*(int64_t *)(8 * nmemb - 8 + v8) + 16) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406a70",
            "funcStartAddr": "406a70",
            "funcEndAddr": "406afa",
            "decompiledFuncCode": "int64_t function_406a70(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = a3;\n    int64_t * mem = malloc(v1 + 272 & -8); // 0x406a8e\n    int64_t result = (int64_t)mem; // 0x406a8e\n    if (mem != NULL) {\n        int64_t v2 = result + 264; // 0x406a9b\n        memcpy((int64_t *)v2, (int64_t *)a2, v1);\n        *(char *)(v2 + a3) = 0;\n        *(int64_t *)(result + 96) = a3;\n        *(int64_t *)(result + 80) = a1;\n        *(int64_t *)(result + 56) = *(int64_t *)(a1 + 32);\n        *(int32_t *)(result + 64) = 0;\n        *(int64_t *)(result + 24) = 0;\n        *(int32_t *)(result + 114) = 0x30000;\n        *(int64_t *)(result + 32) = 0;\n        *(int64_t *)(result + 40) = 0;\n    }\n    // 0x406aec\n    return result;\n}\n"
        },
        {
            "funcName": "function_406b00",
            "funcStartAddr": "406b00",
            "funcEndAddr": "406b41",
            "decompiledFuncCode": "int64_t function_406b00(int64_t a1) {\n    // 0x406b00\n    if (a1 == 0) {\n        // 0x406b32\n        int64_t result; // 0x406b00\n        return result;\n    }\n    int64_t dirp = *(int64_t *)(a1 + 24); // 0x406b10\n    int64_t v1 = *(int64_t *)(a1 + 16); // 0x406b14\n    if (dirp != 0) {\n        // 0x406b1d\n        closedir((struct __dirstream *)dirp);\n    }\n    // 0x406b22\n    free((int64_t *)a1);\n    while (v1 != 0) {\n        int64_t v2 = v1;\n        dirp = *(int64_t *)(v2 + 24);\n        v1 = *(int64_t *)(v2 + 16);\n        if (dirp != 0) {\n            // 0x406b1d\n            closedir((struct __dirstream *)dirp);\n        }\n        // 0x406b22\n        free((int64_t *)v2);\n    }\n    // 0x406b32\n    return &g56;\n}\n"
        },
        {
            "funcName": "function_406b50",
            "funcStartAddr": "406b50",
            "funcEndAddr": "406b89",
            "decompiledFuncCode": "int64_t function_406b50(int64_t a1) {\n    int64_t result = function_40ada0(a1); // 0x406b6f\n    if ((char)result != 0) {\n        // 0x406b78\n        return result;\n    }\n    int32_t fd = function_40adf0(a1); // 0x406b68\n    if (fd >= 0) {\n        // 0x406b80\n        close(fd);\n    }\n    int64_t result2 = function_40ada0(a1); // 0x406b6f\n    while ((char)result2 == 0) {\n        // 0x406b60\n        fd = function_40adf0(a1);\n        if (fd >= 0) {\n            // 0x406b80\n            close(fd);\n        }\n        // 0x406b6c\n        result2 = function_40ada0(a1);\n    }\n    // 0x406b78\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406b90",
            "funcStartAddr": "406b90",
            "funcEndAddr": "406ca1",
            "decompiledFuncCode": "int64_t function_406b90(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 80); // 0x406b98\n    int64_t v2 = *v1; // 0x406b98\n    if ((*(char *)(v2 + 73) & 2) == 0) {\n        // 0x406bd2\n        return 0;\n    }\n    int64_t * v3 = (int64_t *)(v2 + 80); // 0x406ba6\n    int64_t v4 = *v3; // 0x406ba6\n    int64_t v5 = v4; // 0x406bb0\n    int64_t result; // bp-152, 0x406b90\n    if (v4 == 0) {\n        // 0x406c40\n        v5 = function_40a3c0(13, 0, 0x406770, 0x406780, 0x401bb0);\n        *v3 = v5;\n        if (v5 == 0) {\n            // 0x406c6c\n            fstatfs(*(int32_t *)(*v1 + 44), (struct statfs *)&result);\n            // 0x406bd2\n            return 0;\n        }\n    }\n    int64_t * v6 = (int64_t *)(a1 + 120); // 0x406bb6\n    result = *v6;\n    int64_t v7 = function_40a150(v5, &result); // 0x406bc4\n    if (v7 != 0) {\n        // 0x406bd2\n        return *(int64_t *)(v7 + 8);\n    }\n    // 0x406be0\n    if (fstatfs(*(int32_t *)(*v1 + 44), (struct statfs *)&result) != 0) {\n        // 0x406bd2\n        return 0;\n    }\n    int64_t * mem = malloc(16); // 0x406bfc\n    if (mem == NULL) {\n        // 0x406bd2\n        return result;\n    }\n    int64_t v8 = (int64_t)mem; // 0x406bfc\n    *(int64_t *)(v8 + 8) = result;\n    *mem = *v6;\n    if (function_40ab60(v5, v8) != 0) {\n        // 0x406c28\n        return result;\n    }\n    // 0x406c90\n    free(mem);\n    // 0x406bd2\n    return result;\n}\n"
        },
        {
            "funcName": "function_406cb0",
            "funcStartAddr": "406cb0",
            "funcEndAddr": "406d14",
            "decompiledFuncCode": "int64_t function_406cb0(int64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = function_406b90(a1, a2); // 0x406cb4\n    if (v1 == 0x9fa0) {\n        // 0x406ce6\n        return 0;\n    }\n    if (v1 <= 0x9fa0) {\n        // 0x406cf0\n        if (v1 != 0) {\n            // 0x406cf7\n            return v1 != 0x6969;\n        }\n        // 0x406ce6\n        return 0;\n    }\n    // 0x406cc3\n    switch (v1) {\n        case 0x5346414f: {\n            // 0x406ce6\n            return 0;\n        }\n        case 0x58465342: {\n            // 0x406ce6\n            return 2;\n        }\n    }\n    // 0x406ce6\n    return v1 == 0x52654973 ? 2 : 1;\n}\n"
        },
        {
            "funcName": "function_406d20",
            "funcStartAddr": "406d20",
            "funcEndAddr": "406d86",
            "decompiledFuncCode": "int64_t function_406d20(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t * v1 = (int32_t *)(a1 + 44); // 0x406d2b\n    int32_t fd = *v1; // 0x406d2b\n    int32_t v2 = a2; // 0x406d2e\n    if (fd == v2 == (fd != -100)) {\n        // 0x406d81\n        abort();\n        // UNREACHABLE\n    }\n    if ((char)a3 == 0) {\n        // 0x406d3b\n        if (fd >= 0 != ((*(char *)(a1 + 72) & 4) == 0)) {\n            // 0x406d45\n            *v1 = v2;\n            int64_t result; // 0x406d20\n            return result;\n        }\n        int32_t result2 = close(fd); // 0x406d72\n        *v1 = v2;\n        return result2;\n    }\n    int64_t result3 = function_40adb0(a1 + 96, fd); // 0x406d54\n    uint32_t fd2 = (int32_t)result3; // 0x406d59\n    if (fd2 < 0) {\n        // 0x406d45\n        *v1 = v2;\n        return result3;\n    }\n    int32_t result4 = close(fd2); // 0x406d5f\n    *v1 = v2;\n    return result4;\n}\n"
        },
        {
            "funcName": "function_406d90",
            "funcStartAddr": "406d90",
            "funcEndAddr": "406dea",
            "decompiledFuncCode": "int64_t function_406d90(int64_t a1) {\n    int32_t v1 = *(int32_t *)(a1 + 72); // 0x406d99\n    uint32_t v2 = v1 & 4; // 0x406d9e\n    if (v2 != 0) {\n        // 0x406dc2\n        function_406b50(a1 + 96);\n        return 0;\n    }\n    int64_t result; // 0x406d90\n    if ((v1 & 512) == 0) {\n        // 0x406dd8\n        result = fchdir(*(int32_t *)(a1 + 40)) != 0;\n    } else {\n        // 0x406da8\n        function_406d20(a1, 0xffffff9c, 1);\n        result = v2;\n    }\n    // 0x406dc2\n    function_406b50(a1 + 96);\n    return result;\n}\n"
        },
        {
            "funcName": "function_406df0",
            "funcStartAddr": "406df0",
            "funcEndAddr": "406e5b",
            "decompiledFuncCode": "int64_t function_406df0(int64_t a1, uint64_t a2, int64_t a3) {\n    uint64_t v1 = a2 + 256 + a3; // 0x406dfa\n    if (v1 < a2) {\n        int64_t * v2 = (int64_t *)a1; // 0x406e28\n        free(v2);\n        *v2 = 0;\n        *__errno_location() = 36;\n        return 0;\n    }\n    // 0x406e07\n    *(int64_t *)a2 = v1;\n    int64_t * v3 = (int64_t *)a1; // 0x406e0d\n    int64_t * mem = realloc(v3, (int32_t)v1); // 0x406e0d\n    if (mem != NULL) {\n        // 0x406e17\n        *v3 = (int64_t)mem;\n        return 1;\n    }\n    // 0x406e48\n    free(v3);\n    *v3 = 0;\n    return (int32_t)&g56 ^ (int32_t)&g56;\n}\n"
        },
        {
            "funcName": "function_406e60",
            "funcStartAddr": "406e60",
            "funcEndAddr": "406ebb",
            "decompiledFuncCode": "int64_t function_406e60(int32_t a1, int64_t a2) {\n    if ((a1 & 258) != 0) {\n        int64_t v1 = function_40a3c0(31, 0, 0x406760, 0x406740, 0x401bb0); // 0x406e83\n        *(int64_t *)a2 = v1;\n        // 0x406e91\n        return v1 & -256 | (int64_t)(v1 != 0);\n    }\n    int64_t * mem = malloc(32); // 0x406e9d\n    int64_t v2 = (int64_t)mem; // 0x406e9d\n    *(int64_t *)a2 = v2;\n    if (mem == NULL) {\n        // 0x406e91\n        return 0;\n    }\n    // 0x406eaf\n    function_4099f0(v2);\n    return 1;\n}\n"
        },
        {
            "funcName": "function_406ec0",
            "funcStartAddr": "406ec0",
            "funcEndAddr": "406f04",
            "decompiledFuncCode": "int64_t function_406ec0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x2000 * a2 & 0x20000 | 128 * a2 & 0x40000 | 0x90900; // 0x406eda\n    if ((a2 & 512) == 0) {\n        // 0x406ef8\n        return function_409a80(a3, v1, (int32_t)v1);\n    }\n    // 0x406ee8\n    return function_40b410((int64_t)a1, a3, (int32_t)v1, a3);\n}\n"
        },
        {
            "funcName": "function_406f10",
            "funcStartAddr": "406f10",
            "funcEndAddr": "4070d6",
            "decompiledFuncCode": "int64_t function_406f10(int64_t a1, int64_t a2, int64_t a3, int32_t a4) {\n    int64_t v1 = a4;\n    int64_t v2 = a3 & 0xffffffff; // 0x406f1f\n    int32_t * v3 = (int32_t *)(a1 + 72); // 0x406f2c\n    uint32_t v4 = *v3; // 0x406f2c\n    int64_t v5 = v4; // 0x406f2c\n    int32_t v6 = v4 & 4; // 0x406f33\n    int64_t v7; // 0x406f10\n    int64_t v8; // 0x406f10\n    int64_t v9; // 0x406f10\n    int64_t v10; // 0x406f10\n    int64_t v11; // 0x406f10\n    if (a4 == 0) {\n        goto lab_0x406fb0;\n    } else {\n        // 0x406f3b\n        bool v12; // 0x406f10\n        int64_t v13 = v12 ? -1 : 1; // 0x406f48\n        int64_t v14 = (int64_t)\"..\"; // 0x406f10\n        int64_t v15 = v1; // 0x406f10\n        int64_t v16 = 3; // 0x406f48\n        unsigned char v17 = *(char *)v15; // 0x406f48\n        char v18 = *(char *)v14; // 0x406f48\n        char v19 = v18; // 0x406f48\n        bool v20 = false; // 0x406f48\n        while (v17 == v18) {\n            // 0x406f3b\n            v16--;\n            v14 += v13;\n            v15 += v13;\n            v19 = v17;\n            v20 = true;\n            if (v16 == 0) {\n                // break -> \n                break;\n            }\n            v17 = *(char *)v15;\n            v18 = *(char *)v14;\n            v19 = v18;\n            v20 = false;\n        }\n        unsigned char v21 = v19;\n        if ((v17 >= v21 && !v20) != v17 < v21) {\n            goto lab_0x406fb0;\n        } else {\n            if (v6 != 0) {\n                goto lab_0x407020;\n            } else {\n                // 0x406f5b\n                v11 = v2;\n                v7 = v2;\n                v9 = 1;\n                if ((int32_t)a3 >= 0) {\n                    goto lab_0x406fc2;\n                } else {\n                    // 0x406f63\n                    v8 = v5;\n                    v10 = 1;\n                    if ((v5 & 512) == 0) {\n                        goto lab_0x40704e;\n                    } else {\n                        int64_t v22 = a1 + 96; // 0x406f70\n                        int64_t v23 = function_40ada0(v22); // 0x406f7c\n                        v8 = v5;\n                        v10 = v23 & 0xffffffff;\n                        if ((char)v23 != 0) {\n                            goto lab_0x40704e;\n                        } else {\n                            int64_t v24 = function_40adf0(v22); // 0x406f94\n                            if ((int32_t)v24 < 0) {\n                                // 0x407098\n                                v8 = (int64_t)*v3;\n                                v10 = 1;\n                                goto lab_0x40704e;\n                            } else {\n                                // 0x406fa4\n                                v11 = v24 & 0xffffffff;\n                                v7 = v24;\n                                v9 = 1;\n                                goto lab_0x406fc2;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x406fb0:\n    if (v6 != 0) {\n        goto lab_0x407020;\n    } else {\n        // 0x406fb4\n        v11 = v2;\n        v7 = v2;\n        v9 = 0;\n        v8 = v5;\n        v10 = 0;\n        if ((int32_t)a3 < 0) {\n            goto lab_0x40704e;\n        } else {\n            goto lab_0x406fc2;\n        }\n    }\n  lab_0x407020:\n    // 0x407020\n    if ((v5 & 512) == 0) {\n        // 0x40702f\n        return 0;\n    }\n    int32_t fd = a3; // 0x407029\n    if (fd >= 0) {\n        // 0x407088\n        close(fd);\n        // 0x40702f\n        return 0;\n    }\n    // 0x40702f\n    return 0;\n  lab_0x40704e:;\n    int64_t v25 = function_406ec0(*(int32_t *)(a1 + 44), v8, v1); // 0x407058\n    v11 = v2;\n    v7 = v25;\n    v9 = v10;\n    if ((int32_t)v25 < 0) {\n        // 0x40702f\n        return 0xffffffff;\n    }\n    goto lab_0x406fc2;\n  lab_0x406fc2:;\n    int32_t fd2 = v7; // 0x406fc7\n    int64_t v26; // bp-200, 0x406f10\n    uint32_t v27 = __fxstat(1, fd2, (struct stat *)&v26); // 0x406fcf\n    int64_t v28 = 0xffffffff; // 0x406fd8\n    if (v27 != 0) {\n        goto lab_0x407003;\n    } else {\n        // 0x406fda\n        if (*(int64_t *)(a2 + 120) != v26) {\n            goto lab_0x406ff3;\n        } else {\n            // 0x406fe5\n            int64_t v29; // 0x406f10\n            if (*(int64_t *)(a2 + 128) == v29) {\n                // 0x407070\n                if ((*(char *)(a1 + 73) & 2) != 0) {\n                    // 0x4070a8\n                    function_406d20(a1, v7 & 0xffffffff, v9 % 256 ^ 1);\n                    // 0x40702f\n                    return (int64_t)v27 & 0xffffffff;\n                }\n                // 0x407077\n                v28 = fchdir(fd2);\n                goto lab_0x407003;\n            } else {\n                goto lab_0x406ff3;\n            }\n        }\n    }\n  lab_0x407003:\n    // 0x407003\n    if ((int32_t)v11 < 0) {\n        int32_t * v30 = __errno_location(); // 0x407007\n        close(fd2);\n    }\n    // 0x40702f\n    return v28 & 0xffffffff;\n  lab_0x406ff3:\n    // 0x406ff3\n    *__errno_location() = 2;\n    v28 = 0xffffffff;\n    goto lab_0x407003;\n}\n"
        },
        {
            "funcName": "function_4070e0",
            "funcStartAddr": "4070e0",
            "funcEndAddr": "40718f",
            "decompiledFuncCode": "int64_t function_4070e0(int32_t a1, int64_t a2, int64_t a3) {\n    if ((a1 & 258) == 0) {\n        int64_t result = function_409a00(a2, a3 + 120); // 0x407168\n        if ((char)result == 0) {\n            // 0x407151\n            return 1;\n        }\n        // 0x407171\n        *(int64_t *)a3 = a3;\n        *(int16_t *)(a3 + 112) = 2;\n        return result;\n    }\n    int64_t * mem = malloc(24); // 0x4070f7\n    if (mem == NULL) {\n        // 0x407151\n        return 0;\n    }\n    int64_t v1 = (int64_t)mem; // 0x4070f7\n    *(int64_t *)(v1 + 16) = a3;\n    *mem = *(int64_t *)(a3 + 120);\n    *(int64_t *)(v1 + 8) = *(int64_t *)(a3 + 128);\n    int64_t v2 = function_40ab60(a2, v1); // 0x407126\n    if (v2 == v1) {\n        // 0x407151\n        return 1;\n    }\n    // 0x407133\n    free(mem);\n    int64_t result2 = 0; // 0x40713e\n    if (v2 != 0) {\n        // 0x407140\n        *(int16_t *)(a3 + 112) = 2;\n        *(int64_t *)a3 = *(int64_t *)(v2 + 16);\n        result2 = 1;\n    }\n    // 0x407151\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407190",
            "funcStartAddr": "407190",
            "funcEndAddr": "407226",
            "decompiledFuncCode": "int64_t function_407190(int32_t a1, int64_t a2, int64_t a3) {\n    if ((a1 & 258) != 0) {\n        // 0x4071d0\n        free((int64_t *)function_40aba0(a2));\n        return &g56;\n    }\n    int64_t result = *(int64_t *)(a3 + 8); // 0x40719f\n    if (result == 0) {\n        // 0x4071c9\n        return 0;\n    }\n    // 0x4071a8\n    if (*(int64_t *)(result + 88) < 0) {\n        // 0x4071c9\n        return result;\n    }\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40720c\n    int64_t result2 = result; // 0x407210\n    if (*v1 == *(int64_t *)(a3 + 120)) {\n        // 0x407212\n        result2 = *(int64_t *)(result + 128);\n        *v1 = *(int64_t *)(result + 120);\n        *(int64_t *)a2 = result2;\n    }\n    // 0x4071c9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407230",
            "funcStartAddr": "407230",
            "funcEndAddr": "407be3",
            "decompiledFuncCode": "int64_t function_407230(int64_t a1, int64_t a2) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // 0x407244\n    int64_t * dirp2 = (int64_t *)(a1 + 24); // 0x407248\n    int64_t dirp = *dirp2; // 0x407248\n    int64_t v2; // 0x407230\n    int32_t * v3; // 0x407230\n    int64_t v4; // 0x407230\n    int64_t v5; // 0x407230\n    int64_t v6; // 0x407230\n    int64_t v7; // 0x407230\n    int64_t v8; // 0x407230\n    int64_t v9; // 0x407230\n    char v10; // 0x407230\n    int64_t v11; // 0x407230\n    int64_t v12; // 0x407230\n    int64_t v13; // 0x407666\n    int64_t v14; // 0x407230\n    int64_t v15; // 0x4076a5\n    int32_t * v16; // 0x407230\n    int64_t v17; // 0x4076b2\n    int32_t v18; // 0x4076b6\n    if (dirp == 0) {\n        // 0x407620\n        v14 = a1 + 72;\n        v16 = (int32_t *)v14;\n        uint32_t v19 = *v16; // 0x407620\n        uint64_t v20 = (int64_t)v19; // 0x407620\n        v5 = 0;\n        if ((v19 & 16) != 0) {\n            // 0x40762b\n            v5 = 0x20000;\n            if (v20 % 2 != 0) {\n                // 0x407800\n                v5 = 0x20000 * (int64_t)(*(int64_t *)(a1 + 88) != 0);\n            }\n        }\n        int64_t v21 = *(int64_t *)(a1 + 48); // 0x40763f\n        int64_t v22 = 0xffffff9c; // 0x407658\n        if ((v20 & 516) == 512) {\n            // 0x40765a\n            v22 = (int64_t)*(int32_t *)(a1 + 44);\n        }\n        int64_t v23 = 128 * v20 & 0x40000 | v5 & 0xfff60000 | 0x90900; // 0x40765e\n        v13 = function_40b410(v22, v21, (int32_t)v23, v5);\n        int32_t fd = v13; // 0x40766d\n        if (fd < 0) {\n            goto lab_0x4079a2;\n        } else {\n            struct __dirstream * v24 = fdopendir(fd); // 0x407677\n            if (v24 == NULL) {\n                int32_t * v25 = __errno_location(); // 0x40798c\n                close(fd);\n                goto lab_0x4079a2;\n            } else {\n                int16_t * v26 = (int16_t *)(a1 + 112); // 0x407685\n                *dirp2 = (int64_t)v24;\n                if (*v26 == 11) {\n                    // 0x407a3c\n                    *v26 = (int16_t)function_4067c0(a1, a1, 0);\n                    v8 = a1;\n                } else {\n                    int32_t v27 = *v16; // 0x407695\n                    v8 = v21;\n                    if ((v27 & 256) != 0) {\n                        int64_t v28 = a1 + 88; // 0x4079f0\n                        function_407190(v27, v28, a1);\n                        function_4067c0(a1, a1, 0);\n                        int64_t v29 = function_4070e0(*v16, v28, a1); // 0x407a16\n                        v8 = v28;\n                        if ((char)v29 == 0) {\n                            // 0x407a23\n                            *__errno_location() = 12;\n                          lab_0x4077e2:\n                            // 0x4077e2\n                            return 0;\n                        }\n                    }\n                }\n                // 0x4076a5\n                v15 = a1 + 64;\n                v17 = *(int64_t *)v15 == 0 ? 0x186a0 : -1;\n                v18 = v1;\n                if (v18 == 2) {\n                    goto lab_0x4079e0;\n                } else {\n                    // 0x4076c6\n                    if ((*v16 & 56) == 24) {\n                        // 0x407812\n                    } else {\n                        // 0x4076d6\n                        goto lab_0x4076e5;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x40725a\n        if (dirfd((struct __dirstream *)dirp) < 0) {\n            // 0x407abd\n            closedir((struct __dirstream *)*dirp2);\n            *dirp2 = 0;\n            if ((int32_t)v1 != 3) {\n                // 0x4077e2\n                return 0;\n            }\n            goto lab_0x407ad9;\n        } else {\n            int64_t v30 = a1 + 72;\n            int32_t * v31 = (int32_t *)v30;\n            v3 = v31;\n            v2 = v30;\n            v11 = -1;\n            v7 = a2;\n            if (*(int64_t *)(a1 + 64) == 0) {\n                // 0x4079c8\n                v4 = v30;\n                v12 = 0x186a0;\n                v10 = 1;\n                v9 = a2;\n                v6 = (int64_t)*v31;\n                goto lab_0x407284;\n            } else {\n                goto lab_0x40727b;\n            }\n        }\n    }\n  lab_0x407790_2:;\n    // 0x407790\n    int64_t v32; // 0x4073b4\n    free((int64_t *)v32);\n    int64_t v33; // 0x407230\n    function_406b00(v33);\n    closedir((struct __dirstream *)*dirp2);\n    *dirp2 = 0;\n    *(int16_t *)(a1 + 112) = 7;\n    int32_t * v34; // 0x407230\n    *v34 = *v34 | 0x4000;\n    return 0;\n  lab_0x40750c_2:;\n    // 0x40750c\n    int64_t v35; // 0x407230\n    int64_t v36 = v35; // 0x407519\n    int64_t v37; // 0x407230\n    int64_t v38 = v37; // 0x407519\n    int64_t v39; // 0x407230\n    int64_t v40 = v39; // 0x407519\n    char * v41; // 0x407230\n    char * v42 = v41; // 0x407519\n    int64_t v43 = v35; // 0x407519\n    int64_t result2 = v37; // 0x407519\n    int64_t v44 = v39; // 0x407519\n    char v45; // 0x407230\n    if (v45 == 0) {\n        goto lab_0x407861;\n    } else {\n        goto lab_0x40751f;\n    }\n  lab_0x40739c:;\n    // 0x40739c\n    char * str; // 0x407230\n    uint64_t len = (int64_t)strlen(str); // 0x4073a3\n    int64_t v46; // 0x407230\n    v32 = function_406a70(a1, v46, len);\n    if (v32 == 0) {\n        goto lab_0x407790_2;\n    }\n    // 0x4073c5\n    int64_t v47; // 0x407230\n    int64_t v48 = v47; // 0x4073ca\n    char v49; // 0x407230\n    char v50 = v49; // 0x4073ca\n    int64_t v51; // 0x407230\n    int64_t v52 = v51; // 0x4073ca\n    int64_t v53 = a1; // 0x4073ca\n    int64_t v54; // 0x407230\n    int64_t v55; // 0x407230\n    int64_t v56; // 0x4072d2\n    int64_t * v57; // 0x4072d2\n    int64_t v58; // 0x407230\n    int64_t * v59; // 0x407230\n    if (v51 <= len) {\n        char v60 = function_406df0(v58, v56, v55 + 2 + len);\n        if (v60 == 0) {\n            goto lab_0x407790_2;\n        }\n        int64_t v61 = *v59; // 0x407490\n        char v62 = v49; // 0x407499\n        int64_t v63 = v47; // 0x407499\n        if (v61 != *v59) {\n            // 0x40749f\n            v63 = (*v41 & 4) == 0 ? v47 : v61 + v54;\n            v62 = v60;\n        }\n        // 0x4074b3\n        v48 = v63;\n        v50 = v62;\n        v52 = *v57 - v54;\n        v53 = v58;\n    }\n    uint64_t v64 = v54 + len; // 0x4073d3\n    int32_t * v65; // 0x40736a\n    if (v64 < len) {\n        // 0x407b90\n        free((int64_t *)v32);\n        function_406b00(v33);\n        closedir((struct __dirstream *)*dirp2);\n        *dirp2 = 0;\n        *(int16_t *)(a1 + 112) = 7;\n        *v34 = *v34 | 0x4000;\n        *v65 = 36;\n        goto lab_0x4077e2;\n    }\n    int64_t v66 = v52;\n    v45 = v50;\n    v35 = v48;\n    int64_t v67 = v32 + 264; // 0x4073e3\n    int64_t * v68; // 0x4072e7\n    *(int64_t *)(v32 + 88) = *v68 + 1;\n    *(int64_t *)(v32 + 72) = v64;\n    *(int64_t *)(v32 + 8) = v53;\n    struct dirent * v69; // 0x40737b\n    *(int64_t *)(v32 + 128) = *(int64_t *)v69;\n    int32_t v70 = *v34; // 0x407403\n    int32_t v71; // 0x407230\n    if ((v70 & 4) != 0) {\n        // 0x4074d0\n        *(int64_t *)(v32 + 48) = *(int64_t *)(v32 + 56);\n        int64_t v72 = *(int64_t *)(v32 + 96); // 0x4074dd\n        memmove((int64_t *)v35, (int64_t *)v67, (int32_t)v72 + 1);\n        v71 = *v34;\n    } else {\n        // 0x40740e\n        *(int64_t *)(v32 + 48) = v67;\n        v71 = v70;\n    }\n    int64_t v73 = v71;\n    int64_t v74; // 0x407230\n    int64_t v75; // 0x407230\n    int64_t v76; // 0x407230\n    int64_t v77; // 0x407230\n    int64_t v78; // 0x40742c\n    int64_t v79; // 0x40742c\n    int64_t v80; // 0x407230\n    int64_t v81; // 0x40737b\n    if (*(int64_t *)v80 != 0 == (v73 & 1024) == 0) {\n        // 0x4075f8\n        *(int16_t *)(v32 + 112) = (int16_t)function_4067c0(a1, v32, 0);\n        v76 = v32;\n        goto lab_0x407327;\n    } else {\n        unsigned char v82 = *(char *)(v81 + 18); // 0x407422\n        int64_t v83 = v82; // 0x40742a\n        v78 = v83 + 0xffffffff;\n        v79 = v78 & 0xffffffff;\n        v77 = v83;\n        if ((v73 & 24) == 24) {\n            unsigned char v84 = v82 & -5;\n            v77 = 0;\n            if (v84 == 0) {\n                goto lab_0x407438;\n            } else {\n                int64_t v85 = v84; // 0x4075c0\n                *(int16_t *)(v32 + 112) = 11;\n                if ((int32_t)v78 < 12) {\n                    int32_t v86 = *(int32_t *)(4 * v79 + (int64_t)&g8); // 0x407778\n                    *(int32_t *)(v32 + 144) = v86;\n                    v74 = 1;\n                    v75 = v85;\n                } else {\n                    // 0x4075df\n                    *(int32_t *)(v32 + 144) = 0;\n                    v74 = 1;\n                    v75 = v85;\n                }\n                goto lab_0x407320;\n            }\n        } else {\n            goto lab_0x407438;\n        }\n    }\n  lab_0x407327:;\n    int64_t v87 = v76;\n    *(int64_t *)(v32 + 16) = 0;\n    int64_t v88; // 0x407230\n    v39 = v88 + 1;\n    int64_t v89; // 0x407230\n    int64_t v90; // 0x407230\n    int64_t v91; // 0x407230\n    int64_t v92; // 0x407230\n    int64_t v93; // 0x407230\n    int64_t v94; // 0x407230\n    char v95; // 0x407230\n    int64_t v96; // 0x407230\n    if (v33 == 0) {\n        // 0x4074f8\n        v96 = v35;\n        v95 = v45;\n        v92 = v66;\n        v93 = v32;\n        v90 = v39;\n        v91 = v87;\n        v89 = v32;\n        v37 = v32;\n        if (v39 >= v12) {\n            goto lab_0x40750c_2;\n        }\n    } else {\n        // 0x40733b\n        *(int64_t *)(v94 + 16) = v32;\n        v96 = v35;\n        v95 = v45;\n        v92 = v66;\n        v93 = v33;\n        v90 = v39;\n        v91 = v87;\n        v89 = v32;\n        v37 = v33;\n        if (v39 >= v12) {\n            goto lab_0x40750c_2;\n        }\n    }\n    goto lab_0x407353;\n  lab_0x407438:\n    // 0x407438\n    *(int16_t *)(v32 + 112) = 11;\n    if ((int32_t)v78 < 12) {\n        int32_t v166 = *(int32_t *)(4 * v79 + (int64_t)&g8); // 0x40744b\n        *(int32_t *)(v32 + 144) = v166;\n        v74 = 2;\n        int64_t v167; // 0x407230\n        v75 = v167;\n    } else {\n        // 0x407310\n        *(int32_t *)(v32 + 144) = 0;\n        v74 = 2;\n        v75 = v77;\n    }\n    goto lab_0x407320;\n  lab_0x407353:;\n    int64_t v97 = *dirp2; // 0x40735d\n    int64_t dirp3 = v97; // 0x407364\n    int64_t v98 = v91; // 0x407364\n    int64_t v99 = v90; // 0x407364\n    int64_t v100 = v93; // 0x407364\n    int64_t v101 = v89; // 0x407364\n    int64_t v102 = v92; // 0x407364\n    char v103 = v95; // 0x407364\n    int64_t v104 = v96; // 0x407364\n    int64_t v105 = v96; // 0x407364\n    char v106 = v95; // 0x407364\n    int64_t v107 = v93; // 0x407364\n    int64_t v108 = v90; // 0x407364\n    if (v97 == 0) {\n        goto lab_0x407856;\n    }\n    goto lab_0x40736a;\n  lab_0x407320:\n    // 0x407320\n    *(int64_t *)(v32 + 168) = v74;\n    v76 = v75;\n    goto lab_0x407327;\n  lab_0x4079a2:\n    // 0x4079a2\n    *dirp2 = 0;\n    if ((int32_t)v1 != 3) {\n        // 0x4077e2\n        return 0;\n    }\n    goto lab_0x407ad9;\n  lab_0x407ad9:\n    // 0x407ad9\n    *(int16_t *)(a1 + 112) = 4;\n    *(int32_t *)(a1 + 64) = *__errno_location();\n    // 0x4077e2\n    return 0;\n  lab_0x40727b:\n    // 0x40727b\n    v4 = v2;\n    v12 = v11;\n    v10 = 1;\n    v9 = v7;\n    v6 = (int64_t)*v3;\n    goto lab_0x407284;\n  lab_0x4079e0:\n    // 0x4079e0\n    v4 = v14;\n    v12 = v17;\n    v10 = 0;\n    v9 = v8;\n    v6 = (int64_t)*v16;\n    goto lab_0x407284;\n  lab_0x407284:;\n    int64_t v111 = *(int64_t *)v4; // 0x407284\n    char v112 = *(char *)(v111 - 1 + *(int64_t *)(a1 + 56)); // 0x40729a\n    v55 = v111 + (int64_t)(v112 == 47);\n    int64_t v113 = 0; // 0x4072bb\n    if ((v6 & 4) != 0) {\n        int64_t v114 = *(int64_t *)(a1 + 32) + v55; // 0x4072c2\n        *(char *)v114 = 47;\n        v113 = v114 + 1;\n    }\n    // 0x4072d2\n    v54 = v111 + (int64_t)(v112 != 47);\n    v56 = a1 + 48;\n    v57 = (int64_t *)v56;\n    v68 = (int64_t *)(a1 + 88);\n    int64_t v115 = *dirp2; // 0x40735d\n    if (v115 == 0) {\n        // 0x4072d2\n        v42 = (char *)v4;\n        v43 = v113;\n        result2 = 0;\n        v44 = 0;\n        goto lab_0x407861;\n    } else {\n        // 0x40736a\n        v41 = (char *)v4;\n        v58 = a1 + 32;\n        v59 = (int64_t *)v58;\n        v34 = (int32_t *)v4;\n        v80 = a1 + 64;\n        dirp3 = v115;\n        v98 = v9;\n        v99 = 0;\n        v100 = 0;\n        v101 = 0;\n        v102 = *v57 - v54;\n        v103 = 0;\n        v104 = v113;\n        while (true) {\n          lab_0x40736a:\n            // 0x40736a\n            v47 = v104;\n            v49 = v103;\n            v33 = v100;\n            v88 = v99;\n            int64_t v109 = v98;\n            v65 = __errno_location();\n            *v65 = 0;\n            v69 = readdir((struct __dirstream *)dirp3);\n            if (v69 == NULL) {\n                // break -> 0x407940\n                break;\n            }\n            // 0x40738c\n            v51 = v102;\n            v94 = v101;\n            v81 = (int64_t)v69;\n            v46 = v81 + 19;\n            str = (char *)v46;\n            if ((*v41 & 32) != 0) {\n                goto lab_0x40739c;\n            } else {\n                // 0x407392\n                if (*str == 46) {\n                    int64_t v110 = v81 + 20; // 0x4075a0\n                    v96 = v47;\n                    v95 = v49;\n                    v92 = v51;\n                    v93 = v33;\n                    v90 = v88;\n                    v91 = v109;\n                    v89 = v94;\n                    if (*(char *)v110 == 0) {\n                        goto lab_0x407353;\n                    } else {\n                        // 0x4075a6\n                        v96 = v47;\n                        v95 = v49;\n                        v92 = v51;\n                        v93 = v33;\n                        v90 = v88;\n                        v91 = v109;\n                        v89 = v94;\n                        if (*(int16_t *)v110 != 46) {\n                            goto lab_0x40739c;\n                        } else {\n                            goto lab_0x407353;\n                        }\n                    }\n                } else {\n                    goto lab_0x40739c;\n                }\n            }\n        }\n        int32_t v116 = *v65; // 0x407940\n        if (v116 != 0) {\n            // 0x407950\n            *(int32_t *)v80 = v116;\n            *(int16_t *)(a1 + 112) = (v88 | dirp) == 0 ? 4 : 7;\n        }\n        int64_t dirp4 = *dirp2; // 0x40796d\n        v105 = v47;\n        v106 = v49;\n        v107 = v33;\n        v108 = v88;\n        if (dirp4 != 0) {\n            // 0x40797a\n            closedir((struct __dirstream *)dirp4);\n            *dirp2 = 0;\n            v105 = v47;\n            v106 = v49;\n            v107 = v33;\n            v108 = v88;\n        }\n      lab_0x407856:\n        // 0x407856\n        v36 = v105;\n        v38 = v107;\n        v40 = v108;\n        v42 = v41;\n        v43 = v105;\n        result2 = v107;\n        v44 = v108;\n        if (v106 != 0) {\n            goto lab_0x40751f;\n        } else {\n            goto lab_0x407861;\n        }\n    }\n  lab_0x4076e5:;\n    int64_t v117 = v13 & 0xffffffff; // 0x40766b\n    int64_t v118 = v18 == 3;\n    char v119 = 1;\n    int64_t v120 = v117; // 0x4076ea\n    int16_t * v121; // 0x407230\n    int16_t v122; // 0x407230\n    int64_t v123; // 0x407230\n    int64_t v124; // 0x407230\n    int64_t v125; // 0x407230\n    int64_t v126; // 0x407230\n    int64_t v127; // 0x407230\n    if ((*(char *)(a1 + 73) & 2) != 0) {\n        int64_t v128 = function_40b8b0(v117, 1030, 3, v5); // 0x407a61\n        int64_t v129 = v128 & 0xffffffff; // 0x407a66\n        v120 = v129;\n        if ((int32_t)v128 >= 0) {\n            goto lab_0x4076f0;\n        } else {\n            int16_t * v130 = (int16_t *)(a1 + 114);\n            int64_t dirp5 = *dirp2; // 0x407a75\n            int16_t v131 = *v130 | 1;\n            v121 = v130;\n            v123 = v129;\n            v122 = v131;\n            v126 = 1030;\n            v124 = dirp5;\n            if (v119 != 0 == (v118 != 0)) {\n                goto lab_0x40771d;\n            } else {\n                // 0x407a8a\n                *v130 = v131;\n                closedir((struct __dirstream *)dirp5);\n                v127 = 1030;\n                v125 = (int64_t)*v16;\n                goto lab_0x40775f;\n            }\n        }\n    } else {\n        goto lab_0x4076f0;\n    }\n  lab_0x407861:\n    // 0x407861\n    if ((*v42 & 4) != 0) {\n        int64_t v132 = *v57; // 0x40786d\n        *(char *)(v43 + (int64_t)(v44 == 0 | v132 == v54)) = 0;\n    }\n    // 0x407886\n    if (dirp != 0 || v10 == 0) {\n        goto lab_0x4078f8;\n    } else {\n        // 0x407895\n        if ((int32_t)v1 == 1 || v44 == 0) {\n            // 0x4078d8\n            int64_t v133; // 0x407230\n            if (*v68 != 0) {\n                int64_t v134 = function_406f10(a1, *(int64_t *)(a1 + 8), 0xffffffff, (int32_t)\"..\"); // 0x407aae\n                v133 = v134;\n            } else {\n                // 0x4078e3\n                v133 = function_406d90(a1);\n            }\n            // 0x4078f0\n            if ((int32_t)v133 != 0) {\n                // 0x407af4\n                *(int16_t *)(a1 + 112) = 7;\n                int32_t * v135 = (int32_t *)v4; // 0x407b03\n                *v135 = *v135 | 0x4000;\n                function_406b00(result2);\n                // 0x4077e2\n                return 0;\n            }\n            goto lab_0x4078f8;\n        } else {\n            goto lab_0x4078a1;\n        }\n    }\n  lab_0x40751f:;\n    int64_t v136 = *(int64_t *)(a1 + 8); // 0x40751f\n    int64_t v137 = *v59; // 0x407523\n    if (v136 != 0) {\n        int64_t * v138 = (int64_t *)(v136 + 48); // 0x407530\n        int64_t v139 = *v138; // 0x407530\n        int64_t * v140 = (int64_t *)(v136 + 56);\n        if (v139 != v136 + 264) {\n            // 0x407540\n            *v138 = v139 + v137 - *v140;\n        }\n        // 0x40754b\n        *v140 = v137;\n        int64_t v141 = *(int64_t *)(v136 + 16); // 0x40754f\n        int64_t v142 = v141; // 0x407556\n        while (v141 != 0) {\n            // 0x407530\n            v138 = (int64_t *)(v142 + 48);\n            v139 = *v138;\n            v140 = (int64_t *)(v142 + 56);\n            if (v139 != v142 + 264) {\n                // 0x407540\n                *v138 = v139 + v137 - *v140;\n            }\n            // 0x40754b\n            *v140 = v137;\n            v141 = *(int64_t *)(v142 + 16);\n            v142 = v141;\n        }\n    }\n    // 0x407558\n    v42 = v41;\n    v43 = v36;\n    result2 = v38;\n    v44 = v40;\n    if (*(int64_t *)(v38 + 88) >= 0) {\n        int64_t * v143 = (int64_t *)(v38 + 48); // 0x40756e\n        int64_t v144 = *v143; // 0x40756e\n        int64_t * v145 = (int64_t *)(v38 + 56);\n        if (v144 != v38 + 264) {\n            // 0x40757e\n            *v143 = v144 + v137 - *v145;\n        }\n        int64_t v146 = *(int64_t *)(v38 + 16); // 0x407589\n        *v145 = v137;\n        int64_t v147 = v146; // 0x407594\n        if (v146 == 0) {\n            // 0x407596\n            v147 = *(int64_t *)(v38 + 8);\n        }\n        // 0x407560\n        v42 = v41;\n        v43 = v36;\n        result2 = v38;\n        v44 = v40;\n        while (*(int64_t *)(v147 + 88) >= 0) {\n            int64_t v148 = v147;\n            v143 = (int64_t *)(v148 + 48);\n            v144 = *v143;\n            v145 = (int64_t *)(v148 + 56);\n            if (v144 != v148 + 264) {\n                // 0x40757e\n                *v143 = v144 + v137 - *v145;\n            }\n            // 0x407589\n            v146 = *(int64_t *)(v148 + 16);\n            *v145 = v137;\n            v147 = v146;\n            if (v146 == 0) {\n                // 0x407596\n                v147 = *(int64_t *)(v148 + 8);\n            }\n            // 0x407560\n            v42 = v41;\n            v43 = v36;\n            result2 = v38;\n            v44 = v40;\n        }\n    }\n    goto lab_0x407861;\n  lab_0x4076f0:;\n    int64_t v149 = function_406f10(a1, a1, v120, 0); // 0x4076fa\n    v3 = v16;\n    v2 = v14;\n    v11 = v17;\n    v7 = a1;\n    int16_t * v150; // 0x407230\n    int16_t v151; // 0x407230\n    int64_t v152; // 0x407230\n    int64_t dirp6; // 0x407230\n    int64_t v153; // 0x407230\n    if ((int32_t)v149 == 0) {\n        goto lab_0x40727b;\n    } else {\n        int16_t * v154 = (int16_t *)(a1 + 114);\n        int64_t v155 = *dirp2; // 0x40770c\n        int16_t v156 = *v154 | 1;\n        v121 = v154;\n        v123 = v120;\n        v122 = v156;\n        v126 = a1;\n        v124 = v155;\n        v150 = v154;\n        v152 = v120;\n        v151 = v156;\n        v153 = a1;\n        dirp6 = v155;\n        if (v119 == 0 || v118 == 0) {\n            goto lab_0x407732;\n        } else {\n            goto lab_0x40771d;\n        }\n    }\n  lab_0x4078f8:\n    // 0x4078f8\n    if (v44 == 0) {\n        if ((int32_t)v1 != 3) {\n            // 0x407908\n            function_406b00(result2);\n            // 0x4077e2\n            return 0;\n        }\n        int16_t * v157 = (int16_t *)(a1 + 112); // 0x407b68\n        switch (*v157) {\n            case 4: {\n            }\n            case 7: {\n                // 0x407908\n                function_406b00(result2);\n                // 0x4077e2\n                return 0;\n            }\n        }\n        // 0x407b81\n        *v157 = 6;\n        // 0x407908\n        function_406b00(result2);\n        // 0x4077e2\n        return 0;\n    }\n    goto lab_0x4078a1;\n  lab_0x4078a1:;\n    int64_t * v158 = (int64_t *)(a1 + 64); // 0x4078a1\n    int64_t v159 = *v158; // 0x4078a1\n    int64_t v160 = v159; // 0x4078ac\n    if (v44 >= 0x2711) {\n        if (v159 != 0) {\n            // 0x4078b7\n            uint64_t v161; // 0x407230\n            int64_t v162; // 0x407230\n            return function_406970(a1, v162, v161);\n        }\n        // 0x407b1e\n        int64_t v163; // 0x407230\n        switch (function_406b90(a1, v163)) {\n            case 0x1021994: {\n            }\n            case 0x6969: {\n                // 0x407920\n                v160 = *v158;\n                // break -> 0x407928\n                break;\n            }\n            default: {\n                // 0x407b3e\n                *v158 = 0x406790;\n                int64_t result = function_406970(a1, result2, v44); // 0x407b51\n                *v158 = 0;\n                // 0x4077e2\n                return result;\n            }\n        }\n    }\n    // 0x407928\n    if (v44 == 1 || v160 == 0) {\n        // 0x4077e2\n        return result2;\n    }\n    // 0x4078b7\n    return function_406970(a1, result2, v44);\n  lab_0x40771d:\n    // 0x40771d\n    *(int32_t *)v15 = *__errno_location();\n    v150 = v121;\n    v152 = v123;\n    v151 = v122;\n    v153 = v126;\n    dirp6 = v124;\n    goto lab_0x407732;\n  lab_0x407732:\n    // 0x407732\n    *v150 = v151;\n    closedir((struct __dirstream *)dirp6);\n    uint32_t v164 = *v16; // 0x40773c\n    int64_t v165 = v164; // 0x40773c\n    *dirp2 = 0;\n    v127 = v153;\n    v125 = v165;\n    if ((v164 & 512) != 0) {\n        uint32_t fd2 = (int32_t)v152; // 0x407750\n        v127 = v153;\n        v125 = v165;\n        if (fd2 >= 0) {\n            // 0x407754\n            close(fd2);\n            v127 = v153;\n            v125 = (int64_t)*v16;\n        }\n    }\n    goto lab_0x40775f;\n  lab_0x40775f:\n    // 0x40775f\n    *dirp2 = 0;\n    v4 = v14;\n    v12 = v17;\n    v10 = 0;\n    v9 = v127;\n    v6 = v125;\n    goto lab_0x407284;\n}\n"
        },
        {
            "funcName": "fts_open",
            "funcStartAddr": "407bf0",
            "funcEndAddr": "407f89",
            "decompiledFuncCode": "int64_t fts_open(int64_t a1, uint32_t a2, int64_t a3) {\n    int64_t v1 = a2;\n    if ((v1 & 18) == 0 || a2 >= 0x2000 || (v1 & 516) == 516) {\n        // 0x407e90\n        *__errno_location() = 22;\n        // 0x407e7d\n        return 0;\n    }\n    int64_t * mem = calloc(128, 1); // 0x407c38\n    int64_t result = (int64_t)mem; // 0x407c38\n    if (mem == NULL) {\n        // 0x407e7d\n        return result;\n    }\n    // 0x407c49\n    *(int64_t *)(result + 64) = a3;\n    if ((v1 & 2) != 0) {\n        // 0x407ed0\n        *(int32_t *)(result + 72) = a2 & -517 | 4;\n    } else {\n        // 0x407c57\n        *(int32_t *)(result + 72) = a2;\n    }\n    int32_t * v2 = (int32_t *)(result + 44); // 0x407c5e\n    *v2 = -100;\n    int64_t v3 = a1; // 0x407c74\n    uint64_t v4 = 0;\n    uint64_t len = (int64_t)strlen((char *)128); // 0x407c78\n    int64_t v5 = v4 < len ? len : v4; // 0x407c80\n    v3 += 8;\n    int64_t str = *(int64_t *)v3; // 0x407c88\n    while (str != 0) {\n        // 0x407c78\n        v4 = v5;\n        len = (int64_t)strlen((char *)str);\n        v5 = v4 < len ? len : v4;\n        v3 += 8;\n        str = *(int64_t *)v3;\n    }\n    uint64_t v6 = v5 + 1; // 0x407c90\n    int64_t v7 = result + 32; // 0x407ca9\n    char v8 = function_406df0(v7, result + 48, v6 > 0x1000 ? v6 : 0x1000); // 0x407cb2\n    if (v8 == 0) {\n        // 0x407ebb\n        free(mem);\n        // 0x407e7d\n        return 0;\n    }\n    int64_t v9; // 0x407bf0\n    int64_t v10; // 0x407bf0\n    int64_t v11; // 0x407bf0\n    char v12; // 0x407bf0\n    char * v13; // 0x407bf0\n    char * v14; // 0x407cdd\n    if (v7 == 0) {\n        // 0x407ee0\n        v14 = NULL;\n        v10 = 0;\n        v13 = NULL;\n        v9 = 0;\n        if (a3 != 0) {\n            goto lab_0x407d03;\n        } else {\n            goto lab_0x407e2c;\n        }\n    } else {\n        int64_t v15 = function_406a70(result, (int64_t)&g10, 0); // 0x407cd5\n        if (v15 == 0) {\n            goto lab_0x407eb2;\n        } else {\n            // 0x407ceb\n            v14 = (char *)v15;\n            *(int64_t *)(v15 + 88) = -1;\n            *(int64_t *)(v15 + 104) = -1;\n            v10 = result;\n            v12 = v8;\n            v11 = result;\n            if (a3 == 0) {\n                goto lab_0x407d10;\n            } else {\n                goto lab_0x407d03;\n            }\n        }\n    }\n  lab_0x407da8:;\n    // 0x407da8\n    int64_t v16; // 0x407bf0\n    int64_t v17; // 0x407d49\n    *(int64_t *)(v17 + 16) = v16;\n    int64_t v18; // 0x407bf0\n    int64_t v19 = v18; // 0x407dac\n    int64_t v20 = v17; // 0x407dac\n    goto lab_0x407daf;\n  lab_0x407daf:;\n    int64_t v21 = v20;\n    int64_t v22; // 0x407bf0\n    int64_t v23 = v22 + 1; // 0x407daf\n    int64_t v24 = *(int64_t *)(8 * v23 + a1); // 0x407db3\n    int64_t v25 = v19; // 0x407dbb\n    int64_t v26 = v23; // 0x407dbb\n    int64_t v27 = v21; // 0x407dbb\n    int64_t v28 = v24; // 0x407dbb\n    if (v24 == 0) {\n        // 0x407e10\n        v13 = v14;\n        v9 = v21;\n        if (a3 == 0 || v23 < 2) {\n            goto lab_0x407e2c;\n        } else {\n            // 0x407e1b\n            v13 = v14;\n            v9 = function_406970(result, v21, v23);\n            goto lab_0x407e2c;\n        }\n    }\n    goto lab_0x407dbd;\n  lab_0x407f40:\n    // 0x407f40\n    *(int64_t *)(v18 + 16) = v17;\n    v19 = v17;\n    v20 = v16;\n    goto lab_0x407daf;\n  lab_0x407d03:\n    // 0x407d03\n    v12 = (char)(*(int32_t *)(result + 72) / 1024) % 2;\n    v11 = v10;\n    goto lab_0x407d10;\n  lab_0x407e2c:;\n    int64_t v35 = function_406a70(result, (int64_t)&g10, 0); // 0x407e36\n    *mem = v35;\n    char * v33 = v13; // 0x407e41\n    int64_t v34 = v9; // 0x407e41\n    if (v35 != 0) {\n        // 0x407e43\n        *(int64_t *)(v35 + 16) = v9;\n        int32_t * v36 = (int32_t *)(result + 72); // 0x407e4c\n        *(int16_t *)(v35 + 112) = 9;\n        v33 = v13;\n        v34 = v9;\n        if ((char)function_406e60(*v36, result + 88) != 0) {\n            uint32_t v37 = *v36; // 0x407e60\n            if ((v37 & 516) == 0) {\n                int32_t v38 = function_406ec0(*v2, (int64_t)v37, (int64_t)\".\"); // 0x407f75\n                *(int32_t *)(result + 40) = v38;\n                if (v38 < 0) {\n                    int32_t v39 = *v36; // 0x407f80\n                    *v36 = v39 | 4;\n                }\n            }\n            // 0x407e6f\n            function_40ad80(result + 96, 0xffffffff);\n            // 0x407e7d\n            return result;\n        }\n    }\n    goto lab_0x407ea0;\n  lab_0x407eb2:\n    // 0x407eb2\n    free((int64_t *)*(int64_t *)v7);\n    // 0x407ebb\n    free(mem);\n    // 0x407e7d\n    return 0;\n  lab_0x407d10:\n    // 0x407d10\n    v13 = v14;\n    v9 = 0;\n    if (v11 == 0) {\n        goto lab_0x407e2c;\n    } else {\n        // 0x407dbd\n        v25 = 0;\n        v26 = 0;\n        v27 = 0;\n        v28 = v11;\n        while (true) {\n          lab_0x407dbd:;\n            int64_t str2 = v28;\n            v16 = v27;\n            v22 = v26;\n            v18 = v25;\n            int32_t len2 = strlen((char *)str2); // 0x407dc0\n            int64_t v29 = len2; // 0x407dc0\n            int64_t v30 = v29; // 0x407dc9\n            if ((v1 & 0x1000) == 0 && len2 >= 3) {\n                // 0x407dda\n                v30 = v29;\n                if (*(char *)(str2 - 1 + v29) == 47) {\n                    int64_t v31 = v29;\n                    v30 = v31;\n                    while (*(char *)(str2 - 2 + v31) == 47) {\n                        int64_t v32 = v31 - 1; // 0x407dfc\n                        v30 = v32;\n                        if (v31 == 2) {\n                            // break -> 0x407d40\n                            break;\n                        }\n                        v31 = v32;\n                        v30 = v31;\n                    }\n                }\n            }\n            // 0x407d40\n            v17 = function_406a70(result, str2, v30);\n            v33 = v14;\n            v34 = v16;\n            if (v17 == 0) {\n                // break -> 0x407ea0\n                break;\n            }\n            // 0x407d5a\n            *(int64_t *)(v17 + 88) = 0;\n            *(int64_t *)(v17 + 8) = (int64_t)v14;\n            *(int64_t *)(v17 + 48) = v17 + 264;\n            if (v12 == 0 || v16 == 0) {\n                // 0x407f00\n                *(int16_t *)(v17 + 112) = (int16_t)function_4067c0(result, v17, 0);\n                if (a3 != 0) {\n                    goto lab_0x407da8;\n                } else {\n                    // 0x407f1b\n                    *(int64_t *)(v17 + 16) = 0;\n                    v19 = v17;\n                    v20 = v17;\n                    if (v16 != 0) {\n                        goto lab_0x407f40;\n                    } else {\n                        goto lab_0x407daf;\n                    }\n                }\n            } else {\n                // 0x407d8a\n                *(int64_t *)(v17 + 168) = 2;\n                *(int16_t *)(v17 + 112) = 11;\n                if (a3 == 0) {\n                    // 0x407f38\n                    *(int64_t *)(v17 + 16) = 0;\n                    goto lab_0x407f40;\n                } else {\n                    goto lab_0x407da8;\n                }\n            }\n        }\n        goto lab_0x407ea0;\n    }\n  lab_0x407ea0:\n    // 0x407ea0\n    function_406b00(v34);\n    free((int64_t *)v33);\n    goto lab_0x407eb2;\n}\n"
        },
        {
            "funcName": "fts_close",
            "funcStartAddr": "407f90",
            "funcEndAddr": "408109",
            "decompiledFuncCode": "int64_t fts_close(int64_t a1) {\n    if (a1 != 0) {\n        int64_t v1 = a1; // 0x407fa4\n        int64_t v2 = a1; // 0x407fa4\n        if (*(int64_t *)(a1 + 88) >= 0) {\n            while (true) {\n                int64_t v3 = v1;\n                int64_t v4 = *(int64_t *)(v3 + 16); // 0x407fbf\n                int64_t v5; // 0x407f90\n                if (v4 != 0) {\n                    // 0x407fb0\n                    free((int64_t *)v3);\n                    v5 = v4;\n                    v2 = v4;\n                    if (*(int64_t *)(v4 + 88) < 0) {\n                        // break -> 0x407fdb\n                        break;\n                    }\n                } else {\n                    int64_t v6 = *(int64_t *)(v3 + 8); // 0x407fc8\n                    free((int64_t *)v3);\n                    v5 = v6;\n                    v2 = v6;\n                    if (*(int64_t *)(v6 + 88) < 0) {\n                        // break -> 0x407fdb\n                        break;\n                    }\n                }\n                // 0x407fbf\n                v1 = v5;\n            }\n        }\n        // 0x407fdb\n        free((int64_t *)v2);\n    }\n    int64_t v7 = *(int64_t *)(a1 + 8); // 0x407fe3\n    if (v7 != 0) {\n        // 0x407fec\n        function_406b00(v7);\n    }\n    // 0x407ff1\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    free((int64_t *)*(int64_t *)(a1 + 32));\n    int32_t * v8 = (int32_t *)(a1 + 72); // 0x408003\n    int32_t v9 = *v8; // 0x408003\n    int32_t * v10; // 0x407f90\n    int32_t v11; // 0x407f90\n    if ((v9 & 512) == 0) {\n        // 0x408060\n        v11 = 0;\n        if ((v9 & 4) != 0) {\n            goto lab_0x408014;\n        } else {\n            int32_t * fd = (int32_t *)(a1 + 40); // 0x408064\n            if (fchdir(*fd) != 0) {\n                int32_t * v12 = __errno_location(); // 0x4080c0\n                int32_t v13 = *v12; // 0x4080cb\n                v11 = v13;\n                v10 = v12;\n                if (close(*fd) == 0 || v13 != 0) {\n                    goto lab_0x408014;\n                } else {\n                    goto lab_0x4080e2;\n                }\n            } else {\n                // 0x408070\n                v11 = 0;\n                if (close(*fd) == 0) {\n                    goto lab_0x408014;\n                } else {\n                    // 0x40807c\n                    v10 = __errno_location();\n                    goto lab_0x4080e2;\n                }\n            }\n        }\n    } else {\n        int32_t fd2 = *(int32_t *)(a1 + 44); // 0x40800b\n        v11 = 0;\n        if (fd2 >= 0) {\n            // 0x408090\n            v11 = 0;\n            if (close(fd2) != 0) {\n                // 0x40809d\n                v11 = *__errno_location();\n            }\n        }\n        goto lab_0x408014;\n    }\n  lab_0x408014:\n    // 0x408014\n    function_406b50(a1 + 96);\n    int64_t v14 = *(int64_t *)(a1 + 80); // 0x40801d\n    if (v14 != 0) {\n        // 0x408026\n        function_40a600(v14);\n    }\n    int64_t v15 = *(int64_t *)(a1 + 88); // 0x40802b\n    if ((*v8 & 258) == 0) {\n        // 0x4080b0\n        free((int64_t *)v15);\n    } else {\n        if (v15 != 0) {\n            // 0x40803d\n            function_40a600(v15);\n        }\n    }\n    // 0x408042\n    free((int64_t *)a1);\n    int64_t result = v11; // 0x40804c\n    if (v11 != 0) {\n        // 0x4080f8\n        *__errno_location() = v11;\n        result = 0xffffffff;\n    }\n    // 0x408052\n    return result;\n  lab_0x4080e2:\n    // 0x4080e2\n    v11 = *v10;\n    goto lab_0x408014;\n}\n"
        },
        {
            "funcName": "fts_read",
            "funcStartAddr": "408110",
            "funcEndAddr": "408869",
            "decompiledFuncCode": "int64_t fts_read(int64_t result) {\n    // 0x408110\n    if (result == 0) {\n        // 0x40823a\n        return 0;\n    }\n    int32_t * v1 = (int32_t *)(result + 72); // 0x408124\n    uint32_t v2 = *v1; // 0x408124\n    if ((v2 & 0x4000) != 0) {\n        // 0x40823a\n        return 0;\n    }\n    int16_t * v3 = (int16_t *)(result + 116); // 0x408130\n    int16_t v4 = *v3; // 0x408130\n    *v3 = 3;\n    if (v4 == 1) {\n        // 0x408500\n        *(int16_t *)(result + 112) = (int16_t)function_4067c0(result, result, 0);\n        // 0x40823a\n        return result;\n    }\n    int16_t * v5 = (int16_t *)(result + 112); // 0x40814a\n    int16_t v6 = *v5; // 0x40814a\n    int64_t v7; // 0x408110\n    int64_t v8; // 0x408110\n    int64_t v9; // 0x408110\n    int64_t v10; // 0x408110\n    int64_t v11; // 0x408110\n    int64_t v12; // 0x408110\n    int64_t v13; // 0x408110\n    if (v4 == 2) {\n        if ((v6 || 1) == 13) {\n            int16_t v14 = function_4067c0(result, result, 1); // 0x4084aa\n            *v5 = v14;\n            if (v14 == 1) {\n                uint32_t v15 = *v1; // 0x408790\n                if ((v15 & 4) == 0) {\n                    int64_t v16 = v15; // 0x408790\n                    int32_t v17 = *(int32_t *)(result + 44); // 0x408803\n                    int32_t v18 = function_406ec0(v17, v16, (int64_t)\".\"); // 0x408812\n                    *(int32_t *)(result + 68) = v18;\n                    if (v18 < 0) {\n                        int32_t v19 = *__errno_location(); // 0x40883e\n                        *v5 = 7;\n                        *(int32_t *)(result + 64) = v19;\n                        *(int64_t *)result = result;\n                        // 0x40823a\n                        return result;\n                    }\n                    int16_t * v20 = (int16_t *)(result + 114); // 0x408819\n                    *v20 = *v20 | 2;\n                    v7 = result;\n                    v10 = (int64_t)\".\";\n                    v12 = v16;\n                    goto lab_0x408447;\n                } else {\n                    // 0x40879b\n                    *(int64_t *)result = result;\n                    v8 = result;\n                    goto lab_0x40845e;\n                }\n            } else {\n                // 0x4084b8\n                *(int64_t *)result = result;\n                v11 = 1;\n                v9 = result;\n                v13 = result;\n                if (v14 != 11) {\n                    // 0x40823a\n                    return result;\n                }\n                goto lab_0x4084d0;\n            }\n        } else {\n            if (v6 != 1) {\n                goto lab_0x408190;\n            } else {\n                goto lab_0x408267;\n            }\n        }\n    } else {\n        if (v6 != 1) {\n            goto lab_0x408190;\n        } else {\n            if (v4 != 4) {\n                goto lab_0x408267;\n            } else {\n                goto lab_0x408302;\n            }\n        }\n    }\n  lab_0x408190:;\n    int64_t * v21 = (int64_t *)result;\n    int64_t v22 = result;\n    int64_t v23 = *(int64_t *)(v22 + 16); // 0x408190\n    int64_t result2; // 0x408110\n    int64_t v24; // 0x408110\n    int64_t v25; // 0x408360\n    while (v23 != 0) {\n        // 0x408168\n        *v21 = v23;\n        free((int64_t *)v22);\n        if (*(int64_t *)(v23 + 88) == 0) {\n            // 0x408350\n            if ((int32_t)function_406d90(result) != 0) {\n                // 0x4086ef\n                *v1 = *v1 | 0x4000;\n                result2 = 0;\n                return result2;\n            } else {\n                // 0x408360\n                v25 = result + 88;\n                int64_t v26 = *(int64_t *)v25; // 0x408360\n                if ((*v1 & 258) == 0) {\n                    // 0x4086fd\n                    free((int64_t *)v26);\n                    goto lab_0x40837e;\n                } else {\n                    if (v26 == 0) {\n                        goto lab_0x40837e;\n                    } else {\n                        // 0x408379\n                        function_40a600(v26);\n                        goto lab_0x40837e;\n                    }\n                }\n            }\n        }\n        int16_t * v27 = (int16_t *)(v23 + 116);\n        int16_t v28 = *v27; // 0x40817f\n        if (v28 != 4) {\n            // 0x408400\n            v24 = v23;\n            if (v28 == 2) {\n                int16_t v29 = function_4067c0(result, v23, 1); // 0x408724\n                int16_t * v30 = (int16_t *)(v23 + 112); // 0x408724\n                *v30 = v29;\n                if (v29 == 1) {\n                    uint32_t v31 = *v1; // 0x4087a7\n                    if ((v31 & 4) != 0) {\n                        // 0x40872e\n                        *v27 = 3;\n                        v24 = v23;\n                        goto lab_0x40840a;\n                    } else {\n                        int32_t v32 = *(int32_t *)(result + 44); // 0x4087b6\n                        int32_t v33 = function_406ec0(v32, (int64_t)v31, (int64_t)\".\"); // 0x4087c5\n                        *(int32_t *)(v23 + 68) = v33;\n                        if (v33 < 0) {\n                            int32_t v34 = *__errno_location(); // 0x40885b\n                            *v30 = 7;\n                            *(int32_t *)(v23 + 64) = v34;\n                            // 0x40872e\n                            *v27 = 3;\n                            v24 = v23;\n                            goto lab_0x40840a;\n                        } else {\n                            int16_t * v35 = (int16_t *)(v23 + 114); // 0x4087d0\n                            *v35 = *v35 | 2;\n                            // 0x40872e\n                            *v27 = 3;\n                            v24 = v23;\n                            goto lab_0x40840a;\n                        }\n                    }\n                } else {\n                    // 0x40872e\n                    *v27 = 3;\n                    v24 = v23;\n                    goto lab_0x40840a;\n                }\n            } else {\n                goto lab_0x40840a;\n            }\n        }\n        v22 = v23;\n        v23 = *(int64_t *)(v22 + 16);\n    }\n    int64_t * v36 = (int64_t *)(v22 + 8); // 0x408199\n    int64_t v37 = *v36; // 0x408199\n    int64_t result6 = v37; // 0x4081a2\n    if (*(int64_t *)(v37 + 24) != 0) {\n        // 0x4086b0\n        *v21 = v37;\n        *(char *)(*(int64_t *)(result + 32) + *(int64_t *)(v37 + 72)) = 0;\n        int64_t v38 = function_407230(result, 3); // 0x4086c9\n        if (v38 != 0) {\n            // 0x40875f\n            free((int64_t *)v22);\n            v24 = v38;\n            goto lab_0x40840a;\n        } else {\n            // 0x4086da\n            if ((*(char *)(result + 73) & 64) != 0) {\n                // 0x40823a\n                return 0;\n            }\n            // 0x4086e6\n            result6 = *v36;\n            goto lab_0x4081a8;\n        }\n    } else {\n        goto lab_0x4081a8;\n    }\n  lab_0x408267:;\n    int64_t v39 = v2; // 0x408124\n    if ((v39 & 64) == 0) {\n        goto lab_0x40827b;\n    } else {\n        // 0x40826c\n        if (*(int64_t *)(result + 120) != *(int64_t *)(result + 24)) {\n            goto lab_0x408302;\n        } else {\n            goto lab_0x40827b;\n        }\n    }\n  lab_0x4081a8:\n    // 0x4081a8\n    *v21 = result6;\n    free((int64_t *)v22);\n    int64_t * v40 = (int64_t *)(result6 + 88); // 0x4081b4\n    if (*v40 == -1) {\n        // 0x4085cf\n        free((int64_t *)result6);\n        *__errno_location() = 0;\n        *v21 = 0;\n        // 0x40823a\n        return 0;\n    }\n    // 0x4081bf\n    *(char *)(*(int64_t *)(result6 + 72) + *(int64_t *)(result + 32)) = 0;\n    if (*v40 == 0) {\n        // 0x4085ff\n        if ((int32_t)function_406d90(result) == 0) {\n            goto lab_0x4081f6;\n        } else {\n            goto lab_0x40860f;\n        }\n    } else {\n        uint16_t v41 = *(int16_t *)(result6 + 114); // 0x4081e2\n        if ((v41 & 2) != 0) {\n            int32_t v42 = *v1; // 0x408585\n            int32_t * v43 = (int32_t *)(result6 + 68); // 0x40858a\n            uint32_t fd = *v43; // 0x40858a\n            int32_t fd2 = fd; // 0x40858f\n            if ((v42 & 4) == 0) {\n                if ((v42 & 512) == 0) {\n                    // 0x40876c\n                    if (fchdir(fd) != 0) {\n                        // 0x408775\n                        *(int32_t *)(result6 + 64) = *__errno_location();\n                        *v1 = *v1 | 0x4000;\n                    }\n                    // 0x408788\n                    fd2 = *v43;\n                } else {\n                    // 0x40859a\n                    function_406d20(result, (int64_t)fd, 1);\n                    fd2 = *v43;\n                }\n            }\n            // 0x4085ac\n            close(fd2);\n            goto lab_0x4081f6;\n        } else {\n            if (v41 % 2 == 0) {\n                int64_t v44 = *(int64_t *)(result6 + 8); // 0x40873c\n                if ((int32_t)function_406f10(result, v44, 0xffffffff, (int32_t)\"..\") == 0) {\n                    goto lab_0x4081f6;\n                } else {\n                    goto lab_0x40860f;\n                }\n            } else {\n                goto lab_0x4081f6;\n            }\n        }\n    }\n  lab_0x408302:\n    // 0x408302\n    if ((*(char *)(result + 114) & 2) != 0) {\n        // 0x408707\n        close(*(int32_t *)(result + 68));\n    }\n    int64_t * v45 = (int64_t *)(result + 8); // 0x40830c\n    int64_t v46 = *v45; // 0x40830c\n    if (v46 != 0) {\n        // 0x408316\n        function_406b00(v46);\n        *v45 = 0;\n    }\n    // 0x408324\n    *v5 = 6;\n    function_407190(*v1, result + 88, result);\n    // 0x40823a\n    return result;\n  lab_0x4084d0:;\n    int64_t result5 = v9;\n    int64_t result3 = result5; // 0x4084db\n    if (*(int64_t *)(result5 + 168) != 2) {\n        // 0x40823a\n        return result3;\n    }\n    int64_t v47 = *(int64_t *)(result5 + 8); // 0x408637\n    int64_t * v48 = (int64_t *)(v47 + 104); // 0x40863b\n    int64_t v49; // 0x408110\n    int64_t v50; // 0x408110\n    if (*v48 != 0) {\n        goto lab_0x408653;\n    } else {\n        // 0x408642\n        if ((*v1 & 24) == 24) {\n            // 0x4087e9\n            if ((int32_t)function_406cb0(v47, v13, v11) != 2) {\n                goto lab_0x408653;\n            } else {\n                // 0x4087fa\n                v49 = (int64_t)*(int16_t *)(result5 + 112);\n                v50 = result5;\n                goto lab_0x408451;\n            }\n        } else {\n            goto lab_0x408653;\n        }\n    }\n  lab_0x40827b:;\n    int64_t * v51 = (int64_t *)(result + 8); // 0x40827b\n    int64_t v52 = *v51; // 0x40827b\n    int64_t v53; // 0x408110\n    if (v52 == 0) {\n        goto lab_0x408529;\n    } else {\n        if ((v39 & 0x2000) != 0) {\n            // 0x408513\n            *v1 = v2 & -0x2001;\n            function_406b00(v52);\n            *v51 = 0;\n            goto lab_0x408529;\n        } else {\n            int64_t v54 = *(int64_t *)(result + 48); // 0x408292\n            if ((int32_t)function_406f10(result, result, 0xffffffff, (int32_t)v54) == 0) {\n                // 0x4085b6\n                v53 = *v51;\n            } else {\n                int32_t * v55 = __errno_location(); // 0x4082ae\n                int64_t v56 = *v51; // 0x4082b3\n                int16_t * v57 = (int16_t *)(result + 114); // 0x4082ba\n                *v57 = *v57 | 1;\n                *(int32_t *)(result + 64) = *v55;\n                v53 = 0;\n                if (v56 != 0) {\n                    *(int64_t *)(v56 + 48) = *(int64_t *)(*(int64_t *)(v56 + 8) + 48);\n                    int64_t v58 = *(int64_t *)(v56 + 16); // 0x4082dc\n                    int64_t v59 = v58; // 0x4082e3\n                    v53 = v56;\n                    while (v58 != 0) {\n                        int64_t v60 = *(int64_t *)(*(int64_t *)(v59 + 8) + 48); // 0x4082d4\n                        *(int64_t *)(v59 + 48) = v60;\n                        v58 = *(int64_t *)(v59 + 16);\n                        v59 = v58;\n                        v53 = v56;\n                    }\n                }\n            }\n            goto lab_0x4082e5;\n        }\n    }\n  lab_0x408447:;\n    uint16_t v61 = *(int16_t *)(v7 + 112);\n    *(int64_t *)result = v7;\n    v49 = v61;\n    v50 = v7;\n    v11 = v10;\n    v9 = v7;\n    v13 = v12;\n    if (v61 == 11) {\n        goto lab_0x4084d0;\n    } else {\n        goto lab_0x408451;\n    }\n  lab_0x40845e:;\n    int64_t v62 = v8; // 0x408463\n    if (*(int64_t *)(v8 + 88) != 0) {\n        goto lab_0x40846e;\n    } else {\n        goto lab_0x408465;\n    }\n  lab_0x408653:;\n    int64_t v63 = function_4067c0(result, result5, 0); // 0x40865b\n    int16_t v64 = v63; // 0x408666\n    *(int16_t *)(result5 + 112) = v64;\n    v49 = v63;\n    v50 = result5;\n    if ((*(int32_t *)(result5 + 144) & 0xf000) != 0x4000) {\n        goto lab_0x408451;\n    } else {\n        // 0x40867c\n        if (*(int64_t *)(result5 + 88) == 0) {\n            // 0x4087da\n            result3 = result5;\n            if (v64 != 1) {\n                int64_t v65 = result3;\n                result2 = v65;\n                int64_t result4 = result2;\n                return result4;\n            }\n            goto lab_0x408465;\n        } else {\n            uint64_t v66 = *v48 - 1; // 0x40868b\n            if (v66 < 0xfffffffffffffffe) {\n                // 0x40882a\n                *v48 = v66;\n            }\n            // 0x408699\n            v62 = result5;\n            if (v64 != 1) {\n                // 0x40823a\n                return result5;\n            }\n            goto lab_0x40846e;\n        }\n    }\n  lab_0x408529:;\n    int64_t v67 = function_407230(result, 3); // 0x408531\n    *v51 = v67;\n    v53 = v67;\n    if (v67 == 0) {\n        int32_t v68 = *v1; // 0x408547\n        if ((v68 & 0x4000) != 0) {\n            // 0x40823a\n            return 0;\n        }\n        // 0x408558\n        if (*(int32_t *)(result + 64) == 0) {\n            // 0x408573\n            function_407190(v68, result + 88, result);\n            result2 = result;\n          lab_0x40823a:\n            // 0x40823a\n            return result2;\n        }\n        // 0x408561\n        if (*v5 != 4) {\n            // 0x408568\n            *v5 = 7;\n        }\n        // 0x408573\n        function_407190(v68, result + 88, result);\n        // 0x40823a\n        return result;\n    }\n    goto lab_0x4082e5;\n  lab_0x40840a:;\n    int64_t v69 = *(int64_t *)(v24 + 8); // 0x40840a\n    int64_t v70 = *(int64_t *)(v69 + 72); // 0x40840e\n    char v71 = *(char *)(v70 - 1 + *(int64_t *)(v69 + 56)); // 0x40841a\n    int64_t v72 = *(int64_t *)(result + 32) + v70 + (int64_t)(v71 == 47); // 0x408423\n    *(char *)v72 = 47;\n    int64_t v73 = *(int64_t *)(v24 + 96) + 1; // 0x408433\n    int64_t v74 = v24 + 264; // 0x408437\n    memmove((int64_t *)(v72 + 1), (int64_t *)v74, (int32_t)v73);\n    v7 = v24;\n    v10 = v73;\n    v12 = v74;\n    goto lab_0x408447;\n  lab_0x4081f6:;\n    int64_t v75 = (int64_t)*v1; // 0x4081fb\n    int64_t v76 = v75; // 0x408200\n    int32_t * v77; // 0x408110\n    int64_t v78; // 0x408110\n    if (*(int16_t *)(result6 + 112) == 2) {\n        goto lab_0x408228;\n    } else {\n        // 0x4081f6\n        v77 = (int32_t *)(result6 + 64);\n        v78 = v75;\n        goto lab_0x408202;\n    }\n  lab_0x40860f:;\n    int32_t v79 = *__errno_location(); // 0x408614\n    int32_t * v80 = (int32_t *)(result6 + 64);\n    *v80 = v79;\n    uint32_t v81 = *v1 | 0x4000; // 0x408619\n    *v1 = v81;\n    if (*(int16_t *)(result6 + 112) == 2) {\n        // 0x40823a\n        return 0;\n    }\n    // 0x40862d\n    v77 = v80;\n    v78 = v81;\n    goto lab_0x408202;\n  lab_0x408451:\n    // 0x408451\n    result2 = v50;\n    v8 = v50;\n    if ((int16_t)v49 != 1) {\n        // 0x40823a\n        return result2;\n    }\n    goto lab_0x40845e;\n  lab_0x40846e:;\n    int64_t v93 = function_4070e0(*v1, result + 88, v62); // 0x40847e\n    result2 = v62;\n    if ((char)v93 == 0) {\n        // 0x40848b\n        *__errno_location() = 12;\n        result2 = 0;\n    }\n    // 0x40823a\n    return result2;\n  lab_0x408465:\n    // 0x408465\n    *(int64_t *)(result + 24) = *(int64_t *)(v8 + 120);\n    v62 = v8;\n    goto lab_0x40846e;\n  lab_0x4082e5:\n    // 0x4082e5\n    *v51 = 0;\n    v24 = v53;\n    goto lab_0x40840a;\n  lab_0x408228:\n    // 0x408228\n    if ((v76 & 0x4000) != 0) {\n        // 0x40823a\n        return 0;\n    }\n    // 0x40823a\n    return result6;\n  lab_0x408202:\n    // 0x408202\n    if (*v77 != 0) {\n        // 0x4085f1\n        int64_t v82; // 0x408110\n        *(int16_t *)(v82 + 112) = 7;\n        int64_t v83; // 0x408110\n        v76 = v83;\n    } else {\n        // 0x40820d\n        *(int16_t *)(result6 + 112) = 6;\n        function_407190((int32_t)v78, result + 88, result6);\n        v76 = (int64_t)*v1;\n    }\n    goto lab_0x408228;\n  lab_0x40837e:;\n    int64_t * v84 = (int64_t *)(v23 + 96); // 0x40837e\n    int64_t v85 = *v84; // 0x40837e\n    int64_t str = v23 + 264; // 0x408382\n    int64_t * v86 = (int64_t *)(result + 32); // 0x408389\n    *(int64_t *)(v23 + 72) = v85;\n    int64_t v87 = v85 + 1; // 0x408395\n    int64_t * v88 = (int64_t *)str; // 0x408399\n    memmove((int64_t *)*v86, v88, (int32_t)v87);\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4083a6\n    int64_t v89 = v87; // 0x4083ae\n    int64_t v90; // 0x4083a6\n    if (found_char_pos == NULL) {\n        goto lab_0x4083db;\n    } else {\n        // 0x4083b0\n        v90 = (int64_t)found_char_pos;\n        if (str == v90) {\n            // 0x4085c0\n            v89 = v87;\n            if (*(char *)(v23 + 265) == 0) {\n                goto lab_0x4083db;\n            } else {\n                goto lab_0x4083b9;\n            }\n        } else {\n            goto lab_0x4083b9;\n        }\n    }\n  lab_0x4083db:;\n    int64_t v91 = *v86; // 0x4083db\n    *(int64_t *)(v23 + 56) = v91;\n    *(int64_t *)(v23 + 48) = v91;\n    function_406e60(*v1, v25);\n    v7 = v23;\n    v10 = v89;\n    v12 = v25;\n    goto lab_0x408447;\n  lab_0x4083b9:;\n    int64_t str2 = v90 + 1; // 0x4083b9\n    int64_t len = strlen((char *)str2); // 0x4083c0\n    int64_t v92 = len + 1; // 0x4083ce\n    memmove(v88, (int64_t *)str2, (int32_t)v92);\n    *v84 = len;\n    v89 = v92;\n    goto lab_0x4083db;\n}\n"
        },
        {
            "funcName": "fts_set",
            "funcStartAddr": "408870",
            "funcEndAddr": "408899",
            "decompiledFuncCode": "int64_t fts_set(int64_t a1, int64_t a2, int64_t a3) {\n    if ((uint32_t)(int32_t)a3 < 5) {\n        // 0x408875\n        *(int16_t *)(a2 + 116) = (int16_t)a3;\n        return 0;\n    }\n    // 0x408880\n    *__errno_location() = 22;\n    return 1;\n}\n"
        },
        {
            "funcName": "fts_children",
            "funcStartAddr": "4088a0",
            "funcEndAddr": "408a0d",
            "decompiledFuncCode": "int64_t fts_children(int64_t a1, int64_t a2) {\n    int32_t * v1 = __errno_location(); // 0x4088ad\n    if ((a2 & 0xffffdfff) != 0) {\n        // 0x408998\n        *v1 = 22;\n        return 0;\n    }\n    // 0x4088c1\n    *v1 = 0;\n    char * v2 = (char *)(a1 + 73); // 0x4088ca\n    if ((*v2 & 64) != 0) {\n        // 0x40893f\n        return 0;\n    }\n    int16_t v3 = *(int16_t *)(a1 + 112); // 0x4088d4\n    if (v3 == 9) {\n        // 0x4089c0\n        return *(int64_t *)(a1 + 16);\n    }\n    // 0x4088e4\n    if (v3 != 1) {\n        // 0x40893f\n        return 0;\n    }\n    int64_t * v4 = (int64_t *)(a1 + 8); // 0x4088ec\n    int64_t v5 = *v4; // 0x4088ec\n    if (v5 != 0) {\n        // 0x4088f5\n        function_406b00(v5);\n    }\n    int64_t v6 = 1; // 0x408906\n    if ((int32_t)a2 == 0x2000) {\n        int32_t * v7 = (int32_t *)(a1 + 72); // 0x408908\n        *v7 = *v7 | 0x2000;\n        v6 = 2;\n    }\n    // 0x408915\n    int64_t result; // 0x408936\n    if (*(int64_t *)(a1 + 88) != 0 || *(char *)*(int64_t *)(a1 + 48) == 47) {\n        // 0x408930\n        result = function_407230(a1, v6);\n        *v4 = result;\n        // 0x40893f\n        return result;\n    }\n    uint32_t v8 = *(int32_t *)(a1 + 72); // 0x408927\n    if ((v8 & 4) != 0) {\n        // 0x408930\n        result = function_407230(a1, v6);\n        *v4 = result;\n        // 0x40893f\n        return result;\n    }\n    int64_t v9 = function_406ec0(*(int32_t *)(a1 + 44), (int64_t)v8, (int64_t)\".\"); // 0x408958\n    int32_t fd = v9; // 0x40895f\n    if (fd < 0) {\n        // 0x4089e8\n        *v4 = 0;\n        // 0x40893f\n        return 0;\n    }\n    // 0x408967\n    *v4 = function_407230(a1, v6);\n    if ((*v2 & 2) != 0) {\n        // 0x4089d0\n        function_406d20(a1, v9 & 0xffffffff, 1);\n        // 0x40893f\n        return *v4;\n    }\n    // 0x40897c\n    if (fchdir(fd) == 0) {\n        // 0x408987\n        close(fd);\n        // 0x40893f\n        return *v4;\n    }\n    // 0x4089f7\n    close(fd);\n    // 0x40893f\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408a10",
            "funcStartAddr": "408a10",
            "funcEndAddr": "408aef",
            "decompiledFuncCode": "int64_t function_408a10(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x408a1c\n    uint32_t v2 = *v1; // 0x408a1c\n    int64_t v3 = a2 & 0xffffffff; // 0x408a21\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x408a24\n    uint64_t v5 = (int64_t)*v4; // 0x408a24\n    int64_t v6; // 0x408a92\n    if (v3 <= v5) {\n      lab_0x408a8c_2:\n        // 0x408a8c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x408a12\n    int64_t v8 = v2; // 0x408a10\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x408a8c\n        goto lab_0x408a8c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x408a48\n    int64_t v17; // 0x408a56\n    int64_t * v18; // 0x408a70\n    int64_t * v19; // 0x408a73\n    int64_t v20; // 0x408a7e\n    int64_t v21; // 0x408a56\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x408a53\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x408a70\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x408a87\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x408a8c\n            goto lab_0x408a8c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x408a8c\n            goto lab_0x408a8c_2;\n        }\n        // 0x408a42\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x408acb\n    int64_t * v23 = (int64_t *)v22; // 0x408ad0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x408ad3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x408ad0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x408ae7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x408a3d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x408a8c\n            goto lab_0x408a8c_2;\n        }\n        // 0x408a42\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x408a53\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x408a70\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x408a87\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x408a8c\n                goto lab_0x408a8c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x408a8c\n                goto lab_0x408a8c_2;\n            }\n            // 0x408a42\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x408ab0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x408ad0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x408ae7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x408a8c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408af0",
            "funcStartAddr": "408af0",
            "funcEndAddr": "40910c",
            "decompiledFuncCode": "int64_t function_408af0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x408b0f\n    int64_t v2 = *v1; // 0x408b0f\n    char * str2 = (char *)v2; // 0x408b1c\n    char c = *str2; // 0x408b1c\n    int64_t v3 = v2; // 0x408b48\n    int64_t v4 = 0; // 0x408af0\n    int32_t v5; // 0x408af0\n    int64_t v6; // 0x408af0\n    int64_t v7; // 0x408af0\n    int64_t v8; // 0x408af0\n    int64_t v9; // 0x408af0\n    int64_t v10; // 0x408af0\n    int64_t v11; // 0x408af0\n    int64_t v12; // 0x408af0\n    int64_t v13; // 0x408af0\n    int64_t str3; // 0x408af0\n    int64_t v14; // 0x408af0\n    int64_t v15; // 0x408af0\n    int64_t v16; // 0x408af0\n    int64_t v17; // 0x408af0\n    int32_t v18; // 0x408af0\n    int32_t v19; // 0x408af0\n    int32_t v20; // 0x408af0\n    int32_t v21; // 0x408af0\n    int32_t v22; // 0x408af0\n    int32_t v23; // 0x408af0\n    int32_t v24; // 0x408af0\n    int32_t v25; // 0x408af0\n    int32_t v26; // 0x408af0\n    int32_t v27; // 0x408af0\n    int32_t v28; // 0x408af0\n    int32_t v29; // 0x408af0\n    int64_t nmemb; // 0x408af0\n    int64_t v30; // 0x408af0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x408b4c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x408b48\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x408b58\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x408b5e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x408b28\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x408b8c\n                int64_t v34; // 0x408af0\n                int64_t v35; // 0x408af0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x408b95\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x408d10;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x408ba6\n                int64_t v37 = *(int64_t *)v36; // 0x408baa\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x408b80\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x408b95\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x408d10;\n                        }\n                    }\n                    // 0x408ba6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x408bf6:\n                    // 0x408bf6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x408c50;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x408dc0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x408c50;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x408d70\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x408c1a;\n                                } else {\n                                    // 0x408d7c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x408c1a;\n                                    } else {\n                                        // 0x408d8a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x408c1a;\n                                        } else {\n                                            goto lab_0x408c50;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x408c1a;\n                            }\n                        }\n                    }\n                }\n              lab_0x408c61:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x408e36\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x408fe2\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x409002\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40904f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x409069\n                            int64_t v45; // 0x40906b\n                            if (*(char *)v42 != 0) {\n                                // 0x40906b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x409063\n                            while (v17 + nmemb != v42) {\n                                // 0x409065\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40906b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x409058\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x409090\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x408e44\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x408f9f\n                        free((int64_t *)v17);\n                    }\n                    // 0x408e99\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x408eb0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x408d5e\n                    return 63;\n                }\n                // 0x408c80\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x408d04\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x408d10:;\n                    int32_t * v49 = (int32_t *)a7; // 0x408d20\n                    uint32_t v50 = *v49; // 0x408d20\n                    int64_t v51 = v50; // 0x408d20\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x408d2a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x408d33\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x408f5f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x408f0a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x408d5e\n                            return 63;\n                        }\n                        // 0x408da8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4090bf\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x408fbd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x408fd0\n                                // 0x408d5e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x408ece\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x408ee2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x408d4b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x408d4e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x408d52\n                    int64_t result = v59; // 0x408d58\n                    if (v58 != 0) {\n                        // 0x408d5a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x408d5e\n                    return result;\n                }\n            } else {\n                // 0x408b5e\n                v5 = v32;\n            }\n            // break -> 0x408c85\n            break;\n        }\n    }\n    // 0x408c85\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x408c9d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x408ca7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x408d5e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x408de9\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x408cd6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x408ce6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x408c50:\n    // 0x408c50\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x408c50\n    int64_t v63 = *(int64_t *)v62; // 0x408c54\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x408c61\n        goto lab_0x408c61;\n    }\n    goto lab_0x408bf6;\n  lab_0x408c1a:\n    // 0x408c1a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x408af0\n    int32_t v65; // 0x408af0\n    int32_t v66; // 0x408af0\n    if (v27 != 0) {\n        goto lab_0x408c50;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x408dd0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x408c50;\n            } else {\n                goto lab_0x408c41;\n            }\n        } else {\n            // 0x408c35\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x408f2c\n                int64_t v67 = (int64_t)mem; // 0x408f2c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x408c50;\n                } else {\n                    // 0x408f3f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x408c41;\n                }\n            } else {\n                goto lab_0x408c41;\n            }\n        }\n    }\n  lab_0x408c41:\n    // 0x408c41\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x408c50;\n}\n"
        },
        {
            "funcName": "function_409110",
            "funcStartAddr": "409110",
            "funcEndAddr": "4096d6",
            "decompiledFuncCode": "int64_t function_409110(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x409131\n    if (v3 < 1) {\n        // 0x4092ee\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40912d\n    int32_t v5 = *(int32_t *)a7; // 0x409139\n    uint64_t v6 = a1 & 0xffffffff; // 0x40913b\n    int64_t v7 = v2; // 0x409140\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x409143\n    *v8 = 0;\n    int64_t v9; // 0x409110\n    int64_t v10; // 0x409110\n    int64_t v11; // 0x409110\n    int64_t v12; // 0x409110\n    int64_t str; // 0x409110\n    int64_t v13; // 0x409110\n    int64_t v14; // 0x409110\n    int64_t v15; // 0x409110\n    int64_t v16; // 0x409110\n    int64_t v17; // 0x409110\n    int32_t v18; // 0x409110\n    char v19; // 0x409110\n    if (v5 == 0) {\n        // 0x409328\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40915a;\n    } else {\n        // 0x409153\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4091a0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4091a3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x409268;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4091b6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4091c6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40927c;\n                } else {\n                    goto lab_0x4091d8;\n                }\n            }\n        } else {\n            goto lab_0x40915a;\n        }\n    }\n  lab_0x40915a:\n    // 0x40915a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x409160\n    *v24 = 0;\n    int64_t v25; // 0x409110\n    int64_t v26; // 0x409110\n    int64_t v27; // 0x409110\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x409250\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40925d;\n        }\n        case 43: {\n            // 0x409560\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40925d;\n        }\n        default: {\n            // 0x40917c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4094df\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4095f8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40925d;\n                } else {\n                    // 0x4094ed\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40918a;\n                }\n            } else {\n                goto lab_0x40918a;\n            }\n        }\n    }\n  lab_0x409268:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40926f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4091d8;\n    } else {\n        goto lab_0x40927c;\n    }\n  lab_0x40918a:\n    // 0x40918a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40925d;\n  lab_0x40925d:\n    // 0x40925d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x409268;\n  lab_0x4091d8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4091d8\n    int64_t v31 = v30; // 0x4091d8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4091da\n    if ((int64_t)*v32 > v31) {\n        // 0x4091df\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4091e2\n    if (*v33 > v30) {\n        // 0x4091e7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4091ea\n    int64_t v35 = v31; // 0x4091ee\n    int64_t v36 = v15; // 0x4091ee\n    int64_t v37; // 0x409110\n    int64_t v38; // 0x409110\n    int64_t v39; // 0x409110\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x409358\n        int64_t v41 = v40; // 0x409358\n        v2 = v41;\n        int64_t v42; // 0x409110\n        if (*v33 == v40) {\n            // 0x409540\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x409548\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x409364\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x409368\n                function_408a10(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x409378\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x409381\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40938a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4093a1\n            int64_t v47 = v45 & 0xffffffff; // 0x4093a5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4093ae\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4093b4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4093b6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x409390\n            int64_t v49 = v48 & 0xffffffff; // 0x409390\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4093a1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4093ae\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4093b4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4093b6;\n                    }\n                }\n                // 0x409390\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x409558\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4093b6;\n    } else {\n        goto lab_0x4091f4;\n    }\n  lab_0x40927c:\n    // 0x40927c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40927f\n    int64_t v51 = v12; // 0x40927f\n    int64_t v52 = v14; // 0x40927f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4091d8;\n    } else {\n        goto lab_0x409285;\n    }\n  lab_0x4091f4:;\n    int32_t v53 = v35; // 0x4091f4\n    int64_t v54; // 0x409110\n    int64_t v55; // 0x409110\n    int64_t v56; // 0x409110\n    int64_t v57; // 0x409110\n    int64_t v58; // 0x409110\n    int64_t v59; // 0x409110\n    char * v60; // 0x409110\n    int64_t v61; // 0x409110\n    int64_t v62; // 0x409209\n    int64_t v63; // 0x409110\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x409343\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x409346;\n    } else {\n        // 0x4091fc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x409110\n        int64_t v66 = v65 ? -1 : 1; // 0x409210\n        int64_t v67 = (int64_t)\"--\"; // 0x409110\n        int64_t v68 = v62; // 0x409110\n        int64_t v69 = 3; // 0x409210\n        unsigned char v70 = *(char *)v68; // 0x409210\n        char v71 = *(char *)v67; // 0x409210\n        char v72 = v71; // 0x409210\n        bool v73 = false; // 0x409210\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x409300\n            if (*(char *)v62 == 45) {\n                // 0x4093c0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4093c0\n                if (c == 0) {\n                    goto lab_0x40930a;\n                } else {\n                    // 0x4093cd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x409450;\n                    } else {\n                        if (c == 45) {\n                            // 0x409633\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4094a5;\n                        } else {\n                            // 0x4093de\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x409450;\n                            } else {\n                                // 0x4093e3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x409404;\n                                } else {\n                                    // 0x4093ea\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x409450;\n                                    } else {\n                                        goto lab_0x409404;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40930a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x409220\n            v2 = v75;\n            int32_t v76 = *v32; // 0x409223\n            int64_t v77 = v35 + 1; // 0x409226\n            int32_t v78 = v77; // 0x409229\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x409590\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x409237\n                    function_408a10(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x409245\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x409346;\n        }\n    }\n  lab_0x409285:;\n    // 0x409285\n    int64_t v79; // bp-104, 0x409110\n    int64_t v80 = &v79; // 0x40911a\n    int64_t v81 = v50 + 1; // 0x409285\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40928c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x409291\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x409295\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x409299\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4092a1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4092a6\n    int32_t c2 = v84; // 0x4092a6\n    char * found_char_pos = strchr(str2, c2); // 0x4092a6\n    int64_t v87 = *v82; // 0x4092ab\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4092b5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4092c0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4095b0\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40957d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4092ee\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4092a6\n    char v91 = *(char *)(v90 + 1); // 0x4092db\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x409295\n        if (v91 != 58) {\n            // 0x4092ee\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x409504\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x409608\n                *v8 = 0;\n            } else {\n                // 0x4095ec\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40952e\n            *v83 = 0;\n            // 0x4092ee\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40950e\n        if (v93 != 0) {\n            // 0x4095a0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40952e\n            *v83 = 0;\n            // 0x4092ee\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x409521\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40952e\n            *v83 = 0;\n            // 0x4092ee\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40966a\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40961a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x409621\n        // 0x40952e\n        *v83 = 0;\n        // 0x4092ee\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x409479\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40947b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4096a0\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x409651\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x409658\n            // 0x4092ee\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x409486\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40948a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4094a5;\n  lab_0x4093b6:\n    // 0x4093b6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4091f4;\n  lab_0x4094a5:;\n    int64_t v99 = function_408af0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4094c3\n    // 0x4092ee\n    return v99 & 0xffffffff;\n  lab_0x409346:;\n    int32_t v100 = v55; // 0x409346\n    if (v100 != (int32_t)v59) {\n        // 0x40934a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4092ee\n    return 0xffffffff;\n  lab_0x40930a:\n    // 0x40930a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x409311\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4092ee\n    return v99 & 0xffffffff;\n  lab_0x409450:\n    // 0x409450\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x409285;\n  lab_0x409404:\n    // 0x409404\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_408af0(v6, a2, str, a4, a5, v57, v1, v11, &g9); // 0x40942a\n    if ((int32_t)v101 != -1) {\n        // 0x4092ee\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40943f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x409450;\n}\n"
        },
        {
            "funcName": "function_4096e0",
            "funcStartAddr": "4096e0",
            "funcEndAddr": "409736",
            "decompiledFuncCode": "int64_t function_4096e0(int64_t a1) {\n    // 0x4096e0\n    *(int32_t *)&g44 = g28;\n    *(int32_t *)&g45 = g27;\n    int64_t v1; // 0x4096e0\n    int64_t result = function_409110(v1, v1, v1, v1, v1, v1, &g44, a1 & 0xffffffff); // 0x409706\n    g28 = *(int32_t *)&g44;\n    g51 = (char *)g47;\n    *(int32_t *)&g26 = g46;\n    return result;\n}\n"
        },
        {
            "funcName": "function_409740",
            "funcStartAddr": "409740",
            "funcEndAddr": "409758",
            "decompiledFuncCode": "int64_t function_409740(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409740\n    return function_4096e0(1);\n}\n"
        },
        {
            "funcName": "function_409760",
            "funcStartAddr": "409760",
            "funcEndAddr": "409773",
            "decompiledFuncCode": "int64_t function_409760(int64_t a1, int64_t a2, char * a3, char (**a4)[10], int32_t a5, int64_t a6) {\n    // 0x409760\n    return function_4096e0(0);\n}\n"
        },
        {
            "funcName": "function_409780",
            "funcStartAddr": "409780",
            "funcEndAddr": "409795",
            "decompiledFuncCode": "int64_t function_409780(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409780\n    return function_409110(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4097a0",
            "funcStartAddr": "4097a0",
            "funcEndAddr": "4097b6",
            "decompiledFuncCode": "int64_t function_4097a0(void) {\n    // 0x4097a0\n    return function_4096e0(0);\n}\n"
        },
        {
            "funcName": "function_4097c0",
            "funcStartAddr": "4097c0",
            "funcEndAddr": "4097d8",
            "decompiledFuncCode": "int64_t function_4097c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4097c0\n    return function_409110(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4097e0",
            "funcStartAddr": "4097e0",
            "funcEndAddr": "40985a",
            "decompiledFuncCode": "int64_t function_4097e0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4097eb\n    int64_t v2 = (int64_t)&g10; // 0x4097eb\n    int32_t * pwc; // 0x4097e0\n    int64_t v3; // 0x4097e0\n    int64_t n; // 0x4097e0\n    if (a2 == 0) {\n        goto lab_0x409832;\n    } else {\n        // 0x4097ed\n        if (a3 == 0) {\n            // 0x409818\n            return -2;\n        }\n        // 0x4097f9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x409832;\n        } else {\n            goto lab_0x409804;\n        }\n    }\n  lab_0x409832:\n    // 0x409832\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4097e0\n    pwc = (int32_t *)&v4;\n    goto lab_0x409804;\n  lab_0x409804:;\n    char * wstr = (char *)v3; // 0x40980a\n    int64_t ps; // 0x4097e0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40980a\n    int64_t result = v5; // 0x40980a\n    if (v5 < 0xfffffffe) {\n        // 0x409818\n        return result;\n    }\n    int64_t result2 = result; // 0x409849\n    if ((char)function_409ad0(0, v3) == 0) {\n        // 0x40984b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x409818\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409860",
            "funcStartAddr": "409860",
            "funcEndAddr": "40998a",
            "decompiledFuncCode": "int64_t function_409860(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t result = (int64_t)a1;\n    if ((char)a3 == 0) {\n        // 0x409928\n        *(char *)a1 = 0;\n        return result;\n    }\n    // 0x409876\n    if (g48 == 0) {\n        int32_t fd = open(\"/proc/self/fd\", O_NOCTTY | O_NONBLOCK | O_DIRECTORY); // 0x409902\n        if (fd < 0) {\n            // 0x40990e\n            g48 = -1;\n            return 0;\n        }\n        // 0x409940\n        int64_t path; // bp-72, 0x409860\n        __sprintf_chk((char *)&path, 1, 32, \"/proc/self/fd/%d/../fd\", (int64_t)fd);\n        g48 = access((char *)&path, F_OK) == 0 ? 1 : -1;\n        close(fd);\n    }\n    // 0x409886\n    if (g48 < 0) {\n        // 0x4098ce\n        return 0;\n    }\n    char * str = (char *)a3; // 0x40988d\n    int32_t len = strlen(str); // 0x40988d\n    uint64_t size = (int64_t)len + 27; // 0x409892\n    int64_t v1 = result; // 0x40989d\n    if (len != 4005 && size >= 4032) {\n        int64_t * mem = malloc((int32_t)size); // 0x4098e0\n        v1 = (int64_t)mem;\n        if (mem == NULL) {\n            // 0x4098ce\n            return 0;\n        }\n    }\n    int64_t result2 = v1;\n    strcpy((char *)(result2 + (int64_t)__sprintf_chk((char *)result2, 1, -1, \"/proc/self/fd/%d/\", a2 & 0xffffffff)), str);\n    // 0x4098ce\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409990",
            "funcStartAddr": "409990",
            "funcEndAddr": "4099ed",
            "decompiledFuncCode": "int64_t function_409990(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x409997\n    int64_t v2; // 0x409990\n    int64_t result = function_40b830(a1, v2); // 0x4099a8\n    if ((v2 & 32) != 0) {\n        // 0x4099d0\n        if ((int32_t)result == 0) {\n            // 0x4099d4\n            *__errno_location() = 0;\n        }\n        // 0x4099ca\n        return 0xffffffff;\n    }\n    // 0x4099b1\n    if ((int32_t)result == 0) {\n        // 0x4099ca\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4099b8\n    if (v1 == 0) {\n        // 0x4099ba\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4099ca\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4099f0",
            "funcStartAddr": "4099f0",
            "funcEndAddr": "409a00",
            "decompiledFuncCode": "int64_t function_4099f0(int64_t a1) {\n    // 0x4099f0\n    *(int64_t *)(a1 + 16) = 0;\n    *(int32_t *)(a1 + 24) = 0x95f616;\n    int64_t result; // 0x4099f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_409a00",
            "funcStartAddr": "409a00",
            "funcEndAddr": "409a80",
            "decompiledFuncCode": "int64_t function_409a00(int64_t a1, int64_t a2) {\n    // 0x409a00\n    if (*(int32_t *)(a1 + 24) != 0x95f616) {\n        // 0x409a62\n        __assert_fail(\"state->magic == 9827862\", \"lib/cycle-check.c\", 60, \"cycle_check\");\n        return &g56;\n    }\n    int64_t * v1 = (int64_t *)(a1 + 16); // 0x409a09\n    int64_t v2 = *v1; // 0x409a09\n    int64_t v3 = *(int64_t *)(a2 + 8); // 0x409a0d\n    if (v2 == 0) {\n        // 0x409a30\n        *v1 = 1;\n        // 0x409a38\n        *(int64_t *)a1 = v3;\n        *(int64_t *)(a1 + 8) = a2;\n        return 0;\n    }\n    if (v3 == a1) {\n        // 0x409a48\n        if (*(int64_t *)(a1 + 8) == a2) {\n            // 0x409a28\n            return 1;\n        }\n    }\n    int64_t v4 = v2 + 1; // 0x409a1b\n    *v1 = v4;\n    if ((v4 & v2) != 0) {\n        // 0x409a28\n        return 0;\n    }\n    // 0x409a57\n    if (v4 == 0) {\n        // 0x409a28\n        return 1;\n    }\n    // 0x409a38\n    *(int64_t *)a1 = v3;\n    *(int64_t *)(a1 + 8) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409a80",
            "funcStartAddr": "409a80",
            "funcEndAddr": "409aca",
            "decompiledFuncCode": "int64_t function_409a80(int64_t path, int64_t oflag, int32_t a3) {\n    uint32_t fd = open((char *)path, (int32_t)oflag); // 0x409a93\n    return function_40b4f0((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_409ad0",
            "funcStartAddr": "409ad0",
            "funcEndAddr": "409b2e",
            "decompiledFuncCode": "int64_t function_409ad0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x409ad6\n    if (locale == NULL) {\n        // 0x409b03\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x409ad6\n    bool v2; // 0x409ad0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x409ad0\n    int64_t v5 = v1; // 0x409ad0\n    int64_t v6 = 2; // 0x409af5\n    unsigned char v7 = *(char *)v5; // 0x409af5\n    char v8 = *(char *)v4; // 0x409af5\n    char v9 = v8; // 0x409af5\n    bool v10 = false; // 0x409af5\n    while (v7 == v8) {\n        // 0x409ae8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x409b01\n    int64_t v13 = v1; // 0x409b01\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x409b03\n        return 0;\n    }\n    int64_t v14 = 6; // 0x409b01\n    unsigned char v15 = *(char *)v13; // 0x409b1d\n    char v16 = *(char *)v12; // 0x409b1d\n    char v17 = v16; // 0x409b1d\n    bool v18 = false; // 0x409b1d\n    while (v15 == v16) {\n        // 0x409b10\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_409b30",
            "funcStartAddr": "409b30",
            "funcEndAddr": "409bc3",
            "decompiledFuncCode": "int64_t function_409b30(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x409b47\n    if (v1 == -1) {\n        // 0x409bbf\n        return -1;\n    }\n    int64_t v2 = v1; // 0x409b4f\n    int64_t v3; // 0x409b30\n    while (true) {\n      lab_0x409b58:\n        // 0x409b58\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x409bb0;\n        } else {\n            goto lab_0x409bb5;\n        }\n    }\n  lab_0x409bbf_2:;\n    // 0x409bbf\n    int64_t result; // 0x409b30\n    return result;\n  lab_0x409bb5:;\n    int64_t v4 = v3 + 2; // 0x409bb5\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x409bbf\n        goto lab_0x409bbf_2;\n    }\n    goto lab_0x409b58;\n  lab_0x409bb0:\n    // 0x409bb0\n    result = v3;\n    goto lab_0x409bb5;\n}\n"
        },
        {
            "funcName": "function_409bd0",
            "funcStartAddr": "409bd0",
            "funcEndAddr": "409be0",
            "decompiledFuncCode": "int64_t function_409bd0(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x409bd0\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_409be0",
            "funcStartAddr": "409be0",
            "funcEndAddr": "409be7",
            "decompiledFuncCode": "int64_t function_409be0(int64_t a1, int64_t a2) {\n    // 0x409be0\n    int64_t v1; // 0x409be0\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_409bf0",
            "funcStartAddr": "409bf0",
            "funcEndAddr": "409c11",
            "decompiledFuncCode": "int64_t function_409bf0(int64_t a1, int64_t a2) {\n    // 0x409bf0\n    int64_t v1; // 0x409bf0\n    return 16 * v1 + a2;\n}\n"
        },
        {
            "funcName": "function_409c20",
            "funcStartAddr": "409c20",
            "funcEndAddr": "409d39",
            "decompiledFuncCode": "int64_t function_409c20(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_409bf0(a1, a2); // 0x409c34\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x409c3c\n    int64_t result2 = *v2; // 0x409c3c\n    if (result2 == 0) {\n        // 0x409cce\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x409c64\n            if (v3 == 0) {\n                // 0x409cce\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x409c71\n            int64_t v5 = v3; // 0x409c77\n            int64_t v6 = v1; // 0x409c77\n            int64_t result = v4; // 0x409c77\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x409cac_2:\n                // 0x409cac\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x409cb1\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x409cc0\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x409cce\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x409c84\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x409c91\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x409cac_2;\n                }\n                // 0x409c99\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x409cac_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x409cce\n            return 0;\n        }\n    }\n    // 0x409ce3\n    if ((char)a4 == 0) {\n        // 0x409cce\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x409ce8\n    if (v12 == 0) {\n        // 0x409d30\n        *v2 = 0;\n        // 0x409cce\n        return result2;\n    }\n    // 0x409cf1\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x409cff\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409d40",
            "funcStartAddr": "409d40",
            "funcEndAddr": "409dbe",
            "decompiledFuncCode": "int64_t function_409d40(uint64_t a1) {\n    if (a1 == (int64_t)&g12) {\n        // 0x409dbd\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x409d4b\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g12) {\n        // 0x409daa\n        *(int64_t *)a1 = (int64_t)&g12;\n        return 0;\n    }\n    // 0x409d59\n    __asm_comiss_2(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x409d74\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_3(v2, 0x3dcccccd); // 0x409d81\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x409d89\n    __asm_comiss_2(v4, v3);\n    __asm_comiss_2(__asm_movss(0x3f800000), v4);\n    __asm_comiss_2(v1, v3);\n    // 0x409dbd\n    return 1;\n}\n"
        },
        {
            "funcName": "function_409dc0",
            "funcStartAddr": "409dc0",
            "funcEndAddr": "409f0a",
            "decompiledFuncCode": "int64_t function_409dc0(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x409dda\n    uint64_t v2 = *v1; // 0x409dda\n    if (v2 <= a2) {\n        // 0x409ec4\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x409dc0\n    int64_t v8 = a2; // 0x409dc0\n    int64_t v9; // 0x409dc0\n    int64_t result; // 0x409dc0\n    int64_t v10; // 0x409dc0\n    while (true) {\n      lab_0x409df6_2:\n        // 0x409df6\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x409df6\n        int64_t v12 = *v11; // 0x409df6\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x409de8;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x409dff\n            int64_t v14 = *v13; // 0x409dff\n            int64_t v15 = v14; // 0x409e07\n            int64_t v16 = v12; // 0x409e07\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x409e24\n                    int64_t v19 = *v18; // 0x409e24\n                    int64_t v20 = function_409bf0(v3, v19); // 0x409e2d\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x409e32\n                    int64_t v22 = *v21; // 0x409e32\n                    int64_t * v23 = (int64_t *)v20; // 0x409e36\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x409e10\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x409e5f\n                            break;\n                        }\n                    } else {\n                        // 0x409e3c\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x409e5f\n                            break;\n                        }\n                    }\n                    // 0x409e24\n                    v15 = v22;\n                }\n                // 0x409e5f\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x409e63\n                v9 = *v1;\n                goto lab_0x409de8;\n            } else {\n                int64_t v26 = function_409bf0(v3, v25); // 0x409e7b\n                int64_t * v27 = (int64_t *)v26; // 0x409e80\n                if (*v27 == 0) {\n                    // 0x409ee0\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x409e89\n                    int64_t * v29; // 0x409dc0\n                    int64_t v30; // 0x409dc0\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x409eef\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x409ec4\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x409eef\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x409e9a\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x409ea9\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x409eb1\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x409eba\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x409ec4\n                    break;\n                }\n                goto lab_0x409df6_2;\n            }\n        }\n    }\n    // 0x409ec4\n    return result;\n  lab_0x409de8:;\n    int64_t v36 = v10 + 16; // 0x409de8\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x409df6_2;\n    // 0x409df6\n    goto lab_0x409df6_2;\n}\n"
        },
        {
            "funcName": "function_409f10",
            "funcStartAddr": "409f10",
            "funcEndAddr": "409f15",
            "decompiledFuncCode": "int64_t function_409f10(int64_t a1) {\n    // 0x409f10\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_409f20",
            "funcStartAddr": "409f20",
            "funcEndAddr": "409f25",
            "decompiledFuncCode": "int64_t function_409f20(int64_t a1) {\n    // 0x409f20\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_409f30",
            "funcStartAddr": "409f30",
            "funcEndAddr": "409f35",
            "decompiledFuncCode": "int64_t function_409f30(int64_t a1) {\n    // 0x409f30\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_409f40",
            "funcStartAddr": "409f40",
            "funcEndAddr": "409f8f",
            "decompiledFuncCode": "int64_t function_409f40(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x409f43\n    int64_t result = 0; // 0x409f4c\n    if (v1 <= a1) {\n      lab_0x409f8d:\n        // 0x409f8d\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x409f50\n    while (*(int64_t *)v3 == 0) {\n        // 0x409f50\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x409f5f\n    int64_t v6 = v5; // 0x409f6b\n    int64_t v7 = 1; // 0x409f6b\n    int64_t v8; // 0x409f40\n    int64_t v9; // 0x409f70\n    int64_t v10; // 0x409f74\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x409f70\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x409f80\n    int64_t v12 = v3 + 16; // 0x409f84\n    while (v12 < v1) {\n        // 0x409f59\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x409f50\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x409f5f\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x409f70\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x409f7d\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x409f8d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409f90",
            "funcStartAddr": "409f90",
            "funcEndAddr": "409ff7",
            "decompiledFuncCode": "int64_t function_409f90(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x409f93\n    int64_t v2 = a1; // 0x409f9f\n    int64_t v3 = 0; // 0x409f9f\n    int64_t v4 = 0; // 0x409f9f\n    int64_t v5 = 0; // 0x409f9f\n    int64_t v6 = 0; // 0x409f9f\n    int64_t v7; // 0x409f90\n    int64_t v8; // 0x409f90\n    int64_t v9; // 0x409f90\n    if (v1 > a1) {\n        while (true) {\n          lab_0x409fb1_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x409fa8;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x409fb7\n                int64_t v13 = v10 + 1; // 0x409fbb\n                int64_t v14 = v11 + 1; // 0x409fbf\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x409fc6\n                int64_t v16 = v14; // 0x409fc6\n                if (v12 == 0) {\n                    goto lab_0x409fa8;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x409fd0\n                    int64_t v18 = v16 + 1; // 0x409fd4\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x409fd0\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x409fdd\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x409fe6\n                        break;\n                    }\n                    goto lab_0x409fb1_2;\n                }\n            }\n        }\n    }\n  lab_0x409fe6:\n    // 0x409fe6\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x409fef\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x409fee\n    return 0;\n  lab_0x409fa8:;\n    int64_t v20 = v8 + 16; // 0x409fa8\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x409fe6\n        goto lab_0x409fe6;\n    }\n    goto lab_0x409fb1_2;\n    // 0x409fb1\n    goto lab_0x409fb1_2;\n}\n"
        },
        {
            "funcName": "function_40a000",
            "funcStartAddr": "40a000",
            "funcEndAddr": "40a148",
            "decompiledFuncCode": "int64_t function_40a000(uint64_t a1, int64_t a2) {\n    // 0x40a000\n    int128_t v1; // 0x40a000\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x40a013\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x40a017\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x40a01e\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x40a030\n            while (*(int64_t *)v7 == 0) {\n                // 0x40a030\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x40a06d\n                    goto lab_0x40a06d;\n                }\n            }\n        }\n    }\n  lab_0x40a06d:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x40a07c\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x40a000\n    int128_t v10; // 0x40a000\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x40a113\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x40a11c\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x40a0b3;\n        } else {\n            goto lab_0x40a129;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x40a0a6\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x40a129;\n        } else {\n            goto lab_0x40a0b3;\n        }\n    }\n  lab_0x40a0b3:\n    // 0x40a0b3\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x40a0b7\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x40a0b7\n    goto lab_0x40a0bc;\n  lab_0x40a129:\n    // 0x40a129\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x40a13a\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x40a0bc;\n  lab_0x40a0bc:\n    // 0x40a0bc\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_40a150",
            "funcStartAddr": "40a150",
            "funcEndAddr": "40a1a3",
            "decompiledFuncCode": "int64_t function_40a150(int64_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int64_t v1 = function_409bf0(a1, result); // 0x40a15a\n    int64_t v2 = *(int64_t *)v1; // 0x40a15f\n    if (v2 == 0) {\n        // 0x40a18d\n        return 0;\n    }\n    // 0x40a173\n    if (v2 == result) {\n        // 0x40a18d\n        return result;\n    }\n    int64_t v3 = v1; // 0x40a184\n    int64_t result2 = v2; // 0x40a182\n    while ((char)v1 == 0) {\n        // 0x40a184\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x40a18d\n            break;\n        }\n        // 0x40a170\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x40a18d\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x40a18d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a1b0",
            "funcStartAddr": "40a1b0",
            "funcEndAddr": "40a1f8",
            "decompiledFuncCode": "int64_t function_40a1b0(uint64_t a1) {\n    int64_t result = 0; // 0x40a1b5\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x40a1c7\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40a1be\n    if (v1 <= a1) {\n        // 0x40a1c7\n        return result;\n    }\n    int64_t v2 = a1; // 0x40a1c5\n    int64_t v3 = *(int64_t *)v2; // 0x40a1d9\n    result = v3;\n    while (v3 == 0) {\n        // 0x40a1d0\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x40a1c7\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x40a1c7\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a200",
            "funcStartAddr": "40a200",
            "funcEndAddr": "40a26a",
            "decompiledFuncCode": "int64_t function_40a200(int64_t a1, int64_t a2) {\n    int64_t v1 = function_409bf0(a1, a2); // 0x40a20c\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x40a228\n    while (*(int64_t *)v2 != a2) {\n        // 0x40a220\n        if (v3 == 0) {\n            goto lab_0x40a236;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x40a260\n        return *(int64_t *)v3;\n    }\n  lab_0x40a236:;\n    int64_t v4 = v1 + 16; // 0x40a248\n    int64_t result = 0; // 0x40a24f\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x40a240\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x40a253\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x40a253\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a270",
            "funcStartAddr": "40a270",
            "funcEndAddr": "40a2d4",
            "decompiledFuncCode": "int64_t function_40a270(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40a276\n    int64_t result = 0; // 0x40a27a\n    if (*v1 <= a1) {\n      lab_0x40a291:\n        // 0x40a291\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x40a27f\n    int64_t v4 = v2; // 0x40a285\n    int64_t v5; // 0x40a270\n    int64_t v6; // 0x40a270\n    int64_t v7; // 0x40a2b8\n    int64_t v8; // 0x40a2c1\n    int64_t v9; // 0x40a2a1\n    int64_t v10; // 0x40a2a5\n    if (v3 != 0) {\n        // 0x40a298\n        if (v2 >= a3) {\n            // break -> 0x40a291\n            break;\n        }\n        // 0x40a29d\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x40a2b5\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x40a2b0\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40a2b5\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x40a287\n    result = v11;\n    while (*v1 > v12) {\n        // 0x40a27f\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x40a298\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x40a291\n                break;\n            }\n            // 0x40a29d\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x40a2b5\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x40a2b0\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x40a2b5\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x40a287\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x40a291\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a2e0",
            "funcStartAddr": "40a2e0",
            "funcEndAddr": "40a358",
            "decompiledFuncCode": "int64_t function_40a2e0(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40a2f1\n    int64_t result = 0; // 0x40a2f5\n    if (v1 <= a1) {\n      lab_0x40a314:\n        // 0x40a314\n        return result;\n    }\n    int64_t v2 = a1; // 0x40a30a\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x40a308\n    int64_t v5 = v2; // 0x40a308\n    int64_t v6 = v3; // 0x40a308\n    int64_t v7; // 0x40a2e0\n    int64_t v8; // 0x40a338\n    int64_t v9; // 0x40a33c\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x40a338\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x40a348\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40a338\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x40a302\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x40a338\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x40a348\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x40a338\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x40a30a\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x40a314\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a360",
            "funcStartAddr": "40a360",
            "funcEndAddr": "40a391",
            "decompiledFuncCode": "int64_t function_40a360(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x40a367\n    if (v1 == 0) {\n        // 0x40a38d\n        return 0;\n    }\n    int64_t result = 0; // 0x40a367\n    v2++;\n    char v3 = *(char *)v2; // 0x40a383\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x40a38d\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a3a0",
            "funcStartAddr": "40a3a0",
            "funcEndAddr": "40a3c0",
            "decompiledFuncCode": "int64_t function_40a3a0(int64_t a1) {\n    // 0x40a3a0\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_40a3c0",
            "funcStartAddr": "40a3c0",
            "funcEndAddr": "40a54a",
            "decompiledFuncCode": "int64_t function_40a3c0(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40a3c0\n    int128_t v1; // 0x40a3c0\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x40a3fa\n    int64_t result = (int64_t)mem; // 0x40a3fa\n    if (mem == NULL) {\n        // 0x40a4aa\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x40a40b\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x40a3c0\n    int128_t v6; // 0x40a3c0\n    if (a2 == 0) {\n        // 0x40a4c0\n        *v4 = (int64_t)&g12;\n        int64_t v7 = function_409d40(v3); // 0x40a4c8\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x40a4cd\n        if ((char)v7 == 0) {\n            // 0x40a4a0\n            free(mem);\n            // 0x40a4aa\n            return 0;\n        }\n        // 0x40a4d9\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x40a523;\n        } else {\n            goto lab_0x40a4de;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_409d40(v3) == 0) {\n            // 0x40a4a0\n            free(mem);\n            // 0x40a4aa\n            return 0;\n        }\n        // 0x40a425\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_409b30(a1); // 0x40a433\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x40a4a0\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x40a4a0\n                free(mem);\n                // 0x40a4aa\n                return 0;\n            }\n            // 0x40a451\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x40a4a0\n                free(mem);\n                // 0x40a4aa\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x40a462\n            int64_t v10 = (int64_t)mem2; // 0x40a462\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x40a4a0\n                free(mem);\n                // 0x40a4aa\n                return 0;\n            }\n            // 0x40a46f\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x409bd0 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x409be0 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x40a4aa\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x40a518\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x40a4de;\n        } else {\n            goto lab_0x40a523;\n        }\n    }\n  lab_0x40a523:\n    // 0x40a523\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x40a533\n    int128_t v13 = v6; // 0x40a53c\n    int128_t v14 = __asm_addss(v12, v12); // 0x40a53c\n    goto lab_0x40a4e7;\n  lab_0x40a4de:\n    // 0x40a4de\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x40a4e7;\n  lab_0x40a4e7:\n    // 0x40a4e7\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x40a4a0\n    free(mem);\n    // 0x40a4aa\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40a550",
            "funcStartAddr": "40a550",
            "funcEndAddr": "40a5f8",
            "decompiledFuncCode": "int64_t function_40a550(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40a55a\n    uint64_t v2 = *v1; // 0x40a55a\n    int64_t result; // 0x40a550\n    if (v2 <= a1) {\n      lab_0x40a5e3:\n        // 0x40a5e3\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x40a568\n    while (*v6 == 0) {\n        // 0x40a568\n        v7 = v5 + 16;\n        int64_t v8; // 0x40a550\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x40a5e3\n            goto lab_0x40a5e3;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x40a579\n    int64_t v10 = *v9; // 0x40a579\n    int64_t v11 = *v3; // 0x40a57e\n    int64_t v12 = v11; // 0x40a585\n    int64_t v13 = v10; // 0x40a585\n    int64_t result2 = v11; // 0x40a585\n    int64_t * v14; // 0x40a59e\n    int64_t v15; // 0x40a59e\n    int64_t v16; // 0x40a59a\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x40a595\n            v16 = *v3;\n        }\n        // 0x40a59e\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x40a590\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40a595\n                v16 = *v3;\n            }\n            // 0x40a59e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40a5bd\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x40a5d0\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x40a5dd\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40a56c\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x40a568\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x40a5e3\n                goto lab_0x40a5e3;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x40a579\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x40a595\n                v16 = *v3;\n            }\n            // 0x40a59e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x40a590\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x40a595\n                    v16 = *v3;\n                }\n                // 0x40a59e\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40a5bd\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x40a5e3\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a600",
            "funcStartAddr": "40a600",
            "funcEndAddr": "40a6d6",
            "decompiledFuncCode": "int64_t function_40a600(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40a60f\n    uint64_t v2 = *v1; // 0x40a60f\n    int64_t v3 = a1; // 0x40a613\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x40a663;\n    } else {\n        // 0x40a615\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x40a663;\n        } else {\n            // 0x40a61c\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x40a631\n                int64_t v6; // 0x40a628\n                while (v5 == 0) {\n                    // 0x40a628\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x40a663\n                        goto lab_0x40a663;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x40a648\n                int64_t v8 = v7; // 0x40a64f\n                int64_t v9 = v5; // 0x40a64f\n                int64_t v10; // 0x40a600\n                int64_t v11; // 0x40a648\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x40a640\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x40a643\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x40a656\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x40a631\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x40a628\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x40a663\n                            goto lab_0x40a663;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x40a643\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x40a640\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x40a643\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x40a651\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x40a663;\n            } else {\n                goto lab_0x40a69c;\n            }\n        }\n    }\n  lab_0x40a663:\n    // 0x40a663\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x40a670\n        int64_t v14 = v13; // 0x40a677\n        int64_t v15 = v2; // 0x40a677\n        int64_t v16; // 0x40a680\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x40a680\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x40a691\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x40a691\n        int64_t v18 = v15; // 0x40a69a\n        int64_t v19 = v17; // 0x40a69a\n        while (v15 > v17) {\n            // 0x40a670\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x40a680\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x40a691\n                v15 = *v1;\n            }\n            // 0x40a691\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x40a69c;\n  lab_0x40a69c:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x40a69c\n    if (v20 == 0) {\n        // 0x40a6c1\n        free(NULL);\n        free((int64_t *)a1);\n        return &g56;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x40a6b0\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x40a6bf\n    while (v21 != 0) {\n        // 0x40a6b0\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x40a6c1\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g56;\n}\n"
        },
        {
            "funcName": "function_40a6e0",
            "funcStartAddr": "40a6e0",
            "funcEndAddr": "40a8da",
            "decompiledFuncCode": "int64_t function_40a6e0(int64_t a1, uint64_t a2) {\n    // 0x40a6e0\n    int128_t v1; // 0x40a6e0\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x40a6eb\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x40a6e0\n        if (a2 < 0) {\n            // 0x40a860\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x40a870\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x40a700\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x40a709\n        __asm_comiss(__asm_divss_5(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x40a852\n        return 0;\n    }\n    uint64_t nmemb = function_409b30(a2); // 0x40a743\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x40a852\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40a77b\n    if (*v6 == nmemb) {\n        // 0x40a852\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40a78d\n    int64_t v7 = (int64_t)mem; // 0x40a78d\n    int64_t v8 = v7; // bp-104, 0x40a792\n    if (mem == NULL) {\n        // 0x40a852\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x40a7ea\n    int64_t v10 = *v9; // 0x40a7ea\n    int64_t v11 = function_409dc0(&v8, a1, 0); // 0x40a7f3\n    int64_t result = v11 & 0xffffffff; // 0x40a7f8\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x40a7b4\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x40a816\n        function_409dc0(v13, v12, 1);\n        function_409dc0(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x40a8a0\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x40a852\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a8e0",
            "funcStartAddr": "40a8e0",
            "funcEndAddr": "40ab54",
            "decompiledFuncCode": "int64_t function_40a8e0(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x40a8e0\n    int128_t v1; // 0x40a8e0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40a8e0\n    int64_t v5 = function_409c20(a1, a2, &v4, 0); // 0x40a901\n    if (v5 != 0) {\n        // 0x40a90e\n        if (a3 != NULL) {\n            // 0x40a915\n            *a3 = v5;\n        }\n        // 0x40a919\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x40a928\n    uint64_t v7 = *v6; // 0x40a928\n    int64_t v8; // 0x40a8e0\n    int64_t v9; // 0x40a8e0\n    int64_t v10; // 0x40a8e0\n    int128_t v11; // 0x40a8e0\n    int128_t v12; // 0x40a8e0\n    int64_t v13; // 0x40a8e0\n    if (v7 < 0) {\n        // 0x40a9b0\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x40a9c0\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x40a9c4\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x40a9c9\n        int128_t v17 = __asm_addss(v15, v15); // 0x40a9cd\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x40a94b;\n        } else {\n            goto lab_0x40a9da;\n        }\n    } else {\n        // 0x40a931\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x40a935\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x40a939\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x40a93e\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x40a9da;\n        } else {\n            goto lab_0x40a94b;\n        }\n    }\n  lab_0x40a94b:\n    // 0x40a94b\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x40a954\n    __asm_comiss_2(v11, v21);\n    int128_t v22 = v21; // 0x40a95c\n    int128_t v23 = v11; // 0x40a95c\n    if (v13 == 0) {\n        goto lab_0x40a962;\n    } else {\n        goto lab_0x40aa01;\n    }\n  lab_0x40a9da:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x40a9e7\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x40a9ea\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x40a9f3\n    __asm_comiss_2(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x40a962;\n    } else {\n        goto lab_0x40aa01;\n    }\n  lab_0x40a962:;\n    int64_t * v28 = (int64_t *)v4; // 0x40a967\n    if (*v28 == 0) {\n        // 0x40aa78\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x40aa81\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x40a972\n    int64_t v31 = *v30; // 0x40a972\n    int64_t * v32; // 0x40a8e0\n    int64_t v33; // 0x40a8e0\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x40aa9d\n        if (mem == NULL) {\n            // 0x40a919\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x40aa9d\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x40a987\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x40a99d\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x40aa01:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x40aa01\n    function_409d40(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x40aa0a\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x40aa0e\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x40aa12\n    int128_t v44; // 0x40a8e0\n    if (v42 < 0) {\n        // 0x40aad0\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x40aae0\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x40aa20\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x40aa29\n    int128_t v47; // 0x40a8e0\n    int64_t v48; // 0x40a8e0\n    if (v46 < 0) {\n        // 0x40aab0\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x40aabd\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x40aac0\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x40aa32\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x40aa36\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x40aa3b\n    __asm_comiss_2(v47, __asm_mulss_4(__asm_movaps(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x40aa4b\n        int128_t v53 = v52; // 0x40aa54\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x40aaf0\n            v53 = __asm_mulss_4(v52, v43);\n        }\n        // 0x40aa5a\n        __asm_comiss(v53, 0x5f800000);\n        // 0x40a919\n        return 0xffffffff;\n    }\n    goto lab_0x40a962;\n}\n"
        },
        {
            "funcName": "function_40ab60",
            "funcStartAddr": "40ab60",
            "funcEndAddr": "40ab9b",
            "decompiledFuncCode": "int64_t function_40ab60(int64_t a1, int64_t a2) {\n    // 0x40ab60\n    int64_t v1; // bp-16, 0x40ab60\n    int64_t v2; // 0x40ab60\n    int32_t v3 = function_40a8e0(a1, a2, &v1, v2); // 0x40ab72\n    if (v3 == -1) {\n        // 0x40ab80\n        return 0;\n    }\n    // 0x40ab77\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_40aba0",
            "funcStartAddr": "40aba0",
            "funcEndAddr": "40ad77",
            "decompiledFuncCode": "int64_t function_40aba0(int64_t a1) {\n    // 0x40aba0\n    int128_t v1; // 0x40aba0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x40aba0\n    int64_t v5; // 0x40aba0\n    int64_t result = function_409c20(a1, v5, &v4, 1); // 0x40abb5\n    if (result == 0) {\n        // 0x40abd2\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x40abc7\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x40abd2\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x40abe0\n    uint64_t v8 = *v7 - 1; // 0x40abe4\n    *v7 = v8;\n    int64_t v9; // 0x40aba0\n    int64_t v10; // 0x40aba0\n    int64_t v11; // 0x40aba0\n    int128_t v12; // 0x40aba0\n    int128_t v13; // 0x40aba0\n    int64_t v14; // 0x40aba0\n    if (v8 < 0) {\n        // 0x40acd0\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x40ace0\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x40ace4\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x40ace9\n        int128_t v18 = __asm_addss(v16, v16); // 0x40aced\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x40ac0c;\n        } else {\n            goto lab_0x40acfa;\n        }\n    } else {\n        // 0x40abf2\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x40abf6\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x40abfa\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x40abff\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x40acfa;\n        } else {\n            goto lab_0x40ac0c;\n        }\n    }\n  lab_0x40ac0c:\n    // 0x40ac0c\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x40ac10\n    int64_t v23 = v14; // 0x40ac10\n    int128_t v24 = v12; // 0x40ac10\n    int64_t v25 = v10; // 0x40ac10\n    int128_t v26 = v22; // 0x40ac10\n    goto lab_0x40ac15;\n  lab_0x40acfa:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x40ad07\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x40ad0a\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x40ac15;\n  lab_0x40ac15:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x40ac15\n    __asm_comiss_2(v28, v27);\n    if (v23 == 0) {\n        // 0x40abd2\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x40ac1e\n    function_409d40(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x40ac27\n    int64_t v31 = *(int64_t *)v29; // 0x40ac2b\n    int128_t v32; // 0x40aba0\n    if (v30 < 0) {\n        // 0x40ad40\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x40ad50\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x40ac38\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x40ac41\n    int128_t v35; // 0x40aba0\n    int64_t v36; // 0x40aba0\n    if (v34 < 0) {\n        // 0x40ad20\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x40ad2d\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x40ad30\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x40ac4e\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x40ac52\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x40ac57\n    __asm_comiss_2(__asm_mulss_4(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x40abd2\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x40ac68\n    int128_t v41 = v40; // 0x40ac71\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x40ac73\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x40ac78\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x40ad68\n    if ((char)function_40a6e0(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x40abd2\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x40ac9a\n    if (*v43 != 0) {\n        int64_t v44; // 0x40aba0\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x40aca8\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x40acb9\n    *v43 = 0;\n    // 0x40abd2\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ad80",
            "funcStartAddr": "40ad80",
            "funcEndAddr": "40ad9b",
            "decompiledFuncCode": "int64_t function_40ad80(int64_t a1, int64_t a2) {\n    // 0x40ad80\n    *(int64_t *)(a1 + 20) = 0;\n    *(char *)(a1 + 28) = 1;\n    int32_t v1 = a2; // 0x40ad8c\n    *(int32_t *)a1 = v1;\n    *(int32_t *)(a1 + 4) = v1;\n    *(int32_t *)(a1 + 8) = v1;\n    *(int32_t *)(a1 + 12) = v1;\n    *(int32_t *)(a1 + 16) = v1;\n    int64_t result; // 0x40ad80\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ada0",
            "funcStartAddr": "40ada0",
            "funcEndAddr": "40ada5",
            "decompiledFuncCode": "int64_t function_40ada0(int64_t a1) {\n    // 0x40ada0\n    return (int64_t)*(char *)(a1 + 28);\n}\n"
        },
        {
            "funcName": "function_40adb0",
            "funcStartAddr": "40adb0",
            "funcEndAddr": "40ade5",
            "decompiledFuncCode": "int64_t function_40adb0(int64_t a1, int32_t a2) {\n    char * v1 = (char *)(a1 + 28); // 0x40adb0\n    int32_t * v2 = (int32_t *)(a1 + 20); // 0x40adb4\n    int32_t v3 = (int32_t)(*v1 ^ 1); // 0x40adbd\n    uint32_t v4 = (*v2 + v3) % 4; // 0x40adbf\n    int32_t * v5 = (int32_t *)((int64_t)(4 * v4) + a1); // 0x40adc8\n    *v5 = a2;\n    int32_t * v6 = (int32_t *)(a1 + 24); // 0x40adce\n    int32_t v7 = *v6; // 0x40adce\n    *v2 = v4;\n    if (v7 == v4) {\n        // 0x40add8\n        *v6 = (v7 + v3) % 4;\n    }\n    // 0x40ade0\n    *v1 = 0;\n    return (int64_t)*v5;\n}\n"
        },
        {
            "funcName": "function_40adf0",
            "funcStartAddr": "40adf0",
            "funcEndAddr": "40ae31",
            "decompiledFuncCode": "int64_t function_40adf0(int64_t a1) {\n    char * v1 = (char *)(a1 + 28); // 0x40adf4\n    if (*v1 != 0) {\n        abort();\n        // UNREACHABLE\n    }\n    int32_t * v2 = (int32_t *)(a1 + 20); // 0x40adfe\n    uint32_t v3 = *v2; // 0x40adfe\n    int32_t * v4 = (int32_t *)(4 * (int64_t)v3 + a1); // 0x40ae0b\n    int64_t result = (int64_t)*v4; // 0x40ae0b\n    *v4 = *(int32_t *)(a1 + 16);\n    if (v3 == *(int32_t *)(a1 + 24)) {\n        // 0x40ae28\n        *v1 = 1;\n        return result;\n    }\n    // 0x40ae14\n    *v2 = (v3 + 3) % 4;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ae40",
            "funcStartAddr": "40ae40",
            "funcEndAddr": "40b3a2",
            "decompiledFuncCode": "int64_t function_40ae40(void) {\n    char * v1 = nl_langinfo(14); // 0x40ae56\n    char * v2 = g49; // 0x40ae5b\n    char * v3; // 0x40ae40\n    int64_t v4; // 0x40ae40\n    int64_t v5; // 0x40ae40\n    int64_t v6; // 0x40ae40\n    int64_t v7; // 0x40ae40\n    int32_t size; // 0x40ae40\n    int32_t size2; // 0x40ae40\n    int32_t len; // 0x40af12\n    int64_t v8; // 0x40af12\n    char * env_val; // 0x40aefd\n    if (v2 == NULL) {\n        // 0x40aef8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x40af65;\n        } else {\n            // 0x40af0a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x40af65;\n            } else {\n                // 0x40af0f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40aefd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40b395\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x40af65;\n                    } else {\n                        // 0x40b309\n                        size2 = len + 14;\n                        goto lab_0x40af2b;\n                    }\n                } else {\n                    goto lab_0x40af2b;\n                }\n            }\n        }\n    } else {\n        // 0x40ae40\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40ae7a;\n    }\n  lab_0x40b1ac:;\n    // 0x40b1ac\n    struct _IO_FILE * stream; // 0x40afeb\n    int32_t v10 = __uflow(stream); // 0x40b1af\n    int64_t v11; // 0x40ae40\n    int64_t v12 = v11; // 0x40b1b9\n    int64_t v13; // 0x40ae40\n    int64_t v14 = v13; // 0x40b1b9\n    int32_t v15 = v10; // 0x40b1b9\n    int64_t v16; // 0x40ae40\n    int64_t v17 = v16; // 0x40b1b9\n    int64_t v18 = v11; // 0x40b1b9\n    int64_t v19 = v13; // 0x40b1b9\n    int64_t v20 = v16; // 0x40b1b9\n    if (v10 == -1) {\n        // break -> 0x40b1bf\n        goto lab_0x40b1bf;\n    }\n    goto lab_0x40b039;\n  lab_0x40b02e:;\n    // 0x40b02e\n    int64_t v90; // 0x40ae40\n    int64_t * v32; // 0x40b020\n    *v32 = v90 + 1;\n    int64_t v89; // 0x40ae40\n    v12 = v89;\n    int64_t v91; // 0x40ae40\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x40ae40\n    v17 = v92;\n    goto lab_0x40b039;\n  lab_0x40b039:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x40ae40\n    int32_t v25; // bp-120, 0x40ae40\n    int32_t v26; // bp-184, 0x40ae40\n    int64_t v27; // 0x40afeb\n    int64_t v28; // 0x40b008\n    int64_t v29; // 0x40b00d\n    int64_t * v30; // 0x40b024\n    switch (c) {\n        case 32: {\n            goto lab_0x40b020;\n        }\n        case 10: {\n            goto lab_0x40b020;\n        }\n        case 9: {\n            goto lab_0x40b020;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x40b211\n            int32_t v33; // 0x40ae40\n            char v34; // 0x40ae40\n            int32_t v35; // 0x40b21e\n            if (v31 < *v30) {\n                // 0x40b1f0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40b21b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x40b211\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x40b1f0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40b21b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x40b200\n                v36 = v33;\n            }\n            // 0x40b2ef\n            if (v36 == -1) {\n                // break -> 0x40b1bf\n                break;\n            }\n            goto lab_0x40b020;\n        }\n        default: {\n            // 0x40b04f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40b1bf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x40b078\n            int64_t v39 = v37 + 4; // 0x40b07a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x40b086\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x40b088\n            while (v41 == 0) {\n                // 0x40b078\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x40b0a6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x40b0b2\n            int64_t v45 = v43 + 4; // 0x40b0b4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x40b0c0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x40b0c2\n            while (v47 == 0) {\n                // 0x40b0b2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40b0af\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x40b0d8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x40b0e8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40b0ec\n            int64_t v52 = v51 + v48; // 0x40b0f5\n            int64_t * mem; // 0x40ae40\n            int64_t v53; // 0x40ae40\n            int64_t v54; // 0x40ae40\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40b22b\n                int64_t v56 = v55 + 3; // 0x40b237\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x40b111\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x40b120\n            if (mem == NULL) {\n                // 0x40b34c\n                free((int64_t *)v21);\n                function_40b830(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x40afc4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x40b138\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x40b142\n            uint32_t v62 = (int32_t)v59; // 0x40b145\n            int64_t v63; // 0x40ae40\n            if (v62 >= 8) {\n                // 0x40b254\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40b26e\n                int64_t v66 = v61 - v65; // 0x40b272\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40b27d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40b28e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40b28e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40b28b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40b31f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x40b157\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40b15b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40b16b\n            int64_t v74 = v60 - 1; // 0x40b16f\n            uint32_t v75 = (int32_t)v73; // 0x40b174\n            int64_t v76; // 0x40ae40\n            if (v75 >= 8) {\n                // 0x40b2a2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40b2ac\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40b2bc\n                int64_t v80 = v74 - v79; // 0x40b2c0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40b2cb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40b2db\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x40b2d9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x40b336\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40b33e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x40b186\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40b18a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x40b383\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40b19e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40b02e;\n            } else {\n                goto lab_0x40b1ac;\n            }\n        }\n    }\n  lab_0x40b020:;\n    int64_t v93 = v23; // 0x40ae40\n    int64_t v94 = v22; // 0x40ae40\n    int64_t v95 = v21; // 0x40ae40\n    goto lab_0x40b020_2;\n  lab_0x40af65:;\n    int64_t * mem3 = malloc(size); // 0x40af65\n    int64_t v97 = (int64_t)&g10; // 0x40af70\n    int64_t v98; // 0x40ae40\n    int64_t path; // 0x40ae40\n    if (mem3 == NULL) {\n        goto lab_0x40af42;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x40af65\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x40af86;\n    }\n  lab_0x40ae7a:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x40ae6d\n    char v100 = *v3; // 0x40ae7a\n    int64_t v101; // 0x40ae40\n    if (v100 == 0) {\n        // 0x40aed4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x40ae40\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x40ae40\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x40aec0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x40aec7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x40ae90\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40ae9d\n        char v107 = *(char *)v106; // 0x40aea2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x40aed4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40aeab\n    v104 = v103 + 1;\n  lab_0x40aec7:\n    // 0x40aed4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x40af42:;\n    char * v108 = (char *)v97;\n    g49 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40ae7a;\n  lab_0x40af86:;\n    int64_t v109 = v98 + path; // 0x40af86\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x40afb2\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x40afe1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40b312\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x40b005\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x40b020_2:;\n                uint64_t v96 = *v32; // 0x40b020\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40b1ac;\n                } else {\n                    goto lab_0x40b02e;\n                }\n            }\n          lab_0x40b1bf:\n            // 0x40b1bf\n            function_40b830(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x40b1de\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x40afc4;\n  lab_0x40af2b:;\n    int64_t * mem4 = malloc(size2); // 0x40af2b\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x40afd1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x40af86;\n    } else {\n        goto lab_0x40af42;\n    }\n  lab_0x40afc4:\n    // 0x40afc4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x40af42;\n}\n"
        },
        {
            "funcName": "function_40b3b0",
            "funcStartAddr": "40b3b0",
            "funcEndAddr": "40b3db",
            "decompiledFuncCode": "int64_t function_40b3b0(int32_t err_num) {\n    // 0x40b3b0\n    error(g20, err_num, dcgettext(NULL, \"unable to record current working directory\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40b3e0",
            "funcStartAddr": "40b3e0",
            "funcEndAddr": "40b40b",
            "decompiledFuncCode": "int64_t function_40b3e0(int32_t err_num) {\n    // 0x40b3e0\n    error(g20, err_num, dcgettext(NULL, \"failed to return to initial working directory\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40b410",
            "funcStartAddr": "40b410",
            "funcEndAddr": "40b45a",
            "decompiledFuncCode": "int64_t function_40b410(int64_t fd, int64_t path, int32_t oflag, int64_t a4) {\n    uint32_t v1 = openat((int32_t)fd, (char *)path, oflag); // 0x40b422\n    return function_40b4f0((int64_t)v1);\n}\n"
        },
        {
            "funcName": "function_40b460",
            "funcStartAddr": "40b460",
            "funcEndAddr": "40b4aa",
            "decompiledFuncCode": "int64_t function_40b460(int64_t * a1) {\n    int64_t * v1 = (int64_t *)((int64_t)a1 + 8); // 0x40b46b\n    *v1 = 0;\n    int64_t v2; // 0x40b460\n    int32_t v3 = function_409a80((int64_t)\".\", 0x80000, (int32_t)v2); // 0x40b47f\n    *(int32_t *)a1 = v3;\n    if (v3 >= 0) {\n        // 0x40b487\n        return 0;\n    }\n    int64_t v4 = function_40ba90(0, 0); // 0x40b494\n    *v1 = v4;\n    return v4 == 0 ? 0xffffffff : 0;\n}\n"
        },
        {
            "funcName": "function_40b4b0",
            "funcStartAddr": "40b4b0",
            "funcEndAddr": "40b4c9",
            "decompiledFuncCode": "int64_t function_40b4b0(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int32_t fd = v1;\n    if (fd < 0) {\n        // 0x40b4c0\n        return function_40b5c0(*(int64_t *)(v1 + 8));\n    }\n    // 0x40b4b6\n    return fchdir(fd);\n}\n"
        },
        {
            "funcName": "function_40b4d0",
            "funcStartAddr": "40b4d0",
            "funcEndAddr": "40b4e9",
            "decompiledFuncCode": "int64_t function_40b4d0(int64_t * a1) {\n    // 0x40b4d0\n    int64_t v1; // 0x40b4d0\n    uint32_t fd = (int32_t)v1;\n    if (fd >= 0) {\n        // 0x40b4da\n        close(fd);\n    }\n    // 0x40b4df\n    free((int64_t *)*(int64_t *)((int64_t)a1 + 8));\n    return &g56;\n}\n"
        },
        {
            "funcName": "function_40b4f0",
            "funcStartAddr": "40b4f0",
            "funcEndAddr": "40b53e",
            "decompiledFuncCode": "int64_t function_40b4f0(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x40b4fc\n    if (fd >= 3) {\n        // 0x40b501\n        return a1 & 0xffffffff;\n    }\n    // 0x40b510\n    int64_t v1; // 0x40b4f0\n    int64_t v2 = function_40c070(a1, v1); // 0x40b510\n    int32_t * v3 = __errno_location(); // 0x40b518\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40b540",
            "funcStartAddr": "40b540",
            "funcEndAddr": "40b580",
            "decompiledFuncCode": "int64_t function_40b540(int32_t fd) {\n    // 0x40b540\n    if (fd < 0) {\n        // 0x40b544\n        int64_t result; // 0x40b540\n        return result;\n    }\n    int32_t result2 = close(fd); // 0x40b54c\n    if (result2 == 0) {\n        // 0x40b555\n        return result2;\n    }\n    // 0x40b55a\n    __assert_fail(\"! close_fail\", \"lib/chdir-long.c\", 64, \"cdb_free\");\n    return &g56;\n}\n"
        },
        {
            "funcName": "function_40b580",
            "funcStartAddr": "40b580",
            "funcEndAddr": "40b5b7",
            "decompiledFuncCode": "int64_t function_40b580(int32_t * a1) {\n    // 0x40b580\n    int64_t path; // 0x40b580\n    int32_t fd = path;\n    uint32_t v1 = openat(fd, (char *)path, O_NOCTTY | O_NONBLOCK | O_DIRECTORY); // 0x40b592\n    int64_t result = 0xffffffff; // 0x40b599\n    if (v1 >= 0) {\n        // 0x40b59b\n        function_40b540(fd);\n        *a1 = v1;\n        result = 0;\n    }\n    // 0x40b5a8\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b5c0",
            "funcStartAddr": "40b5c0",
            "funcEndAddr": "40b830",
            "decompiledFuncCode": "int64_t function_40b5c0(int64_t a1) {\n    char * path = (char *)a1; // 0x40b5cf\n    uint32_t result = chdir(path); // 0x40b5cf\n    if (result == 0) {\n        // 0x40b706\n        return 0;\n    }\n    int32_t * v1 = __errno_location(); // 0x40b5de\n    if (*v1 != 36) {\n        // 0x40b706\n        return result;\n    }\n    int32_t len = strlen(path); // 0x40b5f2\n    int32_t fd = -100; // bp-44, 0x40b5f7\n    if (len == 0) {\n        // 0x40b812\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g56;\n    }\n    if (len < 0x1000) {\n        // 0x40b7f9\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x40b812\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g56;\n    }\n    int64_t v2 = len; // 0x40b5f2\n    int32_t ini_seg_bytes = strspn(path, \"/\"); // 0x40b61f\n    int64_t v3; // 0x40b5c0\n    if (ini_seg_bytes == 2) {\n        int64_t v4 = function_40bf60(a1 + 3, 47, v2 - 3); // 0x40b745\n        if (v4 == 0) {\n            // 0x40b706\n            return 0xffffffff;\n        }\n        char * v5 = (char *)v4; // 0x40b752\n        *v5 = 0;\n        int64_t v6 = function_40b580(&fd); // 0x40b75d\n        *v5 = 47;\n        if ((int32_t)v6 != 0) {\n            goto lab_0x40b6f0;\n        } else {\n            int64_t str = v4 + 1; // 0x40b769\n            v3 = str + (int64_t)strspn((char *)str, \"/\");\n            goto lab_0x40b63d;\n        }\n    } else {\n        // 0x40b631\n        v3 = a1;\n        if (ini_seg_bytes != 0) {\n            // 0x40b718\n            if ((int32_t)function_40b580(&fd) != 0) {\n                goto lab_0x40b6f0;\n            } else {\n                // 0x40b72b\n                v3 = (int64_t)ini_seg_bytes + a1;\n                goto lab_0x40b63d;\n            }\n        } else {\n            goto lab_0x40b63d;\n        }\n    }\n  lab_0x40b6f0:\n    // 0x40b6f0\n    function_40b540(fd);\n    // 0x40b706\n    return 0xffffffff;\n  lab_0x40b63d:\n    // 0x40b63d\n    if (*(char *)v3 == 47) {\n      lab_0x40b7c7:\n        // 0x40b7c7\n        __assert_fail(\"*dir != '/'\", \"lib/chdir-long.c\", 162, \"chdir_long\");\n        // 0x40b7e0\n        __assert_fail(\"dir <= dir_end\", \"lib/chdir-long.c\", 163, \"chdir_long\");\n        // 0x40b7f9\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x40b812\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g56;\n    }\n    uint64_t v7 = v2 + a1; // 0x40b647\n    if (v7 < v3) {\n        // 0x40b7e0\n        __assert_fail(\"dir <= dir_end\", \"lib/chdir-long.c\", 163, \"chdir_long\");\n        // 0x40b7f9\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x40b812\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g56;\n    }\n    int64_t v8 = v3; // 0x40b6bd\n    int64_t v9 = v3; // 0x40b6bd\n    if (v7 - v3 > 4095) {\n        int64_t * v10 = memrchr((int64_t *)v8, 47, 0x1000); // 0x40b665\n        while (v10 != NULL) {\n            int64_t v11 = (int64_t)v10; // 0x40b665\n            *(char *)v10 = 0;\n            if (v11 - v8 > 4095) {\n                // 0x40b7ae\n                __assert_fail(\"slash - dir < 4096\", \"lib/chdir-long.c\", 179, \"chdir_long\");\n                goto lab_0x40b7c7;\n            }\n            int64_t v12 = function_40b580(&fd); // 0x40b690\n            *(char *)v10 = 47;\n            if ((int32_t)v12 != 0) {\n                goto lab_0x40b6f0;\n            }\n            int64_t str2 = v11 + 1; // 0x40b69c\n            int64_t v13 = str2 + (int64_t)strspn((char *)str2, \"/\"); // 0x40b6ad\n            v8 = v13;\n            v9 = v13;\n            if (v7 - v13 <= 4095) {\n                goto lab_0x40b6bf;\n            }\n            v10 = memrchr((int64_t *)v8, 47, 0x1000);\n        }\n        // 0x40b788\n        *v1 = 36;\n        // 0x40b706\n        return 0xffffffff;\n    }\n  lab_0x40b6bf:\n    // 0x40b6bf\n    if (v7 > v9) {\n        // 0x40b6c4\n        if ((int32_t)function_40b580(&fd) != 0) {\n            goto lab_0x40b6f0;\n        } else {\n            goto lab_0x40b6d5;\n        }\n    } else {\n        goto lab_0x40b6d5;\n    }\n  lab_0x40b6d5:\n    // 0x40b6d5\n    if (fchdir(fd) == 0) {\n        // 0x40b7a0\n        function_40b540(fd);\n        // 0x40b706\n        return 0;\n    }\n    goto lab_0x40b6f0;\n}\n"
        },
        {
            "funcName": "function_40b830",
            "funcStartAddr": "40b830",
            "funcEndAddr": "40b8ab",
            "decompiledFuncCode": "int64_t function_40b830(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40b837\n    if (fileno(stream) < 0) {\n        // 0x40b897\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40b84a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40b87b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x40b897\n            return fclose(stream);\n        }\n    }\n    // 0x40b84c\n    if ((int32_t)function_40b9f0(a1, v1) == 0) {\n        // 0x40b897\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x40b858\n    int32_t v3 = *v2; // 0x40b860\n    int64_t result = fclose(stream); // 0x40b86e\n    if (v3 != 0) {\n        // 0x40b8a0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x40b870\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b8b0",
            "funcStartAddr": "40b8b0",
            "funcEndAddr": "40b9e5",
            "decompiledFuncCode": "int64_t function_40b8b0(int64_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x40b8e0\n    if (cmd != 1030) {\n        // 0x40b990\n        return fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40b8ec\n    int64_t v2; // 0x40b8b0\n    if (g50 < 0) {\n        int64_t v3 = function_40b8b0(fd, 0, v1, a4); // 0x40b934\n        int64_t v4 = v3 & 0xffffffff; // 0x40b939\n        if ((int32_t)v3 < 0) {\n            // 0x40b920\n            return v4 & 0xffffffff;\n        }\n        // 0x40b93f\n        v2 = v4;\n        if (g50 != -1) {\n            // 0x40b920\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x40b907\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x40b916\n            g50 = 1;\n            // 0x40b920\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_40b8b0(fd & 0xffffffff, 0, v1, a4); // 0x40b9c7\n        int64_t v7 = v6 & 0xffffffff; // 0x40b9cc\n        if ((int32_t)v6 < 0) {\n            // 0x40b920\n            return v7 & 0xffffffff;\n        }\n        // 0x40b9d6\n        g50 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x40b94f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40b95a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x40b920\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x40b972\n    close(fd2);\n    // 0x40b920\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40b9f0",
            "funcStartAddr": "40b9f0",
            "funcEndAddr": "40ba30",
            "decompiledFuncCode": "int64_t function_40b9f0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40ba0a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40ba0a\n        return fflush(stream);\n    }\n    // 0x40ba18\n    function_40ba30(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_40ba30",
            "funcStartAddr": "40ba30",
            "funcEndAddr": "40ba87",
            "decompiledFuncCode": "int64_t function_40ba30(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x40ba30\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40ba3a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40ba6b\n    int64_t result = -1; // 0x40ba74\n    if (v1 != -1) {\n        // 0x40ba76\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x40ba82\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ba90",
            "funcStartAddr": "40ba90",
            "funcEndAddr": "40bf52",
            "decompiledFuncCode": "int64_t function_40ba90(int32_t a1, int32_t a2) {\n    // 0x40ba90\n    int32_t size; // 0x40ba90\n    int32_t v1; // 0x40ba90\n    int32_t v2; // 0x40ba90\n    if (a2 != 0) {\n        // 0x40baf0\n        size = a2;\n        v1 = a2;\n        v2 = a1;\n        if (a1 == 0) {\n            goto lab_0x40bac2;\n        } else {\n            goto lab_0x40bb0c;\n        }\n    } else {\n        // 0x40bab0\n        size = 0x1000;\n        if (a1 != 0) {\n            // 0x40beb0\n            *__errno_location() = 22;\n            // 0x40bad6\n            return 0;\n        }\n        goto lab_0x40bac2;\n    }\n  lab_0x40be50:;\n    // 0x40be50\n    int32_t v3; // 0x40be4a\n    int64_t v4 = v3; // 0x40be52\n    int64_t v5; // 0x40ba90\n    int64_t dirp2 = v5; // 0x40be52\n    int32_t * v6; // 0x40bb96\n    if (v3 != 0) {\n        goto lab_0x40be61;\n    } else {\n        // 0x40be54\n        *v6 = 2;\n        v4 = 2;\n        dirp2 = v5;\n        goto lab_0x40be61;\n    }\n  lab_0x40bc62:;\n    // 0x40bc62\n    int64_t v7; // 0x40ba90\n    int64_t v8 = v7;\n    int64_t v9; // 0x40ba90\n    int64_t v10 = v9 + 19; // 0x40bc62\n    char * str = (char *)v10;\n    int64_t v11; // bp-200, 0x40ba90\n    int64_t v12; // 0x40ba90\n    int32_t v13; // 0x40ba90\n    int32_t fd; // 0x40bbb2\n    if ((v13 & 0xf000) == 0x4000 == __fxstatat(1, fd, str, (struct stat *)&v11, 256) == 0) {\n        // 0x40bc95\n        if (v11 == v12) {\n            // break -> 0x40bcb0\n            goto lab_0x40bcb0;\n        }\n    }\n    int64_t v14 = v8; // 0x40ba90\n    goto lab_0x40bc20_2;\n  lab_0x40bf2e_2:\n    // 0x40bf2e\n    *v6 = 12;\n    v4 = 12;\n    dirp2 = v5;\n    goto lab_0x40be61;\n  lab_0x40bac2:;\n    int64_t * mem = malloc(size); // 0x40bac7\n    int32_t v41 = (int64_t)mem; // 0x40bacc\n    int32_t result = v41; // 0x40bad4\n    v1 = size;\n    v2 = v41;\n    if (mem == NULL) {\n        // 0x40bad6\n        return result;\n    }\n    goto lab_0x40bb0c;\n  lab_0x40bb0c:;\n    int32_t v42 = v2;\n    int64_t v43 = v42;\n    int64_t v44 = v1;\n    int64_t v45 = v43 + v44; // 0x40bb11\n    int64_t v46 = v45 - 1; // 0x40bb20\n    *(char *)v46 = 0;\n    int64_t v47; // 0x40ba90\n    int64_t v48; // 0x40ba90\n    int32_t * v49; // 0x40ba90\n    int64_t v50; // 0x40ba90\n    int64_t v33; // 0x40ba90\n    int64_t v40; // 0x40ba90\n    int64_t v51; // 0x40ba90\n    int32_t v38; // 0x40ba90\n    int32_t v52; // 0x40ba90\n    int32_t v53; // 0x40ba90\n    if (__lxstat(1, \".\", (struct stat *)&v11) < 0) {\n        goto lab_0x40be88;\n    } else {\n        // 0x40bb36\n        if (__lxstat(1, \"/\", (struct stat *)&v11) < 0) {\n            goto lab_0x40be88;\n        } else {\n            // 0x40bb61\n            v47 = v44;\n            v48 = v43;\n            v52 = v42;\n            v51 = v46;\n            v50 = v45;\n            if (true) {\n                goto lab_0x40bda8;\n            } else {\n                // 0x40bb96\n                v6 = __errno_location();\n                int32_t v54 = v1; // 0x40bba3\n                int32_t v55 = v42; // 0x40bba3\n                int64_t v56 = v11; // 0x40bba3\n                int64_t v57 = v46; // 0x40bba3\n                int64_t v58 = 0; // 0x40bba3\n                int32_t fd2 = -100; // 0x40bba3\n                int64_t dirp3; // 0x40ba90\n                while (true) {\n                    // 0x40bba6\n                    dirp3 = v58;\n                    v38 = v55;\n                    fd = openat(fd2, \"..\", O_RDONLY);\n                    if (fd < 0) {\n                        // break -> 0x40bed7\n                        break;\n                    }\n                    // 0x40bbc2\n                    if (__fxstat(1, fd, (struct stat *)&v11) != 0) {\n                        int64_t v59 = (int64_t)*v6; // 0x40bee8\n                        v40 = v59;\n                        if (dirp3 == 0) {\n                            goto lab_0x40becd;\n                        } else {\n                            // 0x40bef1\n                            closedir((struct __dirstream *)dirp3);\n                            v40 = v59;\n                            goto lab_0x40becd;\n                        }\n                    }\n                    // 0x40bbdb\n                    v12 = v56;\n                    int32_t v60 = v54;\n                    if (dirp3 != 0) {\n                        // 0x40bbe0\n                        if (closedir((struct __dirstream *)dirp3) != 0) {\n                            // 0x40bec9\n                            v40 = (int64_t)*v6;\n                            goto lab_0x40becd;\n                        }\n                    }\n                    struct __dirstream * dirp = fdopendir(fd); // 0x40bc07\n                    if (dirp == NULL) {\n                        // 0x40bec9\n                        v40 = (int64_t)*v6;\n                        goto lab_0x40becd;\n                    }\n                    // 0x40bc18\n                    v5 = (int64_t)dirp;\n                    v14 = false;\n                    while (true) {\n                      lab_0x40bc20_2:;\n                        int64_t v15 = v14; // 0x40ba90\n                        int64_t v16; // 0x40ba90\n                        int64_t v17; // 0x40ba90\n                        while (true) {\n                            int64_t v18 = v15;\n                            *v6 = 0;\n                            struct dirent * v19 = readdir(dirp); // 0x40bc2b\n                            int64_t v20; // 0x40ba90\n                            int64_t v21; // 0x40ba90\n                            if (v19 == NULL) {\n                                int32_t v22 = *v6; // 0x40be00\n                                v3 = v22;\n                                if ((char)v18 == 0 || v22 != 0) {\n                                    goto lab_0x40be50;\n                                }\n                                // 0x40be0d\n                                rewinddir(dirp);\n                                struct dirent * v23 = readdir(dirp); // 0x40be18\n                                if (v23 == NULL) {\n                                    // 0x40be4a\n                                    v3 = *v6;\n                                    goto lab_0x40be50;\n                                }\n                                int64_t v24 = (int64_t)v23;\n                                v9 = v24;\n                                v7 = 0;\n                                v21 = v24;\n                                v20 = 0;\n                                if (*(char *)(v24 + 19) != 46) {\n                                    goto lab_0x40bc62;\n                                }\n                            } else {\n                                int64_t v25 = (int64_t)v19;\n                                v17 = v25;\n                                v16 = v18;\n                                v21 = v25;\n                                v20 = v18;\n                                if (*(char *)(v25 + 19) != 46) {\n                                    // break -> 0x40bc43\n                                    break;\n                                }\n                            }\n                            int64_t v26 = v20;\n                            int64_t v27 = v21;\n                            int64_t v28 = v27 + 20; // 0x40be30\n                            if (*(char *)v28 != 0) {\n                                // 0x40be3a\n                                v17 = v27;\n                                v16 = v26;\n                                if (*(int16_t *)v28 != 46) {\n                                    // break -> 0x40bc43\n                                    break;\n                                }\n                            }\n                            // 0x40bc20\n                            v15 = v26;\n                        }\n                        int64_t v29 = v16;\n                        int64_t v30 = v17;\n                        v9 = v30;\n                        v7 = v29;\n                        if ((char)v29 == 0) {\n                            goto lab_0x40bc62;\n                        } else {\n                            // 0x40bc48\n                            v9 = v30;\n                            v7 = 1;\n                            int64_t v31 = v29; // 0x40bc5d\n                            int64_t v32; // 0x40ba90\n                            if (v11 == v12 && *(int64_t *)v30 != v32) {\n                                // 0x40bc20\n                                v14 = v31;\n                                goto lab_0x40bc20_2;\n                            } else {\n                                goto lab_0x40bc62;\n                            }\n                        }\n                    }\n                  lab_0x40bcb0:;\n                    int64_t v61 = v38; // 0x40bcb8\n                    uint64_t v62 = v57 - v61; // 0x40bcb8\n                    int32_t len = strlen(str); // 0x40bcbd\n                    uint64_t v63 = (int64_t)len; // 0x40bcbd\n                    int32_t v64 = v60; // 0x40bcc8\n                    int32_t v65 = v38; // 0x40bcc8\n                    int64_t dest_mem = v57; // 0x40bcc8\n                    if (v62 <= v63) {\n                        if (a2 != 0) {\n                            // 0x40bf40\n                            *v6 = 34;\n                            v4 = 34;\n                            dirp2 = v5;\n                            goto lab_0x40be61;\n                        }\n                        uint64_t v66 = (int64_t)v60; // 0x40bcd6\n                        int64_t v67 = len >= v60 ? v63 : v66; // 0x40bce1\n                        uint64_t v68 = v67 + v66; // 0x40bce5\n                        if (v68 < v66) {\n                            goto lab_0x40bf2e_2;\n                        }\n                        // 0x40bcf8\n                        v64 = v68;\n                        int64_t * mem2 = realloc((int64_t *)v61, v64); // 0x40bd00\n                        if (mem2 == NULL) {\n                            goto lab_0x40bf2e_2;\n                        }\n                        int64_t v69 = (int64_t)mem2; // 0x40bd00\n                        int64_t v70 = v62 + v69;\n                        v65 = v69;\n                        dest_mem = (int64_t)memcpy((int64_t *)(v70 + v67), (int64_t *)v70, v60 - (int32_t)v62);\n                    }\n                    int32_t v71 = v65;\n                    int32_t v72 = v64;\n                    int64_t v73 = (int64_t)memcpy((int64_t *)(dest_mem - v63), (int64_t *)v10, len) - 1; // 0x40bd5d\n                    *(char *)v73 = 47;\n                    v54 = v72;\n                    v55 = v71;\n                    v56 = v11;\n                    v57 = v73;\n                    v58 = v5;\n                    fd2 = fd;\n                    // 0x40bd8e\n                    v53 = v71;\n                    v49 = v6;\n                    if (closedir(dirp) != 0) {\n                        goto lab_0x40be90;\n                    } else {\n                        int64_t v74 = v71;\n                        int64_t v75 = v72;\n                        v47 = v75;\n                        v48 = v74;\n                        v52 = v71;\n                        v51 = v73;\n                        v50 = v74 + v75;\n                        goto lab_0x40bda8;\n                    }\n                }\n                int64_t v76 = (int64_t)*v6; // 0x40bed7\n                v4 = v76;\n                dirp2 = dirp3;\n                v33 = v76;\n                if (dirp3 == 0) {\n                    goto lab_0x40be69;\n                } else {\n                    goto lab_0x40be61;\n                }\n            }\n        }\n    }\n  lab_0x40be88:\n    // 0x40be88\n    v53 = v42;\n    v49 = __errno_location();\n    goto lab_0x40be90;\n  lab_0x40be90:;\n    int64_t v77 = (int64_t)*v49; // 0x40be96\n    int64_t v34 = v77; // 0x40be9a\n    int32_t * v35 = v49; // 0x40be9a\n    int32_t * v36 = v49; // 0x40be9a\n    int32_t v37 = v53; // 0x40be9a\n    int64_t v39 = v77; // 0x40be9a\n    if (a1 != 0) {\n        goto lab_0x40be71;\n    } else {\n        goto lab_0x40be9c;\n    }\n  lab_0x40be71:\n    // 0x40be71\n    *v35 = (int32_t)v34;\n    // 0x40bad6\n    return 0;\n  lab_0x40be9c:\n    // 0x40be9c\n    free((int64_t *)(int64_t)v37);\n    v34 = v39;\n    v35 = v36;\n    goto lab_0x40be71;\n  lab_0x40bda8:\n    // 0x40bda8\n    if (v51 == v47 - 1 + v48) {\n        // 0x40bf17\n        int64_t v78; // 0x40ba90\n        int64_t v79 = v78 - 1; // 0x40bf1c\n        *(char *)v79 = 47;\n    }\n    int64_t * v80 = (int64_t *)v48; // 0x40bdd2\n    int32_t v81 = v50 - v51; // 0x40bdd2\n    memmove(v80, (int64_t *)v51, v81);\n    int32_t mem3 = a1; // 0x40bddd\n    if (a2 == 0) {\n        // 0x40bf00\n        mem3 = (int64_t)realloc(v80, v81);\n    }\n    int32_t v82 = mem3;\n    int32_t result2 = v82 == 0 ? v52 : v82;\n    // 0x40bad6\n    return result2;\n  lab_0x40be69:\n    // 0x40be69\n    v34 = v33;\n    v35 = v6;\n    v36 = v6;\n    v37 = v38;\n    v39 = v33;\n    if (a1 == 0) {\n        goto lab_0x40be9c;\n    } else {\n        goto lab_0x40be71;\n    }\n  lab_0x40be61:\n    // 0x40be61\n    closedir((struct __dirstream *)dirp2);\n    v33 = v4;\n    goto lab_0x40be69;\n  lab_0x40becd:\n    // 0x40becd\n    close(fd);\n    v33 = v40;\n    goto lab_0x40be69;\n}\n"
        },
        {
            "funcName": "function_40bf60",
            "funcStartAddr": "40bf60",
            "funcEndAddr": "40c064",
            "decompiledFuncCode": "int64_t function_40bf60(int64_t result, uint64_t a2, int64_t a3) {\n    // 0x40bf60\n    if (a3 == 0) {\n        // 0x40bf99\n        return 0;\n    }\n    int64_t v1 = result; // 0x40bf6c\n    int64_t v2 = a3; // 0x40bf6c\n    int64_t result2; // 0x40bf60\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x40bf6e\n        int64_t v4 = result; // 0x40bf71\n        if ((char)result == v3) {\n            // 0x40bf99\n            return result;\n        }\n        int64_t v5 = a3; // 0x40bf71\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x40bf80\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x40bfa0;\n            }\n            // 0x40bf86\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x40bf99\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x40bf99\n        return result2;\n    }\n  lab_0x40bfa0:;\n    int64_t result3 = v1; // 0x40bfcd\n    int64_t v6 = v2; // 0x40bfcd\n    if (v2 >= 8) {\n        int64_t v7 = 256 * a2 & 0xff00 | a2 % 256; // 0x40bfaf\n        int64_t v8 = 0x10000 * v7 | v7; // 0x40bfbc\n        int64_t v9 = 0x100000000 * v8 | v8; // 0x40bfc6\n        int64_t v10 = *(int64_t *)v1 ^ v9; // 0x40bfe6\n        result3 = v1;\n        v6 = v2;\n        if (((v10 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v10 - 0x101010101010101) == 0) {\n            int64_t v11 = v2 - 8; // 0x40c015\n            int64_t v12 = v1 + 8; // 0x40c019\n            while (v11 >= 8) {\n                int64_t v13 = *(int64_t *)v12 ^ v9; // 0x40c003\n                result3 = v12;\n                v6 = v11;\n                if (((v13 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v13 - 0x101010101010101) != 0) {\n                    goto lab_0x40c02c;\n                }\n                v11 -= 8;\n                v12 += 8;\n            }\n            // 0x40c023\n            result3 = v12;\n            v6 = v11;\n            if (v11 == 0) {\n                // 0x40bf99\n                return 0;\n            }\n        }\n    }\n  lab_0x40c02c:;\n    char v14 = a2; // 0x40c02c\n    if (*(char *)result3 == v14) {\n        // 0x40bf99\n        return result3;\n    }\n    int64_t v15 = result3 + 1;\n    result2 = 0;\n    while (v15 != v6 + result3) {\n        // 0x40c040\n        result2 = v15;\n        if (*(char *)v15 == v14) {\n            // break -> 0x40bf99\n            break;\n        }\n        v15++;\n        result2 = 0;\n    }\n    // 0x40bf99\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c070",
            "funcStartAddr": "40c070",
            "funcEndAddr": "40c07e",
            "decompiledFuncCode": "int64_t function_40c070(int64_t a1, int64_t a2) {\n    // 0x40c070\n    int64_t v1; // 0x40c070\n    return function_40b8b0(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_40c080",
            "funcStartAddr": "40c080",
            "funcEndAddr": "40c0dd",
            "decompiledFuncCode": "int64_t function_40c080(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40c080\n    return function_401b40();\n}\n"
        },
        {
            "funcName": "function_40c0e0",
            "funcStartAddr": "40c0e0",
            "funcEndAddr": "40c0e1",
            "decompiledFuncCode": "int64_t function_40c0e0(void) {\n    // 0x40c0e0\n    int64_t result; // 0x40c0e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c0f0",
            "funcStartAddr": "40c0f0",
            "funcEndAddr": "40c108",
            "decompiledFuncCode": "int64_t function_40c0f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40c0f0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g18);\n}\n"
        },
        {
            "funcName": "function_40c108",
            "funcStartAddr": "40c108",
            "funcEndAddr": "40c128",
            "decompiledFuncCode": "int64_t function_40c108(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g14; // 0x40c112\n    while (*(int64_t *)v1 != -1) {\n        // 0x40c113\n        v1 -= 8;\n    }\n    // 0x40c124\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_chgrp.elf"
}