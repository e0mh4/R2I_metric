{
    "funcInfo": [
        {
            "funcName": "function_401bb0",
            "funcStartAddr": "401bb0",
            "funcEndAddr": "401bb5",
            "decompiledFuncCode": "int64_t function_401bb0(void) {\n    // 0x401bb0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bb5",
            "funcStartAddr": "401bb5",
            "funcEndAddr": "401bba",
            "decompiledFuncCode": "int64_t function_401bb5(void) {\n    // 0x401bb5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bba",
            "funcStartAddr": "401bba",
            "funcEndAddr": "401bbf",
            "decompiledFuncCode": "int64_t function_401bba(void) {\n    // 0x401bba\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bbf",
            "funcStartAddr": "401bbf",
            "funcEndAddr": "401bc4",
            "decompiledFuncCode": "int64_t function_401bbf(void) {\n    // 0x401bbf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bc4",
            "funcStartAddr": "401bc4",
            "funcEndAddr": "401bc9",
            "decompiledFuncCode": "int64_t function_401bc4(void) {\n    // 0x401bc4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bc9",
            "funcStartAddr": "401bc9",
            "funcEndAddr": "401bce",
            "decompiledFuncCode": "int64_t function_401bc9(void) {\n    // 0x401bc9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bce",
            "funcStartAddr": "401bce",
            "funcEndAddr": "401bd3",
            "decompiledFuncCode": "int64_t function_401bce(void) {\n    // 0x401bce\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bd3",
            "funcStartAddr": "401bd3",
            "funcEndAddr": "401bd8",
            "decompiledFuncCode": "int64_t function_401bd3(void) {\n    // 0x401bd3\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401be0",
            "funcStartAddr": "401be0",
            "funcEndAddr": "402c5f",
            "decompiledFuncCode": "int64_t function_401be0(int64_t a1, int64_t a2) {\n    // 0x401be0\n    function_4055f0(a2);\n    setlocale(LC_ALL, (char *)&g27);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v1; // 0x401be0\n    function_40c270(0x4051b0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    for (int64_t i = 0; i < 9; i++) {\n        // 0x401c30\n        *(int32_t *)(4 * i + (int64_t)&g60) = 0;\n    }\n    int64_t v2 = a1 & 0xffffffff; // 0x401be8\n    g63 = 3;\n    g64 = 5;\n    g61 = 1;\n    for (int64_t i = 0; i < 17; i++) {\n        // 0x401c70\n        *(int32_t *)(4 * i + 0x612340) = 0;\n    }\n    // 0x401c85\n    g57 = 6;\n    g59 = 8;\n    g58 = 7;\n    g71 = 0;\n    g70 = 0;\n    g72 = 0;\n    g77 = 0x402d50;\n    g84 = 8;\n    g83 = 7;\n    *(char *)&g81 = 0;\n    int32_t v3 = -1; // bp-80, 0x401d0d\n    int64_t v4 = function_408f90(v2, a2, \"A:aBbcDdeFfHhIij:LlN:OoS:st:vw::Xx\", &g7, (int64_t *)&v3, v1); // 0x401d15\n    int64_t v5 = v4; // 0x401d1d\n    int64_t v6 = 0; // 0x401d1d\n    int64_t v7 = 0; // 0x401d1d\n    int64_t v8 = 1; // 0x401d1d\n    int64_t v9; // 0x401be0\n    int64_t v10; // 0x401be0\n    int64_t v11; // 0x401be0\n    int64_t v12; // 0x401be0\n    int64_t v13; // 0x401be0\n    int64_t v14; // 0x401be0\n    int64_t v15; // 0x401be0\n    int64_t v16; // 0x401be0\n    int64_t v17; // 0x401be0\n    int64_t v18; // 0x401be0\n    int64_t v19; // 0x401be0\n    int64_t v20; // 0x401be0\n    int64_t v21; // 0x401be0\n    int64_t v22; // bp-72, 0x401be0\n    if ((int32_t)v4 != -1) {\n        while (true) {\n          lab_0x401d23:\n            // 0x401d23\n            v20 = v8;\n            v17 = v16;\n            v9 = v7;\n            v11 = v6;\n            v14 = v13;\n            int64_t v23 = v5 + 131; // 0x401d23\n            g105 = v23 & 0xffffffff;\n            switch ((int32_t)v23) {\n                case 0: {\n                    // 0x402008\n                    function_407690((int64_t)g48, \"od\", \"GNU coreutils\", (int64_t)g36, \"Jim Meyering\", 0);\n                    exit(0);\n                    // UNREACHABLE\n                }\n                case 1: {\n                    // 0x402686\n                    function_404960(0);\n                    // UNREACHABLE\n                }\n                case 196: {\n                    char v24 = *g97; // 0x401fba\n                    if (v24 == 110) {\n                        // 0x40243b\n                        g83 = 0;\n                        g77 = 0x402d40;\n                        v21 = v20;\n                        v18 = v17;\n                        v10 = 1;\n                        v12 = v11;\n                        v15 = v14;\n                    } else {\n                        if (v24 > 110) {\n                            if (v24 == 111) {\n                                // 0x402411\n                                g84 = 8;\n                                g77 = 0x402d50;\n                                g83 = 7;\n                                v21 = v20;\n                                v18 = v17;\n                                v10 = 1;\n                                v12 = v11;\n                                v15 = v14;\n                            } else {\n                                if (v24 != 120) {\n                                    goto lab_0x402be8_2;\n                                }\n                                // 0x401fde\n                                g84 = 16;\n                                g77 = 0x402d50;\n                                g83 = 6;\n                                v21 = v20;\n                                v18 = v17;\n                                v10 = 1;\n                                v12 = v11;\n                                v15 = v14;\n                            }\n                        } else {\n                            if (v24 != 100) {\n                                goto lab_0x402be8_2;\n                            }\n                            // 0x402041\n                            g84 = 10;\n                            g77 = 0x402d50;\n                            g83 = 7;\n                            v21 = v20;\n                            v18 = v17;\n                            v10 = 1;\n                            v12 = v11;\n                            v15 = v14;\n                        }\n                    }\n                    goto lab_0x401cf8;\n                }\n                case 197: {\n                    goto lab_0x401fa2;\n                }\n                case 199: {\n                    // 0x401f91\n                    v21 = v20 & 0xffffffff & function_4040c0((int64_t)\"u4\");\n                    v18 = v17;\n                    v10 = v9;\n                    v12 = v11;\n                    v15 = v14;\n                    goto lab_0x401cf8;\n                }\n                case 201: {\n                    goto lab_0x401f80;\n                }\n                case 203: {\n                    goto lab_0x401f6f;\n                }\n                case 204: {\n                    goto lab_0x401f5e;\n                }\n                case 207: {\n                    goto lab_0x401f5e;\n                }\n                case 209: {\n                    // 0x401f18\n                    *(char *)&g75 = 1;\n                    int64_t v25 = function_407ce0((int64_t)g97, 0, 0, &g74, (int64_t *)\"bEGKkMmPTYZ0\", v17); // 0x401f35\n                    v21 = v20;\n                    v18 = v17;\n                    v10 = 1;\n                    v12 = v11;\n                    v15 = v14;\n                    if ((int32_t)v25 != 0) {\n                        // 0x401f42\n                        function_407c50(v25 & 0xffffffff, (int64_t)v3, 78, &g7, (int64_t)g97);\n                        // UNREACHABLE\n                    }\n                    goto lab_0x401cf8;\n                }\n                case 210: {\n                    // 0x401f07\n                    v21 = v20 & 0xffffffff & function_4040c0((int64_t)\"o4\");\n                    v18 = v17;\n                    v10 = v9;\n                    v12 = v11;\n                    v15 = v14;\n                    goto lab_0x401cf8;\n                }\n                case 214: {\n                    int32_t v26 = 3; // 0x401ec7\n                    if (g97 != NULL) {\n                        int64_t v27 = function_407ce0((int64_t)g97, 0, 0, &v22, (int64_t *)\"bEGKkMmPTYZ0\", v17); // 0x401edc\n                        if ((int32_t)v27 != 0) {\n                            // 0x402c43\n                            function_407c50(v27 & 0xffffffff, (int64_t)v3, 83, &g7, (int64_t)g97);\n                            // UNREACHABLE\n                        }\n                        // 0x401ee9\n                        v26 = v22;\n                    }\n                    // 0x401ef5\n                    g82 = v26;\n                    *(char *)&g81 = 1;\n                    v21 = v20;\n                    v18 = v17;\n                    v10 = 1;\n                    v12 = v11;\n                    v15 = v14;\n                    goto lab_0x401cf8;\n                }\n                case 219: {\n                    goto lab_0x401f6f;\n                }\n                case 228: {\n                    // 0x401eac\n                    v21 = v20 & 0xffffffff & function_4040c0((int64_t)&g3);\n                    v18 = v17;\n                    v10 = v9;\n                    v12 = v11;\n                    v15 = v14;\n                    goto lab_0x401cf8;\n                }\n                case 229: {\n                    // 0x401e9b\n                    v21 = v20 & 0xffffffff & function_4040c0((int64_t)\"o1\");\n                    v18 = v17;\n                    v10 = v9;\n                    v12 = v11;\n                    v15 = v14;\n                    goto lab_0x401cf8;\n                }\n                case 230: {\n                    // 0x401e8a\n                    v21 = v20 & 0xffffffff & function_4040c0((int64_t)&g1);\n                    v18 = v17;\n                    v10 = v9;\n                    v12 = v11;\n                    v15 = v14;\n                    goto lab_0x401cf8;\n                }\n                case 231: {\n                    // 0x401e79\n                    v21 = v20 & 0xffffffff & function_4040c0((int64_t)\"u2\");\n                    v18 = v17;\n                    v10 = v9;\n                    v12 = v11;\n                    v15 = v14;\n                    goto lab_0x401cf8;\n                }\n                case 232: {\n                    goto lab_0x401f80;\n                }\n                case 233: {\n                    // 0x401e68\n                    v21 = v20 & 0xffffffff & function_4040c0((int64_t)\"fF\");\n                    v18 = v17;\n                    v10 = v9;\n                    v12 = v11;\n                    v15 = v14;\n                    goto lab_0x401cf8;\n                }\n                case 235: {\n                    goto lab_0x401e57;\n                }\n                case 236: {\n                    // 0x401e46\n                    v21 = v20 & 0xffffffff & function_4040c0((int64_t)\"dI\");\n                    v18 = v17;\n                    v10 = v9;\n                    v12 = v11;\n                    v15 = v14;\n                    goto lab_0x401cf8;\n                }\n                case 237: {\n                    int64_t v28 = function_407ce0((int64_t)g97, 0, 0, &g76, (int64_t *)\"bEGKkMmPTYZ0\", v17); // 0x401e2e\n                    v21 = v20;\n                    v18 = v17;\n                    v10 = 1;\n                    v12 = v11;\n                    v15 = v14;\n                    v19 = v28;\n                    if ((int32_t)v28 != 0) {\n                      lab_0x402c27:\n                        // 0x402c27\n                        function_407c50(v19 & 0xffffffff, (int64_t)v3, 106, &g7, (int64_t)g97);\n                        // UNREACHABLE\n                    }\n                    goto lab_0x401cf8;\n                }\n                case 239: {\n                    goto lab_0x401f5e;\n                }\n                case 242: {\n                    goto lab_0x401fa2;\n                }\n                case 246: {\n                    // 0x401e07\n                    v21 = v20 & 0xffffffff & function_4040c0((int64_t)\"d2\");\n                    v18 = v17;\n                    v10 = v9;\n                    v12 = v11;\n                    v15 = v14;\n                    goto lab_0x401cf8;\n                }\n                case 247: {\n                    // 0x401de5\n                    if (g97 == NULL) {\n                        // 0x402c0e\n                        __assert_fail(\"s != NULL\", \"src/od.c\", 983, \"decode_format_string\");\n                        v19 = &g104;\n                        goto lab_0x402c27;\n                    }\n                    // 0x401df5\n                    v21 = v20 & 0xffffffff & function_4040c0((int64_t)g97);\n                    v18 = v17;\n                    v10 = 1;\n                    v12 = v11;\n                    v15 = v14;\n                    goto lab_0x401cf8;\n                }\n                case 249: {\n                    // 0x401dd3\n                    g35 = 0;\n                    v21 = v20;\n                    v18 = v17;\n                    v10 = 1;\n                    v12 = v11;\n                    v15 = v14;\n                    goto lab_0x401cf8;\n                }\n                case 250: {\n                    // 0x401d8e\n                    v21 = v20;\n                    v18 = v17;\n                    v10 = 1;\n                    v12 = 1;\n                    v15 = 32;\n                    if (g97 != NULL) {\n                        int64_t v29 = function_407ce0((int64_t)g97, 0, 10, &v22, (int64_t *)&g27, v17); // 0x401db0\n                        int64_t v30 = v29; // 0x401db7\n                        if ((int32_t)v29 != 0) {\n                            // 0x402bcc\n                            function_407c50(v30 & 0xffffffff, (int64_t)v3, 119, &g7, (int64_t)g97);\n                            // UNREACHABLE\n                        }\n                        // 0x401dbd\n                        v21 = v20;\n                        v18 = v17;\n                        v10 = 1;\n                        v12 = 1;\n                        v15 = v22;\n                    }\n                    goto lab_0x401cf8;\n                }\n                case 251: {\n                    goto lab_0x401e57;\n                }\n                case 259: {\n                    // 0x401d82\n                    *(char *)&g80 = 1;\n                    v21 = v20;\n                    v18 = v17;\n                    v10 = v9;\n                    v12 = v11;\n                    v15 = v14;\n                    goto lab_0x401cf8;\n                }\n                case 260: {\n                    int64_t v31 = g37; // 0x401d4a\n                    int64_t v32 = function_4050d0(\"--endian\", (int64_t)g97, g9, (int64_t *)&g8, 4, v31); // 0x401d5d\n                    int32_t v33 = *(int32_t *)(4 * v32 + (int64_t)&g8); // 0x401d62\n                    if (v33 == 0) {\n                        // 0x402092\n                        g55 = 0;\n                        v21 = v20;\n                        v18 = v31;\n                        v10 = v9;\n                        v12 = v11;\n                        v15 = v14;\n                    } else {\n                        // 0x401d71\n                        v21 = v20;\n                        v18 = v31;\n                        v10 = v9;\n                        v12 = v11;\n                        v15 = v14;\n                        if (v33 == 1) {\n                            // 0x401d76\n                            g55 = 1;\n                            v21 = v20;\n                            v18 = v31;\n                            v10 = v9;\n                            v12 = v11;\n                            v15 = v14;\n                        }\n                    }\n                    goto lab_0x401cf8;\n                }\n                default: {\n                    goto lab_0x402609;\n                }\n            }\n        }\n    }\n    goto lab_0x4020a6;\n  lab_0x402be8_2:\n    // 0x402be8\n    error(1, (int32_t)\"invalid output address radix '%c'; it must be one character from [doxn]\" ^ (int32_t)\"invalid output address radix '%c'; it must be one character from [doxn]\", dcgettext(NULL, \"invalid output address radix '%c'; it must be one character from [doxn]\", 5));\n    // 0x402c0e\n    __assert_fail(\"s != NULL\", \"src/od.c\", 983, \"decode_format_string\");\n    v19 = &g104;\n    goto lab_0x402c27;\n  lab_0x401fa2:\n    // 0x401fa2\n    v21 = v20 & 0xffffffff & function_4040c0((int64_t)\"o2\");\n    v18 = v17;\n    v10 = v9;\n    v12 = v11;\n    v15 = v14;\n    goto lab_0x401cf8;\n  lab_0x401f80:\n    // 0x401f80\n    v21 = v20 & 0xffffffff & function_4040c0((int64_t)\"fD\");\n    v18 = v17;\n    v10 = v9;\n    v12 = v11;\n    v15 = v14;\n    goto lab_0x401cf8;\n  lab_0x401f6f:\n    // 0x401f6f\n    v21 = v20 & 0xffffffff & function_4040c0((int64_t)\"x4\");\n    v18 = v17;\n    v10 = v9;\n    v12 = v11;\n    v15 = v14;\n    goto lab_0x401cf8;\n  lab_0x401f5e:\n    // 0x401f5e\n    v21 = v20 & 0xffffffff & function_4040c0((int64_t)\"dL\");\n    v18 = v17;\n    v10 = v9;\n    v12 = v11;\n    v15 = v14;\n    goto lab_0x401cf8;\n  lab_0x401e57:\n    // 0x401e57\n    v21 = function_4040c0((int64_t)\"x2\") & v20;\n    v18 = v17;\n    v10 = v9;\n    v12 = v11;\n    v15 = v14;\n    goto lab_0x401cf8;\n  lab_0x401cf8:;\n    int64_t v302 = v15;\n    v6 = v12;\n    v7 = v10;\n    v8 = v21;\n    v3 = -1;\n    v5 = function_408f90(v2, a2, \"A:aBbcDdeFfHhIij:LlN:OoS:st:vw::Xx\", &g7, (int64_t *)&v3, v18);\n    v13 = v302;\n    v16 = v18;\n    int64_t v67; // 0x401be0\n    int64_t result; // 0x401be0\n    if ((int32_t)v5 == -1) {\n        // 0x40209e\n        v67 = v302;\n        result = 1;\n        if ((char)v8 == 0) {\n            goto lab_0x402402;\n        } else {\n            goto lab_0x4020a6;\n        }\n    }\n    goto lab_0x401d23;\n  lab_0x4023d3_3:;\n    // 0x4023d3\n    int64_t v231; // 0x401be0\n    free((int64_t *)v231);\n    int64_t v229; // 0x401be0\n    int64_t v278 = v229; // 0x4023d6\n    int64_t v230; // 0x401be0\n    int64_t v279 = v230; // 0x4023d6\n    int64_t v280 = v231; // 0x4023d6\n    int64_t v232; // 0x401be0\n    int64_t v281 = v232; // 0x4023d6\n    goto lab_0x4023df;\n  lab_0x402745:;\n    // 0x402745\n    int64_t v173; // 0x401be0\n    int64_t v303 = v173;\n    int64_t v172; // 0x401be0\n    int64_t v304 = v172;\n    int64_t v171; // 0x401be0\n    int64_t v305 = v171;\n    int64_t v169; // 0x401be0\n    int64_t v306 = v169;\n    int64_t v299 = v305; // 0x402748\n    int64_t v297 = v304; // 0x402748\n    int64_t v301 = v303; // 0x402748\n    int64_t v170; // 0x401be0\n    int64_t v149; // 0x401bf0\n    if (v306 != 0) {\n        int64_t v307 = g71; // 0x40274e\n        int64_t v308 = 1; // 0x40276a\n        if (v307 != 0) {\n            int64_t v309 = 1; // 0x402764\n            int64_t v310 = 0; // 0x4027a5\n            uint32_t v311 = *(int32_t *)(g72 + 4 + 40 * v310); // 0x402774\n            int32_t v312 = *(int32_t *)(4 * (int64_t)v311 + (int64_t)&g11); // 0x402779\n            int64_t v313 = v312; // 0x402779\n            uint64_t v314 = v313;\n            int64_t v315 = v309 % v314;\n            int64_t v316 = v314; // 0x40279e\n            while (v315 != 0) {\n                // 0x402793\n                v314 = v315;\n                v315 = v316 % v314;\n                v316 = v314;\n            }\n            // 0x4027a0\n            v310++;\n            v309 = 0x100000000 * v309 * 0x100000000 * v313 / v314 / 0x100000000 / 0x100000000;\n            v308 = v309;\n            while (v310 != v307) {\n                // 0x402770\n                v311 = *(int32_t *)(g72 + 4 + 40 * v310);\n                v312 = *(int32_t *)(4 * (int64_t)v311 + (int64_t)&g11);\n                v313 = v312;\n                v314 = v313;\n                v315 = v309 % v314;\n                v316 = v314;\n                while (v315 != 0) {\n                    // 0x402793\n                    v314 = v315;\n                    v315 = v316 % v314;\n                    v316 = v314;\n                }\n                // 0x4027a0\n                v310++;\n                v309 = 0x100000000 * v309 * 0x100000000 * v313 / v314 / 0x100000000 / 0x100000000;\n                v308 = v309;\n            }\n        }\n        uint64_t v317 = v308;\n        int64_t v318 = v149 + 32; // 0x4028d9\n        int64_t v319 = *(int64_t *)(8 * v303 + v318); // 0x4028d9\n        memset((int64_t *)(v319 + v306), 0, (int32_t)(((v306 - 1 + v317) % v317 ^ 0xffffffff) + v317));\n        int64_t v320 = *(int64_t *)((8 * v170 & 2040 ^ 8) + v318); // 0x402908\n        function_403d80(v304, v306, v320, v319);\n        v299 = v305;\n        v297 = v304 + (int64_t)v3;\n        v301 = v319;\n    }\n    goto lab_0x40282c;\n  lab_0x402823:\n    // 0x402823\n    v3 = 0;\n    int64_t v155; // 0x401be0\n    v299 = v155;\n    int64_t v156; // 0x401be0\n    v297 = v156;\n    int64_t v157; // 0x401be0\n    v301 = v157;\n    goto lab_0x40282c;\n  lab_0x4020a6:\n    // 0x4020a6\n    if (*(char *)&g81 == 0) {\n        goto lab_0x4020bd;\n    } else {\n        // 0x4020af\n        if ((int64_t)g71 != 0) {\n            goto lab_0x402baa;\n        } else {\n            goto lab_0x4020bd;\n        }\n    }\n  lab_0x4020bd:;\n    int32_t v34 = *(int32_t *)0x6122dc; // 0x4020bd\n    int64_t v35 = v34; // 0x4020bd\n    char v36 = *(char *)&g80; // 0x4020c4\n    int32_t v37 = (int32_t)a1 - v34; // 0x4020cb\n    int64_t v38 = v37; // 0x4020cb\n    int64_t v39; // 0x401be0\n    int64_t v40; // 0x401be0\n    int64_t v41; // 0x401be0\n    int64_t v42; // 0x401be0\n    int64_t v43; // 0x401be0\n    if (v7 != 0) {\n        // 0x40245b\n        v41 = a2;\n        v43 = a2;\n        v40 = v38;\n        if (v36 == 0) {\n            goto lab_0x4020ff;\n        } else {\n            switch (v37) {\n                case 2: {\n                    goto lab_0x402657;\n                }\n                case 3: {\n                    goto lab_0x402621;\n                }\n                default: {\n                    if (v37 != 1) {\n                        goto lab_0x4020f5;\n                    } else {\n                        // 0x402477\n                        v39 = *(int64_t *)(8 * v35 + a2);\n                        v42 = (int64_t)&g7;\n                        goto lab_0x402481;\n                    }\n                }\n            }\n        }\n    } else {\n        switch (v37) {\n            case 2: {\n                goto lab_0x402657;\n            }\n            case 3: {\n                // 0x402613\n                v41 = a2;\n                v43 = a2;\n                v40 = 3;\n                if (v36 == 0) {\n                    goto lab_0x4020ff;\n                } else {\n                    goto lab_0x402621;\n                }\n            }\n            case 1: {\n                int64_t v44 = *(int64_t *)(8 * v35 + a2); // 0x40291c\n                v39 = v44;\n                v42 = v44;\n                if (v36 != 0) {\n                    goto lab_0x402481;\n                } else {\n                    // 0x402929\n                    v41 = a2;\n                    v43 = a2;\n                    v40 = 1;\n                    v39 = v44;\n                    v42 = v44;\n                    if (*(char *)v44 == 43) {\n                        goto lab_0x402481;\n                    } else {\n                        goto lab_0x4020ff;\n                    }\n                }\n            }\n            default: {\n                goto lab_0x4020f5;\n            }\n        }\n    }\n  lab_0x402baa:\n    // 0x402baa\n    error(1, (int32_t)\"no type may be specified when dumping strings\" ^ (int32_t)\"no type may be specified when dumping strings\", dcgettext(NULL, \"no type may be specified when dumping strings\", 5));\n    int64_t v45 = &g104;\n    function_407c50(v45 & 0xffffffff, (int64_t)v3, 119, &g7, (int64_t)g97);\n    // UNREACHABLE\n  lab_0x4020ff:;\n    int64_t v46 = v40; // 0x402106\n    int64_t v47 = v43; // 0x402106\n    int64_t v48 = v41; // 0x402106\n    int64_t v49; // 0x401be0\n    int64_t v50 = v49; // 0x402106\n    int64_t v51 = v40; // 0x402106\n    int64_t v52 = v43; // 0x402106\n    int64_t v53 = v41; // 0x402106\n    int64_t v54 = v49; // 0x402106\n    if (g79 == 0) {\n        goto lab_0x402124;\n    } else {\n        goto lab_0x402108;\n    }\n  lab_0x402657:;\n    int64_t v55 = a2 + 8; // 0x402657\n    int64_t v56 = *(int64_t *)(8 * v35 + v55); // 0x402657\n    if (v36 != 0) {\n        goto lab_0x402887;\n    } else {\n        char v57 = *(char *)v56; // 0x402664\n        if (v57 == 43) {\n            goto lab_0x402887;\n        } else {\n            // 0x40266f\n            v41 = a2;\n            v43 = a2;\n            v40 = 2;\n            if ((int32_t)v57 < 58) {\n                goto lab_0x402887;\n            } else {\n                goto lab_0x4020ff;\n            }\n        }\n    }\n  lab_0x4020f5:\n    // 0x4020f5\n    v41 = a2;\n    v43 = a2;\n    v40 = v38;\n    int64_t v58 = v35; // 0x4020f9\n    if (v37 < 2 || v36 == 0) {\n        goto lab_0x4020ff;\n    } else {\n        goto lab_0x4025b6;\n    }\n  lab_0x402124:\n    // 0x402124\n    if (*(char *)&g75 != 0) {\n        int64_t v59 = g76 + g74; // 0x402134\n        g73 = v59;\n        if (v59 < g74) {\n            // 0x402b51\n            error(1, (int32_t)\"skip-bytes + read-bytes is too large\" ^ (int32_t)\"skip-bytes + read-bytes is too large\", dcgettext(NULL, \"skip-bytes + read-bytes is too large\", 5));\n            // 0x402b73\n            __assert_fail(\"n_bytes_read == bytes_per_block\", \"src/od.c\", 1397, \"dump\");\n            // 0x402b8c\n            function_407a20((int64_t)\"n_bytes_read == bytes_per_block\");\n            // UNREACHABLE\n        }\n    }\n    int64_t v60 = v54; // 0x402150\n    int64_t v61 = v8; // 0x402150\n    int64_t v62 = v53; // 0x402150\n    int64_t v63 = v52; // 0x402150\n    int64_t v64 = v51; // 0x402150\n    int64_t v65 = v6; // 0x402150\n    int64_t v66 = v67; // 0x402150\n    int64_t v68 = v54; // 0x402150\n    int64_t v69 = v8; // 0x402150\n    int64_t v70 = v53; // 0x402150\n    int64_t v71 = v52; // 0x402150\n    int64_t v72 = v51; // 0x402150\n    int64_t v73 = v6; // 0x402150\n    int64_t v74 = v67; // 0x402150\n    if ((int64_t)g71 == 0) {\n        goto lab_0x4024f9;\n    } else {\n        goto lab_0x402156;\n    }\n  lab_0x402108:;\n    int64_t v75 = v50;\n    int64_t v76 = v48;\n    int64_t v77 = v47;\n    int64_t v78 = v46;\n    if (g77 == 0x402d40) {\n        // 0x402863\n        g84 = 8;\n        g83 = 7;\n        g77 = 0x404010;\n        v51 = v78;\n        v52 = v77;\n        v53 = v76;\n        v54 = v75;\n    } else {\n        // 0x402119\n        g77 = 0x404090;\n        v51 = v78;\n        v52 = v77;\n        v53 = v76;\n        v54 = v75;\n    }\n    goto lab_0x402124;\n  lab_0x402621:;\n    int64_t v79 = *(int64_t *)(a2 + 8 + 8 * v35); // 0x402621\n    int64_t v80 = function_402e40(v79, (int64_t *)&v3, v36, (int64_t)&g7); // 0x40262b\n    int64_t v81 = &v3; // 0x402632\n    int64_t v82 = 3; // 0x402632\n    if ((char)v80 != 0) {\n        int64_t v83 = &v22; // 0x402ad4\n        int64_t v84 = a2 + 16; // 0x402ad9\n        int64_t v85 = *(int64_t *)(8 * (int64_t)g46 + v84); // 0x402ad9\n        int64_t v86 = function_402e40(v85, &v22, v36, (int64_t)&g7); // 0x402ade\n        v81 = v83;\n        v82 = 3;\n        if ((char)v86 == 0) {\n            goto lab_0x40263e;\n        } else {\n            // 0x402aeb\n            g79 = 1;\n            g76 = v3;\n            int64_t v87 = 8 * (int64_t)g46; // 0x402b15\n            *(int64_t *)(v87 + v84) = *(int64_t *)(v87 + a2);\n            v49 = v22;\n            v41 = v84;\n            v43 = v83;\n            v40 = 1;\n            goto lab_0x4020ff;\n        }\n    } else {\n        goto lab_0x40263e;\n    }\n  lab_0x4025b6:\n    // 0x4025b6\n    function_407210(*(int64_t *)(a2 + 8 + 8 * v58));\n    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n    error(0, (int32_t)\"compatibility mode supports at most one file\" ^ (int32_t)\"compatibility mode supports at most one file\", \"%s\", dcgettext(NULL, \"compatibility mode supports at most one file\", 5));\n  lab_0x402609:\n    // 0x402609\n    function_404960(1);\n    // UNREACHABLE\n  lab_0x402887:;\n    int64_t v88 = &v22; // 0x402887\n    int64_t v89 = function_402e40(v56, &v22, v36, (int64_t)&g7); // 0x40288c\n    v81 = v88;\n    v82 = 2;\n    int64_t v90; // 0x401be0\n    if ((char)v89 == 0) {\n        goto lab_0x40263e;\n    } else {\n        // 0x402899\n        v90 = v88;\n        if (*(char *)&g80 != 0) {\n            int64_t v91 = &v3; // 0x402a76\n            int64_t v92 = *(int64_t *)(8 * (int64_t)g46 + a2); // 0x402a7b\n            int64_t v93 = function_402e40(v92, (int64_t *)&v3, v36, (int64_t)&g7); // 0x402a80\n            v90 = v91;\n            if ((char)v93 == 0) {\n                goto lab_0x4028a6;\n            } else {\n                // 0x4020ff\n                g79 = 1;\n                g76 = v3;\n                v46 = 0;\n                v47 = v91;\n                v48 = a2 + 16;\n                v50 = v22;\n                goto lab_0x402108;\n            }\n        } else {\n            goto lab_0x4028a6;\n        }\n    }\n  lab_0x402481:;\n    int64_t v94 = &v3; // 0x402486\n    int64_t v95 = function_402e40(v39, (int64_t *)&v3, v36, v42); // 0x40248b\n    v41 = a2;\n    v43 = v94;\n    v40 = 1;\n    if ((char)v95 != 0) {\n        // 0x402498\n        g76 = v3;\n        v41 = a2 + 8;\n        v43 = v94;\n        v40 = 0;\n    }\n    goto lab_0x4020ff;\n  lab_0x4024f9:\n    // 0x4024f9\n    function_4040c0((int64_t)\"oS\");\n    v60 = v68;\n    v61 = v69;\n    v62 = v70;\n    v63 = v71;\n    v64 = v72;\n    v65 = v73;\n    v66 = v74;\n    goto lab_0x402156;\n  lab_0x402156:;\n    int64_t v96 = v66;\n    int64_t v97 = v65;\n    int64_t v98 = v63;\n    int64_t v99 = v62;\n    int64_t v100 = v61;\n    int64_t v101 = v60;\n    int64_t v102 = (int64_t)&g10; // 0x40215e\n    if ((int32_t)v64 >= 1) {\n        // 0x402160\n        v102 = 8 * (int64_t)g46 + v99;\n    }\n    // 0x40216c\n    g67 = v102;\n    int64_t v103 = function_403a50() & 0xffffffff; // 0x402180\n    int64_t v104 = v101; // 0x402183\n    int64_t v105 = v99; // 0x402183\n    int64_t v106 = v98; // 0x402183\n    int64_t v107 = v103; // 0x402183\n    int64_t v108 = v97; // 0x402183\n    int64_t v109 = v96; // 0x402183\n    int64_t v110; // 0x401be0\n    int64_t v111; // 0x401be0\n    int64_t v112; // 0x401be0\n    int64_t v113; // 0x401be0\n    int64_t v114; // 0x401be0\n    int64_t v115; // 0x401be0\n    int64_t v116; // 0x401be0\n    int64_t v117; // 0x401be0\n    int64_t v118; // 0x4021c5\n    if (g66 == NULL) {\n        goto lab_0x4023ed;\n    } else {\n        // 0x402189\n        v117 = function_403b50(g76) & v103;\n        v104 = v101;\n        v105 = v99;\n        v106 = v98;\n        v107 = v117;\n        v108 = v97;\n        v109 = v96;\n        if (g66 == NULL) {\n            goto lab_0x4023ed;\n        } else {\n            // 0x4021ae\n            v118 = g71;\n            g78 = g79 == 0 ? 0 : v101 - g76;\n            if (v118 == 0) {\n                // 0x402a3b\n                v115 = 1;\n                if ((char)v97 == 0) {\n                    goto lab_0x402593;\n                } else {\n                    // 0x402a4a\n                    v114 = 1;\n                    v113 = 1;\n                    if (v96 != 0) {\n                        goto lab_0x402a24;\n                    } else {\n                        goto lab_0x40225f;\n                    }\n                }\n            } else {\n                int64_t v119 = g72 + 4;\n                int64_t v120 = v119 + 40 * v118;\n                int64_t v121 = v119; // 0x4021f6\n                uint32_t v122 = *(int32_t *)v121; // 0x402200\n                int64_t v123 = 0x100000000 >> 32; // 0x402202\n                int32_t v124 = *(int32_t *)(4 * (int64_t)v122 + (int64_t)&g11); // 0x402205\n                int64_t v125 = v124; // 0x402205\n                uint64_t v126 = v125;\n                int64_t v127 = v123 % v126;\n                int64_t v128 = v126; // 0x402226\n                while (v127 != 0) {\n                    // 0x40221b\n                    v126 = v127;\n                    v127 = v128 % v126;\n                    v128 = v126;\n                }\n                // 0x402228\n                v121 += 40;\n                int64_t v129 = 0x100000000 * v125 / v126 / 0x100000000 * v123; // 0x402234\n                int64_t v130 = v129 & 0xffffffff; // 0x402234\n                while (v120 != v121) {\n                    // 0x402200\n                    v122 = *(int32_t *)v121;\n                    v123 = 0x100000000 * v130 >> 32;\n                    v124 = *(int32_t *)(4 * (int64_t)v122 + (int64_t)&g11);\n                    v125 = v124;\n                    v126 = v125;\n                    v127 = v123 % v126;\n                    v128 = v126;\n                    while (v127 != 0) {\n                        // 0x40221b\n                        v126 = v127;\n                        v127 = v128 % v126;\n                        v128 = v126;\n                    }\n                    // 0x402228\n                    v121 += 40;\n                    v129 = 0x100000000 * v125 / v126 / 0x100000000 * v123;\n                    v130 = v129 & 0xffffffff;\n                }\n                if ((char)v97 == 0) {\n                    // 0x402508\n                    v115 = v130;\n                    if ((int32_t)v129 < 16) {\n                        goto lab_0x402593;\n                    } else {\n                        int64_t v131 = 0x100000000 * v129 >> 32; // 0x402512\n                        g69 = v131;\n                        v112 = v120;\n                        v111 = v119;\n                        v110 = v131;\n                        v116 = v101;\n                        goto lab_0x4022a5;\n                    }\n                } else {\n                    int64_t v132 = 0x100000000 * v129 >> 32; // 0x402246\n                    v114 = v130;\n                    v113 = v132;\n                    if (v96 == 0) {\n                        goto lab_0x40225f;\n                    } else {\n                        // 0x40224e\n                        v114 = v130;\n                        v113 = v132;\n                        if (v96 % v132 == 0) {\n                            goto lab_0x402a24;\n                        } else {\n                            goto lab_0x40225f;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40263e:\n    // 0x40263e\n    v41 = a2;\n    v43 = v81;\n    v40 = v82;\n    if (*(char *)&g80 == 0) {\n        goto lab_0x4020ff;\n    } else {\n        // 0x40264b\n        v58 = g46;\n        goto lab_0x4025b6;\n    }\n  lab_0x4023ed:;\n    uint64_t v133 = v107;\n    if (g65 == 0) {\n        // 0x402402\n        return v133 % 256 ^ 1;\n    }\n    // 0x4024ba\n    if ((int32_t)function_408120((int64_t)g49, v106) != -1) {\n        // 0x4023fa\n        result = v133 % 256 ^ 1;\n      lab_0x402402:\n        // 0x402402\n        return result;\n    }\n    char * format = dcgettext(NULL, \"standard input\", 5); // 0x4024db\n    uint32_t err_num = *__errno_location(); // 0x4024f0\n    error(1, err_num, format);\n    v68 = v104;\n    v69 = (int64_t)format;\n    v70 = v105;\n    v71 = err_num;\n    v72 = v133;\n    v73 = v108;\n    v74 = v109;\n    goto lab_0x4024f9;\n  lab_0x4028a6:\n    // 0x4028a6\n    g76 = v22;\n    int64_t v134 = 8 * (int64_t)g46; // 0x4028bf\n    *(int64_t *)(v134 + v55) = *(int64_t *)(v134 + a2);\n    v41 = v55;\n    v43 = v90;\n    v40 = 1;\n    goto lab_0x4020ff;\n  lab_0x402593:;\n    int64_t v135 = v115;\n    int64_t v136 = 0x100000000 * (int64_t)(16 / (int32_t)v135) * (0x100000000 * v135 >> 32) / 0x100000000; // 0x4025a0\n    g69 = v136;\n    int64_t v137 = v136; // 0x4025a9\n    int64_t v138 = v101; // 0x4025a9\n    int64_t v139 = v118; // 0x4025a9\n    goto lab_0x402299;\n  lab_0x402299:;\n    int64_t v140 = v139;\n    int64_t v141 = v138;\n    int64_t v142 = v141; // 0x4022a3\n    if (v140 == 0) {\n        goto lab_0x402316;\n    } else {\n        int64_t v143 = g72 + 4; // 0x4022a9\n        v112 = v143 + 40 * v140;\n        v111 = v143;\n        v110 = v137;\n        v116 = v141;\n        goto lab_0x4022a5;\n    }\n  lab_0x402a24:\n    // 0x402a24\n    g69 = v96;\n    v137 = v96;\n    v138 = v101;\n    v139 = v118;\n    goto lab_0x402299;\n  lab_0x40225f:\n    // 0x40225f\n    error(0, (int32_t)\"warning: invalid width %lu; using %d instead\" ^ (int32_t)\"warning: invalid width %lu; using %d instead\", dcgettext(NULL, \"warning: invalid width %lu; using %d instead\", 5));\n    g69 = v113;\n    v137 = v113;\n    v138 = 0x100000000 * v114 >> 32;\n    v139 = g71;\n    goto lab_0x402299;\n  lab_0x402316:;\n    int64_t v144 = v142;\n    unsigned char v145 = *(char *)&g81; // 0x402316\n    if (v145 == 0) {\n        int64_t v146 = g69; // 0x40268d\n        int64_t v147 = v146; // 0x4026a5\n        if (g69 % 0x4000000000000001 != 0) {\n            // 0x402b8c\n            function_407a20(v147);\n            // UNREACHABLE\n        }\n        // 0x4026ab\n        v147 = v146;\n        if (v146 < 0) {\n            // 0x402b8c\n            function_407a20(v147);\n            // UNREACHABLE\n        }\n        // 0x4026b4\n        int64_t v148; // bp-104, 0x401be0\n        v149 = &v148;\n        int64_t v150 = function_4077d0(2 * v146); // 0x4026b7\n        unsigned char v151 = *(char *)&g75; // 0x4026bc\n        int64_t v152 = g76; // 0x4026c4\n        v22 = v150;\n        if (v151 != 0) {\n            int64_t v153 = v151; // 0x4026bc\n            int64_t v154 = g73; // 0x402817\n            v155 = v153;\n            v156 = v152;\n            v157 = v96;\n            if (v154 > v152) {\n                int64_t v158 = v149 + 32; // 0x4027be\n                int64_t v159 = v153;\n                int64_t v160 = 0;\n                int64_t v161 = v152;\n                int64_t v162 = v160 % 256; // 0x4027b2\n                uint64_t v163 = v154 - v161; // 0x4027b6\n                int64_t v164 = *(int64_t *)(8 * v162 + v158); // 0x4027be\n                uint64_t v165 = (int64_t)g69; // 0x4027c6\n                int64_t v166 = function_4048a0(v163 > v165 ? v165 : v163, v164, (int64_t *)&v3); // 0x4027d7\n                int64_t v167 = v3; // 0x4027dc\n                v159 &= v166;\n                uint64_t v168 = (int64_t)g69; // 0x4027e4\n                v169 = v167;\n                v170 = v160;\n                v171 = v159;\n                v172 = v161;\n                v173 = v162;\n                while (v167 >= v168) {\n                    if (v167 != v168) {\n                        // 0x402b73\n                        __assert_fail(\"n_bytes_read == bytes_per_block\", \"src/od.c\", 1397, \"dump\");\n                        // 0x402b8c\n                        function_407a20((int64_t)\"n_bytes_read == bytes_per_block\");\n                        // UNREACHABLE\n                    }\n                    int64_t v174 = v160 ^ 1; // 0x4027f7\n                    function_403d80(v161, v167, *(int64_t *)((8 * v174 & 2040) + v158), v164);\n                    int64_t v175 = v161 + (int64_t)v3; // 0x402812\n                    int64_t v176 = g73; // 0x402817\n                    v155 = v159;\n                    v156 = v175;\n                    v157 = v162;\n                    if (v176 <= v175) {\n                        goto lab_0x402823;\n                    }\n                    v160 = v174;\n                    v161 = v175;\n                    v162 = v160 % 256;\n                    v163 = v176 - v161;\n                    v164 = *(int64_t *)(8 * v162 + v158);\n                    v165 = (int64_t)g69;\n                    v166 = function_4048a0(v163 > v165 ? v165 : v163, v164, (int64_t *)&v3);\n                    v167 = v3;\n                    v159 &= v166;\n                    v168 = (int64_t)g69;\n                    v169 = v167;\n                    v170 = v160;\n                    v171 = v159;\n                    v172 = v161;\n                    v173 = v162;\n                }\n                goto lab_0x402745;\n            } else {\n                goto lab_0x402823;\n            }\n        } else {\n            int64_t v177 = *(int64_t *)(v149 + 32); // 0x402725\n            int64_t v178 = function_4048a0((int64_t)g69, v177, (int64_t *)&v3); // 0x40272d\n            int64_t v179 = v3; // 0x402734\n            v169 = v179;\n            v170 = 0;\n            v171 = v100 & 0xffffffff & v178;\n            v172 = v152;\n            v173 = 0;\n            if (v179 >= (int64_t)g69) {\n                int64_t v180; // 0x401be0\n                int64_t v181; // 0x401be0\n                while (v181 == v180) {\n                    // 0x4026f0\n                    int64_t v182; // 0x401be0\n                    int64_t v183 = v182;\n                    int64_t v184; // 0x401be0\n                    int64_t v185 = v184;\n                    int64_t v186; // 0x401be0\n                    int64_t v187 = v186;\n                    int64_t v188; // 0x401be0\n                    int64_t v189 = v188;\n                    int64_t v190 = v183 ^ 1; // 0x4026f0\n                    int64_t v191 = v190 % 256; // 0x4026fd\n                    int64_t v192; // 0x402725\n                    int64_t * v193 = (int64_t *)(8 * v191 + v192);\n                    int64_t v194 = *v193; // 0x402704\n                    int64_t v195; // 0x401be0\n                    function_403d80(v185, v195, v194, v187);\n                    int32_t v196 = v3; // 0x402711\n                    int64_t v197 = v185 + (int64_t)v196; // 0x402711\n                    int128_t v198 = g69; // 0x402719\n                    int64_t v199 = *v193; // 0x402725\n                    int64_t v200 = function_4048a0((int64_t)v198, v199, (int64_t *)&v3); // 0x40272d\n                    int64_t v201 = v189 & v200; // 0x402732\n                    int32_t v202 = v3; // 0x402734\n                    int64_t v203 = v202; // 0x402734\n                    int128_t v204 = g69; // 0x402739\n                    int64_t v205 = v204; // 0x402739\n                    v180 = v205;\n                    v181 = v203;\n                    v188 = v201;\n                    v186 = v199;\n                    v184 = v197;\n                    v182 = v190;\n                    v169 = v203;\n                    v170 = v190;\n                    v171 = v201;\n                    v172 = v197;\n                    v173 = v191;\n                    if (v203 < v205) {\n                        goto lab_0x402745;\n                    }\n                    v195 = v181;\n                }\n                // 0x402b91\n                __assert_fail(\"n_bytes_read == bytes_per_block\", \"src/od.c\", 1411, \"dump\");\n                goto lab_0x402baa;\n            } else {\n                goto lab_0x402745;\n            }\n        }\n    } else {\n        int32_t v206 = g82;\n        int64_t v207 = v206 >= 100 ? (int64_t)v206 : 100; // 0x402334\n        v22 = v207;\n        int64_t v208 = function_4077d0(v207); // 0x402341\n        int64_t v209 = &v22;\n        int64_t v210 = v145; // 0x40234d\n        int64_t v211 = g76; // 0x40234d\n        int64_t v212 = v208; // 0x40234d\n        int64_t v213 = v96; // 0x40234d\n        int64_t v214; // 0x401be0\n        int64_t v215; // 0x401be0\n        int64_t v216; // 0x401be0\n        int64_t v217; // 0x401be0\n        while (true) {\n          lab_0x402350:;\n            int64_t v218 = v210; // 0x402350\n            int64_t v219 = v211; // 0x402350\n            int64_t v220 = v212; // 0x402350\n            int64_t v221 = v213; // 0x402350\n            while (true) {\n                // 0x402357\n                v215 = v220;\n                v216 = v221;\n                int64_t v222 = v219;\n                v214 = v218;\n                v217 = g82;\n                uint64_t v223; // 0x402363\n                if (*(char *)&g75 != 0) {\n                    // 0x402363\n                    v223 = g73;\n                    if (v223 >= v217 != v223 - v217 > v222) {\n                        // break (via goto) -> 0x402ab6\n                        goto lab_0x402ab6;\n                    }\n                }\n                // 0x40237f\n                while (v217 != 0) {\n                    int64_t v224 = v222 + 1; // 0x40238a\n                    int64_t v225 = v214 & 0xffffffff & function_403d20((int64_t *)&v3); // 0x4023cc\n                    int64_t v226 = v225; // 0x4023d1\n                    int32_t v227 = v3; // 0x4023d1\n                    int64_t v228 = 0; // 0x4023d1\n                    v229 = v217;\n                    v230 = v225;\n                    v231 = v215;\n                    v232 = v224;\n                    if (v3 < 0) {\n                        goto lab_0x4023d3_3;\n                    }\n                    int64_t v233 = v226;\n                    int16_t ** v234 = __ctype_b_loc(); // 0x402390\n                    int64_t v235 = g82; // 0x402398\n                    int16_t * v236 = *v234; // 0x40239f\n                    char v237 = *(char *)((0x100000000 * (int64_t)v227 >> 31 | 1) + (int64_t)v236); // 0x4023a2\n                    while ((v237 & 64) != 0) {\n                        // 0x4023a9\n                        *(char *)(v228 + v215) = (char)v227;\n                        v228++;\n                        if (v228 >= v235) {\n                            // break (via goto) -> 0x402574\n                            goto lab_0x402574_2;\n                        }\n                        int64_t v238 = function_403d20((int64_t *)&v3); // 0x4023c3\n                        v227 = v3;\n                        v226 = v238 & v233;\n                        v229 = v235;\n                        v230 = v226;\n                        v231 = v215;\n                        v232 = v224;\n                        if (v227 < 0) {\n                            goto lab_0x4023d3_3;\n                        }\n                        v233 = v226;\n                        v234 = __ctype_b_loc();\n                        v235 = g82;\n                        v236 = *v234;\n                        v237 = *(char *)((0x100000000 * (int64_t)v227 >> 31 | 1) + (int64_t)v236);\n                    }\n                    v216 = v221;\n                    v222 = v219;\n                    v214 = v218;\n                    v217 = g82;\n                    if (*(char *)&g75 != 0) {\n                        // 0x402363\n                        v223 = g73;\n                        if (v223 >= v217 != v223 - v217 > v222) {\n                            // break (via goto) -> 0x402ab6\n                            goto lab_0x402ab6;\n                        }\n                    }\n                }\n              lab_0x402574_2:;\n                int64_t v239 = 0; // 0x401be0\n                int64_t v240 = 0; // 0x401be0\n                int64_t v241 = v214; // 0x401be0\n                int64_t v242 = v222; // 0x401be0\n                int64_t v243 = v215; // 0x401be0\n                int64_t v244 = v216; // 0x401be0\n                int64_t v245; // 0x401be0\n                int64_t v246; // 0x401be0\n                int64_t v247; // 0x401be0\n                int64_t v248; // 0x401be0\n                int64_t v249; // 0x401be0\n                while (true) {\n                  lab_0x402574:;\n                    int64_t v250 = v243;\n                    int64_t v251 = v242;\n                    int64_t v252 = v241;\n                    int64_t v253 = v240;\n                    v249 = v239;\n                    if (*(char *)&g75 != 0) {\n                        // 0x40257d\n                        v245 = v252;\n                        v246 = v251;\n                        v247 = v250;\n                        v248 = v244;\n                        if (v251 >= g73) {\n                            // break -> 0x40293d\n                            break;\n                        }\n                    }\n                    int64_t v254 = v253; // 0x40258f\n                    int64_t v255 = v250; // 0x40258f\n                    if (v22 == v249) {\n                        // 0x402591\n                        v255 = function_407930(v250, &v22);\n                        v254 = v209;\n                    }\n                    int64_t v256 = v255;\n                    int64_t v257 = v254;\n                    int64_t v258 = function_403d20((int64_t *)&v3); // 0x40253a\n                    int32_t v259 = v3; // 0x40253f\n                    int64_t v260 = v259; // 0x40253f\n                    int64_t v261 = v252 & 0xffffffff & v258; // 0x402544\n                    v229 = v257;\n                    v230 = v261;\n                    v231 = v256;\n                    v232 = v260;\n                    if (v259 < 0) {\n                        goto lab_0x4023d3_3;\n                    }\n                    int64_t v262 = v251 + 1; // 0x402536\n                    v245 = v261;\n                    v246 = v262;\n                    v247 = v256;\n                    v248 = 0;\n                    if (v259 == 0) {\n                        // break -> 0x40293d\n                        break;\n                    }\n                    char v263 = *(char *)((0x100000000 * v260 >> 31 | 1) + (int64_t)*__ctype_b_loc()); // 0x402561\n                    v210 = v261;\n                    v211 = v262;\n                    v212 = v256;\n                    v213 = v260;\n                    if ((v263 & 64) == 0) {\n                        goto lab_0x402350;\n                    } else {\n                        // 0x40256c\n                        *(char *)(v256 + v249) = (char)v259;\n                        v239 = v249 + 1;\n                        v240 = v257;\n                        v241 = v261;\n                        v242 = v262;\n                        v243 = v256;\n                        v244 = v260;\n                        goto lab_0x402574;\n                    }\n                }\n                // 0x40293d\n                v220 = v247;\n                v219 = v246;\n                *(char *)(v220 + v249) = 0;\n                char v264 = *(char *)v220; // 0x402959\n                int64_t v265 = (int64_t)g48; // 0x40295c\n                v3 = v264;\n                int64_t v266 = v265; // 0x40296c\n                char v267 = v264; // 0x40296c\n                int64_t v268 = v220; // 0x40296c\n                struct _IO_FILE * v269 = g48; // 0x40296c\n                int64_t v270 = v265; // 0x40296c\n                if (v264 != 0) {\n                    g106 = v267 - 7;\n                    int64_t * v271; // 0x4029e5\n                    uint64_t v272; // 0x4029e5\n                    switch (v267) {\n                        case 7: {\n                            // 0x4029cd\n                            fwrite_unlocked((int64_t *)\"\\\\a\", 1, 2, g48);\n                            // break -> 0x402997\n                            break;\n                        }\n                        case 8: {\n                            // 0x4029c1\n                            fwrite_unlocked((int64_t *)\"\\\\b\", 1, 2, g48);\n                            // break -> 0x402997\n                            break;\n                        }\n                        case 9: {\n                            // 0x4029b5\n                            fwrite_unlocked((int64_t *)\"\\\\t\", 1, 2, g48);\n                            // break -> 0x402997\n                            break;\n                        }\n                        case 10: {\n                            // 0x4029a9\n                            fwrite_unlocked((int64_t *)\"\\\\n\", 1, 2, g48);\n                            // break -> 0x402997\n                            break;\n                        }\n                        case 11: {\n                            // 0x40299d\n                            fwrite_unlocked((int64_t *)\"\\\\v\", 1, 2, g48);\n                            // break -> 0x402997\n                            break;\n                        }\n                        case 12: {\n                            // 0x40298d\n                            fwrite_unlocked((int64_t *)\"\\\\f\", 1, 2, g48);\n                            // break -> 0x402997\n                            break;\n                        }\n                        case 13: {\n                            // 0x4029d9\n                            fwrite_unlocked((int64_t *)\"\\\\r\", 1, 2, g48);\n                            // break -> 0x402997\n                            break;\n                        }\n                        default: {\n                            // 0x4029e5\n                            v271 = (int64_t *)(v266 + 40);\n                            v272 = *v271;\n                            if (v272 >= *(int64_t *)(v266 + 48)) {\n                                // 0x402b41\n                                __overflow(g48, 2);\n                            } else {\n                                // 0x4029f3\n                                *v271 = v272 + 1;\n                                *(char *)v272 = 2;\n                            }\n                            // break -> 0x402997\n                            break;\n                        }\n                    }\n                    int64_t v273 = v268 + 1; // 0x402997\n                    char v274 = *(char *)v273; // 0x402959\n                    int64_t v275 = (int64_t)g48;\n                    v3 = v274;\n                    v266 = v275;\n                    v267 = v274;\n                    v268 = v273;\n                    v269 = g48;\n                    v270 = v275;\n                    while (v274 != 0) {\n                        // 0x402972\n                        g106 = v267 - 7;\n                        switch (v267) {\n                            case 7: {\n                                // 0x4029cd\n                                fwrite_unlocked((int64_t *)\"\\\\a\", 1, 2, g48);\n                                // break -> 0x402997\n                                break;\n                            }\n                            case 8: {\n                                // 0x4029c1\n                                fwrite_unlocked((int64_t *)\"\\\\b\", 1, 2, g48);\n                                // break -> 0x402997\n                                break;\n                            }\n                            case 9: {\n                                // 0x4029b5\n                                fwrite_unlocked((int64_t *)\"\\\\t\", 1, 2, g48);\n                                // break -> 0x402997\n                                break;\n                            }\n                            case 10: {\n                                // 0x4029a9\n                                fwrite_unlocked((int64_t *)\"\\\\n\", 1, 2, g48);\n                                // break -> 0x402997\n                                break;\n                            }\n                            case 11: {\n                                // 0x40299d\n                                fwrite_unlocked((int64_t *)\"\\\\v\", 1, 2, g48);\n                                // break -> 0x402997\n                                break;\n                            }\n                            case 12: {\n                                // 0x40298d\n                                fwrite_unlocked((int64_t *)\"\\\\f\", 1, 2, g48);\n                                // break -> 0x402997\n                                break;\n                            }\n                            case 13: {\n                                // 0x4029d9\n                                fwrite_unlocked((int64_t *)\"\\\\r\", 1, 2, g48);\n                                // break -> 0x402997\n                                break;\n                            }\n                            default: {\n                                // 0x4029e5\n                                v271 = (int64_t *)(v266 + 40);\n                                v272 = *v271;\n                                if (v272 >= *(int64_t *)(v266 + 48)) {\n                                    // 0x402b41\n                                    __overflow(g48, 2);\n                                } else {\n                                    // 0x4029f3\n                                    *v271 = v272 + 1;\n                                    *(char *)v272 = 2;\n                                }\n                                // break -> 0x402997\n                                break;\n                            }\n                        }\n                        // 0x402997\n                        v273 = v268 + 1;\n                        v274 = *(char *)v273;\n                        v275 = (int64_t)g48;\n                        v3 = v274;\n                        v266 = v275;\n                        v267 = v274;\n                        v268 = v273;\n                        v269 = g48;\n                        v270 = v275;\n                    }\n                }\n                int64_t * v276 = (int64_t *)(v270 + 40); // 0x4029ff\n                uint64_t v277 = *v276; // 0x4029ff\n                if (v277 >= *(int64_t *)(v270 + 48)) {\n                    // 0x402b28\n                    __overflow(v269, 10);\n                } else {\n                    // 0x402a0d\n                    *v276 = v277 + 1;\n                    *(char *)v277 = 10;\n                }\n                // 0x402357\n                v218 = v245;\n                v221 = v248;\n            }\n        }\n      lab_0x402ab6:\n        // 0x402ab6\n        free((int64_t *)v215);\n        v278 = v217;\n        v279 = v214 & 0xffffffff & function_4038f0(0);\n        v280 = v215;\n        v281 = v216;\n        goto lab_0x4023df;\n    }\n  lab_0x4022a5:;\n    uint64_t v282 = 0;\n    uint32_t v283 = *(int32_t *)v111; // 0x4022c0\n    int32_t v284 = *(int32_t *)(4 * (int64_t)v283 + (int64_t)&g11); // 0x4022c4\n    int32_t v285 = *(int32_t *)(v111 + 24); // 0x4022d2\n    uint64_t v286 = (int64_t)((v285 + 1) * (int32_t)(v110 / (int64_t)v284)); // 0x4022db\n    int64_t v287 = v282 < v286 ? v286 : v282; // 0x4022e1\n    int64_t v288 = v111 + 40; // 0x4022e5\n    int64_t v289 = v288; // 0x4022ec\n    while (v112 != v288) {\n        // 0x4022c0\n        v282 = v287;\n        v283 = *(int32_t *)v289;\n        v284 = *(int32_t *)(4 * (int64_t)v283 + (int64_t)&g11);\n        v285 = *(int32_t *)(v289 + 24);\n        v286 = (int64_t)((v285 + 1) * (int32_t)(v110 / (int64_t)v284));\n        v287 = v282 < v286 ? v286 : v282;\n        v288 = v289 + 40;\n        v289 = v288;\n    }\n    uint32_t v290 = *(int32_t *)v111; // 0x4022f0\n    int64_t v291 = v111 + 40; // 0x4022f4\n    int32_t v292 = *(int32_t *)(4 * (int64_t)v290 + (int64_t)&g11); // 0x4022f8\n    int32_t v293 = *(int32_t *)(v111 + 24); // 0x402308\n    *(int32_t *)(v111 + 28) = (int32_t)v287 - v293 * (int32_t)(v110 / (int64_t)v292);\n    int64_t v294 = v291; // 0x402314\n    v142 = v116;\n    while (v112 != v291) {\n        // 0x4022f0\n        v290 = *(int32_t *)v294;\n        v291 = v294 + 40;\n        v292 = *(int32_t *)(4 * (int64_t)v290 + (int64_t)&g11);\n        v293 = *(int32_t *)(v294 + 24);\n        *(int32_t *)(v294 + 28) = (int32_t)v287 - v293 * (int32_t)(v110 / (int64_t)v292);\n        v294 = v291;\n        v142 = v116;\n    }\n    goto lab_0x402316;\n  lab_0x4023df:;\n    uint32_t v295 = (int32_t)v117 % 256 & (int32_t)v279; // 0x4023e3\n    v104 = v144;\n    v105 = v295;\n    v106 = v278;\n    v107 = v295 % 2;\n    v108 = v280;\n    v109 = v281;\n    goto lab_0x4023ed;\n  lab_0x40282c:;\n    int64_t v296 = v297;\n    int64_t v298 = v299;\n    int64_t v300 = v298; // 0x402841\n    if (*(char *)&g75 != 0) {\n        // 0x402843\n        v300 = v298;\n        if (v296 >= g73) {\n            // 0x402a60\n            v300 = v298 & 0xffffffff & function_4038f0(0);\n        }\n    }\n    // 0x402850\n    free((int64_t *)v22);\n    v278 = 10;\n    v279 = v300;\n    v280 = v296;\n    v281 = v301;\n    goto lab_0x4023df;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402c60",
            "funcEndAddr": "402c8b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402c60\n    int64_t v1; // 0x402c60\n    __libc_start_main(0x401be0, (int32_t)a4, (char **)&v1, (void (*)())0x40c200, (void (*)())0x40c260, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402c8b",
            "funcStartAddr": "402c8b",
            "funcEndAddr": "402caa",
            "decompiledFuncCode": "int64_t function_402c8b(void) {\n    // 0x402c8b\n    return &g47;\n}\n"
        },
        {
            "funcName": "function_402caa",
            "funcStartAddr": "402caa",
            "funcEndAddr": "402ce1",
            "decompiledFuncCode": "int64_t function_402caa(void) {\n    // 0x402caa\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402ce1",
            "funcStartAddr": "402ce1",
            "funcEndAddr": "402d38",
            "decompiledFuncCode": "int64_t function_402ce1(void) {\n    // 0x402ce1\n    if (g52 != 0) {\n        // 0x402d37\n        int64_t result; // 0x402ce1\n        return result;\n    }\n    int64_t v1 = g53; // 0x402d14\n    int64_t result2; // 0x402d26\n    if (g53 >= ((int64_t)&g31 - (int64_t)&g30 >> 3) - 1) {\n        // 0x402d26\n        result2 = function_402c8b();\n        g52 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g31 - (int64_t)&g30 >> 3) - 1) {\n        // 0x402d16\n        v1++;\n    }\n    // 0x402d0a\n    g53 = v1;\n    // 0x402d26\n    result2 = function_402c8b();\n    g52 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402d38",
            "funcStartAddr": "402d38",
            "funcEndAddr": "402d3d",
            "decompiledFuncCode": "int64_t function_402d38(void) {\n    // 0x402d38\n    return function_402caa();\n}\n"
        },
        {
            "funcName": "function_402d40",
            "funcStartAddr": "402d40",
            "funcEndAddr": "402d41",
            "decompiledFuncCode": "int64_t function_402d40(void) {\n    // 0x402d40\n    int64_t result; // 0x402d40\n    return result;\n}\n"
        },
        {
            "funcName": "function_402d50",
            "funcStartAddr": "402d50",
            "funcEndAddr": "402e3d",
            "decompiledFuncCode": "int64_t function_402d50(int64_t a1, int64_t a2) {\n    // 0x402d50\n    int64_t v1; // bp-17, 0x402d50\n    int64_t v2 = &v1; // 0x402d5e\n    v1 = 0x100000000000000 * a2 >> 56;\n    uint64_t v3 = v2 - (int64_t)g83; // 0x402d70\n    int64_t v4 = v2; // 0x402d50\n    int64_t v5 = v2; // 0x402dbb\n    uint64_t v6 = a1;\n    int64_t v7 = v2; // 0x402ddb\n    uint64_t v8 = a1;\n    int64_t v9 = v2; // 0x402e09\n    int64_t v10; // 0x402d50\n    switch (g84) {\n        case 10: {\n            v9--;\n            *(char *)v9 = (char)a1 + 48;\n            while (a1 >= 10) {\n                // 0x402e03\n                v9--;\n                *(char *)v9 = (char)a1 + 48;\n            }\n            // 0x402e2c\n            v10 = v9;\n            if (v3 >= v9) {\n                // 0x402da4\n                return fputs_unlocked((char *)v9, g48);\n            }\n            // break -> 0x402d98\n            break;\n        }\n        case 16: {\n            v5--;\n            char v11 = *(char *)(v6 % 16 | (int64_t)\"0123456789abcdef\"); // 0x402dc6\n            *(char *)v5 = v11;\n            v4 = v5;\n            while (v6 >= 16) {\n                // 0x402db8\n                v6 /= 16;\n                v5--;\n                v11 = *(char *)(v6 % 16 | (int64_t)\"0123456789abcdef\");\n                *(char *)v5 = v11;\n                v4 = v5;\n            }\n        }\n        default: {\n          lab_0x402d88:\n            // 0x402d88\n            v10 = v4;\n            if (v3 >= v4) {\n                // 0x402da4\n                return fputs_unlocked((char *)v4, g48);\n            }\n            // break -> 0x402d98\n            break;\n        }\n        case 8: {\n            v7--;\n            *(char *)v7 = (char)v8 % 8 | 48;\n            v4 = v7;\n            while (v8 >= 8) {\n                // 0x402dd8\n                v8 /= 8;\n                v7--;\n                *(char *)v7 = (char)v8 % 8 | 48;\n                v4 = v7;\n            }\n            // branch (via goto) -> 0x402d88\n            goto lab_0x402d88;\n        }\n    }\n    int64_t v12 = v10; // 0x402d98\n    v12--;\n    *(char *)v12 = 48;\n    while (v3 != v12) {\n        // 0x402d98\n        v12--;\n        *(char *)v12 = 48;\n    }\n    // 0x402da4\n    return fputs_unlocked((char *)v3, g48);\n}\n"
        },
        {
            "funcName": "function_402e40",
            "funcStartAddr": "402e40",
            "funcEndAddr": "402eb2",
            "decompiledFuncCode": "int64_t function_402e40(int64_t a1, int64_t * a2, char a3, int64_t a4) {\n    char v1 = a1;\n    if (v1 == 0) {\n        // 0x402e8e\n        return 0;\n    }\n    int64_t v2 = (int64_t)(v1 == 43) + a1;\n    char * str = (char *)v2; // 0x402e5d\n    int64_t v3; // 0x402e40\n    int64_t v4; // 0x402e7a\n    if (strchr(str, 46) != NULL) {\n        // 0x402e6c\n        v4 = function_407ce0(v2, 0, 10, a2, (int64_t *)\"Bb\", v3);\n        return v4 & -256 | (int64_t)((int32_t)v4 == 0);\n    }\n    int64_t v5 = 8; // 0x402e99\n    if (*str == 48) {\n        // 0x402e9b\n        v5 = 8 * (int64_t)((*(char *)(v2 + 1) & -33) == 88) + 8;\n    }\n    // 0x402e6c\n    v4 = function_407ce0(v2, 0, v5, a2, (int64_t *)\"Bb\", v3);\n    return v4 & -256 | (int64_t)((int32_t)v4 == 0);\n}\n"
        },
        {
            "funcName": "function_402ec0",
            "funcStartAddr": "402ec0",
            "funcEndAddr": "402f71",
            "decompiledFuncCode": "int64_t function_402ec0(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t result; // 0x402ec0\n    if (a1 <= a2) {\n        // 0x402f60\n        return result;\n    }\n    int64_t v1 = 0x100000000 * a6 >> 32; // 0x402edb\n    char v2; // bp-58, 0x402ec0\n    int64_t v3 = &v2;\n    int64_t v4 = a3; // 0x402efa\n    int64_t v5 = v1 * (a1 - 1); // 0x402efa\n    unsigned char v6 = *(char *)v4 % 128;\n    int64_t v7 = (int64_t)\"del\"; // 0x402f49\n    if (v6 != 127) {\n        if (v6 < 33) {\n            // 0x402f00\n            v7 = 4 * (int64_t)v6 + (int64_t)\"nul\";\n        } else {\n            // 0x402f4f\n            v2 = v6;\n            v7 = v3;\n        }\n    }\n    // 0x402f0b\n    v4++;\n    uint64_t v8 = v5 / a1;\n    int64_t v9 = a6 - v8; // 0x402f0b\n    int64_t v10 = v8 & 0xffffffff; // 0x402f29\n    v5 -= v1;\n    result = function_407ac0(\"%*s\", v9 + a5 & 0xffffffff, v7, a4, a5, (int32_t)v9);\n    while (v4 != a1 - a2 + a3) {\n        // 0x402f2b\n        v6 = *(char *)v4 % 128;\n        v7 = (int64_t)\"del\";\n        if (v6 != 127) {\n            if (v6 < 33) {\n                // 0x402f00\n                v7 = 4 * (int64_t)v6 + (int64_t)\"nul\";\n            } else {\n                // 0x402f4f\n                v2 = v6;\n                v7 = v3;\n            }\n        }\n        // 0x402f0b\n        v4++;\n        v8 = v5 / a1;\n        v9 = v10 - v8;\n        v10 = v8 & 0xffffffff;\n        v5 -= v1;\n        result = function_407ac0(\"%*s\", v9 + a5 & 0xffffffff, v7, a4, a5, (int32_t)v9);\n    }\n    // 0x402f60\n    return result;\n}\n"
        },
        {
            "funcName": "function_402f80",
            "funcStartAddr": "402f80",
            "funcEndAddr": "40304f",
            "decompiledFuncCode": "int64_t function_402f80(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t result; // 0x402f80\n    if (a1 <= a2) {\n        // 0x403040\n        return result;\n    }\n    int64_t v1 = 0x100000000 * a6 >> 32; // 0x402fa5\n    int64_t v2 = v1 * (a1 - 1); // 0x402fb2\n    int64_t v3 = a1; // 0x402fc6\n    int64_t v4 = v2; // 0x402fc6\n    int64_t v5; // 0x402f80\n    int64_t v6; // 0x402f80\n    int64_t v7; // bp-56, 0x402f80\n    int64_t v8; // bp-64, 0x402f80\n    int64_t * v9; // 0x402f80\n    int64_t v10; // 0x403023\n    if (g55 == 0) {\n        // 0x402fd0\n        v9 = (int64_t *)a3;\n    } else {\n        // 0x403015\n        v6 = a3 + 7;\n        v5 = &v8;\n        v10 = v5 + 1;\n        *(char *)v5 = *(char *)v6;\n        v9 = &v8;\n        v6--;\n        while (v10 != (int64_t)&v7) {\n            // 0x403020\n            v5 = v10;\n            v10 = v5 + 1;\n            *(char *)v5 = *(char *)v6;\n            v9 = &v8;\n            v6--;\n        }\n    }\n    // 0x402fd4\n    v3--;\n    uint64_t v11 = v4 / a1;\n    int64_t v12 = a6 - v11; // 0x402ffe\n    int64_t v13 = *v9;\n    int64_t v14 = v11 & 0xffffffff; // 0x402ff0\n    int64_t v15 = a3 + 8; // 0x402ff0\n    v4 -= v1;\n    result = function_407ac0((char *)a4, v12 + a5 & 0xffffffff, v13, v2, a5, (int32_t)v12);\n    while (v3 != a2) {\n        int64_t v16 = v15;\n        if (g55 == 0) {\n            // 0x402fd0\n            v9 = (int64_t *)v16;\n        } else {\n            // 0x403015\n            v6 = v16 + 7;\n            v5 = &v8;\n            v10 = v5 + 1;\n            *(char *)v5 = *(char *)v6;\n            v9 = &v8;\n            v6--;\n            while (v10 != (int64_t)&v7) {\n                // 0x403020\n                v5 = v10;\n                v10 = v5 + 1;\n                *(char *)v5 = *(char *)v6;\n                v9 = &v8;\n                v6--;\n            }\n        }\n        // 0x402fd4\n        v3--;\n        v11 = v4 / a1;\n        v12 = v14 - v11;\n        v13 = *v9;\n        v14 = v11 & 0xffffffff;\n        v15 = v16 + 8;\n        v4 -= v1;\n        result = function_407ac0((char *)a4, v12 + a5 & 0xffffffff, v13, v2, a5, (int32_t)v12);\n    }\n    // 0x403040\n    return result;\n}\n"
        },
        {
            "funcName": "function_403050",
            "funcStartAddr": "403050",
            "funcEndAddr": "40311f",
            "decompiledFuncCode": "int64_t function_403050(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t result; // 0x403050\n    if (a1 <= a2) {\n        // 0x403110\n        return result;\n    }\n    int64_t v1 = 0x100000000 * a6 >> 32; // 0x403075\n    int64_t v2 = v1 * (a1 - 1); // 0x403082\n    int64_t v3 = a1; // 0x403096\n    int64_t v4 = v2; // 0x403096\n    int64_t v5; // 0x403050\n    int64_t v6; // 0x403050\n    int64_t v7; // bp-56, 0x403050\n    int64_t v8; // bp-64, 0x403050\n    int64_t * v9; // 0x403050\n    int64_t v10; // 0x4030f3\n    if (g55 == 0) {\n        // 0x4030a0\n        v9 = (int64_t *)a3;\n    } else {\n        // 0x4030e5\n        v6 = a3 + 7;\n        v5 = &v8;\n        v10 = v5 + 1;\n        *(char *)v5 = *(char *)v6;\n        v9 = &v8;\n        v6--;\n        while (v10 != (int64_t)&v7) {\n            // 0x4030f0\n            v5 = v10;\n            v10 = v5 + 1;\n            *(char *)v5 = *(char *)v6;\n            v9 = &v8;\n            v6--;\n        }\n    }\n    // 0x4030a4\n    v3--;\n    uint64_t v11 = v4 / a1;\n    int64_t v12 = a6 - v11; // 0x4030ce\n    int64_t v13 = *v9;\n    int64_t v14 = v11 & 0xffffffff; // 0x4030c0\n    int64_t v15 = a3 + 8; // 0x4030c0\n    v4 -= v1;\n    result = function_407ac0((char *)a4, v12 + a5 & 0xffffffff, v13, v2, a5, (int32_t)v12);\n    while (v3 != a2) {\n        int64_t v16 = v15;\n        if (g55 == 0) {\n            // 0x4030a0\n            v9 = (int64_t *)v16;\n        } else {\n            // 0x4030e5\n            v6 = v16 + 7;\n            v5 = &v8;\n            v10 = v5 + 1;\n            *(char *)v5 = *(char *)v6;\n            v9 = &v8;\n            v6--;\n            while (v10 != (int64_t)&v7) {\n                // 0x4030f0\n                v5 = v10;\n                v10 = v5 + 1;\n                *(char *)v5 = *(char *)v6;\n                v9 = &v8;\n                v6--;\n            }\n        }\n        // 0x4030a4\n        v3--;\n        v11 = v4 / a1;\n        v12 = v14 - v11;\n        v13 = *v9;\n        v14 = v11 & 0xffffffff;\n        v15 = v16 + 8;\n        v4 -= v1;\n        result = function_407ac0((char *)a4, v12 + a5 & 0xffffffff, v13, v2, a5, (int32_t)v12);\n    }\n    // 0x403110\n    return result;\n}\n"
        },
        {
            "funcName": "function_403120",
            "funcStartAddr": "403120",
            "funcEndAddr": "4031ff",
            "decompiledFuncCode": "int64_t function_403120(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    if (a1 <= a2) {\n        // 0x4031f0\n        int64_t result; // 0x403120\n        return result;\n    }\n    int64_t v1 = 0x100000000 * a6 >> 32; // 0x403140\n    int64_t v2 = v1 * (a1 - 1); // 0x40314d\n    int64_t v3 = v2; // 0x403167\n    int64_t v4 = 0; // 0x403167\n    int64_t v5 = 4 * v4 + a3;\n    int64_t v6; // 0x403120\n    int64_t v7; // 0x403120\n    int64_t v8; // 0x4031b7\n    unsigned char v9; // 0x4031bd\n    unsigned char v10; // 0x4031cf\n    unsigned char v11; // 0x4031b2\n    if (g55 == 0) {\n        // 0x403170\n        v6 = a4;\n        v7 = (int64_t)*(int32_t *)v5;\n    } else {\n        // 0x4031b2\n        v11 = *(char *)(v5 + 3);\n        v8 = (int64_t)*(char *)(v5 + 2);\n        v9 = *(char *)(v5 + 1);\n        v10 = *(char *)v5;\n        v6 = v8;\n        v7 = 256 * v8 | (int64_t)v11 | 0x10000 * (int64_t)v9 | 0x1000000 * (int64_t)v10;\n    }\n    uint64_t v12 = v3 / a1;\n    int64_t v13 = a6 - v12; // 0x40319b\n    v4++;\n    int64_t result2 = function_407ac0((char *)a4, v13 + a5 & 0xffffffff, v7, v6, v2, (int32_t)v13); // 0x40317f\n    int64_t v14 = v6; // 0x403191\n    int64_t v15 = v12 & 0xffffffff; // 0x403191\n    v3 -= v1;\n    while (a1 - a2 != v4) {\n        // 0x403193\n        v5 = 4 * v4 + a3;\n        if (g55 == 0) {\n            // 0x403170\n            v6 = v14;\n            v7 = (int64_t)*(int32_t *)v5;\n        } else {\n            // 0x4031b2\n            v11 = *(char *)(v5 + 3);\n            v8 = (int64_t)*(char *)(v5 + 2);\n            v9 = *(char *)(v5 + 1);\n            v10 = *(char *)v5;\n            v6 = v8;\n            v7 = 256 * v8 | (int64_t)v11 | 0x10000 * (int64_t)v9 | 0x1000000 * (int64_t)v10;\n        }\n        // 0x403175\n        v12 = v3 / a1;\n        v13 = v15 - v12;\n        v4++;\n        result2 = function_407ac0((char *)a4, v13 + a5 & 0xffffffff, v7, v6, v2, (int32_t)v13);\n        v14 = v6;\n        v15 = v12 & 0xffffffff;\n        v3 -= v1;\n    }\n    // 0x4031f0\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403200",
            "funcStartAddr": "403200",
            "funcEndAddr": "4032bf",
            "decompiledFuncCode": "int64_t function_403200(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    if (a1 <= a2) {\n        // 0x4032b0\n        int64_t result; // 0x403200\n        return result;\n    }\n    int64_t v1 = 0x100000000 * a6 >> 32; // 0x403220\n    int64_t v2 = v1 * (a1 - 1); // 0x40322d\n    int64_t v3 = v2; // 0x403247\n    int64_t v4 = 0; // 0x403247\n    int64_t v5 = 2 * v4 + a3;\n    int64_t v6; // 0x403200\n    int64_t v7; // 0x403200\n    int64_t v8; // 0x403200\n    int64_t v9; // 0x403200\n    int64_t v10; // 0x4032a1\n    unsigned char v11; // 0x403293\n    unsigned char v12; // 0x403298\n    if (g55 == 0) {\n        // 0x403250\n        v8 = a4;\n        v6 = v7;\n        v9 = (int64_t)*(int16_t *)v5;\n    } else {\n        // 0x403293\n        v11 = *(char *)(v5 + 1);\n        v12 = *(char *)v5;\n        v10 = v7 & 0xffff0000 | (int64_t)v11 | 256 * (int64_t)v12;\n        v8 = v10;\n        v6 = v10;\n        v9 = v10 % 0x10000;\n    }\n    uint64_t v13 = v3 / a1;\n    int64_t v14 = a6 - v13; // 0x40327c\n    v4++;\n    int64_t result2 = function_407ac0((char *)a4, v14 + a5 & 0xffffffff, v9, v8, v2, (int32_t)v14); // 0x403260\n    int64_t v15 = v8; // 0x403272\n    int64_t v16 = v13 & 0xffffffff; // 0x403272\n    v3 -= v1;\n    while (a1 - a2 != v4) {\n        int64_t v17 = v6;\n        v5 = 2 * v4 + a3;\n        if (g55 == 0) {\n            // 0x403250\n            v8 = v15;\n            v6 = v17;\n            v9 = (int64_t)*(int16_t *)v5;\n        } else {\n            // 0x403293\n            v11 = *(char *)(v5 + 1);\n            v12 = *(char *)v5;\n            v10 = v17 & 0xffff0000 | (int64_t)v11 | 256 * (int64_t)v12;\n            v8 = v10;\n            v6 = v10;\n            v9 = v10 % 0x10000;\n        }\n        // 0x403256\n        v13 = v3 / a1;\n        v14 = v16 - v13;\n        v4++;\n        result2 = function_407ac0((char *)a4, v14 + a5 & 0xffffffff, v9, v8, v2, (int32_t)v14);\n        v15 = v8;\n        v16 = v13 & 0xffffffff;\n        v3 -= v1;\n    }\n    // 0x4032b0\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4032c0",
            "funcStartAddr": "4032c0",
            "funcEndAddr": "40337f",
            "decompiledFuncCode": "int64_t function_4032c0(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    if (a1 <= a2) {\n        // 0x403370\n        int64_t result; // 0x4032c0\n        return result;\n    }\n    int64_t v1 = 0x100000000 * a6 >> 32; // 0x4032e0\n    int64_t v2 = v1 * (a1 - 1); // 0x4032ed\n    int64_t v3 = v2; // 0x403307\n    int64_t v4 = 0; // 0x403307\n    int64_t v5 = 2 * v4 + a3;\n    int64_t v6; // 0x4032c0\n    int64_t v7; // 0x4032c0\n    int64_t v8; // 0x4032c0\n    int64_t v9; // 0x4032c0\n    int64_t v10; // 0x403361\n    unsigned char v11; // 0x403353\n    unsigned char v12; // 0x403358\n    if (g55 == 0) {\n        // 0x403310\n        v8 = a4;\n        v6 = v7;\n        v9 = (int64_t)*(int16_t *)v5;\n    } else {\n        // 0x403353\n        v11 = *(char *)(v5 + 1);\n        v12 = *(char *)v5;\n        v10 = v7 & 0xffff0000 | (int64_t)v11 | 256 * (int64_t)v12;\n        v8 = v10;\n        v6 = v10;\n        v9 = 0x1000000000000 * v10 >> 48;\n    }\n    uint64_t v13 = v3 / a1;\n    int64_t v14 = a6 - v13; // 0x40333c\n    v4++;\n    int64_t result2 = function_407ac0((char *)a4, v14 + a5 & 0xffffffff, v9, v8, v2, (int32_t)v14); // 0x403320\n    int64_t v15 = v8; // 0x403332\n    int64_t v16 = v13 & 0xffffffff; // 0x403332\n    v3 -= v1;\n    while (a1 - a2 != v4) {\n        int64_t v17 = v6;\n        v5 = 2 * v4 + a3;\n        if (g55 == 0) {\n            // 0x403310\n            v8 = v15;\n            v6 = v17;\n            v9 = (int64_t)*(int16_t *)v5;\n        } else {\n            // 0x403353\n            v11 = *(char *)(v5 + 1);\n            v12 = *(char *)v5;\n            v10 = v17 & 0xffff0000 | (int64_t)v11 | 256 * (int64_t)v12;\n            v8 = v10;\n            v6 = v10;\n            v9 = 0x1000000000000 * v10 >> 48;\n        }\n        // 0x403316\n        v13 = v3 / a1;\n        v14 = v16 - v13;\n        v4++;\n        result2 = function_407ac0((char *)a4, v14 + a5 & 0xffffffff, v9, v8, v2, (int32_t)v14);\n        v15 = v8;\n        v16 = v13 & 0xffffffff;\n        v3 -= v1;\n    }\n    // 0x403370\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403380",
            "funcStartAddr": "403380",
            "funcEndAddr": "403402",
            "decompiledFuncCode": "int64_t function_403380(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t result; // 0x403380\n    if (a1 <= a2) {\n        // 0x4033f3\n        return result;\n    }\n    int64_t v1 = 0x100000000 * a6 >> 32; // 0x40339a\n    int64_t v2 = v1 * (a1 - 1); // 0x4033a7\n    int64_t v3 = v2; // 0x4033bd\n    int64_t v4 = a3 + 1; // 0x4033c9\n    uint64_t v5 = v3 / a1;\n    unsigned char v6 = *(char *)a3; // 0x4033d0\n    int64_t v7 = a6 - v5; // 0x4033d8\n    int64_t v8 = v5 & 0xffffffff; // 0x4033f1\n    v3 -= v1;\n    result = function_407ac0((char *)a4, v7 + a5 & 0xffffffff, (int64_t)v6, v2, a5, (int32_t)v7);\n    while (v4 != a1 - a2 + a3) {\n        int64_t v9 = v4;\n        v4 = v9 + 1;\n        v5 = v3 / a1;\n        v6 = *(char *)v9;\n        v7 = v8 - v5;\n        v8 = v5 & 0xffffffff;\n        v3 -= v1;\n        result = function_407ac0((char *)a4, v7 + a5 & 0xffffffff, (int64_t)v6, v2, a5, (int32_t)v7);\n    }\n    // 0x4033f3\n    return result;\n}\n"
        },
        {
            "funcName": "function_403410",
            "funcStartAddr": "403410",
            "funcEndAddr": "403492",
            "decompiledFuncCode": "int64_t function_403410(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t result; // 0x403410\n    if (a1 <= a2) {\n        // 0x403483\n        return result;\n    }\n    int64_t v1 = 0x100000000 * a6 >> 32; // 0x40342a\n    int64_t v2 = v1 * (a1 - 1); // 0x403437\n    int64_t v3 = v2; // 0x40344d\n    int64_t v4 = a3 + 1; // 0x403459\n    uint64_t v5 = v3 / a1;\n    char v6 = *(char *)a3; // 0x403460\n    int64_t v7 = a6 - v5; // 0x403468\n    int64_t v8 = v5 & 0xffffffff; // 0x403481\n    v3 -= v1;\n    result = function_407ac0((char *)a4, v7 + a5 & 0xffffffff, (int64_t)v6, v2, a5, (int32_t)v7);\n    while (v4 != a1 - a2 + a3) {\n        int64_t v9 = v4;\n        v4 = v9 + 1;\n        v5 = v3 / a1;\n        v6 = *(char *)v9;\n        v7 = v8 - v5;\n        v8 = v5 & 0xffffffff;\n        v3 -= v1;\n        result = function_407ac0((char *)a4, v7 + a5 & 0xffffffff, (int64_t)v6, v2, a5, (int32_t)v7);\n    }\n    // 0x403483\n    return result;\n}\n"
        },
        {
            "funcName": "function_4034a0",
            "funcStartAddr": "4034a0",
            "funcEndAddr": "40358f",
            "decompiledFuncCode": "int64_t function_4034a0(int64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a1; // bp-136, 0x4034ae\n    if (a1 <= a2) {\n        // 0x403580\n        int64_t result; // 0x4034a0\n        return result;\n    }\n    int64_t v2 = &v1; // 0x4034aa\n    int64_t v3 = (0x100000000 * a6 >> 32) * (a1 - 1); // 0x4034d2\n    int64_t v4 = v2 + 32;\n    int64_t v5 = v2 - 16; // 0x4034f4\n    v1 = a1;\n    int64_t v6 = v3; // 0x4034e6\n    int64_t v7 = a1; // 0x4034e6\n    int64_t v8 = a3;\n    int32_t v9 = *(int32_t *)(v2 + 20); // 0x403545\n    int64_t v10 = v8; // 0x403553\n    int64_t v11; // 0x4034a0\n    int64_t v12; // 0x4034a0\n    int64_t v13; // bp-88, 0x4034a0\n    int64_t v14; // 0x403563\n    if (g55 != 0) {\n        // 0x403555\n        v12 = v8 + 15;\n        v14 = v4 + 1;\n        *(char *)v4 = *(char *)v12;\n        v10 = v4;\n        v12--;\n        while (v14 != (int64_t)&v13) {\n            // 0x403560\n            v11 = v14;\n            v14 = v11 + 1;\n            *(char *)v11 = *(char *)v12;\n            v10 = v4;\n            v12--;\n        }\n    }\n    // 0x4034f4\n    v7--;\n    int64_t v15 = v6 / v1; // 0x40353f\n    *(float80_t *)v5 = *(float80_t *)v10;\n    function_4054d0(v4, 45, 0, 0, (int64_t)&g104);\n    function_407ac0(\"%*s\", (int64_t)((int32_t)a6 - (int32_t)v15 + v9), v4, 0, v3, (int32_t)a6);\n    while (v7 != *(int64_t *)(v2 + 8)) {\n        // 0x4034f4\n        v6 -= *(int64_t *)(v2 + 24);\n        v8 += 16;\n        int64_t v16 = v15;\n        v9 = *(int32_t *)(v2 + 20);\n        v10 = v8;\n        if (g55 != 0) {\n            // 0x403555\n            v12 = v8 + 15;\n            v14 = v4 + 1;\n            *(char *)v4 = *(char *)v12;\n            v10 = v4;\n            v12--;\n            while (v14 != (int64_t)&v13) {\n                // 0x403560\n                v11 = v14;\n                v14 = v11 + 1;\n                *(char *)v11 = *(char *)v12;\n                v10 = v4;\n                v12--;\n            }\n        }\n        // 0x4034f4\n        v7--;\n        v15 = v6 / v1;\n        *(float80_t *)v5 = *(float80_t *)v10;\n        function_4054d0(v4, 45, 0, 0, (int64_t)&g104);\n        function_407ac0(\"%*s\", (int64_t)((int32_t)v16 - (int32_t)v15 + v9), v4, 0, v3, (int32_t)a6);\n    }\n    // 0x403580\n    return *(int64_t *)v5;\n}\n"
        },
        {
            "funcName": "function_403590",
            "funcStartAddr": "403590",
            "funcEndAddr": "40367f",
            "decompiledFuncCode": "int64_t function_403590(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    if (a1 <= a2) {\n        // 0x403670\n        int64_t result; // 0x403590\n        return result;\n    }\n    int64_t v1 = 0x100000000 * a6 >> 32; // 0x4035b5\n    int64_t v2 = v1 * (a1 - 1); // 0x4035c2\n    int64_t v3; // bp-104, 0x403590\n    int64_t v4 = &v3;\n    int64_t v5 = v2; // 0x4035d6\n    int64_t v6 = a1; // 0x4035d6\n    int64_t v7; // 0x403590\n    int64_t v8; // 0x403590\n    int64_t v9; // bp-96, 0x403590\n    int64_t v10; // 0x403653\n    if (g55 == 0) {\n        // 0x4035e0\n        __asm_movsd(*(int64_t *)a3);\n    } else {\n        // 0x40363d\n        v8 = a3 + 7;\n        v10 = v4 + 1;\n        *(char *)v4 = *(char *)v8;\n        v8--;\n        while (v10 != (int64_t)&v9) {\n            // 0x403650\n            v7 = v10;\n            v10 = v7 + 1;\n            *(char *)v7 = *(char *)v8;\n            v8--;\n        }\n        // 0x403663\n        __asm_movsd(v3);\n    }\n    // 0x4035e6\n    v6--;\n    int64_t v11 = v5 / a1; // 0x403627\n    function_405250(&v3, 40, 0, 0);\n    int64_t result2 = function_407ac0(\"%*s\", a6 + a5 - v11 & 0xffffffff, v4, 0, v2, (int32_t)a6); // 0x40360d\n    int64_t v12 = a3 + 8; // 0x40361c\n    v5 -= v1;\n    while (v6 != a2) {\n        int64_t v13 = v12;\n        int64_t v14 = v11;\n        if (g55 == 0) {\n            // 0x4035e0\n            __asm_movsd(*(int64_t *)v13);\n        } else {\n            // 0x40363d\n            v8 = v13 + 7;\n            v10 = v4 + 1;\n            *(char *)v4 = *(char *)v8;\n            v8--;\n            while (v10 != (int64_t)&v9) {\n                // 0x403650\n                v7 = v10;\n                v10 = v7 + 1;\n                *(char *)v7 = *(char *)v8;\n                v8--;\n            }\n            // 0x403663\n            __asm_movsd(v3);\n        }\n        // 0x4035e6\n        v6--;\n        v11 = v5 / a1;\n        function_405250(&v3, 40, 0, 0);\n        result2 = function_407ac0(\"%*s\", v14 + a5 - v11 & 0xffffffff, v4, 0, v2, (int32_t)a6);\n        v12 = v13 + 8;\n        v5 -= v1;\n    }\n    // 0x403670\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403680",
            "funcStartAddr": "403680",
            "funcEndAddr": "40377f",
            "decompiledFuncCode": "int64_t function_403680(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    if (a1 <= a2) {\n        // 0x403770\n        int64_t result; // 0x403680\n        return result;\n    }\n    int64_t v1 = 0x100000000 * a6 >> 32; // 0x4036a3\n    int64_t v2; // bp-88, 0x403680\n    int64_t v3 = &v2;\n    int64_t v4 = v1 * (a1 - 1); // 0x4036c7\n    int64_t v5 = 0; // 0x4036c7\n    int64_t v6 = 4 * v5 + a3;\n    unsigned char v7; // 0x403734\n    unsigned char v8; // 0x403746\n    unsigned char v9; // 0x403729\n    unsigned char v10; // 0x40372e\n    if (g55 == 0) {\n        // 0x4036d0\n        __asm_movss(*(int32_t *)v6);\n    } else {\n        // 0x403729\n        v9 = *(char *)(v6 + 3);\n        v10 = *(char *)(v6 + 2);\n        v7 = *(char *)(v6 + 1);\n        v8 = *(char *)v6;\n        __asm_movss(256 * (int32_t)v10 | (int32_t)v9 | 0x10000 * (int32_t)v7 | 0x1000000 * (int32_t)v8);\n    }\n    int64_t v11 = v4 / a1; // 0x403713\n    v5++;\n    function_405390(&v2, 31, 0, 0);\n    int64_t result2 = function_407ac0(\"%*s\", a6 + a5 - v11 & 0xffffffff, v3, 0, a5, (int32_t)a6); // 0x4036fd\n    v4 -= v1;\n    while (a1 - a2 != v5) {\n        int64_t v12 = v11;\n        v6 = 4 * v5 + a3;\n        if (g55 == 0) {\n            // 0x4036d0\n            __asm_movss(*(int32_t *)v6);\n        } else {\n            // 0x403729\n            v9 = *(char *)(v6 + 3);\n            v10 = *(char *)(v6 + 2);\n            v7 = *(char *)(v6 + 1);\n            v8 = *(char *)v6;\n            __asm_movss(256 * (int32_t)v10 | (int32_t)v9 | 0x10000 * (int32_t)v7 | 0x1000000 * (int32_t)v8);\n        }\n        // 0x4036d6\n        v11 = v4 / a1;\n        v5++;\n        function_405390(&v2, 31, 0, 0);\n        result2 = function_407ac0(\"%*s\", v12 + a5 - v11 & 0xffffffff, v3, 0, a5, (int32_t)a6);\n        v4 -= v1;\n    }\n    // 0x403770\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403780",
            "funcStartAddr": "403780",
            "funcEndAddr": "4038f0",
            "decompiledFuncCode": "int64_t function_403780(uint64_t a1, uint64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t result; // 0x403780\n    if (a1 <= a2) {\n        // 0x40381b\n        return result;\n    }\n    int64_t v1 = 0x100000000 * a6 >> 32; // 0x40379f\n    int64_t v2 = a4; // 0x4037bf\n    int64_t v3 = a6; // 0x4037bf\n    int64_t v4 = a3; // 0x4037bf\n    int64_t v5 = v1 * (a1 - 1); // 0x4037bf\n    int64_t v6; // 0x403780\n    int64_t v7; // 0x403780\n    int64_t v8; // 0x403780\n    int64_t v9; // 0x4037c9\n    while (true) {\n      lab_0x4037c0:\n        // 0x4037c0\n        v6 = v3;\n        int64_t v10 = v2;\n        unsigned char v11 = *(char *)v4; // 0x4037c9\n        v9 = v11;\n        g102 = v9;\n        v7 = v10;\n        v8 = (int64_t)\"\\\\0\";\n        switch (v11) {\n            case 0: {\n                goto lab_0x4037f8;\n            }\n            case 7: {\n                // 0x403890\n                v7 = v10;\n                v8 = (int64_t)\"\\\\a\";\n                goto lab_0x4037f8;\n            }\n            case 8: {\n                // 0x403880\n                v7 = v10;\n                v8 = (int64_t)\"\\\\b\";\n                goto lab_0x4037f8;\n            }\n            case 9: {\n                // 0x403870\n                v7 = v10;\n                v8 = (int64_t)\"\\\\t\";\n                goto lab_0x4037f8;\n            }\n            case 10: {\n                // 0x403860\n                v7 = v10;\n                v8 = (int64_t)\"\\\\n\";\n                goto lab_0x4037f8;\n            }\n            case 11: {\n                // 0x403850\n                v7 = v10;\n                v8 = (int64_t)\"\\\\v\";\n                goto lab_0x4037f8;\n            }\n            case 12: {\n                // 0x403840\n                v7 = v10;\n                v8 = (int64_t)\"\\\\f\";\n                goto lab_0x4037f8;\n            }\n            case 13: {\n                // 0x403830\n                v7 = v10;\n                v8 = (int64_t)\"\\\\r\";\n                goto lab_0x4037f8;\n            }\n            default: {\n                char v12 = *(char *)((2 * v9 | 1) + (int64_t)*__ctype_b_loc()); // 0x4038cc\n                int64_t v13 = (v12 & 64) == 0 ? (int64_t)\"%03o\" : (int64_t)\"%c\"; // 0x4038db\n                int64_t v14; // bp-60, 0x403780\n                __sprintf_chk((char *)&v14, 1, 4, (char *)v13);\n                v7 = v13;\n                v8 = &v14;\n                goto lab_0x4037f8;\n            }\n        }\n    }\n    // 0x40381b\n    return result;\n  lab_0x4037f8:\n    // 0x4037f8\n    v4++;\n    v3 = v5 / a1;\n    v2 = v7;\n    v5 -= v1;\n    result = function_407ac0(\"%*s\", v6 + a5 - v3 & 0xffffffff, v8, v2, v9, (int32_t)a6);\n    if (v4 == a1 - a2 + a3) {\n        return result;\n    }\n    goto lab_0x4037c0;\n}\n"
        },
        {
            "funcName": "function_4038f0",
            "funcStartAddr": "4038f0",
            "funcEndAddr": "403a45",
            "decompiledFuncCode": "int64_t function_4038f0(int32_t err_num) {\n    struct _IO_FILE * v1 = g66; // 0x4038fb\n    int64_t v2 = 1; // 0x403905\n    if (v1 != NULL) {\n        // 0x403907\n        bool v3; // 0x4038f0\n        if ((*(char *)v1 & 32) != 0) {\n            // 0x403960\n            function_407090(0, 3, g68);\n            error(0, err_num, dcgettext(NULL, \"%s: read error\", 5));\n            int64_t v4 = v3 ? -1 : 1; // 0x4039ad\n            int64_t v5 = (int64_t)&g24; // 0x4038f0\n            int64_t v6 = *(int64_t *)(g67 - 8); // 0x4038f0\n            int64_t v7 = 2; // 0x4039ad\n            unsigned char v8 = *(char *)v6; // 0x4039ad\n            char v9 = *(char *)v5; // 0x4039ad\n            int64_t v10 = v6 + v4; // 0x4039ad\n            char v11 = v9; // 0x4039ad\n            bool v12 = false; // 0x4039ad\n            while (v8 == v9) {\n                v7--;\n                v5 += v4;\n                v11 = v8;\n                v12 = true;\n                if (v7 == 0) {\n                    // break -> \n                    break;\n                }\n                v8 = *(char *)v10;\n                v9 = *(char *)v5;\n                v10 += v4;\n                v11 = v9;\n                v12 = false;\n            }\n            unsigned char v13 = v11;\n            v2 = 0;\n            if ((v8 >= v13 && !v12) != v8 < v13) {\n                // 0x4039be\n                function_408120((int64_t)g66, v10);\n                v2 = 0;\n            }\n        } else {\n            int64_t v14 = v3 ? -1 : 1; // 0x403923\n            int64_t v15 = (int64_t)&g24; // 0x4038f0\n            int64_t v16 = *(int64_t *)(g67 - 8); // 0x4038f0\n            int64_t v17 = 2; // 0x403923\n            unsigned char v18 = *(char *)v16; // 0x403923\n            char v19 = *(char *)v15; // 0x403923\n            int64_t v20 = v16 + v14; // 0x403923\n            char v21 = v19; // 0x403923\n            bool v22 = false; // 0x403923\n            while (v18 == v19) {\n                v17--;\n                v15 += v14;\n                v21 = v18;\n                v22 = true;\n                if (v17 == 0) {\n                    // break -> \n                    break;\n                }\n                v18 = *(char *)v20;\n                v19 = *(char *)v15;\n                v20 += v14;\n                v21 = v19;\n                v22 = false;\n            }\n            unsigned char v23 = v21;\n            v2 = 1;\n            if ((v18 >= v23 && !v22) != v18 < v23) {\n                // 0x403a00\n                v2 = 1;\n                if ((int32_t)function_408120((int64_t)v1, v20) != 0) {\n                    // 0x403a10\n                    error(0, *__errno_location(), \"%s\", (char *)function_407090(0, 3, g68));\n                    v2 = 0;\n                }\n            }\n        }\n        // 0x403938\n        g66 = NULL;\n    }\n    // 0x403943\n    if ((*(char *)g48 & 32) == 0) {\n        // 0x403953\n        return v2 & 0xffffffff;\n    }\n    // 0x4039d0\n    error(0, (int32_t)\"write error\" ^ (int32_t)\"write error\", dcgettext(NULL, \"write error\", 5));\n    return 0;\n}\n"
        },
        {
            "funcName": "function_403a50",
            "funcStartAddr": "403a50",
            "funcEndAddr": "403b4f",
            "decompiledFuncCode": "int64_t function_403a50(void) {\n    // 0x403a50\n    bool v1; // 0x403a50\n    int64_t v2 = v1 ? -1 : 1;\n    int64_t v3 = 1;\n    int64_t file_path = *(int64_t *)g67; // 0x403a99\n    g68 = file_path;\n    int64_t v4 = v3; // 0x403aa6\n    int64_t stream; // 0x403a50\n    int64_t v5; // 0x403a50\n    while (file_path != 0) {\n        int64_t v6 = 2; // 0x403ab9\n        int64_t v7 = file_path;\n        int64_t v8 = (int64_t)&g24;\n        unsigned char v9 = *(char *)v7; // 0x403ab9\n        char v10 = *(char *)v8; // 0x403ab9\n        char v11 = v10; // 0x403ab9\n        bool v12 = false; // 0x403ab9\n        while (v9 == v10) {\n            v6--;\n            int64_t v13 = v8 + v2; // 0x403ab9\n            int64_t v14 = v7 + v2; // 0x403ab9\n            v11 = v9;\n            v12 = true;\n            if (v6 == 0) {\n                // break -> \n                break;\n            }\n            v7 = v14;\n            v8 = v13;\n            v9 = *(char *)v7;\n            v10 = *(char *)v8;\n            v11 = v10;\n            v12 = false;\n        }\n        unsigned char v15 = v11;\n        g67 += 8;\n        int64_t v16; // 0x403a50\n        int64_t v17; // 0x403a50\n        if ((v9 >= v15 && !v12) == v9 < v15) {\n            // 0x403a60\n            g65 = 1;\n            g68 = (int64_t)dcgettext(NULL, \"standard input\", 5);\n            int64_t v18 = g49; // 0x403a7f\n            g66 = (struct _IO_FILE *)v18;\n            v16 = v18;\n            v17 = v3;\n        } else {\n            struct _IO_FILE * file = fopen((char *)file_path, \"r\"); // 0x403ad3\n            g66 = file;\n            if (file != NULL) {\n                // 0x403ae4\n                stream = (int64_t)file;\n                v5 = v3;\n                goto lab_0x403ae4_2;\n            }\n            // 0x403b00\n            error(0, *__errno_location(), \"%s\", (char *)function_407090(0, 3, g68));\n            v16 = (int64_t)g66;\n            v17 = 0;\n        }\n        // 0x403a8d\n        stream = v16;\n        v5 = v17;\n        if (v16 != 0) {\n            goto lab_0x403ae4_2;\n        }\n        v3 = v17;\n        file_path = *(int64_t *)g67;\n        g68 = file_path;\n        v4 = v3;\n    }\n    // 0x403af6\n    return v4 & 0xffffffff;\n  lab_0x403ae4_2:\n    // 0x403ae4\n    v4 = v5;\n    if (*(char *)&g75 != 0 == *(char *)&g81 == 0) {\n        // 0x403b3c\n        setvbuf((struct _IO_FILE *)stream, NULL, 2, 0);\n        v4 = v5;\n        return v4 & 0xffffffff;\n    } else {\n        return v4 & 0xffffffff;\n    }\n}\n"
        },
        {
            "funcName": "function_403b50",
            "funcStartAddr": "403b50",
            "funcEndAddr": "403d14",
            "decompiledFuncCode": "int64_t function_403b50(int64_t a1) {\n    // 0x403b50\n    int64_t v1; // 0x403b50\n    int64_t v2 = v1;\n    if (a1 == 0) {\n        // 0x403c9e\n        return 1;\n    }\n    // 0x403b68\n    char * format; // 0x403cf6\n    if (g66 == NULL) {\n        // 0x403cea\n        format = dcgettext(NULL, \"cannot skip past end of combined input\", 5);\n        error(1, (int32_t)\"cannot skip past end of combined input\" ^ (int32_t)\"cannot skip past end of combined input\", format);\n        // 0x403c9e\n        return 1;\n    }\n    int64_t v3 = a1; // 0x403b50\n    int64_t v4 = 1; // 0x403b50\n    int64_t v5; // 0x403b50\n    int64_t v6; // 0x403b50\n    while (true) {\n        // 0x403bf8\n        v6 = v3;\n        int64_t v7; // 0x403b50\n        int64_t v8; // bp-8376, 0x403b50\n        if (__fxstat(1, fileno(g66), (struct stat *)&v8) == 0) {\n            // 0x403b98\n            v5 = v4;\n            int64_t v9 = v6; // 0x403ba6\n            int32_t v10; // 0x403b50\n            if ((v10 & 0xd000) != 0x8000 || v1 <= (v2 > 0x2000000000000000 ? 512 : v2)) {\n                uint64_t v11 = 0x2000;\n                uint64_t v12 = v9;\n                int64_t v13 = v11 > v12 ? v12 : v11; // 0x403c6c\n                int64_t v14; // bp-8232, 0x403b50\n                int32_t v15 = __fread_unlocked_chk(&v14, 0x2000, 1, (int32_t)v13, g66); // 0x403c7b\n                int64_t v16 = v15; // 0x403c7b\n                int64_t v17 = v12 - v16; // 0x403c80\n                int32_t v18; // 0x403c8f\n                if (v13 != v16) {\n                    // 0x403c88\n                    v18 = g66->e0;\n                    if ((v18 & 32) != 0) {\n                        // 0x403c9e\n                        return 0;\n                    }\n                    if ((v18 & 16) != 0) {\n                        // break -> 0x403cb8\n                        break;\n                    }\n                }\n                int64_t v19 = v5; // 0x403c9c\n                while (v17 != 0) {\n                    // 0x403c58\n                    v11 = v13;\n                    v12 = v17;\n                    v13 = v11 > v12 ? v12 : v11;\n                    v15 = __fread_unlocked_chk(&v14, 0x2000, 1, (int32_t)v13, g66);\n                    v16 = v15;\n                    v17 = v12 - v16;\n                    if (v13 != v16) {\n                        // 0x403c88\n                        v18 = g66->e0;\n                        if ((v18 & 32) != 0) {\n                            // 0x403c9e\n                            return 0;\n                        }\n                        if ((v18 & 16) != 0) {\n                            // break -> 0x403cb8\n                            break;\n                        }\n                    }\n                    // 0x403c99\n                    v19 = v5;\n                }\n                // 0x403c9e\n                return v19 & 0xffffffff;\n            } else {\n                if (v6 <= v1) {\n                    // break -> 0x403cc8\n                    break;\n                }\n                // 0x403bd3\n                v3 = v6 - v1;\n                v7 = v5;\n            }\n        } else {\n            // 0x403c13\n            error(0, *__errno_location(), \"%s\", (char *)function_407090(0, 3, g68));\n            v3 = v6;\n            v7 = 0;\n        }\n        int64_t v20 = function_4038f0(0); // 0x403bd8\n        v4 = v7 & 0xffffffff & v20 & function_403a50();\n        if (g66 == NULL) {\n            // 0x403cea\n            format = dcgettext(NULL, \"cannot skip past end of combined input\", 5);\n            error(1, (int32_t)\"cannot skip past end of combined input\" ^ (int32_t)\"cannot skip past end of combined input\", format);\n            // 0x403c9e\n            return 1;\n        }\n    }\n    int64_t v21 = (int32_t)function_4081e0((int64_t)g66, v6, 1) != 0 ? 0 : v5; // 0x403cdf\n    // 0x403c9e\n    return v21 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_403d20",
            "funcStartAddr": "403d20",
            "funcEndAddr": "403d78",
            "decompiledFuncCode": "int64_t function_403d20(int64_t * a1) {\n    // 0x403d20\n    *(int32_t *)a1 = -1;\n    int64_t v1 = 1; // 0x403d3c\n    if (g66 == NULL) {\n        // 0x403d71\n        return 1;\n    }\n    int32_t c = fgetc(g66); // 0x403d63\n    *(int32_t *)a1 = c;\n    while (c == -1) {\n        int32_t v2 = *__errno_location(); // 0x403d45\n        int64_t v3 = function_4038f0(v2); // 0x403d47\n        v1 = v3 & v1 & function_403a50();\n        if (g66 == NULL) {\n            // break -> 0x403d71\n            break;\n        }\n        c = fgetc(g66);\n        *(int32_t *)a1 = c;\n    }\n    // 0x403d71\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_403d80",
            "funcStartAddr": "403d80",
            "funcEndAddr": "40400f",
            "decompiledFuncCode": "int64_t function_403d80(int64_t a1, int64_t n, int64_t str, int64_t str2) {\n    // 0x403d80\n    int64_t result; // 0x403d80\n    if (g35 != 0 == g34 == 0) {\n        // 0x403f90\n        if ((int64_t)g69 == n) {\n            int32_t memcmp_rc = memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n); // 0x403fa6\n            int64_t v1 = memcmp_rc; // 0x403fa6\n            result = v1;\n            if (memcmp_rc == 0) {\n                int64_t puts_rc = v1; // 0x403fba\n                if (g54 == 0) {\n                    // 0x403fbc\n                    g54 = 1;\n                    puts_rc = puts(\"*\");\n                }\n                // 0x403fcd\n                g34 = 0;\n                return puts_rc;\n            }\n        }\n    }\n    // 0x403daf\n    g54 = 0;\n    if ((int64_t)g71 == 0) {\n        // 0x403fcd\n        g34 = 0;\n        return result;\n    }\n    int64_t v2 = 0; // 0x403dcf\n    int64_t v3 = 40 * v2; // 0x403e5e\n    uint32_t v4 = *(int32_t *)(g72 + 4 + v3); // 0x403e62\n    int32_t v5 = *(int32_t *)(4 * (int64_t)v4 + (int64_t)&g11); // 0x403e66\n    if (v2 != 0) {\n        // 0x403e92\n        __printf_chk(1, \"%*s\", (int64_t)g83, (char *)&g27);\n    }\n    int64_t v6 = g72 + v3; // 0x403e07\n    uint64_t v7; // 0x403d80\n    uint64_t v8; // 0x403e66\n    int32_t v9; // 0x403d80\n    int32_t v10; // 0x403eca\n    int32_t v11; // 0x403ece\n    int64_t v12; // 0x403f55\n    int64_t * v13; // 0x403f5c\n    uint64_t v14; // 0x403f5c\n    int16_t ** v15; // 0x403f03\n    unsigned char v16; // 0x403f14\n    char v17; // 0x403f22\n    int64_t v18; // 0x403f33\n    int64_t * v19; // 0x403f3a\n    uint64_t v20; // 0x403f3a\n    int64_t v21; // 0x403f10\n    if (*(char *)(v6 + 24) != 0) {\n        // 0x403eb8\n        v7 = (int64_t)g69;\n        v8 = (int64_t)v5;\n        v9 = (v7 - n) / v8;\n        v10 = *(int32_t *)(v6 + 32) * v9;\n        v11 = *(int32_t *)(v6 + 28);\n        __printf_chk(1, \"%*s\", (int64_t)(v11 * v9 + (int32_t)((0x100000000 * (int64_t)(v10 >> 31) | (int64_t)v10) / (v7 / v8 & 0xffffffff))), (char *)&g27);\n        fwrite_unlocked((int64_t *)\"  >\", 1, 3, g48);\n        if (n != 0) {\n            // 0x403f03\n            v15 = __ctype_b_loc();\n            v21 = str2;\n            v16 = *(char *)v21;\n            v17 = *(char *)((int64_t)*v15 + 1 + 2 * (int64_t)v16);\n            v18 = (int64_t)g48;\n            v19 = (int64_t *)(v18 + 40);\n            v20 = *v19;\n            if (v20 >= *(int64_t *)(v18 + 48)) {\n                // 0x403f80\n                __overflow(g48, (v17 & 64) != 0 ? (int32_t)v16 : 46);\n            } else {\n                // 0x403f44\n                *v19 = v20 + 1;\n                *(char *)v20 = (v17 & 64) != 0 ? v16 : 46;\n            }\n            // 0x403f4e\n            v21++;\n            while (v21 != str2 + n) {\n                // 0x403f10\n                v16 = *(char *)v21;\n                v17 = *(char *)((int64_t)*v15 + 1 + 2 * (int64_t)v16);\n                v18 = (int64_t)g48;\n                v19 = (int64_t *)(v18 + 40);\n                v20 = *v19;\n                if (v20 >= *(int64_t *)(v18 + 48)) {\n                    // 0x403f80\n                    __overflow(g48, (v17 & 64) != 0 ? (int32_t)v16 : 46);\n                } else {\n                    // 0x403f44\n                    *v19 = v20 + 1;\n                    *(char *)v20 = (v17 & 64) != 0 ? v16 : 46;\n                }\n                // 0x403f4e\n                v21++;\n            }\n        }\n        // 0x403f55\n        v12 = (int64_t)g48;\n        v13 = (int64_t *)(v12 + 40);\n        v14 = *v13;\n        if (v14 >= *(int64_t *)(v12 + 48)) {\n            // 0x404000\n            __overflow(g48, 60);\n        } else {\n            // 0x403f6a\n            *v13 = v14 + 1;\n            *(char *)v14 = 60;\n        }\n    }\n    int64_t v22 = (int64_t)g48; // 0x403e18\n    int64_t * v23 = (int64_t *)(v22 + 40); // 0x403e1f\n    uint64_t v24 = *v23; // 0x403e1f\n    int64_t result2; // 0x403d80\n    if (v24 >= *(int64_t *)(v22 + 48)) {\n        // 0x403fe8\n        result2 = __overflow(g48, 10);\n    } else {\n        // 0x403e2d\n        *v23 = v24 + 1;\n        *(char *)v24 = 10;\n        result2 = v24;\n    }\n    // 0x403e38\n    v2++;\n    while (v2 < (int64_t)g71) {\n        // 0x403e49\n        v3 = 40 * v2;\n        v4 = *(int32_t *)(g72 + 4 + v3);\n        v5 = *(int32_t *)(4 * (int64_t)v4 + (int64_t)&g11);\n        if (v2 != 0) {\n            // 0x403e92\n            __printf_chk(1, \"%*s\", (int64_t)g83, (char *)&g27);\n        }\n        // 0x403de5\n        v6 = g72 + v3;\n        if (*(char *)(v6 + 24) != 0) {\n            // 0x403eb8\n            v7 = (int64_t)g69;\n            v8 = (int64_t)v5;\n            v9 = (v7 - n) / v8;\n            v10 = *(int32_t *)(v6 + 32) * v9;\n            v11 = *(int32_t *)(v6 + 28);\n            __printf_chk(1, \"%*s\", (int64_t)(v11 * v9 + (int32_t)((0x100000000 * (int64_t)(v10 >> 31) | (int64_t)v10) / (v7 / v8 & 0xffffffff))), (char *)&g27);\n            fwrite_unlocked((int64_t *)\"  >\", 1, 3, g48);\n            if (n != 0) {\n                // 0x403f03\n                v15 = __ctype_b_loc();\n                v21 = str2;\n                v16 = *(char *)v21;\n                v17 = *(char *)((int64_t)*v15 + 1 + 2 * (int64_t)v16);\n                v18 = (int64_t)g48;\n                v19 = (int64_t *)(v18 + 40);\n                v20 = *v19;\n                if (v20 >= *(int64_t *)(v18 + 48)) {\n                    // 0x403f80\n                    __overflow(g48, (v17 & 64) != 0 ? (int32_t)v16 : 46);\n                } else {\n                    // 0x403f44\n                    *v19 = v20 + 1;\n                    *(char *)v20 = (v17 & 64) != 0 ? v16 : 46;\n                }\n                // 0x403f4e\n                v21++;\n                while (v21 != str2 + n) {\n                    // 0x403f10\n                    v16 = *(char *)v21;\n                    v17 = *(char *)((int64_t)*v15 + 1 + 2 * (int64_t)v16);\n                    v18 = (int64_t)g48;\n                    v19 = (int64_t *)(v18 + 40);\n                    v20 = *v19;\n                    if (v20 >= *(int64_t *)(v18 + 48)) {\n                        // 0x403f80\n                        __overflow(g48, (v17 & 64) != 0 ? (int32_t)v16 : 46);\n                    } else {\n                        // 0x403f44\n                        *v19 = v20 + 1;\n                        *(char *)v20 = (v17 & 64) != 0 ? v16 : 46;\n                    }\n                    // 0x403f4e\n                    v21++;\n                }\n            }\n            // 0x403f55\n            v12 = (int64_t)g48;\n            v13 = (int64_t *)(v12 + 40);\n            v14 = *v13;\n            if (v14 >= *(int64_t *)(v12 + 48)) {\n                // 0x404000\n                __overflow(g48, 60);\n            } else {\n                // 0x403f6a\n                *v13 = v14 + 1;\n                *(char *)v14 = 60;\n            }\n        }\n        // 0x403e18\n        v22 = (int64_t)g48;\n        v23 = (int64_t *)(v22 + 40);\n        v24 = *v23;\n        if (v24 >= *(int64_t *)(v22 + 48)) {\n            // 0x403fe8\n            result2 = __overflow(g48, 10);\n        } else {\n            // 0x403e2d\n            *v23 = v24 + 1;\n            *(char *)v24 = 10;\n            result2 = v24;\n        }\n        // 0x403e38\n        v2++;\n    }\n    // 0x403fcd\n    g34 = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404010",
            "funcStartAddr": "404010",
            "funcEndAddr": "40408c",
            "decompiledFuncCode": "int64_t function_404010(int64_t a1, int64_t a2) {\n    int64_t v1 = (int64_t)g48; // 0x40401b\n    int64_t * v2 = (int64_t *)(v1 + 40); // 0x404022\n    uint64_t v3 = *v2; // 0x404022\n    if (v3 >= *(int64_t *)(v1 + 48)) {\n        // 0x404080\n        __overflow(g48, 40);\n    } else {\n        // 0x40402c\n        *v2 = v3 + 1;\n        *(char *)v3 = 40;\n    }\n    char v4 = a2; // 0x404044\n    int64_t result = function_402d50(a1, 41); // 0x404046\n    if (v4 == 0) {\n        // 0x404063\n        return result;\n    }\n    int64_t v5 = (int64_t)g48; // 0x404048\n    int64_t * v6 = (int64_t *)(v5 + 40); // 0x40404f\n    uint64_t result2 = *v6; // 0x40404f\n    if (result2 >= *(int64_t *)(v5 + 48)) {\n        // 0x404070\n        return __overflow(g48, (int32_t)a2 % 256);\n    }\n    // 0x404059\n    *v6 = result2 + 1;\n    *(char *)result2 = v4;\n    // 0x404063\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404090",
            "funcStartAddr": "404090",
            "funcEndAddr": "4040be",
            "decompiledFuncCode": "int64_t function_404090(int64_t a1, int64_t a2) {\n    // 0x404090\n    function_402d50(a1, 32);\n    return function_404010(g78 + a1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4040c0",
            "funcStartAddr": "4040c0",
            "funcEndAddr": "4048a0",
            "decompiledFuncCode": "int64_t function_4040c0(int64_t a1) {\n    if ((char)a1 == 0) {\n        // 0x40432f\n        return 1;\n    }\n    int64_t v1 = g71; // 0x4040ee\n    int64_t v2 = a1; // 0x4040ee\n    char v3; // 0x4040c0\n    char v4; // 0x4040c0\n    char v5; // 0x4040c0\n    char v6; // 0x4040c0\n    int64_t v7; // 0x4040c0\n    int64_t v8; // 0x4040c0\n    int64_t v9; // 0x4040c0\n    int64_t v10; // 0x4040c0\n    int64_t v11; // 0x4040c0\n    int64_t v12; // 0x4040c0\n    int64_t v13; // 0x4040f7\n    while (true) {\n      lab_0x4040f0:\n        // 0x4040f0\n        v8 = v2;\n        v6 = v5;\n        v4 = v3;\n        int128_t v14 = g70; // 0x4040f0\n        uint64_t v15 = (int64_t)v14; // 0x4040f0\n        v13 = g72;\n        v7 = v13;\n        v9 = v1;\n        if (v1 < v15) {\n            goto lab_0x404107;\n        } else {\n            if (v13 == 0) {\n                // 0x404550\n                v11 = 3;\n                v12 = 120;\n                if (v15 == 0) {\n                    goto lab_0x4043df;\n                } else {\n                    uint128_t v16 = 40 * (v14 & 0xffffffffffffffff); // 0x404561\n                    v10 = v15;\n                    if ((int64_t)v16 > -1 != (v16 % 0x3f0000000000000001 == 0)) {\n                        // 0x404578\n                        function_407a20(v13);\n                        // UNREACHABLE\n                    }\n                    goto lab_0x4043d7;\n                }\n            } else {\n                if (v15 >= 0x222222222222222) {\n                    // 0x404578\n                    function_407a20(v13);\n                    // UNREACHABLE\n                }\n                // 0x4043cc\n                v10 = v15 + 1 + v15 / 2;\n                goto lab_0x4043d7;\n            }\n        }\n    }\n  lab_0x40487b_2:\n    // 0x40487b\n    __assert_fail(\"tspec != NULL\", \"src/od.c\", 645, \"decode_one_format\");\n    return &g104;\n  lab_0x404107:;\n    int64_t v17 = 40 * v9 + v7; // 0x40410b\n    if (v17 == 0) {\n        // break -> 0x40487b\n        goto lab_0x40487b_2;\n    }\n    char v18 = *(char *)v8; // 0x404118\n    g107 = v18 - 97;\n    char v19; // 0x4040c0\n    char v20; // 0x4040c0\n    int64_t v21; // 0x4040c0\n    int64_t v22; // 0x4040c0\n    int64_t v23; // 0x4040c0\n    int64_t v24; // 0x4040c0\n    int64_t v25; // 0x4040c0\n    int64_t v26; // 0x4040c0\n    switch (v18) {\n        case 97: {\n            // 0x404348\n            v19 = v4;\n            v20 = v6;\n            v23 = 5;\n            v25 = 0x402ec0;\n            v24 = v8 + 1;\n            v21 = 3;\n            v22 = 1;\n            goto lab_0x4042ea;\n        }\n        case 99: {\n            // 0x4042d0\n            v19 = v4;\n            v20 = v6;\n            v23 = 6;\n            v25 = 0x403780;\n            v24 = v8 + 1;\n            v21 = 3;\n            v22 = 1;\n            goto lab_0x4042ea;\n        }\n        case 100: {\n            goto lab_0x404220;\n        }\n        case 102: {\n            int64_t v27 = v8 + 1; // 0x404138\n            char v28 = *(char *)v27; // 0x404138\n            int32_t v29; // 0x4040c0\n            int64_t v30; // 0x4040c0\n            switch (v28) {\n                case 70: {\n                    // 0x404620\n                    v30 = v8 + 2;\n                    v29 = g57;\n                    // break -> 0x40458b\n                    break;\n                }\n                case 76: {\n                    // 0x404608\n                    v30 = v8 + 2;\n                    v29 = g59;\n                    // break -> 0x40458b\n                    break;\n                }\n                case 68: {\n                    // 0x404580\n                    v30 = v8 + 2;\n                    v29 = g58;\n                    // break -> 0x40458b\n                    break;\n                }\n                default: {\n                    int32_t v31 = (int32_t)v28 - 48; // 0x40415c\n                    if (v28 == 57 || v31 < 9) {\n                        int64_t v32 = v8 + 2;\n                        int64_t v33 = v31; // 0x40419c\n                        int64_t v34 = (int64_t)*(char *)v32 + 0xffffffd0; // 0x4041a3\n                        while ((int32_t)v34 < 10) {\n                            v32++;\n                            v33 = 10 * v33 + (0x100000000 * v34 >> 32);\n                            v34 = (int64_t)*(char *)v32 + 0xffffffd0;\n                        }\n                        // 0x4041ab\n                        v30 = v27;\n                        v29 = g58;\n                        if (v27 != v32) {\n                            if (v33 >= 17) {\n                                // 0x4041d2\n                                function_407210(a1);\n                                v26 = (int64_t)\"invalid type string %s;\\nthis system doesn't provide a %lu-byte floating point type\";\n                                goto lab_0x4041ec;\n                            }\n                            int32_t v35 = *(int32_t *)(4 * v33 + (int64_t)&g56); // 0x4041c1\n                            v30 = v32;\n                            v29 = v35;\n                            if (v35 == 0) {\n                                // 0x4041d2\n                                function_407210(a1);\n                                v26 = (int64_t)\"invalid type string %s;\\nthis system doesn't provide a %lu-byte floating point type\";\n                                goto lab_0x4041ec;\n                            }\n                        }\n                    } else {\n                        // 0x40484d\n                        v30 = v27;\n                        v29 = g58;\n                    }\n                    // break -> 0x40458b\n                    break;\n                }\n            }\n            uint32_t v36 = v29;\n            int64_t v37 = v30;\n            char * str = (char *)*(int64_t *)localeconv(); // 0x404598\n            int64_t len = 1; // 0x40459b\n            if (*str != 0) {\n                // 0x40459d\n                len = strlen(str);\n            }\n            int64_t v38 = len;\n            if (v36 == 7) {\n                // 0x4045d8\n                v19 = v4;\n                v20 = v6;\n                v23 = 4;\n                v25 = 0x403590;\n                v24 = v37;\n                v21 = v38 + 23 & 0xffffffff;\n                v22 = 7;\n            } else {\n                if (v36 != 8) {\n                    if (v36 != 6) {\n                        // 0x4045ce\n                        abort();\n                        // UNREACHABLE\n                    }\n                    // 0x4045f0\n                    v19 = v4;\n                    v20 = v6;\n                    v23 = 4;\n                    v25 = 0x403680;\n                    v24 = v37;\n                    v21 = v38 + 14 & 0xffffffff;\n                    v22 = 6;\n                } else {\n                    // 0x4045ae\n                    v19 = v4;\n                    v20 = v6;\n                    v23 = 4;\n                    v25 = 0x4034a0;\n                    v24 = v37;\n                    v21 = v38 + 28 & 0xffffffff;\n                    v22 = v36;\n                }\n            }\n            goto lab_0x4042ea;\n        }\n        case 111: {\n            goto lab_0x404220;\n        }\n        case 117: {\n            goto lab_0x404220;\n        }\n        case 120: {\n            goto lab_0x404220;\n        }\n        default: {\n            // 0x404368\n            function_407210(a1);\n            error(0, (int32_t)\"invalid character '%c' in type string %s\" ^ (int32_t)\"invalid character '%c' in type string %s\", dcgettext(NULL, \"invalid character '%c' in type string %s\", 5));\n            return (int32_t)&g104 ^ (int32_t)&g104;\n        }\n    }\n  lab_0x404220:;\n    int64_t v39 = v8 + 1; // 0x404220\n    char v40 = *(char *)v39; // 0x404220\n    char v41; // 0x4040c0\n    char v42; // 0x4040c0\n    char v43; // 0x4040c0\n    char v44; // 0x4040c0\n    int32_t v45; // 0x4040c0\n    int64_t v46; // 0x4040c0\n    int64_t v47; // 0x4040c0\n    int64_t v48; // 0x4040c0\n    int64_t v49; // 0x4040c0\n    int64_t v50; // 0x4040c0\n    int64_t v51; // 0x4040c0\n    int64_t v52; // 0x4040c0\n    int64_t v53; // 0x4040c0\n    if (v40 == 73) {\n        // 0x404640\n        v51 = v8 + 2;\n        v48 = 4;\n        v45 = g63;\n        goto lab_0x404254;\n    } else {\n        if (v40 > 73) {\n            if (v40 == 76) {\n                // 0x4046f8\n                v51 = v8 + 2;\n                v48 = 8;\n                v45 = g64;\n                goto lab_0x404254;\n            } else {\n                if (v40 != 83) {\n                    goto lab_0x404660;\n                } else {\n                    // 0x404243\n                    v51 = v8 + 2;\n                    v48 = 2;\n                    v45 = g62;\n                    goto lab_0x404254;\n                }\n            }\n        } else {\n            if (v40 != 67) {\n                goto lab_0x404660;\n            } else {\n                int64_t v54 = v8 + 2; // 0x404410\n                int64_t v55 = g61; // 0x404414\n                v41 = v18;\n                v42 = 111;\n                v52 = v54;\n                v49 = 1;\n                v46 = v55;\n                v43 = v18;\n                v44 = 111;\n                v53 = v54;\n                v50 = 1;\n                v47 = v55;\n                if (v18 != 111) {\n                    goto lab_0x40425d;\n                } else {\n                    goto lab_0x40442a;\n                }\n            }\n        }\n    }\n  lab_0x4042ea:\n    // 0x4042ea\n    *(int32_t *)v17 = (int32_t)v23;\n    *(int32_t *)(v17 + 4) = (int32_t)v22;\n    *(int64_t *)(v17 + 8) = v25;\n    *(int32_t *)(v17 + 28) = (int32_t)v21;\n    char v56 = *(char *)v24; // 0x4042f9\n    *(char *)(v17 + 24) = (char)(v56 == 122);\n    v2 = v24 + (int64_t)(v56 == 122);\n    if (v2 == v8) {\n        // 0x404862\n        __assert_fail(\"s != next\", \"src/od.c\", 995, \"decode_format_string\");\n        goto lab_0x40487b_2;\n    }\n    // 0x404311\n    v1 = (int64_t)g71 + 1;\n    g71 = v1;\n    v3 = v19;\n    v5 = v20;\n    if (*(char *)v2 == 0) {\n        // 0x40432f\n        return 1;\n    }\n    goto lab_0x4040f0;\n  lab_0x4043df:\n    // 0x4043df\n    g70 = v11;\n    int64_t v57 = function_407830(v13, v12); // 0x4043e6\n    g72 = v57;\n    v7 = v57;\n    v9 = g71;\n    goto lab_0x404107;\n  lab_0x4043d7:\n    // 0x4043d7\n    v11 = v10;\n    v12 = 40 * v10;\n    goto lab_0x4043df;\n  lab_0x404254:;\n    int64_t v58 = v45;\n    v41 = v4;\n    v42 = v6;\n    v52 = v51;\n    v49 = v48;\n    v46 = v58;\n    v43 = v4;\n    v44 = v6;\n    v53 = v51;\n    v50 = v48;\n    v47 = v58;\n    if (v18 == 111) {\n        goto lab_0x40442a;\n    } else {\n        goto lab_0x40425d;\n    }\n  lab_0x40442a:;\n    uint32_t v59 = *(int32_t *)(4 * v50 + (int64_t)&g15); // 0x40442e\n    int64_t v60 = v59; // 0x404456\n    char * v61 = (v47 & 0xfffffffe) != 4 ? (char *)&g2 : \"lo\"; // 0x404465\n    __sprintf_chk((char *)(v17 + 16), 1, 8, \"%%*.%d%s\", v60, v61);\n    char v62 = v43; // 0x404474\n    char v63 = v44; // 0x404474\n    int64_t v64 = 2; // 0x404474\n    int64_t v65 = v53; // 0x404474\n    int64_t v66 = v60; // 0x404474\n    int64_t v67 = v47; // 0x404474\n    goto lab_0x4042bd;\n  lab_0x40425d:;\n    int64_t v74 = v46;\n    int64_t v75 = v49;\n    int64_t v76 = v52;\n    char v77 = v42;\n    char v78 = v41;\n    if (v78 > v77) {\n        if (v18 != 117) {\n            if (v18 != 120) {\n              lab_0x4045ce:\n                // 0x4045ce\n                abort();\n                // UNREACHABLE\n            }\n            uint32_t v79 = *(int32_t *)(4 * v75 + (int64_t)&g12); // 0x40448d\n            int64_t v80 = v79; // 0x4044b5\n            char * v81 = (v74 & 0xfffffffe) != 4 ? (char *)&g6 : \"lx\"; // 0x4044c4\n            __sprintf_chk((char *)(v17 + 16), 1, 8, \"%%*.%d%s\", v80, v81);\n            g109 = v74;\n            v19 = v78;\n            v20 = v77;\n            v23 = 3;\n            v25 = 0x403380;\n            v24 = v76;\n            v21 = v80;\n            v22 = v74;\n            switch ((int32_t)v74) {\n                case 1: {\n                    goto lab_0x4042ea;\n                }\n                case 2: {\n                    // 0x4047f3\n                    v19 = v78;\n                    v20 = v77;\n                    v23 = 3;\n                    v25 = 0x403200;\n                    v24 = v76;\n                    v21 = v80;\n                    v22 = v74;\n                    goto lab_0x4042ea;\n                }\n                case 3: {\n                    // 0x4047d5\n                    v19 = v78;\n                    v20 = v77;\n                    v23 = 3;\n                    v25 = 0x403120;\n                    v24 = v76;\n                    v21 = v80;\n                    v22 = v74;\n                    goto lab_0x4042ea;\n                }\n                case 4: {\n                    // 0x4047e4\n                    v19 = v78;\n                    v20 = v77;\n                    v23 = 3;\n                    v25 = 0x403050;\n                    v24 = v76;\n                    v21 = v80;\n                    v22 = v74;\n                    goto lab_0x4042ea;\n                }\n                case 5: {\n                    // 0x4047ba\n                    v19 = v78;\n                    v20 = v77;\n                    v23 = 3;\n                    v25 = 0x402f80;\n                    v24 = v76;\n                    v21 = v80;\n                    v22 = v74;\n                    goto lab_0x4042ea;\n                }\n                default: {\n                    goto lab_0x4045ce;\n                }\n            }\n        } else {\n            uint32_t v82 = *(int32_t *)(4 * v75 + (int64_t)&g13); // 0x404279\n            char * v83 = (v74 & 0xfffffffe) != 4 ? (char *)&g4 : \"lu\"; // 0x4042a4\n            __sprintf_chk((char *)(v17 + 16), 1, 8, \"%%*%s\", v83);\n            v62 = v78;\n            v63 = v77;\n            v64 = 1;\n            v65 = v76;\n            v66 = v82;\n            v67 = v74;\n            goto lab_0x4042bd;\n        }\n    } else {\n        if (v18 != 100) {\n            // 0x4045ce\n            abort();\n            // UNREACHABLE\n        }\n        uint32_t v84 = *(int32_t *)(4 * v75 + (int64_t)&g14); // 0x4044fe\n        char * v85 = (v74 & 0xfffffffe) != 4 ? (char *)&g23 : \"ld\"; // 0x404529\n        __sprintf_chk((char *)(v17 + 16), 1, 8, \"%%*%s\", v85);\n        int64_t v86 = v84; // 0x40453b\n        g110 = v74;\n        v19 = v78;\n        v20 = v77;\n        v23 = 0;\n        v25 = 0x4032c0;\n        v24 = v76;\n        v21 = v86;\n        v22 = v74;\n        switch ((int32_t)v74) {\n            case 1: {\n                // 0x4047c9\n                v19 = v78;\n                v20 = v77;\n                v23 = 0;\n                v25 = 0x403410;\n                v24 = v76;\n                v21 = v86;\n                v22 = v74;\n                goto lab_0x4042ea;\n            }\n            case 2: {\n                goto lab_0x4042ea;\n            }\n            case 3: {\n                // 0x404802\n                v19 = v78;\n                v20 = v77;\n                v23 = 0;\n                v25 = 0x403120;\n                v24 = v76;\n                v21 = v86;\n                v22 = v74;\n                goto lab_0x4042ea;\n            }\n            case 4: {\n                // 0x40480e\n                v19 = v78;\n                v20 = v77;\n                v23 = 0;\n                v25 = 0x403050;\n                v24 = v76;\n                v21 = v86;\n                v22 = v74;\n                goto lab_0x4042ea;\n            }\n            case 5: {\n                // 0x40481a\n                v19 = v78;\n                v20 = v77;\n                v23 = 0;\n                v25 = 0x402f80;\n                v24 = v76;\n                v21 = v86;\n                v22 = v74;\n                goto lab_0x4042ea;\n            }\n            default: {\n                goto lab_0x4045ce;\n            }\n        }\n    }\n  lab_0x404660:;\n    int64_t v87 = (int64_t)v40 + 0xffffffd0; // 0x404660\n    if ((int32_t)v87 < 10) {\n        int64_t v88 = v8 + 2;\n        int64_t v89 = 0x100000000 * v87 >> 32; // 0x4046a4\n        int64_t v90 = (int64_t)*(char *)v88 + 0xffffffd0; // 0x4046ab\n        while ((int32_t)v90 < 10) {\n            v88++;\n            v89 = 10 * v89 + (0x100000000 * v90 >> 32);\n            v90 = (int64_t)*(char *)v88 + 0xffffffd0;\n        }\n        if (v88 == v39) {\n            // 0x404826\n            v51 = v39;\n            v48 = 4;\n            v45 = g63;\n        } else {\n            if (v89 >= 9) {\n                // 0x4046d3\n                function_407210(a1);\n                v26 = (int64_t)\"invalid type string %s;\\nthis system doesn't provide a %lu-byte integral type\";\n                goto lab_0x4041ec;\n            }\n            int32_t v91 = *(int32_t *)(4 * v89 + (int64_t)&g60); // 0x4046c2\n            v51 = v88;\n            v48 = v89;\n            v45 = v91;\n            if (v91 == 0) {\n                // 0x4046d3\n                function_407210(a1);\n                v26 = (int64_t)\"invalid type string %s;\\nthis system doesn't provide a %lu-byte integral type\";\n                goto lab_0x4041ec;\n            }\n        }\n    } else {\n        // 0x404838\n        v51 = v39;\n        v48 = 4;\n        v45 = g63;\n    }\n    goto lab_0x404254;\n  lab_0x4042bd:;\n    int64_t v68 = v67;\n    int64_t v69 = v66;\n    int64_t v70 = v65;\n    int64_t v71 = v64;\n    char v72 = v63;\n    char v73 = v62;\n    g108 = v68 & 0xffffffff;\n    v19 = v73;\n    v20 = v72;\n    v23 = v71;\n    v25 = 0x403050;\n    v24 = v70;\n    v21 = v69;\n    v22 = v68;\n    switch ((int32_t)v68) {\n        case 1: {\n            // 0x404730\n            v19 = v73;\n            v20 = v72;\n            v23 = v71;\n            v25 = 0x403380;\n            v24 = v70;\n            v21 = v69;\n            v22 = v68;\n            goto lab_0x4042ea;\n        }\n        case 2: {\n            // 0x4047b0\n            v19 = v73;\n            v20 = v72;\n            v23 = v71;\n            v25 = 0x403200;\n            v24 = v70;\n            v21 = v69;\n            v22 = v68;\n            goto lab_0x4042ea;\n        }\n        case 3: {\n            // 0x404720\n            v19 = v73;\n            v20 = v72;\n            v23 = v71;\n            v25 = 0x403120;\n            v24 = v70;\n            v21 = v69;\n            v22 = v68;\n            goto lab_0x4042ea;\n        }\n        case 4: {\n            goto lab_0x4042ea;\n        }\n        case 5: {\n            // 0x404740\n            v19 = v73;\n            v20 = v72;\n            v23 = v71;\n            v25 = 0x402f80;\n            v24 = v70;\n            v21 = v69;\n            v22 = v68;\n            goto lab_0x4042ea;\n        }\n        default: {\n            goto lab_0x4045ce;\n        }\n    }\n  lab_0x4041ec:\n    // 0x4041ec\n    error(0, 0, dcgettext(NULL, (char *)v26, 5));\n    return (int32_t)&g104 ^ (int32_t)&g104;\n}\n"
        },
        {
            "funcName": "function_4048a0",
            "funcStartAddr": "4048a0",
            "funcEndAddr": "404960",
            "decompiledFuncCode": "int64_t function_4048a0(uint64_t a1, int64_t a2, int64_t * a3) {\n    if (a1 == 0 || (int64_t)g69 < a1) {\n        // 0x404939\n        __assert_fail(\"0 < n && n <= bytes_per_block\", \"src/od.c\", 1287, \"read_block\");\n        return &g104;\n    }\n    // 0x4048bd\n    *a3 = 0;\n    int64_t v1 = 1; // 0x4048d1\n    if (g66 == NULL) {\n        // 0x404927\n        return 1;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1 - v2; // 0x404911\n    int64_t v4 = fread_unlocked((int64_t *)(v2 + a2), 1, (int32_t)v3, g66); // 0x40491a\n    *a3 = v3 + v4;\n    while (v3 != v4) {\n        int32_t v5 = *__errno_location(); // 0x4048e5\n        int64_t v6 = function_4038f0(v5); // 0x4048e7\n        v1 = v6 & v1 & function_403a50();\n        if (g66 == NULL) {\n            // break -> 0x404927\n            break;\n        }\n        v2 = v3;\n        v3 = a1 - v2;\n        v4 = fread_unlocked((int64_t *)(v2 + a2), 1, (int32_t)v3, g66);\n        *a3 = v3 + v4;\n    }\n    // 0x404927\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404960",
            "funcStartAddr": "404960",
            "funcEndAddr": "404dfd",
            "decompiledFuncCode": "int64_t function_404960(int64_t a1) {\n    int32_t status = a1; // 0x404976\n    if (status != 0) {\n        // 0x40497a\n        __fprintf_chk(g51, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40499f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4049a6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n  or:  %s [-abcdfilosx]... [FILE] [[+]OFFSET[.][b]]\\n  or:  %s --traditional [OPTION]... [FILE] [[+]OFFSET[.][b] [+][LABEL][.][b]]\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\nWrite an unambiguous representation, octal bytes by default,\\nof FILE to standard output.  With more than one FILE argument,\\nconcatenate them in the listed order to form the input.\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"\\nIf first and second call formats both apply, the second format is assumed\\nif the last operand begins with + or (if there are 2 operands) a digit.\\nAn OFFSET operand means -j OFFSET.  LABEL is the pseudo-address\\nat first byte printed, incremented when dump is progressing.\\nFor OFFSET and LABEL, a 0x or 0X prefix indicates hexadecimal;\\nsuffixes may be . for octal and b for multiply by 512.\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"  -A, --address-radix=RADIX   output format for file offsets; RADIX is one\\n                                of [doxn], for Decimal, Octal, Hex or None\\n      --endian={big|little}   swap input bytes according the specified order\\n  -j, --skip-bytes=BYTES      skip BYTES input bytes first\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"  -N, --read-bytes=BYTES      limit dump to BYTES input bytes\\n  -S BYTES, --strings[=BYTES]  output strings of at least BYTES graphic chars;\\n                                3 is implied when BYTES is not specified\\n  -t, --format=TYPE           select output format or formats\\n  -v, --output-duplicates     do not use * to mark line suppression\\n  -w[BYTES], --width[=BYTES]  output BYTES bytes per output line;\\n                                32 is implied when BYTES is not specified\\n      --traditional           accept arguments in third form above\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"\\n\\nTraditional format specifications may be intermixed; they accumulate:\\n  -a   same as -t a,  select named characters, ignoring high-order bit\\n  -b   same as -t o1, select octal bytes\\n  -c   same as -t c,  select printable characters or backslash escapes\\n  -d   same as -t u2, select unsigned decimal 2-byte units\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"  -f   same as -t fF, select floats\\n  -i   same as -t dI, select decimal ints\\n  -l   same as -t dL, select decimal longs\\n  -o   same as -t o2, select octal 2-byte units\\n  -s   same as -t d2, select decimal 2-byte units\\n  -x   same as -t x2, select hexadecimal 2-byte units\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"\\n\\nTYPE is made up of one or more of these specifications:\\n  a          named character, ignoring high-order bit\\n  c          printable character or backslash escape\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"  d[SIZE]    signed decimal, SIZE bytes per integer\\n  f[SIZE]    floating point, SIZE bytes per float\\n  o[SIZE]    octal, SIZE bytes per integer\\n  u[SIZE]    unsigned decimal, SIZE bytes per integer\\n  x[SIZE]    hexadecimal, SIZE bytes per integer\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"\\nSIZE is a number.  For TYPE in [doux], SIZE may also be C for\\nsizeof(char), S for sizeof(short), I for sizeof(int) or L for\\nsizeof(long).  If TYPE is f, SIZE may also be F for sizeof(float), D\\nfor sizeof(double) or L for sizeof(long double).\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"\\nAdding a z suffix to any type displays printable characters at the end of\\neach output line.\\n\", 5), g48);\n    fputs_unlocked(dcgettext(NULL, \"\\n\\nBYTES is hex with 0x or 0X prefix, and may have a multiplier suffix:\\n  b    512\\n  KB   1000\\n  K    1024\\n  MB   1000*1000\\n  M    1024*1024\\nand so on for G, T, P, E, Z, Y.\\n\", 5), g48);\n    int64_t v1 = &g5; // bp-136, 0x404bd7\n    bool v2; // 0x404960\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x404c60\n    int64_t v6 = *(int64_t *)v5; // 0x404c64\n    int64_t v7 = 3; // 0x404c6a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"od\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x404c76\n        char v11 = *(char *)v9; // 0x404c76\n        char v12 = v11; // 0x404c76\n        bool v13 = false; // 0x404c76\n        while (v10 == v11) {\n            // 0x404c6c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x404c76\n            int64_t v15 = v8 + v3; // 0x404c76\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x404c82\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 3;\n    }\n    // 0x404c82\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x404d94;\n        } else {\n            // 0x404d7e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x404dd3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x404ce4;\n            } else {\n                goto lab_0x404d94;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x404ce4;\n        } else {\n            // 0x404cca\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x404dd3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x404ce4;\n            } else {\n                goto lab_0x404ce4;\n            }\n        }\n    }\n  lab_0x404d94:\n    // 0x404d94\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x404d24\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40499f\n    exit(status);\n    // UNREACHABLE\n  lab_0x404ce4:\n    // 0x404ce4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x404d24\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40499f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404e00",
            "funcStartAddr": "404e00",
            "funcEndAddr": "404e0a",
            "decompiledFuncCode": "int64_t function_404e00(void) {\n    // 0x404e00\n    return function_404960(1);\n}\n"
        },
        {
            "funcName": "function_404e10",
            "funcStartAddr": "404e10",
            "funcEndAddr": "404f26",
            "decompiledFuncCode": "int64_t function_404e10(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x404e31\n    int32_t len = strlen(str); // 0x404e31\n    if (a2 == 0) {\n        // 0x404efd\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x404e97\n    int64_t v4 = a3; // 0x404e10\n    int64_t v5 = a2; // 0x404e9e\n    int64_t str4; // 0x404e10\n    int64_t v6; // 0x404e10\n    int32_t v7; // 0x404e10\n    int32_t v8; // 0x404e10\n    int32_t v9; // 0x404e10\n    int64_t v10; // 0x404e10\n    int64_t result; // 0x404e10\n    int32_t v11; // 0x404e93\n    char * str2; // 0x404eb2\n    while (true) {\n        // 0x404ea7\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x404ebb\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x404efd\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x404ecf\n                break;\n            }\n            // 0x404e60\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x404e6e\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x404e97\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x404ed3\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x404eda\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x404ea7\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x404ea7\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x404ebb\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x404efd\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x404ecf\n                    break;\n                }\n                // 0x404e60\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x404e6e\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x404e97\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x404ecf\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x404ee8:\n    // 0x404efd\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_404f30",
            "funcStartAddr": "404f30",
            "funcEndAddr": "404fa1",
            "decompiledFuncCode": "int64_t function_404f30(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x404f30\n    if (a3 == -1) {\n        // 0x404f90\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x404f45\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x404f54\n    function_4071f0(1, a1);\n    function_406ee0(0, 8, a2);\n    error(0, 0, format);\n    return &g104;\n}\n"
        },
        {
            "funcName": "function_404fb0",
            "funcStartAddr": "404fb0",
            "funcEndAddr": "4050c8",
            "decompiledFuncCode": "int64_t function_404fb0(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x404fdd\n    fputs_unlocked(v1, g51);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x405050\n        int64_t v5; // 0x405057\n        int64_t v6; // 0x405077\n        while (v3 != 0) {\n            // 0x40503b\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x405000\n                break;\n            }\n            // 0x40504d\n            v4 = v3 + 1;\n            v5 = function_407210(v2);\n            __fprintf_chk(g51, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x405080\n                goto lab_0x405080;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x405003\n        int64_t v8 = function_407210(v2); // 0x40500d\n        __fprintf_chk(g51, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x40502d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x40503b\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x405000\n                    break;\n                }\n                // 0x40504d\n                v4 = v3 + 1;\n                v5 = function_407210(v2);\n                __fprintf_chk(g51, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x405080\n                    goto lab_0x405080;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x405000\n            v7 = v3 + 1;\n            v8 = function_407210(v2);\n            __fprintf_chk(g51, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x405080:;\n    int64_t v10 = (int64_t)g51; // 0x405080\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x405087\n    uint64_t result = *v11; // 0x405087\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x4050b0\n        return __overflow(g51, 10);\n    }\n    // 0x405091\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4050d0",
            "funcStartAddr": "4050d0",
            "funcEndAddr": "405140",
            "decompiledFuncCode": "int64_t function_4050d0(char * a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_404e10(a2, v2, v1, a5); // 0x4050fc\n    int64_t result = v3; // 0x405104\n    if (v3 < 0) {\n        // 0x405118\n        function_404f30((int64_t)a1, a2, v3);\n        function_404fb0(v2, v1, a5);\n        result = -1;\n    }\n    // 0x405106\n    return result;\n}\n"
        },
        {
            "funcName": "function_405140",
            "funcStartAddr": "405140",
            "funcEndAddr": "40518d",
            "decompiledFuncCode": "int64_t function_405140(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x405140\n    if (result == 0) {\n        // 0x405181\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x405178\n    int32_t n = a4; // 0x405178\n    int64_t v1 = result; // 0x40517f\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x405181\n        return result;\n    }\n    int64_t str3 = str2; // 0x40517f\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x405160\n    int64_t result2 = 0; // 0x40516d\n    while (v2 != 0) {\n        // 0x40516f\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x405181\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x405181\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405190",
            "funcStartAddr": "405190",
            "funcEndAddr": "405198",
            "decompiledFuncCode": "int64_t function_405190(int64_t a1) {\n    // 0x405190\n    g86 = a1;\n    int64_t result; // 0x405190\n    return result;\n}\n"
        },
        {
            "funcName": "function_4051a0",
            "funcStartAddr": "4051a0",
            "funcEndAddr": "4051a8",
            "decompiledFuncCode": "int64_t function_4051a0(int64_t a1) {\n    // 0x4051a0\n    g85 = a1;\n    int64_t result; // 0x4051a0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4051b0",
            "funcStartAddr": "4051b0",
            "funcEndAddr": "40524e",
            "decompiledFuncCode": "int64_t function_4051b0(void) {\n    // 0x4051b0\n    int32_t * err_num; // 0x4051c6\n    if ((int32_t)function_409170((int64_t)g48) == 0) {\n        goto lab_0x4051dc;\n    } else {\n        // 0x4051c6\n        err_num = __errno_location();\n        if (g85 == 0) {\n            goto lab_0x4051f3;\n        } else {\n            // 0x4051d7\n            if (*err_num != 32) {\n                goto lab_0x4051f3;\n            } else {\n                goto lab_0x4051dc;\n            }\n        }\n    }\n  lab_0x4051dc:;\n    int64_t result = function_409170((int64_t)g51); // 0x4051e3\n    if ((int32_t)result == 0) {\n        // 0x4051ec\n        return result;\n    }\n    // 0x40522e\n    _exit(g38);\n    // UNREACHABLE\n  lab_0x4051f3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4051ff\n    if (g86 == 0) {\n        // 0x405239\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x405213\n        error(0, *err_num, \"%s: %s\", (char *)function_407060((int64_t)g86), v1);\n    }\n    // 0x40522e\n    _exit(g38);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405250",
            "funcStartAddr": "405250",
            "funcEndAddr": "405388",
            "decompiledFuncCode": "int64_t function_405250(int64_t * str, uint64_t a2, uint32_t a3, int32_t a4) {\n    // 0x405250\n    int128_t v1; // 0x405250\n    int128_t v2 = v1;\n    int128_t v3 = __asm_movapd(v1); // 0x405254\n    int128_t v4 = __asm_cmpltsd(__asm_movapd(v3), __asm_pxor(v2, v2)); // 0x40527b\n    int128_t v5 = __asm_andnpd(__asm_movapd(v4), v3); // 0x40528e\n    int64_t v6; // bp-88, 0x405250\n    int64_t v7 = &v6; // 0x405292\n    int64_t v8 = v7 + 22 | (int64_t)(a3 % 2); // 0x40529d\n    __asm_movsd_1(v1);\n    int128_t v9 = __asm_xorpd(v1, g16); // 0x4052af\n    *(char *)v8 = 43;\n    int64_t v10 = v8 + (int64_t)(a3 / 2 % 2); // 0x4052c0\n    int128_t v11 = __asm_andpd(v9, v4); // 0x4052c4\n    int64_t v12 = v10 + (int64_t)(a3 / 4 % 2); // 0x4052c8\n    int32_t v13 = a3 & 16; // 0x4052ce\n    *(char *)v10 = 32;\n    int128_t v14 = __asm_orpd(v11, v5); // 0x4052d7\n    *(char *)v12 = 48;\n    int128_t v15 = __asm_movsd(0x10000000000000); // 0x4052e6\n    int64_t v16 = v12 + (int64_t)(a3 / 8 % 2); // 0x4052ee\n    *(int16_t *)v16 = 0x2e2a;\n    *(char *)(v16 + 2) = 42;\n    __asm_comisd(v15, v14);\n    *(char *)(v16 + 4) = 0;\n    *(char *)(v16 + 3) = (char)(v13 - (v13 | (int32_t)(v13 == 0))) & 32 | 71;\n    int64_t * v17 = (int64_t *)(v7 - 16); // 0x405332\n    int64_t * v18 = (int64_t *)(v7 + 8); // 0x405333\n    int32_t v19 = a2;\n    char * v20 = (char *)(v7 + 21);\n    *v17 = 1;\n    __asm_movsd(*v18);\n    int32_t result = __snprintf_chk((char *)str, v19, 1, -1, v20); // 0x405349\n    if (result < 0) {\n        // 0x405377\n        return result;\n    }\n    float64_t str_as_d; // 0x405368\n    if ((int64_t)result < a2) {\n        // 0x405363\n        str_as_d = strtod((char *)str, NULL);\n        __asm_ucomisd((int128_t)(int32_t)(float32_t)str_as_d, *v18);\n    }\n    int64_t v21 = 2; // 0x405320\n    int64_t v22 = v21 & 0xffffffff; // 0x405320\n    *v17 = v22;\n    __asm_movsd(*v18);\n    int32_t result2 = __snprintf_chk((char *)str, v19, 1, -1, v20); // 0x405349\n    while ((int32_t)v21 <= 16 && result2 >= 0) {\n        // 0x40535b\n        if ((int64_t)result2 < a2) {\n            // 0x405363\n            str_as_d = strtod((char *)str, NULL);\n            __asm_ucomisd((int128_t)(int32_t)(float32_t)str_as_d, *v18);\n        }\n        // 0x405320\n        v21 = v22 + 1;\n        v22 = v21 & 0xffffffff;\n        *v17 = v22;\n        __asm_movsd(*v18);\n        result2 = __snprintf_chk((char *)str, v19, 1, -1, v20);\n    }\n    // 0x405377\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405390",
            "funcStartAddr": "405390",
            "funcEndAddr": "4054c7",
            "decompiledFuncCode": "int64_t function_405390(int64_t * str, uint64_t a2, uint32_t a3, int32_t a4) {\n    // 0x405390\n    int128_t v1; // 0x405390\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int128_t v4 = __asm_movaps_2(v1); // 0x4053a1\n    int128_t v5 = __asm_pxor(v3, v3); // 0x4053a4\n    int128_t v6 = __asm_movaps_2(v4); // 0x4053ad\n    __asm_pxor(v2, v2);\n    int128_t v7 = __asm_cmpltss(v6, v5); // 0x4053b6\n    int128_t v8 = __asm_cvtss2sd(v1); // 0x4053be\n    int128_t v9 = __asm_andnps(__asm_movaps_2(v7), v4); // 0x4053ce\n    int64_t v10; // bp-88, 0x405390\n    int64_t v11 = &v10; // 0x4053d1\n    int64_t v12 = v11 + 22 | (int64_t)(a3 % 2); // 0x4053dc\n    __asm_movss_3(v1);\n    int128_t v13 = __asm_xorps(v1, g17); // 0x4053ee\n    *(char *)v12 = 43;\n    int64_t v14 = v12 + (int64_t)(a3 / 2 % 2); // 0x4053fe\n    int128_t v15 = __asm_andps(v13, v7); // 0x405402\n    v10 = __asm_movsd_1(v8);\n    int64_t v16 = v14 + (int64_t)(a3 / 4 % 2); // 0x40540a\n    int32_t v17 = a3 & 16; // 0x405410\n    *(char *)v14 = 32;\n    int128_t v18 = __asm_orps(v15, v9); // 0x405419\n    *(char *)v16 = 48;\n    int128_t v19 = __asm_movss(0x800000); // 0x405427\n    int64_t v20 = v16 + (int64_t)(a3 / 8 % 2); // 0x40542f\n    *(int16_t *)v20 = 0x2e2a;\n    *(char *)(v20 + 2) = 42;\n    __asm_ucomiss(v19, v18);\n    *(char *)(v20 + 4) = 0;\n    *(char *)(v20 + 3) = (char)(v17 - (v17 | (int32_t)(v17 == 0))) & 32 | 71;\n    int64_t * v21 = (int64_t *)(v11 - 16); // 0x405472\n    *v21 = 1;\n    __asm_movsd(v10);\n    int32_t v22 = a2; // 0x405489\n    char * v23 = (char *)(v11 + 21); // 0x405489\n    int32_t result = __snprintf_chk((char *)str, v22, 1, -1, v23); // 0x405489\n    if (result < 0) {\n        // 0x4054b6\n        return result;\n    }\n    // 0x40549b\n    float32_t str_as_f; // 0x4054a8\n    if ((int64_t)result < a2) {\n        // 0x4054a3\n        str_as_f = strtof((char *)str, NULL);\n        __asm_ucomiss_4((int128_t)(int32_t)str_as_f, *(int32_t *)(v11 + 12));\n    }\n    int64_t v24 = 2; // 0x405460\n    int64_t v25 = v24 & 0xffffffff; // 0x405460\n    *v21 = v25;\n    __asm_movsd(v10);\n    int32_t result2 = __snprintf_chk((char *)str, v22, 1, -1, v23); // 0x405489\n    while ((int32_t)v24 <= 8 && result2 >= 0) {\n        // 0x40549b\n        if ((int64_t)result2 < a2) {\n            // 0x4054a3\n            str_as_f = strtof((char *)str, NULL);\n            __asm_ucomiss_4((int128_t)(int32_t)str_as_f, *(int32_t *)(v11 + 12));\n        }\n        // 0x405460\n        v24 = v25 + 1;\n        v25 = v24 & 0xffffffff;\n        *v21 = v25;\n        __asm_movsd(v10);\n        result2 = __snprintf_chk((char *)str, v22, 1, -1, v23);\n    }\n    // 0x4054b6\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4054d0",
            "funcStartAddr": "4054d0",
            "funcEndAddr": "4055e4",
            "decompiledFuncCode": "int64_t function_4054d0(int64_t a1, uint64_t a2, uint32_t a3, int32_t a4, int64_t a5) {\n    bool v1 = false; // 0x40550d\n    bool v2 = false; // 0x40550d\n    if ((float80_t)(int80_t)a5 >= 0.0L) {\n        v1 = false;\n        v2 = true;\n        if ((float80_t)(int80_t)a5 <= 0.0L) {\n            v1 = true;\n            v2 = (float80_t)(int80_t)a5 != 0.0L;\n        }\n    }\n    uint64_t v3 = (int64_t)a3;\n    uint64_t v4 = (int64_t)a3; // 0x4054e3\n    int64_t v5; // bp-72, 0x4054d0\n    int64_t v6 = &v5; // 0x4054f6\n    float80_t v7; // 0x4054d0\n    float80_t v8 = v1 | v2 ? v7 : v7; // 0x40550f\n    int64_t v9 = v4 % 2 | v6 | 6; // 0x405518\n    int64_t v10 = v9 + v4 / 2 % 2; // 0x405522\n    *(char *)v9 = 43;\n    *(char *)v10 = 32;\n    int64_t v11 = v10 + v3 / 4 % 2; // 0x405538\n    *(char *)v11 = 48;\n    int64_t v12 = v11 + v3 / 8 % 2; // 0x40554a\n    *(int32_t *)v12 = 0x4c2a2e2a;\n    *(char *)(v12 + 5) = 0;\n    bool v13 = false; // 0x405562\n    bool v14 = false; // 0x405562\n    if (v8 >= 3.3621e-4932L) {\n        v13 = false;\n        v14 = true;\n        if (v8 <= 3.3621e-4932L) {\n            v13 = true;\n            v14 = v8 != 3.3621e-4932L;\n        }\n    }\n    int64_t v15 = v3 & 16; // 0x40553e\n    *(char *)(v12 + 4) = (char)(v15 - (v15 | (int64_t)(v15 == 0))) & 32 | 71;\n    int64_t v16 = v13 | v14 ? 18 : 1; // 0x40556e\n    int64_t * v17 = (int64_t *)(v6 + 88); // 0x40557b\n    int64_t * v18 = (int64_t *)(v6 - 8); // 0x40557b\n    int64_t v19 = v6 + 80; // 0x40558a\n    int64_t * v20 = (int64_t *)v19; // 0x40558a\n    int64_t * v21 = (int64_t *)(v6 - 16); // 0x40558a\n    int64_t * v22 = (int64_t *)(v6 - 32); // 0x40559a\n    char * str = (char *)a1; // 0x4055a0\n    int32_t v23 = a2; // 0x4055a0\n    char * v24 = (char *)(v6 | 5); // 0x4055a0\n    *v18 = *v17;\n    *v21 = *v20;\n    *v22 = v16;\n    int32_t result = __snprintf_chk(str, v23, 1, -1, v24); // 0x4055a0\n    if (result < 0) {\n        // 0x4055d3\n        return result;\n    }\n    float80_t v25 = 3.3621e-4932L;\n    float80_t v26 = v25; // 0x4055b9\n    if ((int64_t)result < a2) {\n        // 0x4055bb\n        strtold(str, NULL);\n        v26 = *(float80_t *)v19;\n        if (v25 == v26) {\n            // break -> 0x4055d3\n            break;\n        }\n    }\n    int64_t v27 = v16 + 1; // 0x405578\n    int64_t v28 = v27 & 0xffffffff; // 0x405578\n    *v18 = *v17;\n    *v21 = *v20;\n    *v22 = v28;\n    int32_t v29 = __snprintf_chk(str, v23, 1, -1, v24); // 0x4055a0\n    int32_t result2 = v29; // 0x4055ad\n    while ((int32_t)v27 <= 20 && v29 >= 0) {\n        // 0x4055b4\n        v25 = v26;\n        int32_t v30 = v29;\n        v26 = v25;\n        if ((int64_t)v30 < a2) {\n            // 0x4055bb\n            strtold(str, NULL);\n            v26 = *(float80_t *)v19;\n            result2 = v30;\n            if (v25 == v26) {\n                // break -> 0x4055d3\n                break;\n            }\n        }\n        // 0x405578\n        v27 = v28 + 1;\n        v28 = v27 & 0xffffffff;\n        *v18 = *v17;\n        *v21 = *v20;\n        *v22 = v28;\n        v29 = __snprintf_chk(str, v23, 1, -1, v24);\n        result2 = v29;\n    }\n    // 0x4055d3\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4055f0",
            "funcStartAddr": "4055f0",
            "funcEndAddr": "405689",
            "decompiledFuncCode": "int64_t function_4055f0(int64_t str) {\n    // 0x4055f0\n    if (str == 0) {\n        // 0x405669\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g51);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4055fe\n    int64_t result = (int64_t)found_char_pos; // 0x4055fe\n    if (found_char_pos == NULL) {\n        // 0x405659\n        g87 = str;\n        g50 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x405608\n    if (v1 - str < 7) {\n        // 0x405659\n        g87 = str;\n        g50 = str;\n        return result;\n    }\n    // 0x405618\n    bool v2; // 0x4055f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4055f0\n    int64_t v5 = result - 6; // 0x4055f0\n    int64_t v6 = 7; // 0x405626\n    unsigned char v7 = *(char *)v5; // 0x405626\n    char v8 = *(char *)v4; // 0x405626\n    char v9 = v8; // 0x405626\n    bool v10 = false; // 0x405626\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x405630\n    int64_t v13 = v1; // 0x405630\n    int64_t v14 = 3; // 0x405630\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x405659\n        g87 = str;\n        g50 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x405642\n    char v16 = *(char *)v12; // 0x405642\n    char v17 = v16; // 0x405642\n    bool v18 = false; // 0x405642\n    while (v15 == v16) {\n        // 0x405632\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40564c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40564e\n        v20 = result + 4;\n        g47 = v20;\n    }\n    // 0x405659\n    g87 = v20;\n    g50 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405690",
            "funcStartAddr": "405690",
            "funcEndAddr": "405782",
            "decompiledFuncCode": "int64_t function_405690(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4056a4\n    int64_t result = (int64_t)v1; // 0x4056a4\n    if (result != a1) {\n        // 0x4056b1\n        return result;\n    }\n    int64_t v2 = function_409230(); // 0x4056c0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x405776\n    if (v3 == 85) {\n        // 0x4056d0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x405768\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g25 : (int64_t)&g18;\n            return result2;\n        }\n        char v4 = *v1; // 0x4056fe\n        int64_t result3 = v4 != 96 ? (int64_t)&g19 : (int64_t)&g22; // 0x40570b\n        // 0x4056b1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x405768\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g25 : (int64_t)&g18;\n        return result2;\n    }\n    char v5 = *v1; // 0x40574d\n    int64_t result4 = v5 != 96 ? (int64_t)&g20 : (int64_t)&g21; // 0x40575a\n    // 0x4056b1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_405790",
            "funcStartAddr": "405790",
            "funcEndAddr": "4057e7",
            "decompiledFuncCode": "int64_t function_405790(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x405790\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4057d8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4057e7",
            "funcStartAddr": "4057e7",
            "funcEndAddr": "4069b1",
            "decompiledFuncCode": "int64_t function_4057e7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x405831\n    int64_t v3 = 0; // 0x405831\n    int64_t v4; // 0x4057e7\n    int64_t v5; // 0x4057e7\n    int64_t v6; // 0x4057e7\n    int64_t v7; // 0x4057e7\n    int64_t v8; // 0x4057e7\n    int64_t v9; // 0x4057e7\n    int64_t v10; // 0x4057e7\n    int64_t v11; // 0x4057e7\n    int64_t v12; // 0x4057e7\n    int64_t v13; // 0x4057e7\n    int64_t v14; // 0x4057e7\n    int64_t v15; // 0x4057e7\n    int64_t v16; // 0x4057e7\n    int64_t v17; // 0x4057e7\n    int64_t v18; // 0x4057e7\n    int64_t result; // 0x4057e7\n    int64_t v19; // 0x4057e7\n    int32_t wc; // bp+132, 0x4057e7\n    int64_t ps; // bp+136, 0x4057e7\n    char v20; // 0x405da0\n    int64_t v21; // 0x405da0\n    int64_t v22; // 0x406148\n    int64_t v23; // 0x4057e7\n    int64_t v24; // 0x406167\n    int32_t v25; // 0x4057e7\n    while (true) {\n      lab_0x405838_2:\n        // 0x405838\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4057e7\n        int64_t v27; // 0x40586c\n        while (true) {\n          lab_0x405838:\n            // 0x405838\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x405843\n            if (v15 == -1) {\n                // 0x405845\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x405853\n            if (v28) {\n                // break (via goto) -> 0x405fb8\n                goto lab_0x405fb8;\n            }\n            // 0x40585c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g103 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x405e4b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x405991;\n                    }\n                    // 0x40626d\n                    v26 = v5 + 1;\n                    goto lab_0x405838;\n                }\n                case 7: {\n                    goto lab_0x405991;\n                }\n                case 8: {\n                    goto lab_0x405991;\n                }\n                case 9: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x405991;\n                }\n                case 12: {\n                    goto lab_0x405991;\n                }\n                case 13: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40595d;\n                }\n                case 36: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x405991;\n                }\n                case 38: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x405991;\n                }\n                case 44: {\n                    goto lab_0x405991;\n                }\n                case 45: {\n                    goto lab_0x405991;\n                }\n                case 46: {\n                    goto lab_0x405991;\n                }\n                case 47: {\n                    goto lab_0x405991;\n                }\n                case 48: {\n                    goto lab_0x405991;\n                }\n                case 49: {\n                    goto lab_0x405991;\n                }\n                case 50: {\n                    goto lab_0x405991;\n                }\n                case 51: {\n                    goto lab_0x405991;\n                }\n                case 52: {\n                    goto lab_0x405991;\n                }\n                case 53: {\n                    goto lab_0x405991;\n                }\n                case 54: {\n                    goto lab_0x405991;\n                }\n                case 55: {\n                    goto lab_0x405991;\n                }\n                case 56: {\n                    goto lab_0x405991;\n                }\n                case 57: {\n                    goto lab_0x405991;\n                }\n                case 58: {\n                    goto lab_0x405991;\n                }\n                case 59: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x405991;\n                }\n                case 66: {\n                    goto lab_0x405991;\n                }\n                case 67: {\n                    goto lab_0x405991;\n                }\n                case 68: {\n                    goto lab_0x405991;\n                }\n                case 69: {\n                    goto lab_0x405991;\n                }\n                case 70: {\n                    goto lab_0x405991;\n                }\n                case 71: {\n                    goto lab_0x405991;\n                }\n                case 72: {\n                    goto lab_0x405991;\n                }\n                case 73: {\n                    goto lab_0x405991;\n                }\n                case 74: {\n                    goto lab_0x405991;\n                }\n                case 75: {\n                    goto lab_0x405991;\n                }\n                case 76: {\n                    goto lab_0x405991;\n                }\n                case 77: {\n                    goto lab_0x405991;\n                }\n                case 78: {\n                    goto lab_0x405991;\n                }\n                case 79: {\n                    goto lab_0x405991;\n                }\n                case 80: {\n                    goto lab_0x405991;\n                }\n                case 81: {\n                    goto lab_0x405991;\n                }\n                case 82: {\n                    goto lab_0x405991;\n                }\n                case 83: {\n                    goto lab_0x405991;\n                }\n                case 84: {\n                    goto lab_0x405991;\n                }\n                case 85: {\n                    goto lab_0x405991;\n                }\n                case 86: {\n                    goto lab_0x405991;\n                }\n                case 87: {\n                    goto lab_0x405991;\n                }\n                case 88: {\n                    goto lab_0x405991;\n                }\n                case 89: {\n                    goto lab_0x405991;\n                }\n                case 90: {\n                    goto lab_0x405991;\n                }\n                case 91: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x405991;\n                }\n                case 94: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x405991;\n                }\n                case 96: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x405991;\n                }\n                case 98: {\n                    goto lab_0x405991;\n                }\n                case 99: {\n                    goto lab_0x405991;\n                }\n                case 100: {\n                    goto lab_0x405991;\n                }\n                case 101: {\n                    goto lab_0x405991;\n                }\n                case 102: {\n                    goto lab_0x405991;\n                }\n                case 103: {\n                    goto lab_0x405991;\n                }\n                case 104: {\n                    goto lab_0x405991;\n                }\n                case 105: {\n                    goto lab_0x405991;\n                }\n                case 106: {\n                    goto lab_0x405991;\n                }\n                case 107: {\n                    goto lab_0x405991;\n                }\n                case 108: {\n                    goto lab_0x405991;\n                }\n                case 109: {\n                    goto lab_0x405991;\n                }\n                case 110: {\n                    goto lab_0x405991;\n                }\n                case 111: {\n                    goto lab_0x405991;\n                }\n                case 112: {\n                    goto lab_0x405991;\n                }\n                case 113: {\n                    goto lab_0x405991;\n                }\n                case 114: {\n                    goto lab_0x405991;\n                }\n                case 115: {\n                    goto lab_0x405991;\n                }\n                case 116: {\n                    goto lab_0x405991;\n                }\n                case 117: {\n                    goto lab_0x405991;\n                }\n                case 118: {\n                    goto lab_0x405991;\n                }\n                case 119: {\n                    goto lab_0x405991;\n                }\n                case 120: {\n                    goto lab_0x405991;\n                }\n                case 121: {\n                    goto lab_0x405991;\n                }\n                case 122: {\n                    goto lab_0x405991;\n                }\n                case 123: {\n                    goto lab_0x405935;\n                }\n                case 124: {\n                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x405935;\n                }\n                case 126: {\n                    goto lab_0x40595d;\n                }\n                default: {\n                    goto lab_0x405d35;\n                }\n            }\n        }\n      lab_0x405d35:\n        if (v23 != 1) {\n            // 0x4060a0\n            ps = 0;\n            int64_t len = v15; // 0x4060b0\n            if (v15 == -1) {\n                // 0x4060b2\n                len = strlen((char *)str);\n            }\n            // 0x4060de\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40613f:\n                // 0x40613f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x406144\n                int64_t v30 = v29 + str;\n                v24 = function_409010(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4066ba_2;\n                    }\n                    case -1: {\n                        goto lab_0x4066ba_2;\n                    }\n                    case -2: {\n                        // 0x40679d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4067d7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4067da\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4067e7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4067e0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4066ba\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4066ba_2;\n                    }\n                    case 1: {\n                        goto lab_0x406110;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4061bc\n                        char v34 = *(char *)v33; // 0x4061cd\n                        unsigned char v35; // 0x4057e7\n                        if (v34 < 125) {\n                            // 0x4061d8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4061ef\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4061c0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4061cd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4061d8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4061ef\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4061c0\n                            v33++;\n                        }\n                        goto lab_0x406110;\n                    }\n                }\n            }\n            goto lab_0x4066ba_2;\n        } else {\n            // 0x405d84\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x405991;\n        }\n    }\n  lab_0x405fb8:\n    // 0x405fb8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4068ba\n        if (v8 > result) {\n            // 0x4068c3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x405be7\n        return result;\n    }\n    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x405991:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4059a0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x405baa_2;\n        }\n    }\n    int64_t v39 = result; // 0x405aa1\n    char v40 = v20; // 0x405aa1\n    int64_t v41 = v38; // 0x405aa1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x405aa1\n    int64_t v43 = v36; // 0x405aa1\n    goto lab_0x405a1d;\n  lab_0x405baa_2:\n    // 0x405be7\n    return function_405790(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4066ba_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x405991;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40628e\n        int64_t v50 = v5 + 1; // 0x406371\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x406378\n        char v52 = v20; // 0x406378\n        int64_t v53 = result; // 0x406378\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x406341\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x406345\n            int64_t v56 = v54 + 1; // 0x40634a\n            int64_t v57 = v51 + 1; // 0x406371\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40633c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x406341\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x406345\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x405a1d;\n    }\n  lab_0x406110:\n    // 0x406110\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40612f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x406132\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4066ba\n        goto lab_0x4066ba_2;\n    }\n    goto lab_0x40613f;\n  lab_0x40595d:\n    // 0x40595d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x405baa_2;\n    }\n    goto lab_0x405991;\n  lab_0x405935:;\n    bool v60 = v15 == 1; // 0x405940\n    if (v15 == -1) {\n        // 0x405942\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40594e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x405991;\n    } else {\n        goto lab_0x40595d;\n    }\n  lab_0x405a1d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x405a22\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x405a26\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x405838_2;\n}\n"
        },
        {
            "funcName": "function_4069c0",
            "funcStartAddr": "4069c0",
            "funcEndAddr": "406b5e",
            "decompiledFuncCode": "int64_t function_4069c0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4069c2\n    int32_t * v3 = __errno_location(); // 0x4069dc\n    int64_t v4 = (int64_t)g40; // 0x4069e1\n    int32_t v5 = *v3; // 0x4069eb\n    int64_t v6 = v4; // 0x406a01\n    if (v2 >= (int64_t)*(int32_t *)&g43) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x406b59\n            function_407a20(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x406a10\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x406a17\n        int64_t v9; // 0x4069c0\n        if (g40 == &g41) {\n            int64_t v10 = function_407830(0, v8); // 0x406b3a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g41); // 0x406b3f\n            *(int64_t *)&g40 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_407830(v4, v8); // 0x406a2b\n            *(int64_t *)&g40 = v12;\n            v9 = v12;\n        }\n        // 0x406a3a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g43; // 0x406a3a\n        int32_t v14 = v7; // 0x406a41\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g43 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x406a71\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x406a7b\n    int64_t * v17 = (int64_t *)v15; // 0x406a7e\n    uint64_t v18 = *v17; // 0x406a7e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x406a81\n    int64_t result = *v19; // 0x406a81\n    int64_t v20; // 0x4069c0\n    uint64_t v21 = function_405790(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x406aa4\n    if (v18 > v21) {\n        // 0x406b1b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x406ab7\n    *v17 = v22;\n    if (result != (int64_t)&g88) {\n        // 0x406ac7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4077d0(v22); // 0x406ae1\n    *v19 = result2;\n    int64_t v23; // 0x4069c0\n    function_405790(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x406b1b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406b60",
            "funcStartAddr": "406b60",
            "funcEndAddr": "406b94",
            "decompiledFuncCode": "int64_t function_406b60(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x406b67\n    int64_t result = function_4079d0(a1 == 0 ? (int64_t)&g89 : a1, 56); // 0x406b86\n    return result;\n}\n"
        },
        {
            "funcName": "function_406ba0",
            "funcStartAddr": "406ba0",
            "funcEndAddr": "406baf",
            "decompiledFuncCode": "int64_t function_406ba0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g89 : a1); // 0x406bac\n    return result;\n}\n"
        },
        {
            "funcName": "function_406bb0",
            "funcStartAddr": "406bb0",
            "funcEndAddr": "406bbf",
            "decompiledFuncCode": "int64_t function_406bb0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g89 : a1; // 0x406bb8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g89;\n}\n"
        },
        {
            "funcName": "function_406bc0",
            "funcStartAddr": "406bc0",
            "funcEndAddr": "406bf3",
            "decompiledFuncCode": "int64_t function_406bc0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g89 + 8 : a1 + 8; // 0x406bd9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x406bde\n    uint32_t v3 = *v2; // 0x406bde\n    uint32_t v4 = (int32_t)a2 % 32; // 0x406be2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_406c00",
            "funcStartAddr": "406c00",
            "funcEndAddr": "406c13",
            "decompiledFuncCode": "int64_t function_406c00(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g89 + 4 : a1 + 4); // 0x406c0c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_406c20",
            "funcStartAddr": "406c20",
            "funcEndAddr": "406c4b",
            "decompiledFuncCode": "int64_t function_406c20(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g89 : a1; // 0x406c28\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x406c45\n        abort();\n        // UNREACHABLE\n    }\n    // 0x406c3c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g89;\n}\n"
        },
        {
            "funcName": "function_406c50",
            "funcStartAddr": "406c50",
            "funcEndAddr": "406cc2",
            "decompiledFuncCode": "int64_t function_406c50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g89 : a5; // 0x406c72\n    int32_t * v2 = __errno_location(); // 0x406c7b\n    uint32_t v3 = *(int32_t *)v1; // 0x406c9b\n    int64_t result = function_405790(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x406caa\n    return result;\n}\n"
        },
        {
            "funcName": "function_406cd0",
            "funcStartAddr": "406cd0",
            "funcEndAddr": "406db1",
            "decompiledFuncCode": "int64_t function_406cd0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g89 : a4; // 0x406cf2\n    int32_t * v2 = __errno_location(); // 0x406cf8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x406d17\n    int32_t * v4 = (int32_t *)v1; // 0x406d1a\n    int64_t v5 = function_405790(0, 0, a1, a2, (int64_t)*v4, v3); // 0x406d35\n    int64_t v6 = v5 + 1; // 0x406d3a\n    int64_t result = function_4077d0(v6); // 0x406d4f\n    function_405790(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x406d94\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x406d9d\n    return result;\n}\n"
        },
        {
            "funcName": "function_406dc0",
            "funcStartAddr": "406dc0",
            "funcEndAddr": "406dca",
            "decompiledFuncCode": "int64_t function_406dc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406dc0\n    return function_406cd0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_406dd0",
            "funcStartAddr": "406dd0",
            "funcEndAddr": "406e65",
            "decompiledFuncCode": "int64_t function_406dd0(void) {\n    uint32_t v1 = *(int32_t *)&g43; // 0x406dd0\n    int64_t v2 = v1; // 0x406dd0\n    int64_t v3 = v2; // 0x406de4\n    if (v1 >= 2) {\n        int64_t v4 = &g43;\n        int64_t v5 = v4 + 16; // 0x406e03\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g104;\n        while (v5 != (int64_t)g40 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x406e00\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g104;\n        }\n    }\n    int64_t v6 = v3; // 0x406e1d\n    if (g41 != 0x612460) {\n        // 0x406e1f\n        free((int64_t *)g41);\n        g41 = 256;\n        *(int64_t *)&g42 = (int64_t)&g88;\n        v6 = &g104;\n    }\n    int64_t result = v6; // 0x406e41\n    if (g40 != &g41) {\n        // 0x406e43\n        free(g40);\n        *(int64_t *)&g40 = (int64_t)&g41;\n        result = &g104;\n    }\n    // 0x406e56\n    *(int32_t *)&g43 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406e70",
            "funcStartAddr": "406e70",
            "funcEndAddr": "406e81",
            "decompiledFuncCode": "int64_t function_406e70(void) {\n    // 0x406e70\n    int64_t v1; // 0x406e70\n    return function_4069c0(v1, v1, -1, (int64_t *)&g89);\n}\n"
        },
        {
            "funcName": "function_406e90",
            "funcStartAddr": "406e90",
            "funcEndAddr": "406e9a",
            "decompiledFuncCode": "int64_t function_406e90(void) {\n    // 0x406e90\n    int64_t v1; // 0x406e90\n    return function_4069c0(v1, v1, v1, (int64_t *)&g89);\n}\n"
        },
        {
            "funcName": "function_406ea0",
            "funcStartAddr": "406ea0",
            "funcEndAddr": "406eb6",
            "decompiledFuncCode": "int64_t function_406ea0(int64_t a1) {\n    // 0x406ea0\n    return function_4069c0(0, a1, -1, (int64_t *)&g89);\n}\n"
        },
        {
            "funcName": "function_406ec0",
            "funcStartAddr": "406ec0",
            "funcEndAddr": "406ed2",
            "decompiledFuncCode": "int64_t function_406ec0(int64_t a1, int64_t a2) {\n    // 0x406ec0\n    return function_4069c0(0, a1, a2, (int64_t *)&g89);\n}\n"
        },
        {
            "funcName": "function_406ee0",
            "funcStartAddr": "406ee0",
            "funcEndAddr": "406f48",
            "decompiledFuncCode": "int64_t function_406ee0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x406ef0\n    return function_4069c0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_406f50",
            "funcStartAddr": "406f50",
            "funcEndAddr": "406fb4",
            "decompiledFuncCode": "int64_t function_406f50(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x406f60\n    return function_4069c0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_406fc0",
            "funcStartAddr": "406fc0",
            "funcEndAddr": "406fcc",
            "decompiledFuncCode": "int64_t function_406fc0(int64_t a1, int64_t a2) {\n    // 0x406fc0\n    return function_406ee0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_406fd0",
            "funcStartAddr": "406fd0",
            "funcEndAddr": "406fdf",
            "decompiledFuncCode": "int64_t function_406fd0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406fd0\n    return function_406f50(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_406fe0",
            "funcStartAddr": "406fe0",
            "funcEndAddr": "407050",
            "decompiledFuncCode": "int64_t function_406fe0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g89); // 0x406fed\n    int128_t v2 = __asm_movdqa(g90); // 0x406ff5\n    int128_t v3 = __asm_movdqa(g91); // 0x406ffd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x407012\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x407028\n    uint32_t v6 = *v5; // 0x407028\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40702d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4069c0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_407050",
            "funcStartAddr": "407050",
            "funcEndAddr": "40705d",
            "decompiledFuncCode": "int64_t function_407050(int64_t a1, int64_t a2) {\n    // 0x407050\n    return function_406fe0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_407060",
            "funcStartAddr": "407060",
            "funcEndAddr": "407071",
            "decompiledFuncCode": "int64_t function_407060(int64_t a1) {\n    // 0x407060\n    return function_406fe0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_407080",
            "funcStartAddr": "407080",
            "funcEndAddr": "40708a",
            "decompiledFuncCode": "int64_t function_407080(void) {\n    // 0x407080\n    int64_t v1; // 0x407080\n    return function_406fe0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_407090",
            "funcStartAddr": "407090",
            "funcEndAddr": "4070fe",
            "decompiledFuncCode": "int64_t function_407090(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4070aa\n    return function_4069c0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_407100",
            "funcStartAddr": "407100",
            "funcEndAddr": "40716c",
            "decompiledFuncCode": "int64_t function_407100(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g89); // 0x407107\n    int128_t v2 = __asm_movdqa(g90); // 0x40710f\n    int128_t v3 = __asm_movdqa(g91); // 0x407117\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x407139\n    if (a2 == 0 || a3 == 0) {\n        // 0x407167\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40714a\n    return function_4069c0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_407170",
            "funcStartAddr": "407170",
            "funcEndAddr": "407179",
            "decompiledFuncCode": "int64_t function_407170(void) {\n    // 0x407170\n    int64_t v1; // 0x407170\n    return function_407100(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_407180",
            "funcStartAddr": "407180",
            "funcEndAddr": "407197",
            "decompiledFuncCode": "int64_t function_407180(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407180\n    return function_407100(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4071a0",
            "funcStartAddr": "4071a0",
            "funcEndAddr": "4071b3",
            "decompiledFuncCode": "int64_t function_4071a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4071a0\n    return function_407100(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4071c0",
            "funcStartAddr": "4071c0",
            "funcEndAddr": "4071ca",
            "decompiledFuncCode": "int64_t function_4071c0(void) {\n    // 0x4071c0\n    int64_t v1; // 0x4071c0\n    return function_4069c0(v1, v1, v1, &g39);\n}\n"
        },
        {
            "funcName": "function_4071d0",
            "funcStartAddr": "4071d0",
            "funcEndAddr": "4071e2",
            "decompiledFuncCode": "int64_t function_4071d0(int64_t a1, int64_t a2) {\n    // 0x4071d0\n    return function_4069c0(0, a1, a2, &g39);\n}\n"
        },
        {
            "funcName": "function_4071f0",
            "funcStartAddr": "4071f0",
            "funcEndAddr": "407201",
            "decompiledFuncCode": "int64_t function_4071f0(int64_t a1, int64_t a2) {\n    // 0x4071f0\n    return function_4069c0(a1, a2, -1, &g39);\n}\n"
        },
        {
            "funcName": "function_407210",
            "funcStartAddr": "407210",
            "funcEndAddr": "407226",
            "decompiledFuncCode": "int64_t function_407210(int64_t a1) {\n    // 0x407210\n    return function_4069c0(0, a1, -1, &g39);\n}\n"
        },
        {
            "funcName": "function_407230",
            "funcStartAddr": "407230",
            "funcEndAddr": "40760d",
            "decompiledFuncCode": "int64_t function_407230(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4072c8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40724c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x407266\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4072ab\n    if (a6 < 10) {\n        // 0x4072ba\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4073b2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_407610",
            "funcStartAddr": "407610",
            "funcEndAddr": "407630",
            "decompiledFuncCode": "int64_t function_407610(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407610\n    if (a5 == 0) {\n        // 0x40762b\n        return function_407230(a1, a2, a3, a4, a5, 0, (int64_t)&g104);\n    }\n    int64_t v1 = 0; // 0x407617\n    v1++;\n    int64_t v2 = v1; // 0x407629\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x407620\n        v1++;\n        v2 = v1;\n    }\n    // 0x40762b\n    return function_407230(a1, a2, a3, a4, a5, v2, (int64_t)&g104);\n}\n"
        },
        {
            "funcName": "function_407630",
            "funcStartAddr": "407630",
            "funcEndAddr": "407690",
            "decompiledFuncCode": "int64_t function_407630(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x407630\n    int64_t v3 = &v2; // 0x407630\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x407663\n    int64_t v6; // 0x40764d\n    int64_t * v7; // 0x40766b\n    int64_t v8; // 0x40766b\n    int64_t v9; // 0x407677\n    if (v5 < 48) {\n        // 0x407640\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x407683\n            break;\n        }\n    } else {\n        // 0x40766b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x407683\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x407661\n    while (v4 != 9) {\n        // 0x407659\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x407640\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x407683\n                break;\n            }\n        } else {\n            // 0x40766b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x407683\n                break;\n            }\n        }\n        // 0x407659\n        v10 = 10;\n    }\n    // 0x407683\n    return function_407230(a1, a2, a3, a4, v3, v10, (int64_t)&g104);\n}\n"
        },
        {
            "funcName": "function_407690",
            "funcStartAddr": "407690",
            "funcEndAddr": "40774c",
            "decompiledFuncCode": "int64_t function_407690(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x407690\n    int64_t v1; // bp-168, 0x407690\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x407690\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x407690\n    int64_t v8; // 0x407690\n    int64_t v9; // bp-56, 0x407690\n    int64_t v10; // 0x4076f5\n    int64_t v11; // 0x407719\n    if ((int32_t)v6 < 48) {\n        // 0x4076e0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x407730\n            break;\n        }\n    } else {\n        // 0x407712\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x407730\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40770a\n    int64_t v13 = 10; // 0x40770a\n    while (v5 != 9) {\n        // 0x40770c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4076e0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x407730\n                break;\n            }\n        } else {\n            // 0x407712\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x407730\n                break;\n            }\n        }\n        // 0x407702\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x407730\n    int64_t v14; // bp-136, 0x407690\n    int64_t result = function_407230(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g104); // 0x40773f\n    return result;\n}\n"
        },
        {
            "funcName": "function_407750",
            "funcStartAddr": "407750",
            "funcEndAddr": "4077c4",
            "decompiledFuncCode": "int64_t function_407750(int64_t a1) {\n    // 0x407750\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4077b3\n    return fputs_unlocked(v1, g48);\n}\n"
        },
        {
            "funcName": "function_4077d0",
            "funcStartAddr": "4077d0",
            "funcEndAddr": "4077ea",
            "decompiledFuncCode": "int64_t function_4077d0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4077d4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4077e3\n        return (int64_t)mem;\n    }\n    // 0x4077e5\n    function_407a20(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4077f0",
            "funcStartAddr": "4077f0",
            "funcEndAddr": "407811",
            "decompiledFuncCode": "int64_t function_4077f0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4077f3\n    int64_t v2 = v1; // 0x4077f3\n    if (v2 < 0) {\n        // 0x40780b\n        function_407a20(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x407809\n        return function_4077d0(v2);\n    }\n    // 0x40780b\n    function_407a20(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407820",
            "funcStartAddr": "407820",
            "funcEndAddr": "407822",
            "decompiledFuncCode": "int64_t function_407820(void) {\n    // 0x407820\n    int64_t v1; // 0x407820\n    return function_4077d0(v1);\n}\n"
        },
        {
            "funcName": "function_407830",
            "funcStartAddr": "407830",
            "funcEndAddr": "407866",
            "decompiledFuncCode": "int64_t function_407830(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x407858\n        free(v1);\n        return (int32_t)&g104 ^ (int32_t)&g104;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x407841\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x407850\n        return (int64_t)mem;\n    }\n    // 0x407861\n    function_407a20(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407870",
            "funcStartAddr": "407870",
            "funcEndAddr": "407891",
            "decompiledFuncCode": "int64_t function_407870(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x407873\n    int64_t v2 = v1; // 0x407873\n    if (v2 < 0) {\n        // 0x40788b\n        function_407a20(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x407889\n        return function_407830(a1, v2);\n    }\n    // 0x40788b\n    function_407a20(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4078a0",
            "funcStartAddr": "4078a0",
            "funcEndAddr": "407926",
            "decompiledFuncCode": "int64_t function_4078a0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4078fb\n            function_407a20(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_407830(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4078e3\n    if (a2 == 0) {\n        // 0x407908\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4078e8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4078fb\n        function_407a20(a1);\n        // UNREACHABLE\n    }\n    // 0x4078ca\n    *(int64_t *)a2 = v2;\n    return function_407830(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_407930",
            "funcStartAddr": "407930",
            "funcEndAddr": "407980",
            "decompiledFuncCode": "int64_t function_407930(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    if (a1 != 0) {\n        if (a2 >= (int64_t *)0x5555555555555554) {\n            // 0x40797a\n            function_407a20(a1);\n            // UNREACHABLE\n        }\n        int64_t v2 = v1 + 1 + v1 / 2;\n        *a2 = v2;\n        return function_407830(a1, v2);\n    }\n    if (a2 == NULL) {\n        // 0x407965\n        *a2 = 128;\n        return function_407830(0, 128);\n    }\n    // 0x407978\n    if (a2 < NULL) {\n        // 0x40797a\n        function_407a20(a1);\n        // UNREACHABLE\n    }\n    // 0x407952\n    *a2 = v1;\n    return function_407830(a1, v1);\n}\n"
        },
        {
            "funcName": "function_407980",
            "funcStartAddr": "407980",
            "funcEndAddr": "407997",
            "decompiledFuncCode": "int64_t function_407980(int64_t a1, int64_t a2) {\n    // 0x407980\n    return (int64_t)memset((int64_t *)function_4077d0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4079a0",
            "funcStartAddr": "4079a0",
            "funcEndAddr": "4079ce",
            "decompiledFuncCode": "int64_t function_4079a0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4079a7\n    if ((int64_t)v1 < 0) {\n        // 0x4079c9\n        function_407a20(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4079c9\n        function_407a20(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4079ba\n    if (mem != NULL) {\n        // 0x4079c4\n        return (int64_t)mem;\n    }\n    // 0x4079c9\n    function_407a20(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4079d0",
            "funcStartAddr": "4079d0",
            "funcEndAddr": "4079f8",
            "decompiledFuncCode": "int64_t function_4079d0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4077d0(a2); // 0x4079df\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_407a00",
            "funcStartAddr": "407a00",
            "funcEndAddr": "407a13",
            "decompiledFuncCode": "int64_t function_407a00(int64_t str) {\n    // 0x407a00\n    return function_4079d0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_407a20",
            "funcStartAddr": "407a20",
            "funcEndAddr": "407a51",
            "decompiledFuncCode": "int64_t function_407a20(int64_t a1) {\n    // 0x407a20\n    error(g38, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407a60",
            "funcStartAddr": "407a60",
            "funcEndAddr": "407abd",
            "decompiledFuncCode": "int64_t function_407a60(void) {\n    // 0x407a60\n    int64_t v1; // 0x407a60\n    int64_t v2 = function_409150(v1, v1); // 0x407a66\n    if ((int32_t)v2 >= 0) {\n        // 0x407a71\n        return v2 & 0xffffffff;\n    }\n    // 0x407a80\n    if (ferror(g48) == 0) {\n        // 0x407a90\n        error(g38, *__errno_location(), dcgettext(NULL, \"cannot perform formatted output\", 5));\n    }\n    // 0x407a71\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_407ac0",
            "funcStartAddr": "407ac0",
            "funcEndAddr": "407b54",
            "decompiledFuncCode": "int64_t function_407ac0(char * a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x407ac0\n    int64_t v1; // 0x407ac0\n    if ((char)v1 != 0) {\n        // 0x407ae4\n        int128_t v2; // 0x407ac0\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    // 0x407b1b\n    int64_t v3; // bp-184, 0x407ac0\n    return &v3;\n}\n"
        },
        {
            "funcName": "function_407b60",
            "funcStartAddr": "407b60",
            "funcEndAddr": "407bb9",
            "decompiledFuncCode": "int64_t function_407b60(int64_t stream) {\n    // 0x407b60\n    int64_t v1; // 0x407b60\n    int64_t v2 = function_409090(stream, v1, v1); // 0x407b69\n    if ((int32_t)v2 >= 0) {\n        // 0x407b74\n        return v2 & 0xffffffff;\n    }\n    // 0x407b80\n    if (ferror((struct _IO_FILE *)stream) == 0) {\n        // 0x407b8c\n        error(g38, *__errno_location(), dcgettext(NULL, \"cannot perform formatted output\", 5));\n    }\n    // 0x407b74\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_407bc0",
            "funcStartAddr": "407bc0",
            "funcEndAddr": "407c4f",
            "decompiledFuncCode": "int64_t function_407bc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407bc0\n    int64_t v1; // 0x407bc0\n    if ((char)v1 != 0) {\n        // 0x407bdf\n        int128_t v2; // 0x407bc0\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    // 0x407c16\n    return function_407b60(a1);\n}\n"
        },
        {
            "funcName": "function_407c50",
            "funcStartAddr": "407c50",
            "funcEndAddr": "407cd1",
            "decompiledFuncCode": "int64_t function_407c50(int64_t a1, int64_t a2, int64_t a3, char (**a4)[11], int64_t a5) {\n    int64_t v1 = *(int64_t *)((8 * a1 + 0x7fffffff8 & 0x7fffffff8) + (int64_t)&g26); // 0x407c72\n    error(g38, 0, dcgettext(NULL, (char *)v1, 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407ce0",
            "funcStartAddr": "407ce0",
            "funcEndAddr": "408120",
            "decompiledFuncCode": "int64_t function_407ce0(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t * str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x407cee\n    if (v1 >= 37) {\n        // 0x4080fb\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g104;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x407d12\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x407d42\n    int64_t v4 = a1; // 0x407d47\n    char v5 = c; // 0x407d47\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x407d3c\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x407d38\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x407d49\n    if (v5 == 45) {\n        // 0x407d85\n        return 4;\n    }\n    // 0x407d4e\n    int64_t v7; // bp-64, 0x407ce0\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x407d0e\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x407d56\n    int64_t * v10 = (int64_t *)v8; // 0x407d5b\n    int64_t v11 = *v10; // 0x407d5b\n    char v12; // 0x407ce0\n    int64_t v13; // 0x407ce0\n    int64_t v14; // 0x407ce0\n    int64_t v15; // 0x407ce0\n    int64_t v16; // 0x407ce0\n    int64_t v17; // 0x407ce0\n    int64_t v18; // 0x407ce0\n    if (v11 == a1) {\n        // 0x407db8\n        if (c == 0 || str == NULL) {\n            // 0x407d85\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x407dd9\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x407d85\n            return 4;\n        }\n        goto lab_0x407de7;\n    } else {\n        int32_t v19 = *v2; // 0x407d66\n        int64_t v20 = 0; // 0x407d6c\n        if (v19 != 0) {\n            // 0x407da0\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x407d85\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x407d56\n        v16 = v21;\n        v13 = v20;\n        if (str == NULL) {\n            goto lab_0x407d82;\n        } else {\n            char c2 = *(char *)v11; // 0x407d75\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x407ee3\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x407de7;\n                } else {\n                    goto lab_0x407ef5;\n                }\n            } else {\n                goto lab_0x407d82;\n            }\n        }\n    }\n  lab_0x407de7:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x407def\n    int64_t v24 = 1; // 0x407def\n    int64_t v25; // 0x407ce0\n    int64_t v26; // 0x407ce0\n    int64_t v27; // 0x407ce0\n    int64_t v28; // 0x407ce0\n    int64_t v29; // 0x407ce0\n    int64_t v30; // 0x407ce0\n    int64_t v31; // 0x407ce0\n    int64_t v32; // 0x407ce0\n    int64_t v33; // 0x407ce0\n    int64_t v34; // 0x407ce0\n    int64_t v35; // 0x407ce0\n    int64_t v36; // 0x407ce0\n    int64_t v37; // 0x407ce0\n    int64_t v38; // 0x407ce0\n    int64_t v39; // 0x407ce0\n    int64_t v40; // 0x407ce0\n    int64_t v41; // 0x407ce0\n    int64_t v42; // 0x407ce0\n    int64_t v43; // 0x407ce0\n    int64_t v44; // 0x407ce0\n    if (v22 < 48) {\n        // 0x407df1\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x407e5a;\n        } else {\n            // 0x407e04\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x407e5a;\n            } else {\n                // 0x407e20\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x407e5a;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x408089\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x407e5a;\n                    }\n                    default: {\n                        // 0x407e35\n                        g111 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x407ffb;\n                            }\n                            case 70: {\n                                goto lab_0x407ef5;\n                            }\n                            case 71: {\n                                goto lab_0x408033;\n                            }\n                            case 72: {\n                                goto lab_0x407ef5;\n                            }\n                            case 73: {\n                                goto lab_0x407ef5;\n                            }\n                            case 74: {\n                                goto lab_0x407ef5;\n                            }\n                            case 75: {\n                                goto lab_0x407ebc;\n                            }\n                            case 76: {\n                                goto lab_0x407ef5;\n                            }\n                            case 77: {\n                                goto lab_0x407e7e;\n                            }\n                            case 78: {\n                                goto lab_0x407ef5;\n                            }\n                            case 79: {\n                                goto lab_0x407ef5;\n                            }\n                            case 80: {\n                                goto lab_0x407fc8;\n                            }\n                            case 81: {\n                                goto lab_0x407ef5;\n                            }\n                            case 82: {\n                                goto lab_0x407ef5;\n                            }\n                            case 83: {\n                                goto lab_0x407ef5;\n                            }\n                            case 84: {\n                                goto lab_0x407f98;\n                            }\n                            case 85: {\n                                goto lab_0x407ef5;\n                            }\n                            case 86: {\n                                goto lab_0x407ef5;\n                            }\n                            case 87: {\n                                goto lab_0x407ef5;\n                            }\n                            case 88: {\n                                goto lab_0x407ef5;\n                            }\n                            case 89: {\n                                goto lab_0x407f66;\n                            }\n                            case 90: {\n                                goto lab_0x407f2b;\n                            }\n                            case 91: {\n                                goto lab_0x407ef5;\n                            }\n                            case 92: {\n                                goto lab_0x407ef5;\n                            }\n                            case 93: {\n                                goto lab_0x407ef5;\n                            }\n                            case 94: {\n                                goto lab_0x407ef5;\n                            }\n                            case 95: {\n                                goto lab_0x407ef5;\n                            }\n                            case 96: {\n                                goto lab_0x407ef5;\n                            }\n                            case 97: {\n                                goto lab_0x407ef5;\n                            }\n                            case 98: {\n                                goto lab_0x407f0f;\n                            }\n                            case 99: {\n                                goto lab_0x407e98;\n                            }\n                            case 100: {\n                                goto lab_0x407ef5;\n                            }\n                            case 101: {\n                                goto lab_0x407ef5;\n                            }\n                            case 102: {\n                                goto lab_0x407ef5;\n                            }\n                            case 103: {\n                                goto lab_0x408033;\n                            }\n                            case 104: {\n                                goto lab_0x407ef5;\n                            }\n                            case 105: {\n                                goto lab_0x407ef5;\n                            }\n                            case 106: {\n                                goto lab_0x407ef5;\n                            }\n                            case 107: {\n                                goto lab_0x407ebc;\n                            }\n                            case 108: {\n                                goto lab_0x407ef5;\n                            }\n                            case 109: {\n                                goto lab_0x407e7e;\n                            }\n                            case 110: {\n                                goto lab_0x407ef5;\n                            }\n                            case 111: {\n                                goto lab_0x407ef5;\n                            }\n                            case 112: {\n                                goto lab_0x407ef5;\n                            }\n                            case 113: {\n                                goto lab_0x407ef5;\n                            }\n                            case 114: {\n                                goto lab_0x407ef5;\n                            }\n                            case 115: {\n                                goto lab_0x407ef5;\n                            }\n                            case 116: {\n                                goto lab_0x407f98;\n                            }\n                            default: {\n                                goto lab_0x407e5a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x407e5a;\n    }\n  lab_0x407d82:\n    // 0x407d82\n    *a4 = v16;\n    // 0x407d85\n    return v13 & 0xffffffff;\n  lab_0x407e5a:\n    // 0x407e5a\n    g98 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x407ce0\n    switch (v12) {\n        case 66: {\n            // 0x408054\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x407ec7;\n            } else {\n                // 0x408061\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x407e98;\n            }\n        }\n        case 69: {\n            goto lab_0x407ffb;\n        }\n        case 71: {\n            goto lab_0x408033;\n        }\n        case 75: {\n            goto lab_0x407ebc;\n        }\n        case 77: {\n            goto lab_0x407e7e;\n        }\n        case 80: {\n            goto lab_0x407fc8;\n        }\n        case 84: {\n            goto lab_0x407f98;\n        }\n        case 89: {\n            goto lab_0x407f66;\n        }\n        case 90: {\n            goto lab_0x407f2b;\n        }\n        case 98: {\n            goto lab_0x407f0f;\n        }\n        case 99: {\n            goto lab_0x407e98;\n        }\n        case 103: {\n            goto lab_0x408033;\n        }\n        case 107: {\n            goto lab_0x407ebc;\n        }\n        case 109: {\n            goto lab_0x407e7e;\n        }\n        case 116: {\n            goto lab_0x407f98;\n        }\n        case 119: {\n            // 0x407f00\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x407ec7;\n            } else {\n                // 0x407f05\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x407e98;\n            }\n        }\n        default: {\n            goto lab_0x407ef5;\n        }\n    }\n  lab_0x407ffb:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x408013\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x40801f\n    int64_t v51 = v48; // 0x408022\n    int64_t v52 = v37; // 0x408022\n    int64_t v53 = v49; // 0x408022\n    int32_t v54 = v50; // 0x408022\n    int64_t v55 = v49; // 0x408022\n    while (v50 != 0) {\n        // 0x408010\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x407f54;\n  lab_0x408033:\n    // 0x408033\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x40803e\n        int128_t v56; // 0x408039\n        uint128_t v57; // 0x408039\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x40803e\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x407ce0\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x408043\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x408048\n                v26 = v60;\n                int64_t v61; // 0x407ce0\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x407e98;\n  lab_0x407ebc:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x407ebf\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x407e98;\n    } else {\n        goto lab_0x407ec7;\n    }\n  lab_0x407e7e:;\n    int128_t v65 = v27; // 0x407e84\n    uint128_t v66 = v65 * (int128_t)v17; // 0x407e84\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x407ec7;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x407e89\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x407ec7;\n        } else {\n            // 0x407e8e\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x407e98;\n        }\n    }\n  lab_0x407fc8:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x407fdb\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x407fe7\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x407fea\n    int64_t v73 = v70; // 0x407fea\n    while (v71 != 0) {\n        // 0x407fd8\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x407f54;\n  lab_0x407f98:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x407fab\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x407fb7\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x407fba\n    int64_t v79 = v76; // 0x407fba\n    while (v77 != 0) {\n        // 0x407fa8\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x407f54;\n  lab_0x407f66:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x407f7b\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x407f87\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x407f8a\n    int64_t v85 = v82; // 0x407f8a\n    while (v83 != 0) {\n        // 0x407f78\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x407f54;\n  lab_0x407f2b:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x407f43\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x407f4f\n    int32_t v90 = v89; // 0x407f52\n    int64_t v91 = v88; // 0x407f52\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x407f40\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x407f54;\n  lab_0x407f0f:\n    // 0x407f0f\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x407ec7;\n    } else {\n        // 0x407f18\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x407e98;\n    }\n  lab_0x407e98:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x407e9d\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x407d82;\n  lab_0x407ef5:\n    // 0x407ef5\n    *a4 = v18;\n    // 0x407d85\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x407ec7:\n    // 0x407ec7\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x407e98;\n  lab_0x407f54:\n    // 0x407f54\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x407e98;\n}\n"
        },
        {
            "funcName": "function_408120",
            "funcStartAddr": "408120",
            "funcEndAddr": "40819b",
            "decompiledFuncCode": "int64_t function_408120(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x408127\n    if (fileno(stream) < 0) {\n        // 0x408187\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40813a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40816b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x408187\n            return fclose(stream);\n        }\n    }\n    // 0x40813c\n    if ((int32_t)function_4081a0(a1, v1) == 0) {\n        // 0x408187\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x408148\n    int32_t v3 = *v2; // 0x408150\n    int64_t result = fclose(stream); // 0x40815e\n    if (v3 != 0) {\n        // 0x408190\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x408160\n    return result;\n}\n"
        },
        {
            "funcName": "function_4081a0",
            "funcStartAddr": "4081a0",
            "funcEndAddr": "4081e0",
            "decompiledFuncCode": "int64_t function_4081a0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x4081ba\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x4081ba\n        return fflush(stream);\n    }\n    // 0x4081c8\n    function_4081e0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4081e0",
            "funcStartAddr": "4081e0",
            "funcEndAddr": "408237",
            "decompiledFuncCode": "int64_t function_4081e0(int64_t stream, int64_t offset, int64_t whence) {\n    // 0x4081e0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4081ea\n        return fseeko((struct _IO_FILE *)stream, (int32_t)offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), (int32_t)offset, (int32_t)whence); // 0x40821b\n    int64_t result = -1; // 0x408224\n    if (v1 != -1) {\n        // 0x408226\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x408232\n    return result;\n}\n"
        },
        {
            "funcName": "function_408240",
            "funcStartAddr": "408240",
            "funcEndAddr": "40831f",
            "decompiledFuncCode": "int64_t function_408240(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40824c\n    uint32_t v2 = *v1; // 0x40824c\n    int64_t v3 = a2 & 0xffffffff; // 0x408251\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x408254\n    uint64_t v5 = (int64_t)*v4; // 0x408254\n    int64_t v6; // 0x4082c2\n    if (v3 <= v5) {\n      lab_0x4082bc_2:\n        // 0x4082bc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x408242\n    int64_t v8 = v2; // 0x408240\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4082bc\n        goto lab_0x4082bc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x408278\n    int64_t v17; // 0x408286\n    int64_t * v18; // 0x4082a0\n    int64_t * v19; // 0x4082a3\n    int64_t v20; // 0x4082ae\n    int64_t v21; // 0x408286\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x408283\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x4082a0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4082b7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4082bc\n            goto lab_0x4082bc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4082bc\n            goto lab_0x4082bc_2;\n        }\n        // 0x408272\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4082fb\n    int64_t * v23 = (int64_t *)v22; // 0x408300\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x408303\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x408300\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x408317\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40826d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4082bc\n            goto lab_0x4082bc_2;\n        }\n        // 0x408272\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x408283\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x4082a0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4082b7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4082bc\n                goto lab_0x4082bc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4082bc\n                goto lab_0x4082bc_2;\n            }\n            // 0x408272\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4082e0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x408300\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x408317\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4082bc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408320",
            "funcStartAddr": "408320",
            "funcEndAddr": "40893c",
            "decompiledFuncCode": "int64_t function_408320(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40833f\n    int64_t v2 = *v1; // 0x40833f\n    char * str2 = (char *)v2; // 0x40834c\n    char c = *str2; // 0x40834c\n    int64_t v3 = v2; // 0x408378\n    int64_t v4 = 0; // 0x408320\n    int32_t v5; // 0x408320\n    int64_t v6; // 0x408320\n    int64_t v7; // 0x408320\n    int64_t v8; // 0x408320\n    int64_t v9; // 0x408320\n    int64_t v10; // 0x408320\n    int64_t v11; // 0x408320\n    int64_t v12; // 0x408320\n    int64_t v13; // 0x408320\n    int64_t str3; // 0x408320\n    int64_t v14; // 0x408320\n    int64_t v15; // 0x408320\n    int64_t v16; // 0x408320\n    int64_t v17; // 0x408320\n    int32_t v18; // 0x408320\n    int32_t v19; // 0x408320\n    int32_t v20; // 0x408320\n    int32_t v21; // 0x408320\n    int32_t v22; // 0x408320\n    int32_t v23; // 0x408320\n    int32_t v24; // 0x408320\n    int32_t v25; // 0x408320\n    int32_t v26; // 0x408320\n    int32_t v27; // 0x408320\n    int32_t v28; // 0x408320\n    int32_t v29; // 0x408320\n    int64_t nmemb; // 0x408320\n    int64_t v30; // 0x408320\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40837c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x408378\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x408388\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40838e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x408358\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4083bc\n                int64_t v34; // 0x408320\n                int64_t v35; // 0x408320\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4083c5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x408540;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4083d6\n                int64_t v37 = *(int64_t *)v36; // 0x4083da\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4083b0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4083c5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x408540;\n                        }\n                    }\n                    // 0x4083d6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x408426:\n                    // 0x408426\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x408480;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4085f0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x408480;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4085a0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40844a;\n                                } else {\n                                    // 0x4085ac\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40844a;\n                                    } else {\n                                        // 0x4085ba\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40844a;\n                                        } else {\n                                            goto lab_0x408480;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40844a;\n                            }\n                        }\n                    }\n                }\n              lab_0x408491:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x408666\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x408812\n                            flockfile(g51);\n                            int64_t v41 = *v1; // 0x408832\n                            __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40887f\n                            int64_t v43 = (int64_t)g51;\n                            int64_t v44 = v43; // 0x408899\n                            int64_t v45; // 0x40889b\n                            if (*(char *)v42 != 0) {\n                                // 0x40889b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g51;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x408893\n                            while (v17 + nmemb != v42) {\n                                // 0x408895\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40889b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g51;\n                                }\n                                // 0x408888\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4088c0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g51);\n                            v40 = *v1;\n                        } else {\n                            // 0x408674\n                            __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4087cf\n                        free((int64_t *)v17);\n                    }\n                    // 0x4086c9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4086e0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40858e\n                    return 63;\n                }\n                // 0x4084b0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x408534\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x408540:;\n                    int32_t * v49 = (int32_t *)a7; // 0x408550\n                    uint32_t v50 = *v49; // 0x408550\n                    int64_t v51 = v50; // 0x408550\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40855a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x408563\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40878f\n                                __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40873a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40858e\n                            return 63;\n                        }\n                        // 0x4085d8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4088ef\n                                    __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4087ed\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x408800\n                                // 0x40858e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4086fe\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x408712\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40857b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40857e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x408582\n                    int64_t result = v59; // 0x408588\n                    if (v58 != 0) {\n                        // 0x40858a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40858e\n                    return result;\n                }\n            } else {\n                // 0x40838e\n                v5 = v32;\n            }\n            // break -> 0x4084b5\n            break;\n        }\n    }\n    // 0x4084b5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x4084cd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4084d7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40858e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x408619\n        __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x408506\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x408516\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x408480:\n    // 0x408480\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x408480\n    int64_t v63 = *(int64_t *)v62; // 0x408484\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x408491\n        goto lab_0x408491;\n    }\n    goto lab_0x408426;\n  lab_0x40844a:\n    // 0x40844a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x408320\n    int32_t v65; // 0x408320\n    int32_t v66; // 0x408320\n    if (v27 != 0) {\n        goto lab_0x408480;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x408600\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x408480;\n            } else {\n                goto lab_0x408471;\n            }\n        } else {\n            // 0x408465\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40875c\n                int64_t v67 = (int64_t)mem; // 0x40875c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x408480;\n                } else {\n                    // 0x40876f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x408471;\n                }\n            } else {\n                goto lab_0x408471;\n            }\n        }\n    }\n  lab_0x408471:\n    // 0x408471\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x408480;\n}\n"
        },
        {
            "funcName": "function_408940",
            "funcStartAddr": "408940",
            "funcEndAddr": "408f06",
            "decompiledFuncCode": "int64_t function_408940(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x408961\n    if (v3 < 1) {\n        // 0x408b1e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40895d\n    int32_t v5 = *(int32_t *)a7; // 0x408969\n    uint64_t v6 = a1 & 0xffffffff; // 0x40896b\n    int64_t v7 = v2; // 0x408970\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x408973\n    *v8 = 0;\n    int64_t v9; // 0x408940\n    int64_t v10; // 0x408940\n    int64_t v11; // 0x408940\n    int64_t v12; // 0x408940\n    int64_t str; // 0x408940\n    int64_t v13; // 0x408940\n    int64_t v14; // 0x408940\n    int64_t v15; // 0x408940\n    int64_t v16; // 0x408940\n    int64_t v17; // 0x408940\n    int32_t v18; // 0x408940\n    char v19; // 0x408940\n    if (v5 == 0) {\n        // 0x408b58\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40898a;\n    } else {\n        // 0x408983\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4089d0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4089d3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x408a98;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4089e6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4089f6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x408aac;\n                } else {\n                    goto lab_0x408a08;\n                }\n            }\n        } else {\n            goto lab_0x40898a;\n        }\n    }\n  lab_0x40898a:\n    // 0x40898a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x408990\n    *v24 = 0;\n    int64_t v25; // 0x408940\n    int64_t v26; // 0x408940\n    int64_t v27; // 0x408940\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x408a80\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x408a8d;\n        }\n        case 43: {\n            // 0x408d90\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x408a8d;\n        }\n        default: {\n            // 0x4089ac\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x408d0f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x408e28\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x408a8d;\n                } else {\n                    // 0x408d1d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4089ba;\n                }\n            } else {\n                goto lab_0x4089ba;\n            }\n        }\n    }\n  lab_0x408a98:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x408a9f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x408a08;\n    } else {\n        goto lab_0x408aac;\n    }\n  lab_0x4089ba:\n    // 0x4089ba\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x408a8d;\n  lab_0x408a8d:\n    // 0x408a8d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x408a98;\n  lab_0x408a08:;\n    uint32_t v30 = *(int32_t *)a7; // 0x408a08\n    int64_t v31 = v30; // 0x408a08\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x408a0a\n    if ((int64_t)*v32 > v31) {\n        // 0x408a0f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x408a12\n    if (*v33 > v30) {\n        // 0x408a17\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x408a1a\n    int64_t v35 = v31; // 0x408a1e\n    int64_t v36 = v15; // 0x408a1e\n    int64_t v37; // 0x408940\n    int64_t v38; // 0x408940\n    int64_t v39; // 0x408940\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x408b88\n        int64_t v41 = v40; // 0x408b88\n        v2 = v41;\n        int64_t v42; // 0x408940\n        if (*v33 == v40) {\n            // 0x408d70\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x408d78\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x408b94\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x408b98\n                function_408240(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x408ba8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x408bb1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x408bba\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x408bd1\n            int64_t v47 = v45 & 0xffffffff; // 0x408bd5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x408bde\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x408be4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x408be6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x408bc0\n            int64_t v49 = v48 & 0xffffffff; // 0x408bc0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x408bd1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x408bde\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x408be4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x408be6;\n                    }\n                }\n                // 0x408bc0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x408d88\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x408be6;\n    } else {\n        goto lab_0x408a24;\n    }\n  lab_0x408aac:\n    // 0x408aac\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x408aaf\n    int64_t v51 = v12; // 0x408aaf\n    int64_t v52 = v14; // 0x408aaf\n    if (*(char *)v10 == 0) {\n        goto lab_0x408a08;\n    } else {\n        goto lab_0x408ab5;\n    }\n  lab_0x408a24:;\n    int32_t v53 = v35; // 0x408a24\n    int64_t v54; // 0x408940\n    int64_t v55; // 0x408940\n    int64_t v56; // 0x408940\n    int64_t v57; // 0x408940\n    int64_t v58; // 0x408940\n    int64_t v59; // 0x408940\n    char * v60; // 0x408940\n    int64_t v61; // 0x408940\n    int64_t v62; // 0x408a39\n    int64_t v63; // 0x408940\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x408b73\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x408b76;\n    } else {\n        // 0x408a2c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x408940\n        int64_t v66 = v65 ? -1 : 1; // 0x408a40\n        int64_t v67 = (int64_t)\"--\"; // 0x408940\n        int64_t v68 = v62; // 0x408940\n        int64_t v69 = 3; // 0x408a40\n        unsigned char v70 = *(char *)v68; // 0x408a40\n        char v71 = *(char *)v67; // 0x408a40\n        char v72 = v71; // 0x408a40\n        bool v73 = false; // 0x408a40\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x408b30\n            if (*(char *)v62 == 45) {\n                // 0x408bf0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x408bf0\n                if (c == 0) {\n                    goto lab_0x408b3a;\n                } else {\n                    // 0x408bfd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x408c80;\n                    } else {\n                        if (c == 45) {\n                            // 0x408e63\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x408cd5;\n                        } else {\n                            // 0x408c0e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x408c80;\n                            } else {\n                                // 0x408c13\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x408c34;\n                                } else {\n                                    // 0x408c1a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x408c80;\n                                    } else {\n                                        goto lab_0x408c34;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x408b3a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x408a50\n            v2 = v75;\n            int32_t v76 = *v32; // 0x408a53\n            int64_t v77 = v35 + 1; // 0x408a56\n            int32_t v78 = v77; // 0x408a59\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x408dc0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x408a67\n                    function_408240(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x408a75\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x408b76;\n        }\n    }\n  lab_0x408ab5:;\n    // 0x408ab5\n    int64_t v79; // bp-104, 0x408940\n    int64_t v80 = &v79; // 0x40894a\n    int64_t v81 = v50 + 1; // 0x408ab5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x408abc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x408ac1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x408ac5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x408ac9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x408ad1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x408ad6\n    int32_t c2 = v84; // 0x408ad6\n    char * found_char_pos = strchr(str2, c2); // 0x408ad6\n    int64_t v87 = *v82; // 0x408adb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x408ae5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x408af0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x408de0\n            __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x408dad\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x408b1e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x408ad6\n    char v91 = *(char *)(v90 + 1); // 0x408b0b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x408ac5\n        if (v91 != 58) {\n            // 0x408b1e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x408d34\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x408e38\n                *v8 = 0;\n            } else {\n                // 0x408e1c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x408d5e\n            *v83 = 0;\n            // 0x408b1e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x408d3e\n        if (v93 != 0) {\n            // 0x408dd0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x408d5e\n            *v83 = 0;\n            // 0x408b1e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x408d51\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x408d5e\n            *v83 = 0;\n            // 0x408b1e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x408e9a\n            __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x408e4a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x408e51\n        // 0x408d5e\n        *v83 = 0;\n        // 0x408b1e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x408ca9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x408cab\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x408ed0\n                __fprintf_chk(g51, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x408e81\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x408e88\n            // 0x408b1e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x408cb6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x408cba\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x408cd5;\n  lab_0x408be6:\n    // 0x408be6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x408a24;\n  lab_0x408cd5:;\n    int64_t v99 = function_408320(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x408cf3\n    // 0x408b1e\n    return v99 & 0xffffffff;\n  lab_0x408b76:;\n    int32_t v100 = v55; // 0x408b76\n    if (v100 != (int32_t)v59) {\n        // 0x408b7a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x408b1e\n    return 0xffffffff;\n  lab_0x408b3a:\n    // 0x408b3a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x408b41\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x408b1e\n    return v99 & 0xffffffff;\n  lab_0x408c80:\n    // 0x408c80\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x408ab5;\n  lab_0x408c34:\n    // 0x408c34\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_408320(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)&g24); // 0x408c5a\n    if ((int32_t)v101 != -1) {\n        // 0x408b1e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x408c6f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x408c80;\n}\n"
        },
        {
            "funcName": "function_408f10",
            "funcStartAddr": "408f10",
            "funcEndAddr": "408f66",
            "decompiledFuncCode": "int64_t function_408f10(int64_t a1) {\n    // 0x408f10\n    *(int32_t *)&g92 = g46;\n    *(int32_t *)&g93 = g45;\n    int64_t v1; // 0x408f10\n    int64_t result = function_408940(v1, v1, v1, v1, v1, v1, &g92, a1 & 0xffffffff); // 0x408f36\n    g46 = *(int32_t *)&g92;\n    g97 = (char *)g95;\n    *(int32_t *)&g44 = g94;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408f70",
            "funcStartAddr": "408f70",
            "funcEndAddr": "408f88",
            "decompiledFuncCode": "int64_t function_408f70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408f70\n    return function_408f10(1);\n}\n"
        },
        {
            "funcName": "function_408f90",
            "funcStartAddr": "408f90",
            "funcEndAddr": "408fa3",
            "decompiledFuncCode": "int64_t function_408f90(int64_t a1, int64_t a2, char * a3, char (**a4)[11], int64_t * a5, int64_t a6) {\n    // 0x408f90\n    return function_408f10(0);\n}\n"
        },
        {
            "funcName": "function_408fb0",
            "funcStartAddr": "408fb0",
            "funcEndAddr": "408fc5",
            "decompiledFuncCode": "int64_t function_408fb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408fb0\n    return function_408940(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_408fd0",
            "funcStartAddr": "408fd0",
            "funcEndAddr": "408fe6",
            "decompiledFuncCode": "int64_t function_408fd0(void) {\n    // 0x408fd0\n    return function_408f10(0);\n}\n"
        },
        {
            "funcName": "function_408ff0",
            "funcStartAddr": "408ff0",
            "funcEndAddr": "409008",
            "decompiledFuncCode": "int64_t function_408ff0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408ff0\n    return function_408940(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_409010",
            "funcStartAddr": "409010",
            "funcEndAddr": "40908a",
            "decompiledFuncCode": "int64_t function_409010(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40901b\n    int64_t v2 = (int64_t)&g27; // 0x40901b\n    int32_t * pwc; // 0x409010\n    int64_t v3; // 0x409010\n    int64_t n; // 0x409010\n    if (a2 == 0) {\n        goto lab_0x409062;\n    } else {\n        // 0x40901d\n        if (a3 == 0) {\n            // 0x409048\n            return -2;\n        }\n        // 0x409029\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x409062;\n        } else {\n            goto lab_0x409034;\n        }\n    }\n  lab_0x409062:\n    // 0x409062\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x409010\n    pwc = (int32_t *)&v4;\n    goto lab_0x409034;\n  lab_0x409034:;\n    char * wstr = (char *)v3; // 0x40903a\n    int64_t ps; // 0x409010\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40903a\n    int64_t result = v5; // 0x40903a\n    if (v5 < 0xfffffffe) {\n        // 0x409048\n        return result;\n    }\n    int64_t result2 = result; // 0x409079\n    if ((char)function_4091d0(0, v3) == 0) {\n        // 0x40907b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x409048\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409090",
            "funcStartAddr": "409090",
            "funcEndAddr": "40914d",
            "decompiledFuncCode": "int64_t function_409090(int64_t stream, int64_t a2, int64_t a3) {\n    int32_t v1 = 2000; // bp-2048, 0x4090b0\n    int64_t v2; // bp-2040, 0x409090\n    int64_t v3; // 0x409090\n    int64_t v4 = function_4097b0(&v2, (int64_t *)&v1, a2, a3, v3, v3, 2000, (int64_t)&g104); // 0x4090bc\n    if (v4 == 0) {\n        // 0x40913e\n        function_4097a0(stream);\n        // 0x4090fc\n        return 0xffffffff;\n    }\n    int32_t nmemb = v1; // 0x4090c1\n    int64_t * data = (int64_t *)v4; // 0x4090dc\n    if (nmemb > fwrite(data, 1, nmemb, (struct _IO_FILE *)stream)) {\n        // 0x409110\n        if (v4 != (int64_t)&v2) {\n            int32_t * v5 = __errno_location(); // 0x40911a\n            free(data);\n        }\n        // 0x4090fc\n        return 0xffffffff;\n    }\n    if (v4 != (int64_t)&v2) {\n        // 0x4090eb\n        free(data);\n    }\n    // 0x4090f3\n    if (nmemb > -1) {\n        // 0x4090fc\n        return (int64_t)nmemb & 0xffffffff;\n    }\n    // 0x409133\n    *__errno_location() = 75;\n    // 0x40913e\n    function_4097a0(stream);\n    // 0x4090fc\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_409150",
            "funcStartAddr": "409150",
            "funcEndAddr": "409162",
            "decompiledFuncCode": "int64_t function_409150(int64_t a1, int64_t a2) {\n    // 0x409150\n    return function_409090((int64_t)g48, a1, a2);\n}\n"
        },
        {
            "funcName": "function_409170",
            "funcStartAddr": "409170",
            "funcEndAddr": "4091cd",
            "decompiledFuncCode": "int64_t function_409170(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x409177\n    int64_t v2; // 0x409170\n    int64_t result = function_408120(a1, v2); // 0x409188\n    if ((v2 & 32) != 0) {\n        // 0x4091b0\n        if ((int32_t)result == 0) {\n            // 0x4091b4\n            *__errno_location() = 0;\n        }\n        // 0x4091aa\n        return 0xffffffff;\n    }\n    // 0x409191\n    if ((int32_t)result == 0) {\n        // 0x4091aa\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x409198\n    if (v1 == 0) {\n        // 0x40919a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4091aa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4091d0",
            "funcStartAddr": "4091d0",
            "funcEndAddr": "40922e",
            "decompiledFuncCode": "int64_t function_4091d0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4091d6\n    if (locale == NULL) {\n        // 0x409203\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4091d6\n    bool v2; // 0x4091d0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g28; // 0x4091d0\n    int64_t v5 = v1; // 0x4091d0\n    int64_t v6 = 2; // 0x4091f5\n    unsigned char v7 = *(char *)v5; // 0x4091f5\n    char v8 = *(char *)v4; // 0x4091f5\n    char v9 = v8; // 0x4091f5\n    bool v10 = false; // 0x4091f5\n    while (v7 == v8) {\n        // 0x4091e8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x409201\n    int64_t v13 = v1; // 0x409201\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x409203\n        return 0;\n    }\n    int64_t v14 = 6; // 0x409201\n    unsigned char v15 = *(char *)v13; // 0x40921d\n    char v16 = *(char *)v12; // 0x40921d\n    char v17 = v16; // 0x40921d\n    bool v18 = false; // 0x40921d\n    while (v15 == v16) {\n        // 0x409210\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_409230",
            "funcStartAddr": "409230",
            "funcEndAddr": "409792",
            "decompiledFuncCode": "int64_t function_409230(void) {\n    char * v1 = nl_langinfo(14); // 0x409246\n    char * v2 = g96; // 0x40924b\n    char * v3; // 0x409230\n    int64_t v4; // 0x409230\n    int64_t v5; // 0x409230\n    int64_t v6; // 0x409230\n    int64_t v7; // 0x409230\n    int32_t size; // 0x409230\n    int32_t size2; // 0x409230\n    int32_t len; // 0x409302\n    int64_t v8; // 0x409302\n    char * env_val; // 0x4092ed\n    if (v2 == NULL) {\n        // 0x4092e8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x409355;\n        } else {\n            // 0x4092fa\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x409355;\n            } else {\n                // 0x4092ff\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4092ed\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x409785\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x409355;\n                    } else {\n                        // 0x4096f9\n                        size2 = len + 14;\n                        goto lab_0x40931b;\n                    }\n                } else {\n                    goto lab_0x40931b;\n                }\n            }\n        }\n    } else {\n        // 0x409230\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40926a;\n    }\n  lab_0x40959c:;\n    // 0x40959c\n    struct _IO_FILE * stream; // 0x4093db\n    int32_t v10 = __uflow(stream); // 0x40959f\n    int64_t v11; // 0x409230\n    int64_t v12 = v11; // 0x4095a9\n    int64_t v13; // 0x409230\n    int64_t v14 = v13; // 0x4095a9\n    int32_t v15 = v10; // 0x4095a9\n    int64_t v16; // 0x409230\n    int64_t v17 = v16; // 0x4095a9\n    int64_t v18 = v11; // 0x4095a9\n    int64_t v19 = v13; // 0x4095a9\n    int64_t v20 = v16; // 0x4095a9\n    if (v10 == -1) {\n        // break -> 0x4095af\n        goto lab_0x4095af;\n    }\n    goto lab_0x409429;\n  lab_0x40941e:;\n    // 0x40941e\n    int64_t v90; // 0x409230\n    int64_t * v32; // 0x409410\n    *v32 = v90 + 1;\n    int64_t v89; // 0x409230\n    v12 = v89;\n    int64_t v91; // 0x409230\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x409230\n    v17 = v92;\n    goto lab_0x409429;\n  lab_0x409429:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x409230\n    int32_t v25; // bp-120, 0x409230\n    int32_t v26; // bp-184, 0x409230\n    int64_t v27; // 0x4093db\n    int64_t v28; // 0x4093f8\n    int64_t v29; // 0x4093fd\n    int64_t * v30; // 0x409414\n    switch (c) {\n        case 32: {\n            goto lab_0x409410;\n        }\n        case 10: {\n            goto lab_0x409410;\n        }\n        case 9: {\n            goto lab_0x409410;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x409601\n            int32_t v33; // 0x409230\n            char v34; // 0x409230\n            int32_t v35; // 0x40960e\n            if (v31 < *v30) {\n                // 0x4095e0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40960b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x409601\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4095e0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40960b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4095f0\n                v36 = v33;\n            }\n            // 0x4096df\n            if (v36 == -1) {\n                // break -> 0x4095af\n                break;\n            }\n            goto lab_0x409410;\n        }\n        default: {\n            // 0x40943f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4095af\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x409468\n            int64_t v39 = v37 + 4; // 0x40946a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x409476\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x409478\n            while (v41 == 0) {\n                // 0x409468\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x409496\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4094a2\n            int64_t v45 = v43 + 4; // 0x4094a4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4094b0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4094b2\n            while (v47 == 0) {\n                // 0x4094a2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40949f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4094c8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4094d8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4094dc\n            int64_t v52 = v51 + v48; // 0x4094e5\n            int64_t * mem; // 0x409230\n            int64_t v53; // 0x409230\n            int64_t v54; // 0x409230\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40961b\n                int64_t v56 = v55 + 3; // 0x409627\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x409501\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x409510\n            if (mem == NULL) {\n                // 0x40973c\n                free((int64_t *)v21);\n                function_408120(v27, v53);\n                v24 = (int64_t)&g27;\n                goto lab_0x4093b4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x409528\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x409532\n            uint32_t v62 = (int32_t)v59; // 0x409535\n            int64_t v63; // 0x409230\n            if (v62 >= 8) {\n                // 0x409644\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40965e\n                int64_t v66 = v61 - v65; // 0x409662\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40966d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40967e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40967e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40967b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40970f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x409547\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40954b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40955b\n            int64_t v74 = v60 - 1; // 0x40955f\n            uint32_t v75 = (int32_t)v73; // 0x409564\n            int64_t v76; // 0x409230\n            if (v75 >= 8) {\n                // 0x409692\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40969c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4096ac\n                int64_t v80 = v74 - v79; // 0x4096b0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4096bb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4096cb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4096c9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x409726\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40972e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x409576\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40957a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x409773\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40958e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40941e;\n            } else {\n                goto lab_0x40959c;\n            }\n        }\n    }\n  lab_0x409410:;\n    int64_t v93 = v23; // 0x409230\n    int64_t v94 = v22; // 0x409230\n    int64_t v95 = v21; // 0x409230\n    goto lab_0x409410_2;\n  lab_0x409355:;\n    int64_t * mem3 = malloc(size); // 0x409355\n    int64_t v97 = (int64_t)&g27; // 0x409360\n    int64_t v98; // 0x409230\n    int64_t path; // 0x409230\n    if (mem3 == NULL) {\n        goto lab_0x409332;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x409355\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x409376;\n    }\n  lab_0x40926a:;\n    int64_t str = v1 == NULL ? (int64_t)&g27 : (int64_t)v1; // 0x40925d\n    char v100 = *v3; // 0x40926a\n    int64_t v101; // 0x409230\n    if (v100 == 0) {\n        // 0x4092c4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x409230\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x409230\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4092b0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4092b7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x409280\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40928d\n        char v107 = *(char *)v106; // 0x409292\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4092c4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40929b\n    v104 = v103 + 1;\n  lab_0x4092b7:\n    // 0x4092c4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x409332:;\n    char * v108 = (char *)v97;\n    g96 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40926a;\n  lab_0x409376:;\n    int64_t v109 = v98 + path; // 0x409376\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4093a2\n    v24 = (int64_t)&g27;\n    if (fd >= 0) {\n        // 0x4093d1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x409702\n            close(fd);\n            v24 = (int64_t)&g27;\n        } else {\n            // 0x4093f5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x409410_2:;\n                uint64_t v96 = *v32; // 0x409410\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40959c;\n                } else {\n                    goto lab_0x40941e;\n                }\n            }\n          lab_0x4095af:\n            // 0x4095af\n            function_408120(v27, v19);\n            v24 = (int64_t)&g27;\n            if (v18 != 0) {\n                // 0x4095ce\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4093b4;\n  lab_0x40931b:;\n    int64_t * mem4 = malloc(size2); // 0x40931b\n    v97 = (int64_t)&g27;\n    if (mem4 != NULL) {\n        // 0x4093c1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x409376;\n    } else {\n        goto lab_0x409332;\n    }\n  lab_0x4093b4:\n    // 0x4093b4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x409332;\n}\n"
        },
        {
            "funcName": "function_4097a0",
            "funcStartAddr": "4097a0",
            "funcEndAddr": "4097a4",
            "decompiledFuncCode": "int64_t function_4097a0(int64_t a1) {\n    // 0x4097a0\n    int64_t result; // 0x4097a0\n    *(int32_t *)a1 = (int32_t)result | 32;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4097b0",
            "funcStartAddr": "4097b0",
            "funcEndAddr": "40b2c9",
            "decompiledFuncCode": "int64_t function_4097b0(int64_t * a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x4097b0\n    int64_t v1; // bp-1416, 0x4097b0\n    int64_t v2; // bp-1656, 0x4097b0\n    if ((int32_t)function_40b4f0(a3, &v1, &v2) < 0) {\n        // 0x409e20\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x4097bb\n    int64_t v4; // bp-1384, 0x4097b0\n    int64_t v5; // bp-1640, 0x4097b0\n    int64_t v6; // 0x4097b0\n    if ((int32_t)function_40b2d0(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x40a707\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x40a723\n            free((int64_t *)v6);\n        }\n        // 0x40a728\n        *__errno_location() = 22;\n        // 0x409e20\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x40981b\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x409823\n    uint64_t v9 = v8 + v6; // 0x409827\n    int64_t v10; // 0x4097b0\n    char * v11; // 0x4097b0\n    int64_t v12; // 0x4097b0\n    if (v9 < v8) {\n        // 0x409ed0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x409dd9;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x409ed0\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x409dd9;\n        } else {\n            uint64_t size = v9 + 6; // 0x409837\n            if (size < 4000) {\n                // 0x409980\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x4097b0\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x409874;\n            } else {\n                if (size == -1) {\n                    // 0x409ed0\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x409dd9;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x409858\n                    if (mem == NULL) {\n                        // 0x409ed0\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x409dd9;\n                    } else {\n                        // 0x40986d\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x409874;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x409da0_2:;\n    // 0x409da0\n    int64_t v14; // 0x4097b0\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x409da8\n    int64_t v17 = v16; // 0x409db6\n    int64_t v18 = v16; // 0x409db6\n    int64_t v19 = v15; // 0x409db6\n    int64_t v20; // 0x4097b0\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x409fc8;\n    } else {\n        goto lab_0x409dc1;\n    }\n  lab_0x409dd9:\n    // 0x409dd9\n    if (v6 != (int64_t)&v4) {\n        // 0x409df0\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x409e0c\n        free((int64_t *)v6);\n    }\n    // 0x409e11\n    *(int32_t *)v10 = 12;\n    // 0x409e20\n    return 0;\n  lab_0x409874:\n    // 0x409874\n    v20 = (int64_t)a1;\n    int64_t v21 = a1 == NULL ? 0 : v3;\n    int64_t * v22 = (int64_t *)v6; // 0x4098ad\n    int64_t v23 = *v22; // 0x4098ad\n    int64_t v24 = 0; // 0x4098b3\n    int64_t v25 = v20; // 0x4098b3\n    int64_t v26 = v21; // 0x4098b3\n    int64_t v27 = 0; // 0x4098b3\n    int64_t v28; // 0x4097b0\n    int64_t v29; // 0x4097b0\n    int64_t v30; // 0x4097b0\n    int64_t v31; // 0x4097b0\n    int64_t v32; // 0x4097b0\n    int64_t v33; // 0x4097b0\n    int64_t v34; // 0x4097b0\n    if (v23 == a3) {\n        goto lab_0x409ec3;\n    } else {\n        int64_t v35 = v23 - a3; // 0x4098b9\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x4098cb;\n    }\n  lab_0x409ec3:;\n    int64_t v36 = v24; // 0x409ec6\n    float80_t v37; // 0x4097b0\n    float80_t v38 = v37; // 0x409ec6\n    float80_t v39; // 0x4097b0\n    float80_t v40 = v39; // 0x409ec6\n    int64_t v41 = v25; // 0x409ec6\n    int64_t v42 = v26; // 0x409ec6\n    int64_t v43 = v27; // 0x409ec6\n    int64_t v44; // 0x4097b0\n    int64_t v45 = v44; // 0x409ec6\n    goto lab_0x409a28;\n  lab_0x409a28:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x4097b0\n    int64_t v51; // 0x4097b0\n    int64_t v52; // 0x4097b0\n    int64_t v53; // 0x4097b0\n    int64_t v54; // 0x4097b0\n    int64_t v55; // 0x4097b0\n    int64_t v56; // 0x4097b0\n    int64_t v57; // 0x4097b0\n    int64_t dest_mem2; // 0x4097b0\n    int64_t dest_mem3; // 0x4097b0\n    int64_t v58; // 0x4097b0\n    float80_t v59; // 0x4097b0\n    float80_t v60; // 0x4097b0\n    float80_t v61; // 0x4097b0\n    float80_t v62; // 0x4097b0\n    float80_t v63; // 0x4097b0\n    uint64_t v64; // 0x40ab56\n    char * v65; // 0x409a3c\n    char v66; // 0x409a3c\n    int64_t v67; // 0x409a64\n    uint32_t v68; // 0x409a68\n    int64_t v69; // 0x409e45\n    char v70; // 0x4097b0\n    if (v1 == v49) {\n        // 0x40ab50\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x40b2ba\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x40abb2;\n            } else {\n                goto lab_0x409da0_2;\n            }\n        } else {\n            // 0x40ab60\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x40abb2;\n            } else {\n                if (v47 != 0) {\n                    // 0x40b17d\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x409da0_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x40b183\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x40ab7e;\n                        } else {\n                            goto lab_0x40b18f;\n                        }\n                    }\n                } else {\n                    // 0x40ab6e\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x40ab7e;\n                    } else {\n                        goto lab_0x40b18f;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x409a3c\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x409a41\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x40a4dc\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x40a610\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x409da0_2;\n                } else {\n                    goto lab_0x409ea2;\n                }\n            } else {\n                // 0x409e52\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x409ea2;\n                } else {\n                    if (v47 != 0) {\n                        // 0x40a740\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x409da0_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x40a746\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x409e70;\n                            } else {\n                                goto lab_0x40a752;\n                            }\n                        }\n                    } else {\n                        // 0x409e60\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x409e70;\n                        } else {\n                            goto lab_0x40a752;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x40a4dc\n                abort();\n                // UNREACHABLE\n            }\n            // 0x409a59\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g99 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x40a3d0\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x409ea7;\n                }\n                case 19: {\n                    // 0x40a3c0\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x409ea7;\n                }\n                case 20: {\n                    // 0x40a3a8\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x409ea7;\n                }\n                case 21: {\n                    goto lab_0x409f90;\n                }\n                case 22: {\n                    goto lab_0x409f90;\n                }\n                default: {\n                    // 0x409a7a\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x409f20\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x409f3d;\n                        } else {\n                            // 0x409f27\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x409ab0;\n                            } else {\n                                goto lab_0x409f3d;\n                            }\n                        }\n                    } else {\n                        goto lab_0x409ab0;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4098cb:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x4097b0\n    float80_t v77 = v76;\n    float80_t v78; // 0x4097b0\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x4097b0\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x4098ce\n    int64_t v89 = v85; // 0x4098ce\n    int64_t v90 = v84; // 0x4098ce\n    float80_t v91 = v79; // 0x4098ce\n    float80_t v92 = v77; // 0x4098ce\n    int64_t v93 = v75; // 0x4098ce\n    int64_t v94 = v80; // 0x4098ce\n    int64_t v95 = v81; // 0x4098ce\n    int64_t v96 = v82; // 0x4098ce\n    int64_t v97 = v87; // 0x4098ce\n    int64_t v98; // 0x4097b0\n    int64_t v99; // 0x4097b0\n    int64_t v100; // 0x4097b0\n    int64_t v101; // 0x4097b0\n    int64_t v102; // 0x4097b0\n    if (v82 >= v87) {\n        goto lab_0x409a19;\n    } else {\n        if (v82 != 0) {\n            // 0x4099b0\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x409da0_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x4099b6\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x4099cb;\n                } else {\n                    goto lab_0x4099be;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x4098f4\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x4099de;\n                } else {\n                    goto lab_0x409900;\n                }\n            } else {\n                goto lab_0x4099be;\n            }\n        }\n    }\n  lab_0x409a19:\n    // 0x409a19\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x409a28;\n  lab_0x40abb2:\n    // 0x40abb2\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x40abba\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x40abcb\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x40abd7\n    if (v12 != 0) {\n        // 0x40abe3\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x40ac02\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40ac1e\n        free((int64_t *)v6);\n    }\n    // 0x40ac23\n    *a2 = v46;\n    // 0x409e20\n    return result;\n  lab_0x409f90:\n    // 0x409f90\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x409ea7;\n  lab_0x4099be:\n    // 0x4099be\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x409da0_2;\n    } else {\n        goto lab_0x4099cb;\n    }\n  lab_0x409fc8:\n    // 0x409fc8\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x409dc1;\n  lab_0x409dc1:\n    if (v12 == 0) {\n        // 0x409ed0\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x409dd9;\n    } else {\n        // 0x409dd1\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x409dd9;\n    }\n  lab_0x409ea2:\n    // 0x409ea2\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x409ea7;\n  lab_0x409ab0:;\n    int64_t v273 = (int64_t)v11; // 0x409ab0\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x409ab7\n    int64_t v275 = v273 + 1; // 0x409abb\n    *v11 = 37;\n    int64_t v276 = v275; // 0x409ac4\n    if (v274 % 2 != 0) {\n        // 0x409ac6\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x409ab7\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x409ad7\n    if ((v277 & 2) != 0) {\n        // 0x409ad9\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x409ae3\n    if ((v277 & 4) != 0) {\n        // 0x409ae5\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x409aef\n    if ((v277 & 8) != 0) {\n        // 0x409af1\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x409afb\n    if ((v277 & 16) != 0) {\n        // 0x409afd\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x409b07\n    if ((v277 & 64) != 0) {\n        // 0x409b09\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x409b13\n    if ((v277 & 32) != 0) {\n        // 0x409b15\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x409b1d\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x409b21\n    int64_t v293 = v290; // 0x409b28\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x409b37\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x409b5a\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x409b5e\n    int64_t v298 = v295; // 0x409b65\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x409b74\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x409a6a\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x409ba0\n    int64_t v272; // 0x4097b0\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x409ba9\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x409fa8;\n        } else {\n            if (v301 == 12) {\n                // 0x40a768\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x409bd0;\n            } else {\n                // 0x409bc0\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x409fa0\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x409fa8;\n                } else {\n                    goto lab_0x409bd0;\n                }\n            }\n        }\n    } else {\n        goto lab_0x409bd0;\n    }\n  lab_0x409ea7:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x409ea7\n    int64_t v111 = v55 + 88; // 0x409eab\n    int64_t v112 = *(int64_t *)v111; // 0x409eaf\n    int64_t v113 = v49 + 1; // 0x409eb2\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x4098b9\n        int64_t v115 = v114 + v105; // 0x4098bf\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x409ee8\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x409da0_2;\n            } else {\n                goto lab_0x409a19;\n            }\n        } else {\n            goto lab_0x4098cb;\n        }\n    } else {\n        goto lab_0x409ec3;\n    }\n  lab_0x4099cb:;\n    int64_t v116 = v80 == v20; // 0x4099d2\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x409900;\n    } else {\n        goto lab_0x4099de;\n    }\n  lab_0x4099de:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x4097b0\n    if (v102 != 0) {\n        goto lab_0x409900;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x4099fa\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x409fb5;\n        } else {\n            // 0x409a08\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x409a19;\n        }\n    }\n  lab_0x409900:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x409917\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x409da0_2;\n    } else {\n        // 0x40993d\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x409965\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x409a19;\n    }\n  lab_0x40ab7e:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x40b144\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x409da0_2;\n        } else {\n            // 0x40b155\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40b16a\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x40abb2;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x40aba1\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x409fb5;\n        } else {\n            // 0x40abaf\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x40abb2;\n        }\n    }\n  lab_0x40b18f:\n    // 0x40b18f\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x409da0_2;\n    } else {\n        goto lab_0x40ab7e;\n    }\n  lab_0x409f3d:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x409f3d\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x409f41\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x409f45\n    int64_t v123 = 0; // 0x409f4c\n    int64_t v124 = v122; // 0x409f4c\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x409f52\n        int64_t v126 = v120; // 0x409f5a\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x40aee1\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x40aef9\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x40af0b\n            int64_t v131 = v128; // 0x40af14\n            int64_t v132 = v130; // 0x40af14\n            int64_t v133; // 0x4097b0\n            int64_t v134; // 0x40af26\n            if (v130 < v129) {\n                // 0x40af16\n                if (v121 == v128) {\n                    // break -> 0x409d30\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x409d1b\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x409d30\n                        goto lab_0x409d30;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x40aed8\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x40aee1\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x40af16\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x409d30\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x409d1b\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x409d30\n                            goto lab_0x409d30;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x40aed8\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x409f64\n            if (*(int32_t *)v135 != 5) {\n                // 0x40a4dc\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x409f70\n            int64_t v137 = v136; // 0x409f70\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x409f7d\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x409d30:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x409d30\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x409d34\n    int64_t v142; // 0x4097b0\n    int64_t v143; // 0x4097b0\n    int64_t v144; // 0x4097b0\n    if (v140 == v141) {\n        goto lab_0x40a3e0;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x409d41\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x40af44\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x40af4d\n            if (v141 == v146) {\n                goto lab_0x40a3fe;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x40af73\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x40af7a\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x40af93\n                int64_t v152 = v151; // 0x40af9c\n                int64_t v153 = v149; // 0x40af9c\n                int64_t v154; // 0x4097b0\n                int64_t v155; // 0x40afa7\n                if (v151 < v150) {\n                    // 0x40af9e\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x409da0_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x40afba\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x409da0_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x40af60\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x40af69\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x40af9e\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x409da0_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x40afba\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x409da0_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x40af60\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x409d6c;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x409d53\n            if (*(int32_t *)v156 != 5) {\n                // 0x40a4dc\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x409d60\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x40a3e0;\n            } else {\n                goto lab_0x409d6c;\n            }\n        }\n    }\n  lab_0x409bd0:\n    // 0x409bd0\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x409bdd\n    int64_t v160 = 0; // 0x409be5\n    if (v159 != -1) {\n        // 0x409beb\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x40a4dc\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x409c0e\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x409c1c\n        if (*(int32_t *)v162 != 5) {\n            // 0x40a4dc\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x409c2f\n        int64_t v164; // bp-8, 0x4097b0\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x4097b0\n    uint64_t v165; // 0x409c46\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x40a678\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x409ca4\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x409da0_2;\n    } else {\n        // 0x409c50\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x409ca4\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x40a380\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x409da0_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x40a386\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x409c72;\n                } else {\n                    goto lab_0x40a392;\n                }\n            }\n        } else {\n            // 0x409c62\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x409c72;\n            } else {\n                goto lab_0x40a392;\n            }\n        }\n    }\n  lab_0x409e70:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x40a699\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x409da0_2;\n        } else {\n            // 0x40a6b1\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40a6c2\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x409ea2;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x409e91\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x409fb5;\n        } else {\n            // 0x409e9f\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x409ea2;\n        }\n    }\n  lab_0x40a752:\n    // 0x40a752\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x409da0_2;\n    } else {\n        goto lab_0x409e70;\n    }\n  lab_0x40a3e0:\n    // 0x40a3e0\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x40a3fe;\n  lab_0x409fa8:\n    // 0x409fa8\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x409bd0;\n  lab_0x409fb5:\n    // 0x409fb5\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x409fc8;\n  lab_0x40a3fe:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x40a404\n    v14 = v48;\n    int64_t v170; // 0x4097b0\n    int64_t v171; // 0x4097b0\n    int64_t * v172; // 0x4097b0\n    int64_t v173; // 0x4097b0\n    int64_t v174; // bp-760, 0x4097b0\n    uint64_t size5; // 0x40a408\n    if (v169 == -1) {\n        goto lab_0x409da0_2;\n    } else {\n        // 0x40a419\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x40a479;\n        } else {\n            // 0x40a425\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x409da0_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x40a44d\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x409da0_2;\n                } else {\n                    goto lab_0x40a479;\n                }\n            }\n        }\n    }\n  lab_0x409d6c:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x40a3fe;\n    } else {\n        // 0x409d75\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x40a3fe;\n        } else {\n            goto lab_0x409da0_2;\n        }\n    }\n  lab_0x409c72:\n    // 0x409c72\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x40a639\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x40a654\n            if (v48 == v20 && v46 != 0) {\n                // 0x40a662\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x409ca4\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x409c93\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x409ca4\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x409da0_2;\n  lab_0x40a392:\n    // 0x40a392\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x409da0_2;\n    } else {\n        goto lab_0x409c72;\n    }\n  lab_0x40a479:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x4097b0\n    int64_t v181; // 0x4097b0\n    int64_t v182; // 0x4097b0\n    int64_t v183; // 0x4097b0\n    int64_t v184; // 0x4097b0\n    int64_t v185; // 0x4097b0\n    int64_t v186; // 0x4097b0\n    int64_t v187; // 0x4097b0\n    int64_t v188; // 0x4097b0\n    int64_t v189; // 0x4097b0\n    int64_t v190; // 0x4097b0\n    int64_t v191; // 0x4097b0\n    int64_t v192; // 0x4097b0\n    int64_t v193; // 0x4097b0\n    float80_t v194; // 0x4097b0\n    float80_t v195; // 0x4097b0\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x40aff2\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x40b000\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x40b12d\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x40a939;\n    } else {\n        // 0x40a481\n        int64_t v198; // 0x4097b0\n        float80_t v199; // 0x4097b0\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x40ac41\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x40ac4e\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x40aaaa\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x40a4af\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x40a4b8\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x40a4dc\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x40a4dc\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x40b026\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x40b026\n                            v181 = v187 + 3;\n                            goto lab_0x40b1a1;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x40b1a1;\n                            } else {\n                                goto lab_0x40b062;\n                            }\n                        }\n                    } else {\n                        // 0x40ad33\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x40a927;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x40ad41\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x40b28a\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x40ad88\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x40ad9b\n                                int64_t v207 = v176 & 0xffffffff; // 0x40ad9e\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x40adac\n                                int64_t v209 = v187 + 1; // 0x40adc9\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x40adde\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x40adeb\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x40a939;\n                        }\n                    }\n                } else {\n                    // 0x40aad8\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x40aad8\n                        v180 = v187 + 1;\n                        goto lab_0x40b087;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x40b087;\n                        } else {\n                            goto lab_0x40aaf8;\n                        }\n                    }\n                }\n            } else {\n                // 0x40a910\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x40a927;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x40ae5c\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40ae6d\n                    char v215 = *v213; // 0x40ae74\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x40aeb0\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x40aebd\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x40ae85\n                        v182 = v218;\n                        int64_t v219; // 0x40ae77\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x40a939;\n                }\n            }\n        } else {\n            float80_t v220; // 0x4097b0\n            if (v220 != 0.0L) {\n                // 0x40a4dc\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x40ab2b\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x40ab3a\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x40ae13\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x40a939;\n        }\n    }\n  lab_0x40a939:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x40a93c\n    int64_t v229 = v228; // 0x40a942\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x40a944\n        int64_t v232 = v231 + v224; // 0x40a947\n        int64_t v233 = v232 - v225; // 0x40a94e\n        if ((v230 & 2) != 0) {\n            // 0x40adf3\n            v229 = v233;\n            int64_t v234 = v224; // 0x40adf6\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x40ae00\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x40ae00\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x40ac65\n                int64_t v238 = v224; // 0x40ac6b\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x40ac79\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x40ac70\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x40ac85\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x40ac98\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x40a971\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x40a991\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x40a988\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x40a99a\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x40a9a8\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x40a4dc\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x40a9d8\n    int64_t dest_mem5 = v48; // 0x40a9e5\n    int64_t v250 = v248; // 0x40a9e5\n    int64_t v251 = v47; // 0x40a9e5\n    int64_t v252; // 0x4097b0\n    if (v47 - v46 > v248) {\n        goto lab_0x40aa60;\n    } else {\n        if (v249 < v46) {\n            // 0x40ac32\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x409da0_2;\n            } else {\n                goto lab_0x40aa60;\n            }\n        } else {\n            // 0x40a9f0\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x40aa60;\n            } else {\n                if (v47 != 0) {\n                    // 0x40afc8\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x409da0_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x40afce\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x40aa0e;\n                        } else {\n                            goto lab_0x40afda;\n                        }\n                    }\n                } else {\n                    // 0x40a9fe\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x40aa0e;\n                    } else {\n                        goto lab_0x40afda;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40aa60:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x40aa71\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x40aa8d\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x409ea7;\n  lab_0x40a927:\n    // 0x40a927\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x40a939;\n  lab_0x40b087:;\n    char * v257 = nl_langinfo(0x10000); // 0x40b0ba\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40b0cb\n    char v259 = *v257; // 0x40b0d2\n    int64_t v260 = v176 & 0xffffffff; // 0x40b0d5\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x40b0e3\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x40b110\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x40b11d\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x40aaf8;\n  lab_0x40aaf8:\n    // 0x40aaf8\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x40a939;\n  lab_0x40aa0e:\n    // 0x40aa0e\n    if (v48 == 0 || v48 == v20) {\n        // 0x40acab\n        int64_t size7; // 0x4097b0\n        int64_t * mem12 = malloc((int32_t)size7); // 0x40acc2\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x409da0_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x40acce\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40acf9\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x40aa60;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x40aa3d\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x409da0_2;\n        } else {\n            // 0x40aa4b\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x40aa60;\n        }\n    }\n  lab_0x40afda:\n    // 0x40afda\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x409da0_2;\n    } else {\n        goto lab_0x40aa0e;\n    }\n  lab_0x40b1a1:;\n    int64_t v265 = v187 + 4; // 0x40b1a1\n    char v266 = *nl_langinfo(0x10000); // 0x40b1ec\n    int64_t v267 = v176 & 0xffffffff; // 0x40b1ef\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x40b1f6\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x40b21d\n        int64_t v270 = v265 + 1; // 0x40b225\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x40b062;\n  lab_0x40b062:\n    // 0x40b062\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x40a939;\n}\n"
        },
        {
            "funcName": "function_40b2d0",
            "funcStartAddr": "40b2d0",
            "funcEndAddr": "40b4e9",
            "decompiledFuncCode": "int64_t function_40b2d0(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x40b333\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x40b2e8\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x40b2f9\n    g100 = v5;\n    int64_t v6; // 0x40b2d0\n    int64_t v7; // 0x40b2d0\n    int64_t v8; // 0x40b2d0\n    int64_t v9; // 0x40b2d0\n    int64_t v10; // 0x40b2d0\n    int64_t v11; // 0x40b2d0\n    int64_t v12; // 0x40b2d0\n    uint32_t v13; // 0x40b3f0\n    int64_t * v14; // 0x40b420\n    int64_t v15; // 0x40b428\n    uint32_t v16; // 0x40b470\n    uint32_t v17; // 0x40b440\n    int64_t * v18; // 0x40b3d0\n    int64_t v19; // 0x40b3d0\n    int64_t * v20; // 0x40b3e0\n    int64_t v21; // 0x40b3e0\n    int64_t * v22; // 0x40b3b8\n    int64_t v23; // 0x40b3b8\n    int64_t * v24; // 0x40b3a0\n    int64_t v25; // 0x40b3a0\n    int64_t * v26; // 0x40b4c0\n    uint32_t v27; // 0x40b380\n    int64_t v28; // 0x40b4c0\n    int64_t * v29; // 0x40b4b0\n    int64_t v30; // 0x40b4b0\n    uint32_t v31; // 0x40b360\n    int64_t * v32; // 0x40b4d8\n    int64_t v33; // 0x40b4d8\n    int64_t v34; // 0x40b483\n    uint32_t v35; // 0x40b340\n    int64_t v36; // 0x40b457\n    uint32_t v37; // 0x40b308\n    int32_t * v38; // 0x40b3f0\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x40b380\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x40b387\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x40b3d0\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x40b393\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x40b326\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x40b360\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x40b367\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x40b3e0\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x40b373\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x40b326\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x40b340\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x40b347\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x40b3b8\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x40b353\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x40b326\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x40b308\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x40b313\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x40b3a0\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x40b31f\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x40b326\n            break;\n        }\n        case 11: {\n            // 0x40b3f0\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x40b3ff\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x40b4c0\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x40b40c\n            *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n            // break -> 0x40b326\n            break;\n        }\n        case 12: {\n            // 0x40b420\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x40b326\n            break;\n        }\n        case 15: {\n            // 0x40b470\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x40b477\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x40b4b0\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x40b483\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x40b326\n            break;\n        }\n        case 16: {\n            // 0x40b440\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x40b44b\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x40b4d8\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x40b457\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x40b326\n            break;\n        }\n        default: {\n            // 0x40b333\n            return 0xffffffff;\n        }\n    }\n    // 0x40b326\n    v3++;\n    int64_t v39 = v4 + 32; // 0x40b331\n    while (v3 < v2) {\n        // 0x40b2f0\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g100 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x40b380\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x40b387\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x40b3d0\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x40b393\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x40b326\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x40b360\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x40b367\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x40b3e0\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x40b373\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x40b326\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x40b340\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x40b347\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x40b3b8\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x40b353\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x40b326\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x40b308\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x40b313\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x40b3a0\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x40b31f\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x40b326\n                break;\n            }\n            case 11: {\n                // 0x40b3f0\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x40b3ff\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x40b4c0\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x40b40c\n                *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n                // break -> 0x40b326\n                break;\n            }\n            case 12: {\n                // 0x40b420\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x40b326\n                break;\n            }\n            case 15: {\n                // 0x40b470\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x40b477\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x40b4b0\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x40b483\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x40b326\n                break;\n            }\n            case 16: {\n                // 0x40b440\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x40b44b\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x40b4d8\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x40b457\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x40b326\n                break;\n            }\n            default: {\n                // 0x40b333\n                return 0xffffffff;\n            }\n        }\n        // 0x40b326\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x40b333\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40b4f0",
            "funcStartAddr": "40b4f0",
            "funcEndAddr": "40c1f9",
            "decompiledFuncCode": "int64_t function_40b4f0(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x40b4f2\n    int64_t v4 = v1 + 16; // 0x40b4f6\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x40b529\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x40b53e\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x40b56b\n    int32_t v8 = 0; // 0x40b570\n    int64_t v9 = 0; // 0x40b570\n    int64_t v10 = v3; // 0x40b570\n    int64_t v11 = a1; // 0x40b570\n    int64_t v12 = 0; // 0x40b570\n    char v13; // 0x40b4f0\n    int64_t v14; // 0x40b4f0\n    int64_t v15; // 0x40b4f0\n    int64_t v16; // 0x40b4f0\n    int64_t v17; // 0x40b4f0\n    int64_t v18; // 0x40b4f0\n    int64_t v19; // 0x40b4f0\n    int64_t v20; // 0x40b4f0\n    int64_t v21; // 0x40b4f0\n    int64_t v22; // 0x40b4f0\n    int64_t v23; // 0x40b4f0\n    int64_t v24; // 0x40b4f0\n    int64_t v25; // 0x40b4f0\n    int64_t v26; // 0x40b4f0\n    int64_t v27; // 0x40b4f0\n    int64_t v28; // 0x40b4f0\n    int64_t v29; // 0x40b4f0\n    int64_t v30; // 0x40b4f0\n    int32_t v31; // 0x40b4f0\n    int64_t v32; // 0x40b4f0\n    int64_t v33; // 0x40b560\n    int64_t v34; // 0x40b5b0\n    int64_t * v35; // 0x40b5d3\n    int64_t v36; // 0x40b636\n    if (v7 != 0) {\n        // 0x40b560\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x40b4f0\n        int64_t v38 = 7; // 0x40b4f0\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x40b4f0\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x40b560:\n            // 0x40b560\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x40b5a3\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x40b5b8\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x40b5f4\n                int64_t v43 = v42; // 0x40b5f4\n                int64_t v44 = v43; // 0x40b5fd\n                int64_t v45 = v33; // 0x40b5fd\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x40b990\n                    char v47 = *(char *)v46; // 0x40b994\n                    int64_t v48 = v46; // 0x40b99d\n                    while (v47 < 58) {\n                        // 0x40b990\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x40b99f\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x40c035\n                        char v52 = *(char *)v51; // 0x40c035\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x40c039\n                        int64_t v54 = v33; // 0x40c04d\n                        int64_t v55 = v51; // 0x40c04d\n                        char v56 = v52; // 0x40c04d\n                        int64_t v57 = v53; // 0x40c04d\n                        bool v58 = v52 < 58; // 0x40c04d\n                        bool v59 = v52 < 58; // 0x40c04d\n                        char v60 = v52; // 0x40c04d\n                        int64_t v61 = v51; // 0x40c04d\n                        int64_t v62; // 0x40c062\n                        int64_t v63; // 0x40c035\n                        char v64; // 0x40c035\n                        int64_t v65; // 0x40c039\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x40bcb8_9;\n                            }\n                            // 0x40c033\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x40c04f\n                                if (v64 >= 58) {\n                                    goto lab_0x40bcb8_9;\n                                }\n                                // 0x40c033\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x40c008\n                        while (v58) {\n                            // 0x40c00e\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x40bcb8_9;\n                                }\n                                // 0x40c033\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x40c04f\n                                    if (v64 >= 58) {\n                                        goto lab_0x40bcb8_9;\n                                    }\n                                    // 0x40c033\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x40c004\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x40c10d\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x40bcb8_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x40c11e\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x40b4f0\n                v36 = v45;\n                char v70; // 0x40b4f0\n                while (true) {\n                    // 0x40b636\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x40b650\n                                *v41 = *v41 | 2;\n                                // break -> 0x40b630\n                                break;\n                            }\n                            case 43: {\n                                // 0x40b660\n                                *v41 = *v41 | 4;\n                                // break -> 0x40b630\n                                break;\n                            }\n                            case 32: {\n                                // 0x40b670\n                                *v41 = *v41 | 8;\n                                // break -> 0x40b630\n                                break;\n                            }\n                            case 35: {\n                                // 0x40b680\n                                *v41 = *v41 | 16;\n                                // break -> 0x40b630\n                                break;\n                            }\n                            case 48: {\n                                // 0x40b690\n                                *v41 = *v41 | 32;\n                                // break -> 0x40b630\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x40b698\n                                    break;\n                                }\n                                // 0x40b626\n                                *v41 = *v41 | 64;\n                                // break -> 0x40b630\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x40b63f\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x40b630\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x40b4f0\n                int64_t * v72; // 0x40b5c1\n                int64_t * v73; // 0x40b5ca\n                if (v70 == 42) {\n                    // 0x40b70d\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x40b72d\n                    int64_t v75 = v74; // 0x40b72d\n                    int64_t v76 = v75 + 0xffffffd0; // 0x40b731\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x40b737\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x40bb0d\n                        char v80 = *(char *)v79; // 0x40bb11\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x40bb0d\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x40bb1d\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x40bb21\n                        int64_t v82 = v36; // 0x40bb21\n                        int64_t v83 = 0; // 0x40bb21\n                        if (v80 != 36) {\n                            goto lab_0x40b73d;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x40bb52\n                            int64_t v89 = v85; // 0x40bb52\n                            int64_t v90 = v87; // 0x40bb52\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x40bb57\n                            int64_t v95 = v92 + 1; // 0x40bb5a\n                            char v96 = *(char *)v95; // 0x40bb5a\n                            int64_t v97 = v96; // 0x40bb5a\n                            while (v94 < v91) {\n                                // 0x40bb71\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x40bcb8_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x40bb2b\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x40bb34\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x40bb71\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x40bcb8_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x40bb2b\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x40c1ab\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x40bcb8_9;\n                            }\n                            // 0x40c1b9\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x40b74c;\n                        }\n                    } else {\n                        goto lab_0x40b73d;\n                    }\n                } else {\n                    // 0x40b69d\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x40b4f0\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x40bdbb\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x40bdc0\n                        int64_t v102 = v71; // 0x40bdc9\n                        char * v103 = v100; // 0x40bdc9\n                        int64_t v104 = v36; // 0x40bdc9\n                        int64_t v105 = v71; // 0x40bdc9\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x40bdd3\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x40bdd3\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x40bdd3\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x40bde2\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x40be05\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x40b6a8;\n                }\n            } else {\n                goto lab_0x40b568;\n            }\n        }\n    }\n  lab_0x40b572:\n    // 0x40b572\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x40b594\n    return 0;\n  lab_0x40bcb8_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x40bcc3\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x40bcd5\n    if (v3 != v115) {\n        // 0x40bce0\n        free((int64_t *)v115);\n    }\n    // 0x40bce5\n    *__errno_location() = 22;\n    // 0x40b594\n    return 0xffffffff;\n  lab_0x40be90_5:;\n    // 0x40be90\n    int64_t v116; // 0x40b4f0\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x40be95\n    int64_t v119; // 0x40b4f0\n    if (v4 == v117) {\n        goto lab_0x40bea9_3;\n    } else {\n        // 0x40be97\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x40bea9_3;\n    }\n  lab_0x40bea9_3:;\n    int64_t v120 = *v5; // 0x40bea9\n    int32_t * v121; // 0x40beb9\n    if (v3 == v120) {\n        // 0x40beb9\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x40beb4\n    free((int64_t *)v120);\n    // 0x40beb9\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x40b568:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x40b56b\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x40b572\n        goto lab_0x40b572;\n    }\n    goto lab_0x40b560;\n  lab_0x40b73d:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x40b73d\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x40bae3\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x40bcb8_9;\n        }\n        // 0x40bafb\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x40b74c;\n  lab_0x40b6a8:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x40b6ab\n    int64_t v147 = v339; // 0x40b6ab\n    int64_t v145 = v338; // 0x40b6ab\n    int64_t v143 = v337; // 0x40b6ab\n    int64_t v186; // 0x40b4f0\n    int64_t v190; // 0x40b4f0\n    int64_t v189; // 0x40b4f0\n    int64_t v188; // 0x40b4f0\n    int64_t v187; // 0x40b4f0\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x40b7b0;\n    } else {\n        goto lab_0x40b6b1;\n    }\n  lab_0x40b74c:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x40b74c\n    int64_t v132 = v128; // 0x40b753\n    int64_t v133 = v16; // 0x40b753\n    int64_t v134 = v131; // 0x40b753\n    int64_t v135; // 0x40b4f0\n    int64_t v136; // 0x40b4f0\n    int64_t v137; // 0x40b4f0\n    int64_t v138; // 0x40b9ff\n    if (v16 > v127) {\n        goto lab_0x40b75c;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x40b9f5\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x40be90_5;\n        }\n        int64_t size = 32 * v138; // 0x40ba1e\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x40bf7c\n            if (mem == NULL) {\n                goto lab_0x40bea9_3;\n            }\n            // 0x40bf9e\n            v135 = (int64_t)mem;\n            goto lab_0x40bfa9;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x40ba3f\n            int64_t v140 = *v6; // 0x40ba44\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x40be90_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x40ba3f\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x40bfa9;\n            } else {\n                goto lab_0x40ba7d;\n            }\n        }\n    }\n  lab_0x40b6b1:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x40b6b8\n    int64_t v151 = v146; // 0x40b6b8\n    int64_t v152 = v144; // 0x40b6b8\n    uint64_t v153; // 0x40b4f0\n    int64_t v154; // 0x40b4f0\n    int64_t v155; // 0x40b6f7\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x40b6fb\n        int64_t v158; // 0x40b4f0\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x40b860\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x40b6f3\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x40b868\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x40b6f0\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x40b6f3\n                    break;\n                }\n            }\n        } else {\n            // 0x40b700\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x40b6f3\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x40b868\n    int64_t v162 = v161 % 256; // 0x40b874\n    g101 = v162;\n    int64_t v163 = 17; // 0x40b877\n    int64_t v164 = v154; // 0x40b877\n    int64_t v165 = v154; // 0x40b877\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x40b8e1;\n        }\n        case 28: {\n            goto lab_0x40bc32;\n        }\n        case 30: {\n            // 0x40bc5e\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x40b889;\n        }\n        case 32: {\n            goto lab_0x40bc32;\n        }\n        case 33: {\n            goto lab_0x40bc32;\n        }\n        case 34: {\n            goto lab_0x40bc32;\n        }\n        case 46: {\n            // 0x40bc4f\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x40b889;\n        }\n        case 51: {\n            goto lab_0x40bc6d;\n        }\n        case 60: {\n            goto lab_0x40bc32;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x40bb89\n            int32_t v167 = v166 - 7; // 0x40bb89\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x40bb8f\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x40b889;\n        }\n        case 63: {\n            goto lab_0x40bbe0;\n        }\n        case 64: {\n            goto lab_0x40bc32;\n        }\n        case 65: {\n            goto lab_0x40bc32;\n        }\n        case 66: {\n            goto lab_0x40bc32;\n        }\n        case 68: {\n            goto lab_0x40bbe0;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x40bb9f\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x40bba5\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x40bbad\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x40bbbb\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x40bbcf\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x40b889;\n        }\n        case 74: {\n            goto lab_0x40bc6d;\n        }\n        case 75: {\n            goto lab_0x40b889;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x40b880\n            int32_t v172 = v171 - 7; // 0x40b880\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x40b886\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x40b889;\n        }\n        case 80: {\n            goto lab_0x40bc6d;\n        }\n        case 83: {\n            goto lab_0x40bc6d;\n        }\n        default: {\n            goto lab_0x40bcb8_9;\n        }\n    }\n  lab_0x40b75c:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x40b773\n        int64_t v178 = v176; // 0x40b4f0\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x40b768\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x40b768\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x40b781\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x40b78d\n    int32_t v182 = *v181; // 0x40b78d\n    if (v182 != 0) {\n        // 0x40be0e\n        if (v182 != 5) {\n            goto lab_0x40bcb8_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x40be17\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x40b6a8;\n    } else {\n        // 0x40b797\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x40b79d\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x40b6b1;\n        } else {\n            goto lab_0x40b7b0;\n        }\n    }\n  lab_0x40b7b0:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x40b7b0\n    char v197 = *v196; // 0x40b7b0\n    int64_t * v198; // 0x40b5d8\n    *v198 = v192;\n    int64_t v199; // 0x40b4f0\n    int64_t v200; // 0x40b4f0\n    int64_t v201; // 0x40b4f0\n    int64_t v202; // 0x40b4f0\n    int64_t v203; // 0x40b4f0\n    int64_t * v204; // 0x40b5e1\n    int64_t * v205; // 0x40b5ea\n    int64_t v206; // 0x40b7c9\n    if (v197 != 42) {\n        char v207 = *v196; // 0x40b9b0\n        int64_t v208 = v193; // 0x40b9b9\n        char * v209; // 0x40b4f0\n        int64_t v210; // 0x40b4f0\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x40b9c0\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x40b9c4\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x40b9c0\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x40b9ce\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x40b9b0\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x40b9e1\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x40b6b1;\n    } else {\n        // 0x40b7bf\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x40b7df\n        int64_t v219 = v218; // 0x40b7df\n        int64_t v220 = v219 + 0xffffffd0; // 0x40b7e3\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x40b7e9\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x40c094\n            char v224 = *(char *)v223; // 0x40c098\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x40c094\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x40c0a4\n            v201 = v223;\n            int64_t v225 = v219; // 0x40c0a8\n            int64_t v226 = v206; // 0x40c0a8\n            int64_t v227 = 0; // 0x40c0a8\n            if (v224 != 36) {\n                goto lab_0x40b7ef;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x40c0d9\n                int64_t v233 = v229; // 0x40c0d9\n                int64_t v234 = v231; // 0x40c0d9\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x40c0de\n                int64_t v239 = v236 + 1; // 0x40c0e5\n                char v240 = *(char *)v239; // 0x40c0e9\n                int64_t v241 = v240; // 0x40c0e9\n                while (v238 < v235) {\n                    // 0x40c0f7\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x40bcb8_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x40c0b2\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x40c0bb\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x40c0f7\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x40bcb8_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x40c0b2\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x40c1c7\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x40bcb8_9;\n                }\n                // 0x40c1d5\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x40b7fe;\n            }\n        } else {\n            goto lab_0x40b7ef;\n        }\n    }\n  lab_0x40b8e1:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x40b8e6\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x40b8ee\n    *a2 = v245;\n    int64_t v246; // 0x40b4f0\n    int64_t v247; // 0x40b4f0\n    int64_t dest_mem; // 0x40b4f0\n    int64_t v248; // 0x40b4f0\n    int64_t v249; // 0x40c1e3\n    if (v246 > v245) {\n        // 0x40b8fa\n        goto lab_0x40b568;\n    } else {\n        if (v246 < 0) {\n            // 0x40c1e3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x40be90_5;\n        }\n        int64_t v250 = 2 * v246; // 0x40b916\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x40c1e3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x40be90_5;\n        }\n        int64_t v251 = *v5; // 0x40b927\n        int64_t size2 = 176 * v246; // 0x40b939\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x40ba89\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x40bfec\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x40beb9\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x40be97\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x40bea9_3;\n            }\n            goto lab_0x40baa4;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x40b94b\n            if (mem4 == NULL) {\n                // 0x40c1e3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x40be90_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x40b94b\n            int64_t v254 = *v5; // 0x40b96d\n            int64_t v255 = *a2; // 0x40b971\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x40baa4;\n            } else {\n                goto lab_0x40b97f;\n            }\n        }\n    }\n  lab_0x40bc32:\n    // 0x40bc32\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x40bc47\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x40b889;\n  lab_0x40bc6d:;\n    uint32_t v335 = (int32_t)v153; // 0x40bc75\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x40bc7b\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x40bc83\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x40bc91\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x40bc9e\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x40b889;\n  lab_0x40bbe0:;\n    uint32_t v336 = (int32_t)v153; // 0x40bbe8\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x40bbee\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x40bbf6\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x40bc04\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x40bc11\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x40b889;\n  lab_0x40b889:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x40b4f0\n    int64_t v260; // 0x40b4f0\n    int64_t * v261; // 0x40b5ef\n    if (v259 == -1) {\n        // 0x40bd94\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x40bcb8_9;\n        }\n        // 0x40bdac\n        v260 = v148;\n    } else {\n        // 0x40b893\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x40b898\n    int64_t v264 = v258; // 0x40b89f\n    int64_t v265 = v162; // 0x40b89f\n    int64_t v266 = v263; // 0x40b89f\n    int64_t v267; // 0x40b4f0\n    int64_t v268; // 0x40b4f0\n    int64_t v269; // 0x40b4f0\n    int64_t v270; // 0x40b4f0\n    int64_t v271; // 0x40b4f0\n    if (v142 > v262) {\n        goto lab_0x40b8a5;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x40bd08\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x40bd12\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x40be90_5;\n        }\n        int64_t size3 = 32 * v273; // 0x40bd31\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x40bd44\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x40be29\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x40bea9_3;\n            }\n            goto lab_0x40be46;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x40bd51\n            if (mem6 == NULL) {\n                // 0x40c1e3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x40be90_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x40bd51\n            int64_t v276 = v274 & 0xffffffff; // 0x40bd56\n            int64_t v277 = *v6; // 0x40bd81\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x40be46;\n            } else {\n                goto lab_0x40bd8b;\n            }\n        }\n    }\n  lab_0x40b8a5:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x40b8bb\n        int64_t v282 = v279; // 0x40b4f0\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x40b8b0\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x40b8b0\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x40b8c9\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x40b8d5\n    int32_t v286 = *v285; // 0x40b8d5\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x40bcfa\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x40bcb8_9;\n        }\n    } else {\n        // 0x40b8df\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x40b8e1;\n  lab_0x40bfa9:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x40bfa9\n    int64_t * v290; // 0x40b4f0\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x40ba7d;\n  lab_0x40ba7d:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x40b75c;\n  lab_0x40b7ef:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x40b7ef\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x40c06a\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x40bcb8_9;\n        }\n        // 0x40c082\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x40b7fe;\n  lab_0x40b7fe:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x40b7fe\n    int64_t v300 = v296; // 0x40b805\n    int64_t v301 = v191; // 0x40b805\n    int64_t v302 = v299; // 0x40b805\n    int64_t v303; // 0x40b4f0\n    int64_t v304; // 0x40b4f0\n    int64_t v305; // 0x40b4f0\n    int64_t v306; // 0x40bee2\n    if (v191 > v295) {\n        goto lab_0x40b80e;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x40bed8\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x40be90_5;\n        }\n        int64_t size4 = 32 * v306; // 0x40befd\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x40c12e\n            if (mem7 == NULL) {\n                goto lab_0x40bea9_3;\n            }\n            // 0x40c150\n            v304 = (int64_t)mem7;\n            goto lab_0x40c15b;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x40bf1e\n            int64_t v308 = *v6; // 0x40bf23\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x40be90_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x40bf1e\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x40c15b;\n            } else {\n                goto lab_0x40bf5c;\n            }\n        }\n    }\n  lab_0x40baa4:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x40b4f0\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x40b97f;\n  lab_0x40b97f:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x40b568;\n  lab_0x40be46:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x40be5c\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x40bd8b;\n  lab_0x40bd8b:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x40b8a5;\n  lab_0x40b80e:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x40b823\n        int64_t v324 = v322; // 0x40b4f0\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x40b818\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x40b818\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x40b831\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x40b83e\n    int32_t v328 = *v327; // 0x40b83e\n    if (v328 != 0) {\n        // 0x40bf65\n        if (v328 != 5) {\n            goto lab_0x40bcb8_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x40bf6e\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x40b848\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x40b851\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x40b6b1;\n  lab_0x40c15b:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x40c15b\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x40bf5c;\n  lab_0x40bf5c:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x40b80e;\n}\n"
        },
        {
            "funcName": "function_40c200",
            "funcStartAddr": "40c200",
            "funcEndAddr": "40c25d",
            "decompiledFuncCode": "int64_t function_40c200(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40c200\n    return function_401748();\n}\n"
        },
        {
            "funcName": "function_40c260",
            "funcStartAddr": "40c260",
            "funcEndAddr": "40c261",
            "decompiledFuncCode": "int64_t function_40c260(void) {\n    // 0x40c260\n    int64_t result; // 0x40c260\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c270",
            "funcStartAddr": "40c270",
            "funcEndAddr": "40c288",
            "decompiledFuncCode": "int64_t function_40c270(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40c270\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g33);\n}\n"
        },
        {
            "funcName": "function_40c288",
            "funcStartAddr": "40c288",
            "funcEndAddr": "40c2a8",
            "decompiledFuncCode": "int64_t function_40c288(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g29; // 0x40c292\n    while (*(int64_t *)v1 != -1) {\n        // 0x40c293\n        v1 -= 8;\n    }\n    // 0x40c2a4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_od.elf"
}