{
    "funcInfo": [
        {
            "funcName": "function_401810",
            "funcStartAddr": "401810",
            "funcEndAddr": "401815",
            "decompiledFuncCode": "int64_t function_401810(void) {\n    // 0x401810\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401815",
            "funcStartAddr": "401815",
            "funcEndAddr": "40181a",
            "decompiledFuncCode": "int64_t function_401815(void) {\n    // 0x401815\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40181a",
            "funcStartAddr": "40181a",
            "funcEndAddr": "40181f",
            "decompiledFuncCode": "int64_t function_40181a(void) {\n    // 0x40181a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40181f",
            "funcStartAddr": "40181f",
            "funcEndAddr": "401824",
            "decompiledFuncCode": "int64_t function_40181f(void) {\n    // 0x40181f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401824",
            "funcStartAddr": "401824",
            "funcEndAddr": "401829",
            "decompiledFuncCode": "int64_t function_401824(void) {\n    // 0x401824\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401829",
            "funcStartAddr": "401829",
            "funcEndAddr": "40182e",
            "decompiledFuncCode": "int64_t function_401829(void) {\n    // 0x401829\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401830",
            "funcStartAddr": "401830",
            "funcEndAddr": "401acd",
            "decompiledFuncCode": "int64_t function_401830(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401843\n    function_402d10(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x401830\n    function_406de0(0x402c30, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    int64_t v3 = 0; // 0x40187e\n    int64_t v4 = 0; // 0x40187e\n    int64_t v5 = 76; // 0x40187e\n    int64_t v6; // 0x401830\n    while (true) {\n        // 0x401883\n        v6 = v5;\n        int64_t v7 = v3; // 0x401830\n        int64_t v8; // 0x401830\n        uint32_t v9; // 0x401830\n        while (true) {\n            // 0x401883\n            v3 = v7;\n            int64_t v10 = v4; // 0x401830\n            while (true) {\n              lab_0x401883:\n                // 0x401883\n                v4 = v10;\n                v9 = (int32_t)function_406530(v1, a2, \"diw:\", &g2, 0, v8);\n                v10 = 1;\n                switch (v9) {\n                    case -1: {\n                        goto lab_0x401963;\n                    }\n                    case 100: {\n                        goto lab_0x401883;\n                    }\n                    default: {\n                        goto lab_0x4018ac;\n                    }\n                }\n            }\n          lab_0x4018ac:\n            if (v9 <= 100) {\n                if (v9 == -131) {\n                    // 0x4018c7\n                    function_404db0((int64_t)g28, \"base32\", \"GNU coreutils\", (int64_t)g17, \"Simon Josefsson\", 0);\n                    exit(0);\n                    // UNREACHABLE\n                }\n                if (v9 == -130) {\n                    // 0x40194d\n                    function_4020a0(0);\n                    // UNREACHABLE\n                }\n                goto lab_0x401ac3;\n            }\n            // 0x4018ae\n            v7 = 1;\n            if (v9 != 105) {\n                // break -> 0x401900\n                break;\n            }\n        }\n        if (v9 != 119) {\n          lab_0x401ac3:\n            // 0x401ac3\n            function_4020a0(1);\n            // UNREACHABLE\n        }\n        char * v11 = dcgettext(NULL, \"invalid wrap size\", 5); // 0x401915\n        v5 = function_405250(g46, (int32_t)\"invalid wrap size\" ^ (int32_t)\"invalid wrap size\", -1, (int64_t *)&g10, (int64_t)v11, 0);\n        v8 = 0;\n    }\n  lab_0x401963:;\n    int32_t v12 = *(int32_t *)0x60b25c; // 0x401963\n    int64_t v13 = v12; // 0x401963\n    int32_t v14 = (int32_t)a1 - v12; // 0x40196c\n    int64_t v15 = v13; // 0x401971\n    int64_t v16 = a2; // 0x401971\n    int64_t v17; // 0x401830\n    int64_t str2; // 0x401830\n    int64_t v18; // 0x401830\n    int64_t v19; // 0x401830\n    int64_t v20; // 0x401830\n    if (v14 > 1) {\n        goto lab_0x401a95;\n    } else {\n        int64_t v21 = v14 - 1; // 0x40196e\n        v19 = v21;\n        v17 = (int64_t)\"-\";\n        if (v1 > v13) {\n            int64_t v22 = *(int64_t *)(8 * v13 + a2); // 0x40197b\n            char * str = (char *)v22; // 0x401987\n            v19 = v21;\n            v17 = v22;\n            if (strcmp(str, \"-\") == 0) {\n                goto lab_0x4019d7;\n            } else {\n                struct _IO_FILE * file = fopen(str, \"rb\"); // 0x401998\n                v20 = v21;\n                v18 = (int64_t)file;\n                str2 = v22;\n                if (file != NULL) {\n                    goto lab_0x4019de;\n                } else {\n                    // 0x4019a5\n                    error(1, *__errno_location(), \"%s\", (char *)function_4047b0(0, 3, v22));\n                    v19 = (int64_t)\"%s\";\n                    v17 = (int64_t)\"-\";\n                    goto lab_0x4019d7;\n                }\n            }\n        } else {\n            goto lab_0x4019d7;\n        }\n    }\n  lab_0x401a95:\n    // 0x401a95\n    function_404930(*(int64_t *)(v16 + 8 * v15));\n    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n    // 0x401ac3\n    function_4020a0(1);\n    // UNREACHABLE\n  lab_0x4019d7:\n    // 0x4019d7\n    v20 = v19;\n    v18 = g29;\n    str2 = v17;\n    goto lab_0x4019de;\n  lab_0x4019de:\n    // 0x4019de\n    function_402ce0(v18, 2, v20);\n    int64_t v23 = (int64_t)g28;\n    if (v4 == 0) {\n        // 0x401a1b\n        function_401dd0(v18, v23, v6);\n    } else {\n        // 0x4019f0\n        function_401bb0(v18, v23, v3);\n    }\n    // 0x401a03\n    if ((int32_t)function_4056c0(v18, v23) != -1) {\n        // 0x401a10\n        return 0;\n    }\n    uint32_t strcmp_rc = strcmp((char *)str2, \"-\"); // 0x401a37\n    int32_t * err_num = __errno_location(); // 0x401a3e\n    if (strcmp_rc == 0) {\n        // 0x401a4a\n        error(1, *err_num, dcgettext(NULL, \"closing standard input\", 5));\n    }\n    // 0x401a6e\n    error(1, *err_num, \"%s\", (char *)function_4047b0(0, 3, str2));\n    v15 = &g50;\n    v16 = strcmp_rc;\n    goto lab_0x401a95;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401ad0",
            "funcEndAddr": "401afb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401ad0\n    int64_t v1; // 0x401ad0\n    __libc_start_main(0x401830, (int32_t)a4, (char **)&v1, (void (*)())0x406d70, (void (*)())0x406dd0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401afb",
            "funcStartAddr": "401afb",
            "funcEndAddr": "401b1a",
            "decompiledFuncCode": "int64_t function_401afb(void) {\n    // 0x401afb\n    return &g27;\n}\n"
        },
        {
            "funcName": "function_401b1a",
            "funcStartAddr": "401b1a",
            "funcEndAddr": "401b51",
            "decompiledFuncCode": "int64_t function_401b1a(void) {\n    // 0x401b1a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401b51",
            "funcStartAddr": "401b51",
            "funcEndAddr": "401ba8",
            "decompiledFuncCode": "int64_t function_401b51(void) {\n    // 0x401b51\n    if (g32 != 0) {\n        // 0x401ba7\n        int64_t result; // 0x401b51\n        return result;\n    }\n    int64_t v1 = g33; // 0x401b84\n    int64_t result2; // 0x401b96\n    if (g33 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401b96\n        result2 = function_401afb();\n        g32 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401b86\n        v1++;\n    }\n    // 0x401b7a\n    g33 = v1;\n    // 0x401b96\n    result2 = function_401afb();\n    g32 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401ba8",
            "funcStartAddr": "401ba8",
            "funcEndAddr": "401bad",
            "decompiledFuncCode": "int64_t function_401ba8(void) {\n    // 0x401ba8\n    return function_401b1a();\n}\n"
        },
        {
            "funcName": "function_401bb0",
            "funcStartAddr": "401bb0",
            "funcEndAddr": "401dd0",
            "decompiledFuncCode": "int64_t function_401bb0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x401bb0\n    int64_t stream; // bp-13416, 0x401bb0\n    int64_t v1 = &stream; // 0x401bbd\n    stream = a2;\n    int32_t v2; // bp-13380, 0x401bb0\n    function_4028f0((int64_t *)&v2);\n    int64_t v3; // bp-8248, 0x401bb0\n    int64_t v4 = &v3; // 0x401c11\n    int64_t v5 = v1 + 0x1431;\n    int32_t v6; // 0x401bb0\n    int32_t v7; // 0x401bb0\n    int32_t v8; // 0x401be8\n    int64_t v9; // 0x401bb0\n    int64_t v10; // 0x401bb0\n    int64_t v11; // 0x401bb0\n    int64_t v12; // 0x401bb0\n    int64_t v13; // 0x401bb0\n    int64_t v14; // 0x401bb0\n    int64_t v15; // 0x401bb0\n    int64_t v16; // 0x401bb0\n    int64_t v17; // 0x401bb0\n    int32_t v18; // 0x401bb0\n    int64_t result; // 0x401bb0\n    int64_t v19; // 0x401bb0\n    int64_t v20; // 0x401bb0\n    int64_t v21; // 0x401bb0\n    int64_t v22; // 0x401bb0\n    int64_t v23; // 0x401bb0\n    int32_t n; // bp-13392, 0x401bb0\n    int64_t v24; // 0x401bb0\n    int64_t v25; // 0x401bb0\n    uint64_t v26; // 0x401bb0\n    int64_t v27; // 0x401bec\n    while (true) {\n      lab_0x401be0:\n        // 0x401be0\n        v20 = 0;\n        int64_t v28; // 0x401bb0\n        v11 = v28;\n        int64_t v29; // 0x401bb0\n        v15 = v29;\n        while (true) {\n          lab_0x401c11:;\n            int64_t v30 = v20 + v4; // 0x401c29\n            int32_t v31 = fread_unlocked((int64_t *)v30, 1, 0x2000 - (int32_t)v20, (struct _IO_FILE *)a1); // 0x401c2d\n            int64_t v32 = v31; // 0x401c2d\n            n = v31;\n            int32_t v33 = v30;\n            v6 = v33;\n            v22 = v32;\n            v19 = v20;\n            v9 = v11;\n            v13 = v15;\n            v7 = v33;\n            v23 = v32;\n            v21 = v20;\n            v12 = v11;\n            v16 = 0;\n            if ((char)a3 == 0) {\n                goto lab_0x401be8;\n            } else {\n                goto lab_0x401c44;\n            }\n        }\n      lab_0x401ce0_2:\n        // 0x401ce0\n        v18 = v8;\n        v17 = v14;\n        v25 = 0;\n        while (true) {\n          lab_0x401d46:\n            // 0x401d46\n            v26 = v25;\n            int64_t v34 = v18;\n            if ((v34 & 16) == 0) {\n                // 0x401ce8\n                v28 = v10;\n                v29 = v17;\n                v24 = v27;\n                if (v26 != 0) {\n                    goto lab_0x401be0;\n                } else {\n                    goto lab_0x401cfc;\n                }\n            } else {\n                // 0x401d4a\n                result = v34;\n                if (v26 >= 2) {\n                    return result;\n                }\n                // 0x401d4f\n                v24 = v27;\n                if (v26 == 1) {\n                    // 0x401d51\n                    v24 = 0;\n                    result = 0;\n                    if (v2 == 0) {\n                        return result;\n                    }\n                }\n                goto lab_0x401cfc;\n            }\n        }\n    }\n    // 0x401d66\n    return result;\n  lab_0x401cfc:\n    // 0x401cfc\n    n = 0x1400;\n    int64_t data; // bp-13368, 0x401bb0\n    int64_t v35 = function_402900((int64_t *)&v2, &v3, v24, &data, (int64_t *)&n); // 0x401d13\n    uint32_t v36 = fwrite_unlocked(&data, 1, n, (struct _IO_FILE *)stream); // 0x401d2e\n    if (n > v36) {\n        // 0x401d78\n        error(1, *__errno_location(), dcgettext(NULL, \"write error\", 5));\n        goto lab_0x401da2;\n    }\n    if ((char)v35 == 0) {\n      lab_0x401da2:\n        // 0x401da2\n        error(1, (int32_t)\"invalid input\" ^ (int32_t)\"invalid input\", dcgettext(NULL, \"invalid input\", 5));\n        return &g50;\n    }\n    // 0x401d3f\n    v18 = &data;\n    v17 = v35 & 0xffffffff;\n    v25 = v26 + 1 & 0xffffffff;\n    goto lab_0x401d46;\n  lab_0x401be8:\n    // 0x401be8\n    v14 = v13;\n    v10 = v9;\n    v8 = v6;\n    v27 = v19 + v22;\n    int64_t v37; // 0x401bb0\n    int64_t v38; // 0x401bb0\n    int64_t v39; // 0x401bb0\n    int64_t v40; // 0x401bb0\n    if ((v8 & 32) != 0) {\n        char * format = dcgettext(NULL, \"read error\", 5); // 0x401c92\n        int32_t * v41 = __errno_location(); // 0x401c9a\n        int32_t err_num = *v41; // 0x401ca7\n        error(1, err_num, format);\n        v40 = (int64_t)format;\n        v39 = v27;\n        v37 = v10;\n        v38 = v14;\n      lab_0x401cb0:;\n        int64_t v42 = v40 - 1; // 0x401cb0\n        int64_t v43 = v37 + v4; // 0x401cc7\n        n = v42;\n        memmove((int64_t *)v43, (int64_t *)(v5 + v37), (int32_t)(v42 - v38));\n        v7 = v43;\n        v23 = v42;\n        v21 = v39;\n        v12 = v37;\n        v16 = v38;\n        goto lab_0x401c44;\n    } else {\n        if (v27 >= 0x2000) {\n            // break -> 0x401ce0\n            goto lab_0x401ce0_2;\n        }\n        // 0x401c09\n        v20 = v27;\n        v11 = v10;\n        v15 = v14;\n        if ((v8 & 16) != 0) {\n            // break -> 0x401ce0\n            goto lab_0x401ce0_2;\n        }\n        goto lab_0x401c11;\n    }\n  lab_0x401c44:;\n    int64_t v44 = v16;\n    int64_t v45 = v12;\n    int64_t v46 = v21;\n    int64_t v47 = v23;\n    int32_t v48 = v7;\n    v6 = v48;\n    v22 = 0;\n    v19 = v46;\n    v9 = v45;\n    v13 = v44;\n    if (v47 != 0) {\n        int32_t v49 = v48; // 0x401c4c\n        int64_t v50 = v45; // 0x401c4c\n        int64_t v51 = v44; // 0x401c4c\n        int64_t v52 = v44; // 0x401c4c\n        if (v44 < v47) {\n            int64_t v53 = v52;\n            int64_t v54 = v53 + v46; // 0x401c4e\n            char v55 = *(char *)(v1 + 0x1430 + v54); // 0x401c53\n            v40 = v47;\n            v39 = v46;\n            v37 = v54;\n            v38 = v53;\n            if (v55 != 61 == (char)function_4028d0(v55) == 0) {\n                goto lab_0x401cb0;\n            }\n            int64_t v56 = v53 + 1; // 0x401c6e\n            while (v56 < v47) {\n                // 0x401c4e\n                v53 = v56;\n                v54 = v53 + v46;\n                v55 = *(char *)(v1 + 0x1430 + v54);\n                v40 = v47;\n                v39 = v46;\n                v37 = v54;\n                v38 = v53;\n                if (v55 != 61 == (char)function_4028d0(v55) == 0) {\n                    goto lab_0x401cb0;\n                }\n                // 0x401c6e\n                v56 = v53 + 1;\n            }\n            // 0x401be8\n            v49 = v55;\n            v50 = v54;\n            v51 = v56;\n        }\n        // 0x401be8\n        v6 = v49;\n        v22 = v47;\n        v19 = v46;\n        v9 = v50;\n        v13 = v51;\n    }\n    goto lab_0x401be8;\n}\n"
        },
        {
            "funcName": "function_401dd0",
            "funcStartAddr": "401dd0",
            "funcEndAddr": "4020a0",
            "decompiledFuncCode": "int64_t function_401dd0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x401dd0\n    int64_t v1; // bp-79928, 0x401dd0\n    int64_t v2 = &v1;\n    int64_t data2; // bp-49208, 0x401dd0\n    int64_t v3 = &data2;\n    int64_t * v4 = (int64_t *)(a2 + 40);\n    int64_t * v5 = (int64_t *)(a2 + 48);\n    struct _IO_FILE * v6 = (struct _IO_FILE *)a2;\n    int64_t v7 = 0; // 0x401df4\n    int64_t v8; // 0x401dd0\n    int64_t v9; // 0x401dd0\n    int64_t v10; // 0x401e25\n    int64_t v11; // 0x401e1c\n    while (true) {\n      lab_0x401df8:\n        // 0x401df8\n        v8 = v7;\n        int64_t v12 = 0;\n        v11 = v12 + v2;\n        v10 = v12 + (int64_t)fread_unlocked((int64_t *)v11, 1, 0x7800 - (int32_t)v12, (struct _IO_FILE *)a1);\n        while ((v11 & 48) == 0) {\n            int64_t v13 = v10; // 0x401e07\n            if (v10 >= 0x7800) {\n                // 0x401e60\n                v9 = v11;\n                goto lab_0x401e60_2;\n            }\n            v12 = v13;\n            v11 = v12 + v2;\n            v10 = v12 + (int64_t)fread_unlocked((int64_t *)v11, 1, 0x7800 - (int32_t)v12, (struct _IO_FILE *)a1);\n        }\n        // 0x401e2e\n        v9 = v11;\n        if (v10 == 0) {\n            // break -> 0x401e33\n            break;\n        }\n        goto lab_0x401e60_2;\n    }\n    int32_t v14 = v11; // 0x401dd0\n    int64_t v15 = v8; // 0x401dd0\n  lab_0x401e33:;\n    int32_t v16 = v14; // 0x401e39\n    if (a3 != 0 == (v15 != 0)) {\n        uint64_t v17 = *v4; // 0x401f97\n        if (v17 >= *v5) {\n            // 0x401fb3\n            v9 = a2;\n            v16 = a2;\n            if (__overflow(v6, 10) == -1) {\n                char * format = dcgettext(NULL, \"write error\", 5); // 0x401fd1\n                int32_t * err_num = __errno_location(); // 0x401fd9\n                v9 = 1;\n                error(1, *err_num, format);\n              lab_0x401fef:;\n                char * format2 = dcgettext(NULL, \"write error\", 5); // 0x401ffb\n                int32_t * err_num2 = __errno_location(); // 0x402003\n                v9 = 1;\n                error(1, *err_num2, format2);\n              lab_0x402019:;\n                char * format3 = dcgettext(NULL, \"write error\", 5); // 0x402025\n                int32_t * err_num3 = __errno_location(); // 0x40202d\n                v9 = 1;\n                error(1, *err_num3, format3);\n              lab_0x402043:;\n                char * format4 = dcgettext(NULL, \"write error\", 5); // 0x40204f\n                int32_t * err_num4 = __errno_location(); // 0x402057\n                v9 = 1;\n                error(1, *err_num4, format4);\n                // 0x40206d\n                error(1, *__errno_location(), dcgettext(NULL, \"read error\", 5));\n                return &g50;\n            }\n        } else {\n            // 0x401fa1\n            *v4 = v17 + 1;\n            *(char *)v17 = 10;\n            v16 = *(int32_t *)&v9;\n        }\n    }\n    int64_t result = v16;\n    if ((result & 32) == 0) {\n        // 0x401e4c\n        return result;\n    }\n    // 0x40206d\n    error(1, *__errno_location(), dcgettext(NULL, \"read error\", 5));\n    return &g50;\n  lab_0x401e60_2:\n    // 0x401e60\n    v9 = v2;\n    uint64_t n2 = (v10 + 4) / 0xa0000000 & 0x7fffffff8; // 0x401e7d\n    function_4025d0(&v1, v10, &data2, n2);\n    int32_t v18; // 0x401dd0\n    int64_t v19; // 0x401dd0\n    if (a3 != 0) {\n        // 0x401ee0\n        v18 = v2;\n        v19 = v8;\n        int64_t v20 = v8; // 0x401ee6\n        if (n2 != 0) {\n            int64_t v21 = 0;\n            int64_t v22 = v20;\n            uint64_t v23 = n2 - v21; // 0x401f14\n            uint64_t v24 = a3 - v22; // 0x401f17\n            uint64_t n = v24 > v23 ? v23 : v24; // 0x401f1d\n            int64_t v25; // 0x401dd0\n            int64_t v26; // 0x401dd0\n            uint64_t v27; // 0x401ef0\n            int64_t data; // 0x401f3d\n            if (n == 0) {\n                // 0x401ef0\n                v27 = *v4;\n                if (v27 >= *v5) {\n                    // 0x401f70\n                    v9 = a2;\n                    if (__overflow(v6, 10) == -1) {\n                        goto lab_0x402019;\n                    }\n                    // 0x401f8b\n                    v26 = 0;\n                    v25 = 0x100000000 * v21 >> 32;\n                } else {\n                    // 0x401efa\n                    *v4 = v27 + 1;\n                    *(char *)v27 = 10;\n                    v26 = 0;\n                    v25 = v21;\n                }\n            } else {\n                // 0x401f26\n                data = v21 + v3;\n                v9 = data;\n                if (n > (int64_t)fwrite_unlocked((int64_t *)data, 1, (int32_t)n, g28)) {\n                    goto lab_0x401fef;\n                }\n                // 0x401f63\n                v26 = n + v22;\n                v25 = n + v21;\n            }\n            int64_t v28 = v26;\n            while (n2 > v25) {\n                // 0x401f0c\n                v21 = v25;\n                v22 = v28;\n                v23 = n2 - v21;\n                v24 = a3 - v22;\n                n = v24 > v23 ? v23 : v24;\n                if (n == 0) {\n                    // 0x401ef0\n                    v27 = *v4;\n                    if (v27 >= *v5) {\n                        // 0x401f70\n                        v9 = a2;\n                        if (__overflow(v6, 10) == -1) {\n                            goto lab_0x402019;\n                        }\n                        // 0x401f8b\n                        v26 = 0;\n                        v25 = 0x100000000 * v21 >> 32;\n                    } else {\n                        // 0x401efa\n                        *v4 = v27 + 1;\n                        *(char *)v27 = 10;\n                        v26 = 0;\n                        v25 = v21;\n                    }\n                } else {\n                    // 0x401f26\n                    data = v21 + v3;\n                    v9 = data;\n                    if (n > (int64_t)fwrite_unlocked((int64_t *)data, 1, (int32_t)n, g28)) {\n                        goto lab_0x401fef;\n                    }\n                    // 0x401f63\n                    v26 = n + v22;\n                    v25 = n + v21;\n                }\n                // 0x401f07\n                v28 = v26;\n            }\n            // 0x401ec2\n            v18 = *(int32_t *)&v9;\n            v19 = v28;\n        }\n    } else {\n        // 0x401e9d\n        v9 = v3;\n        int32_t v29 = fwrite_unlocked(&data2, 1, (int32_t)n2, g28); // 0x401eb4\n        v18 = v3;\n        v19 = v8;\n        if (n2 > (int64_t)v29) {\n            goto lab_0x402043;\n        }\n    }\n    // 0x401ec2\n    v7 = v19;\n    v14 = v18;\n    v15 = v7;\n    if (v10 == 0x7800 != ((v18 & 48) == 0)) {\n        goto lab_0x401e33;\n    }\n    goto lab_0x401df8;\n}\n"
        },
        {
            "funcName": "function_4020a0",
            "funcStartAddr": "4020a0",
            "funcEndAddr": "4023fd",
            "decompiledFuncCode": "int64_t function_4020a0(int32_t status) {\n    // 0x4020a0\n    if (status != 0) {\n        // 0x4020ba\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4020df\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4020e6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]\\nBase%d encode or decode FILE, or standard input, to standard output.\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"  -d, --decode          decode data\\n  -i, --ignore-garbage  when decoding, ignore non-alphabet characters\\n  -w, --wrap=COLS       wrap encoded lines after COLS character (default 76).\\n                          Use 0 to disable line wrapping\\n\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g28);\n    __printf_chk(1, dcgettext(NULL, \"\\nThe data are encoded as described for the %s alphabet in RFC 4648.\\nWhen decoding, the input may contain newlines in addition to the bytes of\\nthe formal %s alphabet.  Use --ignore-garbage to attempt to recover\\nfrom any other non-alphabet bytes in the encoded stream.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x4021e0\n    bool v2; // 0x4020a0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402260\n    int64_t v6 = *(int64_t *)v5; // 0x402264\n    int64_t v7 = 7; // 0x40226a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"base32\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402276\n        char v11 = *(char *)v9; // 0x402276\n        char v12 = v11; // 0x402276\n        bool v13 = false; // 0x402276\n        while (v10 == v11) {\n            // 0x40226c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402276\n            int64_t v15 = v8 + v3; // 0x402276\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402282\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 7;\n    }\n    // 0x402282\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402394;\n        } else {\n            // 0x40237e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4023d3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4022e4;\n            } else {\n                goto lab_0x402394;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4022e4;\n        } else {\n            // 0x4022ca\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4023d3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4022e4;\n            } else {\n                goto lab_0x4022e4;\n            }\n        }\n    }\n  lab_0x402394:\n    // 0x402394\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402324\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4020df\n    exit(status);\n    // UNREACHABLE\n  lab_0x4022e4:\n    // 0x4022e4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402324\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4020df\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402400",
            "funcStartAddr": "402400",
            "funcEndAddr": "4025c4",
            "decompiledFuncCode": "int64_t function_402400(uint64_t a1, uint64_t a2, int64_t * a3, int64_t * a4) {\n    // 0x402400\n    if (a2 < 8) {\n        // 0x402568\n        return 0;\n    }\n    char v1 = *(char *)(a1 % 256 + (int64_t)&g3); // 0x40240f\n    if (v1 < 0) {\n        // 0x402568\n        return 0;\n    }\n    unsigned char v2 = *(char *)(a1 + 1); // 0x40241f\n    unsigned char v3 = *(char *)((int64_t)v2 + (int64_t)&g3); // 0x402424\n    if (v3 < 0) {\n        // 0x402568\n        return 0;\n    }\n    int64_t v4 = (int64_t)a4;\n    int64_t v5 = (int64_t)a3;\n    int64_t v6 = v5; // 0x40243c\n    if (a4 != NULL) {\n        // 0x402588\n        *(char *)a3 = v3 / 4 | 8 * v1;\n        *a4 = v4 - 1;\n        v6 = v5 + 1;\n    }\n    unsigned char v7 = *(char *)(a1 + 2); // 0x402442\n    int64_t v8; // 0x402400\n    int64_t v9; // 0x402400\n    if (v7 == 61) {\n        // 0x402570\n        if (*(char *)(a1 + 3) != 61) {\n            // 0x40257c\n            *a3 = v6;\n            return 0;\n        }\n        // 0x402576\n        v8 = v6;\n        if (*(char *)(a1 + 4) != 61) {\n            // 0x40257c\n            *a3 = v6;\n            return 0;\n        }\n        goto lab_0x4025b0;\n    } else {\n        char v10 = *(char *)((int64_t)v7 + (int64_t)&g3); // 0x402450\n        if (v10 < 0) {\n            // 0x40257c\n            *a3 = v6;\n            return 0;\n        }\n        unsigned char v11 = *(char *)(a1 + 3); // 0x402460\n        unsigned char v12 = *(char *)((int64_t)v11 + (int64_t)&g3); // 0x402465\n        if (v12 < 0) {\n            // 0x40257c\n            *a3 = v6;\n            return 0;\n        }\n        int64_t v13 = v6; // 0x40247a\n        if (a4 != NULL) {\n            // 0x40247c\n            *(char *)v6 = 2 * v10 | 64 * v3 | v12 / 16;\n            *a4 = v4 - 1;\n            v13 = v6 + 1;\n        }\n        unsigned char v14 = *(char *)(a1 + 4); // 0x40249b\n        v8 = v13;\n        if (v14 == 61) {\n            goto lab_0x4025b0;\n        } else {\n            unsigned char v15 = *(char *)((int64_t)v14 + (int64_t)&g3); // 0x4024a9\n            if (v15 < 0) {\n                // 0x40257c\n                *a3 = v13;\n                return 0;\n            }\n            int64_t v16 = v13; // 0x4024be\n            if (a4 != NULL) {\n                // 0x4024c0\n                *(char *)v13 = v15 / 2 | 16 * v12;\n                *a4 = v4 - 1;\n                v16 = v13 + 1;\n            }\n            unsigned char v17 = *(char *)(a1 + 5); // 0x4024d9\n            v9 = v16;\n            if (v17 != 61) {\n                char v18 = *(char *)((int64_t)v17 + (int64_t)&g3); // 0x4024e7\n                if (v18 < 0) {\n                    // 0x40257c\n                    *a3 = v16;\n                    return 0;\n                }\n                unsigned char v19 = *(char *)(a1 + 6); // 0x4024f7\n                unsigned char v20 = *(char *)((int64_t)v19 + (int64_t)&g3); // 0x4024fc\n                if (v20 < 0) {\n                    // 0x40257c\n                    *a3 = v16;\n                    return 0;\n                }\n                int64_t v21 = v16; // 0x40250d\n                if (a4 != NULL) {\n                    // 0x40250f\n                    *(char *)v16 = 4 * v18 | 128 * v15 | v20 / 8;\n                    *a4 = v4 - 1;\n                    v21 = v16 + 1;\n                }\n                unsigned char v22 = *(char *)(a1 + 7); // 0x40252f\n                if (v22 == 61) {\n                    // 0x402560\n                    *a3 = v21;\n                    // 0x402568\n                    return 1;\n                }\n                char v23 = *(char *)((int64_t)v22 + (int64_t)&g3); // 0x402539\n                if (v23 < 0) {\n                    // 0x40257c\n                    *a3 = v21;\n                    return 0;\n                }\n                int64_t v24 = v21; // 0x402549\n                if (a4 != NULL) {\n                    // 0x40254b\n                    *(char *)v21 = v23 | 32 * v20;\n                    *a4 = v4 - 1;\n                    v24 = v21 + 1;\n                }\n                // 0x402560\n                *a3 = v24;\n                // 0x402568\n                return 1;\n            }\n            goto lab_0x4025b6;\n        }\n    }\n  lab_0x4025b0:\n    // 0x4025b0\n    v9 = v8;\n    if (*(char *)(a1 + 5) != 61) {\n        // 0x40257c\n        *a3 = v8;\n        return 0;\n    }\n    goto lab_0x4025b6;\n  lab_0x4025b6:\n    // 0x4025b6\n    if (*(char *)(a1 + 6) != 61 || *(char *)(a1 + 7) != 61) {\n        // 0x40257c\n        *a3 = v9;\n        return 0;\n    }\n    // 0x402560\n    *a3 = v9;\n    // 0x402568\n    return 1;\n}\n"
        },
        {
            "funcName": "function_4025d0",
            "funcStartAddr": "4025d0",
            "funcEndAddr": "40282b",
            "decompiledFuncCode": "int64_t function_4025d0(int64_t * a1, int64_t a2, int64_t * a3, int64_t a4) {\n    int64_t result; // 0x4025d0\n    if (a2 == 0 || a4 == 0) {\n        if (a4 != 0) {\n            // 0x402827\n            *(char *)a3 = 0;\n        }\n        // 0x4027de\n        return result;\n    }\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = v1 + a4;\n    int64_t v3 = v2 - 8; // 0x4025d0\n    int64_t v4 = a2; // 0x402714\n    int64_t v5 = (int64_t)a1;\n    int64_t v6 = v1;\n    int64_t v7 = a4;\n    unsigned char v8 = *(char *)v5; // 0x402738\n    int64_t v9 = v8; // 0x402738\n    char v10 = *(char *)((int64_t)(v8 / 8) + (int64_t)\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"); // 0x402746\n    *(char *)v6 = v10;\n    result = v9;\n    int64_t v11; // 0x4025d0\n    int64_t result2; // 0x4025d0\n    int64_t v12; // 0x4025d0\n    int64_t v13; // 0x4025d0\n    int64_t v14; // 0x4025d0\n    while (v7 != 1) {\n        int64_t v15 = 4 * v9; // 0x40275b\n        if (v4 == 1) {\n            unsigned char v16 = *(char *)((v15 & 28) + (int64_t)\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"); // 0x40276b\n            int64_t v17 = v16; // 0x40276b\n            *(char *)(v6 + 1) = v16;\n            result = v17;\n            if (v7 == 2) {\n                return result;\n            } else {\n                // 0x40277b\n                *(char *)(v6 + 2) = 61;\n                result = v17;\n                if (v7 == 3) {\n                    return result;\n                } else {\n                    // 0x402785\n                    *(char *)(v6 + 3) = 61;\n                    v12 = v17;\n                    result = v17;\n                    if (v7 == 4) {\n                        return result;\n                    } else {\n                        goto lab_0x40278f;\n                    }\n                }\n            }\n        }\n        unsigned char v18 = *(char *)(v5 + 1); // 0x4025f8\n        unsigned char v19 = *(char *)((v15 & 28 | (int64_t)(v18 / 64)) + (int64_t)\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"); // 0x40260a\n        *(char *)(v6 + 1) = v19;\n        if (v7 == 2) {\n            // 0x4027de\n            result = v19;\n            return result;\n        }\n        uint64_t v20 = (int64_t)v18; // 0x4025f8\n        unsigned char v21 = *(char *)(v20 / 2 % 32 + (int64_t)\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"); // 0x402626\n        *(char *)(v6 + 2) = v21;\n        if (v7 == 3) {\n            // 0x4027de\n            result = v21;\n            return result;\n        }\n        int64_t v22 = 16 * v20; // 0x40263a\n        if (v4 == 2) {\n            char v23 = *(char *)((v22 & 16) + (int64_t)\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"); // 0x4027c7\n            *(char *)(v6 + 3) = v23;\n            int64_t v24 = v2 - v6; // 0x4027d5\n            v12 = v24;\n            result = v24;\n            if (v24 != 4) {\n                goto lab_0x40278f;\n            } else {\n                return result;\n            }\n        }\n        unsigned char v25 = *(char *)(v5 + 2); // 0x402648\n        int64_t v26 = v25; // 0x402648\n        int64_t v27 = v2 - v6; // 0x40265d\n        char v28 = *(char *)((v22 & 16 | (int64_t)(v25 / 16)) + (int64_t)\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"); // 0x402660\n        *(char *)(v6 + 3) = v28;\n        result = v26;\n        if (v27 == 4) {\n            // break -> 0x4027de\n            break;\n        }\n        int64_t v29 = 2 * v26; // 0x402676\n        if (v4 == 3) {\n            unsigned char v30 = *(char *)((v29 & 30) + (int64_t)\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"); // 0x4027e4\n            int64_t v31 = v30; // 0x4027e4\n            *(char *)(v6 + 4) = v30;\n            v13 = v31;\n            result = v31;\n            if (v27 != 5) {\n                goto lab_0x402799;\n            } else {\n                return result;\n            }\n        }\n        unsigned char v32 = *(char *)(v5 + 3); // 0x402684\n        int64_t v33 = v32; // 0x402684\n        char v34 = *(char *)((v29 & 30 | (int64_t)(v32 / 128)) + (int64_t)\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"); // 0x402694\n        *(char *)(v6 + 4) = v34;\n        result = v33;\n        if (v27 == 5) {\n            // break -> 0x4027de\n            break;\n        }\n        char v35 = *(char *)(v33 / 4 % 32 + (int64_t)\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"); // 0x4026b5\n        *(char *)(v6 + 5) = v35;\n        result = v33;\n        if (v7 == 6) {\n            // break -> 0x4027de\n            break;\n        }\n        int64_t v36 = 8 * v33; // 0x4026cb\n        if (v4 == 4) {\n            unsigned char v37 = *(char *)((v36 & 24) + (int64_t)\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"); // 0x402803\n            int64_t v38 = v37; // 0x402803\n            *(char *)(v6 + 6) = v37;\n            v14 = v38;\n            result = v38;\n            if (v27 != 7) {\n                goto lab_0x4027ad;\n            } else {\n                return result;\n            }\n        }\n        unsigned char v39 = *(char *)(v5 + 4); // 0x4026d8\n        unsigned char v40 = *(char *)((v36 & 24 | (int64_t)(v39 / 32)) + (int64_t)\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"); // 0x4026e8\n        *(char *)(v6 + 6) = v40;\n        if (v27 == 7) {\n            // 0x4027de\n            result = v40;\n            return result;\n        }\n        unsigned char v41 = *(char *)((int64_t)(v39 % 32) + (int64_t)\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"); // 0x402700\n        *(char *)(v6 + 7) = v41;\n        if (v3 == v6) {\n            // 0x4027de\n            result = v41;\n            return result;\n        }\n        // 0x40271e\n        v4 -= 5;\n        int64_t v42 = v6 + 8; // 0x40271e\n        int64_t v43 = v7 - 8; // 0x402722\n        if (v43 == 0 || v4 == 0) {\n            int64_t v44 = v41; // 0x402700\n            result = v44;\n            result2 = v44;\n            v11 = v42;\n            if (v43 == 0) {\n                return result;\n            } else {\n                goto lab_0x40281d;\n            }\n        }\n        v5 += 5;\n        v6 = v42;\n        v7 = v43;\n        v8 = *(char *)v5;\n        v9 = v8;\n        v10 = *(char *)((int64_t)(v8 / 8) + (int64_t)\"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\");\n        *(char *)v6 = v10;\n        result = v9;\n    }\n  lab_0x4027de_5:\n    // 0x4027de\n    return result;\n  lab_0x40278f:\n    // 0x40278f\n    *(char *)(v6 + 4) = 61;\n    v13 = v12;\n    result = v12;\n    if (v7 == 5) {\n        return result;\n    } else {\n        goto lab_0x402799;\n    }\n  lab_0x402799:\n    // 0x402799\n    *(char *)(v6 + 5) = 61;\n    result = v13;\n    if (v7 == 6) {\n        return result;\n    } else {\n        // 0x4027a3\n        *(char *)(v6 + 6) = 61;\n        v14 = v13;\n        result = v13;\n        if (v7 == 7) {\n            return result;\n        } else {\n            goto lab_0x4027ad;\n        }\n    }\n  lab_0x4027ad:\n    // 0x4027ad\n    *(char *)(v6 + 7) = 61;\n    result = v14;\n    if (v3 == v6) {\n        return result;\n    } else {\n        // 0x40271e\n        result = v14;\n        result2 = v14;\n        v11 = v6 + 8;\n        if (v7 == 8) {\n            return result;\n        } else {\n            goto lab_0x40281d;\n        }\n    }\n  lab_0x40281d:\n    // 0x40281d\n    *(char *)v11 = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402830",
            "funcStartAddr": "402830",
            "funcEndAddr": "4028c7",
            "decompiledFuncCode": "int64_t function_402830(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t result = (a2 + 4) / 0xa0000000 & 0x7fffffff8; // 0x402853\n    uint64_t size = result | 1; // 0x40285b\n    if (size < a2) {\n        // 0x402864\n        *(int64_t *)a3 = 0;\n        return 0;\n    }\n    int64_t * mem = malloc((int32_t)size); // 0x402889\n    *(int64_t *)a3 = (int64_t)mem;\n    if (mem == NULL) {\n        // 0x4028b8\n        return size;\n    }\n    // 0x402897\n    function_4025d0((int64_t *)a1, a2, mem, size);\n    return result;\n}\n"
        },
        {
            "funcName": "function_4028d0",
            "funcStartAddr": "4028d0",
            "funcEndAddr": "4028e1",
            "decompiledFuncCode": "int64_t function_4028d0(unsigned char a1) {\n    unsigned char v1 = *(char *)((int64_t)a1 + (int64_t)&g3); // 0x4028d4\n    return (int64_t)(v1 / 128 ^ 1) | 0xffffff00;\n}\n"
        },
        {
            "funcName": "function_4028f0",
            "funcStartAddr": "4028f0",
            "funcEndAddr": "4028f7",
            "decompiledFuncCode": "int64_t function_4028f0(int64_t * a1) {\n    // 0x4028f0\n    *(int32_t *)a1 = 0;\n    int64_t result; // 0x4028f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402900",
            "funcStartAddr": "402900",
            "funcEndAddr": "402b58",
            "decompiledFuncCode": "int64_t function_402900(int64_t * a1, int64_t * a2, int64_t a3, int64_t * a4, int64_t * a5) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = (int64_t)a4; // bp-80, 0x40291d\n    int64_t v3 = v1; // bp-64, 0x402927\n    int64_t v4; // 0x402900\n    int32_t v5 = v4;\n    char v6 = 1; // 0x402931\n    bool v7 = true; // 0x402931\n    int64_t v8; // 0x402900\n    if (a1 != NULL) {\n        // 0x402937\n        v8 = v4 & 0xffffffff;\n        v6 = a3 != 0;\n        v7 = a3 != 0 == v5 == 0;\n    }\n    int64_t v9 = (int64_t)a1 + 4; // 0x402949\n    int32_t v10 = v5; // 0x40294d\n    int32_t v11 = v5; // 0x40294d\n    int64_t v12 = v8; // 0x40294d\n    int64_t v13 = (int64_t)a2; // 0x40294d\n    int64_t v14 = a3; // 0x40294d\n    int64_t v15 = v1; // 0x40294d\n    int64_t v16; // 0x402900\n    int64_t v17; // 0x402900\n    int32_t v18; // 0x402acc\n    int32_t v19; // 0x4029cd\n    int64_t v20; // 0x402900\n    int64_t v21; // 0x402900\n    int64_t v22; // 0x402900\n    int64_t result; // 0x402900\n    int64_t v23; // 0x402900\n    int64_t v24; // 0x402900\n    int64_t v25; // 0x402900\n    int64_t v26; // 0x402900\n    int64_t v27; // 0x402900\n    int64_t v28; // 0x402900\n    int64_t v29; // 0x402900\n    while (true) {\n      lab_0x402994_2:;\n        int64_t v30 = v15;\n        int64_t v31 = v14;\n        int64_t v32 = v13;\n        v19 = v11;\n        v18 = v10;\n        int64_t v33 = v12; // 0x40299a\n        int64_t v34 = v30; // 0x40299a\n        int64_t v35 = v32; // 0x40299a\n        int64_t v36 = v31; // 0x40299a\n        int64_t v37 = v30; // 0x40299a\n        if (v7) {\n            int64_t v38 = v32; // 0x402a6c\n            int64_t v39 = v31 + v32 - v38; // 0x402a89\n            int64_t v40 = function_402400(v38, v39, &v2, &v3); // 0x402a8f\n            int64_t v41 = v3;\n            v33 = v40;\n            v34 = v41;\n            v35 = v38;\n            v36 = v39;\n            v37 = v30;\n            v38 += 8;\n            while ((char)v40 != 0) {\n                int64_t v42 = v41;\n                v39 = v31 + v32 - v38;\n                v40 = function_402400(v38, v39, &v2, &v3);\n                v41 = v3;\n                v33 = v40;\n                v34 = v41;\n                v35 = v38;\n                v36 = v39;\n                v37 = v42;\n                v38 += 8;\n            }\n        }\n        // 0x4029a0\n        v28 = v36;\n        int64_t v43 = v34;\n        unsigned char v44 = v6 & (char)(v28 == 0); // 0x4029a6\n        int64_t v45 = v33 & -256 | (int64_t)v44; // 0x4029a6\n        result = v45;\n        v26 = v43;\n        if (v44 != 0) {\n            // break -> 0x402a4a\n            break;\n        }\n        int64_t v46 = v37;\n        v24 = v35;\n        if (v28 != 0) {\n            // 0x402950\n            if (*(char *)v24 == 10) {\n                if (a1 == NULL) {\n                    // 0x402b00\n                    v3 = v46;\n                    v2 += v43 - v46;\n                    v17 = v24;\n                    v25 = v24;\n                    v29 = v28;\n                    v22 = v28 + v24;\n                    goto lab_0x402a22;\n                } else {\n                    // 0x402aed\n                    v10 = v18;\n                    v11 = v19;\n                    v12 = v45;\n                    v13 = v24 + 1;\n                    v14 = v28 - 1;\n                    v15 = v43;\n                    goto lab_0x402994_2;\n                }\n            } else {\n                // 0x402959\n                v3 = v46;\n                int64_t v47 = v28 + v24; // 0x402961\n                v2 += v43 - v46;\n                v16 = v24;\n                v23 = v24;\n                v27 = v28;\n                v20 = v47;\n                v21 = v47;\n                if (a1 != NULL) {\n                    goto lab_0x4029cd;\n                } else {\n                    goto lab_0x402972;\n                }\n            }\n        } else {\n            // 0x4029b4\n            v3 = v46;\n            v2 += v43 - v46;\n            v21 = v24;\n            result = 1;\n            v26 = v46;\n            if (a1 == NULL) {\n                // break -> 0x402a4a\n                break;\n            }\n            goto lab_0x4029cd;\n        }\n    }\n  lab_0x402a4a_2:\n    // 0x402a4a\n    *a5 = v1 - v26;\n    return result;\n  lab_0x402a40_2:\n    // 0x402a40\n    result = 1;\n    v26 = v3;\n    goto lab_0x402a4a_2;\n  lab_0x402972:;\n    int64_t v48 = function_402400(v16, v27, &v2, &v3); // 0x40297c\n    result = v48;\n    v26 = v3;\n    if ((char)v48 == 0) {\n        // break -> 0x402a4a\n        goto lab_0x402a4a_2;\n    }\n    int32_t v49 = v16;\n    v10 = v49;\n    v11 = v49;\n    v12 = v48;\n    v13 = v23;\n    v14 = v20 - v23;\n    v15 = v3;\n    goto lab_0x402994;\n  lab_0x4029cd:;\n    int64_t v50 = v21;\n    int32_t v51 = v19; // 0x402900\n    switch (v19) {\n        case 8: {\n            // 0x402aa8\n            *(int32_t *)a1 = 0;\n            goto lab_0x402aaf;\n        }\n        case 0: {\n            goto lab_0x402aaf;\n        }\n        default: {\n            goto lab_0x4029e1;\n        }\n    }\n  lab_0x402aaf:\n    // 0x402aaf\n    v51 = v18;\n    if (v28 < 8) {\n        goto lab_0x4029e1;\n    } else {\n        // 0x402ab5\n        v51 = v18;\n        if (function_406630(v24, 10, 8) == 0) {\n            // 0x402b47\n            v16 = v24;\n            v23 = v24 + 8;\n            v27 = 8;\n            v20 = v50;\n            goto lab_0x402972;\n        } else {\n            goto lab_0x4029e1;\n        }\n    }\n  lab_0x4029e1:;\n    int64_t v52 = v51;\n    int64_t v53 = v52; // 0x4029e4\n    int64_t v54 = v24; // 0x4029e4\n    int64_t v55 = v52; // 0x4029e4\n    int64_t v56 = v24; // 0x4029e4\n    if (v24 < v50) {\n        int64_t v57 = v53;\n        int64_t v58 = v54 + 1; // 0x4029f0\n        char v59 = *(char *)v54; // 0x4029f4\n        int64_t v60 = v57; // 0x4029fb\n        int64_t v61; // 0x4029fd\n        int32_t v62; // 0x402a00\n        if (v59 != 10) {\n            // 0x4029fd\n            v61 = v57 + 1;\n            v62 = v61;\n            *(int32_t *)a1 = v62;\n            *(char *)(v57 + v9) = v59;\n            v16 = v9;\n            v23 = v58;\n            v27 = 8;\n            v20 = v50;\n            if (v62 == 8) {\n                goto lab_0x402972;\n            }\n            // 0x402a11\n            v60 = v61 & 0xffffffff;\n        }\n        // 0x402a13\n        v54 = v58;\n        v55 = v60;\n        v56 = v58;\n        while (v58 != v50) {\n            // 0x4029f0\n            v57 = v60;\n            v58 = v54 + 1;\n            v59 = *(char *)v54;\n            v60 = v57;\n            if (v59 != 10) {\n                // 0x4029fd\n                v61 = v57 + 1;\n                v62 = v61;\n                *(int32_t *)a1 = v62;\n                *(char *)(v57 + v9) = v59;\n                v16 = v9;\n                v23 = v58;\n                v27 = 8;\n                v20 = v50;\n                if (v62 == 8) {\n                    goto lab_0x402972;\n                }\n                // 0x402a11\n                v60 = v61 & 0xffffffff;\n            }\n            // 0x402a13\n            v54 = v58;\n            v55 = v60;\n            v56 = v58;\n        }\n    }\n    int64_t v63 = v55 & 0xffffffff; // 0x402a18\n    v17 = v9;\n    v25 = v56;\n    v29 = v63;\n    v22 = v50;\n    if (v63 == 0) {\n        goto lab_0x402a40_2;\n    }\n    goto lab_0x402a22;\n  lab_0x402a22:\n    // 0x402a22\n    v16 = v17;\n    v23 = v25;\n    v27 = v29;\n    v20 = v22;\n    if (v29 < 8) {\n        // 0x402a2c\n        int64_t v64; // 0x402900\n        v16 = v64;\n        int64_t v65; // 0x402900\n        v23 = v65;\n        int64_t v66; // 0x402900\n        v27 = v66;\n        int64_t v67; // 0x402900\n        v20 = v67;\n        bool v68; // 0x402900\n        if (!v68) {\n            goto lab_0x402a40_2;\n        }\n    }\n    goto lab_0x402972;\n  lab_0x402994:\n    // 0x402994\n    goto lab_0x402994_2;\n}\n"
        },
        {
            "funcName": "function_402b60",
            "funcStartAddr": "402b60",
            "funcEndAddr": "402c0d",
            "decompiledFuncCode": "int64_t function_402b60(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = a3 / 8; // 0x402b6a\n    int64_t size = v1 + 5 + 4 * v1; // 0x402b76\n    int64_t v2 = size; // bp-48, 0x402b87\n    int64_t * mem = malloc((int32_t)size); // 0x402b8c\n    int64_t * v3 = (int64_t *)a4; // 0x402b91\n    *v3 = (int64_t)mem;\n    if (mem == NULL) {\n        // 0x402bd0\n        return 1;\n    }\n    uint64_t result = function_402900((int64_t *)a1, (int64_t *)a2, a3, mem, &v2); // 0x402baa\n    if ((char)result == 0) {\n        // 0x402be8\n        free(mem);\n        *v3 = 0;\n        return result % 256;\n    }\n    if (a5 == 0) {\n        // 0x402bd0\n        return 1;\n    }\n    // 0x402bb8\n    *(int64_t *)a5 = v2;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402c10",
            "funcStartAddr": "402c10",
            "funcEndAddr": "402c18",
            "decompiledFuncCode": "int64_t function_402c10(int64_t a1) {\n    // 0x402c10\n    g35 = a1;\n    int64_t result; // 0x402c10\n    return result;\n}\n"
        },
        {
            "funcName": "function_402c20",
            "funcStartAddr": "402c20",
            "funcEndAddr": "402c28",
            "decompiledFuncCode": "int64_t function_402c20(int64_t a1) {\n    // 0x402c20\n    g34 = a1;\n    int64_t result; // 0x402c20\n    return result;\n}\n"
        },
        {
            "funcName": "function_402c30",
            "funcStartAddr": "402c30",
            "funcEndAddr": "402cce",
            "decompiledFuncCode": "int64_t function_402c30(void) {\n    // 0x402c30\n    int32_t * err_num; // 0x402c46\n    if ((int32_t)function_406740((int64_t)g28) == 0) {\n        goto lab_0x402c5c;\n    } else {\n        // 0x402c46\n        err_num = __errno_location();\n        if (g34 == 0) {\n            goto lab_0x402c73;\n        } else {\n            // 0x402c57\n            if (*err_num != 32) {\n                goto lab_0x402c73;\n            } else {\n                goto lab_0x402c5c;\n            }\n        }\n    }\n  lab_0x402c5c:;\n    int64_t result = function_406740((int64_t)g31); // 0x402c63\n    if ((int32_t)result == 0) {\n        // 0x402c6c\n        return result;\n    }\n    // 0x402cae\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x402c73:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x402c7f\n    if (g35 == 0) {\n        // 0x402cb9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402c93\n        error(0, *err_num, \"%s: %s\", (char *)function_404780((int64_t)g35), v1);\n    }\n    // 0x402cae\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402cd0",
            "funcStartAddr": "402cd0",
            "funcEndAddr": "402cd5",
            "decompiledFuncCode": "int64_t function_402cd0(void) {\n    // 0x402cd0\n    int64_t fd; // 0x402cd0\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_402ce0",
            "funcStartAddr": "402ce0",
            "funcEndAddr": "402d01",
            "decompiledFuncCode": "int64_t function_402ce0(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x402ce0\n    if (stream == 0) {\n        // 0x402d00\n        int64_t result; // 0x402ce0\n        return result;\n    }\n    // 0x402ce5\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_402d10",
            "funcStartAddr": "402d10",
            "funcEndAddr": "402da9",
            "decompiledFuncCode": "int64_t function_402d10(int64_t str) {\n    // 0x402d10\n    if (str == 0) {\n        // 0x402d89\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g31);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x402d1e\n    int64_t result = (int64_t)found_char_pos; // 0x402d1e\n    if (found_char_pos == NULL) {\n        // 0x402d79\n        g36 = str;\n        g30 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402d28\n    if (v1 - str < 7) {\n        // 0x402d79\n        g36 = str;\n        g30 = str;\n        return result;\n    }\n    // 0x402d38\n    bool v2; // 0x402d10\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402d10\n    int64_t v5 = result - 6; // 0x402d10\n    int64_t v6 = 7; // 0x402d46\n    unsigned char v7 = *(char *)v5; // 0x402d46\n    char v8 = *(char *)v4; // 0x402d46\n    char v9 = v8; // 0x402d46\n    bool v10 = false; // 0x402d46\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402d50\n    int64_t v13 = v1; // 0x402d50\n    int64_t v14 = 3; // 0x402d50\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402d79\n        g36 = str;\n        g30 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402d62\n    char v16 = *(char *)v12; // 0x402d62\n    char v17 = v16; // 0x402d62\n    bool v18 = false; // 0x402d62\n    while (v15 == v16) {\n        // 0x402d52\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x402d6c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x402d6e\n        v20 = result + 4;\n        g27 = v20;\n    }\n    // 0x402d79\n    g36 = v20;\n    g30 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402db0",
            "funcStartAddr": "402db0",
            "funcEndAddr": "402ea2",
            "decompiledFuncCode": "int64_t function_402db0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402dc4\n    int64_t result = (int64_t)v1; // 0x402dc4\n    if (result != a1) {\n        // 0x402dd1\n        return result;\n    }\n    int64_t v2 = function_406800(); // 0x402de0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402e96\n    if (v3 == 85) {\n        // 0x402df0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402e88\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x402e1e\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x402e2b\n        // 0x402dd1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402e88\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x402e6d\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x402e7a\n    // 0x402dd1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402eb0",
            "funcStartAddr": "402eb0",
            "funcEndAddr": "402f07",
            "decompiledFuncCode": "int64_t function_402eb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402eb0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402ef8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f07",
            "funcStartAddr": "402f07",
            "funcEndAddr": "4040d1",
            "decompiledFuncCode": "int64_t function_402f07(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402f51\n    int64_t v3 = 0; // 0x402f51\n    int64_t v4; // 0x402f07\n    int64_t v5; // 0x402f07\n    int64_t v6; // 0x402f07\n    int64_t v7; // 0x402f07\n    int64_t v8; // 0x402f07\n    int64_t v9; // 0x402f07\n    int64_t v10; // 0x402f07\n    int64_t v11; // 0x402f07\n    int64_t v12; // 0x402f07\n    int64_t v13; // 0x402f07\n    int64_t v14; // 0x402f07\n    int64_t v15; // 0x402f07\n    int64_t v16; // 0x402f07\n    int64_t v17; // 0x402f07\n    int64_t v18; // 0x402f07\n    int64_t result; // 0x402f07\n    int64_t v19; // 0x402f07\n    int32_t wc; // bp+132, 0x402f07\n    int64_t ps; // bp+136, 0x402f07\n    char v20; // 0x4034c0\n    int64_t v21; // 0x4034c0\n    int64_t v22; // 0x403868\n    int64_t v23; // 0x402f07\n    int64_t v24; // 0x403887\n    int32_t v25; // 0x402f07\n    while (true) {\n      lab_0x402f58_2:\n        // 0x402f58\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402f07\n        int64_t v27; // 0x402f8c\n        while (true) {\n          lab_0x402f58:\n            // 0x402f58\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402f63\n            if (v15 == -1) {\n                // 0x402f65\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402f73\n            if (v28) {\n                // break (via goto) -> 0x4036d8\n                goto lab_0x4036d8;\n            }\n            // 0x402f7c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g49 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40356b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4030b1;\n                    }\n                    // 0x40398d\n                    v26 = v5 + 1;\n                    goto lab_0x402f58;\n                }\n                case 7: {\n                    goto lab_0x4030b1;\n                }\n                case 8: {\n                    goto lab_0x4030b1;\n                }\n                case 9: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4030b1;\n                }\n                case 12: {\n                    goto lab_0x4030b1;\n                }\n                case 13: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40307d;\n                }\n                case 36: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4030b1;\n                }\n                case 38: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4030b1;\n                }\n                case 44: {\n                    goto lab_0x4030b1;\n                }\n                case 45: {\n                    goto lab_0x4030b1;\n                }\n                case 46: {\n                    goto lab_0x4030b1;\n                }\n                case 47: {\n                    goto lab_0x4030b1;\n                }\n                case 48: {\n                    goto lab_0x4030b1;\n                }\n                case 49: {\n                    goto lab_0x4030b1;\n                }\n                case 50: {\n                    goto lab_0x4030b1;\n                }\n                case 51: {\n                    goto lab_0x4030b1;\n                }\n                case 52: {\n                    goto lab_0x4030b1;\n                }\n                case 53: {\n                    goto lab_0x4030b1;\n                }\n                case 54: {\n                    goto lab_0x4030b1;\n                }\n                case 55: {\n                    goto lab_0x4030b1;\n                }\n                case 56: {\n                    goto lab_0x4030b1;\n                }\n                case 57: {\n                    goto lab_0x4030b1;\n                }\n                case 58: {\n                    goto lab_0x4030b1;\n                }\n                case 59: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4030b1;\n                }\n                case 66: {\n                    goto lab_0x4030b1;\n                }\n                case 67: {\n                    goto lab_0x4030b1;\n                }\n                case 68: {\n                    goto lab_0x4030b1;\n                }\n                case 69: {\n                    goto lab_0x4030b1;\n                }\n                case 70: {\n                    goto lab_0x4030b1;\n                }\n                case 71: {\n                    goto lab_0x4030b1;\n                }\n                case 72: {\n                    goto lab_0x4030b1;\n                }\n                case 73: {\n                    goto lab_0x4030b1;\n                }\n                case 74: {\n                    goto lab_0x4030b1;\n                }\n                case 75: {\n                    goto lab_0x4030b1;\n                }\n                case 76: {\n                    goto lab_0x4030b1;\n                }\n                case 77: {\n                    goto lab_0x4030b1;\n                }\n                case 78: {\n                    goto lab_0x4030b1;\n                }\n                case 79: {\n                    goto lab_0x4030b1;\n                }\n                case 80: {\n                    goto lab_0x4030b1;\n                }\n                case 81: {\n                    goto lab_0x4030b1;\n                }\n                case 82: {\n                    goto lab_0x4030b1;\n                }\n                case 83: {\n                    goto lab_0x4030b1;\n                }\n                case 84: {\n                    goto lab_0x4030b1;\n                }\n                case 85: {\n                    goto lab_0x4030b1;\n                }\n                case 86: {\n                    goto lab_0x4030b1;\n                }\n                case 87: {\n                    goto lab_0x4030b1;\n                }\n                case 88: {\n                    goto lab_0x4030b1;\n                }\n                case 89: {\n                    goto lab_0x4030b1;\n                }\n                case 90: {\n                    goto lab_0x4030b1;\n                }\n                case 91: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4030b1;\n                }\n                case 94: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4030b1;\n                }\n                case 96: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4030b1;\n                }\n                case 98: {\n                    goto lab_0x4030b1;\n                }\n                case 99: {\n                    goto lab_0x4030b1;\n                }\n                case 100: {\n                    goto lab_0x4030b1;\n                }\n                case 101: {\n                    goto lab_0x4030b1;\n                }\n                case 102: {\n                    goto lab_0x4030b1;\n                }\n                case 103: {\n                    goto lab_0x4030b1;\n                }\n                case 104: {\n                    goto lab_0x4030b1;\n                }\n                case 105: {\n                    goto lab_0x4030b1;\n                }\n                case 106: {\n                    goto lab_0x4030b1;\n                }\n                case 107: {\n                    goto lab_0x4030b1;\n                }\n                case 108: {\n                    goto lab_0x4030b1;\n                }\n                case 109: {\n                    goto lab_0x4030b1;\n                }\n                case 110: {\n                    goto lab_0x4030b1;\n                }\n                case 111: {\n                    goto lab_0x4030b1;\n                }\n                case 112: {\n                    goto lab_0x4030b1;\n                }\n                case 113: {\n                    goto lab_0x4030b1;\n                }\n                case 114: {\n                    goto lab_0x4030b1;\n                }\n                case 115: {\n                    goto lab_0x4030b1;\n                }\n                case 116: {\n                    goto lab_0x4030b1;\n                }\n                case 117: {\n                    goto lab_0x4030b1;\n                }\n                case 118: {\n                    goto lab_0x4030b1;\n                }\n                case 119: {\n                    goto lab_0x4030b1;\n                }\n                case 120: {\n                    goto lab_0x4030b1;\n                }\n                case 121: {\n                    goto lab_0x4030b1;\n                }\n                case 122: {\n                    goto lab_0x4030b1;\n                }\n                case 123: {\n                    goto lab_0x403055;\n                }\n                case 124: {\n                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403055;\n                }\n                case 126: {\n                    goto lab_0x40307d;\n                }\n                default: {\n                    goto lab_0x403455;\n                }\n            }\n        }\n      lab_0x403455:\n        if (v23 != 1) {\n            // 0x4037c0\n            ps = 0;\n            int64_t len = v15; // 0x4037d0\n            if (v15 == -1) {\n                // 0x4037d2\n                len = strlen((char *)str);\n            }\n            // 0x4037fe\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40385f:\n                // 0x40385f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403864\n                int64_t v30 = v29 + str;\n                v24 = function_4065b0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x403dda_2;\n                    }\n                    case -1: {\n                        goto lab_0x403dda_2;\n                    }\n                    case -2: {\n                        // 0x403ebd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403ef7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x403efa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403f07\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403f00\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x403dda\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x403dda_2;\n                    }\n                    case 1: {\n                        goto lab_0x403830;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4038dc\n                        char v34 = *(char *)v33; // 0x4038ed\n                        unsigned char v35; // 0x402f07\n                        if (v34 < 125) {\n                            // 0x4038f8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40390f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4038e0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4038ed\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4038f8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40390f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4038e0\n                            v33++;\n                        }\n                        goto lab_0x403830;\n                    }\n                }\n            }\n            goto lab_0x403dda_2;\n        } else {\n            // 0x4034a4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4030b1;\n        }\n    }\n  lab_0x4036d8:\n    // 0x4036d8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x403fda\n        if (v8 > result) {\n            // 0x403fe3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403307\n        return result;\n    }\n    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4030b1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4030c0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4032ca_2;\n        }\n    }\n    int64_t v39 = result; // 0x4031c1\n    char v40 = v20; // 0x4031c1\n    int64_t v41 = v38; // 0x4031c1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4031c1\n    int64_t v43 = v36; // 0x4031c1\n    goto lab_0x40313d;\n  lab_0x4032ca_2:\n    // 0x403307\n    return function_402eb0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403dda_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4030b1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4039ae\n        int64_t v50 = v5 + 1; // 0x403a91\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403a98\n        char v52 = v20; // 0x403a98\n        int64_t v53 = result; // 0x403a98\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403a61\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403a65\n            int64_t v56 = v54 + 1; // 0x403a6a\n            int64_t v57 = v51 + 1; // 0x403a91\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x403a5c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403a61\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403a65\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40313d;\n    }\n  lab_0x403830:\n    // 0x403830\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40384f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403852\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x403dda\n        goto lab_0x403dda_2;\n    }\n    goto lab_0x40385f;\n  lab_0x40307d:\n    // 0x40307d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4032ca_2;\n    }\n    goto lab_0x4030b1;\n  lab_0x403055:;\n    bool v60 = v15 == 1; // 0x403060\n    if (v15 == -1) {\n        // 0x403062\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40306e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4030b1;\n    } else {\n        goto lab_0x40307d;\n    }\n  lab_0x40313d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403142\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403146\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402f58_2;\n}\n"
        },
        {
            "funcName": "function_4040e0",
            "funcStartAddr": "4040e0",
            "funcEndAddr": "40427e",
            "decompiledFuncCode": "int64_t function_4040e0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4040e2\n    int32_t * v3 = __errno_location(); // 0x4040fc\n    int64_t v4 = (int64_t)g20; // 0x404101\n    int32_t v5 = *v3; // 0x40410b\n    int64_t v6 = v4; // 0x404121\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x404279\n            function_405140(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x404130\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x404137\n        int64_t v9; // 0x4040e0\n        if (g20 == &g21) {\n            int64_t v10 = function_404f50(0, v8); // 0x40425a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x40425f\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404f50(v4, v8); // 0x40414b\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x40415a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x40415a\n        int32_t v14 = v7; // 0x404161\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x404191\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40419b\n    int64_t * v17 = (int64_t *)v15; // 0x40419e\n    uint64_t v18 = *v17; // 0x40419e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4041a1\n    int64_t result = *v19; // 0x4041a1\n    int64_t v20; // 0x4040e0\n    uint64_t v21 = function_402eb0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4041c4\n    if (v18 > v21) {\n        // 0x40423b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4041d7\n    *v17 = v22;\n    if (result != (int64_t)&g37) {\n        // 0x4041e7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404ef0(v22); // 0x404201\n    *v19 = result2;\n    int64_t v23; // 0x4040e0\n    function_402eb0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40423b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404280",
            "funcStartAddr": "404280",
            "funcEndAddr": "4042b4",
            "decompiledFuncCode": "int64_t function_404280(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x404287\n    int64_t result = function_4050f0(a1 == 0 ? (int64_t)&g38 : a1, 56); // 0x4042a6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4042c0",
            "funcStartAddr": "4042c0",
            "funcEndAddr": "4042cf",
            "decompiledFuncCode": "int64_t function_4042c0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g38 : a1); // 0x4042cc\n    return result;\n}\n"
        },
        {
            "funcName": "function_4042d0",
            "funcStartAddr": "4042d0",
            "funcEndAddr": "4042df",
            "decompiledFuncCode": "int64_t function_4042d0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g38 : a1; // 0x4042d8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g38;\n}\n"
        },
        {
            "funcName": "function_4042e0",
            "funcStartAddr": "4042e0",
            "funcEndAddr": "404313",
            "decompiledFuncCode": "int64_t function_4042e0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g38 + 8 : a1 + 8; // 0x4042f9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4042fe\n    uint32_t v3 = *v2; // 0x4042fe\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404302\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404320",
            "funcStartAddr": "404320",
            "funcEndAddr": "404333",
            "decompiledFuncCode": "int64_t function_404320(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g38 + 4 : a1 + 4); // 0x40432c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404340",
            "funcStartAddr": "404340",
            "funcEndAddr": "40436b",
            "decompiledFuncCode": "int64_t function_404340(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g38 : a1; // 0x404348\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404365\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40435c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g38;\n}\n"
        },
        {
            "funcName": "function_404370",
            "funcStartAddr": "404370",
            "funcEndAddr": "4043e2",
            "decompiledFuncCode": "int64_t function_404370(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g38 : a5; // 0x404392\n    int32_t * v2 = __errno_location(); // 0x40439b\n    uint32_t v3 = *(int32_t *)v1; // 0x4043bb\n    int64_t result = function_402eb0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4043ca\n    return result;\n}\n"
        },
        {
            "funcName": "function_4043f0",
            "funcStartAddr": "4043f0",
            "funcEndAddr": "4044d1",
            "decompiledFuncCode": "int64_t function_4043f0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g38 : a4; // 0x404412\n    int32_t * v2 = __errno_location(); // 0x404418\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404437\n    int32_t * v4 = (int32_t *)v1; // 0x40443a\n    int64_t v5 = function_402eb0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404455\n    int64_t v6 = v5 + 1; // 0x40445a\n    int64_t result = function_404ef0(v6); // 0x40446f\n    function_402eb0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4044b4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4044bd\n    return result;\n}\n"
        },
        {
            "funcName": "function_4044e0",
            "funcStartAddr": "4044e0",
            "funcEndAddr": "4044ea",
            "decompiledFuncCode": "int64_t function_4044e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4044e0\n    return function_4043f0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4044f0",
            "funcStartAddr": "4044f0",
            "funcEndAddr": "404585",
            "decompiledFuncCode": "int64_t function_4044f0(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x4044f0\n    int64_t v2 = v1; // 0x4044f0\n    int64_t v3 = v2; // 0x404504\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x404523\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g50;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404520\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g50;\n        }\n    }\n    int64_t v6 = v3; // 0x40453d\n    if (g21 != 0x60b2c0) {\n        // 0x40453f\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g37;\n        v6 = &g50;\n    }\n    int64_t result = v6; // 0x404561\n    if (g20 != &g21) {\n        // 0x404563\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g50;\n    }\n    // 0x404576\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404590",
            "funcStartAddr": "404590",
            "funcEndAddr": "4045a1",
            "decompiledFuncCode": "int64_t function_404590(void) {\n    // 0x404590\n    int64_t v1; // 0x404590\n    return function_4040e0(v1, v1, -1, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_4045b0",
            "funcStartAddr": "4045b0",
            "funcEndAddr": "4045ba",
            "decompiledFuncCode": "int64_t function_4045b0(void) {\n    // 0x4045b0\n    int64_t v1; // 0x4045b0\n    return function_4040e0(v1, v1, v1, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_4045c0",
            "funcStartAddr": "4045c0",
            "funcEndAddr": "4045d6",
            "decompiledFuncCode": "int64_t function_4045c0(int64_t a1) {\n    // 0x4045c0\n    return function_4040e0(0, a1, -1, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_4045e0",
            "funcStartAddr": "4045e0",
            "funcEndAddr": "4045f2",
            "decompiledFuncCode": "int64_t function_4045e0(int64_t a1, int64_t a2) {\n    // 0x4045e0\n    return function_4040e0(0, a1, a2, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_404600",
            "funcStartAddr": "404600",
            "funcEndAddr": "404668",
            "decompiledFuncCode": "int64_t function_404600(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404610\n    return function_4040e0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404670",
            "funcStartAddr": "404670",
            "funcEndAddr": "4046d4",
            "decompiledFuncCode": "int64_t function_404670(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404680\n    return function_4040e0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4046e0",
            "funcStartAddr": "4046e0",
            "funcEndAddr": "4046ec",
            "decompiledFuncCode": "int64_t function_4046e0(int64_t a1, int64_t a2) {\n    // 0x4046e0\n    return function_404600(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4046f0",
            "funcStartAddr": "4046f0",
            "funcEndAddr": "4046ff",
            "decompiledFuncCode": "int64_t function_4046f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4046f0\n    return function_404670(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404700",
            "funcStartAddr": "404700",
            "funcEndAddr": "404770",
            "decompiledFuncCode": "int64_t function_404700(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g38); // 0x40470d\n    int128_t v2 = __asm_movdqa(g39); // 0x404715\n    int128_t v3 = __asm_movdqa(g40); // 0x40471d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404732\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404748\n    uint32_t v6 = *v5; // 0x404748\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40474d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4040e0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404770",
            "funcStartAddr": "404770",
            "funcEndAddr": "40477d",
            "decompiledFuncCode": "int64_t function_404770(int64_t a1, int64_t a2) {\n    // 0x404770\n    return function_404700(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404780",
            "funcStartAddr": "404780",
            "funcEndAddr": "404791",
            "decompiledFuncCode": "int64_t function_404780(int64_t a1) {\n    // 0x404780\n    return function_404700(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4047a0",
            "funcStartAddr": "4047a0",
            "funcEndAddr": "4047aa",
            "decompiledFuncCode": "int64_t function_4047a0(void) {\n    // 0x4047a0\n    int64_t v1; // 0x4047a0\n    return function_404700(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_4047b0",
            "funcStartAddr": "4047b0",
            "funcEndAddr": "40481e",
            "decompiledFuncCode": "int64_t function_4047b0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4047ca\n    return function_4040e0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404820",
            "funcStartAddr": "404820",
            "funcEndAddr": "40488c",
            "decompiledFuncCode": "int64_t function_404820(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g38); // 0x404827\n    int128_t v2 = __asm_movdqa(g39); // 0x40482f\n    int128_t v3 = __asm_movdqa(g40); // 0x404837\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404859\n    if (a2 == 0 || a3 == 0) {\n        // 0x404887\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40486a\n    return function_4040e0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404890",
            "funcStartAddr": "404890",
            "funcEndAddr": "404899",
            "decompiledFuncCode": "int64_t function_404890(void) {\n    // 0x404890\n    int64_t v1; // 0x404890\n    return function_404820(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4048a0",
            "funcStartAddr": "4048a0",
            "funcEndAddr": "4048b7",
            "decompiledFuncCode": "int64_t function_4048a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4048a0\n    return function_404820(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4048c0",
            "funcStartAddr": "4048c0",
            "funcEndAddr": "4048d3",
            "decompiledFuncCode": "int64_t function_4048c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4048c0\n    return function_404820(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4048e0",
            "funcStartAddr": "4048e0",
            "funcEndAddr": "4048ea",
            "decompiledFuncCode": "int64_t function_4048e0(void) {\n    // 0x4048e0\n    int64_t v1; // 0x4048e0\n    return function_4040e0(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_4048f0",
            "funcStartAddr": "4048f0",
            "funcEndAddr": "404902",
            "decompiledFuncCode": "int64_t function_4048f0(int64_t a1, int64_t a2) {\n    // 0x4048f0\n    return function_4040e0(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_404910",
            "funcStartAddr": "404910",
            "funcEndAddr": "404921",
            "decompiledFuncCode": "int64_t function_404910(void) {\n    // 0x404910\n    int64_t v1; // 0x404910\n    return function_4040e0(v1, v1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_404930",
            "funcStartAddr": "404930",
            "funcEndAddr": "404946",
            "decompiledFuncCode": "int64_t function_404930(int64_t a1) {\n    // 0x404930\n    return function_4040e0(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_404950",
            "funcStartAddr": "404950",
            "funcEndAddr": "404d2d",
            "decompiledFuncCode": "int64_t function_404950(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4049e8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40496c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404986\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4049cb\n    if (a6 < 10) {\n        // 0x4049da\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404ad2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404d30",
            "funcStartAddr": "404d30",
            "funcEndAddr": "404d50",
            "decompiledFuncCode": "int64_t function_404d30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404d30\n    if (a5 == 0) {\n        // 0x404d4b\n        return function_404950(a1, a2, a3, a4, a5, 0, (int64_t)&g50);\n    }\n    int64_t v1 = 0; // 0x404d37\n    v1++;\n    int64_t v2 = v1; // 0x404d49\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404d40\n        v1++;\n        v2 = v1;\n    }\n    // 0x404d4b\n    return function_404950(a1, a2, a3, a4, a5, v2, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_404d50",
            "funcStartAddr": "404d50",
            "funcEndAddr": "404db0",
            "decompiledFuncCode": "int64_t function_404d50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404d50\n    int64_t v3 = &v2; // 0x404d50\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404d83\n    int64_t v6; // 0x404d6d\n    int64_t * v7; // 0x404d8b\n    int64_t v8; // 0x404d8b\n    int64_t v9; // 0x404d97\n    if (v5 < 48) {\n        // 0x404d60\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404da3\n            break;\n        }\n    } else {\n        // 0x404d8b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404da3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404d81\n    while (v4 != 9) {\n        // 0x404d79\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404d60\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404da3\n                break;\n            }\n        } else {\n            // 0x404d8b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404da3\n                break;\n            }\n        }\n        // 0x404d79\n        v10 = 10;\n    }\n    // 0x404da3\n    return function_404950(a1, a2, a3, a4, v3, v10, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_404db0",
            "funcStartAddr": "404db0",
            "funcEndAddr": "404e6c",
            "decompiledFuncCode": "int64_t function_404db0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x404db0\n    int64_t v1; // bp-168, 0x404db0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404db0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404db0\n    int64_t v8; // 0x404db0\n    int64_t v9; // bp-56, 0x404db0\n    int64_t v10; // 0x404e15\n    int64_t v11; // 0x404e39\n    if ((int32_t)v6 < 48) {\n        // 0x404e00\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404e50\n            break;\n        }\n    } else {\n        // 0x404e32\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404e50\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x404e2a\n    int64_t v13 = 10; // 0x404e2a\n    while (v5 != 9) {\n        // 0x404e2c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404e00\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404e50\n                break;\n            }\n        } else {\n            // 0x404e32\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404e50\n                break;\n            }\n        }\n        // 0x404e22\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404e50\n    int64_t v14; // bp-136, 0x404db0\n    int64_t result = function_404950(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g50); // 0x404e5f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404e70",
            "funcStartAddr": "404e70",
            "funcEndAddr": "404ee4",
            "decompiledFuncCode": "int64_t function_404e70(int64_t a1) {\n    // 0x404e70\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404ed3\n    return fputs_unlocked(v1, g28);\n}\n"
        },
        {
            "funcName": "function_404ef0",
            "funcStartAddr": "404ef0",
            "funcEndAddr": "404f0a",
            "decompiledFuncCode": "int64_t function_404ef0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404ef4\n    if (size != 0 != (mem == NULL)) {\n        // 0x404f03\n        return (int64_t)mem;\n    }\n    // 0x404f05\n    function_405140(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404f10",
            "funcStartAddr": "404f10",
            "funcEndAddr": "404f31",
            "decompiledFuncCode": "int64_t function_404f10(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404f13\n    int64_t v2 = v1; // 0x404f13\n    if (v2 < 0) {\n        // 0x404f2b\n        function_405140(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404f29\n        return function_404ef0(v2);\n    }\n    // 0x404f2b\n    function_405140(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404f40",
            "funcStartAddr": "404f40",
            "funcEndAddr": "404f42",
            "decompiledFuncCode": "int64_t function_404f40(void) {\n    // 0x404f40\n    int64_t v1; // 0x404f40\n    return function_404ef0(v1);\n}\n"
        },
        {
            "funcName": "function_404f50",
            "funcStartAddr": "404f50",
            "funcEndAddr": "404f86",
            "decompiledFuncCode": "int64_t function_404f50(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404f78\n        free(v1);\n        return (int32_t)&g50 ^ (int32_t)&g50;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404f61\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404f70\n        return (int64_t)mem;\n    }\n    // 0x404f81\n    function_405140(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404f90",
            "funcStartAddr": "404f90",
            "funcEndAddr": "404fb1",
            "decompiledFuncCode": "int64_t function_404f90(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404f93\n    int64_t v2 = v1; // 0x404f93\n    if (v2 < 0) {\n        // 0x404fab\n        function_405140(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404fa9\n        return function_404f50(a1, v2);\n    }\n    // 0x404fab\n    function_405140(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404fc0",
            "funcStartAddr": "404fc0",
            "funcEndAddr": "405046",
            "decompiledFuncCode": "int64_t function_404fc0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40501b\n            function_405140(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404f50(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405003\n    if (a2 == 0) {\n        // 0x405028\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405008\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40501b\n        function_405140(a1);\n        // UNREACHABLE\n    }\n    // 0x404fea\n    *(int64_t *)a2 = v2;\n    return function_404f50(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405050",
            "funcStartAddr": "405050",
            "funcEndAddr": "4050a0",
            "decompiledFuncCode": "int64_t function_405050(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405050\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40509a\n            function_405140(a1);\n            // UNREACHABLE\n        }\n        // 0x405072\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404f50(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405085\n        *(int64_t *)a2 = 128;\n        return function_404f50(0, 128);\n    }\n    // 0x405098\n    if (a2 < 0) {\n        // 0x40509a\n        function_405140(a1);\n        // UNREACHABLE\n    }\n    // 0x405072\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404f50(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4050a0",
            "funcStartAddr": "4050a0",
            "funcEndAddr": "4050b7",
            "decompiledFuncCode": "int64_t function_4050a0(int64_t a1, int64_t a2) {\n    // 0x4050a0\n    return (int64_t)memset((int64_t *)function_404ef0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4050c0",
            "funcStartAddr": "4050c0",
            "funcEndAddr": "4050ee",
            "decompiledFuncCode": "int64_t function_4050c0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4050c7\n    if ((int64_t)v1 < 0) {\n        // 0x4050e9\n        function_405140(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4050e9\n        function_405140(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4050da\n    if (mem != NULL) {\n        // 0x4050e4\n        return (int64_t)mem;\n    }\n    // 0x4050e9\n    function_405140(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4050f0",
            "funcStartAddr": "4050f0",
            "funcEndAddr": "405118",
            "decompiledFuncCode": "int64_t function_4050f0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404ef0(a2); // 0x4050ff\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405120",
            "funcStartAddr": "405120",
            "funcEndAddr": "405133",
            "decompiledFuncCode": "int64_t function_405120(int64_t str) {\n    // 0x405120\n    return function_4050f0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405140",
            "funcStartAddr": "405140",
            "funcEndAddr": "405171",
            "decompiledFuncCode": "int64_t function_405140(int64_t a1) {\n    // 0x405140\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405180",
            "funcStartAddr": "405180",
            "funcEndAddr": "405250",
            "decompiledFuncCode": "int64_t function_405180(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, int64_t a5, int64_t a6, int32_t a7) {\n    // 0x405180\n    int64_t result2; // bp-64, 0x405180\n    int32_t v1 = function_405280(a1, 0, a2 & 0xffffffff, &result2, a5, a6); // 0x4051ac\n    int32_t * v2; // 0x405180\n    if (v1 != 0) {\n        int32_t * v3 = __errno_location(); // 0x40522a\n        if (v1 == 1) {\n            // 0x405248\n            *v3 = 75;\n            v2 = v3;\n        } else {\n            // 0x405237\n            v2 = v3;\n            if (v1 == 3) {\n                // 0x40523c\n                *v3 = 0;\n                v2 = v3;\n            }\n        }\n    } else {\n        uint64_t result = result2; // 0x4051b0\n        if (result >= a3 && result <= a4) {\n            // 0x405212\n            return result;\n        }\n        int32_t * v4 = __errno_location(); // 0x4051bf\n        *v4 = result < 0x40000000 ? 34 : 75;\n        v2 = v4;\n    }\n    int64_t v5 = function_404930(a1); // 0x4051dc\n    int32_t v6 = *v2; // 0x4051e1\n    int32_t err_num = v6 == 22 ? 0 : v6; // 0x4051f7\n    error(a7 == 0 ? 1 : a7, err_num, \"%s: %s\", (char *)a6, (char *)v5);\n    // 0x405212\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405250",
            "funcStartAddr": "405250",
            "funcEndAddr": "405271",
            "decompiledFuncCode": "int64_t function_405250(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t a5, int32_t a6) {\n    // 0x405250\n    int64_t result; // 0x405250\n    return result;\n}\n"
        },
        {
            "funcName": "function_405280",
            "funcStartAddr": "405280",
            "funcEndAddr": "4056c0",
            "decompiledFuncCode": "int64_t function_405280(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x40528e\n    if (v1 >= 37) {\n        // 0x40569b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g50;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x4052b2\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x4052e2\n    int64_t v4 = a1; // 0x4052e7\n    char v5 = c; // 0x4052e7\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x4052dc\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x4052d8\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x4052e9\n    if (v5 == 45) {\n        // 0x405325\n        return 4;\n    }\n    // 0x4052ee\n    int64_t v7; // bp-64, 0x405280\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x4052ae\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x4052f6\n    int64_t * v10 = (int64_t *)v8; // 0x4052fb\n    int64_t v11 = *v10; // 0x4052fb\n    char v12; // 0x405280\n    int64_t v13; // 0x405280\n    int64_t v14; // 0x405280\n    int64_t v15; // 0x405280\n    int64_t v16; // 0x405280\n    int64_t v17; // 0x405280\n    int64_t v18; // 0x405280\n    if (v11 == a1) {\n        // 0x405358\n        if (c == 0 || str == 0) {\n            // 0x405325\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x405379\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x405325\n            return 4;\n        }\n        goto lab_0x405387;\n    } else {\n        int32_t v19 = *v2; // 0x405306\n        int64_t v20 = 0; // 0x40530c\n        if (v19 != 0) {\n            // 0x405340\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x405325\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x4052f6\n        v16 = v21;\n        v13 = v20;\n        if (str == 0) {\n            goto lab_0x405322;\n        } else {\n            char c2 = *(char *)v11; // 0x405315\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x405483\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x405387;\n                } else {\n                    goto lab_0x405495;\n                }\n            } else {\n                goto lab_0x405322;\n            }\n        }\n    }\n  lab_0x405387:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x40538f\n    int64_t v24 = 1; // 0x40538f\n    int64_t v25; // 0x405280\n    int64_t v26; // 0x405280\n    int64_t v27; // 0x405280\n    int64_t v28; // 0x405280\n    int64_t v29; // 0x405280\n    int64_t v30; // 0x405280\n    int64_t v31; // 0x405280\n    int64_t v32; // 0x405280\n    int64_t v33; // 0x405280\n    int64_t v34; // 0x405280\n    int64_t v35; // 0x405280\n    int64_t v36; // 0x405280\n    int64_t v37; // 0x405280\n    int64_t v38; // 0x405280\n    int64_t v39; // 0x405280\n    int64_t v40; // 0x405280\n    int64_t v41; // 0x405280\n    int64_t v42; // 0x405280\n    int64_t v43; // 0x405280\n    int64_t v44; // 0x405280\n    if (v22 < 48) {\n        // 0x405391\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x4053fa;\n        } else {\n            // 0x4053a4\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x4053fa;\n            } else {\n                // 0x4053c0\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x4053fa;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x405629\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x4053fa;\n                    }\n                    default: {\n                        // 0x4053d5\n                        g47 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x40559b;\n                            }\n                            case 70: {\n                                goto lab_0x405495;\n                            }\n                            case 71: {\n                                goto lab_0x4055d3;\n                            }\n                            case 72: {\n                                goto lab_0x405495;\n                            }\n                            case 73: {\n                                goto lab_0x405495;\n                            }\n                            case 74: {\n                                goto lab_0x405495;\n                            }\n                            case 75: {\n                                goto lab_0x40545c;\n                            }\n                            case 76: {\n                                goto lab_0x405495;\n                            }\n                            case 77: {\n                                goto lab_0x40541e;\n                            }\n                            case 78: {\n                                goto lab_0x405495;\n                            }\n                            case 79: {\n                                goto lab_0x405495;\n                            }\n                            case 80: {\n                                goto lab_0x405568;\n                            }\n                            case 81: {\n                                goto lab_0x405495;\n                            }\n                            case 82: {\n                                goto lab_0x405495;\n                            }\n                            case 83: {\n                                goto lab_0x405495;\n                            }\n                            case 84: {\n                                goto lab_0x405538;\n                            }\n                            case 85: {\n                                goto lab_0x405495;\n                            }\n                            case 86: {\n                                goto lab_0x405495;\n                            }\n                            case 87: {\n                                goto lab_0x405495;\n                            }\n                            case 88: {\n                                goto lab_0x405495;\n                            }\n                            case 89: {\n                                goto lab_0x405506;\n                            }\n                            case 90: {\n                                goto lab_0x4054cb;\n                            }\n                            case 91: {\n                                goto lab_0x405495;\n                            }\n                            case 92: {\n                                goto lab_0x405495;\n                            }\n                            case 93: {\n                                goto lab_0x405495;\n                            }\n                            case 94: {\n                                goto lab_0x405495;\n                            }\n                            case 95: {\n                                goto lab_0x405495;\n                            }\n                            case 96: {\n                                goto lab_0x405495;\n                            }\n                            case 97: {\n                                goto lab_0x405495;\n                            }\n                            case 98: {\n                                goto lab_0x4054af;\n                            }\n                            case 99: {\n                                goto lab_0x405438;\n                            }\n                            case 100: {\n                                goto lab_0x405495;\n                            }\n                            case 101: {\n                                goto lab_0x405495;\n                            }\n                            case 102: {\n                                goto lab_0x405495;\n                            }\n                            case 103: {\n                                goto lab_0x4055d3;\n                            }\n                            case 104: {\n                                goto lab_0x405495;\n                            }\n                            case 105: {\n                                goto lab_0x405495;\n                            }\n                            case 106: {\n                                goto lab_0x405495;\n                            }\n                            case 107: {\n                                goto lab_0x40545c;\n                            }\n                            case 108: {\n                                goto lab_0x405495;\n                            }\n                            case 109: {\n                                goto lab_0x40541e;\n                            }\n                            case 110: {\n                                goto lab_0x405495;\n                            }\n                            case 111: {\n                                goto lab_0x405495;\n                            }\n                            case 112: {\n                                goto lab_0x405495;\n                            }\n                            case 113: {\n                                goto lab_0x405495;\n                            }\n                            case 114: {\n                                goto lab_0x405495;\n                            }\n                            case 115: {\n                                goto lab_0x405495;\n                            }\n                            case 116: {\n                                goto lab_0x405538;\n                            }\n                            default: {\n                                goto lab_0x4053fa;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x4053fa;\n    }\n  lab_0x405322:\n    // 0x405322\n    *a4 = v16;\n    // 0x405325\n    return v13 & 0xffffffff;\n  lab_0x4053fa:\n    // 0x4053fa\n    g48 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x405280\n    switch (v12) {\n        case 66: {\n            // 0x4055f4\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x405467;\n            } else {\n                // 0x405601\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x405438;\n            }\n        }\n        case 69: {\n            goto lab_0x40559b;\n        }\n        case 71: {\n            goto lab_0x4055d3;\n        }\n        case 75: {\n            goto lab_0x40545c;\n        }\n        case 77: {\n            goto lab_0x40541e;\n        }\n        case 80: {\n            goto lab_0x405568;\n        }\n        case 84: {\n            goto lab_0x405538;\n        }\n        case 89: {\n            goto lab_0x405506;\n        }\n        case 90: {\n            goto lab_0x4054cb;\n        }\n        case 98: {\n            goto lab_0x4054af;\n        }\n        case 99: {\n            goto lab_0x405438;\n        }\n        case 103: {\n            goto lab_0x4055d3;\n        }\n        case 107: {\n            goto lab_0x40545c;\n        }\n        case 109: {\n            goto lab_0x40541e;\n        }\n        case 116: {\n            goto lab_0x405538;\n        }\n        case 119: {\n            // 0x4054a0\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x405467;\n            } else {\n                // 0x4054a5\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x405438;\n            }\n        }\n        default: {\n            goto lab_0x405495;\n        }\n    }\n  lab_0x40559b:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x4055b3\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x4055bf\n    int64_t v51 = v48; // 0x4055c2\n    int64_t v52 = v37; // 0x4055c2\n    int64_t v53 = v49; // 0x4055c2\n    int32_t v54 = v50; // 0x4055c2\n    int64_t v55 = v49; // 0x4055c2\n    while (v50 != 0) {\n        // 0x4055b0\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x4054f4;\n  lab_0x4055d3:\n    // 0x4055d3\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x4055de\n        int128_t v56; // 0x4055d9\n        uint128_t v57; // 0x4055d9\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x4055de\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x405280\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x4055e3\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x4055e8\n                v26 = v60;\n                int64_t v61; // 0x405280\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x405438;\n  lab_0x40545c:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x40545f\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x405438;\n    } else {\n        goto lab_0x405467;\n    }\n  lab_0x40541e:;\n    int128_t v65 = v27; // 0x405424\n    uint128_t v66 = v65 * (int128_t)v17; // 0x405424\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x405467;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x405429\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x405467;\n        } else {\n            // 0x40542e\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x405438;\n        }\n    }\n  lab_0x405568:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x40557b\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x405587\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x40558a\n    int64_t v73 = v70; // 0x40558a\n    while (v71 != 0) {\n        // 0x405578\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x4054f4;\n  lab_0x405538:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x40554b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x405557\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x40555a\n    int64_t v79 = v76; // 0x40555a\n    while (v77 != 0) {\n        // 0x405548\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x4054f4;\n  lab_0x405506:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x40551b\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x405527\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x40552a\n    int64_t v85 = v82; // 0x40552a\n    while (v83 != 0) {\n        // 0x405518\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x4054f4;\n  lab_0x4054cb:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x4054e3\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x4054ef\n    int32_t v90 = v89; // 0x4054f2\n    int64_t v91 = v88; // 0x4054f2\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x4054e0\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x4054f4;\n  lab_0x4054af:\n    // 0x4054af\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x405467;\n    } else {\n        // 0x4054b8\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x405438;\n    }\n  lab_0x405438:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x40543d\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x405322;\n  lab_0x405495:\n    // 0x405495\n    *a4 = v18;\n    // 0x405325\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x405467:\n    // 0x405467\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x405438;\n  lab_0x4054f4:\n    // 0x4054f4\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x405438;\n}\n"
        },
        {
            "funcName": "function_4056c0",
            "funcStartAddr": "4056c0",
            "funcEndAddr": "40573b",
            "decompiledFuncCode": "int64_t function_4056c0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4056c7\n    if (fileno(stream) < 0) {\n        // 0x405727\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4056da\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40570b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405727\n            return fclose(stream);\n        }\n    }\n    // 0x4056dc\n    if ((int32_t)function_405740(a1, v1) == 0) {\n        // 0x405727\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x4056e8\n    int32_t v3 = *v2; // 0x4056f0\n    int64_t result = fclose(stream); // 0x4056fe\n    if (v3 != 0) {\n        // 0x405730\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405700\n    return result;\n}\n"
        },
        {
            "funcName": "function_405740",
            "funcStartAddr": "405740",
            "funcEndAddr": "405780",
            "decompiledFuncCode": "int64_t function_405740(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40575a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40575a\n        return fflush(stream);\n    }\n    // 0x405768\n    function_405780(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405780",
            "funcStartAddr": "405780",
            "funcEndAddr": "4057d7",
            "decompiledFuncCode": "int64_t function_405780(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405780\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40578a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4057bb\n    int64_t result = -1; // 0x4057c4\n    if (v1 != -1) {\n        // 0x4057c6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4057d2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4057e0",
            "funcStartAddr": "4057e0",
            "funcEndAddr": "4058bf",
            "decompiledFuncCode": "int64_t function_4057e0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4057ec\n    uint32_t v2 = *v1; // 0x4057ec\n    int64_t v3 = a2 & 0xffffffff; // 0x4057f1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x4057f4\n    uint64_t v5 = (int64_t)*v4; // 0x4057f4\n    int64_t v6; // 0x405862\n    if (v3 <= v5) {\n      lab_0x40585c_2:\n        // 0x40585c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4057e2\n    int64_t v8 = v2; // 0x4057e0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40585c\n        goto lab_0x40585c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x405818\n    int64_t v17; // 0x405826\n    int64_t * v18; // 0x405840\n    int64_t * v19; // 0x405843\n    int64_t v20; // 0x40584e\n    int64_t v21; // 0x405826\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x405823\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x405840\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x405857\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40585c\n            goto lab_0x40585c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40585c\n            goto lab_0x40585c_2;\n        }\n        // 0x405812\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40589b\n    int64_t * v23 = (int64_t *)v22; // 0x4058a0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4058a3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4058a0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4058b7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40580d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40585c\n            goto lab_0x40585c_2;\n        }\n        // 0x405812\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x405823\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x405840\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x405857\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40585c\n                goto lab_0x40585c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40585c\n                goto lab_0x40585c_2;\n            }\n            // 0x405812\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x405880\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4058a0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4058b7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40585c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4058c0",
            "funcStartAddr": "4058c0",
            "funcEndAddr": "405edc",
            "decompiledFuncCode": "int64_t function_4058c0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4058df\n    int64_t v2 = *v1; // 0x4058df\n    char * str2 = (char *)v2; // 0x4058ec\n    char c = *str2; // 0x4058ec\n    int64_t v3 = v2; // 0x405918\n    int64_t v4 = 0; // 0x4058c0\n    int32_t v5; // 0x4058c0\n    int64_t v6; // 0x4058c0\n    int64_t v7; // 0x4058c0\n    int64_t v8; // 0x4058c0\n    int64_t v9; // 0x4058c0\n    int64_t v10; // 0x4058c0\n    int64_t v11; // 0x4058c0\n    int64_t v12; // 0x4058c0\n    int64_t v13; // 0x4058c0\n    int64_t str3; // 0x4058c0\n    int64_t v14; // 0x4058c0\n    int64_t v15; // 0x4058c0\n    int64_t v16; // 0x4058c0\n    int64_t v17; // 0x4058c0\n    int32_t v18; // 0x4058c0\n    int32_t v19; // 0x4058c0\n    int32_t v20; // 0x4058c0\n    int32_t v21; // 0x4058c0\n    int32_t v22; // 0x4058c0\n    int32_t v23; // 0x4058c0\n    int32_t v24; // 0x4058c0\n    int32_t v25; // 0x4058c0\n    int32_t v26; // 0x4058c0\n    int32_t v27; // 0x4058c0\n    int32_t v28; // 0x4058c0\n    int32_t v29; // 0x4058c0\n    int64_t nmemb; // 0x4058c0\n    int64_t v30; // 0x4058c0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40591c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405918\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405928\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40592e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4058f8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40595c\n                int64_t v34; // 0x4058c0\n                int64_t v35; // 0x4058c0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405965\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405ae0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x405976\n                int64_t v37 = *(int64_t *)v36; // 0x40597a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405950\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405965\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405ae0;\n                        }\n                    }\n                    // 0x405976\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4059c6:\n                    // 0x4059c6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405a20;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405b90\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405a20;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405b40\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4059ea;\n                                } else {\n                                    // 0x405b4c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4059ea;\n                                    } else {\n                                        // 0x405b5a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4059ea;\n                                        } else {\n                                            goto lab_0x405a20;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4059ea;\n                            }\n                        }\n                    }\n                }\n              lab_0x405a31:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405c06\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405db2\n                            flockfile(g31);\n                            int64_t v41 = *v1; // 0x405dd2\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x405e1f\n                            int64_t v43 = (int64_t)g31;\n                            int64_t v44 = v43; // 0x405e39\n                            int64_t v45; // 0x405e3b\n                            if (*(char *)v42 != 0) {\n                                // 0x405e3b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g31;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405e33\n                            while (v17 + nmemb != v42) {\n                                // 0x405e35\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x405e3b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g31;\n                                }\n                                // 0x405e28\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405e60\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g31);\n                            v40 = *v1;\n                        } else {\n                            // 0x405c14\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x405d6f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405c69\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405c80\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x405b2e\n                    return 63;\n                }\n                // 0x405a50\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405ad4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405ae0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405af0\n                    uint32_t v50 = *v49; // 0x405af0\n                    int64_t v51 = v50; // 0x405af0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x405afa\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405b03\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x405d2f\n                                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x405cda\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x405b2e\n                            return 63;\n                        }\n                        // 0x405b78\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x405e8f\n                                    __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x405d8d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405da0\n                                // 0x405b2e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x405c9e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405cb2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x405b1b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x405b1e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405b22\n                    int64_t result = v59; // 0x405b28\n                    if (v58 != 0) {\n                        // 0x405b2a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x405b2e\n                    return result;\n                }\n            } else {\n                // 0x40592e\n                v5 = v32;\n            }\n            // break -> 0x405a55\n            break;\n        }\n    }\n    // 0x405a55\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x405a6d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405a77\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x405b2e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405bb9\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405aa6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405ab6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405a20:\n    // 0x405a20\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405a20\n    int64_t v63 = *(int64_t *)v62; // 0x405a24\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405a31\n        goto lab_0x405a31;\n    }\n    goto lab_0x4059c6;\n  lab_0x4059ea:\n    // 0x4059ea\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4058c0\n    int32_t v65; // 0x4058c0\n    int32_t v66; // 0x4058c0\n    if (v27 != 0) {\n        goto lab_0x405a20;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405ba0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405a20;\n            } else {\n                goto lab_0x405a11;\n            }\n        } else {\n            // 0x405a05\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x405cfc\n                int64_t v67 = (int64_t)mem; // 0x405cfc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405a20;\n                } else {\n                    // 0x405d0f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405a11;\n                }\n            } else {\n                goto lab_0x405a11;\n            }\n        }\n    }\n  lab_0x405a11:\n    // 0x405a11\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405a20;\n}\n"
        },
        {
            "funcName": "function_405ee0",
            "funcStartAddr": "405ee0",
            "funcEndAddr": "4064a6",
            "decompiledFuncCode": "int64_t function_405ee0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405f01\n    if (v3 < 1) {\n        // 0x4060be\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x405efd\n    int32_t v5 = *(int32_t *)a7; // 0x405f09\n    uint64_t v6 = a1 & 0xffffffff; // 0x405f0b\n    int64_t v7 = v2; // 0x405f10\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405f13\n    *v8 = 0;\n    int64_t v9; // 0x405ee0\n    int64_t v10; // 0x405ee0\n    int64_t v11; // 0x405ee0\n    int64_t v12; // 0x405ee0\n    int64_t str; // 0x405ee0\n    int64_t v13; // 0x405ee0\n    int64_t v14; // 0x405ee0\n    int64_t v15; // 0x405ee0\n    int64_t v16; // 0x405ee0\n    int64_t v17; // 0x405ee0\n    int32_t v18; // 0x405ee0\n    char v19; // 0x405ee0\n    if (v5 == 0) {\n        // 0x4060f8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x405f2a;\n    } else {\n        // 0x405f23\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405f70\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405f73\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x406038;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405f86\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x405f96\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40604c;\n                } else {\n                    goto lab_0x405fa8;\n                }\n            }\n        } else {\n            goto lab_0x405f2a;\n        }\n    }\n  lab_0x405f2a:\n    // 0x405f2a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405f30\n    *v24 = 0;\n    int64_t v25; // 0x405ee0\n    int64_t v26; // 0x405ee0\n    int64_t v27; // 0x405ee0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x406020\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40602d;\n        }\n        case 43: {\n            // 0x406330\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40602d;\n        }\n        default: {\n            // 0x405f4c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4062af\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4063c8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40602d;\n                } else {\n                    // 0x4062bd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x405f5a;\n                }\n            } else {\n                goto lab_0x405f5a;\n            }\n        }\n    }\n  lab_0x406038:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40603f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405fa8;\n    } else {\n        goto lab_0x40604c;\n    }\n  lab_0x405f5a:\n    // 0x405f5a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40602d;\n  lab_0x40602d:\n    // 0x40602d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x406038;\n  lab_0x405fa8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405fa8\n    int64_t v31 = v30; // 0x405fa8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x405faa\n    if ((int64_t)*v32 > v31) {\n        // 0x405faf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405fb2\n    if (*v33 > v30) {\n        // 0x405fb7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x405fba\n    int64_t v35 = v31; // 0x405fbe\n    int64_t v36 = v15; // 0x405fbe\n    int64_t v37; // 0x405ee0\n    int64_t v38; // 0x405ee0\n    int64_t v39; // 0x405ee0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406128\n        int64_t v41 = v40; // 0x406128\n        v2 = v41;\n        int64_t v42; // 0x405ee0\n        if (*v33 == v40) {\n            // 0x406310\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406318\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x406134\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406138\n                function_4057e0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x406148\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x406151\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40615a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x406171\n            int64_t v47 = v45 & 0xffffffff; // 0x406175\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40617e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x406184\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x406186;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x406160\n            int64_t v49 = v48 & 0xffffffff; // 0x406160\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x406171\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40617e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x406184\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x406186;\n                    }\n                }\n                // 0x406160\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x406328\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x406186;\n    } else {\n        goto lab_0x405fc4;\n    }\n  lab_0x40604c:\n    // 0x40604c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40604f\n    int64_t v51 = v12; // 0x40604f\n    int64_t v52 = v14; // 0x40604f\n    if (*(char *)v10 == 0) {\n        goto lab_0x405fa8;\n    } else {\n        goto lab_0x406055;\n    }\n  lab_0x405fc4:;\n    int32_t v53 = v35; // 0x405fc4\n    int64_t v54; // 0x405ee0\n    int64_t v55; // 0x405ee0\n    int64_t v56; // 0x405ee0\n    int64_t v57; // 0x405ee0\n    int64_t v58; // 0x405ee0\n    int64_t v59; // 0x405ee0\n    char * v60; // 0x405ee0\n    int64_t v61; // 0x405ee0\n    int64_t v62; // 0x405fd9\n    int64_t v63; // 0x405ee0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x406113\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x406116;\n    } else {\n        // 0x405fcc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405ee0\n        int64_t v66 = v65 ? -1 : 1; // 0x405fe0\n        int64_t v67 = (int64_t)\"--\"; // 0x405ee0\n        int64_t v68 = v62; // 0x405ee0\n        int64_t v69 = 3; // 0x405fe0\n        unsigned char v70 = *(char *)v68; // 0x405fe0\n        char v71 = *(char *)v67; // 0x405fe0\n        char v72 = v71; // 0x405fe0\n        bool v73 = false; // 0x405fe0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4060d0\n            if (*(char *)v62 == 45) {\n                // 0x406190\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x406190\n                if (c == 0) {\n                    goto lab_0x4060da;\n                } else {\n                    // 0x40619d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406220;\n                    } else {\n                        if (c == 45) {\n                            // 0x406403\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x406275;\n                        } else {\n                            // 0x4061ae\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406220;\n                            } else {\n                                // 0x4061b3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4061d4;\n                                } else {\n                                    // 0x4061ba\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406220;\n                                    } else {\n                                        goto lab_0x4061d4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4060da;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405ff0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405ff3\n            int64_t v77 = v35 + 1; // 0x405ff6\n            int32_t v78 = v77; // 0x405ff9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x406360\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x406007\n                    function_4057e0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x406015\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x406116;\n        }\n    }\n  lab_0x406055:;\n    // 0x406055\n    int64_t v79; // bp-104, 0x405ee0\n    int64_t v80 = &v79; // 0x405eea\n    int64_t v81 = v50 + 1; // 0x406055\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40605c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x406061\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x406065\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x406069\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x406071\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x406076\n    int32_t c2 = v84; // 0x406076\n    char * found_char_pos = strchr(str2, c2); // 0x406076\n    int64_t v87 = *v82; // 0x40607b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x406085\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x406090\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x406380\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40634d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4060be\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x406076\n    char v91 = *(char *)(v90 + 1); // 0x4060ab\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x406065\n        if (v91 != 58) {\n            // 0x4060be\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x4062d4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4063d8\n                *v8 = 0;\n            } else {\n                // 0x4063bc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x4062fe\n            *v83 = 0;\n            // 0x4060be\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x4062de\n        if (v93 != 0) {\n            // 0x406370\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x4062fe\n            *v83 = 0;\n            // 0x4060be\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x4062f1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x4062fe\n            *v83 = 0;\n            // 0x4060be\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40643a\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x4063ea\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x4063f1\n        // 0x4062fe\n        *v83 = 0;\n        // 0x4060be\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x406249\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40624b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x406470\n                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x406421\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x406428\n            // 0x4060be\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x406256\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40625a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x406275;\n  lab_0x406186:\n    // 0x406186\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405fc4;\n  lab_0x406275:;\n    int64_t v99 = function_4058c0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x406293\n    // 0x4060be\n    return v99 & 0xffffffff;\n  lab_0x406116:;\n    int32_t v100 = v55; // 0x406116\n    if (v100 != (int32_t)v59) {\n        // 0x40611a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4060be\n    return 0xffffffff;\n  lab_0x4060da:\n    // 0x4060da\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x4060e1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4060be\n    return v99 & 0xffffffff;\n  lab_0x406220:\n    // 0x406220\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x406055;\n  lab_0x4061d4:\n    // 0x4061d4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4058c0(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x4061fa\n    if ((int32_t)v101 != -1) {\n        // 0x4060be\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40620f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406220;\n}\n"
        },
        {
            "funcName": "function_4064b0",
            "funcStartAddr": "4064b0",
            "funcEndAddr": "406506",
            "decompiledFuncCode": "int64_t function_4064b0(int64_t a1) {\n    // 0x4064b0\n    *(int32_t *)&g41 = g26;\n    *(int32_t *)&g42 = g25;\n    int64_t v1; // 0x4064b0\n    int64_t result = function_405ee0(v1, v1, v1, v1, v1, v1, &g41, a1 & 0xffffffff); // 0x4064d6\n    g26 = *(int32_t *)&g41;\n    g46 = g44;\n    *(int32_t *)&g24 = g43;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406510",
            "funcStartAddr": "406510",
            "funcEndAddr": "406528",
            "decompiledFuncCode": "int64_t function_406510(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406510\n    return function_4064b0(1);\n}\n"
        },
        {
            "funcName": "function_406530",
            "funcStartAddr": "406530",
            "funcEndAddr": "406543",
            "decompiledFuncCode": "int64_t function_406530(int64_t a1, int64_t a2, char * a3, char (**a4)[7], int32_t a5, int64_t a6) {\n    // 0x406530\n    return function_4064b0(0);\n}\n"
        },
        {
            "funcName": "function_406550",
            "funcStartAddr": "406550",
            "funcEndAddr": "406565",
            "decompiledFuncCode": "int64_t function_406550(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406550\n    return function_405ee0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406570",
            "funcStartAddr": "406570",
            "funcEndAddr": "406586",
            "decompiledFuncCode": "int64_t function_406570(void) {\n    // 0x406570\n    return function_4064b0(0);\n}\n"
        },
        {
            "funcName": "function_406590",
            "funcStartAddr": "406590",
            "funcEndAddr": "4065a8",
            "decompiledFuncCode": "int64_t function_406590(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406590\n    return function_405ee0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4065b0",
            "funcStartAddr": "4065b0",
            "funcEndAddr": "40662a",
            "decompiledFuncCode": "int64_t function_4065b0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4065bb\n    int64_t v2 = (int64_t)&g10; // 0x4065bb\n    int32_t * pwc; // 0x4065b0\n    int64_t v3; // 0x4065b0\n    int64_t n; // 0x4065b0\n    if (a2 == 0) {\n        goto lab_0x406602;\n    } else {\n        // 0x4065bd\n        if (a3 == 0) {\n            // 0x4065e8\n            return -2;\n        }\n        // 0x4065c9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x406602;\n        } else {\n            goto lab_0x4065d4;\n        }\n    }\n  lab_0x406602:\n    // 0x406602\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4065b0\n    pwc = (int32_t *)&v4;\n    goto lab_0x4065d4;\n  lab_0x4065d4:;\n    char * wstr = (char *)v3; // 0x4065da\n    int64_t ps; // 0x4065b0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4065da\n    int64_t result = v5; // 0x4065da\n    if (v5 < 0xfffffffe) {\n        // 0x4065e8\n        return result;\n    }\n    int64_t result2 = result; // 0x406619\n    if ((char)function_4067a0(0, v3) == 0) {\n        // 0x40661b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4065e8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406630",
            "funcStartAddr": "406630",
            "funcEndAddr": "406734",
            "decompiledFuncCode": "int64_t function_406630(int64_t result, uint64_t a2, int64_t a3) {\n    // 0x406630\n    if (a3 == 0) {\n        // 0x406669\n        return 0;\n    }\n    int64_t v1 = result; // 0x40663c\n    int64_t v2 = a3; // 0x40663c\n    int64_t result2; // 0x406630\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x40663e\n        int64_t v4 = result; // 0x406641\n        if ((char)result == v3) {\n            // 0x406669\n            return result;\n        }\n        int64_t v5 = a3; // 0x406641\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x406650\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x406670;\n            }\n            // 0x406656\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x406669\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x406669\n        return result2;\n    }\n  lab_0x406670:;\n    int64_t result3 = v1; // 0x40669d\n    int64_t v6 = v2; // 0x40669d\n    if (v2 >= 8) {\n        int64_t v7 = 256 * a2 & 0xff00 | a2 % 256; // 0x40667f\n        int64_t v8 = 0x10000 * v7 | v7; // 0x40668c\n        int64_t v9 = 0x100000000 * v8 | v8; // 0x406696\n        int64_t v10 = *(int64_t *)v1 ^ v9; // 0x4066b6\n        result3 = v1;\n        v6 = v2;\n        if (((v10 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v10 - 0x101010101010101) == 0) {\n            int64_t v11 = v2 - 8; // 0x4066e5\n            int64_t v12 = v1 + 8; // 0x4066e9\n            while (v11 >= 8) {\n                int64_t v13 = *(int64_t *)v12 ^ v9; // 0x4066d3\n                result3 = v12;\n                v6 = v11;\n                if (((v13 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v13 - 0x101010101010101) != 0) {\n                    goto lab_0x4066fc;\n                }\n                v11 -= 8;\n                v12 += 8;\n            }\n            // 0x4066f3\n            result3 = v12;\n            v6 = v11;\n            if (v11 == 0) {\n                // 0x406669\n                return 0;\n            }\n        }\n    }\n  lab_0x4066fc:;\n    char v14 = a2; // 0x4066fc\n    if (*(char *)result3 == v14) {\n        // 0x406669\n        return result3;\n    }\n    int64_t v15 = result3 + 1;\n    result2 = 0;\n    while (v15 != v6 + result3) {\n        // 0x406710\n        result2 = v15;\n        if (*(char *)v15 == v14) {\n            // break -> 0x406669\n            break;\n        }\n        v15++;\n        result2 = 0;\n    }\n    // 0x406669\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406740",
            "funcStartAddr": "406740",
            "funcEndAddr": "40679d",
            "decompiledFuncCode": "int64_t function_406740(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x406747\n    int64_t v2; // 0x406740\n    int64_t result = function_4056c0(a1, v2); // 0x406758\n    if ((v2 & 32) != 0) {\n        // 0x406780\n        if ((int32_t)result == 0) {\n            // 0x406784\n            *__errno_location() = 0;\n        }\n        // 0x40677a\n        return 0xffffffff;\n    }\n    // 0x406761\n    if ((int32_t)result == 0) {\n        // 0x40677a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406768\n    if (v1 == 0) {\n        // 0x40676a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40677a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4067a0",
            "funcStartAddr": "4067a0",
            "funcEndAddr": "4067fe",
            "decompiledFuncCode": "int64_t function_4067a0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4067a6\n    if (locale == NULL) {\n        // 0x4067d3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4067a6\n    bool v2; // 0x4067a0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x4067a0\n    int64_t v5 = v1; // 0x4067a0\n    int64_t v6 = 2; // 0x4067c5\n    unsigned char v7 = *(char *)v5; // 0x4067c5\n    char v8 = *(char *)v4; // 0x4067c5\n    char v9 = v8; // 0x4067c5\n    bool v10 = false; // 0x4067c5\n    while (v7 == v8) {\n        // 0x4067b8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4067d1\n    int64_t v13 = v1; // 0x4067d1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4067d3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4067d1\n    unsigned char v15 = *(char *)v13; // 0x4067ed\n    char v16 = *(char *)v12; // 0x4067ed\n    char v17 = v16; // 0x4067ed\n    bool v18 = false; // 0x4067ed\n    while (v15 == v16) {\n        // 0x4067e0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_406800",
            "funcStartAddr": "406800",
            "funcEndAddr": "406d62",
            "decompiledFuncCode": "int64_t function_406800(void) {\n    char * v1 = nl_langinfo(14); // 0x406816\n    char * v2 = g45; // 0x40681b\n    char * v3; // 0x406800\n    int64_t v4; // 0x406800\n    int64_t v5; // 0x406800\n    int64_t v6; // 0x406800\n    int64_t v7; // 0x406800\n    int32_t size; // 0x406800\n    int32_t size2; // 0x406800\n    int32_t len; // 0x4068d2\n    int64_t v8; // 0x4068d2\n    char * env_val; // 0x4068bd\n    if (v2 == NULL) {\n        // 0x4068b8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406925;\n        } else {\n            // 0x4068ca\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406925;\n            } else {\n                // 0x4068cf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4068bd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406d55\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406925;\n                    } else {\n                        // 0x406cc9\n                        size2 = len + 14;\n                        goto lab_0x4068eb;\n                    }\n                } else {\n                    goto lab_0x4068eb;\n                }\n            }\n        }\n    } else {\n        // 0x406800\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40683a;\n    }\n  lab_0x406b6c:;\n    // 0x406b6c\n    struct _IO_FILE * stream; // 0x4069ab\n    int32_t v10 = __uflow(stream); // 0x406b6f\n    int64_t v11; // 0x406800\n    int64_t v12 = v11; // 0x406b79\n    int64_t v13; // 0x406800\n    int64_t v14 = v13; // 0x406b79\n    int32_t v15 = v10; // 0x406b79\n    int64_t v16; // 0x406800\n    int64_t v17 = v16; // 0x406b79\n    int64_t v18 = v11; // 0x406b79\n    int64_t v19 = v13; // 0x406b79\n    int64_t v20 = v16; // 0x406b79\n    if (v10 == -1) {\n        // break -> 0x406b7f\n        goto lab_0x406b7f;\n    }\n    goto lab_0x4069f9;\n  lab_0x4069ee:;\n    // 0x4069ee\n    int64_t v90; // 0x406800\n    int64_t * v32; // 0x4069e0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x406800\n    v12 = v89;\n    int64_t v91; // 0x406800\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x406800\n    v17 = v92;\n    goto lab_0x4069f9;\n  lab_0x4069f9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x406800\n    int32_t v25; // bp-120, 0x406800\n    int32_t v26; // bp-184, 0x406800\n    int64_t v27; // 0x4069ab\n    int64_t v28; // 0x4069c8\n    int64_t v29; // 0x4069cd\n    int64_t * v30; // 0x4069e4\n    switch (c) {\n        case 32: {\n            goto lab_0x4069e0;\n        }\n        case 10: {\n            goto lab_0x4069e0;\n        }\n        case 9: {\n            goto lab_0x4069e0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x406bd1\n            int32_t v33; // 0x406800\n            char v34; // 0x406800\n            int32_t v35; // 0x406bde\n            if (v31 < *v30) {\n                // 0x406bb0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x406bdb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x406bd1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406bb0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x406bdb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x406bc0\n                v36 = v33;\n            }\n            // 0x406caf\n            if (v36 == -1) {\n                // break -> 0x406b7f\n                break;\n            }\n            goto lab_0x4069e0;\n        }\n        default: {\n            // 0x406a0f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x406b7f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406a38\n            int64_t v39 = v37 + 4; // 0x406a3a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406a46\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406a48\n            while (v41 == 0) {\n                // 0x406a38\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406a66\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406a72\n            int64_t v45 = v43 + 4; // 0x406a74\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x406a80\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x406a82\n            while (v47 == 0) {\n                // 0x406a72\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x406a6f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406a98\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x406aa8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x406aac\n            int64_t v52 = v51 + v48; // 0x406ab5\n            int64_t * mem; // 0x406800\n            int64_t v53; // 0x406800\n            int64_t v54; // 0x406800\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x406beb\n                int64_t v56 = v55 + 3; // 0x406bf7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x406ad1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406ae0\n            if (mem == NULL) {\n                // 0x406d0c\n                free((int64_t *)v21);\n                function_4056c0(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x406984;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406af8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406b02\n            uint32_t v62 = (int32_t)v59; // 0x406b05\n            int64_t v63; // 0x406800\n            if (v62 >= 8) {\n                // 0x406c14\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x406c2e\n                int64_t v66 = v61 - v65; // 0x406c32\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x406c3d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x406c4e\n                    int64_t v70 = v69 & 0xffffffff; // 0x406c4e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x406c4b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x406cdf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406b17\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x406b1b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x406b2b\n            int64_t v74 = v60 - 1; // 0x406b2f\n            uint32_t v75 = (int32_t)v73; // 0x406b34\n            int64_t v76; // 0x406800\n            if (v75 >= 8) {\n                // 0x406c62\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x406c6c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x406c7c\n                int64_t v80 = v74 - v79; // 0x406c80\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x406c8b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x406c9b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406c99\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x406cf6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x406cfe\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406b46\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x406b4a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406d43\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x406b5e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4069ee;\n            } else {\n                goto lab_0x406b6c;\n            }\n        }\n    }\n  lab_0x4069e0:;\n    int64_t v93 = v23; // 0x406800\n    int64_t v94 = v22; // 0x406800\n    int64_t v95 = v21; // 0x406800\n    goto lab_0x4069e0_2;\n  lab_0x406925:;\n    int64_t * mem3 = malloc(size); // 0x406925\n    int64_t v97 = (int64_t)&g10; // 0x406930\n    int64_t v98; // 0x406800\n    int64_t path; // 0x406800\n    if (mem3 == NULL) {\n        goto lab_0x406902;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406925\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406946;\n    }\n  lab_0x40683a:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x40682d\n    char v100 = *v3; // 0x40683a\n    int64_t v101; // 0x406800\n    if (v100 == 0) {\n        // 0x406894\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x406800\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x406800\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x406880\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x406887;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406850\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40685d\n        char v107 = *(char *)v106; // 0x406862\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x406894\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40686b\n    v104 = v103 + 1;\n  lab_0x406887:\n    // 0x406894\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406902:;\n    char * v108 = (char *)v97;\n    g45 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40683a;\n  lab_0x406946:;\n    int64_t v109 = v98 + path; // 0x406946\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x406972\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x4069a1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x406cd2\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x4069c5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4069e0_2:;\n                uint64_t v96 = *v32; // 0x4069e0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x406b6c;\n                } else {\n                    goto lab_0x4069ee;\n                }\n            }\n          lab_0x406b7f:\n            // 0x406b7f\n            function_4056c0(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x406b9e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x406984;\n  lab_0x4068eb:;\n    int64_t * mem4 = malloc(size2); // 0x4068eb\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x406991\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406946;\n    } else {\n        goto lab_0x406902;\n    }\n  lab_0x406984:\n    // 0x406984\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406902;\n}\n"
        },
        {
            "funcName": "function_406d70",
            "funcStartAddr": "406d70",
            "funcEndAddr": "406dcd",
            "decompiledFuncCode": "int64_t function_406d70(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406d70\n    return function_401440();\n}\n"
        },
        {
            "funcName": "function_406dd0",
            "funcStartAddr": "406dd0",
            "funcEndAddr": "406dd1",
            "decompiledFuncCode": "int64_t function_406dd0(void) {\n    // 0x406dd0\n    int64_t result; // 0x406dd0\n    return result;\n}\n"
        },
        {
            "funcName": "function_406de0",
            "funcStartAddr": "406de0",
            "funcEndAddr": "406df8",
            "decompiledFuncCode": "int64_t function_406de0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406de0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_406df8",
            "funcStartAddr": "406df8",
            "funcEndAddr": "406e18",
            "decompiledFuncCode": "int64_t function_406df8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x406e02\n    while (*(int64_t *)v1 != -1) {\n        // 0x406e03\n        v1 -= 8;\n    }\n    // 0x406e14\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_base32.elf"
}