{
    "funcInfo": [
        {
            "funcName": "function_401c30",
            "funcStartAddr": "401c30",
            "funcEndAddr": "401c35",
            "decompiledFuncCode": "int64_t function_401c30(void) {\n    // 0x401c30\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c35",
            "funcStartAddr": "401c35",
            "funcEndAddr": "401c3a",
            "decompiledFuncCode": "int64_t function_401c35(void) {\n    // 0x401c35\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c3a",
            "funcStartAddr": "401c3a",
            "funcEndAddr": "401c3f",
            "decompiledFuncCode": "int64_t function_401c3a(void) {\n    // 0x401c3a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c3f",
            "funcStartAddr": "401c3f",
            "funcEndAddr": "401c44",
            "decompiledFuncCode": "int64_t function_401c3f(void) {\n    // 0x401c3f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c44",
            "funcStartAddr": "401c44",
            "funcEndAddr": "401c49",
            "decompiledFuncCode": "int64_t function_401c44(void) {\n    // 0x401c44\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c49",
            "funcStartAddr": "401c49",
            "funcEndAddr": "401c4e",
            "decompiledFuncCode": "int64_t function_401c49(void) {\n    // 0x401c49\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c4e",
            "funcStartAddr": "401c4e",
            "funcEndAddr": "401c53",
            "decompiledFuncCode": "int64_t function_401c4e(void) {\n    // 0x401c4e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c60",
            "funcStartAddr": "401c60",
            "funcEndAddr": "401fe5",
            "decompiledFuncCode": "int64_t function_401c60(int64_t a1, int64_t a2) {\n    // 0x401c60\n    function_4036c0(a2);\n    setlocale(LC_ALL, (char *)&g12);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v1; // 0x401c60\n    function_409e30(0x403520, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    int64_t v2 = 1; // 0x401ca9\n    int64_t v3; // 0x401c60\n    while (true) {\n      lab_0x401cb0_2:\n        // 0x401cb0\n        v3 = v2;\n        int32_t v4 = function_406910(a1 & 0xffffffff, a2, \"abdlmpqrstuwHT\", &g3, 0, v1);\n        switch (v4) {\n            case -1: {\n                goto lab_0x401f06;\n            }\n            case 109: {\n                // 0x401ec0\n                g45 = 1;\n                // 0x401cb0\n                v2 = v3;\n                goto lab_0x401cb0_2;\n            }\n            default: {\n                int64_t v5; // 0x401c60\n                if (v4 > 109) {\n                    if (v4 == 115) {\n                        // 0x401ea0\n                        g57 = 1;\n                        // 0x401cb0\n                        v2 = v3;\n                        goto lab_0x401cb0_2;\n                    } else {\n                        if (v4 > 115) {\n                            if (v4 == 117) {\n                                // 0x401ef0\n                                g46 = 1;\n                                g56 = 1;\n                                // 0x401cb0\n                                v2 = 0;\n                                goto lab_0x401cb0_2;\n                            } else {\n                                if (v4 < 117) {\n                                    // 0x401ee0\n                                    g48 = 1;\n                                    // 0x401cb0\n                                    v2 = 0;\n                                    goto lab_0x401cb0_2;\n                                } else {\n                                    if (v4 == 119) {\n                                        goto lab_0x401ed0;\n                                    } else {\n                                        if (v4 != 128) {\n                                            // 0x401e3f\n                                            function_403080(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x401d09\n                                        g59 = 1;\n                                        // 0x401cb0\n                                        v2 = v3;\n                                        goto lab_0x401cb0_2;\n                                    }\n                                }\n                            }\n                        } else {\n                            if (v4 == 113) {\n                                // 0x401e50\n                                g58 = 1;\n                                v5 = v3;\n                            } else {\n                                if (v4 > 113) {\n                                    // 0x401d67\n                                    g47 = 1;\n                                    g56 = 1;\n                                    v5 = 0;\n                                } else {\n                                    if (v4 != 112) {\n                                        // 0x401e3f\n                                        function_403080(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x401e25\n                                    g49 = 1;\n                                    v5 = 0;\n                                }\n                            }\n                            // 0x401cb0\n                            v2 = v5;\n                            goto lab_0x401cb0_2;\n                        }\n                    }\n                } else {\n                    if (v4 == 84) {\n                        goto lab_0x401ed0;\n                    } else {\n                        if (v4 > 84) {\n                            if (v4 == 98) {\n                                // 0x401eb0\n                                g52 = 1;\n                                v5 = 0;\n                            } else {\n                                if (v4 > 98) {\n                                    if (v4 != 100) {\n                                        if (v4 != 108) {\n                                          lab_0x401e3f:\n                                            // 0x401e3f\n                                            function_403080(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x401d89\n                                        g50 = 1;\n                                        g56 = 1;\n                                        v5 = 0;\n                                    } else {\n                                        // 0x401d37\n                                        g51 = 1;\n                                        g56 = 1;\n                                        g53 = 1;\n                                        v5 = 0;\n                                    }\n                                } else {\n                                    if (v4 != 97) {\n                                        // 0x401e3f\n                                        function_403080(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x401da9\n                                    g52 = 1;\n                                    g51 = 1;\n                                    g50 = 1;\n                                    g49 = 1;\n                                    g47 = 1;\n                                    g48 = 1;\n                                    g46 = 1;\n                                    g54 = 1;\n                                    g56 = 1;\n                                    g53 = 1;\n                                    v5 = 0;\n                                }\n                            }\n                        } else {\n                            if (v4 == -130) {\n                                // 0x401faa\n                                function_403080(0);\n                                // UNREACHABLE\n                            }\n                            if (v4 != 72) {\n                                if (v4 == -131) {\n                                    // 0x401e60\n                                    function_405760((int64_t)g31, \"who\", \"GNU coreutils\", (int64_t)g20, \"Joseph Arceneaux\", \"David MacKenzie\");\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x401e3f;\n                            }\n                            // 0x401e10\n                            g55 = 1;\n                            v5 = v3;\n                        }\n                        // 0x401cb0\n                        v2 = v5;\n                        goto lab_0x401cb0_2;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x401f06:\n    if (v3 != 0) {\n        // 0x401f0b\n        g46 = 1;\n        g57 = 1;\n    }\n    // 0x401f19\n    if (g53 != 0) {\n        // 0x401f22\n        g57 = 0;\n    }\n    int64_t v6 = function_4035c0(2, a2); // 0x401f2e\n    g44 = (char)v6 != 0 ? \"%Y-%m-%d %H:%M\" : \"%b %e %H:%M\";\n    g43 = (char)v6 != 0 ? 16 : 12;\n    int32_t v7 = *(int32_t *)0x60e2fc; // 0x401f4c\n    int64_t v8 = v7; // 0x401f4c\n    int32_t v9 = (int32_t)a1 - v7; // 0x401f53\n    if (v9 == 1) {\n        // 0x401f9c\n        function_402920((char *)*(int64_t *)(8 * v8 + a2), 0);\n        // 0x401f70\n        return 0;\n    }\n    if (v9 > 1) {\n        if (v9 == 2) {\n            // 0x401f93\n            g45 = 1;\n            // 0x401f61\n            function_402920(\"/var/run/utmp\", 1);\n            // 0x401f70\n            return 0;\n        }\n    } else {\n        int32_t v10 = v9 + 1; // 0x401f5c\n        if (v10 < 0 == (v10 & (v9 ^ -0x80000000)) < 0) {\n            // 0x401f61\n            function_402920(\"/var/run/utmp\", 1);\n            // 0x401f70\n            return 0;\n        }\n    }\n    // 0x401fb1\n    function_4052e0(*(int64_t *)(a2 + 16 + 8 * v8));\n    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n    // 0x401e3f\n    function_403080(1);\n    // UNREACHABLE\n  lab_0x401ed0:\n    // 0x401ed0\n    g54 = 1;\n    // 0x401cb0\n    v2 = v3;\n    goto lab_0x401cb0_2;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401ff0",
            "funcEndAddr": "40201b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401ff0\n    int64_t v1; // 0x401ff0\n    __libc_start_main(0x401c60, (int32_t)a4, (char **)&v1, (void (*)())0x409dc0, (void (*)())0x409e20, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40201b",
            "funcStartAddr": "40201b",
            "funcEndAddr": "40203a",
            "decompiledFuncCode": "int64_t function_40201b(void) {\n    // 0x40201b\n    return &g30;\n}\n"
        },
        {
            "funcName": "function_40203a",
            "funcStartAddr": "40203a",
            "funcEndAddr": "402071",
            "decompiledFuncCode": "int64_t function_40203a(void) {\n    // 0x40203a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402071",
            "funcStartAddr": "402071",
            "funcEndAddr": "4020c8",
            "decompiledFuncCode": "int64_t function_402071(void) {\n    // 0x402071\n    if (g34 != 0) {\n        // 0x4020c7\n        int64_t result; // 0x402071\n        return result;\n    }\n    int64_t v1 = g35; // 0x4020a4\n    int64_t result2; // 0x4020b6\n    if (g35 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x4020b6\n        result2 = function_40201b();\n        g34 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x4020a6\n        v1++;\n    }\n    // 0x40209a\n    g35 = v1;\n    // 0x4020b6\n    result2 = function_40201b();\n    g34 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4020c8",
            "funcStartAddr": "4020c8",
            "funcEndAddr": "4020cd",
            "decompiledFuncCode": "int64_t function_4020c8(void) {\n    // 0x4020c8\n    return function_40203a();\n}\n"
        },
        {
            "funcName": "function_4020d0",
            "funcStartAddr": "4020d0",
            "funcEndAddr": "402303",
            "decompiledFuncCode": "int64_t function_4020d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int32_t * str, int64_t * str2, int64_t a9, int64_t * str3) {\n    // 0x4020d0\n    *(char *)&g19 = (char)a3;\n    char v1; // bp-77, 0x4020d0\n    if (g56 != 0 == g57 == 0) {\n        // 0x402260\n        if (strlen((char *)str) < 7) {\n            // 0x40227c\n            __sprintf_chk(&v1, 1, 8, \" %-6s\", str);\n            goto lab_0x402142;\n        } else {\n            // 0x402138\n            v1 = 0;\n            goto lab_0x402142;\n        }\n    } else {\n        // 0x402138\n        v1 = 0;\n        goto lab_0x402142;\n    }\n  lab_0x402142:;\n    // 0x402142\n    char v2; // bp-69, 0x4020d0\n    if (g57 != 0) {\n        // 0x402159\n        v2 = 0;\n        goto lab_0x402163;\n    } else {\n        // 0x402147\n        if (strlen((char *)str2) < 12) {\n            // 0x4022d8\n            __sprintf_chk(&v2, 1, 13, \" %10s\", str2);\n            goto lab_0x402163;\n        } else {\n            // 0x402159\n            v2 = 0;\n            goto lab_0x402163;\n        }\n    }\n  lab_0x402163:;\n    int64_t v3 = 1; // 0x40216f\n    if (g53 != 0) {\n        int32_t len = strlen((char *)str3); // 0x402176\n        v3 = len < 12 ? 14 : (int64_t)len + 2;\n    }\n    int64_t v4 = function_4058a0(v3); // 0x40218c\n    char * v5 = (char *)v4;\n    if (g53 != 0) {\n        // 0x4022b0\n        __sprintf_chk(v5, 1, -1, \" %-12s\", str3);\n    } else {\n        // 0x4021a1\n        *v5 = 0;\n    }\n    int64_t v6 = g54 == 0 ? (int64_t)&g12 : (int64_t)\" x\"; // 0x4021bb\n    int64_t v7 = a2 == 0 ? (int64_t)\"   .\" : a2; // 0x4021c7\n    char * str5; // bp-88, 0x4020d0\n    int64_t v8 = function_405b30((int64_t *)&str5, \"%-8.*s%s %-12.*s %-*s%s%s %-8s%s\", a1 & 0xffffffff, v7, v6, (int32_t)a4); // 0x4021f6\n    if ((int32_t)v8 == -1) {\n        // 0x4022fe\n        function_405af0((int64_t)&str5);\n        // UNREACHABLE\n    }\n    char * str4 = str5; // 0x402208\n    int64_t v9 = (int64_t)strlen(str4) + (int64_t)str4;\n    int64_t v10 = v9 - 1; // 0x402223\n    while (*(char *)v10 == 32) {\n        // 0x402223\n        v9 = v10;\n        v10 = v9 - 1;\n    }\n    // 0x40222d\n    *(char *)v9 = 0;\n    puts(str5);\n    free((int64_t *)str5);\n    free((int64_t *)v4);\n    return &g79;\n}\n"
        },
        {
            "funcName": "function_402310",
            "funcStartAddr": "402310",
            "funcEndAddr": "402372",
            "decompiledFuncCode": "int64_t function_402310(int64_t a1) {\n    int32_t len = strlen(dcgettext(NULL, \"id=\", 5)); // 0x40232d\n    char * str = (char *)function_4058a0((int64_t)len + 5); // 0x402355\n    strcpy(str, dcgettext(NULL, \"id=\", 5));\n    return (int64_t)strncat(str, (char *)(a1 + 40), 4);\n}\n"
        },
        {
            "funcName": "function_402380",
            "funcStartAddr": "402380",
            "funcEndAddr": "4023d4",
            "decompiledFuncCode": "int64_t function_402380(int32_t a1) {\n    int32_t timep = a1; // bp-16, 0x402387\n    struct tm * time_info = localtime(&timep); // 0x402391\n    if (time_info == NULL) {\n        // 0x4023c0\n        return function_403620((int64_t)timep, (int64_t *)&g39);\n    }\n    // 0x40239b\n    strftime((char *)&g39, 33, g44, time_info);\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_4023e0",
            "funcStartAddr": "4023e0",
            "funcEndAddr": "402920",
            "decompiledFuncCode": "int64_t function_4023e0(int64_t a1, int64_t a2) {\n    // 0x4023e0\n    int64_t v1; // bp-532, 0x4023e0\n    __sprintf_chk((char *)&v1, 1, 12, \"%ld\", *(int32_t *)(a1 + 4));\n    int64_t v2 = a1 + 8; // 0x402419\n    char v3 = *(char *)v2; // 0x402419\n    int64_t v4; // 0x4023e0\n    int64_t v5; // 0x4023e0\n    int64_t v6; // bp-520, 0x4023e0\n    if (v3 != 47) {\n        // 0x4026c0\n        v6 = 0x7665642f;\n        int64_t v7; // bp-515, 0x4023e0\n        int64_t v8 = &v7; // 0x4026df\n        v4 = v8;\n        v5 = v8;\n        if (v3 != 0) {\n            goto lab_0x402447;\n        } else {\n            goto lab_0x402457;\n        }\n    } else {\n        // 0x402426\n        v4 = &v6;\n        goto lab_0x402447;\n    }\n  lab_0x402447:;\n    int64_t v9 = v4 + 1; // 0x402447\n    int64_t v10 = v2 + 1; // 0x40244b\n    *(char *)v4 = v3;\n    v5 = v9;\n    while (a1 + 40 > v10) {\n        char v11 = *(char *)v10; // 0x402440\n        int64_t v12 = v9; // 0x402445\n        v5 = v9;\n        if (v11 == 0) {\n            // break -> 0x402457\n            break;\n        }\n        v9 = v12 + 1;\n        v10++;\n        *(char *)v12 = v11;\n        v5 = v9;\n    }\n    goto lab_0x402457;\n  lab_0x402457:\n    // 0x402457\n    *(char *)v5 = 0;\n    int64_t v13; // bp-472, 0x4023e0\n    int32_t v14 = __xstat(1, (char *)&v6, (struct stat *)&v13); // 0x402467\n    int64_t v15 = 63; // 0x40246e\n    int64_t v16; // 0x4023e0\n    int64_t v17; // 0x402490\n    if (v14 != 0) {\n        goto lab_0x4024a1;\n    } else {\n        // 0x402474\n        int32_t v18; // 0x4023e0\n        v17 = (v18 / 8 & 2 ^ 2) + 43;\n        v15 = v17;\n        if (v18 != 0) {\n            // 0x402620\n            if (g18 == (int32_t *)-0x8000000000000000) {\n                // 0x402800\n                time((int32_t *)&g18);\n            }\n            int64_t v19 = v18; // 0x40247b\n            if (v19 > a2) {\n                int64_t v20 = (int64_t)g18; // 0x40263c\n                if (v20 < v19 || v20 - 0x1517f > v19) {\n                    // 0x402658\n                    v16 = (int64_t)dcgettext(NULL, \" old \", 5);\n                    goto lab_0x40266c;\n                } else {\n                    int64_t v21 = v20 - v19; // 0x402841\n                    int32_t v22 = v21; // 0x402847\n                    v16 = (int64_t)\"  .  \";\n                    if (v22 >= 60) {\n                        if (v22 > 0x1517f) {\n                            // 0x402906\n                            __assert_fail(\"seconds_idle / (60 * 60) < 24\", \"src/who.c\", 205, \"idle_string\");\n                            return &g79;\n                        }\n                        uint32_t v23 = ((int32_t)(-0x6e5d4c3b * (0x100000000 * v21 >> 32) / 0x100000000 + v21) >> 11) - (int32_t)(v22 < 0); // 0x40287e\n                        __sprintf_chk((char *)&g40, 1, 6, \"%02d:%02d\", (int64_t)v23, 0x88888889 * (int64_t)(-3600 * v23 + v22) / 0x2000000000);\n                        v16 = (int64_t)&g40;\n                    }\n                    goto lab_0x40266c;\n                }\n            } else {\n                // 0x402658\n                v16 = (int64_t)dcgettext(NULL, \" old \", 5);\n                goto lab_0x40266c;\n            }\n        } else {\n            goto lab_0x4024a1;\n        }\n    }\n  lab_0x4024a1:;\n    int64_t v24 = a1 + 76;\n    char v25 = *(char *)v24; // 0x4024a1\n    int32_t v26 = 0x3f2020; // bp-539, 0x4024a5\n    int64_t v27 = v24; // 0x4024b4\n    char v28 = v25; // 0x4024b4\n    int64_t v29 = v15; // 0x4024b4\n    int64_t v30 = v15; // 0x4024b4\n    if (v25 == 0) {\n        goto lab_0x4026a0;\n    } else {\n        goto lab_0x4024ba;\n    }\n  lab_0x4026a0:;\n    char * v31 = g41; // 0x4026a8\n    char * v32; // 0x4023e0\n    int64_t v33; // 0x4023e0\n    if (g42 == 0) {\n        // 0x402708\n        g42 = 1;\n        free((int64_t *)v31);\n        int64_t v34 = function_4058a0(1); // 0x402720\n        char * v35 = (char *)v34;\n        g41 = v35;\n        v32 = v35;\n        v33 = v34;\n    } else {\n        // 0x4026a0\n        v32 = v31;\n        v33 = (int64_t)v31;\n    }\n    // 0x4026b1\n    *v32 = 0;\n    int64_t v36 = v33; // 0x4026b5\n    int64_t v37 = v30; // 0x4026b5\n    goto lab_0x4025d8;\n  lab_0x4024ba:;\n    int64_t v60 = v29;\n    char str; // bp-328, 0x4023e0\n    int64_t v40 = &str; // 0x4024ba\n    int64_t v63 = v40 + 1; // 0x4024df\n    int64_t v64 = v27 + 1; // 0x4024e3\n    *(char *)v40 = v28;\n    while (a1 + 332 > v64) {\n        char v65 = *(char *)v64; // 0x4024d8\n        int64_t v66 = v64; // 0x4024dd\n        int64_t v67 = v63; // 0x4024dd\n        char v68 = v65; // 0x4024dd\n        if (v65 == 0) {\n            // break -> 0x4024ef\n            break;\n        }\n        v63 = v67 + 1;\n        v64 = v66 + 1;\n        *(char *)v67 = v68;\n    }\n    // 0x4024ef\n    *(char *)v63 = 0;\n    char * found_char_pos = strchr(&str, 58); // 0x4024fa\n    char * v51; // 0x4023e0\n    int64_t v57; // 0x4023e0\n    int64_t v52; // 0x4023e0\n    int64_t v44; // 0x4023e0\n    int64_t len; // 0x4023e0\n    int32_t v45; // 0x4023e0\n    int64_t v50; // 0x4023e0\n    if (found_char_pos == NULL) {\n        // 0x402738\n        if (str == 0) {\n            goto lab_0x40274f;\n        } else {\n            // 0x402742\n            if (g59 != 0) {\n                int64_t str2 = function_4034e0((int64_t *)&str); // 0x4028b3\n                int64_t v69 = v40; // 0x4028be\n                if (str2 == 0) {\n                    int32_t v70 = *(int32_t *)v69; // 0x4028e9\n                    int64_t v71 = v69 + 4; // 0x4028eb\n                    int32_t v72 = (v70 & -0x7f7f7f80 ^ -0x7f7f7f80) & v70 - 0x1010101; // 0x4028f9\n                    v44 = v71;\n                    v45 = v72;\n                    v69 = v71;\n                    while (v72 == 0) {\n                        // 0x4028e9\n                        v70 = *(int32_t *)v69;\n                        v71 = v69 + 4;\n                        v72 = (v70 & -0x7f7f7f80 ^ -0x7f7f7f80) & v70 - 0x1010101;\n                        v44 = v71;\n                        v45 = v72;\n                        v69 = v71;\n                    }\n                    goto lab_0x40276a;\n                } else {\n                    // 0x4028c0\n                    len = strlen((char *)str2);\n                    v50 = g42;\n                    v51 = g41;\n                    v52 = str2;\n                    goto lab_0x40279d;\n                }\n            } else {\n                goto lab_0x40274f;\n            }\n        }\n    } else {\n        // 0x402508\n        *found_char_pos = 0;\n        int64_t v73 = v40; // 0x40251f\n        if (str != 0 && g59 != 0) {\n            int64_t v74 = function_4034e0((int64_t *)&str); // 0x40252d\n            v73 = v74 == 0 ? v40 : v74;\n        }\n        int64_t v75 = (int64_t)found_char_pos + 1; // 0x402508\n        int64_t v76 = v73;\n        char * str3 = (char *)v76; // 0x402543\n        int64_t len2 = strlen(str3); // 0x402543\n        int64_t v77 = g42; // 0x40254d\n        char * v78 = g41; // 0x402559\n        len = len2;\n        v50 = v77;\n        v51 = v78;\n        v52 = v76;\n        if (v75 == 0) {\n            goto lab_0x40279d;\n        } else {\n            char * str4 = (char *)v75; // 0x40251a\n            int64_t v79 = len2 + 4 + (int64_t)strlen(str4); // 0x402587\n            char * v80 = v78; // 0x40258f\n            if (v79 > v77) {\n                // 0x4027d0\n                g42 = v79;\n                free((int64_t *)v78);\n                v80 = (char *)function_4058a0(v79);\n                g41 = v80;\n            }\n            // 0x402595\n            __sprintf_chk(v80, 1, -1, \"(%s:%s)\", str3, str4);\n            v57 = v76;\n            goto lab_0x4025b8;\n        }\n    }\n  lab_0x4025d8:;\n    int64_t v38 = function_402380(*(int32_t *)(a1 + 340)); // 0x4025de\n    int64_t result = function_4020d0(32, a1 + 44, v37 & 0xffffffff, 32, v2, v38, &v26, &v1, v36, (int64_t *)&g12); // 0x402606\n    return result;\n  lab_0x40274f:;\n    int32_t v39 = *(int32_t *)v40; // 0x402752\n    int64_t v41 = v40 + 4; // 0x402754\n    int32_t v42 = (v39 & -0x7f7f7f80 ^ -0x7f7f7f80) & v39 - 0x1010101; // 0x402762\n    int64_t v43 = v41; // 0x402768\n    v44 = v41;\n    v45 = v42;\n    while (v42 == 0) {\n        // 0x402752\n        v39 = *(int32_t *)v43;\n        v41 = v43 + 4;\n        v42 = (v39 & -0x7f7f7f80 ^ -0x7f7f7f80) & v39 - 0x1010101;\n        v43 = v41;\n        v44 = v41;\n        v45 = v42;\n    }\n    goto lab_0x40276a;\n  lab_0x40279d:;\n    char * v53 = v51;\n    int64_t v54 = len + 3; // 0x40279d\n    char * v55 = v53; // 0x4027a4\n    if (v54 > v50) {\n        // 0x40280f\n        g42 = v54;\n        free((int64_t *)v53);\n        char * v56 = (char *)function_4058a0(v54);\n        g41 = v56;\n        v55 = v56;\n    }\n    // 0x4027a6\n    __sprintf_chk(v55, 1, -1, \"(%s)\", (char *)v52);\n    v57 = v52;\n    goto lab_0x4025b8;\n  lab_0x40266c:\n    // 0x40266c\n    __sprintf_chk((char *)&v26, 1, 7, \"%.*s\", 6, (char *)v16);\n    int64_t v61 = a1 + 76;\n    char v62 = *(char *)v61; // 0x402694\n    v27 = v61;\n    v28 = v62;\n    v29 = v17;\n    v30 = v17;\n    if (v62 != 0) {\n        goto lab_0x4024ba;\n    } else {\n        goto lab_0x4026a0;\n    }\n  lab_0x40276a:;\n    uint32_t v46 = v45;\n    int64_t v47 = v44;\n    int64_t v48 = (v46 & 0x8080) == 0 ? v47 + 2 : v47; // 0x402786\n    unsigned char v49 = (char)((v46 & 0x8080) == 0 ? v46 / 0x10000 : v46); // 0x40278c\n    len = v48 - v40 + (-1 - v49 < v49 ? -4 : -3);\n    v50 = g42;\n    v51 = g41;\n    v52 = v40;\n    goto lab_0x40279d;\n  lab_0x4025b8:\n    // 0x4025b8\n    if (v57 != v40) {\n        // 0x4025bd\n        int64_t v58; // 0x4023e0\n        free((int64_t *)v58);\n    }\n    char * v59 = g41; // 0x4025c5\n    v36 = v59 == NULL ? (int64_t)&g12 : (int64_t)v59;\n    v37 = v60;\n    goto lab_0x4025d8;\n}\n"
        },
        {
            "funcName": "function_402920",
            "funcStartAddr": "402920",
            "funcEndAddr": "403080",
            "decompiledFuncCode": "int64_t function_402920(char * a1, int64_t a2) {\n    int64_t v1 = (int64_t)a1;\n    int16_t * v2; // bp-80, 0x402920\n    int64_t v3; // bp-88, 0x402920\n    int64_t v4 = function_406a70(v1, &v3, (int64_t *)&v2, a2 & 0xffffffff); // 0x40293d\n    if ((int32_t)v4 != 0) {\n        // 0x40304b\n        error(1, *__errno_location(), \"%s\", (char *)function_405160(0, 3, v1));\n        return &g79;\n    }\n    // 0x40294a\n    int64_t v5; // bp-120, 0x402920\n    int64_t v6 = &v5; // 0x40292f\n    int64_t v7 = (int64_t)v2; // 0x402951\n    if (g58 != 0) {\n        // 0x402a74\n        if (v3 != 0) {\n            int64_t v8 = (int64_t)&g12;\n            int64_t v9 = v8; // 0x402a95\n            int64_t v10; // 0x402af2\n            if (*(char *)(v7 + 44) != 0) {\n                // 0x402a97\n                v9 = v8;\n                if (*(int16_t *)v7 == 7) {\n                    // 0x402aeb\n                    v10 = function_406a10(v7);\n                    __printf_chk(1, \"%s%s\", (char *)v8, (char *)v10);\n                    free((int64_t *)v10);\n                    v9 = &g1;\n                }\n            }\n            int64_t v11 = v3 - 1;\n            int64_t v12 = v11; // 0x402aad\n            int64_t v13 = v7 + 384; // 0x402aad\n            while (v11 != 0) {\n                int64_t v14 = v13;\n                v8 = v9;\n                v9 = v8;\n                if (*(char *)(v14 + 44) != 0) {\n                    // 0x402a97\n                    v9 = v8;\n                    if (*(int16_t *)v14 == 7) {\n                        // 0x402aeb\n                        v10 = function_406a10(v14);\n                        __printf_chk(1, \"%s%s\", (char *)v8, (char *)v10);\n                        free((int64_t *)v10);\n                        v9 = &g1;\n                    }\n                }\n                // 0x402a9e\n                v11 = v12 - 1;\n                v12 = v11;\n                v13 = v14 + 384;\n            }\n        }\n        // 0x402aaf\n        __printf_chk(1, dcgettext(NULL, \"\\n# users=%lu\\n\", 5));\n        // 0x402ad2\n        free((int64_t *)*(int64_t *)(v6 + 40));\n        return &g79;\n    }\n    // 0x402961\n    if (g55 != 0) {\n        char * v15 = dcgettext(NULL, \"EXIT\", 5); // 0x402db8\n        char * v16 = dcgettext(NULL, \"COMMENT\", 5); // 0x402dce\n        char * v17 = dcgettext(NULL, \"PID\", 5); // 0x402de2\n        char * v18 = dcgettext(NULL, \"IDLE\", 5); // 0x402df6\n        char * v19 = dcgettext(NULL, \"TIME\", 5); // 0x402e0a\n        char * v20 = dcgettext(NULL, \"LINE\", 5); // 0x402e20\n        function_4020d0(0xffffffff, (int64_t)dcgettext(NULL, \"NAME\", 5), 32, 0xffffffff, (int64_t)v20, (int64_t)v19, (int32_t *)v18, (int64_t *)v17, (int64_t)v16, (int64_t *)v15);\n    }\n    // 0x40296e\n    int64_t str2; // 0x402920\n    if (g45 != 0) {\n        char * str = ttyname(0); // 0x402d78\n        if (str == NULL) {\n            // 0x402ad2\n            free((int64_t *)*(int64_t *)(v6 + 40));\n            return &g79;\n        }\n        int64_t v21 = (int64_t)str; // 0x402d78\n        str2 = strncmp(str, \"/dev/\", 5) != 0 ? v21 : v21 + 5;\n    }\n    // 0x40297b\n    if (v3 == 0) {\n        // 0x402ad2\n        free((int64_t *)*(int64_t *)(v6 + 40));\n        return &g79;\n    }\n    // 0x402998\n    bool v22; // 0x402920\n    int64_t v23 = v22 ? -1 : 1;\n    int64_t v24 = v3;\n    int64_t v25 = v6;\n    int64_t v26 = -0x8000000000000000; // 0x402920\n    int64_t v27 = v7; // 0x402920\n    int64_t v28; // 0x402920\n    int64_t v29; // 0x402920\n    int16_t v30; // 0x402920\n    int64_t v31; // 0x402920\n    int64_t v32; // 0x402920\n    int16_t * v33; // 0x40299f\n    int16_t v34; // 0x40299f\n    while (true) {\n      lab_0x402998:\n        // 0x402998\n        v29 = v27;\n        v28 = v26;\n        v31 = v25;\n        v33 = (int16_t *)v29;\n        v34 = *v33;\n        if (g45 == 0) {\n            goto lab_0x4029be;\n        } else {\n            // 0x4029a5\n            v32 = v31;\n            v30 = v34;\n            if (strncmp((char *)str2, (char *)(v29 + 8), 32) != 0) {\n                goto lab_0x402a50;\n            } else {\n                goto lab_0x4029be;\n            }\n        }\n    }\n  lab_0x402ad2:;\n    // 0x402ad2\n    int64_t v35; // 0x402920\n    free((int64_t *)*(int64_t *)(v35 + 40));\n    return &g79;\n  lab_0x4029be:\n    // 0x4029be\n    if (g46 == 0) {\n        goto lab_0x4029d8;\n    } else {\n        // 0x4029c7\n        if (v34 == 7 == (*(char *)(v29 + 44) != 0)) {\n            // 0x402f63\n            function_4023e0(v29, v28);\n            v32 = v31;\n            v30 = *v33;\n            goto lab_0x402a50;\n        } else {\n            goto lab_0x4029d8;\n        }\n    }\n  lab_0x4029d8:;\n    // 0x4029d8\n    char * v36; // 0x402920\n    int64_t v37; // 0x402920\n    int64_t v38; // 0x402920\n    int64_t v39; // 0x402920\n    int64_t v40; // 0x402920\n    int64_t v41; // 0x402920\n    int64_t v42; // 0x402d05\n    int64_t v43; // 0x402d33\n    int64_t v44; // 0x402d6c\n    if (v34 == 1 == (g47 != 0)) {\n        uint32_t v45 = *(int32_t *)(v29 + 4); // 0x402b24\n        if (g38 == NULL) {\n            int64_t v46 = (int64_t)dcgettext(NULL, \"run-level\", 5); // 0x402fc4\n            int64_t v47 = -1; // 0x402fc4\n            int64_t v48 = 0; // 0x402fc4\n            while (v47 != 0) {\n                int64_t v49 = v46;\n                v47--;\n                v46 = v49 + v23;\n                v48 = v47;\n                if (*(char *)v49 == 0) {\n                    // break -> \n                    break;\n                }\n                v48 = 0;\n            }\n            g38 = (char *)function_4058a0(1 - v48);\n        }\n        // 0x402b43\n        __sprintf_chk(g38, 1, -1, \"%s %c\", dcgettext(NULL, \"run-level\", 5), (char)v45);\n        if (g37 == NULL) {\n            int64_t v50 = (int64_t)dcgettext(NULL, \"last=\", 5); // 0x402f91\n            int64_t v51 = -1; // 0x402f91\n            int64_t v52 = 0; // 0x402f91\n            while (v51 != 0) {\n                int64_t v53 = v50;\n                v51--;\n                v50 = v53 + v23;\n                v52 = v51;\n                if (*(char *)v53 == 0) {\n                    // break -> \n                    break;\n                }\n                v52 = 0;\n            }\n            g37 = (char *)function_4058a0(-v52);\n        }\n        int64_t v54 = (0x100000000 * (int64_t)(v45 / 0x80000000) | (int64_t)v45) / 256; // 0x402b2e\n        char v55 = v54; // 0x402b85\n        __sprintf_chk(g37, 1, -1, \"%s%c\", dcgettext(NULL, \"last=\", 5), v55 != 78 ? v55 : 83);\n        int64_t v56 = (int32_t)v54 % 256 < 127 ? (int64_t)g37 : (int64_t)&g12;\n        int64_t v57 = function_402380(*(int32_t *)(v29 + 340)); // 0x402be3\n        *(int64_t *)(v31 - 8) = (int64_t)&g12;\n        *(int64_t *)(v31 - 16) = v56;\n        *(int64_t *)(v31 - 24) = (int64_t)&g12;\n        int64_t v58 = v31 - 32; // 0x402bfd\n        *(int64_t *)v58 = (int64_t)&g12;\n        v36 = g38;\n        v37 = v57;\n        v40 = v58;\n        goto lab_0x402c02;\n    } else {\n        // 0x4029eb\n        if (v34 == 2 == (g52 != 0)) {\n            // 0x402c25\n            v41 = (int64_t)\"system boot\";\n            v39 = function_402380(*(int32_t *)(v29 + 340));\n            goto lab_0x402c3e;\n        } else {\n            // 0x4029fe\n            if (v34 == 3 == (g48 != 0)) {\n                // 0x402c61\n                v41 = (int64_t)\"clock change\";\n                v39 = function_402380(*(int32_t *)(v29 + 340));\n                goto lab_0x402c3e;\n            } else {\n                // 0x402a11\n                if (v34 == 5 == (g49 != 0)) {\n                    int64_t v59 = function_402310(v29); // 0x402c8b\n                    int64_t v60 = v31 + 52; // 0x402c94\n                    __sprintf_chk((char *)v60, 1, 12, \"%ld\", *(int32_t *)(v29 + 4));\n                    int64_t v61 = function_402380(*(int32_t *)(v29 + 340)); // 0x402cb9\n                    *(int64_t *)(v31 - 8) = (int64_t)&g12;\n                    *(int64_t *)(v31 - 16) = v59;\n                    *(int64_t *)(v31 - 24) = v60;\n                    int64_t v62 = v31 - 32; // 0x402ce0\n                    *(int64_t *)v62 = (int64_t)&g12;\n                    v42 = v59;\n                    v38 = (int64_t)&g12;\n                    v43 = v61;\n                    v44 = v62;\n                    goto lab_0x402ce5;\n                } else {\n                    // 0x402a24\n                    if (v34 == 6 == (g50 != 0)) {\n                        // 0x402d02\n                        v42 = function_402310(v29);\n                        int64_t v63 = v31 + 52; // 0x402d0e\n                        __sprintf_chk((char *)v63, 1, 12, \"%ld\", *(int32_t *)(v29 + 4));\n                        v43 = function_402380(*(int32_t *)(v29 + 340));\n                        char * v64 = dcgettext(NULL, \"LOGIN\", 5); // 0x402d47\n                        *(int64_t *)(v31 - 8) = (int64_t)&g12;\n                        *(int64_t *)(v31 - 16) = v42;\n                        *(int64_t *)(v31 - 24) = v63;\n                        v44 = v31 - 32;\n                        *(int64_t *)v44 = (int64_t)&g12;\n                        v38 = (int64_t)v64;\n                        goto lab_0x402ce5;\n                    } else {\n                        // 0x402a37\n                        v32 = v31;\n                        v30 = v34;\n                        if (v34 == 8 == (g51 != 0)) {\n                            int64_t v65 = function_402310(v29); // 0x402e6f\n                            int64_t v66 = v31 + 52; // 0x402e8a\n                            __sprintf_chk((char *)v66, 1, 12, \"%ld\", *(int32_t *)(v29 + 4));\n                            int64_t v67; // 0x402920\n                            if (g36 == NULL) {\n                                int64_t v68 = (int64_t)dcgettext(NULL, \"term=\", 5); // 0x403009\n                                int64_t v69 = -1; // 0x403009\n                                int64_t v70 = 0; // 0x403009\n                                while (v69 != 0) {\n                                    int64_t v71 = v68;\n                                    v69--;\n                                    v68 = v71 + v23;\n                                    v70 = v69;\n                                    if (*(char *)v71 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v70 = 0;\n                                }\n                                int64_t v72 = v31 + 8;\n                                int64_t * v73 = (int64_t *)v72; // 0x403014\n                                *v73 = -2 - v70;\n                                int64_t v74 = (int64_t)dcgettext(NULL, \"exit=\", 5); // 0x40302b\n                                int64_t v75 = -1; // 0x40302b\n                                int64_t v76 = 0; // 0x40302b\n                                while (v75 != 0) {\n                                    int64_t v77 = v74;\n                                    v75--;\n                                    v74 = v77 + v23;\n                                    v76 = v75;\n                                    if (*(char *)v77 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v76 = 0;\n                                }\n                                g36 = (char *)function_4058a0(12 - v76 + *v73);\n                                v67 = v72;\n                            } else {\n                                // 0x402e6c\n                                v67 = v31 + 8;\n                            }\n                            int32_t * v78 = (int32_t *)(v31 + 16); // 0x402eb8\n                            *v78 = (int32_t)*(int16_t *)(v29 + 334);\n                            char * v79 = dcgettext(NULL, \"exit=\", 5); // 0x402ebd\n                            int32_t * v80 = (int32_t *)v67; // 0x402ed9\n                            *v80 = (int32_t)*(int16_t *)(v29 + 332);\n                            char * v81 = dcgettext(NULL, \"term=\", 5); // 0x402edd\n                            *(int64_t *)(v31 - 8) = (int64_t)*v78;\n                            *(int64_t *)(v31 - 16) = (int64_t)v79;\n                            __sprintf_chk(g36, 1, -1, \"%s%d %s%d\", v81, (int64_t)*v80);\n                            int64_t v82 = function_402380(*(int32_t *)(v29 + 340)); // 0x402f1d\n                            *(int64_t *)(v31 - 24) = (int64_t)g36;\n                            *(int64_t *)(v31 - 32) = v65;\n                            *(int64_t *)(v31 - 40) = v66;\n                            *(int64_t *)(v31 - 48) = (int64_t)&g12;\n                            function_4020d0(0xffffffff, (int64_t)&g12, 32, 32, v29 + 8, v82, &g79, (int64_t *)&g79, (int64_t)&g79, (int64_t *)&g79);\n                            free((int64_t *)v65);\n                            v32 = v31;\n                            v30 = *v33;\n                        }\n                        goto lab_0x402a50;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x402a50:\n    // 0x402a50\n    v25 = v32;\n    v26 = v28;\n    if (v30 == 2) {\n        // 0x402a56\n        v26 = (int64_t)*(int32_t *)(v29 + 340);\n    }\n    // 0x402a5d\n    v24--;\n    v27 = v29 + 384;\n    v35 = v25;\n    if (v24 == 0) {\n        // break -> 0x402ad2\n        goto lab_0x402ad2;\n    }\n    goto lab_0x402998;\n  lab_0x402c02:\n    // 0x402c02\n    function_4020d0(0xffffffff, (int64_t)&g12, 32, 0xffffffff, (int64_t)v36, v37, &g79, (int64_t *)&g79, (int64_t)&g79, (int64_t *)&g79);\n    v32 = v40 + 32;\n    v30 = *v33;\n    goto lab_0x402a50;\n  lab_0x402c3e:;\n    char * v83 = dcgettext(NULL, (char *)v41, 5); // 0x402c40\n    *(int64_t *)(v31 - 8) = (int64_t)&g12;\n    *(int64_t *)(v31 - 16) = (int64_t)&g12;\n    *(int64_t *)(v31 - 24) = (int64_t)&g12;\n    int64_t v84 = v31 - 32; // 0x402c5a\n    *(int64_t *)v84 = (int64_t)&g12;\n    v36 = v83;\n    v37 = v39;\n    v40 = v84;\n    goto lab_0x402c02;\n  lab_0x402ce5:\n    // 0x402ce5\n    function_4020d0(0xffffffff, v38, 32, 32, v29 + 8, v43, &g79, (int64_t *)&g79, (int64_t)&g79, (int64_t *)&g79);\n    free((int64_t *)v42);\n    v32 = v44 + 32;\n    v30 = *v33;\n    goto lab_0x402a50;\n}\n"
        },
        {
            "funcName": "function_403080",
            "funcStartAddr": "403080",
            "funcEndAddr": "40344d",
            "decompiledFuncCode": "int64_t function_403080(int64_t a1) {\n    int32_t status = a1; // 0x403096\n    if (status != 0) {\n        // 0x40309a\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4030bf\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4030c6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [ FILE | ARG1 ARG2 ]\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print information about users who are currently logged in.\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"\\n  -a, --all         same as -b -d --login -p -r -t -T -u\\n  -b, --boot        time of last system boot\\n  -d, --dead        print dead processes\\n  -H, --heading     print line of column headings\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"  -l, --login       print system login processes\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --lookup      attempt to canonicalize hostnames via DNS\\n  -m                only hostname and user associated with stdin\\n  -p, --process     print active processes spawned by init\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"  -q, --count       all login names and number of users logged on\\n  -r, --runlevel    print current runlevel\\n  -s, --short       print only name, line, and time (default)\\n  -t, --time        print last system clock change\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"  -T, -w, --mesg    add user's message status as +, - or ?\\n  -u, --users       list users logged in\\n      --message     same as -T\\n      --writable    same as -T\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g31);\n    __printf_chk(1, dcgettext(NULL, \"\\nIf FILE is not specified, use %s.  %s as FILE is common.\\nIf ARG1 ARG2 given, -m presumed: 'am i' or 'mom likes' are usual.\\n\", 5));\n    int64_t v1 = &g2; // bp-136, 0x403226\n    bool v2; // 0x403080\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4032b0\n    int64_t v6 = *(int64_t *)v5; // 0x4032b4\n    int64_t v7 = 4; // 0x4032ba\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"who\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4032c6\n        char v11 = *(char *)v9; // 0x4032c6\n        char v12 = v11; // 0x4032c6\n        bool v13 = false; // 0x4032c6\n        while (v10 == v11) {\n            // 0x4032bc\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4032c6\n            int64_t v15 = v8 + v3; // 0x4032c6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4032d2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 4;\n    }\n    // 0x4032d2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4033e4;\n        } else {\n            // 0x4033ce\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403423\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403334;\n            } else {\n                goto lab_0x4033e4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x403334;\n        } else {\n            // 0x40331a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403423\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403334;\n            } else {\n                goto lab_0x403334;\n            }\n        }\n    }\n  lab_0x4033e4:\n    // 0x4033e4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x403374\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4030bf\n    exit(status);\n    // UNREACHABLE\n  lab_0x403334:\n    // 0x403334\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x403374\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4030bf\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403450",
            "funcStartAddr": "403450",
            "funcEndAddr": "4034de",
            "decompiledFuncCode": "int64_t function_403450(int64_t node, int64_t * a2) {\n    // 0x403450\n    *(int32_t *)&g60 = 2;\n    struct addrinfo * addr_info = NULL; // bp-32, 0x40346f\n    int32_t v1 = getaddrinfo((char *)node, NULL, (struct addrinfo *)&g60, &addr_info); // 0x40347d\n    if (v1 != 0) {\n        // 0x4034c8\n        if (a2 == NULL) {\n            // 0x4034b8\n            return 0;\n        }\n        // 0x4034cf\n        *(int32_t *)a2 = v1;\n        return 0;\n    }\n    int64_t v2 = *(int64_t *)((int64_t)addr_info + 32); // 0x40348b\n    char * v3 = strdup((char *)(v2 == 0 ? node : v2)); // 0x403497\n    if (a2 != NULL && v3 == NULL) {\n        // 0x4034a9\n        *(int32_t *)a2 = -10;\n    }\n    // 0x4034b0\n    freeaddrinfo(addr_info);\n    // 0x4034b8\n    return (int64_t)v3;\n}\n"
        },
        {
            "funcName": "function_4034e0",
            "funcStartAddr": "4034e0",
            "funcEndAddr": "4034ea",
            "decompiledFuncCode": "int64_t function_4034e0(int64_t * a1) {\n    // 0x4034e0\n    return function_403450((int64_t)a1, (int64_t *)&g61);\n}\n"
        },
        {
            "funcName": "function_4034f0",
            "funcStartAddr": "4034f0",
            "funcEndAddr": "4034fb",
            "decompiledFuncCode": "int64_t function_4034f0(void) {\n    // 0x4034f0\n    return (int64_t)gai_strerror(g61);\n}\n"
        },
        {
            "funcName": "function_403500",
            "funcStartAddr": "403500",
            "funcEndAddr": "403508",
            "decompiledFuncCode": "int64_t function_403500(int64_t a1) {\n    // 0x403500\n    g63 = a1;\n    int64_t result; // 0x403500\n    return result;\n}\n"
        },
        {
            "funcName": "function_403510",
            "funcStartAddr": "403510",
            "funcEndAddr": "403518",
            "decompiledFuncCode": "int64_t function_403510(int64_t a1) {\n    // 0x403510\n    g62 = a1;\n    int64_t result; // 0x403510\n    return result;\n}\n"
        },
        {
            "funcName": "function_403520",
            "funcStartAddr": "403520",
            "funcEndAddr": "4035be",
            "decompiledFuncCode": "int64_t function_403520(void) {\n    // 0x403520\n    int32_t * err_num; // 0x403536\n    if ((int32_t)function_406c80((int64_t)g31) == 0) {\n        goto lab_0x40354c;\n    } else {\n        // 0x403536\n        err_num = __errno_location();\n        if (g62 == 0) {\n            goto lab_0x403563;\n        } else {\n            // 0x403547\n            if (*err_num != 32) {\n                goto lab_0x403563;\n            } else {\n                goto lab_0x40354c;\n            }\n        }\n    }\n  lab_0x40354c:;\n    int64_t result = function_406c80((int64_t)g33); // 0x403553\n    if ((int32_t)result == 0) {\n        // 0x40355c\n        return result;\n    }\n    // 0x40359e\n    _exit(g21);\n    // UNREACHABLE\n  lab_0x403563:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40356f\n    if (g63 == 0) {\n        // 0x4035a9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x403583\n        error(0, *err_num, \"%s: %s\", (char *)function_405130((int64_t)g63), v1);\n    }\n    // 0x40359e\n    _exit(g21);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4035c0",
            "funcStartAddr": "4035c0",
            "funcEndAddr": "40361e",
            "decompiledFuncCode": "int64_t function_4035c0(int64_t locale_category, int64_t a2) {\n    char * locale = setlocale((int32_t)locale_category, NULL); // 0x4035c6\n    if (locale == NULL) {\n        // 0x4035f3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4035c6\n    bool v2; // 0x4035c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g4; // 0x4035c0\n    int64_t v5 = v1; // 0x4035c0\n    int64_t v6 = 2; // 0x4035e5\n    unsigned char v7 = *(char *)v5; // 0x4035e5\n    char v8 = *(char *)v4; // 0x4035e5\n    char v9 = v8; // 0x4035e5\n    bool v10 = false; // 0x4035e5\n    while (v7 == v8) {\n        // 0x4035d8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4035f1\n    int64_t v13 = v1; // 0x4035f1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4035f3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4035f1\n    unsigned char v15 = *(char *)v13; // 0x40360d\n    char v16 = *(char *)v12; // 0x40360d\n    char v17 = v16; // 0x40360d\n    bool v18 = false; // 0x40360d\n    while (v15 == v16) {\n        // 0x403600\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_403620",
            "funcStartAddr": "403620",
            "funcEndAddr": "4036bc",
            "decompiledFuncCode": "int64_t function_403620(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x403620\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x403645\n    if (a1 >= 0) {\n        result--;\n        *(char *)result = (char)a1 + 48;\n        // 0x403676\n        return result;\n    }\n    int64_t v2 = v1;\n    int64_t v3 = a1 / 0x8000000000000000; // 0x403698\n    int64_t v4 = v2 - 1; // 0x4036a8\n    *(char *)v4 = 48 - (char)a1 + 10 * (char)v3;\n    while (v3 != 0) {\n        uint64_t v5 = v3;\n        v2 = v4;\n        v3 = v5 / 0x8000000000000000;\n        v4 = v2 - 1;\n        *(char *)v4 = 48 - (char)v5 + 10 * (char)v3;\n    }\n    int64_t result2 = v2 - 2; // 0x4036b0\n    *(char *)result2 = 45;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4036c0",
            "funcStartAddr": "4036c0",
            "funcEndAddr": "403759",
            "decompiledFuncCode": "int64_t function_4036c0(int64_t str) {\n    // 0x4036c0\n    if (str == 0) {\n        // 0x403739\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g33);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4036ce\n    int64_t result = (int64_t)found_char_pos; // 0x4036ce\n    if (found_char_pos == NULL) {\n        // 0x403729\n        g64 = str;\n        g32 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4036d8\n    if (v1 - str < 7) {\n        // 0x403729\n        g64 = str;\n        g32 = str;\n        return result;\n    }\n    // 0x4036e8\n    bool v2; // 0x4036c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4036c0\n    int64_t v5 = result - 6; // 0x4036c0\n    int64_t v6 = 7; // 0x4036f6\n    unsigned char v7 = *(char *)v5; // 0x4036f6\n    char v8 = *(char *)v4; // 0x4036f6\n    char v9 = v8; // 0x4036f6\n    bool v10 = false; // 0x4036f6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403700\n    int64_t v13 = v1; // 0x403700\n    int64_t v14 = 3; // 0x403700\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403729\n        g64 = str;\n        g32 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403712\n    char v16 = *(char *)v12; // 0x403712\n    char v17 = v16; // 0x403712\n    bool v18 = false; // 0x403712\n    while (v15 == v16) {\n        // 0x403702\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40371c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40371e\n        v20 = result + 4;\n        g30 = v20;\n    }\n    // 0x403729\n    g64 = v20;\n    g32 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403760",
            "funcStartAddr": "403760",
            "funcEndAddr": "403852",
            "decompiledFuncCode": "int64_t function_403760(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x403774\n    int64_t result = (int64_t)v1; // 0x403774\n    if (result != a1) {\n        // 0x403781\n        return result;\n    }\n    int64_t v2 = function_406ce0(); // 0x403790\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403846\n    if (v3 == 85) {\n        // 0x4037a0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403838\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x4037ce\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x4037db\n        // 0x403781\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403838\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x40381d\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x40382a\n    // 0x403781\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403860",
            "funcStartAddr": "403860",
            "funcEndAddr": "4038b7",
            "decompiledFuncCode": "int64_t function_403860(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x403860\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4038a8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4038b7",
            "funcStartAddr": "4038b7",
            "funcEndAddr": "404a81",
            "decompiledFuncCode": "int64_t function_4038b7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403901\n    int64_t v3 = 0; // 0x403901\n    int64_t v4; // 0x4038b7\n    int64_t v5; // 0x4038b7\n    int64_t v6; // 0x4038b7\n    int64_t v7; // 0x4038b7\n    int64_t v8; // 0x4038b7\n    int64_t v9; // 0x4038b7\n    int64_t v10; // 0x4038b7\n    int64_t v11; // 0x4038b7\n    int64_t v12; // 0x4038b7\n    int64_t v13; // 0x4038b7\n    int64_t v14; // 0x4038b7\n    int64_t v15; // 0x4038b7\n    int64_t v16; // 0x4038b7\n    int64_t v17; // 0x4038b7\n    int64_t v18; // 0x4038b7\n    int64_t result; // 0x4038b7\n    int64_t v19; // 0x4038b7\n    int32_t wc; // bp+132, 0x4038b7\n    int64_t ps; // bp+136, 0x4038b7\n    char v20; // 0x403e70\n    int64_t v21; // 0x403e70\n    int64_t v22; // 0x404218\n    int64_t v23; // 0x4038b7\n    int64_t v24; // 0x404237\n    int32_t v25; // 0x4038b7\n    while (true) {\n      lab_0x403908_2:\n        // 0x403908\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4038b7\n        int64_t v27; // 0x40393c\n        while (true) {\n          lab_0x403908:\n            // 0x403908\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403913\n            if (v15 == -1) {\n                // 0x403915\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403923\n            if (v28) {\n                // break (via goto) -> 0x404088\n                goto lab_0x404088;\n            }\n            // 0x40392c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g78 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x403f1b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x403a61;\n                    }\n                    // 0x40433d\n                    v26 = v5 + 1;\n                    goto lab_0x403908;\n                }\n                case 7: {\n                    goto lab_0x403a61;\n                }\n                case 8: {\n                    goto lab_0x403a61;\n                }\n                case 9: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x403a61;\n                }\n                case 12: {\n                    goto lab_0x403a61;\n                }\n                case 13: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x403a2d;\n                }\n                case 36: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x403a61;\n                }\n                case 38: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x403a61;\n                }\n                case 44: {\n                    goto lab_0x403a61;\n                }\n                case 45: {\n                    goto lab_0x403a61;\n                }\n                case 46: {\n                    goto lab_0x403a61;\n                }\n                case 47: {\n                    goto lab_0x403a61;\n                }\n                case 48: {\n                    goto lab_0x403a61;\n                }\n                case 49: {\n                    goto lab_0x403a61;\n                }\n                case 50: {\n                    goto lab_0x403a61;\n                }\n                case 51: {\n                    goto lab_0x403a61;\n                }\n                case 52: {\n                    goto lab_0x403a61;\n                }\n                case 53: {\n                    goto lab_0x403a61;\n                }\n                case 54: {\n                    goto lab_0x403a61;\n                }\n                case 55: {\n                    goto lab_0x403a61;\n                }\n                case 56: {\n                    goto lab_0x403a61;\n                }\n                case 57: {\n                    goto lab_0x403a61;\n                }\n                case 58: {\n                    goto lab_0x403a61;\n                }\n                case 59: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x403a61;\n                }\n                case 66: {\n                    goto lab_0x403a61;\n                }\n                case 67: {\n                    goto lab_0x403a61;\n                }\n                case 68: {\n                    goto lab_0x403a61;\n                }\n                case 69: {\n                    goto lab_0x403a61;\n                }\n                case 70: {\n                    goto lab_0x403a61;\n                }\n                case 71: {\n                    goto lab_0x403a61;\n                }\n                case 72: {\n                    goto lab_0x403a61;\n                }\n                case 73: {\n                    goto lab_0x403a61;\n                }\n                case 74: {\n                    goto lab_0x403a61;\n                }\n                case 75: {\n                    goto lab_0x403a61;\n                }\n                case 76: {\n                    goto lab_0x403a61;\n                }\n                case 77: {\n                    goto lab_0x403a61;\n                }\n                case 78: {\n                    goto lab_0x403a61;\n                }\n                case 79: {\n                    goto lab_0x403a61;\n                }\n                case 80: {\n                    goto lab_0x403a61;\n                }\n                case 81: {\n                    goto lab_0x403a61;\n                }\n                case 82: {\n                    goto lab_0x403a61;\n                }\n                case 83: {\n                    goto lab_0x403a61;\n                }\n                case 84: {\n                    goto lab_0x403a61;\n                }\n                case 85: {\n                    goto lab_0x403a61;\n                }\n                case 86: {\n                    goto lab_0x403a61;\n                }\n                case 87: {\n                    goto lab_0x403a61;\n                }\n                case 88: {\n                    goto lab_0x403a61;\n                }\n                case 89: {\n                    goto lab_0x403a61;\n                }\n                case 90: {\n                    goto lab_0x403a61;\n                }\n                case 91: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x403a61;\n                }\n                case 94: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x403a61;\n                }\n                case 96: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x403a61;\n                }\n                case 98: {\n                    goto lab_0x403a61;\n                }\n                case 99: {\n                    goto lab_0x403a61;\n                }\n                case 100: {\n                    goto lab_0x403a61;\n                }\n                case 101: {\n                    goto lab_0x403a61;\n                }\n                case 102: {\n                    goto lab_0x403a61;\n                }\n                case 103: {\n                    goto lab_0x403a61;\n                }\n                case 104: {\n                    goto lab_0x403a61;\n                }\n                case 105: {\n                    goto lab_0x403a61;\n                }\n                case 106: {\n                    goto lab_0x403a61;\n                }\n                case 107: {\n                    goto lab_0x403a61;\n                }\n                case 108: {\n                    goto lab_0x403a61;\n                }\n                case 109: {\n                    goto lab_0x403a61;\n                }\n                case 110: {\n                    goto lab_0x403a61;\n                }\n                case 111: {\n                    goto lab_0x403a61;\n                }\n                case 112: {\n                    goto lab_0x403a61;\n                }\n                case 113: {\n                    goto lab_0x403a61;\n                }\n                case 114: {\n                    goto lab_0x403a61;\n                }\n                case 115: {\n                    goto lab_0x403a61;\n                }\n                case 116: {\n                    goto lab_0x403a61;\n                }\n                case 117: {\n                    goto lab_0x403a61;\n                }\n                case 118: {\n                    goto lab_0x403a61;\n                }\n                case 119: {\n                    goto lab_0x403a61;\n                }\n                case 120: {\n                    goto lab_0x403a61;\n                }\n                case 121: {\n                    goto lab_0x403a61;\n                }\n                case 122: {\n                    goto lab_0x403a61;\n                }\n                case 123: {\n                    goto lab_0x403a05;\n                }\n                case 124: {\n                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403a05;\n                }\n                case 126: {\n                    goto lab_0x403a2d;\n                }\n                default: {\n                    goto lab_0x403e05;\n                }\n            }\n        }\n      lab_0x403e05:\n        if (v23 != 1) {\n            // 0x404170\n            ps = 0;\n            int64_t len = v15; // 0x404180\n            if (v15 == -1) {\n                // 0x404182\n                len = strlen((char *)str);\n            }\n            // 0x4041ae\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40420f:\n                // 0x40420f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x404214\n                int64_t v30 = v29 + str;\n                v24 = function_406990(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40478a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40478a_2;\n                    }\n                    case -2: {\n                        // 0x40486d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4048a7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4048aa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4048b7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4048b0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40478a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40478a_2;\n                    }\n                    case 1: {\n                        goto lab_0x4041e0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40428c\n                        char v34 = *(char *)v33; // 0x40429d\n                        unsigned char v35; // 0x4038b7\n                        if (v34 < 125) {\n                            // 0x4042a8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4042bf\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x404290\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40429d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4042a8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4042bf\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x404290\n                            v33++;\n                        }\n                        goto lab_0x4041e0;\n                    }\n                }\n            }\n            goto lab_0x40478a_2;\n        } else {\n            // 0x403e54\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x403a61;\n        }\n    }\n  lab_0x404088:\n    // 0x404088\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40498a\n        if (v8 > result) {\n            // 0x404993\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403cb7\n        return result;\n    }\n    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403a61:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x403a70\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x403c7a_2;\n        }\n    }\n    int64_t v39 = result; // 0x403b71\n    char v40 = v20; // 0x403b71\n    int64_t v41 = v38; // 0x403b71\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x403b71\n    int64_t v43 = v36; // 0x403b71\n    goto lab_0x403aed;\n  lab_0x403c7a_2:\n    // 0x403cb7\n    return function_403860(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40478a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x403a61;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40435e\n        int64_t v50 = v5 + 1; // 0x404441\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x404448\n        char v52 = v20; // 0x404448\n        int64_t v53 = result; // 0x404448\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x404411\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x404415\n            int64_t v56 = v54 + 1; // 0x40441a\n            int64_t v57 = v51 + 1; // 0x404441\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40440c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x404411\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x404415\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x403aed;\n    }\n  lab_0x4041e0:\n    // 0x4041e0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x4041ff\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404202\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40478a\n        goto lab_0x40478a_2;\n    }\n    goto lab_0x40420f;\n  lab_0x403a2d:\n    // 0x403a2d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x403c7a_2;\n    }\n    goto lab_0x403a61;\n  lab_0x403a05:;\n    bool v60 = v15 == 1; // 0x403a10\n    if (v15 == -1) {\n        // 0x403a12\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x403a1e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x403a61;\n    } else {\n        goto lab_0x403a2d;\n    }\n  lab_0x403aed:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403af2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403af6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403908_2;\n}\n"
        },
        {
            "funcName": "function_404a90",
            "funcStartAddr": "404a90",
            "funcEndAddr": "404c2e",
            "decompiledFuncCode": "int64_t function_404a90(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x404a92\n    int32_t * v3 = __errno_location(); // 0x404aac\n    int64_t v4 = (int64_t)g23; // 0x404ab1\n    int32_t v5 = *v3; // 0x404abb\n    int64_t v6 = v4; // 0x404ad1\n    if (v2 >= (int64_t)*(int32_t *)&g26) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x404c29\n            function_405af0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x404ae0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x404ae7\n        int64_t v9; // 0x404a90\n        if (g23 == &g24) {\n            int64_t v10 = function_405900(0, v8); // 0x404c0a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g24); // 0x404c0f\n            *(int64_t *)&g23 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_405900(v4, v8); // 0x404afb\n            *(int64_t *)&g23 = v12;\n            v9 = v12;\n        }\n        // 0x404b0a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g26; // 0x404b0a\n        int32_t v14 = v7; // 0x404b11\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g26 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x404b41\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x404b4b\n    int64_t * v17 = (int64_t *)v15; // 0x404b4e\n    uint64_t v18 = *v17; // 0x404b4e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x404b51\n    int64_t result = *v19; // 0x404b51\n    int64_t v20; // 0x404a90\n    uint64_t v21 = function_403860(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x404b74\n    if (v18 > v21) {\n        // 0x404beb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x404b87\n    *v17 = v22;\n    if (result != (int64_t)&g65) {\n        // 0x404b97\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4058a0(v22); // 0x404bb1\n    *v19 = result2;\n    int64_t v23; // 0x404a90\n    function_403860(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x404beb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404c30",
            "funcStartAddr": "404c30",
            "funcEndAddr": "404c64",
            "decompiledFuncCode": "int64_t function_404c30(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x404c37\n    int64_t result = function_405aa0(a1 == 0 ? (int64_t)&g66 : a1, 56); // 0x404c56\n    return result;\n}\n"
        },
        {
            "funcName": "function_404c70",
            "funcStartAddr": "404c70",
            "funcEndAddr": "404c7f",
            "decompiledFuncCode": "int64_t function_404c70(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g66 : a1); // 0x404c7c\n    return result;\n}\n"
        },
        {
            "funcName": "function_404c80",
            "funcStartAddr": "404c80",
            "funcEndAddr": "404c8f",
            "decompiledFuncCode": "int64_t function_404c80(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g66 : a1; // 0x404c88\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g66;\n}\n"
        },
        {
            "funcName": "function_404c90",
            "funcStartAddr": "404c90",
            "funcEndAddr": "404cc3",
            "decompiledFuncCode": "int64_t function_404c90(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g66 + 8 : a1 + 8; // 0x404ca9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x404cae\n    uint32_t v3 = *v2; // 0x404cae\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404cb2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404cd0",
            "funcStartAddr": "404cd0",
            "funcEndAddr": "404ce3",
            "decompiledFuncCode": "int64_t function_404cd0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g66 + 4 : a1 + 4); // 0x404cdc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404cf0",
            "funcStartAddr": "404cf0",
            "funcEndAddr": "404d1b",
            "decompiledFuncCode": "int64_t function_404cf0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g66 : a1; // 0x404cf8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404d15\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404d0c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g66;\n}\n"
        },
        {
            "funcName": "function_404d20",
            "funcStartAddr": "404d20",
            "funcEndAddr": "404d92",
            "decompiledFuncCode": "int64_t function_404d20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g66 : a5; // 0x404d42\n    int32_t * v2 = __errno_location(); // 0x404d4b\n    uint32_t v3 = *(int32_t *)v1; // 0x404d6b\n    int64_t result = function_403860(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x404d7a\n    return result;\n}\n"
        },
        {
            "funcName": "function_404da0",
            "funcStartAddr": "404da0",
            "funcEndAddr": "404e81",
            "decompiledFuncCode": "int64_t function_404da0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g66 : a4; // 0x404dc2\n    int32_t * v2 = __errno_location(); // 0x404dc8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404de7\n    int32_t * v4 = (int32_t *)v1; // 0x404dea\n    int64_t v5 = function_403860(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404e05\n    int64_t v6 = v5 + 1; // 0x404e0a\n    int64_t result = function_4058a0(v6); // 0x404e1f\n    function_403860(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404e64\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x404e6d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404e90",
            "funcStartAddr": "404e90",
            "funcEndAddr": "404e9a",
            "decompiledFuncCode": "int64_t function_404e90(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404e90\n    return function_404da0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404ea0",
            "funcStartAddr": "404ea0",
            "funcEndAddr": "404f35",
            "decompiledFuncCode": "int64_t function_404ea0(void) {\n    uint32_t v1 = *(int32_t *)&g26; // 0x404ea0\n    int64_t v2 = v1; // 0x404ea0\n    int64_t v3 = v2; // 0x404eb4\n    if (v1 >= 2) {\n        int64_t v4 = &g26;\n        int64_t v5 = v4 + 16; // 0x404ed3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g79;\n        while (v5 != (int64_t)g23 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404ed0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g79;\n        }\n    }\n    int64_t v6 = v3; // 0x404eed\n    if (g24 != 0x60e420) {\n        // 0x404eef\n        free((int64_t *)g24);\n        g24 = 256;\n        *(int64_t *)&g25 = (int64_t)&g65;\n        v6 = &g79;\n    }\n    int64_t result = v6; // 0x404f11\n    if (g23 != &g24) {\n        // 0x404f13\n        free(g23);\n        *(int64_t *)&g23 = (int64_t)&g24;\n        result = &g79;\n    }\n    // 0x404f26\n    *(int32_t *)&g26 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404f40",
            "funcStartAddr": "404f40",
            "funcEndAddr": "404f51",
            "decompiledFuncCode": "int64_t function_404f40(void) {\n    // 0x404f40\n    int64_t v1; // 0x404f40\n    return function_404a90(v1, v1, -1, (int64_t *)&g66);\n}\n"
        },
        {
            "funcName": "function_404f60",
            "funcStartAddr": "404f60",
            "funcEndAddr": "404f6a",
            "decompiledFuncCode": "int64_t function_404f60(void) {\n    // 0x404f60\n    int64_t v1; // 0x404f60\n    return function_404a90(v1, v1, v1, (int64_t *)&g66);\n}\n"
        },
        {
            "funcName": "function_404f70",
            "funcStartAddr": "404f70",
            "funcEndAddr": "404f86",
            "decompiledFuncCode": "int64_t function_404f70(int64_t a1) {\n    // 0x404f70\n    return function_404a90(0, a1, -1, (int64_t *)&g66);\n}\n"
        },
        {
            "funcName": "function_404f90",
            "funcStartAddr": "404f90",
            "funcEndAddr": "404fa2",
            "decompiledFuncCode": "int64_t function_404f90(int64_t a1, int64_t a2) {\n    // 0x404f90\n    return function_404a90(0, a1, a2, (int64_t *)&g66);\n}\n"
        },
        {
            "funcName": "function_404fb0",
            "funcStartAddr": "404fb0",
            "funcEndAddr": "405018",
            "decompiledFuncCode": "int64_t function_404fb0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404fc0\n    return function_404a90((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405020",
            "funcStartAddr": "405020",
            "funcEndAddr": "405084",
            "decompiledFuncCode": "int64_t function_405020(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405030\n    return function_404a90((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_405090",
            "funcStartAddr": "405090",
            "funcEndAddr": "40509c",
            "decompiledFuncCode": "int64_t function_405090(int64_t a1, int64_t a2) {\n    // 0x405090\n    return function_404fb0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4050a0",
            "funcStartAddr": "4050a0",
            "funcEndAddr": "4050af",
            "decompiledFuncCode": "int64_t function_4050a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4050a0\n    return function_405020(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4050b0",
            "funcStartAddr": "4050b0",
            "funcEndAddr": "405120",
            "decompiledFuncCode": "int64_t function_4050b0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g66); // 0x4050bd\n    int128_t v2 = __asm_movdqa(g67); // 0x4050c5\n    int128_t v3 = __asm_movdqa(g68); // 0x4050cd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x4050e2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4050f8\n    uint32_t v6 = *v5; // 0x4050f8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4050fd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_404a90(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_405120",
            "funcStartAddr": "405120",
            "funcEndAddr": "40512d",
            "decompiledFuncCode": "int64_t function_405120(int64_t a1, int64_t a2) {\n    // 0x405120\n    return function_4050b0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_405130",
            "funcStartAddr": "405130",
            "funcEndAddr": "405141",
            "decompiledFuncCode": "int64_t function_405130(int64_t a1) {\n    // 0x405130\n    return function_4050b0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_405150",
            "funcStartAddr": "405150",
            "funcEndAddr": "40515a",
            "decompiledFuncCode": "int64_t function_405150(void) {\n    // 0x405150\n    int64_t v1; // 0x405150\n    return function_4050b0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_405160",
            "funcStartAddr": "405160",
            "funcEndAddr": "4051ce",
            "decompiledFuncCode": "int64_t function_405160(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40517a\n    return function_404a90((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4051d0",
            "funcStartAddr": "4051d0",
            "funcEndAddr": "40523c",
            "decompiledFuncCode": "int64_t function_4051d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g66); // 0x4051d7\n    int128_t v2 = __asm_movdqa(g67); // 0x4051df\n    int128_t v3 = __asm_movdqa(g68); // 0x4051e7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x405209\n    if (a2 == 0 || a3 == 0) {\n        // 0x405237\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40521a\n    return function_404a90(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_405240",
            "funcStartAddr": "405240",
            "funcEndAddr": "405249",
            "decompiledFuncCode": "int64_t function_405240(void) {\n    // 0x405240\n    int64_t v1; // 0x405240\n    return function_4051d0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_405250",
            "funcStartAddr": "405250",
            "funcEndAddr": "405267",
            "decompiledFuncCode": "int64_t function_405250(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405250\n    return function_4051d0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_405270",
            "funcStartAddr": "405270",
            "funcEndAddr": "405283",
            "decompiledFuncCode": "int64_t function_405270(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405270\n    return function_4051d0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_405290",
            "funcStartAddr": "405290",
            "funcEndAddr": "40529a",
            "decompiledFuncCode": "int64_t function_405290(void) {\n    // 0x405290\n    int64_t v1; // 0x405290\n    return function_404a90(v1, v1, v1, &g22);\n}\n"
        },
        {
            "funcName": "function_4052a0",
            "funcStartAddr": "4052a0",
            "funcEndAddr": "4052b2",
            "decompiledFuncCode": "int64_t function_4052a0(int64_t a1, int64_t a2) {\n    // 0x4052a0\n    return function_404a90(0, a1, a2, &g22);\n}\n"
        },
        {
            "funcName": "function_4052c0",
            "funcStartAddr": "4052c0",
            "funcEndAddr": "4052d1",
            "decompiledFuncCode": "int64_t function_4052c0(void) {\n    // 0x4052c0\n    int64_t v1; // 0x4052c0\n    return function_404a90(v1, v1, -1, &g22);\n}\n"
        },
        {
            "funcName": "function_4052e0",
            "funcStartAddr": "4052e0",
            "funcEndAddr": "4052f6",
            "decompiledFuncCode": "int64_t function_4052e0(int64_t a1) {\n    // 0x4052e0\n    return function_404a90(0, a1, -1, &g22);\n}\n"
        },
        {
            "funcName": "function_405300",
            "funcStartAddr": "405300",
            "funcEndAddr": "4056dd",
            "decompiledFuncCode": "int64_t function_405300(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405398\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40531c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405336\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40537b\n    if (a6 < 10) {\n        // 0x40538a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x405482\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_4056e0",
            "funcStartAddr": "4056e0",
            "funcEndAddr": "405700",
            "decompiledFuncCode": "int64_t function_4056e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4056e0\n    if (a5 == 0) {\n        // 0x4056fb\n        return function_405300(a1, a2, a3, a4, a5, 0, (int64_t)&g79);\n    }\n    int64_t v1 = 0; // 0x4056e7\n    v1++;\n    int64_t v2 = v1; // 0x4056f9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4056f0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4056fb\n    return function_405300(a1, a2, a3, a4, a5, v2, (int64_t)&g79);\n}\n"
        },
        {
            "funcName": "function_405700",
            "funcStartAddr": "405700",
            "funcEndAddr": "405760",
            "decompiledFuncCode": "int64_t function_405700(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405700\n    int64_t v3 = &v2; // 0x405700\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405733\n    int64_t v6; // 0x40571d\n    int64_t * v7; // 0x40573b\n    int64_t v8; // 0x40573b\n    int64_t v9; // 0x405747\n    if (v5 < 48) {\n        // 0x405710\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x405753\n            break;\n        }\n    } else {\n        // 0x40573b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x405753\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405731\n    while (v4 != 9) {\n        // 0x405729\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405710\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x405753\n                break;\n            }\n        } else {\n            // 0x40573b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x405753\n                break;\n            }\n        }\n        // 0x405729\n        v10 = 10;\n    }\n    // 0x405753\n    return function_405300(a1, a2, a3, a4, v3, v10, (int64_t)&g79);\n}\n"
        },
        {
            "funcName": "function_405760",
            "funcStartAddr": "405760",
            "funcEndAddr": "40581c",
            "decompiledFuncCode": "int64_t function_405760(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x405760\n    int64_t v1; // bp-168, 0x405760\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x405760\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x405760\n    int64_t v8; // 0x405760\n    int64_t v9; // bp-56, 0x405760\n    int64_t v10; // 0x4057c5\n    int64_t v11; // 0x4057e9\n    if ((int32_t)v6 < 48) {\n        // 0x4057b0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405800\n            break;\n        }\n    } else {\n        // 0x4057e2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405800\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4057da\n    int64_t v13 = 10; // 0x4057da\n    while (v5 != 9) {\n        // 0x4057dc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4057b0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405800\n                break;\n            }\n        } else {\n            // 0x4057e2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405800\n                break;\n            }\n        }\n        // 0x4057d2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405800\n    int64_t v14; // bp-136, 0x405760\n    int64_t result = function_405300(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g79); // 0x40580f\n    return result;\n}\n"
        },
        {
            "funcName": "function_405820",
            "funcStartAddr": "405820",
            "funcEndAddr": "405894",
            "decompiledFuncCode": "int64_t function_405820(int64_t a1) {\n    // 0x405820\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x405883\n    return fputs_unlocked(v1, g31);\n}\n"
        },
        {
            "funcName": "function_4058a0",
            "funcStartAddr": "4058a0",
            "funcEndAddr": "4058ba",
            "decompiledFuncCode": "int64_t function_4058a0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4058a4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4058b3\n        return (int64_t)mem;\n    }\n    // 0x4058b5\n    function_405af0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4058c0",
            "funcStartAddr": "4058c0",
            "funcEndAddr": "4058e1",
            "decompiledFuncCode": "int64_t function_4058c0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4058c3\n    int64_t v2 = v1; // 0x4058c3\n    if (v2 < 0) {\n        // 0x4058db\n        function_405af0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4058d9\n        return function_4058a0(v2);\n    }\n    // 0x4058db\n    function_405af0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4058f0",
            "funcStartAddr": "4058f0",
            "funcEndAddr": "4058f2",
            "decompiledFuncCode": "int64_t function_4058f0(void) {\n    // 0x4058f0\n    int64_t v1; // 0x4058f0\n    return function_4058a0(v1);\n}\n"
        },
        {
            "funcName": "function_405900",
            "funcStartAddr": "405900",
            "funcEndAddr": "405936",
            "decompiledFuncCode": "int64_t function_405900(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x405928\n        free(v1);\n        return (int32_t)&g79 ^ (int32_t)&g79;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405911\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x405920\n        return (int64_t)mem;\n    }\n    // 0x405931\n    function_405af0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405940",
            "funcStartAddr": "405940",
            "funcEndAddr": "405961",
            "decompiledFuncCode": "int64_t function_405940(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x405943\n    int64_t v2 = v1; // 0x405943\n    if (v2 < 0) {\n        // 0x40595b\n        function_405af0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405959\n        return function_405900(a1, v2);\n    }\n    // 0x40595b\n    function_405af0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405970",
            "funcStartAddr": "405970",
            "funcEndAddr": "4059f6",
            "decompiledFuncCode": "int64_t function_405970(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4059cb\n            function_405af0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405900(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4059b3\n    if (a2 == 0) {\n        // 0x4059d8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4059b8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4059cb\n        function_405af0(a1);\n        // UNREACHABLE\n    }\n    // 0x40599a\n    *(int64_t *)a2 = v2;\n    return function_405900(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405a00",
            "funcStartAddr": "405a00",
            "funcEndAddr": "405a50",
            "decompiledFuncCode": "int64_t function_405a00(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405a00\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x405a4a\n            function_405af0(a1);\n            // UNREACHABLE\n        }\n        // 0x405a22\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405900(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405a35\n        *(int64_t *)a2 = 128;\n        return function_405900(0, 128);\n    }\n    // 0x405a48\n    if (a2 < 0) {\n        // 0x405a4a\n        function_405af0(a1);\n        // UNREACHABLE\n    }\n    // 0x405a22\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405900(a1, v1);\n}\n"
        },
        {
            "funcName": "function_405a50",
            "funcStartAddr": "405a50",
            "funcEndAddr": "405a67",
            "decompiledFuncCode": "int64_t function_405a50(int64_t a1, int64_t a2) {\n    // 0x405a50\n    return (int64_t)memset((int64_t *)function_4058a0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_405a70",
            "funcStartAddr": "405a70",
            "funcEndAddr": "405a9e",
            "decompiledFuncCode": "int64_t function_405a70(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x405a77\n    if ((int64_t)v1 < 0) {\n        // 0x405a99\n        function_405af0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x405a99\n        function_405af0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x405a8a\n    if (mem != NULL) {\n        // 0x405a94\n        return (int64_t)mem;\n    }\n    // 0x405a99\n    function_405af0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405aa0",
            "funcStartAddr": "405aa0",
            "funcEndAddr": "405ac8",
            "decompiledFuncCode": "int64_t function_405aa0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4058a0(a2); // 0x405aaf\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405ad0",
            "funcStartAddr": "405ad0",
            "funcEndAddr": "405ae3",
            "decompiledFuncCode": "int64_t function_405ad0(int64_t str) {\n    // 0x405ad0\n    return function_405aa0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405af0",
            "funcStartAddr": "405af0",
            "funcEndAddr": "405b21",
            "decompiledFuncCode": "int64_t function_405af0(int64_t a1) {\n    // 0x405af0\n    error(g21, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405b30",
            "funcStartAddr": "405b30",
            "funcEndAddr": "405bbf",
            "decompiledFuncCode": "int64_t function_405b30(int64_t * a1, char * a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x405b30\n    int64_t v1; // 0x405b30\n    if ((char)v1 != 0) {\n        // 0x405b4f\n        int128_t v2; // 0x405b30\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int64_t v3 = 16; // bp-208, 0x405b93\n    return function_406c20((int64_t)a1, (int64_t)a2, &v3);\n}\n"
        },
        {
            "funcName": "function_405bc0",
            "funcStartAddr": "405bc0",
            "funcEndAddr": "405c9f",
            "decompiledFuncCode": "int64_t function_405bc0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x405bcc\n    uint32_t v2 = *v1; // 0x405bcc\n    int64_t v3 = a2 & 0xffffffff; // 0x405bd1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x405bd4\n    uint64_t v5 = (int64_t)*v4; // 0x405bd4\n    int64_t v6; // 0x405c42\n    if (v3 <= v5) {\n      lab_0x405c3c_2:\n        // 0x405c3c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x405bc2\n    int64_t v8 = v2; // 0x405bc0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x405c3c\n        goto lab_0x405c3c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x405bf8\n    int64_t v17; // 0x405c06\n    int64_t * v18; // 0x405c20\n    int64_t * v19; // 0x405c23\n    int64_t v20; // 0x405c2e\n    int64_t v21; // 0x405c06\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x405c03\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x405c20\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x405c37\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x405c3c\n            goto lab_0x405c3c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x405c3c\n            goto lab_0x405c3c_2;\n        }\n        // 0x405bf2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x405c7b\n    int64_t * v23 = (int64_t *)v22; // 0x405c80\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x405c83\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x405c80\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x405c97\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x405bed\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x405c3c\n            goto lab_0x405c3c_2;\n        }\n        // 0x405bf2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x405c03\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x405c20\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x405c37\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x405c3c\n                goto lab_0x405c3c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x405c3c\n                goto lab_0x405c3c_2;\n            }\n            // 0x405bf2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x405c60\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x405c80\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x405c97\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x405c3c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405ca0",
            "funcStartAddr": "405ca0",
            "funcEndAddr": "4062bc",
            "decompiledFuncCode": "int64_t function_405ca0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x405cbf\n    int64_t v2 = *v1; // 0x405cbf\n    char * str2 = (char *)v2; // 0x405ccc\n    char c = *str2; // 0x405ccc\n    int64_t v3 = v2; // 0x405cf8\n    int64_t v4 = 0; // 0x405ca0\n    int32_t v5; // 0x405ca0\n    int64_t v6; // 0x405ca0\n    int64_t v7; // 0x405ca0\n    int64_t v8; // 0x405ca0\n    int64_t v9; // 0x405ca0\n    int64_t v10; // 0x405ca0\n    int64_t v11; // 0x405ca0\n    int64_t v12; // 0x405ca0\n    int64_t v13; // 0x405ca0\n    int64_t str3; // 0x405ca0\n    int64_t v14; // 0x405ca0\n    int64_t v15; // 0x405ca0\n    int64_t v16; // 0x405ca0\n    int64_t v17; // 0x405ca0\n    int32_t v18; // 0x405ca0\n    int32_t v19; // 0x405ca0\n    int32_t v20; // 0x405ca0\n    int32_t v21; // 0x405ca0\n    int32_t v22; // 0x405ca0\n    int32_t v23; // 0x405ca0\n    int32_t v24; // 0x405ca0\n    int32_t v25; // 0x405ca0\n    int32_t v26; // 0x405ca0\n    int32_t v27; // 0x405ca0\n    int32_t v28; // 0x405ca0\n    int32_t v29; // 0x405ca0\n    int64_t nmemb; // 0x405ca0\n    int64_t v30; // 0x405ca0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x405cfc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405cf8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405d08\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x405d0e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405cd8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x405d3c\n                int64_t v34; // 0x405ca0\n                int64_t v35; // 0x405ca0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405d45\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405ec0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x405d56\n                int64_t v37 = *(int64_t *)v36; // 0x405d5a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405d30\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405d45\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405ec0;\n                        }\n                    }\n                    // 0x405d56\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405da6:\n                    // 0x405da6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405e00;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405f70\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405e00;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405f20\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x405dca;\n                                } else {\n                                    // 0x405f2c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x405dca;\n                                    } else {\n                                        // 0x405f3a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x405dca;\n                                        } else {\n                                            goto lab_0x405e00;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x405dca;\n                            }\n                        }\n                    }\n                }\n              lab_0x405e11:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405fe6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x406192\n                            flockfile(g33);\n                            int64_t v41 = *v1; // 0x4061b2\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x4061ff\n                            int64_t v43 = (int64_t)g33;\n                            int64_t v44 = v43; // 0x406219\n                            int64_t v45; // 0x40621b\n                            if (*(char *)v42 != 0) {\n                                // 0x40621b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g33;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x406213\n                            while (v17 + nmemb != v42) {\n                                // 0x406215\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40621b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g33;\n                                }\n                                // 0x406208\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x406240\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g33);\n                            v40 = *v1;\n                        } else {\n                            // 0x405ff4\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40614f\n                        free((int64_t *)v17);\n                    }\n                    // 0x406049\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x406060\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x405f0e\n                    return 63;\n                }\n                // 0x405e30\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405eb4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405ec0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405ed0\n                    uint32_t v50 = *v49; // 0x405ed0\n                    int64_t v51 = v50; // 0x405ed0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x405eda\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405ee3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40610f\n                                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4060ba\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x405f0e\n                            return 63;\n                        }\n                        // 0x405f58\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40626f\n                                    __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40616d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x406180\n                                // 0x405f0e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40607e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x406092\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x405efb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x405efe\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405f02\n                    int64_t result = v59; // 0x405f08\n                    if (v58 != 0) {\n                        // 0x405f0a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x405f0e\n                    return result;\n                }\n            } else {\n                // 0x405d0e\n                v5 = v32;\n            }\n            // break -> 0x405e35\n            break;\n        }\n    }\n    // 0x405e35\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x405e4d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405e57\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x405f0e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405f99\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405e86\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405e96\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405e00:\n    // 0x405e00\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405e00\n    int64_t v63 = *(int64_t *)v62; // 0x405e04\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405e11\n        goto lab_0x405e11;\n    }\n    goto lab_0x405da6;\n  lab_0x405dca:\n    // 0x405dca\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405ca0\n    int32_t v65; // 0x405ca0\n    int32_t v66; // 0x405ca0\n    if (v27 != 0) {\n        goto lab_0x405e00;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405f80\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405e00;\n            } else {\n                goto lab_0x405df1;\n            }\n        } else {\n            // 0x405de5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x4060dc\n                int64_t v67 = (int64_t)mem; // 0x4060dc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405e00;\n                } else {\n                    // 0x4060ef\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405df1;\n                }\n            } else {\n                goto lab_0x405df1;\n            }\n        }\n    }\n  lab_0x405df1:\n    // 0x405df1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405e00;\n}\n"
        },
        {
            "funcName": "function_4062c0",
            "funcStartAddr": "4062c0",
            "funcEndAddr": "406886",
            "decompiledFuncCode": "int64_t function_4062c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x4062e1\n    if (v3 < 1) {\n        // 0x40649e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x4062dd\n    int32_t v5 = *(int32_t *)a7; // 0x4062e9\n    uint64_t v6 = a1 & 0xffffffff; // 0x4062eb\n    int64_t v7 = v2; // 0x4062f0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x4062f3\n    *v8 = 0;\n    int64_t v9; // 0x4062c0\n    int64_t v10; // 0x4062c0\n    int64_t v11; // 0x4062c0\n    int64_t v12; // 0x4062c0\n    int64_t str; // 0x4062c0\n    int64_t v13; // 0x4062c0\n    int64_t v14; // 0x4062c0\n    int64_t v15; // 0x4062c0\n    int64_t v16; // 0x4062c0\n    int64_t v17; // 0x4062c0\n    int32_t v18; // 0x4062c0\n    char v19; // 0x4062c0\n    if (v5 == 0) {\n        // 0x4064d8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40630a;\n    } else {\n        // 0x406303\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x406350\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x406353\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x406418;\n            } else {\n                int64_t v22 = v7 + 1; // 0x406366\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x406376\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40642c;\n                } else {\n                    goto lab_0x406388;\n                }\n            }\n        } else {\n            goto lab_0x40630a;\n        }\n    }\n  lab_0x40630a:\n    // 0x40630a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x406310\n    *v24 = 0;\n    int64_t v25; // 0x4062c0\n    int64_t v26; // 0x4062c0\n    int64_t v27; // 0x4062c0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x406400\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40640d;\n        }\n        case 43: {\n            // 0x406710\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40640d;\n        }\n        default: {\n            // 0x40632c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40668f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4067a8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40640d;\n                } else {\n                    // 0x40669d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40633a;\n                }\n            } else {\n                goto lab_0x40633a;\n            }\n        }\n    }\n  lab_0x406418:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40641f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x406388;\n    } else {\n        goto lab_0x40642c;\n    }\n  lab_0x40633a:\n    // 0x40633a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40640d;\n  lab_0x40640d:\n    // 0x40640d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x406418;\n  lab_0x406388:;\n    uint32_t v30 = *(int32_t *)a7; // 0x406388\n    int64_t v31 = v30; // 0x406388\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40638a\n    if ((int64_t)*v32 > v31) {\n        // 0x40638f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x406392\n    if (*v33 > v30) {\n        // 0x406397\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40639a\n    int64_t v35 = v31; // 0x40639e\n    int64_t v36 = v15; // 0x40639e\n    int64_t v37; // 0x4062c0\n    int64_t v38; // 0x4062c0\n    int64_t v39; // 0x4062c0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406508\n        int64_t v41 = v40; // 0x406508\n        v2 = v41;\n        int64_t v42; // 0x4062c0\n        if (*v33 == v40) {\n            // 0x4066f0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4066f8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x406514\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406518\n                function_405bc0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x406528\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x406531\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40653a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x406551\n            int64_t v47 = v45 & 0xffffffff; // 0x406555\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40655e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x406564\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x406566;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x406540\n            int64_t v49 = v48 & 0xffffffff; // 0x406540\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x406551\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40655e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x406564\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x406566;\n                    }\n                }\n                // 0x406540\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x406708\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x406566;\n    } else {\n        goto lab_0x4063a4;\n    }\n  lab_0x40642c:\n    // 0x40642c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40642f\n    int64_t v51 = v12; // 0x40642f\n    int64_t v52 = v14; // 0x40642f\n    if (*(char *)v10 == 0) {\n        goto lab_0x406388;\n    } else {\n        goto lab_0x406435;\n    }\n  lab_0x4063a4:;\n    int32_t v53 = v35; // 0x4063a4\n    int64_t v54; // 0x4062c0\n    int64_t v55; // 0x4062c0\n    int64_t v56; // 0x4062c0\n    int64_t v57; // 0x4062c0\n    int64_t v58; // 0x4062c0\n    int64_t v59; // 0x4062c0\n    char * v60; // 0x4062c0\n    int64_t v61; // 0x4062c0\n    int64_t v62; // 0x4063b9\n    int64_t v63; // 0x4062c0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x4064f3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x4064f6;\n    } else {\n        // 0x4063ac\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4062c0\n        int64_t v66 = v65 ? -1 : 1; // 0x4063c0\n        int64_t v67 = (int64_t)\"--\"; // 0x4062c0\n        int64_t v68 = v62; // 0x4062c0\n        int64_t v69 = 3; // 0x4063c0\n        unsigned char v70 = *(char *)v68; // 0x4063c0\n        char v71 = *(char *)v67; // 0x4063c0\n        char v72 = v71; // 0x4063c0\n        bool v73 = false; // 0x4063c0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4064b0\n            if (*(char *)v62 == 45) {\n                // 0x406570\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x406570\n                if (c == 0) {\n                    goto lab_0x4064ba;\n                } else {\n                    // 0x40657d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406600;\n                    } else {\n                        if (c == 45) {\n                            // 0x4067e3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x406655;\n                        } else {\n                            // 0x40658e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406600;\n                            } else {\n                                // 0x406593\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4065b4;\n                                } else {\n                                    // 0x40659a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406600;\n                                    } else {\n                                        goto lab_0x4065b4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4064ba;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x4063d0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x4063d3\n            int64_t v77 = v35 + 1; // 0x4063d6\n            int32_t v78 = v77; // 0x4063d9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x406740\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x4063e7\n                    function_405bc0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x4063f5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x4064f6;\n        }\n    }\n  lab_0x406435:;\n    // 0x406435\n    int64_t v79; // bp-104, 0x4062c0\n    int64_t v80 = &v79; // 0x4062ca\n    int64_t v81 = v50 + 1; // 0x406435\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40643c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x406441\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x406445\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x406449\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x406451\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x406456\n    int32_t c2 = v84; // 0x406456\n    char * found_char_pos = strchr(str2, c2); // 0x406456\n    int64_t v87 = *v82; // 0x40645b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x406465\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x406470\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x406760\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40672d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40649e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x406456\n    char v91 = *(char *)(v90 + 1); // 0x40648b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x406445\n        if (v91 != 58) {\n            // 0x40649e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x4066b4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4067b8\n                *v8 = 0;\n            } else {\n                // 0x40679c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x4066de\n            *v83 = 0;\n            // 0x40649e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x4066be\n        if (v93 != 0) {\n            // 0x406750\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x4066de\n            *v83 = 0;\n            // 0x40649e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x4066d1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x4066de\n            *v83 = 0;\n            // 0x40649e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40681a\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x4067ca\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x4067d1\n        // 0x4066de\n        *v83 = 0;\n        // 0x40649e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x406629\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40662b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x406850\n                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x406801\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x406808\n            // 0x40649e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x406636\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40663a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x406655;\n  lab_0x406566:\n    // 0x406566\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4063a4;\n  lab_0x406655:;\n    int64_t v99 = function_405ca0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x406673\n    // 0x40649e\n    return v99 & 0xffffffff;\n  lab_0x4064f6:;\n    int32_t v100 = v55; // 0x4064f6\n    if (v100 != (int32_t)v59) {\n        // 0x4064fa\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40649e\n    return 0xffffffff;\n  lab_0x4064ba:\n    // 0x4064ba\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x4064c1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40649e\n    return v99 & 0xffffffff;\n  lab_0x406600:\n    // 0x406600\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x406435;\n  lab_0x4065b4:\n    // 0x4065b4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405ca0(v6, a2, str, a4, a5, v57, v1, v11, &g11); // 0x4065da\n    if ((int32_t)v101 != -1) {\n        // 0x40649e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x4065ef\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406600;\n}\n"
        },
        {
            "funcName": "function_406890",
            "funcStartAddr": "406890",
            "funcEndAddr": "4068e6",
            "decompiledFuncCode": "int64_t function_406890(int64_t a1) {\n    // 0x406890\n    *(int32_t *)&g69 = g29;\n    *(int32_t *)&g70 = g28;\n    int64_t v1; // 0x406890\n    int64_t result = function_4062c0(v1, v1, v1, v1, v1, v1, &g69, a1 & 0xffffffff); // 0x4068b6\n    g29 = *(int32_t *)&g69;\n    g74 = g72;\n    *(int32_t *)&g27 = g71;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4068f0",
            "funcStartAddr": "4068f0",
            "funcEndAddr": "406908",
            "decompiledFuncCode": "int64_t function_4068f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4068f0\n    return function_406890(1);\n}\n"
        },
        {
            "funcName": "function_406910",
            "funcStartAddr": "406910",
            "funcEndAddr": "406923",
            "decompiledFuncCode": "int64_t function_406910(int64_t a1, int64_t a2, char * a3, char (**a4)[4], int32_t a5, int64_t a6) {\n    // 0x406910\n    return function_406890(0);\n}\n"
        },
        {
            "funcName": "function_406930",
            "funcStartAddr": "406930",
            "funcEndAddr": "406945",
            "decompiledFuncCode": "int64_t function_406930(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406930\n    return function_4062c0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406950",
            "funcStartAddr": "406950",
            "funcEndAddr": "406966",
            "decompiledFuncCode": "int64_t function_406950(void) {\n    // 0x406950\n    return function_406890(0);\n}\n"
        },
        {
            "funcName": "function_406970",
            "funcStartAddr": "406970",
            "funcEndAddr": "406988",
            "decompiledFuncCode": "int64_t function_406970(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406970\n    return function_4062c0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406990",
            "funcStartAddr": "406990",
            "funcEndAddr": "406a0a",
            "decompiledFuncCode": "int64_t function_406990(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40699b\n    int64_t v2 = (int64_t)&g12; // 0x40699b\n    int32_t * pwc; // 0x406990\n    int64_t v3; // 0x406990\n    int64_t n; // 0x406990\n    if (a2 == 0) {\n        goto lab_0x4069e2;\n    } else {\n        // 0x40699d\n        if (a3 == 0) {\n            // 0x4069c8\n            return -2;\n        }\n        // 0x4069a9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x4069e2;\n        } else {\n            goto lab_0x4069b4;\n        }\n    }\n  lab_0x4069e2:\n    // 0x4069e2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x406990\n    pwc = (int32_t *)&v4;\n    goto lab_0x4069b4;\n  lab_0x4069b4:;\n    char * wstr = (char *)v3; // 0x4069ba\n    int64_t ps; // 0x406990\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4069ba\n    int64_t result = v5; // 0x4069ba\n    if (v5 < 0xfffffffe) {\n        // 0x4069c8\n        return result;\n    }\n    int64_t result2 = result; // 0x4069f9\n    if ((char)function_4035c0(0, v3) == 0) {\n        // 0x4069fb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4069c8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406a10",
            "funcStartAddr": "406a10",
            "funcEndAddr": "406a6e",
            "decompiledFuncCode": "int64_t function_406a10(int64_t a1) {\n    uint64_t result = function_4058a0(33); // 0x406a1e\n    char * str = (char *)result; // 0x406a32\n    strncpy(str, (char *)(a1 + 44), 32);\n    *(char *)(result + 32) = 0;\n    int64_t v1 = result + (int64_t)strlen(str); // 0x406a43\n    if (result >= v1) {\n        // 0x406a51\n        return result;\n    }\n    int64_t v2 = v1; // 0x406a49\n    v2--;\n    char * v3 = (char *)v2; // 0x406a4b\n    while (*v3 == 32) {\n        // 0x406a60\n        *v3 = 0;\n        if (result == v2) {\n            // break -> 0x406a51\n            break;\n        }\n        v2--;\n        v3 = (char *)v2;\n    }\n    // 0x406a51\n    return result;\n}\n"
        },
        {
            "funcName": "function_406a70",
            "funcStartAddr": "406a70",
            "funcEndAddr": "406c18",
            "decompiledFuncCode": "int64_t function_406a70(int64_t a1, int64_t * a2, int64_t * a3, uint64_t a4) {\n    // 0x406a70\n    utmpxname((char *)a1);\n    setutxent();\n    struct utmpx * v1 = getutxent(); // 0x406aa7\n    int64_t v2 = 0; // 0x406ab2\n    int64_t v3 = 0; // 0x406ab2\n    int64_t v4; // 0x406a70\n    int64_t v5; // 0x406a70\n    int64_t v6; // 0x406a70\n    struct utmpx * v7; // 0x406a70\n    struct utmpx * v8; // 0x406a70\n    int64_t v9; // 0x406a70\n    int64_t v10; // 0x406a70\n    int64_t v11; // 0x406a70\n    uint64_t v12; // 0x406a70\n    int64_t v13; // 0x406a70\n    int64_t v14; // 0x406a70\n    int64_t v15; // 0x406a70\n    int64_t v16; // 0x406a70\n    int64_t v17; // 0x406a70\n    if (v1 != NULL) {\n        struct utmpx * v18 = v1; // 0x406aa7\n        int64_t v19 = 0; // 0x406a70\n        int64_t v20 = a1;\n        int64_t v21 = 0; // 0x406a70\n        int64_t v22 = 0; // 0x406a70\n        while (true) {\n            // 0x406ab4\n            v11 = v22;\n            v9 = v21;\n            v14 = v20;\n            v4 = v19;\n            v7 = v18;\n            while (true) {\n              lab_0x406ab4:\n                // 0x406ab4\n                v8 = v7;\n                v5 = v4;\n                v15 = v14;\n                v10 = v9;\n                v12 = v11;\n                v6 = (int64_t)v8;\n                if (*(char *)(v6 + 44) == 0) {\n                    goto lab_0x406ac6;\n                } else {\n                    // 0x406abb\n                    if (v8->e0 == 7) {\n                        // 0x406b50\n                        v16 = v15;\n                        if (a4 % 2 == 0) {\n                            goto lab_0x406acb;\n                        } else {\n                            uint32_t pid = *(int32_t *)(v6 + 4); // 0x406b59\n                            int64_t v23 = pid; // 0x406b59\n                            v16 = v23;\n                            if (pid < 1) {\n                                goto lab_0x406acb;\n                            } else {\n                                // 0x406b65\n                                v16 = v23;\n                                if (kill(pid, 0) >= 0) {\n                                    goto lab_0x406acb;\n                                } else {\n                                    int32_t v24 = *__errno_location(); // 0x406b79\n                                    v13 = v23;\n                                    if (v24 == 3) {\n                                        // break -> 0x406aa7\n                                        break;\n                                    }\n                                    // 0x406b82\n                                    v17 = v23;\n                                    if (v12 != v10) {\n                                        goto lab_0x406ad4;\n                                    } else {\n                                        goto lab_0x406b90;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x406ac6;\n                    }\n                }\n            }\n          lab_0x406aa7:\n            // 0x406aa7\n            v20 = v13;\n            v18 = getutxent();\n            v19 = v5;\n            v21 = v10;\n            v22 = v12;\n            v2 = v12;\n            v3 = v5;\n            if (v18 == NULL) {\n                // break -> 0x406b25\n                break;\n            }\n        }\n    }\n  lab_0x406b25:\n    // 0x406b25\n    endutxent();\n    *a2 = v2;\n    *a3 = v3;\n    return 0;\n  lab_0x406ac6:\n    // 0x406ac6\n    v13 = v15;\n    v16 = v15;\n    if ((a4 & 2) != 0) {\n        // break -> 0x406aa7\n        goto lab_0x406aa7;\n    }\n    goto lab_0x406acb;\n  lab_0x406acb:\n    // 0x406acb\n    v17 = v16;\n    if (v12 == v10) {\n        goto lab_0x406b90;\n    } else {\n        goto lab_0x406ad4;\n    }\n  lab_0x406b90:;\n    int64_t v25 = v17;\n    int64_t v26; // 0x406a70\n    int64_t v27; // 0x406a70\n    int64_t v28; // 0x406a70\n    if (v5 == 0) {\n        // 0x406bd4\n        v27 = 1;\n        v26 = 1;\n        v28 = 384;\n        if (v12 != 0) {\n            uint128_t v29 = 384 * (int128_t)v12; // 0x406be1\n            if ((int64_t)v29 < 0) {\n                // 0x406c13\n                function_405af0(v25);\n                // UNREACHABLE\n            }\n            if (v29 % 0x1ff0000000000000001 != 0) {\n                // 0x406c13\n                function_405af0(v25);\n                // UNREACHABLE\n            }\n            // 0x406bf4\n            v27 = v12 + 1;\n            v26 = v10;\n            v28 = 384 * v12;\n        }\n    } else {\n        if (v12 >= 0x38e38e38e38e38) {\n            // 0x406c13\n            function_405af0(v25);\n            // UNREACHABLE\n        }\n        int64_t v30 = v12 + 1; // 0x406ba7\n        int64_t v31 = v12 / 2 + v30; // 0x406bae\n        v27 = v30;\n        v26 = v31;\n        v28 = 384 * v31;\n    }\n    int64_t v32 = v27; // 0x406bcf\n    int64_t v33 = v26; // 0x406bcf\n    int64_t v34 = function_405900(v5, v28); // 0x406bcf\n    goto lab_0x406ad8;\n  lab_0x406ad4:\n    // 0x406ad4\n    v32 = v12 + 1;\n    v33 = v10;\n    v34 = v5;\n    goto lab_0x406ad8;\n  lab_0x406ad8:;\n    int64_t v35 = v34 + 384 * v12; // 0x406ae6\n    *(int64_t *)v35 = *(int64_t *)v8;\n    int64_t v36 = v35 + 8 & -8; // 0x406af7\n    *(int64_t *)(v35 + 376) = *(int64_t *)(v6 + 376);\n    int64_t v37 = v35 - v36; // 0x406b02\n    uint64_t v38 = (v37 + 384) / 8 % 0x20000000; // 0x406b13\n    __asm_rep_movsq_memcpy((char *)v36, (char *)(v6 - v37), v38);\n    struct utmpx * v39 = getutxent(); // 0x406b18\n    v11 = v32;\n    v9 = v33;\n    bool v40; // 0x406a70\n    v14 = v38 * (v40 ? -8 : 8) + v36;\n    v4 = v34;\n    v7 = v39;\n    v2 = v32;\n    v3 = v34;\n    if (v39 == NULL) {\n        // break (via goto) -> 0x406b25\n        goto lab_0x406b25;\n    }\n    goto lab_0x406ab4;\n}\n"
        },
        {
            "funcName": "function_406c20",
            "funcStartAddr": "406c20",
            "funcEndAddr": "406c79",
            "decompiledFuncCode": "int64_t function_406c20(int64_t a1, int64_t a2, int64_t * a3) {\n    // 0x406c20\n    int32_t v1; // bp-16, 0x406c20\n    int64_t v2; // 0x406c20\n    int64_t v3 = function_407370(0, (int64_t *)&v1, a2, (int64_t)a3, v2, v2, v2, (int64_t)&g79); // 0x406c35\n    if (v3 == 0) {\n        // 0x406c52\n        return 0xffffffff;\n    }\n    // 0x406c3f\n    int64_t result; // 0x406c20\n    if (v1 > -1) {\n        // 0x406c4d\n        *(int64_t *)a1 = v3;\n        result = v1;\n    } else {\n        // 0x406c58\n        free((int64_t *)v3);\n        *__errno_location() = 75;\n        result = 0xffffffff;\n    }\n    // 0x406c52\n    return result;\n}\n"
        },
        {
            "funcName": "function_406c80",
            "funcStartAddr": "406c80",
            "funcEndAddr": "406cdd",
            "decompiledFuncCode": "int64_t function_406c80(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x406c87\n    int64_t v2; // 0x406c80\n    int64_t result = function_407250(a1, v2); // 0x406c98\n    if ((v2 & 32) != 0) {\n        // 0x406cc0\n        if ((int32_t)result == 0) {\n            // 0x406cc4\n            *__errno_location() = 0;\n        }\n        // 0x406cba\n        return 0xffffffff;\n    }\n    // 0x406ca1\n    if ((int32_t)result == 0) {\n        // 0x406cba\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406ca8\n    if (v1 == 0) {\n        // 0x406caa\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x406cba\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406ce0",
            "funcStartAddr": "406ce0",
            "funcEndAddr": "407242",
            "decompiledFuncCode": "int64_t function_406ce0(void) {\n    char * v1 = nl_langinfo(14); // 0x406cf6\n    char * v2 = g73; // 0x406cfb\n    char * v3; // 0x406ce0\n    int64_t v4; // 0x406ce0\n    int64_t v5; // 0x406ce0\n    int64_t v6; // 0x406ce0\n    int64_t v7; // 0x406ce0\n    int32_t size; // 0x406ce0\n    int32_t size2; // 0x406ce0\n    int32_t len; // 0x406db2\n    int64_t v8; // 0x406db2\n    char * env_val; // 0x406d9d\n    if (v2 == NULL) {\n        // 0x406d98\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406e05;\n        } else {\n            // 0x406daa\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406e05;\n            } else {\n                // 0x406daf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x406d9d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x407235\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406e05;\n                    } else {\n                        // 0x4071a9\n                        size2 = len + 14;\n                        goto lab_0x406dcb;\n                    }\n                } else {\n                    goto lab_0x406dcb;\n                }\n            }\n        }\n    } else {\n        // 0x406ce0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x406d1a;\n    }\n  lab_0x40704c:;\n    // 0x40704c\n    struct _IO_FILE * stream; // 0x406e8b\n    int32_t v10 = __uflow(stream); // 0x40704f\n    int64_t v11; // 0x406ce0\n    int64_t v12 = v11; // 0x407059\n    int64_t v13; // 0x406ce0\n    int64_t v14 = v13; // 0x407059\n    int32_t v15 = v10; // 0x407059\n    int64_t v16; // 0x406ce0\n    int64_t v17 = v16; // 0x407059\n    int64_t v18 = v11; // 0x407059\n    int64_t v19 = v13; // 0x407059\n    int64_t v20 = v16; // 0x407059\n    if (v10 == -1) {\n        // break -> 0x40705f\n        goto lab_0x40705f;\n    }\n    goto lab_0x406ed9;\n  lab_0x406ece:;\n    // 0x406ece\n    int64_t v90; // 0x406ce0\n    int64_t * v32; // 0x406ec0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x406ce0\n    v12 = v89;\n    int64_t v91; // 0x406ce0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x406ce0\n    v17 = v92;\n    goto lab_0x406ed9;\n  lab_0x406ed9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x406ce0\n    int32_t v25; // bp-120, 0x406ce0\n    int32_t v26; // bp-184, 0x406ce0\n    int64_t v27; // 0x406e8b\n    int64_t v28; // 0x406ea8\n    int64_t v29; // 0x406ead\n    int64_t * v30; // 0x406ec4\n    switch (c) {\n        case 32: {\n            goto lab_0x406ec0;\n        }\n        case 10: {\n            goto lab_0x406ec0;\n        }\n        case 9: {\n            goto lab_0x406ec0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4070b1\n            int32_t v33; // 0x406ce0\n            char v34; // 0x406ce0\n            int32_t v35; // 0x4070be\n            if (v31 < *v30) {\n                // 0x407090\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4070bb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4070b1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x407090\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4070bb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4070a0\n                v36 = v33;\n            }\n            // 0x40718f\n            if (v36 == -1) {\n                // break -> 0x40705f\n                break;\n            }\n            goto lab_0x406ec0;\n        }\n        default: {\n            // 0x406eef\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40705f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406f18\n            int64_t v39 = v37 + 4; // 0x406f1a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406f26\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406f28\n            while (v41 == 0) {\n                // 0x406f18\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406f46\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406f52\n            int64_t v45 = v43 + 4; // 0x406f54\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x406f60\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x406f62\n            while (v47 == 0) {\n                // 0x406f52\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x406f4f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406f78\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x406f88\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x406f8c\n            int64_t v52 = v51 + v48; // 0x406f95\n            int64_t * mem; // 0x406ce0\n            int64_t v53; // 0x406ce0\n            int64_t v54; // 0x406ce0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4070cb\n                int64_t v56 = v55 + 3; // 0x4070d7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x406fb1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406fc0\n            if (mem == NULL) {\n                // 0x4071ec\n                free((int64_t *)v21);\n                function_407250(v27, v53);\n                v24 = (int64_t)&g12;\n                goto lab_0x406e64;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406fd8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406fe2\n            uint32_t v62 = (int32_t)v59; // 0x406fe5\n            int64_t v63; // 0x406ce0\n            if (v62 >= 8) {\n                // 0x4070f4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40710e\n                int64_t v66 = v61 - v65; // 0x407112\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40711d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40712e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40712e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40712b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4071bf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406ff7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x406ffb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40700b\n            int64_t v74 = v60 - 1; // 0x40700f\n            uint32_t v75 = (int32_t)v73; // 0x407014\n            int64_t v76; // 0x406ce0\n            if (v75 >= 8) {\n                // 0x407142\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40714c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40715c\n                int64_t v80 = v74 - v79; // 0x407160\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40716b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40717b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x407179\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x4071d6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x4071de\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x407026\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40702a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x407223\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40703e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x406ece;\n            } else {\n                goto lab_0x40704c;\n            }\n        }\n    }\n  lab_0x406ec0:;\n    int64_t v93 = v23; // 0x406ce0\n    int64_t v94 = v22; // 0x406ce0\n    int64_t v95 = v21; // 0x406ce0\n    goto lab_0x406ec0_2;\n  lab_0x406e05:;\n    int64_t * mem3 = malloc(size); // 0x406e05\n    int64_t v97 = (int64_t)&g12; // 0x406e10\n    int64_t v98; // 0x406ce0\n    int64_t path; // 0x406ce0\n    if (mem3 == NULL) {\n        goto lab_0x406de2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406e05\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406e26;\n    }\n  lab_0x406d1a:;\n    int64_t str = v1 == NULL ? (int64_t)&g12 : (int64_t)v1; // 0x406d0d\n    char v100 = *v3; // 0x406d1a\n    int64_t v101; // 0x406ce0\n    if (v100 == 0) {\n        // 0x406d74\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x406ce0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x406ce0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x406d60\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x406d67;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406d30\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x406d3d\n        char v107 = *(char *)v106; // 0x406d42\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x406d74\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x406d4b\n    v104 = v103 + 1;\n  lab_0x406d67:\n    // 0x406d74\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406de2:;\n    char * v108 = (char *)v97;\n    g73 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x406d1a;\n  lab_0x406e26:;\n    int64_t v109 = v98 + path; // 0x406e26\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x406e52\n    v24 = (int64_t)&g12;\n    if (fd >= 0) {\n        // 0x406e81\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4071b2\n            close(fd);\n            v24 = (int64_t)&g12;\n        } else {\n            // 0x406ea5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x406ec0_2:;\n                uint64_t v96 = *v32; // 0x406ec0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40704c;\n                } else {\n                    goto lab_0x406ece;\n                }\n            }\n          lab_0x40705f:\n            // 0x40705f\n            function_407250(v27, v19);\n            v24 = (int64_t)&g12;\n            if (v18 != 0) {\n                // 0x40707e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x406e64;\n  lab_0x406dcb:;\n    int64_t * mem4 = malloc(size2); // 0x406dcb\n    v97 = (int64_t)&g12;\n    if (mem4 != NULL) {\n        // 0x406e71\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406e26;\n    } else {\n        goto lab_0x406de2;\n    }\n  lab_0x406e64:\n    // 0x406e64\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406de2;\n}\n"
        },
        {
            "funcName": "function_407250",
            "funcStartAddr": "407250",
            "funcEndAddr": "4072cb",
            "decompiledFuncCode": "int64_t function_407250(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x407257\n    if (fileno(stream) < 0) {\n        // 0x4072b7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40726a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40729b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4072b7\n            return fclose(stream);\n        }\n    }\n    // 0x40726c\n    if ((int32_t)function_4072d0(a1, v1) == 0) {\n        // 0x4072b7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x407278\n    int32_t v3 = *v2; // 0x407280\n    int64_t result = fclose(stream); // 0x40728e\n    if (v3 != 0) {\n        // 0x4072c0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x407290\n    return result;\n}\n"
        },
        {
            "funcName": "function_4072d0",
            "funcStartAddr": "4072d0",
            "funcEndAddr": "407310",
            "decompiledFuncCode": "int64_t function_4072d0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x4072ea\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x4072ea\n        return fflush(stream);\n    }\n    // 0x4072f8\n    function_407310(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_407310",
            "funcStartAddr": "407310",
            "funcEndAddr": "407367",
            "decompiledFuncCode": "int64_t function_407310(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x407310\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40731a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40734b\n    int64_t result = -1; // 0x407354\n    if (v1 != -1) {\n        // 0x407356\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x407362\n    return result;\n}\n"
        },
        {
            "funcName": "function_407370",
            "funcStartAddr": "407370",
            "funcEndAddr": "408e89",
            "decompiledFuncCode": "int64_t function_407370(int32_t a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x407370\n    int64_t v1; // bp-1416, 0x407370\n    int64_t v2; // bp-1656, 0x407370\n    if ((int32_t)function_4090b0(a3, &v1, &v2) < 0) {\n        // 0x4079e0\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x40737b\n    int64_t v4; // bp-1384, 0x407370\n    int64_t v5; // bp-1640, 0x407370\n    int64_t v6; // 0x407370\n    if ((int32_t)function_408e90(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x4082c7\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x4082e3\n            free((int64_t *)v6);\n        }\n        // 0x4082e8\n        *__errno_location() = 22;\n        // 0x4079e0\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x4073db\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x4073e3\n    uint64_t v9 = v8 + v6; // 0x4073e7\n    int64_t v10; // 0x407370\n    char * v11; // 0x407370\n    int64_t v12; // 0x407370\n    if (v9 < v8) {\n        // 0x407a90\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x407999;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x407a90\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x407999;\n        } else {\n            uint64_t size = v9 + 6; // 0x4073f7\n            if (size < 4000) {\n                // 0x407540\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x407370\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x407434;\n            } else {\n                if (size == -1) {\n                    // 0x407a90\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x407999;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x407418\n                    if (mem == NULL) {\n                        // 0x407a90\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x407999;\n                    } else {\n                        // 0x40742d\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x407434;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x407960_2:;\n    // 0x407960\n    int64_t v14; // 0x407370\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x407968\n    int64_t v17 = v16; // 0x407976\n    int64_t v18 = v16; // 0x407976\n    int64_t v19 = v15; // 0x407976\n    int64_t v20; // 0x407458\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x407b88;\n    } else {\n        goto lab_0x407981;\n    }\n  lab_0x407999:\n    // 0x407999\n    if (v6 != (int64_t)&v4) {\n        // 0x4079b0\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x4079cc\n        free((int64_t *)v6);\n    }\n    // 0x4079d1\n    *(int32_t *)v10 = 12;\n    // 0x4079e0\n    return 0;\n  lab_0x407434:;\n    int64_t v21 = a1 == 0 ? 0 : v3;\n    v20 = a1;\n    int64_t * v22 = (int64_t *)v6; // 0x40746d\n    int64_t v23 = *v22; // 0x40746d\n    int64_t v24 = 0; // 0x407473\n    int64_t v25 = v20; // 0x407473\n    int64_t v26 = v21; // 0x407473\n    int64_t v27 = 0; // 0x407473\n    int64_t v28; // 0x407370\n    int64_t v29; // 0x407370\n    int64_t v30; // 0x407370\n    int64_t v31; // 0x407370\n    int64_t v32; // 0x407370\n    int64_t v33; // 0x407370\n    int64_t v34; // 0x407370\n    if (v23 == a3) {\n        goto lab_0x407a83;\n    } else {\n        int64_t v35 = v23 - a3; // 0x407479\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x40748b;\n    }\n  lab_0x407a83:;\n    int64_t v36 = v24; // 0x407a86\n    float80_t v37; // 0x407370\n    float80_t v38 = v37; // 0x407a86\n    float80_t v39; // 0x407370\n    float80_t v40 = v39; // 0x407a86\n    int64_t v41 = v25; // 0x407a86\n    int64_t v42 = v26; // 0x407a86\n    int64_t v43 = v27; // 0x407a86\n    int64_t v44; // 0x407370\n    int64_t v45 = v44; // 0x407a86\n    goto lab_0x4075e8;\n  lab_0x4075e8:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x407370\n    int64_t v51; // 0x407370\n    int64_t v52; // 0x407370\n    int64_t v53; // 0x407370\n    int64_t v54; // 0x407370\n    int64_t v55; // 0x407370\n    int64_t v56; // 0x407370\n    int64_t v57; // 0x407370\n    int64_t dest_mem2; // 0x407370\n    int64_t dest_mem3; // 0x407370\n    int64_t v58; // 0x407370\n    float80_t v59; // 0x407370\n    float80_t v60; // 0x407370\n    float80_t v61; // 0x407370\n    float80_t v62; // 0x407370\n    float80_t v63; // 0x407370\n    uint64_t v64; // 0x408716\n    char * v65; // 0x4075fc\n    char v66; // 0x4075fc\n    int64_t v67; // 0x407624\n    uint32_t v68; // 0x407628\n    int64_t v69; // 0x407a05\n    char v70; // 0x407370\n    if (v1 == v49) {\n        // 0x408710\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x408e7a\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x408772;\n            } else {\n                goto lab_0x407960_2;\n            }\n        } else {\n            // 0x408720\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x408772;\n            } else {\n                if (v47 != 0) {\n                    // 0x408d3d\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x407960_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x408d43\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x40873e;\n                        } else {\n                            goto lab_0x408d4f;\n                        }\n                    }\n                } else {\n                    // 0x40872e\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x40873e;\n                    } else {\n                        goto lab_0x408d4f;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x4075fc\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x407601\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x40809c\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x4081d0\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x407960_2;\n                } else {\n                    goto lab_0x407a62;\n                }\n            } else {\n                // 0x407a12\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x407a62;\n                } else {\n                    if (v47 != 0) {\n                        // 0x408300\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x407960_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x408306\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x407a30;\n                            } else {\n                                goto lab_0x408312;\n                            }\n                        }\n                    } else {\n                        // 0x407a20\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x407a30;\n                        } else {\n                            goto lab_0x408312;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x40809c\n                abort();\n                // UNREACHABLE\n            }\n            // 0x407619\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g75 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x407f90\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x407a67;\n                }\n                case 19: {\n                    // 0x407f80\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x407a67;\n                }\n                case 20: {\n                    // 0x407f68\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x407a67;\n                }\n                case 21: {\n                    goto lab_0x407b50;\n                }\n                case 22: {\n                    goto lab_0x407b50;\n                }\n                default: {\n                    // 0x40763a\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x407ae0\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x407afd;\n                        } else {\n                            // 0x407ae7\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x407670;\n                            } else {\n                                goto lab_0x407afd;\n                            }\n                        }\n                    } else {\n                        goto lab_0x407670;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40748b:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x407370\n    float80_t v77 = v76;\n    float80_t v78; // 0x407370\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x407370\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x40748e\n    int64_t v89 = v85; // 0x40748e\n    int64_t v90 = v84; // 0x40748e\n    float80_t v91 = v79; // 0x40748e\n    float80_t v92 = v77; // 0x40748e\n    int64_t v93 = v75; // 0x40748e\n    int64_t v94 = v80; // 0x40748e\n    int64_t v95 = v81; // 0x40748e\n    int64_t v96 = v82; // 0x40748e\n    int64_t v97 = v87; // 0x40748e\n    int64_t v98; // 0x407370\n    int64_t v99; // 0x407370\n    int64_t v100; // 0x407370\n    int64_t v101; // 0x407370\n    int64_t v102; // 0x407370\n    if (v82 >= v87) {\n        goto lab_0x4075d9;\n    } else {\n        if (v82 != 0) {\n            // 0x407570\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x407960_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x407576\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x40758b;\n                } else {\n                    goto lab_0x40757e;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x4074b4\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x40759e;\n                } else {\n                    goto lab_0x4074c0;\n                }\n            } else {\n                goto lab_0x40757e;\n            }\n        }\n    }\n  lab_0x4075d9:\n    // 0x4075d9\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x4075e8;\n  lab_0x408772:\n    // 0x408772\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x40877a\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x40878b\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x408797\n    if (v12 != 0) {\n        // 0x4087a3\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x4087c2\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x4087de\n        free((int64_t *)v6);\n    }\n    // 0x4087e3\n    *a2 = v46;\n    // 0x4079e0\n    return result;\n  lab_0x407b50:\n    // 0x407b50\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x407a67;\n  lab_0x40757e:\n    // 0x40757e\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x407960_2;\n    } else {\n        goto lab_0x40758b;\n    }\n  lab_0x407b88:\n    // 0x407b88\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x407981;\n  lab_0x407981:\n    if (v12 == 0) {\n        // 0x407a90\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x407999;\n    } else {\n        // 0x407991\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x407999;\n    }\n  lab_0x407a62:\n    // 0x407a62\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x407a67;\n  lab_0x407670:;\n    int64_t v273 = (int64_t)v11; // 0x407670\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x407677\n    int64_t v275 = v273 + 1; // 0x40767b\n    *v11 = 37;\n    int64_t v276 = v275; // 0x407684\n    if (v274 % 2 != 0) {\n        // 0x407686\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x407677\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x407697\n    if ((v277 & 2) != 0) {\n        // 0x407699\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x4076a3\n    if ((v277 & 4) != 0) {\n        // 0x4076a5\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x4076af\n    if ((v277 & 8) != 0) {\n        // 0x4076b1\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x4076bb\n    if ((v277 & 16) != 0) {\n        // 0x4076bd\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x4076c7\n    if ((v277 & 64) != 0) {\n        // 0x4076c9\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x4076d3\n    if ((v277 & 32) != 0) {\n        // 0x4076d5\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x4076dd\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x4076e1\n    int64_t v293 = v290; // 0x4076e8\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x4076f7\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x40771a\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x40771e\n    int64_t v298 = v295; // 0x407725\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x407734\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x40762a\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x407760\n    int64_t v272; // 0x407370\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x407769\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x407b68;\n        } else {\n            if (v301 == 12) {\n                // 0x408328\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x407790;\n            } else {\n                // 0x407780\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x407b60\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x407b68;\n                } else {\n                    goto lab_0x407790;\n                }\n            }\n        }\n    } else {\n        goto lab_0x407790;\n    }\n  lab_0x407a67:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x407a67\n    int64_t v111 = v55 + 88; // 0x407a6b\n    int64_t v112 = *(int64_t *)v111; // 0x407a6f\n    int64_t v113 = v49 + 1; // 0x407a72\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x407479\n        int64_t v115 = v114 + v105; // 0x40747f\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x407aa8\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x407960_2;\n            } else {\n                goto lab_0x4075d9;\n            }\n        } else {\n            goto lab_0x40748b;\n        }\n    } else {\n        goto lab_0x407a83;\n    }\n  lab_0x40758b:;\n    int64_t v116 = v80 == v20; // 0x407592\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x4074c0;\n    } else {\n        goto lab_0x40759e;\n    }\n  lab_0x40759e:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x407370\n    if (v102 != 0) {\n        goto lab_0x4074c0;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x4075ba\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x407b75;\n        } else {\n            // 0x4075c8\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x4075d9;\n        }\n    }\n  lab_0x4074c0:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x4074d7\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x407960_2;\n    } else {\n        // 0x4074fd\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x407525\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x4075d9;\n    }\n  lab_0x40873e:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x408d04\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x407960_2;\n        } else {\n            // 0x408d15\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x408d2a\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x408772;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x408761\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x407b75;\n        } else {\n            // 0x40876f\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x408772;\n        }\n    }\n  lab_0x408d4f:\n    // 0x408d4f\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x407960_2;\n    } else {\n        goto lab_0x40873e;\n    }\n  lab_0x407afd:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x407afd\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x407b01\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x407b05\n    int64_t v123 = 0; // 0x407b0c\n    int64_t v124 = v122; // 0x407b0c\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x407b12\n        int64_t v126 = v120; // 0x407b1a\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x408aa1\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x408ab9\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x408acb\n            int64_t v131 = v128; // 0x408ad4\n            int64_t v132 = v130; // 0x408ad4\n            int64_t v133; // 0x407370\n            int64_t v134; // 0x408ae6\n            if (v130 < v129) {\n                // 0x408ad6\n                if (v121 == v128) {\n                    // break -> 0x4078f0\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x4078db\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x4078f0\n                        goto lab_0x4078f0;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x408a98\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x408aa1\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x408ad6\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x4078f0\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x4078db\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x4078f0\n                            goto lab_0x4078f0;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x408a98\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x407b24\n            if (*(int32_t *)v135 != 5) {\n                // 0x40809c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x407b30\n            int64_t v137 = v136; // 0x407b30\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x407b3d\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x4078f0:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x4078f0\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x4078f4\n    int64_t v142; // 0x407370\n    int64_t v143; // 0x407370\n    int64_t v144; // 0x407370\n    if (v140 == v141) {\n        goto lab_0x407fa0;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x407901\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x408b04\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x408b0d\n            if (v141 == v146) {\n                goto lab_0x407fbe;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x408b33\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x408b3a\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x408b53\n                int64_t v152 = v151; // 0x408b5c\n                int64_t v153 = v149; // 0x408b5c\n                int64_t v154; // 0x407370\n                int64_t v155; // 0x408b67\n                if (v151 < v150) {\n                    // 0x408b5e\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x407960_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x408b7a\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x407960_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x408b20\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x408b29\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x408b5e\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x407960_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x408b7a\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x407960_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x408b20\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x40792c;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x407913\n            if (*(int32_t *)v156 != 5) {\n                // 0x40809c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x407920\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x407fa0;\n            } else {\n                goto lab_0x40792c;\n            }\n        }\n    }\n  lab_0x407790:\n    // 0x407790\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x40779d\n    int64_t v160 = 0; // 0x4077a5\n    if (v159 != -1) {\n        // 0x4077ab\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x40809c\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x4077ce\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x4077dc\n        if (*(int32_t *)v162 != 5) {\n            // 0x40809c\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x4077ef\n        int64_t v164; // bp-8, 0x407370\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x407370\n    uint64_t v165; // 0x407806\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x408238\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x407864\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x407960_2;\n    } else {\n        // 0x407810\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x407864\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x407f40\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x407960_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x407f46\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x407832;\n                } else {\n                    goto lab_0x407f52;\n                }\n            }\n        } else {\n            // 0x407822\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x407832;\n            } else {\n                goto lab_0x407f52;\n            }\n        }\n    }\n  lab_0x407a30:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x408259\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x407960_2;\n        } else {\n            // 0x408271\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x408282\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x407a62;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x407a51\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x407b75;\n        } else {\n            // 0x407a5f\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x407a62;\n        }\n    }\n  lab_0x408312:\n    // 0x408312\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x407960_2;\n    } else {\n        goto lab_0x407a30;\n    }\n  lab_0x407fa0:\n    // 0x407fa0\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x407fbe;\n  lab_0x407b68:\n    // 0x407b68\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x407790;\n  lab_0x407b75:\n    // 0x407b75\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x407b88;\n  lab_0x407fbe:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x407fc4\n    v14 = v48;\n    int64_t v170; // 0x407370\n    int64_t v171; // 0x407370\n    int64_t * v172; // 0x407370\n    int64_t v173; // 0x407370\n    int64_t v174; // bp-760, 0x407370\n    uint64_t size5; // 0x407fc8\n    if (v169 == -1) {\n        goto lab_0x407960_2;\n    } else {\n        // 0x407fd9\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x408039;\n        } else {\n            // 0x407fe5\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x407960_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x40800d\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x407960_2;\n                } else {\n                    goto lab_0x408039;\n                }\n            }\n        }\n    }\n  lab_0x40792c:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x407fbe;\n    } else {\n        // 0x407935\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x407fbe;\n        } else {\n            goto lab_0x407960_2;\n        }\n    }\n  lab_0x407832:\n    // 0x407832\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x4081f9\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x408214\n            if (v48 == v20 && v46 != 0) {\n                // 0x408222\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x407864\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x407853\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x407864\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x407960_2;\n  lab_0x407f52:\n    // 0x407f52\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x407960_2;\n    } else {\n        goto lab_0x407832;\n    }\n  lab_0x408039:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x407370\n    int64_t v181; // 0x407370\n    int64_t v182; // 0x407370\n    int64_t v183; // 0x407370\n    int64_t v184; // 0x407370\n    int64_t v185; // 0x407370\n    int64_t v186; // 0x407370\n    int64_t v187; // 0x407370\n    int64_t v188; // 0x407370\n    int64_t v189; // 0x407370\n    int64_t v190; // 0x407370\n    int64_t v191; // 0x407370\n    int64_t v192; // 0x407370\n    int64_t v193; // 0x407370\n    float80_t v194; // 0x407370\n    float80_t v195; // 0x407370\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x408bb2\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x408bc0\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x408ced\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x4084f9;\n    } else {\n        // 0x408041\n        int64_t v198; // 0x407370\n        float80_t v199; // 0x407370\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x408801\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x40880e\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x40866a\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x40806f\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x408078\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x40809c\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x40809c\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x408be6\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x408be6\n                            v181 = v187 + 3;\n                            goto lab_0x408d61;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x408d61;\n                            } else {\n                                goto lab_0x408c22;\n                            }\n                        }\n                    } else {\n                        // 0x4088f3\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x4084e7;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x408901\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x408e4a\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x408948\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x40895b\n                                int64_t v207 = v176 & 0xffffffff; // 0x40895e\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x40896c\n                                int64_t v209 = v187 + 1; // 0x408989\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x40899e\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x4089ab\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x4084f9;\n                        }\n                    }\n                } else {\n                    // 0x408698\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x408698\n                        v180 = v187 + 1;\n                        goto lab_0x408c47;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x408c47;\n                        } else {\n                            goto lab_0x4086b8;\n                        }\n                    }\n                }\n            } else {\n                // 0x4084d0\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x4084e7;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x408a1c\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x408a2d\n                    char v215 = *v213; // 0x408a34\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x408a70\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x408a7d\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x408a45\n                        v182 = v218;\n                        int64_t v219; // 0x408a37\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x4084f9;\n                }\n            }\n        } else {\n            float80_t v220; // 0x407370\n            if (v220 != 0.0L) {\n                // 0x40809c\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x4086eb\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x4086fa\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x4089d3\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x4084f9;\n        }\n    }\n  lab_0x4084f9:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x4084fc\n    int64_t v229 = v228; // 0x408502\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x408504\n        int64_t v232 = v231 + v224; // 0x408507\n        int64_t v233 = v232 - v225; // 0x40850e\n        if ((v230 & 2) != 0) {\n            // 0x4089b3\n            v229 = v233;\n            int64_t v234 = v224; // 0x4089b6\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x4089c0\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x4089c0\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x408825\n                int64_t v238 = v224; // 0x40882b\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x408839\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x408830\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x408845\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x408858\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x408531\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x408551\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x408548\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x40855a\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x408568\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x40809c\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x408598\n    int64_t dest_mem5 = v48; // 0x4085a5\n    int64_t v250 = v248; // 0x4085a5\n    int64_t v251 = v47; // 0x4085a5\n    int64_t v252; // 0x407370\n    if (v47 - v46 > v248) {\n        goto lab_0x408620;\n    } else {\n        if (v249 < v46) {\n            // 0x4087f2\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x407960_2;\n            } else {\n                goto lab_0x408620;\n            }\n        } else {\n            // 0x4085b0\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x408620;\n            } else {\n                if (v47 != 0) {\n                    // 0x408b88\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x407960_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x408b8e\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x4085ce;\n                        } else {\n                            goto lab_0x408b9a;\n                        }\n                    }\n                } else {\n                    // 0x4085be\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x4085ce;\n                    } else {\n                        goto lab_0x408b9a;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x408620:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x408631\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x40864d\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x407a67;\n  lab_0x4084e7:\n    // 0x4084e7\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x4084f9;\n  lab_0x408c47:;\n    char * v257 = nl_langinfo(0x10000); // 0x408c7a\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x408c8b\n    char v259 = *v257; // 0x408c92\n    int64_t v260 = v176 & 0xffffffff; // 0x408c95\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x408ca3\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x408cd0\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x408cdd\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x4086b8;\n  lab_0x4086b8:\n    // 0x4086b8\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x4084f9;\n  lab_0x4085ce:\n    // 0x4085ce\n    if (v48 == 0 || v48 == v20) {\n        // 0x40886b\n        int64_t size7; // 0x407370\n        int64_t * mem12 = malloc((int32_t)size7); // 0x408882\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x407960_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x40888e\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x4088b9\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x408620;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x4085fd\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x407960_2;\n        } else {\n            // 0x40860b\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x408620;\n        }\n    }\n  lab_0x408b9a:\n    // 0x408b9a\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x407960_2;\n    } else {\n        goto lab_0x4085ce;\n    }\n  lab_0x408d61:;\n    int64_t v265 = v187 + 4; // 0x408d61\n    char v266 = *nl_langinfo(0x10000); // 0x408dac\n    int64_t v267 = v176 & 0xffffffff; // 0x408daf\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x408db6\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x408ddd\n        int64_t v270 = v265 + 1; // 0x408de5\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x408c22;\n  lab_0x408c22:\n    // 0x408c22\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x4084f9;\n}\n"
        },
        {
            "funcName": "function_408e90",
            "funcStartAddr": "408e90",
            "funcEndAddr": "4090a9",
            "decompiledFuncCode": "int64_t function_408e90(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x408ef3\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x408ea8\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x408eb9\n    g76 = v5;\n    int64_t v6; // 0x408e90\n    int64_t v7; // 0x408e90\n    int64_t v8; // 0x408e90\n    int64_t v9; // 0x408e90\n    int64_t v10; // 0x408e90\n    int64_t v11; // 0x408e90\n    int64_t v12; // 0x408e90\n    uint32_t v13; // 0x408fb0\n    int64_t * v14; // 0x408fe0\n    int64_t v15; // 0x408fe8\n    uint32_t v16; // 0x409030\n    uint32_t v17; // 0x409000\n    int64_t * v18; // 0x408f90\n    int64_t v19; // 0x408f90\n    int64_t * v20; // 0x408fa0\n    int64_t v21; // 0x408fa0\n    int64_t * v22; // 0x408f78\n    int64_t v23; // 0x408f78\n    int64_t * v24; // 0x408f60\n    int64_t v25; // 0x408f60\n    int64_t * v26; // 0x409080\n    uint32_t v27; // 0x408f40\n    int64_t v28; // 0x409080\n    int64_t * v29; // 0x409070\n    int64_t v30; // 0x409070\n    uint32_t v31; // 0x408f20\n    int64_t * v32; // 0x409098\n    int64_t v33; // 0x409098\n    int64_t v34; // 0x409043\n    uint32_t v35; // 0x408f00\n    int64_t v36; // 0x409017\n    uint32_t v37; // 0x408ec8\n    int32_t * v38; // 0x408fb0\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x408f40\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x408f47\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x408f90\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x408f53\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x408ee6\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x408f20\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x408f27\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x408fa0\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x408f33\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x408ee6\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x408f00\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x408f07\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x408f78\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x408f13\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x408ee6\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x408ec8\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x408ed3\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x408f60\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x408edf\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x408ee6\n            break;\n        }\n        case 11: {\n            // 0x408fb0\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x408fbf\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x409080\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x408fcc\n            *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n            // break -> 0x408ee6\n            break;\n        }\n        case 12: {\n            // 0x408fe0\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x408ee6\n            break;\n        }\n        case 15: {\n            // 0x409030\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x409037\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x409070\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x409043\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x408ee6\n            break;\n        }\n        case 16: {\n            // 0x409000\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x40900b\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x409098\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x409017\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x408ee6\n            break;\n        }\n        default: {\n            // 0x408ef3\n            return 0xffffffff;\n        }\n    }\n    // 0x408ee6\n    v3++;\n    int64_t v39 = v4 + 32; // 0x408ef1\n    while (v3 < v2) {\n        // 0x408eb0\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g76 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x408f40\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x408f47\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x408f90\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x408f53\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x408ee6\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x408f20\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x408f27\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x408fa0\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x408f33\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x408ee6\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x408f00\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x408f07\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x408f78\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x408f13\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x408ee6\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x408ec8\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x408ed3\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x408f60\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x408edf\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x408ee6\n                break;\n            }\n            case 11: {\n                // 0x408fb0\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x408fbf\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x409080\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x408fcc\n                *(int64_t *)(v4 + 16) = __asm_movsd_1(__asm_movsd(*(int64_t *)v10));\n                // break -> 0x408ee6\n                break;\n            }\n            case 12: {\n                // 0x408fe0\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x408ee6\n                break;\n            }\n            case 15: {\n                // 0x409030\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x409037\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x409070\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x409043\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x408ee6\n                break;\n            }\n            case 16: {\n                // 0x409000\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x40900b\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x409098\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x409017\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x408ee6\n                break;\n            }\n            default: {\n                // 0x408ef3\n                return 0xffffffff;\n            }\n        }\n        // 0x408ee6\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x408ef3\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4090b0",
            "funcStartAddr": "4090b0",
            "funcEndAddr": "409db9",
            "decompiledFuncCode": "int64_t function_4090b0(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x4090b2\n    int64_t v4 = v1 + 16; // 0x4090b6\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x4090e9\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x4090fe\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x40912b\n    int32_t v8 = 0; // 0x409130\n    int64_t v9 = 0; // 0x409130\n    int64_t v10 = v3; // 0x409130\n    int64_t v11 = a1; // 0x409130\n    int64_t v12 = 0; // 0x409130\n    char v13; // 0x4090b0\n    int64_t v14; // 0x4090b0\n    int64_t v15; // 0x4090b0\n    int64_t v16; // 0x4090b0\n    int64_t v17; // 0x4090b0\n    int64_t v18; // 0x4090b0\n    int64_t v19; // 0x4090b0\n    int64_t v20; // 0x4090b0\n    int64_t v21; // 0x4090b0\n    int64_t v22; // 0x4090b0\n    int64_t v23; // 0x4090b0\n    int64_t v24; // 0x4090b0\n    int64_t v25; // 0x4090b0\n    int64_t v26; // 0x4090b0\n    int64_t v27; // 0x4090b0\n    int64_t v28; // 0x4090b0\n    int64_t v29; // 0x4090b0\n    int64_t v30; // 0x4090b0\n    int32_t v31; // 0x4090b0\n    int64_t v32; // 0x4090b0\n    int64_t v33; // 0x409120\n    int64_t v34; // 0x409170\n    int64_t * v35; // 0x409193\n    int64_t v36; // 0x4091f6\n    if (v7 != 0) {\n        // 0x409120\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x4090b0\n        int64_t v38 = 7; // 0x4090b0\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x4090b0\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x409120:\n            // 0x409120\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x409163\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x409178\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x4091b4\n                int64_t v43 = v42; // 0x4091b4\n                int64_t v44 = v43; // 0x4091bd\n                int64_t v45 = v33; // 0x4091bd\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x409550\n                    char v47 = *(char *)v46; // 0x409554\n                    int64_t v48 = v46; // 0x40955d\n                    while (v47 < 58) {\n                        // 0x409550\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x40955f\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x409bf5\n                        char v52 = *(char *)v51; // 0x409bf5\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x409bf9\n                        int64_t v54 = v33; // 0x409c0d\n                        int64_t v55 = v51; // 0x409c0d\n                        char v56 = v52; // 0x409c0d\n                        int64_t v57 = v53; // 0x409c0d\n                        bool v58 = v52 < 58; // 0x409c0d\n                        bool v59 = v52 < 58; // 0x409c0d\n                        char v60 = v52; // 0x409c0d\n                        int64_t v61 = v51; // 0x409c0d\n                        int64_t v62; // 0x409c22\n                        int64_t v63; // 0x409bf5\n                        char v64; // 0x409bf5\n                        int64_t v65; // 0x409bf9\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x409878_9;\n                            }\n                            // 0x409bf3\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x409c0f\n                                if (v64 >= 58) {\n                                    goto lab_0x409878_9;\n                                }\n                                // 0x409bf3\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x409bc8\n                        while (v58) {\n                            // 0x409bce\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x409878_9;\n                                }\n                                // 0x409bf3\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x409c0f\n                                    if (v64 >= 58) {\n                                        goto lab_0x409878_9;\n                                    }\n                                    // 0x409bf3\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x409bc4\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x409ccd\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x409878_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x409cde\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x4090b0\n                v36 = v45;\n                char v70; // 0x4090b0\n                while (true) {\n                    // 0x4091f6\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x409210\n                                *v41 = *v41 | 2;\n                                // break -> 0x4091f0\n                                break;\n                            }\n                            case 43: {\n                                // 0x409220\n                                *v41 = *v41 | 4;\n                                // break -> 0x4091f0\n                                break;\n                            }\n                            case 32: {\n                                // 0x409230\n                                *v41 = *v41 | 8;\n                                // break -> 0x4091f0\n                                break;\n                            }\n                            case 35: {\n                                // 0x409240\n                                *v41 = *v41 | 16;\n                                // break -> 0x4091f0\n                                break;\n                            }\n                            case 48: {\n                                // 0x409250\n                                *v41 = *v41 | 32;\n                                // break -> 0x4091f0\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x409258\n                                    break;\n                                }\n                                // 0x4091e6\n                                *v41 = *v41 | 64;\n                                // break -> 0x4091f0\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x4091ff\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x4091f0\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x4090b0\n                int64_t * v72; // 0x409181\n                int64_t * v73; // 0x40918a\n                if (v70 == 42) {\n                    // 0x4092cd\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x4092ed\n                    int64_t v75 = v74; // 0x4092ed\n                    int64_t v76 = v75 + 0xffffffd0; // 0x4092f1\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x4092f7\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x4096cd\n                        char v80 = *(char *)v79; // 0x4096d1\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x4096cd\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x4096dd\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x4096e1\n                        int64_t v82 = v36; // 0x4096e1\n                        int64_t v83 = 0; // 0x4096e1\n                        if (v80 != 36) {\n                            goto lab_0x4092fd;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x409712\n                            int64_t v89 = v85; // 0x409712\n                            int64_t v90 = v87; // 0x409712\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x409717\n                            int64_t v95 = v92 + 1; // 0x40971a\n                            char v96 = *(char *)v95; // 0x40971a\n                            int64_t v97 = v96; // 0x40971a\n                            while (v94 < v91) {\n                                // 0x409731\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x409878_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x4096eb\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x4096f4\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x409731\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x409878_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x4096eb\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x409d6b\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x409878_9;\n                            }\n                            // 0x409d79\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x40930c;\n                        }\n                    } else {\n                        goto lab_0x4092fd;\n                    }\n                } else {\n                    // 0x40925d\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x4090b0\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x40997b\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x409980\n                        int64_t v102 = v71; // 0x409989\n                        char * v103 = v100; // 0x409989\n                        int64_t v104 = v36; // 0x409989\n                        int64_t v105 = v71; // 0x409989\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x409993\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x409993\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x409993\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x4099a2\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x4099c5\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x409268;\n                }\n            } else {\n                goto lab_0x409128;\n            }\n        }\n    }\n  lab_0x409132:\n    // 0x409132\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x409154\n    return 0;\n  lab_0x409878_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x409883\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x409895\n    if (v3 != v115) {\n        // 0x4098a0\n        free((int64_t *)v115);\n    }\n    // 0x4098a5\n    *__errno_location() = 22;\n    // 0x409154\n    return 0xffffffff;\n  lab_0x409a50_5:;\n    // 0x409a50\n    int64_t v116; // 0x4090b0\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x409a55\n    int64_t v119; // 0x4090b0\n    if (v4 == v117) {\n        goto lab_0x409a69_3;\n    } else {\n        // 0x409a57\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x409a69_3;\n    }\n  lab_0x409a69_3:;\n    int64_t v120 = *v5; // 0x409a69\n    int32_t * v121; // 0x409a79\n    if (v3 == v120) {\n        // 0x409a79\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x409a74\n    free((int64_t *)v120);\n    // 0x409a79\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x409128:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x40912b\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x409132\n        goto lab_0x409132;\n    }\n    goto lab_0x409120;\n  lab_0x4092fd:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x4092fd\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x4096a3\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x409878_9;\n        }\n        // 0x4096bb\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x40930c;\n  lab_0x409268:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x40926b\n    int64_t v147 = v339; // 0x40926b\n    int64_t v145 = v338; // 0x40926b\n    int64_t v143 = v337; // 0x40926b\n    int64_t v186; // 0x4090b0\n    int64_t v190; // 0x4090b0\n    int64_t v189; // 0x4090b0\n    int64_t v188; // 0x4090b0\n    int64_t v187; // 0x4090b0\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x409370;\n    } else {\n        goto lab_0x409271;\n    }\n  lab_0x40930c:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x40930c\n    int64_t v132 = v128; // 0x409313\n    int64_t v133 = v16; // 0x409313\n    int64_t v134 = v131; // 0x409313\n    int64_t v135; // 0x4090b0\n    int64_t v136; // 0x4090b0\n    int64_t v137; // 0x4090b0\n    int64_t v138; // 0x4095bf\n    if (v16 > v127) {\n        goto lab_0x40931c;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x4095b5\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x409a50_5;\n        }\n        int64_t size = 32 * v138; // 0x4095de\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x409b3c\n            if (mem == NULL) {\n                goto lab_0x409a69_3;\n            }\n            // 0x409b5e\n            v135 = (int64_t)mem;\n            goto lab_0x409b69;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x4095ff\n            int64_t v140 = *v6; // 0x409604\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x409a50_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x4095ff\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x409b69;\n            } else {\n                goto lab_0x40963d;\n            }\n        }\n    }\n  lab_0x409271:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x409278\n    int64_t v151 = v146; // 0x409278\n    int64_t v152 = v144; // 0x409278\n    uint64_t v153; // 0x4090b0\n    int64_t v154; // 0x4090b0\n    int64_t v155; // 0x4092b7\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x4092bb\n        int64_t v158; // 0x4090b0\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x409420\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x4092b3\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x409428\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x4092b0\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x4092b3\n                    break;\n                }\n            }\n        } else {\n            // 0x4092c0\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x4092b3\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x409428\n    int64_t v162 = v161 % 256; // 0x409434\n    g77 = v162;\n    int64_t v163 = 17; // 0x409437\n    int64_t v164 = v154; // 0x409437\n    int64_t v165 = v154; // 0x409437\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x4094a1;\n        }\n        case 28: {\n            goto lab_0x4097f2;\n        }\n        case 30: {\n            // 0x40981e\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x409449;\n        }\n        case 32: {\n            goto lab_0x4097f2;\n        }\n        case 33: {\n            goto lab_0x4097f2;\n        }\n        case 34: {\n            goto lab_0x4097f2;\n        }\n        case 46: {\n            // 0x40980f\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x409449;\n        }\n        case 51: {\n            goto lab_0x40982d;\n        }\n        case 60: {\n            goto lab_0x4097f2;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x409749\n            int32_t v167 = v166 - 7; // 0x409749\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x40974f\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x409449;\n        }\n        case 63: {\n            goto lab_0x4097a0;\n        }\n        case 64: {\n            goto lab_0x4097f2;\n        }\n        case 65: {\n            goto lab_0x4097f2;\n        }\n        case 66: {\n            goto lab_0x4097f2;\n        }\n        case 68: {\n            goto lab_0x4097a0;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x40975f\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x409765\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x40976d\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x40977b\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x40978f\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x409449;\n        }\n        case 74: {\n            goto lab_0x40982d;\n        }\n        case 75: {\n            goto lab_0x409449;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x409440\n            int32_t v172 = v171 - 7; // 0x409440\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x409446\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x409449;\n        }\n        case 80: {\n            goto lab_0x40982d;\n        }\n        case 83: {\n            goto lab_0x40982d;\n        }\n        default: {\n            goto lab_0x409878_9;\n        }\n    }\n  lab_0x40931c:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x409333\n        int64_t v178 = v176; // 0x4090b0\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x409328\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x409328\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x409341\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x40934d\n    int32_t v182 = *v181; // 0x40934d\n    if (v182 != 0) {\n        // 0x4099ce\n        if (v182 != 5) {\n            goto lab_0x409878_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x4099d7\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x409268;\n    } else {\n        // 0x409357\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x40935d\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x409271;\n        } else {\n            goto lab_0x409370;\n        }\n    }\n  lab_0x409370:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x409370\n    char v197 = *v196; // 0x409370\n    int64_t * v198; // 0x409198\n    *v198 = v192;\n    int64_t v199; // 0x4090b0\n    int64_t v200; // 0x4090b0\n    int64_t v201; // 0x4090b0\n    int64_t v202; // 0x4090b0\n    int64_t v203; // 0x4090b0\n    int64_t * v204; // 0x4091a1\n    int64_t * v205; // 0x4091aa\n    int64_t v206; // 0x409389\n    if (v197 != 42) {\n        char v207 = *v196; // 0x409570\n        int64_t v208 = v193; // 0x409579\n        char * v209; // 0x4090b0\n        int64_t v210; // 0x4090b0\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x409580\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x409584\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x409580\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x40958e\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x409570\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x4095a1\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x409271;\n    } else {\n        // 0x40937f\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x40939f\n        int64_t v219 = v218; // 0x40939f\n        int64_t v220 = v219 + 0xffffffd0; // 0x4093a3\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x4093a9\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x409c54\n            char v224 = *(char *)v223; // 0x409c58\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x409c54\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x409c64\n            v201 = v223;\n            int64_t v225 = v219; // 0x409c68\n            int64_t v226 = v206; // 0x409c68\n            int64_t v227 = 0; // 0x409c68\n            if (v224 != 36) {\n                goto lab_0x4093af;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x409c99\n                int64_t v233 = v229; // 0x409c99\n                int64_t v234 = v231; // 0x409c99\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x409c9e\n                int64_t v239 = v236 + 1; // 0x409ca5\n                char v240 = *(char *)v239; // 0x409ca9\n                int64_t v241 = v240; // 0x409ca9\n                while (v238 < v235) {\n                    // 0x409cb7\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x409878_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x409c72\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x409c7b\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x409cb7\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x409878_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x409c72\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x409d87\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x409878_9;\n                }\n                // 0x409d95\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x4093be;\n            }\n        } else {\n            goto lab_0x4093af;\n        }\n    }\n  lab_0x4094a1:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x4094a6\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x4094ae\n    *a2 = v245;\n    int64_t v246; // 0x4090b0\n    int64_t v247; // 0x4090b0\n    int64_t dest_mem; // 0x4090b0\n    int64_t v248; // 0x4090b0\n    int64_t v249; // 0x409da3\n    if (v246 > v245) {\n        // 0x4094ba\n        goto lab_0x409128;\n    } else {\n        if (v246 < 0) {\n            // 0x409da3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x409a50_5;\n        }\n        int64_t v250 = 2 * v246; // 0x4094d6\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x409da3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x409a50_5;\n        }\n        int64_t v251 = *v5; // 0x4094e7\n        int64_t size2 = 176 * v246; // 0x4094f9\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x409649\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x409bac\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x409a79\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x409a57\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x409a69_3;\n            }\n            goto lab_0x409664;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x40950b\n            if (mem4 == NULL) {\n                // 0x409da3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x409a50_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x40950b\n            int64_t v254 = *v5; // 0x40952d\n            int64_t v255 = *a2; // 0x409531\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x409664;\n            } else {\n                goto lab_0x40953f;\n            }\n        }\n    }\n  lab_0x4097f2:\n    // 0x4097f2\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x409807\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x409449;\n  lab_0x40982d:;\n    uint32_t v335 = (int32_t)v153; // 0x409835\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x40983b\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x409843\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x409851\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x40985e\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x409449;\n  lab_0x4097a0:;\n    uint32_t v336 = (int32_t)v153; // 0x4097a8\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x4097ae\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x4097b6\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x4097c4\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x4097d1\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x409449;\n  lab_0x409449:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x4090b0\n    int64_t v260; // 0x4090b0\n    int64_t * v261; // 0x4091af\n    if (v259 == -1) {\n        // 0x409954\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x409878_9;\n        }\n        // 0x40996c\n        v260 = v148;\n    } else {\n        // 0x409453\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x409458\n    int64_t v264 = v258; // 0x40945f\n    int64_t v265 = v162; // 0x40945f\n    int64_t v266 = v263; // 0x40945f\n    int64_t v267; // 0x4090b0\n    int64_t v268; // 0x4090b0\n    int64_t v269; // 0x4090b0\n    int64_t v270; // 0x4090b0\n    int64_t v271; // 0x4090b0\n    if (v142 > v262) {\n        goto lab_0x409465;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x4098c8\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x4098d2\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x409a50_5;\n        }\n        int64_t size3 = 32 * v273; // 0x4098f1\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x409904\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x4099e9\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x409a69_3;\n            }\n            goto lab_0x409a06;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x409911\n            if (mem6 == NULL) {\n                // 0x409da3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x409a50_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x409911\n            int64_t v276 = v274 & 0xffffffff; // 0x409916\n            int64_t v277 = *v6; // 0x409941\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x409a06;\n            } else {\n                goto lab_0x40994b;\n            }\n        }\n    }\n  lab_0x409465:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x40947b\n        int64_t v282 = v279; // 0x4090b0\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x409470\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x409470\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x409489\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x409495\n    int32_t v286 = *v285; // 0x409495\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x4098ba\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x409878_9;\n        }\n    } else {\n        // 0x40949f\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x4094a1;\n  lab_0x409b69:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x409b69\n    int64_t * v290; // 0x4090b0\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x40963d;\n  lab_0x40963d:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x40931c;\n  lab_0x4093af:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x4093af\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x409c2a\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x409878_9;\n        }\n        // 0x409c42\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x4093be;\n  lab_0x4093be:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x4093be\n    int64_t v300 = v296; // 0x4093c5\n    int64_t v301 = v191; // 0x4093c5\n    int64_t v302 = v299; // 0x4093c5\n    int64_t v303; // 0x4090b0\n    int64_t v304; // 0x4090b0\n    int64_t v305; // 0x4090b0\n    int64_t v306; // 0x409aa2\n    if (v191 > v295) {\n        goto lab_0x4093ce;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x409a98\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x409a50_5;\n        }\n        int64_t size4 = 32 * v306; // 0x409abd\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x409cee\n            if (mem7 == NULL) {\n                goto lab_0x409a69_3;\n            }\n            // 0x409d10\n            v304 = (int64_t)mem7;\n            goto lab_0x409d1b;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x409ade\n            int64_t v308 = *v6; // 0x409ae3\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x409a50_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x409ade\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x409d1b;\n            } else {\n                goto lab_0x409b1c;\n            }\n        }\n    }\n  lab_0x409664:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x4090b0\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x40953f;\n  lab_0x40953f:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x409128;\n  lab_0x409a06:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x409a1c\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x40994b;\n  lab_0x40994b:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x409465;\n  lab_0x4093ce:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x4093e3\n        int64_t v324 = v322; // 0x4090b0\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x4093d8\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x4093d8\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x4093f1\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x4093fe\n    int32_t v328 = *v327; // 0x4093fe\n    if (v328 != 0) {\n        // 0x409b25\n        if (v328 != 5) {\n            goto lab_0x409878_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x409b2e\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x409408\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x409411\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x409271;\n  lab_0x409d1b:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x409d1b\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x409b1c;\n  lab_0x409b1c:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x4093ce;\n}\n"
        },
        {
            "funcName": "function_409dc0",
            "funcStartAddr": "409dc0",
            "funcEndAddr": "409e1d",
            "decompiledFuncCode": "int64_t function_409dc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409dc0\n    return function_401790();\n}\n"
        },
        {
            "funcName": "function_409e20",
            "funcStartAddr": "409e20",
            "funcEndAddr": "409e21",
            "decompiledFuncCode": "int64_t function_409e20(void) {\n    // 0x409e20\n    int64_t result; // 0x409e20\n    return result;\n}\n"
        },
        {
            "funcName": "function_409e30",
            "funcStartAddr": "409e30",
            "funcEndAddr": "409e48",
            "decompiledFuncCode": "int64_t function_409e30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409e30\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_409e48",
            "funcStartAddr": "409e48",
            "funcEndAddr": "409e68",
            "decompiledFuncCode": "int64_t function_409e48(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x409e52\n    while (*(int64_t *)v1 != -1) {\n        // 0x409e53\n        v1 -= 8;\n    }\n    // 0x409e64\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_who.elf"
}