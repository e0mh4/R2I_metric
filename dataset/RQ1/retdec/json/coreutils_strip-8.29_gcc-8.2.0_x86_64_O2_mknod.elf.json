{
    "funcInfo": [
        {
            "funcName": "function_401770",
            "funcStartAddr": "401770",
            "funcEndAddr": "401775",
            "decompiledFuncCode": "int64_t function_401770(void) {\n    // 0x401770\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401775",
            "funcStartAddr": "401775",
            "funcEndAddr": "40177a",
            "decompiledFuncCode": "int64_t function_401775(void) {\n    // 0x401775\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40177a",
            "funcStartAddr": "40177a",
            "funcEndAddr": "40177f",
            "decompiledFuncCode": "int64_t function_40177a(void) {\n    // 0x40177a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40177f",
            "funcStartAddr": "40177f",
            "funcEndAddr": "401784",
            "decompiledFuncCode": "int64_t function_40177f(void) {\n    // 0x40177f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401784",
            "funcStartAddr": "401784",
            "funcEndAddr": "401789",
            "decompiledFuncCode": "int64_t function_401784(void) {\n    // 0x401784\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401789",
            "funcStartAddr": "401789",
            "funcEndAddr": "40178e",
            "decompiledFuncCode": "int64_t function_401789(void) {\n    // 0x401789\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401790",
            "funcStartAddr": "401790",
            "funcEndAddr": "401d99",
            "decompiledFuncCode": "int64_t function_401790(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 0x100000000 * a1;\n    int64_t v2 = v1 >> 32; // 0x40179c\n    function_402860(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_406720(0x402270, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v3; // 0x401790\n    while (true) {\n        // 0x4017e1\n        v3 = 0;\n        while (true) {\n          lab_0x4017e1:;\n            uint32_t v4 = (int32_t)function_405e60(v2 & 0xffffffff, a2, \"m:Z\", &g2, 0, a6);\n            switch (v4) {\n                case -1: {\n                    goto lab_0x401895;\n                }\n                case -130: {\n                    // 0x401ba0\n                    function_401e80(0);\n                    // UNREACHABLE\n                }\n                default: {\n                    if (v4 <= 0xffffff7e) {\n                        if (v4 == -131) {\n                            // 0x40184b\n                            function_404900((int64_t)g28, \"mknod\", \"GNU coreutils\", (int64_t)g17, \"David MacKenzie\", 0);\n                            exit(0);\n                            // UNREACHABLE\n                        }\n                        goto lab_0x401af9;\n                    }\n                    if (v4 != 90) {\n                        // break -> 0x401880\n                        break;\n                    }\n                    // 0x401813\n                    if (g45 != 0) {\n                        // 0x40181d\n                        error(0, (int32_t)\"warning: ignoring --context; it requires an SELinux/SMACK-enabled kernel\" ^ (int32_t)\"warning: ignoring --context; it requires an SELinux/SMACK-enabled kernel\", dcgettext(NULL, \"warning: ignoring --context; it requires an SELinux/SMACK-enabled kernel\", 5));\n                    }\n                    goto lab_0x4017e1;\n                }\n            }\n        }\n    }\n  lab_0x401895:;\n    int64_t mode = 438; // 0x401898\n    if (v3 == 0) {\n        goto lab_0x4018f0;\n    } else {\n        int64_t v5 = function_402310(v3); // 0x4018a1\n        if (v5 == 0) {\n            goto lab_0x401bc9;\n        } else {\n            uint32_t cmask = umask(0); // 0x4018b4\n            umask(cmask);\n            int64_t v6 = function_4026e0(438, 0, (int64_t)cmask, v5, 0); // 0x4018d3\n            free((int64_t *)v5);\n            mode = v6 & 0xffffffff;\n            if ((v6 & 0xfffffe00) != 0) {\n                // 0x401ba7\n                error(1, (int32_t)\"mode must specify only file permission bits\" ^ (int32_t)\"mode must specify only file permission bits\", dcgettext(NULL, \"mode must specify only file permission bits\", 5));\n                goto lab_0x401bc9;\n            } else {\n                goto lab_0x4018f0;\n            }\n        }\n    }\n  lab_0x4018f0:;\n    int32_t v7 = *(int32_t *)0x60a25c; // 0x4018f0\n    int64_t v8 = v7; // 0x4018f0\n    int32_t v9 = v2; // 0x4018f7\n    uint32_t v10 = v9 - v7; // 0x4018f9\n    int64_t v11; // 0x401790\n    char * format; // 0x401c3c\n    if (v2 > v8) {\n        if ((v8 + 1 & 0xffffffff) < v2) {\n            int64_t v12 = 8 * v8; // 0x401910\n            if (*(char *)*(int64_t *)(v12 + a2 + 8) == 112) {\n                // 0x401b82\n                if (v10 < 2) {\n                    goto lab_0x401d7d;\n                } else {\n                    if (v10 == 2) {\n                        goto lab_0x401935;\n                    } else {\n                        // 0x401b96\n                        v11 = a2 + 16 + v12;\n                        goto lab_0x401b1c;\n                    }\n                }\n            } else {\n                goto lab_0x40191e;\n            }\n        } else {\n            goto lab_0x40191e;\n        }\n    } else {\n        if (v10 < 2) {\n            // 0x401c30\n            format = dcgettext(NULL, \"missing operand\", 5);\n            error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", format);\n            // 0x401af9\n            function_401e80(1);\n            // UNREACHABLE\n        }\n        if (v10 == 2) {\n            goto lab_0x401935;\n        } else {\n            // 0x401b17\n            v11 = a2 + 16 + 8 * v8;\n            goto lab_0x401b1c;\n        }\n    }\n  lab_0x401bc9:\n    // 0x401bc9\n    error(1, (int32_t)\"invalid mode\" ^ (int32_t)\"invalid mode\", dcgettext(NULL, \"invalid mode\", 5));\n    int64_t v13 = a2; // 0x401be6\n    goto lab_0x401beb;\n  lab_0x40191e:;\n    int64_t v44; // 0x401790\n    if (v10 < 4) {\n        // 0x401c70\n        function_404480(*(int64_t *)(a2 - 8 + (v1 >> 29)));\n        error(0, (int32_t)\"missing operand after %s\" ^ (int32_t)\"missing operand after %s\", dcgettext(NULL, \"missing operand after %s\", 5));\n        v44 = (int64_t)\"Special files require major and minor device numbers.\";\n        if (v9 - g26 != 2) {\n            // 0x401af9\n            function_401e80(1);\n            // UNREACHABLE\n        }\n        goto lab_0x401b5b;\n    } else {\n        if (v10 != 4) {\n            // 0x401c54\n            function_404480(*(int64_t *)(a2 + 32 + 8 * v8));\n            // 0x401ae1\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"extra operand %s\", 5));\n          lab_0x401af9:\n            // 0x401af9\n            function_401e80(1);\n            // UNREACHABLE\n        }\n        goto lab_0x401935;\n    }\n  lab_0x401935:;\n    int64_t v15 = 8 * v8 + 8; // 0x401939\n    int64_t v45 = *(int64_t *)(v15 + a2); // 0x401939\n    char v46 = *(char *)v45; // 0x401945\n    char v33; // 0x401790\n    int64_t v31; // 0x401790\n    int64_t v35; // 0x401790\n    int64_t v39; // 0x401790\n    int64_t v36; // 0x401790\n    int64_t v37; // 0x401790\n    int64_t v34; // 0x401790\n    if (v46 == 99) {\n        goto lab_0x4019af;\n    } else {\n        // 0x40194c\n        v33 = v46;\n        v34 = v15;\n        v35 = a2;\n        v36 = v45;\n        if (v46 > 99) {\n            if (v46 != 112) {\n                // 0x4019a7\n                v37 = v45;\n                if (v46 != 117) {\n                    goto lab_0x401acf;\n                } else {\n                    goto lab_0x4019af;\n                }\n            } else {\n                // 0x401956\n                int64_t v47; // 0x401935\n                int64_t pathname = *(int64_t *)(v47 + a2); // 0x401956\n                v31 = a2;\n                v39 = a2;\n                int64_t mode2; // 0x401790\n                if (mkfifo((char *)pathname, (int32_t)mode2) != 0) {\n                    goto lab_0x401d48;\n                } else {\n                    goto lab_0x40196b;\n                }\n            }\n        } else {\n            goto lab_0x401ac1;\n        }\n    }\n  lab_0x401beb:\n    // 0x401beb\n    function_404230(4, *(int64_t *)(8 * (int64_t)g26 + v13));\n    error(1, *__errno_location(), dcgettext(NULL, \"cannot set permissions of %s\", 5));\n    // 0x401c30\n    format = dcgettext(NULL, \"missing operand\", 5);\n    error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", format);\n    // 0x401af9\n    function_401e80(1);\n    // UNREACHABLE\n  lab_0x4019af:;\n    int64_t v14 = v15; // 0x4019af\n    int64_t v16 = a2; // 0x4019af\n    int64_t v17 = 0x2000; // 0x4019af\n    goto lab_0x4019b5;\n  lab_0x401b1c:\n    // 0x401b1c\n    function_404480(*(int64_t *)v11);\n    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n    v44 = (int64_t)\"Fifos do not have major and minor device numbers.\";\n    if (v9 - g26 != 4) {\n        // 0x401af9\n        function_401e80(1);\n        // UNREACHABLE\n    }\n    goto lab_0x401b5b;\n  lab_0x401d7d:\n    // 0x401d7d\n    function_404480(*(int64_t *)(a2 - 8 + 8 * v2));\n    // 0x401ae1\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing operand after %s\", 5));\n    // 0x401af9\n    function_401e80(1);\n    // UNREACHABLE\n  lab_0x401b5b:\n    // 0x401b5b\n    __fprintf_chk(g30, 1, \"%s\\n\", dcgettext(NULL, (char *)v44, 5));\n    // 0x401af9\n    function_401e80(1);\n    // UNREACHABLE\n  lab_0x4019b5:;\n    int64_t v18 = v16 + v14;\n    int64_t v19 = *(int64_t *)(v18 + 8); // 0x4019b5\n    int64_t v20 = *(int64_t *)(v18 + 16); // 0x4019ba\n    int32_t v21; // bp-80, 0x401790\n    if ((int32_t)function_404cd0(v19, 0, 0, (int64_t *)&v21, 0, a6) != 0) {\n        goto lab_0x401cf0;\n    } else {\n        int32_t v22 = v21; // 0x4019db\n        if ((int64_t)v22 != (int64_t)v22) {\n            goto lab_0x401cf0;\n        } else {\n            // 0x4019eb\n            int32_t v23; // bp-72, 0x401790\n            if ((int32_t)function_404cd0(v20, 0, 0, (int64_t *)&v23, 0, a6) != 0) {\n                goto lab_0x401cc0;\n            } else {\n                uint64_t v24 = (int64_t)v23; // 0x401a07\n                if (v24 != (int64_t)v23) {\n                    goto lab_0x401cc0;\n                } else {\n                    int64_t v25 = 0x100000000 * (int64_t)v21; // 0x401a28\n                    int64_t v26 = v21 < 0xfffff001 ? v25 : v25 + 0xfffffffffff; // 0x401a30\n                    int64_t v27 = 0x1000 * v24 & 0xffffff00000 | v24 % 256 | (int64_t)(256 * v21 & 0xfff00) | v26; // 0x401a55\n                    if (v27 == -1) {\n                        goto lab_0x401d20;\n                    } else {\n                        int64_t v28 = v27; // bp-64, 0x401a70\n                        int64_t v29 = *(int64_t *)(8 * (int64_t)g26 + v16); // 0x401a75\n                        int32_t v30 = __xmknod(0, (char *)v29, (int32_t)(v17 | mode), (int32_t *)&v28); // 0x401a7f\n                        v31 = v16;\n                        if (v30 == 0) {\n                            goto lab_0x40196b;\n                        } else {\n                            int64_t v32 = function_404300(0, 3, *(int64_t *)(8 * (int64_t)g26 + v16)); // 0x401a9e\n                            error(1, *__errno_location(), \"%s\", (char *)v32);\n                            v33 = &g50;\n                            v34 = (int64_t)\"%s\";\n                            v35 = v32;\n                            v36 = 1;\n                            goto lab_0x401ac1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x401ac1:\n    // 0x401ac1\n    v14 = v34;\n    v16 = v35;\n    v17 = 0x6000;\n    v37 = v36;\n    if (v33 == 98) {\n        goto lab_0x4019b5;\n    } else {\n        goto lab_0x401acf;\n    }\n  lab_0x401cf0:\n    // 0x401cf0\n    function_404480(v19);\n    error(1, (int32_t)\"invalid major device number %s\" ^ (int32_t)\"invalid major device number %s\", dcgettext(NULL, \"invalid major device number %s\", 5));\n    goto lab_0x401d20;\n  lab_0x401acf:\n    // 0x401acf\n    function_404480(v37);\n    // 0x401ae1\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"invalid device type %s\", 5));\n    // 0x401af9\n    function_401e80(1);\n    // UNREACHABLE\n  lab_0x401d20:\n    // 0x401d20\n    error(1, (int32_t)\"invalid device %s %s\" ^ (int32_t)\"invalid device %s %s\", dcgettext(NULL, \"invalid device %s %s\", 5));\n    goto lab_0x401d48;\n  lab_0x401d48:;\n    int64_t v38 = v39;\n    int32_t v40 = g26; // 0x401d48\n    int64_t v41 = *(int64_t *)(8 * (int64_t)v40 + v38); // 0x401d56\n    int64_t v42 = function_404300(0, 3, v41); // 0x401d5a\n    int32_t * v43 = __errno_location(); // 0x401d62\n    int32_t err_num = *v43; // 0x401d74\n    error(1, err_num, \"%s\", (char *)v42);\n    goto lab_0x401d7d;\n  lab_0x40196b:\n    if (v3 == 0) {\n        // 0x40198b\n        return 0;\n    }\n    int64_t path = *(int64_t *)(8 * (int64_t)g26 + v31); // 0x40197a\n    v13 = v31;\n    if (chmod((char *)path, (int32_t)mode) == 0) {\n        // 0x40198b\n        return 0;\n    }\n    goto lab_0x401beb;\n  lab_0x401cc0:\n    // 0x401cc0\n    function_404480(v20);\n    error(1, (int32_t)\"invalid minor device number %s\" ^ (int32_t)\"invalid minor device number %s\", dcgettext(NULL, \"invalid minor device number %s\", 5));\n    goto lab_0x401cf0;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401da0",
            "funcEndAddr": "401dcb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401da0\n    int64_t v1; // 0x401da0\n    __libc_start_main(0x401790, (int32_t)a4, (char **)&v1, (void (*)())0x4066b0, (void (*)())0x406710, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dcb",
            "funcStartAddr": "401dcb",
            "funcEndAddr": "401dea",
            "decompiledFuncCode": "int64_t function_401dcb(void) {\n    // 0x401dcb\n    return &g27;\n}\n"
        },
        {
            "funcName": "function_401dea",
            "funcStartAddr": "401dea",
            "funcEndAddr": "401e21",
            "decompiledFuncCode": "int64_t function_401dea(void) {\n    // 0x401dea\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401e21",
            "funcStartAddr": "401e21",
            "funcEndAddr": "401e78",
            "decompiledFuncCode": "int64_t function_401e21(void) {\n    // 0x401e21\n    if (g31 != 0) {\n        // 0x401e77\n        int64_t result; // 0x401e21\n        return result;\n    }\n    int64_t v1 = g32; // 0x401e54\n    int64_t result2; // 0x401e66\n    if (g32 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401e66\n        result2 = function_401dcb();\n        g31 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401e56\n        v1++;\n    }\n    // 0x401e4a\n    g32 = v1;\n    // 0x401e66\n    result2 = function_401dcb();\n    g31 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401e78",
            "funcStartAddr": "401e78",
            "funcEndAddr": "401e7d",
            "decompiledFuncCode": "int64_t function_401e78(void) {\n    // 0x401e78\n    return function_401dea();\n}\n"
        },
        {
            "funcName": "function_401e80",
            "funcStartAddr": "401e80",
            "funcEndAddr": "402245",
            "decompiledFuncCode": "int64_t function_401e80(int64_t a1) {\n    int32_t status = a1; // 0x401e96\n    if (status != 0) {\n        // 0x401e9a\n        __fprintf_chk(g30, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401ebf\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401ec6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... NAME TYPE [MAJOR MINOR]\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Create the special file NAME of the given TYPE.\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"  -m, --mode=MODE    set file permission bits to MODE, not a=rw - umask\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"  -Z                   set the SELinux security context to default type\\n      --context[=CTX]  like -Z, or if CTX is specified then set the SELinux\\n                         or SMACK security context to CTX\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\nBoth MAJOR and MINOR must be specified when TYPE is b, c, or u, and they\\nmust be omitted when TYPE is p.  If MAJOR or MINOR begins with 0x or 0X,\\nit is interpreted as hexadecimal; otherwise, if it begins with 0, as octal;\\notherwise, as decimal.  TYPE may be:\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\n  b      create a block (buffered) special file\\n  c, u   create a character (unbuffered) special file\\n  p      create a FIFO\\n\", 5), g28);\n    __printf_chk(1, dcgettext(NULL, \"\\nNOTE: your shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x402021\n    bool v2; // 0x401e80\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4020a8\n    int64_t v6 = *(int64_t *)v5; // 0x4020ac\n    int64_t v7 = 6; // 0x4020b2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"mknod\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4020be\n        char v11 = *(char *)v9; // 0x4020be\n        char v12 = v11; // 0x4020be\n        bool v13 = false; // 0x4020be\n        while (v10 == v11) {\n            // 0x4020b4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4020be\n            int64_t v15 = v8 + v3; // 0x4020be\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4020ca\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x4020ca\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4021dc;\n        } else {\n            // 0x4021c6\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40221b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40212c;\n            } else {\n                goto lab_0x4021dc;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40212c;\n        } else {\n            // 0x402112\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40221b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40212c;\n            } else {\n                goto lab_0x40212c;\n            }\n        }\n    }\n  lab_0x4021dc:\n    // 0x4021dc\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40216c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401ebf\n    exit(status);\n    // UNREACHABLE\n  lab_0x40212c:\n    // 0x40212c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40216c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401ebf\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402250",
            "funcStartAddr": "402250",
            "funcEndAddr": "402258",
            "decompiledFuncCode": "int64_t function_402250(int64_t a1) {\n    // 0x402250\n    g34 = a1;\n    int64_t result; // 0x402250\n    return result;\n}\n"
        },
        {
            "funcName": "function_402260",
            "funcStartAddr": "402260",
            "funcEndAddr": "402268",
            "decompiledFuncCode": "int64_t function_402260(int64_t a1) {\n    // 0x402260\n    g33 = a1;\n    int64_t result; // 0x402260\n    return result;\n}\n"
        },
        {
            "funcName": "function_402270",
            "funcStartAddr": "402270",
            "funcEndAddr": "40230e",
            "decompiledFuncCode": "int64_t function_402270(void) {\n    // 0x402270\n    int32_t * err_num; // 0x402286\n    if ((int32_t)function_405f60((int64_t)g28) == 0) {\n        goto lab_0x40229c;\n    } else {\n        // 0x402286\n        err_num = __errno_location();\n        if (g33 == 0) {\n            goto lab_0x4022b3;\n        } else {\n            // 0x402297\n            if (*err_num != 32) {\n                goto lab_0x4022b3;\n            } else {\n                goto lab_0x40229c;\n            }\n        }\n    }\n  lab_0x40229c:;\n    int64_t result = function_405f60((int64_t)g30); // 0x4022a3\n    if ((int32_t)result == 0) {\n        // 0x4022ac\n        return result;\n    }\n    // 0x4022ee\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x4022b3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4022bf\n    if (g34 == 0) {\n        // 0x4022f9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4022d3\n        error(0, *err_num, \"%s: %s\", (char *)function_4042d0((int64_t)g34), v1);\n    }\n    // 0x4022ee\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402310",
            "funcStartAddr": "402310",
            "funcEndAddr": "402671",
            "decompiledFuncCode": "int64_t function_402310(int64_t a1) {\n    // 0x402310\n    int64_t v1; // 0x402310\n    char v2 = v1;\n    int64_t v3 = 0x100000000000000 * v1 >> 56; // 0x40231c\n    int64_t v4 = a1; // 0x402324\n    if ((v2 & -8) == 48) {\n        int64_t v5 = 0xffffffd0 + v3; // 0x4023e6\n        uint32_t v6 = (int32_t)v5;\n        while (v6 < 0x1000) {\n            // 0x4023d8\n            v4++;\n            char v7 = *(char *)v4; // 0x4023d8\n            if ((v7 & -8) != 48) {\n                // 0x4025e0\n                if (v7 == 0) {\n                    int64_t v8 = v4 - a1; // 0x4025ea\n                    int32_t v9 = v8 < 5 == (4 - v8 & v8) < 0 ? 4095 : v6 & 3072 | 1023; // 0x402609\n                    int64_t result = function_404a40(32); // 0x40260c\n                    *(int16_t *)result = 317;\n                    *(int32_t *)(result + 4) = 4095;\n                    *(int32_t *)(result + 8) = v6;\n                    *(int32_t *)(result + 12) = v9;\n                    *(char *)(result + 17) = 0;\n                    return result;\n                }\n                return 0;\n            }\n            v5 = (int64_t)v7 + 0xffffffd0 + 8 * (v5 & 0xffffffff);\n            v6 = (int32_t)v5;\n        }\n      lab_0x4023c5:\n        // 0x4023c5\n        return 0;\n    }\n    int64_t v10 = 1; // 0x402331\n    int64_t v11 = a1; // 0x402331\n    int64_t v12; // 0x402310\n    if (v2 == 0) {\n        // 0x402638\n        v12 = 16;\n    } else {\n        int64_t v13 = v3;\n        v11++;\n        unsigned char v14 = *(char *)v11; // 0x402356\n        v10 += (int64_t)((v13 & 239) == 45 | (char)v13 == 43);\n        while (v14 != 0) {\n            // 0x402340\n            v13 = v14;\n            v11++;\n            v14 = *(char *)v11;\n            v10 += (int64_t)((v13 & 239) == 45 | (char)v13 == 43);\n        }\n        int64_t v15 = 16 * v10; // 0x40236d\n        if (v15 < 0) {\n            // 0x40266c\n            function_404c90(v15);\n            // UNREACHABLE\n        }\n        // 0x40237a\n        v12 = v15;\n        if (v10 >= 0x1000000000000000) {\n            // 0x40266c\n            function_404c90(v15);\n            // UNREACHABLE\n        }\n    }\n    int64_t v16 = function_404a40(v12); // 0x402383\n    int64_t v17; // 0x402310\n    int64_t v18; // 0x402310\n    int64_t v19; // 0x402310\n    int64_t v20; // 0x402310\n    int64_t v21; // 0x402310\n    int64_t v22; // 0x402310\n    int64_t v23; // 0x402310\n    int64_t v24; // 0x402310\n    int64_t v25; // 0x402310\n    int64_t v26; // 0x402310\n    int64_t v27; // 0x402310\n    int64_t v28; // 0x402310\n    int64_t v29; // 0x402310\n    int64_t v30; // 0x402310\n    int64_t v31; // 0x402310\n    int64_t v32; // 0x402310\n    int64_t v33; // 0x402473\n    int64_t v34; // 0x402473\n    char v35; // 0x402310\n    while (true) {\n        int64_t v36 = 0;\n        v32 = 0;\n        v18 = 0;\n        v26 = a1;\n        unsigned char v37; // 0x40238d\n        while (true) {\n          lab_0x40238d:\n            // 0x40238d\n            v27 = v26;\n            v37 = *(char *)v27;\n            if (v37 == 97) {\n                // 0x4025a0\n                v32 = 4095;\n                v19 = 4095;\n                goto lab_0x4025a5;\n            } else {\n                if (v37 <= 97) {\n                    // break -> 0x402400\n                    break;\n                }\n                int64_t v38 = v18; // 0x4025d0\n                switch (v37) {\n                    case 111: {\n                        int64_t v39 = v38 & 0xfffffdf8 | 519; // 0x4025d0\n                        v32 = v39;\n                        v19 = v39;\n                        goto lab_0x4025a5;\n                    }\n                    case 117: {\n                        int64_t v40 = v38 & 0xfffff63f | 2496; // 0x4025c0\n                        v32 = v40;\n                        v19 = v40;\n                        goto lab_0x4025a5;\n                    }\n                    case 103: {\n                        int64_t v41 = v38 & 0xfffffbc7 | 1080; // 0x4025b0\n                        v32 = v41;\n                        v19 = v41;\n                        goto lab_0x4025a5;\n                    }\n                    default: {\n                        goto lab_0x4023bb_3;\n                    }\n                }\n            }\n        }\n        switch (v37) {\n            default: {\n                if (v37 != 43) {\n                    // break -> 0x4023bb\n                    break;\n                }\n            }\n            case 45: {\n            }\n            case 61: {\n                // 0x402412\n                v29 = v27;\n                v24 = v37;\n                v20 = 16 * v36 + v16;\n                v22 = v36;\n                // break -> 0x402473\n                break;\n            }\n        }\n        while (true) {\n          lab_0x402473:\n            // 0x402473\n            v21 = v20;\n            v25 = v24;\n            int64_t v42 = v29;\n            v33 = v42 + 1;\n            char v43 = *(char *)v33; // 0x402473\n            if (v43 == 103) {\n                // 0x402590\n                v17 = v42 + 2;\n                v30 = 56;\n                goto lab_0x40242e;\n            } else {\n                // 0x402484\n                v34 = v43;\n                if (v43 > 103) {\n                    int64_t v44 = v42 + 2;\n                    v17 = v44;\n                    v30 = 7;\n                    if (v43 != 111) {\n                        // 0x402420\n                        v17 = v44;\n                        v30 = 448;\n                        if (v43 != 117) {\n                            goto lab_0x402510;\n                        } else {\n                            goto lab_0x40242e;\n                        }\n                    } else {\n                        goto lab_0x40242e;\n                    }\n                } else {\n                    int64_t v45 = v34; // 0x4024a6\n                    int64_t v46 = v33; // 0x4024a6\n                    if ((v43 & -8) == 48) {\n                        int64_t v47 = 0xffffffd0 + v45; // 0x4024aa\n                        uint32_t v48 = (int32_t)v47;\n                        if (v48 >= 0x1000) {\n                            // break (via goto) -> 0x4023bb\n                            goto lab_0x4023bb_3;\n                        }\n                        int64_t v49 = v46 + 1; // 0x4024ae\n                        char v50 = *(char *)v49; // 0x4024be\n                        int64_t v51 = v50; // 0x4024be\n                        int64_t v52 = v47 & 0xffffffff; // 0x4024c9\n                        v46 = v49;\n                        while ((v50 & -8) == 48) {\n                            // 0x4024aa\n                            v47 = v51 + 0xffffffd0 + 8 * v52;\n                            v48 = (int32_t)v47;\n                            if (v48 >= 0x1000) {\n                                // break (via goto) -> 0x4023bb\n                                goto lab_0x4023bb_3;\n                            }\n                            // 0x4024be\n                            v49 = v46 + 1;\n                            v50 = *(char *)v49;\n                            v51 = v50;\n                            v52 = v47 & 0xffffffff;\n                            v46 = v49;\n                        }\n                        // 0x4024cb\n                        if ((int32_t)v32 != 0) {\n                            // break (via goto) -> 0x4023bb\n                            goto lab_0x4023bb_3;\n                        }\n                        if (v50 != 0 == (v50 != 44)) {\n                            // break (via goto) -> 0x4023bb\n                            goto lab_0x4023bb_3;\n                        }\n                        // 0x4024e0\n                        *(char *)v21 = (char)v25;\n                        v32 = 4095;\n                        *(int32_t *)(v21 + 8) = v48;\n                        *(char *)(v21 + 1) = 1;\n                        *(int32_t *)(v21 + 4) = 4095;\n                        v31 = 4095;\n                        v28 = v49;\n                        v23 = v51 & 0xffffffff;\n                        goto lab_0x40244f;\n                    } else {\n                        goto lab_0x402510;\n                    }\n                }\n            }\n        }\n      lab_0x402642:\n        // 0x402642\n        if (v35 != 44) {\n            if (v35 != 0) {\n                goto lab_0x4023bb_3;\n            } else {\n                // 0x40265d\n                int64_t v53; // 0x402310\n                *(char *)(v16 + 1 + 16 * v53) = 0;\n                return 0;\n            }\n        }\n    }\n  lab_0x4023bb_3:\n    // 0x4023bb\n    free((int64_t *)v16);\n    // 0x4023c5\n    return (int32_t)&g50 ^ (int32_t)&g50;\n  lab_0x402538:;\n    // 0x402538\n    int64_t v54; // 0x402310\n    int64_t v55 = v54 + 1; // 0x402538\n    int64_t v56 = (int64_t)*(char *)v55; // 0x40253c\n    int64_t v57 = v56 + 0xffffffa8; // 0x402540\n    int64_t v58; // 0x402310\n    int64_t v59 = v58; // 0x402547\n    int64_t v60 = v56; // 0x402547\n    int64_t v61; // 0x402310\n    int64_t v62 = v61; // 0x402547\n    int64_t v63 = v57; // 0x402547\n    int64_t v64 = v55; // 0x402547\n    if ((char)v57 >= 33) {\n        // break -> 0x402549\n        goto lab_0x402549_2;\n    }\n    goto lab_0x402520;\n  lab_0x40242e:\n    // 0x40242e\n    *(char *)(v21 + 1) = 3;\n    *(int32_t *)(v21 + 4) = (int32_t)v32;\n    *(int32_t *)(v21 + 8) = (int32_t)v30;\n    *(char *)v21 = (char)v25;\n    int64_t v72 = v30; // 0x402443\n    int64_t v73 = v17; // 0x402443\n    int64_t v74 = (int64_t)*(char *)v17; // 0x402443\n    goto lab_0x402446;\n  lab_0x402446:;\n    int64_t v75 = v32;\n    v31 = v72 & 0xffffffff & ((int32_t)v75 != 0 ? v75 : 0xffffffff);\n    v28 = v73;\n    v23 = v74;\n    goto lab_0x40244f;\n  lab_0x402510:\n    // 0x402510\n    v59 = 0;\n    v60 = v34;\n    v62 = 1;\n    v63 = v34 + 0xffffffa8;\n    v64 = v33;\n    int64_t v70; // 0x402310\n    int64_t v69; // 0x402310\n    int64_t v67; // 0x402310\n    int64_t v68; // 0x402310\n    while (true) {\n      lab_0x402520:\n        // 0x402520\n        v54 = v64;\n        int64_t v65 = v62;\n        int64_t v66 = v59;\n        g46 = v63 % 256;\n        v58 = v66;\n        v61 = 2;\n        v67 = v66;\n        v68 = v60;\n        v69 = v65;\n        v70 = v54;\n        uint64_t v71; // 0x402310\n        switch ((char)v71) {\n            case 0: {\n                goto lab_0x402538;\n            }\n            case 26: {\n                // 0x402588\n                v58 = v66 & 0xfffffedb | 292;\n                v61 = v65;\n                goto lab_0x402538;\n            }\n            case 27: {\n                // 0x402580\n                v58 = v66 | 3072;\n                v61 = v65;\n                goto lab_0x402538;\n            }\n            case 28: {\n                // 0x402578\n                v58 = v66 | 512;\n                v61 = v65;\n                goto lab_0x402538;\n            }\n            case 31: {\n                // 0x402570\n                v58 = v66 | 146;\n                v61 = v65;\n                goto lab_0x402538;\n            }\n            case 32: {\n                // 0x402568\n                v58 = v66 & 0xffffffb6 | 73;\n                v61 = v65;\n                goto lab_0x402538;\n            }\n            default: {\n                goto lab_0x402549_2;\n            }\n        }\n    }\n  lab_0x402549_2:\n    // 0x402549\n    *(char *)v21 = (char)v25;\n    *(char *)(v21 + 1) = (char)v69;\n    *(int32_t *)(v21 + 4) = (int32_t)v32;\n    *(int32_t *)(v21 + 8) = (int32_t)v67;\n    v72 = v67;\n    v73 = v70;\n    v74 = v68 & 0xffffffff;\n    goto lab_0x402446;\n  lab_0x40244f:\n    // 0x40244f\n    *(int32_t *)(v21 + 12) = (int32_t)v31;\n    if ((v23 & 239) != 45) {\n        // 0x402466\n        int64_t v76; // 0x402310\n        v35 = v76;\n        if (v35 != 43) {\n            // break -> 0x402642\n            goto lab_0x402642;\n        }\n    }\n    // 0x402470\n    v29 = v28;\n    v24 = v23;\n    v20 = v21 + 16;\n    v22++;\n    goto lab_0x402473;\n  lab_0x4025a5:\n    // 0x4025a5\n    v18 = v19;\n    v26 = v27 + 1;\n    goto lab_0x40238d;\n}\n"
        },
        {
            "funcName": "function_402680",
            "funcStartAddr": "402680",
            "funcEndAddr": "4026d4",
            "decompiledFuncCode": "int64_t function_402680(int64_t a1) {\n    // 0x402680\n    int64_t v1; // bp-152, 0x402680\n    int32_t v2 = __xstat(1, (char *)a1, (struct stat *)&v1); // 0x402693\n    int64_t result = 0; // 0x40269e\n    if (v2 == 0) {\n        // 0x4026a0\n        result = function_404a40(32);\n        *(int16_t *)result = 317;\n        *(int32_t *)(result + 4) = 4095;\n        *(int32_t *)(result + 12) = 4095;\n        *(char *)(result + 17) = 0;\n    }\n    // 0x4026cb\n    return result;\n}\n"
        },
        {
            "funcName": "function_4026e0",
            "funcStartAddr": "4026e0",
            "funcEndAddr": "40285d",
            "decompiledFuncCode": "int64_t function_4026e0(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int32_t a5) {\n    char v1 = *(char *)(a4 + 1); // 0x4026e0\n    int64_t v2 = a1 % 0x1000; // 0x4026e9\n    int64_t result = v2; // 0x4026f7\n    int64_t v3 = 0; // 0x4026f7\n    int64_t v4; // 0x4026e0\n    int64_t v5; // 0x4026e0\n    int64_t v6; // 0x4026e0\n    char v7; // 0x4026e0\n    char v8; // 0x4026e0\n    int64_t v9; // 0x4026e0\n    int64_t v10; // 0x4026e0\n    int64_t v11; // 0x4026e0\n    int64_t v12; // 0x4026e0\n    int64_t v13; // 0x4026e0\n    int64_t v14; // 0x4026e0\n    int64_t v15; // 0x4026e0\n    int64_t v16; // 0x4026e0\n    int64_t v17; // 0x4026e0\n    int64_t v18; // 0x4026e0\n    uint32_t v19; // 0x40279b\n    int64_t v20; // 0x40279f\n    if (v1 != 0) {\n        // 0x4026fd\n        v10 = v2;\n        v14 = a4;\n        v12 = 0;\n        v7 = v1;\n        while (true) {\n          lab_0x40279b_2:\n            // 0x40279b\n            v8 = v7;\n            v13 = v12;\n            v15 = v14;\n            v11 = v10;\n            v19 = *(int32_t *)(v15 + 4);\n            v20 = (int64_t)*(int32_t *)(v15 + 8);\n            if ((char)a2 == 0) {\n                // 0x402710\n                v16 = 0;\n                v4 = 0xffffffff;\n                if (v8 == 2) {\n                    // 0x402850\n                    v17 = 0;\n                    v9 = v20;\n                    v5 = 0xffffffff;\n                    v18 = 0;\n                    v6 = 0xffffffff;\n                    if ((v11 & 73) == 0) {\n                        goto lab_0x402764;\n                    } else {\n                        goto lab_0x4027cc;\n                    }\n                } else {\n                    goto lab_0x40271f;\n                }\n            } else {\n                int32_t v21 = *(int32_t *)(v15 + 12); // 0x4027ac\n                int64_t v22 = v21 | -3073; // 0x4027b3\n                int64_t v23 = v21 & 3072 ^ 3072; // 0x4027bc\n                v16 = v23;\n                v4 = v22;\n                v18 = v23;\n                v6 = v22;\n                if (v8 != 2) {\n                    goto lab_0x40271f;\n                } else {\n                    goto lab_0x4027cc;\n                }\n            }\n        }\n    }\n  lab_0x402818_2:\n    // 0x402818\n    if (a5 != 0) {\n        // 0x40281d\n        *(int32_t *)(int64_t)a5 = (int32_t)v3;\n    }\n    // 0x402820\n    return result;\n  lab_0x40271f:;\n    int64_t v24 = v4;\n    int64_t v25 = v16;\n    v17 = v25;\n    v9 = v20;\n    v5 = v24;\n    if (v8 == 3) {\n        int64_t v26 = v11 & v20;\n        int64_t v27 = v26 & 292; // 0x40272b\n        int64_t v28 = (v27 | (int64_t)(v27 == 0)) + (v27 ^ 511) & 292;\n        int64_t v29 = (v26 & 146) != 0 ? v28 | 146 : v28; // 0x40274e\n        v17 = v25;\n        v9 = ((v26 & 73) != 0 ? v29 | 73 : v29) | v26;\n        v5 = v24;\n    }\n    goto lab_0x402764;\n  lab_0x4027cc:;\n    int64_t v60 = (int64_t)*(char *)v15; // 0x4027d0\n    int64_t v61 = v6 & (v20 | 73); // 0x4027d4\n    int64_t v32 = v18; // 0x4027da\n    int64_t v33 = v61; // 0x4027da\n    int64_t v34 = v6; // 0x4027da\n    int64_t v35 = v60; // 0x4027da\n    int64_t v36 = v18; // 0x4027da\n    int64_t v37 = v61; // 0x4027da\n    int64_t v38 = v60; // 0x4027da\n    if (v19 == 0) {\n        goto lab_0x402770;\n    } else {\n        goto lab_0x4027e0;\n    }\n  lab_0x402764:;\n    int64_t v30 = (int64_t)*(char *)v15; // 0x402764\n    int64_t v31 = v9 & 0xffffffff & v5; // 0x402768\n    v32 = v17;\n    v33 = v31;\n    v34 = v5;\n    v35 = v30;\n    v36 = v17;\n    v37 = v31;\n    v38 = v30;\n    if (v19 != 0) {\n        goto lab_0x4027e0;\n    } else {\n        goto lab_0x402770;\n    }\n  lab_0x402770:;\n    int64_t v39 = v33 & (a3 & 0xffffffff ^ 0xffffffff);\n    int64_t v40 = v39; // 0x4026e0\n    int64_t v41 = v35; // 0x4026e0\n    int64_t v42 = v32; // 0x4026e0\n    int64_t v43 = v39; // 0x4026e0\n    int64_t v44 = v34; // 0x4026e0\n    int64_t v45 = v39; // 0x4026e0\n    int64_t v46; // 0x4026e0\n    switch ((char)v46) {\n        case 45: {\n            goto lab_0x402830;\n        }\n        case 61: {\n            goto lab_0x4027fb;\n        }\n        default: {\n            goto lab_0x402783;\n        }\n    }\n  lab_0x4027e0:;\n    int64_t v47 = v19; // 0x40279b\n    int64_t v48 = v37 & v47;\n    char v49 = v38; // 0x4027e3\n    v45 = v48;\n    if (v49 == 45) {\n        goto lab_0x402830;\n    } else {\n        // 0x4027e9\n        if (v49 != 61) {\n            goto lab_0x402783;\n        } else {\n            int64_t v50 = v36 & 0xffffffff | v47 ^ 0xffffffff; // 0x4027f2\n            v42 = v50;\n            v43 = v48;\n            v44 = v50 ^ 0xffffffff;\n            goto lab_0x4027fb;\n        }\n    }\n  lab_0x402830:;\n    int64_t v51 = v11 & 0xffffffff & (v45 ^ 0xffffffff); // 0x402839\n    int64_t v52 = (v45 | v13) & 0xffffffff; // 0x402839\n    goto lab_0x40278d;\n  lab_0x4027fb:;\n    char v57 = *(char *)(v15 + 17); // 0x4027ff\n    int64_t v58 = v44 % 0x1000 | v13 & 0xffffffff; // 0x40280d\n    int64_t v59 = (v42 & v11 | v43) & 0xffffffff; // 0x402810\n    int64_t v54 = v59; // 0x402816\n    int64_t v55 = v58; // 0x402816\n    char v56 = v57; // 0x402816\n    result = v59;\n    v3 = v58;\n    if (v57 == 0) {\n        // break -> 0x402818\n        goto lab_0x402818_2;\n    }\n    goto lab_0x40279b;\n  lab_0x402783:\n    // 0x402783\n    v51 = v11;\n    v52 = v13;\n    if ((char)v41 == 43) {\n        // 0x402840\n        v51 = (v40 | v11) & 0xffffffff;\n        v52 = (v40 | v13) & 0xffffffff;\n    }\n    goto lab_0x40278d;\n  lab_0x40278d:;\n    char v53 = *(char *)(v15 + 17); // 0x402791\n    v54 = v51;\n    v55 = v52;\n    v56 = v53;\n    result = v51;\n    v3 = v52;\n    if (v53 == 0) {\n        // break -> 0x402818\n        goto lab_0x402818_2;\n    }\n    goto lab_0x40279b;\n  lab_0x40279b:\n    // 0x40279b\n    v10 = v54;\n    v14 = v15 + 16;\n    v12 = v55;\n    v7 = v56;\n    goto lab_0x40279b_2;\n}\n"
        },
        {
            "funcName": "function_402860",
            "funcStartAddr": "402860",
            "funcEndAddr": "4028f9",
            "decompiledFuncCode": "int64_t function_402860(int64_t str) {\n    // 0x402860\n    if (str == 0) {\n        // 0x4028d9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g30);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40286e\n    int64_t result = (int64_t)found_char_pos; // 0x40286e\n    if (found_char_pos == NULL) {\n        // 0x4028c9\n        g35 = str;\n        g29 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402878\n    if (v1 - str < 7) {\n        // 0x4028c9\n        g35 = str;\n        g29 = str;\n        return result;\n    }\n    // 0x402888\n    bool v2; // 0x402860\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402860\n    int64_t v5 = result - 6; // 0x402860\n    int64_t v6 = 7; // 0x402896\n    unsigned char v7 = *(char *)v5; // 0x402896\n    char v8 = *(char *)v4; // 0x402896\n    char v9 = v8; // 0x402896\n    bool v10 = false; // 0x402896\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4028a0\n    int64_t v13 = v1; // 0x4028a0\n    int64_t v14 = 3; // 0x4028a0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4028c9\n        g35 = str;\n        g29 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4028b2\n    char v16 = *(char *)v12; // 0x4028b2\n    char v17 = v16; // 0x4028b2\n    bool v18 = false; // 0x4028b2\n    while (v15 == v16) {\n        // 0x4028a2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4028bc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4028be\n        v20 = result + 4;\n        g27 = v20;\n    }\n    // 0x4028c9\n    g35 = v20;\n    g29 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402900",
            "funcStartAddr": "402900",
            "funcEndAddr": "4029f2",
            "decompiledFuncCode": "int64_t function_402900(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402914\n    int64_t result = (int64_t)v1; // 0x402914\n    if (result != a1) {\n        // 0x402921\n        return result;\n    }\n    int64_t v2 = function_406020(); // 0x402930\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4029e6\n    if (v3 == 85) {\n        // 0x402940\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4029d8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x40296e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x40297b\n        // 0x402921\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4029d8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x4029bd\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x4029ca\n    // 0x402921\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402a00",
            "funcStartAddr": "402a00",
            "funcEndAddr": "402a57",
            "decompiledFuncCode": "int64_t function_402a00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402a00\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402a48\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402a57",
            "funcStartAddr": "402a57",
            "funcEndAddr": "403c21",
            "decompiledFuncCode": "int64_t function_402a57(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402aa1\n    int64_t v3 = 0; // 0x402aa1\n    int64_t v4; // 0x402a57\n    int64_t v5; // 0x402a57\n    int64_t v6; // 0x402a57\n    int64_t v7; // 0x402a57\n    int64_t v8; // 0x402a57\n    int64_t v9; // 0x402a57\n    int64_t v10; // 0x402a57\n    int64_t v11; // 0x402a57\n    int64_t v12; // 0x402a57\n    int64_t v13; // 0x402a57\n    int64_t v14; // 0x402a57\n    int64_t v15; // 0x402a57\n    int64_t v16; // 0x402a57\n    int64_t v17; // 0x402a57\n    int64_t v18; // 0x402a57\n    int64_t result; // 0x402a57\n    int64_t v19; // 0x402a57\n    int32_t wc; // bp+132, 0x402a57\n    int64_t ps; // bp+136, 0x402a57\n    char v20; // 0x403010\n    int64_t v21; // 0x403010\n    int64_t v22; // 0x4033b8\n    int64_t v23; // 0x402a57\n    int64_t v24; // 0x4033d7\n    int32_t v25; // 0x402a57\n    while (true) {\n      lab_0x402aa8_2:\n        // 0x402aa8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402a57\n        int64_t v27; // 0x402adc\n        while (true) {\n          lab_0x402aa8:\n            // 0x402aa8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402ab3\n            if (v15 == -1) {\n                // 0x402ab5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402ac3\n            if (v28) {\n                // break (via goto) -> 0x403228\n                goto lab_0x403228;\n            }\n            // 0x402acc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g49 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4030bb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402c01;\n                    }\n                    // 0x4034dd\n                    v26 = v5 + 1;\n                    goto lab_0x402aa8;\n                }\n                case 7: {\n                    goto lab_0x402c01;\n                }\n                case 8: {\n                    goto lab_0x402c01;\n                }\n                case 9: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402c01;\n                }\n                case 12: {\n                    goto lab_0x402c01;\n                }\n                case 13: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x402bcd;\n                }\n                case 36: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402c01;\n                }\n                case 38: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402c01;\n                }\n                case 44: {\n                    goto lab_0x402c01;\n                }\n                case 45: {\n                    goto lab_0x402c01;\n                }\n                case 46: {\n                    goto lab_0x402c01;\n                }\n                case 47: {\n                    goto lab_0x402c01;\n                }\n                case 48: {\n                    goto lab_0x402c01;\n                }\n                case 49: {\n                    goto lab_0x402c01;\n                }\n                case 50: {\n                    goto lab_0x402c01;\n                }\n                case 51: {\n                    goto lab_0x402c01;\n                }\n                case 52: {\n                    goto lab_0x402c01;\n                }\n                case 53: {\n                    goto lab_0x402c01;\n                }\n                case 54: {\n                    goto lab_0x402c01;\n                }\n                case 55: {\n                    goto lab_0x402c01;\n                }\n                case 56: {\n                    goto lab_0x402c01;\n                }\n                case 57: {\n                    goto lab_0x402c01;\n                }\n                case 58: {\n                    goto lab_0x402c01;\n                }\n                case 59: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402c01;\n                }\n                case 66: {\n                    goto lab_0x402c01;\n                }\n                case 67: {\n                    goto lab_0x402c01;\n                }\n                case 68: {\n                    goto lab_0x402c01;\n                }\n                case 69: {\n                    goto lab_0x402c01;\n                }\n                case 70: {\n                    goto lab_0x402c01;\n                }\n                case 71: {\n                    goto lab_0x402c01;\n                }\n                case 72: {\n                    goto lab_0x402c01;\n                }\n                case 73: {\n                    goto lab_0x402c01;\n                }\n                case 74: {\n                    goto lab_0x402c01;\n                }\n                case 75: {\n                    goto lab_0x402c01;\n                }\n                case 76: {\n                    goto lab_0x402c01;\n                }\n                case 77: {\n                    goto lab_0x402c01;\n                }\n                case 78: {\n                    goto lab_0x402c01;\n                }\n                case 79: {\n                    goto lab_0x402c01;\n                }\n                case 80: {\n                    goto lab_0x402c01;\n                }\n                case 81: {\n                    goto lab_0x402c01;\n                }\n                case 82: {\n                    goto lab_0x402c01;\n                }\n                case 83: {\n                    goto lab_0x402c01;\n                }\n                case 84: {\n                    goto lab_0x402c01;\n                }\n                case 85: {\n                    goto lab_0x402c01;\n                }\n                case 86: {\n                    goto lab_0x402c01;\n                }\n                case 87: {\n                    goto lab_0x402c01;\n                }\n                case 88: {\n                    goto lab_0x402c01;\n                }\n                case 89: {\n                    goto lab_0x402c01;\n                }\n                case 90: {\n                    goto lab_0x402c01;\n                }\n                case 91: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402c01;\n                }\n                case 94: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402c01;\n                }\n                case 96: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402c01;\n                }\n                case 98: {\n                    goto lab_0x402c01;\n                }\n                case 99: {\n                    goto lab_0x402c01;\n                }\n                case 100: {\n                    goto lab_0x402c01;\n                }\n                case 101: {\n                    goto lab_0x402c01;\n                }\n                case 102: {\n                    goto lab_0x402c01;\n                }\n                case 103: {\n                    goto lab_0x402c01;\n                }\n                case 104: {\n                    goto lab_0x402c01;\n                }\n                case 105: {\n                    goto lab_0x402c01;\n                }\n                case 106: {\n                    goto lab_0x402c01;\n                }\n                case 107: {\n                    goto lab_0x402c01;\n                }\n                case 108: {\n                    goto lab_0x402c01;\n                }\n                case 109: {\n                    goto lab_0x402c01;\n                }\n                case 110: {\n                    goto lab_0x402c01;\n                }\n                case 111: {\n                    goto lab_0x402c01;\n                }\n                case 112: {\n                    goto lab_0x402c01;\n                }\n                case 113: {\n                    goto lab_0x402c01;\n                }\n                case 114: {\n                    goto lab_0x402c01;\n                }\n                case 115: {\n                    goto lab_0x402c01;\n                }\n                case 116: {\n                    goto lab_0x402c01;\n                }\n                case 117: {\n                    goto lab_0x402c01;\n                }\n                case 118: {\n                    goto lab_0x402c01;\n                }\n                case 119: {\n                    goto lab_0x402c01;\n                }\n                case 120: {\n                    goto lab_0x402c01;\n                }\n                case 121: {\n                    goto lab_0x402c01;\n                }\n                case 122: {\n                    goto lab_0x402c01;\n                }\n                case 123: {\n                    goto lab_0x402ba5;\n                }\n                case 124: {\n                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402ba5;\n                }\n                case 126: {\n                    goto lab_0x402bcd;\n                }\n                default: {\n                    goto lab_0x402fa5;\n                }\n            }\n        }\n      lab_0x402fa5:\n        if (v23 != 1) {\n            // 0x403310\n            ps = 0;\n            int64_t len = v15; // 0x403320\n            if (v15 == -1) {\n                // 0x403322\n                len = strlen((char *)str);\n            }\n            // 0x40334e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4033af:\n                // 0x4033af\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x4033b4\n                int64_t v30 = v29 + str;\n                v24 = function_405ee0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40392a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40392a_2;\n                    }\n                    case -2: {\n                        // 0x403a0d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403a47\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x403a4a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403a57\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403a50\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40392a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40392a_2;\n                    }\n                    case 1: {\n                        goto lab_0x403380;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40342c\n                        char v34 = *(char *)v33; // 0x40343d\n                        unsigned char v35; // 0x402a57\n                        if (v34 < 125) {\n                            // 0x403448\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40345f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403430\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40343d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403448\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40345f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403430\n                            v33++;\n                        }\n                        goto lab_0x403380;\n                    }\n                }\n            }\n            goto lab_0x40392a_2;\n        } else {\n            // 0x402ff4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402c01;\n        }\n    }\n  lab_0x403228:\n    // 0x403228\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x403b2a\n        if (v8 > result) {\n            // 0x403b33\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402e57\n        return result;\n    }\n    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402c01:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402c10\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402e1a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402d11\n    char v40 = v20; // 0x402d11\n    int64_t v41 = v38; // 0x402d11\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402d11\n    int64_t v43 = v36; // 0x402d11\n    goto lab_0x402c8d;\n  lab_0x402e1a_2:\n    // 0x402e57\n    return function_402a00(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40392a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402c01;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4034fe\n        int64_t v50 = v5 + 1; // 0x4035e1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x4035e8\n        char v52 = v20; // 0x4035e8\n        int64_t v53 = result; // 0x4035e8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x4035b1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x4035b5\n            int64_t v56 = v54 + 1; // 0x4035ba\n            int64_t v57 = v51 + 1; // 0x4035e1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x4035ac\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x4035b1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x4035b5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x402c8d;\n    }\n  lab_0x403380:\n    // 0x403380\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40339f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4033a2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40392a\n        goto lab_0x40392a_2;\n    }\n    goto lab_0x4033af;\n  lab_0x402bcd:\n    // 0x402bcd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402e1a_2;\n    }\n    goto lab_0x402c01;\n  lab_0x402ba5:;\n    bool v60 = v15 == 1; // 0x402bb0\n    if (v15 == -1) {\n        // 0x402bb2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x402bbe\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402c01;\n    } else {\n        goto lab_0x402bcd;\n    }\n  lab_0x402c8d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402c92\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402c96\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402aa8_2;\n}\n"
        },
        {
            "funcName": "function_403c30",
            "funcStartAddr": "403c30",
            "funcEndAddr": "403dce",
            "decompiledFuncCode": "int64_t function_403c30(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403c32\n    int32_t * v3 = __errno_location(); // 0x403c4c\n    int64_t v4 = (int64_t)g20; // 0x403c51\n    int32_t v5 = *v3; // 0x403c5b\n    int64_t v6 = v4; // 0x403c71\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403dc9\n            function_404c90(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403c80\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403c87\n        int64_t v9; // 0x403c30\n        if (g20 == &g21) {\n            int64_t v10 = function_404aa0(0, v8); // 0x403daa\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x403daf\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404aa0(v4, v8); // 0x403c9b\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x403caa\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x403caa\n        int32_t v14 = v7; // 0x403cb1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403ce1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x403ceb\n    int64_t * v17 = (int64_t *)v15; // 0x403cee\n    uint64_t v18 = *v17; // 0x403cee\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403cf1\n    int64_t result = *v19; // 0x403cf1\n    int64_t v20; // 0x403c30\n    uint64_t v21 = function_402a00(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403d14\n    if (v18 > v21) {\n        // 0x403d8b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403d27\n    *v17 = v22;\n    if (result != (int64_t)&g36) {\n        // 0x403d37\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404a40(v22); // 0x403d51\n    *v19 = result2;\n    int64_t v23; // 0x403c30\n    function_402a00(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x403d8b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403dd0",
            "funcStartAddr": "403dd0",
            "funcEndAddr": "403e04",
            "decompiledFuncCode": "int64_t function_403dd0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403dd7\n    int64_t result = function_404c40(a1 == 0 ? (int64_t)&g37 : a1, 56); // 0x403df6\n    return result;\n}\n"
        },
        {
            "funcName": "function_403e10",
            "funcStartAddr": "403e10",
            "funcEndAddr": "403e1f",
            "decompiledFuncCode": "int64_t function_403e10(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g37 : a1); // 0x403e1c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403e20",
            "funcStartAddr": "403e20",
            "funcEndAddr": "403e2f",
            "decompiledFuncCode": "int64_t function_403e20(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g37 : a1; // 0x403e28\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g37;\n}\n"
        },
        {
            "funcName": "function_403e30",
            "funcStartAddr": "403e30",
            "funcEndAddr": "403e63",
            "decompiledFuncCode": "int64_t function_403e30(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g37 + 8 : a1 + 8; // 0x403e49\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x403e4e\n    uint32_t v3 = *v2; // 0x403e4e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403e52\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403e70",
            "funcStartAddr": "403e70",
            "funcEndAddr": "403e83",
            "decompiledFuncCode": "int64_t function_403e70(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g37 + 4 : a1 + 4); // 0x403e7c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403e90",
            "funcStartAddr": "403e90",
            "funcEndAddr": "403ebb",
            "decompiledFuncCode": "int64_t function_403e90(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g37 : a1; // 0x403e98\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403eb5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403eac\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g37;\n}\n"
        },
        {
            "funcName": "function_403ec0",
            "funcStartAddr": "403ec0",
            "funcEndAddr": "403f32",
            "decompiledFuncCode": "int64_t function_403ec0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g37 : a5; // 0x403ee2\n    int32_t * v2 = __errno_location(); // 0x403eeb\n    uint32_t v3 = *(int32_t *)v1; // 0x403f0b\n    int64_t result = function_402a00(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x403f1a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403f40",
            "funcStartAddr": "403f40",
            "funcEndAddr": "404021",
            "decompiledFuncCode": "int64_t function_403f40(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g37 : a4; // 0x403f62\n    int32_t * v2 = __errno_location(); // 0x403f68\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403f87\n    int32_t * v4 = (int32_t *)v1; // 0x403f8a\n    int64_t v5 = function_402a00(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403fa5\n    int64_t v6 = v5 + 1; // 0x403faa\n    int64_t result = function_404a40(v6); // 0x403fbf\n    function_402a00(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404004\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40400d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404030",
            "funcStartAddr": "404030",
            "funcEndAddr": "40403a",
            "decompiledFuncCode": "int64_t function_404030(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404030\n    return function_403f40(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404040",
            "funcStartAddr": "404040",
            "funcEndAddr": "4040d5",
            "decompiledFuncCode": "int64_t function_404040(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x404040\n    int64_t v2 = v1; // 0x404040\n    int64_t v3 = v2; // 0x404054\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x404073\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g50;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404070\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g50;\n        }\n    }\n    int64_t v6 = v3; // 0x40408d\n    if (g21 != 0x60a2c0) {\n        // 0x40408f\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g36;\n        v6 = &g50;\n    }\n    int64_t result = v6; // 0x4040b1\n    if (g20 != &g21) {\n        // 0x4040b3\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g50;\n    }\n    // 0x4040c6\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4040e0",
            "funcStartAddr": "4040e0",
            "funcEndAddr": "4040f1",
            "decompiledFuncCode": "int64_t function_4040e0(void) {\n    // 0x4040e0\n    int64_t v1; // 0x4040e0\n    return function_403c30(v1, v1, -1, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_404100",
            "funcStartAddr": "404100",
            "funcEndAddr": "40410a",
            "decompiledFuncCode": "int64_t function_404100(void) {\n    // 0x404100\n    int64_t v1; // 0x404100\n    return function_403c30(v1, v1, v1, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_404110",
            "funcStartAddr": "404110",
            "funcEndAddr": "404126",
            "decompiledFuncCode": "int64_t function_404110(int64_t a1) {\n    // 0x404110\n    return function_403c30(0, a1, -1, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_404130",
            "funcStartAddr": "404130",
            "funcEndAddr": "404142",
            "decompiledFuncCode": "int64_t function_404130(int64_t a1, int64_t a2) {\n    // 0x404130\n    return function_403c30(0, a1, a2, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_404150",
            "funcStartAddr": "404150",
            "funcEndAddr": "4041b8",
            "decompiledFuncCode": "int64_t function_404150(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404160\n    return function_403c30((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4041c0",
            "funcStartAddr": "4041c0",
            "funcEndAddr": "404224",
            "decompiledFuncCode": "int64_t function_4041c0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4041d0\n    return function_403c30((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404230",
            "funcStartAddr": "404230",
            "funcEndAddr": "40423c",
            "decompiledFuncCode": "int64_t function_404230(int64_t a1, int64_t a2) {\n    // 0x404230\n    return function_404150(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404240",
            "funcStartAddr": "404240",
            "funcEndAddr": "40424f",
            "decompiledFuncCode": "int64_t function_404240(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404240\n    return function_4041c0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404250",
            "funcStartAddr": "404250",
            "funcEndAddr": "4042c0",
            "decompiledFuncCode": "int64_t function_404250(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g37); // 0x40425d\n    int128_t v2 = __asm_movdqa(g38); // 0x404265\n    int128_t v3 = __asm_movdqa(g39); // 0x40426d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404282\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404298\n    uint32_t v6 = *v5; // 0x404298\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40429d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403c30(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4042c0",
            "funcStartAddr": "4042c0",
            "funcEndAddr": "4042cd",
            "decompiledFuncCode": "int64_t function_4042c0(int64_t a1, int64_t a2) {\n    // 0x4042c0\n    return function_404250(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4042d0",
            "funcStartAddr": "4042d0",
            "funcEndAddr": "4042e1",
            "decompiledFuncCode": "int64_t function_4042d0(int64_t a1) {\n    // 0x4042d0\n    return function_404250(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4042f0",
            "funcStartAddr": "4042f0",
            "funcEndAddr": "4042fa",
            "decompiledFuncCode": "int64_t function_4042f0(void) {\n    // 0x4042f0\n    int64_t v1; // 0x4042f0\n    return function_404250(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404300",
            "funcStartAddr": "404300",
            "funcEndAddr": "40436e",
            "decompiledFuncCode": "int64_t function_404300(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40431a\n    return function_403c30((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404370",
            "funcStartAddr": "404370",
            "funcEndAddr": "4043dc",
            "decompiledFuncCode": "int64_t function_404370(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g37); // 0x404377\n    int128_t v2 = __asm_movdqa(g38); // 0x40437f\n    int128_t v3 = __asm_movdqa(g39); // 0x404387\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x4043a9\n    if (a2 == 0 || a3 == 0) {\n        // 0x4043d7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4043ba\n    return function_403c30(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4043e0",
            "funcStartAddr": "4043e0",
            "funcEndAddr": "4043e9",
            "decompiledFuncCode": "int64_t function_4043e0(void) {\n    // 0x4043e0\n    int64_t v1; // 0x4043e0\n    return function_404370(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4043f0",
            "funcStartAddr": "4043f0",
            "funcEndAddr": "404407",
            "decompiledFuncCode": "int64_t function_4043f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4043f0\n    return function_404370(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "404423",
            "decompiledFuncCode": "int64_t function_404410(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404410\n    return function_404370(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404430",
            "funcStartAddr": "404430",
            "funcEndAddr": "40443a",
            "decompiledFuncCode": "int64_t function_404430(void) {\n    // 0x404430\n    int64_t v1; // 0x404430\n    return function_403c30(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_404440",
            "funcStartAddr": "404440",
            "funcEndAddr": "404452",
            "decompiledFuncCode": "int64_t function_404440(int64_t a1, int64_t a2) {\n    // 0x404440\n    return function_403c30(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_404460",
            "funcStartAddr": "404460",
            "funcEndAddr": "404471",
            "decompiledFuncCode": "int64_t function_404460(void) {\n    // 0x404460\n    int64_t v1; // 0x404460\n    return function_403c30(v1, v1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_404480",
            "funcStartAddr": "404480",
            "funcEndAddr": "404496",
            "decompiledFuncCode": "int64_t function_404480(int64_t a1) {\n    // 0x404480\n    return function_403c30(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_4044a0",
            "funcStartAddr": "4044a0",
            "funcEndAddr": "40487d",
            "decompiledFuncCode": "int64_t function_4044a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404538\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x4044bc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x4044d6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40451b\n    if (a6 < 10) {\n        // 0x40452a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404622\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404880",
            "funcStartAddr": "404880",
            "funcEndAddr": "4048a0",
            "decompiledFuncCode": "int64_t function_404880(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404880\n    if (a5 == 0) {\n        // 0x40489b\n        return function_4044a0(a1, a2, a3, a4, a5, 0, (int64_t)&g50);\n    }\n    int64_t v1 = 0; // 0x404887\n    v1++;\n    int64_t v2 = v1; // 0x404899\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404890\n        v1++;\n        v2 = v1;\n    }\n    // 0x40489b\n    return function_4044a0(a1, a2, a3, a4, a5, v2, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_4048a0",
            "funcStartAddr": "4048a0",
            "funcEndAddr": "404900",
            "decompiledFuncCode": "int64_t function_4048a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4048a0\n    int64_t v3 = &v2; // 0x4048a0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4048d3\n    int64_t v6; // 0x4048bd\n    int64_t * v7; // 0x4048db\n    int64_t v8; // 0x4048db\n    int64_t v9; // 0x4048e7\n    if (v5 < 48) {\n        // 0x4048b0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4048f3\n            break;\n        }\n    } else {\n        // 0x4048db\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4048f3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4048d1\n    while (v4 != 9) {\n        // 0x4048c9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4048b0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4048f3\n                break;\n            }\n        } else {\n            // 0x4048db\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4048f3\n                break;\n            }\n        }\n        // 0x4048c9\n        v10 = 10;\n    }\n    // 0x4048f3\n    return function_4044a0(a1, a2, a3, a4, v3, v10, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_404900",
            "funcStartAddr": "404900",
            "funcEndAddr": "4049bc",
            "decompiledFuncCode": "int64_t function_404900(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x404900\n    int64_t v1; // bp-168, 0x404900\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404900\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404900\n    int64_t v8; // 0x404900\n    int64_t v9; // bp-56, 0x404900\n    int64_t v10; // 0x404965\n    int64_t v11; // 0x404989\n    if ((int32_t)v6 < 48) {\n        // 0x404950\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4049a0\n            break;\n        }\n    } else {\n        // 0x404982\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4049a0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40497a\n    int64_t v13 = 10; // 0x40497a\n    while (v5 != 9) {\n        // 0x40497c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404950\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4049a0\n                break;\n            }\n        } else {\n            // 0x404982\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4049a0\n                break;\n            }\n        }\n        // 0x404972\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4049a0\n    int64_t v14; // bp-136, 0x404900\n    int64_t result = function_4044a0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g50); // 0x4049af\n    return result;\n}\n"
        },
        {
            "funcName": "function_4049c0",
            "funcStartAddr": "4049c0",
            "funcEndAddr": "404a34",
            "decompiledFuncCode": "int64_t function_4049c0(int64_t a1) {\n    // 0x4049c0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404a23\n    return fputs_unlocked(v1, g28);\n}\n"
        },
        {
            "funcName": "function_404a40",
            "funcStartAddr": "404a40",
            "funcEndAddr": "404a5a",
            "decompiledFuncCode": "int64_t function_404a40(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404a44\n    if (size != 0 != (mem == NULL)) {\n        // 0x404a53\n        return (int64_t)mem;\n    }\n    // 0x404a55\n    function_404c90(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a60",
            "funcStartAddr": "404a60",
            "funcEndAddr": "404a81",
            "decompiledFuncCode": "int64_t function_404a60(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404a63\n    int64_t v2 = v1; // 0x404a63\n    if (v2 < 0) {\n        // 0x404a7b\n        function_404c90(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404a79\n        return function_404a40(v2);\n    }\n    // 0x404a7b\n    function_404c90(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a90",
            "funcStartAddr": "404a90",
            "funcEndAddr": "404a92",
            "decompiledFuncCode": "int64_t function_404a90(void) {\n    // 0x404a90\n    int64_t v1; // 0x404a90\n    return function_404a40(v1);\n}\n"
        },
        {
            "funcName": "function_404aa0",
            "funcStartAddr": "404aa0",
            "funcEndAddr": "404ad6",
            "decompiledFuncCode": "int64_t function_404aa0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404ac8\n        free(v1);\n        return (int32_t)&g50 ^ (int32_t)&g50;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404ab1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404ac0\n        return (int64_t)mem;\n    }\n    // 0x404ad1\n    function_404c90(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "404b01",
            "decompiledFuncCode": "int64_t function_404ae0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404ae3\n    int64_t v2 = v1; // 0x404ae3\n    if (v2 < 0) {\n        // 0x404afb\n        function_404c90(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404af9\n        return function_404aa0(a1, v2);\n    }\n    // 0x404afb\n    function_404c90(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404b10",
            "funcStartAddr": "404b10",
            "funcEndAddr": "404b96",
            "decompiledFuncCode": "int64_t function_404b10(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x404b6b\n            function_404c90(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404aa0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404b53\n    if (a2 == 0) {\n        // 0x404b78\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404b58\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x404b6b\n        function_404c90(a1);\n        // UNREACHABLE\n    }\n    // 0x404b3a\n    *(int64_t *)a2 = v2;\n    return function_404aa0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404ba0",
            "funcStartAddr": "404ba0",
            "funcEndAddr": "404bf0",
            "decompiledFuncCode": "int64_t function_404ba0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404ba0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x404bea\n            function_404c90(a1);\n            // UNREACHABLE\n        }\n        // 0x404bc2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404aa0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404bd5\n        *(int64_t *)a2 = 128;\n        return function_404aa0(0, 128);\n    }\n    // 0x404be8\n    if (a2 < 0) {\n        // 0x404bea\n        function_404c90(a1);\n        // UNREACHABLE\n    }\n    // 0x404bc2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404aa0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404bf0",
            "funcStartAddr": "404bf0",
            "funcEndAddr": "404c07",
            "decompiledFuncCode": "int64_t function_404bf0(int64_t a1, int64_t a2) {\n    // 0x404bf0\n    return (int64_t)memset((int64_t *)function_404a40(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404c10",
            "funcStartAddr": "404c10",
            "funcEndAddr": "404c3e",
            "decompiledFuncCode": "int64_t function_404c10(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404c17\n    if ((int64_t)v1 < 0) {\n        // 0x404c39\n        function_404c90(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404c39\n        function_404c90(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x404c2a\n    if (mem != NULL) {\n        // 0x404c34\n        return (int64_t)mem;\n    }\n    // 0x404c39\n    function_404c90(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404c40",
            "funcStartAddr": "404c40",
            "funcEndAddr": "404c68",
            "decompiledFuncCode": "int64_t function_404c40(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404a40(a2); // 0x404c4f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404c70",
            "funcStartAddr": "404c70",
            "funcEndAddr": "404c83",
            "decompiledFuncCode": "int64_t function_404c70(int64_t str) {\n    // 0x404c70\n    return function_404c40(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404c90",
            "funcStartAddr": "404c90",
            "funcEndAddr": "404cc1",
            "decompiledFuncCode": "int64_t function_404c90(int64_t a1) {\n    // 0x404c90\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404cd0",
            "funcStartAddr": "404cd0",
            "funcEndAddr": "4051ef",
            "decompiledFuncCode": "int64_t function_404cd0(int64_t a1, int32_t a2, uint32_t a3, int64_t * a4, int32_t a5, int64_t a6) {\n    if (a3 >= 37) {\n        // 0x40518c\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        *(int32_t *)\"<= 36\" = 0x2f62696c;\n        *(int32_t *)\"ase <= 36\" = 0x1ca79f91;\n        return 0xfc422c30;\n    }\n    char c = a1;\n    int32_t * v1 = __errno_location(); // 0x404d02\n    *v1 = 0;\n    int64_t v2 = (int64_t)*__ctype_b_loc() + 1; // 0x404d32\n    int64_t v3 = a1; // 0x404d37\n    char v4 = c; // 0x404d37\n    if ((*(char *)(v2 + (2 * a1 & 510)) & 32) != 0) {\n        v3++;\n        unsigned char v5 = *(char *)v3; // 0x404d2c\n        v4 = v5;\n        while ((*(char *)(2 * (int64_t)v5 + v2) & 32) != 0) {\n            // 0x404d28\n            v3++;\n            v5 = *(char *)v3;\n            v4 = v5;\n        }\n    }\n    // 0x404d39\n    if (v4 == 45) {\n        // 0x404d75\n        return 4;\n    }\n    int64_t str = a5;\n    int64_t v6; // bp-64, 0x404cd0\n    int64_t v7 = a2 == 0 ? (int64_t)&v6 : (int64_t)a2; // 0x404cfe\n    int32_t v8 = __strtoul_internal((char *)a1, (char **)v7, a3, 0); // 0x404d46\n    int64_t * v9 = (int64_t *)v7; // 0x404d4b\n    int64_t v10 = *v9; // 0x404d4b\n    char v11; // 0x404cd0\n    int64_t v12; // 0x404cd0\n    int64_t v13; // 0x404cd0\n    int64_t v14; // 0x404cd0\n    int64_t v15; // 0x404cd0\n    int64_t v16; // 0x404cd0\n    int64_t v17; // 0x404cd0\n    if (v10 == a1) {\n        // 0x404da8\n        if (c == 0 || a5 == 0) {\n            // 0x404d75\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x404dc9\n        v16 = 1;\n        v13 = 0;\n        v11 = c;\n        if (found_char_pos == NULL) {\n            // 0x404d75\n            return 4;\n        }\n        goto lab_0x404dd7;\n    } else {\n        int32_t v18 = *v1; // 0x404d56\n        int64_t v19 = 0; // 0x404d5c\n        if (v18 != 0) {\n            // 0x404d90\n            v19 = 1;\n            if (v18 != 34) {\n                // 0x404d75\n                return 4;\n            }\n        }\n        int64_t v20 = v8; // 0x404d46\n        v15 = v20;\n        v12 = v19;\n        if (a5 == 0) {\n            goto lab_0x404d72;\n        } else {\n            char c2 = *(char *)v10; // 0x404d65\n            v15 = v20;\n            v12 = v19;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x404ed3\n                v16 = v20;\n                v13 = v19;\n                v11 = c2;\n                v17 = v20;\n                v14 = v19;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x404dd7;\n                } else {\n                    goto lab_0x404ee5;\n                }\n            } else {\n                goto lab_0x404d72;\n            }\n        }\n    }\n  lab_0x404dd7:;\n    int64_t v21 = 0x100000000 * v10 >> 32;\n    unsigned char v22 = v11 - 69;\n    int64_t v23 = 1024; // 0x404ddf\n    int64_t v24 = 1; // 0x404ddf\n    int64_t v25; // 0x404cd0\n    int64_t v26; // 0x404cd0\n    int64_t v27; // 0x404cd0\n    int64_t v28; // 0x404cd0\n    int64_t v29; // 0x404cd0\n    int64_t v30; // 0x404cd0\n    int64_t v31; // 0x404cd0\n    int64_t v32; // 0x404cd0\n    int64_t v33; // 0x404cd0\n    int64_t v34; // 0x404cd0\n    int64_t v35; // 0x404cd0\n    int64_t v36; // 0x404cd0\n    int64_t v37; // 0x404cd0\n    int64_t v38; // 0x404cd0\n    int64_t v39; // 0x404cd0\n    int64_t v40; // 0x404cd0\n    int64_t v41; // 0x404cd0\n    int64_t v42; // 0x404cd0\n    int64_t v43; // 0x404cd0\n    int64_t v44; // 0x404cd0\n    if (v22 < 48) {\n        // 0x404de1\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v11 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x404e4a;\n        } else {\n            // 0x404df4\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x404e4a;\n            } else {\n                // 0x404e10\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v21 + 1)) {\n                    case 68: {\n                        goto lab_0x404e4a;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v21 + 2); // 0x405079\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x404e4a;\n                    }\n                    default: {\n                        // 0x404e25\n                        g47 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v16;\n                        v25 = v13;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v17 = v16;\n                        v14 = v13;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v11) {\n                            case 69: {\n                                goto lab_0x404feb;\n                            }\n                            case 70: {\n                                goto lab_0x404ee5;\n                            }\n                            case 71: {\n                                goto lab_0x405023;\n                            }\n                            case 72: {\n                                goto lab_0x404ee5;\n                            }\n                            case 73: {\n                                goto lab_0x404ee5;\n                            }\n                            case 74: {\n                                goto lab_0x404ee5;\n                            }\n                            case 75: {\n                                goto lab_0x404eac;\n                            }\n                            case 76: {\n                                goto lab_0x404ee5;\n                            }\n                            case 77: {\n                                goto lab_0x404e6e;\n                            }\n                            case 78: {\n                                goto lab_0x404ee5;\n                            }\n                            case 79: {\n                                goto lab_0x404ee5;\n                            }\n                            case 80: {\n                                goto lab_0x404fb8;\n                            }\n                            case 81: {\n                                goto lab_0x404ee5;\n                            }\n                            case 82: {\n                                goto lab_0x404ee5;\n                            }\n                            case 83: {\n                                goto lab_0x404ee5;\n                            }\n                            case 84: {\n                                goto lab_0x404f88;\n                            }\n                            case 85: {\n                                goto lab_0x404ee5;\n                            }\n                            case 86: {\n                                goto lab_0x404ee5;\n                            }\n                            case 87: {\n                                goto lab_0x404ee5;\n                            }\n                            case 88: {\n                                goto lab_0x404ee5;\n                            }\n                            case 89: {\n                                goto lab_0x404f56;\n                            }\n                            case 90: {\n                                goto lab_0x404f1b;\n                            }\n                            case 91: {\n                                goto lab_0x404ee5;\n                            }\n                            case 92: {\n                                goto lab_0x404ee5;\n                            }\n                            case 93: {\n                                goto lab_0x404ee5;\n                            }\n                            case 94: {\n                                goto lab_0x404ee5;\n                            }\n                            case 95: {\n                                goto lab_0x404ee5;\n                            }\n                            case 96: {\n                                goto lab_0x404ee5;\n                            }\n                            case 97: {\n                                goto lab_0x404ee5;\n                            }\n                            case 98: {\n                                goto lab_0x404eff;\n                            }\n                            case 99: {\n                                goto lab_0x404e88;\n                            }\n                            case 100: {\n                                goto lab_0x404ee5;\n                            }\n                            case 101: {\n                                goto lab_0x404ee5;\n                            }\n                            case 102: {\n                                goto lab_0x404ee5;\n                            }\n                            case 103: {\n                                goto lab_0x405023;\n                            }\n                            case 104: {\n                                goto lab_0x404ee5;\n                            }\n                            case 105: {\n                                goto lab_0x404ee5;\n                            }\n                            case 106: {\n                                goto lab_0x404ee5;\n                            }\n                            case 107: {\n                                goto lab_0x404eac;\n                            }\n                            case 108: {\n                                goto lab_0x404ee5;\n                            }\n                            case 109: {\n                                goto lab_0x404e6e;\n                            }\n                            case 110: {\n                                goto lab_0x404ee5;\n                            }\n                            case 111: {\n                                goto lab_0x404ee5;\n                            }\n                            case 112: {\n                                goto lab_0x404ee5;\n                            }\n                            case 113: {\n                                goto lab_0x404ee5;\n                            }\n                            case 114: {\n                                goto lab_0x404ee5;\n                            }\n                            case 115: {\n                                goto lab_0x404ee5;\n                            }\n                            case 116: {\n                                goto lab_0x404f88;\n                            }\n                            default: {\n                                goto lab_0x404e4a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x404e4a;\n    }\n  lab_0x404d72:\n    // 0x404d72\n    *a4 = v15;\n    // 0x404d75\n    return v12 & 0xffffffff;\n  lab_0x404e4a:\n    // 0x404e4a\n    g48 = v11 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v16;\n    v25 = v13;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v17 = v16;\n    v14 = v13;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x404cd0\n    switch (v11) {\n        case 66: {\n            // 0x405044\n            v46 = v24;\n            if (v16 >= 0x40000000000000) {\n                goto lab_0x404eb7;\n            } else {\n                // 0x405051\n                v26 = 1024 * v16;\n                v25 = v13;\n                v40 = v24;\n                goto lab_0x404e88;\n            }\n        }\n        case 69: {\n            goto lab_0x404feb;\n        }\n        case 71: {\n            goto lab_0x405023;\n        }\n        case 75: {\n            goto lab_0x404eac;\n        }\n        case 77: {\n            goto lab_0x404e6e;\n        }\n        case 80: {\n            goto lab_0x404fb8;\n        }\n        case 84: {\n            goto lab_0x404f88;\n        }\n        case 89: {\n            goto lab_0x404f56;\n        }\n        case 90: {\n            goto lab_0x404f1b;\n        }\n        case 98: {\n            goto lab_0x404eff;\n        }\n        case 99: {\n            goto lab_0x404e88;\n        }\n        case 103: {\n            goto lab_0x405023;\n        }\n        case 107: {\n            goto lab_0x404eac;\n        }\n        case 109: {\n            goto lab_0x404e6e;\n        }\n        case 116: {\n            goto lab_0x404f88;\n        }\n        case 119: {\n            // 0x404ef0\n            v46 = v24;\n            if (v16 < 0) {\n                goto lab_0x404eb7;\n            } else {\n                // 0x404ef5\n                v26 = 2 * v16;\n                v25 = v13;\n                v40 = v24;\n                goto lab_0x404e88;\n            }\n        }\n        default: {\n            goto lab_0x404ee5;\n        }\n    }\n  lab_0x404feb:;\n    uint128_t v47 = (int128_t)v16 * (int128_t)v33; // 0x405003\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x40500f\n    int64_t v51 = v48; // 0x405012\n    int64_t v52 = v37; // 0x405012\n    int64_t v53 = v49; // 0x405012\n    int32_t v54 = v50; // 0x405012\n    int64_t v55 = v49; // 0x405012\n    while (v50 != 0) {\n        // 0x405000\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x404f44;\n  lab_0x405023:\n    // 0x405023\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v16 <= 0xffffffffffffffff) {\n        // 0x40502e\n        int128_t v56; // 0x405029\n        uint128_t v57; // 0x405029\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x40502e\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x404cd0\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x405033\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x405038\n                v26 = v60;\n                int64_t v61; // 0x404cd0\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x404e88;\n  lab_0x404eac:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v16; // 0x404eaf\n    v26 = v64;\n    v25 = v13;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x404e88;\n    } else {\n        goto lab_0x404eb7;\n    }\n  lab_0x404e6e:;\n    int128_t v65 = v27; // 0x404e74\n    uint128_t v66 = v65 * (int128_t)v16; // 0x404e74\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x404eb7;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x404e79\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x404eb7;\n        } else {\n            // 0x404e7e\n            v26 = v67;\n            v25 = v13;\n            v40 = v39;\n            goto lab_0x404e88;\n        }\n    }\n  lab_0x404fb8:;\n    uint128_t v68 = (int128_t)v16 * (int128_t)v32; // 0x404fcb\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x404fd7\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x404fda\n    int64_t v73 = v70; // 0x404fda\n    while (v71 != 0) {\n        // 0x404fc8\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x404f44;\n  lab_0x404f88:;\n    uint128_t v74 = (int128_t)v16 * (int128_t)v31; // 0x404f9b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x404fa7\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x404faa\n    int64_t v79 = v76; // 0x404faa\n    while (v77 != 0) {\n        // 0x404f98\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x404f44;\n  lab_0x404f56:;\n    uint128_t v80 = (int128_t)v16 * (int128_t)v30; // 0x404f6b\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x404f77\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x404f7a\n    int64_t v85 = v82; // 0x404f7a\n    while (v83 != 0) {\n        // 0x404f68\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x404f44;\n  lab_0x404f1b:;\n    uint128_t v86 = (int128_t)v16 * (int128_t)v29; // 0x404f33\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x404f3f\n    int32_t v90 = v89; // 0x404f42\n    int64_t v91 = v88; // 0x404f42\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x404f30\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x404f44;\n  lab_0x404eff:\n    // 0x404eff\n    v46 = v42;\n    if (v16 >= 0x80000000000000) {\n        goto lab_0x404eb7;\n    } else {\n        // 0x404f08\n        v26 = 512 * v16;\n        v25 = v13;\n        v40 = v42;\n        goto lab_0x404e88;\n    }\n  lab_0x404e88:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v21; // 0x404e8d\n    *v9 = v63;\n    v15 = v26;\n    v12 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x404d72;\n  lab_0x404ee5:\n    // 0x404ee5\n    *a4 = v17;\n    // 0x404d75\n    return (v14 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x404eb7:\n    // 0x404eb7\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x404e88;\n  lab_0x404f44:\n    // 0x404f44\n    v26 = v51;\n    v25 = (v53 | v13) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x404e88;\n}\n"
        },
        {
            "funcName": "function_4051f0",
            "funcStartAddr": "4051f0",
            "funcEndAddr": "40580c",
            "decompiledFuncCode": "int64_t function_4051f0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40520f\n    int64_t v2 = *v1; // 0x40520f\n    char * str2 = (char *)v2; // 0x40521c\n    char c = *str2; // 0x40521c\n    int64_t v3 = v2; // 0x405248\n    int64_t v4 = 0; // 0x4051f0\n    int32_t v5; // 0x4051f0\n    int64_t v6; // 0x4051f0\n    int64_t v7; // 0x4051f0\n    int64_t v8; // 0x4051f0\n    int64_t v9; // 0x4051f0\n    int64_t v10; // 0x4051f0\n    int64_t v11; // 0x4051f0\n    int64_t v12; // 0x4051f0\n    int64_t v13; // 0x4051f0\n    int64_t str3; // 0x4051f0\n    int64_t v14; // 0x4051f0\n    int64_t v15; // 0x4051f0\n    int64_t v16; // 0x4051f0\n    int64_t v17; // 0x4051f0\n    int32_t v18; // 0x4051f0\n    int32_t v19; // 0x4051f0\n    int32_t v20; // 0x4051f0\n    int32_t v21; // 0x4051f0\n    int32_t v22; // 0x4051f0\n    int32_t v23; // 0x4051f0\n    int32_t v24; // 0x4051f0\n    int32_t v25; // 0x4051f0\n    int32_t v26; // 0x4051f0\n    int32_t v27; // 0x4051f0\n    int32_t v28; // 0x4051f0\n    int32_t v29; // 0x4051f0\n    int64_t nmemb; // 0x4051f0\n    int64_t v30; // 0x4051f0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40524c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405248\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405258\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40525e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405228\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40528c\n                int64_t v34; // 0x4051f0\n                int64_t v35; // 0x4051f0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405295\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405410;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4052a6\n                int64_t v37 = *(int64_t *)v36; // 0x4052aa\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405280\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405295\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405410;\n                        }\n                    }\n                    // 0x4052a6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4052f6:\n                    // 0x4052f6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405350;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4054c0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405350;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405470\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40531a;\n                                } else {\n                                    // 0x40547c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40531a;\n                                    } else {\n                                        // 0x40548a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40531a;\n                                        } else {\n                                            goto lab_0x405350;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40531a;\n                            }\n                        }\n                    }\n                }\n              lab_0x405361:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405536\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4056e2\n                            flockfile(g30);\n                            int64_t v41 = *v1; // 0x405702\n                            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40574f\n                            int64_t v43 = (int64_t)g30;\n                            int64_t v44 = v43; // 0x405769\n                            int64_t v45; // 0x40576b\n                            if (*(char *)v42 != 0) {\n                                // 0x40576b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g30;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405763\n                            while (v17 + nmemb != v42) {\n                                // 0x405765\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40576b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g30;\n                                }\n                                // 0x405758\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405790\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g30);\n                            v40 = *v1;\n                        } else {\n                            // 0x405544\n                            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40569f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405599\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4055b0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40545e\n                    return 63;\n                }\n                // 0x405380\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405404\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405410:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405420\n                    uint32_t v50 = *v49; // 0x405420\n                    int64_t v51 = v50; // 0x405420\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40542a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405433\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40565f\n                                __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40560a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40545e\n                            return 63;\n                        }\n                        // 0x4054a8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4057bf\n                                    __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4056bd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4056d0\n                                // 0x40545e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4055ce\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4055e2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40544b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40544e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405452\n                    int64_t result = v59; // 0x405458\n                    if (v58 != 0) {\n                        // 0x40545a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40545e\n                    return result;\n                }\n            } else {\n                // 0x40525e\n                v5 = v32;\n            }\n            // break -> 0x405385\n            break;\n        }\n    }\n    // 0x405385\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40539d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4053a7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40545e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4054e9\n        __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4053d6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4053e6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405350:\n    // 0x405350\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405350\n    int64_t v63 = *(int64_t *)v62; // 0x405354\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405361\n        goto lab_0x405361;\n    }\n    goto lab_0x4052f6;\n  lab_0x40531a:\n    // 0x40531a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4051f0\n    int32_t v65; // 0x4051f0\n    int32_t v66; // 0x4051f0\n    if (v27 != 0) {\n        goto lab_0x405350;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4054d0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405350;\n            } else {\n                goto lab_0x405341;\n            }\n        } else {\n            // 0x405335\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40562c\n                int64_t v67 = (int64_t)mem; // 0x40562c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405350;\n                } else {\n                    // 0x40563f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405341;\n                }\n            } else {\n                goto lab_0x405341;\n            }\n        }\n    }\n  lab_0x405341:\n    // 0x405341\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405350;\n}\n"
        },
        {
            "funcName": "function_405810",
            "funcStartAddr": "405810",
            "funcEndAddr": "405dd6",
            "decompiledFuncCode": "int64_t function_405810(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405831\n    if (v3 < 1) {\n        // 0x4059ee\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40582d\n    int32_t v5 = *(int32_t *)a7; // 0x405839\n    uint64_t v6 = a1 & 0xffffffff; // 0x40583b\n    int64_t v7 = v2; // 0x405840\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405843\n    *v8 = 0;\n    int64_t v9; // 0x405810\n    int64_t v10; // 0x405810\n    int64_t v11; // 0x405810\n    int64_t v12; // 0x405810\n    int64_t str; // 0x405810\n    int64_t v13; // 0x405810\n    int64_t v14; // 0x405810\n    int64_t v15; // 0x405810\n    int64_t v16; // 0x405810\n    int64_t v17; // 0x405810\n    int32_t v18; // 0x405810\n    char v19; // 0x405810\n    if (v5 == 0) {\n        // 0x405a28\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40585a;\n    } else {\n        // 0x405853\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4058a0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4058a3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405968;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4058b6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4058c6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40597c;\n                } else {\n                    goto lab_0x4058d8;\n                }\n            }\n        } else {\n            goto lab_0x40585a;\n        }\n    }\n  lab_0x40585a:\n    // 0x40585a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405860\n    *v24 = 0;\n    int64_t v25; // 0x405810\n    int64_t v26; // 0x405810\n    int64_t v27; // 0x405810\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405950\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40595d;\n        }\n        case 43: {\n            // 0x405c60\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40595d;\n        }\n        default: {\n            // 0x40587c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x405bdf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405cf8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40595d;\n                } else {\n                    // 0x405bed\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40588a;\n                }\n            } else {\n                goto lab_0x40588a;\n            }\n        }\n    }\n  lab_0x405968:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40596f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4058d8;\n    } else {\n        goto lab_0x40597c;\n    }\n  lab_0x40588a:\n    // 0x40588a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40595d;\n  lab_0x40595d:\n    // 0x40595d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405968;\n  lab_0x4058d8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4058d8\n    int64_t v31 = v30; // 0x4058d8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4058da\n    if ((int64_t)*v32 > v31) {\n        // 0x4058df\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4058e2\n    if (*v33 > v30) {\n        // 0x4058e7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4058ea\n    int64_t v35 = v31; // 0x4058ee\n    int64_t v36 = v15; // 0x4058ee\n    int64_t v37; // 0x405810\n    int64_t v38; // 0x405810\n    int64_t v39; // 0x405810\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405a58\n        int64_t v41 = v40; // 0x405a58\n        v2 = v41;\n        int64_t v42; // 0x405810\n        if (*v33 == v40) {\n            // 0x405c40\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405c48\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405a64\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405a78\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405a81\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x405a8a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405aa1\n            int64_t v47 = v45 & 0xffffffff; // 0x405aa5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x405aae\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405ab4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405ab6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405a90\n            int64_t v49 = v48 & 0xffffffff; // 0x405a90\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405aa1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x405aae\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405ab4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405ab6;\n                    }\n                }\n                // 0x405a90\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405c58\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405ab6;\n    } else {\n        goto lab_0x4058f4;\n    }\n  lab_0x40597c:\n    // 0x40597c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40597f\n    int64_t v51 = v12; // 0x40597f\n    int64_t v52 = v14; // 0x40597f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4058d8;\n    } else {\n        goto lab_0x405985;\n    }\n  lab_0x4058f4:;\n    int32_t v53 = v35; // 0x4058f4\n    int64_t v54; // 0x405810\n    int64_t v55; // 0x405810\n    int64_t v56; // 0x405810\n    int64_t v57; // 0x405810\n    int64_t v58; // 0x405810\n    int64_t v59; // 0x405810\n    char * v60; // 0x405810\n    int64_t v61; // 0x405810\n    int64_t v62; // 0x405909\n    int64_t v63; // 0x405810\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405a43\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405a46;\n    } else {\n        // 0x4058fc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405810\n        int64_t v66 = v65 ? -1 : 1; // 0x405910\n        int64_t v67 = (int64_t)\"--\"; // 0x405810\n        int64_t v68 = v62; // 0x405810\n        int64_t v69 = 3; // 0x405910\n        unsigned char v70 = *(char *)v68; // 0x405910\n        char v71 = *(char *)v67; // 0x405910\n        char v72 = v71; // 0x405910\n        bool v73 = false; // 0x405910\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405a00\n            if (*(char *)v62 == 45) {\n                // 0x405ac0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x405ac0\n                if (c == 0) {\n                    goto lab_0x405a0a;\n                } else {\n                    // 0x405acd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405b50;\n                    } else {\n                        if (c == 45) {\n                            // 0x405d33\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405ba5;\n                        } else {\n                            // 0x405ade\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405b50;\n                            } else {\n                                // 0x405ae3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x405b04;\n                                } else {\n                                    // 0x405aea\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405b50;\n                                    } else {\n                                        goto lab_0x405b04;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x405a0a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405920\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405923\n            int64_t v77 = v35 + 1; // 0x405926\n            int32_t v78 = v77; // 0x405929\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405c90\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405937\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405945\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405a46;\n        }\n    }\n  lab_0x405985:;\n    // 0x405985\n    int64_t v79; // bp-104, 0x405810\n    int64_t v80 = &v79; // 0x40581a\n    int64_t v81 = v50 + 1; // 0x405985\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40598c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405991\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405995\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405999\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4059a1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4059a6\n    int32_t c2 = v84; // 0x4059a6\n    char * found_char_pos = strchr(str2, c2); // 0x4059a6\n    int64_t v87 = *v82; // 0x4059ab\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4059b5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4059c0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405cb0\n            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x405c7d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4059ee\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4059a6\n    char v91 = *(char *)(v90 + 1); // 0x4059db\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405995\n        if (v91 != 58) {\n            // 0x4059ee\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405c04\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405d08\n                *v8 = 0;\n            } else {\n                // 0x405cec\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x405c2e\n            *v83 = 0;\n            // 0x4059ee\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x405c0e\n        if (v93 != 0) {\n            // 0x405ca0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x405c2e\n            *v83 = 0;\n            // 0x4059ee\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405c21\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x405c2e\n            *v83 = 0;\n            // 0x4059ee\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x405d6a\n            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x405d1a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405d21\n        // 0x405c2e\n        *v83 = 0;\n        // 0x4059ee\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405b79\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x405b7b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405da0\n                __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405d51\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405d58\n            // 0x4059ee\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405b86\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x405b8a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405ba5;\n  lab_0x405ab6:\n    // 0x405ab6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4058f4;\n  lab_0x405ba5:;\n    int64_t v99 = function_4051f0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x405bc3\n    // 0x4059ee\n    return v99 & 0xffffffff;\n  lab_0x405a46:;\n    int32_t v100 = v55; // 0x405a46\n    if (v100 != (int32_t)v59) {\n        // 0x405a4a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4059ee\n    return 0xffffffff;\n  lab_0x405a0a:\n    // 0x405a0a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405a11\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4059ee\n    return v99 & 0xffffffff;\n  lab_0x405b50:\n    // 0x405b50\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405985;\n  lab_0x405b04:\n    // 0x405b04\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4051f0(v6, a2, str, a4, a5, v57, v1, v11, &g9); // 0x405b2a\n    if ((int32_t)v101 != -1) {\n        // 0x4059ee\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x405b3f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405b50;\n}\n"
        },
        {
            "funcName": "function_405de0",
            "funcStartAddr": "405de0",
            "funcEndAddr": "405e36",
            "decompiledFuncCode": "int64_t function_405de0(int64_t a1) {\n    // 0x405de0\n    *(int32_t *)&g40 = g26;\n    *(int32_t *)&g41 = g25;\n    int64_t v1; // 0x405de0\n    int64_t result = function_405810(v1, v1, v1, v1, v1, v1, &g40, a1 & 0xffffffff); // 0x405e06\n    g26 = *(int32_t *)&g40;\n    g45 = g43;\n    *(int32_t *)&g24 = g42;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405e40",
            "funcStartAddr": "405e40",
            "funcEndAddr": "405e58",
            "decompiledFuncCode": "int64_t function_405e40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405e40\n    return function_405de0(1);\n}\n"
        },
        {
            "funcName": "function_405e60",
            "funcStartAddr": "405e60",
            "funcEndAddr": "405e73",
            "decompiledFuncCode": "int64_t function_405e60(int64_t a1, int64_t a2, char * a3, char (**a4)[8], int32_t a5, int64_t a6) {\n    // 0x405e60\n    return function_405de0(0);\n}\n"
        },
        {
            "funcName": "function_405e80",
            "funcStartAddr": "405e80",
            "funcEndAddr": "405e95",
            "decompiledFuncCode": "int64_t function_405e80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405e80\n    return function_405810(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405ea0",
            "funcStartAddr": "405ea0",
            "funcEndAddr": "405eb6",
            "decompiledFuncCode": "int64_t function_405ea0(void) {\n    // 0x405ea0\n    return function_405de0(0);\n}\n"
        },
        {
            "funcName": "function_405ec0",
            "funcStartAddr": "405ec0",
            "funcEndAddr": "405ed8",
            "decompiledFuncCode": "int64_t function_405ec0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405ec0\n    return function_405810(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405ee0",
            "funcStartAddr": "405ee0",
            "funcEndAddr": "405f5a",
            "decompiledFuncCode": "int64_t function_405ee0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x405eeb\n    int64_t v2 = (int64_t)&g10; // 0x405eeb\n    int32_t * pwc; // 0x405ee0\n    int64_t v3; // 0x405ee0\n    int64_t n; // 0x405ee0\n    if (a2 == 0) {\n        goto lab_0x405f32;\n    } else {\n        // 0x405eed\n        if (a3 == 0) {\n            // 0x405f18\n            return -2;\n        }\n        // 0x405ef9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405f32;\n        } else {\n            goto lab_0x405f04;\n        }\n    }\n  lab_0x405f32:\n    // 0x405f32\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405ee0\n    pwc = (int32_t *)&v4;\n    goto lab_0x405f04;\n  lab_0x405f04:;\n    char * wstr = (char *)v3; // 0x405f0a\n    int64_t ps; // 0x405ee0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x405f0a\n    int64_t result = v5; // 0x405f0a\n    if (v5 < 0xfffffffe) {\n        // 0x405f18\n        return result;\n    }\n    int64_t result2 = result; // 0x405f49\n    if ((char)function_405fc0(0, v3) == 0) {\n        // 0x405f4b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405f18\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405f60",
            "funcStartAddr": "405f60",
            "funcEndAddr": "405fbd",
            "decompiledFuncCode": "int64_t function_405f60(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405f67\n    int64_t v2; // 0x405f60\n    int64_t result = function_406590(a1, v2); // 0x405f78\n    if ((v2 & 32) != 0) {\n        // 0x405fa0\n        if ((int32_t)result == 0) {\n            // 0x405fa4\n            *__errno_location() = 0;\n        }\n        // 0x405f9a\n        return 0xffffffff;\n    }\n    // 0x405f81\n    if ((int32_t)result == 0) {\n        // 0x405f9a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405f88\n    if (v1 == 0) {\n        // 0x405f8a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x405f9a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405fc0",
            "funcStartAddr": "405fc0",
            "funcEndAddr": "40601e",
            "decompiledFuncCode": "int64_t function_405fc0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405fc6\n    if (locale == NULL) {\n        // 0x405ff3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405fc6\n    bool v2; // 0x405fc0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x405fc0\n    int64_t v5 = v1; // 0x405fc0\n    int64_t v6 = 2; // 0x405fe5\n    unsigned char v7 = *(char *)v5; // 0x405fe5\n    char v8 = *(char *)v4; // 0x405fe5\n    char v9 = v8; // 0x405fe5\n    bool v10 = false; // 0x405fe5\n    while (v7 == v8) {\n        // 0x405fd8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405ff1\n    int64_t v13 = v1; // 0x405ff1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405ff3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405ff1\n    unsigned char v15 = *(char *)v13; // 0x40600d\n    char v16 = *(char *)v12; // 0x40600d\n    char v17 = v16; // 0x40600d\n    bool v18 = false; // 0x40600d\n    while (v15 == v16) {\n        // 0x406000\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_406020",
            "funcStartAddr": "406020",
            "funcEndAddr": "406582",
            "decompiledFuncCode": "int64_t function_406020(void) {\n    char * v1 = nl_langinfo(14); // 0x406036\n    char * v2 = g44; // 0x40603b\n    char * v3; // 0x406020\n    int64_t v4; // 0x406020\n    int64_t v5; // 0x406020\n    int64_t v6; // 0x406020\n    int64_t v7; // 0x406020\n    int32_t size; // 0x406020\n    int32_t size2; // 0x406020\n    int32_t len; // 0x4060f2\n    int64_t v8; // 0x4060f2\n    char * env_val; // 0x4060dd\n    if (v2 == NULL) {\n        // 0x4060d8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406145;\n        } else {\n            // 0x4060ea\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406145;\n            } else {\n                // 0x4060ef\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4060dd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406575\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406145;\n                    } else {\n                        // 0x4064e9\n                        size2 = len + 14;\n                        goto lab_0x40610b;\n                    }\n                } else {\n                    goto lab_0x40610b;\n                }\n            }\n        }\n    } else {\n        // 0x406020\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40605a;\n    }\n  lab_0x40638c:;\n    // 0x40638c\n    struct _IO_FILE * stream; // 0x4061cb\n    int32_t v10 = __uflow(stream); // 0x40638f\n    int64_t v11; // 0x406020\n    int64_t v12 = v11; // 0x406399\n    int64_t v13; // 0x406020\n    int64_t v14 = v13; // 0x406399\n    int32_t v15 = v10; // 0x406399\n    int64_t v16; // 0x406020\n    int64_t v17 = v16; // 0x406399\n    int64_t v18 = v11; // 0x406399\n    int64_t v19 = v13; // 0x406399\n    int64_t v20 = v16; // 0x406399\n    if (v10 == -1) {\n        // break -> 0x40639f\n        goto lab_0x40639f;\n    }\n    goto lab_0x406219;\n  lab_0x40620e:;\n    // 0x40620e\n    int64_t v90; // 0x406020\n    int64_t * v32; // 0x406200\n    *v32 = v90 + 1;\n    int64_t v89; // 0x406020\n    v12 = v89;\n    int64_t v91; // 0x406020\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x406020\n    v17 = v92;\n    goto lab_0x406219;\n  lab_0x406219:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x406020\n    int32_t v25; // bp-120, 0x406020\n    int32_t v26; // bp-184, 0x406020\n    int64_t v27; // 0x4061cb\n    int64_t v28; // 0x4061e8\n    int64_t v29; // 0x4061ed\n    int64_t * v30; // 0x406204\n    switch (c) {\n        case 32: {\n            goto lab_0x406200;\n        }\n        case 10: {\n            goto lab_0x406200;\n        }\n        case 9: {\n            goto lab_0x406200;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4063f1\n            int32_t v33; // 0x406020\n            char v34; // 0x406020\n            int32_t v35; // 0x4063fe\n            if (v31 < *v30) {\n                // 0x4063d0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4063fb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4063f1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4063d0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4063fb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4063e0\n                v36 = v33;\n            }\n            // 0x4064cf\n            if (v36 == -1) {\n                // break -> 0x40639f\n                break;\n            }\n            goto lab_0x406200;\n        }\n        default: {\n            // 0x40622f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40639f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406258\n            int64_t v39 = v37 + 4; // 0x40625a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406266\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406268\n            while (v41 == 0) {\n                // 0x406258\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406286\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406292\n            int64_t v45 = v43 + 4; // 0x406294\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4062a0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4062a2\n            while (v47 == 0) {\n                // 0x406292\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40628f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4062b8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4062c8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4062cc\n            int64_t v52 = v51 + v48; // 0x4062d5\n            int64_t * mem; // 0x406020\n            int64_t v53; // 0x406020\n            int64_t v54; // 0x406020\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40640b\n                int64_t v56 = v55 + 3; // 0x406417\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4062f1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406300\n            if (mem == NULL) {\n                // 0x40652c\n                free((int64_t *)v21);\n                function_406590(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x4061a4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406318\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406322\n            uint32_t v62 = (int32_t)v59; // 0x406325\n            int64_t v63; // 0x406020\n            if (v62 >= 8) {\n                // 0x406434\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40644e\n                int64_t v66 = v61 - v65; // 0x406452\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40645d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40646e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40646e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40646b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4064ff\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406337\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40633b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40634b\n            int64_t v74 = v60 - 1; // 0x40634f\n            uint32_t v75 = (int32_t)v73; // 0x406354\n            int64_t v76; // 0x406020\n            if (v75 >= 8) {\n                // 0x406482\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40648c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40649c\n                int64_t v80 = v74 - v79; // 0x4064a0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4064ab\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4064bb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4064b9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x406516\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40651e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406366\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40636a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406563\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40637e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40620e;\n            } else {\n                goto lab_0x40638c;\n            }\n        }\n    }\n  lab_0x406200:;\n    int64_t v93 = v23; // 0x406020\n    int64_t v94 = v22; // 0x406020\n    int64_t v95 = v21; // 0x406020\n    goto lab_0x406200_2;\n  lab_0x406145:;\n    int64_t * mem3 = malloc(size); // 0x406145\n    int64_t v97 = (int64_t)&g10; // 0x406150\n    int64_t v98; // 0x406020\n    int64_t path; // 0x406020\n    if (mem3 == NULL) {\n        goto lab_0x406122;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406145\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406166;\n    }\n  lab_0x40605a:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x40604d\n    char v100 = *v3; // 0x40605a\n    int64_t v101; // 0x406020\n    if (v100 == 0) {\n        // 0x4060b4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x406020\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x406020\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4060a0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4060a7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406070\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40607d\n        char v107 = *(char *)v106; // 0x406082\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4060b4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40608b\n    v104 = v103 + 1;\n  lab_0x4060a7:\n    // 0x4060b4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406122:;\n    char * v108 = (char *)v97;\n    g44 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40605a;\n  lab_0x406166:;\n    int64_t v109 = v98 + path; // 0x406166\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x406192\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x4061c1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4064f2\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x4061e5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x406200_2:;\n                uint64_t v96 = *v32; // 0x406200\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40638c;\n                } else {\n                    goto lab_0x40620e;\n                }\n            }\n          lab_0x40639f:\n            // 0x40639f\n            function_406590(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x4063be\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4061a4;\n  lab_0x40610b:;\n    int64_t * mem4 = malloc(size2); // 0x40610b\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x4061b1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406166;\n    } else {\n        goto lab_0x406122;\n    }\n  lab_0x4061a4:\n    // 0x4061a4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406122;\n}\n"
        },
        {
            "funcName": "function_406590",
            "funcStartAddr": "406590",
            "funcEndAddr": "40660b",
            "decompiledFuncCode": "int64_t function_406590(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x406597\n    if (fileno(stream) < 0) {\n        // 0x4065f7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4065aa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x4065db\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4065f7\n            return fclose(stream);\n        }\n    }\n    // 0x4065ac\n    if ((int32_t)function_406610(a1, v1) == 0) {\n        // 0x4065f7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x4065b8\n    int32_t v3 = *v2; // 0x4065c0\n    int64_t result = fclose(stream); // 0x4065ce\n    if (v3 != 0) {\n        // 0x406600\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x4065d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_406610",
            "funcStartAddr": "406610",
            "funcEndAddr": "406650",
            "decompiledFuncCode": "int64_t function_406610(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40662a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40662a\n        return fflush(stream);\n    }\n    // 0x406638\n    function_406650(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_406650",
            "funcStartAddr": "406650",
            "funcEndAddr": "4066a7",
            "decompiledFuncCode": "int64_t function_406650(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x406650\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40665a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40668b\n    int64_t result = -1; // 0x406694\n    if (v1 != -1) {\n        // 0x406696\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4066a2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4066b0",
            "funcStartAddr": "4066b0",
            "funcEndAddr": "40670d",
            "decompiledFuncCode": "int64_t function_4066b0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4066b0\n    return function_4013b0();\n}\n"
        },
        {
            "funcName": "function_406710",
            "funcStartAddr": "406710",
            "funcEndAddr": "406711",
            "decompiledFuncCode": "int64_t function_406710(void) {\n    // 0x406710\n    int64_t result; // 0x406710\n    return result;\n}\n"
        },
        {
            "funcName": "function_406720",
            "funcStartAddr": "406720",
            "funcEndAddr": "406738",
            "decompiledFuncCode": "int64_t function_406720(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406720\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_406738",
            "funcStartAddr": "406738",
            "funcEndAddr": "406758",
            "decompiledFuncCode": "int64_t function_406738(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x406742\n    while (*(int64_t *)v1 != -1) {\n        // 0x406743\n        v1 -= 8;\n    }\n    // 0x406754\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_mknod.elf"
}