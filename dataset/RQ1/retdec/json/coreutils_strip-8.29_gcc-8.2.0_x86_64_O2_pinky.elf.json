{
    "funcInfo": [
        {
            "funcName": "function_401c90",
            "funcStartAddr": "401c90",
            "funcEndAddr": "401c95",
            "decompiledFuncCode": "int64_t function_401c90(void) {\n    // 0x401c90\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c95",
            "funcStartAddr": "401c95",
            "funcEndAddr": "401c9a",
            "decompiledFuncCode": "int64_t function_401c95(void) {\n    // 0x401c95\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c9a",
            "funcStartAddr": "401c9a",
            "funcEndAddr": "401c9f",
            "decompiledFuncCode": "int64_t function_401c9a(void) {\n    // 0x401c9a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c9f",
            "funcStartAddr": "401c9f",
            "funcEndAddr": "401ca4",
            "decompiledFuncCode": "int64_t function_401c9f(void) {\n    // 0x401c9f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ca4",
            "funcStartAddr": "401ca4",
            "funcEndAddr": "401ca9",
            "decompiledFuncCode": "int64_t function_401ca4(void) {\n    // 0x401ca4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ca9",
            "funcStartAddr": "401ca9",
            "funcEndAddr": "401cae",
            "decompiledFuncCode": "int64_t function_401ca9(void) {\n    // 0x401ca9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401cb0",
            "funcStartAddr": "401cb0",
            "funcEndAddr": "402130",
            "decompiledFuncCode": "int64_t function_401cb0(int64_t a1, int64_t a2) {\n    // 0x401cb0\n    function_403180(a2);\n    setlocale(LC_ALL, (char *)&g11);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v1; // 0x401cb0\n    function_406db0(0x402fe0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    int64_t v2; // 0x401cb0\n    int64_t v3; // 0x401cb0\n    int64_t v4; // 0x401cb0\n    uint64_t v5; // 0x401cb0\n    int16_t * v6; // bp-64, 0x401cb0\n    int64_t v7; // bp-72, 0x401cb0\n    int64_t v8; // 0x401ece\n    int64_t v9; // 0x401ee9\n    int64_t v10; // 0x401e94\n    char * str; // 0x401f2b\n    int64_t v11; // 0x402020\n    int64_t * v12; // 0x402027\n    uint64_t v13; // 0x402027\n    int64_t v14; // 0x401cb0\n    int32_t v15; // 0x401e64\n    int64_t v16; // 0x401e64\n    int32_t v17; // 0x401e6b\n    while (true) {\n        int32_t v18 = function_406460(a1 & 0xffffffff, a2, \"sfwiqbhlp\", &g2, 0, v1);\n        switch (v18) {\n            case -1: {\n                // 0x401e64\n                v15 = *(int32_t *)0x60a2fc;\n                v16 = v15;\n                v17 = (int32_t)a1 - v15;\n                if (g18 == 0) {\n                    if (v17 == 0) {\n                        // 0x4020c0\n                        error(0, (int32_t)\"no username specified; at least one must be specified when using -l\" ^ (int32_t)\"no username specified; at least one must be specified when using -l\", dcgettext(NULL, \"no username specified; at least one must be specified when using -l\", 5));\n                        // 0x4020df\n                        function_402bd0(1);\n                        // UNREACHABLE\n                    }\n                    if (v17 < 1) {\n                        // 0x401ea2\n                        return 0;\n                    }\n                    // 0x401e80\n                    v2 = 8 * v16 + a2;\n                    v10 = v2 + 8;\n                    function_402340(*(int64_t *)v2);\n                    while (a2 + 8 + 8 * ((int64_t)(v17 - 1) + v16) != v10) {\n                        // 0x401e90\n                        v2 = v10;\n                        v10 = v2 + 8;\n                        function_402340(*(int64_t *)v2);\n                    }\n                    // 0x401ea2\n                    return 0;\n                }\n                // 0x401eb3\n                v6 = NULL;\n                v8 = function_4065c0(\"/var/run/utmp\", &v7, (int64_t *)&v6, 0);\n                if ((int32_t)v8 != 0) {\n                    // 0x4020f8\n                    error(1, *__errno_location(), \"%s\", (char *)function_404c20(0, 3, \"/var/run/utmp\"));\n                    return &g62;\n                }\n                // 0x401edb\n                v9 = function_403080(2, (int64_t)&v7);\n                g45 = (char)v9 != 0 ? \"%Y-%m-%d %H:%M\" : \"%b %e %H:%M\";\n                g44 = (char)v9 != 0 ? 16 : 12;\n                if (g23 != 0) {\n                    // 0x401f88\n                    __printf_chk(1, \"%-8s\", dcgettext(NULL, \"Login\", 5));\n                    if (g22 != 0) {\n                        // 0x402045\n                        __printf_chk(1, \" %-19s\", dcgettext(NULL, \"Name\", 5));\n                    }\n                    // 0x401fba\n                    __printf_chk(1, \" %-9s\", dcgettext(NULL, \" TTY\", 5));\n                    if (g24 != 0) {\n                        // 0x402096\n                        __printf_chk(1, \" %-6s\", dcgettext(NULL, \"Idle\", 5));\n                    }\n                    // 0x401fec\n                    __printf_chk(1, \" %-*s\", (int64_t)g44, dcgettext(NULL, \"When\", 5));\n                    if (g17 != 0) {\n                        // 0x40206f\n                        __printf_chk(1, \" %s\", dcgettext(NULL, \"Where\", 5));\n                    }\n                    // 0x402020\n                    v11 = (int64_t)g36;\n                    v12 = (int64_t *)(v11 + 40);\n                    v13 = *v12;\n                    if (v13 >= *(int64_t *)(v11 + 48)) {\n                        // 0x4020e9\n                        __overflow(g36, 10);\n                    } else {\n                        // 0x402035\n                        *v12 = v13 + 1;\n                        *(char *)v13 = 10;\n                    }\n                }\n                if (v7 == 0) {\n                    // 0x401ea2\n                    return 0;\n                }\n                // 0x401f2b\n                v14 = v7;\n                v4 = (int64_t)v6;\n                str = (char *)(v4 + 44);\n                if (*str != 0) {\n                    // 0x401f33\n                    if (*(int16_t *)v4 == 7) {\n                        // 0x401f3b\n                        if (v17 != 0) {\n                            v5 = 0;\n                            while (v5 < (int64_t)v17) {\n                                // 0x401f69\n                                if (strncmp(str, (char *)*(int64_t *)(8 * (v5 + v16) + a2), 32) == 0) {\n                                    goto lab_0x401f3f;\n                                }\n                                v5++;\n                            }\n                        } else {\n                            // 0x401f3f\n                            function_4026f0(v4);\n                        }\n                    }\n                }\n                // 0x401f16\n                v14--;\n                v3 = v4 + 384;\n                while (v14 != 0) {\n                    // 0x401f2b\n                    v4 = v3;\n                    str = (char *)(v4 + 44);\n                    if (*str != 0) {\n                        // 0x401f33\n                        if (*(int16_t *)v4 == 7) {\n                            // 0x401f3b\n                            if (v17 != 0) {\n                                v5 = 0;\n                                while (v5 < (int64_t)v17) {\n                                    // 0x401f69\n                                    if (strncmp(str, (char *)*(int64_t *)(8 * (v5 + v16) + a2), 32) == 0) {\n                                        goto lab_0x401f3f;\n                                    }\n                                    v5++;\n                                }\n                            } else {\n                                // 0x401f3f\n                                function_4026f0(v4);\n                            }\n                        }\n                    }\n                    // 0x401f16\n                    v14--;\n                    v3 = v4 + 384;\n                }\n                // 0x401ea2\n                return 0;\n            }\n            case 105: {\n                // 0x401e20\n                g22 = 0;\n                g17 = 0;\n                // break -> 0x401d00\n                break;\n            }\n            default: {\n                if (v18 > 105) {\n                    if (v18 == 113) {\n                        // 0x401e38\n                        g22 = 0;\n                        g17 = 0;\n                        g24 = 0;\n                    } else {\n                        if (v18 > 113) {\n                            if (v18 != 115) {\n                                if (v18 != 119) {\n                                    // 0x4020df\n                                    function_402bd0(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x401df9\n                                g22 = 0;\n                            } else {\n                                // 0x401d85\n                                g18 = 1;\n                            }\n                        } else {\n                            if (v18 != 108) {\n                                if (v18 != 112) {\n                                    // 0x4020df\n                                    function_402bd0(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x401d71\n                                g20 = 0;\n                            } else {\n                                // 0x401d3b\n                                g18 = 0;\n                            }\n                        }\n                    }\n                } else {\n                    if (v18 == 98) {\n                        // 0x401e58\n                        g19 = 0;\n                    } else {\n                        if (v18 <= 98) {\n                            if (v18 == -131) {\n                                // 0x401db7\n                                function_405220((int64_t)g36, \"pinky\", \"GNU coreutils\", (int64_t)g25, \"Joseph Arceneaux\", \"David MacKenzie\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            if (v18 == -130) {\n                                // 0x401e10\n                                function_402bd0(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x4020df;\n                        }\n                        if (v18 != 102) {\n                            if (v18 != 104) {\n                              lab_0x4020df:\n                                // 0x4020df\n                                function_402bd0(1);\n                                // UNREACHABLE\n                            }\n                            // 0x401da1\n                            g21 = 0;\n                        } else {\n                            // 0x401d58\n                            g23 = 0;\n                        }\n                    }\n                }\n                // break -> 0x401d00\n                break;\n            }\n        }\n    }\n    // 0x401e64\n    v15 = *(int32_t *)0x60a2fc;\n    v16 = v15;\n    v17 = (int32_t)a1 - v15;\n    if (g18 == 0) {\n        if (v17 == 0) {\n            // 0x4020c0\n            error(0, (int32_t)\"no username specified; at least one must be specified when using -l\" ^ (int32_t)\"no username specified; at least one must be specified when using -l\", dcgettext(NULL, \"no username specified; at least one must be specified when using -l\", 5));\n            // 0x4020df\n            function_402bd0(1);\n            // UNREACHABLE\n        }\n        if (v17 < 1) {\n            // 0x401ea2\n            return 0;\n        }\n        // 0x401e80\n        v2 = 8 * v16 + a2;\n        v10 = v2 + 8;\n        function_402340(*(int64_t *)v2);\n        while (a2 + 8 + 8 * ((int64_t)(v17 - 1) + v16) != v10) {\n            // 0x401e90\n            v2 = v10;\n            v10 = v2 + 8;\n            function_402340(*(int64_t *)v2);\n        }\n        // 0x401ea2\n        return 0;\n    }\n    // 0x401eb3\n    v6 = NULL;\n    v8 = function_4065c0(\"/var/run/utmp\", &v7, (int64_t *)&v6, 0);\n    if ((int32_t)v8 != 0) {\n        // 0x4020f8\n        error(1, *__errno_location(), \"%s\", (char *)function_404c20(0, 3, \"/var/run/utmp\"));\n        return &g62;\n    }\n    // 0x401edb\n    v9 = function_403080(2, (int64_t)&v7);\n    g45 = (char)v9 != 0 ? \"%Y-%m-%d %H:%M\" : \"%b %e %H:%M\";\n    g44 = (char)v9 != 0 ? 16 : 12;\n    if (g23 != 0) {\n        // 0x401f88\n        __printf_chk(1, \"%-8s\", dcgettext(NULL, \"Login\", 5));\n        if (g22 != 0) {\n            // 0x402045\n            __printf_chk(1, \" %-19s\", dcgettext(NULL, \"Name\", 5));\n        }\n        // 0x401fba\n        __printf_chk(1, \" %-9s\", dcgettext(NULL, \" TTY\", 5));\n        if (g24 != 0) {\n            // 0x402096\n            __printf_chk(1, \" %-6s\", dcgettext(NULL, \"Idle\", 5));\n        }\n        // 0x401fec\n        __printf_chk(1, \" %-*s\", (int64_t)g44, dcgettext(NULL, \"When\", 5));\n        if (g17 != 0) {\n            // 0x40206f\n            __printf_chk(1, \" %s\", dcgettext(NULL, \"Where\", 5));\n        }\n        // 0x402020\n        v11 = (int64_t)g36;\n        v12 = (int64_t *)(v11 + 40);\n        v13 = *v12;\n        if (v13 >= *(int64_t *)(v11 + 48)) {\n            // 0x4020e9\n            __overflow(g36, 10);\n        } else {\n            // 0x402035\n            *v12 = v13 + 1;\n            *(char *)v13 = 10;\n        }\n    }\n    if (v7 == 0) {\n        // 0x401ea2\n        return 0;\n    }\n    // 0x401f2b\n    v14 = v7;\n    v4 = (int64_t)v6;\n    str = (char *)(v4 + 44);\n    if (*str != 0) {\n        // 0x401f33\n        if (*(int16_t *)v4 == 7) {\n            // 0x401f3b\n            if (v17 != 0) {\n                v5 = 0;\n                while (v5 < (int64_t)v17) {\n                    // 0x401f69\n                    if (strncmp(str, (char *)*(int64_t *)(8 * (v5 + v16) + a2), 32) == 0) {\n                        goto lab_0x401f3f;\n                    }\n                    v5++;\n                }\n            } else {\n                // 0x401f3f\n                function_4026f0(v4);\n            }\n        }\n    }\n    // 0x401f16\n    v14--;\n    v3 = v4 + 384;\n    while (v14 != 0) {\n        // 0x401f2b\n        v4 = v3;\n        str = (char *)(v4 + 44);\n        if (*str != 0) {\n            // 0x401f33\n            if (*(int16_t *)v4 == 7) {\n                // 0x401f3b\n                if (v17 != 0) {\n                    v5 = 0;\n                    while (v5 < (int64_t)v17) {\n                        // 0x401f69\n                        if (strncmp(str, (char *)*(int64_t *)(8 * (v5 + v16) + a2), 32) == 0) {\n                            goto lab_0x401f3f;\n                        }\n                        v5++;\n                    }\n                } else {\n                    // 0x401f3f\n                    function_4026f0(v4);\n                }\n            }\n        }\n        // 0x401f16\n        v14--;\n        v3 = v4 + 384;\n    }\n    // 0x401ea2\n    return 0;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402130",
            "funcEndAddr": "40215b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402130\n    int64_t v1; // 0x402130\n    __libc_start_main(0x401cb0, (int32_t)a4, (char **)&v1, (void (*)())0x406d40, (void (*)())0x406da0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40215b",
            "funcStartAddr": "40215b",
            "funcEndAddr": "40217a",
            "decompiledFuncCode": "int64_t function_40215b(void) {\n    // 0x40215b\n    return &g35;\n}\n"
        },
        {
            "funcName": "function_40217a",
            "funcStartAddr": "40217a",
            "funcEndAddr": "4021b1",
            "decompiledFuncCode": "int64_t function_40217a(void) {\n    // 0x40217a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4021b1",
            "funcStartAddr": "4021b1",
            "funcEndAddr": "402208",
            "decompiledFuncCode": "int64_t function_4021b1(void) {\n    // 0x4021b1\n    if (g39 != 0) {\n        // 0x402207\n        int64_t result; // 0x4021b1\n        return result;\n    }\n    int64_t v1 = g40; // 0x4021e4\n    int64_t result2; // 0x4021f6\n    if (g40 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x4021f6\n        result2 = function_40215b();\n        g39 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x4021e6\n        v1++;\n    }\n    // 0x4021da\n    g40 = v1;\n    // 0x4021f6\n    result2 = function_40215b();\n    g39 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402208",
            "funcStartAddr": "402208",
            "funcEndAddr": "40220d",
            "decompiledFuncCode": "int64_t function_402208(void) {\n    // 0x402208\n    return function_40217a();\n}\n"
        },
        {
            "funcName": "function_402210",
            "funcStartAddr": "402210",
            "funcEndAddr": "40233e",
            "decompiledFuncCode": "int64_t function_402210(int64_t str, int64_t str2) {\n    int64_t v1 = str2;\n    int32_t len = strlen((char *)str); // 0x402220\n    int64_t v2 = str; // 0x40222c\n    int64_t v3 = 0; // 0x40222c\n    uint64_t v4; // 0x402210\n    while (true) {\n        // 0x402230\n        v4 = v3;\n        char v5 = *(char *)v2; // 0x402230\n        v2++;\n        while (v5 != 38) {\n            // 0x402240\n            if (v5 == 0) {\n                // break (via goto) -> 0x402244\n                goto lab_0x402244;\n            }\n            v5 = *(char *)v2;\n            v2++;\n        }\n        // 0x402330\n        v3 = v4 + 1;\n    }\n  lab_0x402244:;\n    int64_t v6 = (int64_t)len + 1; // 0x402228\n    int64_t v7 = v6; // 0x402247\n    int64_t v8; // 0x402210\n    if (v4 != 0) {\n        uint64_t v9 = v6 - v4; // 0x40224c\n        uint64_t len2 = (int64_t)strlen((char *)str2); // 0x40224f\n        int64_t v10 = v4 * len2; // 0x402259\n        int64_t v11 = v10 + v9; // 0x40225d\n        if (v11 < v9) {\n            // 0x402339\n            function_4055b0(str2);\n            // UNREACHABLE\n        }\n        // 0x402282\n        v8 = str2;\n        v7 = v11;\n        if (v10 < 0 || (int128_t)len2 * (int128_t)v4 > 0xffffffffffffffff) {\n            // 0x402339\n            function_4055b0(str2);\n            // UNREACHABLE\n        }\n    }\n    char v12 = v8; // 0x402296\n    int64_t result = function_405360(v7); // 0x40228e\n    if (v12 == 0) {\n        // 0x40231f\n        *(char *)result = 0;\n        return result;\n    }\n    int64_t v13 = str2 + 1;\n    char v14 = v12; // 0x402210\n    int64_t v15 = result; // 0x402210\n    int64_t v16 = str; // 0x402210\n    int64_t v17; // 0x402210\n    int64_t v18; // 0x402210\n    char v19; // 0x402210\n    int64_t v20; // 0x402210\n    int64_t v21; // 0x402210\n    int64_t v22; // 0x402210\n    while (true) {\n      lab_0x4022bb_2:\n        // 0x4022bb\n        v18 = v16;\n        int64_t v23 = v15;\n        char v24 = v14;\n        if (v24 != 38) {\n            // 0x4022a8\n            *(char *)v23 = v24;\n            v20 = v23 + 1;\n            goto lab_0x4022ae;\n        } else {\n            int16_t ** v25 = __ctype_b_loc(); // 0x4022bf\n            int64_t v26 = (int64_t)*(char *)&v1; // 0x4022c4\n            int64_t v27 = str2; // 0x4022d8\n            int64_t v28 = v26; // 0x4022d8\n            int64_t v29 = v23; // 0x4022d8\n            if ((*(char *)((int64_t)*v25 + 1 + 2 * v26) & 2) != 0) {\n                int32_t v30 = *(int32_t *)(4 * v26 + (int64_t)*__ctype_toupper_loc()); // 0x4022ee\n                *(char *)v23 = (char)v30;\n                v27 = v13;\n                v28 = (int64_t)*(char *)v13;\n                v29 = v23 + 1;\n            }\n            // 0x4022f5\n            v20 = v29;\n            int64_t v31 = v27; // 0x4022f7\n            int64_t v32 = v28; // 0x4022f7\n            int64_t v33 = v29; // 0x4022f7\n            if (v28 == 0) {\n                goto lab_0x4022ae;\n            } else {\n                int64_t v34 = v31 + 1; // 0x402300\n                int64_t v35 = v33 + 1; // 0x402304\n                *(char *)v33 = (char)v32;\n                unsigned char v36 = *(char *)v34; // 0x40230b\n                v31 = v34;\n                v33 = v35;\n                while (v36 != 0) {\n                    // 0x402300\n                    v34 = v31 + 1;\n                    v35 = v33 + 1;\n                    *(char *)v33 = (char)(int64_t)v36;\n                    v36 = *(char *)v34;\n                    v31 = v34;\n                    v33 = v35;\n                }\n                int64_t v37 = v18 + 1; // 0x402312\n                char v38 = *(char *)v37; // 0x402316\n                v19 = v38;\n                v21 = v35;\n                v17 = v37;\n                v22 = v35;\n                if (v38 == 0) {\n                    // break -> 0x40231f\n                    break;\n                }\n                goto lab_0x4022bb;\n            }\n        }\n    }\n  lab_0x40231f:\n    // 0x40231f\n    *(char *)v22 = 0;\n    return result;\n  lab_0x4022ae:;\n    int64_t v39 = v18 + 1; // 0x4022ae\n    char v40 = *(char *)v39; // 0x4022b2\n    v19 = v40;\n    v21 = v20;\n    v17 = v39;\n    v22 = v20;\n    if (v40 == 0) {\n        // break -> 0x40231f\n        goto lab_0x40231f;\n    }\n    goto lab_0x4022bb;\n  lab_0x4022bb:\n    // 0x4022bb\n    v14 = v19;\n    v15 = v21;\n    v16 = v17;\n    goto lab_0x4022bb_2;\n}\n"
        },
        {
            "funcName": "function_402340",
            "funcStartAddr": "402340",
            "funcEndAddr": "4026ee",
            "decompiledFuncCode": "int64_t function_402340(int64_t a1) {\n    char * name = (char *)a1; // 0x402350\n    struct passwd * v1 = getpwnam(name); // 0x402350\n    __printf_chk(1, dcgettext(NULL, \"Login name: \", 5));\n    __printf_chk(1, \"%-28s\", name);\n    __printf_chk(1, dcgettext(NULL, \"In real life: \", 5));\n    if (v1 == NULL) {\n        // 0x40245f\n        return __printf_chk(1, \" %s\", dcgettext(NULL, \"???\\n\", 5));\n    }\n    int64_t v2 = (int64_t)v1; // 0x402350\n    int64_t * v3 = (int64_t *)(v2 + 24); // 0x4023b5\n    int64_t str = *v3; // 0x4023b5\n    char * found_char_pos = strchr((char *)str, 44); // 0x4023c1\n    int64_t v4 = str; // 0x4023c9\n    if (found_char_pos != NULL) {\n        // 0x4023cb\n        *found_char_pos = 0;\n        v4 = *v3;\n    }\n    int64_t v5 = function_402210(v4, *(int64_t *)v1); // 0x4023d8\n    __printf_chk(1, \" %s\", (char *)v5);\n    free((int64_t *)v5);\n    int64_t v6 = (int64_t)g36; // 0x4023fc\n    int64_t * v7 = (int64_t *)(v6 + 40); // 0x402403\n    uint64_t v8 = *v7; // 0x402403\n    if (v8 >= *(int64_t *)(v6 + 48)) {\n        // 0x4026c0\n        __overflow(g36, 10);\n    } else {\n        // 0x402411\n        *v7 = v8 + 1;\n        *(char *)v8 = 10;\n    }\n    // 0x40241c\n    int64_t * str2; // 0x402340\n    if (g19 != 0) {\n        // 0x402470\n        __printf_chk(1, dcgettext(NULL, \"Directory: \", 5));\n        int64_t * v9 = (int64_t *)(v2 + 32);\n        __printf_chk(1, \"%-29s\", (char *)*v9);\n        __printf_chk(1, dcgettext(NULL, \"Shell: \", 5));\n        __printf_chk(1, \" %s\", (char *)*(int64_t *)(v2 + 40));\n        int64_t v10 = (int64_t)g36; // 0x4024da\n        int64_t * v11 = (int64_t *)(v10 + 40); // 0x4024e1\n        uint64_t v12 = *v11; // 0x4024e1\n        if (v12 >= *(int64_t *)(v10 + 48)) {\n            // 0x4026df\n            __overflow(g36, 10);\n            goto lab_0x402425;\n        } else {\n            // 0x4024ef\n            *v11 = v12 + 1;\n            *(char *)v12 = 10;\n            str2 = v9;\n            if (g21 == 0) {\n                goto lab_0x402432;\n            } else {\n                goto lab_0x402507;\n            }\n        }\n    } else {\n        goto lab_0x402425;\n    }\n  lab_0x402425:\n    // 0x402425\n    if (g21 != 0) {\n        // 0x402425\n        str2 = (int64_t *)(v2 + 32);\n        goto lab_0x402507;\n    } else {\n        goto lab_0x402432;\n    }\n  lab_0x402432:;\n    // 0x402432\n    int64_t * str4; // 0x402340\n    if (g20 != 0) {\n        // 0x402432\n        str4 = (int64_t *)(v2 + 32);\n        goto lab_0x4025ce;\n    } else {\n        goto lab_0x40243f;\n    }\n  lab_0x402507:;\n    int64_t v13 = function_405360((int64_t)strlen((char *)*str2) + 10); // 0x402514\n    char * str3 = (char *)v13; // 0x402523\n    char * v14 = stpcpy(str3, (char *)*str2); // 0x402523\n    *(int64_t *)v14 = 0x63656a6f72702e2f;\n    *(int16_t *)((int64_t)v14 + 8) = 116;\n    struct _IO_FILE * file = fopen(str3, \"r\"); // 0x402546\n    int64_t data; // bp-1064, 0x402340\n    if (file != NULL) {\n        // 0x402553\n        __printf_chk(1, dcgettext(NULL, \"Project: \", 5));\n        int32_t n = fread_unlocked(&data, 1, 1024, file); // 0x4025a7\n        if (n != 0) {\n            fwrite_unlocked(&data, 1, n, g36);\n            int32_t v15 = fread_unlocked(&data, 1, 1024, file); // 0x4025a7\n            int32_t n2 = v15; // 0x4025af\n            while (v15 != 0) {\n                // 0x402580\n                fwrite_unlocked(&data, 1, n2, g36);\n                v15 = fread_unlocked(&data, 1, 1024, file);\n                n2 = v15;\n            }\n        }\n        // 0x4025b1\n        function_4055f0((int64_t)file, 1);\n    }\n    // 0x4025b9\n    free((int64_t *)v13);\n    str4 = str2;\n    if (g20 == 0) {\n        goto lab_0x40243f;\n    } else {\n        goto lab_0x4025ce;\n    }\n  lab_0x40243f:;\n    int64_t v16 = (int64_t)g36; // 0x40243f\n    int64_t * v17 = (int64_t *)(v16 + 40); // 0x402446\n    uint64_t v18 = *v17; // 0x402446\n    int64_t result; // 0x402340\n    if (v18 >= *(int64_t *)(v16 + 48)) {\n        // 0x4026d0\n        result = __overflow(g36, 10);\n    } else {\n        // 0x402454\n        *v17 = v18 + 1;\n        *(char *)v18 = 10;\n        result = v18;\n    }\n    // 0x40245f\n    return result;\n  lab_0x4025ce:;\n    int64_t v19 = function_405360((int64_t)strlen((char *)*str4) + 7); // 0x4025db\n    char * str5 = (char *)v19; // 0x4025ea\n    char * v20 = stpcpy(str5, (char *)*str4); // 0x4025ea\n    int64_t v21 = (int64_t)v20; // 0x4025ea\n    *(int32_t *)v20 = 0x6c702e2f;\n    *(int16_t *)(v21 + 4) = 0x6e61;\n    *(char *)(v21 + 6) = 0;\n    struct _IO_FILE * file2 = fopen(str5, \"r\"); // 0x40260a\n    if (file2 != NULL) {\n        // 0x402617\n        __printf_chk(1, dcgettext(NULL, \"Plan:\\n\", 5));\n        int32_t n3 = fread_unlocked(&data, 1, 1024, file2); // 0x402667\n        if (n3 != 0) {\n            fwrite_unlocked(&data, 1, n3, g36);\n            int32_t v22 = fread_unlocked(&data, 1, 1024, file2); // 0x402667\n            int32_t n4 = v22; // 0x40266f\n            while (v22 != 0) {\n                // 0x402640\n                fwrite_unlocked(&data, 1, n4, g36);\n                v22 = fread_unlocked(&data, 1, 1024, file2);\n                n4 = v22;\n            }\n        }\n        // 0x402671\n        function_4055f0((int64_t)file2, 1);\n    }\n    // 0x402679\n    free((int64_t *)v19);\n    goto lab_0x40243f;\n}\n"
        },
        {
            "funcName": "function_4026f0",
            "funcStartAddr": "4026f0",
            "funcEndAddr": "402bc4",
            "decompiledFuncCode": "int64_t function_4026f0(int64_t a1) {\n    int64_t v1 = a1 + 8; // 0x402704\n    char * v2 = (char *)v1;\n    char v3 = *v2; // 0x402704\n    int64_t v4; // 0x4026f0\n    int64_t v5; // 0x4026f0\n    int64_t v6; // bp-520, 0x4026f0\n    if (v3 != 47) {\n        // 0x402a80\n        v6 = 0x7665642f;\n        int64_t v7; // bp-515, 0x4026f0\n        int64_t v8 = &v7; // 0x402a9b\n        v4 = v8;\n        v5 = v8;\n        if (v3 != 0) {\n            goto lab_0x402737;\n        } else {\n            goto lab_0x402747;\n        }\n    } else {\n        // 0x402711\n        v4 = &v6;\n        goto lab_0x402737;\n    }\n  lab_0x402737:;\n    int64_t v9 = v4 + 1; // 0x402737\n    int64_t v10 = v1 + 1; // 0x40273b\n    *(char *)v4 = v3;\n    v5 = v9;\n    while (v10 < a1 + 40) {\n        char v11 = *(char *)v10; // 0x402730\n        int64_t v12 = v9; // 0x402735\n        v5 = v9;\n        if (v11 == 0) {\n            // break -> 0x402747\n            break;\n        }\n        v9 = v12 + 1;\n        v10++;\n        *(char *)v12 = v11;\n        v5 = v9;\n    }\n    goto lab_0x402747;\n  lab_0x402747:\n    // 0x402747\n    *(char *)v5 = 0;\n    int64_t v13; // bp-472, 0x4026f0\n    int32_t v14 = __xstat(1, (char *)&v6, (struct stat *)&v13); // 0x402754\n    char v15 = 63; // 0x40275b\n    if (v14 == 0) {\n        // 0x402761\n        int32_t v16; // 0x4026f0\n        v15 = (v16 & 16) == 0 ? 42 : 32;\n    }\n    int64_t v17 = 0;\n    int64_t v18 = a1 + 44; // 0x40277e\n    char name; // bp-328, 0x4026f0\n    int64_t v19 = &name; // 0x402796\n    char * v20 = (char *)v18; // 0x40279e\n    __printf_chk(1, \"%-8.*s\", 32, v20);\n    if (g22 != 0) {\n        char v21 = *v20; // 0x4027ac\n        char * v22 = &name; // 0x4027b9\n        if (v21 != 0) {\n            int64_t v23 = v19 + 1; // 0x4029b3\n            int64_t v24 = v18 + 1; // 0x4029b7\n            *(char *)v19 = v21;\n            while (a1 + 76 > v24) {\n                char v25 = *(char *)v24; // 0x4029a8\n                int64_t v26 = v23; // 0x4029ad\n                if (v25 == 0) {\n                    // break -> 0x4027c0\n                    break;\n                }\n                v23 = v26 + 1;\n                v24++;\n                *(char *)v26 = v25;\n            }\n            // 0x4027c0\n            v22 = (char *)v23;\n        }\n        // 0x4027c0\n        *v22 = 0;\n        struct passwd * v27 = getpwnam(&name); // 0x4027c6\n        if (v27 == NULL) {\n            // 0x402ad2\n            __printf_chk(1, \" %19s\", dcgettext(NULL, \"        ???\", 5));\n        } else {\n            int64_t * v28 = (int64_t *)((int64_t)v27 + 24); // 0x4027d7\n            int64_t str = *v28; // 0x4027d7\n            char * found_char_pos = strchr((char *)str, 44); // 0x4027e8\n            int64_t v29 = str; // 0x4027f5\n            if (found_char_pos != NULL) {\n                // 0x4027f7\n                *found_char_pos = 0;\n                v29 = *v28;\n            }\n            int64_t v30 = function_402210(v29, *(int64_t *)v27); // 0x402804\n            __printf_chk(1, \" %-19.19s\", (char *)v30);\n            free((int64_t *)v30);\n        }\n    }\n    // 0x402828\n    __printf_chk(1, \" %c%-8.*s\", v15, 32, v2);\n    if (g24 != 0) {\n        int64_t v31; // 0x4026f0\n        if (v17 != 0) {\n            // 0x4029e0\n            if (g43 == NULL) {\n                // 0x402afc\n                time((int32_t *)&g43);\n            }\n            int64_t v32 = (int64_t)g43 - v17; // 0x4029f0\n            v31 = (int64_t)\"     \";\n            if (v32 >= 60) {\n                if (v32 > 0x1517f) {\n                    // 0x402b4f\n                    __sprintf_chk((char *)&g42, 1, 22, \"%lud\", 0);\n                    v31 = (int64_t)&g42;\n                } else {\n                    // 0x402a0f\n                    __sprintf_chk((char *)&g42, 1, 22, \"%02d:%02d\", v32 >> 63, 0);\n                    v31 = (int64_t)&g42;\n                }\n            }\n        } else {\n            // 0x402856\n            v31 = (int64_t)dcgettext(NULL, \"?????\", 5);\n        }\n        // 0x40286a\n        __printf_chk(1, \" %-6s\", (char *)v31);\n    }\n    // 0x40287b\n    name = (char)*(int32_t *)(a1 + 340);\n    struct tm * time_info = localtime((int32_t *)&name); // 0x40288d\n    int64_t v33; // 0x4026f0\n    if (time_info == NULL) {\n        // 0x402ab8\n        v33 = function_4030e0((int64_t)name, (int64_t *)&g41);\n    } else {\n        // 0x40289b\n        strftime((char *)&g41, 33, g45, time_info);\n        v33 = (int64_t)&g41;\n    }\n    // 0x4028b9\n    __printf_chk(1, \" %s\", (char *)v33);\n    int64_t v34; // 0x4026f0\n    int64_t v35; // 0x4026f0\n    char * found_char_pos2; // 0x40291a\n    if (g17 == 0) {\n        goto lab_0x402970;\n    } else {\n        int64_t v36 = a1 + 76; // 0x4028d7\n        char v37 = *(char *)v36; // 0x4028d7\n        if (v37 == 0) {\n            goto lab_0x402970;\n        } else {\n            int64_t v38 = v36; // 0x4028f1\n            int64_t v39 = v19 + 1; // 0x4028ff\n            v38++;\n            *(char *)v19 = v37;\n            while (a1 + 332 > v38) {\n                char v40 = *(char *)v38; // 0x4028f8\n                int64_t v41 = v39; // 0x4028fd\n                if (v40 == 0) {\n                    // break -> 0x40290f\n                    break;\n                }\n                v39 = v41 + 1;\n                v38++;\n                *(char *)v41 = v40;\n            }\n            // 0x40290f\n            *(char *)v39 = 0;\n            found_char_pos2 = strchr(&name, 58);\n            if (found_char_pos2 == NULL) {\n                // 0x402b12\n                if (name != 0) {\n                    int64_t v42 = function_402fa0((int64_t *)&name); // 0x402bae\n                    v35 = v42;\n                    if (v42 != 0) {\n                        goto lab_0x402b23;\n                    } else {\n                        // 0x402b20\n                        v35 = v19;\n                        goto lab_0x402b23;\n                    }\n                } else {\n                    // 0x402b20\n                    v35 = v19;\n                    goto lab_0x402b23;\n                }\n            } else {\n                // 0x402928\n                *found_char_pos2 = 0;\n                if (name != 0) {\n                    int64_t v43 = function_402fa0((int64_t *)&name); // 0x402b95\n                    v34 = v43;\n                    if (v43 != 0) {\n                        goto lab_0x402940;\n                    } else {\n                        // 0x40293d\n                        v34 = v19;\n                        goto lab_0x402940;\n                    }\n                } else {\n                    // 0x40293d\n                    v34 = v19;\n                    goto lab_0x402940;\n                }\n            }\n        }\n    }\n  lab_0x402970:;\n    int64_t v44 = (int64_t)g36; // 0x402970\n    int64_t * v45 = (int64_t *)(v44 + 40); // 0x402977\n    uint64_t v46 = *v45; // 0x402977\n    int64_t result; // 0x4026f0\n    if (v46 >= *(int64_t *)(v44 + 48)) {\n        // 0x402b40\n        result = __overflow(g36, 10);\n    } else {\n        // 0x402985\n        *v45 = v46 + 1;\n        *(char *)v46 = 10;\n        result = v46;\n    }\n    // 0x402990\n    return result;\n  lab_0x402b23:\n    // 0x402b23\n    __printf_chk(1, \" %s\", (char *)v35);\n    int64_t v47 = v35; // 0x402b37\n    goto lab_0x402960;\n  lab_0x402940:;\n    int64_t v48 = (int64_t)found_char_pos2 + 1; // 0x402933\n    v35 = v34;\n    if (v48 == 0) {\n        goto lab_0x402b23;\n    } else {\n        // 0x402949\n        __printf_chk(1, \" %s:%s\", (char *)v34, (char *)v48);\n        v47 = v34;\n        goto lab_0x402960;\n    }\n  lab_0x402960:\n    // 0x402960\n    if (v47 != v19) {\n        // 0x402965\n        free((int64_t *)v47);\n    }\n    goto lab_0x402970;\n}\n"
        },
        {
            "funcName": "function_402bd0",
            "funcStartAddr": "402bd0",
            "funcEndAddr": "402f05",
            "decompiledFuncCode": "int64_t function_402bd0(int32_t status) {\n    // 0x402bd0\n    if (status != 0) {\n        // 0x402bea\n        __fprintf_chk(g38, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x402c0f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402c16\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [USER]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\n  -l              produce long format output for the specified USERs\\n  -b              omit the user's home directory and shell in long format\\n  -h              omit the user's project file in long format\\n  -p              omit the user's plan file in long format\\n  -s              do short format output, this is the default\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"  -f              omit the line of column headings in short format\\n  -w              omit the user's full name in short format\\n  -i              omit the user's full name and remote host in short format\\n  -q              omit the user's full name, remote host and idle time\\n                  in short format\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g36);\n    __printf_chk(1, dcgettext(NULL, \"\\nA lightweight 'finger' program;  print user information.\\nThe utmp file will be %s.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x402ce5\n    bool v2; // 0x402bd0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402d68\n    int64_t v6 = *(int64_t *)v5; // 0x402d6c\n    int64_t v7 = 6; // 0x402d72\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"pinky\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402d7e\n        char v11 = *(char *)v9; // 0x402d7e\n        char v12 = v11; // 0x402d7e\n        bool v13 = false; // 0x402d7e\n        while (v10 == v11) {\n            // 0x402d74\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402d7e\n            int64_t v15 = v8 + v3; // 0x402d7e\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402d8a\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x402d8a\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402e9c;\n        } else {\n            // 0x402e86\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402edb\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402dec;\n            } else {\n                goto lab_0x402e9c;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402dec;\n        } else {\n            // 0x402dd2\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402edb\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402dec;\n            } else {\n                goto lab_0x402dec;\n            }\n        }\n    }\n  lab_0x402e9c:\n    // 0x402e9c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402e2c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402c0f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402dec:\n    // 0x402dec\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402e2c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402c0f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f10",
            "funcStartAddr": "402f10",
            "funcEndAddr": "402f9e",
            "decompiledFuncCode": "int64_t function_402f10(int64_t node, int64_t * a2) {\n    // 0x402f10\n    *(int32_t *)&g46 = 2;\n    struct addrinfo * addr_info = NULL; // bp-32, 0x402f2f\n    int32_t v1 = getaddrinfo((char *)node, NULL, (struct addrinfo *)&g46, &addr_info); // 0x402f3d\n    if (v1 != 0) {\n        // 0x402f88\n        if (a2 == NULL) {\n            // 0x402f78\n            return 0;\n        }\n        // 0x402f8f\n        *(int32_t *)a2 = v1;\n        return 0;\n    }\n    int64_t v2 = *(int64_t *)((int64_t)addr_info + 32); // 0x402f4b\n    char * v3 = strdup((char *)(v2 == 0 ? node : v2)); // 0x402f57\n    if (a2 != NULL && v3 == NULL) {\n        // 0x402f69\n        *(int32_t *)a2 = -10;\n    }\n    // 0x402f70\n    freeaddrinfo(addr_info);\n    // 0x402f78\n    return (int64_t)v3;\n}\n"
        },
        {
            "funcName": "function_402fa0",
            "funcStartAddr": "402fa0",
            "funcEndAddr": "402faa",
            "decompiledFuncCode": "int64_t function_402fa0(int64_t * a1) {\n    // 0x402fa0\n    return function_402f10((int64_t)a1, (int64_t *)&g47);\n}\n"
        },
        {
            "funcName": "function_402fb0",
            "funcStartAddr": "402fb0",
            "funcEndAddr": "402fbb",
            "decompiledFuncCode": "int64_t function_402fb0(void) {\n    // 0x402fb0\n    return (int64_t)gai_strerror(g47);\n}\n"
        },
        {
            "funcName": "function_402fc0",
            "funcStartAddr": "402fc0",
            "funcEndAddr": "402fc8",
            "decompiledFuncCode": "int64_t function_402fc0(int64_t a1) {\n    // 0x402fc0\n    g49 = a1;\n    int64_t result; // 0x402fc0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402fd0",
            "funcStartAddr": "402fd0",
            "funcEndAddr": "402fd8",
            "decompiledFuncCode": "int64_t function_402fd0(int64_t a1) {\n    // 0x402fd0\n    g48 = a1;\n    int64_t result; // 0x402fd0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402fe0",
            "funcStartAddr": "402fe0",
            "funcEndAddr": "40307e",
            "decompiledFuncCode": "int64_t function_402fe0(void) {\n    // 0x402fe0\n    int64_t v1; // 0x402fe0\n    if ((int32_t)v1 == 0) {\n        // 0x40301c\n        int64_t result; // 0x402fe0\n        return result;\n    }\n    int32_t * err_num = __errno_location(); // 0x402ff6\n    if (g48 != 0) {\n        // 0x403007\n        if (*err_num == 32) {\n            int64_t result2 = (int64_t)err_num; // 0x402ff6\n            if ((int32_t)result2 == 0) {\n                // 0x40301c\n                return result2;\n            }\n            // 0x40305e\n            _exit(g26);\n            // UNREACHABLE\n        }\n    }\n    char * v2 = dcgettext(NULL, \"write error\", 5); // 0x40302f\n    if (g49 == 0) {\n        // 0x403069\n        error(0, *err_num, \"%s\", v2);\n    } else {\n        // 0x403043\n        error(0, *err_num, \"%s: %s\", (char *)function_404bf0((int64_t)g49), v2);\n    }\n    // 0x40305e\n    _exit(g26);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403080",
            "funcStartAddr": "403080",
            "funcEndAddr": "4030de",
            "decompiledFuncCode": "int64_t function_403080(int64_t locale_category, int64_t a2) {\n    char * locale = setlocale((int32_t)locale_category, NULL); // 0x403086\n    if (locale == NULL) {\n        // 0x4030b3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x403086\n    bool v2; // 0x403080\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g3; // 0x403080\n    int64_t v5 = v1; // 0x403080\n    int64_t v6 = 2; // 0x4030a5\n    unsigned char v7 = *(char *)v5; // 0x4030a5\n    char v8 = *(char *)v4; // 0x4030a5\n    char v9 = v8; // 0x4030a5\n    bool v10 = false; // 0x4030a5\n    while (v7 == v8) {\n        // 0x403098\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4030b1\n    int64_t v13 = v1; // 0x4030b1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4030b3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4030b1\n    unsigned char v15 = *(char *)v13; // 0x4030cd\n    char v16 = *(char *)v12; // 0x4030cd\n    char v17 = v16; // 0x4030cd\n    bool v18 = false; // 0x4030cd\n    while (v15 == v16) {\n        // 0x4030c0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4030e0",
            "funcStartAddr": "4030e0",
            "funcEndAddr": "40317c",
            "decompiledFuncCode": "int64_t function_4030e0(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x4030e0\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x403105\n    if (a1 >= 0) {\n        result--;\n        *(char *)result = (char)a1 + 48;\n        // 0x403136\n        return result;\n    }\n    int64_t v2 = v1;\n    int64_t v3 = a1 / 0x8000000000000000; // 0x403158\n    int64_t v4 = v2 - 1; // 0x403168\n    *(char *)v4 = 48 - (char)a1 + 10 * (char)v3;\n    while (v3 != 0) {\n        uint64_t v5 = v3;\n        v2 = v4;\n        v3 = v5 / 0x8000000000000000;\n        v4 = v2 - 1;\n        *(char *)v4 = 48 - (char)v5 + 10 * (char)v3;\n    }\n    int64_t result2 = v2 - 2; // 0x403170\n    *(char *)result2 = 45;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403180",
            "funcStartAddr": "403180",
            "funcEndAddr": "403219",
            "decompiledFuncCode": "int64_t function_403180(int64_t str) {\n    // 0x403180\n    if (str == 0) {\n        // 0x4031f9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g38);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40318e\n    int64_t result = (int64_t)found_char_pos; // 0x40318e\n    if (found_char_pos == NULL) {\n        // 0x4031e9\n        g50 = str;\n        g37 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403198\n    if (v1 - str < 7) {\n        // 0x4031e9\n        g50 = str;\n        g37 = str;\n        return result;\n    }\n    // 0x4031a8\n    bool v2; // 0x403180\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403180\n    int64_t v5 = result - 6; // 0x403180\n    int64_t v6 = 7; // 0x4031b6\n    unsigned char v7 = *(char *)v5; // 0x4031b6\n    char v8 = *(char *)v4; // 0x4031b6\n    char v9 = v8; // 0x4031b6\n    bool v10 = false; // 0x4031b6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4031c0\n    int64_t v13 = v1; // 0x4031c0\n    int64_t v14 = 3; // 0x4031c0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4031e9\n        g50 = str;\n        g37 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4031d2\n    char v16 = *(char *)v12; // 0x4031d2\n    char v17 = v16; // 0x4031d2\n    bool v18 = false; // 0x4031d2\n    while (v15 == v16) {\n        // 0x4031c2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4031dc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4031de\n        v20 = result + 4;\n        g35 = v20;\n    }\n    // 0x4031e9\n    g50 = v20;\n    g37 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403220",
            "funcStartAddr": "403220",
            "funcEndAddr": "403312",
            "decompiledFuncCode": "int64_t function_403220(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x403234\n    int64_t result = (int64_t)v1; // 0x403234\n    if (result != a1) {\n        // 0x403241\n        return result;\n    }\n    int64_t v2 = function_4067d0(); // 0x403250\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403306\n    if (v3 == 85) {\n        // 0x403260\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4032f8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x40328e\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x40329b\n        // 0x403241\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4032f8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x4032dd\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x4032ea\n    // 0x403241\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403320",
            "funcStartAddr": "403320",
            "funcEndAddr": "403377",
            "decompiledFuncCode": "int64_t function_403320(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x403320\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403368\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403377",
            "funcStartAddr": "403377",
            "funcEndAddr": "404541",
            "decompiledFuncCode": "int64_t function_403377(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4033c1\n    int64_t v3 = 0; // 0x4033c1\n    int64_t v4; // 0x403377\n    int64_t v5; // 0x403377\n    int64_t v6; // 0x403377\n    int64_t v7; // 0x403377\n    int64_t v8; // 0x403377\n    int64_t v9; // 0x403377\n    int64_t v10; // 0x403377\n    int64_t v11; // 0x403377\n    int64_t v12; // 0x403377\n    int64_t v13; // 0x403377\n    int64_t v14; // 0x403377\n    int64_t v15; // 0x403377\n    int64_t v16; // 0x403377\n    int64_t v17; // 0x403377\n    int64_t v18; // 0x403377\n    int64_t result; // 0x403377\n    int64_t v19; // 0x403377\n    int32_t wc; // bp+132, 0x403377\n    int64_t ps; // bp+136, 0x403377\n    char v20; // 0x403930\n    int64_t v21; // 0x403930\n    int64_t v22; // 0x403cd8\n    int64_t v23; // 0x403377\n    int64_t v24; // 0x403cf7\n    int32_t v25; // 0x403377\n    while (true) {\n      lab_0x4033c8_2:\n        // 0x4033c8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403377\n        int64_t v27; // 0x4033fc\n        while (true) {\n          lab_0x4033c8:\n            // 0x4033c8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4033d3\n            if (v15 == -1) {\n                // 0x4033d5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4033e3\n            if (v28) {\n                // break (via goto) -> 0x403b48\n                goto lab_0x403b48;\n            }\n            // 0x4033ec\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g61 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4039db\n                    if (v25 % 2 == 0) {\n                        goto lab_0x403521;\n                    }\n                    // 0x403dfd\n                    v26 = v5 + 1;\n                    goto lab_0x4033c8;\n                }\n                case 7: {\n                    goto lab_0x403521;\n                }\n                case 8: {\n                    goto lab_0x403521;\n                }\n                case 9: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x403521;\n                }\n                case 12: {\n                    goto lab_0x403521;\n                }\n                case 13: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x4034ed;\n                }\n                case 36: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x403521;\n                }\n                case 38: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x403521;\n                }\n                case 44: {\n                    goto lab_0x403521;\n                }\n                case 45: {\n                    goto lab_0x403521;\n                }\n                case 46: {\n                    goto lab_0x403521;\n                }\n                case 47: {\n                    goto lab_0x403521;\n                }\n                case 48: {\n                    goto lab_0x403521;\n                }\n                case 49: {\n                    goto lab_0x403521;\n                }\n                case 50: {\n                    goto lab_0x403521;\n                }\n                case 51: {\n                    goto lab_0x403521;\n                }\n                case 52: {\n                    goto lab_0x403521;\n                }\n                case 53: {\n                    goto lab_0x403521;\n                }\n                case 54: {\n                    goto lab_0x403521;\n                }\n                case 55: {\n                    goto lab_0x403521;\n                }\n                case 56: {\n                    goto lab_0x403521;\n                }\n                case 57: {\n                    goto lab_0x403521;\n                }\n                case 58: {\n                    goto lab_0x403521;\n                }\n                case 59: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x403521;\n                }\n                case 66: {\n                    goto lab_0x403521;\n                }\n                case 67: {\n                    goto lab_0x403521;\n                }\n                case 68: {\n                    goto lab_0x403521;\n                }\n                case 69: {\n                    goto lab_0x403521;\n                }\n                case 70: {\n                    goto lab_0x403521;\n                }\n                case 71: {\n                    goto lab_0x403521;\n                }\n                case 72: {\n                    goto lab_0x403521;\n                }\n                case 73: {\n                    goto lab_0x403521;\n                }\n                case 74: {\n                    goto lab_0x403521;\n                }\n                case 75: {\n                    goto lab_0x403521;\n                }\n                case 76: {\n                    goto lab_0x403521;\n                }\n                case 77: {\n                    goto lab_0x403521;\n                }\n                case 78: {\n                    goto lab_0x403521;\n                }\n                case 79: {\n                    goto lab_0x403521;\n                }\n                case 80: {\n                    goto lab_0x403521;\n                }\n                case 81: {\n                    goto lab_0x403521;\n                }\n                case 82: {\n                    goto lab_0x403521;\n                }\n                case 83: {\n                    goto lab_0x403521;\n                }\n                case 84: {\n                    goto lab_0x403521;\n                }\n                case 85: {\n                    goto lab_0x403521;\n                }\n                case 86: {\n                    goto lab_0x403521;\n                }\n                case 87: {\n                    goto lab_0x403521;\n                }\n                case 88: {\n                    goto lab_0x403521;\n                }\n                case 89: {\n                    goto lab_0x403521;\n                }\n                case 90: {\n                    goto lab_0x403521;\n                }\n                case 91: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x403521;\n                }\n                case 94: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x403521;\n                }\n                case 96: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x403521;\n                }\n                case 98: {\n                    goto lab_0x403521;\n                }\n                case 99: {\n                    goto lab_0x403521;\n                }\n                case 100: {\n                    goto lab_0x403521;\n                }\n                case 101: {\n                    goto lab_0x403521;\n                }\n                case 102: {\n                    goto lab_0x403521;\n                }\n                case 103: {\n                    goto lab_0x403521;\n                }\n                case 104: {\n                    goto lab_0x403521;\n                }\n                case 105: {\n                    goto lab_0x403521;\n                }\n                case 106: {\n                    goto lab_0x403521;\n                }\n                case 107: {\n                    goto lab_0x403521;\n                }\n                case 108: {\n                    goto lab_0x403521;\n                }\n                case 109: {\n                    goto lab_0x403521;\n                }\n                case 110: {\n                    goto lab_0x403521;\n                }\n                case 111: {\n                    goto lab_0x403521;\n                }\n                case 112: {\n                    goto lab_0x403521;\n                }\n                case 113: {\n                    goto lab_0x403521;\n                }\n                case 114: {\n                    goto lab_0x403521;\n                }\n                case 115: {\n                    goto lab_0x403521;\n                }\n                case 116: {\n                    goto lab_0x403521;\n                }\n                case 117: {\n                    goto lab_0x403521;\n                }\n                case 118: {\n                    goto lab_0x403521;\n                }\n                case 119: {\n                    goto lab_0x403521;\n                }\n                case 120: {\n                    goto lab_0x403521;\n                }\n                case 121: {\n                    goto lab_0x403521;\n                }\n                case 122: {\n                    goto lab_0x403521;\n                }\n                case 123: {\n                    goto lab_0x4034c5;\n                }\n                case 124: {\n                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4034c5;\n                }\n                case 126: {\n                    goto lab_0x4034ed;\n                }\n                default: {\n                    goto lab_0x4038c5;\n                }\n            }\n        }\n      lab_0x4038c5:\n        if (v23 != 1) {\n            // 0x403c30\n            ps = 0;\n            int64_t len = v15; // 0x403c40\n            if (v15 == -1) {\n                // 0x403c42\n                len = strlen((char *)str);\n            }\n            // 0x403c6e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x403ccf:\n                // 0x403ccf\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403cd4\n                int64_t v30 = v29 + str;\n                v24 = function_4064e0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40424a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40424a_2;\n                    }\n                    case -2: {\n                        // 0x40432d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404367\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40436a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404377\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404370\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40424a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40424a_2;\n                    }\n                    case 1: {\n                        goto lab_0x403ca0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x403d4c\n                        char v34 = *(char *)v33; // 0x403d5d\n                        unsigned char v35; // 0x403377\n                        if (v34 < 125) {\n                            // 0x403d68\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x403d7f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403d50\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x403d5d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403d68\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x403d7f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403d50\n                            v33++;\n                        }\n                        goto lab_0x403ca0;\n                    }\n                }\n            }\n            goto lab_0x40424a_2;\n        } else {\n            // 0x403914\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x403521;\n        }\n    }\n  lab_0x403b48:\n    // 0x403b48\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40444a\n        if (v8 > result) {\n            // 0x404453\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403777\n        return result;\n    }\n    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403521:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x403530\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40373a_2;\n        }\n    }\n    int64_t v39 = result; // 0x403631\n    char v40 = v20; // 0x403631\n    int64_t v41 = v38; // 0x403631\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x403631\n    int64_t v43 = v36; // 0x403631\n    goto lab_0x4035ad;\n  lab_0x40373a_2:\n    // 0x403777\n    return function_403320(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40424a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x403521;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x403e1e\n        int64_t v50 = v5 + 1; // 0x403f01\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403f08\n        char v52 = v20; // 0x403f08\n        int64_t v53 = result; // 0x403f08\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403ed1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403ed5\n            int64_t v56 = v54 + 1; // 0x403eda\n            int64_t v57 = v51 + 1; // 0x403f01\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x403ecc\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403ed1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403ed5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x4035ad;\n    }\n  lab_0x403ca0:\n    // 0x403ca0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x403cbf\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403cc2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40424a\n        goto lab_0x40424a_2;\n    }\n    goto lab_0x403ccf;\n  lab_0x4034ed:\n    // 0x4034ed\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40373a_2;\n    }\n    goto lab_0x403521;\n  lab_0x4034c5:;\n    bool v60 = v15 == 1; // 0x4034d0\n    if (v15 == -1) {\n        // 0x4034d2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4034de\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x403521;\n    } else {\n        goto lab_0x4034ed;\n    }\n  lab_0x4035ad:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4035b2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4035b6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4033c8_2;\n}\n"
        },
        {
            "funcName": "function_404550",
            "funcStartAddr": "404550",
            "funcEndAddr": "4046ee",
            "decompiledFuncCode": "int64_t function_404550(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x404552\n    int32_t * v3 = __errno_location(); // 0x40456c\n    int64_t v4 = (int64_t)g28; // 0x404571\n    int32_t v5 = *v3; // 0x40457b\n    int64_t v6 = v4; // 0x404591\n    if (v2 >= (int64_t)*(int32_t *)&g31) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4046e9\n            function_4055b0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4045a0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4045a7\n        int64_t v9; // 0x404550\n        if (g28 == &g29) {\n            int64_t v10 = function_4053c0(0, v8); // 0x4046ca\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g29); // 0x4046cf\n            *(int64_t *)&g28 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4053c0(v4, v8); // 0x4045bb\n            *(int64_t *)&g28 = v12;\n            v9 = v12;\n        }\n        // 0x4045ca\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g31; // 0x4045ca\n        int32_t v14 = v7; // 0x4045d1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g31 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x404601\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40460b\n    int64_t * v17 = (int64_t *)v15; // 0x40460e\n    uint64_t v18 = *v17; // 0x40460e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x404611\n    int64_t result = *v19; // 0x404611\n    int64_t v20; // 0x404550\n    uint64_t v21 = function_403320(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x404634\n    if (v18 > v21) {\n        // 0x4046ab\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x404647\n    *v17 = v22;\n    if (result != (int64_t)&g51) {\n        // 0x404657\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_405360(v22); // 0x404671\n    *v19 = result2;\n    int64_t v23; // 0x404550\n    function_403320(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x4046ab\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4046f0",
            "funcStartAddr": "4046f0",
            "funcEndAddr": "404724",
            "decompiledFuncCode": "int64_t function_4046f0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4046f7\n    int64_t result = function_405560(a1 == 0 ? (int64_t)&g52 : a1, 56); // 0x404716\n    return result;\n}\n"
        },
        {
            "funcName": "function_404730",
            "funcStartAddr": "404730",
            "funcEndAddr": "40473f",
            "decompiledFuncCode": "int64_t function_404730(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g52 : a1); // 0x40473c\n    return result;\n}\n"
        },
        {
            "funcName": "function_404740",
            "funcStartAddr": "404740",
            "funcEndAddr": "40474f",
            "decompiledFuncCode": "int64_t function_404740(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g52 : a1; // 0x404748\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g52;\n}\n"
        },
        {
            "funcName": "function_404750",
            "funcStartAddr": "404750",
            "funcEndAddr": "404783",
            "decompiledFuncCode": "int64_t function_404750(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g52 + 8 : a1 + 8; // 0x404769\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40476e\n    uint32_t v3 = *v2; // 0x40476e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404772\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404790",
            "funcStartAddr": "404790",
            "funcEndAddr": "4047a3",
            "decompiledFuncCode": "int64_t function_404790(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g52 + 4 : a1 + 4); // 0x40479c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4047b0",
            "funcStartAddr": "4047b0",
            "funcEndAddr": "4047db",
            "decompiledFuncCode": "int64_t function_4047b0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g52 : a1; // 0x4047b8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4047d5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4047cc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g52;\n}\n"
        },
        {
            "funcName": "function_4047e0",
            "funcStartAddr": "4047e0",
            "funcEndAddr": "404852",
            "decompiledFuncCode": "int64_t function_4047e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g52 : a5; // 0x404802\n    int32_t * v2 = __errno_location(); // 0x40480b\n    uint32_t v3 = *(int32_t *)v1; // 0x40482b\n    int64_t result = function_403320(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40483a\n    return result;\n}\n"
        },
        {
            "funcName": "function_404860",
            "funcStartAddr": "404860",
            "funcEndAddr": "404941",
            "decompiledFuncCode": "int64_t function_404860(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g52 : a4; // 0x404882\n    int32_t * v2 = __errno_location(); // 0x404888\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4048a7\n    int32_t * v4 = (int32_t *)v1; // 0x4048aa\n    int64_t v5 = function_403320(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4048c5\n    int64_t v6 = v5 + 1; // 0x4048ca\n    int64_t result = function_405360(v6); // 0x4048df\n    function_403320(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404924\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40492d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404950",
            "funcStartAddr": "404950",
            "funcEndAddr": "40495a",
            "decompiledFuncCode": "int64_t function_404950(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404950\n    return function_404860(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404960",
            "funcStartAddr": "404960",
            "funcEndAddr": "4049f5",
            "decompiledFuncCode": "int64_t function_404960(void) {\n    uint32_t v1 = *(int32_t *)&g31; // 0x404960\n    int64_t v2 = v1; // 0x404960\n    int64_t v3 = v2; // 0x404974\n    if (v1 >= 2) {\n        int64_t v4 = &g31;\n        int64_t v5 = v4 + 16; // 0x404993\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g62;\n        while (v5 != (int64_t)g28 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404990\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g62;\n        }\n    }\n    int64_t v6 = v3; // 0x4049ad\n    if (g29 != 0x60a400) {\n        // 0x4049af\n        free((int64_t *)g29);\n        g29 = 256;\n        *(int64_t *)&g30 = (int64_t)&g51;\n        v6 = &g62;\n    }\n    int64_t result = v6; // 0x4049d1\n    if (g28 != &g29) {\n        // 0x4049d3\n        free(g28);\n        *(int64_t *)&g28 = (int64_t)&g29;\n        result = &g62;\n    }\n    // 0x4049e6\n    *(int32_t *)&g31 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404a00",
            "funcStartAddr": "404a00",
            "funcEndAddr": "404a11",
            "decompiledFuncCode": "int64_t function_404a00(void) {\n    // 0x404a00\n    int64_t v1; // 0x404a00\n    return function_404550(v1, v1, -1, (int64_t *)&g52);\n}\n"
        },
        {
            "funcName": "function_404a20",
            "funcStartAddr": "404a20",
            "funcEndAddr": "404a2a",
            "decompiledFuncCode": "int64_t function_404a20(void) {\n    // 0x404a20\n    int64_t v1; // 0x404a20\n    return function_404550(v1, v1, v1, (int64_t *)&g52);\n}\n"
        },
        {
            "funcName": "function_404a30",
            "funcStartAddr": "404a30",
            "funcEndAddr": "404a46",
            "decompiledFuncCode": "int64_t function_404a30(int64_t a1) {\n    // 0x404a30\n    return function_404550(0, a1, -1, (int64_t *)&g52);\n}\n"
        },
        {
            "funcName": "function_404a50",
            "funcStartAddr": "404a50",
            "funcEndAddr": "404a62",
            "decompiledFuncCode": "int64_t function_404a50(int64_t a1, int64_t a2) {\n    // 0x404a50\n    return function_404550(0, a1, a2, (int64_t *)&g52);\n}\n"
        },
        {
            "funcName": "function_404a70",
            "funcStartAddr": "404a70",
            "funcEndAddr": "404ad8",
            "decompiledFuncCode": "int64_t function_404a70(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404a80\n    return function_404550((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "404b44",
            "decompiledFuncCode": "int64_t function_404ae0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404af0\n    return function_404550((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404b50",
            "funcStartAddr": "404b50",
            "funcEndAddr": "404b5c",
            "decompiledFuncCode": "int64_t function_404b50(int64_t a1, int64_t a2) {\n    // 0x404b50\n    return function_404a70(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404b60",
            "funcStartAddr": "404b60",
            "funcEndAddr": "404b6f",
            "decompiledFuncCode": "int64_t function_404b60(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404b60\n    return function_404ae0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404b70",
            "funcStartAddr": "404b70",
            "funcEndAddr": "404be0",
            "decompiledFuncCode": "int64_t function_404b70(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g52); // 0x404b7d\n    int128_t v2 = __asm_movdqa(g53); // 0x404b85\n    int128_t v3 = __asm_movdqa(g54); // 0x404b8d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404ba2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404bb8\n    uint32_t v6 = *v5; // 0x404bb8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x404bbd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_404550(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404be0",
            "funcStartAddr": "404be0",
            "funcEndAddr": "404bed",
            "decompiledFuncCode": "int64_t function_404be0(int64_t a1, int64_t a2) {\n    // 0x404be0\n    return function_404b70(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404bf0",
            "funcStartAddr": "404bf0",
            "funcEndAddr": "404c01",
            "decompiledFuncCode": "int64_t function_404bf0(int64_t a1) {\n    // 0x404bf0\n    return function_404b70(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404c10",
            "funcStartAddr": "404c10",
            "funcEndAddr": "404c1a",
            "decompiledFuncCode": "int64_t function_404c10(void) {\n    // 0x404c10\n    int64_t v1; // 0x404c10\n    return function_404b70(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404c20",
            "funcStartAddr": "404c20",
            "funcEndAddr": "404c8e",
            "decompiledFuncCode": "int64_t function_404c20(int32_t a1, int64_t a2, char * a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404c3a\n    return function_404550((int64_t)a1, (int64_t)a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404c90",
            "funcStartAddr": "404c90",
            "funcEndAddr": "404cfc",
            "decompiledFuncCode": "int64_t function_404c90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g52); // 0x404c97\n    int128_t v2 = __asm_movdqa(g53); // 0x404c9f\n    int128_t v3 = __asm_movdqa(g54); // 0x404ca7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404cc9\n    if (a2 == 0 || a3 == 0) {\n        // 0x404cf7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404cda\n    return function_404550(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404d00",
            "funcStartAddr": "404d00",
            "funcEndAddr": "404d09",
            "decompiledFuncCode": "int64_t function_404d00(void) {\n    // 0x404d00\n    int64_t v1; // 0x404d00\n    return function_404c90(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404d10",
            "funcStartAddr": "404d10",
            "funcEndAddr": "404d27",
            "decompiledFuncCode": "int64_t function_404d10(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404d10\n    return function_404c90(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404d30",
            "funcStartAddr": "404d30",
            "funcEndAddr": "404d43",
            "decompiledFuncCode": "int64_t function_404d30(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404d30\n    return function_404c90(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404d50",
            "funcStartAddr": "404d50",
            "funcEndAddr": "404d5a",
            "decompiledFuncCode": "int64_t function_404d50(void) {\n    // 0x404d50\n    int64_t v1; // 0x404d50\n    return function_404550(v1, v1, v1, &g27);\n}\n"
        },
        {
            "funcName": "function_404d60",
            "funcStartAddr": "404d60",
            "funcEndAddr": "404d72",
            "decompiledFuncCode": "int64_t function_404d60(int64_t a1, int64_t a2) {\n    // 0x404d60\n    return function_404550(0, a1, a2, &g27);\n}\n"
        },
        {
            "funcName": "function_404d80",
            "funcStartAddr": "404d80",
            "funcEndAddr": "404d91",
            "decompiledFuncCode": "int64_t function_404d80(void) {\n    // 0x404d80\n    int64_t v1; // 0x404d80\n    return function_404550(v1, v1, -1, &g27);\n}\n"
        },
        {
            "funcName": "function_404da0",
            "funcStartAddr": "404da0",
            "funcEndAddr": "404db6",
            "decompiledFuncCode": "int64_t function_404da0(int64_t a1) {\n    // 0x404da0\n    return function_404550(0, a1, -1, &g27);\n}\n"
        },
        {
            "funcName": "function_404dc0",
            "funcStartAddr": "404dc0",
            "funcEndAddr": "40519d",
            "decompiledFuncCode": "int64_t function_404dc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404e58\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x404ddc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404df6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x404e3b\n    if (a6 < 10) {\n        // 0x404e4a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404f42\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_4051a0",
            "funcStartAddr": "4051a0",
            "funcEndAddr": "4051c0",
            "decompiledFuncCode": "int64_t function_4051a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4051a0\n    if (a5 == 0) {\n        // 0x4051bb\n        return function_404dc0(a1, a2, a3, a4, a5, 0, (int64_t)&g62);\n    }\n    int64_t v1 = 0; // 0x4051a7\n    v1++;\n    int64_t v2 = v1; // 0x4051b9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4051b0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4051bb\n    return function_404dc0(a1, a2, a3, a4, a5, v2, (int64_t)&g62);\n}\n"
        },
        {
            "funcName": "function_4051c0",
            "funcStartAddr": "4051c0",
            "funcEndAddr": "405220",
            "decompiledFuncCode": "int64_t function_4051c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4051c0\n    int64_t v3 = &v2; // 0x4051c0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4051f3\n    int64_t v6; // 0x4051dd\n    int64_t * v7; // 0x4051fb\n    int64_t v8; // 0x4051fb\n    int64_t v9; // 0x405207\n    if (v5 < 48) {\n        // 0x4051d0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x405213\n            break;\n        }\n    } else {\n        // 0x4051fb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x405213\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4051f1\n    while (v4 != 9) {\n        // 0x4051e9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4051d0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x405213\n                break;\n            }\n        } else {\n            // 0x4051fb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x405213\n                break;\n            }\n        }\n        // 0x4051e9\n        v10 = 10;\n    }\n    // 0x405213\n    return function_404dc0(a1, a2, a3, a4, v3, v10, (int64_t)&g62);\n}\n"
        },
        {
            "funcName": "function_405220",
            "funcStartAddr": "405220",
            "funcEndAddr": "4052dc",
            "decompiledFuncCode": "int64_t function_405220(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x405220\n    int64_t v1; // bp-168, 0x405220\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x405220\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x405220\n    int64_t v8; // 0x405220\n    int64_t v9; // bp-56, 0x405220\n    int64_t v10; // 0x405285\n    int64_t v11; // 0x4052a9\n    if ((int32_t)v6 < 48) {\n        // 0x405270\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4052c0\n            break;\n        }\n    } else {\n        // 0x4052a2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4052c0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40529a\n    int64_t v13 = 10; // 0x40529a\n    while (v5 != 9) {\n        // 0x40529c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405270\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4052c0\n                break;\n            }\n        } else {\n            // 0x4052a2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4052c0\n                break;\n            }\n        }\n        // 0x405292\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4052c0\n    int64_t v14; // bp-136, 0x405220\n    int64_t result = function_404dc0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g62); // 0x4052cf\n    return result;\n}\n"
        },
        {
            "funcName": "function_4052e0",
            "funcStartAddr": "4052e0",
            "funcEndAddr": "405354",
            "decompiledFuncCode": "int64_t function_4052e0(int64_t a1) {\n    // 0x4052e0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x405343\n    return fputs_unlocked(v1, g36);\n}\n"
        },
        {
            "funcName": "function_405360",
            "funcStartAddr": "405360",
            "funcEndAddr": "40537a",
            "decompiledFuncCode": "int64_t function_405360(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x405364\n    if (size != 0 != (mem == NULL)) {\n        // 0x405373\n        return (int64_t)mem;\n    }\n    // 0x405375\n    function_4055b0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405380",
            "funcStartAddr": "405380",
            "funcEndAddr": "4053a1",
            "decompiledFuncCode": "int64_t function_405380(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405383\n    int64_t v2 = v1; // 0x405383\n    if (v2 < 0) {\n        // 0x40539b\n        function_4055b0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405399\n        return function_405360(v2);\n    }\n    // 0x40539b\n    function_4055b0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4053b0",
            "funcStartAddr": "4053b0",
            "funcEndAddr": "4053b2",
            "decompiledFuncCode": "int64_t function_4053b0(void) {\n    // 0x4053b0\n    int64_t v1; // 0x4053b0\n    return function_405360(v1);\n}\n"
        },
        {
            "funcName": "function_4053c0",
            "funcStartAddr": "4053c0",
            "funcEndAddr": "4053f6",
            "decompiledFuncCode": "int64_t function_4053c0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4053e8\n        free(v1);\n        return (int32_t)&g62 ^ (int32_t)&g62;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4053d1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4053e0\n        return (int64_t)mem;\n    }\n    // 0x4053f1\n    function_4055b0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405400",
            "funcStartAddr": "405400",
            "funcEndAddr": "405421",
            "decompiledFuncCode": "int64_t function_405400(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x405403\n    int64_t v2 = v1; // 0x405403\n    if (v2 < 0) {\n        // 0x40541b\n        function_4055b0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405419\n        return function_4053c0(a1, v2);\n    }\n    // 0x40541b\n    function_4055b0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405430",
            "funcStartAddr": "405430",
            "funcEndAddr": "4054b6",
            "decompiledFuncCode": "int64_t function_405430(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40548b\n            function_4055b0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4053c0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405473\n    if (a2 == 0) {\n        // 0x405498\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405478\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40548b\n        function_4055b0(a1);\n        // UNREACHABLE\n    }\n    // 0x40545a\n    *(int64_t *)a2 = v2;\n    return function_4053c0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4054c0",
            "funcStartAddr": "4054c0",
            "funcEndAddr": "405510",
            "decompiledFuncCode": "int64_t function_4054c0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4054c0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40550a\n            function_4055b0(a1);\n            // UNREACHABLE\n        }\n        // 0x4054e2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4053c0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4054f5\n        *(int64_t *)a2 = 128;\n        return function_4053c0(0, 128);\n    }\n    // 0x405508\n    if (a2 < 0) {\n        // 0x40550a\n        function_4055b0(a1);\n        // UNREACHABLE\n    }\n    // 0x4054e2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4053c0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_405510",
            "funcStartAddr": "405510",
            "funcEndAddr": "405527",
            "decompiledFuncCode": "int64_t function_405510(int64_t a1, int64_t a2) {\n    // 0x405510\n    return (int64_t)memset((int64_t *)function_405360(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_405530",
            "funcStartAddr": "405530",
            "funcEndAddr": "40555e",
            "decompiledFuncCode": "int64_t function_405530(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x405537\n    if ((int64_t)v1 < 0) {\n        // 0x405559\n        function_4055b0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x405559\n        function_4055b0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40554a\n    if (mem != NULL) {\n        // 0x405554\n        return (int64_t)mem;\n    }\n    // 0x405559\n    function_4055b0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405560",
            "funcStartAddr": "405560",
            "funcEndAddr": "405588",
            "decompiledFuncCode": "int64_t function_405560(int64_t a1, int64_t a2) {\n    int64_t v1 = function_405360(a2); // 0x40556f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405590",
            "funcStartAddr": "405590",
            "funcEndAddr": "4055a3",
            "decompiledFuncCode": "int64_t function_405590(int64_t str) {\n    // 0x405590\n    return function_405560(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4055b0",
            "funcStartAddr": "4055b0",
            "funcEndAddr": "4055e1",
            "decompiledFuncCode": "int64_t function_4055b0(int64_t a1) {\n    // 0x4055b0\n    error(g26, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4055f0",
            "funcStartAddr": "4055f0",
            "funcEndAddr": "40566b",
            "decompiledFuncCode": "int64_t function_4055f0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4055f7\n    if (fileno(stream) < 0) {\n        // 0x405657\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40560a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40563b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405657\n            return fclose(stream);\n        }\n    }\n    // 0x40560c\n    if ((int32_t)function_405670(a1, v1) == 0) {\n        // 0x405657\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405618\n    int32_t v3 = *v2; // 0x405620\n    int64_t result = fclose(stream); // 0x40562e\n    if (v3 != 0) {\n        // 0x405660\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405630\n    return result;\n}\n"
        },
        {
            "funcName": "function_405670",
            "funcStartAddr": "405670",
            "funcEndAddr": "4056b0",
            "decompiledFuncCode": "int64_t function_405670(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40568a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40568a\n        return fflush(stream);\n    }\n    // 0x405698\n    function_4056b0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4056b0",
            "funcStartAddr": "4056b0",
            "funcEndAddr": "405707",
            "decompiledFuncCode": "int64_t function_4056b0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4056b0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4056ba\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4056eb\n    int64_t result = -1; // 0x4056f4\n    if (v1 != -1) {\n        // 0x4056f6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405702\n    return result;\n}\n"
        },
        {
            "funcName": "function_405710",
            "funcStartAddr": "405710",
            "funcEndAddr": "4057ef",
            "decompiledFuncCode": "int64_t function_405710(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40571c\n    uint32_t v2 = *v1; // 0x40571c\n    int64_t v3 = a2 & 0xffffffff; // 0x405721\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x405724\n    uint64_t v5 = (int64_t)*v4; // 0x405724\n    int64_t v6; // 0x405792\n    if (v3 <= v5) {\n      lab_0x40578c_2:\n        // 0x40578c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x405712\n    int64_t v8 = v2; // 0x405710\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40578c\n        goto lab_0x40578c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x405748\n    int64_t v17; // 0x405756\n    int64_t * v18; // 0x405770\n    int64_t * v19; // 0x405773\n    int64_t v20; // 0x40577e\n    int64_t v21; // 0x405756\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x405753\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x405770\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x405787\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40578c\n            goto lab_0x40578c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40578c\n            goto lab_0x40578c_2;\n        }\n        // 0x405742\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4057cb\n    int64_t * v23 = (int64_t *)v22; // 0x4057d0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4057d3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4057d0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4057e7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40573d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40578c\n            goto lab_0x40578c_2;\n        }\n        // 0x405742\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x405753\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x405770\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x405787\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40578c\n                goto lab_0x40578c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40578c\n                goto lab_0x40578c_2;\n            }\n            // 0x405742\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4057b0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4057d0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4057e7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40578c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4057f0",
            "funcStartAddr": "4057f0",
            "funcEndAddr": "405e0c",
            "decompiledFuncCode": "int64_t function_4057f0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40580f\n    int64_t v2 = *v1; // 0x40580f\n    char * str2 = (char *)v2; // 0x40581c\n    char c = *str2; // 0x40581c\n    int64_t v3 = v2; // 0x405848\n    int64_t v4 = 0; // 0x4057f0\n    int32_t v5; // 0x4057f0\n    int64_t v6; // 0x4057f0\n    int64_t v7; // 0x4057f0\n    int64_t v8; // 0x4057f0\n    int64_t v9; // 0x4057f0\n    int64_t v10; // 0x4057f0\n    int64_t v11; // 0x4057f0\n    int64_t v12; // 0x4057f0\n    int64_t v13; // 0x4057f0\n    int64_t str3; // 0x4057f0\n    int64_t v14; // 0x4057f0\n    int64_t v15; // 0x4057f0\n    int64_t v16; // 0x4057f0\n    int64_t v17; // 0x4057f0\n    int32_t v18; // 0x4057f0\n    int32_t v19; // 0x4057f0\n    int32_t v20; // 0x4057f0\n    int32_t v21; // 0x4057f0\n    int32_t v22; // 0x4057f0\n    int32_t v23; // 0x4057f0\n    int32_t v24; // 0x4057f0\n    int32_t v25; // 0x4057f0\n    int32_t v26; // 0x4057f0\n    int32_t v27; // 0x4057f0\n    int32_t v28; // 0x4057f0\n    int32_t v29; // 0x4057f0\n    int64_t nmemb; // 0x4057f0\n    int64_t v30; // 0x4057f0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40584c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405848\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405858\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40585e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405828\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40588c\n                int64_t v34; // 0x4057f0\n                int64_t v35; // 0x4057f0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405895\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405a10;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4058a6\n                int64_t v37 = *(int64_t *)v36; // 0x4058aa\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405880\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405895\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405a10;\n                        }\n                    }\n                    // 0x4058a6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4058f6:\n                    // 0x4058f6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405950;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405ac0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405950;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405a70\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40591a;\n                                } else {\n                                    // 0x405a7c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40591a;\n                                    } else {\n                                        // 0x405a8a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40591a;\n                                        } else {\n                                            goto lab_0x405950;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40591a;\n                            }\n                        }\n                    }\n                }\n              lab_0x405961:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405b36\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405ce2\n                            flockfile(g38);\n                            int64_t v41 = *v1; // 0x405d02\n                            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x405d4f\n                            int64_t v43 = (int64_t)g38;\n                            int64_t v44 = v43; // 0x405d69\n                            int64_t v45; // 0x405d6b\n                            if (*(char *)v42 != 0) {\n                                // 0x405d6b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g38;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405d63\n                            while (v17 + nmemb != v42) {\n                                // 0x405d65\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x405d6b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g38;\n                                }\n                                // 0x405d58\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405d90\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g38);\n                            v40 = *v1;\n                        } else {\n                            // 0x405b44\n                            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x405c9f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405b99\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405bb0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x405a5e\n                    return 63;\n                }\n                // 0x405980\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405a04\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405a10:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405a20\n                    uint32_t v50 = *v49; // 0x405a20\n                    int64_t v51 = v50; // 0x405a20\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x405a2a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405a33\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x405c5f\n                                __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x405c0a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x405a5e\n                            return 63;\n                        }\n                        // 0x405aa8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x405dbf\n                                    __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x405cbd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405cd0\n                                // 0x405a5e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x405bce\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405be2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x405a4b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x405a4e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405a52\n                    int64_t result = v59; // 0x405a58\n                    if (v58 != 0) {\n                        // 0x405a5a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x405a5e\n                    return result;\n                }\n            } else {\n                // 0x40585e\n                v5 = v32;\n            }\n            // break -> 0x405985\n            break;\n        }\n    }\n    // 0x405985\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40599d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4059a7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x405a5e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405ae9\n        __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4059d6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4059e6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405950:\n    // 0x405950\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405950\n    int64_t v63 = *(int64_t *)v62; // 0x405954\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405961\n        goto lab_0x405961;\n    }\n    goto lab_0x4058f6;\n  lab_0x40591a:\n    // 0x40591a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4057f0\n    int32_t v65; // 0x4057f0\n    int32_t v66; // 0x4057f0\n    if (v27 != 0) {\n        goto lab_0x405950;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405ad0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405950;\n            } else {\n                goto lab_0x405941;\n            }\n        } else {\n            // 0x405935\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x405c2c\n                int64_t v67 = (int64_t)mem; // 0x405c2c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405950;\n                } else {\n                    // 0x405c3f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405941;\n                }\n            } else {\n                goto lab_0x405941;\n            }\n        }\n    }\n  lab_0x405941:\n    // 0x405941\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405950;\n}\n"
        },
        {
            "funcName": "function_405e10",
            "funcStartAddr": "405e10",
            "funcEndAddr": "4063d6",
            "decompiledFuncCode": "int64_t function_405e10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405e31\n    if (v3 < 1) {\n        // 0x405fee\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x405e2d\n    int32_t v5 = *(int32_t *)a7; // 0x405e39\n    uint64_t v6 = a1 & 0xffffffff; // 0x405e3b\n    int64_t v7 = v2; // 0x405e40\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405e43\n    *v8 = 0;\n    int64_t v9; // 0x405e10\n    int64_t v10; // 0x405e10\n    int64_t v11; // 0x405e10\n    int64_t v12; // 0x405e10\n    int64_t str; // 0x405e10\n    int64_t v13; // 0x405e10\n    int64_t v14; // 0x405e10\n    int64_t v15; // 0x405e10\n    int64_t v16; // 0x405e10\n    int64_t v17; // 0x405e10\n    int32_t v18; // 0x405e10\n    char v19; // 0x405e10\n    if (v5 == 0) {\n        // 0x406028\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x405e5a;\n    } else {\n        // 0x405e53\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405ea0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405ea3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405f68;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405eb6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x405ec6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x405f7c;\n                } else {\n                    goto lab_0x405ed8;\n                }\n            }\n        } else {\n            goto lab_0x405e5a;\n        }\n    }\n  lab_0x405e5a:\n    // 0x405e5a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405e60\n    *v24 = 0;\n    int64_t v25; // 0x405e10\n    int64_t v26; // 0x405e10\n    int64_t v27; // 0x405e10\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405f50\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405f5d;\n        }\n        case 43: {\n            // 0x406260\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405f5d;\n        }\n        default: {\n            // 0x405e7c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4061df\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4062f8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x405f5d;\n                } else {\n                    // 0x4061ed\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x405e8a;\n                }\n            } else {\n                goto lab_0x405e8a;\n            }\n        }\n    }\n  lab_0x405f68:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x405f6f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405ed8;\n    } else {\n        goto lab_0x405f7c;\n    }\n  lab_0x405e8a:\n    // 0x405e8a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x405f5d;\n  lab_0x405f5d:\n    // 0x405f5d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405f68;\n  lab_0x405ed8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405ed8\n    int64_t v31 = v30; // 0x405ed8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x405eda\n    if ((int64_t)*v32 > v31) {\n        // 0x405edf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405ee2\n    if (*v33 > v30) {\n        // 0x405ee7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x405eea\n    int64_t v35 = v31; // 0x405eee\n    int64_t v36 = v15; // 0x405eee\n    int64_t v37; // 0x405e10\n    int64_t v38; // 0x405e10\n    int64_t v39; // 0x405e10\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406058\n        int64_t v41 = v40; // 0x406058\n        v2 = v41;\n        int64_t v42; // 0x405e10\n        if (*v33 == v40) {\n            // 0x406240\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406248\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x406064\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406068\n                function_405710(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x406078\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x406081\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40608a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4060a1\n            int64_t v47 = v45 & 0xffffffff; // 0x4060a5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4060ae\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4060b4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4060b6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x406090\n            int64_t v49 = v48 & 0xffffffff; // 0x406090\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4060a1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4060ae\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4060b4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4060b6;\n                    }\n                }\n                // 0x406090\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x406258\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4060b6;\n    } else {\n        goto lab_0x405ef4;\n    }\n  lab_0x405f7c:\n    // 0x405f7c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x405f7f\n    int64_t v51 = v12; // 0x405f7f\n    int64_t v52 = v14; // 0x405f7f\n    if (*(char *)v10 == 0) {\n        goto lab_0x405ed8;\n    } else {\n        goto lab_0x405f85;\n    }\n  lab_0x405ef4:;\n    int32_t v53 = v35; // 0x405ef4\n    int64_t v54; // 0x405e10\n    int64_t v55; // 0x405e10\n    int64_t v56; // 0x405e10\n    int64_t v57; // 0x405e10\n    int64_t v58; // 0x405e10\n    int64_t v59; // 0x405e10\n    char * v60; // 0x405e10\n    int64_t v61; // 0x405e10\n    int64_t v62; // 0x405f09\n    int64_t v63; // 0x405e10\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x406043\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x406046;\n    } else {\n        // 0x405efc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405e10\n        int64_t v66 = v65 ? -1 : 1; // 0x405f10\n        int64_t v67 = (int64_t)\"--\"; // 0x405e10\n        int64_t v68 = v62; // 0x405e10\n        int64_t v69 = 3; // 0x405f10\n        unsigned char v70 = *(char *)v68; // 0x405f10\n        char v71 = *(char *)v67; // 0x405f10\n        char v72 = v71; // 0x405f10\n        bool v73 = false; // 0x405f10\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x406000\n            if (*(char *)v62 == 45) {\n                // 0x4060c0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4060c0\n                if (c == 0) {\n                    goto lab_0x40600a;\n                } else {\n                    // 0x4060cd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406150;\n                    } else {\n                        if (c == 45) {\n                            // 0x406333\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4061a5;\n                        } else {\n                            // 0x4060de\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406150;\n                            } else {\n                                // 0x4060e3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x406104;\n                                } else {\n                                    // 0x4060ea\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406150;\n                                    } else {\n                                        goto lab_0x406104;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40600a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405f20\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405f23\n            int64_t v77 = v35 + 1; // 0x405f26\n            int32_t v78 = v77; // 0x405f29\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x406290\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405f37\n                    function_405710(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405f45\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x406046;\n        }\n    }\n  lab_0x405f85:;\n    // 0x405f85\n    int64_t v79; // bp-104, 0x405e10\n    int64_t v80 = &v79; // 0x405e1a\n    int64_t v81 = v50 + 1; // 0x405f85\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x405f8c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405f91\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405f95\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405f99\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405fa1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405fa6\n    int32_t c2 = v84; // 0x405fa6\n    char * found_char_pos = strchr(str2, c2); // 0x405fa6\n    int64_t v87 = *v82; // 0x405fab\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405fb5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x405fc0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4062b0\n            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40627d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x405fee\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405fa6\n    char v91 = *(char *)(v90 + 1); // 0x405fdb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405f95\n        if (v91 != 58) {\n            // 0x405fee\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x406204\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x406308\n                *v8 = 0;\n            } else {\n                // 0x4062ec\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40622e\n            *v83 = 0;\n            // 0x405fee\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40620e\n        if (v93 != 0) {\n            // 0x4062a0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40622e\n            *v83 = 0;\n            // 0x405fee\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x406221\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40622e\n            *v83 = 0;\n            // 0x405fee\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40636a\n            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40631a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x406321\n        // 0x40622e\n        *v83 = 0;\n        // 0x405fee\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x406179\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40617b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4063a0\n                __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x406351\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x406358\n            // 0x405fee\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x406186\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40618a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4061a5;\n  lab_0x4060b6:\n    // 0x4060b6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405ef4;\n  lab_0x4061a5:;\n    int64_t v99 = function_4057f0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4061c3\n    // 0x405fee\n    return v99 & 0xffffffff;\n  lab_0x406046:;\n    int32_t v100 = v55; // 0x406046\n    if (v100 != (int32_t)v59) {\n        // 0x40604a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x405fee\n    return 0xffffffff;\n  lab_0x40600a:\n    // 0x40600a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x406011\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x405fee\n    return v99 & 0xffffffff;\n  lab_0x406150:\n    // 0x406150\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405f85;\n  lab_0x406104:\n    // 0x406104\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4057f0(v6, a2, str, a4, a5, v57, v1, v11, &g10); // 0x40612a\n    if ((int32_t)v101 != -1) {\n        // 0x405fee\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40613f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406150;\n}\n"
        },
        {
            "funcName": "function_4063e0",
            "funcStartAddr": "4063e0",
            "funcEndAddr": "406436",
            "decompiledFuncCode": "int64_t function_4063e0(int64_t a1) {\n    // 0x4063e0\n    *(int32_t *)&g55 = g34;\n    *(int32_t *)&g56 = g33;\n    int64_t v1; // 0x4063e0\n    int64_t result = function_405e10(v1, v1, v1, v1, v1, v1, &g55, a1 & 0xffffffff); // 0x406406\n    g34 = *(int32_t *)&g55;\n    g60 = g58;\n    *(int32_t *)&g32 = g57;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406440",
            "funcStartAddr": "406440",
            "funcEndAddr": "406458",
            "decompiledFuncCode": "int64_t function_406440(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406440\n    return function_4063e0(1);\n}\n"
        },
        {
            "funcName": "function_406460",
            "funcStartAddr": "406460",
            "funcEndAddr": "406473",
            "decompiledFuncCode": "int64_t function_406460(int64_t a1, int64_t a2, char * a3, char (**a4)[5], int32_t a5, int64_t a6) {\n    // 0x406460\n    return function_4063e0(0);\n}\n"
        },
        {
            "funcName": "function_406480",
            "funcStartAddr": "406480",
            "funcEndAddr": "406495",
            "decompiledFuncCode": "int64_t function_406480(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406480\n    return function_405e10(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4064a0",
            "funcStartAddr": "4064a0",
            "funcEndAddr": "4064b6",
            "decompiledFuncCode": "int64_t function_4064a0(void) {\n    // 0x4064a0\n    return function_4063e0(0);\n}\n"
        },
        {
            "funcName": "function_4064c0",
            "funcStartAddr": "4064c0",
            "funcEndAddr": "4064d8",
            "decompiledFuncCode": "int64_t function_4064c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4064c0\n    return function_405e10(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4064e0",
            "funcStartAddr": "4064e0",
            "funcEndAddr": "40655a",
            "decompiledFuncCode": "int64_t function_4064e0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4064eb\n    int64_t v2 = (int64_t)&g11; // 0x4064eb\n    int32_t * pwc; // 0x4064e0\n    int64_t v3; // 0x4064e0\n    int64_t n; // 0x4064e0\n    if (a2 == 0) {\n        goto lab_0x406532;\n    } else {\n        // 0x4064ed\n        if (a3 == 0) {\n            // 0x406518\n            return -2;\n        }\n        // 0x4064f9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x406532;\n        } else {\n            goto lab_0x406504;\n        }\n    }\n  lab_0x406532:\n    // 0x406532\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4064e0\n    pwc = (int32_t *)&v4;\n    goto lab_0x406504;\n  lab_0x406504:;\n    char * wstr = (char *)v3; // 0x40650a\n    int64_t ps; // 0x4064e0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40650a\n    int64_t result = v5; // 0x40650a\n    if (v5 < 0xfffffffe) {\n        // 0x406518\n        return result;\n    }\n    int64_t result2 = result; // 0x406549\n    if ((char)function_403080(0, v3) == 0) {\n        // 0x40654b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x406518\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406560",
            "funcStartAddr": "406560",
            "funcEndAddr": "4065be",
            "decompiledFuncCode": "int64_t function_406560(int64_t a1) {\n    uint64_t result = function_405360(33); // 0x40656e\n    char * str = (char *)result; // 0x406582\n    strncpy(str, (char *)(a1 + 44), 32);\n    *(char *)(result + 32) = 0;\n    int64_t v1 = result + (int64_t)strlen(str); // 0x406593\n    if (result >= v1) {\n        // 0x4065a1\n        return result;\n    }\n    int64_t v2 = v1; // 0x406599\n    v2--;\n    char * v3 = (char *)v2; // 0x40659b\n    while (*v3 == 32) {\n        // 0x4065b0\n        *v3 = 0;\n        if (result == v2) {\n            // break -> 0x4065a1\n            break;\n        }\n        v2--;\n        v3 = (char *)v2;\n    }\n    // 0x4065a1\n    return result;\n}\n"
        },
        {
            "funcName": "function_4065c0",
            "funcStartAddr": "4065c0",
            "funcEndAddr": "406768",
            "decompiledFuncCode": "int64_t function_4065c0(char * a1, int64_t * a2, int64_t * a3, uint32_t a4) {\n    // 0x4065c0\n    utmpxname(a1);\n    setutxent();\n    struct utmpx * v1 = getutxent(); // 0x4065f7\n    int64_t v2 = 0; // 0x406602\n    int64_t v3 = 0; // 0x406602\n    int64_t v4; // 0x4065c0\n    int64_t v5; // 0x4065c0\n    int64_t v6; // 0x4065c0\n    struct utmpx * v7; // 0x4065c0\n    struct utmpx * v8; // 0x4065c0\n    int64_t v9; // 0x4065c0\n    int64_t v10; // 0x4065c0\n    int64_t v11; // 0x4065c0\n    uint64_t v12; // 0x4065c0\n    int64_t v13; // 0x4065c0\n    int64_t v14; // 0x4065c0\n    int64_t v15; // 0x4065c0\n    int64_t v16; // 0x4065c0\n    int64_t v17; // 0x4065c0\n    if (v1 != NULL) {\n        struct utmpx * v18 = v1; // 0x4065f7\n        int64_t v19 = 0; // 0x4065c0\n        int64_t v20 = (int64_t)a1;\n        int64_t v21 = 0; // 0x4065c0\n        int64_t v22 = 0; // 0x4065c0\n        while (true) {\n            // 0x406604\n            v11 = v22;\n            v9 = v21;\n            v14 = v20;\n            v4 = v19;\n            v7 = v18;\n            while (true) {\n              lab_0x406604:\n                // 0x406604\n                v8 = v7;\n                v5 = v4;\n                v15 = v14;\n                v10 = v9;\n                v12 = v11;\n                v6 = (int64_t)v8;\n                if (*(char *)(v6 + 44) == 0) {\n                    goto lab_0x406616;\n                } else {\n                    // 0x40660b\n                    if (v8->e0 == 7) {\n                        // 0x4066a0\n                        v16 = v15;\n                        if (a4 % 2 == 0) {\n                            goto lab_0x40661b;\n                        } else {\n                            uint32_t pid = *(int32_t *)(v6 + 4); // 0x4066a9\n                            int64_t v23 = pid; // 0x4066a9\n                            v16 = v23;\n                            if (pid < 1) {\n                                goto lab_0x40661b;\n                            } else {\n                                // 0x4066b5\n                                v16 = v23;\n                                if (kill(pid, 0) >= 0) {\n                                    goto lab_0x40661b;\n                                } else {\n                                    int32_t v24 = *__errno_location(); // 0x4066c9\n                                    v13 = v23;\n                                    if (v24 == 3) {\n                                        // break -> 0x4065f7\n                                        break;\n                                    }\n                                    // 0x4066d2\n                                    v17 = v23;\n                                    if (v12 != v10) {\n                                        goto lab_0x406624;\n                                    } else {\n                                        goto lab_0x4066e0;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x406616;\n                    }\n                }\n            }\n          lab_0x4065f7:\n            // 0x4065f7\n            v20 = v13;\n            v18 = getutxent();\n            v19 = v5;\n            v21 = v10;\n            v22 = v12;\n            v2 = v12;\n            v3 = v5;\n            if (v18 == NULL) {\n                // break -> 0x406675\n                break;\n            }\n        }\n    }\n  lab_0x406675:\n    // 0x406675\n    endutxent();\n    *a2 = v2;\n    *a3 = v3;\n    return 0;\n  lab_0x406616:\n    // 0x406616\n    v13 = v15;\n    v16 = v15;\n    if ((a4 & 2) != 0) {\n        // break -> 0x4065f7\n        goto lab_0x4065f7;\n    }\n    goto lab_0x40661b;\n  lab_0x40661b:\n    // 0x40661b\n    v17 = v16;\n    if (v12 == v10) {\n        goto lab_0x4066e0;\n    } else {\n        goto lab_0x406624;\n    }\n  lab_0x4066e0:;\n    int64_t v25 = v17;\n    int64_t v26; // 0x4065c0\n    int64_t v27; // 0x4065c0\n    int64_t v28; // 0x4065c0\n    if (v5 == 0) {\n        // 0x406724\n        v27 = 1;\n        v26 = 1;\n        v28 = 384;\n        if (v12 != 0) {\n            uint128_t v29 = 384 * (int128_t)v12; // 0x406731\n            if ((int64_t)v29 < 0) {\n                // 0x406763\n                function_4055b0(v25);\n                // UNREACHABLE\n            }\n            if (v29 % 0x1ff0000000000000001 != 0) {\n                // 0x406763\n                function_4055b0(v25);\n                // UNREACHABLE\n            }\n            // 0x406744\n            v27 = v12 + 1;\n            v26 = v10;\n            v28 = 384 * v12;\n        }\n    } else {\n        if (v12 >= 0x38e38e38e38e38) {\n            // 0x406763\n            function_4055b0(v25);\n            // UNREACHABLE\n        }\n        int64_t v30 = v12 + 1; // 0x4066f7\n        int64_t v31 = v12 / 2 + v30; // 0x4066fe\n        v27 = v30;\n        v26 = v31;\n        v28 = 384 * v31;\n    }\n    int64_t v32 = v27; // 0x40671f\n    int64_t v33 = v26; // 0x40671f\n    int64_t v34 = function_4053c0(v5, v28); // 0x40671f\n    goto lab_0x406628;\n  lab_0x406624:\n    // 0x406624\n    v32 = v12 + 1;\n    v33 = v10;\n    v34 = v5;\n    goto lab_0x406628;\n  lab_0x406628:;\n    int64_t v35 = v34 + 384 * v12; // 0x406636\n    *(int64_t *)v35 = *(int64_t *)v8;\n    int64_t v36 = v35 + 8 & -8; // 0x406647\n    *(int64_t *)(v35 + 376) = *(int64_t *)(v6 + 376);\n    int64_t v37 = v35 - v36; // 0x406652\n    uint64_t v38 = (v37 + 384) / 8 % 0x20000000; // 0x406663\n    __asm_rep_movsq_memcpy((char *)v36, (char *)(v6 - v37), v38);\n    struct utmpx * v39 = getutxent(); // 0x406668\n    v11 = v32;\n    v9 = v33;\n    bool v40; // 0x4065c0\n    v14 = v38 * (v40 ? -8 : 8) + v36;\n    v4 = v34;\n    v7 = v39;\n    v2 = v32;\n    v3 = v34;\n    if (v39 == NULL) {\n        // break (via goto) -> 0x406675\n        goto lab_0x406675;\n    }\n    goto lab_0x406604;\n}\n"
        },
        {
            "funcName": "function_406770",
            "funcStartAddr": "406770",
            "funcEndAddr": "4067cd",
            "decompiledFuncCode": "int64_t function_406770(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x406777\n    int64_t v2; // 0x406770\n    int64_t result = function_4055f0(a1, v2); // 0x406788\n    if ((v2 & 32) != 0) {\n        // 0x4067b0\n        if ((int32_t)result == 0) {\n            // 0x4067b4\n            *__errno_location() = 0;\n        }\n        // 0x4067aa\n        return 0xffffffff;\n    }\n    // 0x406791\n    if ((int32_t)result == 0) {\n        // 0x4067aa\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406798\n    if (v1 == 0) {\n        // 0x40679a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4067aa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4067d0",
            "funcStartAddr": "4067d0",
            "funcEndAddr": "406d32",
            "decompiledFuncCode": "int64_t function_4067d0(void) {\n    char * v1 = nl_langinfo(14); // 0x4067e6\n    char * v2 = g59; // 0x4067eb\n    char * v3; // 0x4067d0\n    int64_t v4; // 0x4067d0\n    int64_t v5; // 0x4067d0\n    int64_t v6; // 0x4067d0\n    int64_t v7; // 0x4067d0\n    int32_t size; // 0x4067d0\n    int32_t size2; // 0x4067d0\n    int32_t len; // 0x4068a2\n    int64_t v8; // 0x4068a2\n    char * env_val; // 0x40688d\n    if (v2 == NULL) {\n        // 0x406888\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x4068f5;\n        } else {\n            // 0x40689a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x4068f5;\n            } else {\n                // 0x40689f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40688d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406d25\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x4068f5;\n                    } else {\n                        // 0x406c99\n                        size2 = len + 14;\n                        goto lab_0x4068bb;\n                    }\n                } else {\n                    goto lab_0x4068bb;\n                }\n            }\n        }\n    } else {\n        // 0x4067d0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40680a;\n    }\n  lab_0x406b3c:;\n    // 0x406b3c\n    struct _IO_FILE * stream; // 0x40697b\n    int32_t v10 = __uflow(stream); // 0x406b3f\n    int64_t v11; // 0x4067d0\n    int64_t v12 = v11; // 0x406b49\n    int64_t v13; // 0x4067d0\n    int64_t v14 = v13; // 0x406b49\n    int32_t v15 = v10; // 0x406b49\n    int64_t v16; // 0x4067d0\n    int64_t v17 = v16; // 0x406b49\n    int64_t v18 = v11; // 0x406b49\n    int64_t v19 = v13; // 0x406b49\n    int64_t v20 = v16; // 0x406b49\n    if (v10 == -1) {\n        // break -> 0x406b4f\n        goto lab_0x406b4f;\n    }\n    goto lab_0x4069c9;\n  lab_0x4069be:;\n    // 0x4069be\n    int64_t v90; // 0x4067d0\n    int64_t * v32; // 0x4069b0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4067d0\n    v12 = v89;\n    int64_t v91; // 0x4067d0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4067d0\n    v17 = v92;\n    goto lab_0x4069c9;\n  lab_0x4069c9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4067d0\n    int32_t v25; // bp-120, 0x4067d0\n    int32_t v26; // bp-184, 0x4067d0\n    int64_t v27; // 0x40697b\n    int64_t v28; // 0x406998\n    int64_t v29; // 0x40699d\n    int64_t * v30; // 0x4069b4\n    switch (c) {\n        case 32: {\n            goto lab_0x4069b0;\n        }\n        case 10: {\n            goto lab_0x4069b0;\n        }\n        case 9: {\n            goto lab_0x4069b0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x406ba1\n            int32_t v33; // 0x4067d0\n            char v34; // 0x4067d0\n            int32_t v35; // 0x406bae\n            if (v31 < *v30) {\n                // 0x406b80\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x406bab\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x406ba1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406b80\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x406bab\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x406b90\n                v36 = v33;\n            }\n            // 0x406c7f\n            if (v36 == -1) {\n                // break -> 0x406b4f\n                break;\n            }\n            goto lab_0x4069b0;\n        }\n        default: {\n            // 0x4069df\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x406b4f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406a08\n            int64_t v39 = v37 + 4; // 0x406a0a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406a16\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406a18\n            while (v41 == 0) {\n                // 0x406a08\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406a36\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406a42\n            int64_t v45 = v43 + 4; // 0x406a44\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x406a50\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x406a52\n            while (v47 == 0) {\n                // 0x406a42\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x406a3f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406a68\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x406a78\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x406a7c\n            int64_t v52 = v51 + v48; // 0x406a85\n            int64_t * mem; // 0x4067d0\n            int64_t v53; // 0x4067d0\n            int64_t v54; // 0x4067d0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x406bbb\n                int64_t v56 = v55 + 3; // 0x406bc7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x406aa1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406ab0\n            if (mem == NULL) {\n                // 0x406cdc\n                free((int64_t *)v21);\n                function_4055f0(v27, v53);\n                v24 = (int64_t)&g11;\n                goto lab_0x406954;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406ac8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406ad2\n            uint32_t v62 = (int32_t)v59; // 0x406ad5\n            int64_t v63; // 0x4067d0\n            if (v62 >= 8) {\n                // 0x406be4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x406bfe\n                int64_t v66 = v61 - v65; // 0x406c02\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x406c0d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x406c1e\n                    int64_t v70 = v69 & 0xffffffff; // 0x406c1e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x406c1b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x406caf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406ae7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x406aeb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x406afb\n            int64_t v74 = v60 - 1; // 0x406aff\n            uint32_t v75 = (int32_t)v73; // 0x406b04\n            int64_t v76; // 0x4067d0\n            if (v75 >= 8) {\n                // 0x406c32\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x406c3c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x406c4c\n                int64_t v80 = v74 - v79; // 0x406c50\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x406c5b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x406c6b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406c69\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x406cc6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x406cce\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406b16\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x406b1a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406d13\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x406b2e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4069be;\n            } else {\n                goto lab_0x406b3c;\n            }\n        }\n    }\n  lab_0x4069b0:;\n    int64_t v93 = v23; // 0x4067d0\n    int64_t v94 = v22; // 0x4067d0\n    int64_t v95 = v21; // 0x4067d0\n    goto lab_0x4069b0_2;\n  lab_0x4068f5:;\n    int64_t * mem3 = malloc(size); // 0x4068f5\n    int64_t v97 = (int64_t)&g11; // 0x406900\n    int64_t v98; // 0x4067d0\n    int64_t path; // 0x4067d0\n    if (mem3 == NULL) {\n        goto lab_0x4068d2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x4068f5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406916;\n    }\n  lab_0x40680a:;\n    int64_t str = v1 == NULL ? (int64_t)&g11 : (int64_t)v1; // 0x4067fd\n    char v100 = *v3; // 0x40680a\n    int64_t v101; // 0x4067d0\n    if (v100 == 0) {\n        // 0x406864\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4067d0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4067d0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x406850\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x406857;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406820\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40682d\n        char v107 = *(char *)v106; // 0x406832\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x406864\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40683b\n    v104 = v103 + 1;\n  lab_0x406857:\n    // 0x406864\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4068d2:;\n    char * v108 = (char *)v97;\n    g59 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40680a;\n  lab_0x406916:;\n    int64_t v109 = v98 + path; // 0x406916\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x406942\n    v24 = (int64_t)&g11;\n    if (fd >= 0) {\n        // 0x406971\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x406ca2\n            close(fd);\n            v24 = (int64_t)&g11;\n        } else {\n            // 0x406995\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4069b0_2:;\n                uint64_t v96 = *v32; // 0x4069b0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x406b3c;\n                } else {\n                    goto lab_0x4069be;\n                }\n            }\n          lab_0x406b4f:\n            // 0x406b4f\n            function_4055f0(v27, v19);\n            v24 = (int64_t)&g11;\n            if (v18 != 0) {\n                // 0x406b6e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x406954;\n  lab_0x4068bb:;\n    int64_t * mem4 = malloc(size2); // 0x4068bb\n    v97 = (int64_t)&g11;\n    if (mem4 != NULL) {\n        // 0x406961\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406916;\n    } else {\n        goto lab_0x4068d2;\n    }\n  lab_0x406954:\n    // 0x406954\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4068d2;\n}\n"
        },
        {
            "funcName": "function_406d40",
            "funcStartAddr": "406d40",
            "funcEndAddr": "406d9d",
            "decompiledFuncCode": "int64_t function_406d40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406d40\n    return function_4017e8();\n}\n"
        },
        {
            "funcName": "function_406da0",
            "funcStartAddr": "406da0",
            "funcEndAddr": "406da1",
            "decompiledFuncCode": "int64_t function_406da0(void) {\n    // 0x406da0\n    int64_t result; // 0x406da0\n    return result;\n}\n"
        },
        {
            "funcName": "function_406db0",
            "funcStartAddr": "406db0",
            "funcEndAddr": "406dc8",
            "decompiledFuncCode": "int64_t function_406db0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406db0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_406dc8",
            "funcStartAddr": "406dc8",
            "funcEndAddr": "406de8",
            "decompiledFuncCode": "int64_t function_406dc8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x406dd2\n    while (*(int64_t *)v1 != -1) {\n        // 0x406dd3\n        v1 -= 8;\n    }\n    // 0x406de4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_pinky.elf"
}