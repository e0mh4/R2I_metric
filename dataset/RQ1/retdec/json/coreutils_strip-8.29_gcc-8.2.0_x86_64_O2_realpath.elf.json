{
    "funcInfo": [
        {
            "funcName": "function_4019d0",
            "funcStartAddr": "4019d0",
            "funcEndAddr": "4019d5",
            "decompiledFuncCode": "int64_t function_4019d0(void) {\n    // 0x4019d0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019d5",
            "funcStartAddr": "4019d5",
            "funcEndAddr": "4019da",
            "decompiledFuncCode": "int64_t function_4019d5(void) {\n    // 0x4019d5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019da",
            "funcStartAddr": "4019da",
            "funcEndAddr": "4019df",
            "decompiledFuncCode": "int64_t function_4019da(void) {\n    // 0x4019da\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019df",
            "funcStartAddr": "4019df",
            "funcEndAddr": "4019e4",
            "decompiledFuncCode": "int64_t function_4019df(void) {\n    // 0x4019df\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019e4",
            "funcStartAddr": "4019e4",
            "funcEndAddr": "4019e9",
            "decompiledFuncCode": "int64_t function_4019e4(void) {\n    // 0x4019e4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019e9",
            "funcStartAddr": "4019e9",
            "funcEndAddr": "4019ee",
            "decompiledFuncCode": "int64_t function_4019e9(void) {\n    // 0x4019e9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019ee",
            "funcStartAddr": "4019ee",
            "funcEndAddr": "4019f3",
            "decompiledFuncCode": "int64_t function_4019ee(void) {\n    // 0x4019ee\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019f3",
            "funcStartAddr": "4019f3",
            "funcEndAddr": "4019f8",
            "decompiledFuncCode": "int64_t function_4019f3(void) {\n    // 0x4019f3\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019f8",
            "funcStartAddr": "4019f8",
            "funcEndAddr": "4019fd",
            "decompiledFuncCode": "int64_t function_4019f8(void) {\n    // 0x4019f8\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019fd",
            "funcStartAddr": "4019fd",
            "funcEndAddr": "401a02",
            "decompiledFuncCode": "int64_t function_4019fd(void) {\n    // 0x4019fd\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a10",
            "funcStartAddr": "401a10",
            "funcEndAddr": "401eb0",
            "decompiledFuncCode": "int64_t function_401a10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    uint64_t v1 = a1 & 0xffffffff; // 0x401a1e\n    function_4041c0(a2);\n    setlocale(LC_ALL, (char *)&g11);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_408510(0x402d30, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v2 = 1; // 0x401a69\n    int64_t v3 = 0; // 0x401a69\n    int64_t v4 = 0; // 0x401a69\n    int64_t v5; // 0x401a10\n    while (true) {\n      lab_0x401a70_2:\n        // 0x401a70\n        v5 = v2;\n        int32_t v6 = function_4079b0(v1, a2, \"eLmPqsz\", &g2, 0, a6);\n        switch (v6) {\n            case -1: {\n                goto lab_0x401bbf;\n            }\n            case 109: {\n                // 0x401b90\n                v2 = v5 & 0xfffffffc | 2;\n                goto lab_0x401a70_2;\n            }\n            default: {\n                if (v6 > 109) {\n                    if (v6 == 122) {\n                        // 0x401ba0\n                        g38 = 1;\n                        v2 = v5;\n                    } else {\n                        if (v6 > 122) {\n                            if (v6 != 128) {\n                                if (v6 != 129) {\n                                    // 0x401e4c\n                                    function_402100(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x401b6b\n                                v2 = v5;\n                            } else {\n                                // 0x401af7\n                                v2 = v5;\n                            }\n                        } else {\n                            if (v6 != 113) {\n                                if (v6 != 115) {\n                                    // 0x401e4c\n                                    function_402100(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x401ae1\n                                g39 = 0;\n                                v2 = v5 & 0xfffffffb | 4;\n                            } else {\n                                // 0x401aac\n                                *(char *)&g18 = 0;\n                                v2 = v5;\n                            }\n                        }\n                    }\n                } else {\n                    if (v6 == 76) {\n                        // 0x401bb0\n                        g39 = 1;\n                        v2 = v5 & 0xfffffffb | 4;\n                    } else {\n                        if (v6 <= 76) {\n                            if (v6 == -131) {\n                                // 0x401b27\n                                function_406390((int64_t)g31, \"realpath\", \"GNU coreutils\", (int64_t)g19, \"Padraig Brady\", 0);\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            if (v6 == -130) {\n                                // 0x401b82\n                                function_402100(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x401e4c;\n                        }\n                        if (v6 != 80) {\n                            if (v6 != 101) {\n                              lab_0x401e4c:\n                                // 0x401e4c\n                                function_402100(1);\n                                // UNREACHABLE\n                            }\n                            // 0x401b11\n                            v2 = v5 & 0xfffffffc;\n                        } else {\n                            // 0x401ac8\n                            g39 = 0;\n                            v2 = v5 & 0xfffffffb;\n                        }\n                    }\n                }\n                goto lab_0x401a70_2;\n            }\n        }\n    }\n  lab_0x401bbf:;\n    // 0x401bbf\n    char * format; // 0x401e39\n    if (v1 <= (int64_t)*(int32_t *)0x60c2bc) {\n        // 0x401e2d\n        format = dcgettext(NULL, \"missing operand\", 5);\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", format);\n        // 0x401e4c\n        function_402100(1);\n        // UNREACHABLE\n    }\n    uint64_t v7 = v5 % 4; // 0x401bcf\n    bool v8 = v3 == 0 | v4 != 0;\n    int64_t v9 = 0; // 0x401bd6\n    int64_t v10; // 0x401a10\n    int64_t v11; // 0x401a10\n    int64_t v12; // 0x401a10\n    if (v4 == 0 == v8) {\n        goto lab_0x401c0b;\n    } else {\n        int64_t v13 = v8 ? v4 : v3;\n        int64_t v14 = function_402020(v13, v5 & 0xffffffff); // 0x401bed\n        g37 = v14;\n        v12 = v13;\n        if (v14 == 0) {\n            goto lab_0x401e83;\n        } else {\n            // 0x401c02\n            v9 = v13;\n            if (v7 == 0) {\n                // 0x401d9e\n                v9 = v13;\n                if ((char)function_402080(v14) != 0) {\n                    goto lab_0x401c0b;\n                } else {\n                    // 0x401dae\n                    error(1, ENOTDIR, \"%s\", (char *)function_405c60(0, 3, v13));\n                    v10 = v3;\n                    v11 = v13;\n                    goto lab_0x401dd6;\n                }\n            } else {\n                goto lab_0x401c0b;\n            }\n        }\n    }\n  lab_0x401cf2:\n    // 0x401cf2\n    g28 = &g29;\n    int64_t v15 = &g29; // 0x401d04\n    int64_t v16; // 0x401a10\n    int64_t v17 = v16; // 0x401d04\n    int64_t v18 = v16; // 0x401d04\n    if (v1 <= (int64_t)&g29) {\n        return v18 % 256 ^ 1;\n    }\n    goto lab_0x401d06;\n  lab_0x401cbe:;\n    int64_t v21 = (int64_t)g31; // 0x401cc5\n    int64_t v22 = g38 == 0 ? 10 : 0; // 0x401cce\n    int64_t * v23 = (int64_t *)(v21 + 40); // 0x401cd1\n    uint64_t v24 = *v23; // 0x401cd1\n    if (v24 >= *(int64_t *)(v21 + 48)) {\n        // 0x401d81\n        __overflow(g31, (int32_t)v22);\n    } else {\n        // 0x401cdf\n        *v23 = v24 + 1;\n        *(char *)v24 = (char)v22;\n    }\n    // 0x401cea\n    int64_t v20; // 0x401d12\n    free((int64_t *)v20);\n    v16 = v17;\n    goto lab_0x401cf2;\n  lab_0x401c9c:\n    // 0x401c9c\n    if ((char)function_402490(v20, g37, 0, 0) != 0) {\n        goto lab_0x401cbe;\n    } else {\n        // 0x401caf\n        fputs_unlocked((char *)v20, g31);\n        goto lab_0x401cbe;\n    }\n    // 0x401a70\n    goto lab_0x401a70_2;\n  lab_0x401c0b:\n    // 0x401c0b\n    if (v3 == v9) {\n        // 0x401d8b\n        g36 = g37;\n        goto lab_0x401c59;\n    } else {\n        if (v3 == 0) {\n            goto lab_0x401c59;\n        } else {\n            int64_t v25 = function_402020(v3, v5 & 0xffffffff); // 0x401c1e\n            if (v25 == 0) {\n                // 0x401e56\n                error(1, *__errno_location(), \"%s\", (char *)function_405c60(0, 3, v3));\n                v12 = 0;\n                goto lab_0x401e83;\n            } else {\n                if (v7 == 0) {\n                    // 0x401df5\n                    if ((char)function_402080(v25) == 0) {\n                        // 0x401e05\n                        error(1, ENOTDIR, \"%s\", (char *)function_405c60(0, 3, v3));\n                        // 0x401e2d\n                        format = dcgettext(NULL, \"missing operand\", 5);\n                        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", format);\n                        // 0x401e4c\n                        function_402100(1);\n                        // UNREACHABLE\n                    }\n                }\n                int64_t v26 = function_401f90(v25, g37); // 0x401c45\n                v10 = g37;\n                v11 = v25;\n                if ((char)v26 == 0) {\n                    goto lab_0x401dd6;\n                } else {\n                    // 0x401c52\n                    g36 = v25;\n                    goto lab_0x401c59;\n                }\n            }\n        }\n    }\n  lab_0x401e83:\n    // 0x401e83\n    error(1, *__errno_location(), \"%s\", (char *)function_405c60(0, 3, v12));\n    return &g54;\n  lab_0x401c59:;\n    int64_t v27 = g28; // 0x401c59\n    if (v1 <= v27) {\n        // 0x401d6d\n        return 0;\n    }\n    // 0x401d06\n    v15 = v27;\n    v17 = 1;\n    while (true) {\n      lab_0x401d06:;\n        int64_t v19 = *(int64_t *)((0x100000000 * v15 >> 29) + a2); // 0x401d0a\n        v20 = function_402020(v19, v5 & 0xffffffff);\n        if (v20 != 0) {\n            // 0x401c78\n            if (g37 == 0) {\n                // 0x401caf\n                fputs_unlocked((char *)v20, g31);\n                goto lab_0x401cbe;\n            } else {\n                // 0x401c84\n                if (g36 == 0) {\n                    goto lab_0x401c9c;\n                } else {\n                    // 0x401c90\n                    if ((char)function_401f90(g36, v20) == 0) {\n                        // 0x401caf\n                        fputs_unlocked((char *)v20, g31);\n                        goto lab_0x401cbe;\n                    } else {\n                        goto lab_0x401c9c;\n                    }\n                }\n            }\n        } else {\n            // 0x401d23\n            v16 = 0;\n            if (*(char *)&g18 != 0) {\n                // 0x401d30\n                error(0, *__errno_location(), \"%s\", (char *)function_405c60(0, 3, v19));\n                v16 = 0;\n            }\n            goto lab_0x401cf2;\n        }\n    }\n    // 0x401d6d\n    return v18 % 256 ^ 1;\n  lab_0x401dd6:\n    // 0x401dd6\n    free((int64_t *)v11);\n    g36 = v10;\n    g37 = 0;\n    goto lab_0x401c59;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401eb0",
            "funcEndAddr": "401edb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401eb0\n    int64_t v1; // 0x401eb0\n    __libc_start_main(0x401a10, (int32_t)a4, (char **)&v1, (void (*)())0x4084a0, (void (*)())0x408500, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401edb",
            "funcStartAddr": "401edb",
            "funcEndAddr": "401efa",
            "decompiledFuncCode": "int64_t function_401edb(void) {\n    // 0x401edb\n    return &g30;\n}\n"
        },
        {
            "funcName": "function_401efa",
            "funcStartAddr": "401efa",
            "funcEndAddr": "401f31",
            "decompiledFuncCode": "int64_t function_401efa(void) {\n    // 0x401efa\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401f31",
            "funcStartAddr": "401f31",
            "funcEndAddr": "401f88",
            "decompiledFuncCode": "int64_t function_401f31(void) {\n    // 0x401f31\n    if (g34 != 0) {\n        // 0x401f87\n        int64_t result; // 0x401f31\n        return result;\n    }\n    int64_t v1 = g35; // 0x401f64\n    int64_t result2; // 0x401f76\n    if (g35 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401f76\n        result2 = function_401edb();\n        g34 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401f66\n        v1++;\n    }\n    // 0x401f5a\n    g35 = v1;\n    // 0x401f76\n    result2 = function_401edb();\n    g34 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401f88",
            "funcStartAddr": "401f88",
            "funcEndAddr": "401f8d",
            "decompiledFuncCode": "int64_t function_401f88(void) {\n    // 0x401f88\n    return function_401efa();\n}\n"
        },
        {
            "funcName": "function_401f90",
            "funcStartAddr": "401f90",
            "funcEndAddr": "402014",
            "decompiledFuncCode": "int64_t function_401f90(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 + 1; // 0x401f90\n    char v2 = *(char *)v1; // 0x401f90\n    switch (v2) {\n        case 0: {\n            // 0x402000\n            return *(char *)(a2 + 1) != 47;\n        }\n        case 47: {\n            // 0x401ff0\n            if (*(char *)(a1 + 2) == 0) {\n                // 0x401ff6\n                return *(char *)(a2 + 1) == 47;\n            }\n            // break -> 0x401f9c\n            break;\n        }\n    }\n    int64_t v3 = a2 + 1; // 0x401f9c\n    char v4 = *(char *)v3; // 0x401f9c\n    bool result = v4 == 0 | v4 != v2;\n    int64_t v5 = v3; // 0x401fac\n    if (result) {\n        // 0x401fea\n        return false;\n    }\n    int64_t v6 = v1; // 0x401fac\n    v6++;\n    char v7 = *(char *)v6; // 0x401fcf\n    v5++;\n    char v8 = *(char *)v5;\n    while (v7 != 0) {\n        // 0x401fc0\n        if (v8 == 0 || v7 != v8) {\n            // 0x401fea\n            return result;\n        }\n        v6++;\n        v7 = *(char *)v6;\n        v5++;\n        v8 = *(char *)v5;\n    }\n    // 0x401fea\n    return v8 == 47 | v8 == 0;\n}\n"
        },
        {
            "funcName": "function_402020",
            "funcStartAddr": "402020",
            "funcEndAddr": "402075",
            "decompiledFuncCode": "int64_t function_402020(int64_t a1, int64_t a2) {\n    int64_t result = function_402690(a1, a2); // 0x402028\n    if (g39 != 0 != result != 0) {\n        // 0x40203e\n        return result;\n    }\n    int64_t result2 = function_402690(result, a2 & 0xfffffffb); // 0x402058\n    free((int64_t *)result);\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402080",
            "funcStartAddr": "402080",
            "funcEndAddr": "402100",
            "decompiledFuncCode": "int64_t function_402080(int64_t a1) {\n    // 0x402080\n    int64_t v1; // bp-168, 0x402080\n    if (__xstat(1, (char *)a1, (struct stat *)&v1) == 0) {\n        // 0x4020a0\n        int32_t v2; // 0x402080\n        uint32_t v3 = v2 & 0xf000; // 0x4020a4\n        return (int64_t)(v3 == 0x4000) | (int64_t)v3;\n    }\n    // 0x4020bb\n    function_405b90(4, a1);\n    error(1, *__errno_location(), dcgettext(NULL, \"cannot stat %s\", 5));\n    return &g54;\n}\n"
        },
        {
            "funcName": "function_402100",
            "funcStartAddr": "402100",
            "funcEndAddr": "40240d",
            "decompiledFuncCode": "int64_t function_402100(int32_t status) {\n    // 0x402100\n    if (status != 0) {\n        // 0x40211a\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40213f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402146\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... FILE...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print the resolved absolute file name;\\nall but the last component must exist\\n\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"  -e, --canonicalize-existing  all components of the path must exist\\n  -m, --canonicalize-missing   no path components need exist or be a directory\\n  -L, --logical                resolve '..' components before symlinks\\n  -P, --physical               resolve symlinks as encountered (default)\\n  -q, --quiet                  suppress most error messages\\n      --relative-to=DIR        print the resolved path relative to DIR\\n      --relative-base=DIR      print absolute paths unless paths below DIR\\n  -s, --strip, --no-symlinks   don't expand symlinks\\n  -z, --zero                   end each output line with NUL, not newline\\n\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g31);\n    int64_t v1 = &g1; // bp-136, 0x4021f0\n    bool v2; // 0x402100\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402270\n    int64_t v6 = *(int64_t *)v5; // 0x402274\n    int64_t v7 = 9; // 0x40227a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"realpath\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402286\n        char v11 = *(char *)v9; // 0x402286\n        char v12 = v11; // 0x402286\n        bool v13 = false; // 0x402286\n        while (v10 == v11) {\n            // 0x40227c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402286\n            int64_t v15 = v8 + v3; // 0x402286\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402292\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 9;\n    }\n    // 0x402292\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4023a4;\n        } else {\n            // 0x40238e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4023e3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4022f4;\n            } else {\n                goto lab_0x4023a4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4022f4;\n        } else {\n            // 0x4022da\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x4023e3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4022f4;\n            } else {\n                goto lab_0x4022f4;\n            }\n        }\n    }\n  lab_0x4023a4:\n    // 0x4023a4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402334\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40213f\n    exit(status);\n    // UNREACHABLE\n  lab_0x4022f4:\n    // 0x4022f4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402334\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40213f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402410",
            "funcStartAddr": "402410",
            "funcEndAddr": "402487",
            "decompiledFuncCode": "int64_t function_402410(int64_t str, int64_t * a2, int64_t * a3) {\n    if (a2 == NULL) {\n        // 0x402470\n        fputs_unlocked((char *)str, g31);\n        return 0;\n    }\n    int32_t len = strlen((char *)str); // 0x402429\n    uint64_t v1 = (int64_t)len; // 0x402429\n    if ((int64_t)a3 <= v1) {\n        // 0x40243c\n        return 1;\n    }\n    // 0x402448\n    memcpy(a2, (int64_t *)str, len + 1);\n    *a2 = v1 + str;\n    *a3 = 1;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402490",
            "funcStartAddr": "402490",
            "funcEndAddr": "402687",
            "decompiledFuncCode": "int64_t function_402490(int64_t a1, int64_t a2, int32_t a3, int32_t a4) {\n    char v1 = *(char *)(a2 + 1); // 0x402498\n    char v2 = *(char *)(a1 + 1); // 0x40249d\n    int32_t v3 = a4; // bp-40, 0x4024a2\n    int32_t v4 = a3; // bp-32, 0x4024aa\n    char v5 = a2;\n    if (v5 == 0 || v1 == 47 != (v2 == 47)) {\n        // 0x40259d\n        return 0;\n    }\n    char v6 = a1;\n    bool result = v6 == 0 | v5 != v6;\n    if (result) {\n        // 0x40259d\n        return 0;\n    }\n    int64_t v7 = v5 == 47 ? 0x100000001 : 0;\n    int64_t v8 = v7 % 2; // 0x40251e\n    char v9 = v2; // 0x40252c\n    int64_t v10 = 1; // 0x40252c\n    int64_t v11 = v7; // 0x40252c\n    int64_t v12 = v8; // 0x40252c\n    bool v13 = v2 == 0; // 0x40252c\n    int64_t v14; // 0x402490\n    int64_t v15; // 0x402490\n    bool v16; // 0x402490\n    int64_t v17; // 0x402490\n    char v18; // 0x402490\n    if (v1 != 0) {\n        int64_t v19 = 2; // 0x4024f3\n        v16 = v2 == 0;\n        v15 = v8;\n        v17 = v7;\n        v14 = 1;\n        v18 = v1;\n        if (v2 != 0 == v1 == v2) {\n            char v20 = *(char *)(v19 + a2); // 0x402502\n            char v21 = *(char *)(v19 + a1); // 0x402507\n            int64_t v22 = v19 + 0x100000000; // 0x40251a\n            int64_t v23 = v22 & 0xffffffff; // 0x40251a\n            int64_t v24 = v1 == 47 ? v22 : v8;\n            int64_t v25 = v24 & 0xffffffff; // 0x40251e\n            v9 = v21;\n            v10 = v23;\n            v11 = v24;\n            v12 = v25;\n            v13 = v21 == 0;\n            while (v20 != 0) {\n                // 0x4024f0\n                v19++;\n                char v26 = v20; // 0x4024f3\n                v16 = v21 == 0;\n                v15 = v25;\n                v17 = v24;\n                v14 = v23;\n                v18 = v20;\n                if (v21 != 0 != (v20 == v21)) {\n                    goto lab_0x4025b0;\n                }\n                v20 = *(char *)(v19 + a2);\n                v21 = *(char *)(v19 + a1);\n                v22 = v19 + 0x100000000;\n                v23 = v22 & 0xffffffff;\n                v24 = v26 == 47 ? v22 : v25;\n                v25 = v24 & 0xffffffff;\n                v9 = v21;\n                v10 = v23;\n                v11 = v24;\n                v12 = v25;\n                v13 = v21 == 0;\n            }\n            goto lab_0x40252e;\n        } else {\n            goto lab_0x4025b0;\n        }\n    } else {\n        goto lab_0x40252e;\n    }\n  lab_0x4025b0:;\n    int64_t v27 = v17; // 0x4025b4\n    int64_t v28 = v15; // 0x4025b4\n    int64_t v29 = v14; // 0x4025b4\n    if (v16 == v18 == 47) {\n        goto lab_0x402545;\n    } else {\n        goto lab_0x402541;\n    }\n  lab_0x40252e:\n    // 0x40252e\n    v27 = v11;\n    v28 = v12;\n    v29 = v10;\n    if (v9 == 47 || v13) {\n        goto lab_0x402545;\n    } else {\n        goto lab_0x402541;\n    }\n  lab_0x402545:;\n    int64_t v30 = 0x100000000 * v29 >> 32; // 0x402545\n    int64_t v31 = v30 + a2; // 0x402548\n    char v32 = *(char *)v31; // 0x402550\n    char v33 = v32; // 0x402556\n    int64_t v34 = v31; // 0x402556\n    if (v32 == 47) {\n        int64_t v35 = v31 + 1; // 0x402558\n        v33 = *(char *)v35;\n        v34 = v35;\n    }\n    int64_t v36 = v30 + a1; // 0x40254c\n    int64_t v37 = v36 + (int64_t)(*(char *)v36 == 47); // 0x402568\n    int64_t v38; // 0x402490\n    if (v33 != 0) {\n        int64_t v39 = function_402410((int64_t)\"..\", (int64_t *)&v4, (int64_t *)&v3); // 0x4025cd\n        int64_t v40 = v39 & 0xffffffff; // 0x4025d2\n        char v41 = *(char *)v34; // 0x4025d5\n        int64_t v42 = v40; // 0x4025db\n        if (v41 != 0) {\n            int64_t v43 = v40; // 0x40263b\n            int64_t v44; // 0x402625\n            if (v41 == 47) {\n                // 0x40263d\n                v44 = function_402410((int64_t)\"/..\", (int64_t *)&v4, (int64_t *)&v3);\n                v43 = (v44 | v40) & 0xffffffff;\n            }\n            int64_t v45 = v34 + 1; // 0x40262d\n            char v46 = *(char *)v45; // 0x402631\n            v42 = v43;\n            int64_t v47 = v45; // 0x402637\n            while (v46 != 0) {\n                int64_t v48 = v43;\n                v43 = v48;\n                if (v46 == 47) {\n                    // 0x40263d\n                    v44 = function_402410((int64_t)\"/..\", (int64_t *)&v4, (int64_t *)&v3);\n                    v43 = (v44 | v48) & 0xffffffff;\n                }\n                // 0x40262d\n                v45 = v47 + 1;\n                v46 = *(char *)v45;\n                v42 = v43;\n                v47 = v45;\n            }\n        }\n        // 0x4025e0\n        v38 = v42;\n        if (*(char *)v37 != 0) {\n            int64_t v49 = function_402410((int64_t)\"/\", (int64_t *)&v4, (int64_t *)&v3); // 0x4025f2\n            int64_t v50 = function_402410(v37, (int64_t *)&v4, (int64_t *)&v3); // 0x402604\n            v38 = (v49 | v42 | v50) & 0xffffffff;\n        }\n    } else {\n        int64_t v51 = *(char *)v37 == 0 ? (int64_t)\".\" : v37; // 0x40257f\n        int64_t v52 = function_402410(v51, (int64_t *)&v4, (int64_t *)&v3); // 0x402586\n        v38 = v52 & 0xffffffff;\n    }\n    // 0x40258e\n    if ((char)v38 != 0) {\n        // 0x402640\n        error(0, ENAMETOOLONG, \"%s\", dcgettext(NULL, \"generating relative path\", 5));\n    }\n    // 0x40259d\n    return v38 & 0xffffffff ^ 1;\n  lab_0x402541:\n    // 0x402541\n    v29 = v28;\n    if ((int32_t)v27 == 0) {\n        // 0x40259d\n        return result;\n    }\n    goto lab_0x402545;\n}\n"
        },
        {
            "funcName": "function_402690",
            "funcStartAddr": "402690",
            "funcEndAddr": "402d03",
            "decompiledFuncCode": "int64_t function_402690(int64_t a1, int64_t a2) {\n    int64_t v1 = a1;\n    uint32_t v2 = (int32_t)a2;\n    uint32_t v3 = v2 % 4; // 0x4026a9\n    if (a1 == 0 || (v2 + 3 & v3) != 0) {\n        // 0x402b40\n        *__errno_location() = 22;\n        // 0x40298e\n        return 0;\n    }\n    int64_t v4; // 0x402690\n    int64_t v5; // 0x402690\n    int64_t v6; // 0x402690\n    switch ((char)a1) {\n        case 0: {\n            // 0x402c01\n            *__errno_location() = 2;\n            // 0x40298e\n            return 0;\n        }\n        case 47: {\n            int64_t v7 = function_4064d0(0x1000); // 0x402855\n            *(char *)v7 = 47;\n            v6 = v7 + 1;\n            v5 = v7 + 0x1000;\n            v4 = v7;\n            // break -> 0x402705\n            break;\n        }\n        default: {\n            int64_t str = function_406760(a1, a2); // 0x4026d7\n            if (str == 0) {\n                // 0x40298e\n                return 0;\n            }\n            int32_t len = strlen((char *)str); // 0x4026eb\n            int64_t v8 = len; // 0x4026eb\n            if (len < 0x1000) {\n                int64_t v9 = function_406530(str, 0x1000); // 0x402c1c\n                v6 = v9 + v8;\n                v5 = v9 + 0x1000;\n                v4 = v9;\n            } else {\n                int64_t v10 = str + v8; // 0x4026ff\n                v6 = v10;\n                v5 = v10;\n                v4 = str;\n            }\n            // break -> 0x402705\n            break;\n        }\n    }\n    int64_t v11 = a1; // 0x402732\n    int64_t v12 = 0; // 0x402732\n    int64_t v13 = 0; // 0x402732\n    int64_t v14 = 0; // 0x402732\n    char * v15 = (char *)&v1; // 0x402732\n    int64_t v16 = v6; // 0x402732\n    int64_t v17 = v5; // 0x402732\n    int64_t v18 = v4; // 0x402732\n    int64_t v19 = a1; // 0x402732\n    int64_t v20; // 0x402690\n    int64_t v21; // 0x402690\n    int64_t v22; // 0x402690\n    int64_t v23; // 0x402690\n    char * v24; // 0x402690\n    int64_t v25; // 0x402690\n    int64_t v26; // 0x402690\n    int64_t v27; // 0x402690\n    int64_t v28; // 0x402690\n    int64_t v29; // 0x402690\n    int64_t v30; // 0x402690\n    int64_t v31; // 0x402690\n    int64_t v32; // 0x402690\n    int64_t v33; // 0x402690\n    int32_t * v34; // 0x402690\n    int32_t * v35; // 0x402690\n    int32_t v36; // 0x402690\n    int32_t v37; // 0x402690\n    int32_t v38; // 0x402690\n    int64_t v39; // 0x402690\n    int64_t v40; // 0x402690\n    int64_t v41; // 0x402690\n    int64_t v42; // 0x402690\n    int64_t v43; // 0x402690\n    int64_t v44; // 0x402690\n    int64_t v45; // 0x402690\n    uint64_t v46; // 0x402690\n    int64_t v47; // 0x402773\n    char * str3; // 0x402690\n    int64_t v48; // 0x402773\n    char * v49; // 0x402690\n    int64_t v50; // 0x402a04\n    char * str2; // 0x402a18\n    int32_t len2; // 0x402a18\n    int64_t v51; // 0x402a18\n    int32_t len3; // 0x402a23\n    while (true) {\n      lab_0x402738_4:\n        // 0x402738\n        v37 = v36;\n        v40 = v14;\n        int64_t v52 = v13;\n        int64_t v53 = v11;\n        int16_t v54 = (int16_t)v37 & -0x1000;\n        v42 = v12;\n        v24 = v15;\n        v27 = v16;\n        v22 = v19;\n        int32_t v55; // 0x402690\n        while (true) {\n          lab_0x402738_3:\n            // 0x402738\n            v21 = v18;\n            v26 = v17;\n            v43 = v42;\n            v46 = v21 + 1;\n            v25 = (int64_t)*v24;\n            v29 = v27;\n            v23 = v22;\n            int64_t v56; // 0x402690\n            int64_t v57; // 0x402790\n            while (true) {\n              lab_0x402738_2:\n                // 0x402738\n                v30 = v29;\n                if (v25 == 0) {\n                    // break (via goto) -> 0x402940\n                    goto lab_0x402940_3;\n                }\n                int64_t v58 = v23; // 0x402744\n                int64_t v59 = v25; // 0x402744\n                int64_t v60 = v23; // 0x402744\n                int64_t v61; // 0x402750\n                unsigned char v62; // 0x402754\n                if (v25 == 47) {\n                    v61 = v58 + 1;\n                    v62 = *(char *)v61;\n                    v58 = v61;\n                    while (v62 == 47) {\n                        // 0x402750\n                        v61 = v58 + 1;\n                        v62 = *(char *)v61;\n                        v58 = v61;\n                    }\n                    // 0x40275d\n                    v59 = v62;\n                    v60 = v61;\n                    if (v62 == 0) {\n                        // break (via goto) -> 0x402940\n                        goto lab_0x402940_3;\n                    }\n                }\n                // 0x402765\n                v56 = v60;\n                int64_t v63 = v59;\n                v47 = v56 + 1;\n                str3 = (char *)v47;\n                unsigned char v64 = *str3; // 0x402773\n                int64_t v65 = v47; // 0x40277e\n                while (v64 != 0 == (v64 != 47)) {\n                    // 0x402773\n                    v47 = v65 + 1;\n                    str3 = (char *)v47;\n                    v64 = *str3;\n                    v65 = v47;\n                }\n                if (v47 == v56) {\n                    // break (via goto) -> 0x402940\n                    goto lab_0x402940_3;\n                }\n                // 0x40278d\n                v48 = v64;\n                v57 = v47 - v56;\n                while (v57 != 1) {\n                    if (v57 == 2 != ((char)v63 == 46)) {\n                        // break (via goto) -> 0x4027ac\n                        goto lab_0x4027ac_2;\n                    }\n                    // 0x402b00\n                    if (*(char *)(v56 + 1) != 46) {\n                        // break (via goto) -> 0x4027ac\n                        goto lab_0x4027ac_2;\n                    }\n                    int64_t v66 = v48; // 0x402b16\n                    int64_t v67 = v47; // 0x402b16\n                    if (v30 > v46) {\n                        int64_t v68 = v30 - 1; // 0x402b1c\n                        v28 = v68;\n                        if (v21 >= v68) {\n                            goto lab_0x402738;\n                        } else {\n                            int64_t v69 = v30 - 2; // 0x402b25\n                            v28 = v68;\n                            if (*(char *)v69 != 47) {\n                                // 0x402c63\n                                v28 = v21;\n                                v31 = v69;\n                                if (v21 == v69) {\n                                    goto lab_0x402738;\n                                } else {\n                                    goto lab_0x402c70;\n                                }\n                            } else {\n                                goto lab_0x402738;\n                            }\n                        }\n                    }\n                    if (v66 == 0) {\n                        // break (via goto) -> 0x402940\n                        goto lab_0x402940_3;\n                    }\n                    // 0x402740\n                    v58 = v67;\n                    v59 = v66;\n                    v60 = v67;\n                    if (v66 == 47) {\n                        v61 = v58 + 1;\n                        v62 = *(char *)v61;\n                        v58 = v61;\n                        while (v62 == 47) {\n                            // 0x402750\n                            v61 = v58 + 1;\n                            v62 = *(char *)v61;\n                            v58 = v61;\n                        }\n                        // 0x40275d\n                        v59 = v62;\n                        v60 = v61;\n                        if (v62 == 0) {\n                            // break (via goto) -> 0x402940\n                            goto lab_0x402940_3;\n                        }\n                    }\n                    // 0x402765\n                    v56 = v60;\n                    v63 = v59;\n                    v47 = v56 + 1;\n                    str3 = (char *)v47;\n                    v64 = *str3;\n                    v65 = v47;\n                    while (v64 != 0 == (v64 != 47)) {\n                        // 0x402773\n                        v47 = v65 + 1;\n                        str3 = (char *)v47;\n                        v64 = *str3;\n                        v65 = v47;\n                    }\n                    if (v47 == v56) {\n                        // break (via goto) -> 0x402940\n                        goto lab_0x402940_3;\n                    }\n                    // 0x40278d\n                    v48 = v64;\n                    v57 = v47 - v56;\n                }\n                // 0x402928\n                v28 = v30;\n                if ((char)v63 != 46) {\n                    // break -> 0x4027ac\n                    break;\n                }\n                goto lab_0x402738;\n            }\n          lab_0x4027ac_2:;\n            int64_t v70 = v30; // 0x4027b0\n            if (*(char *)(v30 - 1) != 47) {\n                // 0x4027b2\n                *(char *)v30 = 47;\n                v70 = v30 + 1;\n            }\n            int64_t v71 = v70;\n            int64_t v72 = v71 + v57;\n            int64_t v73 = v72; // 0x4027c0\n            int64_t v74 = v71; // 0x4027c0\n            v17 = v26;\n            int64_t v75 = v21; // 0x4027c0\n            if (v26 <= v72) {\n                int64_t v76 = v57 < 0x1000 == (4095 - v57 & v57) < 0 ? v57 + 1 : 0x1000;\n                int64_t v77 = v76 + v26 - v21; // 0x4027e3\n                v75 = function_406530(v21, v77);\n                v74 = v75 + v71 - v21;\n                v73 = v74 + v57;\n                v17 = v75 + v77;\n            }\n            // 0x4027fd\n            v18 = v75;\n            v20 = v73;\n            memcpy((int64_t *)v74, (int64_t *)v56, (int32_t)v57);\n            *(char *)v20 = 0;\n            v55 = 0;\n            if ((a2 & 4) != 0 && v3 == 2) {\n                // break -> 0x402833\n                break;\n            }\n            // 0x402870\n            v1 = 1;\n            v49 = (char *)v18;\n            int64_t v78; // bp-200, 0x402690\n            int32_t v79; // 0x402690\n            if ((a2 & 4) == 0) {\n                // 0x4029a8\n                v79 = __lxstat(1, v49, (struct stat *)&v78);\n            } else {\n                // 0x402889\n                v79 = __xstat(1, v49, (struct stat *)&v78);\n            }\n            // 0x402893\n            if (v79 == 0) {\n                // 0x402900\n                v55 = v37;\n                v15 = str3;\n                v11 = v53;\n                v12 = v43;\n                v13 = v52;\n                v14 = v40;\n                v38 = v37;\n                v16 = v20;\n                v19 = v47;\n                switch (v54) {\n                    case -0x6000: {\n                        int64_t v80 = v43; // 0x4029c6\n                        if (v43 == 0) {\n                            // 0x402b53\n                            v1 = 7;\n                            v80 = function_403730(7, 0, 0x4040f0, 0x404160, 0x4041a0);\n                            if (v80 == 0) {\n                                // 0x402b7d\n                                function_406720(7);\n                                // UNREACHABLE\n                            }\n                        }\n                        // 0x4029cc\n                        v45 = v80;\n                        int64_t v81 = function_402e60(v45, v53, &v78); // 0x4029db\n                        if ((char)v81 != 0) {\n                            // 0x402a99\n                            v44 = v45;\n                            if (v3 != 2) {\n                                // 0x402aa4\n                                v32 = 40;\n                                v34 = __errno_location();\n                                goto lab_0x402ab1_2;\n                            }\n                        } else {\n                            // 0x4029e8\n                            function_402dd0(v45, v53, &v78);\n                            int64_t v82; // 0x402690\n                            v50 = function_407ab0(v18, v82);\n                            if (v50 != 0) {\n                                // 0x402a15\n                                str2 = (char *)v50;\n                                len2 = strlen(str2);\n                                v51 = len2;\n                                len3 = strlen(str3);\n                                uint64_t v83 = v51 + 1 + (int64_t)len3; // 0x402a31\n                                if (v52 == 0) {\n                                    int64_t v84 = v83 >= 0x1000 ? v83 : 0x1000; // 0x402be1\n                                    int64_t v85 = function_4064d0(v84); // 0x402bed\n                                    v39 = v84;\n                                    v41 = v85;\n                                    goto lab_0x402a47;\n                                } else {\n                                    // 0x402a3c\n                                    v39 = v52;\n                                    v41 = v40;\n                                    if (v83 > v52) {\n                                        int64_t v86 = function_406530(v40, v83); // 0x402ca2\n                                        v39 = v83;\n                                        v41 = v86;\n                                        goto lab_0x402a47;\n                                    } else {\n                                        goto lab_0x402a47;\n                                    }\n                                }\n                            }\n                            int32_t * v87 = __errno_location(); // 0x402c33\n                            uint32_t v88 = *v87; // 0x402c40\n                            v44 = v45;\n                            if (v3 == 2 != v88 != 12) {\n                                // 0x402ab1\n                                v32 = v88;\n                                v34 = v87;\n                                goto lab_0x402ab1_2;\n                            }\n                        }\n                        goto lab_0x4028e9;\n                    }\n                    case 0x4000: {\n                        goto lab_0x402844;\n                    }\n                    default: {\n                        goto lab_0x402833;\n                    }\n                }\n            } else {\n                int32_t * v89 = __errno_location(); // 0x402897\n                uint32_t v90 = *v89; // 0x40289f\n                if (v3 == 0) {\n                    // 0x402b95\n                    v33 = v90;\n                    v35 = v89;\n                    goto lab_0x402b95_3;\n                }\n                // 0x4028ad\n                v55 = 0;\n                if (v3 != 1) {\n                    // break -> 0x402833\n                    break;\n                }\n                char v91 = *(char *)(v47 + (int64_t)strspn(str3, \"/\")); // 0x4028d5\n                v44 = v43;\n                if (v90 == 2 != (v91 == 0)) {\n                    // 0x402b95\n                    v33 = v90;\n                    v35 = v89;\n                    goto lab_0x402b95_3;\n                }\n                goto lab_0x4028e9;\n            }\n        }\n      lab_0x402833:\n        // 0x402833\n        v15 = str3;\n        v11 = v53;\n        v12 = v43;\n        v13 = v52;\n        v14 = v40;\n        v38 = v55;\n        v16 = v20;\n        v19 = v47;\n        if (v3 != 2 == (*str3 != 0)) {\n            // 0x402b88\n            v33 = 20;\n            v35 = __errno_location();\n            goto lab_0x402b95_3;\n        }\n        goto lab_0x402844;\n    }\n  lab_0x402940_3:;\n    char * v92; // 0x402690\n    int64_t v93; // 0x402690\n    int64_t v94; // 0x402690\n    if (v30 > v46) {\n        int64_t v95 = v30 - 1; // 0x40294a\n        char * v96 = (char *)v95;\n        v92 = v96;\n        v93 = v30;\n        v94 = v95;\n        if (*v96 == 47) {\n            goto lab_0x402958;\n        } else {\n            goto lab_0x402954;\n        }\n    } else {\n        goto lab_0x402954;\n    }\n  lab_0x402738:\n    // 0x402738\n    v25 = v48;\n    v29 = v28;\n    v23 = v47;\n    goto lab_0x402738_2;\n  lab_0x402844:\n    // 0x402844\n    v36 = v38;\n    goto lab_0x402738_4;\n  lab_0x4028e9:\n    // 0x4028e9\n    v42 = v44;\n    v24 = str3;\n    v27 = v20;\n    v22 = v47;\n    goto lab_0x402738_3;\n  lab_0x402954:\n    // 0x402954\n    v92 = (char *)v30;\n    v93 = v30 + 1;\n    v94 = v30;\n    goto lab_0x402958;\n  lab_0x402958:\n    // 0x402958\n    *v92 = 0;\n    int64_t v97 = v21; // 0x40295e\n    if (v26 != v93) {\n        // 0x402960\n        v97 = function_406530(v21, 1 - v21 + v94);\n    }\n    // 0x402972\n    free((int64_t *)v40);\n    int64_t result = v97; // 0x402984\n    if (v43 != 0) {\n        // 0x402986\n        function_403970(v43);\n        result = v97;\n    }\n  lab_0x40298e:\n    // 0x40298e\n    return result;\n  lab_0x402c70:;\n    int64_t v98 = v31 - 1; // 0x402c70\n    v28 = v31;\n    if (*(char *)v98 == 47) {\n        goto lab_0x402738;\n    } else {\n        // 0x402c7a\n        v28 = v98;\n        v31 = v98;\n        if (v21 != v98) {\n            goto lab_0x402c70;\n        } else {\n            goto lab_0x402738;\n        }\n    }\n  lab_0x402b95_3:\n    // 0x402b95\n    free((int64_t *)v40);\n    free((int64_t *)v18);\n    int64_t v99 = v43; // 0x402bbf\n    int64_t v100 = v33; // 0x402bbf\n    int32_t * v101 = v35; // 0x402bbf\n    if (v43 == 0) {\n        goto lab_0x402af1;\n    } else {\n        goto lab_0x402ad5;\n    }\n  lab_0x402af1:\n    // 0x402af1\n    *v101 = (int32_t)(v100 & 0xffffffff);\n    result = 0;\n    goto lab_0x40298e;\n  lab_0x402ad5:\n    // 0x402ad5\n    function_403970(v99);\n    goto lab_0x402af1;\n  lab_0x402ab1_2:\n    // 0x402ab1\n    free((int64_t *)v40);\n    free((int64_t *)v18);\n    v99 = v45;\n    v100 = v32;\n    v101 = v34;\n    goto lab_0x402ad5;\n  lab_0x402a47:\n    // 0x402a47\n    memmove((int64_t *)(v41 + v51), (int64_t *)v47, len3 + 1);\n    int64_t * v102 = (int64_t *)v50; // 0x402a67\n    int64_t * dest_mem = memcpy((int64_t *)v41, v102, len2); // 0x402a67\n    int64_t v103 = v18 + 1; // 0x402a70\n    int64_t v104; // 0x402690\n    int64_t v105; // 0x402690\n    if (*str2 == 47) {\n        // 0x402c56\n        *v49 = 47;\n        v104 = v103;\n        goto lab_0x402a8c;\n    } else {\n        // 0x402a83\n        v104 = v20;\n        if (v20 > v103) {\n            int64_t v106 = v20 - 1; // 0x402ccc\n            v104 = v106;\n            if (v18 >= v106) {\n                goto lab_0x402a8c;\n            } else {\n                // 0x402cd5\n                v104 = v106;\n                v105 = v106;\n                if (*(char *)(v20 - 2) == 47) {\n                    goto lab_0x402a8c;\n                } else {\n                    goto lab_0x402ce2;\n                }\n            }\n        } else {\n            goto lab_0x402a8c;\n        }\n    }\n  lab_0x402a8c:;\n    int64_t v107 = (int64_t)dest_mem; // 0x402a67\n    free(v102);\n    v15 = (char *)dest_mem;\n    v11 = v107;\n    v12 = v45;\n    v13 = v39;\n    v14 = v41;\n    v38 = v37;\n    v16 = v104;\n    v19 = v107;\n    goto lab_0x402844;\n  lab_0x402ce2:;\n    int64_t v108 = v105;\n    int64_t v109 = v108 - 1; // 0x402ce2\n    v104 = v18;\n    if (v18 == v109) {\n        goto lab_0x402a8c;\n    } else {\n        // 0x402cef\n        v104 = v109;\n        v105 = v109;\n        if (*(char *)(v108 - 2) == 47) {\n            goto lab_0x402a8c;\n        } else {\n            goto lab_0x402ce2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_402d10",
            "funcStartAddr": "402d10",
            "funcEndAddr": "402d18",
            "decompiledFuncCode": "int64_t function_402d10(int64_t a1) {\n    // 0x402d10\n    g41 = a1;\n    int64_t result; // 0x402d10\n    return result;\n}\n"
        },
        {
            "funcName": "function_402d20",
            "funcStartAddr": "402d20",
            "funcEndAddr": "402d28",
            "decompiledFuncCode": "int64_t function_402d20(int64_t a1) {\n    // 0x402d20\n    g40 = a1;\n    int64_t result; // 0x402d20\n    return result;\n}\n"
        },
        {
            "funcName": "function_402d30",
            "funcStartAddr": "402d30",
            "funcEndAddr": "402dce",
            "decompiledFuncCode": "int64_t function_402d30(void) {\n    // 0x402d30\n    int32_t * err_num; // 0x402d46\n    if ((int32_t)function_407ba0((int64_t)g31) == 0) {\n        goto lab_0x402d5c;\n    } else {\n        // 0x402d46\n        err_num = __errno_location();\n        if (g40 == 0) {\n            goto lab_0x402d73;\n        } else {\n            // 0x402d57\n            if (*err_num != 32) {\n                goto lab_0x402d73;\n            } else {\n                goto lab_0x402d5c;\n            }\n        }\n    }\n  lab_0x402d5c:;\n    int64_t result = function_407ba0((int64_t)g33); // 0x402d63\n    if ((int32_t)result == 0) {\n        // 0x402d6c\n        return result;\n    }\n    // 0x402dae\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x402d73:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x402d7f\n    if (g41 == 0) {\n        // 0x402db9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402d93\n        error(0, *err_num, \"%s: %s\", (char *)function_405c30((int64_t)g41), v1);\n    }\n    // 0x402dae\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402dd0",
            "funcStartAddr": "402dd0",
            "funcEndAddr": "402e56",
            "decompiledFuncCode": "int64_t function_402dd0(int64_t a1, int64_t a2, int64_t * a3) {\n    if (a1 == 0) {\n        // 0x402e40\n        int64_t result; // 0x402dd0\n        return result;\n    }\n    int64_t v1 = (int64_t)a3;\n    int64_t result2 = function_4064d0(24); // 0x402ded\n    *(int64_t *)result2 = function_406700(a2);\n    *(int64_t *)(result2 + 8) = *(int64_t *)(v1 + 8);\n    *(int64_t *)(result2 + 16) = v1;\n    int64_t v2 = function_403ed0(a1, result2); // 0x402e16\n    if (v2 == 0) {\n        // 0x402e51\n        function_406720(a1);\n        // UNREACHABLE\n    }\n    // 0x402e20\n    if (result2 == v2) {\n        // 0x402e40\n        return result2;\n    }\n    // 0x402e25\n    return function_4041a0(result2);\n}\n"
        },
        {
            "funcName": "function_402e60",
            "funcStartAddr": "402e60",
            "funcEndAddr": "402e9b",
            "decompiledFuncCode": "int64_t function_402e60(int64_t a1, int64_t a2, int64_t * a3) {\n    if (a1 == 0) {\n        // 0x402e98\n        return 0;\n    }\n    int64_t v1 = a2; // bp-40, 0x402e6d\n    int64_t v2 = function_4034c0(a1, &v1); // 0x402e81\n    return v2 & -256 | (int64_t)(v2 != 0);\n}\n"
        },
        {
            "funcName": "function_402ea0",
            "funcStartAddr": "402ea0",
            "funcEndAddr": "402f33",
            "decompiledFuncCode": "int64_t function_402ea0(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x402eb7\n    if (v1 == -1) {\n        // 0x402f2f\n        return -1;\n    }\n    int64_t v2 = v1; // 0x402ebf\n    int64_t v3; // 0x402ea0\n    while (true) {\n      lab_0x402ec8:\n        // 0x402ec8\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x402f20;\n        } else {\n            goto lab_0x402f25;\n        }\n    }\n  lab_0x402f2f_2:;\n    // 0x402f2f\n    int64_t result; // 0x402ea0\n    return result;\n  lab_0x402f25:;\n    int64_t v4 = v3 + 2; // 0x402f25\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x402f2f\n        goto lab_0x402f2f_2;\n    }\n    goto lab_0x402ec8;\n  lab_0x402f20:\n    // 0x402f20\n    result = v3;\n    goto lab_0x402f25;\n}\n"
        },
        {
            "funcName": "function_402f40",
            "funcStartAddr": "402f40",
            "funcEndAddr": "402f50",
            "decompiledFuncCode": "int64_t function_402f40(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x402f40\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_402f50",
            "funcStartAddr": "402f50",
            "funcEndAddr": "402f57",
            "decompiledFuncCode": "int64_t function_402f50(int64_t a1, int64_t a2) {\n    // 0x402f50\n    int64_t v1; // 0x402f50\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_402f60",
            "funcStartAddr": "402f60",
            "funcEndAddr": "402f81",
            "decompiledFuncCode": "int64_t function_402f60(int64_t a1, int64_t a2) {\n    // 0x402f60\n    int64_t v1; // 0x402f60\n    uint64_t v2 = v1;\n    if (*(int64_t *)(a1 + 16) > v2) {\n        // 0x402f78\n        return 16 * v2 + a2;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f90",
            "funcStartAddr": "402f90",
            "funcEndAddr": "4030a9",
            "decompiledFuncCode": "int64_t function_402f90(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_402f60(a1, a2); // 0x402fa4\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x402fac\n    int64_t result2 = *v2; // 0x402fac\n    if (result2 == 0) {\n        // 0x40303e\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x402fd4\n            if (v3 == 0) {\n                // 0x40303e\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x402fe1\n            int64_t v5 = v3; // 0x402fe7\n            int64_t v6 = v1; // 0x402fe7\n            int64_t result = v4; // 0x402fe7\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x40301c_2:\n                // 0x40301c\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x403021\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x403030\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x40303e\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x402ff4\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x403001\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x40301c_2;\n                }\n                // 0x403009\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x40301c_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x40303e\n            return 0;\n        }\n    }\n    // 0x403053\n    if ((char)a4 == 0) {\n        // 0x40303e\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x403058\n    if (v12 == 0) {\n        // 0x4030a0\n        *v2 = 0;\n        // 0x40303e\n        return result2;\n    }\n    // 0x403061\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x40306f\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4030b0",
            "funcStartAddr": "4030b0",
            "funcEndAddr": "40312e",
            "decompiledFuncCode": "int64_t function_4030b0(uint64_t a1) {\n    if (a1 == (int64_t)&g3) {\n        // 0x40312d\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x4030bb\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g3) {\n        // 0x40311a\n        *(int64_t *)a1 = (int64_t)&g3;\n        return 0;\n    }\n    // 0x4030c9\n    __asm_comiss_1(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x4030e4\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_2(v2, 0x3dcccccd); // 0x4030f1\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x4030f9\n    __asm_comiss_1(v4, v3);\n    __asm_comiss_1(__asm_movss(0x3f800000), v4);\n    __asm_comiss_1(v1, v3);\n    // 0x40312d\n    return 1;\n}\n"
        },
        {
            "funcName": "function_403130",
            "funcStartAddr": "403130",
            "funcEndAddr": "40327a",
            "decompiledFuncCode": "int64_t function_403130(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40314a\n    uint64_t v2 = *v1; // 0x40314a\n    if (v2 <= a2) {\n        // 0x403234\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x403130\n    int64_t v8 = a2; // 0x403130\n    int64_t v9; // 0x403130\n    int64_t result; // 0x403130\n    int64_t v10; // 0x403130\n    while (true) {\n      lab_0x403166_2:\n        // 0x403166\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x403166\n        int64_t v12 = *v11; // 0x403166\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x403158;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x40316f\n            int64_t v14 = *v13; // 0x40316f\n            int64_t v15 = v14; // 0x403177\n            int64_t v16 = v12; // 0x403177\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x403194\n                    int64_t v19 = *v18; // 0x403194\n                    int64_t v20 = function_402f60(v3, v19); // 0x40319d\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x4031a2\n                    int64_t v22 = *v21; // 0x4031a2\n                    int64_t * v23 = (int64_t *)v20; // 0x4031a6\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x403180\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x4031cf\n                            break;\n                        }\n                    } else {\n                        // 0x4031ac\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x4031cf\n                            break;\n                        }\n                    }\n                    // 0x403194\n                    v15 = v22;\n                }\n                // 0x4031cf\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x4031d3\n                v9 = *v1;\n                goto lab_0x403158;\n            } else {\n                int64_t v26 = function_402f60(v3, v25); // 0x4031eb\n                int64_t * v27 = (int64_t *)v26; // 0x4031f0\n                if (*v27 == 0) {\n                    // 0x403250\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x4031f9\n                    int64_t * v29; // 0x403130\n                    int64_t v30; // 0x403130\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x40325f\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x403234\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x40325f\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x40320a\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x403219\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x403221\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x40322a\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x403234\n                    break;\n                }\n                goto lab_0x403166_2;\n            }\n        }\n    }\n    // 0x403234\n    return result;\n  lab_0x403158:;\n    int64_t v36 = v10 + 16; // 0x403158\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x403166_2;\n    // 0x403166\n    goto lab_0x403166_2;\n}\n"
        },
        {
            "funcName": "function_403280",
            "funcStartAddr": "403280",
            "funcEndAddr": "403285",
            "decompiledFuncCode": "int64_t function_403280(int64_t a1) {\n    // 0x403280\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_403290",
            "funcStartAddr": "403290",
            "funcEndAddr": "403295",
            "decompiledFuncCode": "int64_t function_403290(int64_t a1) {\n    // 0x403290\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_4032a0",
            "funcStartAddr": "4032a0",
            "funcEndAddr": "4032a5",
            "decompiledFuncCode": "int64_t function_4032a0(int64_t a1) {\n    // 0x4032a0\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_4032b0",
            "funcStartAddr": "4032b0",
            "funcEndAddr": "4032ff",
            "decompiledFuncCode": "int64_t function_4032b0(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x4032b3\n    int64_t result = 0; // 0x4032bc\n    if (v1 <= a1) {\n      lab_0x4032fd:\n        // 0x4032fd\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x4032c0\n    while (*(int64_t *)v3 == 0) {\n        // 0x4032c0\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x4032cf\n    int64_t v6 = v5; // 0x4032db\n    int64_t v7 = 1; // 0x4032db\n    int64_t v8; // 0x4032b0\n    int64_t v9; // 0x4032e0\n    int64_t v10; // 0x4032e4\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x4032e0\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x4032f0\n    int64_t v12 = v3 + 16; // 0x4032f4\n    while (v12 < v1) {\n        // 0x4032c9\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x4032c0\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x4032cf\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x4032e0\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x4032ed\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x4032fd\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403300",
            "funcStartAddr": "403300",
            "funcEndAddr": "403367",
            "decompiledFuncCode": "int64_t function_403300(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x403303\n    int64_t v2 = a1; // 0x40330f\n    int64_t v3 = 0; // 0x40330f\n    int64_t v4 = 0; // 0x40330f\n    int64_t v5 = 0; // 0x40330f\n    int64_t v6 = 0; // 0x40330f\n    int64_t v7; // 0x403300\n    int64_t v8; // 0x403300\n    int64_t v9; // 0x403300\n    if (v1 > a1) {\n        while (true) {\n          lab_0x403321_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x403318;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x403327\n                int64_t v13 = v10 + 1; // 0x40332b\n                int64_t v14 = v11 + 1; // 0x40332f\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x403336\n                int64_t v16 = v14; // 0x403336\n                if (v12 == 0) {\n                    goto lab_0x403318;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x403340\n                    int64_t v18 = v16 + 1; // 0x403344\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x403340\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x40334d\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x403356\n                        break;\n                    }\n                    goto lab_0x403321_2;\n                }\n            }\n        }\n    }\n  lab_0x403356:\n    // 0x403356\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x40335f\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x40335e\n    return 0;\n  lab_0x403318:;\n    int64_t v20 = v8 + 16; // 0x403318\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x403356\n        goto lab_0x403356;\n    }\n    goto lab_0x403321_2;\n    // 0x403321\n    goto lab_0x403321_2;\n}\n"
        },
        {
            "funcName": "function_403370",
            "funcStartAddr": "403370",
            "funcEndAddr": "4034b8",
            "decompiledFuncCode": "int64_t function_403370(uint64_t a1, int64_t a2) {\n    // 0x403370\n    int128_t v1; // 0x403370\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x403383\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x403387\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x40338e\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x4033a0\n            while (*(int64_t *)v7 == 0) {\n                // 0x4033a0\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x4033dd\n                    goto lab_0x4033dd;\n                }\n            }\n        }\n    }\n  lab_0x4033dd:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x4033ec\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x403370\n    int128_t v10; // 0x403370\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x403483\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x40348c\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x403423;\n        } else {\n            goto lab_0x403499;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x403416\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x403499;\n        } else {\n            goto lab_0x403423;\n        }\n    }\n  lab_0x403423:\n    // 0x403423\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x403427\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x403427\n    goto lab_0x40342c;\n  lab_0x403499:\n    // 0x403499\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x4034aa\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x40342c;\n  lab_0x40342c:\n    // 0x40342c\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_4034c0",
            "funcStartAddr": "4034c0",
            "funcEndAddr": "403513",
            "decompiledFuncCode": "int64_t function_4034c0(int64_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int64_t v1 = function_402f60(a1, result); // 0x4034ca\n    int64_t v2 = *(int64_t *)v1; // 0x4034cf\n    if (v2 == 0) {\n        // 0x4034fd\n        return 0;\n    }\n    // 0x4034e3\n    if (v2 == result) {\n        // 0x4034fd\n        return result;\n    }\n    int64_t v3 = v1; // 0x4034f4\n    int64_t result2 = v2; // 0x4034f2\n    while ((char)v1 == 0) {\n        // 0x4034f4\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x4034fd\n            break;\n        }\n        // 0x4034e0\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x4034fd\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x4034fd\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403520",
            "funcStartAddr": "403520",
            "funcEndAddr": "403568",
            "decompiledFuncCode": "int64_t function_403520(uint64_t a1) {\n    int64_t result = 0; // 0x403525\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x403537\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40352e\n    if (v1 <= a1) {\n        // 0x403537\n        return result;\n    }\n    int64_t v2 = a1; // 0x403535\n    int64_t v3 = *(int64_t *)v2; // 0x403549\n    result = v3;\n    while (v3 == 0) {\n        // 0x403540\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x403537\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x403537\n    return result;\n}\n"
        },
        {
            "funcName": "function_403570",
            "funcStartAddr": "403570",
            "funcEndAddr": "4035da",
            "decompiledFuncCode": "int64_t function_403570(int64_t a1, int64_t a2) {\n    int64_t v1 = function_402f60(a1, a2); // 0x40357c\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x403598\n    while (*(int64_t *)v2 != a2) {\n        // 0x403590\n        if (v3 == 0) {\n            goto lab_0x4035a6;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x4035d0\n        return *(int64_t *)v3;\n    }\n  lab_0x4035a6:;\n    int64_t v4 = v1 + 16; // 0x4035b8\n    int64_t result = 0; // 0x4035bf\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x4035b0\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x4035c3\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x4035c3\n    return result;\n}\n"
        },
        {
            "funcName": "function_4035e0",
            "funcStartAddr": "4035e0",
            "funcEndAddr": "403644",
            "decompiledFuncCode": "int64_t function_4035e0(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x4035e6\n    int64_t result = 0; // 0x4035ea\n    if (*v1 <= a1) {\n      lab_0x403601:\n        // 0x403601\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x4035ef\n    int64_t v4 = v2; // 0x4035f5\n    int64_t v5; // 0x4035e0\n    int64_t v6; // 0x4035e0\n    int64_t v7; // 0x403628\n    int64_t v8; // 0x403631\n    int64_t v9; // 0x403611\n    int64_t v10; // 0x403615\n    if (v3 != 0) {\n        // 0x403608\n        if (v2 >= a3) {\n            // break -> 0x403601\n            break;\n        }\n        // 0x40360d\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x403625\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x403620\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x403625\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x4035f7\n    result = v11;\n    while (*v1 > v12) {\n        // 0x4035ef\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x403608\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x403601\n                break;\n            }\n            // 0x40360d\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x403625\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x403620\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x403625\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x4035f7\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x403601\n    return result;\n}\n"
        },
        {
            "funcName": "function_403650",
            "funcStartAddr": "403650",
            "funcEndAddr": "4036c8",
            "decompiledFuncCode": "int64_t function_403650(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x403661\n    int64_t result = 0; // 0x403665\n    if (v1 <= a1) {\n      lab_0x403684:\n        // 0x403684\n        return result;\n    }\n    int64_t v2 = a1; // 0x40367a\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x403678\n    int64_t v5 = v2; // 0x403678\n    int64_t v6 = v3; // 0x403678\n    int64_t v7; // 0x403650\n    int64_t v8; // 0x4036a8\n    int64_t v9; // 0x4036ac\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x4036a8\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x4036b8\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x4036a8\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x403672\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x4036a8\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x4036b8\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x4036a8\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x40367a\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x403684\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4036d0",
            "funcStartAddr": "4036d0",
            "funcEndAddr": "403701",
            "decompiledFuncCode": "int64_t function_4036d0(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x4036d7\n    if (v1 == 0) {\n        // 0x4036fd\n        return 0;\n    }\n    int64_t result = 0; // 0x4036d7\n    v2++;\n    char v3 = *(char *)v2; // 0x4036f3\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x4036fd\n    return result;\n}\n"
        },
        {
            "funcName": "function_403710",
            "funcStartAddr": "403710",
            "funcEndAddr": "403730",
            "decompiledFuncCode": "int64_t function_403710(int64_t a1) {\n    // 0x403710\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_403730",
            "funcStartAddr": "403730",
            "funcEndAddr": "4038ba",
            "decompiledFuncCode": "int64_t function_403730(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x403730\n    int128_t v1; // 0x403730\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x40376a\n    int64_t result = (int64_t)mem; // 0x40376a\n    if (mem == NULL) {\n        // 0x40381a\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x40377b\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x403730\n    int128_t v6; // 0x403730\n    if (a2 == 0) {\n        // 0x403830\n        *v4 = (int64_t)&g3;\n        int64_t v7 = function_4030b0(v3); // 0x403838\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x40383d\n        if ((char)v7 == 0) {\n            // 0x403810\n            free(mem);\n            // 0x40381a\n            return 0;\n        }\n        // 0x403849\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x403893;\n        } else {\n            goto lab_0x40384e;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_4030b0(v3) == 0) {\n            // 0x403810\n            free(mem);\n            // 0x40381a\n            return 0;\n        }\n        // 0x403795\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_402ea0(a1); // 0x4037a3\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x403810\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x403810\n                free(mem);\n                // 0x40381a\n                return 0;\n            }\n            // 0x4037c1\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x403810\n                free(mem);\n                // 0x40381a\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x4037d2\n            int64_t v10 = (int64_t)mem2; // 0x4037d2\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x403810\n                free(mem);\n                // 0x40381a\n                return 0;\n            }\n            // 0x4037df\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x402f40 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x402f50 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x40381a\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x403888\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x40384e;\n        } else {\n            goto lab_0x403893;\n        }\n    }\n  lab_0x403893:\n    // 0x403893\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x4038a3\n    int128_t v13 = v6; // 0x4038ac\n    int128_t v14 = __asm_addss(v12, v12); // 0x4038ac\n    goto lab_0x403857;\n  lab_0x40384e:\n    // 0x40384e\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x403857;\n  lab_0x403857:\n    // 0x403857\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x403810\n    free(mem);\n    // 0x40381a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4038c0",
            "funcStartAddr": "4038c0",
            "funcEndAddr": "403968",
            "decompiledFuncCode": "int64_t function_4038c0(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x4038ca\n    uint64_t v2 = *v1; // 0x4038ca\n    int64_t result; // 0x4038c0\n    if (v2 <= a1) {\n      lab_0x403953:\n        // 0x403953\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x4038d8\n    while (*v6 == 0) {\n        // 0x4038d8\n        v7 = v5 + 16;\n        int64_t v8; // 0x4038c0\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x403953\n            goto lab_0x403953;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x4038e9\n    int64_t v10 = *v9; // 0x4038e9\n    int64_t v11 = *v3; // 0x4038ee\n    int64_t v12 = v11; // 0x4038f5\n    int64_t v13 = v10; // 0x4038f5\n    int64_t result2 = v11; // 0x4038f5\n    int64_t * v14; // 0x40390e\n    int64_t v15; // 0x40390e\n    int64_t v16; // 0x40390a\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x403905\n            v16 = *v3;\n        }\n        // 0x40390e\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x403900\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x403905\n                v16 = *v3;\n            }\n            // 0x40390e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40392d\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x403940\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x40394d\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x4038dc\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x4038d8\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x403953\n                goto lab_0x403953;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x4038e9\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x403905\n                v16 = *v3;\n            }\n            // 0x40390e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x403900\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x403905\n                    v16 = *v3;\n                }\n                // 0x40390e\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40392d\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x403953\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403970",
            "funcStartAddr": "403970",
            "funcEndAddr": "403a46",
            "decompiledFuncCode": "int64_t function_403970(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40397f\n    uint64_t v2 = *v1; // 0x40397f\n    int64_t v3 = a1; // 0x403983\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x4039d3;\n    } else {\n        // 0x403985\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x4039d3;\n        } else {\n            // 0x40398c\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x4039a1\n                int64_t v6; // 0x403998\n                while (v5 == 0) {\n                    // 0x403998\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x4039d3\n                        goto lab_0x4039d3;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x4039b8\n                int64_t v8 = v7; // 0x4039bf\n                int64_t v9 = v5; // 0x4039bf\n                int64_t v10; // 0x403970\n                int64_t v11; // 0x4039b8\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x4039b0\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x4039b3\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x4039c6\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x4039a1\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x403998\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x4039d3\n                            goto lab_0x4039d3;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x4039b3\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x4039b0\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x4039b3\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x4039c1\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x4039d3;\n            } else {\n                goto lab_0x403a0c;\n            }\n        }\n    }\n  lab_0x4039d3:\n    // 0x4039d3\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x4039e0\n        int64_t v14 = v13; // 0x4039e7\n        int64_t v15 = v2; // 0x4039e7\n        int64_t v16; // 0x4039f0\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x4039f0\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x403a01\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x403a01\n        int64_t v18 = v15; // 0x403a0a\n        int64_t v19 = v17; // 0x403a0a\n        while (v15 > v17) {\n            // 0x4039e0\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x4039f0\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x403a01\n                v15 = *v1;\n            }\n            // 0x403a01\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x403a0c;\n  lab_0x403a0c:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x403a0c\n    if (v20 == 0) {\n        // 0x403a31\n        free(NULL);\n        free((int64_t *)a1);\n        return &g54;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x403a20\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x403a2f\n    while (v21 != 0) {\n        // 0x403a20\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x403a31\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g54;\n}\n"
        },
        {
            "funcName": "function_403a50",
            "funcStartAddr": "403a50",
            "funcEndAddr": "403c4a",
            "decompiledFuncCode": "int64_t function_403a50(int64_t a1, uint64_t a2) {\n    // 0x403a50\n    int128_t v1; // 0x403a50\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x403a5b\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x403a50\n        if (a2 < 0) {\n            // 0x403bd0\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x403be0\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x403a70\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x403a79\n        __asm_comiss(__asm_divss_4(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x403bc2\n        return 0;\n    }\n    uint64_t nmemb = function_402ea0(a2); // 0x403ab3\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x403bc2\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x403aeb\n    if (*v6 == nmemb) {\n        // 0x403bc2\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x403afd\n    int64_t v7 = (int64_t)mem; // 0x403afd\n    int64_t v8 = v7; // bp-104, 0x403b02\n    if (mem == NULL) {\n        // 0x403bc2\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x403b5a\n    int64_t v10 = *v9; // 0x403b5a\n    int64_t v11 = function_403130(&v8, a1, 0); // 0x403b63\n    int64_t result = v11 & 0xffffffff; // 0x403b68\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x403b24\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x403b86\n        function_403130(v13, v12, 1);\n        function_403130(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x403c10\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x403bc2\n    return result;\n}\n"
        },
        {
            "funcName": "function_403c50",
            "funcStartAddr": "403c50",
            "funcEndAddr": "403ec4",
            "decompiledFuncCode": "int64_t function_403c50(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x403c50\n    int128_t v1; // 0x403c50\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x403c50\n    int64_t v5 = function_402f90(a1, a2, &v4, 0); // 0x403c71\n    if (v5 != 0) {\n        // 0x403c7e\n        if (a3 != NULL) {\n            // 0x403c85\n            *a3 = v5;\n        }\n        // 0x403c89\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x403c98\n    uint64_t v7 = *v6; // 0x403c98\n    int64_t v8; // 0x403c50\n    int64_t v9; // 0x403c50\n    int64_t v10; // 0x403c50\n    int128_t v11; // 0x403c50\n    int128_t v12; // 0x403c50\n    int64_t v13; // 0x403c50\n    if (v7 < 0) {\n        // 0x403d20\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x403d30\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x403d34\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x403d39\n        int128_t v17 = __asm_addss(v15, v15); // 0x403d3d\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x403cbb;\n        } else {\n            goto lab_0x403d4a;\n        }\n    } else {\n        // 0x403ca1\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x403ca5\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x403ca9\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x403cae\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x403d4a;\n        } else {\n            goto lab_0x403cbb;\n        }\n    }\n  lab_0x403cbb:\n    // 0x403cbb\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x403cc4\n    __asm_comiss_1(v11, v21);\n    int128_t v22 = v21; // 0x403ccc\n    int128_t v23 = v11; // 0x403ccc\n    if (v13 == 0) {\n        goto lab_0x403cd2;\n    } else {\n        goto lab_0x403d71;\n    }\n  lab_0x403d4a:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x403d57\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x403d5a\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x403d63\n    __asm_comiss_1(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x403cd2;\n    } else {\n        goto lab_0x403d71;\n    }\n  lab_0x403cd2:;\n    int64_t * v28 = (int64_t *)v4; // 0x403cd7\n    if (*v28 == 0) {\n        // 0x403de8\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x403df1\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x403ce2\n    int64_t v31 = *v30; // 0x403ce2\n    int64_t * v32; // 0x403c50\n    int64_t v33; // 0x403c50\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x403e0d\n        if (mem == NULL) {\n            // 0x403c89\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x403e0d\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x403cf7\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x403d0d\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x403d71:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x403d71\n    function_4030b0(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x403d7a\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x403d7e\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x403d82\n    int128_t v44; // 0x403c50\n    if (v42 < 0) {\n        // 0x403e40\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x403e50\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x403d90\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x403d99\n    int128_t v47; // 0x403c50\n    int64_t v48; // 0x403c50\n    if (v46 < 0) {\n        // 0x403e20\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x403e2d\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x403e30\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x403da2\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x403da6\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x403dab\n    __asm_comiss_1(v47, __asm_mulss_3(__asm_movaps(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x403dbb\n        int128_t v53 = v52; // 0x403dc4\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x403e60\n            v53 = __asm_mulss_3(v52, v43);\n        }\n        // 0x403dca\n        __asm_comiss(v53, 0x5f800000);\n        // 0x403c89\n        return 0xffffffff;\n    }\n    goto lab_0x403cd2;\n}\n"
        },
        {
            "funcName": "function_403ed0",
            "funcStartAddr": "403ed0",
            "funcEndAddr": "403f0b",
            "decompiledFuncCode": "int64_t function_403ed0(int64_t a1, int64_t a2) {\n    // 0x403ed0\n    int64_t v1; // bp-16, 0x403ed0\n    int64_t v2; // 0x403ed0\n    int32_t v3 = function_403c50(a1, a2, &v1, v2); // 0x403ee2\n    if (v3 == -1) {\n        // 0x403ef0\n        return 0;\n    }\n    // 0x403ee7\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_403f10",
            "funcStartAddr": "403f10",
            "funcEndAddr": "4040e7",
            "decompiledFuncCode": "int64_t function_403f10(int64_t a1) {\n    // 0x403f10\n    int128_t v1; // 0x403f10\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x403f10\n    int64_t v5; // 0x403f10\n    int64_t result = function_402f90(a1, v5, &v4, 1); // 0x403f25\n    if (result == 0) {\n        // 0x403f42\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x403f37\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x403f42\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x403f50\n    uint64_t v8 = *v7 - 1; // 0x403f54\n    *v7 = v8;\n    int64_t v9; // 0x403f10\n    int64_t v10; // 0x403f10\n    int64_t v11; // 0x403f10\n    int128_t v12; // 0x403f10\n    int128_t v13; // 0x403f10\n    int64_t v14; // 0x403f10\n    if (v8 < 0) {\n        // 0x404040\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x404050\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x404054\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x404059\n        int128_t v18 = __asm_addss(v16, v16); // 0x40405d\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x403f7c;\n        } else {\n            goto lab_0x40406a;\n        }\n    } else {\n        // 0x403f62\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x403f66\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x403f6a\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x403f6f\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x40406a;\n        } else {\n            goto lab_0x403f7c;\n        }\n    }\n  lab_0x403f7c:\n    // 0x403f7c\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x403f80\n    int64_t v23 = v14; // 0x403f80\n    int128_t v24 = v12; // 0x403f80\n    int64_t v25 = v10; // 0x403f80\n    int128_t v26 = v22; // 0x403f80\n    goto lab_0x403f85;\n  lab_0x40406a:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x404077\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x40407a\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x403f85;\n  lab_0x403f85:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x403f85\n    __asm_comiss_1(v28, v27);\n    if (v23 == 0) {\n        // 0x403f42\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x403f8e\n    function_4030b0(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x403f97\n    int64_t v31 = *(int64_t *)v29; // 0x403f9b\n    int128_t v32; // 0x403f10\n    if (v30 < 0) {\n        // 0x4040b0\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x4040c0\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x403fa8\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x403fb1\n    int128_t v35; // 0x403f10\n    int64_t v36; // 0x403f10\n    if (v34 < 0) {\n        // 0x404090\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x40409d\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x4040a0\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x403fbe\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x403fc2\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x403fc7\n    __asm_comiss_1(__asm_mulss_3(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x403f42\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x403fd8\n    int128_t v41 = v40; // 0x403fe1\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x403fe3\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x403fe8\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x4040d8\n    if ((char)function_403a50(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x403f42\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x40400a\n    if (*v43 != 0) {\n        int64_t v44; // 0x403f10\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x404018\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x404029\n    *v43 = 0;\n    // 0x403f42\n    return result;\n}\n"
        },
        {
            "funcName": "function_4040f0",
            "funcStartAddr": "4040f0",
            "funcEndAddr": "404117",
            "decompiledFuncCode": "int64_t function_4040f0(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x4040f0\n    return (*(int64_t *)(a1 + 8) ^ function_407dd0(a1, a2, a3)) % a2;\n}\n"
        },
        {
            "funcName": "function_404120",
            "funcStartAddr": "404120",
            "funcEndAddr": "40412d",
            "decompiledFuncCode": "int64_t function_404120(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x404120\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_404130",
            "funcStartAddr": "404130",
            "funcEndAddr": "404155",
            "decompiledFuncCode": "int64_t function_404130(int64_t a1, int64_t a2) {\n    // 0x404130\n    if (*(int64_t *)(a1 + 8) != *(int64_t *)(a2 + 8) || *(int64_t *)(a1 + 16) != *(int64_t *)(a2 + 16)) {\n        // 0x40413a\n        return 0;\n    }\n    // 0x40414a\n    return function_405e00(a1, a2);\n}\n"
        },
        {
            "funcName": "function_404160",
            "funcStartAddr": "404160",
            "funcEndAddr": "404193",
            "decompiledFuncCode": "int64_t function_404160(int64_t str, int64_t str2) {\n    // 0x404160\n    if (*(int64_t *)(str + 8) != *(int64_t *)(str2 + 8) || *(int64_t *)(str + 16) != *(int64_t *)(str2 + 16)) {\n        // 0x40416c\n        return 0;\n    }\n    int32_t strcmp_rc = strcmp((char *)str, (char *)str2); // 0x404184\n    return (int64_t)(strcmp_rc & -256) | (int64_t)(strcmp_rc == 0);\n}\n"
        },
        {
            "funcName": "function_4041a0",
            "funcStartAddr": "4041a0",
            "funcEndAddr": "4041b5",
            "decompiledFuncCode": "int64_t function_4041a0(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x4041a7\n    free(v1);\n    free(v1);\n    return &g54;\n}\n"
        },
        {
            "funcName": "function_4041c0",
            "funcStartAddr": "4041c0",
            "funcEndAddr": "404259",
            "decompiledFuncCode": "int64_t function_4041c0(int64_t str) {\n    // 0x4041c0\n    if (str == 0) {\n        // 0x404239\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g33);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4041ce\n    int64_t result = (int64_t)found_char_pos; // 0x4041ce\n    if (found_char_pos == NULL) {\n        // 0x404229\n        g42 = str;\n        g32 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4041d8\n    if (v1 - str < 7) {\n        // 0x404229\n        g42 = str;\n        g32 = str;\n        return result;\n    }\n    // 0x4041e8\n    bool v2; // 0x4041c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4041c0\n    int64_t v5 = result - 6; // 0x4041c0\n    int64_t v6 = 7; // 0x4041f6\n    unsigned char v7 = *(char *)v5; // 0x4041f6\n    char v8 = *(char *)v4; // 0x4041f6\n    char v9 = v8; // 0x4041f6\n    bool v10 = false; // 0x4041f6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x404200\n    int64_t v13 = v1; // 0x404200\n    int64_t v14 = 3; // 0x404200\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x404229\n        g42 = str;\n        g32 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x404212\n    char v16 = *(char *)v12; // 0x404212\n    char v17 = v16; // 0x404212\n    bool v18 = false; // 0x404212\n    while (v15 == v16) {\n        // 0x404202\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40421c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40421e\n        v20 = result + 4;\n        g30 = v20;\n    }\n    // 0x404229\n    g42 = v20;\n    g32 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404260",
            "funcStartAddr": "404260",
            "funcEndAddr": "404352",
            "decompiledFuncCode": "int64_t function_404260(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x404274\n    int64_t result = (int64_t)v1; // 0x404274\n    if (result != a1) {\n        // 0x404281\n        return result;\n    }\n    int64_t v2 = function_407e10(); // 0x404290\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x404346\n    if (v3 == 85) {\n        // 0x4042a0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x404338\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x4042ce\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x4042db\n        // 0x404281\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x404338\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x40431d\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x40432a\n    // 0x404281\n    return result4;\n}\n"
        },
        {
            "funcName": "function_404360",
            "funcStartAddr": "404360",
            "funcEndAddr": "4043b7",
            "decompiledFuncCode": "int64_t function_404360(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x404360\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4043b7",
            "funcStartAddr": "4043b7",
            "funcEndAddr": "405581",
            "decompiledFuncCode": "int64_t function_4043b7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x404401\n    int64_t v3 = 0; // 0x404401\n    int64_t v4; // 0x4043b7\n    int64_t v5; // 0x4043b7\n    int64_t v6; // 0x4043b7\n    int64_t v7; // 0x4043b7\n    int64_t v8; // 0x4043b7\n    int64_t v9; // 0x4043b7\n    int64_t v10; // 0x4043b7\n    int64_t v11; // 0x4043b7\n    int64_t v12; // 0x4043b7\n    int64_t v13; // 0x4043b7\n    int64_t v14; // 0x4043b7\n    int64_t v15; // 0x4043b7\n    int64_t v16; // 0x4043b7\n    int64_t v17; // 0x4043b7\n    int64_t v18; // 0x4043b7\n    int64_t result; // 0x4043b7\n    int64_t v19; // 0x4043b7\n    int32_t wc; // bp+132, 0x4043b7\n    int64_t ps; // bp+136, 0x4043b7\n    char v20; // 0x404970\n    int64_t v21; // 0x404970\n    int64_t v22; // 0x404d18\n    int64_t v23; // 0x4043b7\n    int64_t v24; // 0x404d37\n    int32_t v25; // 0x4043b7\n    while (true) {\n      lab_0x404408_2:\n        // 0x404408\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4043b7\n        int64_t v27; // 0x40443c\n        while (true) {\n          lab_0x404408:\n            // 0x404408\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x404413\n            if (v15 == -1) {\n                // 0x404415\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x404423\n            if (v28) {\n                // break (via goto) -> 0x404b88\n                goto lab_0x404b88;\n            }\n            // 0x40442c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g53 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x404a1b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x404561;\n                    }\n                    // 0x404e3d\n                    v26 = v5 + 1;\n                    goto lab_0x404408;\n                }\n                case 7: {\n                    goto lab_0x404561;\n                }\n                case 8: {\n                    goto lab_0x404561;\n                }\n                case 9: {\n                    goto lab_0x40477a_2;\n                }\n                case 10: {\n                    goto lab_0x40477a_2;\n                }\n                case 11: {\n                    goto lab_0x404561;\n                }\n                case 12: {\n                    goto lab_0x404561;\n                }\n                case 13: {\n                    goto lab_0x40477a_2;\n                }\n                case 32: {\n                    goto lab_0x40477a_2;\n                }\n                case 33: {\n                    goto lab_0x40477a_2;\n                }\n                case 34: {\n                    goto lab_0x40477a_2;\n                }\n                case 35: {\n                    goto lab_0x40452d;\n                }\n                case 36: {\n                    goto lab_0x40477a_2;\n                }\n                case 37: {\n                    goto lab_0x404561;\n                }\n                case 38: {\n                    goto lab_0x40477a_2;\n                }\n                case 39: {\n                    goto lab_0x40477a_2;\n                }\n                case 40: {\n                    goto lab_0x40477a_2;\n                }\n                case 41: {\n                    goto lab_0x40477a_2;\n                }\n                case 42: {\n                    goto lab_0x40477a_2;\n                }\n                case 43: {\n                    goto lab_0x404561;\n                }\n                case 44: {\n                    goto lab_0x404561;\n                }\n                case 45: {\n                    goto lab_0x404561;\n                }\n                case 46: {\n                    goto lab_0x404561;\n                }\n                case 47: {\n                    goto lab_0x404561;\n                }\n                case 48: {\n                    goto lab_0x404561;\n                }\n                case 49: {\n                    goto lab_0x404561;\n                }\n                case 50: {\n                    goto lab_0x404561;\n                }\n                case 51: {\n                    goto lab_0x404561;\n                }\n                case 52: {\n                    goto lab_0x404561;\n                }\n                case 53: {\n                    goto lab_0x404561;\n                }\n                case 54: {\n                    goto lab_0x404561;\n                }\n                case 55: {\n                    goto lab_0x404561;\n                }\n                case 56: {\n                    goto lab_0x404561;\n                }\n                case 57: {\n                    goto lab_0x404561;\n                }\n                case 58: {\n                    goto lab_0x404561;\n                }\n                case 59: {\n                    goto lab_0x40477a_2;\n                }\n                case 60: {\n                    goto lab_0x40477a_2;\n                }\n                case 61: {\n                    goto lab_0x40477a_2;\n                }\n                case 62: {\n                    goto lab_0x40477a_2;\n                }\n                case 63: {\n                    goto lab_0x40477a_2;\n                }\n                case 65: {\n                    goto lab_0x404561;\n                }\n                case 66: {\n                    goto lab_0x404561;\n                }\n                case 67: {\n                    goto lab_0x404561;\n                }\n                case 68: {\n                    goto lab_0x404561;\n                }\n                case 69: {\n                    goto lab_0x404561;\n                }\n                case 70: {\n                    goto lab_0x404561;\n                }\n                case 71: {\n                    goto lab_0x404561;\n                }\n                case 72: {\n                    goto lab_0x404561;\n                }\n                case 73: {\n                    goto lab_0x404561;\n                }\n                case 74: {\n                    goto lab_0x404561;\n                }\n                case 75: {\n                    goto lab_0x404561;\n                }\n                case 76: {\n                    goto lab_0x404561;\n                }\n                case 77: {\n                    goto lab_0x404561;\n                }\n                case 78: {\n                    goto lab_0x404561;\n                }\n                case 79: {\n                    goto lab_0x404561;\n                }\n                case 80: {\n                    goto lab_0x404561;\n                }\n                case 81: {\n                    goto lab_0x404561;\n                }\n                case 82: {\n                    goto lab_0x404561;\n                }\n                case 83: {\n                    goto lab_0x404561;\n                }\n                case 84: {\n                    goto lab_0x404561;\n                }\n                case 85: {\n                    goto lab_0x404561;\n                }\n                case 86: {\n                    goto lab_0x404561;\n                }\n                case 87: {\n                    goto lab_0x404561;\n                }\n                case 88: {\n                    goto lab_0x404561;\n                }\n                case 89: {\n                    goto lab_0x404561;\n                }\n                case 90: {\n                    goto lab_0x404561;\n                }\n                case 91: {\n                    goto lab_0x40477a_2;\n                }\n                case 92: {\n                    goto lab_0x40477a_2;\n                }\n                case 93: {\n                    goto lab_0x404561;\n                }\n                case 94: {\n                    goto lab_0x40477a_2;\n                }\n                case 95: {\n                    goto lab_0x404561;\n                }\n                case 96: {\n                    goto lab_0x40477a_2;\n                }\n                case 97: {\n                    goto lab_0x404561;\n                }\n                case 98: {\n                    goto lab_0x404561;\n                }\n                case 99: {\n                    goto lab_0x404561;\n                }\n                case 100: {\n                    goto lab_0x404561;\n                }\n                case 101: {\n                    goto lab_0x404561;\n                }\n                case 102: {\n                    goto lab_0x404561;\n                }\n                case 103: {\n                    goto lab_0x404561;\n                }\n                case 104: {\n                    goto lab_0x404561;\n                }\n                case 105: {\n                    goto lab_0x404561;\n                }\n                case 106: {\n                    goto lab_0x404561;\n                }\n                case 107: {\n                    goto lab_0x404561;\n                }\n                case 108: {\n                    goto lab_0x404561;\n                }\n                case 109: {\n                    goto lab_0x404561;\n                }\n                case 110: {\n                    goto lab_0x404561;\n                }\n                case 111: {\n                    goto lab_0x404561;\n                }\n                case 112: {\n                    goto lab_0x404561;\n                }\n                case 113: {\n                    goto lab_0x404561;\n                }\n                case 114: {\n                    goto lab_0x404561;\n                }\n                case 115: {\n                    goto lab_0x404561;\n                }\n                case 116: {\n                    goto lab_0x404561;\n                }\n                case 117: {\n                    goto lab_0x404561;\n                }\n                case 118: {\n                    goto lab_0x404561;\n                }\n                case 119: {\n                    goto lab_0x404561;\n                }\n                case 120: {\n                    goto lab_0x404561;\n                }\n                case 121: {\n                    goto lab_0x404561;\n                }\n                case 122: {\n                    goto lab_0x404561;\n                }\n                case 123: {\n                    goto lab_0x404505;\n                }\n                case 124: {\n                    goto lab_0x40477a_2;\n                }\n                case 125: {\n                    goto lab_0x404505;\n                }\n                case 126: {\n                    goto lab_0x40452d;\n                }\n                default: {\n                    goto lab_0x404905;\n                }\n            }\n        }\n      lab_0x404905:\n        if (v23 != 1) {\n            // 0x404c70\n            ps = 0;\n            int64_t len = v15; // 0x404c80\n            if (v15 == -1) {\n                // 0x404c82\n                len = strlen((char *)str);\n            }\n            // 0x404cae\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x404d0f:\n                // 0x404d0f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x404d14\n                int64_t v30 = v29 + str;\n                v24 = function_407a30(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40528a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40528a_2;\n                    }\n                    case -2: {\n                        // 0x40536d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4053a7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4053aa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4053b7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4053b0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40528a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40528a_2;\n                    }\n                    case 1: {\n                        goto lab_0x404ce0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x404d8c\n                        char v34 = *(char *)v33; // 0x404d9d\n                        unsigned char v35; // 0x4043b7\n                        if (v34 < 125) {\n                            // 0x404da8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x404dbf\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                goto lab_0x40477a_2;\n                            }\n                        }\n                        // 0x404d90\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x404d9d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x404da8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x404dbf\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    goto lab_0x40477a_2;\n                                }\n                            }\n                            // 0x404d90\n                            v33++;\n                        }\n                        goto lab_0x404ce0;\n                    }\n                }\n            }\n            goto lab_0x40528a_2;\n        } else {\n            // 0x404954\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x404561;\n        }\n    }\n  lab_0x404b88:\n    // 0x404b88\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40548a\n        if (v8 > result) {\n            // 0x405493\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4047b7\n        return result;\n    }\n    goto lab_0x40477a_2;\n  lab_0x404561:;\n    int64_t v56 = v13;\n    int64_t v57 = v9;\n    int64_t v58 = v16;\n    if (v23 != 0) {\n        // 0x404570\n        v4 = v58;\n        v6 = v57;\n        v10 = v56;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40477a_2;\n        }\n    }\n    int64_t v42 = result; // 0x404671\n    char v43 = v20; // 0x404671\n    int64_t v44 = v58; // 0x404671\n    v3 = v5 + 1;\n    int64_t v45 = v57; // 0x404671\n    int64_t v46 = v56; // 0x404671\n    goto lab_0x4045ed;\n  lab_0x40477a_2:;\n    // 0x4047b7\n    char * v36; // 0x4043b7\n    return function_404360(v10, v6, str, v4, 2, v25 & -3, 0, (int64_t)v36, (int64_t)v36);\n  lab_0x40528a_2:;\n    uint64_t v37 = v19;\n    int64_t v38 = 0x100000000 * v8 >> 32;\n    int64_t v39 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v38;\n    v13 = v39;\n    if (v37 < 2) {\n        goto lab_0x404561;\n    } else {\n        uint64_t v40 = v37 + v5; // 0x404e5e\n        int64_t v41 = v5 + 1; // 0x404f41\n        v42 = result;\n        v43 = v20;\n        v44 = v22;\n        v3 = v41;\n        v45 = v38;\n        v46 = v39;\n        int64_t v47 = v41; // 0x404f48\n        char v48 = v20; // 0x404f48\n        int64_t v49 = result; // 0x404f48\n        if (v41 < v40) {\n            uint64_t v50 = v49;\n            if (v38 > v50) {\n                // 0x404f11\n                *(char *)(v50 + v39) = v48;\n            }\n            char v51 = *(char *)(v47 + str); // 0x404f15\n            int64_t v52 = v50 + 1; // 0x404f1a\n            int64_t v53 = v47 + 1; // 0x404f41\n            v42 = v52;\n            v43 = v51;\n            v44 = v22;\n            v3 = v53;\n            v45 = v38;\n            v46 = v39;\n            v47 = v53;\n            while (v53 < v40) {\n                // 0x404f0c\n                v50 = v52;\n                if (v38 > v50) {\n                    // 0x404f11\n                    *(char *)(v50 + v39) = v51;\n                }\n                // 0x404f15\n                v51 = *(char *)(v47 + str);\n                v52 = v50 + 1;\n                v53 = v47 + 1;\n                v42 = v52;\n                v43 = v51;\n                v44 = v22;\n                v3 = v53;\n                v45 = v38;\n                v46 = v39;\n                v47 = v53;\n            }\n        }\n        goto lab_0x4045ed;\n    }\n  lab_0x404ce0:\n    // 0x404ce0\n    iswprint(wc);\n    int64_t v54 = v24 + v18; // 0x404cff\n    int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404d02\n    v17 = v54;\n    v19 = v54;\n    if (v55 != 0) {\n        // break -> 0x40528a\n        goto lab_0x40528a_2;\n    }\n    goto lab_0x404d0f;\n  lab_0x40452d:\n    // 0x40452d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40477a_2;\n    }\n    goto lab_0x404561;\n  lab_0x404505:;\n    bool v61 = v15 == 1; // 0x404510\n    if (v15 == -1) {\n        // 0x404512\n        v61 = *(char *)v1 == 0;\n    }\n    // 0x40451e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v61) {\n        goto lab_0x404561;\n    } else {\n        goto lab_0x40452d;\n    }\n  lab_0x4045ed:;\n    int64_t v59 = v46;\n    uint64_t v60 = v42;\n    if (v60 < v45) {\n        // 0x4045f2\n        *(char *)(v59 + v60) = v43;\n    }\n    // 0x4045f6\n    v2 = v60 + 1;\n    v14 = v44;\n    v7 = v45;\n    v11 = v59;\n    goto lab_0x404408_2;\n}\n"
        },
        {
            "funcName": "function_405590",
            "funcStartAddr": "405590",
            "funcEndAddr": "40572e",
            "decompiledFuncCode": "int64_t function_405590(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x405592\n    int32_t * v3 = __errno_location(); // 0x4055ac\n    int64_t v4 = (int64_t)g22; // 0x4055b1\n    int32_t v5 = *v3; // 0x4055bb\n    int64_t v6 = v4; // 0x4055d1\n    if (v2 >= (int64_t)*(int32_t *)&g25) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x405729\n            function_406720(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4055e0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4055e7\n        int64_t v9; // 0x405590\n        if (g22 == &g23) {\n            int64_t v10 = function_406530(0, v8); // 0x40570a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g23); // 0x40570f\n            *(int64_t *)&g22 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_406530(v4, v8); // 0x4055fb\n            *(int64_t *)&g22 = v12;\n            v9 = v12;\n        }\n        // 0x40560a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g25; // 0x40560a\n        int32_t v14 = v7; // 0x405611\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g25 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x405641\n    int64_t v17 = v15 + 8; // 0x405644\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x40564b\n    int64_t * v19 = (int64_t *)v16; // 0x40564e\n    uint64_t v20 = *v19; // 0x40564e\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x405651\n    int64_t result = *v21; // 0x405651\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x40565c\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x405665\n    int64_t v24; // 0x405590\n    uint64_t v25 = function_404360(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x405674\n    if (v20 > v25) {\n        // 0x4056eb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x405687\n    *v19 = v26;\n    if (result != (int64_t)&g43) {\n        // 0x405697\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4064d0(v26); // 0x4056b1\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x4056cb\n    int64_t v28 = *v23; // 0x4056ce\n    int64_t v29; // 0x405590\n    function_404360(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x4056eb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405730",
            "funcStartAddr": "405730",
            "funcEndAddr": "405764",
            "decompiledFuncCode": "int64_t function_405730(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x405737\n    int64_t result = function_4066d0(a1 == 0 ? (int64_t)&g44 : a1, 56); // 0x405756\n    return result;\n}\n"
        },
        {
            "funcName": "function_405770",
            "funcStartAddr": "405770",
            "funcEndAddr": "40577f",
            "decompiledFuncCode": "int64_t function_405770(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g44 : a1); // 0x40577c\n    return result;\n}\n"
        },
        {
            "funcName": "function_405780",
            "funcStartAddr": "405780",
            "funcEndAddr": "40578f",
            "decompiledFuncCode": "int64_t function_405780(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 : a1; // 0x405788\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g44;\n}\n"
        },
        {
            "funcName": "function_405790",
            "funcStartAddr": "405790",
            "funcEndAddr": "4057c3",
            "decompiledFuncCode": "int64_t function_405790(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 + 8 : a1 + 8; // 0x4057a9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4057ae\n    uint32_t v3 = *v2; // 0x4057ae\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4057b2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4057d0",
            "funcStartAddr": "4057d0",
            "funcEndAddr": "4057e3",
            "decompiledFuncCode": "int64_t function_4057d0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g44 + 4 : a1 + 4); // 0x4057dc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4057f0",
            "funcStartAddr": "4057f0",
            "funcEndAddr": "40581b",
            "decompiledFuncCode": "int64_t function_4057f0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g44 : a1; // 0x4057f8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x405815\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40580c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g44;\n}\n"
        },
        {
            "funcName": "function_405820",
            "funcStartAddr": "405820",
            "funcEndAddr": "405892",
            "decompiledFuncCode": "int64_t function_405820(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g44 : a5; // 0x405842\n    int32_t * v2 = __errno_location(); // 0x40584b\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x405864\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x405868\n    uint32_t v5 = *(int32_t *)v1; // 0x40586b\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x405871\n    int64_t result = function_404360(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x40587a\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058a0",
            "funcStartAddr": "4058a0",
            "funcEndAddr": "405981",
            "decompiledFuncCode": "int64_t function_4058a0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g44 : a4; // 0x4058c2\n    int32_t * v2 = __errno_location(); // 0x4058c8\n    int64_t v3 = v1 + 8; // 0x4058df\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4058e7\n    int32_t * v5 = (int32_t *)v1; // 0x4058ea\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x4058f8\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x4058fb\n    int64_t v8 = function_404360(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x405905\n    int64_t v9 = v8 + 1; // 0x40590a\n    int64_t result = function_4064d0(v9); // 0x40591f\n    function_404360(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x405964\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x40596d\n    return result;\n}\n"
        },
        {
            "funcName": "function_405990",
            "funcStartAddr": "405990",
            "funcEndAddr": "40599a",
            "decompiledFuncCode": "int64_t function_405990(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405990\n    return function_4058a0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4059a0",
            "funcStartAddr": "4059a0",
            "funcEndAddr": "405a35",
            "decompiledFuncCode": "int64_t function_4059a0(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x4059a0\n    int64_t v2 = v1; // 0x4059a0\n    int64_t v3 = v2; // 0x4059b4\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x4059d3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g54;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4059d0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g54;\n        }\n    }\n    int64_t v6 = v3; // 0x4059ed\n    if (g23 != 0x60c340) {\n        // 0x4059ef\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g43;\n        v6 = &g54;\n    }\n    int64_t result = v6; // 0x405a11\n    if (g22 != &g23) {\n        // 0x405a13\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g54;\n    }\n    // 0x405a26\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405a40",
            "funcStartAddr": "405a40",
            "funcEndAddr": "405a51",
            "decompiledFuncCode": "int64_t function_405a40(void) {\n    // 0x405a40\n    int64_t v1; // 0x405a40\n    return function_405590(v1, v1, -1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_405a60",
            "funcStartAddr": "405a60",
            "funcEndAddr": "405a6a",
            "decompiledFuncCode": "int64_t function_405a60(void) {\n    // 0x405a60\n    int64_t v1; // 0x405a60\n    return function_405590(v1, v1, v1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_405a70",
            "funcStartAddr": "405a70",
            "funcEndAddr": "405a86",
            "decompiledFuncCode": "int64_t function_405a70(int64_t a1) {\n    // 0x405a70\n    return function_405590(0, a1, -1, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_405a90",
            "funcStartAddr": "405a90",
            "funcEndAddr": "405aa2",
            "decompiledFuncCode": "int64_t function_405a90(int64_t a1, int64_t a2) {\n    // 0x405a90\n    return function_405590(0, a1, a2, (int64_t *)&g44);\n}\n"
        },
        {
            "funcName": "function_405ab0",
            "funcStartAddr": "405ab0",
            "funcEndAddr": "405b18",
            "decompiledFuncCode": "int64_t function_405ab0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405ac0\n    return function_405590((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405b20",
            "funcStartAddr": "405b20",
            "funcEndAddr": "405b84",
            "decompiledFuncCode": "int64_t function_405b20(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405b30\n    return function_405590((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_405b90",
            "funcStartAddr": "405b90",
            "funcEndAddr": "405b9c",
            "decompiledFuncCode": "int64_t function_405b90(int64_t a1, int64_t a2) {\n    // 0x405b90\n    return function_405ab0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_405ba0",
            "funcStartAddr": "405ba0",
            "funcEndAddr": "405baf",
            "decompiledFuncCode": "int64_t function_405ba0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405ba0\n    return function_405b20(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_405bb0",
            "funcStartAddr": "405bb0",
            "funcEndAddr": "405c20",
            "decompiledFuncCode": "int64_t function_405bb0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g44); // 0x405bbd\n    int128_t v2 = __asm_movdqa(g45); // 0x405bc5\n    int128_t v3 = __asm_movdqa(g46); // 0x405bcd\n    int64_t v4 = __asm_movaps_5(v1); // bp-72, 0x405be2\n    __asm_movaps_5(v2);\n    __asm_movaps_5(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x405bf8\n    uint32_t v6 = *v5; // 0x405bf8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x405bfd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_405590(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_405c20",
            "funcStartAddr": "405c20",
            "funcEndAddr": "405c2d",
            "decompiledFuncCode": "int64_t function_405c20(int64_t a1, int64_t a2) {\n    // 0x405c20\n    return function_405bb0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_405c30",
            "funcStartAddr": "405c30",
            "funcEndAddr": "405c41",
            "decompiledFuncCode": "int64_t function_405c30(int64_t a1) {\n    // 0x405c30\n    return function_405bb0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_405c50",
            "funcStartAddr": "405c50",
            "funcEndAddr": "405c5a",
            "decompiledFuncCode": "int64_t function_405c50(void) {\n    // 0x405c50\n    int64_t v1; // 0x405c50\n    return function_405bb0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_405c60",
            "funcStartAddr": "405c60",
            "funcEndAddr": "405cce",
            "decompiledFuncCode": "int64_t function_405c60(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405c7a\n    return function_405590((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405cd0",
            "funcStartAddr": "405cd0",
            "funcEndAddr": "405d3c",
            "decompiledFuncCode": "int64_t function_405cd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g44); // 0x405cd7\n    int128_t v2 = __asm_movdqa(g45); // 0x405cdf\n    int128_t v3 = __asm_movdqa(g46); // 0x405ce7\n    __asm_movaps_5(v1);\n    __asm_movaps_5(v2);\n    __asm_movaps_5(v3);\n    int64_t v4 = 10; // bp-72, 0x405d09\n    if (a2 == 0 || a3 == 0) {\n        // 0x405d37\n        abort();\n        // UNREACHABLE\n    }\n    // 0x405d1a\n    return function_405590(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_405d40",
            "funcStartAddr": "405d40",
            "funcEndAddr": "405d49",
            "decompiledFuncCode": "int64_t function_405d40(void) {\n    // 0x405d40\n    int64_t v1; // 0x405d40\n    return function_405cd0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_405d50",
            "funcStartAddr": "405d50",
            "funcEndAddr": "405d67",
            "decompiledFuncCode": "int64_t function_405d50(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405d50\n    return function_405cd0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_405d70",
            "funcStartAddr": "405d70",
            "funcEndAddr": "405d83",
            "decompiledFuncCode": "int64_t function_405d70(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405d70\n    return function_405cd0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_405d90",
            "funcStartAddr": "405d90",
            "funcEndAddr": "405d9a",
            "decompiledFuncCode": "int64_t function_405d90(void) {\n    // 0x405d90\n    int64_t v1; // 0x405d90\n    return function_405590(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_405da0",
            "funcStartAddr": "405da0",
            "funcEndAddr": "405db2",
            "decompiledFuncCode": "int64_t function_405da0(int64_t a1, int64_t a2) {\n    // 0x405da0\n    return function_405590(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_405dc0",
            "funcStartAddr": "405dc0",
            "funcEndAddr": "405dd1",
            "decompiledFuncCode": "int64_t function_405dc0(void) {\n    // 0x405dc0\n    int64_t v1; // 0x405dc0\n    return function_405590(v1, v1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_405de0",
            "funcStartAddr": "405de0",
            "funcEndAddr": "405df6",
            "decompiledFuncCode": "int64_t function_405de0(int64_t a1) {\n    // 0x405de0\n    return function_405590(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_405e00",
            "funcStartAddr": "405e00",
            "funcEndAddr": "405f30",
            "decompiledFuncCode": "int64_t function_405e00(int64_t a1, int64_t a2) {\n    int64_t str = function_407ce0(a1, a2); // 0x405e19\n    int64_t str2 = function_407ce0(a2, a2); // 0x405e24\n    int64_t n = function_407d40(str); // 0x405e2f\n    if (n != function_407d40(str2) || memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) != 0) {\n        // 0x405e44\n        return 0;\n    }\n    int64_t v1 = function_407c00(); // 0x405e75\n    int64_t v2 = function_407c00(); // 0x405e80\n    char * v3 = (char *)v1; // 0x405e93\n    int64_t v4; // bp-344, 0x405e00\n    if (__xstat(1, v3, (struct stat *)&v4) != 0) {\n        // 0x405f10\n        error(1, *__errno_location(), \"%s\", v3);\n    }\n    char * v5 = (char *)v2; // 0x405eac\n    int64_t v6; // bp-200, 0x405e00\n    if (__xstat(1, v5, (struct stat *)&v6) != 0) {\n        // 0x405ef0\n        error(1, *__errno_location(), \"%s\", v5);\n    }\n    int64_t v7 = 0; // 0x405ec4\n    // 0x405ec6\n    v7 = v4 == v6;\n    // 0x405ed5\n    free((int64_t *)v1);\n    free((int64_t *)v2);\n    // 0x405e44\n    return v7 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405f30",
            "funcStartAddr": "405f30",
            "funcEndAddr": "40630d",
            "decompiledFuncCode": "int64_t function_405f30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405fc8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x405f4c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405f66\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x405fab\n    if (a6 < 10) {\n        // 0x405fba\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4060b2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_406310",
            "funcStartAddr": "406310",
            "funcEndAddr": "406330",
            "decompiledFuncCode": "int64_t function_406310(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406310\n    if (a5 == 0) {\n        // 0x40632b\n        return function_405f30(a1, a2, a3, a4, a5, 0, (int64_t)&g54);\n    }\n    int64_t v1 = 0; // 0x406317\n    v1++;\n    int64_t v2 = v1; // 0x406329\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x406320\n        v1++;\n        v2 = v1;\n    }\n    // 0x40632b\n    return function_405f30(a1, a2, a3, a4, a5, v2, (int64_t)&g54);\n}\n"
        },
        {
            "funcName": "function_406330",
            "funcStartAddr": "406330",
            "funcEndAddr": "406390",
            "decompiledFuncCode": "int64_t function_406330(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x406330\n    int64_t v3 = &v2; // 0x406330\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x406363\n    int64_t v6; // 0x40634d\n    int64_t * v7; // 0x40636b\n    int64_t v8; // 0x40636b\n    int64_t v9; // 0x406377\n    if (v5 < 48) {\n        // 0x406340\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x406383\n            break;\n        }\n    } else {\n        // 0x40636b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x406383\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x406361\n    while (v4 != 9) {\n        // 0x406359\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x406340\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x406383\n                break;\n            }\n        } else {\n            // 0x40636b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x406383\n                break;\n            }\n        }\n        // 0x406359\n        v10 = 10;\n    }\n    // 0x406383\n    return function_405f30(a1, a2, a3, a4, v3, v10, (int64_t)&g54);\n}\n"
        },
        {
            "funcName": "function_406390",
            "funcStartAddr": "406390",
            "funcEndAddr": "40644c",
            "decompiledFuncCode": "int64_t function_406390(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x406390\n    int64_t v1; // bp-168, 0x406390\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x406390\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x406390\n    int64_t v8; // 0x406390\n    int64_t v9; // bp-56, 0x406390\n    int64_t v10; // 0x4063f5\n    int64_t v11; // 0x406419\n    if ((int32_t)v6 < 48) {\n        // 0x4063e0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x406430\n            break;\n        }\n    } else {\n        // 0x406412\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x406430\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40640a\n    int64_t v13 = 10; // 0x40640a\n    while (v5 != 9) {\n        // 0x40640c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4063e0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x406430\n                break;\n            }\n        } else {\n            // 0x406412\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x406430\n                break;\n            }\n        }\n        // 0x406402\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x406430\n    int64_t v14; // bp-136, 0x406390\n    int64_t result = function_405f30(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g54); // 0x40643f\n    return result;\n}\n"
        },
        {
            "funcName": "function_406450",
            "funcStartAddr": "406450",
            "funcEndAddr": "4064c4",
            "decompiledFuncCode": "int64_t function_406450(int64_t a1) {\n    // 0x406450\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4064b3\n    return fputs_unlocked(v1, g31);\n}\n"
        },
        {
            "funcName": "function_4064d0",
            "funcStartAddr": "4064d0",
            "funcEndAddr": "4064ea",
            "decompiledFuncCode": "int64_t function_4064d0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4064d4\n    if (size != 0 != (mem == NULL)) {\n        // 0x4064e3\n        return (int64_t)mem;\n    }\n    // 0x4064e5\n    function_406720(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4064f0",
            "funcStartAddr": "4064f0",
            "funcEndAddr": "406511",
            "decompiledFuncCode": "int64_t function_4064f0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4064f3\n    int64_t v2 = v1; // 0x4064f3\n    if (v2 < 0) {\n        // 0x40650b\n        function_406720(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406509\n        return function_4064d0(v2);\n    }\n    // 0x40650b\n    function_406720(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406520",
            "funcStartAddr": "406520",
            "funcEndAddr": "406522",
            "decompiledFuncCode": "int64_t function_406520(void) {\n    // 0x406520\n    int64_t v1; // 0x406520\n    return function_4064d0(v1);\n}\n"
        },
        {
            "funcName": "function_406530",
            "funcStartAddr": "406530",
            "funcEndAddr": "406566",
            "decompiledFuncCode": "int64_t function_406530(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x406558\n        free(v1);\n        return (int32_t)&g54 ^ (int32_t)&g54;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x406541\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x406550\n        return (int64_t)mem;\n    }\n    // 0x406561\n    function_406720(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406570",
            "funcStartAddr": "406570",
            "funcEndAddr": "406591",
            "decompiledFuncCode": "int64_t function_406570(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x406573\n    int64_t v2 = v1; // 0x406573\n    if (v2 < 0) {\n        // 0x40658b\n        function_406720(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406589\n        return function_406530(a1, v2);\n    }\n    // 0x40658b\n    function_406720(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4065a0",
            "funcStartAddr": "4065a0",
            "funcEndAddr": "406626",
            "decompiledFuncCode": "int64_t function_4065a0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4065fb\n            function_406720(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406530(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4065e3\n    if (a2 == 0) {\n        // 0x406608\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4065e8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4065fb\n        function_406720(a1);\n        // UNREACHABLE\n    }\n    // 0x4065ca\n    *(int64_t *)a2 = v2;\n    return function_406530(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_406630",
            "funcStartAddr": "406630",
            "funcEndAddr": "406680",
            "decompiledFuncCode": "int64_t function_406630(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x406630\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40667a\n            function_406720(a1);\n            // UNREACHABLE\n        }\n        // 0x406652\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406530(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x406665\n        *(int64_t *)a2 = 128;\n        return function_406530(0, 128);\n    }\n    // 0x406678\n    if (a2 < 0) {\n        // 0x40667a\n        function_406720(a1);\n        // UNREACHABLE\n    }\n    // 0x406652\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_406530(a1, v1);\n}\n"
        },
        {
            "funcName": "function_406680",
            "funcStartAddr": "406680",
            "funcEndAddr": "406697",
            "decompiledFuncCode": "int64_t function_406680(int64_t a1, int64_t a2) {\n    // 0x406680\n    return (int64_t)memset((int64_t *)function_4064d0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4066a0",
            "funcStartAddr": "4066a0",
            "funcEndAddr": "4066ce",
            "decompiledFuncCode": "int64_t function_4066a0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4066a7\n    if ((int64_t)v1 < 0) {\n        // 0x4066c9\n        function_406720(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4066c9\n        function_406720(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4066ba\n    if (mem != NULL) {\n        // 0x4066c4\n        return (int64_t)mem;\n    }\n    // 0x4066c9\n    function_406720(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4066d0",
            "funcStartAddr": "4066d0",
            "funcEndAddr": "4066f8",
            "decompiledFuncCode": "int64_t function_4066d0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4064d0(a2); // 0x4066df\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_406700",
            "funcStartAddr": "406700",
            "funcEndAddr": "406713",
            "decompiledFuncCode": "int64_t function_406700(int64_t str) {\n    // 0x406700\n    return function_4066d0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_406720",
            "funcStartAddr": "406720",
            "funcEndAddr": "406751",
            "decompiledFuncCode": "int64_t function_406720(int64_t a1) {\n    // 0x406720\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406760",
            "funcStartAddr": "406760",
            "funcEndAddr": "40678f",
            "decompiledFuncCode": "int64_t function_406760(int64_t a1, int64_t a2) {\n    int64_t result = function_406790(0, 0); // 0x406765\n    if (result != 0 || *__errno_location() != 12) {\n        // 0x406772\n        return result;\n    }\n    // 0x40678a\n    function_406720(0);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406790",
            "funcStartAddr": "406790",
            "funcEndAddr": "406c52",
            "decompiledFuncCode": "int64_t function_406790(int32_t a1, int32_t a2) {\n    // 0x406790\n    int32_t size; // 0x406790\n    int32_t v1; // 0x406790\n    int32_t v2; // 0x406790\n    if (a2 != 0) {\n        // 0x4067f0\n        size = a2;\n        v1 = a2;\n        v2 = a1;\n        if (a1 == 0) {\n            goto lab_0x4067c2;\n        } else {\n            goto lab_0x40680c;\n        }\n    } else {\n        // 0x4067b0\n        size = 0x1000;\n        if (a1 != 0) {\n            // 0x406bb0\n            *__errno_location() = 22;\n            // 0x4067d6\n            return 0;\n        }\n        goto lab_0x4067c2;\n    }\n  lab_0x406b50:;\n    // 0x406b50\n    int32_t v3; // 0x406b4a\n    int64_t v4 = v3; // 0x406b52\n    int64_t v5; // 0x406790\n    int64_t dirp2 = v5; // 0x406b52\n    int32_t * v6; // 0x406896\n    if (v3 != 0) {\n        goto lab_0x406b61;\n    } else {\n        // 0x406b54\n        *v6 = 2;\n        v4 = 2;\n        dirp2 = v5;\n        goto lab_0x406b61;\n    }\n  lab_0x406962:;\n    // 0x406962\n    int64_t v7; // 0x406790\n    int64_t v8 = v7;\n    int64_t v9; // 0x406790\n    int64_t v10 = v9 + 19; // 0x406962\n    char * str = (char *)v10;\n    int64_t v11; // bp-200, 0x406790\n    int64_t v12; // 0x406790\n    int32_t v13; // 0x406790\n    int32_t fd; // 0x4068b2\n    if ((v13 & 0xf000) == 0x4000 == __fxstatat(1, fd, str, (struct stat *)&v11, 256) == 0) {\n        // 0x406995\n        if (v11 == v12) {\n            // break -> 0x4069b0\n            goto lab_0x4069b0;\n        }\n    }\n    int64_t v14 = v8; // 0x406790\n    goto lab_0x406920_2;\n  lab_0x406c2e_2:\n    // 0x406c2e\n    *v6 = 12;\n    v4 = 12;\n    dirp2 = v5;\n    goto lab_0x406b61;\n  lab_0x4067c2:;\n    int64_t * mem = malloc(size); // 0x4067c7\n    int32_t v41 = (int64_t)mem; // 0x4067cc\n    int32_t result = v41; // 0x4067d4\n    v1 = size;\n    v2 = v41;\n    if (mem == NULL) {\n        // 0x4067d6\n        return result;\n    }\n    goto lab_0x40680c;\n  lab_0x40680c:;\n    int32_t v42 = v2;\n    int64_t v43 = v42;\n    int64_t v44 = v1;\n    int64_t v45 = v43 + v44; // 0x406811\n    int64_t v46 = v45 - 1; // 0x406820\n    *(char *)v46 = 0;\n    int64_t v47; // 0x406790\n    int64_t v48; // 0x406790\n    int32_t * v49; // 0x406790\n    int64_t v50; // 0x406790\n    int64_t v33; // 0x406790\n    int64_t v40; // 0x406790\n    int64_t v51; // 0x406790\n    int32_t v38; // 0x406790\n    int32_t v52; // 0x406790\n    int32_t v53; // 0x406790\n    if (__lxstat(1, \".\", (struct stat *)&v11) < 0) {\n        goto lab_0x406b88;\n    } else {\n        // 0x406836\n        if (__lxstat(1, \"/\", (struct stat *)&v11) < 0) {\n            goto lab_0x406b88;\n        } else {\n            // 0x406861\n            v47 = v44;\n            v48 = v43;\n            v52 = v42;\n            v51 = v46;\n            v50 = v45;\n            if (true) {\n                goto lab_0x406aa8;\n            } else {\n                // 0x406896\n                v6 = __errno_location();\n                int32_t v54 = v1; // 0x4068a3\n                int32_t v55 = v42; // 0x4068a3\n                int64_t v56 = v11; // 0x4068a3\n                int64_t v57 = v46; // 0x4068a3\n                int64_t v58 = 0; // 0x4068a3\n                int32_t fd2 = -100; // 0x4068a3\n                int64_t dirp3; // 0x406790\n                while (true) {\n                    // 0x4068a6\n                    dirp3 = v58;\n                    v38 = v55;\n                    fd = openat(fd2, \"..\", O_RDONLY);\n                    if (fd < 0) {\n                        // break -> 0x406bd7\n                        break;\n                    }\n                    // 0x4068c2\n                    if (__fxstat(1, fd, (struct stat *)&v11) != 0) {\n                        int64_t v59 = (int64_t)*v6; // 0x406be8\n                        v40 = v59;\n                        if (dirp3 == 0) {\n                            goto lab_0x406bcd;\n                        } else {\n                            // 0x406bf1\n                            closedir((struct __dirstream *)dirp3);\n                            v40 = v59;\n                            goto lab_0x406bcd;\n                        }\n                    }\n                    // 0x4068db\n                    v12 = v56;\n                    int32_t v60 = v54;\n                    if (dirp3 != 0) {\n                        // 0x4068e0\n                        if (closedir((struct __dirstream *)dirp3) != 0) {\n                            // 0x406bc9\n                            v40 = (int64_t)*v6;\n                            goto lab_0x406bcd;\n                        }\n                    }\n                    struct __dirstream * dirp = fdopendir(fd); // 0x406907\n                    if (dirp == NULL) {\n                        // 0x406bc9\n                        v40 = (int64_t)*v6;\n                        goto lab_0x406bcd;\n                    }\n                    // 0x406918\n                    v5 = (int64_t)dirp;\n                    v14 = false;\n                    while (true) {\n                      lab_0x406920_2:;\n                        int64_t v15 = v14; // 0x406790\n                        int64_t v16; // 0x406790\n                        int64_t v17; // 0x406790\n                        while (true) {\n                            int64_t v18 = v15;\n                            *v6 = 0;\n                            struct dirent * v19 = readdir(dirp); // 0x40692b\n                            int64_t v20; // 0x406790\n                            int64_t v21; // 0x406790\n                            if (v19 == NULL) {\n                                int32_t v22 = *v6; // 0x406b00\n                                v3 = v22;\n                                if ((char)v18 == 0 || v22 != 0) {\n                                    goto lab_0x406b50;\n                                }\n                                // 0x406b0d\n                                rewinddir(dirp);\n                                struct dirent * v23 = readdir(dirp); // 0x406b18\n                                if (v23 == NULL) {\n                                    // 0x406b4a\n                                    v3 = *v6;\n                                    goto lab_0x406b50;\n                                }\n                                int64_t v24 = (int64_t)v23;\n                                v9 = v24;\n                                v7 = 0;\n                                v21 = v24;\n                                v20 = 0;\n                                if (*(char *)(v24 + 19) != 46) {\n                                    goto lab_0x406962;\n                                }\n                            } else {\n                                int64_t v25 = (int64_t)v19;\n                                v17 = v25;\n                                v16 = v18;\n                                v21 = v25;\n                                v20 = v18;\n                                if (*(char *)(v25 + 19) != 46) {\n                                    // break -> 0x406943\n                                    break;\n                                }\n                            }\n                            int64_t v26 = v20;\n                            int64_t v27 = v21;\n                            int64_t v28 = v27 + 20; // 0x406b30\n                            if (*(char *)v28 != 0) {\n                                // 0x406b3a\n                                v17 = v27;\n                                v16 = v26;\n                                if (*(int16_t *)v28 != 46) {\n                                    // break -> 0x406943\n                                    break;\n                                }\n                            }\n                            // 0x406920\n                            v15 = v26;\n                        }\n                        int64_t v29 = v16;\n                        int64_t v30 = v17;\n                        v9 = v30;\n                        v7 = v29;\n                        if ((char)v29 == 0) {\n                            goto lab_0x406962;\n                        } else {\n                            // 0x406948\n                            v9 = v30;\n                            v7 = 1;\n                            int64_t v31 = v29; // 0x40695d\n                            int64_t v32; // 0x406790\n                            if (v11 == v12 && *(int64_t *)v30 != v32) {\n                                // 0x406920\n                                v14 = v31;\n                                goto lab_0x406920_2;\n                            } else {\n                                goto lab_0x406962;\n                            }\n                        }\n                    }\n                  lab_0x4069b0:;\n                    int64_t v61 = v38; // 0x4069b8\n                    uint64_t v62 = v57 - v61; // 0x4069b8\n                    int32_t len = strlen(str); // 0x4069bd\n                    uint64_t v63 = (int64_t)len; // 0x4069bd\n                    int32_t v64 = v60; // 0x4069c8\n                    int32_t v65 = v38; // 0x4069c8\n                    int64_t dest_mem = v57; // 0x4069c8\n                    if (v62 <= v63) {\n                        if (a2 != 0) {\n                            // 0x406c40\n                            *v6 = 34;\n                            v4 = 34;\n                            dirp2 = v5;\n                            goto lab_0x406b61;\n                        }\n                        uint64_t v66 = (int64_t)v60; // 0x4069d6\n                        int64_t v67 = len >= v60 ? v63 : v66; // 0x4069e1\n                        uint64_t v68 = v67 + v66; // 0x4069e5\n                        if (v68 < v66) {\n                            goto lab_0x406c2e_2;\n                        }\n                        // 0x4069f8\n                        v64 = v68;\n                        int64_t * mem2 = realloc((int64_t *)v61, v64); // 0x406a00\n                        if (mem2 == NULL) {\n                            goto lab_0x406c2e_2;\n                        }\n                        int64_t v69 = (int64_t)mem2; // 0x406a00\n                        int64_t v70 = v62 + v69;\n                        v65 = v69;\n                        dest_mem = (int64_t)memcpy((int64_t *)(v70 + v67), (int64_t *)v70, v60 - (int32_t)v62);\n                    }\n                    int32_t v71 = v65;\n                    int32_t v72 = v64;\n                    int64_t v73 = (int64_t)memcpy((int64_t *)(dest_mem - v63), (int64_t *)v10, len) - 1; // 0x406a5d\n                    *(char *)v73 = 47;\n                    v54 = v72;\n                    v55 = v71;\n                    v56 = v11;\n                    v57 = v73;\n                    v58 = v5;\n                    fd2 = fd;\n                    // 0x406a8e\n                    v53 = v71;\n                    v49 = v6;\n                    if (closedir(dirp) != 0) {\n                        goto lab_0x406b90;\n                    } else {\n                        int64_t v74 = v71;\n                        int64_t v75 = v72;\n                        v47 = v75;\n                        v48 = v74;\n                        v52 = v71;\n                        v51 = v73;\n                        v50 = v74 + v75;\n                        goto lab_0x406aa8;\n                    }\n                }\n                int64_t v76 = (int64_t)*v6; // 0x406bd7\n                v4 = v76;\n                dirp2 = dirp3;\n                v33 = v76;\n                if (dirp3 == 0) {\n                    goto lab_0x406b69;\n                } else {\n                    goto lab_0x406b61;\n                }\n            }\n        }\n    }\n  lab_0x406b88:\n    // 0x406b88\n    v53 = v42;\n    v49 = __errno_location();\n    goto lab_0x406b90;\n  lab_0x406b90:;\n    int64_t v77 = (int64_t)*v49; // 0x406b96\n    int64_t v34 = v77; // 0x406b9a\n    int32_t * v35 = v49; // 0x406b9a\n    int32_t * v36 = v49; // 0x406b9a\n    int32_t v37 = v53; // 0x406b9a\n    int64_t v39 = v77; // 0x406b9a\n    if (a1 != 0) {\n        goto lab_0x406b71;\n    } else {\n        goto lab_0x406b9c;\n    }\n  lab_0x406b71:\n    // 0x406b71\n    *v35 = (int32_t)v34;\n    // 0x4067d6\n    return 0;\n  lab_0x406b9c:\n    // 0x406b9c\n    free((int64_t *)(int64_t)v37);\n    v34 = v39;\n    v35 = v36;\n    goto lab_0x406b71;\n  lab_0x406aa8:\n    // 0x406aa8\n    if (v51 == v47 - 1 + v48) {\n        // 0x406c17\n        int64_t v78; // 0x406790\n        int64_t v79 = v78 - 1; // 0x406c1c\n        *(char *)v79 = 47;\n    }\n    int64_t * v80 = (int64_t *)v48; // 0x406ad2\n    int32_t v81 = v50 - v51; // 0x406ad2\n    memmove(v80, (int64_t *)v51, v81);\n    int32_t mem3 = a1; // 0x406add\n    if (a2 == 0) {\n        // 0x406c00\n        mem3 = (int64_t)realloc(v80, v81);\n    }\n    int32_t v82 = mem3;\n    int32_t result2 = v82 == 0 ? v52 : v82;\n    // 0x4067d6\n    return result2;\n  lab_0x406b69:\n    // 0x406b69\n    v34 = v33;\n    v35 = v6;\n    v36 = v6;\n    v37 = v38;\n    v39 = v33;\n    if (a1 == 0) {\n        goto lab_0x406b9c;\n    } else {\n        goto lab_0x406b71;\n    }\n  lab_0x406b61:\n    // 0x406b61\n    closedir((struct __dirstream *)dirp2);\n    v33 = v4;\n    goto lab_0x406b69;\n  lab_0x406bcd:\n    // 0x406bcd\n    close(fd);\n    v33 = v40;\n    goto lab_0x406b69;\n}\n"
        },
        {
            "funcName": "function_406c60",
            "funcStartAddr": "406c60",
            "funcEndAddr": "406d3f",
            "decompiledFuncCode": "int64_t function_406c60(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x406c6c\n    uint32_t v2 = *v1; // 0x406c6c\n    int64_t v3 = a2 & 0xffffffff; // 0x406c71\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x406c74\n    uint64_t v5 = (int64_t)*v4; // 0x406c74\n    int64_t v6; // 0x406ce2\n    if (v3 <= v5) {\n      lab_0x406cdc_2:\n        // 0x406cdc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x406c62\n    int64_t v8 = v2; // 0x406c60\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x406cdc\n        goto lab_0x406cdc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x406c98\n    int64_t v17; // 0x406ca6\n    int64_t * v18; // 0x406cc0\n    int64_t * v19; // 0x406cc3\n    int64_t v20; // 0x406cce\n    int64_t v21; // 0x406ca6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x406ca3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x406cc0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x406cd7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x406cdc\n            goto lab_0x406cdc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x406cdc\n            goto lab_0x406cdc_2;\n        }\n        // 0x406c92\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x406d1b\n    int64_t * v23 = (int64_t *)v22; // 0x406d20\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x406d23\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x406d20\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x406d37\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x406c8d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x406cdc\n            goto lab_0x406cdc_2;\n        }\n        // 0x406c92\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x406ca3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x406cc0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x406cd7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x406cdc\n                goto lab_0x406cdc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x406cdc\n                goto lab_0x406cdc_2;\n            }\n            // 0x406c92\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x406d00\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x406d20\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x406d37\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x406cdc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_406d40",
            "funcStartAddr": "406d40",
            "funcEndAddr": "40735c",
            "decompiledFuncCode": "int64_t function_406d40(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x406d5f\n    int64_t v2 = *v1; // 0x406d5f\n    char * str2 = (char *)v2; // 0x406d6c\n    char c = *str2; // 0x406d6c\n    int64_t v3 = v2; // 0x406d98\n    int64_t v4 = 0; // 0x406d40\n    int32_t v5; // 0x406d40\n    int64_t v6; // 0x406d40\n    int64_t v7; // 0x406d40\n    int64_t v8; // 0x406d40\n    int64_t v9; // 0x406d40\n    int64_t v10; // 0x406d40\n    int64_t v11; // 0x406d40\n    int64_t v12; // 0x406d40\n    int64_t v13; // 0x406d40\n    int64_t str3; // 0x406d40\n    int64_t v14; // 0x406d40\n    int64_t v15; // 0x406d40\n    int64_t v16; // 0x406d40\n    int64_t v17; // 0x406d40\n    int32_t v18; // 0x406d40\n    int32_t v19; // 0x406d40\n    int32_t v20; // 0x406d40\n    int32_t v21; // 0x406d40\n    int32_t v22; // 0x406d40\n    int32_t v23; // 0x406d40\n    int32_t v24; // 0x406d40\n    int32_t v25; // 0x406d40\n    int32_t v26; // 0x406d40\n    int32_t v27; // 0x406d40\n    int32_t v28; // 0x406d40\n    int32_t v29; // 0x406d40\n    int64_t nmemb; // 0x406d40\n    int64_t v30; // 0x406d40\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x406d9c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x406d98\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x406da8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x406dae\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x406d78\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x406ddc\n                int64_t v34; // 0x406d40\n                int64_t v35; // 0x406d40\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x406de5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x406f60;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x406df6\n                int64_t v37 = *(int64_t *)v36; // 0x406dfa\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x406dd0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x406de5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x406f60;\n                        }\n                    }\n                    // 0x406df6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x406e46:\n                    // 0x406e46\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x406ea0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x407010\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x406ea0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x406fc0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x406e6a;\n                                } else {\n                                    // 0x406fcc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x406e6a;\n                                    } else {\n                                        // 0x406fda\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x406e6a;\n                                        } else {\n                                            goto lab_0x406ea0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x406e6a;\n                            }\n                        }\n                    }\n                }\n              lab_0x406eb1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x407086\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x407232\n                            flockfile(g33);\n                            int64_t v41 = *v1; // 0x407252\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40729f\n                            int64_t v43 = (int64_t)g33;\n                            int64_t v44 = v43; // 0x4072b9\n                            int64_t v45; // 0x4072bb\n                            if (*(char *)v42 != 0) {\n                                // 0x4072bb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g33;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4072b3\n                            while (v17 + nmemb != v42) {\n                                // 0x4072b5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4072bb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g33;\n                                }\n                                // 0x4072a8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4072e0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g33);\n                            v40 = *v1;\n                        } else {\n                            // 0x407094\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4071ef\n                        free((int64_t *)v17);\n                    }\n                    // 0x4070e9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x407100\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x406fae\n                    return 63;\n                }\n                // 0x406ed0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x406f54\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x406f60:;\n                    int32_t * v49 = (int32_t *)a7; // 0x406f70\n                    uint32_t v50 = *v49; // 0x406f70\n                    int64_t v51 = v50; // 0x406f70\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x406f7a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x406f83\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4071af\n                                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40715a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x406fae\n                            return 63;\n                        }\n                        // 0x406ff8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40730f\n                                    __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40720d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x407220\n                                // 0x406fae\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40711e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x407132\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x406f9b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x406f9e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x406fa2\n                    int64_t result = v59; // 0x406fa8\n                    if (v58 != 0) {\n                        // 0x406faa\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x406fae\n                    return result;\n                }\n            } else {\n                // 0x406dae\n                v5 = v32;\n            }\n            // break -> 0x406ed5\n            break;\n        }\n    }\n    // 0x406ed5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x406eed\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x406ef7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x406fae\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x407039\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x406f26\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x406f36\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x406ea0:\n    // 0x406ea0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x406ea0\n    int64_t v63 = *(int64_t *)v62; // 0x406ea4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x406eb1\n        goto lab_0x406eb1;\n    }\n    goto lab_0x406e46;\n  lab_0x406e6a:\n    // 0x406e6a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x406d40\n    int32_t v65; // 0x406d40\n    int32_t v66; // 0x406d40\n    if (v27 != 0) {\n        goto lab_0x406ea0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x407020\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x406ea0;\n            } else {\n                goto lab_0x406e91;\n            }\n        } else {\n            // 0x406e85\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40717c\n                int64_t v67 = (int64_t)mem; // 0x40717c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x406ea0;\n                } else {\n                    // 0x40718f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x406e91;\n                }\n            } else {\n                goto lab_0x406e91;\n            }\n        }\n    }\n  lab_0x406e91:\n    // 0x406e91\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x406ea0;\n}\n"
        },
        {
            "funcName": "function_407360",
            "funcStartAddr": "407360",
            "funcEndAddr": "407926",
            "decompiledFuncCode": "int64_t function_407360(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x407381\n    if (v3 < 1) {\n        // 0x40753e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40737d\n    int32_t v5 = *(int32_t *)a7; // 0x407389\n    uint64_t v6 = a1 & 0xffffffff; // 0x40738b\n    int64_t v7 = v2; // 0x407390\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x407393\n    *v8 = 0;\n    int64_t v9; // 0x407360\n    int64_t v10; // 0x407360\n    int64_t v11; // 0x407360\n    int64_t v12; // 0x407360\n    int64_t str; // 0x407360\n    int64_t v13; // 0x407360\n    int64_t v14; // 0x407360\n    int64_t v15; // 0x407360\n    int64_t v16; // 0x407360\n    int64_t v17; // 0x407360\n    int32_t v18; // 0x407360\n    char v19; // 0x407360\n    if (v5 == 0) {\n        // 0x407578\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4073aa;\n    } else {\n        // 0x4073a3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4073f0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4073f3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4074b8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x407406\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x407416\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4074cc;\n                } else {\n                    goto lab_0x407428;\n                }\n            }\n        } else {\n            goto lab_0x4073aa;\n        }\n    }\n  lab_0x4073aa:\n    // 0x4073aa\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4073b0\n    *v24 = 0;\n    int64_t v25; // 0x407360\n    int64_t v26; // 0x407360\n    int64_t v27; // 0x407360\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4074a0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4074ad;\n        }\n        case 43: {\n            // 0x4077b0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4074ad;\n        }\n        default: {\n            // 0x4073cc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40772f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x407848\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4074ad;\n                } else {\n                    // 0x40773d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4073da;\n                }\n            } else {\n                goto lab_0x4073da;\n            }\n        }\n    }\n  lab_0x4074b8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4074bf\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x407428;\n    } else {\n        goto lab_0x4074cc;\n    }\n  lab_0x4073da:\n    // 0x4073da\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4074ad;\n  lab_0x4074ad:\n    // 0x4074ad\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4074b8;\n  lab_0x407428:;\n    uint32_t v30 = *(int32_t *)a7; // 0x407428\n    int64_t v31 = v30; // 0x407428\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40742a\n    if ((int64_t)*v32 > v31) {\n        // 0x40742f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x407432\n    if (*v33 > v30) {\n        // 0x407437\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40743a\n    int64_t v35 = v31; // 0x40743e\n    int64_t v36 = v15; // 0x40743e\n    int64_t v37; // 0x407360\n    int64_t v38; // 0x407360\n    int64_t v39; // 0x407360\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x4075a8\n        int64_t v41 = v40; // 0x4075a8\n        v2 = v41;\n        int64_t v42; // 0x407360\n        if (*v33 == v40) {\n            // 0x407790\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x407798\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x4075b4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4075b8\n                function_406c60(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4075c8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4075d1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4075da\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4075f1\n            int64_t v47 = v45 & 0xffffffff; // 0x4075f5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4075fe\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x407604\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x407606;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4075e0\n            int64_t v49 = v48 & 0xffffffff; // 0x4075e0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4075f1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4075fe\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x407604\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x407606;\n                    }\n                }\n                // 0x4075e0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x4077a8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x407606;\n    } else {\n        goto lab_0x407444;\n    }\n  lab_0x4074cc:\n    // 0x4074cc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4074cf\n    int64_t v51 = v12; // 0x4074cf\n    int64_t v52 = v14; // 0x4074cf\n    if (*(char *)v10 == 0) {\n        goto lab_0x407428;\n    } else {\n        goto lab_0x4074d5;\n    }\n  lab_0x407444:;\n    int32_t v53 = v35; // 0x407444\n    int64_t v54; // 0x407360\n    int64_t v55; // 0x407360\n    int64_t v56; // 0x407360\n    int64_t v57; // 0x407360\n    int64_t v58; // 0x407360\n    int64_t v59; // 0x407360\n    char * v60; // 0x407360\n    int64_t v61; // 0x407360\n    int64_t v62; // 0x407459\n    int64_t v63; // 0x407360\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x407593\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x407596;\n    } else {\n        // 0x40744c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x407360\n        int64_t v66 = v65 ? -1 : 1; // 0x407460\n        int64_t v67 = (int64_t)\"--\"; // 0x407360\n        int64_t v68 = v62; // 0x407360\n        int64_t v69 = 3; // 0x407460\n        unsigned char v70 = *(char *)v68; // 0x407460\n        char v71 = *(char *)v67; // 0x407460\n        char v72 = v71; // 0x407460\n        bool v73 = false; // 0x407460\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x407550\n            if (*(char *)v62 == 45) {\n                // 0x407610\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x407610\n                if (c == 0) {\n                    goto lab_0x40755a;\n                } else {\n                    // 0x40761d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x4076a0;\n                    } else {\n                        if (c == 45) {\n                            // 0x407883\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4076f5;\n                        } else {\n                            // 0x40762e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x4076a0;\n                            } else {\n                                // 0x407633\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x407654;\n                                } else {\n                                    // 0x40763a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x4076a0;\n                                    } else {\n                                        goto lab_0x407654;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40755a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x407470\n            v2 = v75;\n            int32_t v76 = *v32; // 0x407473\n            int64_t v77 = v35 + 1; // 0x407476\n            int32_t v78 = v77; // 0x407479\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4077e0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x407487\n                    function_406c60(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x407495\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x407596;\n        }\n    }\n  lab_0x4074d5:;\n    // 0x4074d5\n    int64_t v79; // bp-104, 0x407360\n    int64_t v80 = &v79; // 0x40736a\n    int64_t v81 = v50 + 1; // 0x4074d5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4074dc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4074e1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4074e5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4074e9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4074f1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4074f6\n    int32_t c2 = v84; // 0x4074f6\n    char * found_char_pos = strchr(str2, c2); // 0x4074f6\n    int64_t v87 = *v82; // 0x4074fb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x407505\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x407510\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x407800\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4077cd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40753e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4074f6\n    char v91 = *(char *)(v90 + 1); // 0x40752b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4074e5\n        if (v91 != 58) {\n            // 0x40753e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x407754\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x407858\n                *v8 = 0;\n            } else {\n                // 0x40783c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40777e\n            *v83 = 0;\n            // 0x40753e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40775e\n        if (v93 != 0) {\n            // 0x4077f0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40777e\n            *v83 = 0;\n            // 0x40753e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x407771\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40777e\n            *v83 = 0;\n            // 0x40753e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x4078ba\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40786a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x407871\n        // 0x40777e\n        *v83 = 0;\n        // 0x40753e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4076c9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4076cb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4078f0\n                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x4078a1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x4078a8\n            // 0x40753e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4076d6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4076da\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4076f5;\n  lab_0x407606:\n    // 0x407606\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x407444;\n  lab_0x4076f5:;\n    int64_t v99 = function_406d40(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x407713\n    // 0x40753e\n    return v99 & 0xffffffff;\n  lab_0x407596:;\n    int32_t v100 = v55; // 0x407596\n    if (v100 != (int32_t)v59) {\n        // 0x40759a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40753e\n    return 0xffffffff;\n  lab_0x40755a:\n    // 0x40755a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x407561\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40753e\n    return v99 & 0xffffffff;\n  lab_0x4076a0:\n    // 0x4076a0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4074d5;\n  lab_0x407654:\n    // 0x407654\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_406d40(v6, a2, str, a4, a5, v57, v1, v11, &g10); // 0x40767a\n    if ((int32_t)v101 != -1) {\n        // 0x40753e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40768f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x4076a0;\n}\n"
        },
        {
            "funcName": "function_407930",
            "funcStartAddr": "407930",
            "funcEndAddr": "407986",
            "decompiledFuncCode": "int64_t function_407930(int64_t a1) {\n    // 0x407930\n    *(int32_t *)&g47 = g28;\n    *(int32_t *)&g48 = g27;\n    int64_t v1; // 0x407930\n    int64_t result = function_407360(v1, v1, v1, v1, v1, v1, &g47, a1 & 0xffffffff); // 0x407956\n    g28 = *(int32_t *)&g47;\n    g52 = g50;\n    *(int32_t *)&g26 = g49;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407990",
            "funcStartAddr": "407990",
            "funcEndAddr": "4079a8",
            "decompiledFuncCode": "int64_t function_407990(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407990\n    return function_407930(1);\n}\n"
        },
        {
            "funcName": "function_4079b0",
            "funcStartAddr": "4079b0",
            "funcEndAddr": "4079c3",
            "decompiledFuncCode": "int64_t function_4079b0(int64_t a1, int64_t a2, char * a3, char (**a4)[22], int32_t a5, int64_t a6) {\n    // 0x4079b0\n    return function_407930(0);\n}\n"
        },
        {
            "funcName": "function_4079d0",
            "funcStartAddr": "4079d0",
            "funcEndAddr": "4079e5",
            "decompiledFuncCode": "int64_t function_4079d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4079d0\n    return function_407360(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4079f0",
            "funcStartAddr": "4079f0",
            "funcEndAddr": "407a06",
            "decompiledFuncCode": "int64_t function_4079f0(void) {\n    // 0x4079f0\n    return function_407930(0);\n}\n"
        },
        {
            "funcName": "function_407a10",
            "funcStartAddr": "407a10",
            "funcEndAddr": "407a28",
            "decompiledFuncCode": "int64_t function_407a10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407a10\n    return function_407360(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_407a30",
            "funcStartAddr": "407a30",
            "funcEndAddr": "407aaa",
            "decompiledFuncCode": "int64_t function_407a30(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x407a3b\n    int64_t v2 = (int64_t)&g11; // 0x407a3b\n    int32_t * pwc; // 0x407a30\n    int64_t v3; // 0x407a30\n    int64_t n; // 0x407a30\n    if (a2 == 0) {\n        goto lab_0x407a82;\n    } else {\n        // 0x407a3d\n        if (a3 == 0) {\n            // 0x407a68\n            return -2;\n        }\n        // 0x407a49\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x407a82;\n        } else {\n            goto lab_0x407a54;\n        }\n    }\n  lab_0x407a82:\n    // 0x407a82\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x407a30\n    pwc = (int32_t *)&v4;\n    goto lab_0x407a54;\n  lab_0x407a54:;\n    char * wstr = (char *)v3; // 0x407a5a\n    int64_t ps; // 0x407a30\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x407a5a\n    int64_t result = v5; // 0x407a5a\n    if (v5 < 0xfffffffe) {\n        // 0x407a68\n        return result;\n    }\n    int64_t result2 = result; // 0x407a99\n    if ((char)function_407d70(0, v3) == 0) {\n        // 0x407a9b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x407a68\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407ab0",
            "funcStartAddr": "407ab0",
            "funcEndAddr": "407b9f",
            "decompiledFuncCode": "int64_t function_407ab0(int64_t path, uint64_t a2) {\n    int64_t size = a2 >= 1025 ? 1025 : a2 + 1; // 0x407ae9\n    int64_t * mem = malloc((int32_t)size); // 0x407af3\n    int64_t result = 0; // 0x407afe\n    while (mem != NULL) {\n        uint64_t buf_size = size;\n        int64_t * buf = mem;\n        int32_t v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size); // 0x407b09\n        if (v1 < 0) {\n            // 0x407b68\n            if (*__errno_location() != 34) {\n                // 0x407b72\n                free(buf);\n                result = 0;\n                return result;\n            }\n        }\n        uint64_t v2 = (int64_t)v1; // 0x407b09\n        int64_t v3; // 0x407ab0\n        if (buf_size > v2) {\n            // 0x407b80\n            v3 = (int64_t)buf;\n            *(char *)(v2 + v3) = 0;\n            result = v3;\n            return result;\n        }\n        // 0x407b1b\n        free(buf);\n        while (buf_size <= 0x3fffffffffffffff) {\n            int64_t size2 = 2 * buf_size; // 0x407b28\n            int64_t * mem2 = malloc((int32_t)size2); // 0x407b2e\n            if (mem2 == NULL) {\n                // 0x407b3b\n                result = (int64_t)mem2;\n                return result;\n            }\n            buf_size = size2;\n            buf = mem2;\n            v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size);\n            if (v1 < 0) {\n                // 0x407b68\n                if (*__errno_location() != 34) {\n                    // 0x407b72\n                    free(buf);\n                    result = 0;\n                    return result;\n                }\n            }\n            // 0x407b16\n            v2 = (int64_t)v1;\n            if (buf_size > v2) {\n                // 0x407b80\n                v3 = (int64_t)buf;\n                *(char *)(v2 + v3) = 0;\n                result = v3;\n                return result;\n            }\n            // 0x407b1b\n            free(buf);\n        }\n        // 0x407b50\n        size = 0x7fffffffffffffff;\n        if (buf_size > 0x7ffffffffffffffe) {\n            // 0x407b90\n            *__errno_location() = 12;\n            result = 0;\n            return result;\n        }\n        mem = malloc((int32_t)size);\n        result = 0;\n    }\n  lab_0x407b3b_2:\n    // 0x407b3b\n    return result;\n}\n"
        },
        {
            "funcName": "function_407ba0",
            "funcStartAddr": "407ba0",
            "funcEndAddr": "407bfd",
            "decompiledFuncCode": "int64_t function_407ba0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x407ba7\n    int64_t v2; // 0x407ba0\n    int64_t result = function_408380(a1, v2); // 0x407bb8\n    if ((v2 & 32) != 0) {\n        // 0x407be0\n        if ((int32_t)result == 0) {\n            // 0x407be4\n            *__errno_location() = 0;\n        }\n        // 0x407bda\n        return 0xffffffff;\n    }\n    // 0x407bc1\n    if ((int32_t)result == 0) {\n        // 0x407bda\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x407bc8\n    if (v1 == 0) {\n        // 0x407bca\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x407bda\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407c00",
            "funcStartAddr": "407c00",
            "funcEndAddr": "407c18",
            "decompiledFuncCode": "int64_t function_407c00(void) {\n    // 0x407c00\n    int64_t v1; // 0x407c00\n    int64_t result = function_407c80(v1); // 0x407c04\n    if (result != 0) {\n        // 0x407c0e\n        return result;\n    }\n    // 0x407c13\n    function_406720(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407c20",
            "funcStartAddr": "407c20",
            "funcEndAddr": "407c7d",
            "decompiledFuncCode": "int64_t function_407c20(int64_t a1) {\n    // 0x407c20\n    int64_t v1; // 0x407c20\n    uint64_t v2 = (int64_t)((char)v1 == 47); // 0x407c2e\n    int64_t v3 = function_407ce0(a1, v1); // 0x407c32\n    int64_t result = v3 - a1; // 0x407c3a\n    if (result <= v2 || *(char *)(v3 - 1) != 47) {\n        // 0x407c63\n        return result;\n    }\n    int64_t result2 = result;\n    result2--;\n    while (result2 != v2) {\n        // 0x407c50\n        if (*(char *)(a1 - 1 + result2) != 47) {\n            // break -> 0x407c63\n            break;\n        }\n        result2--;\n    }\n    // 0x407c63\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407c80",
            "funcStartAddr": "407c80",
            "funcEndAddr": "407cda",
            "decompiledFuncCode": "int64_t function_407c80(int64_t a1) {\n    // 0x407c80\n    int64_t v1; // 0x407c80\n    int64_t v2 = v1;\n    int64_t * mem = malloc((int32_t)(v2 + 1 + (int64_t)(v2 == 0))); // 0x407c9f\n    if (mem == NULL) {\n        // 0x407cc6\n        return (int64_t)mem;\n    }\n    int64_t * dest_mem = memcpy(mem, (int64_t *)a1, (int32_t)v2); // 0x407cb5\n    int64_t v3; // 0x407c80\n    if (v2 == 0) {\n        // 0x407cd0\n        *(char *)dest_mem = 46;\n        v3 = 1;\n    }\n    int64_t result = (int64_t)dest_mem; // 0x407cb5\n    *(char *)(v3 + result) = 0;\n    // 0x407cc6\n    return result;\n}\n"
        },
        {
            "funcName": "function_407ce0",
            "funcStartAddr": "407ce0",
            "funcEndAddr": "407d3b",
            "decompiledFuncCode": "int64_t function_407ce0(int64_t a1, int64_t a2) {\n    // 0x407ce0\n    int64_t v1; // 0x407ce0\n    char v2 = v1;\n    int64_t v3 = a1; // 0x407ce9\n    int64_t v4 = a1; // 0x407ce9\n    char v5 = v2; // 0x407ce9\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x407cf4\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x407cf0\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x407cfe\n    if (v5 == 0) {\n      lab_0x407d3a:\n        // 0x407d3a\n        return result;\n    }\n    int64_t v7 = v4; // 0x407d28\n    int64_t v8 = 0; // 0x407d28\n    int64_t v9; // 0x407ce0\n    int64_t v10; // 0x407d2a\n    char v11; // 0x407d2e\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x407d25\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x407d2a\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x407d25\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x407d1a\n    char v14 = *(char *)v13; // 0x407d1e\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x407d25\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x407d2a\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x407d25\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x407d10\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x407d3a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407d40",
            "funcStartAddr": "407d40",
            "funcEndAddr": "407d6b",
            "decompiledFuncCode": "int64_t function_407d40(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x407d44\n    int64_t result = len; // 0x407d44\n    if (len < 2) {\n        // 0x407d5a\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x407d58\n    while (*(char *)(v1 + str) == 47) {\n        // 0x407d60\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x407d5a\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x407d5a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407d70",
            "funcStartAddr": "407d70",
            "funcEndAddr": "407dce",
            "decompiledFuncCode": "int64_t function_407d70(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x407d76\n    if (locale == NULL) {\n        // 0x407da3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x407d76\n    bool v2; // 0x407d70\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g12; // 0x407d70\n    int64_t v5 = v1; // 0x407d70\n    int64_t v6 = 2; // 0x407d95\n    unsigned char v7 = *(char *)v5; // 0x407d95\n    char v8 = *(char *)v4; // 0x407d95\n    char v9 = v8; // 0x407d95\n    bool v10 = false; // 0x407d95\n    while (v7 == v8) {\n        // 0x407d88\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x407da1\n    int64_t v13 = v1; // 0x407da1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x407da3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x407da1\n    unsigned char v15 = *(char *)v13; // 0x407dbd\n    char v16 = *(char *)v12; // 0x407dbd\n    char v17 = v16; // 0x407dbd\n    bool v18 = false; // 0x407dbd\n    while (v15 == v16) {\n        // 0x407db0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_407dd0",
            "funcStartAddr": "407dd0",
            "funcEndAddr": "407e06",
            "decompiledFuncCode": "int64_t function_407dd0(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x407dd6\n    if (v1 == 0) {\n        // 0x407e00\n        return 0;\n    }\n    uint64_t v3 = 0;\n    v2++;\n    int64_t v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v1; // 0x407de8\n    char v5 = *(char *)v2; // 0x407deb\n    while (v5 != 0) {\n        // 0x407de0\n        v3 = v4;\n        v2++;\n        v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v5;\n        v5 = *(char *)v2;\n    }\n    // 0x407df3\n    return v4 % a2;\n}\n"
        },
        {
            "funcName": "function_407e10",
            "funcStartAddr": "407e10",
            "funcEndAddr": "408372",
            "decompiledFuncCode": "int64_t function_407e10(void) {\n    char * v1 = nl_langinfo(14); // 0x407e26\n    char * v2 = g51; // 0x407e2b\n    char * v3; // 0x407e10\n    int64_t v4; // 0x407e10\n    int64_t v5; // 0x407e10\n    int64_t v6; // 0x407e10\n    int64_t v7; // 0x407e10\n    int32_t size; // 0x407e10\n    int32_t size2; // 0x407e10\n    int32_t len; // 0x407ee2\n    int64_t v8; // 0x407ee2\n    char * env_val; // 0x407ecd\n    if (v2 == NULL) {\n        // 0x407ec8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x407f35;\n        } else {\n            // 0x407eda\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x407f35;\n            } else {\n                // 0x407edf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x407ecd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x408365\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x407f35;\n                    } else {\n                        // 0x4082d9\n                        size2 = len + 14;\n                        goto lab_0x407efb;\n                    }\n                } else {\n                    goto lab_0x407efb;\n                }\n            }\n        }\n    } else {\n        // 0x407e10\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x407e4a;\n    }\n  lab_0x40817c:;\n    // 0x40817c\n    struct _IO_FILE * stream; // 0x407fbb\n    int32_t v10 = __uflow(stream); // 0x40817f\n    int64_t v11; // 0x407e10\n    int64_t v12 = v11; // 0x408189\n    int64_t v13; // 0x407e10\n    int64_t v14 = v13; // 0x408189\n    int32_t v15 = v10; // 0x408189\n    int64_t v16; // 0x407e10\n    int64_t v17 = v16; // 0x408189\n    int64_t v18 = v11; // 0x408189\n    int64_t v19 = v13; // 0x408189\n    int64_t v20 = v16; // 0x408189\n    if (v10 == -1) {\n        // break -> 0x40818f\n        goto lab_0x40818f;\n    }\n    goto lab_0x408009;\n  lab_0x407ffe:;\n    // 0x407ffe\n    int64_t v90; // 0x407e10\n    int64_t * v32; // 0x407ff0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x407e10\n    v12 = v89;\n    int64_t v91; // 0x407e10\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x407e10\n    v17 = v92;\n    goto lab_0x408009;\n  lab_0x408009:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x407e10\n    int32_t v25; // bp-120, 0x407e10\n    int32_t v26; // bp-184, 0x407e10\n    int64_t v27; // 0x407fbb\n    int64_t v28; // 0x407fd8\n    int64_t v29; // 0x407fdd\n    int64_t * v30; // 0x407ff4\n    switch (c) {\n        case 32: {\n            goto lab_0x407ff0;\n        }\n        case 10: {\n            goto lab_0x407ff0;\n        }\n        case 9: {\n            goto lab_0x407ff0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4081e1\n            int32_t v33; // 0x407e10\n            char v34; // 0x407e10\n            int32_t v35; // 0x4081ee\n            if (v31 < *v30) {\n                // 0x4081c0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4081eb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4081e1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4081c0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4081eb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4081d0\n                v36 = v33;\n            }\n            // 0x4082bf\n            if (v36 == -1) {\n                // break -> 0x40818f\n                break;\n            }\n            goto lab_0x407ff0;\n        }\n        default: {\n            // 0x40801f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40818f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x408048\n            int64_t v39 = v37 + 4; // 0x40804a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x408056\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x408058\n            while (v41 == 0) {\n                // 0x408048\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x408076\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x408082\n            int64_t v45 = v43 + 4; // 0x408084\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x408090\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x408092\n            while (v47 == 0) {\n                // 0x408082\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40807f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4080a8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4080b8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4080bc\n            int64_t v52 = v51 + v48; // 0x4080c5\n            int64_t * mem; // 0x407e10\n            int64_t v53; // 0x407e10\n            int64_t v54; // 0x407e10\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4081fb\n                int64_t v56 = v55 + 3; // 0x408207\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4080e1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4080f0\n            if (mem == NULL) {\n                // 0x40831c\n                free((int64_t *)v21);\n                function_408380(v27, v53);\n                v24 = (int64_t)&g11;\n                goto lab_0x407f94;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x408108\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x408112\n            uint32_t v62 = (int32_t)v59; // 0x408115\n            int64_t v63; // 0x407e10\n            if (v62 >= 8) {\n                // 0x408224\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40823e\n                int64_t v66 = v61 - v65; // 0x408242\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40824d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40825e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40825e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40825b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4082ef\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x408127\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40812b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40813b\n            int64_t v74 = v60 - 1; // 0x40813f\n            uint32_t v75 = (int32_t)v73; // 0x408144\n            int64_t v76; // 0x407e10\n            if (v75 >= 8) {\n                // 0x408272\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40827c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40828c\n                int64_t v80 = v74 - v79; // 0x408290\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40829b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4082ab\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4082a9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x408306\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40830e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x408156\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40815a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x408353\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40816e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x407ffe;\n            } else {\n                goto lab_0x40817c;\n            }\n        }\n    }\n  lab_0x407ff0:;\n    int64_t v93 = v23; // 0x407e10\n    int64_t v94 = v22; // 0x407e10\n    int64_t v95 = v21; // 0x407e10\n    goto lab_0x407ff0_2;\n  lab_0x407f35:;\n    int64_t * mem3 = malloc(size); // 0x407f35\n    int64_t v97 = (int64_t)&g11; // 0x407f40\n    int64_t v98; // 0x407e10\n    int64_t path; // 0x407e10\n    if (mem3 == NULL) {\n        goto lab_0x407f12;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x407f35\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x407f56;\n    }\n  lab_0x407e4a:;\n    int64_t str = v1 == NULL ? (int64_t)&g11 : (int64_t)v1; // 0x407e3d\n    char v100 = *v3; // 0x407e4a\n    int64_t v101; // 0x407e10\n    if (v100 == 0) {\n        // 0x407ea4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x407e10\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x407e10\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x407e90\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x407e97;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x407e60\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x407e6d\n        char v107 = *(char *)v106; // 0x407e72\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x407ea4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x407e7b\n    v104 = v103 + 1;\n  lab_0x407e97:\n    // 0x407ea4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x407f12:;\n    char * v108 = (char *)v97;\n    g51 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x407e4a;\n  lab_0x407f56:;\n    int64_t v109 = v98 + path; // 0x407f56\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x407f82\n    v24 = (int64_t)&g11;\n    if (fd >= 0) {\n        // 0x407fb1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4082e2\n            close(fd);\n            v24 = (int64_t)&g11;\n        } else {\n            // 0x407fd5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x407ff0_2:;\n                uint64_t v96 = *v32; // 0x407ff0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40817c;\n                } else {\n                    goto lab_0x407ffe;\n                }\n            }\n          lab_0x40818f:\n            // 0x40818f\n            function_408380(v27, v19);\n            v24 = (int64_t)&g11;\n            if (v18 != 0) {\n                // 0x4081ae\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x407f94;\n  lab_0x407efb:;\n    int64_t * mem4 = malloc(size2); // 0x407efb\n    v97 = (int64_t)&g11;\n    if (mem4 != NULL) {\n        // 0x407fa1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x407f56;\n    } else {\n        goto lab_0x407f12;\n    }\n  lab_0x407f94:\n    // 0x407f94\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x407f12;\n}\n"
        },
        {
            "funcName": "function_408380",
            "funcStartAddr": "408380",
            "funcEndAddr": "4083fb",
            "decompiledFuncCode": "int64_t function_408380(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x408387\n    if (fileno(stream) < 0) {\n        // 0x4083e7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40839a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x4083cb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4083e7\n            return fclose(stream);\n        }\n    }\n    // 0x40839c\n    if ((int32_t)function_408400(a1, v1) == 0) {\n        // 0x4083e7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x4083a8\n    int32_t v3 = *v2; // 0x4083b0\n    int64_t result = fclose(stream); // 0x4083be\n    if (v3 != 0) {\n        // 0x4083f0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x4083c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_408400",
            "funcStartAddr": "408400",
            "funcEndAddr": "408440",
            "decompiledFuncCode": "int64_t function_408400(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40841a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40841a\n        return fflush(stream);\n    }\n    // 0x408428\n    function_408440(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_408440",
            "funcStartAddr": "408440",
            "funcEndAddr": "408497",
            "decompiledFuncCode": "int64_t function_408440(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x408440\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40844a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40847b\n    int64_t result = -1; // 0x408484\n    if (v1 != -1) {\n        // 0x408486\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x408492\n    return result;\n}\n"
        },
        {
            "funcName": "function_4084a0",
            "funcStartAddr": "4084a0",
            "funcEndAddr": "4084fd",
            "decompiledFuncCode": "int64_t function_4084a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4084a0\n    return function_4015b0();\n}\n"
        },
        {
            "funcName": "function_408500",
            "funcStartAddr": "408500",
            "funcEndAddr": "408501",
            "decompiledFuncCode": "int64_t function_408500(void) {\n    // 0x408500\n    int64_t result; // 0x408500\n    return result;\n}\n"
        },
        {
            "funcName": "function_408510",
            "funcStartAddr": "408510",
            "funcEndAddr": "408528",
            "decompiledFuncCode": "int64_t function_408510(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408510\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_408528",
            "funcStartAddr": "408528",
            "funcEndAddr": "408548",
            "decompiledFuncCode": "int64_t function_408528(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x408532\n    while (*(int64_t *)v1 != -1) {\n        // 0x408533\n        v1 -= 8;\n    }\n    // 0x408544\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_realpath.elf"
}