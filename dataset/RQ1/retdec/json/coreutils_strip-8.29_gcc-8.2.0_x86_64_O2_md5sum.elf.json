{
    "funcInfo": [
        {
            "funcName": "function_401920",
            "funcStartAddr": "401920",
            "funcEndAddr": "401925",
            "decompiledFuncCode": "int64_t function_401920(void) {\n    // 0x401920\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401925",
            "funcStartAddr": "401925",
            "funcEndAddr": "40192a",
            "decompiledFuncCode": "int64_t function_401925(void) {\n    // 0x401925\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40192a",
            "funcStartAddr": "40192a",
            "funcEndAddr": "40192f",
            "decompiledFuncCode": "int64_t function_40192a(void) {\n    // 0x40192a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40192f",
            "funcStartAddr": "40192f",
            "funcEndAddr": "401934",
            "decompiledFuncCode": "int64_t function_40192f(void) {\n    // 0x40192f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401934",
            "funcStartAddr": "401934",
            "funcEndAddr": "401939",
            "decompiledFuncCode": "int64_t function_401934(void) {\n    // 0x401934\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401939",
            "funcStartAddr": "401939",
            "funcEndAddr": "40193e",
            "decompiledFuncCode": "int64_t function_401939(void) {\n    // 0x401939\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401940",
            "funcStartAddr": "401940",
            "funcEndAddr": "402869",
            "decompiledFuncCode": "int64_t function_401940(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401955\n    function_403f60(a2);\n    setlocale(LC_ALL, (char *)&g9);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_407b30(0x403080, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    setvbuf(g28, (char *)((int32_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\" ^ (int32_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\"), 1, 0);\n    int64_t v2 = 0xffffffff; // 0x4019b1\n    int64_t v3 = 0; // 0x4019b1\n    int64_t v4 = 0; // 0x4019b1\n    int64_t v5; // 0x401940\n    int64_t v6; // 0x401940\n    while (true) {\n      lab_0x4019b8_2:\n        // 0x4019b8\n        v6 = v3;\n        v5 = v2;\n        int64_t v7; // 0x401940\n        int32_t v8 = function_407390(v1, a2, \"bctw\", &g2, 0, v7);\n        switch (v8) {\n            case -1: {\n                goto lab_0x401b32;\n            }\n            case 119: {\n                // 0x401b18\n                g38 = 0;\n                g37 = 1;\n                g35 = 0;\n                v2 = v5;\n                v3 = v6;\n                goto lab_0x4019b8_2;\n            }\n            default: {\n                if (v8 > 119) {\n                    if (v8 == 130) {\n                        // 0x401af8\n                        g38 = 0;\n                        g37 = 0;\n                        g35 = 1;\n                        v2 = v5;\n                        v3 = v6;\n                    } else {\n                        if (v8 > 130) {\n                            if (v8 != 131) {\n                                // 0x401a28\n                                v2 = 1;\n                                v3 = v6;\n                                if (v8 != 132) {\n                                    // 0x4026bf\n                                    function_402c90(1);\n                                    // UNREACHABLE\n                                }\n                            } else {\n                                // 0x401ad3\n                                *(char *)&g34 = 1;\n                                v2 = v5;\n                                v3 = v6;\n                            }\n                        } else {\n                            if (v8 != 128) {\n                                if (v8 != 129) {\n                                    // 0x4026bf\n                                    function_402c90(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x401aab\n                                g38 = 1;\n                                g37 = 0;\n                                g35 = 0;\n                                v2 = v5;\n                                v3 = v6;\n                            } else {\n                                // 0x4019ff\n                                *(char *)&g36 = 1;\n                                v2 = v5;\n                                v3 = v6;\n                            }\n                        }\n                    }\n                } else {\n                    // 0x401a10\n                    v2 = 1;\n                    v3 = v6;\n                    if (v8 != 98) {\n                        if (v8 <= 98) {\n                            if (v8 == -131) {\n                                // 0x401a67\n                                function_406010((int64_t)g28, \"md5sum\", \"GNU coreutils\", (int64_t)g17, \"Ulrich Drepper\", \"Scott Miller\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            if (v8 == -130) {\n                                // 0x401aea\n                                function_402c90(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x4026bf;\n                        }\n                        // 0x401a17\n                        v2 = v5;\n                        v3 = 1;\n                        if (v8 != 99) {\n                            // 0x401a48\n                            v2 = 0;\n                            v3 = v6;\n                            if (v8 != 116) {\n                              lab_0x4026bf:\n                                // 0x4026bf\n                                function_402c90(1);\n                                // UNREACHABLE\n                            }\n                        }\n                    }\n                }\n                goto lab_0x4019b8_2;\n            }\n        }\n    }\n  lab_0x401b32:\n    // 0x401b32\n    g40 = 34;\n    g39 = 32;\n    if (v5 == 0) {\n        // 0x401b4d\n        if ((char)v4 != 0) {\n            // 0x4026aa\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"--tag does not support --text mode\", 5));\n            // 0x4026bf\n            function_402c90(1);\n            // UNREACHABLE\n        }\n    }\n    if (v6 != 0) {\n        // 0x401b5b\n        if ((char)v4 != 0) {\n            // 0x4026aa\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --tag option is meaningless when verifying checksums\", 5));\n            // 0x4026bf\n            function_402c90(1);\n            // UNREACHABLE\n        }\n    }\n    // 0x401b6e\n    if (((char)((int32_t)v5 > -1) & (char)v6) != 0) {\n        // 0x4026aa\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --binary and --text options are meaningless when verifying checksums\", 5));\n        // 0x4026bf\n        function_402c90(1);\n        // UNREACHABLE\n    }\n    int64_t v9 = a2; // 0x401b90\n    int64_t v10 = v1; // 0x401b90\n    int64_t v11 = v5; // 0x401b90\n    int64_t v12 = v6; // 0x401b90\n    int64_t v13 = v4; // 0x401b90\n    int64_t v14; // 0x401940\n    int64_t v15; // 0x401940\n    int64_t v16; // 0x401940\n    int64_t v17; // 0x401940\n    int64_t v18; // 0x401940\n    int64_t v19; // 0x401940\n    int64_t v20; // 0x401940\n    int64_t v21; // 0x401940\n    int64_t v22; // 0x401940\n    int64_t v23; // 0x401940\n    int64_t v24; // 0x401940\n    int64_t v25; // 0x401940\n    int64_t v26; // 0x401940\n    int64_t v27; // 0x401940\n    int64_t v28; // 0x401940\n    int64_t v29; // 0x401940\n    int64_t v30; // 0x401940\n    int64_t v31; // 0x401940\n    if (*(char *)&g36 != 0) {\n        goto lab_0x401df3;\n    } else {\n        // 0x401b96\n        if (g38 == 0) {\n            // 0x40258f\n            v27 = a2;\n            v24 = v1;\n            v30 = (int64_t)\"the --binary and --text options are meaningless when verifying checksums\";\n            v14 = v5;\n            v17 = v6;\n            v20 = v4;\n            if (g37 == 0) {\n                goto lab_0x40268a;\n            } else {\n                // 0x40259c\n                v28 = a2;\n                v25 = v1;\n                v31 = (int64_t)\"the --warn option is meaningful only when verifying checksums\";\n                v16 = v5;\n                v19 = v6;\n                v22 = v4;\n                if (v6 == 0) {\n                    // 0x4026aa\n                    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --warn option is meaningful only when verifying checksums\", 5));\n                    // 0x4026bf\n                    function_402c90(1);\n                    // UNREACHABLE\n                }\n                goto lab_0x401bdb;\n            }\n        } else {\n            // 0x401ba3\n            v26 = a2;\n            v23 = v1;\n            v29 = (int64_t)\"the --status option is meaningful only when verifying checksums\";\n            v15 = v5;\n            v18 = v6;\n            v21 = v4;\n            if (v6 == 0) {\n                // 0x4026aa\n                error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --status option is meaningful only when verifying checksums\", 5));\n                // 0x4026bf\n                function_402c90(1);\n                // UNREACHABLE\n            }\n            goto lab_0x401bb6;\n        }\n    }\n  lab_0x401d3e:;\n    // 0x401d3e\n    int64_t v32; // 0x401940\n    int64_t v33 = v32;\n    char v34; // 0x401940\n    char v35 = v34;\n    int64_t v36 = v33; // 0x401d41\n    int64_t v37; // 0x401940\n    int64_t v38; // 0x401940\n    int64_t v39; // 0x401940\n    int64_t v40; // 0x401940\n    int64_t v41; // 0x401940\n    int64_t v42; // 0x401940\n    int64_t v43; // 0x401940\n    int64_t v44; // 0x401940\n    int64_t v45; // 0x401940\n    int64_t v46; // 0x401d66\n    int64_t v47; // 0x401e30\n    int32_t v48; // 0x401e76\n    int64_t v49; // 0x401e82\n    int64_t v50; // 0x4021ff\n    int64_t v51; // 0x401940\n    int64_t v52; // 0x401940\n    if (v35 == 9) {\n        goto lab_0x401d30;\n    } else {\n        int64_t v53 = v33 + (int64_t)(v35 == 92);\n        v44 = v35 != 92 ? 0 : v51;\n        v45 = v53 + v39;\n        int64_t v54 = (int64_t)\"MD5\"; // 0x401940\n        int64_t v55 = v45; // 0x401940\n        int64_t v56 = 3; // 0x401940\n        int64_t v57 = v55;\n        int64_t v58 = v54;\n        unsigned char v59 = *(char *)v57; // 0x401d66\n        char v60 = *(char *)v58; // 0x401d66\n        v46 = v57 + v52;\n        char v61 = v60; // 0x401d66\n        bool v62 = false; // 0x401d66\n        while (v59 == v60) {\n            int64_t v63 = v56;\n            int64_t v64 = v63 - 1; // 0x401d66\n            v54 = v58 + v52;\n            v55 = v46;\n            v56 = v64;\n            v61 = v59;\n            v62 = true;\n            if (v64 == 0) {\n                // break -> \n                break;\n            }\n            v57 = v55;\n            v58 = v54;\n            v59 = *(char *)v57;\n            v60 = *(char *)v58;\n            v46 = v57 + v52;\n            v61 = v60;\n            v62 = false;\n        }\n        bool v65 = v62;\n        unsigned char v66 = v61;\n        if ((v59 >= v66 && !v65) != v59 < v66) {\n            char v67 = *(char *)v45; // 0x401e18\n            int64_t v68 = g40; // 0x401e20\n            v42 = v46;\n            v38 = v45;\n            if (v40 - v53 < v68 + (int64_t)(v67 == 92)) {\n                goto lab_0x401d95;\n            } else {\n                int64_t v69 = g39; // 0x401e30\n                v47 = v69 + v53;\n                int64_t v70 = v47 + v39;\n                char * v71 = (char *)v70; // 0x401e3b\n                char v72 = *v71; // 0x401e3b\n                v42 = v46;\n                v38 = v45;\n                if (v72 != 32 == (v72 != 9)) {\n                    goto lab_0x401d95;\n                } else {\n                    // 0x401e4a\n                    *v71 = 0;\n                    int64_t v73 = function_402950(v45); // 0x401e5f\n                    v42 = v46;\n                    v38 = v45;\n                    if ((char)v73 == 0) {\n                        goto lab_0x401d95;\n                    } else {\n                        // 0x401e6c\n                        v48 = g16;\n                        v49 = v47 + 1;\n                        v43 = 1;\n                        if (v40 - v49 == 1) {\n                            goto lab_0x401eac;\n                        } else {\n                            unsigned char v74 = *(char *)(v70 + 1); // 0x401e92\n                            if (v74 == 32) {\n                                goto lab_0x40228c;\n                            } else {\n                                // 0x401ea2\n                                v43 = v74;\n                                if (v74 == 42) {\n                                    goto lab_0x40228c;\n                                } else {\n                                    goto lab_0x401eac;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            char v75 = *(char *)(v45 + 3); // 0x401d75\n            char v76 = v75; // 0x401d81\n            int64_t v77 = v53 + 3; // 0x401d81\n            if (v75 == 32) {\n                char v78 = *(char *)(v45 + 4); // 0x401d83\n                v76 = v78;\n                v77 = v53 + 4;\n            }\n            char v79 = v76;\n            v42 = v46;\n            v38 = v45;\n            if (v79 == 40) {\n                int64_t v80 = v77;\n                int64_t v81 = v80 + 1; // 0x4021ef\n                int64_t v82 = v40 - v81; // 0x4021f3\n                v42 = v46;\n                v38 = v45;\n                if (v82 == 0) {\n                    goto lab_0x401d95;\n                } else {\n                    // 0x4021fc\n                    v50 = v81 + v39;\n                    int64_t v83 = v82 - 1; // 0x402202\n                    if (v83 == 0) {\n                        goto lab_0x402229;\n                    } else {\n                        char v84 = *(char *)(v80 + v39 + v82); // 0x402208\n                        int64_t v85 = v83; // 0x40220e\n                        if (v84 != 41) {\n                            int64_t v86 = v85;\n                            int64_t v87 = v86 - 1; // 0x402223\n                            while (v87 != 0) {\n                                int64_t v88 = v87 + v50;\n                                char v89 = *(char *)v88; // 0x402218\n                                v85 = v87;\n                                v41 = v88;\n                                v37 = v87;\n                                if (v89 == 41) {\n                                    goto lab_0x4023cb;\n                                }\n                                v86 = v85;\n                                v87 = v86 - 1;\n                            }\n                            goto lab_0x402229;\n                        } else {\n                            // 0x402208\n                            v41 = v83 + v50;\n                            v37 = v83;\n                            goto lab_0x4023cb;\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x401d95;\n            }\n        }\n    }\n  lab_0x4023cb:;\n    int64_t v90 = v37;\n    int64_t v91 = v41;\n    int64_t v92 = v46; // 0x4023ce\n    if (v44 != 0) {\n        int64_t v93 = function_4029b0(v50, v90, v91); // 0x402577\n        v42 = v90;\n        v38 = v45;\n        v92 = v90;\n        if (v93 != 0) {\n            goto lab_0x4023d4;\n        } else {\n            goto lab_0x401d95;\n        }\n    } else {\n        goto lab_0x4023d4;\n    }\n  lab_0x402466:;\n    // 0x402466\n    int64_t v94; // 0x401940\n    int64_t v95 = v94;\n    char v96 = g38; // 0x402466\n    char v97 = v96; // 0x402473\n    int32_t v98; // 0x401940\n    int32_t v99 = v98; // 0x402473\n    int32_t v100; // 0x401940\n    int32_t v101 = v100; // 0x402473\n    int64_t v102 = v95; // 0x402473\n    int64_t v103; // 0x401940\n    int64_t str; // 0x401940\n    int64_t v104; // 0x401940\n    int64_t v105; // 0x401940\n    int64_t v106; // 0x401940\n    int64_t v107; // 0x401940\n    char v108; // 0x401940\n    char v109; // 0x401940\n    int32_t v110; // 0x401940\n    int32_t v111; // 0x401940\n    if (v96 != 0) {\n        goto lab_0x401f95;\n    } else {\n        char v112 = g35; // 0x402479\n        v97 = v112;\n        v99 = v98;\n        v101 = v100;\n        v102 = v95;\n        if (v112 != 0) {\n            goto lab_0x401f95;\n        } else {\n            int64_t v113 = v104;\n            int64_t v114 = v106;\n            char v115 = v113;\n            v108 = v115;\n            v110 = v98;\n            v105 = v114;\n            v107 = v114;\n            if (v103 == 0) {\n                // 0x402536\n                function_402a40(str, 0);\n                v109 = v115;\n                v111 = v98;\n                goto lab_0x402550;\n            } else {\n                goto lab_0x402136;\n            }\n        }\n    }\n  lab_0x401da6:;\n    // 0x401da6\n    int64_t v116; // 0x401940\n    int64_t v117 = v116;\n    int64_t v118; // 0x401940\n    int64_t v119 = v118;\n    int64_t v120; // 0x401940\n    int64_t v121 = v120;\n    char * v122; // 0x401940\n    char v123 = *v122; // 0x401da6\n    char v124; // 0x401940\n    char v125 = v124; // 0x401daa\n    int32_t v126 = v98; // 0x401daa\n    int32_t v127 = v100; // 0x401daa\n    int64_t v128 = v119; // 0x401daa\n    int64_t v129 = v117; // 0x401daa\n    int64_t v130; // 0x401940\n    int64_t v131 = v130; // 0x401daa\n    char v132 = v124; // 0x401daa\n    int32_t v133 = v98; // 0x401daa\n    int32_t v134 = v100; // 0x401daa\n    int64_t v135 = v121; // 0x401daa\n    int64_t v136 = v119; // 0x401daa\n    int64_t v137 = v117; // 0x401daa\n    int64_t v138 = v130; // 0x401daa\n    if ((v123 & 48) != 0) {\n        // break -> 0x401fa5\n        goto lab_0x401fa5_2;\n    }\n    goto lab_0x401db0;\n  lab_0x401db0:;\n    int64_t v139 = v131;\n    int64_t v140 = v129;\n    int64_t v141 = v128;\n    int32_t v142 = v127;\n    int32_t v143 = v126;\n    char v144 = v125;\n    int64_t v145; // 0x401940\n    int64_t v146 = v145 + 1; // 0x401db0\n    char v147 = v144; // 0x401db4\n    int32_t v148 = v143; // 0x401db4\n    int32_t v149 = v142; // 0x401db4\n    int64_t v150 = v146; // 0x401db4\n    int64_t v151 = v141; // 0x401db4\n    int64_t v152 = v140; // 0x401db4\n    int64_t v153 = v139; // 0x401db4\n    int64_t v154; // 0x401940\n    int64_t v155; // 0x401940\n    if (v146 == 0) {\n        int64_t v156 = function_405a00(0, 3, v155); // 0x401dc6\n        error(1, (int32_t)\"%s: too many checksum lines\" ^ (int32_t)\"%s: too many checksum lines\", dcgettext(NULL, \"%s: too many checksum lines\", 5));\n        v9 = v156;\n        v10 = v154;\n        v11 = v141;\n        v12 = v140;\n        v13 = v139;\n        goto lab_0x401df3;\n    }\n    goto lab_0x401cd8;\n  lab_0x401d30:;\n    int64_t v176 = v36;\n    int64_t v177 = v176; // 0x401940\n    while (true) {\n        int64_t v178 = v177;\n        int64_t v179 = v178 + 1; // 0x401d30\n        char v180 = *(char *)(v179 + v39); // 0x401d34\n        v177 = v179;\n        v34 = v180;\n        v32 = v179;\n        if (v180 != 32) {\n            goto lab_0x401d3e;\n        }\n    }\n  lab_0x401d95:;\n    int64_t v181 = v38;\n    int64_t v182 = v42;\n    int64_t v158; // 0x401940\n    int64_t v183 = v158 + 1; // 0x401d95\n    char v184 = g37; // 0x401d99\n    v120 = v182;\n    v118 = v183;\n    v116 = v181;\n    if (v184 != 0) {\n        // 0x402048\n        function_405a00(0, 3, v155);\n        error(0, (int32_t)\"%s: %lu: improperly formatted %s checksum line\" ^ (int32_t)\"%s: %lu: improperly formatted %s checksum line\", dcgettext(NULL, \"%s: %lu: improperly formatted %s checksum line\", 5));\n        v120 = (int32_t)\"%s: %lu: improperly formatted %s checksum line\" ^ (int32_t)\"%s: %lu: improperly formatted %s checksum line\";\n        v118 = v183;\n        v116 = v181;\n    }\n    goto lab_0x401da6;\n  lab_0x402229:;\n    char v185 = *(char *)v50; // 0x402229\n    v42 = v46;\n    v38 = v45;\n    v41 = v50;\n    v37 = 0;\n    if (v185 != 41) {\n        goto lab_0x401d95;\n    } else {\n        goto lab_0x4023cb;\n    }\n  lab_0x401eac:;\n    int64_t v186 = v43;\n    v42 = v186;\n    v38 = v45;\n    int64_t v187; // 0x401940\n    if (v48 == 0) {\n        goto lab_0x401d95;\n    } else {\n        // 0x401eb4\n        g16 = 1;\n        v187 = v49;\n        goto lab_0x401ebe;\n    }\n  lab_0x40228c:\n    // 0x40228c\n    v187 = v49;\n    if (v48 != 1) {\n        // 0x402295\n        g16 = 0;\n        v187 = v47 + 2;\n    }\n    goto lab_0x401ebe;\n  lab_0x4023d4:;\n    int64_t v438 = v92;\n    *(char *)v91 = 0;\n    int64_t v439 = v50 + 1; // 0x4023d7\n    char v440 = *(char *)(v90 + v439); // 0x4023d7\n    int64_t v441 = v90 + 1; // 0x4023dd\n    int64_t v442 = v441; // 0x4023e4\n    int64_t v443 = v441; // 0x4023e4\n    char v444 = v440; // 0x4023e4\n    if (v440 != 9 != v440 != 32) {\n        while (true) {\n          lab_0x4023f0_2:;\n            int64_t v445 = v442;\n            int64_t v446 = v445 + 1; // 0x4023f0\n            char v447 = *(char *)(v446 + v50); // 0x4023f4\n            v443 = v446;\n            v444 = v447;\n            switch (v447) {\n                case 32: {\n                    // 0x4023f0\n                    v442 = v446;\n                    goto lab_0x4023f0_2;\n                }\n                case 9: {\n                    // 0x4023f0\n                    v442 = v446;\n                    goto lab_0x4023f0_2;\n                }\n                default: {\n                    goto lab_0x402403;\n                }\n            }\n        }\n    }\n  lab_0x402403:;\n    char v448 = v444;\n    v42 = v438;\n    v38 = v45;\n    int64_t v195; // 0x401940\n    int64_t v196; // 0x401940\n    int64_t v194; // 0x401940\n    int64_t v197; // 0x401940\n    if (v448 != 61) {\n        goto lab_0x401d95;\n    } else {\n        int64_t v449 = v443;\n        int64_t v450 = v449 + v439; // 0x40240c\n        char v451 = *(char *)v450; // 0x402411\n        int64_t v452 = v450; // 0x402419\n        if (v451 != 32 != v451 != 9) {\n            int64_t v453 = v50 + 2 + v449; // 0x402420\n            while (true) {\n              lab_0x402425_2:;\n                int64_t v454 = v453;\n                char v455 = *(char *)v454; // 0x402425\n                v452 = v454;\n                switch (v455) {\n                    case 32: {\n                        // 0x402425\n                        v453 = v454 + 1;\n                        goto lab_0x402425_2;\n                    }\n                    case 9: {\n                        // 0x402425\n                        v453 = v454 + 1;\n                        goto lab_0x402425_2;\n                    }\n                    default: {\n                        goto lab_0x402439;\n                    }\n                }\n            }\n        }\n      lab_0x402439:;\n        int64_t v456 = v452;\n        int64_t v457 = function_402950(v456); // 0x40243c\n        v194 = v438;\n        v195 = v456;\n        v196 = v50;\n        v197 = v457;\n        goto lab_0x402441;\n    }\n  lab_0x401ebe:;\n    int64_t v188 = v187;\n    int64_t v189 = v188 + v39; // 0x401ebe\n    int64_t v190 = v45; // 0x401ec4\n    int64_t v191 = v189; // 0x401ec4\n    if (v44 != 0) {\n        int64_t v192 = v40 - v188; // 0x4024e6\n        int64_t v193 = function_4029b0(v189, v192, v47); // 0x4024e9\n        v194 = v192;\n        v195 = v45;\n        v196 = v189;\n        v197 = v193 != 0;\n        goto lab_0x402441;\n    } else {\n        goto lab_0x401eca;\n    }\n  lab_0x401eca:\n    // 0x401eca\n    str = v191;\n    int64_t v198 = v190;\n    int64_t v199 = (int64_t)\"-\"; // 0x401ed0\n    int64_t v200 = str; // 0x401ed0\n    int64_t v201 = 2; // 0x401ed0\n    int32_t strcmp_rc; // 0x401c6c\n    if (strcmp_rc != 0) {\n        goto lab_0x401eee;\n    } else {\n        int64_t v202 = v200;\n        int64_t v203 = v199;\n        unsigned char v204 = *(char *)v202; // 0x401edf\n        char v205 = *(char *)v203; // 0x401edf\n        int64_t v206 = v202 + v52; // 0x401edf\n        char v207 = v205; // 0x401edf\n        bool v208 = false; // 0x401edf\n        while (v204 == v205) {\n            int64_t v209 = v201;\n            int64_t v210 = v209 - 1; // 0x401edf\n            v199 = v203 + v52;\n            v200 = v206;\n            v201 = v210;\n            v207 = v204;\n            v208 = true;\n            if (v210 == 0) {\n                // break -> \n                break;\n            }\n            v202 = v200;\n            v203 = v199;\n            v204 = *(char *)v202;\n            v205 = *(char *)v203;\n            v206 = v202 + v52;\n            v207 = v205;\n            v208 = false;\n        }\n        bool v211 = v208;\n        unsigned char v212 = v207;\n        v42 = v206;\n        v38 = v198;\n        if ((v204 >= v212 && !v211) == v204 < v212) {\n            goto lab_0x401d95;\n        } else {\n            goto lab_0x401eee;\n        }\n    }\n  lab_0x402441:;\n    int64_t v213 = v197;\n    int64_t v214 = v196;\n    int64_t v215 = v195;\n    int64_t v216 = v194;\n    v42 = v216;\n    v38 = v215;\n    v190 = v215;\n    v191 = v214;\n    if ((char)v213 != 0) {\n        goto lab_0x401eca;\n    } else {\n        goto lab_0x401d95;\n    }\n  lab_0x401eee:;\n    char v217 = g38; // 0x401ef1\n    int64_t v218 = 0; // 0x401ef8\n    if (v217 == 0) {\n        // 0x401efa\n        v218 = strchr((char *)str, 10) != NULL;\n    }\n    // 0x401f11\n    v103 = v218;\n    char v219; // bp-137, 0x401940\n    int64_t v220; // bp-88, 0x401940\n    uint64_t v221 = function_402af0(str, &v220, (int64_t *)&v219); // 0x401f21\n    int64_t v222; // 0x401940\n    char v223; // 0x401940\n    int32_t v224; // 0x401940\n    int32_t v225; // 0x401940\n    int64_t v226; // 0x401940\n    if ((char)v221 != 0) {\n        char v227 = *(char *)&g36; // 0x402090\n        if (v227 == 0) {\n            goto lab_0x4020a4;\n        } else {\n            char v228 = v219; // 0x402099\n            v97 = v124;\n            v99 = v98;\n            v101 = v100;\n            v102 = v226;\n            if (v228 != 0) {\n                goto lab_0x401f95;\n            } else {\n                goto lab_0x4020a4;\n            }\n        }\n    } else {\n        int32_t v229 = v100 + 1; // 0x401f31\n        char v230 = g38; // 0x401f37\n        v97 = v124;\n        v99 = v98;\n        v101 = v229;\n        v102 = v226;\n        if (v230 != 0) {\n            goto lab_0x401f95;\n        } else {\n            if (v103 != 0) {\n                struct _IO_FILE * v231 = g28; // 0x401f45\n                int64_t v232 = (int64_t)v231; // 0x401f45\n                int64_t * v233 = (int64_t *)(v232 + 40); // 0x401f4c\n                uint64_t v234 = *v233; // 0x401f4c\n                uint64_t v235 = *(int64_t *)(v232 + 48); // 0x401f50\n                if (v234 >= v235) {\n                    // 0x4027c8\n                    __overflow(v231, 92);\n                } else {\n                    // 0x401f5a\n                    *v233 = v234 + 1;\n                    *(char *)v234 = 92;\n                }\n            }\n            // 0x401f65\n            function_402a40(str, v103);\n            v223 = v124;\n            v224 = v98;\n            v225 = v229;\n            v222 = (int64_t)\"FAILED open or read\";\n            goto lab_0x401f7a;\n        }\n    }\n  lab_0x4020a4:;\n    uint64_t v236 = g39; // 0x4020a4\n    v106 = 0;\n    v94 = v226;\n    v104 = v221 & 0xffffffff;\n    int64_t v237; // 0x401940\n    int64_t v238; // 0x401940\n    char v239; // 0x401940\n    int32_t v240; // 0x401940\n    if (v236 < 2) {\n        goto lab_0x402466;\n    } else {\n        int32_t ** v241 = __ctype_tolower_loc(); // 0x4020be\n        int64_t v242 = v221 % 256; // 0x4020c5\n        int64_t v243 = 0x100000000000000 * v236 / 2 / 0x100000000000000; // 0x4020cb\n        int32_t * v244 = *v241; // 0x4020d0\n        int64_t v245 = (int64_t)v244; // 0x4020d0\n        int64_t v246 = 0; // 0x4020d3\n        int64_t v247 = v246;\n        int64_t v248; // 0x401940\n        unsigned char v249 = *(char *)(v248 + v247); // 0x4020fa\n        int64_t v250 = 2 * v247 + v198;\n        unsigned char v251 = *(char *)v250; // 0x402102\n        char v252 = *(char *)((int64_t)(v249 / 16) | (int64_t)\"0123456789abcdef\"); // 0x402111\n        int32_t v253 = *(int32_t *)(4 * (int64_t)v251 + v245); // 0x402118\n        int64_t v254; // 0x401940\n        while (v253 == (int32_t)v252) {\n            unsigned char v255 = *(char *)(v250 + 1); // 0x4020d8\n            int64_t v256 = v255; // 0x4020d8\n            char v257 = *(char *)((int64_t)(v249 % 16) | (int64_t)\"0123456789abcdef\"); // 0x4020e1\n            int32_t v258 = *(int32_t *)(4 * v256 + v245); // 0x4020e8\n            v254 = v256;\n            if (v258 != (int32_t)v257) {\n                goto lab_0x40211e;\n            }\n            int64_t v259 = v247 + 1; // 0x4020ed\n            v246 = v259;\n            v106 = v243;\n            v94 = v256;\n            v104 = v242;\n            if (v243 == v259) {\n                goto lab_0x402466;\n            }\n            v247 = v246;\n            v249 = *(char *)(v248 + v247);\n            v250 = 2 * v247 + v198;\n            v251 = *(char *)v250;\n            v252 = *(char *)((int64_t)(v249 / 16) | (int64_t)\"0123456789abcdef\");\n            v253 = *(int32_t *)(4 * (int64_t)v251 + v245);\n        }\n        // 0x40211e\n        v254 = v252;\n      lab_0x40211e:;\n        int64_t v260 = v254;\n        int32_t v261 = v98 + 1; // 0x40211e\n        char v262 = g38; // 0x402124\n        v97 = v124;\n        v99 = v261;\n        v101 = v100;\n        v102 = v260;\n        if (v262 != 0) {\n            goto lab_0x401f95;\n        } else {\n            // 0x402131\n            v108 = v124;\n            v110 = v261;\n            v105 = v243;\n            v107 = v247;\n            v239 = v124;\n            v240 = v261;\n            v237 = v243;\n            v238 = v247;\n            if (v103 == 0) {\n                goto lab_0x402156;\n            } else {\n                goto lab_0x402136;\n            }\n        }\n    }\n  lab_0x401f95:;\n    int64_t v263 = v102;\n    int32_t v264 = v101;\n    int32_t v265 = v99;\n    char v266 = v97;\n    char v267 = *v122; // 0x401f9b\n    v125 = v266;\n    v126 = v265;\n    v127 = v264;\n    v128 = v158;\n    v129 = v198;\n    v131 = v51;\n    v132 = v266;\n    v133 = v265;\n    v134 = v264;\n    v135 = v263;\n    v136 = v158;\n    v137 = v198;\n    v138 = v51;\n    if ((v267 & 48) != 0) {\n        // break -> 0x401fa5\n        goto lab_0x401fa5_2;\n    }\n    goto lab_0x401db0;\n  lab_0x401f7a:;\n    int64_t v268 = v222;\n    int32_t v269 = v225;\n    int32_t v270 = v224;\n    char v271 = v223;\n    __printf_chk(1, \": %s\\n\", dcgettext(NULL, (char *)v268, 5));\n    v97 = v271;\n    v99 = v270;\n    v101 = v269;\n    v102 = (int64_t)\": %s\\n\";\n    goto lab_0x401f95;\n  lab_0x402156:;\n    int64_t v272 = v238;\n    int64_t v273 = v237;\n    int32_t v274 = v240;\n    char v275 = v239;\n    function_402a40(str, v103);\n    v223 = v275;\n    v224 = v274;\n    v225 = v100;\n    v222 = (int64_t)\"FAILED\";\n    v109 = v275;\n    v111 = v274;\n    if (v273 == 0x100000000000000 * v272 >> 56) {\n        goto lab_0x402550;\n    } else {\n        goto lab_0x401f7a;\n    }\n  lab_0x402136:;\n    int64_t v276 = v107;\n    int64_t v277 = v105;\n    int32_t v278 = v110;\n    char v279 = v108;\n    struct _IO_FILE * v280 = g28; // 0x402136\n    int64_t v281 = (int64_t)v280; // 0x402136\n    int64_t * v282 = (int64_t *)(v281 + 40); // 0x40213d\n    uint64_t v283 = *v282; // 0x40213d\n    uint64_t v284 = *(int64_t *)(v281 + 48); // 0x402141\n    if (v283 >= v284) {\n        // 0x4027f7\n        __overflow(v280, 92);\n        v239 = v279;\n        v240 = v278;\n        v237 = v277;\n        v238 = 0x100000000000000 * v276 >> 56;\n    } else {\n        // 0x40214b\n        *v282 = v283 + 1;\n        *(char *)v283 = 92;\n        v239 = v279;\n        v240 = v278;\n        v237 = v277;\n        v238 = v276;\n    }\n    goto lab_0x402156;\n  lab_0x402550:;\n    int32_t v285 = v111;\n    char v286 = v109;\n    char v287 = g35; // 0x402550\n    v223 = v286;\n    v224 = v285;\n    v225 = v100;\n    v222 = (int64_t)\"OK\";\n    v97 = v286;\n    v99 = v285;\n    v101 = v100;\n    v102 = v103;\n    if (v287 != 0) {\n        goto lab_0x401f95;\n    } else {\n        goto lab_0x401f7a;\n    }\n  lab_0x4021b1:;\n    // 0x4021b1\n    int64_t v288; // 0x401940\n    int64_t v289 = v288;\n    int64_t v290; // 0x401940\n    int64_t v291 = v290;\n    int64_t v292; // 0x401940\n    int64_t v293 = v292;\n    int64_t v294; // 0x401940\n    int64_t v295 = v294;\n    int32_t v296; // 0x401940\n    int32_t v297 = v296;\n    int64_t v298; // bp-232, 0x401940\n    int64_t v299 = v298; // 0x4021b1\n    int64_t v300 = v299 + 8; // 0x4021b1\n    v298 = v300;\n    int64_t v301 = v300; // 0x4021bf\n    int32_t v302 = v297; // 0x4021bf\n    int64_t v303 = v295; // 0x4021bf\n    int64_t v304 = v293; // 0x4021bf\n    int64_t v305 = v291; // 0x4021bf\n    int64_t v306 = v289; // 0x4021bf\n    uint64_t v307; // 0x401940\n    if (v307 <= v300) {\n        // break -> 0x4021c5\n        goto lab_0x4021c5;\n    }\n    goto lab_0x401c50;\n  lab_0x4022d0:;\n    struct _IO_FILE * v333 = g28;\n    int64_t v334 = (int64_t)v333;\n    int64_t * v335 = (int64_t *)(v334 + 40);\n    uint64_t v336 = *v335;\n    uint64_t v337 = *(int64_t *)(v334 + 48);\n    int64_t v319; // 0x401940\n    int64_t v323; // 0x401940\n    int64_t v315; // 0x401940\n    int64_t v321; // 0x401940\n    int64_t v322; // 0x401940\n    int64_t v318; // 0x401940\n    if ((char)v319 != 0) {\n        if (v337 > v336) {\n            // 0x4027b3\n            *v335 = v336 + 1;\n            *(char *)v336 = 92;\n            v318 = 1;\n        } else {\n            // 0x402846\n            __overflow(v333, 92);\n            v318 = 1;\n        }\n        goto lab_0x4025d9;\n    } else {\n        if (v336 >= v337) {\n            // 0x40281a\n            __overflow(v333, 92);\n        } else {\n            // 0x4022f0\n            *v335 = v336 + 1;\n            *(char *)v336 = 92;\n        }\n        uint64_t v338 = g39; // 0x4022fb\n        v321 = 1;\n        v322 = 1;\n        v323 = v315;\n        if (v338 < 2) {\n            goto lab_0x402371;\n        } else {\n            goto lab_0x40230c;\n        }\n    }\n  lab_0x401ca1:;\n    // 0x401ca1\n    int64_t v326; // 0x401940\n    v154 = v326;\n    char * v325; // 0x401940\n    char * v339 = v325;\n    int64_t v160 = 0; // bp-136, 0x401cb1\n    int64_t v161 = 0; // bp-128, 0x401cba\n    struct _IO_FILE * v162 = (struct _IO_FILE *)v154; // 0x401cea\n    v122 = (char *)v154;\n    v155 = (int64_t)v339;\n    v147 = 0;\n    v148 = 0;\n    v149 = 0;\n    v150 = 1;\n    v151 = 0;\n    int64_t v309; // 0x401940\n    v152 = v309;\n    v153 = 0;\n    while (true) {\n      lab_0x401cd8:\n        // 0x401cd8\n        v130 = v153;\n        int64_t v157 = v152;\n        v158 = v151;\n        v100 = v149;\n        v98 = v148;\n        v124 = v147;\n        int32_t v159 = __getdelim((char **)&v160, (int32_t *)&v161, 10, v162); // 0x401cea\n        v132 = v124;\n        v133 = v98;\n        v134 = v100;\n        int64_t v163; // 0x401940\n        v135 = v163;\n        v136 = v158;\n        v137 = v157;\n        v138 = v130;\n        if (v159 < 1) {\n            // break -> 0x401fa5\n            break;\n        }\n        // 0x401cf8\n        v145 = v150;\n        int64_t v164 = v160; // 0x401cf8\n        char v165 = *(char *)v164; // 0x401cfd\n        v120 = v163;\n        v118 = v158;\n        v116 = v157;\n        if (v165 == 35) {\n            goto lab_0x401da6;\n        } else {\n            int64_t v166 = v159; // 0x401cea\n            int64_t v167 = v166 - 1;\n            char * v168 = (char *)(v164 + v167);\n            char v169 = *v168; // 0x401d0a\n            char v170 = v165; // 0x401d13\n            int64_t v171 = v166; // 0x401d13\n            int64_t v172 = v164; // 0x401d13\n            if (v169 == 10) {\n                // 0x401d15\n                *v168 = 0;\n                int64_t v173 = v160; // 0x401d1e\n                char v174 = *(char *)v173; // 0x401d23\n                v170 = v174;\n                v171 = v167;\n                v172 = v173;\n            }\n            // 0x401d27\n            v39 = v172;\n            v40 = v171;\n            char v175 = v170;\n            v36 = 0;\n            v34 = v175;\n            v32 = 0;\n            if (v175 != 32) {\n                goto lab_0x401d3e;\n            } else {\n                goto lab_0x401d30;\n            }\n        }\n    }\n  lab_0x401fa5_2:;\n    int64_t v340 = v138;\n    int64_t v341 = v137;\n    int64_t v342 = v136;\n    int64_t v343 = v160; // 0x401fa5\n    free((int64_t *)v343);\n    int32_t v344 = *(int32_t *)v154; // 0x401faf\n    int32_t v345 = v344 & 32; // 0x401fb2\n    int64_t v327; // 0x401940\n    int64_t v346; // 0x401940\n    int64_t v329; // 0x401940\n    int64_t v347; // 0x401940\n    int64_t v330; // 0x401940\n    int64_t v348; // 0x401940\n    int64_t v331; // 0x401940\n    int32_t v349; // 0x401940\n    int64_t v328; // 0x401940\n    int64_t v350; // 0x401940\n    char v351; // 0x401940\n    int32_t v352; // 0x401940\n    int32_t v353; // 0x401940\n    if (v345 != 0) {\n        // 0x4024f9\n        function_405a00(0, 3, v155);\n        error(0, (int32_t)\"%s: read error\" ^ (int32_t)\"%s: read error\", dcgettext(NULL, \"%s: read error\", 5));\n        v349 = (int32_t)&g57 ^ (int32_t)&g57;\n        v350 = v154;\n        v346 = v342;\n        v347 = v341;\n        v348 = v340;\n        goto lab_0x40203b;\n    } else {\n        int64_t v354 = v135;\n        v353 = v134;\n        v352 = v133;\n        v351 = v132;\n        if (strcmp_rc != 0) {\n            int64_t v355 = function_4063e0(v154, v354); // 0x402451\n            v327 = v155;\n            v328 = v154;\n            v329 = v342;\n            v330 = v341;\n            v331 = v340;\n            if ((int32_t)v355 == 0) {\n                goto lab_0x401fc6;\n            } else {\n                goto lab_0x402259;\n            }\n        } else {\n            goto lab_0x401fc6;\n        }\n    }\n  lab_0x402259:;\n    int64_t v356 = v331;\n    int64_t v357 = v330;\n    int64_t v358 = v329;\n    int64_t v359 = v328;\n    int64_t v360 = v327;\n    int64_t v361 = function_405a00(0, 3, v360); // 0x402265\n    int32_t * v362 = __errno_location(); // 0x40226d\n    uint32_t err_num = *v362; // 0x40227c\n    error(0, err_num, \"%s\", (char *)v361);\n    v349 = (int32_t)&g57 ^ (int32_t)&g57;\n    v350 = v359;\n    v346 = v358;\n    v347 = v357;\n    v348 = v356;\n    goto lab_0x40203b;\n  lab_0x40203b:;\n    int64_t v363 = v348;\n    int64_t v364 = v347;\n    int64_t v365 = v346;\n    int64_t v366 = v350;\n    int32_t v367 = v349;\n    int32_t v311; // 0x401940\n    v296 = 0x1000000 * (v367 & v311) >> 24;\n    v294 = v366;\n    v292 = v365;\n    v290 = v364;\n    v288 = v363;\n    goto lab_0x4021b1;\n  lab_0x4025d9:;\n    int64_t v368 = v318;\n    struct _IO_FILE * stream = g28; // 0x4025e8\n    fwrite_unlocked((int64_t *)\"MD5\", 1, 3, stream);\n    struct _IO_FILE * stream2 = g28; // 0x4025fe\n    fwrite_unlocked((int64_t *)\" (\", 1, 2, stream2);\n    int64_t v313; // 0x401c59\n    function_402a40(v313, v368);\n    struct _IO_FILE * stream3 = g28; // 0x402625\n    fwrite_unlocked((int64_t *)\") = \", 1, 4, stream3);\n    uint64_t v369 = g39; // 0x402636\n    v321 = v368;\n    int64_t v370 = v315; // 0x402640\n    if (v369 >= 2) {\n        goto lab_0x40230c;\n    } else {\n        goto lab_0x402340;\n    }\n  lab_0x402371:;\n    int64_t v371 = v323;\n    int64_t v372 = v322;\n    struct _IO_FILE * v373 = g28; // 0x402371\n    int64_t v374 = (int64_t)v373; // 0x402371\n    int64_t * v375 = (int64_t *)(v374 + 40); // 0x402378\n    uint64_t v376 = *v375; // 0x402378\n    uint64_t v377 = *(int64_t *)(v374 + 48); // 0x40237c\n    if (v376 >= v377) {\n        // 0x402837\n        __overflow(v373, 32);\n    } else {\n        // 0x402386\n        *v375 = v376 + 1;\n        *(char *)v376 = 32;\n    }\n    struct _IO_FILE * v378 = g28; // 0x402391\n    int64_t v379 = (int64_t)v378; // 0x402391\n    int64_t * v380 = (int64_t *)(v379 + 40); // 0x402398\n    uint64_t v381 = *v380; // 0x402398\n    uint64_t v382 = *(int64_t *)(v379 + 48); // 0x40239c\n    if (v381 >= v382) {\n        // 0x402829\n        int32_t v383; // 0x401c3e\n        __overflow(v378, v383);\n    } else {\n        // 0x4023a6\n        *v380 = v381 + 1;\n        char v384; // 0x401c42\n        *(char *)v381 = v384;\n    }\n    int64_t v385 = v372 & 0xffffffff; // 0x4023bb\n    function_402a40(v313, v385);\n    v370 = v371;\n    goto lab_0x402340;\n  lab_0x40230c:;\n    int64_t v423 = v321;\n    int64_t v424 = 0; // 0x40230e\n    int64_t v425 = v424;\n    int64_t v426; // 0x401940\n    unsigned char v427 = *(char *)(v426 + v425); // 0x402310\n    int64_t v428 = v425 + 1; // 0x402321\n    __printf_chk(1, \"%02x\", (int32_t)v427);\n    uint64_t v429 = g39; // 0x40232a\n    v424 = v428;\n    while (v429 / 2 > v428) {\n        // 0x402310\n        v425 = v424;\n        v427 = *(char *)(v426 + v425);\n        v428 = v425 + 1;\n        __printf_chk(1, \"%02x\", (int32_t)v427);\n        v429 = g39;\n        v424 = v428;\n    }\n    // 0x402339\n    v370 = v428;\n    v322 = v423;\n    v323 = v428;\n    if ((char)v319 == 0) {\n        goto lab_0x402371;\n    } else {\n        goto lab_0x402340;\n    }\n  lab_0x401fc6:;\n    int64_t v400; // 0x401940\n    int64_t v393; // 0x401940\n    int64_t v399; // 0x401940\n    int64_t v395; // 0x401940\n    int32_t v397; // 0x401940\n    if ((char)v340 == 0) {\n        int64_t v430 = function_405a00(0, 3, v155); // 0x4024ab\n        error(0, (int32_t)\"%s: no properly formatted %s checksum lines found\" ^ (int32_t)\"%s: no properly formatted %s checksum lines found\", dcgettext(NULL, \"%s: no properly formatted %s checksum lines found\", 5));\n        v397 = v345;\n        v395 = v430;\n        v393 = v340;\n        goto lab_0x402036;\n    } else {\n        char v431 = g38; // 0x401fcf\n        v399 = v340;\n        if (v431 != 0) {\n            goto lab_0x4022a8;\n        } else {\n            // 0x401fdc\n            if (v342 != 0) {\n                // 0x40276e\n                error(0, (int32_t)\"WARNING: %lu line is improperly formatted\" ^ (int32_t)\"WARNING: %lu line is improperly formatted\", dcngettext(NULL, \"WARNING: %lu line is improperly formatted\", \"WARNING: %lu lines are improperly formatted\", (int32_t)v342, 5));\n            }\n            int64_t v432 = v340; // 0x401feb\n            if (v353 != 0) {\n                // 0x402739\n                error(0, (int32_t)\"WARNING: %lu listed file could not be read\" ^ (int32_t)\"WARNING: %lu listed file could not be read\", dcngettext(NULL, \"WARNING: %lu listed file could not be read\", \"WARNING: %lu listed files could not be read\", v353, 5));\n                v432 = v353;\n            }\n            int64_t v433 = v432;\n            int64_t v434 = v433; // 0x401ff7\n            if (v352 != 0) {\n                // 0x402704\n                error(0, (int32_t)\"WARNING: %lu computed checksum did NOT match\" ^ (int32_t)\"WARNING: %lu computed checksum did NOT match\", dcngettext(NULL, \"WARNING: %lu computed checksum did NOT match\", \"WARNING: %lu computed checksums did NOT match\", v352, 5));\n                v434 = v352;\n            }\n            int64_t v435 = v434;\n            char v436 = *(char *)&g36; // 0x401ffd\n            v399 = v435;\n            if (v436 == 0) {\n                goto lab_0x4022a8;\n            } else {\n                // 0x40200a\n                v400 = v435;\n                if (v351 == 0) {\n                    int64_t v437 = function_405a00(0, 3, v155); // 0x4026d5\n                    error(0, (int32_t)\"%s: no file was verified\" ^ (int32_t)\"%s: no file was verified\", dcgettext(NULL, \"%s: no file was verified\", 5));\n                    v397 = v345;\n                    v395 = v437;\n                    v393 = v435;\n                    goto lab_0x402036;\n                } else {\n                    goto lab_0x402015;\n                }\n            }\n        }\n    }\n  lab_0x402340:;\n    int64_t v386 = v370;\n    struct _IO_FILE * v387 = g28; // 0x402340\n    int64_t v388 = (int64_t)v387; // 0x402340\n    int64_t * v389 = (int64_t *)(v388 + 40); // 0x402347\n    uint64_t v390 = *v389; // 0x402347\n    uint64_t v391 = *(int64_t *)(v388 + 48); // 0x40234b\n    int64_t v310; // 0x401940\n    int64_t v308; // 0x401940\n    if (v390 >= v391) {\n        // 0x4027e1\n        __overflow(v387, 10);\n        v296 = v311;\n        v294 = v386;\n        v292 = v310;\n        v290 = v309;\n        v288 = v308;\n    } else {\n        // 0x402355\n        *v389 = v390 + 1;\n        *(char *)v390 = 10;\n        v296 = v311;\n        v294 = v386;\n        v292 = v310;\n        v290 = v309;\n        v288 = v308;\n    }\n    goto lab_0x4021b1;\n  lab_0x402036:;\n    int64_t v392 = v393;\n    int64_t v394 = v395;\n    uint32_t v396 = v397;\n    v349 = v396 % 2;\n    v350 = v394;\n    v346 = v342;\n    v347 = v341;\n    v348 = v392;\n    goto lab_0x40203b;\n  lab_0x4022a8:;\n    int64_t v398 = v399;\n    v400 = v398;\n    v397 = v345;\n    v395 = v154;\n    v393 = v398;\n    if (v351 != 0) {\n        goto lab_0x402015;\n    } else {\n        goto lab_0x402036;\n    }\n  lab_0x402015:;\n    int64_t v401 = v400;\n    v397 = v345;\n    v395 = v154;\n    v393 = v401;\n    if ((v353 || v352) == 0) {\n        char v402 = *(char *)&g34; // 0x402021\n        v397 = v402 ^ 1 | (char)(v342 == 0);\n        v395 = v154;\n        v393 = v401;\n    }\n    goto lab_0x402036;\n    // 0x4019b8\n    goto lab_0x4019b8_2;\n  lab_0x401df3:\n    // 0x401df3\n    v26 = v9;\n    v23 = v10;\n    v29 = (int64_t)\"the --ignore-missing option is meaningful only when verifying checksums\";\n    v15 = v11;\n    v18 = v12;\n    v21 = v13;\n    if ((char)v12 == 0) {\n        // 0x4026aa\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --ignore-missing option is meaningful only when verifying checksums\", 5));\n        // 0x4026bf\n        function_402c90(1);\n        // UNREACHABLE\n    }\n    goto lab_0x401bb6;\n  lab_0x401bb6:;\n    int64_t v403 = v26; // 0x401bbd\n    int64_t v404 = v23; // 0x401bbd\n    int64_t v405 = v29; // 0x401bbd\n    int64_t v406 = v15; // 0x401bbd\n    int64_t v407 = v18; // 0x401bbd\n    int64_t v408 = v21; // 0x401bbd\n    v28 = v26;\n    v25 = v23;\n    v31 = v29;\n    v16 = v15;\n    v19 = v18;\n    v22 = v21;\n    if (g37 != 0) {\n        goto lab_0x401bdb;\n    } else {\n        goto lab_0x401bbf;\n    }\n  lab_0x401bdb:;\n    int64_t v409 = v16;\n    int64_t v410 = (0x100000000 * v25 >> 29) + v28; // 0x401be7\n    int32_t v411 = *(int32_t *)0x60c29c; // 0x401bf0\n    int64_t v412 = v410; // 0x401bf9\n    if (v411 == (int32_t)v25) {\n        // 0x401bfb\n        *(int64_t *)v410 = (int64_t)\"-\";\n        v412 = v410 + 8;\n    }\n    // 0x401c10\n    if (v412 > 8 * (int64_t)v411 + v28) {\n        // 0x401c23\n        while (true) {\n          lab_0x401c50:\n            // 0x401c50\n            v308 = v306;\n            v309 = v305;\n            v310 = v304;\n            v311 = v302;\n            int64_t v312 = v301; // 0x401c50\n            v313 = *(int64_t *)v312;\n            char * str2 = (char *)v313; // 0x401c5c\n            uint32_t v314; // 0x401c2e\n            if ((char)v314 == 0) {\n                // 0x40218d\n                v315 = v303;\n                int64_t v316; // bp-120, 0x401940\n                int64_t v317 = function_402af0(v313, &v316, &v220); // 0x40219f\n                v296 = 0;\n                v294 = v315;\n                v292 = v310;\n                v290 = v309;\n                v288 = v308;\n                if ((char)v317 != 0) {\n                    // 0x4022b8\n                    if (strchr(str2, 92) == NULL) {\n                        // 0x4025b4\n                        if (strchr(str2, 10) != NULL) {\n                            goto lab_0x4022d0;\n                        } else {\n                            // 0x4025cc\n                            v318 = 0;\n                            if ((char)v319 == 0) {\n                                uint64_t v320 = g39; // 0x402365\n                                v321 = 0;\n                                v322 = 0;\n                                v323 = v315;\n                                if (v320 >= 2) {\n                                    goto lab_0x40230c;\n                                } else {\n                                    goto lab_0x402371;\n                                }\n                            } else {\n                                goto lab_0x4025d9;\n                            }\n                        }\n                    } else {\n                        goto lab_0x4022d0;\n                    }\n                } else {\n                    goto lab_0x4021b1;\n                }\n            } else {\n                // 0x401c67\n                strcmp_rc = strcmp(str2, \"-\");\n                if (strcmp_rc != 0) {\n                    int64_t v324 = function_403ec0(v313, (int64_t *)\"r\"); // 0x402248\n                    v325 = str2;\n                    v326 = v324;\n                    v327 = v313;\n                    v328 = v324;\n                    v329 = v310;\n                    v330 = v309;\n                    v331 = v308;\n                    if (v324 != 0) {\n                        goto lab_0x401ca1;\n                    } else {\n                        goto lab_0x402259;\n                    }\n                } else {\n                    // 0x401c7d\n                    g41 = 1;\n                    struct _IO_FILE * v332 = g29; // 0x401c95\n                    v325 = dcgettext(NULL, \"standard input\", 5);\n                    v326 = (int64_t)v332;\n                    goto lab_0x401ca1;\n                }\n            }\n        }\n    }\n  lab_0x4021c5:\n    // 0x4021c5\n    if (g41 == 0 || (int32_t)function_4063e0((int64_t)g29, v31) != -1) {\n        // 0x4021d2\n        return 0;\n    }\n    char * format = dcgettext(NULL, \"standard input\", 5); // 0x40266c\n    uint32_t err_num2 = *__errno_location(); // 0x402681\n    error(1, err_num2, format);\n    v27 = (int64_t)format;\n    v24 = v25;\n    v30 = err_num2;\n    v14 = (int32_t)v409 != -1 ? v409 : 0;\n    v17 = v19;\n    v20 = v22;\n    goto lab_0x40268a;\n  lab_0x401bbf:;\n    int64_t v418 = v408;\n    int64_t v419 = v407;\n    int64_t v420 = v406;\n    int64_t v421 = v404;\n    int64_t v422 = v403;\n    v28 = v422;\n    v25 = v421;\n    v31 = v405;\n    v16 = v420;\n    v19 = v419;\n    v22 = v418;\n    if (*(char *)&g34 != 0) {\n        // 0x401bc8\n        v28 = v422;\n        v25 = v421;\n        v31 = (int64_t)\"the --strict option is meaningful only when verifying checksums\";\n        v16 = v420;\n        v19 = v419;\n        v22 = v418;\n        if ((char)v419 == 0) {\n            // 0x4026aa\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --strict option is meaningful only when verifying checksums\", 5));\n            // 0x4026bf\n            function_402c90(1);\n            // UNREACHABLE\n        }\n    }\n    goto lab_0x401bdb;\n  lab_0x40268a:;\n    int64_t v413 = v20;\n    int64_t v414 = v17;\n    int64_t v415 = v14;\n    int64_t v416 = v24;\n    int64_t v417 = v27;\n    v403 = v417;\n    v404 = v416;\n    v405 = v30;\n    v406 = v415;\n    v407 = v414;\n    v408 = v413;\n    if (g35 == 1) {\n        // 0x402697\n        v403 = v417;\n        v404 = v416;\n        v405 = (int64_t)\"the --quiet option is meaningful only when verifying checksums\";\n        v406 = v415;\n        v407 = v414;\n        v408 = v413;\n        if ((char)v414 == 0) {\n            // 0x4026aa\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --quiet option is meaningful only when verifying checksums\", 5));\n            // 0x4026bf\n            function_402c90(1);\n            // UNREACHABLE\n        }\n    }\n    goto lab_0x401bbf;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402870",
            "funcEndAddr": "40289b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402870\n    int64_t v1; // 0x402870\n    __libc_start_main(0x401940, (int32_t)a4, (char **)&v1, (void (*)())0x407ac0, (void (*)())0x407b20, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40289b",
            "funcStartAddr": "40289b",
            "funcEndAddr": "4028ba",
            "decompiledFuncCode": "int64_t function_40289b(void) {\n    // 0x40289b\n    return &g27;\n}\n"
        },
        {
            "funcName": "function_4028ba",
            "funcStartAddr": "4028ba",
            "funcEndAddr": "4028f1",
            "decompiledFuncCode": "int64_t function_4028ba(void) {\n    // 0x4028ba\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4028f1",
            "funcStartAddr": "4028f1",
            "funcEndAddr": "402948",
            "decompiledFuncCode": "int64_t function_4028f1(void) {\n    // 0x4028f1\n    if (g32 != 0) {\n        // 0x402947\n        int64_t result; // 0x4028f1\n        return result;\n    }\n    int64_t v1 = g33; // 0x402924\n    int64_t result2; // 0x402936\n    if (g33 >= ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x402936\n        result2 = function_40289b();\n        g32 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x402926\n        v1++;\n    }\n    // 0x40291a\n    g33 = v1;\n    // 0x402936\n    result2 = function_40289b();\n    g32 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402948",
            "funcStartAddr": "402948",
            "funcEndAddr": "40294d",
            "decompiledFuncCode": "int64_t function_402948(void) {\n    // 0x402948\n    return function_4028ba();\n}\n"
        },
        {
            "funcName": "function_402950",
            "funcStartAddr": "402950",
            "funcEndAddr": "4029ad",
            "decompiledFuncCode": "int64_t function_402950(int64_t a1) {\n    uint64_t v1 = g39; // 0x402959\n    int64_t v2; // 0x402950\n    if (v1 == 0) {\n        // 0x4029a0\n        return v2 & -256 | (int64_t)(*(char *)a1 == 0);\n    }\n    int16_t * v3 = *__ctype_b_loc(); // 0x40296a\n    int64_t v4 = 0; // 0x40296f\n    int64_t v5 = a1; // 0x40296f\n    unsigned char v6 = *(char *)v5; // 0x402987\n    while ((*(char *)((int64_t)v3 + 1 + 2 * (int64_t)v6) & 16) != 0) {\n        // 0x402978\n        v4 = v4 + 1 & 0xffffffff;\n        v5++;\n        v2 = v4;\n        int64_t v7 = v5; // 0x402985\n        if (v4 >= v1) {\n            // 0x4029a0\n            return v2 & -256 | (int64_t)(*(char *)v7 == 0);\n        }\n        v6 = *(char *)v5;\n    }\n    // 0x402991\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4029b0",
            "funcStartAddr": "4029b0",
            "funcEndAddr": "402a31",
            "decompiledFuncCode": "int64_t function_4029b0(int64_t result, uint64_t a2, int64_t a3) {\n    int64_t v1 = result; // 0x4029bd\n    if (a2 == 0) {\n        // 0x4029e3\n        return result;\n    }\n    int64_t v2 = 0; // 0x4029bd\n    int64_t result2; // 0x4029b0\n    int64_t v3; // 0x4029b0\n    int64_t v4; // 0x4029b0\n    while (true) {\n      lab_0x4029bf:;\n        int64_t v5 = v2;\n        char v6 = *(char *)(v5 + result); // 0x4029bf\n        result2 = 0;\n        if (v6 == 0) {\n            // break -> 0x4029e3\n            break;\n        }\n        // 0x4029c7\n        v3 = v1;\n        if (v6 != 92) {\n            // 0x4029f0\n            *(char *)v3 = v6;\n            v4 = v5;\n            goto lab_0x4029f6;\n        } else {\n            // 0x4029cc\n            result2 = 0;\n            if ((int64_t)(a2 - 1) == v5) {\n                // break -> 0x4029e3\n                break;\n            }\n            int64_t v7 = v5 + 1; // 0x4029d1\n            result2 = 0;\n            switch (*(char *)(v7 + result)) {\n                case 92: {\n                    // 0x402a28\n                    *(char *)v3 = 92;\n                    v4 = v7;\n                    goto lab_0x4029f6;\n                }\n                case 110: {\n                    // 0x402a18\n                    *(char *)v3 = 10;\n                    v4 = v7;\n                    goto lab_0x4029f6;\n                }\n                default: {\n                    return result2;\n                }\n            }\n        }\n    }\n    // 0x4029e3\n    return result2;\n  lab_0x4029f6:\n    // 0x4029f6\n    v1 = v3 + 1;\n    v2 = v4 + 1;\n    if (v2 >= a2) {\n        // 0x402a03\n        result2 = result;\n        if (v1 >= a2 + result) {\n            return result2;\n        } else {\n            // 0x402a0b\n            *(char *)v1 = 0;\n            result2 = result;\n            return result2;\n        }\n    }\n    goto lab_0x4029bf;\n}\n"
        },
        {
            "funcName": "function_402a40",
            "funcStartAddr": "402a40",
            "funcEndAddr": "402ae5",
            "decompiledFuncCode": "int64_t function_402a40(int64_t a1, int64_t a2) {\n    if ((char)a2 == 0) {\n        // 0x402ad8\n        return fputs_unlocked((char *)a1, g28);\n    }\n    char v1 = *(char *)a1; // 0x402a69\n    if (v1 == 0) {\n        // 0x402ac0\n        int64_t result; // 0x402a40\n        return result;\n    }\n    int64_t v2 = a1; // 0x402a6f\n    int64_t result2; // 0x402a40\n    uint64_t v3; // 0x402a50\n    int64_t v4; // 0x402a71\n    int64_t * v5; // 0x402a50\n    if (v1 == 10) {\n        // 0x402aa0\n        result2 = fwrite_unlocked((int64_t *)\"\\\\n\", 1, 2, g28);\n    } else {\n        if (v1 != 92) {\n            // 0x402a50\n            v4 = (int64_t)g28;\n            v5 = (int64_t *)(v4 + 40);\n            v3 = *v5;\n            if (v3 >= *(int64_t *)(v4 + 48)) {\n                // 0x402ac8\n                result2 = __overflow(g28, (int32_t)v1);\n            } else {\n                // 0x402a5a\n                *v5 = v3 + 1;\n                *(char *)v3 = v1;\n                result2 = v3;\n            }\n        } else {\n            // 0x402a84\n            result2 = fwrite_unlocked((int64_t *)\"\\\\\\\\\", 1, 2, g28);\n        }\n    }\n    // 0x402a65\n    v2++;\n    char v6 = *(char *)v2; // 0x402a69\n    while (v6 != 0) {\n        unsigned char v7 = v6;\n        if (v7 == 10) {\n            // 0x402aa0\n            result2 = fwrite_unlocked((int64_t *)\"\\\\n\", 1, 2, g28);\n        } else {\n            if (v7 != 92) {\n                // 0x402a50\n                v4 = (int64_t)g28;\n                v5 = (int64_t *)(v4 + 40);\n                v3 = *v5;\n                if (v3 >= *(int64_t *)(v4 + 48)) {\n                    // 0x402ac8\n                    result2 = __overflow(g28, (int32_t)v7);\n                } else {\n                    // 0x402a5a\n                    *v5 = v3 + 1;\n                    *(char *)v3 = v7;\n                    result2 = v3;\n                }\n            } else {\n                // 0x402a84\n                result2 = fwrite_unlocked((int64_t *)\"\\\\\\\\\", 1, 2, g28);\n            }\n        }\n        // 0x402a65\n        v2++;\n        v6 = *(char *)v2;\n    }\n    // 0x402ac0\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402af0",
            "funcStartAddr": "402af0",
            "funcEndAddr": "402c82",
            "decompiledFuncCode": "int64_t function_402af0(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    bool v3; // 0x402af0\n    int64_t v4 = v3 ? -1 : 1; // 0x402b0d\n    int64_t v5 = (int64_t)\"-\"; // 0x402af0\n    int64_t v6 = a1; // 0x402af0\n    int64_t v7 = 2; // 0x402b0d\n    unsigned char v8 = *(char *)v6; // 0x402b0d\n    char v9 = *(char *)v5; // 0x402b0d\n    char v10 = v9; // 0x402b0d\n    bool v11 = false; // 0x402b0d\n    while (v8 == v9) {\n        v7--;\n        v5 += v4;\n        v6 += v4;\n        v10 = v8;\n        v11 = true;\n        if (v7 == 0) {\n            // break -> \n            break;\n        }\n        v8 = *(char *)v6;\n        v9 = *(char *)v5;\n        v10 = v9;\n        v11 = false;\n    }\n    unsigned char v12 = v10;\n    *(char *)a3 = 0;\n    int64_t v13; // 0x402af0\n    if ((v8 >= v12 && !v11) != v8 < v12) {\n        int64_t v14 = function_403ec0(a1, (int64_t *)\"r\"); // 0x402b6b\n        if (v14 == 0) {\n            int32_t * err_num = __errno_location(); // 0x402c30\n            unsigned char result = *(char *)&g36; // 0x402c35\n            if (result != 0) {\n                // 0x402c45\n                if (*err_num == 2) {\n                    // 0x402c78\n                    *(char *)a3 = 1;\n                    // 0x402b4f\n                    return result;\n                }\n            }\n            // 0x402c4a\n            error(0, *err_num, \"%s\", (char *)function_405a00(0, 3, a1));\n            // 0x402b4f\n            return 0;\n        }\n        // 0x402b7c\n        function_403e90(v14, 2, v1);\n        int64_t v15 = function_403d50(v14, v2); // 0x402b8f\n        v13 = v14;\n        if ((int32_t)v15 == 0) {\n            int64_t result2 = 1; // 0x402ba2\n            if ((int32_t)function_4063e0(v14, v2) != 0) {\n                // 0x402ba4\n                error(0, *__errno_location(), \"%s\", (char *)function_405a00(0, 3, a1));\n                result2 = 0;\n            }\n            // 0x402b4f\n            return result2;\n        }\n    } else {\n        int64_t v16 = (int64_t)g29; // 0x402b1b\n        g41 = 1;\n        function_403e90(v16, 2, v1);\n        int64_t v17 = function_403d50(v16, v2); // 0x402b3c\n        v13 = v16;\n        if ((int32_t)v17 == 0) {\n            // 0x402b4f\n            return 1;\n        }\n    }\n    int64_t v18 = function_405a00(0, 3, a1); // 0x402bed\n    uint32_t err_num2 = *__errno_location(); // 0x402c04\n    error(0, err_num2, \"%s\", (char *)v18);\n    if (v13 != (int64_t)g29) {\n        // 0x402c1a\n        function_4063e0(v13, (int64_t)err_num2);\n    }\n    // 0x402b4f\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402c90",
            "funcStartAddr": "402c90",
            "funcEndAddr": "40305d",
            "decompiledFuncCode": "int64_t function_402c90(int32_t status) {\n    // 0x402c90\n    if (status != 0) {\n        // 0x402caa\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x402ccf\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402cd6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\nPrint or check %s (%d-bit) checksums.\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\n  -b, --binary         read in binary mode\\n\", 5), g28);\n    __printf_chk(1, dcgettext(NULL, \"  -c, --check          read %s sums from the FILEs and check them\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"      --tag            create a BSD-style checksum\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"  -t, --text           read in text mode (default)\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe following five options are useful only when verifying checksums:\\n      --ignore-missing  don't fail or report status for missing files\\n      --quiet          don't print OK for each successfully verified file\\n      --status         don't output anything, status code shows success\\n      --strict         exit non-zero for improperly formatted checksum lines\\n  -w, --warn           warn about improperly formatted checksum lines\\n\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g28);\n    __printf_chk(1, dcgettext(NULL, \"\\nThe sums are computed as described in %s.  When checking, the input\\nshould be a former output of this program.  The default mode is to print a\\nline with checksum, a space, a character indicating input mode ('*' for binary,\\n' ' for text or where binary is insignificant), and name for each FILE.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x402e3e\n    bool v2; // 0x402c90\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402ec0\n    int64_t v6 = *(int64_t *)v5; // 0x402ec4\n    int64_t v7 = 7; // 0x402eca\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"md5sum\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402ed6\n        char v11 = *(char *)v9; // 0x402ed6\n        char v12 = v11; // 0x402ed6\n        bool v13 = false; // 0x402ed6\n        while (v10 == v11) {\n            // 0x402ecc\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402ed6\n            int64_t v15 = v8 + v3; // 0x402ed6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402ee2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 7;\n    }\n    // 0x402ee2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402ff4;\n        } else {\n            // 0x402fde\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403033\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402f44;\n            } else {\n                goto lab_0x402ff4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402f44;\n        } else {\n            // 0x402f2a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403033\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402f44;\n            } else {\n                goto lab_0x402f44;\n            }\n        }\n    }\n  lab_0x402ff4:\n    // 0x402ff4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402f84\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402ccf\n    exit(status);\n    // UNREACHABLE\n  lab_0x402f44:\n    // 0x402f44\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402f84\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402ccf\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403060",
            "funcStartAddr": "403060",
            "funcEndAddr": "403068",
            "decompiledFuncCode": "int64_t function_403060(int64_t a1) {\n    // 0x403060\n    g43 = a1;\n    int64_t result; // 0x403060\n    return result;\n}\n"
        },
        {
            "funcName": "function_403070",
            "funcStartAddr": "403070",
            "funcEndAddr": "403078",
            "decompiledFuncCode": "int64_t function_403070(int64_t a1) {\n    // 0x403070\n    g42 = a1;\n    int64_t result; // 0x403070\n    return result;\n}\n"
        },
        {
            "funcName": "function_403080",
            "funcStartAddr": "403080",
            "funcEndAddr": "40311e",
            "decompiledFuncCode": "int64_t function_403080(void) {\n    // 0x403080\n    int32_t * err_num; // 0x403096\n    if ((int32_t)function_407490((int64_t)g28) == 0) {\n        goto lab_0x4030ac;\n    } else {\n        // 0x403096\n        err_num = __errno_location();\n        if (g42 == 0) {\n            goto lab_0x4030c3;\n        } else {\n            // 0x4030a7\n            if (*err_num != 32) {\n                goto lab_0x4030c3;\n            } else {\n                goto lab_0x4030ac;\n            }\n        }\n    }\n  lab_0x4030ac:;\n    int64_t result = function_407490((int64_t)g31); // 0x4030b3\n    if ((int32_t)result == 0) {\n        // 0x4030bc\n        return result;\n    }\n    // 0x4030fe\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x4030c3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4030cf\n    if (g43 == 0) {\n        // 0x403109\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4030e3\n        error(0, *err_num, \"%s: %s\", (char *)function_4059d0((int64_t)g43), v1);\n    }\n    // 0x4030fe\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403120",
            "funcStartAddr": "403120",
            "funcEndAddr": "40314b",
            "decompiledFuncCode": "int64_t function_403120(int64_t a1) {\n    // 0x403120\n    *(int64_t *)(a1 + 16) = 0;\n    *(int64_t *)a1 = -0x1032547698badcff;\n    *(int64_t *)(a1 + 8) = 0x1032547698badcfe;\n    *(int32_t *)(a1 + 24) = 0;\n    return 0x1032547698badcfe;\n}\n"
        },
        {
            "funcName": "function_403150",
            "funcStartAddr": "403150",
            "funcEndAddr": "40316a",
            "decompiledFuncCode": "int64_t function_403150(int64_t a1, int64_t result) {\n    // 0x403150\n    int64_t v1; // 0x403150\n    *(int32_t *)result = (int32_t)v1;\n    *(int32_t *)(result + 4) = *(int32_t *)(a1 + 4);\n    *(int32_t *)(result + 8) = *(int32_t *)(a1 + 8);\n    *(int32_t *)(result + 12) = *(int32_t *)(a1 + 12);\n    return result;\n}\n"
        },
        {
            "funcName": "function_403170",
            "funcStartAddr": "403170",
            "funcEndAddr": "4038df",
            "decompiledFuncCode": "int64_t function_403170(uint64_t a1, uint64_t a2, int64_t result) {\n    int32_t * v1 = (int32_t *)(result + 4); // 0x403187\n    int32_t v2 = *v1; // 0x403187\n    uint64_t v3 = (a2 & -4) + a1; // 0x40318b\n    int64_t v4; // 0x403170\n    int32_t v5 = v4;\n    int32_t * v6 = (int32_t *)(result + 8); // 0x403191\n    int32_t v7 = *v6; // 0x403191\n    int32_t * v8 = (int32_t *)(result + 12); // 0x403199\n    int32_t v9 = *v8; // 0x403199\n    uint32_t v10 = (int32_t)a2; // 0x4031a1\n    int32_t * v11 = (int32_t *)(result + 16); // 0x4031a9\n    uint32_t v12 = *v11 + v10; // 0x4031a9\n    int32_t * v13 = (int32_t *)(result + 20); // 0x4031b3\n    *v11 = v12;\n    *v13 = *v13 + (int32_t)(a2 / 0x100000000) + (int32_t)(v12 < v10);\n    int32_t v14 = v5; // 0x4031c6\n    int64_t v15 = a1; // 0x4031c6\n    int32_t v16 = v5; // 0x4031c6\n    int32_t v17 = v9; // 0x4031c6\n    int32_t v18 = v7; // 0x4031c6\n    int32_t v19 = v2; // 0x4031c6\n    if (v3 > a1) {\n        int32_t v20 = v7;\n        int32_t v21 = v2;\n        int32_t v22 = v9;\n        int32_t v23 = *(int32_t *)v15; // 0x4031d0\n        int32_t v24 = *(int32_t *)(v15 + 4); // 0x4031db\n        int32_t v25 = *(int32_t *)(v15 + 12); // 0x4031de\n        int32_t v26 = *(int32_t *)(v15 + 20); // 0x4031e2\n        int32_t v27 = *(int32_t *)(v15 + 24); // 0x4031fe\n        int32_t v28 = *(int32_t *)(v15 + 28); // 0x403201\n        int32_t v29 = *(int32_t *)(v15 + 36); // 0x40320d\n        int32_t v30 = *(int32_t *)(v15 + 44); // 0x403220\n        uint32_t v31 = v14 - 0x28955b88 + v23 + ((v20 ^ v22) & v21 ^ v22); // 0x403224\n        int32_t v32 = (v31 / 0x2000000 | 128 * v31) + v21; // 0x403239\n        uint32_t v33 = v22 - 0x173848aa + v24 + (v32 & (v20 ^ v21) ^ v20); // 0x403247\n        int32_t v34 = *(int32_t *)(v15 + 8); // 0x403249\n        int32_t v35 = (v33 / 0x100000 | 0x1000 * v33) + v32; // 0x40324f\n        uint32_t v36 = v20 + 0x242070db + v34 + (v35 & (v32 ^ v21) ^ v21); // 0x40326b\n        int32_t v37 = *(int32_t *)(v15 + 16); // 0x403270\n        int32_t v38 = (v36 / 0x8000 | 0x20000 * v36) + v35; // 0x403277\n        uint32_t v39 = v21 - 0x3e423112 + v25 + (v38 & (v35 ^ v32) ^ v32); // 0x403282\n        int32_t v40 = *(int32_t *)(v15 + 60); // 0x40328e\n        int32_t v41 = (v39 / 1024 | 0x400000 * v39) + v38; // 0x403297\n        uint32_t v42 = v32 - 0xa83f051 + v37 + (v41 & (v38 ^ v35) ^ v35); // 0x40329d\n        int32_t v43 = (v42 / 0x2000000 | 128 * v42) + v41; // 0x4032b6\n        uint32_t v44 = v26 + 0x4787c62a + v35 + (v43 & (v41 ^ v38) ^ v38); // 0x4032bc\n        int32_t v45 = (v44 / 0x100000 | 0x1000 * v44) + v43; // 0x4032cc\n        uint32_t v46 = v27 - 0x57cfb9ed + v38 + (v45 & (v43 ^ v41) ^ v41); // 0x4032d8\n        int32_t v47 = *(int32_t *)(v15 + 32); // 0x4032e4\n        int32_t v48 = (v46 / 0x8000 | 0x20000 * v46) + v45; // 0x4032ea\n        uint32_t v49 = v28 - 0x2b96aff + v41 + (v48 & (v45 ^ v43) ^ v43); // 0x4032f4\n        int32_t v50 = *(int32_t *)(v15 + 48); // 0x4032ff\n        int32_t v51 = (v49 / 1024 | 0x400000 * v49) + v48; // 0x403307\n        uint32_t v52 = v47 + 0x698098d8 + v43 + (v51 & (v48 ^ v45) ^ v45); // 0x40330d\n        int32_t v53 = *(int32_t *)(v15 + 56); // 0x403319\n        int32_t v54 = (v52 / 0x2000000 | 128 * v52) + v51; // 0x403322\n        uint32_t v55 = v29 - 0x74bb0851 + v45 + (v54 & (v51 ^ v48) ^ v48); // 0x403328\n        int32_t v56 = *(int32_t *)(v15 + 40); // 0x40332a\n        int32_t v57 = (v55 / 0x100000 | 0x1000 * v55) + v54; // 0x40333d\n        uint32_t v58 = v56 - 0xa44f + v48 + (v57 & (v54 ^ v51) ^ v51); // 0x403345\n        int32_t v59 = *(int32_t *)(v15 + 52); // 0x403351\n        v15 += 64;\n        int32_t v60 = (v58 / 0x8000 | 0x20000 * v58) + v57; // 0x40335e\n        uint32_t v61 = v30 - 0x76a32842 + v51 + (v60 & (v57 ^ v54) ^ v54); // 0x403364\n        int32_t v62 = (v61 / 1024 | 0x400000 * v61) + v60; // 0x403374\n        uint32_t v63 = v50 + 0x6b901122 + v54 + (v62 & (v60 ^ v57) ^ v57); // 0x40337a\n        int32_t v64 = (v63 / 0x2000000 | 128 * v63) + v62; // 0x40338b\n        uint32_t v65 = v59 - 0x2678e6d + v57 + (v64 & (v62 ^ v60) ^ v60); // 0x403391\n        int32_t v66 = (v65 / 0x100000 | 0x1000 * v65) + v64; // 0x4033a2\n        uint32_t v67 = v53 - 0x5986bc72 + v60 + (v66 & (v64 ^ v62) ^ v62); // 0x4033a8\n        int32_t v68 = (v67 / 0x8000 | 0x20000 * v67) + v66; // 0x4033b9\n        uint32_t v69 = v40 + 0x49b40821 + v62 + (v68 & (v66 ^ v64) ^ v64); // 0x4033bf\n        int32_t v70 = (v69 / 1024 | 0x400000 * v69) + v68; // 0x4033c8\n        uint32_t v71 = v24 - 0x9e1da9e + v64 + ((v70 ^ v68) & v66 ^ v68); // 0x4033d9\n        int32_t v72 = (v71 / 0x8000000 | 32 * v71) + v70; // 0x4033e8\n        uint32_t v73 = v27 - 0x3fbf4cc0 + v66 + ((v72 ^ v70) & v68 ^ v70); // 0x4033f0\n        int32_t v74 = (v73 / 0x800000 | 512 * v73) + v72; // 0x4033f9\n        uint32_t v75 = v30 + 0x265e5a51 + v68 + ((v74 ^ v72) & v70 ^ v72); // 0x40340a\n        int32_t v76 = (v75 / 0x40000 | 0x4000 * v75) + v74; // 0x403419\n        uint32_t v77 = v23 - 0x16493856 + v70 + ((v76 ^ v74) & v72 ^ v74); // 0x403421\n        int32_t v78 = (v77 / 0x1000 | 0x100000 * v77) + v76; // 0x40342a\n        uint32_t v79 = v26 - 0x29d0efa3 + v72 + ((v78 ^ v76) & v74 ^ v76); // 0x40343b\n        int32_t v80 = (v79 / 0x8000000 | 32 * v79) + v78; // 0x403444\n        uint32_t v81 = v56 + 0x2441453 + v74 + ((v80 ^ v78) & v76 ^ v78); // 0x403455\n        int32_t v82 = (v81 / 0x800000 | 512 * v81) + v80; // 0x403464\n        uint32_t v83 = v40 - 0x275e197f + v76 + ((v82 ^ v80) & v78 ^ v80); // 0x40346c\n        int32_t v84 = (v83 / 0x40000 | 0x4000 * v83) + v82; // 0x40347a\n        uint32_t v85 = v37 - 0x182c0438 + v78 + ((v84 ^ v82) & v80 ^ v82); // 0x40348b\n        int32_t v86 = (v85 / 0x1000 | 0x100000 * v85) + v84; // 0x40349f\n        uint32_t v87 = v29 + 0x21e1cde6 + v80 + ((v86 ^ v84) & v82 ^ v84); // 0x4034a7\n        int32_t v88 = (v87 / 0x8000000 | 32 * v87) + v86; // 0x4034b6\n        uint32_t v89 = v53 - 0x3cc8f82a + v82 + ((v88 ^ v86) & v84 ^ v86); // 0x4034be\n        int32_t v90 = (v89 / 0x800000 | 512 * v89) + v88; // 0x4034c7\n        uint32_t v91 = v25 - 0xb2af279 + v84 + ((v90 ^ v88) & v86 ^ v88); // 0x4034e3\n        int32_t v92 = (v91 / 0x40000 | 0x4000 * v91) + v90; // 0x4034e8\n        uint32_t v93 = v47 + 0x455a14ed + v86 + ((v92 ^ v90) & v88 ^ v90); // 0x4034f4\n        int32_t v94 = (v93 / 0x1000 | 0x100000 * v93) + v92; // 0x403503\n        uint32_t v95 = v59 - 0x561c16fb + v88 + ((v94 ^ v92) & v90 ^ v92); // 0x403518\n        int32_t v96 = (v95 / 0x8000000 | 32 * v95) + v94; // 0x403521\n        uint32_t v97 = v34 - 0x3105c08 + v90 + ((v96 ^ v94) & v92 ^ v94); // 0x40353a\n        int32_t v98 = (v97 / 0x800000 | 512 * v97) + v96; // 0x403541\n        uint32_t v99 = v28 + 0x676f02d9 + v92 + ((v98 ^ v96) & v94 ^ v96); // 0x403549\n        int32_t v100 = (v99 / 0x40000 | 0x4000 * v99) + v98; // 0x403550\n        int32_t v101 = v100 ^ v98; // 0x403552\n        uint32_t v102 = v50 - 0x72d5b376 + v94 + (v101 & v96 ^ v98); // 0x403564\n        int32_t v103 = (v102 / 0x1000 | 0x100000 * v102) + v100; // 0x403573\n        uint32_t v104 = v26 - 0x5c6be + v96 + (v103 ^ v101); // 0x403577\n        int32_t v105 = (v104 / 0x10000000 | 16 * v104) + v103; // 0x403589\n        int32_t v106 = v105 ^ v103;\n        uint32_t v107 = v47 - 0x788e097f + v98 + (v106 ^ v100); // 0x40358f\n        int32_t v108 = (v107 / 0x200000 | 2048 * v107) + v105; // 0x4035a1\n        uint32_t v109 = v30 + 0x6d9d6122 + v100 + (v108 ^ v106); // 0x4035af\n        int32_t v110 = (v109 / 0x10000 | 0x10000 * v109) + v108; // 0x4035b8\n        int32_t v111 = v110 ^ v108;\n        uint32_t v112 = v53 - 0x21ac7f4 + v103 + (v111 ^ v105); // 0x4035bf\n        int32_t v113 = (v112 / 512 | 0x800000 * v112) + v110; // 0x4035d1\n        uint32_t v114 = v24 - 0x5b4115bc + v105 + (v111 ^ v113); // 0x4035e2\n        int32_t v115 = (v114 / 0x10000000 | 16 * v114) + v113; // 0x4035eb\n        uint32_t v116 = v37 + 0x4bdecfa9 + v108 + (v113 ^ v110 ^ v115); // 0x4035f9\n        int32_t v117 = (v116 / 0x200000 | 2048 * v116) + v115; // 0x403602\n        uint32_t v118 = v28 - 0x944b4a0 + v110 + (v115 ^ v113 ^ v117); // 0x403606\n        int32_t v119 = (v118 / 0x10000 | 0x10000 * v118) + v117; // 0x403618\n        uint32_t v120 = v56 - 0x41404390 + v113 + (v117 ^ v115 ^ v119); // 0x40361e\n        int32_t v121 = (v120 / 512 | 0x800000 * v120) + v119; // 0x403637\n        uint32_t v122 = v59 + 0x289b7ec6 + v115 + (v119 ^ v117 ^ v121); // 0x40363e\n        int32_t v123 = (v122 / 0x10000000 | 16 * v122) + v121; // 0x403647\n        uint32_t v124 = v23 - 0x155ed806 + v117 + (v121 ^ v119 ^ v123); // 0x40364e\n        int32_t v125 = (v124 / 0x200000 | 2048 * v124) + v123; // 0x403657\n        uint32_t v126 = v25 - 0x2b10cf7b + v119 + (v123 ^ v121 ^ v125); // 0x403665\n        int32_t v127 = (v126 / 0x10000 | 0x10000 * v126) + v125; // 0x403677\n        uint32_t v128 = v27 + 0x4881d05 + v121 + (v125 ^ v123 ^ v127); // 0x40367d\n        int32_t v129 = (v128 / 512 | 0x800000 * v128) + v127; // 0x40368f\n        uint32_t v130 = v29 - 0x262b2fc7 + v123 + (v127 ^ v125 ^ v129); // 0x40369f\n        int32_t v131 = (v130 / 0x10000000 | 16 * v130) + v129; // 0x4036a6\n        uint32_t v132 = v50 - 0x1924661b + v125 + (v129 ^ v127 ^ v131); // 0x4036af\n        int32_t v133 = (v132 / 0x200000 | 2048 * v132) + v131; // 0x4036c4\n        uint32_t v134 = v40 + 0x1fa27cf8 + v127 + (v131 ^ v129 ^ v133); // 0x4036c8\n        int32_t v135 = (v134 / 0x10000 | 0x10000 * v134) + v133; // 0x4036da\n        uint32_t v136 = v34 - 0x3b53a99b + v129 + (v133 ^ v131 ^ v135); // 0x4036e0\n        int32_t v137 = (v136 / 512 | 0x800000 * v136) + v135; // 0x4036f6\n        uint32_t v138 = v23 - 0xbd6ddbc + v131 + ((v137 | -1 - v133) ^ v135); // 0x4036fc\n        int32_t v139 = (v138 / 0x4000000 | 64 * v138) + v137; // 0x403717\n        uint32_t v140 = v28 + 0x432aff97 + v133 + ((v139 | -1 - v135) ^ v137); // 0x403726\n        int32_t v141 = (v140 / 0x400000 | 1024 * v140) + v139; // 0x40372f\n        uint32_t v142 = v53 - 0x546bdc59 + v135 + ((v141 | -1 - v137) ^ v139); // 0x40373b\n        int32_t v143 = (v142 / 0x20000 | 0x8000 * v142) + v141; // 0x403750\n        uint32_t v144 = v26 - 0x36c5fc7 + v137 + ((v143 | -1 - v139) ^ v141); // 0x403756\n        int32_t v145 = (v144 / 2048 | 0x200000 * v144) + v143; // 0x403769\n        uint32_t v146 = v50 + 0x655b59c3 + v139 + ((v145 | -1 - v141) ^ v143); // 0x40376f\n        int32_t v147 = (v146 / 0x4000000 | 64 * v146) + v145; // 0x40377f\n        uint32_t v148 = v25 - 0x70f3336e + v141 + ((v147 | -1 - v143) ^ v145); // 0x40378b\n        int32_t v149 = (v148 / 0x400000 | 1024 * v148) + v147; // 0x40379d\n        uint32_t v150 = v56 - 0x100b83 + v143 + ((v149 | -1 - v145) ^ v147); // 0x4037a5\n        int32_t v151 = (v150 / 0x20000 | 0x8000 * v150) + v149; // 0x4037bb\n        uint32_t v152 = v24 - 0x7a7ba22f + v145 + ((v151 | -1 - v147) ^ v149); // 0x4037c3\n        int32_t v153 = (v152 / 2048 | 0x200000 * v152) + v151; // 0x4037db\n        uint32_t v154 = v47 + 0x6fa87e4f + v147 + ((v153 | -1 - v149) ^ v151); // 0x4037e1\n        int32_t v155 = (v154 / 0x4000000 | 64 * v154) + v153; // 0x4037f5\n        uint32_t v156 = v40 - 0x1d31920 + v149 + ((v155 | -1 - v151) ^ v153); // 0x4037fb\n        int32_t v157 = (v156 / 0x400000 | 1024 * v156) + v155; // 0x40381c\n        uint32_t v158 = v27 - 0x5cfebcec + v151 + ((v157 | -1 - v153) ^ v155); // 0x403830\n        int32_t v159 = (v158 / 0x20000 | 0x8000 * v158) + v157; // 0x40383b\n        uint32_t v160 = v59 + 0x4e0811a1 + v153 + ((v159 | -1 - v155) ^ v157); // 0x403849\n        int32_t v161 = (v160 / 2048 | 0x200000 * v160) + v159; // 0x403851\n        uint32_t v162 = v37 - 0x8ac817e + v155 + ((v161 | -1 - v157) ^ v159); // 0x403857\n        int32_t v163 = (v162 / 0x4000000 | 64 * v162) + v161; // 0x403860\n        uint32_t v164 = v30 - 0x42c50dcb + v157 + ((v163 | -1 - v159) ^ v161); // 0x403866\n        int32_t v165 = (v164 / 0x400000 | 1024 * v164) + v163; // 0x403878\n        uint32_t v166 = v34 + 0x2ad7d2bb + v159 + ((v165 | -1 - v161) ^ v163); // 0x403888\n        int32_t v167 = (v166 / 0x20000 | 0x8000 * v166) + v165; // 0x403891\n        uint32_t v168 = v29 - 0x14792c6f + v161 + ((v167 | -1 - v163) ^ v165); // 0x403897\n        v14 += v163;\n        int32_t v169 = v167 + v20; // 0x4038a2\n        int32_t v170 = v167 + v21 + (v168 / 2048 | 0x200000 * v168); // 0x4038a5\n        int32_t v171 = v165 + v22; // 0x4038a8\n        v16 = v14;\n        v17 = v171;\n        v18 = v169;\n        v19 = v170;\n        while (v3 > v15) {\n            // 0x4031d0\n            v20 = v169;\n            v21 = v170;\n            v22 = v171;\n            v23 = *(int32_t *)v15;\n            v24 = *(int32_t *)(v15 + 4);\n            v25 = *(int32_t *)(v15 + 12);\n            v26 = *(int32_t *)(v15 + 20);\n            v27 = *(int32_t *)(v15 + 24);\n            v28 = *(int32_t *)(v15 + 28);\n            v29 = *(int32_t *)(v15 + 36);\n            v30 = *(int32_t *)(v15 + 44);\n            v31 = v14 - 0x28955b88 + v23 + ((v20 ^ v22) & v21 ^ v22);\n            v32 = (v31 / 0x2000000 | 128 * v31) + v21;\n            v33 = v22 - 0x173848aa + v24 + (v32 & (v20 ^ v21) ^ v20);\n            v34 = *(int32_t *)(v15 + 8);\n            v35 = (v33 / 0x100000 | 0x1000 * v33) + v32;\n            v36 = v20 + 0x242070db + v34 + (v35 & (v32 ^ v21) ^ v21);\n            v37 = *(int32_t *)(v15 + 16);\n            v38 = (v36 / 0x8000 | 0x20000 * v36) + v35;\n            v39 = v21 - 0x3e423112 + v25 + (v38 & (v35 ^ v32) ^ v32);\n            v40 = *(int32_t *)(v15 + 60);\n            v41 = (v39 / 1024 | 0x400000 * v39) + v38;\n            v42 = v32 - 0xa83f051 + v37 + (v41 & (v38 ^ v35) ^ v35);\n            v43 = (v42 / 0x2000000 | 128 * v42) + v41;\n            v44 = v26 + 0x4787c62a + v35 + (v43 & (v41 ^ v38) ^ v38);\n            v45 = (v44 / 0x100000 | 0x1000 * v44) + v43;\n            v46 = v27 - 0x57cfb9ed + v38 + (v45 & (v43 ^ v41) ^ v41);\n            v47 = *(int32_t *)(v15 + 32);\n            v48 = (v46 / 0x8000 | 0x20000 * v46) + v45;\n            v49 = v28 - 0x2b96aff + v41 + (v48 & (v45 ^ v43) ^ v43);\n            v50 = *(int32_t *)(v15 + 48);\n            v51 = (v49 / 1024 | 0x400000 * v49) + v48;\n            v52 = v47 + 0x698098d8 + v43 + (v51 & (v48 ^ v45) ^ v45);\n            v53 = *(int32_t *)(v15 + 56);\n            v54 = (v52 / 0x2000000 | 128 * v52) + v51;\n            v55 = v29 - 0x74bb0851 + v45 + (v54 & (v51 ^ v48) ^ v48);\n            v56 = *(int32_t *)(v15 + 40);\n            v57 = (v55 / 0x100000 | 0x1000 * v55) + v54;\n            v58 = v56 - 0xa44f + v48 + (v57 & (v54 ^ v51) ^ v51);\n            v59 = *(int32_t *)(v15 + 52);\n            v15 += 64;\n            v60 = (v58 / 0x8000 | 0x20000 * v58) + v57;\n            v61 = v30 - 0x76a32842 + v51 + (v60 & (v57 ^ v54) ^ v54);\n            v62 = (v61 / 1024 | 0x400000 * v61) + v60;\n            v63 = v50 + 0x6b901122 + v54 + (v62 & (v60 ^ v57) ^ v57);\n            v64 = (v63 / 0x2000000 | 128 * v63) + v62;\n            v65 = v59 - 0x2678e6d + v57 + (v64 & (v62 ^ v60) ^ v60);\n            v66 = (v65 / 0x100000 | 0x1000 * v65) + v64;\n            v67 = v53 - 0x5986bc72 + v60 + (v66 & (v64 ^ v62) ^ v62);\n            v68 = (v67 / 0x8000 | 0x20000 * v67) + v66;\n            v69 = v40 + 0x49b40821 + v62 + (v68 & (v66 ^ v64) ^ v64);\n            v70 = (v69 / 1024 | 0x400000 * v69) + v68;\n            v71 = v24 - 0x9e1da9e + v64 + ((v70 ^ v68) & v66 ^ v68);\n            v72 = (v71 / 0x8000000 | 32 * v71) + v70;\n            v73 = v27 - 0x3fbf4cc0 + v66 + ((v72 ^ v70) & v68 ^ v70);\n            v74 = (v73 / 0x800000 | 512 * v73) + v72;\n            v75 = v30 + 0x265e5a51 + v68 + ((v74 ^ v72) & v70 ^ v72);\n            v76 = (v75 / 0x40000 | 0x4000 * v75) + v74;\n            v77 = v23 - 0x16493856 + v70 + ((v76 ^ v74) & v72 ^ v74);\n            v78 = (v77 / 0x1000 | 0x100000 * v77) + v76;\n            v79 = v26 - 0x29d0efa3 + v72 + ((v78 ^ v76) & v74 ^ v76);\n            v80 = (v79 / 0x8000000 | 32 * v79) + v78;\n            v81 = v56 + 0x2441453 + v74 + ((v80 ^ v78) & v76 ^ v78);\n            v82 = (v81 / 0x800000 | 512 * v81) + v80;\n            v83 = v40 - 0x275e197f + v76 + ((v82 ^ v80) & v78 ^ v80);\n            v84 = (v83 / 0x40000 | 0x4000 * v83) + v82;\n            v85 = v37 - 0x182c0438 + v78 + ((v84 ^ v82) & v80 ^ v82);\n            v86 = (v85 / 0x1000 | 0x100000 * v85) + v84;\n            v87 = v29 + 0x21e1cde6 + v80 + ((v86 ^ v84) & v82 ^ v84);\n            v88 = (v87 / 0x8000000 | 32 * v87) + v86;\n            v89 = v53 - 0x3cc8f82a + v82 + ((v88 ^ v86) & v84 ^ v86);\n            v90 = (v89 / 0x800000 | 512 * v89) + v88;\n            v91 = v25 - 0xb2af279 + v84 + ((v90 ^ v88) & v86 ^ v88);\n            v92 = (v91 / 0x40000 | 0x4000 * v91) + v90;\n            v93 = v47 + 0x455a14ed + v86 + ((v92 ^ v90) & v88 ^ v90);\n            v94 = (v93 / 0x1000 | 0x100000 * v93) + v92;\n            v95 = v59 - 0x561c16fb + v88 + ((v94 ^ v92) & v90 ^ v92);\n            v96 = (v95 / 0x8000000 | 32 * v95) + v94;\n            v97 = v34 - 0x3105c08 + v90 + ((v96 ^ v94) & v92 ^ v94);\n            v98 = (v97 / 0x800000 | 512 * v97) + v96;\n            v99 = v28 + 0x676f02d9 + v92 + ((v98 ^ v96) & v94 ^ v96);\n            v100 = (v99 / 0x40000 | 0x4000 * v99) + v98;\n            v101 = v100 ^ v98;\n            v102 = v50 - 0x72d5b376 + v94 + (v101 & v96 ^ v98);\n            v103 = (v102 / 0x1000 | 0x100000 * v102) + v100;\n            v104 = v26 - 0x5c6be + v96 + (v103 ^ v101);\n            v105 = (v104 / 0x10000000 | 16 * v104) + v103;\n            v106 = v105 ^ v103;\n            v107 = v47 - 0x788e097f + v98 + (v106 ^ v100);\n            v108 = (v107 / 0x200000 | 2048 * v107) + v105;\n            v109 = v30 + 0x6d9d6122 + v100 + (v108 ^ v106);\n            v110 = (v109 / 0x10000 | 0x10000 * v109) + v108;\n            v111 = v110 ^ v108;\n            v112 = v53 - 0x21ac7f4 + v103 + (v111 ^ v105);\n            v113 = (v112 / 512 | 0x800000 * v112) + v110;\n            v114 = v24 - 0x5b4115bc + v105 + (v111 ^ v113);\n            v115 = (v114 / 0x10000000 | 16 * v114) + v113;\n            v116 = v37 + 0x4bdecfa9 + v108 + (v113 ^ v110 ^ v115);\n            v117 = (v116 / 0x200000 | 2048 * v116) + v115;\n            v118 = v28 - 0x944b4a0 + v110 + (v115 ^ v113 ^ v117);\n            v119 = (v118 / 0x10000 | 0x10000 * v118) + v117;\n            v120 = v56 - 0x41404390 + v113 + (v117 ^ v115 ^ v119);\n            v121 = (v120 / 512 | 0x800000 * v120) + v119;\n            v122 = v59 + 0x289b7ec6 + v115 + (v119 ^ v117 ^ v121);\n            v123 = (v122 / 0x10000000 | 16 * v122) + v121;\n            v124 = v23 - 0x155ed806 + v117 + (v121 ^ v119 ^ v123);\n            v125 = (v124 / 0x200000 | 2048 * v124) + v123;\n            v126 = v25 - 0x2b10cf7b + v119 + (v123 ^ v121 ^ v125);\n            v127 = (v126 / 0x10000 | 0x10000 * v126) + v125;\n            v128 = v27 + 0x4881d05 + v121 + (v125 ^ v123 ^ v127);\n            v129 = (v128 / 512 | 0x800000 * v128) + v127;\n            v130 = v29 - 0x262b2fc7 + v123 + (v127 ^ v125 ^ v129);\n            v131 = (v130 / 0x10000000 | 16 * v130) + v129;\n            v132 = v50 - 0x1924661b + v125 + (v129 ^ v127 ^ v131);\n            v133 = (v132 / 0x200000 | 2048 * v132) + v131;\n            v134 = v40 + 0x1fa27cf8 + v127 + (v131 ^ v129 ^ v133);\n            v135 = (v134 / 0x10000 | 0x10000 * v134) + v133;\n            v136 = v34 - 0x3b53a99b + v129 + (v133 ^ v131 ^ v135);\n            v137 = (v136 / 512 | 0x800000 * v136) + v135;\n            v138 = v23 - 0xbd6ddbc + v131 + ((v137 | -1 - v133) ^ v135);\n            v139 = (v138 / 0x4000000 | 64 * v138) + v137;\n            v140 = v28 + 0x432aff97 + v133 + ((v139 | -1 - v135) ^ v137);\n            v141 = (v140 / 0x400000 | 1024 * v140) + v139;\n            v142 = v53 - 0x546bdc59 + v135 + ((v141 | -1 - v137) ^ v139);\n            v143 = (v142 / 0x20000 | 0x8000 * v142) + v141;\n            v144 = v26 - 0x36c5fc7 + v137 + ((v143 | -1 - v139) ^ v141);\n            v145 = (v144 / 2048 | 0x200000 * v144) + v143;\n            v146 = v50 + 0x655b59c3 + v139 + ((v145 | -1 - v141) ^ v143);\n            v147 = (v146 / 0x4000000 | 64 * v146) + v145;\n            v148 = v25 - 0x70f3336e + v141 + ((v147 | -1 - v143) ^ v145);\n            v149 = (v148 / 0x400000 | 1024 * v148) + v147;\n            v150 = v56 - 0x100b83 + v143 + ((v149 | -1 - v145) ^ v147);\n            v151 = (v150 / 0x20000 | 0x8000 * v150) + v149;\n            v152 = v24 - 0x7a7ba22f + v145 + ((v151 | -1 - v147) ^ v149);\n            v153 = (v152 / 2048 | 0x200000 * v152) + v151;\n            v154 = v47 + 0x6fa87e4f + v147 + ((v153 | -1 - v149) ^ v151);\n            v155 = (v154 / 0x4000000 | 64 * v154) + v153;\n            v156 = v40 - 0x1d31920 + v149 + ((v155 | -1 - v151) ^ v153);\n            v157 = (v156 / 0x400000 | 1024 * v156) + v155;\n            v158 = v27 - 0x5cfebcec + v151 + ((v157 | -1 - v153) ^ v155);\n            v159 = (v158 / 0x20000 | 0x8000 * v158) + v157;\n            v160 = v59 + 0x4e0811a1 + v153 + ((v159 | -1 - v155) ^ v157);\n            v161 = (v160 / 2048 | 0x200000 * v160) + v159;\n            v162 = v37 - 0x8ac817e + v155 + ((v161 | -1 - v157) ^ v159);\n            v163 = (v162 / 0x4000000 | 64 * v162) + v161;\n            v164 = v30 - 0x42c50dcb + v157 + ((v163 | -1 - v159) ^ v161);\n            v165 = (v164 / 0x400000 | 1024 * v164) + v163;\n            v166 = v34 + 0x2ad7d2bb + v159 + ((v165 | -1 - v161) ^ v163);\n            v167 = (v166 / 0x20000 | 0x8000 * v166) + v165;\n            v168 = v29 - 0x14792c6f + v161 + ((v167 | -1 - v163) ^ v165);\n            v14 += v163;\n            v169 = v167 + v20;\n            v170 = v167 + v21 + (v168 / 2048 | 0x200000 * v168);\n            v171 = v165 + v22;\n            v16 = v14;\n            v17 = v171;\n            v18 = v169;\n            v19 = v170;\n        }\n    }\n    // 0x4038ba\n    *(int32_t *)result = v16;\n    *v1 = v19;\n    *v6 = v18;\n    *v8 = v17;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4038e0",
            "funcStartAddr": "4038e0",
            "funcEndAddr": "4039e4",
            "decompiledFuncCode": "int64_t function_4038e0(int64_t * a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = (int64_t)a1;\n    uint32_t v2 = *(int32_t *)(v1 + 24); // 0x4038e5\n    int32_t * v3 = (int32_t *)(v1 + 20); // 0x4038eb\n    int32_t v4 = *v3; // 0x4038eb\n    int32_t * v5 = (int32_t *)(v1 + 16); // 0x40391a\n    uint32_t v6 = *v5 + v2; // 0x40391a\n    *v5 = v6;\n    int32_t v7 = v4; // 0x403920\n    if (v6 < v2) {\n        // 0x403922\n        v7 = v4 + 1;\n        *v3 = v7;\n    }\n    int64_t v8 = v2; // 0x4038e5\n    int64_t v9 = v2 < 56 ? 64 : 128; // 0x4038fa\n    int64_t v10 = v1 + 28; // 0x403936\n    *(int32_t *)((v2 < 56 ? 56 : 120) + v10) = 8 * v6;\n    int64_t v11 = v9 - v8; // 0x403944\n    *(int32_t *)((v2 < 56 ? 60 : 124) + v10) = 8 * v7 | v6 / 0x20000000;\n    int64_t v12 = v10 + v8; // 0x40394b\n    uint64_t v13 = v11 - 8; // 0x40394f\n    if (v13 >= 8) {\n        int64_t v14 = v12 + 8 & -8; // 0x403990\n        *(int64_t *)v12 = 128;\n        *(int64_t *)(v13 + v12 - 8) = *(int64_t *)(v11 + 0x408870);\n        int64_t v15 = v12 - v14; // 0x4039a3\n        __asm_rep_movsq_memcpy((char *)v14, (char *)((int64_t)\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" - v15), (v15 + v13) / 8);\n        // 0x4039b3\n        function_403170(v10, v9, v1);\n        return function_403150(v1, a2);\n    }\n    if ((v13 & 4) != 0) {\n        // 0x4039d0\n        *(int32_t *)v12 = 128;\n        *(int32_t *)(v13 + v12 - 4) = *(int32_t *)(v11 + 0x408874);\n        // 0x4039b3\n        function_403170(v10, v9, v1);\n        return function_403150(v1, a2);\n    }\n    if (v13 == 0) {\n        // 0x4039b3\n        function_403170(v10, v9, v1);\n        return function_403150(v1, a2);\n    }\n    // 0x403963\n    *(char *)v12 = -128;\n    if ((v13 & 2) != 0) {\n        // 0x403971\n        *(int16_t *)(v13 + v12 - 2) = *(int16_t *)(v11 + 0x408876);\n    }\n    // 0x4039b3\n    function_403170(v10, v9, v1);\n    return function_403150(v1, a2);\n}\n"
        },
        {
            "funcName": "function_4039f0",
            "funcStartAddr": "4039f0",
            "funcEndAddr": "403cee",
            "decompiledFuncCode": "int64_t function_4039f0(int64_t a1, uint64_t a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = v1 + 24; // 0x403a07\n    int32_t * v3 = (int32_t *)v2; // 0x403a07\n    uint32_t v4 = *v3; // 0x403a07\n    int64_t v5 = v4; // 0x403a07\n    int64_t v6 = v5; // 0x403a0c\n    int64_t v7 = a1; // 0x403a0c\n    int64_t v8 = a2; // 0x403a0c\n    if (v4 != 0) {\n        int64_t v9 = v1 + 28; // 0x403b4f\n        uint64_t v10 = 128 - v5; // 0x403b54\n        int64_t v11 = v10 > a2 ? a2 : v10; // 0x403b5e\n        int32_t v12 = v11; // 0x403b68\n        int64_t * dest_mem = memcpy((int64_t *)(v9 + v5), (int64_t *)a1, v12); // 0x403b68\n        uint32_t v13 = *v3 + v12; // 0x403b72\n        *v3 = v13;\n        v6 = (int64_t)dest_mem;\n        if (v13 >= 65) {\n            // 0x403be0\n            function_403170(v9, (int64_t)(v13 & -64), v1);\n            uint32_t v14 = *v3; // 0x403bee\n            int64_t v15 = (v11 + v5 & -64) + v9; // 0x403bfe\n            uint32_t v16 = v14 % 64; // 0x403c01\n            int64_t v17 = v16; // 0x403c01\n            *v3 = v16;\n            if (v16 >= 8) {\n                // 0x403c40\n                *(int64_t *)v9 = *(int64_t *)v15;\n                *(int64_t *)(v17 + v1 + 20) = *(int64_t *)(v15 + v17 - 8);\n                int64_t v18 = v1 + 36 & -8; // 0x403c59\n                int64_t v19 = v9 - v18; // 0x403c5d\n                int64_t v20 = v15 - v19; // 0x403c60\n                uint32_t v21 = v16 + (int32_t)v19; // 0x403c6a\n                v6 = v20;\n                if (v21 >= 8) {\n                    int64_t v22 = 0;\n                    int64_t v23 = v22 + 8; // 0x403c7c\n                    *(int64_t *)(v22 + v18) = *(int64_t *)(v22 + v20);\n                    v6 = v20;\n                    while ((v21 & -8) > (int32_t)v23) {\n                        // 0x403c7a\n                        v22 = v23 & 0xffffffff;\n                        v23 = v22 + 8;\n                        *(int64_t *)(v22 + v18) = *(int64_t *)(v22 + v20);\n                        v6 = v20;\n                    }\n                }\n            } else {\n                int64_t v24 = v14; // 0x403bee\n                if ((v24 & 4) != 0) {\n                    // 0x403c91\n                    *(int32_t *)v9 = *(int32_t *)v15;\n                    uint32_t v25 = *(int32_t *)(v15 + v17 - 4); // 0x403c98\n                    *(int32_t *)(v2 + v17) = v25;\n                    v6 = v25;\n                } else {\n                    // 0x403c13\n                    v6 = v15;\n                    if (v16 != 0) {\n                        // 0x403c1b\n                        *(char *)v9 = *(char *)v15;\n                        v6 = v15;\n                        if ((v24 & 2) != 0) {\n                            uint16_t v26 = *(int16_t *)(v15 + v17 - 2); // 0x403c2c\n                            *(int16_t *)(v17 + v1 + 26) = v26;\n                            v6 = v26;\n                        }\n                    }\n                }\n            }\n        }\n        // 0x403b7f\n        v7 = v11 + a1;\n        v8 = a2 - v11;\n    }\n    uint64_t v27 = v8;\n    int64_t result = v6; // 0x403a16\n    int64_t v28 = v7; // 0x403a16\n    int64_t v29 = v27; // 0x403a16\n    int64_t v30; // 0x4039f0\n    int64_t v31; // 0x4039f0\n    int64_t v32; // 0x4039f0\n    if (v27 < 64) {\n        goto lab_0x403b2c;\n    } else {\n        if (v7 % 4 == 0) {\n            int64_t v33 = v27 & -64; // 0x403b1d\n            result = function_403170(v7, v33, v1);\n            v28 = v33 + v7;\n            v29 = v27 % 64;\n            goto lab_0x403b2c;\n        } else {\n            int64_t v34 = v1 + 28; // 0x403a25\n            v32 = v34;\n            v30 = 64;\n            v31 = v7;\n            if (v27 != 64) {\n                int64_t v35 = (v27 - 1 & -64) + v7; // 0x403a47\n                int128_t v36 = __asm_movdqu(*(int128_t *)v7); // 0x403a50\n                int64_t v37 = v7 + 64; // 0x403a5f\n                __asm_movups(*(int128_t *)v34, v36);\n                __asm_movups(*(int128_t *)(v1 + 44), __asm_movdqu(*(int128_t *)(v7 + 16)));\n                __asm_movups(*(int128_t *)(v1 + 60), __asm_movdqu(*(int128_t *)(v7 + 32)));\n                __asm_movups(*(int128_t *)(v1 + 76), __asm_movdqu(*(int128_t *)(v7 + 48)));\n                function_403170(v34, 64, v1);\n                while (v37 != v35) {\n                    int64_t v38 = v37;\n                    v36 = __asm_movdqu(*(int128_t *)v38);\n                    v37 = v38 + 64;\n                    __asm_movups(*(int128_t *)v34, v36);\n                    __asm_movups(*(int128_t *)(v1 + 44), __asm_movdqu(*(int128_t *)(v38 + 16)));\n                    __asm_movups(*(int128_t *)(v1 + 60), __asm_movdqu(*(int128_t *)(v38 + 32)));\n                    __asm_movups(*(int128_t *)(v1 + 76), __asm_movdqu(*(int128_t *)(v38 + 48)));\n                    function_403170(v34, 64, v1);\n                }\n                // 0x403a8c\n                v32 = v34;\n                v30 = v27 - 64 - (v27 - 65 & -64);\n                v31 = v35;\n            }\n            goto lab_0x403a9b;\n        }\n    }\n  lab_0x403b2c:\n    // 0x403b2c\n    if (v29 == 0) {\n        // 0x403b35\n        return result;\n    }\n    // 0x403ce1\n    v32 = v1 + 28;\n    v30 = v29;\n    v31 = v28;\n    goto lab_0x403a9b;\n  lab_0x403a9b:;\n    int64_t v39 = (int64_t)*v3; // 0x403a9b\n    int64_t v40 = v30 & 0xffffffff; // 0x403aa0\n    int64_t v41 = v32 + v39; // 0x403aa3\n    uint32_t v42 = (int32_t)v30; // 0x403aa8\n    int64_t v43; // 0x4039f0\n    if (v42 >= 8) {\n        int64_t v44 = v41 + 8 & -8; // 0x403b9a\n        *(int64_t *)v41 = *(int64_t *)v31;\n        *(int64_t *)(v41 + v40 - 8) = *(int64_t *)(v40 + v31 - 8);\n        int64_t v45 = v41 - v44; // 0x403bae\n        int64_t v46 = v45 + v30; // 0x403bb4\n        int64_t v47 = v46 & 0xfffffff8; // 0x403bb7\n        v43 = v47;\n        if ((int32_t)v46 >= 8) {\n            int64_t v48 = 0;\n            int64_t v49 = v48 + 8; // 0x403bca\n            *(int64_t *)(v48 + v44) = *(int64_t *)(v31 - v45 + v48);\n            v43 = v47;\n            while ((int32_t)v49 < (int32_t)v47) {\n                // 0x403bc8\n                v48 = v49 & 0xffffffff;\n                v49 = v48 + 8;\n                *(int64_t *)(v48 + v44) = *(int64_t *)(v31 - v45 + v48);\n                v43 = v47;\n            }\n        }\n    } else {\n        if ((v30 & 4) != 0) {\n            // 0x403cb8\n            *(int32_t *)v41 = *(int32_t *)v31;\n            uint32_t v50 = *(int32_t *)(v40 + v31 - 4); // 0x403cc0\n            *(int32_t *)(v41 + v40 - 4) = v50;\n            v43 = v50;\n        } else {\n            // 0x403abc\n            v43 = v40;\n            if (v42 != 0) {\n                // 0x403ac1\n                *(char *)v41 = *(char *)v31;\n                v43 = v40;\n                if ((v30 & 2) != 0) {\n                    uint16_t v51 = *(int16_t *)(v40 + v31 - 2); // 0x403cd1\n                    *(int16_t *)(v41 + v40 - 2) = v51;\n                    v43 = v51;\n                }\n            }\n        }\n    }\n    uint64_t v52 = v30 + v39; // 0x403acf\n    int32_t v53; // 0x4039f0\n    int64_t result2; // 0x4039f0\n    if (v52 < 64) {\n        // 0x403acf\n        v53 = v52;\n        result2 = v43;\n    } else {\n        // 0x403ad8\n        function_403170(v32, 64, v1);\n        int32_t v54 = (int32_t)v52 - 64;\n        int64_t * dest_mem2 = memcpy((int64_t *)v32, (int64_t *)(v1 + 92), v54); // 0x403af7\n        v53 = v54;\n        result2 = (int64_t)dest_mem2;\n    }\n    // 0x403afc\n    *v3 = v53;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403cf0",
            "funcStartAddr": "403cf0",
            "funcEndAddr": "403d45",
            "decompiledFuncCode": "int64_t function_403cf0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = -0x1032547698badcff; // bp-168, 0x403d05\n    function_4039f0(a1, a2, &v1);\n    int64_t v2; // 0x403cf0\n    return function_4038e0(&v1, a3, (int64_t)&v1, v2, v2);\n}\n"
        },
        {
            "funcName": "function_403d50",
            "funcStartAddr": "403d50",
            "funcEndAddr": "403e75",
            "decompiledFuncCode": "int64_t function_403d50(int64_t a1, int64_t a2) {\n    int64_t * mem = malloc(0x8048); // 0x403d6a\n    if (mem == NULL) {\n        // 0x403e60\n        return 1;\n    }\n    int64_t v1 = (int64_t)mem; // 0x403d6a\n    int64_t v2; // 0x403d50\n    int32_t v3 = v2;\n    int64_t v4 = -0x1032547698badcff; // bp-200, 0x403d8d\n    int32_t v5 = v3 & 16;\n    int64_t v6 = &v4;\n    int32_t v7; // 0x403d50\n    int64_t v8; // 0x403ddc\n    while (true) {\n        int64_t v9 = 0;\n        int32_t v10 = fread_unlocked((int64_t *)(v9 + v1), 1, 0x8000 - (int32_t)v9, (struct _IO_FILE *)a1); // 0x403dd7\n        v8 = v9 + (int64_t)v10;\n        while (v8 != 0x8000) {\n            if (v10 == 0) {\n                // break (via goto) -> 0x403dfa\n                goto lab_0x403dfa;\n            }\n            // 0x403dc0\n            v7 = v5;\n            if (v5 != 0) {\n                goto lab_0x403dff;\n            }\n            v9 = v8;\n            v10 = fread_unlocked((int64_t *)(v9 + v1), 1, 0x8000 - (int32_t)v9, (struct _IO_FILE *)a1);\n            v8 = v9 + (int64_t)v10;\n        }\n        // 0x403de8\n        function_403170(v1, 0x8000, v6);\n    }\n  lab_0x403dfa:;\n    int32_t v11 = v3 & 32; // 0x403dfa\n    v7 = v11;\n    if (v11 != 0) {\n        // 0x403e40\n        free(mem);\n        return 1;\n    }\n  lab_0x403dff:;\n    int64_t v12 = v7; // 0x403e02\n    if (v8 != 0) {\n        // 0x403e30\n        function_4039f0(v1, v8, &v4);\n        v12 = v6;\n    }\n    // 0x403e04\n    function_4038e0(&v4, a2, v12, a1, v2);\n    free(mem);\n    return (int32_t)&g57 ^ (int32_t)&g57;\n}\n"
        },
        {
            "funcName": "function_403e80",
            "funcStartAddr": "403e80",
            "funcEndAddr": "403e85",
            "decompiledFuncCode": "int64_t function_403e80(void) {\n    // 0x403e80\n    int64_t fd; // 0x403e80\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_403e90",
            "funcStartAddr": "403e90",
            "funcEndAddr": "403eb1",
            "decompiledFuncCode": "int64_t function_403e90(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x403e90\n    if (stream == 0) {\n        // 0x403eb0\n        int64_t result; // 0x403e90\n        return result;\n    }\n    // 0x403e95\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_403ec0",
            "funcStartAddr": "403ec0",
            "funcEndAddr": "403f53",
            "decompiledFuncCode": "int64_t function_403ec0(int64_t file_path, int64_t * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, (char *)mode); // 0x403ec7\n    int64_t result = (int64_t)file; // 0x403ec7\n    if (file == NULL) {\n        // 0x403ee1\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x403ed7\n    if (v1 >= 3) {\n        // 0x403ee1\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_405ba0((int64_t)v1, v2); // 0x403efa\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x403f38\n        function_4063e0(result, v2);\n        // 0x403ee1\n        return 0;\n    }\n    // 0x403efe\n    if ((int32_t)function_4063e0(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, (char *)mode); // 0x403f10\n        if (v4 != NULL) {\n            // 0x403ee1\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x403f1d\n    close(fd);\n    // 0x403ee1\n    return 0;\n}\n"
        },
        {
            "funcName": "function_403f60",
            "funcStartAddr": "403f60",
            "funcEndAddr": "403ff9",
            "decompiledFuncCode": "int64_t function_403f60(int64_t str) {\n    // 0x403f60\n    if (str == 0) {\n        // 0x403fd9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g31);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x403f6e\n    int64_t result = (int64_t)found_char_pos; // 0x403f6e\n    if (found_char_pos == NULL) {\n        // 0x403fc9\n        g44 = str;\n        g30 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403f78\n    if (v1 - str < 7) {\n        // 0x403fc9\n        g44 = str;\n        g30 = str;\n        return result;\n    }\n    // 0x403f88\n    bool v2; // 0x403f60\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403f60\n    int64_t v5 = result - 6; // 0x403f60\n    int64_t v6 = 7; // 0x403f96\n    unsigned char v7 = *(char *)v5; // 0x403f96\n    char v8 = *(char *)v4; // 0x403f96\n    char v9 = v8; // 0x403f96\n    bool v10 = false; // 0x403f96\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403fa0\n    int64_t v13 = v1; // 0x403fa0\n    int64_t v14 = 3; // 0x403fa0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403fc9\n        g44 = str;\n        g30 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403fb2\n    char v16 = *(char *)v12; // 0x403fb2\n    char v17 = v16; // 0x403fb2\n    bool v18 = false; // 0x403fb2\n    while (v15 == v16) {\n        // 0x403fa2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x403fbc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x403fbe\n        v20 = result + 4;\n        g27 = v20;\n    }\n    // 0x403fc9\n    g44 = v20;\n    g30 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404000",
            "funcStartAddr": "404000",
            "funcEndAddr": "4040f2",
            "decompiledFuncCode": "int64_t function_404000(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x404014\n    int64_t result = (int64_t)v1; // 0x404014\n    if (result != a1) {\n        // 0x404021\n        return result;\n    }\n    int64_t v2 = function_407550(); // 0x404030\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4040e6\n    if (v3 == 85) {\n        // 0x404040\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4040d8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x40406e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x40407b\n        // 0x404021\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4040d8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x4040bd\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x4040ca\n    // 0x404021\n    return result4;\n}\n"
        },
        {
            "funcName": "function_404100",
            "funcStartAddr": "404100",
            "funcEndAddr": "404157",
            "decompiledFuncCode": "int64_t function_404100(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x404100\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x404148\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404157",
            "funcStartAddr": "404157",
            "funcEndAddr": "405321",
            "decompiledFuncCode": "int64_t function_404157(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4041a1\n    int64_t v3 = 0; // 0x4041a1\n    int64_t v4; // 0x404157\n    int64_t v5; // 0x404157\n    int64_t v6; // 0x404157\n    int64_t v7; // 0x404157\n    int64_t v8; // 0x404157\n    int64_t v9; // 0x404157\n    int64_t v10; // 0x404157\n    int64_t v11; // 0x404157\n    int64_t v12; // 0x404157\n    int64_t v13; // 0x404157\n    int64_t v14; // 0x404157\n    int64_t v15; // 0x404157\n    int64_t v16; // 0x404157\n    int64_t v17; // 0x404157\n    int64_t v18; // 0x404157\n    int64_t result; // 0x404157\n    int64_t v19; // 0x404157\n    int32_t wc; // bp+132, 0x404157\n    int64_t ps; // bp+136, 0x404157\n    char v20; // 0x404710\n    int64_t v21; // 0x404710\n    int64_t v22; // 0x404ab8\n    int64_t v23; // 0x404157\n    int64_t v24; // 0x404ad7\n    int32_t v25; // 0x404157\n    while (true) {\n      lab_0x4041a8_2:\n        // 0x4041a8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x404157\n        int64_t v27; // 0x4041dc\n        while (true) {\n          lab_0x4041a8:\n            // 0x4041a8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4041b3\n            if (v15 == -1) {\n                // 0x4041b5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4041c3\n            if (v28) {\n                // break (via goto) -> 0x404928\n                goto lab_0x404928;\n            }\n            // 0x4041cc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g56 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4047bb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x404301;\n                    }\n                    // 0x404bdd\n                    v26 = v5 + 1;\n                    goto lab_0x4041a8;\n                }\n                case 7: {\n                    goto lab_0x404301;\n                }\n                case 8: {\n                    goto lab_0x404301;\n                }\n                case 9: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x404301;\n                }\n                case 12: {\n                    goto lab_0x404301;\n                }\n                case 13: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x4042cd;\n                }\n                case 36: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x404301;\n                }\n                case 38: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x404301;\n                }\n                case 44: {\n                    goto lab_0x404301;\n                }\n                case 45: {\n                    goto lab_0x404301;\n                }\n                case 46: {\n                    goto lab_0x404301;\n                }\n                case 47: {\n                    goto lab_0x404301;\n                }\n                case 48: {\n                    goto lab_0x404301;\n                }\n                case 49: {\n                    goto lab_0x404301;\n                }\n                case 50: {\n                    goto lab_0x404301;\n                }\n                case 51: {\n                    goto lab_0x404301;\n                }\n                case 52: {\n                    goto lab_0x404301;\n                }\n                case 53: {\n                    goto lab_0x404301;\n                }\n                case 54: {\n                    goto lab_0x404301;\n                }\n                case 55: {\n                    goto lab_0x404301;\n                }\n                case 56: {\n                    goto lab_0x404301;\n                }\n                case 57: {\n                    goto lab_0x404301;\n                }\n                case 58: {\n                    goto lab_0x404301;\n                }\n                case 59: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x404301;\n                }\n                case 66: {\n                    goto lab_0x404301;\n                }\n                case 67: {\n                    goto lab_0x404301;\n                }\n                case 68: {\n                    goto lab_0x404301;\n                }\n                case 69: {\n                    goto lab_0x404301;\n                }\n                case 70: {\n                    goto lab_0x404301;\n                }\n                case 71: {\n                    goto lab_0x404301;\n                }\n                case 72: {\n                    goto lab_0x404301;\n                }\n                case 73: {\n                    goto lab_0x404301;\n                }\n                case 74: {\n                    goto lab_0x404301;\n                }\n                case 75: {\n                    goto lab_0x404301;\n                }\n                case 76: {\n                    goto lab_0x404301;\n                }\n                case 77: {\n                    goto lab_0x404301;\n                }\n                case 78: {\n                    goto lab_0x404301;\n                }\n                case 79: {\n                    goto lab_0x404301;\n                }\n                case 80: {\n                    goto lab_0x404301;\n                }\n                case 81: {\n                    goto lab_0x404301;\n                }\n                case 82: {\n                    goto lab_0x404301;\n                }\n                case 83: {\n                    goto lab_0x404301;\n                }\n                case 84: {\n                    goto lab_0x404301;\n                }\n                case 85: {\n                    goto lab_0x404301;\n                }\n                case 86: {\n                    goto lab_0x404301;\n                }\n                case 87: {\n                    goto lab_0x404301;\n                }\n                case 88: {\n                    goto lab_0x404301;\n                }\n                case 89: {\n                    goto lab_0x404301;\n                }\n                case 90: {\n                    goto lab_0x404301;\n                }\n                case 91: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x404301;\n                }\n                case 94: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x404301;\n                }\n                case 96: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x404301;\n                }\n                case 98: {\n                    goto lab_0x404301;\n                }\n                case 99: {\n                    goto lab_0x404301;\n                }\n                case 100: {\n                    goto lab_0x404301;\n                }\n                case 101: {\n                    goto lab_0x404301;\n                }\n                case 102: {\n                    goto lab_0x404301;\n                }\n                case 103: {\n                    goto lab_0x404301;\n                }\n                case 104: {\n                    goto lab_0x404301;\n                }\n                case 105: {\n                    goto lab_0x404301;\n                }\n                case 106: {\n                    goto lab_0x404301;\n                }\n                case 107: {\n                    goto lab_0x404301;\n                }\n                case 108: {\n                    goto lab_0x404301;\n                }\n                case 109: {\n                    goto lab_0x404301;\n                }\n                case 110: {\n                    goto lab_0x404301;\n                }\n                case 111: {\n                    goto lab_0x404301;\n                }\n                case 112: {\n                    goto lab_0x404301;\n                }\n                case 113: {\n                    goto lab_0x404301;\n                }\n                case 114: {\n                    goto lab_0x404301;\n                }\n                case 115: {\n                    goto lab_0x404301;\n                }\n                case 116: {\n                    goto lab_0x404301;\n                }\n                case 117: {\n                    goto lab_0x404301;\n                }\n                case 118: {\n                    goto lab_0x404301;\n                }\n                case 119: {\n                    goto lab_0x404301;\n                }\n                case 120: {\n                    goto lab_0x404301;\n                }\n                case 121: {\n                    goto lab_0x404301;\n                }\n                case 122: {\n                    goto lab_0x404301;\n                }\n                case 123: {\n                    goto lab_0x4042a5;\n                }\n                case 124: {\n                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4042a5;\n                }\n                case 126: {\n                    goto lab_0x4042cd;\n                }\n                default: {\n                    goto lab_0x4046a5;\n                }\n            }\n        }\n      lab_0x4046a5:\n        if (v23 != 1) {\n            // 0x404a10\n            ps = 0;\n            int64_t len = v15; // 0x404a20\n            if (v15 == -1) {\n                // 0x404a22\n                len = strlen((char *)str);\n            }\n            // 0x404a4e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x404aaf:\n                // 0x404aaf\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x404ab4\n                int64_t v30 = v29 + str;\n                v24 = function_407410(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40502a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40502a_2;\n                    }\n                    case -2: {\n                        // 0x40510d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x405147\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40514a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x405157\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x405150\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40502a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40502a_2;\n                    }\n                    case 1: {\n                        goto lab_0x404a80;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x404b2c\n                        char v34 = *(char *)v33; // 0x404b3d\n                        unsigned char v35; // 0x404157\n                        if (v34 < 125) {\n                            // 0x404b48\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x404b5f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x404b30\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x404b3d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x404b48\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x404b5f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x404b30\n                            v33++;\n                        }\n                        goto lab_0x404a80;\n                    }\n                }\n            }\n            goto lab_0x40502a_2;\n        } else {\n            // 0x4046f4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x404301;\n        }\n    }\n  lab_0x404928:\n    // 0x404928\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40522a\n        if (v8 > result) {\n            // 0x405233\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x404557\n        return result;\n    }\n    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x404301:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x404310\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40451a_2;\n        }\n    }\n    int64_t v39 = result; // 0x404411\n    char v40 = v20; // 0x404411\n    int64_t v41 = v38; // 0x404411\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x404411\n    int64_t v43 = v36; // 0x404411\n    goto lab_0x40438d;\n  lab_0x40451a_2:\n    // 0x404557\n    return function_404100(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40502a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x404301;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x404bfe\n        int64_t v50 = v5 + 1; // 0x404ce1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x404ce8\n        char v52 = v20; // 0x404ce8\n        int64_t v53 = result; // 0x404ce8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x404cb1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x404cb5\n            int64_t v56 = v54 + 1; // 0x404cba\n            int64_t v57 = v51 + 1; // 0x404ce1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x404cac\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x404cb1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x404cb5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40438d;\n    }\n  lab_0x404a80:\n    // 0x404a80\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x404a9f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404aa2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40502a\n        goto lab_0x40502a_2;\n    }\n    goto lab_0x404aaf;\n  lab_0x4042cd:\n    // 0x4042cd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40451a_2;\n    }\n    goto lab_0x404301;\n  lab_0x4042a5:;\n    bool v60 = v15 == 1; // 0x4042b0\n    if (v15 == -1) {\n        // 0x4042b2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4042be\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x404301;\n    } else {\n        goto lab_0x4042cd;\n    }\n  lab_0x40438d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x404392\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x404396\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4041a8_2;\n}\n"
        },
        {
            "funcName": "function_405330",
            "funcStartAddr": "405330",
            "funcEndAddr": "4054ce",
            "decompiledFuncCode": "int64_t function_405330(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x405332\n    int32_t * v3 = __errno_location(); // 0x40534c\n    int64_t v4 = (int64_t)g20; // 0x405351\n    int32_t v5 = *v3; // 0x40535b\n    int64_t v6 = v4; // 0x405371\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4054c9\n            function_4063a0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x405380\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x405387\n        int64_t v9; // 0x405330\n        if (g20 == &g21) {\n            int64_t v10 = function_4061b0(0, v8); // 0x4054aa\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x4054af\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4061b0(v4, v8); // 0x40539b\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x4053aa\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x4053aa\n        int32_t v14 = v7; // 0x4053b1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4053e1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4053eb\n    int64_t * v17 = (int64_t *)v15; // 0x4053ee\n    uint64_t v18 = *v17; // 0x4053ee\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4053f1\n    int64_t result = *v19; // 0x4053f1\n    int64_t v20; // 0x405330\n    uint64_t v21 = function_404100(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x405414\n    if (v18 > v21) {\n        // 0x40548b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x405427\n    *v17 = v22;\n    if (result != (int64_t)&g45) {\n        // 0x405437\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_406150(v22); // 0x405451\n    *v19 = result2;\n    int64_t v23; // 0x405330\n    function_404100(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40548b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4054d0",
            "funcStartAddr": "4054d0",
            "funcEndAddr": "405504",
            "decompiledFuncCode": "int64_t function_4054d0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4054d7\n    int64_t result = function_406350(a1 == 0 ? (int64_t)&g46 : a1, 56); // 0x4054f6\n    return result;\n}\n"
        },
        {
            "funcName": "function_405510",
            "funcStartAddr": "405510",
            "funcEndAddr": "40551f",
            "decompiledFuncCode": "int64_t function_405510(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g46 : a1); // 0x40551c\n    return result;\n}\n"
        },
        {
            "funcName": "function_405520",
            "funcStartAddr": "405520",
            "funcEndAddr": "40552f",
            "decompiledFuncCode": "int64_t function_405520(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 : a1; // 0x405528\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g46;\n}\n"
        },
        {
            "funcName": "function_405530",
            "funcStartAddr": "405530",
            "funcEndAddr": "405563",
            "decompiledFuncCode": "int64_t function_405530(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 + 8 : a1 + 8; // 0x405549\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40554e\n    uint32_t v3 = *v2; // 0x40554e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x405552\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_405570",
            "funcStartAddr": "405570",
            "funcEndAddr": "405583",
            "decompiledFuncCode": "int64_t function_405570(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g46 + 4 : a1 + 4); // 0x40557c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_405590",
            "funcStartAddr": "405590",
            "funcEndAddr": "4055bb",
            "decompiledFuncCode": "int64_t function_405590(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 : a1; // 0x405598\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4055b5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4055ac\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g46;\n}\n"
        },
        {
            "funcName": "function_4055c0",
            "funcStartAddr": "4055c0",
            "funcEndAddr": "405632",
            "decompiledFuncCode": "int64_t function_4055c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g46 : a5; // 0x4055e2\n    int32_t * v2 = __errno_location(); // 0x4055eb\n    uint32_t v3 = *(int32_t *)v1; // 0x40560b\n    int64_t result = function_404100(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40561a\n    return result;\n}\n"
        },
        {
            "funcName": "function_405640",
            "funcStartAddr": "405640",
            "funcEndAddr": "405721",
            "decompiledFuncCode": "int64_t function_405640(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g46 : a4; // 0x405662\n    int32_t * v2 = __errno_location(); // 0x405668\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x405687\n    int32_t * v4 = (int32_t *)v1; // 0x40568a\n    int64_t v5 = function_404100(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4056a5\n    int64_t v6 = v5 + 1; // 0x4056aa\n    int64_t result = function_406150(v6); // 0x4056bf\n    function_404100(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x405704\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40570d\n    return result;\n}\n"
        },
        {
            "funcName": "function_405730",
            "funcStartAddr": "405730",
            "funcEndAddr": "40573a",
            "decompiledFuncCode": "int64_t function_405730(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405730\n    return function_405640(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_405740",
            "funcStartAddr": "405740",
            "funcEndAddr": "4057d5",
            "decompiledFuncCode": "int64_t function_405740(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x405740\n    int64_t v2 = v1; // 0x405740\n    int64_t v3 = v2; // 0x405754\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x405773\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g57;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x405770\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g57;\n        }\n    }\n    int64_t v6 = v3; // 0x40578d\n    if (g21 != 0x60c320) {\n        // 0x40578f\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g45;\n        v6 = &g57;\n    }\n    int64_t result = v6; // 0x4057b1\n    if (g20 != &g21) {\n        // 0x4057b3\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g57;\n    }\n    // 0x4057c6\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4057e0",
            "funcStartAddr": "4057e0",
            "funcEndAddr": "4057f1",
            "decompiledFuncCode": "int64_t function_4057e0(void) {\n    // 0x4057e0\n    int64_t v1; // 0x4057e0\n    return function_405330(v1, v1, -1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_405800",
            "funcStartAddr": "405800",
            "funcEndAddr": "40580a",
            "decompiledFuncCode": "int64_t function_405800(void) {\n    // 0x405800\n    int64_t v1; // 0x405800\n    return function_405330(v1, v1, v1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_405810",
            "funcStartAddr": "405810",
            "funcEndAddr": "405826",
            "decompiledFuncCode": "int64_t function_405810(int64_t a1) {\n    // 0x405810\n    return function_405330(0, a1, -1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_405830",
            "funcStartAddr": "405830",
            "funcEndAddr": "405842",
            "decompiledFuncCode": "int64_t function_405830(int64_t a1, int64_t a2) {\n    // 0x405830\n    return function_405330(0, a1, a2, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_405850",
            "funcStartAddr": "405850",
            "funcEndAddr": "4058b8",
            "decompiledFuncCode": "int64_t function_405850(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405860\n    return function_405330((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4058c0",
            "funcStartAddr": "4058c0",
            "funcEndAddr": "405924",
            "decompiledFuncCode": "int64_t function_4058c0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4058d0\n    return function_405330((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_405930",
            "funcStartAddr": "405930",
            "funcEndAddr": "40593c",
            "decompiledFuncCode": "int64_t function_405930(int64_t a1, int64_t a2) {\n    // 0x405930\n    return function_405850(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_405940",
            "funcStartAddr": "405940",
            "funcEndAddr": "40594f",
            "decompiledFuncCode": "int64_t function_405940(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405940\n    return function_4058c0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_405950",
            "funcStartAddr": "405950",
            "funcEndAddr": "4059c0",
            "decompiledFuncCode": "int64_t function_405950(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g46); // 0x40595d\n    int128_t v2 = __asm_movdqa(g47); // 0x405965\n    int128_t v3 = __asm_movdqa(g48); // 0x40596d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x405982\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x405998\n    uint32_t v6 = *v5; // 0x405998\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40599d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_405330(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4059c0",
            "funcStartAddr": "4059c0",
            "funcEndAddr": "4059cd",
            "decompiledFuncCode": "int64_t function_4059c0(int64_t a1, int64_t a2) {\n    // 0x4059c0\n    return function_405950(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4059d0",
            "funcStartAddr": "4059d0",
            "funcEndAddr": "4059e1",
            "decompiledFuncCode": "int64_t function_4059d0(int64_t a1) {\n    // 0x4059d0\n    return function_405950(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4059f0",
            "funcStartAddr": "4059f0",
            "funcEndAddr": "4059fa",
            "decompiledFuncCode": "int64_t function_4059f0(void) {\n    // 0x4059f0\n    int64_t v1; // 0x4059f0\n    return function_405950(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_405a00",
            "funcStartAddr": "405a00",
            "funcEndAddr": "405a6e",
            "decompiledFuncCode": "int64_t function_405a00(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405a1a\n    return function_405330((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405a70",
            "funcStartAddr": "405a70",
            "funcEndAddr": "405adc",
            "decompiledFuncCode": "int64_t function_405a70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g46); // 0x405a77\n    int128_t v2 = __asm_movdqa(g47); // 0x405a7f\n    int128_t v3 = __asm_movdqa(g48); // 0x405a87\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x405aa9\n    if (a2 == 0 || a3 == 0) {\n        // 0x405ad7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x405aba\n    return function_405330(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_405ae0",
            "funcStartAddr": "405ae0",
            "funcEndAddr": "405ae9",
            "decompiledFuncCode": "int64_t function_405ae0(void) {\n    // 0x405ae0\n    int64_t v1; // 0x405ae0\n    return function_405a70(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_405af0",
            "funcStartAddr": "405af0",
            "funcEndAddr": "405b07",
            "decompiledFuncCode": "int64_t function_405af0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405af0\n    return function_405a70(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_405b10",
            "funcStartAddr": "405b10",
            "funcEndAddr": "405b23",
            "decompiledFuncCode": "int64_t function_405b10(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405b10\n    return function_405a70(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_405b30",
            "funcStartAddr": "405b30",
            "funcEndAddr": "405b3a",
            "decompiledFuncCode": "int64_t function_405b30(void) {\n    // 0x405b30\n    int64_t v1; // 0x405b30\n    return function_405330(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_405b40",
            "funcStartAddr": "405b40",
            "funcEndAddr": "405b52",
            "decompiledFuncCode": "int64_t function_405b40(int64_t a1, int64_t a2) {\n    // 0x405b40\n    return function_405330(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_405b60",
            "funcStartAddr": "405b60",
            "funcEndAddr": "405b71",
            "decompiledFuncCode": "int64_t function_405b60(void) {\n    // 0x405b60\n    int64_t v1; // 0x405b60\n    return function_405330(v1, v1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_405b80",
            "funcStartAddr": "405b80",
            "funcEndAddr": "405b96",
            "decompiledFuncCode": "int64_t function_405b80(int64_t a1) {\n    // 0x405b80\n    return function_405330(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_405ba0",
            "funcStartAddr": "405ba0",
            "funcEndAddr": "405bae",
            "decompiledFuncCode": "int64_t function_405ba0(int64_t a1, int64_t a2) {\n    // 0x405ba0\n    int64_t v1; // 0x405ba0\n    return function_406460(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_405bb0",
            "funcStartAddr": "405bb0",
            "funcEndAddr": "405f8d",
            "decompiledFuncCode": "int64_t function_405bb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405c48\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x405bcc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405be6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x405c2b\n    if (a6 < 10) {\n        // 0x405c3a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x405d32\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405f90",
            "funcStartAddr": "405f90",
            "funcEndAddr": "405fb0",
            "decompiledFuncCode": "int64_t function_405f90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405f90\n    if (a5 == 0) {\n        // 0x405fab\n        return function_405bb0(a1, a2, a3, a4, a5, 0, (int64_t)&g57);\n    }\n    int64_t v1 = 0; // 0x405f97\n    v1++;\n    int64_t v2 = v1; // 0x405fa9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405fa0\n        v1++;\n        v2 = v1;\n    }\n    // 0x405fab\n    return function_405bb0(a1, a2, a3, a4, a5, v2, (int64_t)&g57);\n}\n"
        },
        {
            "funcName": "function_405fb0",
            "funcStartAddr": "405fb0",
            "funcEndAddr": "406010",
            "decompiledFuncCode": "int64_t function_405fb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405fb0\n    int64_t v3 = &v2; // 0x405fb0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405fe3\n    int64_t v6; // 0x405fcd\n    int64_t * v7; // 0x405feb\n    int64_t v8; // 0x405feb\n    int64_t v9; // 0x405ff7\n    if (v5 < 48) {\n        // 0x405fc0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x406003\n            break;\n        }\n    } else {\n        // 0x405feb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x406003\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405fe1\n    while (v4 != 9) {\n        // 0x405fd9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405fc0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x406003\n                break;\n            }\n        } else {\n            // 0x405feb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x406003\n                break;\n            }\n        }\n        // 0x405fd9\n        v10 = 10;\n    }\n    // 0x406003\n    return function_405bb0(a1, a2, a3, a4, v3, v10, (int64_t)&g57);\n}\n"
        },
        {
            "funcName": "function_406010",
            "funcStartAddr": "406010",
            "funcEndAddr": "4060cc",
            "decompiledFuncCode": "int64_t function_406010(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x406010\n    int64_t v1; // bp-168, 0x406010\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x406010\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x406010\n    int64_t v8; // 0x406010\n    int64_t v9; // bp-56, 0x406010\n    int64_t v10; // 0x406075\n    int64_t v11; // 0x406099\n    if ((int32_t)v6 < 48) {\n        // 0x406060\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4060b0\n            break;\n        }\n    } else {\n        // 0x406092\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4060b0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40608a\n    int64_t v13 = 10; // 0x40608a\n    while (v5 != 9) {\n        // 0x40608c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x406060\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4060b0\n                break;\n            }\n        } else {\n            // 0x406092\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4060b0\n                break;\n            }\n        }\n        // 0x406082\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4060b0\n    int64_t v14; // bp-136, 0x406010\n    int64_t result = function_405bb0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g57); // 0x4060bf\n    return result;\n}\n"
        },
        {
            "funcName": "function_4060d0",
            "funcStartAddr": "4060d0",
            "funcEndAddr": "406144",
            "decompiledFuncCode": "int64_t function_4060d0(int64_t a1) {\n    // 0x4060d0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x406133\n    return fputs_unlocked(v1, g28);\n}\n"
        },
        {
            "funcName": "function_406150",
            "funcStartAddr": "406150",
            "funcEndAddr": "40616a",
            "decompiledFuncCode": "int64_t function_406150(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x406154\n    if (size != 0 != (mem == NULL)) {\n        // 0x406163\n        return (int64_t)mem;\n    }\n    // 0x406165\n    function_4063a0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406170",
            "funcStartAddr": "406170",
            "funcEndAddr": "406191",
            "decompiledFuncCode": "int64_t function_406170(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x406173\n    int64_t v2 = v1; // 0x406173\n    if (v2 < 0) {\n        // 0x40618b\n        function_4063a0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406189\n        return function_406150(v2);\n    }\n    // 0x40618b\n    function_4063a0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4061a0",
            "funcStartAddr": "4061a0",
            "funcEndAddr": "4061a2",
            "decompiledFuncCode": "int64_t function_4061a0(void) {\n    // 0x4061a0\n    int64_t v1; // 0x4061a0\n    return function_406150(v1);\n}\n"
        },
        {
            "funcName": "function_4061b0",
            "funcStartAddr": "4061b0",
            "funcEndAddr": "4061e6",
            "decompiledFuncCode": "int64_t function_4061b0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4061d8\n        free(v1);\n        return (int32_t)&g57 ^ (int32_t)&g57;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4061c1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4061d0\n        return (int64_t)mem;\n    }\n    // 0x4061e1\n    function_4063a0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4061f0",
            "funcStartAddr": "4061f0",
            "funcEndAddr": "406211",
            "decompiledFuncCode": "int64_t function_4061f0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4061f3\n    int64_t v2 = v1; // 0x4061f3\n    if (v2 < 0) {\n        // 0x40620b\n        function_4063a0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406209\n        return function_4061b0(a1, v2);\n    }\n    // 0x40620b\n    function_4063a0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406220",
            "funcStartAddr": "406220",
            "funcEndAddr": "4062a6",
            "decompiledFuncCode": "int64_t function_406220(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40627b\n            function_4063a0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4061b0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x406263\n    if (a2 == 0) {\n        // 0x406288\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x406268\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40627b\n        function_4063a0(a1);\n        // UNREACHABLE\n    }\n    // 0x40624a\n    *(int64_t *)a2 = v2;\n    return function_4061b0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4062b0",
            "funcStartAddr": "4062b0",
            "funcEndAddr": "406300",
            "decompiledFuncCode": "int64_t function_4062b0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4062b0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4062fa\n            function_4063a0(a1);\n            // UNREACHABLE\n        }\n        // 0x4062d2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4061b0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4062e5\n        *(int64_t *)a2 = 128;\n        return function_4061b0(0, 128);\n    }\n    // 0x4062f8\n    if (a2 < 0) {\n        // 0x4062fa\n        function_4063a0(a1);\n        // UNREACHABLE\n    }\n    // 0x4062d2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4061b0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_406300",
            "funcStartAddr": "406300",
            "funcEndAddr": "406317",
            "decompiledFuncCode": "int64_t function_406300(int64_t a1, int64_t a2) {\n    // 0x406300\n    return (int64_t)memset((int64_t *)function_406150(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_406320",
            "funcStartAddr": "406320",
            "funcEndAddr": "40634e",
            "decompiledFuncCode": "int64_t function_406320(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x406327\n    if ((int64_t)v1 < 0) {\n        // 0x406349\n        function_4063a0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x406349\n        function_4063a0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40633a\n    if (mem != NULL) {\n        // 0x406344\n        return (int64_t)mem;\n    }\n    // 0x406349\n    function_4063a0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406350",
            "funcStartAddr": "406350",
            "funcEndAddr": "406378",
            "decompiledFuncCode": "int64_t function_406350(int64_t a1, int64_t a2) {\n    int64_t v1 = function_406150(a2); // 0x40635f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_406380",
            "funcStartAddr": "406380",
            "funcEndAddr": "406393",
            "decompiledFuncCode": "int64_t function_406380(int64_t str) {\n    // 0x406380\n    return function_406350(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4063a0",
            "funcStartAddr": "4063a0",
            "funcEndAddr": "4063d1",
            "decompiledFuncCode": "int64_t function_4063a0(int64_t a1) {\n    // 0x4063a0\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4063e0",
            "funcStartAddr": "4063e0",
            "funcEndAddr": "40645b",
            "decompiledFuncCode": "int64_t function_4063e0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4063e7\n    if (fileno(stream) < 0) {\n        // 0x406447\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4063fa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40642b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x406447\n            return fclose(stream);\n        }\n    }\n    // 0x4063fc\n    if ((int32_t)function_4065a0(a1, v1) == 0) {\n        // 0x406447\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x406408\n    int32_t v3 = *v2; // 0x406410\n    int64_t result = fclose(stream); // 0x40641e\n    if (v3 != 0) {\n        // 0x406450\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x406420\n    return result;\n}\n"
        },
        {
            "funcName": "function_406460",
            "funcStartAddr": "406460",
            "funcEndAddr": "406595",
            "decompiledFuncCode": "int64_t function_406460(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x406540\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40649c\n    int64_t v2; // 0x406460\n    if (g49 < 0) {\n        int64_t v3 = function_406460(fd, 0, v1, a4); // 0x4064e4\n        int64_t v4 = v3 & 0xffffffff; // 0x4064e9\n        if ((int32_t)v3 < 0) {\n            // 0x4064d0\n            return v4 & 0xffffffff;\n        }\n        // 0x4064ef\n        v2 = v4;\n        if (g49 != -1) {\n            // 0x4064d0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x4064b7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x4064c6\n            g49 = 1;\n            // 0x4064d0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_406460(fd & 0xffffffff, 0, v1, a4); // 0x406577\n        int64_t v7 = v6 & 0xffffffff; // 0x40657c\n        if ((int32_t)v6 < 0) {\n            // 0x4064d0\n            return v7 & 0xffffffff;\n        }\n        // 0x406586\n        g49 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x4064ff\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40650a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x4064d0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x406522\n    close(fd2);\n    // 0x4064d0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4065a0",
            "funcStartAddr": "4065a0",
            "funcEndAddr": "4065e0",
            "decompiledFuncCode": "int64_t function_4065a0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x4065ba\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x4065ba\n        return fflush(stream);\n    }\n    // 0x4065c8\n    function_4065e0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4065e0",
            "funcStartAddr": "4065e0",
            "funcEndAddr": "406637",
            "decompiledFuncCode": "int64_t function_4065e0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4065e0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4065ea\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40661b\n    int64_t result = -1; // 0x406624\n    if (v1 != -1) {\n        // 0x406626\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x406632\n    return result;\n}\n"
        },
        {
            "funcName": "function_406640",
            "funcStartAddr": "406640",
            "funcEndAddr": "40671f",
            "decompiledFuncCode": "int64_t function_406640(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40664c\n    uint32_t v2 = *v1; // 0x40664c\n    int64_t v3 = a2 & 0xffffffff; // 0x406651\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x406654\n    uint64_t v5 = (int64_t)*v4; // 0x406654\n    int64_t v6; // 0x4066c2\n    if (v3 <= v5) {\n      lab_0x4066bc_2:\n        // 0x4066bc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x406642\n    int64_t v8 = v2; // 0x406640\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4066bc\n        goto lab_0x4066bc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x406678\n    int64_t v17; // 0x406686\n    int64_t * v18; // 0x4066a0\n    int64_t * v19; // 0x4066a3\n    int64_t v20; // 0x4066ae\n    int64_t v21; // 0x406686\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x406683\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x4066a0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4066b7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4066bc\n            goto lab_0x4066bc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4066bc\n            goto lab_0x4066bc_2;\n        }\n        // 0x406672\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4066fb\n    int64_t * v23 = (int64_t *)v22; // 0x406700\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x406703\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x406700\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x406717\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40666d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4066bc\n            goto lab_0x4066bc_2;\n        }\n        // 0x406672\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x406683\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x4066a0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4066b7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4066bc\n                goto lab_0x4066bc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4066bc\n                goto lab_0x4066bc_2;\n            }\n            // 0x406672\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4066e0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x406700\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x406717\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4066bc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_406720",
            "funcStartAddr": "406720",
            "funcEndAddr": "406d3c",
            "decompiledFuncCode": "int64_t function_406720(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40673f\n    int64_t v2 = *v1; // 0x40673f\n    char * str2 = (char *)v2; // 0x40674c\n    char c = *str2; // 0x40674c\n    int64_t v3 = v2; // 0x406778\n    int64_t v4 = 0; // 0x406720\n    int32_t v5; // 0x406720\n    int64_t v6; // 0x406720\n    int64_t v7; // 0x406720\n    int64_t v8; // 0x406720\n    int64_t v9; // 0x406720\n    int64_t v10; // 0x406720\n    int64_t v11; // 0x406720\n    int64_t v12; // 0x406720\n    int64_t v13; // 0x406720\n    int64_t str3; // 0x406720\n    int64_t v14; // 0x406720\n    int64_t v15; // 0x406720\n    int64_t v16; // 0x406720\n    int64_t v17; // 0x406720\n    int32_t v18; // 0x406720\n    int32_t v19; // 0x406720\n    int32_t v20; // 0x406720\n    int32_t v21; // 0x406720\n    int32_t v22; // 0x406720\n    int32_t v23; // 0x406720\n    int32_t v24; // 0x406720\n    int32_t v25; // 0x406720\n    int32_t v26; // 0x406720\n    int32_t v27; // 0x406720\n    int32_t v28; // 0x406720\n    int32_t v29; // 0x406720\n    int64_t nmemb; // 0x406720\n    int64_t v30; // 0x406720\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40677c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x406778\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x406788\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40678e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x406758\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4067bc\n                int64_t v34; // 0x406720\n                int64_t v35; // 0x406720\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4067c5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x406940;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4067d6\n                int64_t v37 = *(int64_t *)v36; // 0x4067da\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4067b0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4067c5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x406940;\n                        }\n                    }\n                    // 0x4067d6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x406826:\n                    // 0x406826\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x406880;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4069f0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x406880;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4069a0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40684a;\n                                } else {\n                                    // 0x4069ac\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40684a;\n                                    } else {\n                                        // 0x4069ba\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40684a;\n                                        } else {\n                                            goto lab_0x406880;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40684a;\n                            }\n                        }\n                    }\n                }\n              lab_0x406891:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x406a66\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x406c12\n                            flockfile(g31);\n                            int64_t v41 = *v1; // 0x406c32\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x406c7f\n                            int64_t v43 = (int64_t)g31;\n                            int64_t v44 = v43; // 0x406c99\n                            int64_t v45; // 0x406c9b\n                            if (*(char *)v42 != 0) {\n                                // 0x406c9b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g31;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x406c93\n                            while (v17 + nmemb != v42) {\n                                // 0x406c95\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x406c9b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g31;\n                                }\n                                // 0x406c88\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x406cc0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g31);\n                            v40 = *v1;\n                        } else {\n                            // 0x406a74\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x406bcf\n                        free((int64_t *)v17);\n                    }\n                    // 0x406ac9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x406ae0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40698e\n                    return 63;\n                }\n                // 0x4068b0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x406934\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x406940:;\n                    int32_t * v49 = (int32_t *)a7; // 0x406950\n                    uint32_t v50 = *v49; // 0x406950\n                    int64_t v51 = v50; // 0x406950\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40695a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x406963\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x406b8f\n                                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x406b3a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40698e\n                            return 63;\n                        }\n                        // 0x4069d8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x406cef\n                                    __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x406bed\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x406c00\n                                // 0x40698e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x406afe\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x406b12\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40697b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40697e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x406982\n                    int64_t result = v59; // 0x406988\n                    if (v58 != 0) {\n                        // 0x40698a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40698e\n                    return result;\n                }\n            } else {\n                // 0x40678e\n                v5 = v32;\n            }\n            // break -> 0x4068b5\n            break;\n        }\n    }\n    // 0x4068b5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x4068cd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4068d7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40698e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x406a19\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x406906\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x406916\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x406880:\n    // 0x406880\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x406880\n    int64_t v63 = *(int64_t *)v62; // 0x406884\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x406891\n        goto lab_0x406891;\n    }\n    goto lab_0x406826;\n  lab_0x40684a:\n    // 0x40684a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x406720\n    int32_t v65; // 0x406720\n    int32_t v66; // 0x406720\n    if (v27 != 0) {\n        goto lab_0x406880;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x406a00\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x406880;\n            } else {\n                goto lab_0x406871;\n            }\n        } else {\n            // 0x406865\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x406b5c\n                int64_t v67 = (int64_t)mem; // 0x406b5c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x406880;\n                } else {\n                    // 0x406b6f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x406871;\n                }\n            } else {\n                goto lab_0x406871;\n            }\n        }\n    }\n  lab_0x406871:\n    // 0x406871\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x406880;\n}\n"
        },
        {
            "funcName": "function_406d40",
            "funcStartAddr": "406d40",
            "funcEndAddr": "407306",
            "decompiledFuncCode": "int64_t function_406d40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x406d61\n    if (v3 < 1) {\n        // 0x406f1e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x406d5d\n    int32_t v5 = *(int32_t *)a7; // 0x406d69\n    uint64_t v6 = a1 & 0xffffffff; // 0x406d6b\n    int64_t v7 = v2; // 0x406d70\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x406d73\n    *v8 = 0;\n    int64_t v9; // 0x406d40\n    int64_t v10; // 0x406d40\n    int64_t v11; // 0x406d40\n    int64_t v12; // 0x406d40\n    int64_t str; // 0x406d40\n    int64_t v13; // 0x406d40\n    int64_t v14; // 0x406d40\n    int64_t v15; // 0x406d40\n    int64_t v16; // 0x406d40\n    int64_t v17; // 0x406d40\n    int32_t v18; // 0x406d40\n    char v19; // 0x406d40\n    if (v5 == 0) {\n        // 0x406f58\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x406d8a;\n    } else {\n        // 0x406d83\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x406dd0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x406dd3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x406e98;\n            } else {\n                int64_t v22 = v7 + 1; // 0x406de6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x406df6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x406eac;\n                } else {\n                    goto lab_0x406e08;\n                }\n            }\n        } else {\n            goto lab_0x406d8a;\n        }\n    }\n  lab_0x406d8a:\n    // 0x406d8a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x406d90\n    *v24 = 0;\n    int64_t v25; // 0x406d40\n    int64_t v26; // 0x406d40\n    int64_t v27; // 0x406d40\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x406e80\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x406e8d;\n        }\n        case 43: {\n            // 0x407190\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x406e8d;\n        }\n        default: {\n            // 0x406dac\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40710f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x407228\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x406e8d;\n                } else {\n                    // 0x40711d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x406dba;\n                }\n            } else {\n                goto lab_0x406dba;\n            }\n        }\n    }\n  lab_0x406e98:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x406e9f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x406e08;\n    } else {\n        goto lab_0x406eac;\n    }\n  lab_0x406dba:\n    // 0x406dba\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x406e8d;\n  lab_0x406e8d:\n    // 0x406e8d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x406e98;\n  lab_0x406e08:;\n    uint32_t v30 = *(int32_t *)a7; // 0x406e08\n    int64_t v31 = v30; // 0x406e08\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x406e0a\n    if ((int64_t)*v32 > v31) {\n        // 0x406e0f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x406e12\n    if (*v33 > v30) {\n        // 0x406e17\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x406e1a\n    int64_t v35 = v31; // 0x406e1e\n    int64_t v36 = v15; // 0x406e1e\n    int64_t v37; // 0x406d40\n    int64_t v38; // 0x406d40\n    int64_t v39; // 0x406d40\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406f88\n        int64_t v41 = v40; // 0x406f88\n        v2 = v41;\n        int64_t v42; // 0x406d40\n        if (*v33 == v40) {\n            // 0x407170\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x407178\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x406f94\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406f98\n                function_406640(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x406fa8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x406fb1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x406fba\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x406fd1\n            int64_t v47 = v45 & 0xffffffff; // 0x406fd5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x406fde\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x406fe4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x406fe6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x406fc0\n            int64_t v49 = v48 & 0xffffffff; // 0x406fc0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x406fd1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x406fde\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x406fe4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x406fe6;\n                    }\n                }\n                // 0x406fc0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x407188\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x406fe6;\n    } else {\n        goto lab_0x406e24;\n    }\n  lab_0x406eac:\n    // 0x406eac\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x406eaf\n    int64_t v51 = v12; // 0x406eaf\n    int64_t v52 = v14; // 0x406eaf\n    if (*(char *)v10 == 0) {\n        goto lab_0x406e08;\n    } else {\n        goto lab_0x406eb5;\n    }\n  lab_0x406e24:;\n    int32_t v53 = v35; // 0x406e24\n    int64_t v54; // 0x406d40\n    int64_t v55; // 0x406d40\n    int64_t v56; // 0x406d40\n    int64_t v57; // 0x406d40\n    int64_t v58; // 0x406d40\n    int64_t v59; // 0x406d40\n    char * v60; // 0x406d40\n    int64_t v61; // 0x406d40\n    int64_t v62; // 0x406e39\n    int64_t v63; // 0x406d40\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x406f73\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x406f76;\n    } else {\n        // 0x406e2c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x406d40\n        int64_t v66 = v65 ? -1 : 1; // 0x406e40\n        int64_t v67 = (int64_t)\"--\"; // 0x406d40\n        int64_t v68 = v62; // 0x406d40\n        int64_t v69 = 3; // 0x406e40\n        unsigned char v70 = *(char *)v68; // 0x406e40\n        char v71 = *(char *)v67; // 0x406e40\n        char v72 = v71; // 0x406e40\n        bool v73 = false; // 0x406e40\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x406f30\n            if (*(char *)v62 == 45) {\n                // 0x406ff0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x406ff0\n                if (c == 0) {\n                    goto lab_0x406f3a;\n                } else {\n                    // 0x406ffd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x407080;\n                    } else {\n                        if (c == 45) {\n                            // 0x407263\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4070d5;\n                        } else {\n                            // 0x40700e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x407080;\n                            } else {\n                                // 0x407013\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x407034;\n                                } else {\n                                    // 0x40701a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x407080;\n                                    } else {\n                                        goto lab_0x407034;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x406f3a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x406e50\n            v2 = v75;\n            int32_t v76 = *v32; // 0x406e53\n            int64_t v77 = v35 + 1; // 0x406e56\n            int32_t v78 = v77; // 0x406e59\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4071c0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x406e67\n                    function_406640(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x406e75\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x406f76;\n        }\n    }\n  lab_0x406eb5:;\n    // 0x406eb5\n    int64_t v79; // bp-104, 0x406d40\n    int64_t v80 = &v79; // 0x406d4a\n    int64_t v81 = v50 + 1; // 0x406eb5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x406ebc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x406ec1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x406ec5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x406ec9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x406ed1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x406ed6\n    int32_t c2 = v84; // 0x406ed6\n    char * found_char_pos = strchr(str2, c2); // 0x406ed6\n    int64_t v87 = *v82; // 0x406edb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x406ee5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x406ef0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4071e0\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4071ad\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x406f1e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x406ed6\n    char v91 = *(char *)(v90 + 1); // 0x406f0b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x406ec5\n        if (v91 != 58) {\n            // 0x406f1e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x407134\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x407238\n                *v8 = 0;\n            } else {\n                // 0x40721c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40715e\n            *v83 = 0;\n            // 0x406f1e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40713e\n        if (v93 != 0) {\n            // 0x4071d0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40715e\n            *v83 = 0;\n            // 0x406f1e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x407151\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40715e\n            *v83 = 0;\n            // 0x406f1e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40729a\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40724a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x407251\n        // 0x40715e\n        *v83 = 0;\n        // 0x406f1e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4070a9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4070ab\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4072d0\n                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x407281\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x407288\n            // 0x406f1e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4070b6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4070ba\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4070d5;\n  lab_0x406fe6:\n    // 0x406fe6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x406e24;\n  lab_0x4070d5:;\n    int64_t v99 = function_406720(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4070f3\n    // 0x406f1e\n    return v99 & 0xffffffff;\n  lab_0x406f76:;\n    int32_t v100 = v55; // 0x406f76\n    if (v100 != (int32_t)v59) {\n        // 0x406f7a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x406f1e\n    return 0xffffffff;\n  lab_0x406f3a:\n    // 0x406f3a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x406f41\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x406f1e\n    return v99 & 0xffffffff;\n  lab_0x407080:\n    // 0x407080\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x406eb5;\n  lab_0x407034:\n    // 0x407034\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_406720(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40705a\n    if ((int32_t)v101 != -1) {\n        // 0x406f1e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40706f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x407080;\n}\n"
        },
        {
            "funcName": "function_407310",
            "funcStartAddr": "407310",
            "funcEndAddr": "407366",
            "decompiledFuncCode": "int64_t function_407310(int64_t a1) {\n    // 0x407310\n    *(int32_t *)&g50 = g26;\n    *(int32_t *)&g51 = g25;\n    int64_t v1; // 0x407310\n    int64_t result = function_406d40(v1, v1, v1, v1, v1, v1, &g50, a1 & 0xffffffff); // 0x407336\n    g26 = *(int32_t *)&g50;\n    g55 = g53;\n    *(int32_t *)&g24 = g52;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407370",
            "funcStartAddr": "407370",
            "funcEndAddr": "407388",
            "decompiledFuncCode": "int64_t function_407370(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407370\n    return function_407310(1);\n}\n"
        },
        {
            "funcName": "function_407390",
            "funcStartAddr": "407390",
            "funcEndAddr": "4073a3",
            "decompiledFuncCode": "int64_t function_407390(int64_t a1, int64_t a2, char * a3, char (**a4)[7], int32_t a5, int64_t a6) {\n    // 0x407390\n    return function_407310(0);\n}\n"
        },
        {
            "funcName": "function_4073b0",
            "funcStartAddr": "4073b0",
            "funcEndAddr": "4073c5",
            "decompiledFuncCode": "int64_t function_4073b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4073b0\n    return function_406d40(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4073d0",
            "funcStartAddr": "4073d0",
            "funcEndAddr": "4073e6",
            "decompiledFuncCode": "int64_t function_4073d0(void) {\n    // 0x4073d0\n    return function_407310(0);\n}\n"
        },
        {
            "funcName": "function_4073f0",
            "funcStartAddr": "4073f0",
            "funcEndAddr": "407408",
            "decompiledFuncCode": "int64_t function_4073f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4073f0\n    return function_406d40(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_407410",
            "funcStartAddr": "407410",
            "funcEndAddr": "40748a",
            "decompiledFuncCode": "int64_t function_407410(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40741b\n    int64_t v2 = (int64_t)&g9; // 0x40741b\n    int32_t * pwc; // 0x407410\n    int64_t v3; // 0x407410\n    int64_t n; // 0x407410\n    if (a2 == 0) {\n        goto lab_0x407462;\n    } else {\n        // 0x40741d\n        if (a3 == 0) {\n            // 0x407448\n            return -2;\n        }\n        // 0x407429\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x407462;\n        } else {\n            goto lab_0x407434;\n        }\n    }\n  lab_0x407462:\n    // 0x407462\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x407410\n    pwc = (int32_t *)&v4;\n    goto lab_0x407434;\n  lab_0x407434:;\n    char * wstr = (char *)v3; // 0x40743a\n    int64_t ps; // 0x407410\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40743a\n    int64_t result = v5; // 0x40743a\n    if (v5 < 0xfffffffe) {\n        // 0x407448\n        return result;\n    }\n    int64_t result2 = result; // 0x407479\n    if ((char)function_4074f0(0, v3) == 0) {\n        // 0x40747b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x407448\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407490",
            "funcStartAddr": "407490",
            "funcEndAddr": "4074ed",
            "decompiledFuncCode": "int64_t function_407490(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x407497\n    int64_t v2; // 0x407490\n    int64_t result = function_4063e0(a1, v2); // 0x4074a8\n    if ((v2 & 32) != 0) {\n        // 0x4074d0\n        if ((int32_t)result == 0) {\n            // 0x4074d4\n            *__errno_location() = 0;\n        }\n        // 0x4074ca\n        return 0xffffffff;\n    }\n    // 0x4074b1\n    if ((int32_t)result == 0) {\n        // 0x4074ca\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4074b8\n    if (v1 == 0) {\n        // 0x4074ba\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4074ca\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4074f0",
            "funcStartAddr": "4074f0",
            "funcEndAddr": "40754e",
            "decompiledFuncCode": "int64_t function_4074f0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4074f6\n    if (locale == NULL) {\n        // 0x407523\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4074f6\n    bool v2; // 0x4074f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g10; // 0x4074f0\n    int64_t v5 = v1; // 0x4074f0\n    int64_t v6 = 2; // 0x407515\n    unsigned char v7 = *(char *)v5; // 0x407515\n    char v8 = *(char *)v4; // 0x407515\n    char v9 = v8; // 0x407515\n    bool v10 = false; // 0x407515\n    while (v7 == v8) {\n        // 0x407508\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x407521\n    int64_t v13 = v1; // 0x407521\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x407523\n        return 0;\n    }\n    int64_t v14 = 6; // 0x407521\n    unsigned char v15 = *(char *)v13; // 0x40753d\n    char v16 = *(char *)v12; // 0x40753d\n    char v17 = v16; // 0x40753d\n    bool v18 = false; // 0x40753d\n    while (v15 == v16) {\n        // 0x407530\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_407550",
            "funcStartAddr": "407550",
            "funcEndAddr": "407ab2",
            "decompiledFuncCode": "int64_t function_407550(void) {\n    char * v1 = nl_langinfo(14); // 0x407566\n    char * v2 = g54; // 0x40756b\n    char * v3; // 0x407550\n    int64_t v4; // 0x407550\n    int64_t v5; // 0x407550\n    int64_t v6; // 0x407550\n    int64_t v7; // 0x407550\n    int32_t size; // 0x407550\n    int32_t size2; // 0x407550\n    int32_t len; // 0x407622\n    int64_t v8; // 0x407622\n    char * env_val; // 0x40760d\n    if (v2 == NULL) {\n        // 0x407608\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x407675;\n        } else {\n            // 0x40761a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x407675;\n            } else {\n                // 0x40761f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40760d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x407aa5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x407675;\n                    } else {\n                        // 0x407a19\n                        size2 = len + 14;\n                        goto lab_0x40763b;\n                    }\n                } else {\n                    goto lab_0x40763b;\n                }\n            }\n        }\n    } else {\n        // 0x407550\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40758a;\n    }\n  lab_0x4078bc:;\n    // 0x4078bc\n    struct _IO_FILE * stream; // 0x4076fb\n    int32_t v10 = __uflow(stream); // 0x4078bf\n    int64_t v11; // 0x407550\n    int64_t v12 = v11; // 0x4078c9\n    int64_t v13; // 0x407550\n    int64_t v14 = v13; // 0x4078c9\n    int32_t v15 = v10; // 0x4078c9\n    int64_t v16; // 0x407550\n    int64_t v17 = v16; // 0x4078c9\n    int64_t v18 = v11; // 0x4078c9\n    int64_t v19 = v13; // 0x4078c9\n    int64_t v20 = v16; // 0x4078c9\n    if (v10 == -1) {\n        // break -> 0x4078cf\n        goto lab_0x4078cf;\n    }\n    goto lab_0x407749;\n  lab_0x40773e:;\n    // 0x40773e\n    int64_t v90; // 0x407550\n    int64_t * v32; // 0x407730\n    *v32 = v90 + 1;\n    int64_t v89; // 0x407550\n    v12 = v89;\n    int64_t v91; // 0x407550\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x407550\n    v17 = v92;\n    goto lab_0x407749;\n  lab_0x407749:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x407550\n    int32_t v25; // bp-120, 0x407550\n    int32_t v26; // bp-184, 0x407550\n    int64_t v27; // 0x4076fb\n    int64_t v28; // 0x407718\n    int64_t v29; // 0x40771d\n    int64_t * v30; // 0x407734\n    switch (c) {\n        case 32: {\n            goto lab_0x407730;\n        }\n        case 10: {\n            goto lab_0x407730;\n        }\n        case 9: {\n            goto lab_0x407730;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x407921\n            int32_t v33; // 0x407550\n            char v34; // 0x407550\n            int32_t v35; // 0x40792e\n            if (v31 < *v30) {\n                // 0x407900\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40792b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x407921\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x407900\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40792b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x407910\n                v36 = v33;\n            }\n            // 0x4079ff\n            if (v36 == -1) {\n                // break -> 0x4078cf\n                break;\n            }\n            goto lab_0x407730;\n        }\n        default: {\n            // 0x40775f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4078cf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x407788\n            int64_t v39 = v37 + 4; // 0x40778a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x407796\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x407798\n            while (v41 == 0) {\n                // 0x407788\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4077b6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4077c2\n            int64_t v45 = v43 + 4; // 0x4077c4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4077d0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4077d2\n            while (v47 == 0) {\n                // 0x4077c2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4077bf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4077e8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4077f8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4077fc\n            int64_t v52 = v51 + v48; // 0x407805\n            int64_t * mem; // 0x407550\n            int64_t v53; // 0x407550\n            int64_t v54; // 0x407550\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40793b\n                int64_t v56 = v55 + 3; // 0x407947\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x407821\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x407830\n            if (mem == NULL) {\n                // 0x407a5c\n                free((int64_t *)v21);\n                function_4063e0(v27, v53);\n                v24 = (int64_t)&g9;\n                goto lab_0x4076d4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x407848\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x407852\n            uint32_t v62 = (int32_t)v59; // 0x407855\n            int64_t v63; // 0x407550\n            if (v62 >= 8) {\n                // 0x407964\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40797e\n                int64_t v66 = v61 - v65; // 0x407982\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40798d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40799e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40799e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40799b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x407a2f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x407867\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40786b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40787b\n            int64_t v74 = v60 - 1; // 0x40787f\n            uint32_t v75 = (int32_t)v73; // 0x407884\n            int64_t v76; // 0x407550\n            if (v75 >= 8) {\n                // 0x4079b2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4079bc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4079cc\n                int64_t v80 = v74 - v79; // 0x4079d0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4079db\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4079eb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4079e9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x407a46\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x407a4e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x407896\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40789a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x407a93\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4078ae\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40773e;\n            } else {\n                goto lab_0x4078bc;\n            }\n        }\n    }\n  lab_0x407730:;\n    int64_t v93 = v23; // 0x407550\n    int64_t v94 = v22; // 0x407550\n    int64_t v95 = v21; // 0x407550\n    goto lab_0x407730_2;\n  lab_0x407675:;\n    int64_t * mem3 = malloc(size); // 0x407675\n    int64_t v97 = (int64_t)&g9; // 0x407680\n    int64_t v98; // 0x407550\n    int64_t path; // 0x407550\n    if (mem3 == NULL) {\n        goto lab_0x407652;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x407675\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x407696;\n    }\n  lab_0x40758a:;\n    int64_t str = v1 == NULL ? (int64_t)&g9 : (int64_t)v1; // 0x40757d\n    char v100 = *v3; // 0x40758a\n    int64_t v101; // 0x407550\n    if (v100 == 0) {\n        // 0x4075e4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x407550\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x407550\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4075d0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4075d7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4075a0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4075ad\n        char v107 = *(char *)v106; // 0x4075b2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4075e4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4075bb\n    v104 = v103 + 1;\n  lab_0x4075d7:\n    // 0x4075e4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x407652:;\n    char * v108 = (char *)v97;\n    g54 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40758a;\n  lab_0x407696:;\n    int64_t v109 = v98 + path; // 0x407696\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4076c2\n    v24 = (int64_t)&g9;\n    if (fd >= 0) {\n        // 0x4076f1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x407a22\n            close(fd);\n            v24 = (int64_t)&g9;\n        } else {\n            // 0x407715\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x407730_2:;\n                uint64_t v96 = *v32; // 0x407730\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4078bc;\n                } else {\n                    goto lab_0x40773e;\n                }\n            }\n          lab_0x4078cf:\n            // 0x4078cf\n            function_4063e0(v27, v19);\n            v24 = (int64_t)&g9;\n            if (v18 != 0) {\n                // 0x4078ee\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4076d4;\n  lab_0x40763b:;\n    int64_t * mem4 = malloc(size2); // 0x40763b\n    v97 = (int64_t)&g9;\n    if (mem4 != NULL) {\n        // 0x4076e1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x407696;\n    } else {\n        goto lab_0x407652;\n    }\n  lab_0x4076d4:\n    // 0x4076d4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x407652;\n}\n"
        },
        {
            "funcName": "function_407ac0",
            "funcStartAddr": "407ac0",
            "funcEndAddr": "407b1d",
            "decompiledFuncCode": "int64_t function_407ac0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407ac0\n    return function_401538();\n}\n"
        },
        {
            "funcName": "function_407b20",
            "funcStartAddr": "407b20",
            "funcEndAddr": "407b21",
            "decompiledFuncCode": "int64_t function_407b20(void) {\n    // 0x407b20\n    int64_t result; // 0x407b20\n    return result;\n}\n"
        },
        {
            "funcName": "function_407b30",
            "funcStartAddr": "407b30",
            "funcEndAddr": "407b48",
            "decompiledFuncCode": "int64_t function_407b30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407b30\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g15);\n}\n"
        },
        {
            "funcName": "function_407b48",
            "funcStartAddr": "407b48",
            "funcEndAddr": "407b68",
            "decompiledFuncCode": "int64_t function_407b48(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g11; // 0x407b52\n    while (*(int64_t *)v1 != -1) {\n        // 0x407b53\n        v1 -= 8;\n    }\n    // 0x407b64\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_md5sum.elf"
}