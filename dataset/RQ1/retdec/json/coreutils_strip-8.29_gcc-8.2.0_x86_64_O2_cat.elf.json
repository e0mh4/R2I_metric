{
    "funcInfo": [
        {
            "funcName": "function_4017b0",
            "funcStartAddr": "4017b0",
            "funcEndAddr": "4017b5",
            "decompiledFuncCode": "int64_t function_4017b0(void) {\n    // 0x4017b0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017b5",
            "funcStartAddr": "4017b5",
            "funcEndAddr": "4017ba",
            "decompiledFuncCode": "int64_t function_4017b5(void) {\n    // 0x4017b5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017ba",
            "funcStartAddr": "4017ba",
            "funcEndAddr": "4017bf",
            "decompiledFuncCode": "int64_t function_4017ba(void) {\n    // 0x4017ba\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017bf",
            "funcStartAddr": "4017bf",
            "funcEndAddr": "4017c4",
            "decompiledFuncCode": "int64_t function_4017bf(void) {\n    // 0x4017bf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017c4",
            "funcStartAddr": "4017c4",
            "funcEndAddr": "4017c9",
            "decompiledFuncCode": "int64_t function_4017c4(void) {\n    // 0x4017c4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017c9",
            "funcStartAddr": "4017c9",
            "funcEndAddr": "4017ce",
            "decompiledFuncCode": "int64_t function_4017c9(void) {\n    // 0x4017c9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017d0",
            "funcStartAddr": "4017d0",
            "funcEndAddr": "4023a0",
            "decompiledFuncCode": "int64_t function_4017d0(int64_t a1, int64_t a2) {\n    // 0x4017d0\n    int64_t v1; // 0x4017d0\n    int64_t v2 = v1;\n    int64_t v3 = 0x100000000 * a1 >> 32; // 0x4017e1\n    function_402a30(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_406570(0x4028d0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    int32_t v4 = 0; // 0x401842\n    char v5 = 0; // 0x401842\n    char v6 = 0; // 0x401842\n    char v7 = 0; // 0x401842\n    int32_t v8 = 0; // 0x401842\n    char v9 = 0; // 0x401842\n    int32_t v10; // 0x4017d0\n    char v11; // 0x4017d0\n    char v12; // 0x4017d0\n    char v13; // 0x4017d0\n    int32_t v14; // 0x4017d0\n    char v15; // 0x4017d0\n    int64_t v16; // 0x40185e\n    while (true) {\n      lab_0x401848_2:\n        // 0x401848\n        v13 = v9;\n        v10 = v8;\n        v11 = v7;\n        v12 = v6;\n        v15 = v5;\n        v14 = v4;\n        v16 = function_405cb0((int32_t)v3, a2, \"benstuvAET\", &g2, 0, v1);\n        int32_t v17 = v16;\n        v4 = v14;\n        v5 = v15;\n        v6 = v12;\n        v7 = v11;\n        v8 = 1;\n        v9 = 1;\n        switch (v17) {\n            case -1: {\n                goto lab_0x401997;\n            }\n            case 98: {\n                goto lab_0x401848_2;\n            }\n            default: {\n                if (v17 > 98) {\n                    // 0x401877\n                    v4 = v14;\n                    v5 = v15;\n                    v6 = v12;\n                    v7 = 1;\n                    v8 = v10;\n                    v9 = v13;\n                    if (v17 != 115) {\n                        if (v17 > 115) {\n                            // 0x401882\n                            v4 = v14;\n                            v5 = v15;\n                            v6 = v12;\n                            v7 = v11;\n                            v8 = v10;\n                            v9 = v13;\n                            if (v17 != 117) {\n                                // 0x401887\n                                v4 = 1;\n                                v5 = 1;\n                                v6 = v12;\n                                v7 = v11;\n                                v8 = v10;\n                                v9 = v13;\n                                if (v17 >= 117) {\n                                    // 0x4018c0\n                                    v4 = v14;\n                                    v5 = 1;\n                                    v6 = v12;\n                                    v7 = v11;\n                                    v8 = v10;\n                                    v9 = v13;\n                                    if (v17 != 118) {\n                                      lab_0x40230c:\n                                        // 0x40230c\n                                        function_402520(1);\n                                        // UNREACHABLE\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x4018d8\n                            v4 = v14;\n                            v5 = 1;\n                            v6 = 1;\n                            v7 = v11;\n                            v8 = v10;\n                            v9 = v13;\n                            if (v17 != 101) {\n                                // 0x4018f0\n                                v4 = v14;\n                                v5 = v15;\n                                v6 = v12;\n                                v7 = v11;\n                                v8 = v10;\n                                v9 = 1;\n                                if (v17 != 110) {\n                                    // 0x40230c\n                                    function_402520(1);\n                                    // UNREACHABLE\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    // 0x401898\n                    v4 = 1;\n                    v5 = 1;\n                    v6 = 1;\n                    v7 = v11;\n                    v8 = v10;\n                    v9 = v13;\n                    if (v17 != 65) {\n                        if (v17 <= 65) {\n                            if (v17 == -131) {\n                                struct _IO_FILE * v18 = g34; // 0x401913\n                                char (*v19)[5] = g23; // 0x40191c\n                                function_404b90((int64_t)v18, \"cat\", \"GNU coreutils\", (int64_t)v19, \"Torbjorn Granlund\", \"Richard M. Stallman\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            if (v17 == -130) {\n                                // 0x401952\n                                function_402520(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x40230c;\n                        }\n                        // 0x4018a3\n                        v4 = v14;\n                        v5 = v15;\n                        v6 = 1;\n                        v7 = v11;\n                        v8 = v10;\n                        v9 = v13;\n                        if (v17 != 69) {\n                            // 0x4018a8\n                            v4 = 1;\n                            v5 = v15;\n                            v6 = v12;\n                            v7 = v11;\n                            v8 = v10;\n                            v9 = v13;\n                            if (v17 != 84) {\n                                // 0x40230c\n                                function_402520(1);\n                                // UNREACHABLE\n                            }\n                        }\n                    }\n                }\n                goto lab_0x401848_2;\n            }\n        }\n    }\n  lab_0x401997:;\n    // 0x401997\n    int64_t v20; // bp-200, 0x4017d0\n    if (__fxstat(1, 1, (struct stat *)&v20) < 0) {\n      lab_0x40236a:\n        // 0x40236a\n        error(1, *__errno_location(), dcgettext(NULL, \"standard output\", 5));\n        return &g56;\n    }\n    int64_t v21 = v16 & 0xffffffff; // 0x4019a9\n    int32_t v22 = getpagesize(); // 0x4019dd\n    int64_t v23 = (int64_t)*(int32_t *)0x60a29c; // 0x4019e2\n    int64_t v24 = v20; // 0x4019fa\n    g41 = (char *)&g9;\n    char v25 = 0; // 0x401a54\n    int32_t v26 = 1; // 0x401a54\n    int64_t v27 = v23; // 0x401a54\n    int64_t v28 = v21; // 0x401a54\n    char v29 = 0; // 0x401a54\n    int32_t v30 = 1; // 0x401a54\n    int64_t v31 = v23; // 0x401a54\n    int64_t v32 = (int64_t)&g9; // 0x401a54\n    int64_t v33 = v21; // 0x401a54\n    if (v3 > v23) {\n        goto lab_0x401af8;\n    } else {\n        goto lab_0x401b0d;\n    }\n  lab_0x401c73:;\n    // 0x401c73\n    char v34; // 0x4017d0\n    char v35 = v34; // 0x401c78\n    int64_t v36; // 0x4017d0\n    int64_t v37 = v36; // 0x401c78\n    int64_t v38; // 0x4017d0\n    int64_t v39 = v38; // 0x401c78\n    int64_t v40; // 0x4017d0\n    int64_t v41 = v40; // 0x401c78\n    char v42 = v34; // 0x401c78\n    int64_t v43; // 0x4017d0\n    int64_t v44 = v43; // 0x401c78\n    int64_t v45 = v36; // 0x401c78\n    int64_t v46; // 0x4017d0\n    int64_t v47 = v46; // 0x401c78\n    int64_t v48 = v38; // 0x401c78\n    int64_t v49 = v40; // 0x401c78\n    if (v46 > v43) {\n        goto lab_0x401c7e;\n    } else {\n        goto lab_0x401e3f;\n    }\n  lab_0x401de7:;\n    // 0x401de7\n    int64_t v50; // 0x4017d0\n    int64_t v51 = v50;\n    int64_t v52; // 0x4017d0\n    int64_t v53 = v52;\n    int64_t v54; // 0x4017d0\n    int64_t v55 = v54;\n    int64_t v56; // 0x4017d0\n    int64_t v57 = v56;\n    int64_t v58; // 0x4017d0\n    int64_t v59 = v58;\n    char v60; // 0x4017d0\n    char v61 = v60;\n    int64_t v62; // 0x401c14\n    int64_t v63 = v62;\n    uint64_t v64; // 0x4019d9\n    if (v64 != function_4029b0(1, v63, v64)) {\n        // break (via goto) -> 0x402244\n        goto lab_0x402244;\n    }\n    int64_t v65 = v63 + v64; // 0x401e09\n    uint64_t v66 = v51 - v65; // 0x401e0f\n    while (v64 <= v66) {\n        // 0x401df0\n        v63 = v65;\n        if (v64 != function_4029b0(1, v63, v64)) {\n            // break (via goto) -> 0x402244\n            goto lab_0x402244;\n        }\n        // 0x401e09\n        v65 = v63 + v64;\n        v66 = v51 - v65;\n    }\n    // 0x401e17\n    int64_t * v67; // 0x4017d0\n    memmove(v67, (int64_t *)v65, (int32_t)v66);\n    int64_t v68 = v66 + v62; // 0x401e2f\n    v35 = v61;\n    v37 = v57;\n    v39 = v53;\n    v41 = v68;\n    v42 = v61;\n    v44 = v59;\n    v45 = v57;\n    v47 = v55;\n    v48 = v53;\n    v49 = v68;\n    if (v55 > v59) {\n        goto lab_0x401c7e;\n    } else {\n        goto lab_0x401e3f;\n    }\n  lab_0x401c7e:;\n    int64_t v69 = v41;\n    int64_t v70 = v39;\n    int64_t v71 = v37;\n    char v72 = v35;\n    char v73 = v72; // 0x401c8e\n    int64_t v74 = v70; // 0x401c8e\n    int64_t v75; // 0x4017d0\n    int64_t err_num; // 0x4017d0\n    int64_t v76; // 0x4017d0\n    char v77; // 0x4017d0\n    char v78; // 0x4017d0\n    int32_t v79; // 0x4017d0\n    int32_t v80; // 0x4017d0\n    int64_t v81; // 0x4017d0\n    int64_t v82; // 0x4017d0\n    int64_t v83; // 0x4017d0\n    int64_t v84; // 0x4017d0\n    int32_t v85; // 0x4017d0\n    int64_t v86; // 0x401bd9\n    int64_t v87; // 0x401bef\n    int32_t v88; // 0x401c0a\n    if (v72 != 0) {\n        // 0x401f30\n        v73 = v72;\n        v74 = v70;\n        if (ioctl(g40, 0x541b) < 0) {\n            int32_t * v89 = __errno_location(); // 0x401f70\n            uint32_t v90 = *v89; // 0x401f75\n            int64_t v91 = v90 == 95; // 0x401f7a\n            int64_t v92 = v91; // 0x401f81\n            if (v90 < 39) {\n                uint32_t v93 = v90 % 64;\n                v92 = (v93 == 0 ? 0 : (0x4002480000 >> (int64_t)v93) % 2) | v91;\n            }\n            int64_t v94 = v92;\n            v73 = 0;\n            v74 = v94;\n            if ((char)v94 == 0) {\n                // 0x4022af\n                v78 = v77;\n                v80 = v79;\n                v84 = v83;\n                v85 = v88;\n                v81 = v87;\n                v82 = v86;\n                err_num = (int64_t)v89;\n                v76 = v71;\n                v75 = v94;\n                goto lab_0x4022af_2;\n            }\n        }\n    }\n    int64_t v95 = v74;\n    char v96 = v73;\n    int64_t v97 = v69 - v62; // 0x401c97\n    int64_t v98 = v69; // 0x401c9a\n    if (v97 != 0) {\n        int64_t v99 = function_4029b0(1, v62, v97); // 0x401fcb\n        v98 = v62;\n        if (v97 != v99) {\n            // 0x402316\n            error(1, *__errno_location(), dcgettext(NULL, \"write error\", 5));\n            goto lab_0x402340;\n        }\n    }\n    int64_t v100 = v98;\n    int64_t v101; // 0x401c24\n    int64_t v102 = function_404670((int64_t)g40, v101, v64); // 0x401cb2\n    int64_t v103; // 0x4017d0\n    int64_t v104; // 0x4017d0\n    int64_t v105; // 0x4017d0\n    int64_t v106; // 0x4017d0\n    int64_t v107; // 0x4017d0\n    int64_t v108; // 0x4017d0\n    int64_t v109; // 0x4017d0\n    int64_t v110; // 0x4017d0\n    int64_t v111; // 0x4017d0\n    int64_t v112; // 0x4017d0\n    char v113; // 0x4017d0\n    int64_t v114; // 0x4017d0\n    int64_t v115; // 0x401c2f\n    switch (v102) {\n        case -1: {\n            int64_t v116 = function_4044d0(0, 3, (int64_t)g41); // 0x401a78\n            error(0, *__errno_location(), \"%s\", (char *)v116);\n            int64_t v117 = v100 - v62; // 0x401a98\n            if (v117 != 0) {\n                int64_t v118 = function_4029b0(1, v62, v117); // 0x402169\n                v109 = v71 & 0xffffffff;\n                v103 = v117;\n                if (v117 == v118) {\n                    goto lab_0x401aa1;\n                } else {\n                    goto lab_0x402177;\n                }\n            } else {\n                goto lab_0x401aa1;\n            }\n        }\n        case 0: {\n            int64_t v119 = v71 & 0xffffffff; // 0x40203b\n            int64_t v120 = v100 - v62; // 0x402041\n            v108 = v119;\n            v110 = v119;\n            v104 = v120;\n            if (v120 != 0) {\n                goto lab_0x40217c;\n            } else {\n                goto lab_0x40204a;\n            }\n        }\n        default: {\n            int64_t v121 = v102 + v101; // 0x401cd4\n            *(char *)v121 = 10;\n            v113 = v96;\n            v114 = v121;\n            v107 = v101;\n            v112 = v71;\n            v111 = v115;\n            v106 = v95;\n            v105 = v100;\n            goto lab_0x401ce2;\n        }\n    }\n  lab_0x401e3f:;\n    int64_t str = v49;\n    int64_t v122 = v48;\n    int64_t v123 = v47;\n    int64_t v124 = v44;\n    char v125 = v42;\n    int64_t v126 = v45 + 1; // 0x401e3f\n    int64_t v127 = v126 & 0xffffffff; // 0x401e3f\n    int64_t v128 = v123 + 1; // 0x401e42\n    int32_t v129 = v126; // 0x401e46\n    int64_t v130 = v127; // 0x401e48\n    int64_t v131 = str; // 0x401e48\n    bool v132; // 0x4017d0\n    int64_t v133; // 0x4017d0\n    int64_t v134; // 0x4017d0\n    int64_t v135; // 0x4017d0\n    int64_t v136; // 0x4017d0\n    int64_t v137; // 0x4017d0\n    char v138; // 0x4017d0\n    int64_t v139; // 0x4017d0\n    if (v129 < 1) {\n        goto lab_0x401e90;\n    } else {\n        // 0x401e4a\n        v138 = v125;\n        v139 = v124;\n        v137 = 2;\n        v136 = v128;\n        v135 = v122;\n        v133 = v123;\n        v134 = str;\n        if (v11 == 0 || v129 == 1) {\n            int64_t v140 = v129 == 1 ? v127 : 2;\n            v130 = v140;\n            v131 = str;\n            if (!v132) {\n                // 0x401e6d\n                function_402480();\n                char * v141 = stpcpy((char *)str, g19); // 0x401e81\n                v130 = v140;\n                v131 = (int64_t)v141;\n            }\n            goto lab_0x401e90;\n        } else {\n            goto lab_0x401ce6;\n        }\n    }\n  lab_0x401e90:;\n    int64_t v142 = v131;\n    int64_t v143 = v142 + 1; // 0x401e95\n    int64_t v144 = v143; // 0x401e99\n    int64_t v145 = v142; // 0x401e99\n    if (v12 != 0) {\n        // 0x401e9b\n        *(char *)v142 = 36;\n        v144 = v142 + 2;\n        v145 = v143;\n    }\n    // 0x401ea9\n    *(char *)v145 = 10;\n    v113 = v125;\n    v114 = v124;\n    v107 = v123;\n    v112 = v130;\n    v111 = v128;\n    v106 = v122;\n    v105 = v144;\n    goto lab_0x401ce2;\n  lab_0x401ce2:\n    // 0x401ce2\n    v138 = v113;\n    v139 = v114;\n    v137 = v112;\n    v136 = v111;\n    v135 = v106;\n    v133 = v107;\n    v134 = v105;\n    goto lab_0x401ce6;\n  lab_0x401ce6:;\n    int64_t str2 = v134;\n    int64_t v146 = v135;\n    int64_t v147 = v136;\n    int64_t v148 = v137;\n    int64_t v149 = v139;\n    char v150 = v138;\n    char v151 = *(char *)v133;\n    char v152 = v150; // 0x401cea\n    int64_t v153 = v149; // 0x401cea\n    int64_t v154 = v148; // 0x401cea\n    int64_t v155 = v147; // 0x401cea\n    int64_t v156 = v146; // 0x401cea\n    int64_t v157 = str2; // 0x401cea\n    uint64_t v158; // 0x401c27\n    int64_t v159; // 0x4017d0\n    if (v151 == 10) {\n        goto lab_0x401c68;\n    } else {\n        // 0x401cf0\n        if (v13 != 0 && (int32_t)v148 >= 0) {\n            // 0x401cfb\n            function_402480();\n            char (*str3)[8] = g19; // 0x401d00\n            char * v160 = stpcpy((char *)str2, str3); // 0x401d0a\n        }\n        int64_t v161 = v147; // 0x401d17\n        char v162 = v151; // 0x401d17\n        int64_t v163 = str2; // 0x401d17\n        int64_t v164 = v147; // 0x401d17\n        char v165 = v151; // 0x401d17\n        int64_t v166 = str2; // 0x401d17\n        int64_t v167; // 0x4017d0\n        int64_t v168; // 0x4017d0\n        if (v15 == 0) {\n            while (true) {\n                int64_t v169 = v163;\n                char v170 = v162;\n                int64_t v171 = v161;\n                int64_t v172; // 0x4017d0\n                if (v14 != 0 == v170 == 9) {\n                    // 0x401d20\n                    *(int16_t *)v169 = 0x495e;\n                    v172 = v169 + 2;\n                } else {\n                    // 0x401d46\n                    v168 = v171;\n                    v167 = v169;\n                    if (v170 == 10) {\n                        // break -> 0x401dd8\n                        break;\n                    }\n                    // 0x401d50\n                    *(char *)v169 = v170;\n                    v172 = v169 + 1;\n                }\n                // 0x401d2d\n                v161 = v171 + 1;\n                v162 = *(char *)v171;\n                v163 = v172;\n            }\n        } else {\n            while (true) {\n                int64_t v173 = v166;\n                unsigned char v174 = v165;\n                int64_t v175 = v164;\n                int64_t v176; // 0x4017d0\n                if (v174 < 32) {\n                    if (v14 == 1 || v174 != 9) {\n                        // 0x401f08\n                        v168 = v175;\n                        v167 = v173;\n                        if (v174 == 10) {\n                            // break -> 0x401dd8\n                            break;\n                        }\n                        // 0x401f12\n                        *(char *)v173 = 94;\n                        *(char *)(v173 + 1) = v174 + 64;\n                        v176 = v173 + 2;\n                    } else {\n                        // 0x401d94\n                        *(char *)v173 = 9;\n                        v176 = v173 + 1;\n                    }\n                } else {\n                    if (v174 < 127) {\n                        // 0x401d66\n                        *(char *)v173 = v174;\n                        v176 = v173 + 1;\n                    } else {\n                        if (v174 == 127) {\n                            // 0x401ef0\n                            *(int16_t *)v173 = 0x3f5e;\n                            v176 = v173 + 2;\n                        } else {\n                            // 0x401daa\n                            *(int16_t *)v173 = 0x2d4d;\n                            if (v174 < 160) {\n                                // 0x401ed8\n                                *(char *)(v173 + 2) = 94;\n                                *(char *)(v173 + 3) = v174 - 64;\n                                v176 = v173 + 4;\n                            } else {\n                                if (v174 == -1) {\n                                    // 0x401ec0\n                                    *(int16_t *)(v173 + 2) = 0x3f5e;\n                                    v176 = v173 + 4;\n                                } else {\n                                    // 0x401dc7\n                                    *(char *)(v173 + 2) = v174 ^ -128;\n                                    v176 = v173 + 3;\n                                }\n                            }\n                        }\n                    }\n                }\n                // 0x401d6d\n                v164 = v175 + 1;\n                v165 = *(char *)v175;\n                v166 = v176;\n            }\n        }\n        // 0x401dd8\n        v34 = v150;\n        v43 = v149;\n        v36 = v159;\n        v46 = v168;\n        v38 = v146;\n        v40 = v167;\n        v60 = v150;\n        v58 = v149;\n        v56 = v159;\n        v54 = v168;\n        v52 = v146;\n        v50 = v167;\n        if (v158 > v167) {\n            goto lab_0x401c73;\n        } else {\n            goto lab_0x401de7;\n        }\n    }\n  lab_0x40223a:;\n    char v177 = v77; // 0x40223f\n    int32_t v178; // 0x4017d0\n    int32_t v179 = v178 & v79; // 0x40223f\n    int64_t v180 = v83; // 0x40223f\n    int32_t v181; // 0x4017d0\n    int32_t v182 = v181; // 0x40223f\n    int64_t v183; // 0x4017d0\n    int64_t v184 = v183; // 0x40223f\n    int64_t v185; // 0x4017d0\n    int64_t v186 = v185; // 0x40223f\n    int64_t v187; // 0x4017d0\n    int64_t v188 = v187; // 0x40223f\n    int64_t v189; // 0x4017d0\n    int64_t v190 = v189; // 0x40223f\n    goto lab_0x401ab9;\n  lab_0x402340:\n    // 0x402340\n    error(1, *__errno_location(), dcgettext(NULL, \"write error\", 5));\n    goto lab_0x40236a;\n    // 0x401848\n    goto lab_0x401848_2;\n  lab_0x401af8:;\n    int64_t v257 = *(int64_t *)(8 * v27 + a2); // 0x401b02\n    g41 = (char *)v257;\n    v29 = v25;\n    v30 = v26;\n    v31 = v27;\n    int32_t v258; // 0x4017d0\n    int32_t v259 = v258; // 0x401b06\n    int64_t v260; // 0x4017d0\n    int64_t v261 = v260; // 0x401b06\n    int64_t v262; // 0x4017d0\n    int64_t v263 = v262; // 0x401b06\n    v32 = v257;\n    v33 = v28;\n    int64_t v264; // 0x4017d0\n    int64_t v265 = v264; // 0x401b06\n    goto lab_0x401b0d;\n  lab_0x401b0d:\n    // 0x401b0d\n    v64 = v2 < 0x2000000000000001 ? v2 : 0x20000;\n    int64_t v243 = v265;\n    int64_t v242 = v33;\n    int64_t path = v32;\n    int64_t v266 = v263;\n    int64_t v241 = v261;\n    int32_t v240 = v259;\n    v83 = v31;\n    v79 = v30;\n    char v267 = v29;\n    bool v268; // 0x4017d0\n    int64_t v216 = v268 ? -1 : 1;\n    int64_t v269 = 2; // 0x4017d0\n    int64_t v270 = path;\n    int64_t v271 = (int64_t)&g9;\n    unsigned char v272 = *(char *)v270; // 0x401b1a\n    char v273 = *(char *)v271; // 0x401b1a\n    char v274 = v273; // 0x401b1a\n    bool v275 = false; // 0x401b1a\n    while (v272 == v273) {\n        int64_t v276 = v269 - 1; // 0x401b1a\n        int64_t v277 = v271 + v216; // 0x401b1a\n        int64_t v278 = v270 + v216; // 0x401b1a\n        v269 = v276;\n        v274 = v272;\n        v275 = true;\n        if (v276 == 0) {\n            // break -> \n            break;\n        }\n        v270 = v278;\n        v271 = v277;\n        v272 = *(char *)v270;\n        v273 = *(char *)v271;\n        v274 = v273;\n        v275 = false;\n    }\n    unsigned char v279 = v274;\n    int32_t v280 = (int32_t)!((v272 < v279 | v275)) - (int32_t)(v272 < v279); // 0x401b20\n    int32_t v281; // 0x4017d0\n    int64_t v233; // 0x4017d0\n    int64_t v232; // 0x4017d0\n    char v282; // 0x4017d0\n    char v227; // 0x4017d0\n    int64_t v230; // 0x4017d0\n    int64_t v231; // 0x4017d0\n    int64_t v228; // 0x4017d0\n    int32_t v229; // 0x4017d0\n    if (v280 != 0) {\n        int32_t fd = open((char *)path, O_RDONLY); // 0x401fee\n        g40 = fd;\n        v281 = fd;\n        v282 = v267;\n        v227 = v267;\n        v228 = v83;\n        v229 = v240;\n        v230 = v241;\n        v231 = v266;\n        v232 = v242;\n        v233 = v243;\n        if (fd >= 0) {\n            goto lab_0x401b3f;\n        } else {\n            goto lab_0x402003;\n        }\n    } else {\n        // 0x401b30\n        g40 = 0;\n        v281 = v280;\n        v282 = 1;\n        goto lab_0x401b3f;\n    }\n  lab_0x401b3f:\n    // 0x401b3f\n    v77 = v282;\n    int32_t fd2 = v281;\n    int64_t v198; // 0x4017d0\n    int64_t v197; // 0x4017d0\n    char v191; // 0x4017d0\n    int32_t v192; // 0x4017d0\n    int64_t v195; // 0x4017d0\n    int64_t v196; // 0x4017d0\n    int64_t v193; // 0x4017d0\n    int32_t v194; // 0x4017d0\n    if (__fxstat(1, fd2, (struct stat *)&v20) < 0) {\n        int64_t v283 = function_4044d0(0, 3, (int64_t)g41); // 0x40210c\n        error(0, *__errno_location(), \"%s\", (char *)v283);\n        v191 = v77;\n        v192 = 0;\n        v193 = v83;\n        v194 = v240;\n        v195 = v241;\n        v196 = v266;\n        v197 = v242;\n        v198 = v243;\n        goto lab_0x401ac3;\n    } else {\n        // 0x401b5b\n        posix_fadvise(fd2, 0, 0, POSIX_FADV_SEQUENTIAL);\n        int32_t v284; // 0x4017d0\n        if ((v284 & 0xf000) == 0x8000) {\n            // 0x402070\n            if (v20 != v24) {\n                goto lab_0x401ba3;\n            } else {\n                // 0x40209c\n                if (v1 > (int64_t)lseek(g40, 0, SEEK_CUR)) {\n                    // 0x4020bc\n                    function_4044d0(0, 3, (int64_t)g41);\n                    error(0, (int32_t)\"%s: input file is output file\" ^ (int32_t)\"%s: input file is output file\", dcgettext(NULL, \"%s: input file is output file\", 5));\n                    v191 = v77;\n                    v192 = 0;\n                    v193 = v83;\n                    v194 = v240;\n                    v195 = v241;\n                    v196 = v266;\n                    v197 = v242;\n                    v198 = v243;\n                    goto lab_0x401ac3;\n                } else {\n                    goto lab_0x401ba3;\n                }\n            }\n        } else {\n            goto lab_0x401ba3;\n        }\n    }\n  lab_0x402003:;\n    int64_t v285 = function_4044d0(0, 3, (int64_t)g41); // 0x402011\n    error(0, *__errno_location(), \"%s\", (char *)v285);\n    char v219 = v227; // 0x402036\n    int32_t v220 = 0; // 0x402036\n    int64_t v221 = v228; // 0x402036\n    int32_t v222 = v229; // 0x402036\n    int64_t v223 = v230; // 0x402036\n    int64_t v224 = v231; // 0x402036\n    int64_t v225 = v232; // 0x402036\n    int64_t v226 = v233; // 0x402036\n    goto lab_0x401ae3;\n  lab_0x401ae3:;\n    int64_t v286 = v226;\n    int64_t v287 = v224;\n    int64_t v288 = v223;\n    int32_t v289 = v222;\n    int32_t v290 = v220;\n    char v291 = v219;\n    int64_t v292 = v221 + 1; // 0x401ae3\n    v25 = v291;\n    v26 = v290;\n    v27 = v292;\n    v258 = v289;\n    v260 = v288;\n    v262 = v287;\n    v28 = v225;\n    v264 = v286;\n    if (v3 > v292) {\n        goto lab_0x401af8;\n    } else {\n        if (v291 == 0 || close(0) >= 0) {\n            // 0x402141\n            return v290 % 256 ^ 1;\n        }\n        char * format2 = dcgettext(NULL, \"closing standard input\", 5); // 0x402291\n        error(1, *__errno_location(), format2);\n        v78 = v291;\n        v80 = v290;\n        v84 = v292;\n        v85 = v289;\n        v81 = v288;\n        v82 = v287;\n        err_num = &g56;\n        v76 = (int64_t)format2;\n        v75 = v286;\n        goto lab_0x4022af_2;\n    }\n  lab_0x401ac3:;\n    int64_t v199 = v198;\n    int64_t v200 = v197;\n    int64_t v201 = v196;\n    int64_t v202 = v195;\n    int32_t v203 = v194;\n    int64_t v204 = v193;\n    int32_t v205 = v192;\n    char v206 = v191;\n    int64_t v207 = 2; // 0x4017d0\n    int64_t v208 = (int64_t)g41;\n    int64_t v209 = (int64_t)&g9;\n    unsigned char v210 = *(char *)v208; // 0x401ad4\n    char v211 = *(char *)v209; // 0x401ad4\n    char v212 = v211; // 0x401ad4\n    bool v213 = false; // 0x401ad4\n    while (v210 == v211) {\n        int64_t v214 = v207 - 1; // 0x401ad4\n        int64_t v215 = v209 + v216; // 0x401ad4\n        int64_t v217 = v208 + v216; // 0x401ad4\n        v207 = v214;\n        v212 = v210;\n        v213 = true;\n        if (v214 == 0) {\n            // break -> \n            break;\n        }\n        v208 = v217;\n        v209 = v215;\n        v210 = *(char *)v208;\n        v211 = *(char *)v209;\n        v212 = v211;\n        v213 = false;\n    }\n    unsigned char v218 = v212;\n    v219 = v206;\n    v220 = v205;\n    v221 = v204;\n    v222 = v203;\n    v223 = v202;\n    v224 = v201;\n    v225 = v200;\n    v226 = v199;\n    if ((v210 >= v218 && !v213) != v210 < v218) {\n        // 0x40205b\n        v219 = v206;\n        v220 = v205;\n        v221 = v204;\n        v222 = v203;\n        v223 = v202;\n        v224 = v201;\n        v225 = v200;\n        v226 = v199;\n        v227 = v206;\n        v228 = v204;\n        v229 = v203;\n        v230 = v202;\n        v231 = v201;\n        v232 = v200;\n        v233 = v199;\n        if (close(g40) >= 0) {\n            goto lab_0x401ae3;\n        } else {\n            goto lab_0x402003;\n        }\n    } else {\n        goto lab_0x401ae3;\n    }\n  lab_0x401ba3:;\n    uint64_t v234 = (int64_t)v22;\n    int64_t v235 = v234 - 1; // 0x401bad\n    if ((v13 || v12) != 0) {\n        goto lab_0x401bc9;\n    } else {\n        if ((v15 || (char)v14 || v11) == 0) {\n            int64_t v236 = function_404cd0(v235 + v64); // 0x4021aa\n            uint64_t v237 = v236 + v235; // 0x4021b1\n            int64_t v238 = v237 - v237 % v234; // 0x4021c2\n            int64_t v239 = function_404670((int64_t)g40, v238, v64); // 0x4021fe\n            while (v239 != -1) {\n                // 0x4021d0\n                v181 = v240;\n                v183 = v241;\n                v185 = v236;\n                v187 = v242;\n                v189 = v243;\n                v178 = 1;\n                if (v239 == 0) {\n                    goto lab_0x40223a;\n                }\n                // 0x4021d9\n                if (v239 != function_4029b0(1, v238, v239)) {\n                    goto lab_0x402340;\n                }\n                v239 = function_404670((int64_t)g40, v238, v64);\n            }\n            int64_t v244 = function_4044d0(0, 3, (int64_t)g41); // 0x40221a\n            error(0, *__errno_location(), \"%s\", (char *)v244);\n            v181 = v240;\n            v183 = v241;\n            v185 = v236;\n            v187 = v242;\n            v189 = v243;\n            v178 = 0;\n            goto lab_0x40223a;\n        } else {\n            goto lab_0x401bc9;\n        }\n    }\n  lab_0x401bc9:;\n    int64_t v245 = v64 + v234;\n    v86 = function_404cd0(v245);\n    v87 = function_404cd0(4 * v64 + 18 + v245);\n    uint64_t v246 = v87 + v235; // 0x401bfb\n    uint64_t v247 = v86 + v235; // 0x401c04\n    v88 = v242;\n    v62 = v246 - v246 % v234;\n    v101 = v247 - v247 % v234;\n    v158 = v62 + v64;\n    v115 = v101 + 1;\n    v159 = v242 & 0xffffffff;\n    v67 = (int64_t *)v62;\n    v132 = v10 == 1 | v13 == 0;\n    v152 = 1;\n    v153 = v101;\n    v154 = g39;\n    v155 = v115;\n    v156 = v243;\n    v157 = v62;\n    while (true) {\n      lab_0x401c68:\n        // 0x401c68\n        v34 = v152;\n        v43 = v153;\n        v36 = v154;\n        v46 = v155;\n        v38 = v156;\n        v40 = v157;\n        v60 = v152;\n        v58 = v153;\n        v56 = v154;\n        v54 = v155;\n        v52 = v156;\n        v50 = v157;\n        if (v158 > v157) {\n            goto lab_0x401c73;\n        } else {\n            goto lab_0x401de7;\n        }\n    }\n  lab_0x402244:;\n    char * format = dcgettext(NULL, \"write error\", 5); // 0x402250\n    error(1, *__errno_location(), format);\n    v181 = v88;\n    v183 = v87;\n    v185 = v86;\n    v187 = (int64_t)format;\n    v189 = v53;\n    v178 = 1;\n    goto lab_0x40223a;\n  lab_0x4022af_2:\n    // 0x4022af\n    function_404400(4, (int64_t)g41);\n    error(0, *(int32_t *)err_num, dcgettext(NULL, \"cannot do ioctl on %s\", 5));\n    g39 = v76;\n    char v248 = v78; // 0x402307\n    int32_t v249 = v80; // 0x402307\n    int64_t v250 = v84; // 0x402307\n    int32_t v251 = v85; // 0x402307\n    int64_t v252 = v81; // 0x402307\n    int64_t v253 = v82; // 0x402307\n    int64_t v254 = v85; // 0x402307\n    int64_t v255 = v75 % 256; // 0x402307\n    goto lab_0x401aaa;\n  lab_0x401aaa:\n    // 0x401aaa\n    free((int64_t *)v252);\n    v177 = v248;\n    v179 = v249 & (int32_t)v255;\n    v180 = v250;\n    v182 = v251;\n    v184 = v252;\n    v186 = v253;\n    v188 = v254;\n    v190 = v255;\n    goto lab_0x401ab9;\n  lab_0x401ab9:\n    // 0x401ab9\n    free((int64_t *)v186);\n    v191 = v177;\n    v192 = 0x1000000 * v179 >> 24;\n    v193 = v180;\n    v194 = v182;\n    v195 = v184;\n    v196 = v186;\n    v197 = v188;\n    v198 = v190;\n    goto lab_0x401ac3;\n  lab_0x401aa1:\n    // 0x401aa1\n    g39 = v71;\n    v248 = v77;\n    v249 = v79;\n    v250 = v83;\n    v251 = v88;\n    v252 = v87;\n    v253 = v86;\n    v254 = v159;\n    v255 = 0;\n    goto lab_0x401aaa;\n  lab_0x402177:\n    // 0x402177\n    function_4024f0(1);\n    v110 = v109;\n    v104 = v103;\n    goto lab_0x40217c;\n  lab_0x40217c:;\n    int64_t v256 = function_4029b0(1, v62, v104); // 0x402187\n    v108 = v110;\n    v109 = v110;\n    v103 = v104;\n    if (v104 == v256) {\n        goto lab_0x40204a;\n    } else {\n        goto lab_0x402177;\n    }\n  lab_0x40204a:\n    // 0x40204a\n    g39 = v108;\n    v248 = v77;\n    v249 = v79;\n    v250 = v83;\n    v251 = v88;\n    v252 = v87;\n    v253 = v86;\n    v254 = v159;\n    v255 = 1;\n    goto lab_0x401aaa;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4023a0",
            "funcEndAddr": "4023cb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4023a0\n    int64_t v1; // 0x4023a0\n    __libc_start_main(0x4017d0, (int32_t)a4, (char **)&v1, (void (*)())0x406500, (void (*)())0x406560, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023cb",
            "funcStartAddr": "4023cb",
            "funcEndAddr": "4023ea",
            "decompiledFuncCode": "int64_t function_4023cb(void) {\n    // 0x4023cb\n    return &g33;\n}\n"
        },
        {
            "funcName": "function_4023ea",
            "funcStartAddr": "4023ea",
            "funcEndAddr": "402421",
            "decompiledFuncCode": "int64_t function_4023ea(void) {\n    // 0x4023ea\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402421",
            "funcStartAddr": "402421",
            "funcEndAddr": "402478",
            "decompiledFuncCode": "int64_t function_402421(void) {\n    // 0x402421\n    if (g37 != 0) {\n        // 0x402477\n        int64_t result; // 0x402421\n        return result;\n    }\n    int64_t v1 = g38; // 0x402454\n    int64_t result2; // 0x402466\n    if (g38 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x402466\n        result2 = function_4023cb();\n        g37 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x402456\n        v1++;\n    }\n    // 0x40244a\n    g38 = v1;\n    // 0x402466\n    result2 = function_4023cb();\n    g37 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402478",
            "funcStartAddr": "402478",
            "funcEndAddr": "40247d",
            "decompiledFuncCode": "int64_t function_402478(void) {\n    // 0x402478\n    return function_4023ea();\n}\n"
        },
        {
            "funcName": "function_402480",
            "funcStartAddr": "402480",
            "funcEndAddr": "4024ec",
            "decompiledFuncCode": "int64_t function_402480(void) {\n    int64_t v1 = (int64_t)g18; // 0x402480\n    int64_t result = (int64_t)&g22;\n    char * v2 = (char *)result;\n    unsigned char v3 = *v2; // 0x40249d\n    int64_t v4; // 0x402480\n    while (v3 > 56) {\n        int64_t v5 = result - 1; // 0x402490\n        *v2 = 48;\n        if (v5 < v1) {\n            if (g18 > (char (*)[3])&g20) {\n                // 0x4024b9\n                *(char *)&g17 = 49;\n                *(int64_t *)&g18 = (int64_t)&g17;\n                v4 = &g17;\n                goto lab_0x4024c8;\n            } else {\n                // 0x4024e0\n                g20[0] = 62;\n                v4 = v1;\n                goto lab_0x4024c8;\n            }\n        }\n        result = v5;\n        v2 = (char *)result;\n        v3 = *v2;\n    }\n    // 0x4024a5\n    *v2 = v3 + 1;\n    return result;\n  lab_0x4024c8:;\n    int64_t result2 = (int64_t)g19; // 0x4024c8\n    if (v4 >= result2) {\n        // 0x4024df\n        return result2;\n    }\n    int64_t result3 = result2 - 1; // 0x4024d4\n    *(int64_t *)&g19 = result3;\n    // 0x4024df\n    return result3;\n}\n"
        },
        {
            "funcName": "function_4024f0",
            "funcStartAddr": "4024f0",
            "funcEndAddr": "402520",
            "decompiledFuncCode": "int64_t function_4024f0(int64_t a1) {\n    // 0x4024f0\n    error(1, *__errno_location(), dcgettext(NULL, \"write error\", 5));\n    return &g56;\n}\n"
        },
        {
            "funcName": "function_402520",
            "funcStartAddr": "402520",
            "funcEndAddr": "4028a5",
            "decompiledFuncCode": "int64_t function_402520(int32_t status) {\n    // 0x402520\n    if (status != 0) {\n        // 0x40253a\n        __fprintf_chk(g36, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40255f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402566\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Concatenate FILE(s) to standard output.\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"\\n  -A, --show-all           equivalent to -vET\\n  -b, --number-nonblank    number nonempty output lines, overrides -n\\n  -e                       equivalent to -vE\\n  -E, --show-ends          display $ at end of each line\\n  -n, --number             number all output lines\\n  -s, --squeeze-blank      suppress repeated empty output lines\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"  -t                       equivalent to -vT\\n  -T, --show-tabs          display TAB characters as ^I\\n  -u                       (ignored)\\n  -v, --show-nonprinting   use ^ and M- notation, except for LFD and TAB\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g34);\n    __printf_chk(1, dcgettext(NULL, \"\\nExamples:\\n  %s f - g  Output f's contents, then standard input, then g's contents.\\n  %s        Copy standard input to standard output.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x402683\n    bool v2; // 0x402520\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402708\n    int64_t v6 = *(int64_t *)v5; // 0x40270c\n    int64_t v7 = 4; // 0x402712\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"cat\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x40271e\n        char v11 = *(char *)v9; // 0x40271e\n        char v12 = v11; // 0x40271e\n        bool v13 = false; // 0x40271e\n        while (v10 == v11) {\n            // 0x402714\n            v7--;\n            int64_t v14 = v9 + v3; // 0x40271e\n            int64_t v15 = v8 + v3; // 0x40271e\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x40272a\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 4;\n    }\n    // 0x40272a\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x40283c;\n        } else {\n            // 0x402826\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40287b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40278c;\n            } else {\n                goto lab_0x40283c;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40278c;\n        } else {\n            // 0x402772\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40287b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40278c;\n            } else {\n                goto lab_0x40278c;\n            }\n        }\n    }\n  lab_0x40283c:\n    // 0x40283c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4027cc\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40255f\n    exit(status);\n    // UNREACHABLE\n  lab_0x40278c:\n    // 0x40278c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4027cc\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40255f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4028b0",
            "funcStartAddr": "4028b0",
            "funcEndAddr": "4028b8",
            "decompiledFuncCode": "int64_t function_4028b0(int64_t a1) {\n    // 0x4028b0\n    g43 = a1;\n    int64_t result; // 0x4028b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4028c0",
            "funcStartAddr": "4028c0",
            "funcEndAddr": "4028c8",
            "decompiledFuncCode": "int64_t function_4028c0(int64_t a1) {\n    // 0x4028c0\n    g42 = a1;\n    int64_t result; // 0x4028c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4028d0",
            "funcStartAddr": "4028d0",
            "funcEndAddr": "40296e",
            "decompiledFuncCode": "int64_t function_4028d0(void) {\n    // 0x4028d0\n    int32_t * err_num; // 0x4028e6\n    if ((int32_t)function_405db0((int64_t)g34) == 0) {\n        goto lab_0x4028fc;\n    } else {\n        // 0x4028e6\n        err_num = __errno_location();\n        if (g42 == 0) {\n            goto lab_0x402913;\n        } else {\n            // 0x4028f7\n            if (*err_num != 32) {\n                goto lab_0x402913;\n            } else {\n                goto lab_0x4028fc;\n            }\n        }\n    }\n  lab_0x4028fc:;\n    int64_t result = function_405db0((int64_t)g36); // 0x402903\n    if ((int32_t)result == 0) {\n        // 0x40290c\n        return result;\n    }\n    // 0x40294e\n    _exit(g24);\n    // UNREACHABLE\n  lab_0x402913:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40291f\n    if (g43 == 0) {\n        // 0x402959\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402933\n        error(0, *err_num, \"%s: %s\", (char *)function_4044a0((int64_t)g43), v1);\n    }\n    // 0x40294e\n    _exit(g24);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402970",
            "funcStartAddr": "402970",
            "funcEndAddr": "402975",
            "decompiledFuncCode": "int64_t function_402970(int64_t fd, int32_t offset, int32_t length, int64_t advice) {\n    // 0x402970\n    return posix_fadvise((int32_t)fd, offset, length, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_402980",
            "funcStartAddr": "402980",
            "funcEndAddr": "4029a1",
            "decompiledFuncCode": "int64_t function_402980(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x402980\n    if (stream == 0) {\n        // 0x4029a0\n        int64_t result; // 0x402980\n        return result;\n    }\n    // 0x402985\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_4029b0",
            "funcStartAddr": "4029b0",
            "funcEndAddr": "402a26",
            "decompiledFuncCode": "int64_t function_4029b0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4029b0\n    if (a3 == 0) {\n        // 0x4029f4\n        return 0;\n    }\n    int64_t v1 = a3; // 0x4029cb\n    int64_t v2 = a2; // 0x4029cb\n    int64_t result = 0;\n    int64_t v3 = function_4046d0(a1 & 0xffffffff, v2, v1); // 0x4029e9\n    int64_t result2 = result; // 0x4029f2\n    while (v3 != -1) {\n        if (v3 == 0) {\n            // 0x402a08\n            *__errno_location() = 28;\n            return result;\n        }\n        int64_t v4 = v3 + result; // 0x4029d5\n        v1 -= v3;\n        v2 += v3;\n        result2 = v4;\n        if (v1 == 0) {\n            // break -> 0x4029f4\n            break;\n        }\n        result = v4;\n        v3 = function_4046d0(a1 & 0xffffffff, v2, v1);\n        result2 = result;\n    }\n    // 0x4029f4\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402a30",
            "funcStartAddr": "402a30",
            "funcEndAddr": "402ac9",
            "decompiledFuncCode": "int64_t function_402a30(int64_t str) {\n    // 0x402a30\n    if (str == 0) {\n        // 0x402aa9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g36);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x402a3e\n    int64_t result = (int64_t)found_char_pos; // 0x402a3e\n    if (found_char_pos == NULL) {\n        // 0x402a99\n        g44 = str;\n        g35 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402a48\n    if (v1 - str < 7) {\n        // 0x402a99\n        g44 = str;\n        g35 = str;\n        return result;\n    }\n    // 0x402a58\n    bool v2; // 0x402a30\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402a30\n    int64_t v5 = result - 6; // 0x402a30\n    int64_t v6 = 7; // 0x402a66\n    unsigned char v7 = *(char *)v5; // 0x402a66\n    char v8 = *(char *)v4; // 0x402a66\n    char v9 = v8; // 0x402a66\n    bool v10 = false; // 0x402a66\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402a70\n    int64_t v13 = v1; // 0x402a70\n    int64_t v14 = 3; // 0x402a70\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402a99\n        g44 = str;\n        g35 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402a82\n    char v16 = *(char *)v12; // 0x402a82\n    char v17 = v16; // 0x402a82\n    bool v18 = false; // 0x402a82\n    while (v15 == v16) {\n        // 0x402a72\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x402a8c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x402a8e\n        v20 = result + 4;\n        g33 = v20;\n    }\n    // 0x402a99\n    g44 = v20;\n    g35 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ad0",
            "funcStartAddr": "402ad0",
            "funcEndAddr": "402bc2",
            "decompiledFuncCode": "int64_t function_402ad0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402ae4\n    int64_t result = (int64_t)v1; // 0x402ae4\n    if (result != a1) {\n        // 0x402af1\n        return result;\n    }\n    int64_t v2 = function_405e70(); // 0x402b00\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402bb6\n    if (v3 == 85) {\n        // 0x402b10\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402ba8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x402b3e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x402b4b\n        // 0x402af1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402ba8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x402b8d\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x402b9a\n    // 0x402af1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402bd0",
            "funcStartAddr": "402bd0",
            "funcEndAddr": "402c27",
            "decompiledFuncCode": "int64_t function_402bd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402bd0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402c18\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402c27",
            "funcStartAddr": "402c27",
            "funcEndAddr": "403df1",
            "decompiledFuncCode": "int64_t function_402c27(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402c71\n    int64_t v3 = 0; // 0x402c71\n    int64_t v4; // 0x402c27\n    int64_t v5; // 0x402c27\n    int64_t v6; // 0x402c27\n    int64_t v7; // 0x402c27\n    int64_t v8; // 0x402c27\n    int64_t v9; // 0x402c27\n    int64_t v10; // 0x402c27\n    int64_t v11; // 0x402c27\n    int64_t v12; // 0x402c27\n    int64_t v13; // 0x402c27\n    int64_t v14; // 0x402c27\n    int64_t v15; // 0x402c27\n    int64_t v16; // 0x402c27\n    int64_t v17; // 0x402c27\n    int64_t v18; // 0x402c27\n    int64_t result; // 0x402c27\n    int64_t v19; // 0x402c27\n    int32_t wc; // bp+132, 0x402c27\n    int64_t ps; // bp+136, 0x402c27\n    char v20; // 0x4031e0\n    int64_t v21; // 0x4031e0\n    int64_t v22; // 0x403588\n    int64_t v23; // 0x402c27\n    int64_t v24; // 0x4035a7\n    int32_t v25; // 0x402c27\n    while (true) {\n      lab_0x402c78_2:\n        // 0x402c78\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402c27\n        int64_t v27; // 0x402cac\n        while (true) {\n          lab_0x402c78:\n            // 0x402c78\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402c83\n            if (v15 == -1) {\n                // 0x402c85\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402c93\n            if (v28) {\n                // break (via goto) -> 0x4033f8\n                goto lab_0x4033f8;\n            }\n            // 0x402c9c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g55 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40328b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402dd1;\n                    }\n                    // 0x4036ad\n                    v26 = v5 + 1;\n                    goto lab_0x402c78;\n                }\n                case 7: {\n                    goto lab_0x402dd1;\n                }\n                case 8: {\n                    goto lab_0x402dd1;\n                }\n                case 9: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402dd1;\n                }\n                case 12: {\n                    goto lab_0x402dd1;\n                }\n                case 13: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x402d9d;\n                }\n                case 36: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402dd1;\n                }\n                case 38: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402dd1;\n                }\n                case 44: {\n                    goto lab_0x402dd1;\n                }\n                case 45: {\n                    goto lab_0x402dd1;\n                }\n                case 46: {\n                    goto lab_0x402dd1;\n                }\n                case 47: {\n                    goto lab_0x402dd1;\n                }\n                case 48: {\n                    goto lab_0x402dd1;\n                }\n                case 49: {\n                    goto lab_0x402dd1;\n                }\n                case 50: {\n                    goto lab_0x402dd1;\n                }\n                case 51: {\n                    goto lab_0x402dd1;\n                }\n                case 52: {\n                    goto lab_0x402dd1;\n                }\n                case 53: {\n                    goto lab_0x402dd1;\n                }\n                case 54: {\n                    goto lab_0x402dd1;\n                }\n                case 55: {\n                    goto lab_0x402dd1;\n                }\n                case 56: {\n                    goto lab_0x402dd1;\n                }\n                case 57: {\n                    goto lab_0x402dd1;\n                }\n                case 58: {\n                    goto lab_0x402dd1;\n                }\n                case 59: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402dd1;\n                }\n                case 66: {\n                    goto lab_0x402dd1;\n                }\n                case 67: {\n                    goto lab_0x402dd1;\n                }\n                case 68: {\n                    goto lab_0x402dd1;\n                }\n                case 69: {\n                    goto lab_0x402dd1;\n                }\n                case 70: {\n                    goto lab_0x402dd1;\n                }\n                case 71: {\n                    goto lab_0x402dd1;\n                }\n                case 72: {\n                    goto lab_0x402dd1;\n                }\n                case 73: {\n                    goto lab_0x402dd1;\n                }\n                case 74: {\n                    goto lab_0x402dd1;\n                }\n                case 75: {\n                    goto lab_0x402dd1;\n                }\n                case 76: {\n                    goto lab_0x402dd1;\n                }\n                case 77: {\n                    goto lab_0x402dd1;\n                }\n                case 78: {\n                    goto lab_0x402dd1;\n                }\n                case 79: {\n                    goto lab_0x402dd1;\n                }\n                case 80: {\n                    goto lab_0x402dd1;\n                }\n                case 81: {\n                    goto lab_0x402dd1;\n                }\n                case 82: {\n                    goto lab_0x402dd1;\n                }\n                case 83: {\n                    goto lab_0x402dd1;\n                }\n                case 84: {\n                    goto lab_0x402dd1;\n                }\n                case 85: {\n                    goto lab_0x402dd1;\n                }\n                case 86: {\n                    goto lab_0x402dd1;\n                }\n                case 87: {\n                    goto lab_0x402dd1;\n                }\n                case 88: {\n                    goto lab_0x402dd1;\n                }\n                case 89: {\n                    goto lab_0x402dd1;\n                }\n                case 90: {\n                    goto lab_0x402dd1;\n                }\n                case 91: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402dd1;\n                }\n                case 94: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402dd1;\n                }\n                case 96: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402dd1;\n                }\n                case 98: {\n                    goto lab_0x402dd1;\n                }\n                case 99: {\n                    goto lab_0x402dd1;\n                }\n                case 100: {\n                    goto lab_0x402dd1;\n                }\n                case 101: {\n                    goto lab_0x402dd1;\n                }\n                case 102: {\n                    goto lab_0x402dd1;\n                }\n                case 103: {\n                    goto lab_0x402dd1;\n                }\n                case 104: {\n                    goto lab_0x402dd1;\n                }\n                case 105: {\n                    goto lab_0x402dd1;\n                }\n                case 106: {\n                    goto lab_0x402dd1;\n                }\n                case 107: {\n                    goto lab_0x402dd1;\n                }\n                case 108: {\n                    goto lab_0x402dd1;\n                }\n                case 109: {\n                    goto lab_0x402dd1;\n                }\n                case 110: {\n                    goto lab_0x402dd1;\n                }\n                case 111: {\n                    goto lab_0x402dd1;\n                }\n                case 112: {\n                    goto lab_0x402dd1;\n                }\n                case 113: {\n                    goto lab_0x402dd1;\n                }\n                case 114: {\n                    goto lab_0x402dd1;\n                }\n                case 115: {\n                    goto lab_0x402dd1;\n                }\n                case 116: {\n                    goto lab_0x402dd1;\n                }\n                case 117: {\n                    goto lab_0x402dd1;\n                }\n                case 118: {\n                    goto lab_0x402dd1;\n                }\n                case 119: {\n                    goto lab_0x402dd1;\n                }\n                case 120: {\n                    goto lab_0x402dd1;\n                }\n                case 121: {\n                    goto lab_0x402dd1;\n                }\n                case 122: {\n                    goto lab_0x402dd1;\n                }\n                case 123: {\n                    goto lab_0x402d75;\n                }\n                case 124: {\n                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402d75;\n                }\n                case 126: {\n                    goto lab_0x402d9d;\n                }\n                default: {\n                    goto lab_0x403175;\n                }\n            }\n        }\n      lab_0x403175:\n        if (v23 != 1) {\n            // 0x4034e0\n            ps = 0;\n            int64_t len = v15; // 0x4034f0\n            if (v15 == -1) {\n                // 0x4034f2\n                len = strlen((char *)str);\n            }\n            // 0x40351e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40357f:\n                // 0x40357f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403584\n                int64_t v30 = v29 + str;\n                v24 = function_405d30(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x403afa_2;\n                    }\n                    case -1: {\n                        goto lab_0x403afa_2;\n                    }\n                    case -2: {\n                        // 0x403bdd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403c17\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x403c1a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403c27\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403c20\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x403afa\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x403afa_2;\n                    }\n                    case 1: {\n                        goto lab_0x403550;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4035fc\n                        char v34 = *(char *)v33; // 0x40360d\n                        unsigned char v35; // 0x402c27\n                        if (v34 < 125) {\n                            // 0x403618\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40362f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403600\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40360d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403618\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40362f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403600\n                            v33++;\n                        }\n                        goto lab_0x403550;\n                    }\n                }\n            }\n            goto lab_0x403afa_2;\n        } else {\n            // 0x4031c4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402dd1;\n        }\n    }\n  lab_0x4033f8:\n    // 0x4033f8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x403cfa\n        if (v8 > result) {\n            // 0x403d03\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403027\n        return result;\n    }\n    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402dd1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402de0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402fea_2;\n        }\n    }\n    int64_t v39 = result; // 0x402ee1\n    char v40 = v20; // 0x402ee1\n    int64_t v41 = v38; // 0x402ee1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402ee1\n    int64_t v43 = v36; // 0x402ee1\n    goto lab_0x402e5d;\n  lab_0x402fea_2:\n    // 0x403027\n    return function_402bd0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403afa_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402dd1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4036ce\n        int64_t v50 = v5 + 1; // 0x4037b1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x4037b8\n        char v52 = v20; // 0x4037b8\n        int64_t v53 = result; // 0x4037b8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403781\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403785\n            int64_t v56 = v54 + 1; // 0x40378a\n            int64_t v57 = v51 + 1; // 0x4037b1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40377c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403781\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403785\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x402e5d;\n    }\n  lab_0x403550:\n    // 0x403550\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40356f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403572\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x403afa\n        goto lab_0x403afa_2;\n    }\n    goto lab_0x40357f;\n  lab_0x402d9d:\n    // 0x402d9d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402fea_2;\n    }\n    goto lab_0x402dd1;\n  lab_0x402d75:;\n    bool v60 = v15 == 1; // 0x402d80\n    if (v15 == -1) {\n        // 0x402d82\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x402d8e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402dd1;\n    } else {\n        goto lab_0x402d9d;\n    }\n  lab_0x402e5d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402e62\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402e66\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402c78_2;\n}\n"
        },
        {
            "funcName": "function_403e00",
            "funcStartAddr": "403e00",
            "funcEndAddr": "403f9e",
            "decompiledFuncCode": "int64_t function_403e00(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403e02\n    int32_t * v3 = __errno_location(); // 0x403e1c\n    int64_t v4 = (int64_t)g26; // 0x403e21\n    int32_t v5 = *v3; // 0x403e2b\n    int64_t v6 = v4; // 0x403e41\n    if (v2 >= (int64_t)*(int32_t *)&g29) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403f99\n            function_404f20(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403e50\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403e57\n        int64_t v9; // 0x403e00\n        if (g26 == &g27) {\n            int64_t v10 = function_404d30(0, v8); // 0x403f7a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g27); // 0x403f7f\n            *(int64_t *)&g26 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404d30(v4, v8); // 0x403e6b\n            *(int64_t *)&g26 = v12;\n            v9 = v12;\n        }\n        // 0x403e7a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g29; // 0x403e7a\n        int32_t v14 = v7; // 0x403e81\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g29 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403eb1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x403ebb\n    int64_t * v17 = (int64_t *)v15; // 0x403ebe\n    uint64_t v18 = *v17; // 0x403ebe\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403ec1\n    int64_t result = *v19; // 0x403ec1\n    int64_t v20; // 0x403e00\n    uint64_t v21 = function_402bd0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403ee4\n    if (v18 > v21) {\n        // 0x403f5b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403ef7\n    *v17 = v22;\n    if (result != (int64_t)&g45) {\n        // 0x403f07\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404cd0(v22); // 0x403f21\n    *v19 = result2;\n    int64_t v23; // 0x403e00\n    function_402bd0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x403f5b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403fa0",
            "funcStartAddr": "403fa0",
            "funcEndAddr": "403fd4",
            "decompiledFuncCode": "int64_t function_403fa0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403fa7\n    int64_t result = function_404ed0(a1 == 0 ? (int64_t)&g46 : a1, 56); // 0x403fc6\n    return result;\n}\n"
        },
        {
            "funcName": "function_403fe0",
            "funcStartAddr": "403fe0",
            "funcEndAddr": "403fef",
            "decompiledFuncCode": "int64_t function_403fe0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g46 : a1); // 0x403fec\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ff0",
            "funcStartAddr": "403ff0",
            "funcEndAddr": "403fff",
            "decompiledFuncCode": "int64_t function_403ff0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 : a1; // 0x403ff8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g46;\n}\n"
        },
        {
            "funcName": "function_404000",
            "funcStartAddr": "404000",
            "funcEndAddr": "404033",
            "decompiledFuncCode": "int64_t function_404000(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 + 8 : a1 + 8; // 0x404019\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40401e\n    uint32_t v3 = *v2; // 0x40401e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404022\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404040",
            "funcStartAddr": "404040",
            "funcEndAddr": "404053",
            "decompiledFuncCode": "int64_t function_404040(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g46 + 4 : a1 + 4); // 0x40404c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404060",
            "funcStartAddr": "404060",
            "funcEndAddr": "40408b",
            "decompiledFuncCode": "int64_t function_404060(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 : a1; // 0x404068\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404085\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40407c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g46;\n}\n"
        },
        {
            "funcName": "function_404090",
            "funcStartAddr": "404090",
            "funcEndAddr": "404102",
            "decompiledFuncCode": "int64_t function_404090(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g46 : a5; // 0x4040b2\n    int32_t * v2 = __errno_location(); // 0x4040bb\n    uint32_t v3 = *(int32_t *)v1; // 0x4040db\n    int64_t result = function_402bd0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4040ea\n    return result;\n}\n"
        },
        {
            "funcName": "function_404110",
            "funcStartAddr": "404110",
            "funcEndAddr": "4041f1",
            "decompiledFuncCode": "int64_t function_404110(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g46 : a4; // 0x404132\n    int32_t * v2 = __errno_location(); // 0x404138\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404157\n    int32_t * v4 = (int32_t *)v1; // 0x40415a\n    int64_t v5 = function_402bd0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404175\n    int64_t v6 = v5 + 1; // 0x40417a\n    int64_t result = function_404cd0(v6); // 0x40418f\n    function_402bd0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4041d4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4041dd\n    return result;\n}\n"
        },
        {
            "funcName": "function_404200",
            "funcStartAddr": "404200",
            "funcEndAddr": "40420a",
            "decompiledFuncCode": "int64_t function_404200(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404200\n    return function_404110(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404210",
            "funcStartAddr": "404210",
            "funcEndAddr": "4042a5",
            "decompiledFuncCode": "int64_t function_404210(void) {\n    uint32_t v1 = *(int32_t *)&g29; // 0x404210\n    int64_t v2 = v1; // 0x404210\n    int64_t v3 = v2; // 0x404224\n    if (v1 >= 2) {\n        int64_t v4 = &g29;\n        int64_t v5 = v4 + 16; // 0x404243\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g56;\n        while (v5 != (int64_t)g26 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404240\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g56;\n        }\n    }\n    int64_t v6 = v3; // 0x40425d\n    if (g27 != 0x60a300) {\n        // 0x40425f\n        free((int64_t *)g27);\n        g27 = 256;\n        *(int64_t *)&g28 = (int64_t)&g45;\n        v6 = &g56;\n    }\n    int64_t result = v6; // 0x404281\n    if (g26 != &g27) {\n        // 0x404283\n        free(g26);\n        *(int64_t *)&g26 = (int64_t)&g27;\n        result = &g56;\n    }\n    // 0x404296\n    *(int32_t *)&g29 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4042b0",
            "funcStartAddr": "4042b0",
            "funcEndAddr": "4042c1",
            "decompiledFuncCode": "int64_t function_4042b0(void) {\n    // 0x4042b0\n    int64_t v1; // 0x4042b0\n    return function_403e00(v1, v1, -1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_4042d0",
            "funcStartAddr": "4042d0",
            "funcEndAddr": "4042da",
            "decompiledFuncCode": "int64_t function_4042d0(void) {\n    // 0x4042d0\n    int64_t v1; // 0x4042d0\n    return function_403e00(v1, v1, v1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_4042e0",
            "funcStartAddr": "4042e0",
            "funcEndAddr": "4042f6",
            "decompiledFuncCode": "int64_t function_4042e0(int64_t a1) {\n    // 0x4042e0\n    return function_403e00(0, a1, -1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_404300",
            "funcStartAddr": "404300",
            "funcEndAddr": "404312",
            "decompiledFuncCode": "int64_t function_404300(int64_t a1, int64_t a2) {\n    // 0x404300\n    return function_403e00(0, a1, a2, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_404320",
            "funcStartAddr": "404320",
            "funcEndAddr": "404388",
            "decompiledFuncCode": "int64_t function_404320(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404330\n    return function_403e00((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404390",
            "funcStartAddr": "404390",
            "funcEndAddr": "4043f4",
            "decompiledFuncCode": "int64_t function_404390(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4043a0\n    return function_403e00((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404400",
            "funcStartAddr": "404400",
            "funcEndAddr": "40440c",
            "decompiledFuncCode": "int64_t function_404400(int64_t a1, int64_t a2) {\n    // 0x404400\n    return function_404320(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "40441f",
            "decompiledFuncCode": "int64_t function_404410(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404410\n    return function_404390(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404420",
            "funcStartAddr": "404420",
            "funcEndAddr": "404490",
            "decompiledFuncCode": "int64_t function_404420(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g46); // 0x40442d\n    int128_t v2 = __asm_movdqa(g47); // 0x404435\n    int128_t v3 = __asm_movdqa(g48); // 0x40443d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404452\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404468\n    uint32_t v6 = *v5; // 0x404468\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40446d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403e00(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404490",
            "funcStartAddr": "404490",
            "funcEndAddr": "40449d",
            "decompiledFuncCode": "int64_t function_404490(int64_t a1, int64_t a2) {\n    // 0x404490\n    return function_404420(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4044a0",
            "funcStartAddr": "4044a0",
            "funcEndAddr": "4044b1",
            "decompiledFuncCode": "int64_t function_4044a0(int64_t a1) {\n    // 0x4044a0\n    return function_404420(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4044c0",
            "funcStartAddr": "4044c0",
            "funcEndAddr": "4044ca",
            "decompiledFuncCode": "int64_t function_4044c0(void) {\n    // 0x4044c0\n    int64_t v1; // 0x4044c0\n    return function_404420(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_4044d0",
            "funcStartAddr": "4044d0",
            "funcEndAddr": "40453e",
            "decompiledFuncCode": "int64_t function_4044d0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4044ea\n    return function_403e00((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404540",
            "funcStartAddr": "404540",
            "funcEndAddr": "4045ac",
            "decompiledFuncCode": "int64_t function_404540(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g46); // 0x404547\n    int128_t v2 = __asm_movdqa(g47); // 0x40454f\n    int128_t v3 = __asm_movdqa(g48); // 0x404557\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404579\n    if (a2 == 0 || a3 == 0) {\n        // 0x4045a7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40458a\n    return function_403e00(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4045b0",
            "funcStartAddr": "4045b0",
            "funcEndAddr": "4045b9",
            "decompiledFuncCode": "int64_t function_4045b0(void) {\n    // 0x4045b0\n    int64_t v1; // 0x4045b0\n    return function_404540(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4045c0",
            "funcStartAddr": "4045c0",
            "funcEndAddr": "4045d7",
            "decompiledFuncCode": "int64_t function_4045c0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4045c0\n    return function_404540(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4045e0",
            "funcStartAddr": "4045e0",
            "funcEndAddr": "4045f3",
            "decompiledFuncCode": "int64_t function_4045e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4045e0\n    return function_404540(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404600",
            "funcStartAddr": "404600",
            "funcEndAddr": "40460a",
            "decompiledFuncCode": "int64_t function_404600(void) {\n    // 0x404600\n    int64_t v1; // 0x404600\n    return function_403e00(v1, v1, v1, &g25);\n}\n"
        },
        {
            "funcName": "function_404610",
            "funcStartAddr": "404610",
            "funcEndAddr": "404622",
            "decompiledFuncCode": "int64_t function_404610(int64_t a1, int64_t a2) {\n    // 0x404610\n    return function_403e00(0, a1, a2, &g25);\n}\n"
        },
        {
            "funcName": "function_404630",
            "funcStartAddr": "404630",
            "funcEndAddr": "404641",
            "decompiledFuncCode": "int64_t function_404630(void) {\n    // 0x404630\n    int64_t v1; // 0x404630\n    return function_403e00(v1, v1, -1, &g25);\n}\n"
        },
        {
            "funcName": "function_404650",
            "funcStartAddr": "404650",
            "funcEndAddr": "404666",
            "decompiledFuncCode": "int64_t function_404650(int64_t a1) {\n    // 0x404650\n    return function_403e00(0, a1, -1, &g25);\n}\n"
        },
        {
            "funcName": "function_404670",
            "funcStartAddr": "404670",
            "funcEndAddr": "4046ce",
            "decompiledFuncCode": "int64_t function_404670(int64_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = read((int32_t)fd, (int64_t *)buf, (int32_t)nbyte); // 0x404691\n    while (result < 0) {\n        // 0x40469e\n        if (*__errno_location() != 4) {\n            // break -> 0x4046aa\n            break;\n        }\n        result = read((int32_t)fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_4046d0",
            "funcStartAddr": "4046d0",
            "funcEndAddr": "40472e",
            "decompiledFuncCode": "int64_t function_4046d0(int64_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte); // 0x4046f1\n    while (result < 0) {\n        // 0x4046fe\n        if (*__errno_location() != 4) {\n            // break -> 0x40470a\n            break;\n        }\n        result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_404730",
            "funcStartAddr": "404730",
            "funcEndAddr": "404b0d",
            "decompiledFuncCode": "int64_t function_404730(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4047c8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40474c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404766\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4047ab\n    if (a6 < 10) {\n        // 0x4047ba\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4048b2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404b10",
            "funcStartAddr": "404b10",
            "funcEndAddr": "404b30",
            "decompiledFuncCode": "int64_t function_404b10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404b10\n    if (a5 == 0) {\n        // 0x404b2b\n        return function_404730(a1, a2, a3, a4, a5, 0, (int64_t)&g56);\n    }\n    int64_t v1 = 0; // 0x404b17\n    v1++;\n    int64_t v2 = v1; // 0x404b29\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404b20\n        v1++;\n        v2 = v1;\n    }\n    // 0x404b2b\n    return function_404730(a1, a2, a3, a4, a5, v2, (int64_t)&g56);\n}\n"
        },
        {
            "funcName": "function_404b30",
            "funcStartAddr": "404b30",
            "funcEndAddr": "404b90",
            "decompiledFuncCode": "int64_t function_404b30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404b30\n    int64_t v3 = &v2; // 0x404b30\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404b63\n    int64_t v6; // 0x404b4d\n    int64_t * v7; // 0x404b6b\n    int64_t v8; // 0x404b6b\n    int64_t v9; // 0x404b77\n    if (v5 < 48) {\n        // 0x404b40\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404b83\n            break;\n        }\n    } else {\n        // 0x404b6b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404b83\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404b61\n    while (v4 != 9) {\n        // 0x404b59\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404b40\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404b83\n                break;\n            }\n        } else {\n            // 0x404b6b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404b83\n                break;\n            }\n        }\n        // 0x404b59\n        v10 = 10;\n    }\n    // 0x404b83\n    return function_404730(a1, a2, a3, a4, v3, v10, (int64_t)&g56);\n}\n"
        },
        {
            "funcName": "function_404b90",
            "funcStartAddr": "404b90",
            "funcEndAddr": "404c4c",
            "decompiledFuncCode": "int64_t function_404b90(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x404b90\n    int64_t v1; // bp-168, 0x404b90\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404b90\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404b90\n    int64_t v8; // 0x404b90\n    int64_t v9; // bp-56, 0x404b90\n    int64_t v10; // 0x404bf5\n    int64_t v11; // 0x404c19\n    if ((int32_t)v6 < 48) {\n        // 0x404be0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404c30\n            break;\n        }\n    } else {\n        // 0x404c12\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404c30\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x404c0a\n    int64_t v13 = 10; // 0x404c0a\n    while (v5 != 9) {\n        // 0x404c0c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404be0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404c30\n                break;\n            }\n        } else {\n            // 0x404c12\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404c30\n                break;\n            }\n        }\n        // 0x404c02\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404c30\n    int64_t v14; // bp-136, 0x404b90\n    int64_t result = function_404730(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g56); // 0x404c3f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404c50",
            "funcStartAddr": "404c50",
            "funcEndAddr": "404cc4",
            "decompiledFuncCode": "int64_t function_404c50(int64_t a1) {\n    // 0x404c50\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404cb3\n    return fputs_unlocked(v1, g34);\n}\n"
        },
        {
            "funcName": "function_404cd0",
            "funcStartAddr": "404cd0",
            "funcEndAddr": "404cea",
            "decompiledFuncCode": "int64_t function_404cd0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404cd4\n    if (size != 0 != (mem == NULL)) {\n        // 0x404ce3\n        return (int64_t)mem;\n    }\n    // 0x404ce5\n    function_404f20(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404cf0",
            "funcStartAddr": "404cf0",
            "funcEndAddr": "404d11",
            "decompiledFuncCode": "int64_t function_404cf0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404cf3\n    int64_t v2 = v1; // 0x404cf3\n    if (v2 < 0) {\n        // 0x404d0b\n        function_404f20(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404d09\n        return function_404cd0(v2);\n    }\n    // 0x404d0b\n    function_404f20(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404d20",
            "funcStartAddr": "404d20",
            "funcEndAddr": "404d22",
            "decompiledFuncCode": "int64_t function_404d20(void) {\n    // 0x404d20\n    int64_t v1; // 0x404d20\n    return function_404cd0(v1);\n}\n"
        },
        {
            "funcName": "function_404d30",
            "funcStartAddr": "404d30",
            "funcEndAddr": "404d66",
            "decompiledFuncCode": "int64_t function_404d30(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404d58\n        free(v1);\n        return (int32_t)&g56 ^ (int32_t)&g56;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404d41\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404d50\n        return (int64_t)mem;\n    }\n    // 0x404d61\n    function_404f20(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404d70",
            "funcStartAddr": "404d70",
            "funcEndAddr": "404d91",
            "decompiledFuncCode": "int64_t function_404d70(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404d73\n    int64_t v2 = v1; // 0x404d73\n    if (v2 < 0) {\n        // 0x404d8b\n        function_404f20(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404d89\n        return function_404d30(a1, v2);\n    }\n    // 0x404d8b\n    function_404f20(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404da0",
            "funcStartAddr": "404da0",
            "funcEndAddr": "404e26",
            "decompiledFuncCode": "int64_t function_404da0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x404dfb\n            function_404f20(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404d30(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404de3\n    if (a2 == 0) {\n        // 0x404e08\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404de8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x404dfb\n        function_404f20(a1);\n        // UNREACHABLE\n    }\n    // 0x404dca\n    *(int64_t *)a2 = v2;\n    return function_404d30(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404e30",
            "funcStartAddr": "404e30",
            "funcEndAddr": "404e80",
            "decompiledFuncCode": "int64_t function_404e30(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404e30\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x404e7a\n            function_404f20(a1);\n            // UNREACHABLE\n        }\n        // 0x404e52\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404d30(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404e65\n        *(int64_t *)a2 = 128;\n        return function_404d30(0, 128);\n    }\n    // 0x404e78\n    if (a2 < 0) {\n        // 0x404e7a\n        function_404f20(a1);\n        // UNREACHABLE\n    }\n    // 0x404e52\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404d30(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404e80",
            "funcStartAddr": "404e80",
            "funcEndAddr": "404e97",
            "decompiledFuncCode": "int64_t function_404e80(int64_t a1, int64_t a2) {\n    // 0x404e80\n    return (int64_t)memset((int64_t *)function_404cd0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404ea0",
            "funcStartAddr": "404ea0",
            "funcEndAddr": "404ece",
            "decompiledFuncCode": "int64_t function_404ea0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404ea7\n    if ((int64_t)v1 < 0) {\n        // 0x404ec9\n        function_404f20(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404ec9\n        function_404f20(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x404eba\n    if (mem != NULL) {\n        // 0x404ec4\n        return (int64_t)mem;\n    }\n    // 0x404ec9\n    function_404f20(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404ed0",
            "funcStartAddr": "404ed0",
            "funcEndAddr": "404ef8",
            "decompiledFuncCode": "int64_t function_404ed0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404cd0(a2); // 0x404edf\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404f00",
            "funcStartAddr": "404f00",
            "funcEndAddr": "404f13",
            "decompiledFuncCode": "int64_t function_404f00(int64_t str) {\n    // 0x404f00\n    return function_404ed0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404f20",
            "funcStartAddr": "404f20",
            "funcEndAddr": "404f51",
            "decompiledFuncCode": "int64_t function_404f20(int64_t a1) {\n    // 0x404f20\n    error(g24, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404f60",
            "funcStartAddr": "404f60",
            "funcEndAddr": "40503f",
            "decompiledFuncCode": "int64_t function_404f60(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x404f6c\n    uint32_t v2 = *v1; // 0x404f6c\n    int64_t v3 = a2 & 0xffffffff; // 0x404f71\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x404f74\n    uint64_t v5 = (int64_t)*v4; // 0x404f74\n    int64_t v6; // 0x404fe2\n    if (v3 <= v5) {\n      lab_0x404fdc_2:\n        // 0x404fdc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x404f62\n    int64_t v8 = v2; // 0x404f60\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x404fdc\n        goto lab_0x404fdc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404f98\n    int64_t v17; // 0x404fa6\n    int64_t * v18; // 0x404fc0\n    int64_t * v19; // 0x404fc3\n    int64_t v20; // 0x404fce\n    int64_t v21; // 0x404fa6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x404fa3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x404fc0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x404fd7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x404fdc\n            goto lab_0x404fdc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x404fdc\n            goto lab_0x404fdc_2;\n        }\n        // 0x404f92\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40501b\n    int64_t * v23 = (int64_t *)v22; // 0x405020\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x405023\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x405020\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x405037\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x404f8d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x404fdc\n            goto lab_0x404fdc_2;\n        }\n        // 0x404f92\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x404fa3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x404fc0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x404fd7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x404fdc\n                goto lab_0x404fdc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x404fdc\n                goto lab_0x404fdc_2;\n            }\n            // 0x404f92\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x405000\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x405020\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x405037\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x404fdc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405040",
            "funcStartAddr": "405040",
            "funcEndAddr": "40565c",
            "decompiledFuncCode": "int64_t function_405040(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40505f\n    int64_t v2 = *v1; // 0x40505f\n    char * str2 = (char *)v2; // 0x40506c\n    char c = *str2; // 0x40506c\n    int64_t v3 = v2; // 0x405098\n    int64_t v4 = 0; // 0x405040\n    int32_t v5; // 0x405040\n    int64_t v6; // 0x405040\n    int64_t v7; // 0x405040\n    int64_t v8; // 0x405040\n    int64_t v9; // 0x405040\n    int64_t v10; // 0x405040\n    int64_t v11; // 0x405040\n    int64_t v12; // 0x405040\n    int64_t v13; // 0x405040\n    int64_t str3; // 0x405040\n    int64_t v14; // 0x405040\n    int64_t v15; // 0x405040\n    int64_t v16; // 0x405040\n    int64_t v17; // 0x405040\n    int32_t v18; // 0x405040\n    int32_t v19; // 0x405040\n    int32_t v20; // 0x405040\n    int32_t v21; // 0x405040\n    int32_t v22; // 0x405040\n    int32_t v23; // 0x405040\n    int32_t v24; // 0x405040\n    int32_t v25; // 0x405040\n    int32_t v26; // 0x405040\n    int32_t v27; // 0x405040\n    int32_t v28; // 0x405040\n    int32_t v29; // 0x405040\n    int64_t nmemb; // 0x405040\n    int64_t v30; // 0x405040\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40509c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405098\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4050a8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4050ae\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405078\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4050dc\n                int64_t v34; // 0x405040\n                int64_t v35; // 0x405040\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4050e5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405260;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4050f6\n                int64_t v37 = *(int64_t *)v36; // 0x4050fa\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4050d0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4050e5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405260;\n                        }\n                    }\n                    // 0x4050f6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405146:\n                    // 0x405146\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4051a0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x405310\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4051a0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4052c0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40516a;\n                                } else {\n                                    // 0x4052cc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40516a;\n                                    } else {\n                                        // 0x4052da\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40516a;\n                                        } else {\n                                            goto lab_0x4051a0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40516a;\n                            }\n                        }\n                    }\n                }\n              lab_0x4051b1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405386\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405532\n                            flockfile(g36);\n                            int64_t v41 = *v1; // 0x405552\n                            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40559f\n                            int64_t v43 = (int64_t)g36;\n                            int64_t v44 = v43; // 0x4055b9\n                            int64_t v45; // 0x4055bb\n                            if (*(char *)v42 != 0) {\n                                // 0x4055bb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g36;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4055b3\n                            while (v17 + nmemb != v42) {\n                                // 0x4055b5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4055bb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g36;\n                                }\n                                // 0x4055a8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4055e0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g36);\n                            v40 = *v1;\n                        } else {\n                            // 0x405394\n                            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4054ef\n                        free((int64_t *)v17);\n                    }\n                    // 0x4053e9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405400\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4052ae\n                    return 63;\n                }\n                // 0x4051d0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405254\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405260:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405270\n                    uint32_t v50 = *v49; // 0x405270\n                    int64_t v51 = v50; // 0x405270\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40527a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405283\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4054af\n                                __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40545a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4052ae\n                            return 63;\n                        }\n                        // 0x4052f8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40560f\n                                    __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40550d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405520\n                                // 0x4052ae\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40541e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405432\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40529b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40529e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4052a2\n                    int64_t result = v59; // 0x4052a8\n                    if (v58 != 0) {\n                        // 0x4052aa\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4052ae\n                    return result;\n                }\n            } else {\n                // 0x4050ae\n                v5 = v32;\n            }\n            // break -> 0x4051d5\n            break;\n        }\n    }\n    // 0x4051d5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x4051ed\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4051f7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4052ae\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405339\n        __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405226\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405236\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4051a0:\n    // 0x4051a0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4051a0\n    int64_t v63 = *(int64_t *)v62; // 0x4051a4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x4051b1\n        goto lab_0x4051b1;\n    }\n    goto lab_0x405146;\n  lab_0x40516a:\n    // 0x40516a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405040\n    int32_t v65; // 0x405040\n    int32_t v66; // 0x405040\n    if (v27 != 0) {\n        goto lab_0x4051a0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405320\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4051a0;\n            } else {\n                goto lab_0x405191;\n            }\n        } else {\n            // 0x405185\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40547c\n                int64_t v67 = (int64_t)mem; // 0x40547c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4051a0;\n                } else {\n                    // 0x40548f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405191;\n                }\n            } else {\n                goto lab_0x405191;\n            }\n        }\n    }\n  lab_0x405191:\n    // 0x405191\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4051a0;\n}\n"
        },
        {
            "funcName": "function_405660",
            "funcStartAddr": "405660",
            "funcEndAddr": "405c26",
            "decompiledFuncCode": "int64_t function_405660(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405681\n    if (v3 < 1) {\n        // 0x40583e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40567d\n    int32_t v5 = *(int32_t *)a7; // 0x405689\n    uint64_t v6 = a1 & 0xffffffff; // 0x40568b\n    int64_t v7 = v2; // 0x405690\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405693\n    *v8 = 0;\n    int64_t v9; // 0x405660\n    int64_t v10; // 0x405660\n    int64_t v11; // 0x405660\n    int64_t v12; // 0x405660\n    int64_t str; // 0x405660\n    int64_t v13; // 0x405660\n    int64_t v14; // 0x405660\n    int64_t v15; // 0x405660\n    int64_t v16; // 0x405660\n    int64_t v17; // 0x405660\n    int32_t v18; // 0x405660\n    char v19; // 0x405660\n    if (v5 == 0) {\n        // 0x405878\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4056aa;\n    } else {\n        // 0x4056a3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4056f0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4056f3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4057b8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405706\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x405716\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4057cc;\n                } else {\n                    goto lab_0x405728;\n                }\n            }\n        } else {\n            goto lab_0x4056aa;\n        }\n    }\n  lab_0x4056aa:\n    // 0x4056aa\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4056b0\n    *v24 = 0;\n    int64_t v25; // 0x405660\n    int64_t v26; // 0x405660\n    int64_t v27; // 0x405660\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4057a0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4057ad;\n        }\n        case 43: {\n            // 0x405ab0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4057ad;\n        }\n        default: {\n            // 0x4056cc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x405a2f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405b48\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4057ad;\n                } else {\n                    // 0x405a3d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4056da;\n                }\n            } else {\n                goto lab_0x4056da;\n            }\n        }\n    }\n  lab_0x4057b8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4057bf\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405728;\n    } else {\n        goto lab_0x4057cc;\n    }\n  lab_0x4056da:\n    // 0x4056da\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4057ad;\n  lab_0x4057ad:\n    // 0x4057ad\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4057b8;\n  lab_0x405728:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405728\n    int64_t v31 = v30; // 0x405728\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40572a\n    if ((int64_t)*v32 > v31) {\n        // 0x40572f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405732\n    if (*v33 > v30) {\n        // 0x405737\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40573a\n    int64_t v35 = v31; // 0x40573e\n    int64_t v36 = v15; // 0x40573e\n    int64_t v37; // 0x405660\n    int64_t v38; // 0x405660\n    int64_t v39; // 0x405660\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x4058a8\n        int64_t v41 = v40; // 0x4058a8\n        v2 = v41;\n        int64_t v42; // 0x405660\n        if (*v33 == v40) {\n            // 0x405a90\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405a98\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x4058b4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4058c8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4058d1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4058da\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4058f1\n            int64_t v47 = v45 & 0xffffffff; // 0x4058f5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4058fe\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405904\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405906;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4058e0\n            int64_t v49 = v48 & 0xffffffff; // 0x4058e0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4058f1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4058fe\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405904\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405906;\n                    }\n                }\n                // 0x4058e0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405aa8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405906;\n    } else {\n        goto lab_0x405744;\n    }\n  lab_0x4057cc:\n    // 0x4057cc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4057cf\n    int64_t v51 = v12; // 0x4057cf\n    int64_t v52 = v14; // 0x4057cf\n    if (*(char *)v10 == 0) {\n        goto lab_0x405728;\n    } else {\n        goto lab_0x4057d5;\n    }\n  lab_0x405744:;\n    int32_t v53 = v35; // 0x405744\n    int64_t v54; // 0x405660\n    int64_t v55; // 0x405660\n    int64_t v56; // 0x405660\n    int64_t v57; // 0x405660\n    int64_t v58; // 0x405660\n    int64_t v59; // 0x405660\n    char * v60; // 0x405660\n    int64_t v61; // 0x405660\n    int64_t v62; // 0x405759\n    int64_t v63; // 0x405660\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405893\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405896;\n    } else {\n        // 0x40574c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405660\n        int64_t v66 = v65 ? -1 : 1; // 0x405760\n        int64_t v67 = (int64_t)\"--\"; // 0x405660\n        int64_t v68 = v62; // 0x405660\n        int64_t v69 = 3; // 0x405760\n        unsigned char v70 = *(char *)v68; // 0x405760\n        char v71 = *(char *)v67; // 0x405760\n        char v72 = v71; // 0x405760\n        bool v73 = false; // 0x405760\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405850\n            if (*(char *)v62 == 45) {\n                // 0x405910\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x405910\n                if (c == 0) {\n                    goto lab_0x40585a;\n                } else {\n                    // 0x40591d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x4059a0;\n                    } else {\n                        if (c == 45) {\n                            // 0x405b83\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4059f5;\n                        } else {\n                            // 0x40592e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x4059a0;\n                            } else {\n                                // 0x405933\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x405954;\n                                } else {\n                                    // 0x40593a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x4059a0;\n                                    } else {\n                                        goto lab_0x405954;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40585a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405770\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405773\n            int64_t v77 = v35 + 1; // 0x405776\n            int32_t v78 = v77; // 0x405779\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405ae0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405787\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405795\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405896;\n        }\n    }\n  lab_0x4057d5:;\n    // 0x4057d5\n    int64_t v79; // bp-104, 0x405660\n    int64_t v80 = &v79; // 0x40566a\n    int64_t v81 = v50 + 1; // 0x4057d5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4057dc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4057e1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4057e5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4057e9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4057f1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4057f6\n    int32_t c2 = v84; // 0x4057f6\n    char * found_char_pos = strchr(str2, c2); // 0x4057f6\n    int64_t v87 = *v82; // 0x4057fb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405805\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x405810\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405b00\n            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x405acd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40583e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4057f6\n    char v91 = *(char *)(v90 + 1); // 0x40582b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4057e5\n        if (v91 != 58) {\n            // 0x40583e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405a54\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405b58\n                *v8 = 0;\n            } else {\n                // 0x405b3c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x405a7e\n            *v83 = 0;\n            // 0x40583e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x405a5e\n        if (v93 != 0) {\n            // 0x405af0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x405a7e\n            *v83 = 0;\n            // 0x40583e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405a71\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x405a7e\n            *v83 = 0;\n            // 0x40583e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x405bba\n            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x405b6a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405b71\n        // 0x405a7e\n        *v83 = 0;\n        // 0x40583e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4059c9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4059cb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405bf0\n                __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405ba1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405ba8\n            // 0x40583e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4059d6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4059da\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4059f5;\n  lab_0x405906:\n    // 0x405906\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405744;\n  lab_0x4059f5:;\n    int64_t v99 = function_405040(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x405a13\n    // 0x40583e\n    return v99 & 0xffffffff;\n  lab_0x405896:;\n    int32_t v100 = v55; // 0x405896\n    if (v100 != (int32_t)v59) {\n        // 0x40589a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40583e\n    return 0xffffffff;\n  lab_0x40585a:\n    // 0x40585a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405861\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40583e\n    return v99 & 0xffffffff;\n  lab_0x4059a0:\n    // 0x4059a0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4057d5;\n  lab_0x405954:\n    // 0x405954\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405040(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)&g9); // 0x40597a\n    if ((int32_t)v101 != -1) {\n        // 0x40583e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40598f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x4059a0;\n}\n"
        },
        {
            "funcName": "function_405c30",
            "funcStartAddr": "405c30",
            "funcEndAddr": "405c86",
            "decompiledFuncCode": "int64_t function_405c30(int64_t a1) {\n    // 0x405c30\n    *(int32_t *)&g49 = g32;\n    *(int32_t *)&g50 = g31;\n    int64_t v1; // 0x405c30\n    int64_t result = function_405660(v1, v1, v1, v1, v1, v1, &g49, a1 & 0xffffffff); // 0x405c56\n    g32 = *(int32_t *)&g49;\n    g54 = g52;\n    *(int32_t *)&g30 = g51;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405c90",
            "funcStartAddr": "405c90",
            "funcEndAddr": "405ca8",
            "decompiledFuncCode": "int64_t function_405c90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405c90\n    return function_405c30(1);\n}\n"
        },
        {
            "funcName": "function_405cb0",
            "funcStartAddr": "405cb0",
            "funcEndAddr": "405cc3",
            "decompiledFuncCode": "int64_t function_405cb0(int32_t a1, int64_t a2, char * a3, char (**a4)[16], int32_t a5, int64_t a6) {\n    // 0x405cb0\n    return function_405c30(0);\n}\n"
        },
        {
            "funcName": "function_405cd0",
            "funcStartAddr": "405cd0",
            "funcEndAddr": "405ce5",
            "decompiledFuncCode": "int64_t function_405cd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405cd0\n    return function_405660(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405cf0",
            "funcStartAddr": "405cf0",
            "funcEndAddr": "405d06",
            "decompiledFuncCode": "int64_t function_405cf0(void) {\n    // 0x405cf0\n    return function_405c30(0);\n}\n"
        },
        {
            "funcName": "function_405d10",
            "funcStartAddr": "405d10",
            "funcEndAddr": "405d28",
            "decompiledFuncCode": "int64_t function_405d10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405d10\n    return function_405660(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405d30",
            "funcStartAddr": "405d30",
            "funcEndAddr": "405daa",
            "decompiledFuncCode": "int64_t function_405d30(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x405d3b\n    int64_t v2 = (int64_t)&g10; // 0x405d3b\n    int32_t * pwc; // 0x405d30\n    int64_t v3; // 0x405d30\n    int64_t n; // 0x405d30\n    if (a2 == 0) {\n        goto lab_0x405d82;\n    } else {\n        // 0x405d3d\n        if (a3 == 0) {\n            // 0x405d68\n            return -2;\n        }\n        // 0x405d49\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405d82;\n        } else {\n            goto lab_0x405d54;\n        }\n    }\n  lab_0x405d82:\n    // 0x405d82\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405d30\n    pwc = (int32_t *)&v4;\n    goto lab_0x405d54;\n  lab_0x405d54:;\n    char * wstr = (char *)v3; // 0x405d5a\n    int64_t ps; // 0x405d30\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x405d5a\n    int64_t result = v5; // 0x405d5a\n    if (v5 < 0xfffffffe) {\n        // 0x405d68\n        return result;\n    }\n    int64_t result2 = result; // 0x405d99\n    if ((char)function_405e10(0, v3) == 0) {\n        // 0x405d9b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405d68\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405db0",
            "funcStartAddr": "405db0",
            "funcEndAddr": "405e0d",
            "decompiledFuncCode": "int64_t function_405db0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405db7\n    int64_t v2; // 0x405db0\n    int64_t result = function_4063e0(a1, v2); // 0x405dc8\n    if ((v2 & 32) != 0) {\n        // 0x405df0\n        if ((int32_t)result == 0) {\n            // 0x405df4\n            *__errno_location() = 0;\n        }\n        // 0x405dea\n        return 0xffffffff;\n    }\n    // 0x405dd1\n    if ((int32_t)result == 0) {\n        // 0x405dea\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405dd8\n    if (v1 == 0) {\n        // 0x405dda\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x405dea\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405e10",
            "funcStartAddr": "405e10",
            "funcEndAddr": "405e6e",
            "decompiledFuncCode": "int64_t function_405e10(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405e16\n    if (locale == NULL) {\n        // 0x405e43\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405e16\n    bool v2; // 0x405e10\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x405e10\n    int64_t v5 = v1; // 0x405e10\n    int64_t v6 = 2; // 0x405e35\n    unsigned char v7 = *(char *)v5; // 0x405e35\n    char v8 = *(char *)v4; // 0x405e35\n    char v9 = v8; // 0x405e35\n    bool v10 = false; // 0x405e35\n    while (v7 == v8) {\n        // 0x405e28\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405e41\n    int64_t v13 = v1; // 0x405e41\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405e43\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405e41\n    unsigned char v15 = *(char *)v13; // 0x405e5d\n    char v16 = *(char *)v12; // 0x405e5d\n    char v17 = v16; // 0x405e5d\n    bool v18 = false; // 0x405e5d\n    while (v15 == v16) {\n        // 0x405e50\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405e70",
            "funcStartAddr": "405e70",
            "funcEndAddr": "4063d2",
            "decompiledFuncCode": "int64_t function_405e70(void) {\n    char * v1 = nl_langinfo(14); // 0x405e86\n    char * v2 = g53; // 0x405e8b\n    char * v3; // 0x405e70\n    int64_t v4; // 0x405e70\n    int64_t v5; // 0x405e70\n    int64_t v6; // 0x405e70\n    int64_t v7; // 0x405e70\n    int32_t size; // 0x405e70\n    int32_t size2; // 0x405e70\n    int32_t len; // 0x405f42\n    int64_t v8; // 0x405f42\n    char * env_val; // 0x405f2d\n    if (v2 == NULL) {\n        // 0x405f28\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405f95;\n        } else {\n            // 0x405f3a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405f95;\n            } else {\n                // 0x405f3f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x405f2d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4063c5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405f95;\n                    } else {\n                        // 0x406339\n                        size2 = len + 14;\n                        goto lab_0x405f5b;\n                    }\n                } else {\n                    goto lab_0x405f5b;\n                }\n            }\n        }\n    } else {\n        // 0x405e70\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x405eaa;\n    }\n  lab_0x4061dc:;\n    // 0x4061dc\n    struct _IO_FILE * stream; // 0x40601b\n    int32_t v10 = __uflow(stream); // 0x4061df\n    int64_t v11; // 0x405e70\n    int64_t v12 = v11; // 0x4061e9\n    int64_t v13; // 0x405e70\n    int64_t v14 = v13; // 0x4061e9\n    int32_t v15 = v10; // 0x4061e9\n    int64_t v16; // 0x405e70\n    int64_t v17 = v16; // 0x4061e9\n    int64_t v18 = v11; // 0x4061e9\n    int64_t v19 = v13; // 0x4061e9\n    int64_t v20 = v16; // 0x4061e9\n    if (v10 == -1) {\n        // break -> 0x4061ef\n        goto lab_0x4061ef;\n    }\n    goto lab_0x406069;\n  lab_0x40605e:;\n    // 0x40605e\n    int64_t v90; // 0x405e70\n    int64_t * v32; // 0x406050\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405e70\n    v12 = v89;\n    int64_t v91; // 0x405e70\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405e70\n    v17 = v92;\n    goto lab_0x406069;\n  lab_0x406069:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405e70\n    int32_t v25; // bp-120, 0x405e70\n    int32_t v26; // bp-184, 0x405e70\n    int64_t v27; // 0x40601b\n    int64_t v28; // 0x406038\n    int64_t v29; // 0x40603d\n    int64_t * v30; // 0x406054\n    switch (c) {\n        case 32: {\n            goto lab_0x406050;\n        }\n        case 10: {\n            goto lab_0x406050;\n        }\n        case 9: {\n            goto lab_0x406050;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x406241\n            int32_t v33; // 0x405e70\n            char v34; // 0x405e70\n            int32_t v35; // 0x40624e\n            if (v31 < *v30) {\n                // 0x406220\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40624b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x406241\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406220\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40624b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x406230\n                v36 = v33;\n            }\n            // 0x40631f\n            if (v36 == -1) {\n                // break -> 0x4061ef\n                break;\n            }\n            goto lab_0x406050;\n        }\n        default: {\n            // 0x40607f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4061ef\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x4060a8\n            int64_t v39 = v37 + 4; // 0x4060aa\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x4060b6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x4060b8\n            while (v41 == 0) {\n                // 0x4060a8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4060d6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4060e2\n            int64_t v45 = v43 + 4; // 0x4060e4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4060f0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4060f2\n            while (v47 == 0) {\n                // 0x4060e2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4060df\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406108\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x406118\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40611c\n            int64_t v52 = v51 + v48; // 0x406125\n            int64_t * mem; // 0x405e70\n            int64_t v53; // 0x405e70\n            int64_t v54; // 0x405e70\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40625b\n                int64_t v56 = v55 + 3; // 0x406267\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x406141\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406150\n            if (mem == NULL) {\n                // 0x40637c\n                free((int64_t *)v21);\n                function_4063e0(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x405ff4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406168\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406172\n            uint32_t v62 = (int32_t)v59; // 0x406175\n            int64_t v63; // 0x405e70\n            if (v62 >= 8) {\n                // 0x406284\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40629e\n                int64_t v66 = v61 - v65; // 0x4062a2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x4062ad\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4062be\n                    int64_t v70 = v69 & 0xffffffff; // 0x4062be\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4062bb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40634f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406187\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40618b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40619b\n            int64_t v74 = v60 - 1; // 0x40619f\n            uint32_t v75 = (int32_t)v73; // 0x4061a4\n            int64_t v76; // 0x405e70\n            if (v75 >= 8) {\n                // 0x4062d2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4062dc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4062ec\n                int64_t v80 = v74 - v79; // 0x4062f0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4062fb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40630b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406309\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x406366\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40636e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4061b6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4061ba\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4063b3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4061ce\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40605e;\n            } else {\n                goto lab_0x4061dc;\n            }\n        }\n    }\n  lab_0x406050:;\n    int64_t v93 = v23; // 0x405e70\n    int64_t v94 = v22; // 0x405e70\n    int64_t v95 = v21; // 0x405e70\n    goto lab_0x406050_2;\n  lab_0x405f95:;\n    int64_t * mem3 = malloc(size); // 0x405f95\n    int64_t v97 = (int64_t)&g10; // 0x405fa0\n    int64_t v98; // 0x405e70\n    int64_t path; // 0x405e70\n    if (mem3 == NULL) {\n        goto lab_0x405f72;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405f95\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405fb6;\n    }\n  lab_0x405eaa:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x405e9d\n    char v100 = *v3; // 0x405eaa\n    int64_t v101; // 0x405e70\n    if (v100 == 0) {\n        // 0x405f04\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405e70\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405e70\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405ef0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405ef7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405ec0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x405ecd\n        char v107 = *(char *)v106; // 0x405ed2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405f04\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x405edb\n    v104 = v103 + 1;\n  lab_0x405ef7:\n    // 0x405f04\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405f72:;\n    char * v108 = (char *)v97;\n    g53 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x405eaa;\n  lab_0x405fb6:;\n    int64_t v109 = v98 + path; // 0x405fb6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405fe2\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x406011\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x406342\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x406035\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x406050_2:;\n                uint64_t v96 = *v32; // 0x406050\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4061dc;\n                } else {\n                    goto lab_0x40605e;\n                }\n            }\n          lab_0x4061ef:\n            // 0x4061ef\n            function_4063e0(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x40620e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405ff4;\n  lab_0x405f5b:;\n    int64_t * mem4 = malloc(size2); // 0x405f5b\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x406001\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405fb6;\n    } else {\n        goto lab_0x405f72;\n    }\n  lab_0x405ff4:\n    // 0x405ff4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405f72;\n}\n"
        },
        {
            "funcName": "function_4063e0",
            "funcStartAddr": "4063e0",
            "funcEndAddr": "40645b",
            "decompiledFuncCode": "int64_t function_4063e0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4063e7\n    if (fileno(stream) < 0) {\n        // 0x406447\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4063fa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40642b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x406447\n            return fclose(stream);\n        }\n    }\n    // 0x4063fc\n    if ((int32_t)function_406460(a1, v1) == 0) {\n        // 0x406447\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x406408\n    int32_t v3 = *v2; // 0x406410\n    int64_t result = fclose(stream); // 0x40641e\n    if (v3 != 0) {\n        // 0x406450\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x406420\n    return result;\n}\n"
        },
        {
            "funcName": "function_406460",
            "funcStartAddr": "406460",
            "funcEndAddr": "4064a0",
            "decompiledFuncCode": "int64_t function_406460(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40647a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40647a\n        return fflush(stream);\n    }\n    // 0x406488\n    function_4064a0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4064a0",
            "funcStartAddr": "4064a0",
            "funcEndAddr": "4064f7",
            "decompiledFuncCode": "int64_t function_4064a0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4064a0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4064aa\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4064db\n    int64_t result = -1; // 0x4064e4\n    if (v1 != -1) {\n        // 0x4064e6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4064f2\n    return result;\n}\n"
        },
        {
            "funcName": "function_406500",
            "funcStartAddr": "406500",
            "funcEndAddr": "40655d",
            "decompiledFuncCode": "int64_t function_406500(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406500\n    return function_4013e0();\n}\n"
        },
        {
            "funcName": "function_406560",
            "funcStartAddr": "406560",
            "funcEndAddr": "406561",
            "decompiledFuncCode": "int64_t function_406560(void) {\n    // 0x406560\n    int64_t result; // 0x406560\n    return result;\n}\n"
        },
        {
            "funcName": "function_406570",
            "funcStartAddr": "406570",
            "funcEndAddr": "406588",
            "decompiledFuncCode": "int64_t function_406570(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406570\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_406588",
            "funcStartAddr": "406588",
            "funcEndAddr": "4065a8",
            "decompiledFuncCode": "int64_t function_406588(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x406592\n    while (*(int64_t *)v1 != -1) {\n        // 0x406593\n        v1 -= 8;\n    }\n    // 0x4065a4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_cat.elf"
}