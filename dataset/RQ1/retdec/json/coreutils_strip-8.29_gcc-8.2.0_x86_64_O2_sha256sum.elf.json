{
    "funcInfo": [
        {
            "funcName": "function_401920",
            "funcStartAddr": "401920",
            "funcEndAddr": "401925",
            "decompiledFuncCode": "int64_t function_401920(void) {\n    // 0x401920\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401925",
            "funcStartAddr": "401925",
            "funcEndAddr": "40192a",
            "decompiledFuncCode": "int64_t function_401925(void) {\n    // 0x401925\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40192a",
            "funcStartAddr": "40192a",
            "funcEndAddr": "40192f",
            "decompiledFuncCode": "int64_t function_40192a(void) {\n    // 0x40192a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40192f",
            "funcStartAddr": "40192f",
            "funcEndAddr": "401934",
            "decompiledFuncCode": "int64_t function_40192f(void) {\n    // 0x40192f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401934",
            "funcStartAddr": "401934",
            "funcEndAddr": "401939",
            "decompiledFuncCode": "int64_t function_401934(void) {\n    // 0x401934\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401939",
            "funcStartAddr": "401939",
            "funcEndAddr": "40193e",
            "decompiledFuncCode": "int64_t function_401939(void) {\n    // 0x401939\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401940",
            "funcStartAddr": "401940",
            "funcEndAddr": "402869",
            "decompiledFuncCode": "int64_t function_401940(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401955\n    function_406260(a2);\n    setlocale(LC_ALL, (char *)&g9);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_409e30(0x403080, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    setvbuf(g28, (char *)((int32_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\" ^ (int32_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\"), 1, 0);\n    int64_t v2 = 0xffffffff; // 0x4019b1\n    int64_t v3 = 0; // 0x4019b1\n    int64_t v4 = 0; // 0x4019b1\n    int64_t v5; // 0x401940\n    int64_t v6; // 0x401940\n    while (true) {\n      lab_0x4019b8_2:\n        // 0x4019b8\n        v6 = v3;\n        v5 = v2;\n        int64_t v7; // 0x401940\n        int32_t v8 = function_409690(v1, a2, \"bctw\", &g2, 0, v7);\n        switch (v8) {\n            case -1: {\n                goto lab_0x401b32;\n            }\n            case 119: {\n                // 0x401b18\n                g38 = 0;\n                g37 = 1;\n                g35 = 0;\n                v2 = v5;\n                v3 = v6;\n                goto lab_0x4019b8_2;\n            }\n            default: {\n                if (v8 > 119) {\n                    if (v8 == 130) {\n                        // 0x401af8\n                        g38 = 0;\n                        g37 = 0;\n                        g35 = 1;\n                        v2 = v5;\n                        v3 = v6;\n                    } else {\n                        if (v8 > 130) {\n                            if (v8 != 131) {\n                                // 0x401a28\n                                v2 = 1;\n                                v3 = v6;\n                                if (v8 != 132) {\n                                    // 0x4026bf\n                                    function_402c90(1);\n                                    // UNREACHABLE\n                                }\n                            } else {\n                                // 0x401ad3\n                                *(char *)&g34 = 1;\n                                v2 = v5;\n                                v3 = v6;\n                            }\n                        } else {\n                            if (v8 != 128) {\n                                if (v8 != 129) {\n                                    // 0x4026bf\n                                    function_402c90(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x401aab\n                                g38 = 1;\n                                g37 = 0;\n                                g35 = 0;\n                                v2 = v5;\n                                v3 = v6;\n                            } else {\n                                // 0x4019ff\n                                *(char *)&g36 = 1;\n                                v2 = v5;\n                                v3 = v6;\n                            }\n                        }\n                    }\n                } else {\n                    // 0x401a10\n                    v2 = 1;\n                    v3 = v6;\n                    if (v8 != 98) {\n                        if (v8 <= 98) {\n                            if (v8 == -131) {\n                                // 0x401a67\n                                function_408310((int64_t)g28, \"sha256sum\", \"GNU coreutils\", (int64_t)g17, \"Ulrich Drepper\", \"Scott Miller\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            if (v8 == -130) {\n                                // 0x401aea\n                                function_402c90(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x4026bf;\n                        }\n                        // 0x401a17\n                        v2 = v5;\n                        v3 = 1;\n                        if (v8 != 99) {\n                            // 0x401a48\n                            v2 = 0;\n                            v3 = v6;\n                            if (v8 != 116) {\n                              lab_0x4026bf:\n                                // 0x4026bf\n                                function_402c90(1);\n                                // UNREACHABLE\n                            }\n                        }\n                    }\n                }\n                goto lab_0x4019b8_2;\n            }\n        }\n    }\n  lab_0x401b32:\n    // 0x401b32\n    g40 = 66;\n    g39 = 64;\n    if (v5 == 0) {\n        // 0x401b4d\n        if ((char)v4 != 0) {\n            // 0x4026aa\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"--tag does not support --text mode\", 5));\n            // 0x4026bf\n            function_402c90(1);\n            // UNREACHABLE\n        }\n    }\n    if (v6 != 0) {\n        // 0x401b5b\n        if ((char)v4 != 0) {\n            // 0x4026aa\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --tag option is meaningless when verifying checksums\", 5));\n            // 0x4026bf\n            function_402c90(1);\n            // UNREACHABLE\n        }\n    }\n    // 0x401b6e\n    if (((char)((int32_t)v5 > -1) & (char)v6) != 0) {\n        // 0x4026aa\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --binary and --text options are meaningless when verifying checksums\", 5));\n        // 0x4026bf\n        function_402c90(1);\n        // UNREACHABLE\n    }\n    int64_t v9 = a2; // 0x401b90\n    int64_t v10 = v1; // 0x401b90\n    int64_t v11 = v5; // 0x401b90\n    int64_t v12 = v6; // 0x401b90\n    int64_t v13 = v4; // 0x401b90\n    int64_t v14; // 0x401940\n    int64_t v15; // 0x401940\n    int64_t v16; // 0x401940\n    int64_t v17; // 0x401940\n    int64_t v18; // 0x401940\n    int64_t v19; // 0x401940\n    int64_t v20; // 0x401940\n    int64_t v21; // 0x401940\n    int64_t v22; // 0x401940\n    int64_t v23; // 0x401940\n    int64_t v24; // 0x401940\n    int64_t v25; // 0x401940\n    int64_t v26; // 0x401940\n    int64_t v27; // 0x401940\n    int64_t v28; // 0x401940\n    int64_t v29; // 0x401940\n    int64_t v30; // 0x401940\n    int64_t v31; // 0x401940\n    if (*(char *)&g36 != 0) {\n        goto lab_0x401df3;\n    } else {\n        // 0x401b96\n        if (g38 == 0) {\n            // 0x40258f\n            v27 = a2;\n            v24 = v1;\n            v30 = (int64_t)\"the --binary and --text options are meaningless when verifying checksums\";\n            v14 = v5;\n            v17 = v6;\n            v20 = v4;\n            if (g37 == 0) {\n                goto lab_0x40268a;\n            } else {\n                // 0x40259c\n                v28 = a2;\n                v25 = v1;\n                v31 = (int64_t)\"the --warn option is meaningful only when verifying checksums\";\n                v16 = v5;\n                v19 = v6;\n                v22 = v4;\n                if (v6 == 0) {\n                    // 0x4026aa\n                    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --warn option is meaningful only when verifying checksums\", 5));\n                    // 0x4026bf\n                    function_402c90(1);\n                    // UNREACHABLE\n                }\n                goto lab_0x401bdb;\n            }\n        } else {\n            // 0x401ba3\n            v26 = a2;\n            v23 = v1;\n            v29 = (int64_t)\"the --status option is meaningful only when verifying checksums\";\n            v15 = v5;\n            v18 = v6;\n            v21 = v4;\n            if (v6 == 0) {\n                // 0x4026aa\n                error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --status option is meaningful only when verifying checksums\", 5));\n                // 0x4026bf\n                function_402c90(1);\n                // UNREACHABLE\n            }\n            goto lab_0x401bb6;\n        }\n    }\n  lab_0x401d3e:;\n    // 0x401d3e\n    int64_t v32; // 0x401940\n    int64_t v33 = v32;\n    char v34; // 0x401940\n    char v35 = v34;\n    int64_t v36 = v33; // 0x401d41\n    int64_t v37; // 0x401940\n    int64_t v38; // 0x401940\n    int64_t v39; // 0x401940\n    int64_t v40; // 0x401940\n    int64_t v41; // 0x401940\n    int64_t v42; // 0x401940\n    int64_t v43; // 0x401940\n    int64_t v44; // 0x401940\n    int64_t v45; // 0x401940\n    int64_t v46; // 0x401d66\n    int64_t v47; // 0x401e30\n    int32_t v48; // 0x401e76\n    int64_t v49; // 0x401e82\n    int64_t v50; // 0x4021ff\n    int64_t v51; // 0x401940\n    int64_t v52; // 0x401940\n    if (v35 == 9) {\n        goto lab_0x401d30;\n    } else {\n        int64_t v53 = v33 + (int64_t)(v35 == 92);\n        v44 = v35 != 92 ? 0 : v51;\n        v45 = v53 + v39;\n        int64_t v54 = (int64_t)\"SHA256\"; // 0x401940\n        int64_t v55 = v45; // 0x401940\n        int64_t v56 = 6; // 0x401940\n        int64_t v57 = v55;\n        int64_t v58 = v54;\n        unsigned char v59 = *(char *)v57; // 0x401d66\n        char v60 = *(char *)v58; // 0x401d66\n        v46 = v57 + v52;\n        char v61 = v60; // 0x401d66\n        bool v62 = false; // 0x401d66\n        while (v59 == v60) {\n            int64_t v63 = v56;\n            int64_t v64 = v63 - 1; // 0x401d66\n            v54 = v58 + v52;\n            v55 = v46;\n            v56 = v64;\n            v61 = v59;\n            v62 = true;\n            if (v64 == 0) {\n                // break -> \n                break;\n            }\n            v57 = v55;\n            v58 = v54;\n            v59 = *(char *)v57;\n            v60 = *(char *)v58;\n            v46 = v57 + v52;\n            v61 = v60;\n            v62 = false;\n        }\n        bool v65 = v62;\n        unsigned char v66 = v61;\n        if ((v59 >= v66 && !v65) != v59 < v66) {\n            char v67 = *(char *)v45; // 0x401e18\n            int64_t v68 = g40; // 0x401e20\n            v42 = v46;\n            v38 = v45;\n            if (v40 - v53 < v68 + (int64_t)(v67 == 92)) {\n                goto lab_0x401d95;\n            } else {\n                int64_t v69 = g39; // 0x401e30\n                v47 = v69 + v53;\n                int64_t v70 = v47 + v39;\n                char * v71 = (char *)v70; // 0x401e3b\n                char v72 = *v71; // 0x401e3b\n                v42 = v46;\n                v38 = v45;\n                if (v72 != 32 == (v72 != 9)) {\n                    goto lab_0x401d95;\n                } else {\n                    // 0x401e4a\n                    *v71 = 0;\n                    int64_t v73 = function_402950(v45); // 0x401e5f\n                    v42 = v46;\n                    v38 = v45;\n                    if ((char)v73 == 0) {\n                        goto lab_0x401d95;\n                    } else {\n                        // 0x401e6c\n                        v48 = g16;\n                        v49 = v47 + 1;\n                        v43 = 1;\n                        if (v40 - v49 == 1) {\n                            goto lab_0x401eac;\n                        } else {\n                            unsigned char v74 = *(char *)(v70 + 1); // 0x401e92\n                            if (v74 == 32) {\n                                goto lab_0x40228c;\n                            } else {\n                                // 0x401ea2\n                                v43 = v74;\n                                if (v74 == 42) {\n                                    goto lab_0x40228c;\n                                } else {\n                                    goto lab_0x401eac;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            char v75 = *(char *)(v45 + 6); // 0x401d75\n            char v76 = v75; // 0x401d81\n            int64_t v77 = v53 + 6; // 0x401d81\n            if (v75 == 32) {\n                char v78 = *(char *)(v45 + 7); // 0x401d83\n                v76 = v78;\n                v77 = v53 + 7;\n            }\n            char v79 = v76;\n            v42 = v46;\n            v38 = v45;\n            if (v79 == 40) {\n                int64_t v80 = v77;\n                int64_t v81 = v80 + 1; // 0x4021ef\n                int64_t v82 = v40 - v81; // 0x4021f3\n                v42 = v46;\n                v38 = v45;\n                if (v82 == 0) {\n                    goto lab_0x401d95;\n                } else {\n                    // 0x4021fc\n                    v50 = v81 + v39;\n                    int64_t v83 = v82 - 1; // 0x402202\n                    if (v83 == 0) {\n                        goto lab_0x402229;\n                    } else {\n                        char v84 = *(char *)(v80 + v39 + v82); // 0x402208\n                        int64_t v85 = v83; // 0x40220e\n                        if (v84 != 41) {\n                            int64_t v86 = v85;\n                            int64_t v87 = v86 - 1; // 0x402223\n                            while (v87 != 0) {\n                                int64_t v88 = v87 + v50;\n                                char v89 = *(char *)v88; // 0x402218\n                                v85 = v87;\n                                v41 = v88;\n                                v37 = v87;\n                                if (v89 == 41) {\n                                    goto lab_0x4023cb;\n                                }\n                                v86 = v85;\n                                v87 = v86 - 1;\n                            }\n                            goto lab_0x402229;\n                        } else {\n                            // 0x402208\n                            v41 = v83 + v50;\n                            v37 = v83;\n                            goto lab_0x4023cb;\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x401d95;\n            }\n        }\n    }\n  lab_0x4023cb:;\n    int64_t v90 = v37;\n    int64_t v91 = v41;\n    int64_t v92 = v46; // 0x4023ce\n    if (v44 != 0) {\n        int64_t v93 = function_4029b0(v50, v90, v91); // 0x402577\n        v42 = v90;\n        v38 = v45;\n        v92 = v90;\n        if (v93 != 0) {\n            goto lab_0x4023d4;\n        } else {\n            goto lab_0x401d95;\n        }\n    } else {\n        goto lab_0x4023d4;\n    }\n  lab_0x402466:;\n    // 0x402466\n    int64_t v94; // 0x401940\n    int64_t v95 = v94;\n    char v96 = g38; // 0x402466\n    char v97 = v96; // 0x402473\n    int32_t v98; // 0x401940\n    int32_t v99 = v98; // 0x402473\n    int32_t v100; // 0x401940\n    int32_t v101 = v100; // 0x402473\n    int64_t v102 = v95; // 0x402473\n    int64_t v103; // 0x401940\n    int64_t str; // 0x401940\n    int64_t v104; // 0x401940\n    int64_t v105; // 0x401940\n    int64_t v106; // 0x401940\n    int64_t v107; // 0x401940\n    char v108; // 0x401940\n    char v109; // 0x401940\n    int32_t v110; // 0x401940\n    int32_t v111; // 0x401940\n    if (v96 != 0) {\n        goto lab_0x401f95;\n    } else {\n        char v112 = g35; // 0x402479\n        v97 = v112;\n        v99 = v98;\n        v101 = v100;\n        v102 = v95;\n        if (v112 != 0) {\n            goto lab_0x401f95;\n        } else {\n            int64_t v113 = v104;\n            int64_t v114 = v106;\n            char v115 = v113;\n            v108 = v115;\n            v110 = v98;\n            v105 = v114;\n            v107 = v114;\n            if (v103 == 0) {\n                // 0x402536\n                function_402a40(str, 0);\n                v109 = v115;\n                v111 = v98;\n                goto lab_0x402550;\n            } else {\n                goto lab_0x402136;\n            }\n        }\n    }\n  lab_0x401da6:;\n    // 0x401da6\n    int64_t v116; // 0x401940\n    int64_t v117 = v116;\n    int64_t v118; // 0x401940\n    int64_t v119 = v118;\n    int64_t v120; // 0x401940\n    int64_t v121 = v120;\n    char * v122; // 0x401940\n    char v123 = *v122; // 0x401da6\n    char v124; // 0x401940\n    char v125 = v124; // 0x401daa\n    int32_t v126 = v98; // 0x401daa\n    int32_t v127 = v100; // 0x401daa\n    int64_t v128 = v119; // 0x401daa\n    int64_t v129 = v117; // 0x401daa\n    int64_t v130; // 0x401940\n    int64_t v131 = v130; // 0x401daa\n    char v132 = v124; // 0x401daa\n    int32_t v133 = v98; // 0x401daa\n    int32_t v134 = v100; // 0x401daa\n    int64_t v135 = v121; // 0x401daa\n    int64_t v136 = v119; // 0x401daa\n    int64_t v137 = v117; // 0x401daa\n    int64_t v138 = v130; // 0x401daa\n    if ((v123 & 48) != 0) {\n        // break -> 0x401fa5\n        goto lab_0x401fa5_2;\n    }\n    goto lab_0x401db0;\n  lab_0x401db0:;\n    int64_t v139 = v131;\n    int64_t v140 = v129;\n    int64_t v141 = v128;\n    int32_t v142 = v127;\n    int32_t v143 = v126;\n    char v144 = v125;\n    int64_t v145; // 0x401940\n    int64_t v146 = v145 + 1; // 0x401db0\n    char v147 = v144; // 0x401db4\n    int32_t v148 = v143; // 0x401db4\n    int32_t v149 = v142; // 0x401db4\n    int64_t v150 = v146; // 0x401db4\n    int64_t v151 = v141; // 0x401db4\n    int64_t v152 = v140; // 0x401db4\n    int64_t v153 = v139; // 0x401db4\n    int64_t v154; // 0x401940\n    int64_t v155; // 0x401940\n    if (v146 == 0) {\n        int64_t v156 = function_407d00(0, 3, v155); // 0x401dc6\n        error(1, (int32_t)\"%s: too many checksum lines\" ^ (int32_t)\"%s: too many checksum lines\", dcgettext(NULL, \"%s: too many checksum lines\", 5));\n        v9 = v156;\n        v10 = v154;\n        v11 = v141;\n        v12 = v140;\n        v13 = v139;\n        goto lab_0x401df3;\n    }\n    goto lab_0x401cd8;\n  lab_0x401d30:;\n    int64_t v176 = v36;\n    int64_t v177 = v176; // 0x401940\n    while (true) {\n        int64_t v178 = v177;\n        int64_t v179 = v178 + 1; // 0x401d30\n        char v180 = *(char *)(v179 + v39); // 0x401d34\n        v177 = v179;\n        v34 = v180;\n        v32 = v179;\n        if (v180 != 32) {\n            goto lab_0x401d3e;\n        }\n    }\n  lab_0x401d95:;\n    int64_t v181 = v38;\n    int64_t v182 = v42;\n    int64_t v158; // 0x401940\n    int64_t v183 = v158 + 1; // 0x401d95\n    char v184 = g37; // 0x401d99\n    v120 = v182;\n    v118 = v183;\n    v116 = v181;\n    if (v184 != 0) {\n        // 0x402048\n        function_407d00(0, 3, v155);\n        error(0, (int32_t)\"%s: %lu: improperly formatted %s checksum line\" ^ (int32_t)\"%s: %lu: improperly formatted %s checksum line\", dcgettext(NULL, \"%s: %lu: improperly formatted %s checksum line\", 5));\n        v120 = (int32_t)\"%s: %lu: improperly formatted %s checksum line\" ^ (int32_t)\"%s: %lu: improperly formatted %s checksum line\";\n        v118 = v183;\n        v116 = v181;\n    }\n    goto lab_0x401da6;\n  lab_0x402229:;\n    char v185 = *(char *)v50; // 0x402229\n    v42 = v46;\n    v38 = v45;\n    v41 = v50;\n    v37 = 0;\n    if (v185 != 41) {\n        goto lab_0x401d95;\n    } else {\n        goto lab_0x4023cb;\n    }\n  lab_0x401eac:;\n    int64_t v186 = v43;\n    v42 = v186;\n    v38 = v45;\n    int64_t v187; // 0x401940\n    if (v48 == 0) {\n        goto lab_0x401d95;\n    } else {\n        // 0x401eb4\n        g16 = 1;\n        v187 = v49;\n        goto lab_0x401ebe;\n    }\n  lab_0x40228c:\n    // 0x40228c\n    v187 = v49;\n    if (v48 != 1) {\n        // 0x402295\n        g16 = 0;\n        v187 = v47 + 2;\n    }\n    goto lab_0x401ebe;\n  lab_0x4023d4:;\n    int64_t v438 = v92;\n    *(char *)v91 = 0;\n    int64_t v439 = v50 + 1; // 0x4023d7\n    char v440 = *(char *)(v90 + v439); // 0x4023d7\n    int64_t v441 = v90 + 1; // 0x4023dd\n    int64_t v442 = v441; // 0x4023e4\n    int64_t v443 = v441; // 0x4023e4\n    char v444 = v440; // 0x4023e4\n    if (v440 != 9 != v440 != 32) {\n        while (true) {\n          lab_0x4023f0_2:;\n            int64_t v445 = v442;\n            int64_t v446 = v445 + 1; // 0x4023f0\n            char v447 = *(char *)(v446 + v50); // 0x4023f4\n            v443 = v446;\n            v444 = v447;\n            switch (v447) {\n                case 32: {\n                    // 0x4023f0\n                    v442 = v446;\n                    goto lab_0x4023f0_2;\n                }\n                case 9: {\n                    // 0x4023f0\n                    v442 = v446;\n                    goto lab_0x4023f0_2;\n                }\n                default: {\n                    goto lab_0x402403;\n                }\n            }\n        }\n    }\n  lab_0x402403:;\n    char v448 = v444;\n    v42 = v438;\n    v38 = v45;\n    int64_t v195; // 0x401940\n    int64_t v196; // 0x401940\n    int64_t v194; // 0x401940\n    int64_t v197; // 0x401940\n    if (v448 != 61) {\n        goto lab_0x401d95;\n    } else {\n        int64_t v449 = v443;\n        int64_t v450 = v449 + v439; // 0x40240c\n        char v451 = *(char *)v450; // 0x402411\n        int64_t v452 = v450; // 0x402419\n        if (v451 != 32 != v451 != 9) {\n            int64_t v453 = v50 + 2 + v449; // 0x402420\n            while (true) {\n              lab_0x402425_2:;\n                int64_t v454 = v453;\n                char v455 = *(char *)v454; // 0x402425\n                v452 = v454;\n                switch (v455) {\n                    case 32: {\n                        // 0x402425\n                        v453 = v454 + 1;\n                        goto lab_0x402425_2;\n                    }\n                    case 9: {\n                        // 0x402425\n                        v453 = v454 + 1;\n                        goto lab_0x402425_2;\n                    }\n                    default: {\n                        goto lab_0x402439;\n                    }\n                }\n            }\n        }\n      lab_0x402439:;\n        int64_t v456 = v452;\n        int64_t v457 = function_402950(v456); // 0x40243c\n        v194 = v438;\n        v195 = v456;\n        v196 = v50;\n        v197 = v457;\n        goto lab_0x402441;\n    }\n  lab_0x401ebe:;\n    int64_t v188 = v187;\n    int64_t v189 = v188 + v39; // 0x401ebe\n    int64_t v190 = v45; // 0x401ec4\n    int64_t v191 = v189; // 0x401ec4\n    if (v44 != 0) {\n        int64_t v192 = v40 - v188; // 0x4024e6\n        int64_t v193 = function_4029b0(v189, v192, v47); // 0x4024e9\n        v194 = v192;\n        v195 = v45;\n        v196 = v189;\n        v197 = v193 != 0;\n        goto lab_0x402441;\n    } else {\n        goto lab_0x401eca;\n    }\n  lab_0x401eca:\n    // 0x401eca\n    str = v191;\n    int64_t v198 = v190;\n    int64_t v199 = (int64_t)\"-\"; // 0x401ed0\n    int64_t v200 = str; // 0x401ed0\n    int64_t v201 = 2; // 0x401ed0\n    int32_t strcmp_rc; // 0x401c6c\n    if (strcmp_rc != 0) {\n        goto lab_0x401eee;\n    } else {\n        int64_t v202 = v200;\n        int64_t v203 = v199;\n        unsigned char v204 = *(char *)v202; // 0x401edf\n        char v205 = *(char *)v203; // 0x401edf\n        int64_t v206 = v202 + v52; // 0x401edf\n        char v207 = v205; // 0x401edf\n        bool v208 = false; // 0x401edf\n        while (v204 == v205) {\n            int64_t v209 = v201;\n            int64_t v210 = v209 - 1; // 0x401edf\n            v199 = v203 + v52;\n            v200 = v206;\n            v201 = v210;\n            v207 = v204;\n            v208 = true;\n            if (v210 == 0) {\n                // break -> \n                break;\n            }\n            v202 = v200;\n            v203 = v199;\n            v204 = *(char *)v202;\n            v205 = *(char *)v203;\n            v206 = v202 + v52;\n            v207 = v205;\n            v208 = false;\n        }\n        bool v211 = v208;\n        unsigned char v212 = v207;\n        v42 = v206;\n        v38 = v198;\n        if ((v204 >= v212 && !v211) == v204 < v212) {\n            goto lab_0x401d95;\n        } else {\n            goto lab_0x401eee;\n        }\n    }\n  lab_0x402441:;\n    int64_t v213 = v197;\n    int64_t v214 = v196;\n    int64_t v215 = v195;\n    int64_t v216 = v194;\n    v42 = v216;\n    v38 = v215;\n    v190 = v215;\n    v191 = v214;\n    if ((char)v213 != 0) {\n        goto lab_0x401eca;\n    } else {\n        goto lab_0x401d95;\n    }\n  lab_0x401eee:;\n    char v217 = g38; // 0x401ef1\n    int64_t v218 = 0; // 0x401ef8\n    if (v217 == 0) {\n        // 0x401efa\n        v218 = strchr((char *)str, 10) != NULL;\n    }\n    // 0x401f11\n    v103 = v218;\n    int64_t v219; // bp-104, 0x401940\n    char v220; // bp-169, 0x401940\n    uint64_t v221 = function_402af0(str, &v219, (int64_t *)&v220); // 0x401f21\n    int64_t v222; // 0x401940\n    char v223; // 0x401940\n    int32_t v224; // 0x401940\n    int32_t v225; // 0x401940\n    int64_t v226; // 0x401940\n    if ((char)v221 != 0) {\n        char v227 = *(char *)&g36; // 0x402090\n        if (v227 == 0) {\n            goto lab_0x4020a4;\n        } else {\n            char v228 = v220; // 0x402099\n            v97 = v124;\n            v99 = v98;\n            v101 = v100;\n            v102 = v226;\n            if (v228 != 0) {\n                goto lab_0x401f95;\n            } else {\n                goto lab_0x4020a4;\n            }\n        }\n    } else {\n        int32_t v229 = v100 + 1; // 0x401f31\n        char v230 = g38; // 0x401f37\n        v97 = v124;\n        v99 = v98;\n        v101 = v229;\n        v102 = v226;\n        if (v230 != 0) {\n            goto lab_0x401f95;\n        } else {\n            if (v103 != 0) {\n                struct _IO_FILE * v231 = g28; // 0x401f45\n                int64_t v232 = (int64_t)v231; // 0x401f45\n                int64_t * v233 = (int64_t *)(v232 + 40); // 0x401f4c\n                uint64_t v234 = *v233; // 0x401f4c\n                uint64_t v235 = *(int64_t *)(v232 + 48); // 0x401f50\n                if (v234 >= v235) {\n                    // 0x4027c8\n                    __overflow(v231, 92);\n                } else {\n                    // 0x401f5a\n                    *v233 = v234 + 1;\n                    *(char *)v234 = 92;\n                }\n            }\n            // 0x401f65\n            function_402a40(str, v103);\n            v223 = v124;\n            v224 = v98;\n            v225 = v229;\n            v222 = (int64_t)\"FAILED open or read\";\n            goto lab_0x401f7a;\n        }\n    }\n  lab_0x4020a4:;\n    uint64_t v236 = g39; // 0x4020a4\n    v106 = 0;\n    v94 = v226;\n    v104 = v221 & 0xffffffff;\n    int64_t v237; // 0x401940\n    int64_t v238; // 0x401940\n    char v239; // 0x401940\n    int32_t v240; // 0x401940\n    if (v236 < 2) {\n        goto lab_0x402466;\n    } else {\n        int32_t ** v241 = __ctype_tolower_loc(); // 0x4020be\n        int64_t v242 = v221 % 256; // 0x4020c5\n        int64_t v243 = 0x100000000000000 * v236 / 2 / 0x100000000000000; // 0x4020cb\n        int32_t * v244 = *v241; // 0x4020d0\n        int64_t v245 = (int64_t)v244; // 0x4020d0\n        int64_t v246 = 0; // 0x4020d3\n        int64_t v247 = v246;\n        int64_t v248; // 0x401940\n        unsigned char v249 = *(char *)(v248 + v247); // 0x4020fa\n        int64_t v250 = 2 * v247 + v198;\n        unsigned char v251 = *(char *)v250; // 0x402102\n        char v252 = *(char *)((int64_t)(v249 / 16) | (int64_t)\"0123456789abcdef\"); // 0x402111\n        int32_t v253 = *(int32_t *)(4 * (int64_t)v251 + v245); // 0x402118\n        int64_t v254; // 0x401940\n        while (v253 == (int32_t)v252) {\n            unsigned char v255 = *(char *)(v250 + 1); // 0x4020d8\n            int64_t v256 = v255; // 0x4020d8\n            char v257 = *(char *)((int64_t)(v249 % 16) | (int64_t)\"0123456789abcdef\"); // 0x4020e1\n            int32_t v258 = *(int32_t *)(4 * v256 + v245); // 0x4020e8\n            v254 = v256;\n            if (v258 != (int32_t)v257) {\n                goto lab_0x40211e;\n            }\n            int64_t v259 = v247 + 1; // 0x4020ed\n            v246 = v259;\n            v106 = v243;\n            v94 = v256;\n            v104 = v242;\n            if (v243 == v259) {\n                goto lab_0x402466;\n            }\n            v247 = v246;\n            v249 = *(char *)(v248 + v247);\n            v250 = 2 * v247 + v198;\n            v251 = *(char *)v250;\n            v252 = *(char *)((int64_t)(v249 / 16) | (int64_t)\"0123456789abcdef\");\n            v253 = *(int32_t *)(4 * (int64_t)v251 + v245);\n        }\n        // 0x40211e\n        v254 = v252;\n      lab_0x40211e:;\n        int64_t v260 = v254;\n        int32_t v261 = v98 + 1; // 0x40211e\n        char v262 = g38; // 0x402124\n        v97 = v124;\n        v99 = v261;\n        v101 = v100;\n        v102 = v260;\n        if (v262 != 0) {\n            goto lab_0x401f95;\n        } else {\n            // 0x402131\n            v108 = v124;\n            v110 = v261;\n            v105 = v243;\n            v107 = v247;\n            v239 = v124;\n            v240 = v261;\n            v237 = v243;\n            v238 = v247;\n            if (v103 == 0) {\n                goto lab_0x402156;\n            } else {\n                goto lab_0x402136;\n            }\n        }\n    }\n  lab_0x401f95:;\n    int64_t v263 = v102;\n    int32_t v264 = v101;\n    int32_t v265 = v99;\n    char v266 = v97;\n    char v267 = *v122; // 0x401f9b\n    v125 = v266;\n    v126 = v265;\n    v127 = v264;\n    v128 = v158;\n    v129 = v198;\n    v131 = v51;\n    v132 = v266;\n    v133 = v265;\n    v134 = v264;\n    v135 = v263;\n    v136 = v158;\n    v137 = v198;\n    v138 = v51;\n    if ((v267 & 48) != 0) {\n        // break -> 0x401fa5\n        goto lab_0x401fa5_2;\n    }\n    goto lab_0x401db0;\n  lab_0x401f7a:;\n    int64_t v268 = v222;\n    int32_t v269 = v225;\n    int32_t v270 = v224;\n    char v271 = v223;\n    __printf_chk(1, \": %s\\n\", dcgettext(NULL, (char *)v268, 5));\n    v97 = v271;\n    v99 = v270;\n    v101 = v269;\n    v102 = (int64_t)\": %s\\n\";\n    goto lab_0x401f95;\n  lab_0x402156:;\n    int64_t v272 = v238;\n    int64_t v273 = v237;\n    int32_t v274 = v240;\n    char v275 = v239;\n    function_402a40(str, v103);\n    v223 = v275;\n    v224 = v274;\n    v225 = v100;\n    v222 = (int64_t)\"FAILED\";\n    v109 = v275;\n    v111 = v274;\n    if (v273 == 0x100000000000000 * v272 >> 56) {\n        goto lab_0x402550;\n    } else {\n        goto lab_0x401f7a;\n    }\n  lab_0x402136:;\n    int64_t v276 = v107;\n    int64_t v277 = v105;\n    int32_t v278 = v110;\n    char v279 = v108;\n    struct _IO_FILE * v280 = g28; // 0x402136\n    int64_t v281 = (int64_t)v280; // 0x402136\n    int64_t * v282 = (int64_t *)(v281 + 40); // 0x40213d\n    uint64_t v283 = *v282; // 0x40213d\n    uint64_t v284 = *(int64_t *)(v281 + 48); // 0x402141\n    if (v283 >= v284) {\n        // 0x4027f7\n        __overflow(v280, 92);\n        v239 = v279;\n        v240 = v278;\n        v237 = v277;\n        v238 = 0x100000000000000 * v276 >> 56;\n    } else {\n        // 0x40214b\n        *v282 = v283 + 1;\n        *(char *)v283 = 92;\n        v239 = v279;\n        v240 = v278;\n        v237 = v277;\n        v238 = v276;\n    }\n    goto lab_0x402156;\n  lab_0x402550:;\n    int32_t v285 = v111;\n    char v286 = v109;\n    char v287 = g35; // 0x402550\n    v223 = v286;\n    v224 = v285;\n    v225 = v100;\n    v222 = (int64_t)\"OK\";\n    v97 = v286;\n    v99 = v285;\n    v101 = v100;\n    v102 = v103;\n    if (v287 != 0) {\n        goto lab_0x401f95;\n    } else {\n        goto lab_0x401f7a;\n    }\n  lab_0x4021b1:;\n    // 0x4021b1\n    int64_t v288; // 0x401940\n    int64_t v289 = v288;\n    int64_t v290; // 0x401940\n    int64_t v291 = v290;\n    int64_t v292; // 0x401940\n    int64_t v293 = v292;\n    int64_t v294; // 0x401940\n    int64_t v295 = v294;\n    int32_t v296; // 0x401940\n    int32_t v297 = v296;\n    int64_t v298; // bp-264, 0x401940\n    int64_t v299 = v298; // 0x4021b1\n    int64_t v300 = v299 + 8; // 0x4021b1\n    v298 = v300;\n    int64_t v301 = v300; // 0x4021bf\n    int32_t v302 = v297; // 0x4021bf\n    int64_t v303 = v295; // 0x4021bf\n    int64_t v304 = v293; // 0x4021bf\n    int64_t v305 = v291; // 0x4021bf\n    int64_t v306 = v289; // 0x4021bf\n    uint64_t v307; // 0x401940\n    if (v307 <= v300) {\n        // break -> 0x4021c5\n        goto lab_0x4021c5;\n    }\n    goto lab_0x401c50;\n  lab_0x4022d0:;\n    struct _IO_FILE * v333 = g28;\n    int64_t v334 = (int64_t)v333;\n    int64_t * v335 = (int64_t *)(v334 + 40);\n    uint64_t v336 = *v335;\n    uint64_t v337 = *(int64_t *)(v334 + 48);\n    int64_t v319; // 0x401940\n    int64_t v323; // 0x401940\n    int64_t v315; // 0x401940\n    int64_t v321; // 0x401940\n    int64_t v322; // 0x401940\n    int64_t v318; // 0x401940\n    if ((char)v319 != 0) {\n        if (v337 > v336) {\n            // 0x4027b3\n            *v335 = v336 + 1;\n            *(char *)v336 = 92;\n            v318 = 1;\n        } else {\n            // 0x402846\n            __overflow(v333, 92);\n            v318 = 1;\n        }\n        goto lab_0x4025d9;\n    } else {\n        if (v336 >= v337) {\n            // 0x40281a\n            __overflow(v333, 92);\n        } else {\n            // 0x4022f0\n            *v335 = v336 + 1;\n            *(char *)v336 = 92;\n        }\n        uint64_t v338 = g39; // 0x4022fb\n        v321 = 1;\n        v322 = 1;\n        v323 = v315;\n        if (v338 < 2) {\n            goto lab_0x402371;\n        } else {\n            goto lab_0x40230c;\n        }\n    }\n  lab_0x401ca1:;\n    // 0x401ca1\n    int64_t v326; // 0x401940\n    v154 = v326;\n    char * v325; // 0x401940\n    char * v339 = v325;\n    int64_t v160 = 0; // bp-168, 0x401cb1\n    int64_t v161 = 0; // bp-160, 0x401cba\n    struct _IO_FILE * v162 = (struct _IO_FILE *)v154; // 0x401cea\n    v122 = (char *)v154;\n    v155 = (int64_t)v339;\n    v147 = 0;\n    v148 = 0;\n    v149 = 0;\n    v150 = 1;\n    v151 = 0;\n    int64_t v309; // 0x401940\n    v152 = v309;\n    v153 = 0;\n    while (true) {\n      lab_0x401cd8:\n        // 0x401cd8\n        v130 = v153;\n        int64_t v157 = v152;\n        v158 = v151;\n        v100 = v149;\n        v98 = v148;\n        v124 = v147;\n        int32_t v159 = __getdelim((char **)&v160, (int32_t *)&v161, 10, v162); // 0x401cea\n        v132 = v124;\n        v133 = v98;\n        v134 = v100;\n        int64_t v163; // 0x401940\n        v135 = v163;\n        v136 = v158;\n        v137 = v157;\n        v138 = v130;\n        if (v159 < 1) {\n            // break -> 0x401fa5\n            break;\n        }\n        // 0x401cf8\n        v145 = v150;\n        int64_t v164 = v160; // 0x401cf8\n        char v165 = *(char *)v164; // 0x401cfd\n        v120 = v163;\n        v118 = v158;\n        v116 = v157;\n        if (v165 == 35) {\n            goto lab_0x401da6;\n        } else {\n            int64_t v166 = v159; // 0x401cea\n            int64_t v167 = v166 - 1;\n            char * v168 = (char *)(v164 + v167);\n            char v169 = *v168; // 0x401d0a\n            char v170 = v165; // 0x401d13\n            int64_t v171 = v166; // 0x401d13\n            int64_t v172 = v164; // 0x401d13\n            if (v169 == 10) {\n                // 0x401d15\n                *v168 = 0;\n                int64_t v173 = v160; // 0x401d1e\n                char v174 = *(char *)v173; // 0x401d23\n                v170 = v174;\n                v171 = v167;\n                v172 = v173;\n            }\n            // 0x401d27\n            v39 = v172;\n            v40 = v171;\n            char v175 = v170;\n            v36 = 0;\n            v34 = v175;\n            v32 = 0;\n            if (v175 != 32) {\n                goto lab_0x401d3e;\n            } else {\n                goto lab_0x401d30;\n            }\n        }\n    }\n  lab_0x401fa5_2:;\n    int64_t v340 = v138;\n    int64_t v341 = v137;\n    int64_t v342 = v136;\n    int64_t v343 = v160; // 0x401fa5\n    free((int64_t *)v343);\n    int32_t v344 = *(int32_t *)v154; // 0x401faf\n    int32_t v345 = v344 & 32; // 0x401fb2\n    int64_t v327; // 0x401940\n    int64_t v346; // 0x401940\n    int64_t v329; // 0x401940\n    int64_t v347; // 0x401940\n    int64_t v330; // 0x401940\n    int64_t v348; // 0x401940\n    int64_t v331; // 0x401940\n    int32_t v349; // 0x401940\n    int64_t v328; // 0x401940\n    int64_t v350; // 0x401940\n    char v351; // 0x401940\n    int32_t v352; // 0x401940\n    int32_t v353; // 0x401940\n    if (v345 != 0) {\n        // 0x4024f9\n        function_407d00(0, 3, v155);\n        error(0, (int32_t)\"%s: read error\" ^ (int32_t)\"%s: read error\", dcgettext(NULL, \"%s: read error\", 5));\n        v349 = (int32_t)&g57 ^ (int32_t)&g57;\n        v350 = v154;\n        v346 = v342;\n        v347 = v341;\n        v348 = v340;\n        goto lab_0x40203b;\n    } else {\n        int64_t v354 = v135;\n        v353 = v134;\n        v352 = v133;\n        v351 = v132;\n        if (strcmp_rc != 0) {\n            int64_t v355 = function_4086e0(v154, v354); // 0x402451\n            v327 = v155;\n            v328 = v154;\n            v329 = v342;\n            v330 = v341;\n            v331 = v340;\n            if ((int32_t)v355 == 0) {\n                goto lab_0x401fc6;\n            } else {\n                goto lab_0x402259;\n            }\n        } else {\n            goto lab_0x401fc6;\n        }\n    }\n  lab_0x402259:;\n    int64_t v356 = v331;\n    int64_t v357 = v330;\n    int64_t v358 = v329;\n    int64_t v359 = v328;\n    int64_t v360 = v327;\n    int64_t v361 = function_407d00(0, 3, v360); // 0x402265\n    int32_t * v362 = __errno_location(); // 0x40226d\n    uint32_t err_num = *v362; // 0x40227c\n    error(0, err_num, \"%s\", (char *)v361);\n    v349 = (int32_t)&g57 ^ (int32_t)&g57;\n    v350 = v359;\n    v346 = v358;\n    v347 = v357;\n    v348 = v356;\n    goto lab_0x40203b;\n  lab_0x40203b:;\n    int64_t v363 = v348;\n    int64_t v364 = v347;\n    int64_t v365 = v346;\n    int64_t v366 = v350;\n    int32_t v367 = v349;\n    int32_t v311; // 0x401940\n    v296 = 0x1000000 * (v367 & v311) >> 24;\n    v294 = v366;\n    v292 = v365;\n    v290 = v364;\n    v288 = v363;\n    goto lab_0x4021b1;\n  lab_0x4025d9:;\n    int64_t v368 = v318;\n    struct _IO_FILE * stream = g28; // 0x4025e8\n    fwrite_unlocked((int64_t *)\"SHA256\", 1, 6, stream);\n    struct _IO_FILE * stream2 = g28; // 0x4025fe\n    fwrite_unlocked((int64_t *)\" (\", 1, 2, stream2);\n    int64_t v313; // 0x401c59\n    function_402a40(v313, v368);\n    struct _IO_FILE * stream3 = g28; // 0x402625\n    fwrite_unlocked((int64_t *)\") = \", 1, 4, stream3);\n    uint64_t v369 = g39; // 0x402636\n    v321 = v368;\n    int64_t v370 = v315; // 0x402640\n    if (v369 >= 2) {\n        goto lab_0x40230c;\n    } else {\n        goto lab_0x402340;\n    }\n  lab_0x402371:;\n    int64_t v371 = v323;\n    int64_t v372 = v322;\n    struct _IO_FILE * v373 = g28; // 0x402371\n    int64_t v374 = (int64_t)v373; // 0x402371\n    int64_t * v375 = (int64_t *)(v374 + 40); // 0x402378\n    uint64_t v376 = *v375; // 0x402378\n    uint64_t v377 = *(int64_t *)(v374 + 48); // 0x40237c\n    if (v376 >= v377) {\n        // 0x402837\n        __overflow(v373, 32);\n    } else {\n        // 0x402386\n        *v375 = v376 + 1;\n        *(char *)v376 = 32;\n    }\n    struct _IO_FILE * v378 = g28; // 0x402391\n    int64_t v379 = (int64_t)v378; // 0x402391\n    int64_t * v380 = (int64_t *)(v379 + 40); // 0x402398\n    uint64_t v381 = *v380; // 0x402398\n    uint64_t v382 = *(int64_t *)(v379 + 48); // 0x40239c\n    if (v381 >= v382) {\n        // 0x402829\n        int32_t v383; // 0x401c3e\n        __overflow(v378, v383);\n    } else {\n        // 0x4023a6\n        *v380 = v381 + 1;\n        char v384; // 0x401c42\n        *(char *)v381 = v384;\n    }\n    int64_t v385 = v372 & 0xffffffff; // 0x4023bb\n    function_402a40(v313, v385);\n    v370 = v371;\n    goto lab_0x402340;\n  lab_0x40230c:;\n    int64_t v423 = v321;\n    int64_t v424 = 0; // 0x40230e\n    int64_t v425 = v424;\n    int64_t v426; // 0x401940\n    unsigned char v427 = *(char *)(v426 + v425); // 0x402310\n    int64_t v428 = v425 + 1; // 0x402321\n    __printf_chk(1, \"%02x\", (int32_t)v427);\n    uint64_t v429 = g39; // 0x40232a\n    v424 = v428;\n    while (v429 / 2 > v428) {\n        // 0x402310\n        v425 = v424;\n        v427 = *(char *)(v426 + v425);\n        v428 = v425 + 1;\n        __printf_chk(1, \"%02x\", (int32_t)v427);\n        v429 = g39;\n        v424 = v428;\n    }\n    // 0x402339\n    v370 = v428;\n    v322 = v423;\n    v323 = v428;\n    if ((char)v319 == 0) {\n        goto lab_0x402371;\n    } else {\n        goto lab_0x402340;\n    }\n  lab_0x401fc6:;\n    int64_t v400; // 0x401940\n    int64_t v393; // 0x401940\n    int64_t v399; // 0x401940\n    int64_t v395; // 0x401940\n    int32_t v397; // 0x401940\n    if ((char)v340 == 0) {\n        int64_t v430 = function_407d00(0, 3, v155); // 0x4024ab\n        error(0, (int32_t)\"%s: no properly formatted %s checksum lines found\" ^ (int32_t)\"%s: no properly formatted %s checksum lines found\", dcgettext(NULL, \"%s: no properly formatted %s checksum lines found\", 5));\n        v397 = v345;\n        v395 = v430;\n        v393 = v340;\n        goto lab_0x402036;\n    } else {\n        char v431 = g38; // 0x401fcf\n        v399 = v340;\n        if (v431 != 0) {\n            goto lab_0x4022a8;\n        } else {\n            // 0x401fdc\n            if (v342 != 0) {\n                // 0x40276e\n                error(0, (int32_t)\"WARNING: %lu line is improperly formatted\" ^ (int32_t)\"WARNING: %lu line is improperly formatted\", dcngettext(NULL, \"WARNING: %lu line is improperly formatted\", \"WARNING: %lu lines are improperly formatted\", (int32_t)v342, 5));\n            }\n            int64_t v432 = v340; // 0x401feb\n            if (v353 != 0) {\n                // 0x402739\n                error(0, (int32_t)\"WARNING: %lu listed file could not be read\" ^ (int32_t)\"WARNING: %lu listed file could not be read\", dcngettext(NULL, \"WARNING: %lu listed file could not be read\", \"WARNING: %lu listed files could not be read\", v353, 5));\n                v432 = v353;\n            }\n            int64_t v433 = v432;\n            int64_t v434 = v433; // 0x401ff7\n            if (v352 != 0) {\n                // 0x402704\n                error(0, (int32_t)\"WARNING: %lu computed checksum did NOT match\" ^ (int32_t)\"WARNING: %lu computed checksum did NOT match\", dcngettext(NULL, \"WARNING: %lu computed checksum did NOT match\", \"WARNING: %lu computed checksums did NOT match\", v352, 5));\n                v434 = v352;\n            }\n            int64_t v435 = v434;\n            char v436 = *(char *)&g36; // 0x401ffd\n            v399 = v435;\n            if (v436 == 0) {\n                goto lab_0x4022a8;\n            } else {\n                // 0x40200a\n                v400 = v435;\n                if (v351 == 0) {\n                    int64_t v437 = function_407d00(0, 3, v155); // 0x4026d5\n                    error(0, (int32_t)\"%s: no file was verified\" ^ (int32_t)\"%s: no file was verified\", dcgettext(NULL, \"%s: no file was verified\", 5));\n                    v397 = v345;\n                    v395 = v437;\n                    v393 = v435;\n                    goto lab_0x402036;\n                } else {\n                    goto lab_0x402015;\n                }\n            }\n        }\n    }\n  lab_0x402340:;\n    int64_t v386 = v370;\n    struct _IO_FILE * v387 = g28; // 0x402340\n    int64_t v388 = (int64_t)v387; // 0x402340\n    int64_t * v389 = (int64_t *)(v388 + 40); // 0x402347\n    uint64_t v390 = *v389; // 0x402347\n    uint64_t v391 = *(int64_t *)(v388 + 48); // 0x40234b\n    int64_t v310; // 0x401940\n    int64_t v308; // 0x401940\n    if (v390 >= v391) {\n        // 0x4027e1\n        __overflow(v387, 10);\n        v296 = v311;\n        v294 = v386;\n        v292 = v310;\n        v290 = v309;\n        v288 = v308;\n    } else {\n        // 0x402355\n        *v389 = v390 + 1;\n        *(char *)v390 = 10;\n        v296 = v311;\n        v294 = v386;\n        v292 = v310;\n        v290 = v309;\n        v288 = v308;\n    }\n    goto lab_0x4021b1;\n  lab_0x402036:;\n    int64_t v392 = v393;\n    int64_t v394 = v395;\n    uint32_t v396 = v397;\n    v349 = v396 % 2;\n    v350 = v394;\n    v346 = v342;\n    v347 = v341;\n    v348 = v392;\n    goto lab_0x40203b;\n  lab_0x4022a8:;\n    int64_t v398 = v399;\n    v400 = v398;\n    v397 = v345;\n    v395 = v154;\n    v393 = v398;\n    if (v351 != 0) {\n        goto lab_0x402015;\n    } else {\n        goto lab_0x402036;\n    }\n  lab_0x402015:;\n    int64_t v401 = v400;\n    v397 = v345;\n    v395 = v154;\n    v393 = v401;\n    if ((v353 || v352) == 0) {\n        char v402 = *(char *)&g34; // 0x402021\n        v397 = v402 ^ 1 | (char)(v342 == 0);\n        v395 = v154;\n        v393 = v401;\n    }\n    goto lab_0x402036;\n    // 0x4019b8\n    goto lab_0x4019b8_2;\n  lab_0x401df3:\n    // 0x401df3\n    v26 = v9;\n    v23 = v10;\n    v29 = (int64_t)\"the --ignore-missing option is meaningful only when verifying checksums\";\n    v15 = v11;\n    v18 = v12;\n    v21 = v13;\n    if ((char)v12 == 0) {\n        // 0x4026aa\n        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --ignore-missing option is meaningful only when verifying checksums\", 5));\n        // 0x4026bf\n        function_402c90(1);\n        // UNREACHABLE\n    }\n    goto lab_0x401bb6;\n  lab_0x401bb6:;\n    int64_t v403 = v26; // 0x401bbd\n    int64_t v404 = v23; // 0x401bbd\n    int64_t v405 = v29; // 0x401bbd\n    int64_t v406 = v15; // 0x401bbd\n    int64_t v407 = v18; // 0x401bbd\n    int64_t v408 = v21; // 0x401bbd\n    v28 = v26;\n    v25 = v23;\n    v31 = v29;\n    v16 = v15;\n    v19 = v18;\n    v22 = v21;\n    if (g37 != 0) {\n        goto lab_0x401bdb;\n    } else {\n        goto lab_0x401bbf;\n    }\n  lab_0x401bdb:;\n    int64_t v409 = v16;\n    int64_t v410 = (0x100000000 * v25 >> 29) + v28; // 0x401be7\n    int32_t v411 = *(int32_t *)0x60e29c; // 0x401bf0\n    int64_t v412 = v410; // 0x401bf9\n    if (v411 == (int32_t)v25) {\n        // 0x401bfb\n        *(int64_t *)v410 = (int64_t)\"-\";\n        v412 = v410 + 8;\n    }\n    // 0x401c10\n    if (v412 > 8 * (int64_t)v411 + v28) {\n        // 0x401c23\n        while (true) {\n          lab_0x401c50:\n            // 0x401c50\n            v308 = v306;\n            v309 = v305;\n            v310 = v304;\n            v311 = v302;\n            int64_t v312 = v301; // 0x401c50\n            v313 = *(int64_t *)v312;\n            char * str2 = (char *)v313; // 0x401c5c\n            uint32_t v314; // 0x401c2e\n            if ((char)v314 == 0) {\n                // 0x40218d\n                v315 = v303;\n                int64_t v316; // bp-152, 0x401940\n                int64_t v317 = function_402af0(v313, &v316, &v219); // 0x40219f\n                v296 = 0;\n                v294 = v315;\n                v292 = v310;\n                v290 = v309;\n                v288 = v308;\n                if ((char)v317 != 0) {\n                    // 0x4022b8\n                    if (strchr(str2, 92) == NULL) {\n                        // 0x4025b4\n                        if (strchr(str2, 10) != NULL) {\n                            goto lab_0x4022d0;\n                        } else {\n                            // 0x4025cc\n                            v318 = 0;\n                            if ((char)v319 == 0) {\n                                uint64_t v320 = g39; // 0x402365\n                                v321 = 0;\n                                v322 = 0;\n                                v323 = v315;\n                                if (v320 >= 2) {\n                                    goto lab_0x40230c;\n                                } else {\n                                    goto lab_0x402371;\n                                }\n                            } else {\n                                goto lab_0x4025d9;\n                            }\n                        }\n                    } else {\n                        goto lab_0x4022d0;\n                    }\n                } else {\n                    goto lab_0x4021b1;\n                }\n            } else {\n                // 0x401c67\n                strcmp_rc = strcmp(str2, \"-\");\n                if (strcmp_rc != 0) {\n                    int64_t v324 = function_4061c0(v313, (int64_t *)\"r\"); // 0x402248\n                    v325 = str2;\n                    v326 = v324;\n                    v327 = v313;\n                    v328 = v324;\n                    v329 = v310;\n                    v330 = v309;\n                    v331 = v308;\n                    if (v324 != 0) {\n                        goto lab_0x401ca1;\n                    } else {\n                        goto lab_0x402259;\n                    }\n                } else {\n                    // 0x401c7d\n                    g41 = 1;\n                    struct _IO_FILE * v332 = g29; // 0x401c95\n                    v325 = dcgettext(NULL, \"standard input\", 5);\n                    v326 = (int64_t)v332;\n                    goto lab_0x401ca1;\n                }\n            }\n        }\n    }\n  lab_0x4021c5:\n    // 0x4021c5\n    if (g41 == 0 || (int32_t)function_4086e0((int64_t)g29, v31) != -1) {\n        // 0x4021d2\n        return 0;\n    }\n    char * format = dcgettext(NULL, \"standard input\", 5); // 0x40266c\n    uint32_t err_num2 = *__errno_location(); // 0x402681\n    error(1, err_num2, format);\n    v27 = (int64_t)format;\n    v24 = v25;\n    v30 = err_num2;\n    v14 = (int32_t)v409 != -1 ? v409 : 0;\n    v17 = v19;\n    v20 = v22;\n    goto lab_0x40268a;\n  lab_0x401bbf:;\n    int64_t v418 = v408;\n    int64_t v419 = v407;\n    int64_t v420 = v406;\n    int64_t v421 = v404;\n    int64_t v422 = v403;\n    v28 = v422;\n    v25 = v421;\n    v31 = v405;\n    v16 = v420;\n    v19 = v419;\n    v22 = v418;\n    if (*(char *)&g34 != 0) {\n        // 0x401bc8\n        v28 = v422;\n        v25 = v421;\n        v31 = (int64_t)\"the --strict option is meaningful only when verifying checksums\";\n        v16 = v420;\n        v19 = v419;\n        v22 = v418;\n        if ((char)v419 == 0) {\n            // 0x4026aa\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --strict option is meaningful only when verifying checksums\", 5));\n            // 0x4026bf\n            function_402c90(1);\n            // UNREACHABLE\n        }\n    }\n    goto lab_0x401bdb;\n  lab_0x40268a:;\n    int64_t v413 = v20;\n    int64_t v414 = v17;\n    int64_t v415 = v14;\n    int64_t v416 = v24;\n    int64_t v417 = v27;\n    v403 = v417;\n    v404 = v416;\n    v405 = v30;\n    v406 = v415;\n    v407 = v414;\n    v408 = v413;\n    if (g35 == 1) {\n        // 0x402697\n        v403 = v417;\n        v404 = v416;\n        v405 = (int64_t)\"the --quiet option is meaningful only when verifying checksums\";\n        v406 = v415;\n        v407 = v414;\n        v408 = v413;\n        if ((char)v414 == 0) {\n            // 0x4026aa\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"the --quiet option is meaningful only when verifying checksums\", 5));\n            // 0x4026bf\n            function_402c90(1);\n            // UNREACHABLE\n        }\n    }\n    goto lab_0x401bbf;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402870",
            "funcEndAddr": "40289b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402870\n    int64_t v1; // 0x402870\n    __libc_start_main(0x401940, (int32_t)a4, (char **)&v1, (void (*)())0x409dc0, (void (*)())0x409e20, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40289b",
            "funcStartAddr": "40289b",
            "funcEndAddr": "4028ba",
            "decompiledFuncCode": "int64_t function_40289b(void) {\n    // 0x40289b\n    return &g27;\n}\n"
        },
        {
            "funcName": "function_4028ba",
            "funcStartAddr": "4028ba",
            "funcEndAddr": "4028f1",
            "decompiledFuncCode": "int64_t function_4028ba(void) {\n    // 0x4028ba\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4028f1",
            "funcStartAddr": "4028f1",
            "funcEndAddr": "402948",
            "decompiledFuncCode": "int64_t function_4028f1(void) {\n    // 0x4028f1\n    if (g32 != 0) {\n        // 0x402947\n        int64_t result; // 0x4028f1\n        return result;\n    }\n    int64_t v1 = g33; // 0x402924\n    int64_t result2; // 0x402936\n    if (g33 >= ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x402936\n        result2 = function_40289b();\n        g32 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x402926\n        v1++;\n    }\n    // 0x40291a\n    g33 = v1;\n    // 0x402936\n    result2 = function_40289b();\n    g32 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402948",
            "funcStartAddr": "402948",
            "funcEndAddr": "40294d",
            "decompiledFuncCode": "int64_t function_402948(void) {\n    // 0x402948\n    return function_4028ba();\n}\n"
        },
        {
            "funcName": "function_402950",
            "funcStartAddr": "402950",
            "funcEndAddr": "4029ad",
            "decompiledFuncCode": "int64_t function_402950(int64_t a1) {\n    uint64_t v1 = g39; // 0x402959\n    int64_t v2; // 0x402950\n    if (v1 == 0) {\n        // 0x4029a0\n        return v2 & -256 | (int64_t)(*(char *)a1 == 0);\n    }\n    int16_t * v3 = *__ctype_b_loc(); // 0x40296a\n    int64_t v4 = 0; // 0x40296f\n    int64_t v5 = a1; // 0x40296f\n    unsigned char v6 = *(char *)v5; // 0x402987\n    while ((*(char *)((int64_t)v3 + 1 + 2 * (int64_t)v6) & 16) != 0) {\n        // 0x402978\n        v4 = v4 + 1 & 0xffffffff;\n        v5++;\n        v2 = v4;\n        int64_t v7 = v5; // 0x402985\n        if (v4 >= v1) {\n            // 0x4029a0\n            return v2 & -256 | (int64_t)(*(char *)v7 == 0);\n        }\n        v6 = *(char *)v5;\n    }\n    // 0x402991\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4029b0",
            "funcStartAddr": "4029b0",
            "funcEndAddr": "402a31",
            "decompiledFuncCode": "int64_t function_4029b0(int64_t result, uint64_t a2, int64_t a3) {\n    int64_t v1 = result; // 0x4029bd\n    if (a2 == 0) {\n        // 0x4029e3\n        return result;\n    }\n    int64_t v2 = 0; // 0x4029bd\n    int64_t result2; // 0x4029b0\n    int64_t v3; // 0x4029b0\n    int64_t v4; // 0x4029b0\n    while (true) {\n      lab_0x4029bf:;\n        int64_t v5 = v2;\n        char v6 = *(char *)(v5 + result); // 0x4029bf\n        result2 = 0;\n        if (v6 == 0) {\n            // break -> 0x4029e3\n            break;\n        }\n        // 0x4029c7\n        v3 = v1;\n        if (v6 != 92) {\n            // 0x4029f0\n            *(char *)v3 = v6;\n            v4 = v5;\n            goto lab_0x4029f6;\n        } else {\n            // 0x4029cc\n            result2 = 0;\n            if ((int64_t)(a2 - 1) == v5) {\n                // break -> 0x4029e3\n                break;\n            }\n            int64_t v7 = v5 + 1; // 0x4029d1\n            result2 = 0;\n            switch (*(char *)(v7 + result)) {\n                case 92: {\n                    // 0x402a28\n                    *(char *)v3 = 92;\n                    v4 = v7;\n                    goto lab_0x4029f6;\n                }\n                case 110: {\n                    // 0x402a18\n                    *(char *)v3 = 10;\n                    v4 = v7;\n                    goto lab_0x4029f6;\n                }\n                default: {\n                    return result2;\n                }\n            }\n        }\n    }\n    // 0x4029e3\n    return result2;\n  lab_0x4029f6:\n    // 0x4029f6\n    v1 = v3 + 1;\n    v2 = v4 + 1;\n    if (v2 >= a2) {\n        // 0x402a03\n        result2 = result;\n        if (v1 >= a2 + result) {\n            return result2;\n        } else {\n            // 0x402a0b\n            *(char *)v1 = 0;\n            result2 = result;\n            return result2;\n        }\n    }\n    goto lab_0x4029bf;\n}\n"
        },
        {
            "funcName": "function_402a40",
            "funcStartAddr": "402a40",
            "funcEndAddr": "402ae5",
            "decompiledFuncCode": "int64_t function_402a40(int64_t a1, int64_t a2) {\n    if ((char)a2 == 0) {\n        // 0x402ad8\n        return fputs_unlocked((char *)a1, g28);\n    }\n    char v1 = *(char *)a1; // 0x402a69\n    if (v1 == 0) {\n        // 0x402ac0\n        int64_t result; // 0x402a40\n        return result;\n    }\n    int64_t v2 = a1; // 0x402a6f\n    int64_t result2; // 0x402a40\n    uint64_t v3; // 0x402a50\n    int64_t v4; // 0x402a71\n    int64_t * v5; // 0x402a50\n    if (v1 == 10) {\n        // 0x402aa0\n        result2 = fwrite_unlocked((int64_t *)\"\\\\n\", 1, 2, g28);\n    } else {\n        if (v1 != 92) {\n            // 0x402a50\n            v4 = (int64_t)g28;\n            v5 = (int64_t *)(v4 + 40);\n            v3 = *v5;\n            if (v3 >= *(int64_t *)(v4 + 48)) {\n                // 0x402ac8\n                result2 = __overflow(g28, (int32_t)v1);\n            } else {\n                // 0x402a5a\n                *v5 = v3 + 1;\n                *(char *)v3 = v1;\n                result2 = v3;\n            }\n        } else {\n            // 0x402a84\n            result2 = fwrite_unlocked((int64_t *)\"\\\\\\\\\", 1, 2, g28);\n        }\n    }\n    // 0x402a65\n    v2++;\n    char v6 = *(char *)v2; // 0x402a69\n    while (v6 != 0) {\n        unsigned char v7 = v6;\n        if (v7 == 10) {\n            // 0x402aa0\n            result2 = fwrite_unlocked((int64_t *)\"\\\\n\", 1, 2, g28);\n        } else {\n            if (v7 != 92) {\n                // 0x402a50\n                v4 = (int64_t)g28;\n                v5 = (int64_t *)(v4 + 40);\n                v3 = *v5;\n                if (v3 >= *(int64_t *)(v4 + 48)) {\n                    // 0x402ac8\n                    result2 = __overflow(g28, (int32_t)v7);\n                } else {\n                    // 0x402a5a\n                    *v5 = v3 + 1;\n                    *(char *)v3 = v7;\n                    result2 = v3;\n                }\n            } else {\n                // 0x402a84\n                result2 = fwrite_unlocked((int64_t *)\"\\\\\\\\\", 1, 2, g28);\n            }\n        }\n        // 0x402a65\n        v2++;\n        v6 = *(char *)v2;\n    }\n    // 0x402ac0\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402af0",
            "funcStartAddr": "402af0",
            "funcEndAddr": "402c82",
            "decompiledFuncCode": "int64_t function_402af0(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    bool v3; // 0x402af0\n    int64_t v4 = v3 ? -1 : 1; // 0x402b0d\n    int64_t v5 = (int64_t)\"-\"; // 0x402af0\n    int64_t v6 = a1; // 0x402af0\n    int64_t v7 = 2; // 0x402b0d\n    unsigned char v8 = *(char *)v6; // 0x402b0d\n    char v9 = *(char *)v5; // 0x402b0d\n    char v10 = v9; // 0x402b0d\n    bool v11 = false; // 0x402b0d\n    while (v8 == v9) {\n        v7--;\n        v5 += v4;\n        v6 += v4;\n        v10 = v8;\n        v11 = true;\n        if (v7 == 0) {\n            // break -> \n            break;\n        }\n        v8 = *(char *)v6;\n        v9 = *(char *)v5;\n        v10 = v9;\n        v11 = false;\n    }\n    unsigned char v12 = v10;\n    *(char *)a3 = 0;\n    int64_t v13; // 0x402af0\n    if ((v8 >= v12 && !v11) != v8 < v12) {\n        int64_t v14 = function_4061c0(a1, (int64_t *)\"r\"); // 0x402b6b\n        if (v14 == 0) {\n            int32_t * err_num = __errno_location(); // 0x402c30\n            unsigned char result = *(char *)&g36; // 0x402c35\n            if (result != 0) {\n                // 0x402c45\n                if (*err_num == 2) {\n                    // 0x402c78\n                    *(char *)a3 = 1;\n                    // 0x402b4f\n                    return result;\n                }\n            }\n            // 0x402c4a\n            error(0, *err_num, \"%s\", (char *)function_407d00(0, 3, a1));\n            // 0x402b4f\n            return 0;\n        }\n        // 0x402b7c\n        function_406190(v14, 2, v1);\n        int64_t v15 = function_405ec0(v14, v2); // 0x402b8f\n        v13 = v14;\n        if ((int32_t)v15 == 0) {\n            int64_t result2 = 1; // 0x402ba2\n            if ((int32_t)function_4086e0(v14, v2) != 0) {\n                // 0x402ba4\n                error(0, *__errno_location(), \"%s\", (char *)function_407d00(0, 3, a1));\n                result2 = 0;\n            }\n            // 0x402b4f\n            return result2;\n        }\n    } else {\n        int64_t v16 = (int64_t)g29; // 0x402b1b\n        g41 = 1;\n        function_406190(v16, 2, v1);\n        int64_t v17 = function_405ec0(v16, v2); // 0x402b3c\n        v13 = v16;\n        if ((int32_t)v17 == 0) {\n            // 0x402b4f\n            return 1;\n        }\n    }\n    int64_t v18 = function_407d00(0, 3, a1); // 0x402bed\n    uint32_t err_num2 = *__errno_location(); // 0x402c04\n    error(0, err_num2, \"%s\", (char *)v18);\n    if (v13 != (int64_t)g29) {\n        // 0x402c1a\n        function_4086e0(v13, (int64_t)err_num2);\n    }\n    // 0x402b4f\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402c90",
            "funcStartAddr": "402c90",
            "funcEndAddr": "40305d",
            "decompiledFuncCode": "int64_t function_402c90(int32_t status) {\n    // 0x402c90\n    if (status != 0) {\n        // 0x402caa\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x402ccf\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402cd6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\nPrint or check %s (%d-bit) checksums.\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\n  -b, --binary         read in binary mode\\n\", 5), g28);\n    __printf_chk(1, dcgettext(NULL, \"  -c, --check          read %s sums from the FILEs and check them\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"      --tag            create a BSD-style checksum\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"  -t, --text           read in text mode (default)\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe following five options are useful only when verifying checksums:\\n      --ignore-missing  don't fail or report status for missing files\\n      --quiet          don't print OK for each successfully verified file\\n      --status         don't output anything, status code shows success\\n      --strict         exit non-zero for improperly formatted checksum lines\\n  -w, --warn           warn about improperly formatted checksum lines\\n\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g28);\n    __printf_chk(1, dcgettext(NULL, \"\\nThe sums are computed as described in %s.  When checking, the input\\nshould be a former output of this program.  The default mode is to print a\\nline with checksum, a space, a character indicating input mode ('*' for binary,\\n' ' for text or where binary is insignificant), and name for each FILE.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x402e3e\n    bool v2; // 0x402c90\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402ec0\n    int64_t v6 = *(int64_t *)v5; // 0x402ec4\n    int64_t v7 = 10; // 0x402eca\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"sha256sum\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402ed6\n        char v11 = *(char *)v9; // 0x402ed6\n        char v12 = v11; // 0x402ed6\n        bool v13 = false; // 0x402ed6\n        while (v10 == v11) {\n            // 0x402ecc\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402ed6\n            int64_t v15 = v8 + v3; // 0x402ed6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402ee2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 10;\n    }\n    // 0x402ee2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402ff4;\n        } else {\n            // 0x402fde\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403033\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402f44;\n            } else {\n                goto lab_0x402ff4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402f44;\n        } else {\n            // 0x402f2a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403033\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402f44;\n            } else {\n                goto lab_0x402f44;\n            }\n        }\n    }\n  lab_0x402ff4:\n    // 0x402ff4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402f84\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402ccf\n    exit(status);\n    // UNREACHABLE\n  lab_0x402f44:\n    // 0x402f44\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402f84\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402ccf\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403060",
            "funcStartAddr": "403060",
            "funcEndAddr": "403068",
            "decompiledFuncCode": "int64_t function_403060(int64_t a1) {\n    // 0x403060\n    g43 = a1;\n    int64_t result; // 0x403060\n    return result;\n}\n"
        },
        {
            "funcName": "function_403070",
            "funcStartAddr": "403070",
            "funcEndAddr": "403078",
            "decompiledFuncCode": "int64_t function_403070(int64_t a1) {\n    // 0x403070\n    g42 = a1;\n    int64_t result; // 0x403070\n    return result;\n}\n"
        },
        {
            "funcName": "function_403080",
            "funcStartAddr": "403080",
            "funcEndAddr": "40311e",
            "decompiledFuncCode": "int64_t function_403080(void) {\n    // 0x403080\n    int32_t * err_num; // 0x403096\n    if ((int32_t)function_409790((int64_t)g28) == 0) {\n        goto lab_0x4030ac;\n    } else {\n        // 0x403096\n        err_num = __errno_location();\n        if (g42 == 0) {\n            goto lab_0x4030c3;\n        } else {\n            // 0x4030a7\n            if (*err_num != 32) {\n                goto lab_0x4030c3;\n            } else {\n                goto lab_0x4030ac;\n            }\n        }\n    }\n  lab_0x4030ac:;\n    int64_t result = function_409790((int64_t)g31); // 0x4030b3\n    if ((int32_t)result == 0) {\n        // 0x4030bc\n        return result;\n    }\n    // 0x4030fe\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x4030c3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4030cf\n    if (g43 == 0) {\n        // 0x403109\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4030e3\n        error(0, *err_num, \"%s: %s\", (char *)function_407cd0((int64_t)g43), v1);\n    }\n    // 0x4030fe\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403120",
            "funcStartAddr": "403120",
            "funcEndAddr": "403168",
            "decompiledFuncCode": "int64_t function_403120(int64_t a1) {\n    // 0x403120\n    *(int64_t *)(a1 + 32) = 0;\n    *(int64_t *)a1 = -0x4498517a95f61999;\n    *(int64_t *)(a1 + 8) = -0x5ab00ac5c3910c8e;\n    *(int64_t *)(a1 + 16) = -0x64fa9773aef1ad81;\n    *(int64_t *)(a1 + 24) = 0x5be0cd191f83d9ab;\n    *(int64_t *)(a1 + 40) = 0;\n    return 0x5be0cd191f83d9ab;\n}\n"
        },
        {
            "funcName": "function_403170",
            "funcStartAddr": "403170",
            "funcEndAddr": "4031b8",
            "decompiledFuncCode": "int64_t function_403170(int64_t a1) {\n    // 0x403170\n    *(int64_t *)(a1 + 32) = 0;\n    *(int64_t *)a1 = 0x367cd507c1059ed8;\n    *(int64_t *)(a1 + 8) = -0x8f1a6c6cf8f22e9;\n    *(int64_t *)(a1 + 16) = 0x68581511ffc00b31;\n    *(int64_t *)(a1 + 24) = -0x4105b05b9b067059;\n    *(int64_t *)(a1 + 40) = 0;\n    return -0x4105b05b9b067059;\n}\n"
        },
        {
            "funcName": "function_4031c0",
            "funcStartAddr": "4031c0",
            "funcEndAddr": "4031db",
            "decompiledFuncCode": "int64_t function_4031c0(int64_t a1, int64_t result, int64_t a3) {\n    for (int64_t i = 0; i < 29; i += 4) {\n        // 0x4031c8\n        *(int32_t *)(i + result) = llvm_bswap_i32(*(int32_t *)(i + a1));\n    }\n    // 0x4031da\n    return result;\n}\n"
        },
        {
            "funcName": "function_4031e0",
            "funcStartAddr": "4031e0",
            "funcEndAddr": "4031fb",
            "decompiledFuncCode": "int64_t function_4031e0(int64_t a1, int64_t result, int64_t a3) {\n    for (int64_t i = 0; i < 25; i += 4) {\n        // 0x4031e8\n        *(int32_t *)(i + result) = llvm_bswap_i32(*(int32_t *)(i + a1));\n    }\n    // 0x4031fa\n    return result;\n}\n"
        },
        {
            "funcName": "function_403200",
            "funcStartAddr": "403200",
            "funcEndAddr": "405984",
            "decompiledFuncCode": "int64_t function_403200(uint64_t a1, uint64_t a2, int64_t a3) {\n    uint32_t v1 = (int32_t)a2; // 0x403205\n    uint64_t v2 = (a2 & -4) + a1; // 0x403212\n    int32_t * v3 = (int32_t *)(a3 + 32); // 0x403239\n    uint32_t v4 = *v3 + v1; // 0x403239\n    int64_t v5 = a3; // bp-128, 0x403240\n    *v3 = v4;\n    int32_t * v6 = (int32_t *)(a3 + 36); // 0x403251\n    uint32_t v7 = *(int32_t *)(a3 + 4); // 0x40325d\n    int64_t result = v7; // 0x40325d\n    *v6 = (int32_t)(v4 < v1) + (int32_t)(a2 / 0x100000000) + *v6;\n    if (v2 <= a1) {\n        // 0x405975\n        return result;\n    }\n    int64_t v8 = a1; // 0x403295\n    int32_t v9 = *(int32_t *)(a3 + 28); // 0x403295\n    int32_t v10 = *(int32_t *)(a3 + 12); // 0x403295\n    int32_t v11 = *(int32_t *)(a3 + 8); // 0x403295\n    int32_t v12 = v7; // 0x403295\n    int64_t v13; // 0x403200\n    int32_t v14 = v13; // 0x403295\n    int64_t v15 = result;\n    int32_t v16; // 0x403200\n    uint32_t v17 = v16;\n    int32_t v18; // 0x403200\n    uint32_t v19 = v18;\n    int32_t v20; // 0x403200\n    uint32_t v21 = v20;\n    int32_t v22; // 0x403200\n    uint32_t v23 = v22;\n    int32_t v24; // 0x403200\n    uint32_t v25 = v24;\n    int32_t v26; // 0x403200\n    uint32_t v27 = v26;\n    int32_t v28; // 0x403200\n    uint32_t v29 = v28;\n    int32_t v30; // 0x403200\n    uint32_t v31 = v30;\n    int32_t v32; // 0x403200\n    uint32_t v33 = v32;\n    int32_t v34; // 0x403200\n    uint32_t v35 = v34;\n    int32_t v36; // 0x403200\n    uint32_t v37 = v36;\n    int32_t v38; // 0x403200\n    uint32_t v39 = v38;\n    int32_t v40; // 0x403200\n    uint32_t v41 = v40;\n    int32_t v42; // 0x403200\n    uint32_t v43 = v42;\n    int32_t v44; // 0x403200\n    uint32_t v45 = v44;\n    uint32_t v46 = *(int32_t *)(a3 + 16);\n    int32_t v47 = *(int32_t *)(a3 + 20);\n    int32_t v48 = *(int32_t *)(a3 + 24);\n    int64_t v49 = v13 & 0xffffffff;\n    int64_t v50 = 0;\n    int32_t v51 = llvm_bswap_i32(*(int32_t *)(v50 + v8)); // 0x4032a3\n    *(int32_t *)((int64_t)&v5 + 8 + v50) = v51;\n    int64_t v52 = v50 + 4; // 0x4032b1\n    while (v50 != 60) {\n        // 0x4032a0\n        v50 = v52;\n        v51 = llvm_bswap_i32(*(int32_t *)(v50 + v8));\n        *(int32_t *)((int64_t)&v5 + 8 + v50) = v51;\n        v52 = v50 + 4;\n    }\n    // 0x4032b3\n    v8 += 64;\n    int32_t v53; // 0x403200\n    int32_t v54 = v9 + 0x428a2f98 + ((v47 ^ v48) & v46 ^ v48) + ((v46 / 2048 | 0x200000 * v46) ^ (v46 / 64 | 0x4000000 * v46) ^ (v46 / 0x2000000 | 128 * v46)) + v53; // 0x4032f3\n    uint32_t v55 = (int32_t)v49; // 0x4032f6\n    uint32_t v56 = v54 + v10; // 0x403300\n    uint32_t v57 = v54 + ((v55 / 0x2000 | 0x80000 * v55) ^ (v55 / 4 | 0x40000000 * v55) ^ (v55 / 0x400000 | 1024 * v55)) + (int32_t)((v15 | v49) & (int64_t)v11 | v15 & v49); // 0x40332a\n    int32_t v58 = v48 + 0x71374491 + v43 + (v56 & (v46 ^ v47) ^ v47) + ((v56 / 2048 | 0x200000 * v56) ^ (v56 / 64 | 0x4000000 * v56) ^ (v56 / 0x2000000 | 128 * v56)); // 0x403353\n    uint32_t v59 = v58 + v11; // 0x403361\n    int32_t v60 = v15; // 0x403378\n    uint32_t v61 = ((v57 | v55) & v60 | v57 & v55) + v58 + ((v57 / 0x2000 | 0x80000 * v57) ^ (v57 / 4 | 0x40000000 * v57) ^ (v57 / 0x400000 | 1024 * v57)); // 0x40338c\n    int32_t v62 = v47 - 0x4a3f0431 + v45 + (v59 & (v56 ^ v46) ^ v46) + ((v59 / 2048 | 0x200000 * v59) ^ (v59 / 64 | 0x4000000 * v59) ^ (v59 / 0x2000000 | 128 * v59)); // 0x4033b3\n    uint32_t v63 = v62 + v60; // 0x4033b9\n    uint32_t v64 = ((v61 | v57) & v55 | v61 & v57) + v62 + ((v61 / 0x2000 | 0x80000 * v61) ^ (v61 / 4 | 0x40000000 * v61) ^ (v61 / 0x400000 | 1024 * v61)); // 0x4033ef\n    int32_t v65 = v46 - 0x164a245b + v41 + (v63 & (v59 ^ v56) ^ v56) + ((v63 / 2048 | 0x200000 * v63) ^ (v63 / 64 | 0x4000000 * v63) ^ (v63 / 0x2000000 | 128 * v63)); // 0x403422\n    uint32_t v66 = v65 + v55; // 0x40342f\n    uint32_t v67 = ((v64 | v61) & v57 | v64 & v61) + v65 + ((v64 / 0x2000 | 0x80000 * v64) ^ (v64 / 4 | 0x40000000 * v64) ^ (v64 / 0x400000 | 1024 * v64)); // 0x40344e\n    int32_t v68 = v56 + 0x3956c25b + v39 + (v66 & (v63 ^ v59) ^ v59) + ((v66 / 2048 | 0x200000 * v66) ^ (v66 / 64 | 0x4000000 * v66) ^ (v66 / 0x2000000 | 128 * v66)); // 0x40347f\n    uint32_t v69 = v68 + v57; // 0x403485\n    uint32_t v70 = ((v67 | v64) & v61 | v67 & v64) + v68 + ((v67 / 0x2000 | 0x80000 * v67) ^ (v67 / 4 | 0x40000000 * v67) ^ (v67 / 0x400000 | 1024 * v67)); // 0x4034b2\n    int32_t v71 = v37 + 0x59f111f1 + v59 + (v69 & (v66 ^ v63) ^ v63) + ((v69 / 2048 | 0x200000 * v69) ^ (v69 / 64 | 0x4000000 * v69) ^ (v69 / 0x2000000 | 128 * v69)); // 0x4034ec\n    uint32_t v72 = v71 + v61; // 0x4034f9\n    uint32_t v73 = ((v70 | v67) & v64 | v70 & v67) + v71 + ((v70 / 0x2000 | 0x80000 * v70) ^ (v70 / 4 | 0x40000000 * v70) ^ (v70 / 0x400000 | 1024 * v70)); // 0x40351c\n    int32_t v74 = v35 - 0x6dc07d5c + v63 + (v72 & (v69 ^ v66) ^ v66) + ((v72 / 2048 | 0x200000 * v72) ^ (v72 / 64 | 0x4000000 * v72) ^ (v72 / 0x2000000 | 128 * v72)); // 0x403554\n    uint32_t v75 = v74 + v64; // 0x403561\n    uint32_t v76 = ((v73 | v70) & v67 | v73 & v70) + v74 + ((v73 / 0x2000 | 0x80000 * v73) ^ (v73 / 4 | 0x40000000 * v73) ^ (v73 / 0x400000 | 1024 * v73)); // 0x403582\n    int32_t v77 = v33 - 0x54e3a12b + v66 + (v75 & (v72 ^ v69) ^ v69) + ((v75 / 2048 | 0x200000 * v75) ^ (v75 / 64 | 0x4000000 * v75) ^ (v75 / 0x2000000 | 128 * v75)); // 0x4035b7\n    uint32_t v78 = v77 + v67; // 0x4035c6\n    uint32_t v79 = ((v76 | v73) & v70 | v76 & v73) + v77 + ((v76 / 0x2000 | 0x80000 * v76) ^ (v76 / 4 | 0x40000000 * v76) ^ (v76 / 0x400000 | 1024 * v76)); // 0x4035e7\n    int32_t v80 = v31 - 0x27f85568 + v69 + (v78 & (v75 ^ v72) ^ v72) + ((v78 / 2048 | 0x200000 * v78) ^ (v78 / 64 | 0x4000000 * v78) ^ (v78 / 0x2000000 | 128 * v78)); // 0x40361d\n    uint32_t v81 = v80 + v70; // 0x40362b\n    uint32_t v82 = ((v79 | v76) & v73 | v79 & v76) + v80 + ((v79 / 0x2000 | 0x80000 * v79) ^ (v79 / 4 | 0x40000000 * v79) ^ (v79 / 0x400000 | 1024 * v79)); // 0x403651\n    int32_t v83 = v29 + 0x12835b01 + v72 + (v81 & (v78 ^ v75) ^ v75) + ((v81 / 2048 | 0x200000 * v81) ^ (v81 / 64 | 0x4000000 * v81) ^ (v81 / 0x2000000 | 128 * v81)); // 0x403687\n    uint32_t v84 = v83 + v73; // 0x403695\n    uint32_t v85 = ((v82 | v79) & v76 | v82 & v79) + v83 + ((v82 / 0x2000 | 0x80000 * v82) ^ (v82 / 4 | 0x40000000 * v82) ^ (v82 / 0x400000 | 1024 * v82)); // 0x4036bb\n    int32_t v86 = v27 + 0x243185be + v75 + (v84 & (v81 ^ v78) ^ v78) + ((v84 / 2048 | 0x200000 * v84) ^ (v84 / 64 | 0x4000000 * v84) ^ (v84 / 0x2000000 | 128 * v84)); // 0x4036f5\n    uint32_t v87 = v86 + v76; // 0x403709\n    uint32_t v88 = ((v85 | v82) & v79 | v85 & v82) + v86 + ((v85 / 0x2000 | 0x80000 * v85) ^ (v85 / 4 | 0x40000000 * v85) ^ (v85 / 0x400000 | 1024 * v85)); // 0x403736\n    int32_t v89 = v25 + 0x550c7dc3 + v78 + (v87 & (v84 ^ v81) ^ v81) + ((v87 / 2048 | 0x200000 * v87) ^ (v87 / 64 | 0x4000000 * v87) ^ (v87 / 0x2000000 | 128 * v87)); // 0x40375a\n    uint32_t v90 = v89 + v79; // 0x403762\n    uint32_t v91 = ((v88 | v85) & v82 | v88 & v85) + v89 + ((v88 / 0x2000 | 0x80000 * v88) ^ (v88 / 4 | 0x40000000 * v88) ^ (v88 / 0x400000 | 1024 * v88)); // 0x403789\n    int32_t v92 = v23 + 0x72be5d74 + v81 + (v90 & (v87 ^ v84) ^ v84) + ((v90 / 2048 | 0x200000 * v90) ^ (v90 / 64 | 0x4000000 * v90) ^ (v90 / 0x2000000 | 128 * v90)); // 0x4037b7\n    uint32_t v93 = v92 + v82; // 0x4037c4\n    uint32_t v94 = ((v91 | v88) & v85 | v91 & v88) + v92 + ((v91 / 0x2000 | 0x80000 * v91) ^ (v91 / 4 | 0x40000000 * v91) ^ (v91 / 0x400000 | 1024 * v91)); // 0x4037e4\n    int32_t v95 = v21 - 0x7f214e02 + v84 + (v93 & (v90 ^ v87) ^ v87) + ((v93 / 2048 | 0x200000 * v93) ^ (v93 / 64 | 0x4000000 * v93) ^ (v93 / 0x2000000 | 128 * v93)); // 0x403817\n    uint32_t v96 = v95 + v85; // 0x403824\n    uint32_t v97 = ((v94 | v91) & v88 | v94 & v91) + v95 + ((v94 / 0x2000 | 0x80000 * v94) ^ (v94 / 4 | 0x40000000 * v94) ^ (v94 / 0x400000 | 1024 * v94)); // 0x40384a\n    int32_t v98 = v19 - 0x6423f959 + v87 + (v96 & (v93 ^ v90) ^ v90) + ((v96 / 2048 | 0x200000 * v96) ^ (v96 / 64 | 0x4000000 * v96) ^ (v96 / 0x2000000 | 128 * v96)); // 0x403878\n    uint32_t v99 = v98 + v88; // 0x403883\n    uint32_t v100 = ((v97 | v94) & v91 | v97 & v94) + v98 + ((v97 / 0x2000 | 0x80000 * v97) ^ (v97 / 4 | 0x40000000 * v97) ^ (v97 / 0x400000 | 1024 * v97)); // 0x4038ac\n    int32_t v101 = v17 - 0x3e640e8c + v90 + (v99 & (v96 ^ v93) ^ v93) + ((v99 / 2048 | 0x200000 * v99) ^ (v99 / 64 | 0x4000000 * v99) ^ (v99 / 0x2000000 | 128 * v99)); // 0x4038e3\n    uint32_t v102 = v101 + v91; // 0x4038ee\n    uint32_t v103 = ((v100 | v97) & v94 | v100 & v97) + v101 + ((v100 / 0x2000 | 0x80000 * v100) ^ (v100 / 4 | 0x40000000 * v100) ^ (v100 / 0x400000 | 1024 * v100)); // 0x40390f\n    uint32_t v104 = ((v43 / 128 | 0x2000000 * v43) ^ v43 / 8 ^ (v43 / 0x40000 | 0x4000 * v43)) + v53 + v29 + ((v19 / 0x20000 | 0x8000 * v19) ^ v19 / 1024 ^ (v19 / 0x80000 | 0x2000 * v19)); // 0x403950\n    int32_t v105 = v104 - 0x1b64963f + v93 + (v102 & (v99 ^ v96) ^ v96) + ((v102 / 2048 | 0x200000 * v102) ^ (v102 / 64 | 0x4000000 * v102) ^ (v102 / 0x2000000 | 128 * v102)); // 0x40397c\n    uint32_t v106 = v105 + v94; // 0x403989\n    uint32_t v107 = v105 + ((v103 | v100) & v97 | v103 & v100) + ((v103 / 0x2000 | 0x80000 * v103) ^ (v103 / 4 | 0x40000000 * v103) ^ (v103 / 0x400000 | 1024 * v103)); // 0x4039ae\n    uint32_t v108 = ((v45 / 128 | 0x2000000 * v45) ^ v45 / 8 ^ (v45 / 0x40000 | 0x4000 * v45)) + v43 + v27 + ((v17 / 0x20000 | 0x8000 * v17) ^ v17 / 1024 ^ (v17 / 0x80000 | 0x2000 * v17)); // 0x4039f0\n    int32_t v109 = v108 - 0x1041b87a + v96 + (v106 & (v102 ^ v99) ^ v99) + ((v106 / 2048 | 0x200000 * v106) ^ (v106 / 64 | 0x4000000 * v106) ^ (v106 / 0x2000000 | 128 * v106)); // 0x403a1d\n    uint32_t v110 = v109 + v97; // 0x403a2b\n    uint32_t v111 = v109 + ((v107 | v103) & v100 | v107 & v103) + ((v107 / 0x2000 | 0x80000 * v107) ^ (v107 / 4 | 0x40000000 * v107) ^ (v107 / 0x400000 | 1024 * v107)); // 0x403a52\n    uint32_t v112 = ((v41 / 0x40000 | 0x4000 * v41) ^ v41 / 8 ^ (v41 / 128 | 0x2000000 * v41)) + v45 + v25 + ((v104 / 0x20000 | 0x8000 * v104) ^ v104 / 1024 ^ (v104 / 0x80000 | 0x2000 * v104)); // 0x403a99\n    int32_t v113 = v112 + 0xfc19dc6 + v99 + (v110 & (v106 ^ v102) ^ v102) + ((v110 / 2048 | 0x200000 * v110) ^ (v110 / 64 | 0x4000000 * v110) ^ (v110 / 0x2000000 | 128 * v110)); // 0x403ac0\n    uint32_t v114 = v113 + v100; // 0x403ace\n    uint32_t v115 = v113 + ((v111 | v107) & v103 | v111 & v107) + ((v111 / 0x2000 | 0x80000 * v111) ^ (v111 / 4 | 0x40000000 * v111) ^ (v111 / 0x400000 | 1024 * v111)); // 0x403afd\n    uint32_t v116 = ((v39 / 0x40000 | 0x4000 * v39) ^ v39 / 8 ^ (v39 / 128 | 0x2000000 * v39)) + v41 + v23 + ((v108 / 0x20000 | 0x8000 * v108) ^ v108 / 1024 ^ (v108 / 0x80000 | 0x2000 * v108)); // 0x403b41\n    int32_t v117 = v116 + 0x240ca1cc + v102 + (v114 & (v110 ^ v106) ^ v106) + ((v114 / 2048 | 0x200000 * v114) ^ (v114 / 64 | 0x4000000 * v114) ^ (v114 / 0x2000000 | 128 * v114)); // 0x403b6c\n    uint32_t v118 = v117 + v103; // 0x403b7c\n    uint32_t v119 = v117 + ((v115 | v111) & v107 | v115 & v111) + ((v115 / 0x2000 | 0x80000 * v115) ^ (v115 / 4 | 0x40000000 * v115) ^ (v115 / 0x400000 | 1024 * v115)); // 0x403b9a\n    uint32_t v120 = ((v37 / 0x40000 | 0x4000 * v37) ^ v37 / 8 ^ (v37 / 128 | 0x2000000 * v37)) + v39 + v21 + ((v112 / 0x20000 | 0x8000 * v112) ^ v112 / 1024 ^ (v112 / 0x80000 | 0x2000 * v112)); // 0x403bdc\n    int32_t v121 = v120 + 0x2de92c6f + v106 + (v118 & (v114 ^ v110) ^ v110) + ((v118 / 2048 | 0x200000 * v118) ^ (v118 / 64 | 0x4000000 * v118) ^ (v118 / 0x2000000 | 128 * v118)); // 0x403c07\n    uint32_t v122 = v121 + v107; // 0x403c0e\n    uint32_t v123 = v121 + ((v119 | v115) & v111 | v119 & v115) + ((v119 / 0x2000 | 0x80000 * v119) ^ (v119 / 4 | 0x40000000 * v119) ^ (v119 / 0x400000 | 1024 * v119)); // 0x403c3b\n    uint32_t v124 = ((v35 / 0x40000 | 0x4000 * v35) ^ v35 / 8 ^ (v35 / 128 | 0x2000000 * v35)) + v37 + v19 + ((v116 / 0x20000 | 0x8000 * v116) ^ v116 / 1024 ^ (v116 / 0x80000 | 0x2000 * v116)); // 0x403c75\n    int32_t v125 = v124 + 0x4a7484aa + v110 + (v122 & (v118 ^ v114) ^ v114) + ((v122 / 2048 | 0x200000 * v122) ^ (v122 / 64 | 0x4000000 * v122) ^ (v122 / 0x2000000 | 128 * v122)); // 0x403ca1\n    uint32_t v126 = v125 + v111; // 0x403cab\n    uint32_t v127 = v125 + ((v123 | v119) & v115 | v123 & v119) + ((v123 / 0x2000 | 0x80000 * v123) ^ (v123 / 4 | 0x40000000 * v123) ^ (v123 / 0x400000 | 1024 * v123)); // 0x403ccf\n    uint32_t v128 = ((v33 / 0x40000 | 0x4000 * v33) ^ v33 / 8 ^ (v33 / 128 | 0x2000000 * v33)) + v35 + v17 + ((v120 / 0x20000 | 0x8000 * v120) ^ v120 / 1024 ^ (v120 / 0x80000 | 0x2000 * v120)); // 0x403d14\n    int32_t v129 = v128 + 0x5cb0a9dc + v114 + (v126 & (v122 ^ v118) ^ v118) + ((v126 / 2048 | 0x200000 * v126) ^ (v126 / 64 | 0x4000000 * v126) ^ (v126 / 0x2000000 | 128 * v126)); // 0x403d49\n    uint32_t v130 = v129 + v115; // 0x403d56\n    uint32_t v131 = v129 + ((v127 | v123) & v119 | v127 & v123) + ((v127 / 0x2000 | 0x80000 * v127) ^ (v127 / 4 | 0x40000000 * v127) ^ (v127 / 0x400000 | 1024 * v127)); // 0x403d75\n    uint32_t v132 = ((v31 / 128 | 0x2000000 * v31) ^ v31 / 8 ^ (v31 / 0x40000 | 0x4000 * v31)) + v33 + v104 + ((v124 / 0x20000 | 0x8000 * v124) ^ v124 / 1024 ^ (v124 / 0x80000 | 0x2000 * v124)); // 0x403dba\n    int32_t v133 = v132 + 0x76f988da + v118 + (v130 & (v126 ^ v122) ^ v122) + ((v130 / 2048 | 0x200000 * v130) ^ (v130 / 64 | 0x4000000 * v130) ^ (v130 / 0x2000000 | 128 * v130)); // 0x403df0\n    uint32_t v134 = v133 + v119; // 0x403dfa\n    uint32_t v135 = v133 + ((v131 | v127) & v123 | v131 & v127) + ((v131 / 0x2000 | 0x80000 * v131) ^ (v131 / 4 | 0x40000000 * v131) ^ (v131 / 0x400000 | 1024 * v131)); // 0x403e22\n    uint32_t v136 = ((v29 / 128 | 0x2000000 * v29) ^ v29 / 8 ^ (v29 / 0x40000 | 0x4000 * v29)) + v31 + v108 + ((v128 / 0x20000 | 0x8000 * v128) ^ v128 / 1024 ^ (v128 / 0x80000 | 0x2000 * v128)); // 0x403e67\n    int32_t v137 = v136 - 0x67c1aeae + v122 + (v134 & (v130 ^ v126) ^ v126) + ((v134 / 2048 | 0x200000 * v134) ^ (v134 / 64 | 0x4000000 * v134) ^ (v134 / 0x2000000 | 128 * v134)); // 0x403e9c\n    uint32_t v138 = v137 + v123; // 0x403ea9\n    uint32_t v139 = v137 + ((v135 | v131) & v127 | v135 & v131) + ((v135 / 0x2000 | 0x80000 * v135) ^ (v135 / 4 | 0x40000000 * v135) ^ (v135 / 0x400000 | 1024 * v135)); // 0x403ec7\n    uint32_t v140 = ((v27 / 128 | 0x2000000 * v27) ^ v27 / 8 ^ (v27 / 0x40000 | 0x4000 * v27)) + v29 + v112 + ((v132 / 0x20000 | 0x8000 * v132) ^ v132 / 1024 ^ (v132 / 0x80000 | 0x2000 * v132)); // 0x403f0f\n    int32_t v141 = v140 - 0x57ce3993 + v126 + (v138 & (v134 ^ v130) ^ v130) + ((v138 / 2048 | 0x200000 * v138) ^ (v138 / 64 | 0x4000000 * v138) ^ (v138 / 0x2000000 | 128 * v138)); // 0x403f46\n    uint32_t v142 = v141 + v127; // 0x403f49\n    uint32_t v143 = v141 + ((v139 | v135) & v131 | v139 & v135) + ((v139 / 0x2000 | 0x80000 * v139) ^ (v139 / 4 | 0x40000000 * v139) ^ (v139 / 0x400000 | 1024 * v139)); // 0x403f72\n    uint32_t v144 = ((v25 / 128 | 0x2000000 * v25) ^ v25 / 8 ^ (v25 / 0x40000 | 0x4000 * v25)) + v27 + v116 + ((v136 / 0x20000 | 0x8000 * v136) ^ v136 / 1024 ^ (v136 / 0x80000 | 0x2000 * v136)); // 0x403fbb\n    int32_t v145 = v144 - 0x4ffcd838 + v130 + (v142 & (v138 ^ v134) ^ v134) + ((v142 / 2048 | 0x200000 * v142) ^ (v142 / 64 | 0x4000000 * v142) ^ (v142 / 0x2000000 | 128 * v142)); // 0x403ff3\n    uint32_t v146 = v145 + v131; // 0x403ff6\n    uint32_t v147 = v145 + ((v143 | v139) & v135 | v143 & v139) + ((v143 / 0x2000 | 0x80000 * v143) ^ (v143 / 4 | 0x40000000 * v143) ^ (v143 / 0x400000 | 1024 * v143)); // 0x40401f\n    uint32_t v148 = ((v23 / 128 | 0x2000000 * v23) ^ v23 / 8 ^ (v23 / 0x40000 | 0x4000 * v23)) + v25 + v120 + ((v140 / 0x20000 | 0x8000 * v140) ^ v140 / 1024 ^ (v140 / 0x80000 | 0x2000 * v140)); // 0x404066\n    int32_t v149 = v148 - 0x40a68039 + v134 + (v146 & (v142 ^ v138) ^ v138) + ((v146 / 2048 | 0x200000 * v146) ^ (v146 / 64 | 0x4000000 * v146) ^ (v146 / 0x2000000 | 128 * v146)); // 0x4040a0\n    uint32_t v150 = v149 + v135; // 0x4040a3\n    uint32_t v151 = v149 + ((v147 | v143) & v139 | v147 & v143) + ((v147 / 0x2000 | 0x80000 * v147) ^ (v147 / 4 | 0x40000000 * v147) ^ (v147 / 0x400000 | 1024 * v147)); // 0x4040cc\n    uint32_t v152 = ((v21 / 128 | 0x2000000 * v21) ^ v21 / 8 ^ (v21 / 0x40000 | 0x4000 * v21)) + v23 + v124 + ((v144 / 0x20000 | 0x8000 * v144) ^ v144 / 1024 ^ (v144 / 0x80000 | 0x2000 * v144)); // 0x404113\n    int32_t v153 = v152 - 0x391ff40d + v138 + (v150 & (v146 ^ v142) ^ v142) + ((v150 / 2048 | 0x200000 * v150) ^ (v150 / 64 | 0x4000000 * v150) ^ (v150 / 0x2000000 | 128 * v150)); // 0x40414c\n    uint32_t v154 = v153 + v139; // 0x40414f\n    uint32_t v155 = v153 + ((v151 | v147) & v143 | v151 & v147) + ((v151 / 0x2000 | 0x80000 * v151) ^ (v151 / 4 | 0x40000000 * v151) ^ (v151 / 0x400000 | 1024 * v151)); // 0x404178\n    uint32_t v156 = ((v19 / 128 | 0x2000000 * v19) ^ v19 / 8 ^ (v19 / 0x40000 | 0x4000 * v19)) + v21 + v128 + ((v148 / 0x20000 | 0x8000 * v148) ^ v148 / 1024 ^ (v148 / 0x80000 | 0x2000 * v148)); // 0x4041bf\n    int32_t v157 = v156 - 0x2a586eb9 + v142 + (v154 & (v150 ^ v146) ^ v146) + ((v154 / 2048 | 0x200000 * v154) ^ (v154 / 64 | 0x4000000 * v154) ^ (v154 / 0x2000000 | 128 * v154)); // 0x4041f9\n    uint32_t v158 = v157 + v143; // 0x4041fc\n    uint32_t v159 = v157 + ((v155 | v151) & v147 | v155 & v151) + ((v155 / 0x2000 | 0x80000 * v155) ^ (v155 / 4 | 0x40000000 * v155) ^ (v155 / 0x400000 | 1024 * v155)); // 0x404225\n    uint32_t v160 = ((v17 / 128 | 0x2000000 * v17) ^ v17 / 8 ^ (v17 / 0x40000 | 0x4000 * v17)) + v19 + v132 + ((v152 / 0x20000 | 0x8000 * v152) ^ v152 / 1024 ^ (v152 / 0x80000 | 0x2000 * v152)); // 0x40426c\n    int32_t v161 = v160 + 0x6ca6351 + v146 + (v158 & (v154 ^ v150) ^ v150) + ((v158 / 2048 | 0x200000 * v158) ^ (v158 / 64 | 0x4000000 * v158) ^ (v158 / 0x2000000 | 128 * v158)); // 0x4042a7\n    uint32_t v162 = v161 + v147; // 0x4042aa\n    uint32_t v163 = v161 + ((v159 | v155) & v151 | v159 & v155) + ((v159 / 0x2000 | 0x80000 * v159) ^ (v159 / 4 | 0x40000000 * v159) ^ (v159 / 0x400000 | 1024 * v159)); // 0x4042d3\n    uint32_t v164 = ((v104 / 128 | 0x2000000 * v104) ^ v104 / 8 ^ (v104 / 0x40000 | 0x4000 * v104)) + v17 + v136 + ((v156 / 0x20000 | 0x8000 * v156) ^ v156 / 1024 ^ (v156 / 0x80000 | 0x2000 * v156)); // 0x404316\n    int32_t v165 = v164 + 0x14292967 + v150 + (v162 & (v158 ^ v154) ^ v154) + ((v162 / 2048 | 0x200000 * v162) ^ (v162 / 64 | 0x4000000 * v162) ^ (v162 / 0x2000000 | 128 * v162)); // 0x40434b\n    uint32_t v166 = v165 + v151; // 0x404358\n    uint32_t v167 = v165 + ((v163 | v159) & v155 | v163 & v159) + ((v163 / 0x2000 | 0x80000 * v163) ^ (v163 / 4 | 0x40000000 * v163) ^ (v163 / 0x400000 | 1024 * v163)); // 0x404379\n    uint32_t v168 = ((v108 / 128 | 0x2000000 * v108) ^ v108 / 8 ^ (v108 / 0x40000 | 0x4000 * v108)) + v104 + v140 + ((v160 / 0x20000 | 0x8000 * v160) ^ v160 / 1024 ^ (v160 / 0x80000 | 0x2000 * v160)); // 0x4043bb\n    int32_t v169 = v168 + 0x27b70a85 + v154 + (v166 & (v162 ^ v158) ^ v158) + ((v166 / 2048 | 0x200000 * v166) ^ (v166 / 64 | 0x4000000 * v166) ^ (v166 / 0x2000000 | 128 * v166)); // 0x4043fa\n    uint32_t v170 = v169 + v155; // 0x404405\n    uint32_t v171 = v169 + ((v167 | v163) & v159 | v167 & v163) + ((v167 / 0x2000 | 0x80000 * v167) ^ (v167 / 4 | 0x40000000 * v167) ^ (v167 / 0x400000 | 1024 * v167)); // 0x40442b\n    uint32_t v172 = ((v112 / 128 | 0x2000000 * v112) ^ v112 / 8 ^ (v112 / 0x40000 | 0x4000 * v112)) + v108 + v144 + ((v164 / 0x20000 | 0x8000 * v164) ^ v164 / 1024 ^ (v164 / 0x80000 | 0x2000 * v164)); // 0x40446c\n    int32_t v173 = v172 + 0x2e1b2138 + v158 + (v170 & (v166 ^ v162) ^ v162) + ((v170 / 2048 | 0x200000 * v170) ^ (v170 / 64 | 0x4000000 * v170) ^ (v170 / 0x2000000 | 128 * v170)); // 0x4044b0\n    uint32_t v174 = v173 + v159; // 0x4044b2\n    uint32_t v175 = v173 + ((v171 | v167) & v163 | v171 & v167) + ((v171 / 0x2000 | 0x80000 * v171) ^ (v171 / 4 | 0x40000000 * v171) ^ (v171 / 0x400000 | 1024 * v171)); // 0x4044fb\n    uint32_t v176 = ((v116 / 128 | 0x2000000 * v116) ^ v116 / 8 ^ (v116 / 0x40000 | 0x4000 * v116)) + v112 + v148 + ((v168 / 0x20000 | 0x8000 * v168) ^ v168 / 1024 ^ (v168 / 0x80000 | 0x2000 * v168)); // 0x404537\n    int32_t v177 = v176 + 0x4d2c6dfc + v162 + (v174 & (v170 ^ v166) ^ v166) + ((v174 / 2048 | 0x200000 * v174) ^ (v174 / 64 | 0x4000000 * v174) ^ (v174 / 0x2000000 | 128 * v174)); // 0x404582\n    uint32_t v178 = v177 + v163; // 0x404588\n    uint32_t v179 = v177 + ((v175 | v171) & v167 | v175 & v171) + ((v175 / 0x2000 | 0x80000 * v175) ^ (v175 / 4 | 0x40000000 * v175) ^ (v175 / 0x400000 | 1024 * v175)); // 0x4045b2\n    uint32_t v180 = ((v120 / 128 | 0x2000000 * v120) ^ v120 / 8 ^ (v120 / 0x40000 | 0x4000 * v120)) + v116 + v152 + ((v172 / 0x20000 | 0x8000 * v172) ^ v172 / 1024 ^ (v172 / 0x80000 | 0x2000 * v172)); // 0x4045f0\n    int32_t v181 = v180 + 0x53380d13 + v166 + (v178 & (v174 ^ v170) ^ v170) + ((v178 / 2048 | 0x200000 * v178) ^ (v178 / 64 | 0x4000000 * v178) ^ (v178 / 0x2000000 | 128 * v178)); // 0x40462a\n    uint32_t v182 = v181 + v167; // 0x404636\n    uint32_t v183 = v181 + ((v179 | v175) & v171 | v179 & v175) + ((v179 / 0x2000 | 0x80000 * v179) ^ (v179 / 4 | 0x40000000 * v179) ^ (v179 / 0x400000 | 1024 * v179)); // 0x40465d\n    uint32_t v184 = ((v124 / 128 | 0x2000000 * v124) ^ v124 / 8 ^ (v124 / 0x40000 | 0x4000 * v124)) + v120 + v156 + ((v176 / 0x20000 | 0x8000 * v176) ^ v176 / 1024 ^ (v176 / 0x80000 | 0x2000 * v176)); // 0x40468a\n    int32_t v185 = v184 + 0x650a7354 + v170 + (v182 & (v178 ^ v174) ^ v174) + ((v182 / 2048 | 0x200000 * v182) ^ (v182 / 64 | 0x4000000 * v182) ^ (v182 / 0x2000000 | 128 * v182)); // 0x4046bb\n    uint32_t v186 = v185 + v171; // 0x4046c3\n    uint32_t v187 = v185 + ((v183 | v179) & v175 | v183 & v179) + ((v183 / 0x2000 | 0x80000 * v183) ^ (v183 / 4 | 0x40000000 * v183) ^ (v183 / 0x400000 | 1024 * v183)); // 0x4046eb\n    uint32_t v188 = ((v128 / 128 | 0x2000000 * v128) ^ v128 / 8 ^ (v128 / 0x40000 | 0x4000 * v128)) + v124 + v160 + ((v180 / 0x20000 | 0x8000 * v180) ^ v180 / 1024 ^ (v180 / 0x80000 | 0x2000 * v180)); // 0x404721\n    int32_t v189 = v188 + 0x766a0abb + v174 + (v186 & (v182 ^ v178) ^ v178) + ((v186 / 2048 | 0x200000 * v186) ^ (v186 / 64 | 0x4000000 * v186) ^ (v186 / 0x2000000 | 128 * v186)); // 0x404769\n    uint32_t v190 = v189 + v175; // 0x404770\n    uint32_t v191 = v189 + ((v187 | v183) & v179 | v187 & v183) + ((v187 / 0x2000 | 0x80000 * v187) ^ (v187 / 4 | 0x40000000 * v187) ^ (v187 / 0x400000 | 1024 * v187)); // 0x40479c\n    uint32_t v192 = ((v132 / 128 | 0x2000000 * v132) ^ v132 / 8 ^ (v132 / 0x40000 | 0x4000 * v132)) + v128 + v164 + ((v184 / 0x20000 | 0x8000 * v184) ^ v184 / 1024 ^ (v184 / 0x80000 | 0x2000 * v184)); // 0x4047cc\n    int32_t v193 = v192 - 0x7e3d36d2 + v178 + (v190 & (v186 ^ v182) ^ v182) + ((v190 / 2048 | 0x200000 * v190) ^ (v190 / 64 | 0x4000000 * v190) ^ (v190 / 0x2000000 | 128 * v190)); // 0x404806\n    uint32_t v194 = v193 + v179; // 0x404811\n    uint32_t v195 = v193 + ((v191 | v187) & v183 | v191 & v187) + ((v191 / 0x2000 | 0x80000 * v191) ^ (v191 / 4 | 0x40000000 * v191) ^ (v191 / 0x400000 | 1024 * v191)); // 0x404830\n    uint32_t v196 = ((v136 / 128 | 0x2000000 * v136) ^ v136 / 8 ^ (v136 / 0x40000 | 0x4000 * v136)) + v132 + v168 + ((v188 / 0x20000 | 0x8000 * v188) ^ v188 / 1024 ^ (v188 / 0x80000 | 0x2000 * v188)); // 0x40486d\n    int32_t v197 = v196 - 0x6d8dd37b + v182 + (v194 & (v190 ^ v186) ^ v186) + ((v194 / 2048 | 0x200000 * v194) ^ (v194 / 64 | 0x4000000 * v194) ^ (v194 / 0x2000000 | 128 * v194)); // 0x4048a6\n    uint32_t v198 = v197 + v183; // 0x4048b0\n    uint32_t v199 = v197 + ((v195 | v191) & v187 | v195 & v191) + ((v195 / 0x2000 | 0x80000 * v195) ^ (v195 / 4 | 0x40000000 * v195) ^ (v195 / 0x400000 | 1024 * v195)); // 0x4048cf\n    uint32_t v200 = ((v140 / 128 | 0x2000000 * v140) ^ v140 / 8 ^ (v140 / 0x40000 | 0x4000 * v140)) + v136 + v172 + ((v192 / 0x20000 | 0x8000 * v192) ^ v192 / 1024 ^ (v192 / 0x80000 | 0x2000 * v192)); // 0x40490c\n    int32_t v201 = v200 - 0x5d40175f + v186 + (v198 & (v194 ^ v190) ^ v190) + ((v198 / 2048 | 0x200000 * v198) ^ (v198 / 64 | 0x4000000 * v198) ^ (v198 / 0x2000000 | 128 * v198)); // 0x404946\n    uint32_t v202 = v201 + v187; // 0x404951\n    uint32_t v203 = v201 + ((v199 | v195) & v191 | v199 & v195) + ((v199 / 0x2000 | 0x80000 * v199) ^ (v199 / 4 | 0x40000000 * v199) ^ (v199 / 0x400000 | 1024 * v199)); // 0x404976\n    uint32_t v204 = ((v144 / 128 | 0x2000000 * v144) ^ v144 / 8 ^ (v144 / 0x40000 | 0x4000 * v144)) + v140 + v176 + ((v196 / 0x20000 | 0x8000 * v196) ^ v196 / 1024 ^ (v196 / 0x80000 | 0x2000 * v196)); // 0x4049af\n    int32_t v205 = v204 - 0x57e599b5 + v190 + (v202 & (v198 ^ v194) ^ v194) + ((v202 / 2048 | 0x200000 * v202) ^ (v202 / 64 | 0x4000000 * v202) ^ (v202 / 0x2000000 | 128 * v202)); // 0x4049f9\n    uint32_t v206 = v205 + v191; // 0x404a0b\n    uint32_t v207 = v205 + ((v203 | v199) & v195 | v203 & v199) + ((v203 / 0x2000 | 0x80000 * v203) ^ (v203 / 4 | 0x40000000 * v203) ^ (v203 / 0x400000 | 1024 * v203)); // 0x404a2a\n    uint32_t v208 = ((v148 / 128 | 0x2000000 * v148) ^ v148 / 8 ^ (v148 / 0x40000 | 0x4000 * v148)) + v144 + v180 + ((v200 / 0x20000 | 0x8000 * v200) ^ v200 / 1024 ^ (v200 / 0x80000 | 0x2000 * v200)); // 0x404a65\n    int32_t v209 = v208 - 0x3db47490 + v194 + (v206 & (v202 ^ v198) ^ v198) + ((v206 / 2048 | 0x200000 * v206) ^ (v206 / 64 | 0x4000000 * v206) ^ (v206 / 0x2000000 | 128 * v206)); // 0x404aa6\n    uint32_t v210 = v209 + v195; // 0x404aac\n    uint32_t v211 = v209 + ((v207 | v203) & v199 | v207 & v203) + ((v207 / 0x2000 | 0x80000 * v207) ^ (v207 / 4 | 0x40000000 * v207) ^ (v207 / 0x400000 | 1024 * v207)); // 0x404ade\n    uint32_t v212 = ((v152 / 128 | 0x2000000 * v152) ^ v152 / 8 ^ (v152 / 0x40000 | 0x4000 * v152)) + v148 + v184 + ((v204 / 0x20000 | 0x8000 * v204) ^ v204 / 1024 ^ (v204 / 0x80000 | 0x2000 * v204)); // 0x404b1b\n    int32_t v213 = v212 - 0x3893ae5d + v198 + (v210 & (v206 ^ v202) ^ v202) + ((v210 / 2048 | 0x200000 * v210) ^ (v210 / 64 | 0x4000000 * v210) ^ (v210 / 0x2000000 | 128 * v210)); // 0x404b63\n    uint32_t v214 = v213 + v199; // 0x404b69\n    uint32_t v215 = v213 + ((v211 | v207) & v203 | v211 & v207) + ((v211 / 0x2000 | 0x80000 * v211) ^ (v211 / 4 | 0x40000000 * v211) ^ (v211 / 0x400000 | 1024 * v211)); // 0x404b9c\n    uint32_t v216 = ((v156 / 128 | 0x2000000 * v156) ^ v156 / 8 ^ (v156 / 0x40000 | 0x4000 * v156)) + v152 + v188 + ((v208 / 0x20000 | 0x8000 * v208) ^ v208 / 1024 ^ (v208 / 0x80000 | 0x2000 * v208)); // 0x404bd4\n    int32_t v217 = v216 - 0x2e6d17e7 + v202 + (v214 & (v210 ^ v206) ^ v206) + ((v214 / 2048 | 0x200000 * v214) ^ (v214 / 64 | 0x4000000 * v214) ^ (v214 / 0x2000000 | 128 * v214)); // 0x404bff\n    uint32_t v218 = v217 + v203; // 0x404c01\n    uint32_t v219 = v217 + ((v215 | v211) & v207 | v215 & v211) + ((v215 / 0x2000 | 0x80000 * v215) ^ (v215 / 4 | 0x40000000 * v215) ^ (v215 / 0x400000 | 1024 * v215)); // 0x404c46\n    uint32_t v220 = ((v160 / 128 | 0x2000000 * v160) ^ v160 / 8 ^ (v160 / 0x40000 | 0x4000 * v160)) + v156 + v192 + ((v212 / 0x20000 | 0x8000 * v212) ^ v212 / 1024 ^ (v212 / 0x80000 | 0x2000 * v212)); // 0x404c74\n    int32_t v221 = v220 - 0x2966f9dc + v206 + (v218 & (v214 ^ v210) ^ v210) + ((v218 / 2048 | 0x200000 * v218) ^ (v218 / 64 | 0x4000000 * v218) ^ (v218 / 0x2000000 | 128 * v218)); // 0x404cc5\n    uint32_t v222 = v221 + v207; // 0x404ccd\n    uint32_t v223 = v221 + ((v219 | v215) & v211 | v219 & v215) + ((v219 / 0x2000 | 0x80000 * v219) ^ (v219 / 4 | 0x40000000 * v219) ^ (v219 / 0x400000 | 1024 * v219)); // 0x404cf8\n    uint32_t v224 = ((v164 / 128 | 0x2000000 * v164) ^ v164 / 8 ^ (v164 / 0x40000 | 0x4000 * v164)) + v160 + v196 + ((v216 / 0x20000 | 0x8000 * v216) ^ v216 / 1024 ^ (v216 / 0x80000 | 0x2000 * v216)); // 0x404d31\n    int32_t v225 = v224 - 0xbf1ca7b + v210 + (v222 & (v218 ^ v214) ^ v214) + ((v222 / 2048 | 0x200000 * v222) ^ (v222 / 64 | 0x4000000 * v222) ^ (v222 / 0x2000000 | 128 * v222)); // 0x404d7a\n    uint32_t v226 = v225 + v211; // 0x404d7c\n    uint32_t v227 = v225 + ((v223 | v219) & v215 | v223 & v219) + ((v223 / 0x2000 | 0x80000 * v223) ^ (v223 / 4 | 0x40000000 * v223) ^ (v223 / 0x400000 | 1024 * v223)); // 0x404dba\n    uint32_t v228 = ((v168 / 128 | 0x2000000 * v168) ^ v168 / 8 ^ (v168 / 0x40000 | 0x4000 * v168)) + v164 + v200 + ((v220 / 0x20000 | 0x8000 * v220) ^ v220 / 1024 ^ (v220 / 0x80000 | 0x2000 * v220)); // 0x404dee\n    int32_t v229 = v228 + 0x106aa070 + v214 + (v226 & (v222 ^ v218) ^ v218) + ((v226 / 2048 | 0x200000 * v226) ^ (v226 / 64 | 0x4000000 * v226) ^ (v226 / 0x2000000 | 128 * v226)); // 0x404e27\n    uint32_t v230 = v229 + v215; // 0x404e34\n    uint32_t v231 = v229 + ((v227 | v223) & v219 | v227 & v223) + ((v227 / 0x2000 | 0x80000 * v227) ^ (v227 / 4 | 0x40000000 * v227) ^ (v227 / 0x400000 | 1024 * v227)); // 0x404e58\n    uint32_t v232 = ((v172 / 128 | 0x2000000 * v172) ^ v172 / 8 ^ (v172 / 0x40000 | 0x4000 * v172)) + v168 + v204 + ((v224 / 0x20000 | 0x8000 * v224) ^ v224 / 1024 ^ (v224 / 0x80000 | 0x2000 * v224)); // 0x404e9e\n    int32_t v233 = v232 + 0x19a4c116 + v218 + (v230 & (v226 ^ v222) ^ v222) + ((v230 / 2048 | 0x200000 * v230) ^ (v230 / 64 | 0x4000000 * v230) ^ (v230 / 0x2000000 | 128 * v230)); // 0x404ed6\n    uint32_t v234 = v233 + v219; // 0x404edc\n    uint32_t v235 = v233 + ((v231 | v227) & v223 | v231 & v227) + ((v231 / 0x2000 | 0x80000 * v231) ^ (v231 / 4 | 0x40000000 * v231) ^ (v231 / 0x400000 | 1024 * v231)); // 0x404f13\n    uint32_t v236 = ((v176 / 128 | 0x2000000 * v176) ^ v176 / 8 ^ (v176 / 0x40000 | 0x4000 * v176)) + v172 + v208 + ((v228 / 0x20000 | 0x8000 * v228) ^ v228 / 1024 ^ (v228 / 0x80000 | 0x2000 * v228)); // 0x404f43\n    int32_t v237 = v236 + 0x1e376c08 + v222 + (v234 & (v230 ^ v226) ^ v226) + ((v234 / 2048 | 0x200000 * v234) ^ (v234 / 64 | 0x4000000 * v234) ^ (v234 / 0x2000000 | 128 * v234)); // 0x404f7f\n    uint32_t v238 = v237 + v223; // 0x404f89\n    uint32_t v239 = v237 + ((v235 | v231) & v227 | v235 & v231) + ((v235 / 0x2000 | 0x80000 * v235) ^ (v235 / 4 | 0x40000000 * v235) ^ (v235 / 0x400000 | 1024 * v235)); // 0x404fbc\n    uint32_t v240 = ((v180 / 128 | 0x2000000 * v180) ^ v180 / 8 ^ (v180 / 0x40000 | 0x4000 * v180)) + v176 + v212 + ((v232 / 0x20000 | 0x8000 * v232) ^ v232 / 1024 ^ (v232 / 0x80000 | 0x2000 * v232)); // 0x404fff\n    int32_t v241 = v240 + 0x2748774c + v226 + (v238 & (v234 ^ v230) ^ v230) + ((v238 / 2048 | 0x200000 * v238) ^ (v238 / 64 | 0x4000000 * v238) ^ (v238 / 0x2000000 | 128 * v238)); // 0x405036\n    uint32_t v242 = v241 + v227; // 0x405042\n    uint32_t v243 = v241 + ((v239 | v235) & v231 | v239 & v235) + ((v239 / 0x2000 | 0x80000 * v239) ^ (v239 / 4 | 0x40000000 * v239) ^ (v239 / 0x400000 | 1024 * v239)); // 0x405066\n    uint32_t v244 = ((v184 / 128 | 0x2000000 * v184) ^ v184 / 8 ^ (v184 / 0x40000 | 0x4000 * v184)) + v180 + v216 + ((v236 / 0x20000 | 0x8000 * v236) ^ v236 / 1024 ^ (v236 / 0x80000 | 0x2000 * v236)); // 0x405099\n    int32_t v245 = v244 + 0x34b0bcb5 + v230 + (v242 & (v238 ^ v234) ^ v234) + ((v242 / 2048 | 0x200000 * v242) ^ (v242 / 64 | 0x4000000 * v242) ^ (v242 / 0x2000000 | 128 * v242)); // 0x4050d0\n    uint32_t v246 = v245 + v231; // 0x4050d8\n    uint32_t v247 = v245 + ((v243 | v239) & v235 | v243 & v239) + ((v243 / 0x2000 | 0x80000 * v243) ^ (v243 / 4 | 0x40000000 * v243) ^ (v243 / 0x400000 | 1024 * v243)); // 0x405108\n    uint32_t v248 = ((v188 / 128 | 0x2000000 * v188) ^ v188 / 8 ^ (v188 / 0x40000 | 0x4000 * v188)) + v184 + v220 + ((v240 / 0x20000 | 0x8000 * v240) ^ v240 / 1024 ^ (v240 / 0x80000 | 0x2000 * v240)); // 0x405142\n    int32_t v249 = v248 + 0x391c0cb3 + v234 + (v246 & (v242 ^ v238) ^ v238) + ((v246 / 2048 | 0x200000 * v246) ^ (v246 / 64 | 0x4000000 * v246) ^ (v246 / 0x2000000 | 128 * v246)); // 0x405173\n    uint32_t v250 = v249 + v235; // 0x40517a\n    uint32_t v251 = v249 + ((v247 | v243) & v239 | v247 & v243) + ((v247 / 0x2000 | 0x80000 * v247) ^ (v247 / 4 | 0x40000000 * v247) ^ (v247 / 0x400000 | 1024 * v247)); // 0x40519f\n    uint32_t v252 = ((v192 / 128 | 0x2000000 * v192) ^ v192 / 8 ^ (v192 / 0x40000 | 0x4000 * v192)) + v188 + v224 + ((v244 / 0x20000 | 0x8000 * v244) ^ v244 / 1024 ^ (v244 / 0x80000 | 0x2000 * v244)); // 0x4051d9\n    int32_t v253 = v252 + 0x4ed8aa4a + v238 + (v250 & (v246 ^ v242) ^ v242) + ((v250 / 2048 | 0x200000 * v250) ^ (v250 / 64 | 0x4000000 * v250) ^ (v250 / 0x2000000 | 128 * v250)); // 0x405214\n    uint32_t v254 = v253 + v239; // 0x405221\n    uint32_t v255 = v253 + ((v251 | v247) & v243 | v251 & v247) + ((v251 / 0x2000 | 0x80000 * v251) ^ (v251 / 4 | 0x40000000 * v251) ^ (v251 / 0x400000 | 1024 * v251)); // 0x40523f\n    uint32_t v256 = ((v196 / 128 | 0x2000000 * v196) ^ v196 / 8 ^ (v196 / 0x40000 | 0x4000 * v196)) + v192 + v228 + ((v248 / 0x20000 | 0x8000 * v248) ^ v248 / 1024 ^ (v248 / 0x80000 | 0x2000 * v248)); // 0x405282\n    int32_t v257 = v256 + 0x5b9cca4f + v242 + (v254 & (v250 ^ v246) ^ v246) + ((v254 / 2048 | 0x200000 * v254) ^ (v254 / 64 | 0x4000000 * v254) ^ (v254 / 0x2000000 | 128 * v254)); // 0x4052c8\n    uint32_t v258 = v257 + v243; // 0x4052d5\n    uint32_t v259 = v257 + ((v255 | v251) & v247 | v255 & v251) + ((v255 / 0x2000 | 0x80000 * v255) ^ (v255 / 4 | 0x40000000 * v255) ^ (v255 / 0x400000 | 1024 * v255)); // 0x4052f4\n    uint32_t v260 = ((v200 / 128 | 0x2000000 * v200) ^ v200 / 8 ^ (v200 / 0x40000 | 0x4000 * v200)) + v196 + v232 + ((v252 / 0x20000 | 0x8000 * v252) ^ v252 / 1024 ^ (v252 / 0x80000 | 0x2000 * v252)); // 0x405341\n    int32_t v261 = v260 + 0x682e6ff3 + v246 + (v258 & (v254 ^ v250) ^ v250) + ((v258 / 2048 | 0x200000 * v258) ^ (v258 / 64 | 0x4000000 * v258) ^ (v258 / 0x2000000 | 128 * v258)); // 0x405387\n    uint32_t v262 = v261 + v247; // 0x40539b\n    uint32_t v263 = v261 + ((v259 | v255) & v251 | v259 & v255) + ((v259 / 0x2000 | 0x80000 * v259) ^ (v259 / 4 | 0x40000000 * v259) ^ (v259 / 0x400000 | 1024 * v259)); // 0x4053b5\n    uint32_t v264 = ((v204 / 128 | 0x2000000 * v204) ^ v204 / 8 ^ (v204 / 0x40000 | 0x4000 * v204)) + v200 + v236 + ((v256 / 0x20000 | 0x8000 * v256) ^ v256 / 1024 ^ (v256 / 0x80000 | 0x2000 * v256)); // 0x4053fa\n    int32_t v265 = v264 + 0x748f82ee + v250 + (v262 & (v258 ^ v254) ^ v254) + ((v262 / 2048 | 0x200000 * v262) ^ (v262 / 64 | 0x4000000 * v262) ^ (v262 / 0x2000000 | 128 * v262)); // 0x405441\n    uint32_t v266 = v265 + v251; // 0x40544f\n    uint32_t v267 = v265 + ((v263 | v259) & v255 | v263 & v259) + ((v263 / 0x2000 | 0x80000 * v263) ^ (v263 / 4 | 0x40000000 * v263) ^ (v263 / 0x400000 | 1024 * v263)); // 0x405473\n    uint32_t v268 = ((v208 / 128 | 0x2000000 * v208) ^ v208 / 8 ^ (v208 / 0x40000 | 0x4000 * v208)) + v204 + v240 + ((v260 / 0x20000 | 0x8000 * v260) ^ v260 / 1024 ^ (v260 / 0x80000 | 0x2000 * v260)); // 0x4054be\n    int32_t v269 = v268 + 0x78a5636f + v254 + (v266 & (v262 ^ v258) ^ v258) + ((v266 / 2048 | 0x200000 * v266) ^ (v266 / 64 | 0x4000000 * v266) ^ (v266 / 0x2000000 | 128 * v266)); // 0x4054fa\n    uint32_t v270 = v269 + v255; // 0x405508\n    uint32_t v271 = v269 + ((v267 | v263) & v259 | v267 & v263) + ((v267 / 0x2000 | 0x80000 * v267) ^ (v267 / 4 | 0x40000000 * v267) ^ (v267 / 0x400000 | 1024 * v267)); // 0x40552d\n    uint32_t v272 = ((v212 / 128 | 0x2000000 * v212) ^ v212 / 8 ^ (v212 / 0x40000 | 0x4000 * v212)) + v208 + v244 + ((v264 / 0x20000 | 0x8000 * v264) ^ v264 / 1024 ^ (v264 / 0x80000 | 0x2000 * v264)); // 0x405578\n    int32_t v273 = v272 - 0x7b3787ec + v258 + (v270 & (v266 ^ v262) ^ v262) + ((v270 / 2048 | 0x200000 * v270) ^ (v270 / 64 | 0x4000000 * v270) ^ (v270 / 0x2000000 | 128 * v270)); // 0x4055ae\n    uint32_t v274 = v273 + v259; // 0x4055b8\n    uint32_t v275 = v273 + ((v271 | v267) & v263 | v271 & v267) + ((v271 / 0x2000 | 0x80000 * v271) ^ (v271 / 4 | 0x40000000 * v271) ^ (v271 / 0x400000 | 1024 * v271)); // 0x4055f0\n    uint32_t v276 = ((v216 / 128 | 0x2000000 * v216) ^ v216 / 8 ^ (v216 / 0x40000 | 0x4000 * v216)) + v212 + v248 + ((v268 / 0x20000 | 0x8000 * v268) ^ v268 / 1024 ^ (v268 / 0x80000 | 0x2000 * v268)); // 0x405632\n    int32_t v277 = v276 - 0x7338fdf8 + v262 + (v274 & (v270 ^ v266) ^ v266) + ((v274 / 2048 | 0x200000 * v274) ^ (v274 / 64 | 0x4000000 * v274) ^ (v274 / 0x2000000 | 128 * v274)); // 0x405667\n    uint32_t v278 = v277 + v263; // 0x40566d\n    uint32_t v279 = v277 + ((v275 | v271) & v267 | v275 & v271) + ((v275 / 0x2000 | 0x80000 * v275) ^ (v275 / 4 | 0x40000000 * v275) ^ (v275 / 0x400000 | 1024 * v275)); // 0x4056a0\n    uint32_t v280 = ((v220 / 128 | 0x2000000 * v220) ^ v220 / 8 ^ (v220 / 0x40000 | 0x4000 * v220)) + v216 + v252 + ((v272 / 0x20000 | 0x8000 * v272) ^ v272 / 1024 ^ (v272 / 0x80000 | 0x2000 * v272)); // 0x4056dc\n    int32_t v281 = v280 - 0x6f410006 + v266 + (v278 & (v274 ^ v270) ^ v270) + ((v278 / 2048 | 0x200000 * v278) ^ (v278 / 64 | 0x4000000 * v278) ^ (v278 / 0x2000000 | 128 * v278)); // 0x40570a\n    uint32_t v282 = v281 + v267; // 0x405715\n    uint32_t v283 = v281 + ((v279 | v275) & v271 | v279 & v275) + ((v279 / 0x2000 | 0x80000 * v279) ^ (v279 / 4 | 0x40000000 * v279) ^ (v279 / 0x400000 | 1024 * v279)); // 0x405738\n    uint32_t v284 = ((v224 / 128 | 0x2000000 * v224) ^ v224 / 8 ^ (v224 / 0x40000 | 0x4000 * v224)) + v220 + v256 + ((v276 / 0x20000 | 0x8000 * v276) ^ v276 / 1024 ^ (v276 / 0x80000 | 0x2000 * v276)); // 0x405771\n    int32_t v285 = v284 - 0x5baf9315 + v270 + (v282 & (v278 ^ v274) ^ v274) + ((v282 / 2048 | 0x200000 * v282) ^ (v282 / 64 | 0x4000000 * v282) ^ (v282 / 0x2000000 | 128 * v282)); // 0x4057a9\n    uint32_t v286 = v285 + v271; // 0x4057b4\n    uint32_t v287 = v285 + ((v283 | v279) & v275 | v283 & v279) + ((v283 / 0x2000 | 0x80000 * v283) ^ (v283 / 4 | 0x40000000 * v283) ^ (v283 / 0x400000 | 1024 * v283)); // 0x4057d4\n    int32_t v288 = ((v228 / 128 | 0x2000000 * v228) ^ v228 / 8 ^ (v228 / 0x40000 | 0x4000 * v228)) + v224 + v260 + ((v280 / 0x20000 | 0x8000 * v280) ^ v280 / 1024 ^ (v280 / 0x80000 | 0x2000 * v280)); // 0x40580a\n    int32_t v289 = v288 - 0x41065c09 + v274 + (v286 & (v282 ^ v278) ^ v278) + ((v286 / 2048 | 0x200000 * v286) ^ (v286 / 64 | 0x4000000 * v286) ^ (v286 / 0x2000000 | 128 * v286)); // 0x40583f\n    uint32_t v290 = v289 + v275; // 0x40584a\n    uint32_t v291 = v289 + ((v287 | v283) & v279 | v287 & v283) + ((v287 / 0x2000 | 0x80000 * v287) ^ (v287 / 4 | 0x40000000 * v287) ^ (v287 / 0x400000 | 1024 * v287)); // 0x405865\n    int32_t v292 = ((v232 / 128 | 0x2000000 * v232) ^ v232 / 8 ^ (v232 / 0x40000 | 0x4000 * v232)) + v228 + v264 + ((v284 / 0x20000 | 0x8000 * v284) ^ v284 / 1024 ^ (v284 / 0x80000 | 0x2000 * v284)); // 0x405895\n    v12 += v291;\n    v10 += v283;\n    v11 += v287;\n    int32_t v293 = v290 + v47; // 0x4058d0\n    int32_t v294 = v286 + v48; // 0x4058de\n    int32_t v295 = v292 - 0x398e870e + v278 + (v290 & (v286 ^ v282) ^ v282) + ((v290 / 2048 | 0x200000 * v290) ^ (v290 / 64 | 0x4000000 * v290) ^ (v290 / 0x2000000 | 128 * v290)); // 0x4058ef\n    int32_t v296 = v279 + v46 + v295; // 0x4058fc\n    v14 = ((v291 | v287) & v283 | v291 & v287) + v14 + v295 + ((v291 / 0x2000 | 0x80000 * v291) ^ (v291 / 4 | 0x40000000 * v291) ^ (v291 / 0x400000 | 1024 * v291));\n    *(int32_t *)v5 = v14;\n    *(int32_t *)(v5 + 4) = v12;\n    int64_t result2 = v12; // 0x405934\n    *(int32_t *)(v5 + 8) = v11;\n    *(int32_t *)(v5 + 12) = v10;\n    *(int32_t *)(v5 + 20) = v293;\n    *(int32_t *)(v5 + 16) = v296;\n    *(int32_t *)(v5 + 24) = v294;\n    v9 += v282;\n    *(int32_t *)(v5 + 28) = v9;\n    while (v8 < v2) {\n        // 0x403298\n        v15 = result2;\n        v17 = v292;\n        v19 = v288;\n        v21 = v284;\n        v23 = v280;\n        v25 = v276;\n        v27 = v272;\n        v29 = v268;\n        v31 = v264;\n        v33 = v260;\n        v35 = v256;\n        v37 = v252;\n        v39 = v248;\n        v41 = v244;\n        v43 = v236;\n        v45 = v240;\n        v46 = v296;\n        v47 = v293;\n        v48 = v294;\n        v49 = v14;\n        v50 = 0;\n        v51 = llvm_bswap_i32(*(int32_t *)(v50 + v8));\n        *(int32_t *)((int64_t)&v5 + 8 + v50) = v51;\n        v52 = v50 + 4;\n        while (v50 != 60) {\n            // 0x4032a0\n            v50 = v52;\n            v51 = llvm_bswap_i32(*(int32_t *)(v50 + v8));\n            *(int32_t *)((int64_t)&v5 + 8 + v50) = v51;\n            v52 = v50 + 4;\n        }\n        // 0x4032b3\n        v8 += 64;\n        v54 = v9 + 0x428a2f98 + ((v47 ^ v48) & v46 ^ v48) + ((v46 / 2048 | 0x200000 * v46) ^ (v46 / 64 | 0x4000000 * v46) ^ (v46 / 0x2000000 | 128 * v46)) + v232;\n        v55 = (int32_t)v49;\n        v56 = v54 + v10;\n        v57 = v54 + ((v55 / 0x2000 | 0x80000 * v55) ^ (v55 / 4 | 0x40000000 * v55) ^ (v55 / 0x400000 | 1024 * v55)) + (int32_t)((v15 | v49) & (int64_t)v11 | v15 & v49);\n        v58 = v48 + 0x71374491 + v43 + (v56 & (v46 ^ v47) ^ v47) + ((v56 / 2048 | 0x200000 * v56) ^ (v56 / 64 | 0x4000000 * v56) ^ (v56 / 0x2000000 | 128 * v56));\n        v59 = v58 + v11;\n        v60 = v15;\n        v61 = ((v57 | v55) & v60 | v57 & v55) + v58 + ((v57 / 0x2000 | 0x80000 * v57) ^ (v57 / 4 | 0x40000000 * v57) ^ (v57 / 0x400000 | 1024 * v57));\n        v62 = v47 - 0x4a3f0431 + v45 + (v59 & (v56 ^ v46) ^ v46) + ((v59 / 2048 | 0x200000 * v59) ^ (v59 / 64 | 0x4000000 * v59) ^ (v59 / 0x2000000 | 128 * v59));\n        v63 = v62 + v60;\n        v64 = ((v61 | v57) & v55 | v61 & v57) + v62 + ((v61 / 0x2000 | 0x80000 * v61) ^ (v61 / 4 | 0x40000000 * v61) ^ (v61 / 0x400000 | 1024 * v61));\n        v65 = v46 - 0x164a245b + v41 + (v63 & (v59 ^ v56) ^ v56) + ((v63 / 2048 | 0x200000 * v63) ^ (v63 / 64 | 0x4000000 * v63) ^ (v63 / 0x2000000 | 128 * v63));\n        v66 = v65 + v55;\n        v67 = ((v64 | v61) & v57 | v64 & v61) + v65 + ((v64 / 0x2000 | 0x80000 * v64) ^ (v64 / 4 | 0x40000000 * v64) ^ (v64 / 0x400000 | 1024 * v64));\n        v68 = v56 + 0x3956c25b + v39 + (v66 & (v63 ^ v59) ^ v59) + ((v66 / 2048 | 0x200000 * v66) ^ (v66 / 64 | 0x4000000 * v66) ^ (v66 / 0x2000000 | 128 * v66));\n        v69 = v68 + v57;\n        v70 = ((v67 | v64) & v61 | v67 & v64) + v68 + ((v67 / 0x2000 | 0x80000 * v67) ^ (v67 / 4 | 0x40000000 * v67) ^ (v67 / 0x400000 | 1024 * v67));\n        v71 = v37 + 0x59f111f1 + v59 + (v69 & (v66 ^ v63) ^ v63) + ((v69 / 2048 | 0x200000 * v69) ^ (v69 / 64 | 0x4000000 * v69) ^ (v69 / 0x2000000 | 128 * v69));\n        v72 = v71 + v61;\n        v73 = ((v70 | v67) & v64 | v70 & v67) + v71 + ((v70 / 0x2000 | 0x80000 * v70) ^ (v70 / 4 | 0x40000000 * v70) ^ (v70 / 0x400000 | 1024 * v70));\n        v74 = v35 - 0x6dc07d5c + v63 + (v72 & (v69 ^ v66) ^ v66) + ((v72 / 2048 | 0x200000 * v72) ^ (v72 / 64 | 0x4000000 * v72) ^ (v72 / 0x2000000 | 128 * v72));\n        v75 = v74 + v64;\n        v76 = ((v73 | v70) & v67 | v73 & v70) + v74 + ((v73 / 0x2000 | 0x80000 * v73) ^ (v73 / 4 | 0x40000000 * v73) ^ (v73 / 0x400000 | 1024 * v73));\n        v77 = v33 - 0x54e3a12b + v66 + (v75 & (v72 ^ v69) ^ v69) + ((v75 / 2048 | 0x200000 * v75) ^ (v75 / 64 | 0x4000000 * v75) ^ (v75 / 0x2000000 | 128 * v75));\n        v78 = v77 + v67;\n        v79 = ((v76 | v73) & v70 | v76 & v73) + v77 + ((v76 / 0x2000 | 0x80000 * v76) ^ (v76 / 4 | 0x40000000 * v76) ^ (v76 / 0x400000 | 1024 * v76));\n        v80 = v31 - 0x27f85568 + v69 + (v78 & (v75 ^ v72) ^ v72) + ((v78 / 2048 | 0x200000 * v78) ^ (v78 / 64 | 0x4000000 * v78) ^ (v78 / 0x2000000 | 128 * v78));\n        v81 = v80 + v70;\n        v82 = ((v79 | v76) & v73 | v79 & v76) + v80 + ((v79 / 0x2000 | 0x80000 * v79) ^ (v79 / 4 | 0x40000000 * v79) ^ (v79 / 0x400000 | 1024 * v79));\n        v83 = v29 + 0x12835b01 + v72 + (v81 & (v78 ^ v75) ^ v75) + ((v81 / 2048 | 0x200000 * v81) ^ (v81 / 64 | 0x4000000 * v81) ^ (v81 / 0x2000000 | 128 * v81));\n        v84 = v83 + v73;\n        v85 = ((v82 | v79) & v76 | v82 & v79) + v83 + ((v82 / 0x2000 | 0x80000 * v82) ^ (v82 / 4 | 0x40000000 * v82) ^ (v82 / 0x400000 | 1024 * v82));\n        v86 = v27 + 0x243185be + v75 + (v84 & (v81 ^ v78) ^ v78) + ((v84 / 2048 | 0x200000 * v84) ^ (v84 / 64 | 0x4000000 * v84) ^ (v84 / 0x2000000 | 128 * v84));\n        v87 = v86 + v76;\n        v88 = ((v85 | v82) & v79 | v85 & v82) + v86 + ((v85 / 0x2000 | 0x80000 * v85) ^ (v85 / 4 | 0x40000000 * v85) ^ (v85 / 0x400000 | 1024 * v85));\n        v89 = v25 + 0x550c7dc3 + v78 + (v87 & (v84 ^ v81) ^ v81) + ((v87 / 2048 | 0x200000 * v87) ^ (v87 / 64 | 0x4000000 * v87) ^ (v87 / 0x2000000 | 128 * v87));\n        v90 = v89 + v79;\n        v91 = ((v88 | v85) & v82 | v88 & v85) + v89 + ((v88 / 0x2000 | 0x80000 * v88) ^ (v88 / 4 | 0x40000000 * v88) ^ (v88 / 0x400000 | 1024 * v88));\n        v92 = v23 + 0x72be5d74 + v81 + (v90 & (v87 ^ v84) ^ v84) + ((v90 / 2048 | 0x200000 * v90) ^ (v90 / 64 | 0x4000000 * v90) ^ (v90 / 0x2000000 | 128 * v90));\n        v93 = v92 + v82;\n        v94 = ((v91 | v88) & v85 | v91 & v88) + v92 + ((v91 / 0x2000 | 0x80000 * v91) ^ (v91 / 4 | 0x40000000 * v91) ^ (v91 / 0x400000 | 1024 * v91));\n        v95 = v21 - 0x7f214e02 + v84 + (v93 & (v90 ^ v87) ^ v87) + ((v93 / 2048 | 0x200000 * v93) ^ (v93 / 64 | 0x4000000 * v93) ^ (v93 / 0x2000000 | 128 * v93));\n        v96 = v95 + v85;\n        v97 = ((v94 | v91) & v88 | v94 & v91) + v95 + ((v94 / 0x2000 | 0x80000 * v94) ^ (v94 / 4 | 0x40000000 * v94) ^ (v94 / 0x400000 | 1024 * v94));\n        v98 = v19 - 0x6423f959 + v87 + (v96 & (v93 ^ v90) ^ v90) + ((v96 / 2048 | 0x200000 * v96) ^ (v96 / 64 | 0x4000000 * v96) ^ (v96 / 0x2000000 | 128 * v96));\n        v99 = v98 + v88;\n        v100 = ((v97 | v94) & v91 | v97 & v94) + v98 + ((v97 / 0x2000 | 0x80000 * v97) ^ (v97 / 4 | 0x40000000 * v97) ^ (v97 / 0x400000 | 1024 * v97));\n        v101 = v17 - 0x3e640e8c + v90 + (v99 & (v96 ^ v93) ^ v93) + ((v99 / 2048 | 0x200000 * v99) ^ (v99 / 64 | 0x4000000 * v99) ^ (v99 / 0x2000000 | 128 * v99));\n        v102 = v101 + v91;\n        v103 = ((v100 | v97) & v94 | v100 & v97) + v101 + ((v100 / 0x2000 | 0x80000 * v100) ^ (v100 / 4 | 0x40000000 * v100) ^ (v100 / 0x400000 | 1024 * v100));\n        v104 = ((v43 / 128 | 0x2000000 * v43) ^ v43 / 8 ^ (v43 / 0x40000 | 0x4000 * v43)) + v232 + v29 + ((v19 / 0x20000 | 0x8000 * v19) ^ v19 / 1024 ^ (v19 / 0x80000 | 0x2000 * v19));\n        v105 = v104 - 0x1b64963f + v93 + (v102 & (v99 ^ v96) ^ v96) + ((v102 / 2048 | 0x200000 * v102) ^ (v102 / 64 | 0x4000000 * v102) ^ (v102 / 0x2000000 | 128 * v102));\n        v106 = v105 + v94;\n        v107 = v105 + ((v103 | v100) & v97 | v103 & v100) + ((v103 / 0x2000 | 0x80000 * v103) ^ (v103 / 4 | 0x40000000 * v103) ^ (v103 / 0x400000 | 1024 * v103));\n        v108 = ((v45 / 128 | 0x2000000 * v45) ^ v45 / 8 ^ (v45 / 0x40000 | 0x4000 * v45)) + v43 + v27 + ((v17 / 0x20000 | 0x8000 * v17) ^ v17 / 1024 ^ (v17 / 0x80000 | 0x2000 * v17));\n        v109 = v108 - 0x1041b87a + v96 + (v106 & (v102 ^ v99) ^ v99) + ((v106 / 2048 | 0x200000 * v106) ^ (v106 / 64 | 0x4000000 * v106) ^ (v106 / 0x2000000 | 128 * v106));\n        v110 = v109 + v97;\n        v111 = v109 + ((v107 | v103) & v100 | v107 & v103) + ((v107 / 0x2000 | 0x80000 * v107) ^ (v107 / 4 | 0x40000000 * v107) ^ (v107 / 0x400000 | 1024 * v107));\n        v112 = ((v41 / 0x40000 | 0x4000 * v41) ^ v41 / 8 ^ (v41 / 128 | 0x2000000 * v41)) + v45 + v25 + ((v104 / 0x20000 | 0x8000 * v104) ^ v104 / 1024 ^ (v104 / 0x80000 | 0x2000 * v104));\n        v113 = v112 + 0xfc19dc6 + v99 + (v110 & (v106 ^ v102) ^ v102) + ((v110 / 2048 | 0x200000 * v110) ^ (v110 / 64 | 0x4000000 * v110) ^ (v110 / 0x2000000 | 128 * v110));\n        v114 = v113 + v100;\n        v115 = v113 + ((v111 | v107) & v103 | v111 & v107) + ((v111 / 0x2000 | 0x80000 * v111) ^ (v111 / 4 | 0x40000000 * v111) ^ (v111 / 0x400000 | 1024 * v111));\n        v116 = ((v39 / 0x40000 | 0x4000 * v39) ^ v39 / 8 ^ (v39 / 128 | 0x2000000 * v39)) + v41 + v23 + ((v108 / 0x20000 | 0x8000 * v108) ^ v108 / 1024 ^ (v108 / 0x80000 | 0x2000 * v108));\n        v117 = v116 + 0x240ca1cc + v102 + (v114 & (v110 ^ v106) ^ v106) + ((v114 / 2048 | 0x200000 * v114) ^ (v114 / 64 | 0x4000000 * v114) ^ (v114 / 0x2000000 | 128 * v114));\n        v118 = v117 + v103;\n        v119 = v117 + ((v115 | v111) & v107 | v115 & v111) + ((v115 / 0x2000 | 0x80000 * v115) ^ (v115 / 4 | 0x40000000 * v115) ^ (v115 / 0x400000 | 1024 * v115));\n        v120 = ((v37 / 0x40000 | 0x4000 * v37) ^ v37 / 8 ^ (v37 / 128 | 0x2000000 * v37)) + v39 + v21 + ((v112 / 0x20000 | 0x8000 * v112) ^ v112 / 1024 ^ (v112 / 0x80000 | 0x2000 * v112));\n        v121 = v120 + 0x2de92c6f + v106 + (v118 & (v114 ^ v110) ^ v110) + ((v118 / 2048 | 0x200000 * v118) ^ (v118 / 64 | 0x4000000 * v118) ^ (v118 / 0x2000000 | 128 * v118));\n        v122 = v121 + v107;\n        v123 = v121 + ((v119 | v115) & v111 | v119 & v115) + ((v119 / 0x2000 | 0x80000 * v119) ^ (v119 / 4 | 0x40000000 * v119) ^ (v119 / 0x400000 | 1024 * v119));\n        v124 = ((v35 / 0x40000 | 0x4000 * v35) ^ v35 / 8 ^ (v35 / 128 | 0x2000000 * v35)) + v37 + v19 + ((v116 / 0x20000 | 0x8000 * v116) ^ v116 / 1024 ^ (v116 / 0x80000 | 0x2000 * v116));\n        v125 = v124 + 0x4a7484aa + v110 + (v122 & (v118 ^ v114) ^ v114) + ((v122 / 2048 | 0x200000 * v122) ^ (v122 / 64 | 0x4000000 * v122) ^ (v122 / 0x2000000 | 128 * v122));\n        v126 = v125 + v111;\n        v127 = v125 + ((v123 | v119) & v115 | v123 & v119) + ((v123 / 0x2000 | 0x80000 * v123) ^ (v123 / 4 | 0x40000000 * v123) ^ (v123 / 0x400000 | 1024 * v123));\n        v128 = ((v33 / 0x40000 | 0x4000 * v33) ^ v33 / 8 ^ (v33 / 128 | 0x2000000 * v33)) + v35 + v17 + ((v120 / 0x20000 | 0x8000 * v120) ^ v120 / 1024 ^ (v120 / 0x80000 | 0x2000 * v120));\n        v129 = v128 + 0x5cb0a9dc + v114 + (v126 & (v122 ^ v118) ^ v118) + ((v126 / 2048 | 0x200000 * v126) ^ (v126 / 64 | 0x4000000 * v126) ^ (v126 / 0x2000000 | 128 * v126));\n        v130 = v129 + v115;\n        v131 = v129 + ((v127 | v123) & v119 | v127 & v123) + ((v127 / 0x2000 | 0x80000 * v127) ^ (v127 / 4 | 0x40000000 * v127) ^ (v127 / 0x400000 | 1024 * v127));\n        v132 = ((v31 / 128 | 0x2000000 * v31) ^ v31 / 8 ^ (v31 / 0x40000 | 0x4000 * v31)) + v33 + v104 + ((v124 / 0x20000 | 0x8000 * v124) ^ v124 / 1024 ^ (v124 / 0x80000 | 0x2000 * v124));\n        v133 = v132 + 0x76f988da + v118 + (v130 & (v126 ^ v122) ^ v122) + ((v130 / 2048 | 0x200000 * v130) ^ (v130 / 64 | 0x4000000 * v130) ^ (v130 / 0x2000000 | 128 * v130));\n        v134 = v133 + v119;\n        v135 = v133 + ((v131 | v127) & v123 | v131 & v127) + ((v131 / 0x2000 | 0x80000 * v131) ^ (v131 / 4 | 0x40000000 * v131) ^ (v131 / 0x400000 | 1024 * v131));\n        v136 = ((v29 / 128 | 0x2000000 * v29) ^ v29 / 8 ^ (v29 / 0x40000 | 0x4000 * v29)) + v31 + v108 + ((v128 / 0x20000 | 0x8000 * v128) ^ v128 / 1024 ^ (v128 / 0x80000 | 0x2000 * v128));\n        v137 = v136 - 0x67c1aeae + v122 + (v134 & (v130 ^ v126) ^ v126) + ((v134 / 2048 | 0x200000 * v134) ^ (v134 / 64 | 0x4000000 * v134) ^ (v134 / 0x2000000 | 128 * v134));\n        v138 = v137 + v123;\n        v139 = v137 + ((v135 | v131) & v127 | v135 & v131) + ((v135 / 0x2000 | 0x80000 * v135) ^ (v135 / 4 | 0x40000000 * v135) ^ (v135 / 0x400000 | 1024 * v135));\n        v140 = ((v27 / 128 | 0x2000000 * v27) ^ v27 / 8 ^ (v27 / 0x40000 | 0x4000 * v27)) + v29 + v112 + ((v132 / 0x20000 | 0x8000 * v132) ^ v132 / 1024 ^ (v132 / 0x80000 | 0x2000 * v132));\n        v141 = v140 - 0x57ce3993 + v126 + (v138 & (v134 ^ v130) ^ v130) + ((v138 / 2048 | 0x200000 * v138) ^ (v138 / 64 | 0x4000000 * v138) ^ (v138 / 0x2000000 | 128 * v138));\n        v142 = v141 + v127;\n        v143 = v141 + ((v139 | v135) & v131 | v139 & v135) + ((v139 / 0x2000 | 0x80000 * v139) ^ (v139 / 4 | 0x40000000 * v139) ^ (v139 / 0x400000 | 1024 * v139));\n        v144 = ((v25 / 128 | 0x2000000 * v25) ^ v25 / 8 ^ (v25 / 0x40000 | 0x4000 * v25)) + v27 + v116 + ((v136 / 0x20000 | 0x8000 * v136) ^ v136 / 1024 ^ (v136 / 0x80000 | 0x2000 * v136));\n        v145 = v144 - 0x4ffcd838 + v130 + (v142 & (v138 ^ v134) ^ v134) + ((v142 / 2048 | 0x200000 * v142) ^ (v142 / 64 | 0x4000000 * v142) ^ (v142 / 0x2000000 | 128 * v142));\n        v146 = v145 + v131;\n        v147 = v145 + ((v143 | v139) & v135 | v143 & v139) + ((v143 / 0x2000 | 0x80000 * v143) ^ (v143 / 4 | 0x40000000 * v143) ^ (v143 / 0x400000 | 1024 * v143));\n        v148 = ((v23 / 128 | 0x2000000 * v23) ^ v23 / 8 ^ (v23 / 0x40000 | 0x4000 * v23)) + v25 + v120 + ((v140 / 0x20000 | 0x8000 * v140) ^ v140 / 1024 ^ (v140 / 0x80000 | 0x2000 * v140));\n        v149 = v148 - 0x40a68039 + v134 + (v146 & (v142 ^ v138) ^ v138) + ((v146 / 2048 | 0x200000 * v146) ^ (v146 / 64 | 0x4000000 * v146) ^ (v146 / 0x2000000 | 128 * v146));\n        v150 = v149 + v135;\n        v151 = v149 + ((v147 | v143) & v139 | v147 & v143) + ((v147 / 0x2000 | 0x80000 * v147) ^ (v147 / 4 | 0x40000000 * v147) ^ (v147 / 0x400000 | 1024 * v147));\n        v152 = ((v21 / 128 | 0x2000000 * v21) ^ v21 / 8 ^ (v21 / 0x40000 | 0x4000 * v21)) + v23 + v124 + ((v144 / 0x20000 | 0x8000 * v144) ^ v144 / 1024 ^ (v144 / 0x80000 | 0x2000 * v144));\n        v153 = v152 - 0x391ff40d + v138 + (v150 & (v146 ^ v142) ^ v142) + ((v150 / 2048 | 0x200000 * v150) ^ (v150 / 64 | 0x4000000 * v150) ^ (v150 / 0x2000000 | 128 * v150));\n        v154 = v153 + v139;\n        v155 = v153 + ((v151 | v147) & v143 | v151 & v147) + ((v151 / 0x2000 | 0x80000 * v151) ^ (v151 / 4 | 0x40000000 * v151) ^ (v151 / 0x400000 | 1024 * v151));\n        v156 = ((v19 / 128 | 0x2000000 * v19) ^ v19 / 8 ^ (v19 / 0x40000 | 0x4000 * v19)) + v21 + v128 + ((v148 / 0x20000 | 0x8000 * v148) ^ v148 / 1024 ^ (v148 / 0x80000 | 0x2000 * v148));\n        v157 = v156 - 0x2a586eb9 + v142 + (v154 & (v150 ^ v146) ^ v146) + ((v154 / 2048 | 0x200000 * v154) ^ (v154 / 64 | 0x4000000 * v154) ^ (v154 / 0x2000000 | 128 * v154));\n        v158 = v157 + v143;\n        v159 = v157 + ((v155 | v151) & v147 | v155 & v151) + ((v155 / 0x2000 | 0x80000 * v155) ^ (v155 / 4 | 0x40000000 * v155) ^ (v155 / 0x400000 | 1024 * v155));\n        v160 = ((v17 / 128 | 0x2000000 * v17) ^ v17 / 8 ^ (v17 / 0x40000 | 0x4000 * v17)) + v19 + v132 + ((v152 / 0x20000 | 0x8000 * v152) ^ v152 / 1024 ^ (v152 / 0x80000 | 0x2000 * v152));\n        v161 = v160 + 0x6ca6351 + v146 + (v158 & (v154 ^ v150) ^ v150) + ((v158 / 2048 | 0x200000 * v158) ^ (v158 / 64 | 0x4000000 * v158) ^ (v158 / 0x2000000 | 128 * v158));\n        v162 = v161 + v147;\n        v163 = v161 + ((v159 | v155) & v151 | v159 & v155) + ((v159 / 0x2000 | 0x80000 * v159) ^ (v159 / 4 | 0x40000000 * v159) ^ (v159 / 0x400000 | 1024 * v159));\n        v164 = ((v104 / 128 | 0x2000000 * v104) ^ v104 / 8 ^ (v104 / 0x40000 | 0x4000 * v104)) + v17 + v136 + ((v156 / 0x20000 | 0x8000 * v156) ^ v156 / 1024 ^ (v156 / 0x80000 | 0x2000 * v156));\n        v165 = v164 + 0x14292967 + v150 + (v162 & (v158 ^ v154) ^ v154) + ((v162 / 2048 | 0x200000 * v162) ^ (v162 / 64 | 0x4000000 * v162) ^ (v162 / 0x2000000 | 128 * v162));\n        v166 = v165 + v151;\n        v167 = v165 + ((v163 | v159) & v155 | v163 & v159) + ((v163 / 0x2000 | 0x80000 * v163) ^ (v163 / 4 | 0x40000000 * v163) ^ (v163 / 0x400000 | 1024 * v163));\n        v168 = ((v108 / 128 | 0x2000000 * v108) ^ v108 / 8 ^ (v108 / 0x40000 | 0x4000 * v108)) + v104 + v140 + ((v160 / 0x20000 | 0x8000 * v160) ^ v160 / 1024 ^ (v160 / 0x80000 | 0x2000 * v160));\n        v169 = v168 + 0x27b70a85 + v154 + (v166 & (v162 ^ v158) ^ v158) + ((v166 / 2048 | 0x200000 * v166) ^ (v166 / 64 | 0x4000000 * v166) ^ (v166 / 0x2000000 | 128 * v166));\n        v170 = v169 + v155;\n        v171 = v169 + ((v167 | v163) & v159 | v167 & v163) + ((v167 / 0x2000 | 0x80000 * v167) ^ (v167 / 4 | 0x40000000 * v167) ^ (v167 / 0x400000 | 1024 * v167));\n        v172 = ((v112 / 128 | 0x2000000 * v112) ^ v112 / 8 ^ (v112 / 0x40000 | 0x4000 * v112)) + v108 + v144 + ((v164 / 0x20000 | 0x8000 * v164) ^ v164 / 1024 ^ (v164 / 0x80000 | 0x2000 * v164));\n        v173 = v172 + 0x2e1b2138 + v158 + (v170 & (v166 ^ v162) ^ v162) + ((v170 / 2048 | 0x200000 * v170) ^ (v170 / 64 | 0x4000000 * v170) ^ (v170 / 0x2000000 | 128 * v170));\n        v174 = v173 + v159;\n        v175 = v173 + ((v171 | v167) & v163 | v171 & v167) + ((v171 / 0x2000 | 0x80000 * v171) ^ (v171 / 4 | 0x40000000 * v171) ^ (v171 / 0x400000 | 1024 * v171));\n        v176 = ((v116 / 128 | 0x2000000 * v116) ^ v116 / 8 ^ (v116 / 0x40000 | 0x4000 * v116)) + v112 + v148 + ((v168 / 0x20000 | 0x8000 * v168) ^ v168 / 1024 ^ (v168 / 0x80000 | 0x2000 * v168));\n        v177 = v176 + 0x4d2c6dfc + v162 + (v174 & (v170 ^ v166) ^ v166) + ((v174 / 2048 | 0x200000 * v174) ^ (v174 / 64 | 0x4000000 * v174) ^ (v174 / 0x2000000 | 128 * v174));\n        v178 = v177 + v163;\n        v179 = v177 + ((v175 | v171) & v167 | v175 & v171) + ((v175 / 0x2000 | 0x80000 * v175) ^ (v175 / 4 | 0x40000000 * v175) ^ (v175 / 0x400000 | 1024 * v175));\n        v180 = ((v120 / 128 | 0x2000000 * v120) ^ v120 / 8 ^ (v120 / 0x40000 | 0x4000 * v120)) + v116 + v152 + ((v172 / 0x20000 | 0x8000 * v172) ^ v172 / 1024 ^ (v172 / 0x80000 | 0x2000 * v172));\n        v181 = v180 + 0x53380d13 + v166 + (v178 & (v174 ^ v170) ^ v170) + ((v178 / 2048 | 0x200000 * v178) ^ (v178 / 64 | 0x4000000 * v178) ^ (v178 / 0x2000000 | 128 * v178));\n        v182 = v181 + v167;\n        v183 = v181 + ((v179 | v175) & v171 | v179 & v175) + ((v179 / 0x2000 | 0x80000 * v179) ^ (v179 / 4 | 0x40000000 * v179) ^ (v179 / 0x400000 | 1024 * v179));\n        v184 = ((v124 / 128 | 0x2000000 * v124) ^ v124 / 8 ^ (v124 / 0x40000 | 0x4000 * v124)) + v120 + v156 + ((v176 / 0x20000 | 0x8000 * v176) ^ v176 / 1024 ^ (v176 / 0x80000 | 0x2000 * v176));\n        v185 = v184 + 0x650a7354 + v170 + (v182 & (v178 ^ v174) ^ v174) + ((v182 / 2048 | 0x200000 * v182) ^ (v182 / 64 | 0x4000000 * v182) ^ (v182 / 0x2000000 | 128 * v182));\n        v186 = v185 + v171;\n        v187 = v185 + ((v183 | v179) & v175 | v183 & v179) + ((v183 / 0x2000 | 0x80000 * v183) ^ (v183 / 4 | 0x40000000 * v183) ^ (v183 / 0x400000 | 1024 * v183));\n        v188 = ((v128 / 128 | 0x2000000 * v128) ^ v128 / 8 ^ (v128 / 0x40000 | 0x4000 * v128)) + v124 + v160 + ((v180 / 0x20000 | 0x8000 * v180) ^ v180 / 1024 ^ (v180 / 0x80000 | 0x2000 * v180));\n        v189 = v188 + 0x766a0abb + v174 + (v186 & (v182 ^ v178) ^ v178) + ((v186 / 2048 | 0x200000 * v186) ^ (v186 / 64 | 0x4000000 * v186) ^ (v186 / 0x2000000 | 128 * v186));\n        v190 = v189 + v175;\n        v191 = v189 + ((v187 | v183) & v179 | v187 & v183) + ((v187 / 0x2000 | 0x80000 * v187) ^ (v187 / 4 | 0x40000000 * v187) ^ (v187 / 0x400000 | 1024 * v187));\n        v192 = ((v132 / 128 | 0x2000000 * v132) ^ v132 / 8 ^ (v132 / 0x40000 | 0x4000 * v132)) + v128 + v164 + ((v184 / 0x20000 | 0x8000 * v184) ^ v184 / 1024 ^ (v184 / 0x80000 | 0x2000 * v184));\n        v193 = v192 - 0x7e3d36d2 + v178 + (v190 & (v186 ^ v182) ^ v182) + ((v190 / 2048 | 0x200000 * v190) ^ (v190 / 64 | 0x4000000 * v190) ^ (v190 / 0x2000000 | 128 * v190));\n        v194 = v193 + v179;\n        v195 = v193 + ((v191 | v187) & v183 | v191 & v187) + ((v191 / 0x2000 | 0x80000 * v191) ^ (v191 / 4 | 0x40000000 * v191) ^ (v191 / 0x400000 | 1024 * v191));\n        v196 = ((v136 / 128 | 0x2000000 * v136) ^ v136 / 8 ^ (v136 / 0x40000 | 0x4000 * v136)) + v132 + v168 + ((v188 / 0x20000 | 0x8000 * v188) ^ v188 / 1024 ^ (v188 / 0x80000 | 0x2000 * v188));\n        v197 = v196 - 0x6d8dd37b + v182 + (v194 & (v190 ^ v186) ^ v186) + ((v194 / 2048 | 0x200000 * v194) ^ (v194 / 64 | 0x4000000 * v194) ^ (v194 / 0x2000000 | 128 * v194));\n        v198 = v197 + v183;\n        v199 = v197 + ((v195 | v191) & v187 | v195 & v191) + ((v195 / 0x2000 | 0x80000 * v195) ^ (v195 / 4 | 0x40000000 * v195) ^ (v195 / 0x400000 | 1024 * v195));\n        v200 = ((v140 / 128 | 0x2000000 * v140) ^ v140 / 8 ^ (v140 / 0x40000 | 0x4000 * v140)) + v136 + v172 + ((v192 / 0x20000 | 0x8000 * v192) ^ v192 / 1024 ^ (v192 / 0x80000 | 0x2000 * v192));\n        v201 = v200 - 0x5d40175f + v186 + (v198 & (v194 ^ v190) ^ v190) + ((v198 / 2048 | 0x200000 * v198) ^ (v198 / 64 | 0x4000000 * v198) ^ (v198 / 0x2000000 | 128 * v198));\n        v202 = v201 + v187;\n        v203 = v201 + ((v199 | v195) & v191 | v199 & v195) + ((v199 / 0x2000 | 0x80000 * v199) ^ (v199 / 4 | 0x40000000 * v199) ^ (v199 / 0x400000 | 1024 * v199));\n        v204 = ((v144 / 128 | 0x2000000 * v144) ^ v144 / 8 ^ (v144 / 0x40000 | 0x4000 * v144)) + v140 + v176 + ((v196 / 0x20000 | 0x8000 * v196) ^ v196 / 1024 ^ (v196 / 0x80000 | 0x2000 * v196));\n        v205 = v204 - 0x57e599b5 + v190 + (v202 & (v198 ^ v194) ^ v194) + ((v202 / 2048 | 0x200000 * v202) ^ (v202 / 64 | 0x4000000 * v202) ^ (v202 / 0x2000000 | 128 * v202));\n        v206 = v205 + v191;\n        v207 = v205 + ((v203 | v199) & v195 | v203 & v199) + ((v203 / 0x2000 | 0x80000 * v203) ^ (v203 / 4 | 0x40000000 * v203) ^ (v203 / 0x400000 | 1024 * v203));\n        v208 = ((v148 / 128 | 0x2000000 * v148) ^ v148 / 8 ^ (v148 / 0x40000 | 0x4000 * v148)) + v144 + v180 + ((v200 / 0x20000 | 0x8000 * v200) ^ v200 / 1024 ^ (v200 / 0x80000 | 0x2000 * v200));\n        v209 = v208 - 0x3db47490 + v194 + (v206 & (v202 ^ v198) ^ v198) + ((v206 / 2048 | 0x200000 * v206) ^ (v206 / 64 | 0x4000000 * v206) ^ (v206 / 0x2000000 | 128 * v206));\n        v210 = v209 + v195;\n        v211 = v209 + ((v207 | v203) & v199 | v207 & v203) + ((v207 / 0x2000 | 0x80000 * v207) ^ (v207 / 4 | 0x40000000 * v207) ^ (v207 / 0x400000 | 1024 * v207));\n        v212 = ((v152 / 128 | 0x2000000 * v152) ^ v152 / 8 ^ (v152 / 0x40000 | 0x4000 * v152)) + v148 + v184 + ((v204 / 0x20000 | 0x8000 * v204) ^ v204 / 1024 ^ (v204 / 0x80000 | 0x2000 * v204));\n        v213 = v212 - 0x3893ae5d + v198 + (v210 & (v206 ^ v202) ^ v202) + ((v210 / 2048 | 0x200000 * v210) ^ (v210 / 64 | 0x4000000 * v210) ^ (v210 / 0x2000000 | 128 * v210));\n        v214 = v213 + v199;\n        v215 = v213 + ((v211 | v207) & v203 | v211 & v207) + ((v211 / 0x2000 | 0x80000 * v211) ^ (v211 / 4 | 0x40000000 * v211) ^ (v211 / 0x400000 | 1024 * v211));\n        v216 = ((v156 / 128 | 0x2000000 * v156) ^ v156 / 8 ^ (v156 / 0x40000 | 0x4000 * v156)) + v152 + v188 + ((v208 / 0x20000 | 0x8000 * v208) ^ v208 / 1024 ^ (v208 / 0x80000 | 0x2000 * v208));\n        v217 = v216 - 0x2e6d17e7 + v202 + (v214 & (v210 ^ v206) ^ v206) + ((v214 / 2048 | 0x200000 * v214) ^ (v214 / 64 | 0x4000000 * v214) ^ (v214 / 0x2000000 | 128 * v214));\n        v218 = v217 + v203;\n        v219 = v217 + ((v215 | v211) & v207 | v215 & v211) + ((v215 / 0x2000 | 0x80000 * v215) ^ (v215 / 4 | 0x40000000 * v215) ^ (v215 / 0x400000 | 1024 * v215));\n        v220 = ((v160 / 128 | 0x2000000 * v160) ^ v160 / 8 ^ (v160 / 0x40000 | 0x4000 * v160)) + v156 + v192 + ((v212 / 0x20000 | 0x8000 * v212) ^ v212 / 1024 ^ (v212 / 0x80000 | 0x2000 * v212));\n        v221 = v220 - 0x2966f9dc + v206 + (v218 & (v214 ^ v210) ^ v210) + ((v218 / 2048 | 0x200000 * v218) ^ (v218 / 64 | 0x4000000 * v218) ^ (v218 / 0x2000000 | 128 * v218));\n        v222 = v221 + v207;\n        v223 = v221 + ((v219 | v215) & v211 | v219 & v215) + ((v219 / 0x2000 | 0x80000 * v219) ^ (v219 / 4 | 0x40000000 * v219) ^ (v219 / 0x400000 | 1024 * v219));\n        v224 = ((v164 / 128 | 0x2000000 * v164) ^ v164 / 8 ^ (v164 / 0x40000 | 0x4000 * v164)) + v160 + v196 + ((v216 / 0x20000 | 0x8000 * v216) ^ v216 / 1024 ^ (v216 / 0x80000 | 0x2000 * v216));\n        v225 = v224 - 0xbf1ca7b + v210 + (v222 & (v218 ^ v214) ^ v214) + ((v222 / 2048 | 0x200000 * v222) ^ (v222 / 64 | 0x4000000 * v222) ^ (v222 / 0x2000000 | 128 * v222));\n        v226 = v225 + v211;\n        v227 = v225 + ((v223 | v219) & v215 | v223 & v219) + ((v223 / 0x2000 | 0x80000 * v223) ^ (v223 / 4 | 0x40000000 * v223) ^ (v223 / 0x400000 | 1024 * v223));\n        v228 = ((v168 / 128 | 0x2000000 * v168) ^ v168 / 8 ^ (v168 / 0x40000 | 0x4000 * v168)) + v164 + v200 + ((v220 / 0x20000 | 0x8000 * v220) ^ v220 / 1024 ^ (v220 / 0x80000 | 0x2000 * v220));\n        v229 = v228 + 0x106aa070 + v214 + (v226 & (v222 ^ v218) ^ v218) + ((v226 / 2048 | 0x200000 * v226) ^ (v226 / 64 | 0x4000000 * v226) ^ (v226 / 0x2000000 | 128 * v226));\n        v230 = v229 + v215;\n        v231 = v229 + ((v227 | v223) & v219 | v227 & v223) + ((v227 / 0x2000 | 0x80000 * v227) ^ (v227 / 4 | 0x40000000 * v227) ^ (v227 / 0x400000 | 1024 * v227));\n        v232 = ((v172 / 128 | 0x2000000 * v172) ^ v172 / 8 ^ (v172 / 0x40000 | 0x4000 * v172)) + v168 + v204 + ((v224 / 0x20000 | 0x8000 * v224) ^ v224 / 1024 ^ (v224 / 0x80000 | 0x2000 * v224));\n        v233 = v232 + 0x19a4c116 + v218 + (v230 & (v226 ^ v222) ^ v222) + ((v230 / 2048 | 0x200000 * v230) ^ (v230 / 64 | 0x4000000 * v230) ^ (v230 / 0x2000000 | 128 * v230));\n        v234 = v233 + v219;\n        v235 = v233 + ((v231 | v227) & v223 | v231 & v227) + ((v231 / 0x2000 | 0x80000 * v231) ^ (v231 / 4 | 0x40000000 * v231) ^ (v231 / 0x400000 | 1024 * v231));\n        v236 = ((v176 / 128 | 0x2000000 * v176) ^ v176 / 8 ^ (v176 / 0x40000 | 0x4000 * v176)) + v172 + v208 + ((v228 / 0x20000 | 0x8000 * v228) ^ v228 / 1024 ^ (v228 / 0x80000 | 0x2000 * v228));\n        v237 = v236 + 0x1e376c08 + v222 + (v234 & (v230 ^ v226) ^ v226) + ((v234 / 2048 | 0x200000 * v234) ^ (v234 / 64 | 0x4000000 * v234) ^ (v234 / 0x2000000 | 128 * v234));\n        v238 = v237 + v223;\n        v239 = v237 + ((v235 | v231) & v227 | v235 & v231) + ((v235 / 0x2000 | 0x80000 * v235) ^ (v235 / 4 | 0x40000000 * v235) ^ (v235 / 0x400000 | 1024 * v235));\n        v240 = ((v180 / 128 | 0x2000000 * v180) ^ v180 / 8 ^ (v180 / 0x40000 | 0x4000 * v180)) + v176 + v212 + ((v232 / 0x20000 | 0x8000 * v232) ^ v232 / 1024 ^ (v232 / 0x80000 | 0x2000 * v232));\n        v241 = v240 + 0x2748774c + v226 + (v238 & (v234 ^ v230) ^ v230) + ((v238 / 2048 | 0x200000 * v238) ^ (v238 / 64 | 0x4000000 * v238) ^ (v238 / 0x2000000 | 128 * v238));\n        v242 = v241 + v227;\n        v243 = v241 + ((v239 | v235) & v231 | v239 & v235) + ((v239 / 0x2000 | 0x80000 * v239) ^ (v239 / 4 | 0x40000000 * v239) ^ (v239 / 0x400000 | 1024 * v239));\n        v244 = ((v184 / 128 | 0x2000000 * v184) ^ v184 / 8 ^ (v184 / 0x40000 | 0x4000 * v184)) + v180 + v216 + ((v236 / 0x20000 | 0x8000 * v236) ^ v236 / 1024 ^ (v236 / 0x80000 | 0x2000 * v236));\n        v245 = v244 + 0x34b0bcb5 + v230 + (v242 & (v238 ^ v234) ^ v234) + ((v242 / 2048 | 0x200000 * v242) ^ (v242 / 64 | 0x4000000 * v242) ^ (v242 / 0x2000000 | 128 * v242));\n        v246 = v245 + v231;\n        v247 = v245 + ((v243 | v239) & v235 | v243 & v239) + ((v243 / 0x2000 | 0x80000 * v243) ^ (v243 / 4 | 0x40000000 * v243) ^ (v243 / 0x400000 | 1024 * v243));\n        v248 = ((v188 / 128 | 0x2000000 * v188) ^ v188 / 8 ^ (v188 / 0x40000 | 0x4000 * v188)) + v184 + v220 + ((v240 / 0x20000 | 0x8000 * v240) ^ v240 / 1024 ^ (v240 / 0x80000 | 0x2000 * v240));\n        v249 = v248 + 0x391c0cb3 + v234 + (v246 & (v242 ^ v238) ^ v238) + ((v246 / 2048 | 0x200000 * v246) ^ (v246 / 64 | 0x4000000 * v246) ^ (v246 / 0x2000000 | 128 * v246));\n        v250 = v249 + v235;\n        v251 = v249 + ((v247 | v243) & v239 | v247 & v243) + ((v247 / 0x2000 | 0x80000 * v247) ^ (v247 / 4 | 0x40000000 * v247) ^ (v247 / 0x400000 | 1024 * v247));\n        v252 = ((v192 / 128 | 0x2000000 * v192) ^ v192 / 8 ^ (v192 / 0x40000 | 0x4000 * v192)) + v188 + v224 + ((v244 / 0x20000 | 0x8000 * v244) ^ v244 / 1024 ^ (v244 / 0x80000 | 0x2000 * v244));\n        v253 = v252 + 0x4ed8aa4a + v238 + (v250 & (v246 ^ v242) ^ v242) + ((v250 / 2048 | 0x200000 * v250) ^ (v250 / 64 | 0x4000000 * v250) ^ (v250 / 0x2000000 | 128 * v250));\n        v254 = v253 + v239;\n        v255 = v253 + ((v251 | v247) & v243 | v251 & v247) + ((v251 / 0x2000 | 0x80000 * v251) ^ (v251 / 4 | 0x40000000 * v251) ^ (v251 / 0x400000 | 1024 * v251));\n        v256 = ((v196 / 128 | 0x2000000 * v196) ^ v196 / 8 ^ (v196 / 0x40000 | 0x4000 * v196)) + v192 + v228 + ((v248 / 0x20000 | 0x8000 * v248) ^ v248 / 1024 ^ (v248 / 0x80000 | 0x2000 * v248));\n        v257 = v256 + 0x5b9cca4f + v242 + (v254 & (v250 ^ v246) ^ v246) + ((v254 / 2048 | 0x200000 * v254) ^ (v254 / 64 | 0x4000000 * v254) ^ (v254 / 0x2000000 | 128 * v254));\n        v258 = v257 + v243;\n        v259 = v257 + ((v255 | v251) & v247 | v255 & v251) + ((v255 / 0x2000 | 0x80000 * v255) ^ (v255 / 4 | 0x40000000 * v255) ^ (v255 / 0x400000 | 1024 * v255));\n        v260 = ((v200 / 128 | 0x2000000 * v200) ^ v200 / 8 ^ (v200 / 0x40000 | 0x4000 * v200)) + v196 + v232 + ((v252 / 0x20000 | 0x8000 * v252) ^ v252 / 1024 ^ (v252 / 0x80000 | 0x2000 * v252));\n        v261 = v260 + 0x682e6ff3 + v246 + (v258 & (v254 ^ v250) ^ v250) + ((v258 / 2048 | 0x200000 * v258) ^ (v258 / 64 | 0x4000000 * v258) ^ (v258 / 0x2000000 | 128 * v258));\n        v262 = v261 + v247;\n        v263 = v261 + ((v259 | v255) & v251 | v259 & v255) + ((v259 / 0x2000 | 0x80000 * v259) ^ (v259 / 4 | 0x40000000 * v259) ^ (v259 / 0x400000 | 1024 * v259));\n        v264 = ((v204 / 128 | 0x2000000 * v204) ^ v204 / 8 ^ (v204 / 0x40000 | 0x4000 * v204)) + v200 + v236 + ((v256 / 0x20000 | 0x8000 * v256) ^ v256 / 1024 ^ (v256 / 0x80000 | 0x2000 * v256));\n        v265 = v264 + 0x748f82ee + v250 + (v262 & (v258 ^ v254) ^ v254) + ((v262 / 2048 | 0x200000 * v262) ^ (v262 / 64 | 0x4000000 * v262) ^ (v262 / 0x2000000 | 128 * v262));\n        v266 = v265 + v251;\n        v267 = v265 + ((v263 | v259) & v255 | v263 & v259) + ((v263 / 0x2000 | 0x80000 * v263) ^ (v263 / 4 | 0x40000000 * v263) ^ (v263 / 0x400000 | 1024 * v263));\n        v268 = ((v208 / 128 | 0x2000000 * v208) ^ v208 / 8 ^ (v208 / 0x40000 | 0x4000 * v208)) + v204 + v240 + ((v260 / 0x20000 | 0x8000 * v260) ^ v260 / 1024 ^ (v260 / 0x80000 | 0x2000 * v260));\n        v269 = v268 + 0x78a5636f + v254 + (v266 & (v262 ^ v258) ^ v258) + ((v266 / 2048 | 0x200000 * v266) ^ (v266 / 64 | 0x4000000 * v266) ^ (v266 / 0x2000000 | 128 * v266));\n        v270 = v269 + v255;\n        v271 = v269 + ((v267 | v263) & v259 | v267 & v263) + ((v267 / 0x2000 | 0x80000 * v267) ^ (v267 / 4 | 0x40000000 * v267) ^ (v267 / 0x400000 | 1024 * v267));\n        v272 = ((v212 / 128 | 0x2000000 * v212) ^ v212 / 8 ^ (v212 / 0x40000 | 0x4000 * v212)) + v208 + v244 + ((v264 / 0x20000 | 0x8000 * v264) ^ v264 / 1024 ^ (v264 / 0x80000 | 0x2000 * v264));\n        v273 = v272 - 0x7b3787ec + v258 + (v270 & (v266 ^ v262) ^ v262) + ((v270 / 2048 | 0x200000 * v270) ^ (v270 / 64 | 0x4000000 * v270) ^ (v270 / 0x2000000 | 128 * v270));\n        v274 = v273 + v259;\n        v275 = v273 + ((v271 | v267) & v263 | v271 & v267) + ((v271 / 0x2000 | 0x80000 * v271) ^ (v271 / 4 | 0x40000000 * v271) ^ (v271 / 0x400000 | 1024 * v271));\n        v276 = ((v216 / 128 | 0x2000000 * v216) ^ v216 / 8 ^ (v216 / 0x40000 | 0x4000 * v216)) + v212 + v248 + ((v268 / 0x20000 | 0x8000 * v268) ^ v268 / 1024 ^ (v268 / 0x80000 | 0x2000 * v268));\n        v277 = v276 - 0x7338fdf8 + v262 + (v274 & (v270 ^ v266) ^ v266) + ((v274 / 2048 | 0x200000 * v274) ^ (v274 / 64 | 0x4000000 * v274) ^ (v274 / 0x2000000 | 128 * v274));\n        v278 = v277 + v263;\n        v279 = v277 + ((v275 | v271) & v267 | v275 & v271) + ((v275 / 0x2000 | 0x80000 * v275) ^ (v275 / 4 | 0x40000000 * v275) ^ (v275 / 0x400000 | 1024 * v275));\n        v280 = ((v220 / 128 | 0x2000000 * v220) ^ v220 / 8 ^ (v220 / 0x40000 | 0x4000 * v220)) + v216 + v252 + ((v272 / 0x20000 | 0x8000 * v272) ^ v272 / 1024 ^ (v272 / 0x80000 | 0x2000 * v272));\n        v281 = v280 - 0x6f410006 + v266 + (v278 & (v274 ^ v270) ^ v270) + ((v278 / 2048 | 0x200000 * v278) ^ (v278 / 64 | 0x4000000 * v278) ^ (v278 / 0x2000000 | 128 * v278));\n        v282 = v281 + v267;\n        v283 = v281 + ((v279 | v275) & v271 | v279 & v275) + ((v279 / 0x2000 | 0x80000 * v279) ^ (v279 / 4 | 0x40000000 * v279) ^ (v279 / 0x400000 | 1024 * v279));\n        v284 = ((v224 / 128 | 0x2000000 * v224) ^ v224 / 8 ^ (v224 / 0x40000 | 0x4000 * v224)) + v220 + v256 + ((v276 / 0x20000 | 0x8000 * v276) ^ v276 / 1024 ^ (v276 / 0x80000 | 0x2000 * v276));\n        v285 = v284 - 0x5baf9315 + v270 + (v282 & (v278 ^ v274) ^ v274) + ((v282 / 2048 | 0x200000 * v282) ^ (v282 / 64 | 0x4000000 * v282) ^ (v282 / 0x2000000 | 128 * v282));\n        v286 = v285 + v271;\n        v287 = v285 + ((v283 | v279) & v275 | v283 & v279) + ((v283 / 0x2000 | 0x80000 * v283) ^ (v283 / 4 | 0x40000000 * v283) ^ (v283 / 0x400000 | 1024 * v283));\n        v288 = ((v228 / 128 | 0x2000000 * v228) ^ v228 / 8 ^ (v228 / 0x40000 | 0x4000 * v228)) + v224 + v260 + ((v280 / 0x20000 | 0x8000 * v280) ^ v280 / 1024 ^ (v280 / 0x80000 | 0x2000 * v280));\n        v289 = v288 - 0x41065c09 + v274 + (v286 & (v282 ^ v278) ^ v278) + ((v286 / 2048 | 0x200000 * v286) ^ (v286 / 64 | 0x4000000 * v286) ^ (v286 / 0x2000000 | 128 * v286));\n        v290 = v289 + v275;\n        v291 = v289 + ((v287 | v283) & v279 | v287 & v283) + ((v287 / 0x2000 | 0x80000 * v287) ^ (v287 / 4 | 0x40000000 * v287) ^ (v287 / 0x400000 | 1024 * v287));\n        v292 = ((v232 / 128 | 0x2000000 * v232) ^ v232 / 8 ^ (v232 / 0x40000 | 0x4000 * v232)) + v228 + v264 + ((v284 / 0x20000 | 0x8000 * v284) ^ v284 / 1024 ^ (v284 / 0x80000 | 0x2000 * v284));\n        v12 += v291;\n        v10 += v283;\n        v11 += v287;\n        v293 = v290 + v47;\n        v294 = v286 + v48;\n        v295 = v292 - 0x398e870e + v278 + (v290 & (v286 ^ v282) ^ v282) + ((v290 / 2048 | 0x200000 * v290) ^ (v290 / 64 | 0x4000000 * v290) ^ (v290 / 0x2000000 | 128 * v290));\n        v296 = v279 + v46 + v295;\n        v14 = ((v291 | v287) & v283 | v291 & v287) + v14 + v295 + ((v291 / 0x2000 | 0x80000 * v291) ^ (v291 / 4 | 0x40000000 * v291) ^ (v291 / 0x400000 | 1024 * v291));\n        *(int32_t *)v5 = v14;\n        *(int32_t *)(v5 + 4) = v12;\n        result2 = v12;\n        *(int32_t *)(v5 + 8) = v11;\n        *(int32_t *)(v5 + 12) = v10;\n        *(int32_t *)(v5 + 20) = v293;\n        *(int32_t *)(v5 + 16) = v296;\n        *(int32_t *)(v5 + 24) = v294;\n        v9 += v282;\n        *(int32_t *)(v5 + 28) = v9;\n    }\n    // 0x405975\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405990",
            "funcStartAddr": "405990",
            "funcEndAddr": "405a51",
            "decompiledFuncCode": "int64_t function_405990(int64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 40); // 0x405994\n    int32_t * v2 = (int32_t *)(a1 + 32); // 0x40599b\n    int32_t * v3 = (int32_t *)(a1 + 36); // 0x40599e\n    int32_t v4 = *v3; // 0x40599e\n    uint32_t v5 = *v2 + (int32_t)v1; // 0x4059c6\n    *v2 = v5;\n    int32_t v6 = v4; // 0x4059d9\n    if (v1 > (int64_t)v5) {\n        // 0x4059db\n        v6 = v4 + 1;\n        *v3 = v6;\n    }\n    int64_t v7 = v1 < 56 ? 64 : 128; // 0x4059ac\n    int64_t v8 = v1 < 56 ? 60 : 124; // 0x4059bb\n    int64_t v9 = a1 + 48; // 0x4059e7\n    *(int32_t *)((v1 < 56 ? 56 : 120) + v9) = llvm_bswap_i32(8 * v6 | v5 / 0x20000000);\n    *(int32_t *)(v8 + v9) = v5 / 0x200000 % 256 | 0x8000000 * v5 | 2048 * v5 & 0xff0000 | v5 / 32 & 0xff00;\n    memcpy((int64_t *)(v1 + v9), (int64_t *)\"\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", (int32_t)(v7 - v1) - 8);\n    return function_403200(v9, v7, a1);\n}\n"
        },
        {
            "funcName": "function_405a60",
            "funcStartAddr": "405a60",
            "funcEndAddr": "405a82",
            "decompiledFuncCode": "int64_t function_405a60(int64_t a1, int64_t a2) {\n    // 0x405a60\n    function_405990(a1);\n    int64_t v1; // 0x405a60\n    return function_4031c0(a1, a2, v1);\n}\n"
        },
        {
            "funcName": "function_405a90",
            "funcStartAddr": "405a90",
            "funcEndAddr": "405ab2",
            "decompiledFuncCode": "int64_t function_405a90(int64_t a1, int64_t a2) {\n    // 0x405a90\n    function_405990(a1);\n    int64_t v1; // 0x405a90\n    return function_4031e0(a1, a2, v1);\n}\n"
        },
        {
            "funcName": "function_405ac0",
            "funcStartAddr": "405ac0",
            "funcEndAddr": "405dbe",
            "decompiledFuncCode": "int64_t function_405ac0(int64_t a1, uint64_t a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = v1 + 40; // 0x405ad7\n    int64_t * v3 = (int64_t *)v2; // 0x405ad7\n    int64_t v4 = *v3; // 0x405ad7\n    int64_t v5 = a1; // 0x405ade\n    int64_t v6 = a2; // 0x405ade\n    int64_t v7; // 0x405ac0\n    if (v4 != 0) {\n        int64_t v8 = v1 + 48; // 0x405c1e\n        uint64_t v9 = 128 - v4; // 0x405c22\n        int64_t v10 = v9 > a2 ? a2 : v9; // 0x405c2c\n        int64_t * dest_mem = memcpy((int64_t *)(v4 + v8), (int64_t *)a1, (int32_t)v10); // 0x405c36\n        uint64_t v11 = *v3 + v10; // 0x405c40\n        *v3 = v11;\n        int64_t v12 = (int64_t)dest_mem; // 0x405c4c\n        if (v11 >= 65) {\n            // 0x405cb0\n            function_403200(v8, v11 & -64, v1);\n            uint64_t v13 = *v3; // 0x405cc2\n            int64_t v14 = (v10 + v4 & -64) + v8; // 0x405ccb\n            uint64_t v15 = v13 % 64; // 0x405ccf\n            *v3 = v15;\n            if ((int32_t)v15 >= 8) {\n                int64_t v16 = v1 + 56 & -8; // 0x405d18\n                *(int64_t *)v8 = *(int64_t *)v14;\n                *(int64_t *)(v15 + v2) = *(int64_t *)(v15 + v14 - 8);\n                int64_t v17 = v8 - v16; // 0x405d30\n                int64_t v18 = v14 - v17; // 0x405d33\n                uint32_t v19 = (int32_t)(v15 + v17); // 0x405d3b\n                v12 = v18;\n                if (v19 >= 8) {\n                    int64_t v20 = 0;\n                    int64_t v21 = v20 + 8; // 0x405d4b\n                    *(int64_t *)(v20 + v16) = *(int64_t *)(v20 + v18);\n                    v12 = v18;\n                    while ((v19 & -8) > (int32_t)v21) {\n                        // 0x405d49\n                        v20 = v21 & 0xffffffff;\n                        v21 = v20 + 8;\n                        *(int64_t *)(v20 + v16) = *(int64_t *)(v20 + v18);\n                        v12 = v18;\n                    }\n                }\n            } else {\n                if ((v13 & 4) != 0) {\n                    // 0x405d5f\n                    *(int32_t *)v8 = *(int32_t *)v14;\n                    uint32_t v22 = *(int32_t *)(v15 + v14 - 4); // 0x405d68\n                    *(int32_t *)(v15 + v1 + 44) = v22;\n                    v12 = v22;\n                } else {\n                    // 0x405ce1\n                    v12 = v14;\n                    if (v15 != 0) {\n                        // 0x405ce9\n                        *(char *)v8 = *(char *)v14;\n                        v12 = v14;\n                        if ((v13 & 2) != 0) {\n                            uint16_t v23 = *(int16_t *)(v15 + v14 - 2); // 0x405cfc\n                            *(int16_t *)(v15 + v1 + 46) = v23;\n                            v12 = v23;\n                        }\n                    }\n                }\n            }\n        }\n        // 0x405c4e\n        v7 = v12;\n        v5 = v10 + a1;\n        v6 = a2 - v10;\n    }\n    uint64_t v24 = v6;\n    int64_t result = v7; // 0x405ae8\n    int64_t v25 = v5; // 0x405ae8\n    int64_t v26 = v24; // 0x405ae8\n    int64_t v27; // 0x405ac0\n    int64_t v28; // 0x405ac0\n    int64_t v29; // 0x405ac0\n    int64_t v30; // 0x405ac0\n    int64_t v31; // 0x405ac0\n    int64_t v32; // 0x405ac0\n    int64_t v33; // 0x405ac0\n    int64_t v34; // 0x405ac0\n    if (v24 < 64) {\n        goto lab_0x405bfc;\n    } else {\n        if (v5 % 4 == 0) {\n            int64_t v35 = v24 & -64; // 0x405bed\n            result = function_403200(v5, v35, v1);\n            v25 = v35 + v5;\n            v26 = v24 % 64;\n            goto lab_0x405bfc;\n        } else {\n            int64_t v36 = v1 + 48; // 0x405af7\n            if (v24 == 64) {\n                int64_t v37 = *v3; // 0x405b6b\n                v28 = v37 + v36;\n                v27 = v37;\n                v31 = v5;\n                v29 = 64;\n                v33 = v36;\n                goto lab_0x405c60;\n            } else {\n                int64_t v38 = (v24 - 1 & -64) + v5; // 0x405b19\n                int128_t v39 = __asm_movdqu(*(int128_t *)v5); // 0x405b20\n                int64_t v40 = v5 + 64; // 0x405b2f\n                __asm_movups(*(int128_t *)v36, v39);\n                __asm_movups(*(int128_t *)(v1 + 64), __asm_movdqu(*(int128_t *)(v5 + 16)));\n                __asm_movups(*(int128_t *)(v1 + 80), __asm_movdqu(*(int128_t *)(v5 + 32)));\n                __asm_movups(*(int128_t *)(v1 + 96), __asm_movdqu(*(int128_t *)(v5 + 48)));\n                function_403200(v36, 64, v1);\n                while (v40 != v38) {\n                    int64_t v41 = v40;\n                    v39 = __asm_movdqu(*(int128_t *)v41);\n                    v40 = v41 + 64;\n                    __asm_movups(*(int128_t *)v36, v39);\n                    __asm_movups(*(int128_t *)(v1 + 64), __asm_movdqu(*(int128_t *)(v41 + 16)));\n                    __asm_movups(*(int128_t *)(v1 + 80), __asm_movdqu(*(int128_t *)(v41 + 32)));\n                    __asm_movups(*(int128_t *)(v1 + 96), __asm_movdqu(*(int128_t *)(v41 + 48)));\n                    function_403200(v36, 64, v1);\n                }\n                // 0x405b5c\n                v34 = v36;\n                v30 = v24 - 64 - (v24 - 65 & -64);\n                v32 = v38;\n                goto lab_0x405b6b;\n            }\n        }\n    }\n  lab_0x405bfc:\n    // 0x405bfc\n    if (v26 == 0) {\n        // 0x405c05\n        return result;\n    }\n    // 0x405db1\n    v34 = v1 + 48;\n    v30 = v26;\n    v32 = v25;\n    goto lab_0x405b6b;\n  lab_0x405b6b:;\n    int64_t v42 = *v3; // 0x405b6b\n    int64_t v43 = v42 + v34; // 0x405b70\n    uint32_t v44 = (int32_t)v30; // 0x405b75\n    v28 = v43;\n    v27 = v42;\n    v31 = v32;\n    v29 = v30;\n    v33 = v34;\n    int64_t v45; // 0x405ac0\n    int64_t v46; // 0x405ac0\n    int64_t v47; // 0x405ac0\n    if (v44 >= 8) {\n        goto lab_0x405c60;\n    } else {\n        if ((v30 & 4) != 0) {\n            // 0x405d88\n            *(int32_t *)v43 = *(int32_t *)v32;\n            int64_t v48 = (v30 & 0xffffffff) - 4;\n            *(int32_t *)(v43 + v48) = *(int32_t *)(v48 + v32);\n            v45 = v42;\n            v46 = v30;\n            v47 = v34;\n        } else {\n            // 0x405b89\n            v45 = v42;\n            v46 = v30;\n            v47 = v34;\n            if (v44 != 0) {\n                // 0x405b8e\n                *(char *)v43 = *(char *)v32;\n                v45 = v42;\n                v46 = v30;\n                v47 = v34;\n                if ((v30 & 2) != 0) {\n                    int64_t v49 = (v30 & 0xffffffff) - 2;\n                    *(int16_t *)(v43 + v49) = *(int16_t *)(v49 + v32);\n                    v45 = v42;\n                    v46 = v30;\n                    v47 = v34;\n                }\n            }\n        }\n        goto lab_0x405b9e;\n    }\n  lab_0x405c60:;\n    int64_t v50 = v28 + 8 & -8; // 0x405c6a\n    *(int64_t *)v28 = *(int64_t *)v31;\n    int64_t v51 = (v29 & 0xffffffff) - 8;\n    *(int64_t *)(v51 + v28) = *(int64_t *)(v51 + v31);\n    int64_t v52 = v28 - v50; // 0x405c7e\n    uint32_t v53 = (int32_t)(v52 + v29); // 0x405c8a\n    v45 = v27;\n    v46 = v29;\n    v47 = v33;\n    if (v53 >= 8) {\n        int64_t v54 = 0;\n        int64_t v55 = v54 + 8; // 0x405c9a\n        *(int64_t *)(v54 + v50) = *(int64_t *)(v31 - v52 + v54);\n        v45 = v27;\n        v46 = v29;\n        v47 = v33;\n        while ((v53 & -8) > (int32_t)v55) {\n            // 0x405c98\n            v54 = v55 & 0xffffffff;\n            v55 = v54 + 8;\n            *(int64_t *)(v54 + v50) = *(int64_t *)(v31 - v52 + v54);\n            v45 = v27;\n            v46 = v29;\n            v47 = v33;\n        }\n    }\n    goto lab_0x405b9e;\n  lab_0x405b9e:;\n    int64_t v56 = v46 + v45; // 0x405b9e\n    int64_t dest_mem2 = v45; // 0x405ba5\n    int64_t v57 = v56; // 0x405ba5\n    if (v56 >= 64) {\n        int64_t v58 = v56 - 64; // 0x405bb2\n        function_403200(v47, 64, v1);\n        dest_mem2 = (int64_t)memcpy((int64_t *)v47, (int64_t *)(v1 + 112), (int32_t)v58);\n        v57 = v58;\n    }\n    // 0x405bcb\n    *v3 = v57;\n    return dest_mem2;\n}\n"
        },
        {
            "funcName": "function_405dc0",
            "funcStartAddr": "405dc0",
            "funcEndAddr": "405e3c",
            "decompiledFuncCode": "int64_t function_405dc0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = -0x4498517a95f61999; // bp-184, 0x405dd5\n    int64_t v2 = &v1; // 0x405dd9\n    function_405ac0(a1, a2, &v1);\n    function_405990(v2);\n    return function_4031c0(v2, a3, v2);\n}\n"
        },
        {
            "funcName": "function_405e40",
            "funcStartAddr": "405e40",
            "funcEndAddr": "405ebc",
            "decompiledFuncCode": "int64_t function_405e40(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x367cd507c1059ed8; // bp-184, 0x405e55\n    int64_t v2 = &v1; // 0x405e59\n    function_405ac0(a1, a2, &v1);\n    function_405990(v2);\n    return function_4031e0(v2, a3, v2);\n}\n"
        },
        {
            "funcName": "function_405ec0",
            "funcStartAddr": "405ec0",
            "funcEndAddr": "406015",
            "decompiledFuncCode": "int64_t function_405ec0(int64_t a1, int64_t a2) {\n    int64_t * mem = malloc(0x8048); // 0x405eda\n    if (mem == NULL) {\n        // 0x406000\n        return 1;\n    }\n    int64_t v1 = (int64_t)mem; // 0x405eda\n    int64_t v2; // 0x405ec0\n    int32_t v3 = v2;\n    int64_t v4 = -0x4498517a95f61999; // bp-216, 0x405efe\n    int32_t v5 = v3 & 16;\n    int64_t v6 = &v4;\n    int32_t v7; // 0x405ec0\n    int64_t v8; // 0x405f6c\n    while (true) {\n        int64_t v9 = 0;\n        int32_t v10 = fread_unlocked((int64_t *)(v9 + v1), 1, 0x8000 - (int32_t)v9, (struct _IO_FILE *)a1); // 0x405f67\n        v8 = v9 + (int64_t)v10;\n        while (v8 != 0x8000) {\n            if (v10 == 0) {\n                // break (via goto) -> 0x405f8a\n                goto lab_0x405f8a;\n            }\n            // 0x405f50\n            v7 = v5;\n            if (v5 != 0) {\n                goto lab_0x405f8f;\n            }\n            v9 = v8;\n            v10 = fread_unlocked((int64_t *)(v9 + v1), 1, 0x8000 - (int32_t)v9, (struct _IO_FILE *)a1);\n            v8 = v9 + (int64_t)v10;\n        }\n        // 0x405f78\n        function_403200(v1, 0x8000, v6);\n    }\n  lab_0x405f8a:;\n    int32_t v11 = v3 & 32; // 0x405f8a\n    v7 = v11;\n    if (v11 != 0) {\n        // 0x405fe0\n        free(mem);\n        return 1;\n    }\n  lab_0x405f8f:;\n    int64_t v12 = v7; // 0x405f92\n    if (v8 != 0) {\n        // 0x405fc8\n        function_405ac0(v1, v8, &v4);\n        v12 = v6;\n    }\n    // 0x405f94\n    function_405990(v6);\n    function_4031c0(v6, a2, v12);\n    free(mem);\n    return (int32_t)&g57 ^ (int32_t)&g57;\n}\n"
        },
        {
            "funcName": "function_406020",
            "funcStartAddr": "406020",
            "funcEndAddr": "406175",
            "decompiledFuncCode": "int64_t function_406020(int64_t a1, int64_t a2) {\n    int64_t * mem = malloc(0x8048); // 0x40603a\n    if (mem == NULL) {\n        // 0x406160\n        return 1;\n    }\n    int64_t v1 = (int64_t)mem; // 0x40603a\n    int64_t v2; // 0x406020\n    int32_t v3 = v2;\n    int64_t v4 = 0x367cd507c1059ed8; // bp-216, 0x40605e\n    int32_t v5 = v3 & 16;\n    int64_t v6 = &v4;\n    int32_t v7; // 0x406020\n    int64_t v8; // 0x4060cc\n    while (true) {\n        int64_t v9 = 0;\n        int32_t v10 = fread_unlocked((int64_t *)(v9 + v1), 1, 0x8000 - (int32_t)v9, (struct _IO_FILE *)a1); // 0x4060c7\n        v8 = v9 + (int64_t)v10;\n        while (v8 != 0x8000) {\n            if (v10 == 0) {\n                // break (via goto) -> 0x4060ea\n                goto lab_0x4060ea;\n            }\n            // 0x4060b0\n            v7 = v5;\n            if (v5 != 0) {\n                goto lab_0x4060ef;\n            }\n            v9 = v8;\n            v10 = fread_unlocked((int64_t *)(v9 + v1), 1, 0x8000 - (int32_t)v9, (struct _IO_FILE *)a1);\n            v8 = v9 + (int64_t)v10;\n        }\n        // 0x4060d8\n        function_403200(v1, 0x8000, v6);\n    }\n  lab_0x4060ea:;\n    int32_t v11 = v3 & 32; // 0x4060ea\n    v7 = v11;\n    if (v11 != 0) {\n        // 0x406140\n        free(mem);\n        return 1;\n    }\n  lab_0x4060ef:;\n    int64_t v12 = v7; // 0x4060f2\n    if (v8 != 0) {\n        // 0x406128\n        function_405ac0(v1, v8, &v4);\n        v12 = v6;\n    }\n    // 0x4060f4\n    function_405990(v6);\n    function_4031e0(v6, a2, v12);\n    free(mem);\n    return (int32_t)&g57 ^ (int32_t)&g57;\n}\n"
        },
        {
            "funcName": "function_406180",
            "funcStartAddr": "406180",
            "funcEndAddr": "406185",
            "decompiledFuncCode": "int64_t function_406180(void) {\n    // 0x406180\n    int64_t fd; // 0x406180\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_406190",
            "funcStartAddr": "406190",
            "funcEndAddr": "4061b1",
            "decompiledFuncCode": "int64_t function_406190(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x406190\n    if (stream == 0) {\n        // 0x4061b0\n        int64_t result; // 0x406190\n        return result;\n    }\n    // 0x406195\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_4061c0",
            "funcStartAddr": "4061c0",
            "funcEndAddr": "406253",
            "decompiledFuncCode": "int64_t function_4061c0(int64_t file_path, int64_t * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, (char *)mode); // 0x4061c7\n    int64_t result = (int64_t)file; // 0x4061c7\n    if (file == NULL) {\n        // 0x4061e1\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x4061d7\n    if (v1 >= 3) {\n        // 0x4061e1\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_407ea0((int64_t)v1, v2); // 0x4061fa\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x406238\n        function_4086e0(result, v2);\n        // 0x4061e1\n        return 0;\n    }\n    // 0x4061fe\n    if ((int32_t)function_4086e0(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, (char *)mode); // 0x406210\n        if (v4 != NULL) {\n            // 0x4061e1\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x40621d\n    close(fd);\n    // 0x4061e1\n    return 0;\n}\n"
        },
        {
            "funcName": "function_406260",
            "funcStartAddr": "406260",
            "funcEndAddr": "4062f9",
            "decompiledFuncCode": "int64_t function_406260(int64_t str) {\n    // 0x406260\n    if (str == 0) {\n        // 0x4062d9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g31);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40626e\n    int64_t result = (int64_t)found_char_pos; // 0x40626e\n    if (found_char_pos == NULL) {\n        // 0x4062c9\n        g44 = str;\n        g30 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x406278\n    if (v1 - str < 7) {\n        // 0x4062c9\n        g44 = str;\n        g30 = str;\n        return result;\n    }\n    // 0x406288\n    bool v2; // 0x406260\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x406260\n    int64_t v5 = result - 6; // 0x406260\n    int64_t v6 = 7; // 0x406296\n    unsigned char v7 = *(char *)v5; // 0x406296\n    char v8 = *(char *)v4; // 0x406296\n    char v9 = v8; // 0x406296\n    bool v10 = false; // 0x406296\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4062a0\n    int64_t v13 = v1; // 0x4062a0\n    int64_t v14 = 3; // 0x4062a0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4062c9\n        g44 = str;\n        g30 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4062b2\n    char v16 = *(char *)v12; // 0x4062b2\n    char v17 = v16; // 0x4062b2\n    bool v18 = false; // 0x4062b2\n    while (v15 == v16) {\n        // 0x4062a2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4062bc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4062be\n        v20 = result + 4;\n        g27 = v20;\n    }\n    // 0x4062c9\n    g44 = v20;\n    g30 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406300",
            "funcStartAddr": "406300",
            "funcEndAddr": "4063f2",
            "decompiledFuncCode": "int64_t function_406300(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x406314\n    int64_t result = (int64_t)v1; // 0x406314\n    if (result != a1) {\n        // 0x406321\n        return result;\n    }\n    int64_t v2 = function_409850(); // 0x406330\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4063e6\n    if (v3 == 85) {\n        // 0x406340\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4063d8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x40636e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x40637b\n        // 0x406321\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4063d8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x4063bd\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x4063ca\n    // 0x406321\n    return result4;\n}\n"
        },
        {
            "funcName": "function_406400",
            "funcStartAddr": "406400",
            "funcEndAddr": "406457",
            "decompiledFuncCode": "int64_t function_406400(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x406400\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x406448\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406457",
            "funcStartAddr": "406457",
            "funcEndAddr": "407621",
            "decompiledFuncCode": "int64_t function_406457(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4064a1\n    int64_t v3 = 0; // 0x4064a1\n    int64_t v4; // 0x406457\n    int64_t v5; // 0x406457\n    int64_t v6; // 0x406457\n    int64_t v7; // 0x406457\n    int64_t v8; // 0x406457\n    int64_t v9; // 0x406457\n    int64_t v10; // 0x406457\n    int64_t v11; // 0x406457\n    int64_t v12; // 0x406457\n    int64_t v13; // 0x406457\n    int64_t v14; // 0x406457\n    int64_t v15; // 0x406457\n    int64_t v16; // 0x406457\n    int64_t v17; // 0x406457\n    int64_t v18; // 0x406457\n    int64_t result; // 0x406457\n    int64_t v19; // 0x406457\n    int32_t wc; // bp+132, 0x406457\n    int64_t ps; // bp+136, 0x406457\n    char v20; // 0x406a10\n    int64_t v21; // 0x406a10\n    int64_t v22; // 0x406db8\n    int64_t v23; // 0x406457\n    int64_t v24; // 0x406dd7\n    int32_t v25; // 0x406457\n    while (true) {\n      lab_0x4064a8_2:\n        // 0x4064a8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x406457\n        int64_t v27; // 0x4064dc\n        while (true) {\n          lab_0x4064a8:\n            // 0x4064a8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4064b3\n            if (v15 == -1) {\n                // 0x4064b5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4064c3\n            if (v28) {\n                // break (via goto) -> 0x406c28\n                goto lab_0x406c28;\n            }\n            // 0x4064cc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g56 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x406abb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x406601;\n                    }\n                    // 0x406edd\n                    v26 = v5 + 1;\n                    goto lab_0x4064a8;\n                }\n                case 7: {\n                    goto lab_0x406601;\n                }\n                case 8: {\n                    goto lab_0x406601;\n                }\n                case 9: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x406601;\n                }\n                case 12: {\n                    goto lab_0x406601;\n                }\n                case 13: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x4065cd;\n                }\n                case 36: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x406601;\n                }\n                case 38: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x406601;\n                }\n                case 44: {\n                    goto lab_0x406601;\n                }\n                case 45: {\n                    goto lab_0x406601;\n                }\n                case 46: {\n                    goto lab_0x406601;\n                }\n                case 47: {\n                    goto lab_0x406601;\n                }\n                case 48: {\n                    goto lab_0x406601;\n                }\n                case 49: {\n                    goto lab_0x406601;\n                }\n                case 50: {\n                    goto lab_0x406601;\n                }\n                case 51: {\n                    goto lab_0x406601;\n                }\n                case 52: {\n                    goto lab_0x406601;\n                }\n                case 53: {\n                    goto lab_0x406601;\n                }\n                case 54: {\n                    goto lab_0x406601;\n                }\n                case 55: {\n                    goto lab_0x406601;\n                }\n                case 56: {\n                    goto lab_0x406601;\n                }\n                case 57: {\n                    goto lab_0x406601;\n                }\n                case 58: {\n                    goto lab_0x406601;\n                }\n                case 59: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x406601;\n                }\n                case 66: {\n                    goto lab_0x406601;\n                }\n                case 67: {\n                    goto lab_0x406601;\n                }\n                case 68: {\n                    goto lab_0x406601;\n                }\n                case 69: {\n                    goto lab_0x406601;\n                }\n                case 70: {\n                    goto lab_0x406601;\n                }\n                case 71: {\n                    goto lab_0x406601;\n                }\n                case 72: {\n                    goto lab_0x406601;\n                }\n                case 73: {\n                    goto lab_0x406601;\n                }\n                case 74: {\n                    goto lab_0x406601;\n                }\n                case 75: {\n                    goto lab_0x406601;\n                }\n                case 76: {\n                    goto lab_0x406601;\n                }\n                case 77: {\n                    goto lab_0x406601;\n                }\n                case 78: {\n                    goto lab_0x406601;\n                }\n                case 79: {\n                    goto lab_0x406601;\n                }\n                case 80: {\n                    goto lab_0x406601;\n                }\n                case 81: {\n                    goto lab_0x406601;\n                }\n                case 82: {\n                    goto lab_0x406601;\n                }\n                case 83: {\n                    goto lab_0x406601;\n                }\n                case 84: {\n                    goto lab_0x406601;\n                }\n                case 85: {\n                    goto lab_0x406601;\n                }\n                case 86: {\n                    goto lab_0x406601;\n                }\n                case 87: {\n                    goto lab_0x406601;\n                }\n                case 88: {\n                    goto lab_0x406601;\n                }\n                case 89: {\n                    goto lab_0x406601;\n                }\n                case 90: {\n                    goto lab_0x406601;\n                }\n                case 91: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x406601;\n                }\n                case 94: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x406601;\n                }\n                case 96: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x406601;\n                }\n                case 98: {\n                    goto lab_0x406601;\n                }\n                case 99: {\n                    goto lab_0x406601;\n                }\n                case 100: {\n                    goto lab_0x406601;\n                }\n                case 101: {\n                    goto lab_0x406601;\n                }\n                case 102: {\n                    goto lab_0x406601;\n                }\n                case 103: {\n                    goto lab_0x406601;\n                }\n                case 104: {\n                    goto lab_0x406601;\n                }\n                case 105: {\n                    goto lab_0x406601;\n                }\n                case 106: {\n                    goto lab_0x406601;\n                }\n                case 107: {\n                    goto lab_0x406601;\n                }\n                case 108: {\n                    goto lab_0x406601;\n                }\n                case 109: {\n                    goto lab_0x406601;\n                }\n                case 110: {\n                    goto lab_0x406601;\n                }\n                case 111: {\n                    goto lab_0x406601;\n                }\n                case 112: {\n                    goto lab_0x406601;\n                }\n                case 113: {\n                    goto lab_0x406601;\n                }\n                case 114: {\n                    goto lab_0x406601;\n                }\n                case 115: {\n                    goto lab_0x406601;\n                }\n                case 116: {\n                    goto lab_0x406601;\n                }\n                case 117: {\n                    goto lab_0x406601;\n                }\n                case 118: {\n                    goto lab_0x406601;\n                }\n                case 119: {\n                    goto lab_0x406601;\n                }\n                case 120: {\n                    goto lab_0x406601;\n                }\n                case 121: {\n                    goto lab_0x406601;\n                }\n                case 122: {\n                    goto lab_0x406601;\n                }\n                case 123: {\n                    goto lab_0x4065a5;\n                }\n                case 124: {\n                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4065a5;\n                }\n                case 126: {\n                    goto lab_0x4065cd;\n                }\n                default: {\n                    goto lab_0x4069a5;\n                }\n            }\n        }\n      lab_0x4069a5:\n        if (v23 != 1) {\n            // 0x406d10\n            ps = 0;\n            int64_t len = v15; // 0x406d20\n            if (v15 == -1) {\n                // 0x406d22\n                len = strlen((char *)str);\n            }\n            // 0x406d4e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x406daf:\n                // 0x406daf\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x406db4\n                int64_t v30 = v29 + str;\n                v24 = function_409710(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40732a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40732a_2;\n                    }\n                    case -2: {\n                        // 0x40740d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x407447\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40744a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x407457\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x407450\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40732a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40732a_2;\n                    }\n                    case 1: {\n                        goto lab_0x406d80;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x406e2c\n                        char v34 = *(char *)v33; // 0x406e3d\n                        unsigned char v35; // 0x406457\n                        if (v34 < 125) {\n                            // 0x406e48\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x406e5f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x406e30\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x406e3d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x406e48\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x406e5f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x406e30\n                            v33++;\n                        }\n                        goto lab_0x406d80;\n                    }\n                }\n            }\n            goto lab_0x40732a_2;\n        } else {\n            // 0x4069f4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x406601;\n        }\n    }\n  lab_0x406c28:\n    // 0x406c28\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40752a\n        if (v8 > result) {\n            // 0x407533\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x406857\n        return result;\n    }\n    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x406601:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x406610\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40681a_2;\n        }\n    }\n    int64_t v39 = result; // 0x406711\n    char v40 = v20; // 0x406711\n    int64_t v41 = v38; // 0x406711\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x406711\n    int64_t v43 = v36; // 0x406711\n    goto lab_0x40668d;\n  lab_0x40681a_2:\n    // 0x406857\n    return function_406400(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40732a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x406601;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x406efe\n        int64_t v50 = v5 + 1; // 0x406fe1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x406fe8\n        char v52 = v20; // 0x406fe8\n        int64_t v53 = result; // 0x406fe8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x406fb1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x406fb5\n            int64_t v56 = v54 + 1; // 0x406fba\n            int64_t v57 = v51 + 1; // 0x406fe1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x406fac\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x406fb1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x406fb5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40668d;\n    }\n  lab_0x406d80:\n    // 0x406d80\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x406d9f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x406da2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40732a\n        goto lab_0x40732a_2;\n    }\n    goto lab_0x406daf;\n  lab_0x4065cd:\n    // 0x4065cd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40681a_2;\n    }\n    goto lab_0x406601;\n  lab_0x4065a5:;\n    bool v60 = v15 == 1; // 0x4065b0\n    if (v15 == -1) {\n        // 0x4065b2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4065be\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x406601;\n    } else {\n        goto lab_0x4065cd;\n    }\n  lab_0x40668d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x406692\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x406696\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4064a8_2;\n}\n"
        },
        {
            "funcName": "function_407630",
            "funcStartAddr": "407630",
            "funcEndAddr": "4077ce",
            "decompiledFuncCode": "int64_t function_407630(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x407632\n    int32_t * v3 = __errno_location(); // 0x40764c\n    int64_t v4 = (int64_t)g20; // 0x407651\n    int32_t v5 = *v3; // 0x40765b\n    int64_t v6 = v4; // 0x407671\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4077c9\n            function_4086a0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x407680\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x407687\n        int64_t v9; // 0x407630\n        if (g20 == &g21) {\n            int64_t v10 = function_4084b0(0, v8); // 0x4077aa\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x4077af\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4084b0(v4, v8); // 0x40769b\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x4076aa\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x4076aa\n        int32_t v14 = v7; // 0x4076b1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4076e1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4076eb\n    int64_t * v17 = (int64_t *)v15; // 0x4076ee\n    uint64_t v18 = *v17; // 0x4076ee\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4076f1\n    int64_t result = *v19; // 0x4076f1\n    int64_t v20; // 0x407630\n    uint64_t v21 = function_406400(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x407714\n    if (v18 > v21) {\n        // 0x40778b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x407727\n    *v17 = v22;\n    if (result != (int64_t)&g45) {\n        // 0x407737\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_408450(v22); // 0x407751\n    *v19 = result2;\n    int64_t v23; // 0x407630\n    function_406400(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40778b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4077d0",
            "funcStartAddr": "4077d0",
            "funcEndAddr": "407804",
            "decompiledFuncCode": "int64_t function_4077d0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4077d7\n    int64_t result = function_408650(a1 == 0 ? (int64_t)&g46 : a1, 56); // 0x4077f6\n    return result;\n}\n"
        },
        {
            "funcName": "function_407810",
            "funcStartAddr": "407810",
            "funcEndAddr": "40781f",
            "decompiledFuncCode": "int64_t function_407810(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g46 : a1); // 0x40781c\n    return result;\n}\n"
        },
        {
            "funcName": "function_407820",
            "funcStartAddr": "407820",
            "funcEndAddr": "40782f",
            "decompiledFuncCode": "int64_t function_407820(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 : a1; // 0x407828\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g46;\n}\n"
        },
        {
            "funcName": "function_407830",
            "funcStartAddr": "407830",
            "funcEndAddr": "407863",
            "decompiledFuncCode": "int64_t function_407830(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 + 8 : a1 + 8; // 0x407849\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40784e\n    uint32_t v3 = *v2; // 0x40784e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x407852\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_407870",
            "funcStartAddr": "407870",
            "funcEndAddr": "407883",
            "decompiledFuncCode": "int64_t function_407870(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g46 + 4 : a1 + 4); // 0x40787c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_407890",
            "funcStartAddr": "407890",
            "funcEndAddr": "4078bb",
            "decompiledFuncCode": "int64_t function_407890(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 : a1; // 0x407898\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4078b5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4078ac\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g46;\n}\n"
        },
        {
            "funcName": "function_4078c0",
            "funcStartAddr": "4078c0",
            "funcEndAddr": "407932",
            "decompiledFuncCode": "int64_t function_4078c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g46 : a5; // 0x4078e2\n    int32_t * v2 = __errno_location(); // 0x4078eb\n    uint32_t v3 = *(int32_t *)v1; // 0x40790b\n    int64_t result = function_406400(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40791a\n    return result;\n}\n"
        },
        {
            "funcName": "function_407940",
            "funcStartAddr": "407940",
            "funcEndAddr": "407a21",
            "decompiledFuncCode": "int64_t function_407940(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g46 : a4; // 0x407962\n    int32_t * v2 = __errno_location(); // 0x407968\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x407987\n    int32_t * v4 = (int32_t *)v1; // 0x40798a\n    int64_t v5 = function_406400(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4079a5\n    int64_t v6 = v5 + 1; // 0x4079aa\n    int64_t result = function_408450(v6); // 0x4079bf\n    function_406400(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x407a04\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x407a0d\n    return result;\n}\n"
        },
        {
            "funcName": "function_407a30",
            "funcStartAddr": "407a30",
            "funcEndAddr": "407a3a",
            "decompiledFuncCode": "int64_t function_407a30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407a30\n    return function_407940(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_407a40",
            "funcStartAddr": "407a40",
            "funcEndAddr": "407ad5",
            "decompiledFuncCode": "int64_t function_407a40(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x407a40\n    int64_t v2 = v1; // 0x407a40\n    int64_t v3 = v2; // 0x407a54\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x407a73\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g57;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x407a70\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g57;\n        }\n    }\n    int64_t v6 = v3; // 0x407a8d\n    if (g21 != 0x60e320) {\n        // 0x407a8f\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g45;\n        v6 = &g57;\n    }\n    int64_t result = v6; // 0x407ab1\n    if (g20 != &g21) {\n        // 0x407ab3\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g57;\n    }\n    // 0x407ac6\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407ae0",
            "funcStartAddr": "407ae0",
            "funcEndAddr": "407af1",
            "decompiledFuncCode": "int64_t function_407ae0(void) {\n    // 0x407ae0\n    int64_t v1; // 0x407ae0\n    return function_407630(v1, v1, -1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_407b00",
            "funcStartAddr": "407b00",
            "funcEndAddr": "407b0a",
            "decompiledFuncCode": "int64_t function_407b00(void) {\n    // 0x407b00\n    int64_t v1; // 0x407b00\n    return function_407630(v1, v1, v1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_407b10",
            "funcStartAddr": "407b10",
            "funcEndAddr": "407b26",
            "decompiledFuncCode": "int64_t function_407b10(int64_t a1) {\n    // 0x407b10\n    return function_407630(0, a1, -1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_407b30",
            "funcStartAddr": "407b30",
            "funcEndAddr": "407b42",
            "decompiledFuncCode": "int64_t function_407b30(int64_t a1, int64_t a2) {\n    // 0x407b30\n    return function_407630(0, a1, a2, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_407b50",
            "funcStartAddr": "407b50",
            "funcEndAddr": "407bb8",
            "decompiledFuncCode": "int64_t function_407b50(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x407b60\n    return function_407630((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_407bc0",
            "funcStartAddr": "407bc0",
            "funcEndAddr": "407c24",
            "decompiledFuncCode": "int64_t function_407bc0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x407bd0\n    return function_407630((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_407c30",
            "funcStartAddr": "407c30",
            "funcEndAddr": "407c3c",
            "decompiledFuncCode": "int64_t function_407c30(int64_t a1, int64_t a2) {\n    // 0x407c30\n    return function_407b50(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_407c40",
            "funcStartAddr": "407c40",
            "funcEndAddr": "407c4f",
            "decompiledFuncCode": "int64_t function_407c40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407c40\n    return function_407bc0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_407c50",
            "funcStartAddr": "407c50",
            "funcEndAddr": "407cc0",
            "decompiledFuncCode": "int64_t function_407c50(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g46); // 0x407c5d\n    int128_t v2 = __asm_movdqa(g47); // 0x407c65\n    int128_t v3 = __asm_movdqa(g48); // 0x407c6d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x407c82\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x407c98\n    uint32_t v6 = *v5; // 0x407c98\n    uint32_t v7 = (int32_t)a3 % 32; // 0x407c9d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_407630(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_407cc0",
            "funcStartAddr": "407cc0",
            "funcEndAddr": "407ccd",
            "decompiledFuncCode": "int64_t function_407cc0(int64_t a1, int64_t a2) {\n    // 0x407cc0\n    return function_407c50(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_407cd0",
            "funcStartAddr": "407cd0",
            "funcEndAddr": "407ce1",
            "decompiledFuncCode": "int64_t function_407cd0(int64_t a1) {\n    // 0x407cd0\n    return function_407c50(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_407cf0",
            "funcStartAddr": "407cf0",
            "funcEndAddr": "407cfa",
            "decompiledFuncCode": "int64_t function_407cf0(void) {\n    // 0x407cf0\n    int64_t v1; // 0x407cf0\n    return function_407c50(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_407d00",
            "funcStartAddr": "407d00",
            "funcEndAddr": "407d6e",
            "decompiledFuncCode": "int64_t function_407d00(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x407d1a\n    return function_407630((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_407d70",
            "funcStartAddr": "407d70",
            "funcEndAddr": "407ddc",
            "decompiledFuncCode": "int64_t function_407d70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g46); // 0x407d77\n    int128_t v2 = __asm_movdqa(g47); // 0x407d7f\n    int128_t v3 = __asm_movdqa(g48); // 0x407d87\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x407da9\n    if (a2 == 0 || a3 == 0) {\n        // 0x407dd7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x407dba\n    return function_407630(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_407de0",
            "funcStartAddr": "407de0",
            "funcEndAddr": "407de9",
            "decompiledFuncCode": "int64_t function_407de0(void) {\n    // 0x407de0\n    int64_t v1; // 0x407de0\n    return function_407d70(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_407df0",
            "funcStartAddr": "407df0",
            "funcEndAddr": "407e07",
            "decompiledFuncCode": "int64_t function_407df0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407df0\n    return function_407d70(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_407e10",
            "funcStartAddr": "407e10",
            "funcEndAddr": "407e23",
            "decompiledFuncCode": "int64_t function_407e10(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x407e10\n    return function_407d70(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_407e30",
            "funcStartAddr": "407e30",
            "funcEndAddr": "407e3a",
            "decompiledFuncCode": "int64_t function_407e30(void) {\n    // 0x407e30\n    int64_t v1; // 0x407e30\n    return function_407630(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_407e40",
            "funcStartAddr": "407e40",
            "funcEndAddr": "407e52",
            "decompiledFuncCode": "int64_t function_407e40(int64_t a1, int64_t a2) {\n    // 0x407e40\n    return function_407630(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_407e60",
            "funcStartAddr": "407e60",
            "funcEndAddr": "407e71",
            "decompiledFuncCode": "int64_t function_407e60(void) {\n    // 0x407e60\n    int64_t v1; // 0x407e60\n    return function_407630(v1, v1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_407e80",
            "funcStartAddr": "407e80",
            "funcEndAddr": "407e96",
            "decompiledFuncCode": "int64_t function_407e80(int64_t a1) {\n    // 0x407e80\n    return function_407630(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_407ea0",
            "funcStartAddr": "407ea0",
            "funcEndAddr": "407eae",
            "decompiledFuncCode": "int64_t function_407ea0(int64_t a1, int64_t a2) {\n    // 0x407ea0\n    int64_t v1; // 0x407ea0\n    return function_408760(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_407eb0",
            "funcStartAddr": "407eb0",
            "funcEndAddr": "40828d",
            "decompiledFuncCode": "int64_t function_407eb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x407f48\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x407ecc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x407ee6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x407f2b\n    if (a6 < 10) {\n        // 0x407f3a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x408032\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_408290",
            "funcStartAddr": "408290",
            "funcEndAddr": "4082b0",
            "decompiledFuncCode": "int64_t function_408290(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408290\n    if (a5 == 0) {\n        // 0x4082ab\n        return function_407eb0(a1, a2, a3, a4, a5, 0, (int64_t)&g57);\n    }\n    int64_t v1 = 0; // 0x408297\n    v1++;\n    int64_t v2 = v1; // 0x4082a9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4082a0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4082ab\n    return function_407eb0(a1, a2, a3, a4, a5, v2, (int64_t)&g57);\n}\n"
        },
        {
            "funcName": "function_4082b0",
            "funcStartAddr": "4082b0",
            "funcEndAddr": "408310",
            "decompiledFuncCode": "int64_t function_4082b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4082b0\n    int64_t v3 = &v2; // 0x4082b0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4082e3\n    int64_t v6; // 0x4082cd\n    int64_t * v7; // 0x4082eb\n    int64_t v8; // 0x4082eb\n    int64_t v9; // 0x4082f7\n    if (v5 < 48) {\n        // 0x4082c0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x408303\n            break;\n        }\n    } else {\n        // 0x4082eb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x408303\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4082e1\n    while (v4 != 9) {\n        // 0x4082d9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4082c0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x408303\n                break;\n            }\n        } else {\n            // 0x4082eb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x408303\n                break;\n            }\n        }\n        // 0x4082d9\n        v10 = 10;\n    }\n    // 0x408303\n    return function_407eb0(a1, a2, a3, a4, v3, v10, (int64_t)&g57);\n}\n"
        },
        {
            "funcName": "function_408310",
            "funcStartAddr": "408310",
            "funcEndAddr": "4083cc",
            "decompiledFuncCode": "int64_t function_408310(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x408310\n    int64_t v1; // bp-168, 0x408310\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x408310\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x408310\n    int64_t v8; // 0x408310\n    int64_t v9; // bp-56, 0x408310\n    int64_t v10; // 0x408375\n    int64_t v11; // 0x408399\n    if ((int32_t)v6 < 48) {\n        // 0x408360\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4083b0\n            break;\n        }\n    } else {\n        // 0x408392\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4083b0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40838a\n    int64_t v13 = 10; // 0x40838a\n    while (v5 != 9) {\n        // 0x40838c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x408360\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4083b0\n                break;\n            }\n        } else {\n            // 0x408392\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4083b0\n                break;\n            }\n        }\n        // 0x408382\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4083b0\n    int64_t v14; // bp-136, 0x408310\n    int64_t result = function_407eb0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g57); // 0x4083bf\n    return result;\n}\n"
        },
        {
            "funcName": "function_4083d0",
            "funcStartAddr": "4083d0",
            "funcEndAddr": "408444",
            "decompiledFuncCode": "int64_t function_4083d0(int64_t a1) {\n    // 0x4083d0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x408433\n    return fputs_unlocked(v1, g28);\n}\n"
        },
        {
            "funcName": "function_408450",
            "funcStartAddr": "408450",
            "funcEndAddr": "40846a",
            "decompiledFuncCode": "int64_t function_408450(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x408454\n    if (size != 0 != (mem == NULL)) {\n        // 0x408463\n        return (int64_t)mem;\n    }\n    // 0x408465\n    function_4086a0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408470",
            "funcStartAddr": "408470",
            "funcEndAddr": "408491",
            "decompiledFuncCode": "int64_t function_408470(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x408473\n    int64_t v2 = v1; // 0x408473\n    if (v2 < 0) {\n        // 0x40848b\n        function_4086a0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x408489\n        return function_408450(v2);\n    }\n    // 0x40848b\n    function_4086a0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4084a0",
            "funcStartAddr": "4084a0",
            "funcEndAddr": "4084a2",
            "decompiledFuncCode": "int64_t function_4084a0(void) {\n    // 0x4084a0\n    int64_t v1; // 0x4084a0\n    return function_408450(v1);\n}\n"
        },
        {
            "funcName": "function_4084b0",
            "funcStartAddr": "4084b0",
            "funcEndAddr": "4084e6",
            "decompiledFuncCode": "int64_t function_4084b0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4084d8\n        free(v1);\n        return (int32_t)&g57 ^ (int32_t)&g57;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4084c1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4084d0\n        return (int64_t)mem;\n    }\n    // 0x4084e1\n    function_4086a0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4084f0",
            "funcStartAddr": "4084f0",
            "funcEndAddr": "408511",
            "decompiledFuncCode": "int64_t function_4084f0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4084f3\n    int64_t v2 = v1; // 0x4084f3\n    if (v2 < 0) {\n        // 0x40850b\n        function_4086a0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x408509\n        return function_4084b0(a1, v2);\n    }\n    // 0x40850b\n    function_4086a0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408520",
            "funcStartAddr": "408520",
            "funcEndAddr": "4085a6",
            "decompiledFuncCode": "int64_t function_408520(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40857b\n            function_4086a0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4084b0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x408563\n    if (a2 == 0) {\n        // 0x408588\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x408568\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40857b\n        function_4086a0(a1);\n        // UNREACHABLE\n    }\n    // 0x40854a\n    *(int64_t *)a2 = v2;\n    return function_4084b0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4085b0",
            "funcStartAddr": "4085b0",
            "funcEndAddr": "408600",
            "decompiledFuncCode": "int64_t function_4085b0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4085b0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4085fa\n            function_4086a0(a1);\n            // UNREACHABLE\n        }\n        // 0x4085d2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4084b0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4085e5\n        *(int64_t *)a2 = 128;\n        return function_4084b0(0, 128);\n    }\n    // 0x4085f8\n    if (a2 < 0) {\n        // 0x4085fa\n        function_4086a0(a1);\n        // UNREACHABLE\n    }\n    // 0x4085d2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4084b0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_408600",
            "funcStartAddr": "408600",
            "funcEndAddr": "408617",
            "decompiledFuncCode": "int64_t function_408600(int64_t a1, int64_t a2) {\n    // 0x408600\n    return (int64_t)memset((int64_t *)function_408450(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_408620",
            "funcStartAddr": "408620",
            "funcEndAddr": "40864e",
            "decompiledFuncCode": "int64_t function_408620(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x408627\n    if ((int64_t)v1 < 0) {\n        // 0x408649\n        function_4086a0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x408649\n        function_4086a0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40863a\n    if (mem != NULL) {\n        // 0x408644\n        return (int64_t)mem;\n    }\n    // 0x408649\n    function_4086a0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408650",
            "funcStartAddr": "408650",
            "funcEndAddr": "408678",
            "decompiledFuncCode": "int64_t function_408650(int64_t a1, int64_t a2) {\n    int64_t v1 = function_408450(a2); // 0x40865f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_408680",
            "funcStartAddr": "408680",
            "funcEndAddr": "408693",
            "decompiledFuncCode": "int64_t function_408680(int64_t str) {\n    // 0x408680\n    return function_408650(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4086a0",
            "funcStartAddr": "4086a0",
            "funcEndAddr": "4086d1",
            "decompiledFuncCode": "int64_t function_4086a0(int64_t a1) {\n    // 0x4086a0\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4086e0",
            "funcStartAddr": "4086e0",
            "funcEndAddr": "40875b",
            "decompiledFuncCode": "int64_t function_4086e0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4086e7\n    if (fileno(stream) < 0) {\n        // 0x408747\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4086fa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40872b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x408747\n            return fclose(stream);\n        }\n    }\n    // 0x4086fc\n    if ((int32_t)function_4088a0(a1, v1) == 0) {\n        // 0x408747\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x408708\n    int32_t v3 = *v2; // 0x408710\n    int64_t result = fclose(stream); // 0x40871e\n    if (v3 != 0) {\n        // 0x408750\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x408720\n    return result;\n}\n"
        },
        {
            "funcName": "function_408760",
            "funcStartAddr": "408760",
            "funcEndAddr": "408895",
            "decompiledFuncCode": "int64_t function_408760(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x408840\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40879c\n    int64_t v2; // 0x408760\n    if (g49 < 0) {\n        int64_t v3 = function_408760(fd, 0, v1, a4); // 0x4087e4\n        int64_t v4 = v3 & 0xffffffff; // 0x4087e9\n        if ((int32_t)v3 < 0) {\n            // 0x4087d0\n            return v4 & 0xffffffff;\n        }\n        // 0x4087ef\n        v2 = v4;\n        if (g49 != -1) {\n            // 0x4087d0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x4087b7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x4087c6\n            g49 = 1;\n            // 0x4087d0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_408760(fd & 0xffffffff, 0, v1, a4); // 0x408877\n        int64_t v7 = v6 & 0xffffffff; // 0x40887c\n        if ((int32_t)v6 < 0) {\n            // 0x4087d0\n            return v7 & 0xffffffff;\n        }\n        // 0x408886\n        g49 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x4087ff\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40880a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x4087d0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x408822\n    close(fd2);\n    // 0x4087d0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4088a0",
            "funcStartAddr": "4088a0",
            "funcEndAddr": "4088e0",
            "decompiledFuncCode": "int64_t function_4088a0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x4088ba\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x4088ba\n        return fflush(stream);\n    }\n    // 0x4088c8\n    function_4088e0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4088e0",
            "funcStartAddr": "4088e0",
            "funcEndAddr": "408937",
            "decompiledFuncCode": "int64_t function_4088e0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4088e0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4088ea\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40891b\n    int64_t result = -1; // 0x408924\n    if (v1 != -1) {\n        // 0x408926\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x408932\n    return result;\n}\n"
        },
        {
            "funcName": "function_408940",
            "funcStartAddr": "408940",
            "funcEndAddr": "408a1f",
            "decompiledFuncCode": "int64_t function_408940(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40894c\n    uint32_t v2 = *v1; // 0x40894c\n    int64_t v3 = a2 & 0xffffffff; // 0x408951\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x408954\n    uint64_t v5 = (int64_t)*v4; // 0x408954\n    int64_t v6; // 0x4089c2\n    if (v3 <= v5) {\n      lab_0x4089bc_2:\n        // 0x4089bc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x408942\n    int64_t v8 = v2; // 0x408940\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4089bc\n        goto lab_0x4089bc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x408978\n    int64_t v17; // 0x408986\n    int64_t * v18; // 0x4089a0\n    int64_t * v19; // 0x4089a3\n    int64_t v20; // 0x4089ae\n    int64_t v21; // 0x408986\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x408983\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x4089a0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4089b7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4089bc\n            goto lab_0x4089bc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4089bc\n            goto lab_0x4089bc_2;\n        }\n        // 0x408972\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4089fb\n    int64_t * v23 = (int64_t *)v22; // 0x408a00\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x408a03\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x408a00\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x408a17\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40896d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4089bc\n            goto lab_0x4089bc_2;\n        }\n        // 0x408972\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x408983\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x4089a0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4089b7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4089bc\n                goto lab_0x4089bc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4089bc\n                goto lab_0x4089bc_2;\n            }\n            // 0x408972\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4089e0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x408a00\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x408a17\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4089bc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408a20",
            "funcStartAddr": "408a20",
            "funcEndAddr": "40903c",
            "decompiledFuncCode": "int64_t function_408a20(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x408a3f\n    int64_t v2 = *v1; // 0x408a3f\n    char * str2 = (char *)v2; // 0x408a4c\n    char c = *str2; // 0x408a4c\n    int64_t v3 = v2; // 0x408a78\n    int64_t v4 = 0; // 0x408a20\n    int32_t v5; // 0x408a20\n    int64_t v6; // 0x408a20\n    int64_t v7; // 0x408a20\n    int64_t v8; // 0x408a20\n    int64_t v9; // 0x408a20\n    int64_t v10; // 0x408a20\n    int64_t v11; // 0x408a20\n    int64_t v12; // 0x408a20\n    int64_t v13; // 0x408a20\n    int64_t str3; // 0x408a20\n    int64_t v14; // 0x408a20\n    int64_t v15; // 0x408a20\n    int64_t v16; // 0x408a20\n    int64_t v17; // 0x408a20\n    int32_t v18; // 0x408a20\n    int32_t v19; // 0x408a20\n    int32_t v20; // 0x408a20\n    int32_t v21; // 0x408a20\n    int32_t v22; // 0x408a20\n    int32_t v23; // 0x408a20\n    int32_t v24; // 0x408a20\n    int32_t v25; // 0x408a20\n    int32_t v26; // 0x408a20\n    int32_t v27; // 0x408a20\n    int32_t v28; // 0x408a20\n    int32_t v29; // 0x408a20\n    int64_t nmemb; // 0x408a20\n    int64_t v30; // 0x408a20\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x408a7c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x408a78\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x408a88\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x408a8e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x408a58\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x408abc\n                int64_t v34; // 0x408a20\n                int64_t v35; // 0x408a20\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x408ac5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x408c40;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x408ad6\n                int64_t v37 = *(int64_t *)v36; // 0x408ada\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x408ab0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x408ac5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x408c40;\n                        }\n                    }\n                    // 0x408ad6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x408b26:\n                    // 0x408b26\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x408b80;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x408cf0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x408b80;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x408ca0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x408b4a;\n                                } else {\n                                    // 0x408cac\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x408b4a;\n                                    } else {\n                                        // 0x408cba\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x408b4a;\n                                        } else {\n                                            goto lab_0x408b80;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x408b4a;\n                            }\n                        }\n                    }\n                }\n              lab_0x408b91:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x408d66\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x408f12\n                            flockfile(g31);\n                            int64_t v41 = *v1; // 0x408f32\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x408f7f\n                            int64_t v43 = (int64_t)g31;\n                            int64_t v44 = v43; // 0x408f99\n                            int64_t v45; // 0x408f9b\n                            if (*(char *)v42 != 0) {\n                                // 0x408f9b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g31;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x408f93\n                            while (v17 + nmemb != v42) {\n                                // 0x408f95\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x408f9b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g31;\n                                }\n                                // 0x408f88\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x408fc0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g31);\n                            v40 = *v1;\n                        } else {\n                            // 0x408d74\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x408ecf\n                        free((int64_t *)v17);\n                    }\n                    // 0x408dc9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x408de0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x408c8e\n                    return 63;\n                }\n                // 0x408bb0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x408c34\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x408c40:;\n                    int32_t * v49 = (int32_t *)a7; // 0x408c50\n                    uint32_t v50 = *v49; // 0x408c50\n                    int64_t v51 = v50; // 0x408c50\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x408c5a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x408c63\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x408e8f\n                                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x408e3a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x408c8e\n                            return 63;\n                        }\n                        // 0x408cd8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x408fef\n                                    __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x408eed\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x408f00\n                                // 0x408c8e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x408dfe\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x408e12\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x408c7b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x408c7e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x408c82\n                    int64_t result = v59; // 0x408c88\n                    if (v58 != 0) {\n                        // 0x408c8a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x408c8e\n                    return result;\n                }\n            } else {\n                // 0x408a8e\n                v5 = v32;\n            }\n            // break -> 0x408bb5\n            break;\n        }\n    }\n    // 0x408bb5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x408bcd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x408bd7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x408c8e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x408d19\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x408c06\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x408c16\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x408b80:\n    // 0x408b80\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x408b80\n    int64_t v63 = *(int64_t *)v62; // 0x408b84\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x408b91\n        goto lab_0x408b91;\n    }\n    goto lab_0x408b26;\n  lab_0x408b4a:\n    // 0x408b4a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x408a20\n    int32_t v65; // 0x408a20\n    int32_t v66; // 0x408a20\n    if (v27 != 0) {\n        goto lab_0x408b80;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x408d00\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x408b80;\n            } else {\n                goto lab_0x408b71;\n            }\n        } else {\n            // 0x408b65\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x408e5c\n                int64_t v67 = (int64_t)mem; // 0x408e5c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x408b80;\n                } else {\n                    // 0x408e6f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x408b71;\n                }\n            } else {\n                goto lab_0x408b71;\n            }\n        }\n    }\n  lab_0x408b71:\n    // 0x408b71\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x408b80;\n}\n"
        },
        {
            "funcName": "function_409040",
            "funcStartAddr": "409040",
            "funcEndAddr": "409606",
            "decompiledFuncCode": "int64_t function_409040(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x409061\n    if (v3 < 1) {\n        // 0x40921e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40905d\n    int32_t v5 = *(int32_t *)a7; // 0x409069\n    uint64_t v6 = a1 & 0xffffffff; // 0x40906b\n    int64_t v7 = v2; // 0x409070\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x409073\n    *v8 = 0;\n    int64_t v9; // 0x409040\n    int64_t v10; // 0x409040\n    int64_t v11; // 0x409040\n    int64_t v12; // 0x409040\n    int64_t str; // 0x409040\n    int64_t v13; // 0x409040\n    int64_t v14; // 0x409040\n    int64_t v15; // 0x409040\n    int64_t v16; // 0x409040\n    int64_t v17; // 0x409040\n    int32_t v18; // 0x409040\n    char v19; // 0x409040\n    if (v5 == 0) {\n        // 0x409258\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40908a;\n    } else {\n        // 0x409083\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4090d0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4090d3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x409198;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4090e6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4090f6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4091ac;\n                } else {\n                    goto lab_0x409108;\n                }\n            }\n        } else {\n            goto lab_0x40908a;\n        }\n    }\n  lab_0x40908a:\n    // 0x40908a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x409090\n    *v24 = 0;\n    int64_t v25; // 0x409040\n    int64_t v26; // 0x409040\n    int64_t v27; // 0x409040\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x409180\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40918d;\n        }\n        case 43: {\n            // 0x409490\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40918d;\n        }\n        default: {\n            // 0x4090ac\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40940f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x409528\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40918d;\n                } else {\n                    // 0x40941d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4090ba;\n                }\n            } else {\n                goto lab_0x4090ba;\n            }\n        }\n    }\n  lab_0x409198:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40919f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x409108;\n    } else {\n        goto lab_0x4091ac;\n    }\n  lab_0x4090ba:\n    // 0x4090ba\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40918d;\n  lab_0x40918d:\n    // 0x40918d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x409198;\n  lab_0x409108:;\n    uint32_t v30 = *(int32_t *)a7; // 0x409108\n    int64_t v31 = v30; // 0x409108\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40910a\n    if ((int64_t)*v32 > v31) {\n        // 0x40910f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x409112\n    if (*v33 > v30) {\n        // 0x409117\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40911a\n    int64_t v35 = v31; // 0x40911e\n    int64_t v36 = v15; // 0x40911e\n    int64_t v37; // 0x409040\n    int64_t v38; // 0x409040\n    int64_t v39; // 0x409040\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x409288\n        int64_t v41 = v40; // 0x409288\n        v2 = v41;\n        int64_t v42; // 0x409040\n        if (*v33 == v40) {\n            // 0x409470\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x409478\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x409294\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x409298\n                function_408940(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4092a8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4092b1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4092ba\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4092d1\n            int64_t v47 = v45 & 0xffffffff; // 0x4092d5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4092de\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4092e4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4092e6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4092c0\n            int64_t v49 = v48 & 0xffffffff; // 0x4092c0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4092d1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4092de\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4092e4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4092e6;\n                    }\n                }\n                // 0x4092c0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x409488\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4092e6;\n    } else {\n        goto lab_0x409124;\n    }\n  lab_0x4091ac:\n    // 0x4091ac\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4091af\n    int64_t v51 = v12; // 0x4091af\n    int64_t v52 = v14; // 0x4091af\n    if (*(char *)v10 == 0) {\n        goto lab_0x409108;\n    } else {\n        goto lab_0x4091b5;\n    }\n  lab_0x409124:;\n    int32_t v53 = v35; // 0x409124\n    int64_t v54; // 0x409040\n    int64_t v55; // 0x409040\n    int64_t v56; // 0x409040\n    int64_t v57; // 0x409040\n    int64_t v58; // 0x409040\n    int64_t v59; // 0x409040\n    char * v60; // 0x409040\n    int64_t v61; // 0x409040\n    int64_t v62; // 0x409139\n    int64_t v63; // 0x409040\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x409273\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x409276;\n    } else {\n        // 0x40912c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x409040\n        int64_t v66 = v65 ? -1 : 1; // 0x409140\n        int64_t v67 = (int64_t)\"--\"; // 0x409040\n        int64_t v68 = v62; // 0x409040\n        int64_t v69 = 3; // 0x409140\n        unsigned char v70 = *(char *)v68; // 0x409140\n        char v71 = *(char *)v67; // 0x409140\n        char v72 = v71; // 0x409140\n        bool v73 = false; // 0x409140\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x409230\n            if (*(char *)v62 == 45) {\n                // 0x4092f0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4092f0\n                if (c == 0) {\n                    goto lab_0x40923a;\n                } else {\n                    // 0x4092fd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x409380;\n                    } else {\n                        if (c == 45) {\n                            // 0x409563\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4093d5;\n                        } else {\n                            // 0x40930e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x409380;\n                            } else {\n                                // 0x409313\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x409334;\n                                } else {\n                                    // 0x40931a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x409380;\n                                    } else {\n                                        goto lab_0x409334;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40923a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x409150\n            v2 = v75;\n            int32_t v76 = *v32; // 0x409153\n            int64_t v77 = v35 + 1; // 0x409156\n            int32_t v78 = v77; // 0x409159\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4094c0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x409167\n                    function_408940(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x409175\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x409276;\n        }\n    }\n  lab_0x4091b5:;\n    // 0x4091b5\n    int64_t v79; // bp-104, 0x409040\n    int64_t v80 = &v79; // 0x40904a\n    int64_t v81 = v50 + 1; // 0x4091b5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4091bc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4091c1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4091c5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4091c9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4091d1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4091d6\n    int32_t c2 = v84; // 0x4091d6\n    char * found_char_pos = strchr(str2, c2); // 0x4091d6\n    int64_t v87 = *v82; // 0x4091db\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4091e5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4091f0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4094e0\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4094ad\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40921e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4091d6\n    char v91 = *(char *)(v90 + 1); // 0x40920b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4091c5\n        if (v91 != 58) {\n            // 0x40921e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x409434\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x409538\n                *v8 = 0;\n            } else {\n                // 0x40951c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40945e\n            *v83 = 0;\n            // 0x40921e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40943e\n        if (v93 != 0) {\n            // 0x4094d0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40945e\n            *v83 = 0;\n            // 0x40921e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x409451\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40945e\n            *v83 = 0;\n            // 0x40921e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40959a\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40954a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x409551\n        // 0x40945e\n        *v83 = 0;\n        // 0x40921e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4093a9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4093ab\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4095d0\n                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x409581\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x409588\n            // 0x40921e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4093b6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4093ba\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4093d5;\n  lab_0x4092e6:\n    // 0x4092e6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x409124;\n  lab_0x4093d5:;\n    int64_t v99 = function_408a20(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4093f3\n    // 0x40921e\n    return v99 & 0xffffffff;\n  lab_0x409276:;\n    int32_t v100 = v55; // 0x409276\n    if (v100 != (int32_t)v59) {\n        // 0x40927a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40921e\n    return 0xffffffff;\n  lab_0x40923a:\n    // 0x40923a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x409241\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40921e\n    return v99 & 0xffffffff;\n  lab_0x409380:\n    // 0x409380\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4091b5;\n  lab_0x409334:\n    // 0x409334\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_408a20(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40935a\n    if ((int32_t)v101 != -1) {\n        // 0x40921e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40936f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x409380;\n}\n"
        },
        {
            "funcName": "function_409610",
            "funcStartAddr": "409610",
            "funcEndAddr": "409666",
            "decompiledFuncCode": "int64_t function_409610(int64_t a1) {\n    // 0x409610\n    *(int32_t *)&g50 = g26;\n    *(int32_t *)&g51 = g25;\n    int64_t v1; // 0x409610\n    int64_t result = function_409040(v1, v1, v1, v1, v1, v1, &g50, a1 & 0xffffffff); // 0x409636\n    g26 = *(int32_t *)&g50;\n    g55 = g53;\n    *(int32_t *)&g24 = g52;\n    return result;\n}\n"
        },
        {
            "funcName": "function_409670",
            "funcStartAddr": "409670",
            "funcEndAddr": "409688",
            "decompiledFuncCode": "int64_t function_409670(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409670\n    return function_409610(1);\n}\n"
        },
        {
            "funcName": "function_409690",
            "funcStartAddr": "409690",
            "funcEndAddr": "4096a3",
            "decompiledFuncCode": "int64_t function_409690(int64_t a1, int64_t a2, char * a3, char (**a4)[7], int32_t a5, int64_t a6) {\n    // 0x409690\n    return function_409610(0);\n}\n"
        },
        {
            "funcName": "function_4096b0",
            "funcStartAddr": "4096b0",
            "funcEndAddr": "4096c5",
            "decompiledFuncCode": "int64_t function_4096b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4096b0\n    return function_409040(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4096d0",
            "funcStartAddr": "4096d0",
            "funcEndAddr": "4096e6",
            "decompiledFuncCode": "int64_t function_4096d0(void) {\n    // 0x4096d0\n    return function_409610(0);\n}\n"
        },
        {
            "funcName": "function_4096f0",
            "funcStartAddr": "4096f0",
            "funcEndAddr": "409708",
            "decompiledFuncCode": "int64_t function_4096f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4096f0\n    return function_409040(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_409710",
            "funcStartAddr": "409710",
            "funcEndAddr": "40978a",
            "decompiledFuncCode": "int64_t function_409710(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40971b\n    int64_t v2 = (int64_t)&g9; // 0x40971b\n    int32_t * pwc; // 0x409710\n    int64_t v3; // 0x409710\n    int64_t n; // 0x409710\n    if (a2 == 0) {\n        goto lab_0x409762;\n    } else {\n        // 0x40971d\n        if (a3 == 0) {\n            // 0x409748\n            return -2;\n        }\n        // 0x409729\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x409762;\n        } else {\n            goto lab_0x409734;\n        }\n    }\n  lab_0x409762:\n    // 0x409762\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x409710\n    pwc = (int32_t *)&v4;\n    goto lab_0x409734;\n  lab_0x409734:;\n    char * wstr = (char *)v3; // 0x40973a\n    int64_t ps; // 0x409710\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40973a\n    int64_t result = v5; // 0x40973a\n    if (v5 < 0xfffffffe) {\n        // 0x409748\n        return result;\n    }\n    int64_t result2 = result; // 0x409779\n    if ((char)function_4097f0(0, v3) == 0) {\n        // 0x40977b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x409748\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409790",
            "funcStartAddr": "409790",
            "funcEndAddr": "4097ed",
            "decompiledFuncCode": "int64_t function_409790(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x409797\n    int64_t v2; // 0x409790\n    int64_t result = function_4086e0(a1, v2); // 0x4097a8\n    if ((v2 & 32) != 0) {\n        // 0x4097d0\n        if ((int32_t)result == 0) {\n            // 0x4097d4\n            *__errno_location() = 0;\n        }\n        // 0x4097ca\n        return 0xffffffff;\n    }\n    // 0x4097b1\n    if ((int32_t)result == 0) {\n        // 0x4097ca\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4097b8\n    if (v1 == 0) {\n        // 0x4097ba\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4097ca\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4097f0",
            "funcStartAddr": "4097f0",
            "funcEndAddr": "40984e",
            "decompiledFuncCode": "int64_t function_4097f0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4097f6\n    if (locale == NULL) {\n        // 0x409823\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4097f6\n    bool v2; // 0x4097f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g10; // 0x4097f0\n    int64_t v5 = v1; // 0x4097f0\n    int64_t v6 = 2; // 0x409815\n    unsigned char v7 = *(char *)v5; // 0x409815\n    char v8 = *(char *)v4; // 0x409815\n    char v9 = v8; // 0x409815\n    bool v10 = false; // 0x409815\n    while (v7 == v8) {\n        // 0x409808\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x409821\n    int64_t v13 = v1; // 0x409821\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x409823\n        return 0;\n    }\n    int64_t v14 = 6; // 0x409821\n    unsigned char v15 = *(char *)v13; // 0x40983d\n    char v16 = *(char *)v12; // 0x40983d\n    char v17 = v16; // 0x40983d\n    bool v18 = false; // 0x40983d\n    while (v15 == v16) {\n        // 0x409830\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_409850",
            "funcStartAddr": "409850",
            "funcEndAddr": "409db2",
            "decompiledFuncCode": "int64_t function_409850(void) {\n    char * v1 = nl_langinfo(14); // 0x409866\n    char * v2 = g54; // 0x40986b\n    char * v3; // 0x409850\n    int64_t v4; // 0x409850\n    int64_t v5; // 0x409850\n    int64_t v6; // 0x409850\n    int64_t v7; // 0x409850\n    int32_t size; // 0x409850\n    int32_t size2; // 0x409850\n    int32_t len; // 0x409922\n    int64_t v8; // 0x409922\n    char * env_val; // 0x40990d\n    if (v2 == NULL) {\n        // 0x409908\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x409975;\n        } else {\n            // 0x40991a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x409975;\n            } else {\n                // 0x40991f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40990d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x409da5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x409975;\n                    } else {\n                        // 0x409d19\n                        size2 = len + 14;\n                        goto lab_0x40993b;\n                    }\n                } else {\n                    goto lab_0x40993b;\n                }\n            }\n        }\n    } else {\n        // 0x409850\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40988a;\n    }\n  lab_0x409bbc:;\n    // 0x409bbc\n    struct _IO_FILE * stream; // 0x4099fb\n    int32_t v10 = __uflow(stream); // 0x409bbf\n    int64_t v11; // 0x409850\n    int64_t v12 = v11; // 0x409bc9\n    int64_t v13; // 0x409850\n    int64_t v14 = v13; // 0x409bc9\n    int32_t v15 = v10; // 0x409bc9\n    int64_t v16; // 0x409850\n    int64_t v17 = v16; // 0x409bc9\n    int64_t v18 = v11; // 0x409bc9\n    int64_t v19 = v13; // 0x409bc9\n    int64_t v20 = v16; // 0x409bc9\n    if (v10 == -1) {\n        // break -> 0x409bcf\n        goto lab_0x409bcf;\n    }\n    goto lab_0x409a49;\n  lab_0x409a3e:;\n    // 0x409a3e\n    int64_t v90; // 0x409850\n    int64_t * v32; // 0x409a30\n    *v32 = v90 + 1;\n    int64_t v89; // 0x409850\n    v12 = v89;\n    int64_t v91; // 0x409850\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x409850\n    v17 = v92;\n    goto lab_0x409a49;\n  lab_0x409a49:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x409850\n    int32_t v25; // bp-120, 0x409850\n    int32_t v26; // bp-184, 0x409850\n    int64_t v27; // 0x4099fb\n    int64_t v28; // 0x409a18\n    int64_t v29; // 0x409a1d\n    int64_t * v30; // 0x409a34\n    switch (c) {\n        case 32: {\n            goto lab_0x409a30;\n        }\n        case 10: {\n            goto lab_0x409a30;\n        }\n        case 9: {\n            goto lab_0x409a30;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x409c21\n            int32_t v33; // 0x409850\n            char v34; // 0x409850\n            int32_t v35; // 0x409c2e\n            if (v31 < *v30) {\n                // 0x409c00\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x409c2b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x409c21\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x409c00\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x409c2b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x409c10\n                v36 = v33;\n            }\n            // 0x409cff\n            if (v36 == -1) {\n                // break -> 0x409bcf\n                break;\n            }\n            goto lab_0x409a30;\n        }\n        default: {\n            // 0x409a5f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x409bcf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x409a88\n            int64_t v39 = v37 + 4; // 0x409a8a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x409a96\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x409a98\n            while (v41 == 0) {\n                // 0x409a88\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x409ab6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x409ac2\n            int64_t v45 = v43 + 4; // 0x409ac4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x409ad0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x409ad2\n            while (v47 == 0) {\n                // 0x409ac2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x409abf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x409ae8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x409af8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x409afc\n            int64_t v52 = v51 + v48; // 0x409b05\n            int64_t * mem; // 0x409850\n            int64_t v53; // 0x409850\n            int64_t v54; // 0x409850\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x409c3b\n                int64_t v56 = v55 + 3; // 0x409c47\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x409b21\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x409b30\n            if (mem == NULL) {\n                // 0x409d5c\n                free((int64_t *)v21);\n                function_4086e0(v27, v53);\n                v24 = (int64_t)&g9;\n                goto lab_0x4099d4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x409b48\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x409b52\n            uint32_t v62 = (int32_t)v59; // 0x409b55\n            int64_t v63; // 0x409850\n            if (v62 >= 8) {\n                // 0x409c64\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x409c7e\n                int64_t v66 = v61 - v65; // 0x409c82\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x409c8d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x409c9e\n                    int64_t v70 = v69 & 0xffffffff; // 0x409c9e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x409c9b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x409d2f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x409b67\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x409b6b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x409b7b\n            int64_t v74 = v60 - 1; // 0x409b7f\n            uint32_t v75 = (int32_t)v73; // 0x409b84\n            int64_t v76; // 0x409850\n            if (v75 >= 8) {\n                // 0x409cb2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x409cbc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x409ccc\n                int64_t v80 = v74 - v79; // 0x409cd0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x409cdb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x409ceb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x409ce9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x409d46\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x409d4e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x409b96\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x409b9a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x409d93\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x409bae\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x409a3e;\n            } else {\n                goto lab_0x409bbc;\n            }\n        }\n    }\n  lab_0x409a30:;\n    int64_t v93 = v23; // 0x409850\n    int64_t v94 = v22; // 0x409850\n    int64_t v95 = v21; // 0x409850\n    goto lab_0x409a30_2;\n  lab_0x409975:;\n    int64_t * mem3 = malloc(size); // 0x409975\n    int64_t v97 = (int64_t)&g9; // 0x409980\n    int64_t v98; // 0x409850\n    int64_t path; // 0x409850\n    if (mem3 == NULL) {\n        goto lab_0x409952;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x409975\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x409996;\n    }\n  lab_0x40988a:;\n    int64_t str = v1 == NULL ? (int64_t)&g9 : (int64_t)v1; // 0x40987d\n    char v100 = *v3; // 0x40988a\n    int64_t v101; // 0x409850\n    if (v100 == 0) {\n        // 0x4098e4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x409850\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x409850\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4098d0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4098d7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4098a0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4098ad\n        char v107 = *(char *)v106; // 0x4098b2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4098e4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4098bb\n    v104 = v103 + 1;\n  lab_0x4098d7:\n    // 0x4098e4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x409952:;\n    char * v108 = (char *)v97;\n    g54 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40988a;\n  lab_0x409996:;\n    int64_t v109 = v98 + path; // 0x409996\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4099c2\n    v24 = (int64_t)&g9;\n    if (fd >= 0) {\n        // 0x4099f1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x409d22\n            close(fd);\n            v24 = (int64_t)&g9;\n        } else {\n            // 0x409a15\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x409a30_2:;\n                uint64_t v96 = *v32; // 0x409a30\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x409bbc;\n                } else {\n                    goto lab_0x409a3e;\n                }\n            }\n          lab_0x409bcf:\n            // 0x409bcf\n            function_4086e0(v27, v19);\n            v24 = (int64_t)&g9;\n            if (v18 != 0) {\n                // 0x409bee\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4099d4;\n  lab_0x40993b:;\n    int64_t * mem4 = malloc(size2); // 0x40993b\n    v97 = (int64_t)&g9;\n    if (mem4 != NULL) {\n        // 0x4099e1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x409996;\n    } else {\n        goto lab_0x409952;\n    }\n  lab_0x4099d4:\n    // 0x4099d4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x409952;\n}\n"
        },
        {
            "funcName": "function_409dc0",
            "funcStartAddr": "409dc0",
            "funcEndAddr": "409e1d",
            "decompiledFuncCode": "int64_t function_409dc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409dc0\n    return function_401538();\n}\n"
        },
        {
            "funcName": "function_409e20",
            "funcStartAddr": "409e20",
            "funcEndAddr": "409e21",
            "decompiledFuncCode": "int64_t function_409e20(void) {\n    // 0x409e20\n    int64_t result; // 0x409e20\n    return result;\n}\n"
        },
        {
            "funcName": "function_409e30",
            "funcStartAddr": "409e30",
            "funcEndAddr": "409e48",
            "decompiledFuncCode": "int64_t function_409e30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409e30\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g15);\n}\n"
        },
        {
            "funcName": "function_409e48",
            "funcStartAddr": "409e48",
            "funcEndAddr": "409e68",
            "decompiledFuncCode": "int64_t function_409e48(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g11; // 0x409e52\n    while (*(int64_t *)v1 != -1) {\n        // 0x409e53\n        v1 -= 8;\n    }\n    // 0x409e64\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_sha256sum.elf"
}