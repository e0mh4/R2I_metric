{
    "funcInfo": [
        {
            "funcName": "function_4019d0",
            "funcStartAddr": "4019d0",
            "funcEndAddr": "4019d5",
            "decompiledFuncCode": "int64_t function_4019d0(void) {\n    // 0x4019d0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019d5",
            "funcStartAddr": "4019d5",
            "funcEndAddr": "4019da",
            "decompiledFuncCode": "int64_t function_4019d5(void) {\n    // 0x4019d5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019da",
            "funcStartAddr": "4019da",
            "funcEndAddr": "4019df",
            "decompiledFuncCode": "int64_t function_4019da(void) {\n    // 0x4019da\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019df",
            "funcStartAddr": "4019df",
            "funcEndAddr": "4019e4",
            "decompiledFuncCode": "int64_t function_4019df(void) {\n    // 0x4019df\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019e4",
            "funcStartAddr": "4019e4",
            "funcEndAddr": "4019e9",
            "decompiledFuncCode": "int64_t function_4019e4(void) {\n    // 0x4019e4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019e9",
            "funcStartAddr": "4019e9",
            "funcEndAddr": "4019ee",
            "decompiledFuncCode": "int64_t function_4019e9(void) {\n    // 0x4019e9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019ee",
            "funcStartAddr": "4019ee",
            "funcEndAddr": "4019f3",
            "decompiledFuncCode": "int64_t function_4019ee(void) {\n    // 0x4019ee\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019f3",
            "funcStartAddr": "4019f3",
            "funcEndAddr": "4019f8",
            "decompiledFuncCode": "int64_t function_4019f3(void) {\n    // 0x4019f3\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019f8",
            "funcStartAddr": "4019f8",
            "funcEndAddr": "4019fd",
            "decompiledFuncCode": "int64_t function_4019f8(void) {\n    // 0x4019f8\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019fd",
            "funcStartAddr": "4019fd",
            "funcEndAddr": "401a02",
            "decompiledFuncCode": "int64_t function_4019fd(void) {\n    // 0x4019fd\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a10",
            "funcStartAddr": "401a10",
            "funcEndAddr": "401d12",
            "decompiledFuncCode": "int64_t function_401a10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    uint64_t v1 = a1 & 0xffffffff; // 0x401a1b\n    function_403d60(a2);\n    setlocale(LC_ALL, (char *)&g11);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_407fc0(0x4028d0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v2 = 0xffffffff; // 0x401a66\n    int64_t v3 = 0; // 0x401a66\n    int64_t v4; // 0x401a10\n    while (true) {\n      lab_0x401a70_4:\n        // 0x401a70\n        v4 = v2;\n        while (true) {\n            // 0x401a70\n            int32_t v5; // 0x401a10\n            while (true) {\n              lab_0x401a70_3:\n                // 0x401a70\n                v5 = function_407550(v1, a2, \"efmnqsvz\", &g2, 0, a6);\n                v2 = 2;\n                switch (v5) {\n                    case -1: {\n                        goto lab_0x401b7a;\n                    }\n                    case 109: {\n                        goto lab_0x401a70_4;\n                    }\n                    default: {\n                        if (v5 <= 109) {\n                            if (v5 == -130) {\n                                // 0x401d0b\n                                function_401e00(0);\n                                // UNREACHABLE\n                            }\n                            if (v5 > -130) {\n                                // 0x401ac5\n                                v2 = 0;\n                                if (v5 != 101) {\n                                    // 0x401b00\n                                    v2 = 1;\n                                    if (v5 != 102) {\n                                        goto lab_0x401d01;\n                                    } else {\n                                        goto lab_0x401a70_4;\n                                    }\n                                } else {\n                                    goto lab_0x401a70_4;\n                                }\n                            } else {\n                                if (v5 == -131) {\n                                    // 0x401b23\n                                    function_405f30((int64_t)g30, \"readlink\", \"GNU coreutils\", (int64_t)g18, \"Dmitry V. Levin\", 0);\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x401d01;\n                            }\n                        }\n                        if (v5 == 115) {\n                            // 0x401b61\n                            g35 = 0;\n                            goto lab_0x401a70_3;\n                        } else {\n                            if (v5 > 115) {\n                                if (v5 != 118) {\n                                    // break -> 0x401ad0\n                                    break;\n                                }\n                                // 0x401aac\n                                g35 = 1;\n                                goto lab_0x401a70_3;\n                            } else {\n                                if (v5 != 110) {\n                                    if (v5 != 113) {\n                                      lab_0x401d01:\n                                        // 0x401d01\n                                        function_401e00(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x401b61\n                                    g35 = 0;\n                                    goto lab_0x401a70_3;\n                                } else {\n                                    // 0x401aed\n                                    g36 = 1;\n                                    goto lab_0x401a70_3;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // 0x401ad0\n            if (v5 != 122) {\n                // 0x401d01\n                function_401e00(1);\n                // UNREACHABLE\n            }\n        }\n        goto lab_0x401a70_4;\n    }\n  lab_0x401b7a:;\n    uint32_t v6 = *(int32_t *)0x60c29c; // 0x401b7a\n    int64_t v7 = v6; // 0x401b7a\n    if (v1 <= v7) {\n        // 0x401ce2\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n        // 0x401d01\n        function_401e00(1);\n        // UNREACHABLE\n    }\n    int64_t v8 = v7; // 0x401b93\n    if (-1 - v6 != -(int32_t)a1) {\n        int64_t v9 = v7; // 0x401b9c\n        if (g36 != 0) {\n            // 0x401cb8\n            error(0, (int32_t)\"ignoring --no-newline with multiple arguments\" ^ (int32_t)\"ignoring --no-newline with multiple arguments\", dcgettext(NULL, \"ignoring --no-newline with multiple arguments\", 5));\n            v9 = g27;\n        }\n        // 0x401ba2\n        g36 = 0;\n        v8 = v9;\n        if (v1 <= v9) {\n            // 0x401c98\n            return 0;\n        }\n    }\n    int64_t v10 = v3 == 0 ? 10 : 0; // 0x401bbd\n    int64_t v11 = *(int64_t *)((0x100000000 * v8 >> 29) + a2); // 0x401c2a\n    int64_t v12; // 0x401a10\n    if (v4 == 0xffffffff) {\n        // 0x401c83\n        v12 = function_402140(v11, 63);\n    } else {\n        // 0x401c34\n        v12 = function_402230(v11, v4);\n    }\n    int64_t v13 = v12;\n    int64_t v14; // 0x401a10\n    int64_t v15; // 0x401be8\n    int64_t * v16; // 0x401bef\n    uint64_t v17; // 0x401bef\n    if (v13 != 0) {\n        // 0x401bd0\n        fputs_unlocked((char *)v13, g30);\n        if (g36 == 0) {\n            // 0x401be8\n            v15 = (int64_t)g30;\n            v16 = (int64_t *)(v15 + 40);\n            v17 = *v16;\n            if (*(int64_t *)(v15 + 48) > v17) {\n                // 0x401bfd\n                *v16 = v17 + 1;\n                *(char *)v17 = (char)v10;\n            } else {\n                // 0x401caa\n                __overflow(g30, (int32_t)v10);\n            }\n        }\n        // 0x401c0c\n        free((int64_t *)v13);\n        v14 = 0;\n    } else {\n        // 0x401c46\n        v14 = 1;\n        if (g35 != 0) {\n            // 0x401c55\n            error(0, *__errno_location(), \"%s\", (char *)function_405800(0, 3, v11));\n            v14 = 1;\n        }\n    }\n    // 0x401c14\n    g27 = &g28;\n    while (v1 > (int64_t)&g28) {\n        int64_t v18 = v14;\n        v11 = *(int64_t *)((0x100000000 * (int64_t)&g28 >> 29) + a2);\n        if (v4 == 0xffffffff) {\n            // 0x401c83\n            v12 = function_402140(v11, 63);\n        } else {\n            // 0x401c34\n            v12 = function_402230(v11, v4);\n        }\n        // 0x401c41\n        v13 = v12;\n        if (v13 != 0) {\n            // 0x401bd0\n            fputs_unlocked((char *)v13, g30);\n            if (g36 == 0) {\n                // 0x401be8\n                v15 = (int64_t)g30;\n                v16 = (int64_t *)(v15 + 40);\n                v17 = *v16;\n                if (*(int64_t *)(v15 + 48) > v17) {\n                    // 0x401bfd\n                    *v16 = v17 + 1;\n                    *(char *)v17 = (char)v10;\n                } else {\n                    // 0x401caa\n                    __overflow(g30, (int32_t)v10);\n                }\n            }\n            // 0x401c0c\n            free((int64_t *)v13);\n            v14 = v18;\n        } else {\n            // 0x401c46\n            v14 = 1;\n            if (g35 != 0) {\n                // 0x401c55\n                error(0, *__errno_location(), \"%s\", (char *)function_405800(0, 3, v11));\n                v14 = 1;\n            }\n        }\n        // 0x401c14\n        g27 = &g28;\n    }\n    // 0x401c98\n    return v14 & 0xffffffff;\n  lab_0x401a70:\n    // 0x401a70\n    goto lab_0x401a70_4;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401d20",
            "funcEndAddr": "401d4b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401d20\n    int64_t v1; // 0x401d20\n    __libc_start_main(0x401a10, (int32_t)a4, (char **)&v1, (void (*)())0x407f50, (void (*)())0x407fb0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d4b",
            "funcStartAddr": "401d4b",
            "funcEndAddr": "401d6a",
            "decompiledFuncCode": "int64_t function_401d4b(void) {\n    // 0x401d4b\n    return &g29;\n}\n"
        },
        {
            "funcName": "function_401d6a",
            "funcStartAddr": "401d6a",
            "funcEndAddr": "401da1",
            "decompiledFuncCode": "int64_t function_401d6a(void) {\n    // 0x401d6a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401da1",
            "funcStartAddr": "401da1",
            "funcEndAddr": "401df8",
            "decompiledFuncCode": "int64_t function_401da1(void) {\n    // 0x401da1\n    if (g33 != 0) {\n        // 0x401df7\n        int64_t result; // 0x401da1\n        return result;\n    }\n    int64_t v1 = g34; // 0x401dd4\n    int64_t result2; // 0x401de6\n    if (g34 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401de6\n        result2 = function_401d4b();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x401dd6\n        v1++;\n    }\n    // 0x401dca\n    g34 = v1;\n    // 0x401de6\n    result2 = function_401d4b();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401df8",
            "funcStartAddr": "401df8",
            "funcEndAddr": "401dfd",
            "decompiledFuncCode": "int64_t function_401df8(void) {\n    // 0x401df8\n    return function_401d6a();\n}\n"
        },
        {
            "funcName": "function_401e00",
            "funcStartAddr": "401e00",
            "funcEndAddr": "402135",
            "decompiledFuncCode": "int64_t function_401e00(int64_t a1) {\n    int32_t status = a1; // 0x401e16\n    if (status != 0) {\n        // 0x401e1a\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401e3f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401e46\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... FILE...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print value of a symbolic link or canonical file name\\n\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"  -f, --canonicalize            canonicalize by following every symlink in\\n                                every component of the given name recursively;\\n                                all but the last component must exist\\n  -e, --canonicalize-existing   canonicalize by following every symlink in\\n                                every component of the given name recursively,\\n                                all components must exist\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"  -m, --canonicalize-missing    canonicalize by following every symlink in\\n                                every component of the given name recursively,\\n                                without requirements on components existence\\n  -n, --no-newline              do not output the trailing delimiter\\n  -q, --quiet\\n  -s, --silent                  suppress most error messages (on by default)\\n  -v, --verbose                 report error messages\\n  -z, --zero                    end each output line with NUL, not newline\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    int64_t v1 = &g1; // bp-136, 0x401f13\n    bool v2; // 0x401e00\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x401f98\n    int64_t v6 = *(int64_t *)v5; // 0x401f9c\n    int64_t v7 = 9; // 0x401fa2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"readlink\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x401fae\n        char v11 = *(char *)v9; // 0x401fae\n        char v12 = v11; // 0x401fae\n        bool v13 = false; // 0x401fae\n        while (v10 == v11) {\n            // 0x401fa4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x401fae\n            int64_t v15 = v8 + v3; // 0x401fae\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x401fba\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 9;\n    }\n    // 0x401fba\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4020cc;\n        } else {\n            // 0x4020b6\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40210b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40201c;\n            } else {\n                goto lab_0x4020cc;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40201c;\n        } else {\n            // 0x402002\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40210b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40201c;\n            } else {\n                goto lab_0x40201c;\n            }\n        }\n    }\n  lab_0x4020cc:\n    // 0x4020cc\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40205c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401e3f\n    exit(status);\n    // UNREACHABLE\n  lab_0x40201c:\n    // 0x40201c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40205c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401e3f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402140",
            "funcStartAddr": "402140",
            "funcEndAddr": "40222f",
            "decompiledFuncCode": "int64_t function_402140(int64_t path, uint64_t a2) {\n    int64_t size = a2 >= 1025 ? 1025 : a2 + 1; // 0x402179\n    int64_t * mem = malloc((int32_t)size); // 0x402183\n    int64_t result = 0; // 0x40218e\n    while (mem != NULL) {\n        uint64_t buf_size = size;\n        int64_t * buf = mem;\n        int32_t v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size); // 0x402199\n        if (v1 < 0) {\n            // 0x4021f8\n            if (*__errno_location() != 34) {\n                // 0x402202\n                free(buf);\n                result = 0;\n                return result;\n            }\n        }\n        uint64_t v2 = (int64_t)v1; // 0x402199\n        int64_t v3; // 0x402140\n        if (buf_size > v2) {\n            // 0x402210\n            v3 = (int64_t)buf;\n            *(char *)(v2 + v3) = 0;\n            result = v3;\n            return result;\n        }\n        // 0x4021ab\n        free(buf);\n        while (buf_size <= 0x3fffffffffffffff) {\n            int64_t size2 = 2 * buf_size; // 0x4021b8\n            int64_t * mem2 = malloc((int32_t)size2); // 0x4021be\n            if (mem2 == NULL) {\n                // 0x4021cb\n                result = (int64_t)mem2;\n                return result;\n            }\n            buf_size = size2;\n            buf = mem2;\n            v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size);\n            if (v1 < 0) {\n                // 0x4021f8\n                if (*__errno_location() != 34) {\n                    // 0x402202\n                    free(buf);\n                    result = 0;\n                    return result;\n                }\n            }\n            // 0x4021a6\n            v2 = (int64_t)v1;\n            if (buf_size > v2) {\n                // 0x402210\n                v3 = (int64_t)buf;\n                *(char *)(v2 + v3) = 0;\n                result = v3;\n                return result;\n            }\n            // 0x4021ab\n            free(buf);\n        }\n        // 0x4021e0\n        size = 0x7fffffffffffffff;\n        if (buf_size > 0x7ffffffffffffffe) {\n            // 0x402220\n            *__errno_location() = 12;\n            result = 0;\n            return result;\n        }\n        mem = malloc((int32_t)size);\n        result = 0;\n    }\n  lab_0x4021cb_2:\n    // 0x4021cb\n    return result;\n}\n"
        },
        {
            "funcName": "function_402230",
            "funcStartAddr": "402230",
            "funcEndAddr": "4028a3",
            "decompiledFuncCode": "int64_t function_402230(int64_t a1, int64_t a2) {\n    int64_t v1 = a1;\n    uint32_t v2 = (int32_t)a2;\n    uint32_t v3 = v2 % 4; // 0x402249\n    if (a1 == 0 || (v2 + 3 & v3) != 0) {\n        // 0x4026e0\n        *__errno_location() = 22;\n        // 0x40252e\n        return 0;\n    }\n    int64_t v4; // 0x402230\n    int64_t v5; // 0x402230\n    int64_t v6; // 0x402230\n    switch ((char)a1) {\n        case 0: {\n            // 0x4027a1\n            *__errno_location() = 2;\n            // 0x40252e\n            return 0;\n        }\n        case 47: {\n            int64_t v7 = function_406070(0x1000); // 0x4023f5\n            *(char *)v7 = 47;\n            v6 = v7 + 1;\n            v5 = v7 + 0x1000;\n            v4 = v7;\n            // break -> 0x4022a5\n            break;\n        }\n        default: {\n            int64_t str = function_406300(a1, a2); // 0x402277\n            if (str == 0) {\n                // 0x40252e\n                return 0;\n            }\n            int32_t len = strlen((char *)str); // 0x40228b\n            int64_t v8 = len; // 0x40228b\n            if (len < 0x1000) {\n                int64_t v9 = function_4060d0(str, 0x1000); // 0x4027bc\n                v6 = v9 + v8;\n                v5 = v9 + 0x1000;\n                v4 = v9;\n            } else {\n                int64_t v10 = str + v8; // 0x40229f\n                v6 = v10;\n                v5 = v10;\n                v4 = str;\n            }\n            // break -> 0x4022a5\n            break;\n        }\n    }\n    int64_t v11 = a1; // 0x4022d2\n    int64_t v12 = 0; // 0x4022d2\n    int64_t v13 = 0; // 0x4022d2\n    int64_t v14 = 0; // 0x4022d2\n    char * v15 = (char *)&v1; // 0x4022d2\n    int64_t v16 = v6; // 0x4022d2\n    int64_t v17 = v5; // 0x4022d2\n    int64_t v18 = v4; // 0x4022d2\n    int64_t v19 = a1; // 0x4022d2\n    int64_t v20; // 0x402230\n    int64_t v21; // 0x402230\n    int64_t v22; // 0x402230\n    int64_t v23; // 0x402230\n    char * v24; // 0x402230\n    int64_t v25; // 0x402230\n    int64_t v26; // 0x402230\n    int64_t v27; // 0x402230\n    int64_t v28; // 0x402230\n    int64_t v29; // 0x402230\n    int64_t v30; // 0x402230\n    int64_t v31; // 0x402230\n    int64_t v32; // 0x402230\n    int64_t v33; // 0x402230\n    int32_t * v34; // 0x402230\n    int32_t * v35; // 0x402230\n    int32_t v36; // 0x402230\n    int32_t v37; // 0x402230\n    int32_t v38; // 0x402230\n    int64_t v39; // 0x402230\n    int64_t v40; // 0x402230\n    int64_t v41; // 0x402230\n    int64_t v42; // 0x402230\n    int64_t v43; // 0x402230\n    int64_t v44; // 0x402230\n    int64_t v45; // 0x402230\n    uint64_t v46; // 0x402230\n    int64_t v47; // 0x402313\n    char * str3; // 0x402230\n    int64_t v48; // 0x402313\n    char * v49; // 0x402230\n    int64_t v50; // 0x4025a4\n    char * str2; // 0x4025b8\n    int32_t len2; // 0x4025b8\n    int64_t v51; // 0x4025b8\n    int32_t len3; // 0x4025c3\n    while (true) {\n      lab_0x4022d8_4:\n        // 0x4022d8\n        v37 = v36;\n        v40 = v14;\n        int64_t v52 = v13;\n        int64_t v53 = v11;\n        int16_t v54 = (int16_t)v37 & -0x1000;\n        v42 = v12;\n        v24 = v15;\n        v27 = v16;\n        v22 = v19;\n        int32_t v55; // 0x402230\n        while (true) {\n          lab_0x4022d8_3:\n            // 0x4022d8\n            v21 = v18;\n            v26 = v17;\n            v43 = v42;\n            v46 = v21 + 1;\n            v25 = (int64_t)*v24;\n            v29 = v27;\n            v23 = v22;\n            int64_t v56; // 0x402230\n            int64_t v57; // 0x402330\n            while (true) {\n              lab_0x4022d8_2:\n                // 0x4022d8\n                v30 = v29;\n                if (v25 == 0) {\n                    // break (via goto) -> 0x4024e0\n                    goto lab_0x4024e0_3;\n                }\n                int64_t v58 = v23; // 0x4022e4\n                int64_t v59 = v25; // 0x4022e4\n                int64_t v60 = v23; // 0x4022e4\n                int64_t v61; // 0x4022f0\n                unsigned char v62; // 0x4022f4\n                if (v25 == 47) {\n                    v61 = v58 + 1;\n                    v62 = *(char *)v61;\n                    v58 = v61;\n                    while (v62 == 47) {\n                        // 0x4022f0\n                        v61 = v58 + 1;\n                        v62 = *(char *)v61;\n                        v58 = v61;\n                    }\n                    // 0x4022fd\n                    v59 = v62;\n                    v60 = v61;\n                    if (v62 == 0) {\n                        // break (via goto) -> 0x4024e0\n                        goto lab_0x4024e0_3;\n                    }\n                }\n                // 0x402305\n                v56 = v60;\n                int64_t v63 = v59;\n                v47 = v56 + 1;\n                str3 = (char *)v47;\n                unsigned char v64 = *str3; // 0x402313\n                int64_t v65 = v47; // 0x40231e\n                while (v64 != 0 == (v64 != 47)) {\n                    // 0x402313\n                    v47 = v65 + 1;\n                    str3 = (char *)v47;\n                    v64 = *str3;\n                    v65 = v47;\n                }\n                if (v47 == v56) {\n                    // break (via goto) -> 0x4024e0\n                    goto lab_0x4024e0_3;\n                }\n                // 0x40232d\n                v48 = v64;\n                v57 = v47 - v56;\n                while (v57 != 1) {\n                    if (v57 == 2 != ((char)v63 == 46)) {\n                        // break (via goto) -> 0x40234c\n                        goto lab_0x40234c_2;\n                    }\n                    // 0x4026a0\n                    if (*(char *)(v56 + 1) != 46) {\n                        // break (via goto) -> 0x40234c\n                        goto lab_0x40234c_2;\n                    }\n                    int64_t v66 = v48; // 0x4026b6\n                    int64_t v67 = v47; // 0x4026b6\n                    if (v30 > v46) {\n                        int64_t v68 = v30 - 1; // 0x4026bc\n                        v28 = v68;\n                        if (v21 >= v68) {\n                            goto lab_0x4022d8;\n                        } else {\n                            int64_t v69 = v30 - 2; // 0x4026c5\n                            v28 = v68;\n                            if (*(char *)v69 != 47) {\n                                // 0x402803\n                                v28 = v21;\n                                v31 = v69;\n                                if (v21 == v69) {\n                                    goto lab_0x4022d8;\n                                } else {\n                                    goto lab_0x402810;\n                                }\n                            } else {\n                                goto lab_0x4022d8;\n                            }\n                        }\n                    }\n                    if (v66 == 0) {\n                        // break (via goto) -> 0x4024e0\n                        goto lab_0x4024e0_3;\n                    }\n                    // 0x4022e0\n                    v58 = v67;\n                    v59 = v66;\n                    v60 = v67;\n                    if (v66 == 47) {\n                        v61 = v58 + 1;\n                        v62 = *(char *)v61;\n                        v58 = v61;\n                        while (v62 == 47) {\n                            // 0x4022f0\n                            v61 = v58 + 1;\n                            v62 = *(char *)v61;\n                            v58 = v61;\n                        }\n                        // 0x4022fd\n                        v59 = v62;\n                        v60 = v61;\n                        if (v62 == 0) {\n                            // break (via goto) -> 0x4024e0\n                            goto lab_0x4024e0_3;\n                        }\n                    }\n                    // 0x402305\n                    v56 = v60;\n                    v63 = v59;\n                    v47 = v56 + 1;\n                    str3 = (char *)v47;\n                    v64 = *str3;\n                    v65 = v47;\n                    while (v64 != 0 == (v64 != 47)) {\n                        // 0x402313\n                        v47 = v65 + 1;\n                        str3 = (char *)v47;\n                        v64 = *str3;\n                        v65 = v47;\n                    }\n                    if (v47 == v56) {\n                        // break (via goto) -> 0x4024e0\n                        goto lab_0x4024e0_3;\n                    }\n                    // 0x40232d\n                    v48 = v64;\n                    v57 = v47 - v56;\n                }\n                // 0x4024c8\n                v28 = v30;\n                if ((char)v63 != 46) {\n                    // break -> 0x40234c\n                    break;\n                }\n                goto lab_0x4022d8;\n            }\n          lab_0x40234c_2:;\n            int64_t v70 = v30; // 0x402350\n            if (*(char *)(v30 - 1) != 47) {\n                // 0x402352\n                *(char *)v30 = 47;\n                v70 = v30 + 1;\n            }\n            int64_t v71 = v70;\n            int64_t v72 = v71 + v57;\n            int64_t v73 = v72; // 0x402360\n            int64_t v74 = v71; // 0x402360\n            v17 = v26;\n            int64_t v75 = v21; // 0x402360\n            if (v26 <= v72) {\n                int64_t v76 = v57 < 0x1000 == (4095 - v57 & v57) < 0 ? v57 + 1 : 0x1000;\n                int64_t v77 = v76 + v26 - v21; // 0x402383\n                v75 = function_4060d0(v21, v77);\n                v74 = v75 + v71 - v21;\n                v73 = v74 + v57;\n                v17 = v75 + v77;\n            }\n            // 0x40239d\n            v18 = v75;\n            v20 = v73;\n            memcpy((int64_t *)v74, (int64_t *)v56, (int32_t)v57);\n            *(char *)v20 = 0;\n            v55 = 0;\n            if ((a2 & 4) != 0 && v3 == 2) {\n                // break -> 0x4023d3\n                break;\n            }\n            // 0x402410\n            v1 = 1;\n            v49 = (char *)v18;\n            int64_t v78; // bp-200, 0x402230\n            int32_t v79; // 0x402230\n            if ((a2 & 4) == 0) {\n                // 0x402548\n                v79 = __lxstat(1, v49, (struct stat *)&v78);\n            } else {\n                // 0x402429\n                v79 = __xstat(1, v49, (struct stat *)&v78);\n            }\n            // 0x402433\n            if (v79 == 0) {\n                // 0x4024a0\n                v55 = v37;\n                v15 = str3;\n                v11 = v53;\n                v12 = v43;\n                v13 = v52;\n                v14 = v40;\n                v38 = v37;\n                v16 = v20;\n                v19 = v47;\n                switch (v54) {\n                    case -0x6000: {\n                        int64_t v80 = v43; // 0x402566\n                        if (v43 == 0) {\n                            // 0x4026f3\n                            v1 = 7;\n                            v80 = function_4032d0(7, 0, 0x403c90, 0x403d00, 0x403d40);\n                            if (v80 == 0) {\n                                // 0x40271d\n                                function_4062c0(7);\n                                // UNREACHABLE\n                            }\n                        }\n                        // 0x40256c\n                        v45 = v80;\n                        int64_t v81 = function_402a00(v45, v53, &v78); // 0x40257b\n                        if ((char)v81 != 0) {\n                            // 0x402639\n                            v44 = v45;\n                            if (v3 != 2) {\n                                // 0x402644\n                                v32 = 40;\n                                v34 = __errno_location();\n                                goto lab_0x402651_2;\n                            }\n                        } else {\n                            // 0x402588\n                            function_402970(v45, v53, &v78);\n                            int64_t v82; // 0x402230\n                            v50 = function_402140(v18, v82);\n                            if (v50 != 0) {\n                                // 0x4025b5\n                                str2 = (char *)v50;\n                                len2 = strlen(str2);\n                                v51 = len2;\n                                len3 = strlen(str3);\n                                uint64_t v83 = v51 + 1 + (int64_t)len3; // 0x4025d1\n                                if (v52 == 0) {\n                                    int64_t v84 = v83 >= 0x1000 ? v83 : 0x1000; // 0x402781\n                                    int64_t v85 = function_406070(v84); // 0x40278d\n                                    v39 = v84;\n                                    v41 = v85;\n                                    goto lab_0x4025e7;\n                                } else {\n                                    // 0x4025dc\n                                    v39 = v52;\n                                    v41 = v40;\n                                    if (v83 > v52) {\n                                        int64_t v86 = function_4060d0(v40, v83); // 0x402842\n                                        v39 = v83;\n                                        v41 = v86;\n                                        goto lab_0x4025e7;\n                                    } else {\n                                        goto lab_0x4025e7;\n                                    }\n                                }\n                            }\n                            int32_t * v87 = __errno_location(); // 0x4027d3\n                            uint32_t v88 = *v87; // 0x4027e0\n                            v44 = v45;\n                            if (v3 == 2 != v88 != 12) {\n                                // 0x402651\n                                v32 = v88;\n                                v34 = v87;\n                                goto lab_0x402651_2;\n                            }\n                        }\n                        goto lab_0x402489;\n                    }\n                    case 0x4000: {\n                        goto lab_0x4023e4;\n                    }\n                    default: {\n                        goto lab_0x4023d3;\n                    }\n                }\n            } else {\n                int32_t * v89 = __errno_location(); // 0x402437\n                uint32_t v90 = *v89; // 0x40243f\n                if (v3 == 0) {\n                    // 0x402735\n                    v33 = v90;\n                    v35 = v89;\n                    goto lab_0x402735_3;\n                }\n                // 0x40244d\n                v55 = 0;\n                if (v3 != 1) {\n                    // break -> 0x4023d3\n                    break;\n                }\n                char v91 = *(char *)(v47 + (int64_t)strspn(str3, \"/\")); // 0x402475\n                v44 = v43;\n                if (v90 == 2 != (v91 == 0)) {\n                    // 0x402735\n                    v33 = v90;\n                    v35 = v89;\n                    goto lab_0x402735_3;\n                }\n                goto lab_0x402489;\n            }\n        }\n      lab_0x4023d3:\n        // 0x4023d3\n        v15 = str3;\n        v11 = v53;\n        v12 = v43;\n        v13 = v52;\n        v14 = v40;\n        v38 = v55;\n        v16 = v20;\n        v19 = v47;\n        if (v3 != 2 == (*str3 != 0)) {\n            // 0x402728\n            v33 = 20;\n            v35 = __errno_location();\n            goto lab_0x402735_3;\n        }\n        goto lab_0x4023e4;\n    }\n  lab_0x4024e0_3:;\n    char * v92; // 0x402230\n    int64_t v93; // 0x402230\n    int64_t v94; // 0x402230\n    if (v30 > v46) {\n        int64_t v95 = v30 - 1; // 0x4024ea\n        char * v96 = (char *)v95;\n        v92 = v96;\n        v93 = v30;\n        v94 = v95;\n        if (*v96 == 47) {\n            goto lab_0x4024f8;\n        } else {\n            goto lab_0x4024f4;\n        }\n    } else {\n        goto lab_0x4024f4;\n    }\n  lab_0x4022d8:\n    // 0x4022d8\n    v25 = v48;\n    v29 = v28;\n    v23 = v47;\n    goto lab_0x4022d8_2;\n  lab_0x4023e4:\n    // 0x4023e4\n    v36 = v38;\n    goto lab_0x4022d8_4;\n  lab_0x402489:\n    // 0x402489\n    v42 = v44;\n    v24 = str3;\n    v27 = v20;\n    v22 = v47;\n    goto lab_0x4022d8_3;\n  lab_0x4024f4:\n    // 0x4024f4\n    v92 = (char *)v30;\n    v93 = v30 + 1;\n    v94 = v30;\n    goto lab_0x4024f8;\n  lab_0x4024f8:\n    // 0x4024f8\n    *v92 = 0;\n    int64_t v97 = v21; // 0x4024fe\n    if (v26 != v93) {\n        // 0x402500\n        v97 = function_4060d0(v21, 1 - v21 + v94);\n    }\n    // 0x402512\n    free((int64_t *)v40);\n    int64_t result = v97; // 0x402524\n    if (v43 != 0) {\n        // 0x402526\n        function_403510(v43);\n        result = v97;\n    }\n  lab_0x40252e:\n    // 0x40252e\n    return result;\n  lab_0x402810:;\n    int64_t v98 = v31 - 1; // 0x402810\n    v28 = v31;\n    if (*(char *)v98 == 47) {\n        goto lab_0x4022d8;\n    } else {\n        // 0x40281a\n        v28 = v98;\n        v31 = v98;\n        if (v21 != v98) {\n            goto lab_0x402810;\n        } else {\n            goto lab_0x4022d8;\n        }\n    }\n  lab_0x402735_3:\n    // 0x402735\n    free((int64_t *)v40);\n    free((int64_t *)v18);\n    int64_t v99 = v43; // 0x40275f\n    int64_t v100 = v33; // 0x40275f\n    int32_t * v101 = v35; // 0x40275f\n    if (v43 == 0) {\n        goto lab_0x402691;\n    } else {\n        goto lab_0x402675;\n    }\n  lab_0x402691:\n    // 0x402691\n    *v101 = (int32_t)(v100 & 0xffffffff);\n    result = 0;\n    goto lab_0x40252e;\n  lab_0x402675:\n    // 0x402675\n    function_403510(v99);\n    goto lab_0x402691;\n  lab_0x402651_2:\n    // 0x402651\n    free((int64_t *)v40);\n    free((int64_t *)v18);\n    v99 = v45;\n    v100 = v32;\n    v101 = v34;\n    goto lab_0x402675;\n  lab_0x4025e7:\n    // 0x4025e7\n    memmove((int64_t *)(v41 + v51), (int64_t *)v47, len3 + 1);\n    int64_t * v102 = (int64_t *)v50; // 0x402607\n    int64_t * dest_mem = memcpy((int64_t *)v41, v102, len2); // 0x402607\n    int64_t v103 = v18 + 1; // 0x402610\n    int64_t v104; // 0x402230\n    int64_t v105; // 0x402230\n    if (*str2 == 47) {\n        // 0x4027f6\n        *v49 = 47;\n        v104 = v103;\n        goto lab_0x40262c;\n    } else {\n        // 0x402623\n        v104 = v20;\n        if (v20 > v103) {\n            int64_t v106 = v20 - 1; // 0x40286c\n            v104 = v106;\n            if (v18 >= v106) {\n                goto lab_0x40262c;\n            } else {\n                // 0x402875\n                v104 = v106;\n                v105 = v106;\n                if (*(char *)(v20 - 2) == 47) {\n                    goto lab_0x40262c;\n                } else {\n                    goto lab_0x402882;\n                }\n            }\n        } else {\n            goto lab_0x40262c;\n        }\n    }\n  lab_0x40262c:;\n    int64_t v107 = (int64_t)dest_mem; // 0x402607\n    free(v102);\n    v15 = (char *)dest_mem;\n    v11 = v107;\n    v12 = v45;\n    v13 = v39;\n    v14 = v41;\n    v38 = v37;\n    v16 = v104;\n    v19 = v107;\n    goto lab_0x4023e4;\n  lab_0x402882:;\n    int64_t v108 = v105;\n    int64_t v109 = v108 - 1; // 0x402882\n    v104 = v18;\n    if (v18 == v109) {\n        goto lab_0x40262c;\n    } else {\n        // 0x40288f\n        v104 = v109;\n        v105 = v109;\n        if (*(char *)(v108 - 2) == 47) {\n            goto lab_0x40262c;\n        } else {\n            goto lab_0x402882;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_4028b0",
            "funcStartAddr": "4028b0",
            "funcEndAddr": "4028b8",
            "decompiledFuncCode": "int64_t function_4028b0(int64_t a1) {\n    // 0x4028b0\n    g38 = a1;\n    int64_t result; // 0x4028b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4028c0",
            "funcStartAddr": "4028c0",
            "funcEndAddr": "4028c8",
            "decompiledFuncCode": "int64_t function_4028c0(int64_t a1) {\n    // 0x4028c0\n    g37 = a1;\n    int64_t result; // 0x4028c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4028d0",
            "funcStartAddr": "4028d0",
            "funcEndAddr": "40296e",
            "decompiledFuncCode": "int64_t function_4028d0(void) {\n    // 0x4028d0\n    int32_t * err_num; // 0x4028e6\n    if ((int32_t)function_407650((int64_t)g30) == 0) {\n        goto lab_0x4028fc;\n    } else {\n        // 0x4028e6\n        err_num = __errno_location();\n        if (g37 == 0) {\n            goto lab_0x402913;\n        } else {\n            // 0x4028f7\n            if (*err_num != 32) {\n                goto lab_0x402913;\n            } else {\n                goto lab_0x4028fc;\n            }\n        }\n    }\n  lab_0x4028fc:;\n    int64_t result = function_407650((int64_t)g32); // 0x402903\n    if ((int32_t)result == 0) {\n        // 0x40290c\n        return result;\n    }\n    // 0x40294e\n    _exit(g19);\n    // UNREACHABLE\n  lab_0x402913:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40291f\n    if (g38 == 0) {\n        // 0x402959\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402933\n        error(0, *err_num, \"%s: %s\", (char *)function_4057d0((int64_t)g38), v1);\n    }\n    // 0x40294e\n    _exit(g19);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402970",
            "funcStartAddr": "402970",
            "funcEndAddr": "4029f6",
            "decompiledFuncCode": "int64_t function_402970(int64_t a1, int64_t a2, int64_t * a3) {\n    if (a1 == 0) {\n        // 0x4029e0\n        int64_t result; // 0x402970\n        return result;\n    }\n    int64_t v1 = (int64_t)a3;\n    int64_t result2 = function_406070(24); // 0x40298d\n    *(int64_t *)result2 = function_4062a0(a2);\n    *(int64_t *)(result2 + 8) = *(int64_t *)(v1 + 8);\n    *(int64_t *)(result2 + 16) = v1;\n    int64_t v2 = function_403a70(a1, result2); // 0x4029b6\n    if (v2 == 0) {\n        // 0x4029f1\n        function_4062c0(a1);\n        // UNREACHABLE\n    }\n    // 0x4029c0\n    if (result2 == v2) {\n        // 0x4029e0\n        return result2;\n    }\n    // 0x4029c5\n    return function_403d40(result2);\n}\n"
        },
        {
            "funcName": "function_402a00",
            "funcStartAddr": "402a00",
            "funcEndAddr": "402a3b",
            "decompiledFuncCode": "int64_t function_402a00(int64_t a1, int64_t a2, int64_t * a3) {\n    if (a1 == 0) {\n        // 0x402a38\n        return 0;\n    }\n    int64_t v1 = a2; // bp-40, 0x402a0d\n    int64_t v2 = function_403060(a1, &v1); // 0x402a21\n    return v2 & -256 | (int64_t)(v2 != 0);\n}\n"
        },
        {
            "funcName": "function_402a40",
            "funcStartAddr": "402a40",
            "funcEndAddr": "402ad3",
            "decompiledFuncCode": "int64_t function_402a40(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x402a57\n    if (v1 == -1) {\n        // 0x402acf\n        return -1;\n    }\n    int64_t v2 = v1; // 0x402a5f\n    int64_t v3; // 0x402a40\n    while (true) {\n      lab_0x402a68:\n        // 0x402a68\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x402ac0;\n        } else {\n            goto lab_0x402ac5;\n        }\n    }\n  lab_0x402acf_2:;\n    // 0x402acf\n    int64_t result; // 0x402a40\n    return result;\n  lab_0x402ac5:;\n    int64_t v4 = v3 + 2; // 0x402ac5\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x402acf\n        goto lab_0x402acf_2;\n    }\n    goto lab_0x402a68;\n  lab_0x402ac0:\n    // 0x402ac0\n    result = v3;\n    goto lab_0x402ac5;\n}\n"
        },
        {
            "funcName": "function_402ae0",
            "funcStartAddr": "402ae0",
            "funcEndAddr": "402af0",
            "decompiledFuncCode": "int64_t function_402ae0(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x402ae0\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_402af0",
            "funcStartAddr": "402af0",
            "funcEndAddr": "402af7",
            "decompiledFuncCode": "int64_t function_402af0(int64_t a1, int64_t a2) {\n    // 0x402af0\n    int64_t v1; // 0x402af0\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_402b00",
            "funcStartAddr": "402b00",
            "funcEndAddr": "402b21",
            "decompiledFuncCode": "int64_t function_402b00(int64_t a1, int64_t a2) {\n    // 0x402b00\n    int64_t v1; // 0x402b00\n    uint64_t v2 = v1;\n    if (*(int64_t *)(a1 + 16) > v2) {\n        // 0x402b18\n        return 16 * v2 + a2;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402b30",
            "funcStartAddr": "402b30",
            "funcEndAddr": "402c49",
            "decompiledFuncCode": "int64_t function_402b30(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_402b00(a1, a2); // 0x402b44\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x402b4c\n    int64_t result2 = *v2; // 0x402b4c\n    if (result2 == 0) {\n        // 0x402bde\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x402b74\n            if (v3 == 0) {\n                // 0x402bde\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x402b81\n            int64_t v5 = v3; // 0x402b87\n            int64_t v6 = v1; // 0x402b87\n            int64_t result = v4; // 0x402b87\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x402bbc_2:\n                // 0x402bbc\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x402bc1\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x402bd0\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x402bde\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x402b94\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x402ba1\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x402bbc_2;\n                }\n                // 0x402ba9\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x402bbc_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x402bde\n            return 0;\n        }\n    }\n    // 0x402bf3\n    if ((char)a4 == 0) {\n        // 0x402bde\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x402bf8\n    if (v12 == 0) {\n        // 0x402c40\n        *v2 = 0;\n        // 0x402bde\n        return result2;\n    }\n    // 0x402c01\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x402c0f\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402c50",
            "funcStartAddr": "402c50",
            "funcEndAddr": "402cce",
            "decompiledFuncCode": "int64_t function_402c50(uint64_t a1) {\n    if (a1 == (int64_t)&g3) {\n        // 0x402ccd\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x402c5b\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g3) {\n        // 0x402cba\n        *(int64_t *)a1 = (int64_t)&g3;\n        return 0;\n    }\n    // 0x402c69\n    __asm_comiss_1(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x402c84\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_2(v2, 0x3dcccccd); // 0x402c91\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x402c99\n    __asm_comiss_1(v4, v3);\n    __asm_comiss_1(__asm_movss(0x3f800000), v4);\n    __asm_comiss_1(v1, v3);\n    // 0x402ccd\n    return 1;\n}\n"
        },
        {
            "funcName": "function_402cd0",
            "funcStartAddr": "402cd0",
            "funcEndAddr": "402e1a",
            "decompiledFuncCode": "int64_t function_402cd0(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x402cea\n    uint64_t v2 = *v1; // 0x402cea\n    if (v2 <= a2) {\n        // 0x402dd4\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x402cd0\n    int64_t v8 = a2; // 0x402cd0\n    int64_t v9; // 0x402cd0\n    int64_t result; // 0x402cd0\n    int64_t v10; // 0x402cd0\n    while (true) {\n      lab_0x402d06_2:\n        // 0x402d06\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x402d06\n        int64_t v12 = *v11; // 0x402d06\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x402cf8;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x402d0f\n            int64_t v14 = *v13; // 0x402d0f\n            int64_t v15 = v14; // 0x402d17\n            int64_t v16 = v12; // 0x402d17\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x402d34\n                    int64_t v19 = *v18; // 0x402d34\n                    int64_t v20 = function_402b00(v3, v19); // 0x402d3d\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x402d42\n                    int64_t v22 = *v21; // 0x402d42\n                    int64_t * v23 = (int64_t *)v20; // 0x402d46\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x402d20\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x402d6f\n                            break;\n                        }\n                    } else {\n                        // 0x402d4c\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x402d6f\n                            break;\n                        }\n                    }\n                    // 0x402d34\n                    v15 = v22;\n                }\n                // 0x402d6f\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x402d73\n                v9 = *v1;\n                goto lab_0x402cf8;\n            } else {\n                int64_t v26 = function_402b00(v3, v25); // 0x402d8b\n                int64_t * v27 = (int64_t *)v26; // 0x402d90\n                if (*v27 == 0) {\n                    // 0x402df0\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x402d99\n                    int64_t * v29; // 0x402cd0\n                    int64_t v30; // 0x402cd0\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x402dff\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x402dd4\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x402dff\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x402daa\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x402db9\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x402dc1\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x402dca\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x402dd4\n                    break;\n                }\n                goto lab_0x402d06_2;\n            }\n        }\n    }\n    // 0x402dd4\n    return result;\n  lab_0x402cf8:;\n    int64_t v36 = v10 + 16; // 0x402cf8\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x402d06_2;\n    // 0x402d06\n    goto lab_0x402d06_2;\n}\n"
        },
        {
            "funcName": "function_402e20",
            "funcStartAddr": "402e20",
            "funcEndAddr": "402e25",
            "decompiledFuncCode": "int64_t function_402e20(int64_t a1) {\n    // 0x402e20\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_402e30",
            "funcStartAddr": "402e30",
            "funcEndAddr": "402e35",
            "decompiledFuncCode": "int64_t function_402e30(int64_t a1) {\n    // 0x402e30\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_402e40",
            "funcStartAddr": "402e40",
            "funcEndAddr": "402e45",
            "decompiledFuncCode": "int64_t function_402e40(int64_t a1) {\n    // 0x402e40\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_402e50",
            "funcStartAddr": "402e50",
            "funcEndAddr": "402e9f",
            "decompiledFuncCode": "int64_t function_402e50(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x402e53\n    int64_t result = 0; // 0x402e5c\n    if (v1 <= a1) {\n      lab_0x402e9d:\n        // 0x402e9d\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x402e60\n    while (*(int64_t *)v3 == 0) {\n        // 0x402e60\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x402e6f\n    int64_t v6 = v5; // 0x402e7b\n    int64_t v7 = 1; // 0x402e7b\n    int64_t v8; // 0x402e50\n    int64_t v9; // 0x402e80\n    int64_t v10; // 0x402e84\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x402e80\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x402e90\n    int64_t v12 = v3 + 16; // 0x402e94\n    while (v12 < v1) {\n        // 0x402e69\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x402e60\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x402e6f\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x402e80\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x402e8d\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x402e9d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402ea0",
            "funcStartAddr": "402ea0",
            "funcEndAddr": "402f07",
            "decompiledFuncCode": "int64_t function_402ea0(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x402ea3\n    int64_t v2 = a1; // 0x402eaf\n    int64_t v3 = 0; // 0x402eaf\n    int64_t v4 = 0; // 0x402eaf\n    int64_t v5 = 0; // 0x402eaf\n    int64_t v6 = 0; // 0x402eaf\n    int64_t v7; // 0x402ea0\n    int64_t v8; // 0x402ea0\n    int64_t v9; // 0x402ea0\n    if (v1 > a1) {\n        while (true) {\n          lab_0x402ec1_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x402eb8;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x402ec7\n                int64_t v13 = v10 + 1; // 0x402ecb\n                int64_t v14 = v11 + 1; // 0x402ecf\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x402ed6\n                int64_t v16 = v14; // 0x402ed6\n                if (v12 == 0) {\n                    goto lab_0x402eb8;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x402ee0\n                    int64_t v18 = v16 + 1; // 0x402ee4\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x402ee0\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x402eed\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x402ef6\n                        break;\n                    }\n                    goto lab_0x402ec1_2;\n                }\n            }\n        }\n    }\n  lab_0x402ef6:\n    // 0x402ef6\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x402eff\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x402efe\n    return 0;\n  lab_0x402eb8:;\n    int64_t v20 = v8 + 16; // 0x402eb8\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x402ef6\n        goto lab_0x402ef6;\n    }\n    goto lab_0x402ec1_2;\n    // 0x402ec1\n    goto lab_0x402ec1_2;\n}\n"
        },
        {
            "funcName": "function_402f10",
            "funcStartAddr": "402f10",
            "funcEndAddr": "403058",
            "decompiledFuncCode": "int64_t function_402f10(uint64_t a1, int64_t a2) {\n    // 0x402f10\n    int128_t v1; // 0x402f10\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x402f23\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x402f27\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x402f2e\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x402f40\n            while (*(int64_t *)v7 == 0) {\n                // 0x402f40\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x402f7d\n                    goto lab_0x402f7d;\n                }\n            }\n        }\n    }\n  lab_0x402f7d:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x402f8c\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x402f10\n    int128_t v10; // 0x402f10\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x403023\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x40302c\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x402fc3;\n        } else {\n            goto lab_0x403039;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x402fb6\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x403039;\n        } else {\n            goto lab_0x402fc3;\n        }\n    }\n  lab_0x402fc3:\n    // 0x402fc3\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x402fc7\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x402fc7\n    goto lab_0x402fcc;\n  lab_0x403039:\n    // 0x403039\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x40304a\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x402fcc;\n  lab_0x402fcc:\n    // 0x402fcc\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_403060",
            "funcStartAddr": "403060",
            "funcEndAddr": "4030b3",
            "decompiledFuncCode": "int64_t function_403060(int64_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int64_t v1 = function_402b00(a1, result); // 0x40306a\n    int64_t v2 = *(int64_t *)v1; // 0x40306f\n    if (v2 == 0) {\n        // 0x40309d\n        return 0;\n    }\n    // 0x403083\n    if (v2 == result) {\n        // 0x40309d\n        return result;\n    }\n    int64_t v3 = v1; // 0x403094\n    int64_t result2 = v2; // 0x403092\n    while ((char)v1 == 0) {\n        // 0x403094\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x40309d\n            break;\n        }\n        // 0x403080\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x40309d\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x40309d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4030c0",
            "funcStartAddr": "4030c0",
            "funcEndAddr": "403108",
            "decompiledFuncCode": "int64_t function_4030c0(uint64_t a1) {\n    int64_t result = 0; // 0x4030c5\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x4030d7\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x4030ce\n    if (v1 <= a1) {\n        // 0x4030d7\n        return result;\n    }\n    int64_t v2 = a1; // 0x4030d5\n    int64_t v3 = *(int64_t *)v2; // 0x4030e9\n    result = v3;\n    while (v3 == 0) {\n        // 0x4030e0\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x4030d7\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x4030d7\n    return result;\n}\n"
        },
        {
            "funcName": "function_403110",
            "funcStartAddr": "403110",
            "funcEndAddr": "40317a",
            "decompiledFuncCode": "int64_t function_403110(int64_t a1, int64_t a2) {\n    int64_t v1 = function_402b00(a1, a2); // 0x40311c\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x403138\n    while (*(int64_t *)v2 != a2) {\n        // 0x403130\n        if (v3 == 0) {\n            goto lab_0x403146;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x403170\n        return *(int64_t *)v3;\n    }\n  lab_0x403146:;\n    int64_t v4 = v1 + 16; // 0x403158\n    int64_t result = 0; // 0x40315f\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x403150\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x403163\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x403163\n    return result;\n}\n"
        },
        {
            "funcName": "function_403180",
            "funcStartAddr": "403180",
            "funcEndAddr": "4031e4",
            "decompiledFuncCode": "int64_t function_403180(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x403186\n    int64_t result = 0; // 0x40318a\n    if (*v1 <= a1) {\n      lab_0x4031a1:\n        // 0x4031a1\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x40318f\n    int64_t v4 = v2; // 0x403195\n    int64_t v5; // 0x403180\n    int64_t v6; // 0x403180\n    int64_t v7; // 0x4031c8\n    int64_t v8; // 0x4031d1\n    int64_t v9; // 0x4031b1\n    int64_t v10; // 0x4031b5\n    if (v3 != 0) {\n        // 0x4031a8\n        if (v2 >= a3) {\n            // break -> 0x4031a1\n            break;\n        }\n        // 0x4031ad\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x4031c5\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x4031c0\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x4031c5\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x403197\n    result = v11;\n    while (*v1 > v12) {\n        // 0x40318f\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x4031a8\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x4031a1\n                break;\n            }\n            // 0x4031ad\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x4031c5\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x4031c0\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x4031c5\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x403197\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x4031a1\n    return result;\n}\n"
        },
        {
            "funcName": "function_4031f0",
            "funcStartAddr": "4031f0",
            "funcEndAddr": "403268",
            "decompiledFuncCode": "int64_t function_4031f0(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x403201\n    int64_t result = 0; // 0x403205\n    if (v1 <= a1) {\n      lab_0x403224:\n        // 0x403224\n        return result;\n    }\n    int64_t v2 = a1; // 0x40321a\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x403218\n    int64_t v5 = v2; // 0x403218\n    int64_t v6 = v3; // 0x403218\n    int64_t v7; // 0x4031f0\n    int64_t v8; // 0x403248\n    int64_t v9; // 0x40324c\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x403248\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x403258\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x403248\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x403212\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x403248\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x403258\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x403248\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x40321a\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x403224\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403270",
            "funcStartAddr": "403270",
            "funcEndAddr": "4032a1",
            "decompiledFuncCode": "int64_t function_403270(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x403277\n    if (v1 == 0) {\n        // 0x40329d\n        return 0;\n    }\n    int64_t result = 0; // 0x403277\n    v2++;\n    char v3 = *(char *)v2; // 0x403293\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x40329d\n    return result;\n}\n"
        },
        {
            "funcName": "function_4032b0",
            "funcStartAddr": "4032b0",
            "funcEndAddr": "4032d0",
            "decompiledFuncCode": "int64_t function_4032b0(int64_t a1) {\n    // 0x4032b0\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_4032d0",
            "funcStartAddr": "4032d0",
            "funcEndAddr": "40345a",
            "decompiledFuncCode": "int64_t function_4032d0(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x4032d0\n    int128_t v1; // 0x4032d0\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x40330a\n    int64_t result = (int64_t)mem; // 0x40330a\n    if (mem == NULL) {\n        // 0x4033ba\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x40331b\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x4032d0\n    int128_t v6; // 0x4032d0\n    if (a2 == 0) {\n        // 0x4033d0\n        *v4 = (int64_t)&g3;\n        int64_t v7 = function_402c50(v3); // 0x4033d8\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x4033dd\n        if ((char)v7 == 0) {\n            // 0x4033b0\n            free(mem);\n            // 0x4033ba\n            return 0;\n        }\n        // 0x4033e9\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x403433;\n        } else {\n            goto lab_0x4033ee;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_402c50(v3) == 0) {\n            // 0x4033b0\n            free(mem);\n            // 0x4033ba\n            return 0;\n        }\n        // 0x403335\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_402a40(a1); // 0x403343\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x4033b0\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x4033b0\n                free(mem);\n                // 0x4033ba\n                return 0;\n            }\n            // 0x403361\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x4033b0\n                free(mem);\n                // 0x4033ba\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x403372\n            int64_t v10 = (int64_t)mem2; // 0x403372\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x4033b0\n                free(mem);\n                // 0x4033ba\n                return 0;\n            }\n            // 0x40337f\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x402ae0 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x402af0 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x4033ba\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x403428\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x4033ee;\n        } else {\n            goto lab_0x403433;\n        }\n    }\n  lab_0x403433:\n    // 0x403433\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x403443\n    int128_t v13 = v6; // 0x40344c\n    int128_t v14 = __asm_addss(v12, v12); // 0x40344c\n    goto lab_0x4033f7;\n  lab_0x4033ee:\n    // 0x4033ee\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x4033f7;\n  lab_0x4033f7:\n    // 0x4033f7\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x4033b0\n    free(mem);\n    // 0x4033ba\n    return 0;\n}\n"
        },
        {
            "funcName": "function_403460",
            "funcStartAddr": "403460",
            "funcEndAddr": "403508",
            "decompiledFuncCode": "int64_t function_403460(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40346a\n    uint64_t v2 = *v1; // 0x40346a\n    int64_t result; // 0x403460\n    if (v2 <= a1) {\n      lab_0x4034f3:\n        // 0x4034f3\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x403478\n    while (*v6 == 0) {\n        // 0x403478\n        v7 = v5 + 16;\n        int64_t v8; // 0x403460\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x4034f3\n            goto lab_0x4034f3;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x403489\n    int64_t v10 = *v9; // 0x403489\n    int64_t v11 = *v3; // 0x40348e\n    int64_t v12 = v11; // 0x403495\n    int64_t v13 = v10; // 0x403495\n    int64_t result2 = v11; // 0x403495\n    int64_t * v14; // 0x4034ae\n    int64_t v15; // 0x4034ae\n    int64_t v16; // 0x4034aa\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x4034a5\n            v16 = *v3;\n        }\n        // 0x4034ae\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x4034a0\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x4034a5\n                v16 = *v3;\n            }\n            // 0x4034ae\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x4034cd\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x4034e0\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x4034ed\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40347c\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x403478\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x4034f3\n                goto lab_0x4034f3;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x403489\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x4034a5\n                v16 = *v3;\n            }\n            // 0x4034ae\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x4034a0\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x4034a5\n                    v16 = *v3;\n                }\n                // 0x4034ae\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x4034cd\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x4034f3\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403510",
            "funcStartAddr": "403510",
            "funcEndAddr": "4035e6",
            "decompiledFuncCode": "int64_t function_403510(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40351f\n    uint64_t v2 = *v1; // 0x40351f\n    int64_t v3 = a1; // 0x403523\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x403573;\n    } else {\n        // 0x403525\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x403573;\n        } else {\n            // 0x40352c\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x403541\n                int64_t v6; // 0x403538\n                while (v5 == 0) {\n                    // 0x403538\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x403573\n                        goto lab_0x403573;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x403558\n                int64_t v8 = v7; // 0x40355f\n                int64_t v9 = v5; // 0x40355f\n                int64_t v10; // 0x403510\n                int64_t v11; // 0x403558\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x403550\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x403553\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x403566\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x403541\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x403538\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x403573\n                            goto lab_0x403573;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x403553\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x403550\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x403553\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x403561\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x403573;\n            } else {\n                goto lab_0x4035ac;\n            }\n        }\n    }\n  lab_0x403573:\n    // 0x403573\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x403580\n        int64_t v14 = v13; // 0x403587\n        int64_t v15 = v2; // 0x403587\n        int64_t v16; // 0x403590\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x403590\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x4035a1\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x4035a1\n        int64_t v18 = v15; // 0x4035aa\n        int64_t v19 = v17; // 0x4035aa\n        while (v15 > v17) {\n            // 0x403580\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x403590\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x4035a1\n                v15 = *v1;\n            }\n            // 0x4035a1\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x4035ac;\n  lab_0x4035ac:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x4035ac\n    if (v20 == 0) {\n        // 0x4035d1\n        free(NULL);\n        free((int64_t *)a1);\n        return &g51;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x4035c0\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x4035cf\n    while (v21 != 0) {\n        // 0x4035c0\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x4035d1\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g51;\n}\n"
        },
        {
            "funcName": "function_4035f0",
            "funcStartAddr": "4035f0",
            "funcEndAddr": "4037ea",
            "decompiledFuncCode": "int64_t function_4035f0(int64_t a1, uint64_t a2) {\n    // 0x4035f0\n    int128_t v1; // 0x4035f0\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x4035fb\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x4035f0\n        if (a2 < 0) {\n            // 0x403770\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x403780\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x403610\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x403619\n        __asm_comiss(__asm_divss_4(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x403762\n        return 0;\n    }\n    uint64_t nmemb = function_402a40(a2); // 0x403653\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x403762\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40368b\n    if (*v6 == nmemb) {\n        // 0x403762\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40369d\n    int64_t v7 = (int64_t)mem; // 0x40369d\n    int64_t v8 = v7; // bp-104, 0x4036a2\n    if (mem == NULL) {\n        // 0x403762\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x4036fa\n    int64_t v10 = *v9; // 0x4036fa\n    int64_t v11 = function_402cd0(&v8, a1, 0); // 0x403703\n    int64_t result = v11 & 0xffffffff; // 0x403708\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x4036c4\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x403726\n        function_402cd0(v13, v12, 1);\n        function_402cd0(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x4037b0\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x403762\n    return result;\n}\n"
        },
        {
            "funcName": "function_4037f0",
            "funcStartAddr": "4037f0",
            "funcEndAddr": "403a64",
            "decompiledFuncCode": "int64_t function_4037f0(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x4037f0\n    int128_t v1; // 0x4037f0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x4037f0\n    int64_t v5 = function_402b30(a1, a2, &v4, 0); // 0x403811\n    if (v5 != 0) {\n        // 0x40381e\n        if (a3 != NULL) {\n            // 0x403825\n            *a3 = v5;\n        }\n        // 0x403829\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x403838\n    uint64_t v7 = *v6; // 0x403838\n    int64_t v8; // 0x4037f0\n    int64_t v9; // 0x4037f0\n    int64_t v10; // 0x4037f0\n    int128_t v11; // 0x4037f0\n    int128_t v12; // 0x4037f0\n    int64_t v13; // 0x4037f0\n    if (v7 < 0) {\n        // 0x4038c0\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x4038d0\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x4038d4\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x4038d9\n        int128_t v17 = __asm_addss(v15, v15); // 0x4038dd\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x40385b;\n        } else {\n            goto lab_0x4038ea;\n        }\n    } else {\n        // 0x403841\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x403845\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x403849\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x40384e\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x4038ea;\n        } else {\n            goto lab_0x40385b;\n        }\n    }\n  lab_0x40385b:\n    // 0x40385b\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x403864\n    __asm_comiss_1(v11, v21);\n    int128_t v22 = v21; // 0x40386c\n    int128_t v23 = v11; // 0x40386c\n    if (v13 == 0) {\n        goto lab_0x403872;\n    } else {\n        goto lab_0x403911;\n    }\n  lab_0x4038ea:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x4038f7\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x4038fa\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x403903\n    __asm_comiss_1(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x403872;\n    } else {\n        goto lab_0x403911;\n    }\n  lab_0x403872:;\n    int64_t * v28 = (int64_t *)v4; // 0x403877\n    if (*v28 == 0) {\n        // 0x403988\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x403991\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x403882\n    int64_t v31 = *v30; // 0x403882\n    int64_t * v32; // 0x4037f0\n    int64_t v33; // 0x4037f0\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x4039ad\n        if (mem == NULL) {\n            // 0x403829\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x4039ad\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x403897\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x4038ad\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x403911:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x403911\n    function_402c50(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x40391a\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x40391e\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x403922\n    int128_t v44; // 0x4037f0\n    if (v42 < 0) {\n        // 0x4039e0\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x4039f0\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x403930\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x403939\n    int128_t v47; // 0x4037f0\n    int64_t v48; // 0x4037f0\n    if (v46 < 0) {\n        // 0x4039c0\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x4039cd\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x4039d0\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x403942\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x403946\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x40394b\n    __asm_comiss_1(v47, __asm_mulss_3(__asm_movaps(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x40395b\n        int128_t v53 = v52; // 0x403964\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x403a00\n            v53 = __asm_mulss_3(v52, v43);\n        }\n        // 0x40396a\n        __asm_comiss(v53, 0x5f800000);\n        // 0x403829\n        return 0xffffffff;\n    }\n    goto lab_0x403872;\n}\n"
        },
        {
            "funcName": "function_403a70",
            "funcStartAddr": "403a70",
            "funcEndAddr": "403aab",
            "decompiledFuncCode": "int64_t function_403a70(int64_t a1, int64_t a2) {\n    // 0x403a70\n    int64_t v1; // bp-16, 0x403a70\n    int64_t v2; // 0x403a70\n    int32_t v3 = function_4037f0(a1, a2, &v1, v2); // 0x403a82\n    if (v3 == -1) {\n        // 0x403a90\n        return 0;\n    }\n    // 0x403a87\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_403ab0",
            "funcStartAddr": "403ab0",
            "funcEndAddr": "403c87",
            "decompiledFuncCode": "int64_t function_403ab0(int64_t a1) {\n    // 0x403ab0\n    int128_t v1; // 0x403ab0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x403ab0\n    int64_t v5; // 0x403ab0\n    int64_t result = function_402b30(a1, v5, &v4, 1); // 0x403ac5\n    if (result == 0) {\n        // 0x403ae2\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x403ad7\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x403ae2\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x403af0\n    uint64_t v8 = *v7 - 1; // 0x403af4\n    *v7 = v8;\n    int64_t v9; // 0x403ab0\n    int64_t v10; // 0x403ab0\n    int64_t v11; // 0x403ab0\n    int128_t v12; // 0x403ab0\n    int128_t v13; // 0x403ab0\n    int64_t v14; // 0x403ab0\n    if (v8 < 0) {\n        // 0x403be0\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x403bf0\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x403bf4\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x403bf9\n        int128_t v18 = __asm_addss(v16, v16); // 0x403bfd\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x403b1c;\n        } else {\n            goto lab_0x403c0a;\n        }\n    } else {\n        // 0x403b02\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x403b06\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x403b0a\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x403b0f\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x403c0a;\n        } else {\n            goto lab_0x403b1c;\n        }\n    }\n  lab_0x403b1c:\n    // 0x403b1c\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x403b20\n    int64_t v23 = v14; // 0x403b20\n    int128_t v24 = v12; // 0x403b20\n    int64_t v25 = v10; // 0x403b20\n    int128_t v26 = v22; // 0x403b20\n    goto lab_0x403b25;\n  lab_0x403c0a:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x403c17\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x403c1a\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x403b25;\n  lab_0x403b25:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x403b25\n    __asm_comiss_1(v28, v27);\n    if (v23 == 0) {\n        // 0x403ae2\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x403b2e\n    function_402c50(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x403b37\n    int64_t v31 = *(int64_t *)v29; // 0x403b3b\n    int128_t v32; // 0x403ab0\n    if (v30 < 0) {\n        // 0x403c50\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x403c60\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x403b48\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x403b51\n    int128_t v35; // 0x403ab0\n    int64_t v36; // 0x403ab0\n    if (v34 < 0) {\n        // 0x403c30\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x403c3d\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x403c40\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x403b5e\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x403b62\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x403b67\n    __asm_comiss_1(__asm_mulss_3(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x403ae2\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x403b78\n    int128_t v41 = v40; // 0x403b81\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x403b83\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x403b88\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x403c78\n    if ((char)function_4035f0(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x403ae2\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x403baa\n    if (*v43 != 0) {\n        int64_t v44; // 0x403ab0\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x403bb8\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x403bc9\n    *v43 = 0;\n    // 0x403ae2\n    return result;\n}\n"
        },
        {
            "funcName": "function_403c90",
            "funcStartAddr": "403c90",
            "funcEndAddr": "403cb7",
            "decompiledFuncCode": "int64_t function_403c90(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x403c90\n    return (*(int64_t *)(a1 + 8) ^ function_407880(a1, a2, a3)) % a2;\n}\n"
        },
        {
            "funcName": "function_403cc0",
            "funcStartAddr": "403cc0",
            "funcEndAddr": "403ccd",
            "decompiledFuncCode": "int64_t function_403cc0(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x403cc0\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_403cd0",
            "funcStartAddr": "403cd0",
            "funcEndAddr": "403cf5",
            "decompiledFuncCode": "int64_t function_403cd0(int64_t a1, int64_t a2) {\n    // 0x403cd0\n    if (*(int64_t *)(a1 + 8) != *(int64_t *)(a2 + 8) || *(int64_t *)(a1 + 16) != *(int64_t *)(a2 + 16)) {\n        // 0x403cda\n        return 0;\n    }\n    // 0x403cea\n    return function_4059a0(a1, a2);\n}\n"
        },
        {
            "funcName": "function_403d00",
            "funcStartAddr": "403d00",
            "funcEndAddr": "403d33",
            "decompiledFuncCode": "int64_t function_403d00(int64_t str, int64_t str2) {\n    // 0x403d00\n    if (*(int64_t *)(str + 8) != *(int64_t *)(str2 + 8) || *(int64_t *)(str + 16) != *(int64_t *)(str2 + 16)) {\n        // 0x403d0c\n        return 0;\n    }\n    int32_t strcmp_rc = strcmp((char *)str, (char *)str2); // 0x403d24\n    return (int64_t)(strcmp_rc & -256) | (int64_t)(strcmp_rc == 0);\n}\n"
        },
        {
            "funcName": "function_403d40",
            "funcStartAddr": "403d40",
            "funcEndAddr": "403d55",
            "decompiledFuncCode": "int64_t function_403d40(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x403d47\n    free(v1);\n    free(v1);\n    return &g51;\n}\n"
        },
        {
            "funcName": "function_403d60",
            "funcStartAddr": "403d60",
            "funcEndAddr": "403df9",
            "decompiledFuncCode": "int64_t function_403d60(int64_t str) {\n    // 0x403d60\n    if (str == 0) {\n        // 0x403dd9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x403d6e\n    int64_t result = (int64_t)found_char_pos; // 0x403d6e\n    if (found_char_pos == NULL) {\n        // 0x403dc9\n        g39 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403d78\n    if (v1 - str < 7) {\n        // 0x403dc9\n        g39 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x403d88\n    bool v2; // 0x403d60\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403d60\n    int64_t v5 = result - 6; // 0x403d60\n    int64_t v6 = 7; // 0x403d96\n    unsigned char v7 = *(char *)v5; // 0x403d96\n    char v8 = *(char *)v4; // 0x403d96\n    char v9 = v8; // 0x403d96\n    bool v10 = false; // 0x403d96\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403da0\n    int64_t v13 = v1; // 0x403da0\n    int64_t v14 = 3; // 0x403da0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403dc9\n        g39 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403db2\n    char v16 = *(char *)v12; // 0x403db2\n    char v17 = v16; // 0x403db2\n    bool v18 = false; // 0x403db2\n    while (v15 == v16) {\n        // 0x403da2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x403dbc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x403dbe\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x403dc9\n    g39 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403e00",
            "funcStartAddr": "403e00",
            "funcEndAddr": "403ef2",
            "decompiledFuncCode": "int64_t function_403e00(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x403e14\n    int64_t result = (int64_t)v1; // 0x403e14\n    if (result != a1) {\n        // 0x403e21\n        return result;\n    }\n    int64_t v2 = function_4078c0(); // 0x403e30\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403ee6\n    if (v3 == 85) {\n        // 0x403e40\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403ed8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n            return result2;\n        }\n        char v4 = *v1; // 0x403e6e\n        int64_t result3 = v4 != 96 ? (int64_t)&g5 : (int64_t)&g8; // 0x403e7b\n        // 0x403e21\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403ed8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g4;\n        return result2;\n    }\n    char v5 = *v1; // 0x403ebd\n    int64_t result4 = v5 != 96 ? (int64_t)&g6 : (int64_t)&g7; // 0x403eca\n    // 0x403e21\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403f00",
            "funcStartAddr": "403f00",
            "funcEndAddr": "403f57",
            "decompiledFuncCode": "int64_t function_403f00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x403f00\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_403f57",
            "funcStartAddr": "403f57",
            "funcEndAddr": "405121",
            "decompiledFuncCode": "int64_t function_403f57(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403fa1\n    int64_t v3 = 0; // 0x403fa1\n    int64_t v4; // 0x403f57\n    int64_t v5; // 0x403f57\n    int64_t v6; // 0x403f57\n    int64_t v7; // 0x403f57\n    int64_t v8; // 0x403f57\n    int64_t v9; // 0x403f57\n    int64_t v10; // 0x403f57\n    int64_t v11; // 0x403f57\n    int64_t v12; // 0x403f57\n    int64_t v13; // 0x403f57\n    int64_t v14; // 0x403f57\n    int64_t v15; // 0x403f57\n    int64_t v16; // 0x403f57\n    int64_t v17; // 0x403f57\n    int64_t v18; // 0x403f57\n    int64_t result; // 0x403f57\n    int64_t v19; // 0x403f57\n    int32_t wc; // bp+132, 0x403f57\n    int64_t ps; // bp+136, 0x403f57\n    char v20; // 0x404510\n    int64_t v21; // 0x404510\n    int64_t v22; // 0x4048b8\n    int64_t v23; // 0x403f57\n    int64_t v24; // 0x4048d7\n    int32_t v25; // 0x403f57\n    while (true) {\n      lab_0x403fa8_2:\n        // 0x403fa8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403f57\n        int64_t v27; // 0x403fdc\n        while (true) {\n          lab_0x403fa8:\n            // 0x403fa8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403fb3\n            if (v15 == -1) {\n                // 0x403fb5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403fc3\n            if (v28) {\n                // break (via goto) -> 0x404728\n                goto lab_0x404728;\n            }\n            // 0x403fcc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g50 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4045bb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x404101;\n                    }\n                    // 0x4049dd\n                    v26 = v5 + 1;\n                    goto lab_0x403fa8;\n                }\n                case 7: {\n                    goto lab_0x404101;\n                }\n                case 8: {\n                    goto lab_0x404101;\n                }\n                case 9: {\n                    goto lab_0x40431a_2;\n                }\n                case 10: {\n                    goto lab_0x40431a_2;\n                }\n                case 11: {\n                    goto lab_0x404101;\n                }\n                case 12: {\n                    goto lab_0x404101;\n                }\n                case 13: {\n                    goto lab_0x40431a_2;\n                }\n                case 32: {\n                    goto lab_0x40431a_2;\n                }\n                case 33: {\n                    goto lab_0x40431a_2;\n                }\n                case 34: {\n                    goto lab_0x40431a_2;\n                }\n                case 35: {\n                    goto lab_0x4040cd;\n                }\n                case 36: {\n                    goto lab_0x40431a_2;\n                }\n                case 37: {\n                    goto lab_0x404101;\n                }\n                case 38: {\n                    goto lab_0x40431a_2;\n                }\n                case 39: {\n                    goto lab_0x40431a_2;\n                }\n                case 40: {\n                    goto lab_0x40431a_2;\n                }\n                case 41: {\n                    goto lab_0x40431a_2;\n                }\n                case 42: {\n                    goto lab_0x40431a_2;\n                }\n                case 43: {\n                    goto lab_0x404101;\n                }\n                case 44: {\n                    goto lab_0x404101;\n                }\n                case 45: {\n                    goto lab_0x404101;\n                }\n                case 46: {\n                    goto lab_0x404101;\n                }\n                case 47: {\n                    goto lab_0x404101;\n                }\n                case 48: {\n                    goto lab_0x404101;\n                }\n                case 49: {\n                    goto lab_0x404101;\n                }\n                case 50: {\n                    goto lab_0x404101;\n                }\n                case 51: {\n                    goto lab_0x404101;\n                }\n                case 52: {\n                    goto lab_0x404101;\n                }\n                case 53: {\n                    goto lab_0x404101;\n                }\n                case 54: {\n                    goto lab_0x404101;\n                }\n                case 55: {\n                    goto lab_0x404101;\n                }\n                case 56: {\n                    goto lab_0x404101;\n                }\n                case 57: {\n                    goto lab_0x404101;\n                }\n                case 58: {\n                    goto lab_0x404101;\n                }\n                case 59: {\n                    goto lab_0x40431a_2;\n                }\n                case 60: {\n                    goto lab_0x40431a_2;\n                }\n                case 61: {\n                    goto lab_0x40431a_2;\n                }\n                case 62: {\n                    goto lab_0x40431a_2;\n                }\n                case 63: {\n                    goto lab_0x40431a_2;\n                }\n                case 65: {\n                    goto lab_0x404101;\n                }\n                case 66: {\n                    goto lab_0x404101;\n                }\n                case 67: {\n                    goto lab_0x404101;\n                }\n                case 68: {\n                    goto lab_0x404101;\n                }\n                case 69: {\n                    goto lab_0x404101;\n                }\n                case 70: {\n                    goto lab_0x404101;\n                }\n                case 71: {\n                    goto lab_0x404101;\n                }\n                case 72: {\n                    goto lab_0x404101;\n                }\n                case 73: {\n                    goto lab_0x404101;\n                }\n                case 74: {\n                    goto lab_0x404101;\n                }\n                case 75: {\n                    goto lab_0x404101;\n                }\n                case 76: {\n                    goto lab_0x404101;\n                }\n                case 77: {\n                    goto lab_0x404101;\n                }\n                case 78: {\n                    goto lab_0x404101;\n                }\n                case 79: {\n                    goto lab_0x404101;\n                }\n                case 80: {\n                    goto lab_0x404101;\n                }\n                case 81: {\n                    goto lab_0x404101;\n                }\n                case 82: {\n                    goto lab_0x404101;\n                }\n                case 83: {\n                    goto lab_0x404101;\n                }\n                case 84: {\n                    goto lab_0x404101;\n                }\n                case 85: {\n                    goto lab_0x404101;\n                }\n                case 86: {\n                    goto lab_0x404101;\n                }\n                case 87: {\n                    goto lab_0x404101;\n                }\n                case 88: {\n                    goto lab_0x404101;\n                }\n                case 89: {\n                    goto lab_0x404101;\n                }\n                case 90: {\n                    goto lab_0x404101;\n                }\n                case 91: {\n                    goto lab_0x40431a_2;\n                }\n                case 92: {\n                    goto lab_0x40431a_2;\n                }\n                case 93: {\n                    goto lab_0x404101;\n                }\n                case 94: {\n                    goto lab_0x40431a_2;\n                }\n                case 95: {\n                    goto lab_0x404101;\n                }\n                case 96: {\n                    goto lab_0x40431a_2;\n                }\n                case 97: {\n                    goto lab_0x404101;\n                }\n                case 98: {\n                    goto lab_0x404101;\n                }\n                case 99: {\n                    goto lab_0x404101;\n                }\n                case 100: {\n                    goto lab_0x404101;\n                }\n                case 101: {\n                    goto lab_0x404101;\n                }\n                case 102: {\n                    goto lab_0x404101;\n                }\n                case 103: {\n                    goto lab_0x404101;\n                }\n                case 104: {\n                    goto lab_0x404101;\n                }\n                case 105: {\n                    goto lab_0x404101;\n                }\n                case 106: {\n                    goto lab_0x404101;\n                }\n                case 107: {\n                    goto lab_0x404101;\n                }\n                case 108: {\n                    goto lab_0x404101;\n                }\n                case 109: {\n                    goto lab_0x404101;\n                }\n                case 110: {\n                    goto lab_0x404101;\n                }\n                case 111: {\n                    goto lab_0x404101;\n                }\n                case 112: {\n                    goto lab_0x404101;\n                }\n                case 113: {\n                    goto lab_0x404101;\n                }\n                case 114: {\n                    goto lab_0x404101;\n                }\n                case 115: {\n                    goto lab_0x404101;\n                }\n                case 116: {\n                    goto lab_0x404101;\n                }\n                case 117: {\n                    goto lab_0x404101;\n                }\n                case 118: {\n                    goto lab_0x404101;\n                }\n                case 119: {\n                    goto lab_0x404101;\n                }\n                case 120: {\n                    goto lab_0x404101;\n                }\n                case 121: {\n                    goto lab_0x404101;\n                }\n                case 122: {\n                    goto lab_0x404101;\n                }\n                case 123: {\n                    goto lab_0x4040a5;\n                }\n                case 124: {\n                    goto lab_0x40431a_2;\n                }\n                case 125: {\n                    goto lab_0x4040a5;\n                }\n                case 126: {\n                    goto lab_0x4040cd;\n                }\n                default: {\n                    goto lab_0x4044a5;\n                }\n            }\n        }\n      lab_0x4044a5:\n        if (v23 != 1) {\n            // 0x404810\n            ps = 0;\n            int64_t len = v15; // 0x404820\n            if (v15 == -1) {\n                // 0x404822\n                len = strlen((char *)str);\n            }\n            // 0x40484e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4048af:\n                // 0x4048af\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x4048b4\n                int64_t v30 = v29 + str;\n                v24 = function_4075d0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x404e2a_2;\n                    }\n                    case -1: {\n                        goto lab_0x404e2a_2;\n                    }\n                    case -2: {\n                        // 0x404f0d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404f47\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x404f4a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404f57\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404f50\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x404e2a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x404e2a_2;\n                    }\n                    case 1: {\n                        goto lab_0x404880;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40492c\n                        char v34 = *(char *)v33; // 0x40493d\n                        unsigned char v35; // 0x403f57\n                        if (v34 < 125) {\n                            // 0x404948\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40495f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                goto lab_0x40431a_2;\n                            }\n                        }\n                        // 0x404930\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40493d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x404948\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40495f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    goto lab_0x40431a_2;\n                                }\n                            }\n                            // 0x404930\n                            v33++;\n                        }\n                        goto lab_0x404880;\n                    }\n                }\n            }\n            goto lab_0x404e2a_2;\n        } else {\n            // 0x4044f4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x404101;\n        }\n    }\n  lab_0x404728:\n    // 0x404728\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40502a\n        if (v8 > result) {\n            // 0x405033\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x404357\n        return result;\n    }\n    goto lab_0x40431a_2;\n  lab_0x404101:;\n    int64_t v56 = v13;\n    int64_t v57 = v9;\n    int64_t v58 = v16;\n    if (v23 != 0) {\n        // 0x404110\n        v4 = v58;\n        v6 = v57;\n        v10 = v56;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40431a_2;\n        }\n    }\n    int64_t v42 = result; // 0x404211\n    char v43 = v20; // 0x404211\n    int64_t v44 = v58; // 0x404211\n    v3 = v5 + 1;\n    int64_t v45 = v57; // 0x404211\n    int64_t v46 = v56; // 0x404211\n    goto lab_0x40418d;\n  lab_0x40431a_2:;\n    // 0x404357\n    char * v36; // 0x403f57\n    return function_403f00(v10, v6, str, v4, 2, v25 & -3, 0, (int64_t)v36, (int64_t)v36);\n  lab_0x404e2a_2:;\n    uint64_t v37 = v19;\n    int64_t v38 = 0x100000000 * v8 >> 32;\n    int64_t v39 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v38;\n    v13 = v39;\n    if (v37 < 2) {\n        goto lab_0x404101;\n    } else {\n        uint64_t v40 = v37 + v5; // 0x4049fe\n        int64_t v41 = v5 + 1; // 0x404ae1\n        v42 = result;\n        v43 = v20;\n        v44 = v22;\n        v3 = v41;\n        v45 = v38;\n        v46 = v39;\n        int64_t v47 = v41; // 0x404ae8\n        char v48 = v20; // 0x404ae8\n        int64_t v49 = result; // 0x404ae8\n        if (v41 < v40) {\n            uint64_t v50 = v49;\n            if (v38 > v50) {\n                // 0x404ab1\n                *(char *)(v50 + v39) = v48;\n            }\n            char v51 = *(char *)(v47 + str); // 0x404ab5\n            int64_t v52 = v50 + 1; // 0x404aba\n            int64_t v53 = v47 + 1; // 0x404ae1\n            v42 = v52;\n            v43 = v51;\n            v44 = v22;\n            v3 = v53;\n            v45 = v38;\n            v46 = v39;\n            v47 = v53;\n            while (v53 < v40) {\n                // 0x404aac\n                v50 = v52;\n                if (v38 > v50) {\n                    // 0x404ab1\n                    *(char *)(v50 + v39) = v51;\n                }\n                // 0x404ab5\n                v51 = *(char *)(v47 + str);\n                v52 = v50 + 1;\n                v53 = v47 + 1;\n                v42 = v52;\n                v43 = v51;\n                v44 = v22;\n                v3 = v53;\n                v45 = v38;\n                v46 = v39;\n                v47 = v53;\n            }\n        }\n        goto lab_0x40418d;\n    }\n  lab_0x404880:\n    // 0x404880\n    iswprint(wc);\n    int64_t v54 = v24 + v18; // 0x40489f\n    int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4048a2\n    v17 = v54;\n    v19 = v54;\n    if (v55 != 0) {\n        // break -> 0x404e2a\n        goto lab_0x404e2a_2;\n    }\n    goto lab_0x4048af;\n  lab_0x4040cd:\n    // 0x4040cd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40431a_2;\n    }\n    goto lab_0x404101;\n  lab_0x4040a5:;\n    bool v61 = v15 == 1; // 0x4040b0\n    if (v15 == -1) {\n        // 0x4040b2\n        v61 = *(char *)v1 == 0;\n    }\n    // 0x4040be\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v61) {\n        goto lab_0x404101;\n    } else {\n        goto lab_0x4040cd;\n    }\n  lab_0x40418d:;\n    int64_t v59 = v46;\n    uint64_t v60 = v42;\n    if (v60 < v45) {\n        // 0x404192\n        *(char *)(v59 + v60) = v43;\n    }\n    // 0x404196\n    v2 = v60 + 1;\n    v14 = v44;\n    v7 = v45;\n    v11 = v59;\n    goto lab_0x403fa8_2;\n}\n"
        },
        {
            "funcName": "function_405130",
            "funcStartAddr": "405130",
            "funcEndAddr": "4052ce",
            "decompiledFuncCode": "int64_t function_405130(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x405132\n    int32_t * v3 = __errno_location(); // 0x40514c\n    int64_t v4 = (int64_t)g21; // 0x405151\n    int32_t v5 = *v3; // 0x40515b\n    int64_t v6 = v4; // 0x405171\n    if (v2 >= (int64_t)*(int32_t *)&g24) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4052c9\n            function_4062c0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x405180\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x405187\n        int64_t v9; // 0x405130\n        if (g21 == &g22) {\n            int64_t v10 = function_4060d0(0, v8); // 0x4052aa\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g22); // 0x4052af\n            *(int64_t *)&g21 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4060d0(v4, v8); // 0x40519b\n            *(int64_t *)&g21 = v12;\n            v9 = v12;\n        }\n        // 0x4051aa\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g24; // 0x4051aa\n        int32_t v14 = v7; // 0x4051b1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g24 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x4051e1\n    int64_t v17 = v15 + 8; // 0x4051e4\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x4051eb\n    int64_t * v19 = (int64_t *)v16; // 0x4051ee\n    uint64_t v20 = *v19; // 0x4051ee\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x4051f1\n    int64_t result = *v21; // 0x4051f1\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x4051fc\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x405205\n    int64_t v24; // 0x405130\n    uint64_t v25 = function_403f00(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x405214\n    if (v20 > v25) {\n        // 0x40528b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x405227\n    *v19 = v26;\n    if (result != (int64_t)&g40) {\n        // 0x405237\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_406070(v26); // 0x405251\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x40526b\n    int64_t v28 = *v23; // 0x40526e\n    int64_t v29; // 0x405130\n    function_403f00(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x40528b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4052d0",
            "funcStartAddr": "4052d0",
            "funcEndAddr": "405304",
            "decompiledFuncCode": "int64_t function_4052d0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4052d7\n    int64_t result = function_406270(a1 == 0 ? (int64_t)&g41 : a1, 56); // 0x4052f6\n    return result;\n}\n"
        },
        {
            "funcName": "function_405310",
            "funcStartAddr": "405310",
            "funcEndAddr": "40531f",
            "decompiledFuncCode": "int64_t function_405310(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g41 : a1); // 0x40531c\n    return result;\n}\n"
        },
        {
            "funcName": "function_405320",
            "funcStartAddr": "405320",
            "funcEndAddr": "40532f",
            "decompiledFuncCode": "int64_t function_405320(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g41 : a1; // 0x405328\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g41;\n}\n"
        },
        {
            "funcName": "function_405330",
            "funcStartAddr": "405330",
            "funcEndAddr": "405363",
            "decompiledFuncCode": "int64_t function_405330(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g41 + 8 : a1 + 8; // 0x405349\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40534e\n    uint32_t v3 = *v2; // 0x40534e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x405352\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_405370",
            "funcStartAddr": "405370",
            "funcEndAddr": "405383",
            "decompiledFuncCode": "int64_t function_405370(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g41 + 4 : a1 + 4); // 0x40537c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_405390",
            "funcStartAddr": "405390",
            "funcEndAddr": "4053bb",
            "decompiledFuncCode": "int64_t function_405390(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g41 : a1; // 0x405398\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4053b5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4053ac\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g41;\n}\n"
        },
        {
            "funcName": "function_4053c0",
            "funcStartAddr": "4053c0",
            "funcEndAddr": "405432",
            "decompiledFuncCode": "int64_t function_4053c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g41 : a5; // 0x4053e2\n    int32_t * v2 = __errno_location(); // 0x4053eb\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x405404\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x405408\n    uint32_t v5 = *(int32_t *)v1; // 0x40540b\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x405411\n    int64_t result = function_403f00(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x40541a\n    return result;\n}\n"
        },
        {
            "funcName": "function_405440",
            "funcStartAddr": "405440",
            "funcEndAddr": "405521",
            "decompiledFuncCode": "int64_t function_405440(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g41 : a4; // 0x405462\n    int32_t * v2 = __errno_location(); // 0x405468\n    int64_t v3 = v1 + 8; // 0x40547f\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x405487\n    int32_t * v5 = (int32_t *)v1; // 0x40548a\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x405498\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x40549b\n    int64_t v8 = function_403f00(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x4054a5\n    int64_t v9 = v8 + 1; // 0x4054aa\n    int64_t result = function_406070(v9); // 0x4054bf\n    function_403f00(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x405504\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x40550d\n    return result;\n}\n"
        },
        {
            "funcName": "function_405530",
            "funcStartAddr": "405530",
            "funcEndAddr": "40553a",
            "decompiledFuncCode": "int64_t function_405530(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405530\n    return function_405440(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_405540",
            "funcStartAddr": "405540",
            "funcEndAddr": "4055d5",
            "decompiledFuncCode": "int64_t function_405540(void) {\n    uint32_t v1 = *(int32_t *)&g24; // 0x405540\n    int64_t v2 = v1; // 0x405540\n    int64_t v3 = v2; // 0x405554\n    if (v1 >= 2) {\n        int64_t v4 = &g24;\n        int64_t v5 = v4 + 16; // 0x405573\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g51;\n        while (v5 != (int64_t)g21 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x405570\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g51;\n        }\n    }\n    int64_t v6 = v3; // 0x40558d\n    if (g22 != 0x60c300) {\n        // 0x40558f\n        free((int64_t *)g22);\n        g22 = 256;\n        *(int64_t *)&g23 = (int64_t)&g40;\n        v6 = &g51;\n    }\n    int64_t result = v6; // 0x4055b1\n    if (g21 != &g22) {\n        // 0x4055b3\n        free(g21);\n        *(int64_t *)&g21 = (int64_t)&g22;\n        result = &g51;\n    }\n    // 0x4055c6\n    *(int32_t *)&g24 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4055e0",
            "funcStartAddr": "4055e0",
            "funcEndAddr": "4055f1",
            "decompiledFuncCode": "int64_t function_4055e0(void) {\n    // 0x4055e0\n    int64_t v1; // 0x4055e0\n    return function_405130(v1, v1, -1, (int64_t *)&g41);\n}\n"
        },
        {
            "funcName": "function_405600",
            "funcStartAddr": "405600",
            "funcEndAddr": "40560a",
            "decompiledFuncCode": "int64_t function_405600(void) {\n    // 0x405600\n    int64_t v1; // 0x405600\n    return function_405130(v1, v1, v1, (int64_t *)&g41);\n}\n"
        },
        {
            "funcName": "function_405610",
            "funcStartAddr": "405610",
            "funcEndAddr": "405626",
            "decompiledFuncCode": "int64_t function_405610(int64_t a1) {\n    // 0x405610\n    return function_405130(0, a1, -1, (int64_t *)&g41);\n}\n"
        },
        {
            "funcName": "function_405630",
            "funcStartAddr": "405630",
            "funcEndAddr": "405642",
            "decompiledFuncCode": "int64_t function_405630(int64_t a1, int64_t a2) {\n    // 0x405630\n    return function_405130(0, a1, a2, (int64_t *)&g41);\n}\n"
        },
        {
            "funcName": "function_405650",
            "funcStartAddr": "405650",
            "funcEndAddr": "4056b8",
            "decompiledFuncCode": "int64_t function_405650(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405660\n    return function_405130((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4056c0",
            "funcStartAddr": "4056c0",
            "funcEndAddr": "405724",
            "decompiledFuncCode": "int64_t function_4056c0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4056d0\n    return function_405130((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_405730",
            "funcStartAddr": "405730",
            "funcEndAddr": "40573c",
            "decompiledFuncCode": "int64_t function_405730(int64_t a1, int64_t a2) {\n    // 0x405730\n    return function_405650(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_405740",
            "funcStartAddr": "405740",
            "funcEndAddr": "40574f",
            "decompiledFuncCode": "int64_t function_405740(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405740\n    return function_4056c0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_405750",
            "funcStartAddr": "405750",
            "funcEndAddr": "4057c0",
            "decompiledFuncCode": "int64_t function_405750(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g41); // 0x40575d\n    int128_t v2 = __asm_movdqa(g42); // 0x405765\n    int128_t v3 = __asm_movdqa(g43); // 0x40576d\n    int64_t v4 = __asm_movaps_5(v1); // bp-72, 0x405782\n    __asm_movaps_5(v2);\n    __asm_movaps_5(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x405798\n    uint32_t v6 = *v5; // 0x405798\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40579d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_405130(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4057c0",
            "funcStartAddr": "4057c0",
            "funcEndAddr": "4057cd",
            "decompiledFuncCode": "int64_t function_4057c0(int64_t a1, int64_t a2) {\n    // 0x4057c0\n    return function_405750(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4057d0",
            "funcStartAddr": "4057d0",
            "funcEndAddr": "4057e1",
            "decompiledFuncCode": "int64_t function_4057d0(int64_t a1) {\n    // 0x4057d0\n    return function_405750(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4057f0",
            "funcStartAddr": "4057f0",
            "funcEndAddr": "4057fa",
            "decompiledFuncCode": "int64_t function_4057f0(void) {\n    // 0x4057f0\n    int64_t v1; // 0x4057f0\n    return function_405750(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_405800",
            "funcStartAddr": "405800",
            "funcEndAddr": "40586e",
            "decompiledFuncCode": "int64_t function_405800(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40581a\n    return function_405130((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405870",
            "funcStartAddr": "405870",
            "funcEndAddr": "4058dc",
            "decompiledFuncCode": "int64_t function_405870(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g41); // 0x405877\n    int128_t v2 = __asm_movdqa(g42); // 0x40587f\n    int128_t v3 = __asm_movdqa(g43); // 0x405887\n    __asm_movaps_5(v1);\n    __asm_movaps_5(v2);\n    __asm_movaps_5(v3);\n    int64_t v4 = 10; // bp-72, 0x4058a9\n    if (a2 == 0 || a3 == 0) {\n        // 0x4058d7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4058ba\n    return function_405130(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4058e0",
            "funcStartAddr": "4058e0",
            "funcEndAddr": "4058e9",
            "decompiledFuncCode": "int64_t function_4058e0(void) {\n    // 0x4058e0\n    int64_t v1; // 0x4058e0\n    return function_405870(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4058f0",
            "funcStartAddr": "4058f0",
            "funcEndAddr": "405907",
            "decompiledFuncCode": "int64_t function_4058f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4058f0\n    return function_405870(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_405910",
            "funcStartAddr": "405910",
            "funcEndAddr": "405923",
            "decompiledFuncCode": "int64_t function_405910(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405910\n    return function_405870(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_405930",
            "funcStartAddr": "405930",
            "funcEndAddr": "40593a",
            "decompiledFuncCode": "int64_t function_405930(void) {\n    // 0x405930\n    int64_t v1; // 0x405930\n    return function_405130(v1, v1, v1, &g20);\n}\n"
        },
        {
            "funcName": "function_405940",
            "funcStartAddr": "405940",
            "funcEndAddr": "405952",
            "decompiledFuncCode": "int64_t function_405940(int64_t a1, int64_t a2) {\n    // 0x405940\n    return function_405130(0, a1, a2, &g20);\n}\n"
        },
        {
            "funcName": "function_405960",
            "funcStartAddr": "405960",
            "funcEndAddr": "405971",
            "decompiledFuncCode": "int64_t function_405960(void) {\n    // 0x405960\n    int64_t v1; // 0x405960\n    return function_405130(v1, v1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_405980",
            "funcStartAddr": "405980",
            "funcEndAddr": "405996",
            "decompiledFuncCode": "int64_t function_405980(int64_t a1) {\n    // 0x405980\n    return function_405130(0, a1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_4059a0",
            "funcStartAddr": "4059a0",
            "funcEndAddr": "405ad0",
            "decompiledFuncCode": "int64_t function_4059a0(int64_t a1, int64_t a2) {\n    int64_t str = function_407790(a1, a2); // 0x4059b9\n    int64_t str2 = function_407790(a2, a2); // 0x4059c4\n    int64_t n = function_4077f0(str); // 0x4059cf\n    if (n != function_4077f0(str2) || memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) != 0) {\n        // 0x4059e4\n        return 0;\n    }\n    int64_t v1 = function_4076b0(); // 0x405a15\n    int64_t v2 = function_4076b0(); // 0x405a20\n    char * v3 = (char *)v1; // 0x405a33\n    int64_t v4; // bp-344, 0x4059a0\n    if (__xstat(1, v3, (struct stat *)&v4) != 0) {\n        // 0x405ab0\n        error(1, *__errno_location(), \"%s\", v3);\n    }\n    char * v5 = (char *)v2; // 0x405a4c\n    int64_t v6; // bp-200, 0x4059a0\n    if (__xstat(1, v5, (struct stat *)&v6) != 0) {\n        // 0x405a90\n        error(1, *__errno_location(), \"%s\", v5);\n    }\n    int64_t v7 = 0; // 0x405a64\n    // 0x405a66\n    v7 = v4 == v6;\n    // 0x405a75\n    free((int64_t *)v1);\n    free((int64_t *)v2);\n    // 0x4059e4\n    return v7 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405ad0",
            "funcStartAddr": "405ad0",
            "funcEndAddr": "405ead",
            "decompiledFuncCode": "int64_t function_405ad0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405b68\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x405aec\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405b06\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x405b4b\n    if (a6 < 10) {\n        // 0x405b5a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x405c52\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405eb0",
            "funcStartAddr": "405eb0",
            "funcEndAddr": "405ed0",
            "decompiledFuncCode": "int64_t function_405eb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405eb0\n    if (a5 == 0) {\n        // 0x405ecb\n        return function_405ad0(a1, a2, a3, a4, a5, 0, (int64_t)&g51);\n    }\n    int64_t v1 = 0; // 0x405eb7\n    v1++;\n    int64_t v2 = v1; // 0x405ec9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405ec0\n        v1++;\n        v2 = v1;\n    }\n    // 0x405ecb\n    return function_405ad0(a1, a2, a3, a4, a5, v2, (int64_t)&g51);\n}\n"
        },
        {
            "funcName": "function_405ed0",
            "funcStartAddr": "405ed0",
            "funcEndAddr": "405f30",
            "decompiledFuncCode": "int64_t function_405ed0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405ed0\n    int64_t v3 = &v2; // 0x405ed0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405f03\n    int64_t v6; // 0x405eed\n    int64_t * v7; // 0x405f0b\n    int64_t v8; // 0x405f0b\n    int64_t v9; // 0x405f17\n    if (v5 < 48) {\n        // 0x405ee0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x405f23\n            break;\n        }\n    } else {\n        // 0x405f0b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x405f23\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405f01\n    while (v4 != 9) {\n        // 0x405ef9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405ee0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x405f23\n                break;\n            }\n        } else {\n            // 0x405f0b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x405f23\n                break;\n            }\n        }\n        // 0x405ef9\n        v10 = 10;\n    }\n    // 0x405f23\n    return function_405ad0(a1, a2, a3, a4, v3, v10, (int64_t)&g51);\n}\n"
        },
        {
            "funcName": "function_405f30",
            "funcStartAddr": "405f30",
            "funcEndAddr": "405fec",
            "decompiledFuncCode": "int64_t function_405f30(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x405f30\n    int64_t v1; // bp-168, 0x405f30\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x405f30\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x405f30\n    int64_t v8; // 0x405f30\n    int64_t v9; // bp-56, 0x405f30\n    int64_t v10; // 0x405f95\n    int64_t v11; // 0x405fb9\n    if ((int32_t)v6 < 48) {\n        // 0x405f80\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405fd0\n            break;\n        }\n    } else {\n        // 0x405fb2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405fd0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x405faa\n    int64_t v13 = 10; // 0x405faa\n    while (v5 != 9) {\n        // 0x405fac\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405f80\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405fd0\n                break;\n            }\n        } else {\n            // 0x405fb2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405fd0\n                break;\n            }\n        }\n        // 0x405fa2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405fd0\n    int64_t v14; // bp-136, 0x405f30\n    int64_t result = function_405ad0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g51); // 0x405fdf\n    return result;\n}\n"
        },
        {
            "funcName": "function_405ff0",
            "funcStartAddr": "405ff0",
            "funcEndAddr": "406064",
            "decompiledFuncCode": "int64_t function_405ff0(int64_t a1) {\n    // 0x405ff0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x406053\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_406070",
            "funcStartAddr": "406070",
            "funcEndAddr": "40608a",
            "decompiledFuncCode": "int64_t function_406070(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x406074\n    if (size != 0 != (mem == NULL)) {\n        // 0x406083\n        return (int64_t)mem;\n    }\n    // 0x406085\n    function_4062c0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406090",
            "funcStartAddr": "406090",
            "funcEndAddr": "4060b1",
            "decompiledFuncCode": "int64_t function_406090(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x406093\n    int64_t v2 = v1; // 0x406093\n    if (v2 < 0) {\n        // 0x4060ab\n        function_4062c0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4060a9\n        return function_406070(v2);\n    }\n    // 0x4060ab\n    function_4062c0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4060c0",
            "funcStartAddr": "4060c0",
            "funcEndAddr": "4060c2",
            "decompiledFuncCode": "int64_t function_4060c0(void) {\n    // 0x4060c0\n    int64_t v1; // 0x4060c0\n    return function_406070(v1);\n}\n"
        },
        {
            "funcName": "function_4060d0",
            "funcStartAddr": "4060d0",
            "funcEndAddr": "406106",
            "decompiledFuncCode": "int64_t function_4060d0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4060f8\n        free(v1);\n        return (int32_t)&g51 ^ (int32_t)&g51;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4060e1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4060f0\n        return (int64_t)mem;\n    }\n    // 0x406101\n    function_4062c0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406110",
            "funcStartAddr": "406110",
            "funcEndAddr": "406131",
            "decompiledFuncCode": "int64_t function_406110(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x406113\n    int64_t v2 = v1; // 0x406113\n    if (v2 < 0) {\n        // 0x40612b\n        function_4062c0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406129\n        return function_4060d0(a1, v2);\n    }\n    // 0x40612b\n    function_4062c0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406140",
            "funcStartAddr": "406140",
            "funcEndAddr": "4061c6",
            "decompiledFuncCode": "int64_t function_406140(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40619b\n            function_4062c0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4060d0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x406183\n    if (a2 == 0) {\n        // 0x4061a8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x406188\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40619b\n        function_4062c0(a1);\n        // UNREACHABLE\n    }\n    // 0x40616a\n    *(int64_t *)a2 = v2;\n    return function_4060d0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4061d0",
            "funcStartAddr": "4061d0",
            "funcEndAddr": "406220",
            "decompiledFuncCode": "int64_t function_4061d0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4061d0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40621a\n            function_4062c0(a1);\n            // UNREACHABLE\n        }\n        // 0x4061f2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4060d0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x406205\n        *(int64_t *)a2 = 128;\n        return function_4060d0(0, 128);\n    }\n    // 0x406218\n    if (a2 < 0) {\n        // 0x40621a\n        function_4062c0(a1);\n        // UNREACHABLE\n    }\n    // 0x4061f2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4060d0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_406220",
            "funcStartAddr": "406220",
            "funcEndAddr": "406237",
            "decompiledFuncCode": "int64_t function_406220(int64_t a1, int64_t a2) {\n    // 0x406220\n    return (int64_t)memset((int64_t *)function_406070(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_406240",
            "funcStartAddr": "406240",
            "funcEndAddr": "40626e",
            "decompiledFuncCode": "int64_t function_406240(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x406247\n    if ((int64_t)v1 < 0) {\n        // 0x406269\n        function_4062c0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x406269\n        function_4062c0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40625a\n    if (mem != NULL) {\n        // 0x406264\n        return (int64_t)mem;\n    }\n    // 0x406269\n    function_4062c0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406270",
            "funcStartAddr": "406270",
            "funcEndAddr": "406298",
            "decompiledFuncCode": "int64_t function_406270(int64_t a1, int64_t a2) {\n    int64_t v1 = function_406070(a2); // 0x40627f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4062a0",
            "funcStartAddr": "4062a0",
            "funcEndAddr": "4062b3",
            "decompiledFuncCode": "int64_t function_4062a0(int64_t str) {\n    // 0x4062a0\n    return function_406270(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4062c0",
            "funcStartAddr": "4062c0",
            "funcEndAddr": "4062f1",
            "decompiledFuncCode": "int64_t function_4062c0(int64_t a1) {\n    // 0x4062c0\n    error(g19, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406300",
            "funcStartAddr": "406300",
            "funcEndAddr": "40632f",
            "decompiledFuncCode": "int64_t function_406300(int64_t a1, int64_t a2) {\n    int64_t result = function_406330(0, 0); // 0x406305\n    if (result != 0 || *__errno_location() != 12) {\n        // 0x406312\n        return result;\n    }\n    // 0x40632a\n    function_4062c0(0);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406330",
            "funcStartAddr": "406330",
            "funcEndAddr": "4067f2",
            "decompiledFuncCode": "int64_t function_406330(int32_t a1, int32_t a2) {\n    // 0x406330\n    int32_t size; // 0x406330\n    int32_t v1; // 0x406330\n    int32_t v2; // 0x406330\n    if (a2 != 0) {\n        // 0x406390\n        size = a2;\n        v1 = a2;\n        v2 = a1;\n        if (a1 == 0) {\n            goto lab_0x406362;\n        } else {\n            goto lab_0x4063ac;\n        }\n    } else {\n        // 0x406350\n        size = 0x1000;\n        if (a1 != 0) {\n            // 0x406750\n            *__errno_location() = 22;\n            // 0x406376\n            return 0;\n        }\n        goto lab_0x406362;\n    }\n  lab_0x4066f0:;\n    // 0x4066f0\n    int32_t v3; // 0x4066ea\n    int64_t v4 = v3; // 0x4066f2\n    int64_t v5; // 0x406330\n    int64_t dirp2 = v5; // 0x4066f2\n    int32_t * v6; // 0x406436\n    if (v3 != 0) {\n        goto lab_0x406701;\n    } else {\n        // 0x4066f4\n        *v6 = 2;\n        v4 = 2;\n        dirp2 = v5;\n        goto lab_0x406701;\n    }\n  lab_0x406502:;\n    // 0x406502\n    int64_t v7; // 0x406330\n    int64_t v8 = v7;\n    int64_t v9; // 0x406330\n    int64_t v10 = v9 + 19; // 0x406502\n    char * str = (char *)v10;\n    int64_t v11; // bp-200, 0x406330\n    int64_t v12; // 0x406330\n    int32_t v13; // 0x406330\n    int32_t fd; // 0x406452\n    if ((v13 & 0xf000) == 0x4000 == __fxstatat(1, fd, str, (struct stat *)&v11, 256) == 0) {\n        // 0x406535\n        if (v11 == v12) {\n            // break -> 0x406550\n            goto lab_0x406550;\n        }\n    }\n    int64_t v14 = v8; // 0x406330\n    goto lab_0x4064c0_2;\n  lab_0x4067ce_2:\n    // 0x4067ce\n    *v6 = 12;\n    v4 = 12;\n    dirp2 = v5;\n    goto lab_0x406701;\n  lab_0x406362:;\n    int64_t * mem = malloc(size); // 0x406367\n    int32_t v41 = (int64_t)mem; // 0x40636c\n    int32_t result = v41; // 0x406374\n    v1 = size;\n    v2 = v41;\n    if (mem == NULL) {\n        // 0x406376\n        return result;\n    }\n    goto lab_0x4063ac;\n  lab_0x4063ac:;\n    int32_t v42 = v2;\n    int64_t v43 = v42;\n    int64_t v44 = v1;\n    int64_t v45 = v43 + v44; // 0x4063b1\n    int64_t v46 = v45 - 1; // 0x4063c0\n    *(char *)v46 = 0;\n    int64_t v47; // 0x406330\n    int64_t v48; // 0x406330\n    int32_t * v49; // 0x406330\n    int64_t v50; // 0x406330\n    int64_t v33; // 0x406330\n    int64_t v40; // 0x406330\n    int64_t v51; // 0x406330\n    int32_t v38; // 0x406330\n    int32_t v52; // 0x406330\n    int32_t v53; // 0x406330\n    if (__lxstat(1, \".\", (struct stat *)&v11) < 0) {\n        goto lab_0x406728;\n    } else {\n        // 0x4063d6\n        if (__lxstat(1, \"/\", (struct stat *)&v11) < 0) {\n            goto lab_0x406728;\n        } else {\n            // 0x406401\n            v47 = v44;\n            v48 = v43;\n            v52 = v42;\n            v51 = v46;\n            v50 = v45;\n            if (true) {\n                goto lab_0x406648;\n            } else {\n                // 0x406436\n                v6 = __errno_location();\n                int32_t v54 = v1; // 0x406443\n                int32_t v55 = v42; // 0x406443\n                int64_t v56 = v11; // 0x406443\n                int64_t v57 = v46; // 0x406443\n                int64_t v58 = 0; // 0x406443\n                int32_t fd2 = -100; // 0x406443\n                int64_t dirp3; // 0x406330\n                while (true) {\n                    // 0x406446\n                    dirp3 = v58;\n                    v38 = v55;\n                    fd = openat(fd2, \"..\", O_RDONLY);\n                    if (fd < 0) {\n                        // break -> 0x406777\n                        break;\n                    }\n                    // 0x406462\n                    if (__fxstat(1, fd, (struct stat *)&v11) != 0) {\n                        int64_t v59 = (int64_t)*v6; // 0x406788\n                        v40 = v59;\n                        if (dirp3 == 0) {\n                            goto lab_0x40676d;\n                        } else {\n                            // 0x406791\n                            closedir((struct __dirstream *)dirp3);\n                            v40 = v59;\n                            goto lab_0x40676d;\n                        }\n                    }\n                    // 0x40647b\n                    v12 = v56;\n                    int32_t v60 = v54;\n                    if (dirp3 != 0) {\n                        // 0x406480\n                        if (closedir((struct __dirstream *)dirp3) != 0) {\n                            // 0x406769\n                            v40 = (int64_t)*v6;\n                            goto lab_0x40676d;\n                        }\n                    }\n                    struct __dirstream * dirp = fdopendir(fd); // 0x4064a7\n                    if (dirp == NULL) {\n                        // 0x406769\n                        v40 = (int64_t)*v6;\n                        goto lab_0x40676d;\n                    }\n                    // 0x4064b8\n                    v5 = (int64_t)dirp;\n                    v14 = false;\n                    while (true) {\n                      lab_0x4064c0_2:;\n                        int64_t v15 = v14; // 0x406330\n                        int64_t v16; // 0x406330\n                        int64_t v17; // 0x406330\n                        while (true) {\n                            int64_t v18 = v15;\n                            *v6 = 0;\n                            struct dirent * v19 = readdir(dirp); // 0x4064cb\n                            int64_t v20; // 0x406330\n                            int64_t v21; // 0x406330\n                            if (v19 == NULL) {\n                                int32_t v22 = *v6; // 0x4066a0\n                                v3 = v22;\n                                if ((char)v18 == 0 || v22 != 0) {\n                                    goto lab_0x4066f0;\n                                }\n                                // 0x4066ad\n                                rewinddir(dirp);\n                                struct dirent * v23 = readdir(dirp); // 0x4066b8\n                                if (v23 == NULL) {\n                                    // 0x4066ea\n                                    v3 = *v6;\n                                    goto lab_0x4066f0;\n                                }\n                                int64_t v24 = (int64_t)v23;\n                                v9 = v24;\n                                v7 = 0;\n                                v21 = v24;\n                                v20 = 0;\n                                if (*(char *)(v24 + 19) != 46) {\n                                    goto lab_0x406502;\n                                }\n                            } else {\n                                int64_t v25 = (int64_t)v19;\n                                v17 = v25;\n                                v16 = v18;\n                                v21 = v25;\n                                v20 = v18;\n                                if (*(char *)(v25 + 19) != 46) {\n                                    // break -> 0x4064e3\n                                    break;\n                                }\n                            }\n                            int64_t v26 = v20;\n                            int64_t v27 = v21;\n                            int64_t v28 = v27 + 20; // 0x4066d0\n                            if (*(char *)v28 != 0) {\n                                // 0x4066da\n                                v17 = v27;\n                                v16 = v26;\n                                if (*(int16_t *)v28 != 46) {\n                                    // break -> 0x4064e3\n                                    break;\n                                }\n                            }\n                            // 0x4064c0\n                            v15 = v26;\n                        }\n                        int64_t v29 = v16;\n                        int64_t v30 = v17;\n                        v9 = v30;\n                        v7 = v29;\n                        if ((char)v29 == 0) {\n                            goto lab_0x406502;\n                        } else {\n                            // 0x4064e8\n                            v9 = v30;\n                            v7 = 1;\n                            int64_t v31 = v29; // 0x4064fd\n                            int64_t v32; // 0x406330\n                            if (v11 == v12 && *(int64_t *)v30 != v32) {\n                                // 0x4064c0\n                                v14 = v31;\n                                goto lab_0x4064c0_2;\n                            } else {\n                                goto lab_0x406502;\n                            }\n                        }\n                    }\n                  lab_0x406550:;\n                    int64_t v61 = v38; // 0x406558\n                    uint64_t v62 = v57 - v61; // 0x406558\n                    int32_t len = strlen(str); // 0x40655d\n                    uint64_t v63 = (int64_t)len; // 0x40655d\n                    int32_t v64 = v60; // 0x406568\n                    int32_t v65 = v38; // 0x406568\n                    int64_t dest_mem = v57; // 0x406568\n                    if (v62 <= v63) {\n                        if (a2 != 0) {\n                            // 0x4067e0\n                            *v6 = 34;\n                            v4 = 34;\n                            dirp2 = v5;\n                            goto lab_0x406701;\n                        }\n                        uint64_t v66 = (int64_t)v60; // 0x406576\n                        int64_t v67 = len >= v60 ? v63 : v66; // 0x406581\n                        uint64_t v68 = v67 + v66; // 0x406585\n                        if (v68 < v66) {\n                            goto lab_0x4067ce_2;\n                        }\n                        // 0x406598\n                        v64 = v68;\n                        int64_t * mem2 = realloc((int64_t *)v61, v64); // 0x4065a0\n                        if (mem2 == NULL) {\n                            goto lab_0x4067ce_2;\n                        }\n                        int64_t v69 = (int64_t)mem2; // 0x4065a0\n                        int64_t v70 = v62 + v69;\n                        v65 = v69;\n                        dest_mem = (int64_t)memcpy((int64_t *)(v70 + v67), (int64_t *)v70, v60 - (int32_t)v62);\n                    }\n                    int32_t v71 = v65;\n                    int32_t v72 = v64;\n                    int64_t v73 = (int64_t)memcpy((int64_t *)(dest_mem - v63), (int64_t *)v10, len) - 1; // 0x4065fd\n                    *(char *)v73 = 47;\n                    v54 = v72;\n                    v55 = v71;\n                    v56 = v11;\n                    v57 = v73;\n                    v58 = v5;\n                    fd2 = fd;\n                    // 0x40662e\n                    v53 = v71;\n                    v49 = v6;\n                    if (closedir(dirp) != 0) {\n                        goto lab_0x406730;\n                    } else {\n                        int64_t v74 = v71;\n                        int64_t v75 = v72;\n                        v47 = v75;\n                        v48 = v74;\n                        v52 = v71;\n                        v51 = v73;\n                        v50 = v74 + v75;\n                        goto lab_0x406648;\n                    }\n                }\n                int64_t v76 = (int64_t)*v6; // 0x406777\n                v4 = v76;\n                dirp2 = dirp3;\n                v33 = v76;\n                if (dirp3 == 0) {\n                    goto lab_0x406709;\n                } else {\n                    goto lab_0x406701;\n                }\n            }\n        }\n    }\n  lab_0x406728:\n    // 0x406728\n    v53 = v42;\n    v49 = __errno_location();\n    goto lab_0x406730;\n  lab_0x406730:;\n    int64_t v77 = (int64_t)*v49; // 0x406736\n    int64_t v34 = v77; // 0x40673a\n    int32_t * v35 = v49; // 0x40673a\n    int32_t * v36 = v49; // 0x40673a\n    int32_t v37 = v53; // 0x40673a\n    int64_t v39 = v77; // 0x40673a\n    if (a1 != 0) {\n        goto lab_0x406711;\n    } else {\n        goto lab_0x40673c;\n    }\n  lab_0x406711:\n    // 0x406711\n    *v35 = (int32_t)v34;\n    // 0x406376\n    return 0;\n  lab_0x40673c:\n    // 0x40673c\n    free((int64_t *)(int64_t)v37);\n    v34 = v39;\n    v35 = v36;\n    goto lab_0x406711;\n  lab_0x406648:\n    // 0x406648\n    if (v51 == v47 - 1 + v48) {\n        // 0x4067b7\n        int64_t v78; // 0x406330\n        int64_t v79 = v78 - 1; // 0x4067bc\n        *(char *)v79 = 47;\n    }\n    int64_t * v80 = (int64_t *)v48; // 0x406672\n    int32_t v81 = v50 - v51; // 0x406672\n    memmove(v80, (int64_t *)v51, v81);\n    int32_t mem3 = a1; // 0x40667d\n    if (a2 == 0) {\n        // 0x4067a0\n        mem3 = (int64_t)realloc(v80, v81);\n    }\n    int32_t v82 = mem3;\n    int32_t result2 = v82 == 0 ? v52 : v82;\n    // 0x406376\n    return result2;\n  lab_0x406709:\n    // 0x406709\n    v34 = v33;\n    v35 = v6;\n    v36 = v6;\n    v37 = v38;\n    v39 = v33;\n    if (a1 == 0) {\n        goto lab_0x40673c;\n    } else {\n        goto lab_0x406711;\n    }\n  lab_0x406701:\n    // 0x406701\n    closedir((struct __dirstream *)dirp2);\n    v33 = v4;\n    goto lab_0x406709;\n  lab_0x40676d:\n    // 0x40676d\n    close(fd);\n    v33 = v40;\n    goto lab_0x406709;\n}\n"
        },
        {
            "funcName": "function_406800",
            "funcStartAddr": "406800",
            "funcEndAddr": "4068df",
            "decompiledFuncCode": "int64_t function_406800(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40680c\n    uint32_t v2 = *v1; // 0x40680c\n    int64_t v3 = a2 & 0xffffffff; // 0x406811\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x406814\n    uint64_t v5 = (int64_t)*v4; // 0x406814\n    int64_t v6; // 0x406882\n    if (v3 <= v5) {\n      lab_0x40687c_2:\n        // 0x40687c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x406802\n    int64_t v8 = v2; // 0x406800\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40687c\n        goto lab_0x40687c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x406838\n    int64_t v17; // 0x406846\n    int64_t * v18; // 0x406860\n    int64_t * v19; // 0x406863\n    int64_t v20; // 0x40686e\n    int64_t v21; // 0x406846\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x406843\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x406860\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x406877\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40687c\n            goto lab_0x40687c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40687c\n            goto lab_0x40687c_2;\n        }\n        // 0x406832\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4068bb\n    int64_t * v23 = (int64_t *)v22; // 0x4068c0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4068c3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4068c0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4068d7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40682d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40687c\n            goto lab_0x40687c_2;\n        }\n        // 0x406832\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x406843\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x406860\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x406877\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40687c\n                goto lab_0x40687c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40687c\n                goto lab_0x40687c_2;\n            }\n            // 0x406832\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4068a0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4068c0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4068d7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40687c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4068e0",
            "funcStartAddr": "4068e0",
            "funcEndAddr": "406efc",
            "decompiledFuncCode": "int64_t function_4068e0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4068ff\n    int64_t v2 = *v1; // 0x4068ff\n    char * str2 = (char *)v2; // 0x40690c\n    char c = *str2; // 0x40690c\n    int64_t v3 = v2; // 0x406938\n    int64_t v4 = 0; // 0x4068e0\n    int32_t v5; // 0x4068e0\n    int64_t v6; // 0x4068e0\n    int64_t v7; // 0x4068e0\n    int64_t v8; // 0x4068e0\n    int64_t v9; // 0x4068e0\n    int64_t v10; // 0x4068e0\n    int64_t v11; // 0x4068e0\n    int64_t v12; // 0x4068e0\n    int64_t v13; // 0x4068e0\n    int64_t str3; // 0x4068e0\n    int64_t v14; // 0x4068e0\n    int64_t v15; // 0x4068e0\n    int64_t v16; // 0x4068e0\n    int64_t v17; // 0x4068e0\n    int32_t v18; // 0x4068e0\n    int32_t v19; // 0x4068e0\n    int32_t v20; // 0x4068e0\n    int32_t v21; // 0x4068e0\n    int32_t v22; // 0x4068e0\n    int32_t v23; // 0x4068e0\n    int32_t v24; // 0x4068e0\n    int32_t v25; // 0x4068e0\n    int32_t v26; // 0x4068e0\n    int32_t v27; // 0x4068e0\n    int32_t v28; // 0x4068e0\n    int32_t v29; // 0x4068e0\n    int64_t nmemb; // 0x4068e0\n    int64_t v30; // 0x4068e0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40693c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x406938\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x406948\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40694e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x406918\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40697c\n                int64_t v34; // 0x4068e0\n                int64_t v35; // 0x4068e0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x406985\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x406b00;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x406996\n                int64_t v37 = *(int64_t *)v36; // 0x40699a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x406970\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x406985\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x406b00;\n                        }\n                    }\n                    // 0x406996\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4069e6:\n                    // 0x4069e6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x406a40;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x406bb0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x406a40;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x406b60\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x406a0a;\n                                } else {\n                                    // 0x406b6c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x406a0a;\n                                    } else {\n                                        // 0x406b7a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x406a0a;\n                                        } else {\n                                            goto lab_0x406a40;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x406a0a;\n                            }\n                        }\n                    }\n                }\n              lab_0x406a51:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x406c26\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x406dd2\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x406df2\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x406e3f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x406e59\n                            int64_t v45; // 0x406e5b\n                            if (*(char *)v42 != 0) {\n                                // 0x406e5b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x406e53\n                            while (v17 + nmemb != v42) {\n                                // 0x406e55\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x406e5b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x406e48\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x406e80\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x406c34\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x406d8f\n                        free((int64_t *)v17);\n                    }\n                    // 0x406c89\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x406ca0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x406b4e\n                    return 63;\n                }\n                // 0x406a70\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x406af4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x406b00:;\n                    int32_t * v49 = (int32_t *)a7; // 0x406b10\n                    uint32_t v50 = *v49; // 0x406b10\n                    int64_t v51 = v50; // 0x406b10\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x406b1a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x406b23\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x406d4f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x406cfa\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x406b4e\n                            return 63;\n                        }\n                        // 0x406b98\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x406eaf\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x406dad\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x406dc0\n                                // 0x406b4e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x406cbe\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x406cd2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x406b3b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x406b3e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x406b42\n                    int64_t result = v59; // 0x406b48\n                    if (v58 != 0) {\n                        // 0x406b4a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x406b4e\n                    return result;\n                }\n            } else {\n                // 0x40694e\n                v5 = v32;\n            }\n            // break -> 0x406a75\n            break;\n        }\n    }\n    // 0x406a75\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x406a8d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x406a97\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x406b4e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x406bd9\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x406ac6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x406ad6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x406a40:\n    // 0x406a40\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x406a40\n    int64_t v63 = *(int64_t *)v62; // 0x406a44\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x406a51\n        goto lab_0x406a51;\n    }\n    goto lab_0x4069e6;\n  lab_0x406a0a:\n    // 0x406a0a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4068e0\n    int32_t v65; // 0x4068e0\n    int32_t v66; // 0x4068e0\n    if (v27 != 0) {\n        goto lab_0x406a40;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x406bc0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x406a40;\n            } else {\n                goto lab_0x406a31;\n            }\n        } else {\n            // 0x406a25\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x406d1c\n                int64_t v67 = (int64_t)mem; // 0x406d1c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x406a40;\n                } else {\n                    // 0x406d2f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x406a31;\n                }\n            } else {\n                goto lab_0x406a31;\n            }\n        }\n    }\n  lab_0x406a31:\n    // 0x406a31\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x406a40;\n}\n"
        },
        {
            "funcName": "function_406f00",
            "funcStartAddr": "406f00",
            "funcEndAddr": "4074c6",
            "decompiledFuncCode": "int64_t function_406f00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x406f21\n    if (v3 < 1) {\n        // 0x4070de\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x406f1d\n    int32_t v5 = *(int32_t *)a7; // 0x406f29\n    uint64_t v6 = a1 & 0xffffffff; // 0x406f2b\n    int64_t v7 = v2; // 0x406f30\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x406f33\n    *v8 = 0;\n    int64_t v9; // 0x406f00\n    int64_t v10; // 0x406f00\n    int64_t v11; // 0x406f00\n    int64_t v12; // 0x406f00\n    int64_t str; // 0x406f00\n    int64_t v13; // 0x406f00\n    int64_t v14; // 0x406f00\n    int64_t v15; // 0x406f00\n    int64_t v16; // 0x406f00\n    int64_t v17; // 0x406f00\n    int32_t v18; // 0x406f00\n    char v19; // 0x406f00\n    if (v5 == 0) {\n        // 0x407118\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x406f4a;\n    } else {\n        // 0x406f43\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x406f90\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x406f93\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x407058;\n            } else {\n                int64_t v22 = v7 + 1; // 0x406fa6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x406fb6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40706c;\n                } else {\n                    goto lab_0x406fc8;\n                }\n            }\n        } else {\n            goto lab_0x406f4a;\n        }\n    }\n  lab_0x406f4a:\n    // 0x406f4a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x406f50\n    *v24 = 0;\n    int64_t v25; // 0x406f00\n    int64_t v26; // 0x406f00\n    int64_t v27; // 0x406f00\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x407040\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40704d;\n        }\n        case 43: {\n            // 0x407350\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40704d;\n        }\n        default: {\n            // 0x406f6c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4072cf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4073e8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40704d;\n                } else {\n                    // 0x4072dd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x406f7a;\n                }\n            } else {\n                goto lab_0x406f7a;\n            }\n        }\n    }\n  lab_0x407058:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40705f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x406fc8;\n    } else {\n        goto lab_0x40706c;\n    }\n  lab_0x406f7a:\n    // 0x406f7a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40704d;\n  lab_0x40704d:\n    // 0x40704d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x407058;\n  lab_0x406fc8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x406fc8\n    int64_t v31 = v30; // 0x406fc8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x406fca\n    if ((int64_t)*v32 > v31) {\n        // 0x406fcf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x406fd2\n    if (*v33 > v30) {\n        // 0x406fd7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x406fda\n    int64_t v35 = v31; // 0x406fde\n    int64_t v36 = v15; // 0x406fde\n    int64_t v37; // 0x406f00\n    int64_t v38; // 0x406f00\n    int64_t v39; // 0x406f00\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x407148\n        int64_t v41 = v40; // 0x407148\n        v2 = v41;\n        int64_t v42; // 0x406f00\n        if (*v33 == v40) {\n            // 0x407330\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x407338\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x407154\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x407158\n                function_406800(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x407168\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x407171\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40717a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x407191\n            int64_t v47 = v45 & 0xffffffff; // 0x407195\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40719e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4071a4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4071a6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x407180\n            int64_t v49 = v48 & 0xffffffff; // 0x407180\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x407191\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40719e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4071a4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4071a6;\n                    }\n                }\n                // 0x407180\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x407348\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4071a6;\n    } else {\n        goto lab_0x406fe4;\n    }\n  lab_0x40706c:\n    // 0x40706c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40706f\n    int64_t v51 = v12; // 0x40706f\n    int64_t v52 = v14; // 0x40706f\n    if (*(char *)v10 == 0) {\n        goto lab_0x406fc8;\n    } else {\n        goto lab_0x407075;\n    }\n  lab_0x406fe4:;\n    int32_t v53 = v35; // 0x406fe4\n    int64_t v54; // 0x406f00\n    int64_t v55; // 0x406f00\n    int64_t v56; // 0x406f00\n    int64_t v57; // 0x406f00\n    int64_t v58; // 0x406f00\n    int64_t v59; // 0x406f00\n    char * v60; // 0x406f00\n    int64_t v61; // 0x406f00\n    int64_t v62; // 0x406ff9\n    int64_t v63; // 0x406f00\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x407133\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x407136;\n    } else {\n        // 0x406fec\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x406f00\n        int64_t v66 = v65 ? -1 : 1; // 0x407000\n        int64_t v67 = (int64_t)\"--\"; // 0x406f00\n        int64_t v68 = v62; // 0x406f00\n        int64_t v69 = 3; // 0x407000\n        unsigned char v70 = *(char *)v68; // 0x407000\n        char v71 = *(char *)v67; // 0x407000\n        char v72 = v71; // 0x407000\n        bool v73 = false; // 0x407000\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4070f0\n            if (*(char *)v62 == 45) {\n                // 0x4071b0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4071b0\n                if (c == 0) {\n                    goto lab_0x4070fa;\n                } else {\n                    // 0x4071bd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x407240;\n                    } else {\n                        if (c == 45) {\n                            // 0x407423\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x407295;\n                        } else {\n                            // 0x4071ce\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x407240;\n                            } else {\n                                // 0x4071d3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4071f4;\n                                } else {\n                                    // 0x4071da\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x407240;\n                                    } else {\n                                        goto lab_0x4071f4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4070fa;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x407010\n            v2 = v75;\n            int32_t v76 = *v32; // 0x407013\n            int64_t v77 = v35 + 1; // 0x407016\n            int32_t v78 = v77; // 0x407019\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x407380\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x407027\n                    function_406800(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x407035\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x407136;\n        }\n    }\n  lab_0x407075:;\n    // 0x407075\n    int64_t v79; // bp-104, 0x406f00\n    int64_t v80 = &v79; // 0x406f0a\n    int64_t v81 = v50 + 1; // 0x407075\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40707c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x407081\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x407085\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x407089\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x407091\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x407096\n    int32_t c2 = v84; // 0x407096\n    char * found_char_pos = strchr(str2, c2); // 0x407096\n    int64_t v87 = *v82; // 0x40709b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4070a5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4070b0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4073a0\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40736d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4070de\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x407096\n    char v91 = *(char *)(v90 + 1); // 0x4070cb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x407085\n        if (v91 != 58) {\n            // 0x4070de\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x4072f4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4073f8\n                *v8 = 0;\n            } else {\n                // 0x4073dc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40731e\n            *v83 = 0;\n            // 0x4070de\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x4072fe\n        if (v93 != 0) {\n            // 0x407390\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40731e\n            *v83 = 0;\n            // 0x4070de\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x407311\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40731e\n            *v83 = 0;\n            // 0x4070de\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40745a\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40740a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x407411\n        // 0x40731e\n        *v83 = 0;\n        // 0x4070de\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x407269\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40726b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x407490\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x407441\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x407448\n            // 0x4070de\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x407276\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40727a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x407295;\n  lab_0x4071a6:\n    // 0x4071a6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x406fe4;\n  lab_0x407295:;\n    int64_t v99 = function_4068e0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4072b3\n    // 0x4070de\n    return v99 & 0xffffffff;\n  lab_0x407136:;\n    int32_t v100 = v55; // 0x407136\n    if (v100 != (int32_t)v59) {\n        // 0x40713a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4070de\n    return 0xffffffff;\n  lab_0x4070fa:\n    // 0x4070fa\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x407101\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4070de\n    return v99 & 0xffffffff;\n  lab_0x407240:\n    // 0x407240\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x407075;\n  lab_0x4071f4:\n    // 0x4071f4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4068e0(v6, a2, str, a4, a5, v57, v1, v11, &g10); // 0x40721a\n    if ((int32_t)v101 != -1) {\n        // 0x4070de\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40722f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x407240;\n}\n"
        },
        {
            "funcName": "function_4074d0",
            "funcStartAddr": "4074d0",
            "funcEndAddr": "407526",
            "decompiledFuncCode": "int64_t function_4074d0(int64_t a1) {\n    // 0x4074d0\n    *(int32_t *)&g44 = g27;\n    *(int32_t *)&g45 = g26;\n    int64_t v1; // 0x4074d0\n    int64_t result = function_406f00(v1, v1, v1, v1, v1, v1, &g44, a1 & 0xffffffff); // 0x4074f6\n    g27 = *(int32_t *)&g44;\n    g49 = g47;\n    *(int32_t *)&g25 = g46;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407530",
            "funcStartAddr": "407530",
            "funcEndAddr": "407548",
            "decompiledFuncCode": "int64_t function_407530(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407530\n    return function_4074d0(1);\n}\n"
        },
        {
            "funcName": "function_407550",
            "funcStartAddr": "407550",
            "funcEndAddr": "407563",
            "decompiledFuncCode": "int64_t function_407550(int64_t a1, int64_t a2, char * a3, char (**a4)[13], int32_t a5, int64_t a6) {\n    // 0x407550\n    return function_4074d0(0);\n}\n"
        },
        {
            "funcName": "function_407570",
            "funcStartAddr": "407570",
            "funcEndAddr": "407585",
            "decompiledFuncCode": "int64_t function_407570(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407570\n    return function_406f00(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_407590",
            "funcStartAddr": "407590",
            "funcEndAddr": "4075a6",
            "decompiledFuncCode": "int64_t function_407590(void) {\n    // 0x407590\n    return function_4074d0(0);\n}\n"
        },
        {
            "funcName": "function_4075b0",
            "funcStartAddr": "4075b0",
            "funcEndAddr": "4075c8",
            "decompiledFuncCode": "int64_t function_4075b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4075b0\n    return function_406f00(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4075d0",
            "funcStartAddr": "4075d0",
            "funcEndAddr": "40764a",
            "decompiledFuncCode": "int64_t function_4075d0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4075db\n    int64_t v2 = (int64_t)&g11; // 0x4075db\n    int32_t * pwc; // 0x4075d0\n    int64_t v3; // 0x4075d0\n    int64_t n; // 0x4075d0\n    if (a2 == 0) {\n        goto lab_0x407622;\n    } else {\n        // 0x4075dd\n        if (a3 == 0) {\n            // 0x407608\n            return -2;\n        }\n        // 0x4075e9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x407622;\n        } else {\n            goto lab_0x4075f4;\n        }\n    }\n  lab_0x407622:\n    // 0x407622\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4075d0\n    pwc = (int32_t *)&v4;\n    goto lab_0x4075f4;\n  lab_0x4075f4:;\n    char * wstr = (char *)v3; // 0x4075fa\n    int64_t ps; // 0x4075d0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4075fa\n    int64_t result = v5; // 0x4075fa\n    if (v5 < 0xfffffffe) {\n        // 0x407608\n        return result;\n    }\n    int64_t result2 = result; // 0x407639\n    if ((char)function_407820(0, v3) == 0) {\n        // 0x40763b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x407608\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407650",
            "funcStartAddr": "407650",
            "funcEndAddr": "4076ad",
            "decompiledFuncCode": "int64_t function_407650(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x407657\n    int64_t v2; // 0x407650\n    int64_t result = function_407e30(a1, v2); // 0x407668\n    if ((v2 & 32) != 0) {\n        // 0x407690\n        if ((int32_t)result == 0) {\n            // 0x407694\n            *__errno_location() = 0;\n        }\n        // 0x40768a\n        return 0xffffffff;\n    }\n    // 0x407671\n    if ((int32_t)result == 0) {\n        // 0x40768a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x407678\n    if (v1 == 0) {\n        // 0x40767a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40768a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4076b0",
            "funcStartAddr": "4076b0",
            "funcEndAddr": "4076c8",
            "decompiledFuncCode": "int64_t function_4076b0(void) {\n    // 0x4076b0\n    int64_t v1; // 0x4076b0\n    int64_t result = function_407730(v1); // 0x4076b4\n    if (result != 0) {\n        // 0x4076be\n        return result;\n    }\n    // 0x4076c3\n    function_4062c0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4076d0",
            "funcStartAddr": "4076d0",
            "funcEndAddr": "40772d",
            "decompiledFuncCode": "int64_t function_4076d0(int64_t a1) {\n    // 0x4076d0\n    int64_t v1; // 0x4076d0\n    uint64_t v2 = (int64_t)((char)v1 == 47); // 0x4076de\n    int64_t v3 = function_407790(a1, v1); // 0x4076e2\n    int64_t result = v3 - a1; // 0x4076ea\n    if (result <= v2 || *(char *)(v3 - 1) != 47) {\n        // 0x407713\n        return result;\n    }\n    int64_t result2 = result;\n    result2--;\n    while (result2 != v2) {\n        // 0x407700\n        if (*(char *)(a1 - 1 + result2) != 47) {\n            // break -> 0x407713\n            break;\n        }\n        result2--;\n    }\n    // 0x407713\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407730",
            "funcStartAddr": "407730",
            "funcEndAddr": "40778a",
            "decompiledFuncCode": "int64_t function_407730(int64_t a1) {\n    // 0x407730\n    int64_t v1; // 0x407730\n    int64_t v2 = v1;\n    int64_t * mem = malloc((int32_t)(v2 + 1 + (int64_t)(v2 == 0))); // 0x40774f\n    if (mem == NULL) {\n        // 0x407776\n        return (int64_t)mem;\n    }\n    int64_t * dest_mem = memcpy(mem, (int64_t *)a1, (int32_t)v2); // 0x407765\n    int64_t v3; // 0x407730\n    if (v2 == 0) {\n        // 0x407780\n        *(char *)dest_mem = 46;\n        v3 = 1;\n    }\n    int64_t result = (int64_t)dest_mem; // 0x407765\n    *(char *)(v3 + result) = 0;\n    // 0x407776\n    return result;\n}\n"
        },
        {
            "funcName": "function_407790",
            "funcStartAddr": "407790",
            "funcEndAddr": "4077eb",
            "decompiledFuncCode": "int64_t function_407790(int64_t a1, int64_t a2) {\n    // 0x407790\n    int64_t v1; // 0x407790\n    char v2 = v1;\n    int64_t v3 = a1; // 0x407799\n    int64_t v4 = a1; // 0x407799\n    char v5 = v2; // 0x407799\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x4077a4\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x4077a0\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x4077ae\n    if (v5 == 0) {\n      lab_0x4077ea:\n        // 0x4077ea\n        return result;\n    }\n    int64_t v7 = v4; // 0x4077d8\n    int64_t v8 = 0; // 0x4077d8\n    int64_t v9; // 0x407790\n    int64_t v10; // 0x4077da\n    char v11; // 0x4077de\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x4077d5\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x4077da\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x4077d5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x4077ca\n    char v14 = *(char *)v13; // 0x4077ce\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x4077d5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x4077da\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x4077d5\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x4077c0\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x4077ea\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4077f0",
            "funcStartAddr": "4077f0",
            "funcEndAddr": "40781b",
            "decompiledFuncCode": "int64_t function_4077f0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x4077f4\n    int64_t result = len; // 0x4077f4\n    if (len < 2) {\n        // 0x40780a\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x407808\n    while (*(char *)(v1 + str) == 47) {\n        // 0x407810\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x40780a\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x40780a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407820",
            "funcStartAddr": "407820",
            "funcEndAddr": "40787e",
            "decompiledFuncCode": "int64_t function_407820(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x407826\n    if (locale == NULL) {\n        // 0x407853\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x407826\n    bool v2; // 0x407820\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g12; // 0x407820\n    int64_t v5 = v1; // 0x407820\n    int64_t v6 = 2; // 0x407845\n    unsigned char v7 = *(char *)v5; // 0x407845\n    char v8 = *(char *)v4; // 0x407845\n    char v9 = v8; // 0x407845\n    bool v10 = false; // 0x407845\n    while (v7 == v8) {\n        // 0x407838\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x407851\n    int64_t v13 = v1; // 0x407851\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x407853\n        return 0;\n    }\n    int64_t v14 = 6; // 0x407851\n    unsigned char v15 = *(char *)v13; // 0x40786d\n    char v16 = *(char *)v12; // 0x40786d\n    char v17 = v16; // 0x40786d\n    bool v18 = false; // 0x40786d\n    while (v15 == v16) {\n        // 0x407860\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_407880",
            "funcStartAddr": "407880",
            "funcEndAddr": "4078b6",
            "decompiledFuncCode": "int64_t function_407880(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x407886\n    if (v1 == 0) {\n        // 0x4078b0\n        return 0;\n    }\n    uint64_t v3 = 0;\n    v2++;\n    int64_t v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v1; // 0x407898\n    char v5 = *(char *)v2; // 0x40789b\n    while (v5 != 0) {\n        // 0x407890\n        v3 = v4;\n        v2++;\n        v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v5;\n        v5 = *(char *)v2;\n    }\n    // 0x4078a3\n    return v4 % a2;\n}\n"
        },
        {
            "funcName": "function_4078c0",
            "funcStartAddr": "4078c0",
            "funcEndAddr": "407e22",
            "decompiledFuncCode": "int64_t function_4078c0(void) {\n    char * v1 = nl_langinfo(14); // 0x4078d6\n    char * v2 = g48; // 0x4078db\n    char * v3; // 0x4078c0\n    int64_t v4; // 0x4078c0\n    int64_t v5; // 0x4078c0\n    int64_t v6; // 0x4078c0\n    int64_t v7; // 0x4078c0\n    int32_t size; // 0x4078c0\n    int32_t size2; // 0x4078c0\n    int32_t len; // 0x407992\n    int64_t v8; // 0x407992\n    char * env_val; // 0x40797d\n    if (v2 == NULL) {\n        // 0x407978\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x4079e5;\n        } else {\n            // 0x40798a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x4079e5;\n            } else {\n                // 0x40798f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40797d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x407e15\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x4079e5;\n                    } else {\n                        // 0x407d89\n                        size2 = len + 14;\n                        goto lab_0x4079ab;\n                    }\n                } else {\n                    goto lab_0x4079ab;\n                }\n            }\n        }\n    } else {\n        // 0x4078c0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x4078fa;\n    }\n  lab_0x407c2c:;\n    // 0x407c2c\n    struct _IO_FILE * stream; // 0x407a6b\n    int32_t v10 = __uflow(stream); // 0x407c2f\n    int64_t v11; // 0x4078c0\n    int64_t v12 = v11; // 0x407c39\n    int64_t v13; // 0x4078c0\n    int64_t v14 = v13; // 0x407c39\n    int32_t v15 = v10; // 0x407c39\n    int64_t v16; // 0x4078c0\n    int64_t v17 = v16; // 0x407c39\n    int64_t v18 = v11; // 0x407c39\n    int64_t v19 = v13; // 0x407c39\n    int64_t v20 = v16; // 0x407c39\n    if (v10 == -1) {\n        // break -> 0x407c3f\n        goto lab_0x407c3f;\n    }\n    goto lab_0x407ab9;\n  lab_0x407aae:;\n    // 0x407aae\n    int64_t v90; // 0x4078c0\n    int64_t * v32; // 0x407aa0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4078c0\n    v12 = v89;\n    int64_t v91; // 0x4078c0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4078c0\n    v17 = v92;\n    goto lab_0x407ab9;\n  lab_0x407ab9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4078c0\n    int32_t v25; // bp-120, 0x4078c0\n    int32_t v26; // bp-184, 0x4078c0\n    int64_t v27; // 0x407a6b\n    int64_t v28; // 0x407a88\n    int64_t v29; // 0x407a8d\n    int64_t * v30; // 0x407aa4\n    switch (c) {\n        case 32: {\n            goto lab_0x407aa0;\n        }\n        case 10: {\n            goto lab_0x407aa0;\n        }\n        case 9: {\n            goto lab_0x407aa0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x407c91\n            int32_t v33; // 0x4078c0\n            char v34; // 0x4078c0\n            int32_t v35; // 0x407c9e\n            if (v31 < *v30) {\n                // 0x407c70\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x407c9b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x407c91\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x407c70\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x407c9b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x407c80\n                v36 = v33;\n            }\n            // 0x407d6f\n            if (v36 == -1) {\n                // break -> 0x407c3f\n                break;\n            }\n            goto lab_0x407aa0;\n        }\n        default: {\n            // 0x407acf\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x407c3f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x407af8\n            int64_t v39 = v37 + 4; // 0x407afa\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x407b06\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x407b08\n            while (v41 == 0) {\n                // 0x407af8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x407b26\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x407b32\n            int64_t v45 = v43 + 4; // 0x407b34\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x407b40\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x407b42\n            while (v47 == 0) {\n                // 0x407b32\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x407b2f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x407b58\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x407b68\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x407b6c\n            int64_t v52 = v51 + v48; // 0x407b75\n            int64_t * mem; // 0x4078c0\n            int64_t v53; // 0x4078c0\n            int64_t v54; // 0x4078c0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x407cab\n                int64_t v56 = v55 + 3; // 0x407cb7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x407b91\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x407ba0\n            if (mem == NULL) {\n                // 0x407dcc\n                free((int64_t *)v21);\n                function_407e30(v27, v53);\n                v24 = (int64_t)&g11;\n                goto lab_0x407a44;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x407bb8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x407bc2\n            uint32_t v62 = (int32_t)v59; // 0x407bc5\n            int64_t v63; // 0x4078c0\n            if (v62 >= 8) {\n                // 0x407cd4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x407cee\n                int64_t v66 = v61 - v65; // 0x407cf2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x407cfd\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x407d0e\n                    int64_t v70 = v69 & 0xffffffff; // 0x407d0e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x407d0b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x407d9f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x407bd7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x407bdb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x407beb\n            int64_t v74 = v60 - 1; // 0x407bef\n            uint32_t v75 = (int32_t)v73; // 0x407bf4\n            int64_t v76; // 0x4078c0\n            if (v75 >= 8) {\n                // 0x407d22\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x407d2c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x407d3c\n                int64_t v80 = v74 - v79; // 0x407d40\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x407d4b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x407d5b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x407d59\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x407db6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x407dbe\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x407c06\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x407c0a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x407e03\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x407c1e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x407aae;\n            } else {\n                goto lab_0x407c2c;\n            }\n        }\n    }\n  lab_0x407aa0:;\n    int64_t v93 = v23; // 0x4078c0\n    int64_t v94 = v22; // 0x4078c0\n    int64_t v95 = v21; // 0x4078c0\n    goto lab_0x407aa0_2;\n  lab_0x4079e5:;\n    int64_t * mem3 = malloc(size); // 0x4079e5\n    int64_t v97 = (int64_t)&g11; // 0x4079f0\n    int64_t v98; // 0x4078c0\n    int64_t path; // 0x4078c0\n    if (mem3 == NULL) {\n        goto lab_0x4079c2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x4079e5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x407a06;\n    }\n  lab_0x4078fa:;\n    int64_t str = v1 == NULL ? (int64_t)&g11 : (int64_t)v1; // 0x4078ed\n    char v100 = *v3; // 0x4078fa\n    int64_t v101; // 0x4078c0\n    if (v100 == 0) {\n        // 0x407954\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4078c0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4078c0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x407940\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x407947;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x407910\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40791d\n        char v107 = *(char *)v106; // 0x407922\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x407954\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40792b\n    v104 = v103 + 1;\n  lab_0x407947:\n    // 0x407954\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4079c2:;\n    char * v108 = (char *)v97;\n    g48 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x4078fa;\n  lab_0x407a06:;\n    int64_t v109 = v98 + path; // 0x407a06\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x407a32\n    v24 = (int64_t)&g11;\n    if (fd >= 0) {\n        // 0x407a61\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x407d92\n            close(fd);\n            v24 = (int64_t)&g11;\n        } else {\n            // 0x407a85\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x407aa0_2:;\n                uint64_t v96 = *v32; // 0x407aa0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x407c2c;\n                } else {\n                    goto lab_0x407aae;\n                }\n            }\n          lab_0x407c3f:\n            // 0x407c3f\n            function_407e30(v27, v19);\n            v24 = (int64_t)&g11;\n            if (v18 != 0) {\n                // 0x407c5e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x407a44;\n  lab_0x4079ab:;\n    int64_t * mem4 = malloc(size2); // 0x4079ab\n    v97 = (int64_t)&g11;\n    if (mem4 != NULL) {\n        // 0x407a51\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x407a06;\n    } else {\n        goto lab_0x4079c2;\n    }\n  lab_0x407a44:\n    // 0x407a44\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4079c2;\n}\n"
        },
        {
            "funcName": "function_407e30",
            "funcStartAddr": "407e30",
            "funcEndAddr": "407eab",
            "decompiledFuncCode": "int64_t function_407e30(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x407e37\n    if (fileno(stream) < 0) {\n        // 0x407e97\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x407e4a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x407e7b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x407e97\n            return fclose(stream);\n        }\n    }\n    // 0x407e4c\n    if ((int32_t)function_407eb0(a1, v1) == 0) {\n        // 0x407e97\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x407e58\n    int32_t v3 = *v2; // 0x407e60\n    int64_t result = fclose(stream); // 0x407e6e\n    if (v3 != 0) {\n        // 0x407ea0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x407e70\n    return result;\n}\n"
        },
        {
            "funcName": "function_407eb0",
            "funcStartAddr": "407eb0",
            "funcEndAddr": "407ef0",
            "decompiledFuncCode": "int64_t function_407eb0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x407eca\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x407eca\n        return fflush(stream);\n    }\n    // 0x407ed8\n    function_407ef0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_407ef0",
            "funcStartAddr": "407ef0",
            "funcEndAddr": "407f47",
            "decompiledFuncCode": "int64_t function_407ef0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x407ef0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x407efa\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x407f2b\n    int64_t result = -1; // 0x407f34\n    if (v1 != -1) {\n        // 0x407f36\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x407f42\n    return result;\n}\n"
        },
        {
            "funcName": "function_407f50",
            "funcStartAddr": "407f50",
            "funcEndAddr": "407fad",
            "decompiledFuncCode": "int64_t function_407f50(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407f50\n    return function_4015b0();\n}\n"
        },
        {
            "funcName": "function_407fb0",
            "funcStartAddr": "407fb0",
            "funcEndAddr": "407fb1",
            "decompiledFuncCode": "int64_t function_407fb0(void) {\n    // 0x407fb0\n    int64_t result; // 0x407fb0\n    return result;\n}\n"
        },
        {
            "funcName": "function_407fc0",
            "funcStartAddr": "407fc0",
            "funcEndAddr": "407fd8",
            "decompiledFuncCode": "int64_t function_407fc0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407fc0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_407fd8",
            "funcStartAddr": "407fd8",
            "funcEndAddr": "407ff8",
            "decompiledFuncCode": "int64_t function_407fd8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x407fe2\n    while (*(int64_t *)v1 != -1) {\n        // 0x407fe3\n        v1 -= 8;\n    }\n    // 0x407ff4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_readlink.elf"
}