{
    "funcInfo": [
        {
            "funcName": "function_4017c0",
            "funcStartAddr": "4017c0",
            "funcEndAddr": "4017c5",
            "decompiledFuncCode": "int64_t function_4017c0(void) {\n    // 0x4017c0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017c5",
            "funcStartAddr": "4017c5",
            "funcEndAddr": "4017ca",
            "decompiledFuncCode": "int64_t function_4017c5(void) {\n    // 0x4017c5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017ca",
            "funcStartAddr": "4017ca",
            "funcEndAddr": "4017cf",
            "decompiledFuncCode": "int64_t function_4017ca(void) {\n    // 0x4017ca\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017cf",
            "funcStartAddr": "4017cf",
            "funcEndAddr": "4017d4",
            "decompiledFuncCode": "int64_t function_4017cf(void) {\n    // 0x4017cf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017d4",
            "funcStartAddr": "4017d4",
            "funcEndAddr": "4017d9",
            "decompiledFuncCode": "int64_t function_4017d4(void) {\n    // 0x4017d4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017d9",
            "funcStartAddr": "4017d9",
            "funcEndAddr": "4017de",
            "decompiledFuncCode": "int64_t function_4017d9(void) {\n    // 0x4017d9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017e0",
            "funcStartAddr": "4017e0",
            "funcEndAddr": "401a02",
            "decompiledFuncCode": "int64_t function_4017e0(int64_t a1, int64_t a2) {\n    uint64_t v1 = a1 & 0xffffffff; // 0x4017eb\n    function_402330(a2);\n    setlocale(LC_ALL, (char *)&g9);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x4017e0\n    function_4062f0(0x402250, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    g35 = 0;\n    g36 = 0;\n    g37 = 0;\n    int64_t v3 = function_405b50(v1, a2, \"bsw:0::1::2::3::4::5::6::7::8::9::\", &g2, 0, v2); // 0x401856\n    int32_t v4 = v3; // 0x40185b\n    int64_t v5 = 80; // 0x40185e\n    if (v4 != -1) {\n        // 0x401864\n        char v6; // bp-42, 0x4017e0\n        int64_t v7 = &v6;\n        int32_t v8 = v4; // 0x40185b\n        int64_t v9 = v3; // 0x401856\n        int64_t v10 = 80; // 0x4018a6\n        uint32_t v11; // 0x4017e0\n        while (true) {\n            // 0x401864\n            int64_t v12; // 0x4017e0\n            int64_t v13 = v12;\n            int64_t v14 = v10;\n            int32_t v15 = v8; // 0x401867\n            int32_t v16 = v8; // 0x401867\n            int64_t v17 = v9; // 0x401867\n            if (v8 < 58) {\n              lab_0x4018b0:\n                // 0x4018b0\n                v11 = v16;\n                if (v11 <= 47) {\n                    // break -> 0x4018b5\n                    break;\n                }\n                int64_t v18 = g50; // 0x401920\n                if (v18 == 0) {\n                    // 0x40194c\n                    v6 = v17;\n                    g50 = v7;\n                } else {\n                    // 0x40192c\n                    g50 = v18 - 1;\n                }\n            } else {\n                while (true) {\n                    int32_t v19 = v15;\n                    if (v19 == 115) {\n                        // 0x401910\n                        g37 = 1;\n                    } else {\n                        if (v19 == 119) {\n                            // break -> 0x401877\n                            break;\n                        }\n                        if (v19 != 98) {\n                            // 0x4018f5\n                            function_401ed0(1);\n                            // UNREACHABLE\n                        }\n                        // 0x401940\n                        g36 = 1;\n                    }\n                    int64_t v20 = function_405b50(v1, a2, \"bsw:0::1::2::3::4::5::6::7::8::9::\", &g2, 0, v13); // 0x401856\n                    int32_t v21 = v20; // 0x40185b\n                    v5 = v14;\n                    if (v21 == -1) {\n                        goto lab_0x401966_2;\n                    }\n                    // 0x401864\n                    v15 = v21;\n                    v16 = v21;\n                    v17 = v20;\n                    if (v21 < 58) {\n                        goto lab_0x4018b0;\n                    }\n                }\n            }\n            char * v22 = dcgettext(NULL, \"invalid number of columns\", 5); // 0x401883\n            v10 = function_404870(g50, 1, -10, (int64_t *)&g9, (int64_t)v22, 0);\n            v9 = function_405b50(v1, a2, \"bsw:0::1::2::3::4::5::6::7::8::9::\", &g2, 0, 0);\n            v8 = v9;\n            v12 = 0;\n            v5 = v10;\n            if (v8 == -1) {\n                goto lab_0x401966_2;\n            }\n        }\n        if (v11 == -131) {\n            // 0x4018bc\n            function_4043d0((int64_t)g27, \"fold\", \"GNU coreutils\", (int64_t)g16, \"David MacKenzie\", 0);\n            exit(0);\n            // UNREACHABLE\n        }\n        if (v11 != -130) {\n            // 0x4018f5\n            function_401ed0(1);\n            // UNREACHABLE\n        }\n        // 0x401907\n        function_401ed0(0);\n        // UNREACHABLE\n    }\n  lab_0x401966_2:;\n    uint32_t v23 = *(int32_t *)0x60a25c; // 0x401966\n    int64_t v24; // 0x4017e0\n    int64_t v25; // 0x4017e0\n    if (v23 == (int32_t)a1) {\n        goto lab_0x4019ea;\n    } else {\n        uint64_t v26 = (int64_t)v23; // 0x401966\n        v24 = 1;\n        v25 = a2;\n        if (v1 > v26) {\n            int64_t v27 = 1; // 0x40198e\n            int64_t v28 = 0x100000000 * v26 / 0x20000000 + a2;\n            int64_t v29 = v28 + 8; // 0x401997\n            v27 &= function_401b40(*(int64_t *)v28, v5);\n            v24 = v27;\n            v25 = v5;\n            while (v29 != a2 + 8 + 8 * (((v26 ^ 0xffffffff) + a1 & 0xffffffff) + (int64_t)v23)) {\n                // 0x401990\n                v28 = v29;\n                v29 = v28 + 8;\n                v27 &= function_401b40(*(int64_t *)v28, v5);\n                v24 = v27;\n                v25 = v5;\n            }\n        }\n        goto lab_0x4019a7;\n    }\n  lab_0x4019ea:\n    // 0x4019ea\n    v24 = function_401b40((int64_t)\"-\", v5) & 0xffffffff;\n    v25 = v5;\n    goto lab_0x4019a7;\n  lab_0x4019a7:;\n    uint64_t v30 = v24;\n    if (g35 == 0 || (int32_t)function_404ce0((int64_t)g28, v25) != -1) {\n        // 0x4019b0\n        return v30 % 256 ^ 1;\n    }\n    // 0x4019d2\n    error(1, *__errno_location(), \"-\");\n    goto lab_0x4019ea;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401a10",
            "funcEndAddr": "401a3b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401a10\n    int64_t v1; // 0x401a10\n    __libc_start_main(0x4017e0, (int32_t)a4, (char **)&v1, (void (*)())0x406280, (void (*)())0x4062e0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401a3b",
            "funcStartAddr": "401a3b",
            "funcEndAddr": "401a5a",
            "decompiledFuncCode": "int64_t function_401a3b(void) {\n    // 0x401a3b\n    return &g26;\n}\n"
        },
        {
            "funcName": "function_401a5a",
            "funcStartAddr": "401a5a",
            "funcEndAddr": "401a91",
            "decompiledFuncCode": "int64_t function_401a5a(void) {\n    // 0x401a5a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401a91",
            "funcStartAddr": "401a91",
            "funcEndAddr": "401ae8",
            "decompiledFuncCode": "int64_t function_401a91(void) {\n    // 0x401a91\n    if (g31 != 0) {\n        // 0x401ae7\n        int64_t result; // 0x401a91\n        return result;\n    }\n    int64_t v1 = g32; // 0x401ac4\n    int64_t result2; // 0x401ad6\n    if (g32 >= ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x401ad6\n        result2 = function_401a3b();\n        g31 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g13 - (int64_t)&g12 >> 3) - 1) {\n        // 0x401ac6\n        v1++;\n    }\n    // 0x401aba\n    g32 = v1;\n    // 0x401ad6\n    result2 = function_401a3b();\n    g31 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401ae8",
            "funcStartAddr": "401ae8",
            "funcEndAddr": "401aed",
            "decompiledFuncCode": "int64_t function_401ae8(void) {\n    // 0x401ae8\n    return function_401a5a();\n}\n"
        },
        {
            "funcName": "function_401af0",
            "funcStartAddr": "401af0",
            "funcEndAddr": "401b39",
            "decompiledFuncCode": "int64_t function_401af0(int64_t a1, int64_t a2) {\n    // 0x401af0\n    if (g36 == 0) {\n        // 0x401af9\n        switch ((char)a2) {\n            case 8: {\n                // 0x401b18\n                return a1 == 0 ? 0 : a1 - 1;\n            }\n            case 13: {\n                // 0x401b11\n                return 0;\n            }\n            case 9: {\n                // 0x401b30\n                return a1 + 8 & -8;\n            }\n        }\n    }\n    // 0x401b11\n    return a1 + 1;\n}\n"
        },
        {
            "funcName": "function_401b40",
            "funcStartAddr": "401b40",
            "funcEndAddr": "401ece",
            "decompiledFuncCode": "int64_t function_401b40(int64_t file_path, uint64_t a2) {\n    // 0x401b40\n    bool v1; // 0x401b40\n    int64_t v2 = v1 ? -1 : 1;\n    int64_t v3 = (int64_t)\"-\"; // 0x401b40\n    int64_t v4 = file_path; // 0x401b40\n    int64_t v5 = 2; // 0x401b65\n    unsigned char v6 = *(char *)v4; // 0x401b65\n    char v7 = *(char *)v3; // 0x401b65\n    char v8 = v7; // 0x401b65\n    bool v9 = false; // 0x401b65\n    while (v6 == v7) {\n        v5--;\n        v3 += v2;\n        v4 += v2;\n        v8 = v6;\n        v9 = true;\n        if (v5 == 0) {\n            // break -> \n            break;\n        }\n        v6 = *(char *)v4;\n        v7 = *(char *)v3;\n        v8 = v7;\n        v9 = false;\n    }\n    unsigned char v10 = v8;\n    struct _IO_FILE * file; // 0x401b40\n    if ((v6 >= v10 && !v9) != v6 < v10) {\n        // 0x401ea0\n        file = fopen((char *)file_path, \"r\");\n    } else {\n        // 0x401b74\n        g35 = 1;\n        file = g28;\n    }\n    int32_t * err_num = __errno_location(); // 0x401b82\n    int64_t v11; // 0x401b40\n    int64_t v12; // 0x401b40\n    int64_t v13; // 0x401b40\n    int64_t v14; // 0x401b40\n    int64_t v15; // 0x401b40\n    int64_t v16; // 0x401b40\n    int64_t n; // 0x401b40\n    int64_t v17; // 0x401b40\n    int64_t v18; // 0x401b40\n    int64_t * v19; // 0x401ba8\n    if (file == NULL) {\n        goto lab_0x401e58;\n    } else {\n        // 0x401b95\n        v18 = (int64_t)file;\n        int64_t v20; // 0x401b40\n        function_402300(v18, 2, v20);\n        v19 = (int64_t *)(v18 + 8);\n        v11 = 0;\n        v14 = 0;\n        while (true) {\n          lab_0x401ba8_2:;\n            uint64_t v21 = *v19; // 0x401ba8\n            v17 = v21;\n            v12 = v11;\n            v15 = v14;\n            v13 = v11;\n            v16 = v14;\n            if (v21 >= *(int64_t *)(v18 + 16)) {\n                goto lab_0x401c22;\n            } else {\n                goto lab_0x401bb2;\n            }\n        }\n      lab_0x401c31:\n        // 0x401c31\n        if (n != 0) {\n            // 0x401dc0\n            fwrite_unlocked((int64_t *)g33, 1, (int32_t)n, g27);\n            if ((*(char *)file & 32) == 0) {\n                goto lab_0x401c4b;\n            } else {\n                goto lab_0x401de5;\n            }\n        } else {\n            // 0x401c41\n            if ((*(char *)file & 32) != 0) {\n                goto lab_0x401de5;\n            } else {\n                goto lab_0x401c4b;\n            }\n        }\n    }\n  lab_0x401c22:\n    // 0x401c22\n    n = v16;\n    uint32_t v22 = __uflow(file); // 0x401c25\n    int64_t v23 = v22; // 0x401c2f\n    int64_t v24 = v13; // 0x401c2f\n    int64_t v25 = n; // 0x401c2f\n    if (v22 == -1) {\n        // break -> 0x401c31\n        goto lab_0x401c31;\n    }\n    goto lab_0x401bbd;\n  lab_0x401bb2:\n    // 0x401bb2\n    *v19 = v17 + 1;\n    v23 = (int64_t)*(char *)v17;\n    v24 = v12;\n    v25 = v15;\n    goto lab_0x401bbd;\n  lab_0x401bbd:;\n    int64_t v26 = v25;\n    int64_t v27 = v24;\n    int64_t v28 = v23;\n    int64_t n2 = v26 + 1;\n    int64_t v29 = g33; // 0x401bcf\n    if (n2 >= g34) {\n        int64_t v30 = function_404670(g33, &g34); // 0x401ce8\n        g33 = v30;\n        v29 = v30;\n    }\n    int64_t data = v29;\n    int64_t v31; // 0x401b40\n    int64_t v32; // 0x401b40\n    int64_t v33; // 0x401be9\n    if (v28 == 10) {\n        // 0x401cb0\n        *(char *)(data + v26) = 10;\n        fwrite_unlocked((int64_t *)data, 1, (int32_t)n2, g27);\n        v31 = 0;\n        v32 = 0;\n        goto lab_0x401ba8;\n    } else {\n        // 0x401bde\n        v33 = function_401af0(v27, 0x100000000000000 * v28 >> 56 & 0xffffffff);\n        if (v33 > a2) {\n            int64_t v34; // 0x401b40\n            int64_t data2; // 0x401b40\n            while (true) {\n                // 0x401bfc\n                int64_t v35; // 0x401b40\n                data2 = v35;\n                int64_t v36; // 0x401b40\n                int64_t v37 = v36;\n                int64_t v38; // 0x401b40\n                v34 = v38;\n                char v39 = g37; // 0x401bfc\n                int64_t v40; // 0x401b40\n                int64_t v41; // 0x401b40\n                int64_t v42; // 0x401b40\n                if (v39 != 0) {\n                    if (v37 == 0) {\n                        // break -> 0x401c0e\n                        break;\n                    }\n                    int16_t ** v43 = __ctype_b_loc(); // 0x401d09\n                    int16_t * v44 = *v43; // 0x401d11\n                    int64_t v45 = (int64_t)v44; // 0x401d11\n                    int64_t v46 = v37; // 0x401d14\n                    int64_t n3 = v46;\n                    int64_t v47 = n3 - 1;\n                    unsigned char v48 = *(char *)(v47 + data2); // 0x401d2c\n                    unsigned char v49 = *(char *)(2 * (int64_t)v48 + v45); // 0x401d36\n                    while (v49 % 2 == 0) {\n                        // 0x401d20\n                        v46 = v47;\n                        if (v47 == 0) {\n                            goto lab_0x401c80;\n                        }\n                        n3 = v46;\n                        v47 = n3 - 1;\n                        v48 = *(char *)(v47 + data2);\n                        v49 = *(char *)(2 * (int64_t)v48 + v45);\n                    }\n                    struct _IO_FILE * stream = g27; // 0x401d3c\n                    fwrite_unlocked((int64_t *)data2, 1, (int32_t)n3, stream);\n                    struct _IO_FILE * v50 = g27; // 0x401d53\n                    int64_t v51 = (int64_t)v50; // 0x401d53\n                    int64_t * v52 = (int64_t *)(v51 + 40); // 0x401d5a\n                    uint64_t v53 = *v52; // 0x401d5a\n                    uint64_t v54 = *(int64_t *)(v51 + 48); // 0x401d5e\n                    if (v53 >= v54) {\n                        // 0x401ebf\n                        __overflow(v50, 10);\n                    } else {\n                        // 0x401d68\n                        *v52 = v53 + 1;\n                        *(char *)v53 = 10;\n                    }\n                    int64_t v55 = g33; // 0x401d73\n                    int64_t v56 = v37 - n3; // 0x401d7a\n                    memmove((int64_t *)v55, (int64_t *)(v55 + n3), (int32_t)v56);\n                    v40 = v55;\n                    v41 = 0;\n                    v42 = 0;\n                    if (v56 != 0) {\n                        int64_t v57 = v55 + v56; // 0x401d98\n                        int64_t v58 = v55; // 0x401d9f\n                        int64_t v59 = 0; // 0x401d9f\n                        int64_t v60 = v59;\n                        int64_t v61 = v58;\n                        char v62 = *(char *)v61; // 0x401da0\n                        int64_t v63 = function_401af0(v60, (int64_t)v62); // 0x401da6\n                        int64_t v64 = v61 + 1; // 0x401dab\n                        v40 = v55;\n                        v41 = v63;\n                        v42 = v56;\n                        v58 = v64;\n                        v59 = v63;\n                        while (v57 != v64) {\n                            // 0x401da0\n                            v60 = v59;\n                            v61 = v58;\n                            v62 = *(char *)v61;\n                            v63 = function_401af0(v60, (int64_t)v62);\n                            v64 = v61 + 1;\n                            v40 = v55;\n                            v41 = v63;\n                            v42 = v56;\n                            v58 = v64;\n                            v59 = v63;\n                        }\n                    }\n                } else {\n                    if (v37 == 0) {\n                        // break -> 0x401c0e\n                        break;\n                    }\n                  lab_0x401c80:\n                    // 0x401c80\n                    *(char *)(data2 + v37) = 10;\n                    struct _IO_FILE * stream2 = g27; // 0x401c8f\n                    fwrite_unlocked((int64_t *)data2, 1, (int32_t)v37 + 1, stream2);\n                    int64_t v65 = g33; // 0x401ca3\n                    v40 = v65;\n                    v41 = 0;\n                    v42 = 0;\n                }\n                int64_t v66 = v42;\n                int64_t v67 = v41;\n                int64_t v68 = v40;\n                int64_t v69; // 0x401be7\n                int64_t v70 = function_401af0(v67, v69); // 0x401be9\n                v38 = v70;\n                v36 = v66;\n                v35 = v68;\n                if (v70 <= a2) {\n                    // 0x401be4\n                    goto lab_0x401e90;\n                }\n            }\n            // 0x401c0e\n            *(char *)data2 = (char)v28;\n            uint64_t v71 = *v19; // 0x401c18\n            int64_t * v72; // 0x401bac\n            uint64_t v73 = *v72; // 0x401c1c\n            v17 = v71;\n            v12 = v34;\n            v15 = 1;\n            v13 = v34;\n            v16 = 1;\n            if (v71 < v73) {\n                goto lab_0x401bb2;\n            } else {\n                goto lab_0x401c22;\n            }\n        } else {\n            goto lab_0x401e90;\n        }\n    }\n  lab_0x401ba8:\n    // 0x401ba8\n    v11 = v31;\n    v14 = v32;\n    goto lab_0x401ba8_2;\n  lab_0x401e90:\n    // 0x401e90\n    *(char *)(v26 + data) = (char)v28;\n    v31 = v33;\n    v32 = n2;\n    goto lab_0x401ba8;\n  lab_0x401e58:\n    // 0x401e58\n    error(0, *err_num, \"%s\", (char *)function_403dd0(0, 3, file_path));\n    // 0x401c6e\n    return 0;\n  lab_0x401c4b:;\n    int64_t v74 = (int64_t)\"-\"; // 0x401b40\n    int64_t v75 = 2; // 0x401b40\n    unsigned char v76 = *(char *)file_path; // 0x401c5a\n    char v77 = *(char *)v74; // 0x401c5a\n    int64_t v78 = file_path + v2; // 0x401c5a\n    char v79 = v77; // 0x401c5a\n    bool v80 = false; // 0x401c5a\n    while (v76 == v77) {\n        int64_t v81 = v75 - 1; // 0x401c5a\n        v74 += v2;\n        v75 = v81;\n        v79 = v76;\n        v80 = true;\n        if (v81 == 0) {\n            // break -> \n            break;\n        }\n        v76 = *(char *)v78;\n        v77 = *(char *)v74;\n        v78 += v2;\n        v79 = v77;\n        v80 = false;\n    }\n    unsigned char v82 = v79;\n    if ((v76 >= v82 && !v80) == v76 < v82 || (int32_t)function_404ce0(v18, v78) != -1) {\n        // 0x401c6e\n        return 1;\n    }\n    goto lab_0x401e58;\n  lab_0x401de5:\n    // 0x401de5\n    error(0, *err_num, \"%s\", (char *)function_403dd0(0, 3, file_path));\n    int64_t v83; // 0x401b40\n    unsigned char v84 = *(char *)v83; // 0x401e19\n    int64_t v85; // 0x401b40\n    char v86 = *(char *)v85; // 0x401e19\n    while (v84 == v86) {\n        int64_t v87; // 0x401b40\n        int64_t v88 = v87;\n        int64_t v89 = v88 - 1; // 0x401e19\n        int64_t v90; // 0x401b40\n        v85 = v90 + v2;\n        int64_t v91; // 0x401e19\n        v83 = v91;\n        v87 = v89;\n        char v92 = v84; // 0x401e19\n        bool v93 = true; // 0x401e19\n        if (v89 == 0) {\n            // break -> \n            break;\n        }\n        int64_t v94 = v83;\n        v90 = v85;\n        v84 = *(char *)v94;\n        v86 = *(char *)v90;\n        v91 = v94 + v2;\n        v92 = v86;\n        v93 = false;\n    }\n    unsigned char v95 = v86;\n    if ((v84 >= v95 && true) != v84 < v95) {\n        // 0x401e2a\n        function_404ce0(v18, v83 + v2);\n    }\n    // 0x401c6e\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401ed0",
            "funcStartAddr": "401ed0",
            "funcEndAddr": "40222d",
            "decompiledFuncCode": "int64_t function_401ed0(int64_t a1) {\n    int32_t status = a1; // 0x401ee6\n    if (status != 0) {\n        // 0x401eea\n        __fprintf_chk(g30, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401f0f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401f16\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Wrap input lines in each FILE, writing to standard output.\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"  -b, --bytes         count bytes rather than columns\\n  -s, --spaces        break at spaces\\n  -w, --width=WIDTH   use WIDTH columns instead of 80\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g27);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g27);\n    int64_t v1 = &g1; // bp-136, 0x402006\n    bool v2; // 0x401ed0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402090\n    int64_t v6 = *(int64_t *)v5; // 0x402094\n    int64_t v7 = 5; // 0x40209a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"fold\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4020a6\n        char v11 = *(char *)v9; // 0x4020a6\n        char v12 = v11; // 0x4020a6\n        bool v13 = false; // 0x4020a6\n        while (v10 == v11) {\n            // 0x40209c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4020a6\n            int64_t v15 = v8 + v3; // 0x4020a6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4020b2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x4020b2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4021c4;\n        } else {\n            // 0x4021ae\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402203\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402114;\n            } else {\n                goto lab_0x4021c4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402114;\n        } else {\n            // 0x4020fa\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402203\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402114;\n            } else {\n                goto lab_0x402114;\n            }\n        }\n    }\n  lab_0x4021c4:\n    // 0x4021c4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402154\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401f0f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402114:\n    // 0x402114\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402154\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401f0f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402230",
            "funcStartAddr": "402230",
            "funcEndAddr": "402238",
            "decompiledFuncCode": "int64_t function_402230(int64_t a1) {\n    // 0x402230\n    g39 = a1;\n    int64_t result; // 0x402230\n    return result;\n}\n"
        },
        {
            "funcName": "function_402240",
            "funcStartAddr": "402240",
            "funcEndAddr": "402248",
            "decompiledFuncCode": "int64_t function_402240(int64_t a1) {\n    // 0x402240\n    g38 = a1;\n    int64_t result; // 0x402240\n    return result;\n}\n"
        },
        {
            "funcName": "function_402250",
            "funcStartAddr": "402250",
            "funcEndAddr": "4022ee",
            "decompiledFuncCode": "int64_t function_402250(void) {\n    // 0x402250\n    int32_t * err_num; // 0x402266\n    if ((int32_t)function_405c50((int64_t)g27) == 0) {\n        goto lab_0x40227c;\n    } else {\n        // 0x402266\n        err_num = __errno_location();\n        if (g38 == 0) {\n            goto lab_0x402293;\n        } else {\n            // 0x402277\n            if (*err_num != 32) {\n                goto lab_0x402293;\n            } else {\n                goto lab_0x40227c;\n            }\n        }\n    }\n  lab_0x40227c:;\n    int64_t result = function_405c50((int64_t)g30); // 0x402283\n    if ((int32_t)result == 0) {\n        // 0x40228c\n        return result;\n    }\n    // 0x4022ce\n    _exit(g17);\n    // UNREACHABLE\n  lab_0x402293:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40229f\n    if (g39 == 0) {\n        // 0x4022d9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4022b3\n        error(0, *err_num, \"%s: %s\", (char *)function_403da0((int64_t)g39), v1);\n    }\n    // 0x4022ce\n    _exit(g17);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4022f0",
            "funcStartAddr": "4022f0",
            "funcEndAddr": "4022f5",
            "decompiledFuncCode": "int64_t function_4022f0(void) {\n    // 0x4022f0\n    int64_t fd; // 0x4022f0\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_402300",
            "funcStartAddr": "402300",
            "funcEndAddr": "402321",
            "decompiledFuncCode": "int64_t function_402300(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x402300\n    if (stream == 0) {\n        // 0x402320\n        int64_t result; // 0x402300\n        return result;\n    }\n    // 0x402305\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_402330",
            "funcStartAddr": "402330",
            "funcEndAddr": "4023c9",
            "decompiledFuncCode": "int64_t function_402330(int64_t str) {\n    // 0x402330\n    if (str == 0) {\n        // 0x4023a9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g30);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40233e\n    int64_t result = (int64_t)found_char_pos; // 0x40233e\n    if (found_char_pos == NULL) {\n        // 0x402399\n        g40 = str;\n        g29 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402348\n    if (v1 - str < 7) {\n        // 0x402399\n        g40 = str;\n        g29 = str;\n        return result;\n    }\n    // 0x402358\n    bool v2; // 0x402330\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402330\n    int64_t v5 = result - 6; // 0x402330\n    int64_t v6 = 7; // 0x402366\n    unsigned char v7 = *(char *)v5; // 0x402366\n    char v8 = *(char *)v4; // 0x402366\n    char v9 = v8; // 0x402366\n    bool v10 = false; // 0x402366\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402370\n    int64_t v13 = v1; // 0x402370\n    int64_t v14 = 3; // 0x402370\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402399\n        g40 = str;\n        g29 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402382\n    char v16 = *(char *)v12; // 0x402382\n    char v17 = v16; // 0x402382\n    bool v18 = false; // 0x402382\n    while (v15 == v16) {\n        // 0x402372\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40238c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40238e\n        v20 = result + 4;\n        g26 = v20;\n    }\n    // 0x402399\n    g40 = v20;\n    g29 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4023d0",
            "funcStartAddr": "4023d0",
            "funcEndAddr": "4024c2",
            "decompiledFuncCode": "int64_t function_4023d0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4023e4\n    int64_t result = (int64_t)v1; // 0x4023e4\n    if (result != a1) {\n        // 0x4023f1\n        return result;\n    }\n    int64_t v2 = function_405d10(); // 0x402400\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4024b6\n    if (v3 == 85) {\n        // 0x402410\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4024a8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x40243e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x40244b\n        // 0x4023f1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4024a8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x40248d\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x40249a\n    // 0x4023f1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4024d0",
            "funcStartAddr": "4024d0",
            "funcEndAddr": "402527",
            "decompiledFuncCode": "int64_t function_4024d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4024d0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402518\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402527",
            "funcStartAddr": "402527",
            "funcEndAddr": "4036f1",
            "decompiledFuncCode": "int64_t function_402527(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402571\n    int64_t v3 = 0; // 0x402571\n    int64_t v4; // 0x402527\n    int64_t v5; // 0x402527\n    int64_t v6; // 0x402527\n    int64_t v7; // 0x402527\n    int64_t v8; // 0x402527\n    int64_t v9; // 0x402527\n    int64_t v10; // 0x402527\n    int64_t v11; // 0x402527\n    int64_t v12; // 0x402527\n    int64_t v13; // 0x402527\n    int64_t v14; // 0x402527\n    int64_t v15; // 0x402527\n    int64_t v16; // 0x402527\n    int64_t v17; // 0x402527\n    int64_t v18; // 0x402527\n    int64_t result; // 0x402527\n    int64_t v19; // 0x402527\n    int32_t wc; // bp+132, 0x402527\n    int64_t ps; // bp+136, 0x402527\n    char v20; // 0x402ae0\n    int64_t v21; // 0x402ae0\n    int64_t v22; // 0x402e88\n    int64_t v23; // 0x402527\n    int64_t v24; // 0x402ea7\n    int32_t v25; // 0x402527\n    while (true) {\n      lab_0x402578_2:\n        // 0x402578\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402527\n        int64_t v27; // 0x4025ac\n        while (true) {\n          lab_0x402578:\n            // 0x402578\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402583\n            if (v15 == -1) {\n                // 0x402585\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402593\n            if (v28) {\n                // break (via goto) -> 0x402cf8\n                goto lab_0x402cf8;\n            }\n            // 0x40259c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g53 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x402b8b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4026d1;\n                    }\n                    // 0x402fad\n                    v26 = v5 + 1;\n                    goto lab_0x402578;\n                }\n                case 7: {\n                    goto lab_0x4026d1;\n                }\n                case 8: {\n                    goto lab_0x4026d1;\n                }\n                case 9: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4026d1;\n                }\n                case 12: {\n                    goto lab_0x4026d1;\n                }\n                case 13: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40269d;\n                }\n                case 36: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4026d1;\n                }\n                case 38: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4026d1;\n                }\n                case 44: {\n                    goto lab_0x4026d1;\n                }\n                case 45: {\n                    goto lab_0x4026d1;\n                }\n                case 46: {\n                    goto lab_0x4026d1;\n                }\n                case 47: {\n                    goto lab_0x4026d1;\n                }\n                case 48: {\n                    goto lab_0x4026d1;\n                }\n                case 49: {\n                    goto lab_0x4026d1;\n                }\n                case 50: {\n                    goto lab_0x4026d1;\n                }\n                case 51: {\n                    goto lab_0x4026d1;\n                }\n                case 52: {\n                    goto lab_0x4026d1;\n                }\n                case 53: {\n                    goto lab_0x4026d1;\n                }\n                case 54: {\n                    goto lab_0x4026d1;\n                }\n                case 55: {\n                    goto lab_0x4026d1;\n                }\n                case 56: {\n                    goto lab_0x4026d1;\n                }\n                case 57: {\n                    goto lab_0x4026d1;\n                }\n                case 58: {\n                    goto lab_0x4026d1;\n                }\n                case 59: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4026d1;\n                }\n                case 66: {\n                    goto lab_0x4026d1;\n                }\n                case 67: {\n                    goto lab_0x4026d1;\n                }\n                case 68: {\n                    goto lab_0x4026d1;\n                }\n                case 69: {\n                    goto lab_0x4026d1;\n                }\n                case 70: {\n                    goto lab_0x4026d1;\n                }\n                case 71: {\n                    goto lab_0x4026d1;\n                }\n                case 72: {\n                    goto lab_0x4026d1;\n                }\n                case 73: {\n                    goto lab_0x4026d1;\n                }\n                case 74: {\n                    goto lab_0x4026d1;\n                }\n                case 75: {\n                    goto lab_0x4026d1;\n                }\n                case 76: {\n                    goto lab_0x4026d1;\n                }\n                case 77: {\n                    goto lab_0x4026d1;\n                }\n                case 78: {\n                    goto lab_0x4026d1;\n                }\n                case 79: {\n                    goto lab_0x4026d1;\n                }\n                case 80: {\n                    goto lab_0x4026d1;\n                }\n                case 81: {\n                    goto lab_0x4026d1;\n                }\n                case 82: {\n                    goto lab_0x4026d1;\n                }\n                case 83: {\n                    goto lab_0x4026d1;\n                }\n                case 84: {\n                    goto lab_0x4026d1;\n                }\n                case 85: {\n                    goto lab_0x4026d1;\n                }\n                case 86: {\n                    goto lab_0x4026d1;\n                }\n                case 87: {\n                    goto lab_0x4026d1;\n                }\n                case 88: {\n                    goto lab_0x4026d1;\n                }\n                case 89: {\n                    goto lab_0x4026d1;\n                }\n                case 90: {\n                    goto lab_0x4026d1;\n                }\n                case 91: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4026d1;\n                }\n                case 94: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4026d1;\n                }\n                case 96: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4026d1;\n                }\n                case 98: {\n                    goto lab_0x4026d1;\n                }\n                case 99: {\n                    goto lab_0x4026d1;\n                }\n                case 100: {\n                    goto lab_0x4026d1;\n                }\n                case 101: {\n                    goto lab_0x4026d1;\n                }\n                case 102: {\n                    goto lab_0x4026d1;\n                }\n                case 103: {\n                    goto lab_0x4026d1;\n                }\n                case 104: {\n                    goto lab_0x4026d1;\n                }\n                case 105: {\n                    goto lab_0x4026d1;\n                }\n                case 106: {\n                    goto lab_0x4026d1;\n                }\n                case 107: {\n                    goto lab_0x4026d1;\n                }\n                case 108: {\n                    goto lab_0x4026d1;\n                }\n                case 109: {\n                    goto lab_0x4026d1;\n                }\n                case 110: {\n                    goto lab_0x4026d1;\n                }\n                case 111: {\n                    goto lab_0x4026d1;\n                }\n                case 112: {\n                    goto lab_0x4026d1;\n                }\n                case 113: {\n                    goto lab_0x4026d1;\n                }\n                case 114: {\n                    goto lab_0x4026d1;\n                }\n                case 115: {\n                    goto lab_0x4026d1;\n                }\n                case 116: {\n                    goto lab_0x4026d1;\n                }\n                case 117: {\n                    goto lab_0x4026d1;\n                }\n                case 118: {\n                    goto lab_0x4026d1;\n                }\n                case 119: {\n                    goto lab_0x4026d1;\n                }\n                case 120: {\n                    goto lab_0x4026d1;\n                }\n                case 121: {\n                    goto lab_0x4026d1;\n                }\n                case 122: {\n                    goto lab_0x4026d1;\n                }\n                case 123: {\n                    goto lab_0x402675;\n                }\n                case 124: {\n                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402675;\n                }\n                case 126: {\n                    goto lab_0x40269d;\n                }\n                default: {\n                    goto lab_0x402a75;\n                }\n            }\n        }\n      lab_0x402a75:\n        if (v23 != 1) {\n            // 0x402de0\n            ps = 0;\n            int64_t len = v15; // 0x402df0\n            if (v15 == -1) {\n                // 0x402df2\n                len = strlen((char *)str);\n            }\n            // 0x402e1e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x402e7f:\n                // 0x402e7f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x402e84\n                int64_t v30 = v29 + str;\n                v24 = function_405bd0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4033fa_2;\n                    }\n                    case -1: {\n                        goto lab_0x4033fa_2;\n                    }\n                    case -2: {\n                        // 0x4034dd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403517\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40351a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403527\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403520\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4033fa\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4033fa_2;\n                    }\n                    case 1: {\n                        goto lab_0x402e50;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x402efc\n                        char v34 = *(char *)v33; // 0x402f0d\n                        unsigned char v35; // 0x402527\n                        if (v34 < 125) {\n                            // 0x402f18\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x402f2f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x402f00\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x402f0d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x402f18\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x402f2f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x402f00\n                            v33++;\n                        }\n                        goto lab_0x402e50;\n                    }\n                }\n            }\n            goto lab_0x4033fa_2;\n        } else {\n            // 0x402ac4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4026d1;\n        }\n    }\n  lab_0x402cf8:\n    // 0x402cf8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4035fa\n        if (v8 > result) {\n            // 0x403603\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402927\n        return result;\n    }\n    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4026d1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4026e0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4028ea_2;\n        }\n    }\n    int64_t v39 = result; // 0x4027e1\n    char v40 = v20; // 0x4027e1\n    int64_t v41 = v38; // 0x4027e1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4027e1\n    int64_t v43 = v36; // 0x4027e1\n    goto lab_0x40275d;\n  lab_0x4028ea_2:\n    // 0x402927\n    return function_4024d0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4033fa_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4026d1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x402fce\n        int64_t v50 = v5 + 1; // 0x4030b1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x4030b8\n        char v52 = v20; // 0x4030b8\n        int64_t v53 = result; // 0x4030b8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403081\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403085\n            int64_t v56 = v54 + 1; // 0x40308a\n            int64_t v57 = v51 + 1; // 0x4030b1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40307c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403081\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403085\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40275d;\n    }\n  lab_0x402e50:\n    // 0x402e50\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x402e6f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402e72\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4033fa\n        goto lab_0x4033fa_2;\n    }\n    goto lab_0x402e7f;\n  lab_0x40269d:\n    // 0x40269d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4028ea_2;\n    }\n    goto lab_0x4026d1;\n  lab_0x402675:;\n    bool v60 = v15 == 1; // 0x402680\n    if (v15 == -1) {\n        // 0x402682\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40268e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4026d1;\n    } else {\n        goto lab_0x40269d;\n    }\n  lab_0x40275d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402762\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402766\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402578_2;\n}\n"
        },
        {
            "funcName": "function_403700",
            "funcStartAddr": "403700",
            "funcEndAddr": "40389e",
            "decompiledFuncCode": "int64_t function_403700(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403702\n    int32_t * v3 = __errno_location(); // 0x40371c\n    int64_t v4 = (int64_t)g19; // 0x403721\n    int32_t v5 = *v3; // 0x40372b\n    int64_t v6 = v4; // 0x403741\n    if (v2 >= (int64_t)*(int32_t *)&g22) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403899\n            function_404760(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403750\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403757\n        int64_t v9; // 0x403700\n        if (g19 == &g20) {\n            int64_t v10 = function_404570(0, v8); // 0x40387a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g20); // 0x40387f\n            *(int64_t *)&g19 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404570(v4, v8); // 0x40376b\n            *(int64_t *)&g19 = v12;\n            v9 = v12;\n        }\n        // 0x40377a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g22; // 0x40377a\n        int32_t v14 = v7; // 0x403781\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g22 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4037b1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4037bb\n    int64_t * v17 = (int64_t *)v15; // 0x4037be\n    uint64_t v18 = *v17; // 0x4037be\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4037c1\n    int64_t result = *v19; // 0x4037c1\n    int64_t v20; // 0x403700\n    uint64_t v21 = function_4024d0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4037e4\n    if (v18 > v21) {\n        // 0x40385b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4037f7\n    *v17 = v22;\n    if (result != (int64_t)&g41) {\n        // 0x403807\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404510(v22); // 0x403821\n    *v19 = result2;\n    int64_t v23; // 0x403700\n    function_4024d0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40385b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4038a0",
            "funcStartAddr": "4038a0",
            "funcEndAddr": "4038d4",
            "decompiledFuncCode": "int64_t function_4038a0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4038a7\n    int64_t result = function_404710(a1 == 0 ? (int64_t)&g42 : a1, 56); // 0x4038c6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4038e0",
            "funcStartAddr": "4038e0",
            "funcEndAddr": "4038ef",
            "decompiledFuncCode": "int64_t function_4038e0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g42 : a1); // 0x4038ec\n    return result;\n}\n"
        },
        {
            "funcName": "function_4038f0",
            "funcStartAddr": "4038f0",
            "funcEndAddr": "4038ff",
            "decompiledFuncCode": "int64_t function_4038f0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g42 : a1; // 0x4038f8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g42;\n}\n"
        },
        {
            "funcName": "function_403900",
            "funcStartAddr": "403900",
            "funcEndAddr": "403933",
            "decompiledFuncCode": "int64_t function_403900(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g42 + 8 : a1 + 8; // 0x403919\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40391e\n    uint32_t v3 = *v2; // 0x40391e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403922\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403940",
            "funcStartAddr": "403940",
            "funcEndAddr": "403953",
            "decompiledFuncCode": "int64_t function_403940(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g42 + 4 : a1 + 4); // 0x40394c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403960",
            "funcStartAddr": "403960",
            "funcEndAddr": "40398b",
            "decompiledFuncCode": "int64_t function_403960(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g42 : a1; // 0x403968\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403985\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40397c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g42;\n}\n"
        },
        {
            "funcName": "function_403990",
            "funcStartAddr": "403990",
            "funcEndAddr": "403a02",
            "decompiledFuncCode": "int64_t function_403990(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g42 : a5; // 0x4039b2\n    int32_t * v2 = __errno_location(); // 0x4039bb\n    uint32_t v3 = *(int32_t *)v1; // 0x4039db\n    int64_t result = function_4024d0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4039ea\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a10",
            "funcStartAddr": "403a10",
            "funcEndAddr": "403af1",
            "decompiledFuncCode": "int64_t function_403a10(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g42 : a4; // 0x403a32\n    int32_t * v2 = __errno_location(); // 0x403a38\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403a57\n    int32_t * v4 = (int32_t *)v1; // 0x403a5a\n    int64_t v5 = function_4024d0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403a75\n    int64_t v6 = v5 + 1; // 0x403a7a\n    int64_t result = function_404510(v6); // 0x403a8f\n    function_4024d0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403ad4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x403add\n    return result;\n}\n"
        },
        {
            "funcName": "function_403b00",
            "funcStartAddr": "403b00",
            "funcEndAddr": "403b0a",
            "decompiledFuncCode": "int64_t function_403b00(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403b00\n    return function_403a10(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403b10",
            "funcStartAddr": "403b10",
            "funcEndAddr": "403ba5",
            "decompiledFuncCode": "int64_t function_403b10(void) {\n    uint32_t v1 = *(int32_t *)&g22; // 0x403b10\n    int64_t v2 = v1; // 0x403b10\n    int64_t v3 = v2; // 0x403b24\n    if (v1 >= 2) {\n        int64_t v4 = &g22;\n        int64_t v5 = v4 + 16; // 0x403b43\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g54;\n        while (v5 != (int64_t)g19 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403b40\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g54;\n        }\n    }\n    int64_t v6 = v3; // 0x403b5d\n    if (g20 != 0x60a2e0) {\n        // 0x403b5f\n        free((int64_t *)g20);\n        g20 = 256;\n        *(int64_t *)&g21 = (int64_t)&g41;\n        v6 = &g54;\n    }\n    int64_t result = v6; // 0x403b81\n    if (g19 != &g20) {\n        // 0x403b83\n        free(g19);\n        *(int64_t *)&g19 = (int64_t)&g20;\n        result = &g54;\n    }\n    // 0x403b96\n    *(int32_t *)&g22 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403bb0",
            "funcStartAddr": "403bb0",
            "funcEndAddr": "403bc1",
            "decompiledFuncCode": "int64_t function_403bb0(void) {\n    // 0x403bb0\n    int64_t v1; // 0x403bb0\n    return function_403700(v1, v1, -1, (int64_t *)&g42);\n}\n"
        },
        {
            "funcName": "function_403bd0",
            "funcStartAddr": "403bd0",
            "funcEndAddr": "403bda",
            "decompiledFuncCode": "int64_t function_403bd0(void) {\n    // 0x403bd0\n    int64_t v1; // 0x403bd0\n    return function_403700(v1, v1, v1, (int64_t *)&g42);\n}\n"
        },
        {
            "funcName": "function_403be0",
            "funcStartAddr": "403be0",
            "funcEndAddr": "403bf6",
            "decompiledFuncCode": "int64_t function_403be0(int64_t a1) {\n    // 0x403be0\n    return function_403700(0, a1, -1, (int64_t *)&g42);\n}\n"
        },
        {
            "funcName": "function_403c00",
            "funcStartAddr": "403c00",
            "funcEndAddr": "403c12",
            "decompiledFuncCode": "int64_t function_403c00(int64_t a1, int64_t a2) {\n    // 0x403c00\n    return function_403700(0, a1, a2, (int64_t *)&g42);\n}\n"
        },
        {
            "funcName": "function_403c20",
            "funcStartAddr": "403c20",
            "funcEndAddr": "403c88",
            "decompiledFuncCode": "int64_t function_403c20(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403c30\n    return function_403700((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403c90",
            "funcStartAddr": "403c90",
            "funcEndAddr": "403cf4",
            "decompiledFuncCode": "int64_t function_403c90(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403ca0\n    return function_403700((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403d00",
            "funcStartAddr": "403d00",
            "funcEndAddr": "403d0c",
            "decompiledFuncCode": "int64_t function_403d00(int64_t a1, int64_t a2) {\n    // 0x403d00\n    return function_403c20(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_403d10",
            "funcStartAddr": "403d10",
            "funcEndAddr": "403d1f",
            "decompiledFuncCode": "int64_t function_403d10(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403d10\n    return function_403c90(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_403d20",
            "funcStartAddr": "403d20",
            "funcEndAddr": "403d90",
            "decompiledFuncCode": "int64_t function_403d20(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g42); // 0x403d2d\n    int128_t v2 = __asm_movdqa(g43); // 0x403d35\n    int128_t v3 = __asm_movdqa(g44); // 0x403d3d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x403d52\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x403d68\n    uint32_t v6 = *v5; // 0x403d68\n    uint32_t v7 = (int32_t)a3 % 32; // 0x403d6d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403700(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_403d90",
            "funcStartAddr": "403d90",
            "funcEndAddr": "403d9d",
            "decompiledFuncCode": "int64_t function_403d90(int64_t a1, int64_t a2) {\n    // 0x403d90\n    return function_403d20(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403da0",
            "funcStartAddr": "403da0",
            "funcEndAddr": "403db1",
            "decompiledFuncCode": "int64_t function_403da0(int64_t a1) {\n    // 0x403da0\n    return function_403d20(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403dc0",
            "funcStartAddr": "403dc0",
            "funcEndAddr": "403dca",
            "decompiledFuncCode": "int64_t function_403dc0(void) {\n    // 0x403dc0\n    int64_t v1; // 0x403dc0\n    return function_403d20(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403dd0",
            "funcStartAddr": "403dd0",
            "funcEndAddr": "403e3e",
            "decompiledFuncCode": "int64_t function_403dd0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403dea\n    return function_403700((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403e40",
            "funcStartAddr": "403e40",
            "funcEndAddr": "403eac",
            "decompiledFuncCode": "int64_t function_403e40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g42); // 0x403e47\n    int128_t v2 = __asm_movdqa(g43); // 0x403e4f\n    int128_t v3 = __asm_movdqa(g44); // 0x403e57\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x403e79\n    if (a2 == 0 || a3 == 0) {\n        // 0x403ea7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403e8a\n    return function_403700(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403eb0",
            "funcStartAddr": "403eb0",
            "funcEndAddr": "403eb9",
            "decompiledFuncCode": "int64_t function_403eb0(void) {\n    // 0x403eb0\n    int64_t v1; // 0x403eb0\n    return function_403e40(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403ec0",
            "funcStartAddr": "403ec0",
            "funcEndAddr": "403ed7",
            "decompiledFuncCode": "int64_t function_403ec0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403ec0\n    return function_403e40(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_403ee0",
            "funcStartAddr": "403ee0",
            "funcEndAddr": "403ef3",
            "decompiledFuncCode": "int64_t function_403ee0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403ee0\n    return function_403e40(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_403f00",
            "funcStartAddr": "403f00",
            "funcEndAddr": "403f0a",
            "decompiledFuncCode": "int64_t function_403f00(void) {\n    // 0x403f00\n    int64_t v1; // 0x403f00\n    return function_403700(v1, v1, v1, &g18);\n}\n"
        },
        {
            "funcName": "function_403f10",
            "funcStartAddr": "403f10",
            "funcEndAddr": "403f22",
            "decompiledFuncCode": "int64_t function_403f10(int64_t a1, int64_t a2) {\n    // 0x403f10\n    return function_403700(0, a1, a2, &g18);\n}\n"
        },
        {
            "funcName": "function_403f30",
            "funcStartAddr": "403f30",
            "funcEndAddr": "403f41",
            "decompiledFuncCode": "int64_t function_403f30(void) {\n    // 0x403f30\n    int64_t v1; // 0x403f30\n    return function_403700(v1, v1, -1, &g18);\n}\n"
        },
        {
            "funcName": "function_403f50",
            "funcStartAddr": "403f50",
            "funcEndAddr": "403f66",
            "decompiledFuncCode": "int64_t function_403f50(int64_t a1) {\n    // 0x403f50\n    return function_403700(0, a1, -1, &g18);\n}\n"
        },
        {
            "funcName": "function_403f70",
            "funcStartAddr": "403f70",
            "funcEndAddr": "40434d",
            "decompiledFuncCode": "int64_t function_403f70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404008\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x403f8c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403fa6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x403feb\n    if (a6 < 10) {\n        // 0x403ffa\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4040f2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404350",
            "funcStartAddr": "404350",
            "funcEndAddr": "404370",
            "decompiledFuncCode": "int64_t function_404350(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404350\n    if (a5 == 0) {\n        // 0x40436b\n        return function_403f70(a1, a2, a3, a4, a5, 0, (int64_t)&g54);\n    }\n    int64_t v1 = 0; // 0x404357\n    v1++;\n    int64_t v2 = v1; // 0x404369\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404360\n        v1++;\n        v2 = v1;\n    }\n    // 0x40436b\n    return function_403f70(a1, a2, a3, a4, a5, v2, (int64_t)&g54);\n}\n"
        },
        {
            "funcName": "function_404370",
            "funcStartAddr": "404370",
            "funcEndAddr": "4043d0",
            "decompiledFuncCode": "int64_t function_404370(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404370\n    int64_t v3 = &v2; // 0x404370\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4043a3\n    int64_t v6; // 0x40438d\n    int64_t * v7; // 0x4043ab\n    int64_t v8; // 0x4043ab\n    int64_t v9; // 0x4043b7\n    if (v5 < 48) {\n        // 0x404380\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4043c3\n            break;\n        }\n    } else {\n        // 0x4043ab\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4043c3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4043a1\n    while (v4 != 9) {\n        // 0x404399\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404380\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4043c3\n                break;\n            }\n        } else {\n            // 0x4043ab\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4043c3\n                break;\n            }\n        }\n        // 0x404399\n        v10 = 10;\n    }\n    // 0x4043c3\n    return function_403f70(a1, a2, a3, a4, v3, v10, (int64_t)&g54);\n}\n"
        },
        {
            "funcName": "function_4043d0",
            "funcStartAddr": "4043d0",
            "funcEndAddr": "40448c",
            "decompiledFuncCode": "int64_t function_4043d0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x4043d0\n    int64_t v1; // bp-168, 0x4043d0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4043d0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4043d0\n    int64_t v8; // 0x4043d0\n    int64_t v9; // bp-56, 0x4043d0\n    int64_t v10; // 0x404435\n    int64_t v11; // 0x404459\n    if ((int32_t)v6 < 48) {\n        // 0x404420\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404470\n            break;\n        }\n    } else {\n        // 0x404452\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404470\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40444a\n    int64_t v13 = 10; // 0x40444a\n    while (v5 != 9) {\n        // 0x40444c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404420\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404470\n                break;\n            }\n        } else {\n            // 0x404452\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404470\n                break;\n            }\n        }\n        // 0x404442\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404470\n    int64_t v14; // bp-136, 0x4043d0\n    int64_t result = function_403f70(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g54); // 0x40447f\n    return result;\n}\n"
        },
        {
            "funcName": "function_404490",
            "funcStartAddr": "404490",
            "funcEndAddr": "404504",
            "decompiledFuncCode": "int64_t function_404490(int64_t a1) {\n    // 0x404490\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4044f3\n    return fputs_unlocked(v1, g27);\n}\n"
        },
        {
            "funcName": "function_404510",
            "funcStartAddr": "404510",
            "funcEndAddr": "40452a",
            "decompiledFuncCode": "int64_t function_404510(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404514\n    if (size != 0 != (mem == NULL)) {\n        // 0x404523\n        return (int64_t)mem;\n    }\n    // 0x404525\n    function_404760(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404530",
            "funcStartAddr": "404530",
            "funcEndAddr": "404551",
            "decompiledFuncCode": "int64_t function_404530(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404533\n    int64_t v2 = v1; // 0x404533\n    if (v2 < 0) {\n        // 0x40454b\n        function_404760(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404549\n        return function_404510(v2);\n    }\n    // 0x40454b\n    function_404760(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404560",
            "funcStartAddr": "404560",
            "funcEndAddr": "404562",
            "decompiledFuncCode": "int64_t function_404560(void) {\n    // 0x404560\n    int64_t v1; // 0x404560\n    return function_404510(v1);\n}\n"
        },
        {
            "funcName": "function_404570",
            "funcStartAddr": "404570",
            "funcEndAddr": "4045a6",
            "decompiledFuncCode": "int64_t function_404570(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404598\n        free(v1);\n        return (int32_t)&g54 ^ (int32_t)&g54;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404581\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404590\n        return (int64_t)mem;\n    }\n    // 0x4045a1\n    function_404760(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4045b0",
            "funcStartAddr": "4045b0",
            "funcEndAddr": "4045d1",
            "decompiledFuncCode": "int64_t function_4045b0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4045b3\n    int64_t v2 = v1; // 0x4045b3\n    if (v2 < 0) {\n        // 0x4045cb\n        function_404760(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4045c9\n        return function_404570(a1, v2);\n    }\n    // 0x4045cb\n    function_404760(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4045e0",
            "funcStartAddr": "4045e0",
            "funcEndAddr": "404666",
            "decompiledFuncCode": "int64_t function_4045e0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40463b\n            function_404760(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404570(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404623\n    if (a2 == 0) {\n        // 0x404648\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404628\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40463b\n        function_404760(a1);\n        // UNREACHABLE\n    }\n    // 0x40460a\n    *(int64_t *)a2 = v2;\n    return function_404570(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404670",
            "funcStartAddr": "404670",
            "funcEndAddr": "4046c0",
            "decompiledFuncCode": "int64_t function_404670(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    if (a1 != 0) {\n        if (a2 >= (int64_t *)0x5555555555555554) {\n            // 0x4046ba\n            function_404760(a1);\n            // UNREACHABLE\n        }\n        int64_t v2 = v1 + 1 + v1 / 2;\n        *a2 = v2;\n        return function_404570(a1, v2);\n    }\n    if (a2 == NULL) {\n        // 0x4046a5\n        *a2 = 128;\n        return function_404570(0, 128);\n    }\n    // 0x4046b8\n    if (a2 < NULL) {\n        // 0x4046ba\n        function_404760(a1);\n        // UNREACHABLE\n    }\n    // 0x404692\n    *a2 = v1;\n    return function_404570(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4046c0",
            "funcStartAddr": "4046c0",
            "funcEndAddr": "4046d7",
            "decompiledFuncCode": "int64_t function_4046c0(int64_t a1, int64_t a2) {\n    // 0x4046c0\n    return (int64_t)memset((int64_t *)function_404510(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4046e0",
            "funcStartAddr": "4046e0",
            "funcEndAddr": "40470e",
            "decompiledFuncCode": "int64_t function_4046e0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4046e7\n    if ((int64_t)v1 < 0) {\n        // 0x404709\n        function_404760(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404709\n        function_404760(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4046fa\n    if (mem != NULL) {\n        // 0x404704\n        return (int64_t)mem;\n    }\n    // 0x404709\n    function_404760(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404710",
            "funcStartAddr": "404710",
            "funcEndAddr": "404738",
            "decompiledFuncCode": "int64_t function_404710(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404510(a2); // 0x40471f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404740",
            "funcStartAddr": "404740",
            "funcEndAddr": "404753",
            "decompiledFuncCode": "int64_t function_404740(int64_t str) {\n    // 0x404740\n    return function_404710(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404760",
            "funcStartAddr": "404760",
            "funcEndAddr": "404791",
            "decompiledFuncCode": "int64_t function_404760(int64_t a1) {\n    // 0x404760\n    error(g17, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4047a0",
            "funcStartAddr": "4047a0",
            "funcEndAddr": "404870",
            "decompiledFuncCode": "int64_t function_4047a0(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, int64_t a5, int64_t a6, int32_t a7) {\n    // 0x4047a0\n    int64_t result2; // bp-64, 0x4047a0\n    int32_t v1 = function_4048a0(a1, 0, a2 & 0xffffffff, &result2, a5, a6); // 0x4047cc\n    int32_t * v2; // 0x4047a0\n    if (v1 != 0) {\n        int32_t * v3 = __errno_location(); // 0x40484a\n        if (v1 == 1) {\n            // 0x404868\n            *v3 = 75;\n            v2 = v3;\n        } else {\n            // 0x404857\n            v2 = v3;\n            if (v1 == 3) {\n                // 0x40485c\n                *v3 = 0;\n                v2 = v3;\n            }\n        }\n    } else {\n        uint64_t result = result2; // 0x4047d0\n        if (result >= a3 && result <= a4) {\n            // 0x404832\n            return result;\n        }\n        int32_t * v4 = __errno_location(); // 0x4047df\n        *v4 = result < 0x40000000 ? 34 : 75;\n        v2 = v4;\n    }\n    int64_t v5 = function_403f50(a1); // 0x4047fc\n    int32_t v6 = *v2; // 0x404801\n    int32_t err_num = v6 == 22 ? 0 : v6; // 0x404817\n    error(a7 == 0 ? 1 : a7, err_num, \"%s: %s\", (char *)a6, (char *)v5);\n    // 0x404832\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404870",
            "funcStartAddr": "404870",
            "funcEndAddr": "404891",
            "decompiledFuncCode": "int64_t function_404870(int64_t a1, int64_t a2, int64_t a3, int64_t * a4, int64_t a5, int32_t a6) {\n    // 0x404870\n    int64_t result; // 0x404870\n    return result;\n}\n"
        },
        {
            "funcName": "function_4048a0",
            "funcStartAddr": "4048a0",
            "funcEndAddr": "404ce0",
            "decompiledFuncCode": "int64_t function_4048a0(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x4048ae\n    if (v1 >= 37) {\n        // 0x404cbb\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g54;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x4048d2\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x404902\n    int64_t v4 = a1; // 0x404907\n    char v5 = c; // 0x404907\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x4048fc\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x4048f8\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x404909\n    if (v5 == 45) {\n        // 0x404945\n        return 4;\n    }\n    // 0x40490e\n    int64_t v7; // bp-64, 0x4048a0\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x4048ce\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x404916\n    int64_t * v10 = (int64_t *)v8; // 0x40491b\n    int64_t v11 = *v10; // 0x40491b\n    char v12; // 0x4048a0\n    int64_t v13; // 0x4048a0\n    int64_t v14; // 0x4048a0\n    int64_t v15; // 0x4048a0\n    int64_t v16; // 0x4048a0\n    int64_t v17; // 0x4048a0\n    int64_t v18; // 0x4048a0\n    if (v11 == a1) {\n        // 0x404978\n        if (c == 0 || str == 0) {\n            // 0x404945\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x404999\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x404945\n            return 4;\n        }\n        goto lab_0x4049a7;\n    } else {\n        int32_t v19 = *v2; // 0x404926\n        int64_t v20 = 0; // 0x40492c\n        if (v19 != 0) {\n            // 0x404960\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x404945\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x404916\n        v16 = v21;\n        v13 = v20;\n        if (str == 0) {\n            goto lab_0x404942;\n        } else {\n            char c2 = *(char *)v11; // 0x404935\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x404aa3\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x4049a7;\n                } else {\n                    goto lab_0x404ab5;\n                }\n            } else {\n                goto lab_0x404942;\n            }\n        }\n    }\n  lab_0x4049a7:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x4049af\n    int64_t v24 = 1; // 0x4049af\n    int64_t v25; // 0x4048a0\n    int64_t v26; // 0x4048a0\n    int64_t v27; // 0x4048a0\n    int64_t v28; // 0x4048a0\n    int64_t v29; // 0x4048a0\n    int64_t v30; // 0x4048a0\n    int64_t v31; // 0x4048a0\n    int64_t v32; // 0x4048a0\n    int64_t v33; // 0x4048a0\n    int64_t v34; // 0x4048a0\n    int64_t v35; // 0x4048a0\n    int64_t v36; // 0x4048a0\n    int64_t v37; // 0x4048a0\n    int64_t v38; // 0x4048a0\n    int64_t v39; // 0x4048a0\n    int64_t v40; // 0x4048a0\n    int64_t v41; // 0x4048a0\n    int64_t v42; // 0x4048a0\n    int64_t v43; // 0x4048a0\n    int64_t v44; // 0x4048a0\n    if (v22 < 48) {\n        // 0x4049b1\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x404a1a;\n        } else {\n            // 0x4049c4\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x404a1a;\n            } else {\n                // 0x4049e0\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x404a1a;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x404c49\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x404a1a;\n                    }\n                    default: {\n                        // 0x4049f5\n                        g51 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x404bbb;\n                            }\n                            case 70: {\n                                goto lab_0x404ab5;\n                            }\n                            case 71: {\n                                goto lab_0x404bf3;\n                            }\n                            case 72: {\n                                goto lab_0x404ab5;\n                            }\n                            case 73: {\n                                goto lab_0x404ab5;\n                            }\n                            case 74: {\n                                goto lab_0x404ab5;\n                            }\n                            case 75: {\n                                goto lab_0x404a7c;\n                            }\n                            case 76: {\n                                goto lab_0x404ab5;\n                            }\n                            case 77: {\n                                goto lab_0x404a3e;\n                            }\n                            case 78: {\n                                goto lab_0x404ab5;\n                            }\n                            case 79: {\n                                goto lab_0x404ab5;\n                            }\n                            case 80: {\n                                goto lab_0x404b88;\n                            }\n                            case 81: {\n                                goto lab_0x404ab5;\n                            }\n                            case 82: {\n                                goto lab_0x404ab5;\n                            }\n                            case 83: {\n                                goto lab_0x404ab5;\n                            }\n                            case 84: {\n                                goto lab_0x404b58;\n                            }\n                            case 85: {\n                                goto lab_0x404ab5;\n                            }\n                            case 86: {\n                                goto lab_0x404ab5;\n                            }\n                            case 87: {\n                                goto lab_0x404ab5;\n                            }\n                            case 88: {\n                                goto lab_0x404ab5;\n                            }\n                            case 89: {\n                                goto lab_0x404b26;\n                            }\n                            case 90: {\n                                goto lab_0x404aeb;\n                            }\n                            case 91: {\n                                goto lab_0x404ab5;\n                            }\n                            case 92: {\n                                goto lab_0x404ab5;\n                            }\n                            case 93: {\n                                goto lab_0x404ab5;\n                            }\n                            case 94: {\n                                goto lab_0x404ab5;\n                            }\n                            case 95: {\n                                goto lab_0x404ab5;\n                            }\n                            case 96: {\n                                goto lab_0x404ab5;\n                            }\n                            case 97: {\n                                goto lab_0x404ab5;\n                            }\n                            case 98: {\n                                goto lab_0x404acf;\n                            }\n                            case 99: {\n                                goto lab_0x404a58;\n                            }\n                            case 100: {\n                                goto lab_0x404ab5;\n                            }\n                            case 101: {\n                                goto lab_0x404ab5;\n                            }\n                            case 102: {\n                                goto lab_0x404ab5;\n                            }\n                            case 103: {\n                                goto lab_0x404bf3;\n                            }\n                            case 104: {\n                                goto lab_0x404ab5;\n                            }\n                            case 105: {\n                                goto lab_0x404ab5;\n                            }\n                            case 106: {\n                                goto lab_0x404ab5;\n                            }\n                            case 107: {\n                                goto lab_0x404a7c;\n                            }\n                            case 108: {\n                                goto lab_0x404ab5;\n                            }\n                            case 109: {\n                                goto lab_0x404a3e;\n                            }\n                            case 110: {\n                                goto lab_0x404ab5;\n                            }\n                            case 111: {\n                                goto lab_0x404ab5;\n                            }\n                            case 112: {\n                                goto lab_0x404ab5;\n                            }\n                            case 113: {\n                                goto lab_0x404ab5;\n                            }\n                            case 114: {\n                                goto lab_0x404ab5;\n                            }\n                            case 115: {\n                                goto lab_0x404ab5;\n                            }\n                            case 116: {\n                                goto lab_0x404b58;\n                            }\n                            default: {\n                                goto lab_0x404a1a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x404a1a;\n    }\n  lab_0x404942:\n    // 0x404942\n    *a4 = v16;\n    // 0x404945\n    return v13 & 0xffffffff;\n  lab_0x404a1a:\n    // 0x404a1a\n    g52 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x4048a0\n    switch (v12) {\n        case 66: {\n            // 0x404c14\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x404a87;\n            } else {\n                // 0x404c21\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x404a58;\n            }\n        }\n        case 69: {\n            goto lab_0x404bbb;\n        }\n        case 71: {\n            goto lab_0x404bf3;\n        }\n        case 75: {\n            goto lab_0x404a7c;\n        }\n        case 77: {\n            goto lab_0x404a3e;\n        }\n        case 80: {\n            goto lab_0x404b88;\n        }\n        case 84: {\n            goto lab_0x404b58;\n        }\n        case 89: {\n            goto lab_0x404b26;\n        }\n        case 90: {\n            goto lab_0x404aeb;\n        }\n        case 98: {\n            goto lab_0x404acf;\n        }\n        case 99: {\n            goto lab_0x404a58;\n        }\n        case 103: {\n            goto lab_0x404bf3;\n        }\n        case 107: {\n            goto lab_0x404a7c;\n        }\n        case 109: {\n            goto lab_0x404a3e;\n        }\n        case 116: {\n            goto lab_0x404b58;\n        }\n        case 119: {\n            // 0x404ac0\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x404a87;\n            } else {\n                // 0x404ac5\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x404a58;\n            }\n        }\n        default: {\n            goto lab_0x404ab5;\n        }\n    }\n  lab_0x404bbb:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x404bd3\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x404bdf\n    int64_t v51 = v48; // 0x404be2\n    int64_t v52 = v37; // 0x404be2\n    int64_t v53 = v49; // 0x404be2\n    int32_t v54 = v50; // 0x404be2\n    int64_t v55 = v49; // 0x404be2\n    while (v50 != 0) {\n        // 0x404bd0\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x404b14;\n  lab_0x404bf3:\n    // 0x404bf3\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x404bfe\n        int128_t v56; // 0x404bf9\n        uint128_t v57; // 0x404bf9\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x404bfe\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x4048a0\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x404c03\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x404c08\n                v26 = v60;\n                int64_t v61; // 0x4048a0\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x404a58;\n  lab_0x404a7c:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x404a7f\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x404a58;\n    } else {\n        goto lab_0x404a87;\n    }\n  lab_0x404a3e:;\n    int128_t v65 = v27; // 0x404a44\n    uint128_t v66 = v65 * (int128_t)v17; // 0x404a44\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x404a87;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x404a49\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x404a87;\n        } else {\n            // 0x404a4e\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x404a58;\n        }\n    }\n  lab_0x404b88:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x404b9b\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x404ba7\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x404baa\n    int64_t v73 = v70; // 0x404baa\n    while (v71 != 0) {\n        // 0x404b98\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x404b14;\n  lab_0x404b58:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x404b6b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x404b77\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x404b7a\n    int64_t v79 = v76; // 0x404b7a\n    while (v77 != 0) {\n        // 0x404b68\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x404b14;\n  lab_0x404b26:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x404b3b\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x404b47\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x404b4a\n    int64_t v85 = v82; // 0x404b4a\n    while (v83 != 0) {\n        // 0x404b38\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x404b14;\n  lab_0x404aeb:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x404b03\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x404b0f\n    int32_t v90 = v89; // 0x404b12\n    int64_t v91 = v88; // 0x404b12\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x404b00\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x404b14;\n  lab_0x404acf:\n    // 0x404acf\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x404a87;\n    } else {\n        // 0x404ad8\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x404a58;\n    }\n  lab_0x404a58:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x404a5d\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x404942;\n  lab_0x404ab5:\n    // 0x404ab5\n    *a4 = v18;\n    // 0x404945\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x404a87:\n    // 0x404a87\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x404a58;\n  lab_0x404b14:\n    // 0x404b14\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x404a58;\n}\n"
        },
        {
            "funcName": "function_404ce0",
            "funcStartAddr": "404ce0",
            "funcEndAddr": "404d5b",
            "decompiledFuncCode": "int64_t function_404ce0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x404ce7\n    if (fileno(stream) < 0) {\n        // 0x404d47\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x404cfa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x404d2b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x404d47\n            return fclose(stream);\n        }\n    }\n    // 0x404cfc\n    if ((int32_t)function_404d60(a1, v1) == 0) {\n        // 0x404d47\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x404d08\n    int32_t v3 = *v2; // 0x404d10\n    int64_t result = fclose(stream); // 0x404d1e\n    if (v3 != 0) {\n        // 0x404d50\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x404d20\n    return result;\n}\n"
        },
        {
            "funcName": "function_404d60",
            "funcStartAddr": "404d60",
            "funcEndAddr": "404da0",
            "decompiledFuncCode": "int64_t function_404d60(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x404d7a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x404d7a\n        return fflush(stream);\n    }\n    // 0x404d88\n    function_404da0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_404da0",
            "funcStartAddr": "404da0",
            "funcEndAddr": "404df7",
            "decompiledFuncCode": "int64_t function_404da0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x404da0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x404daa\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x404ddb\n    int64_t result = -1; // 0x404de4\n    if (v1 != -1) {\n        // 0x404de6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x404df2\n    return result;\n}\n"
        },
        {
            "funcName": "function_404e00",
            "funcStartAddr": "404e00",
            "funcEndAddr": "404edf",
            "decompiledFuncCode": "int64_t function_404e00(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x404e0c\n    uint32_t v2 = *v1; // 0x404e0c\n    int64_t v3 = a2 & 0xffffffff; // 0x404e11\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x404e14\n    uint64_t v5 = (int64_t)*v4; // 0x404e14\n    int64_t v6; // 0x404e82\n    if (v3 <= v5) {\n      lab_0x404e7c_2:\n        // 0x404e7c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x404e02\n    int64_t v8 = v2; // 0x404e00\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x404e7c\n        goto lab_0x404e7c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404e38\n    int64_t v17; // 0x404e46\n    int64_t * v18; // 0x404e60\n    int64_t * v19; // 0x404e63\n    int64_t v20; // 0x404e6e\n    int64_t v21; // 0x404e46\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x404e43\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x404e60\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x404e77\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x404e7c\n            goto lab_0x404e7c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x404e7c\n            goto lab_0x404e7c_2;\n        }\n        // 0x404e32\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x404ebb\n    int64_t * v23 = (int64_t *)v22; // 0x404ec0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x404ec3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x404ec0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x404ed7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x404e2d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x404e7c\n            goto lab_0x404e7c_2;\n        }\n        // 0x404e32\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x404e43\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x404e60\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x404e77\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x404e7c\n                goto lab_0x404e7c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x404e7c\n                goto lab_0x404e7c_2;\n            }\n            // 0x404e32\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x404ea0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x404ec0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x404ed7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x404e7c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404ee0",
            "funcStartAddr": "404ee0",
            "funcEndAddr": "4054fc",
            "decompiledFuncCode": "int64_t function_404ee0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x404eff\n    int64_t v2 = *v1; // 0x404eff\n    char * str2 = (char *)v2; // 0x404f0c\n    char c = *str2; // 0x404f0c\n    int64_t v3 = v2; // 0x404f38\n    int64_t v4 = 0; // 0x404ee0\n    int32_t v5; // 0x404ee0\n    int64_t v6; // 0x404ee0\n    int64_t v7; // 0x404ee0\n    int64_t v8; // 0x404ee0\n    int64_t v9; // 0x404ee0\n    int64_t v10; // 0x404ee0\n    int64_t v11; // 0x404ee0\n    int64_t v12; // 0x404ee0\n    int64_t v13; // 0x404ee0\n    int64_t str3; // 0x404ee0\n    int64_t v14; // 0x404ee0\n    int64_t v15; // 0x404ee0\n    int64_t v16; // 0x404ee0\n    int64_t v17; // 0x404ee0\n    int32_t v18; // 0x404ee0\n    int32_t v19; // 0x404ee0\n    int32_t v20; // 0x404ee0\n    int32_t v21; // 0x404ee0\n    int32_t v22; // 0x404ee0\n    int32_t v23; // 0x404ee0\n    int32_t v24; // 0x404ee0\n    int32_t v25; // 0x404ee0\n    int32_t v26; // 0x404ee0\n    int32_t v27; // 0x404ee0\n    int32_t v28; // 0x404ee0\n    int32_t v29; // 0x404ee0\n    int64_t nmemb; // 0x404ee0\n    int64_t v30; // 0x404ee0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x404f3c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404f38\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404f48\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x404f4e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x404f18\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x404f7c\n                int64_t v34; // 0x404ee0\n                int64_t v35; // 0x404ee0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x404f85\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405100;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x404f96\n                int64_t v37 = *(int64_t *)v36; // 0x404f9a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x404f70\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x404f85\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405100;\n                        }\n                    }\n                    // 0x404f96\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x404fe6:\n                    // 0x404fe6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405040;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4051b0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405040;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405160\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40500a;\n                                } else {\n                                    // 0x40516c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40500a;\n                                    } else {\n                                        // 0x40517a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40500a;\n                                        } else {\n                                            goto lab_0x405040;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40500a;\n                            }\n                        }\n                    }\n                }\n              lab_0x405051:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405226\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4053d2\n                            flockfile(g30);\n                            int64_t v41 = *v1; // 0x4053f2\n                            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40543f\n                            int64_t v43 = (int64_t)g30;\n                            int64_t v44 = v43; // 0x405459\n                            int64_t v45; // 0x40545b\n                            if (*(char *)v42 != 0) {\n                                // 0x40545b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g30;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405453\n                            while (v17 + nmemb != v42) {\n                                // 0x405455\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40545b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g30;\n                                }\n                                // 0x405448\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405480\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g30);\n                            v40 = *v1;\n                        } else {\n                            // 0x405234\n                            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40538f\n                        free((int64_t *)v17);\n                    }\n                    // 0x405289\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4052a0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40514e\n                    return 63;\n                }\n                // 0x405070\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4050f4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405100:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405110\n                    uint32_t v50 = *v49; // 0x405110\n                    int64_t v51 = v50; // 0x405110\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40511a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405123\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40534f\n                                __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4052fa\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40514e\n                            return 63;\n                        }\n                        // 0x405198\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4054af\n                                    __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4053ad\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4053c0\n                                // 0x40514e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4052be\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4052d2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40513b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40513e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405142\n                    int64_t result = v59; // 0x405148\n                    if (v58 != 0) {\n                        // 0x40514a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40514e\n                    return result;\n                }\n            } else {\n                // 0x404f4e\n                v5 = v32;\n            }\n            // break -> 0x405075\n            break;\n        }\n    }\n    // 0x405075\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40508d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405097\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40514e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4051d9\n        __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4050c6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4050d6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405040:\n    // 0x405040\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405040\n    int64_t v63 = *(int64_t *)v62; // 0x405044\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405051\n        goto lab_0x405051;\n    }\n    goto lab_0x404fe6;\n  lab_0x40500a:\n    // 0x40500a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x404ee0\n    int32_t v65; // 0x404ee0\n    int32_t v66; // 0x404ee0\n    if (v27 != 0) {\n        goto lab_0x405040;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4051c0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405040;\n            } else {\n                goto lab_0x405031;\n            }\n        } else {\n            // 0x405025\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40531c\n                int64_t v67 = (int64_t)mem; // 0x40531c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405040;\n                } else {\n                    // 0x40532f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405031;\n                }\n            } else {\n                goto lab_0x405031;\n            }\n        }\n    }\n  lab_0x405031:\n    // 0x405031\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405040;\n}\n"
        },
        {
            "funcName": "function_405500",
            "funcStartAddr": "405500",
            "funcEndAddr": "405ac6",
            "decompiledFuncCode": "int64_t function_405500(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405521\n    if (v3 < 1) {\n        // 0x4056de\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40551d\n    int32_t v5 = *(int32_t *)a7; // 0x405529\n    uint64_t v6 = a1 & 0xffffffff; // 0x40552b\n    int64_t v7 = v2; // 0x405530\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405533\n    *v8 = 0;\n    int64_t v9; // 0x405500\n    int64_t v10; // 0x405500\n    int64_t v11; // 0x405500\n    int64_t v12; // 0x405500\n    int64_t str; // 0x405500\n    int64_t v13; // 0x405500\n    int64_t v14; // 0x405500\n    int64_t v15; // 0x405500\n    int64_t v16; // 0x405500\n    int64_t v17; // 0x405500\n    int32_t v18; // 0x405500\n    char v19; // 0x405500\n    if (v5 == 0) {\n        // 0x405718\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40554a;\n    } else {\n        // 0x405543\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405590\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405593\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405658;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4055a6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4055b6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40566c;\n                } else {\n                    goto lab_0x4055c8;\n                }\n            }\n        } else {\n            goto lab_0x40554a;\n        }\n    }\n  lab_0x40554a:\n    // 0x40554a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405550\n    *v24 = 0;\n    int64_t v25; // 0x405500\n    int64_t v26; // 0x405500\n    int64_t v27; // 0x405500\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405640\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40564d;\n        }\n        case 43: {\n            // 0x405950\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40564d;\n        }\n        default: {\n            // 0x40556c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4058cf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4059e8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40564d;\n                } else {\n                    // 0x4058dd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40557a;\n                }\n            } else {\n                goto lab_0x40557a;\n            }\n        }\n    }\n  lab_0x405658:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40565f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4055c8;\n    } else {\n        goto lab_0x40566c;\n    }\n  lab_0x40557a:\n    // 0x40557a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40564d;\n  lab_0x40564d:\n    // 0x40564d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405658;\n  lab_0x4055c8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4055c8\n    int64_t v31 = v30; // 0x4055c8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4055ca\n    if ((int64_t)*v32 > v31) {\n        // 0x4055cf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4055d2\n    if (*v33 > v30) {\n        // 0x4055d7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4055da\n    int64_t v35 = v31; // 0x4055de\n    int64_t v36 = v15; // 0x4055de\n    int64_t v37; // 0x405500\n    int64_t v38; // 0x405500\n    int64_t v39; // 0x405500\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405748\n        int64_t v41 = v40; // 0x405748\n        v2 = v41;\n        int64_t v42; // 0x405500\n        if (*v33 == v40) {\n            // 0x405930\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405938\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405754\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405758\n                function_404e00(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405768\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405771\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40577a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405791\n            int64_t v47 = v45 & 0xffffffff; // 0x405795\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40579e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4057a4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4057a6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405780\n            int64_t v49 = v48 & 0xffffffff; // 0x405780\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405791\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40579e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4057a4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4057a6;\n                    }\n                }\n                // 0x405780\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405948\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4057a6;\n    } else {\n        goto lab_0x4055e4;\n    }\n  lab_0x40566c:\n    // 0x40566c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40566f\n    int64_t v51 = v12; // 0x40566f\n    int64_t v52 = v14; // 0x40566f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4055c8;\n    } else {\n        goto lab_0x405675;\n    }\n  lab_0x4055e4:;\n    int32_t v53 = v35; // 0x4055e4\n    int64_t v54; // 0x405500\n    int64_t v55; // 0x405500\n    int64_t v56; // 0x405500\n    int64_t v57; // 0x405500\n    int64_t v58; // 0x405500\n    int64_t v59; // 0x405500\n    char * v60; // 0x405500\n    int64_t v61; // 0x405500\n    int64_t v62; // 0x4055f9\n    int64_t v63; // 0x405500\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405733\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405736;\n    } else {\n        // 0x4055ec\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405500\n        int64_t v66 = v65 ? -1 : 1; // 0x405600\n        int64_t v67 = (int64_t)\"--\"; // 0x405500\n        int64_t v68 = v62; // 0x405500\n        int64_t v69 = 3; // 0x405600\n        unsigned char v70 = *(char *)v68; // 0x405600\n        char v71 = *(char *)v67; // 0x405600\n        char v72 = v71; // 0x405600\n        bool v73 = false; // 0x405600\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4056f0\n            if (*(char *)v62 == 45) {\n                // 0x4057b0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4057b0\n                if (c == 0) {\n                    goto lab_0x4056fa;\n                } else {\n                    // 0x4057bd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405840;\n                    } else {\n                        if (c == 45) {\n                            // 0x405a23\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405895;\n                        } else {\n                            // 0x4057ce\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405840;\n                            } else {\n                                // 0x4057d3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4057f4;\n                                } else {\n                                    // 0x4057da\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405840;\n                                    } else {\n                                        goto lab_0x4057f4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4056fa;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405610\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405613\n            int64_t v77 = v35 + 1; // 0x405616\n            int32_t v78 = v77; // 0x405619\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405980\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405627\n                    function_404e00(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405635\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405736;\n        }\n    }\n  lab_0x405675:;\n    // 0x405675\n    int64_t v79; // bp-104, 0x405500\n    int64_t v80 = &v79; // 0x40550a\n    int64_t v81 = v50 + 1; // 0x405675\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40567c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405681\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405685\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405689\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405691\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405696\n    int32_t c2 = v84; // 0x405696\n    char * found_char_pos = strchr(str2, c2); // 0x405696\n    int64_t v87 = *v82; // 0x40569b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4056a5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4056b0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4059a0\n            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40596d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4056de\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405696\n    char v91 = *(char *)(v90 + 1); // 0x4056cb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405685\n        if (v91 != 58) {\n            // 0x4056de\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x4058f4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4059f8\n                *v8 = 0;\n            } else {\n                // 0x4059dc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40591e\n            *v83 = 0;\n            // 0x4056de\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x4058fe\n        if (v93 != 0) {\n            // 0x405990\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40591e\n            *v83 = 0;\n            // 0x4056de\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405911\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40591e\n            *v83 = 0;\n            // 0x4056de\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x405a5a\n            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x405a0a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405a11\n        // 0x40591e\n        *v83 = 0;\n        // 0x4056de\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405869\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40586b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405a90\n                __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405a41\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405a48\n            // 0x4056de\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405876\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40587a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405895;\n  lab_0x4057a6:\n    // 0x4057a6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4055e4;\n  lab_0x405895:;\n    int64_t v99 = function_404ee0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4058b3\n    // 0x4056de\n    return v99 & 0xffffffff;\n  lab_0x405736:;\n    int32_t v100 = v55; // 0x405736\n    if (v100 != (int32_t)v59) {\n        // 0x40573a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4056de\n    return 0xffffffff;\n  lab_0x4056fa:\n    // 0x4056fa\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405701\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4056de\n    return v99 & 0xffffffff;\n  lab_0x405840:\n    // 0x405840\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405675;\n  lab_0x4057f4:\n    // 0x4057f4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_404ee0(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40581a\n    if ((int32_t)v101 != -1) {\n        // 0x4056de\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40582f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405840;\n}\n"
        },
        {
            "funcName": "function_405ad0",
            "funcStartAddr": "405ad0",
            "funcEndAddr": "405b26",
            "decompiledFuncCode": "int64_t function_405ad0(int64_t a1) {\n    // 0x405ad0\n    *(int32_t *)&g45 = g25;\n    *(int32_t *)&g46 = g24;\n    int64_t v1; // 0x405ad0\n    int64_t result = function_405500(v1, v1, v1, v1, v1, v1, &g45, a1 & 0xffffffff); // 0x405af6\n    g25 = *(int32_t *)&g45;\n    g50 = g48;\n    *(int32_t *)&g23 = g47;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405b30",
            "funcStartAddr": "405b30",
            "funcEndAddr": "405b48",
            "decompiledFuncCode": "int64_t function_405b30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405b30\n    return function_405ad0(1);\n}\n"
        },
        {
            "funcName": "function_405b50",
            "funcStartAddr": "405b50",
            "funcEndAddr": "405b63",
            "decompiledFuncCode": "int64_t function_405b50(int64_t a1, int64_t a2, char * a3, char (**a4)[6], int32_t a5, int64_t a6) {\n    // 0x405b50\n    return function_405ad0(0);\n}\n"
        },
        {
            "funcName": "function_405b70",
            "funcStartAddr": "405b70",
            "funcEndAddr": "405b85",
            "decompiledFuncCode": "int64_t function_405b70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405b70\n    return function_405500(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405b90",
            "funcStartAddr": "405b90",
            "funcEndAddr": "405ba6",
            "decompiledFuncCode": "int64_t function_405b90(void) {\n    // 0x405b90\n    return function_405ad0(0);\n}\n"
        },
        {
            "funcName": "function_405bb0",
            "funcStartAddr": "405bb0",
            "funcEndAddr": "405bc8",
            "decompiledFuncCode": "int64_t function_405bb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405bb0\n    return function_405500(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405bd0",
            "funcStartAddr": "405bd0",
            "funcEndAddr": "405c4a",
            "decompiledFuncCode": "int64_t function_405bd0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x405bdb\n    int64_t v2 = (int64_t)&g9; // 0x405bdb\n    int32_t * pwc; // 0x405bd0\n    int64_t v3; // 0x405bd0\n    int64_t n; // 0x405bd0\n    if (a2 == 0) {\n        goto lab_0x405c22;\n    } else {\n        // 0x405bdd\n        if (a3 == 0) {\n            // 0x405c08\n            return -2;\n        }\n        // 0x405be9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405c22;\n        } else {\n            goto lab_0x405bf4;\n        }\n    }\n  lab_0x405c22:\n    // 0x405c22\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x405bd0\n    pwc = (int32_t *)&v4;\n    goto lab_0x405bf4;\n  lab_0x405bf4:;\n    char * wstr = (char *)v3; // 0x405bfa\n    int64_t ps; // 0x405bd0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x405bfa\n    int64_t result = v5; // 0x405bfa\n    if (v5 < 0xfffffffe) {\n        // 0x405c08\n        return result;\n    }\n    int64_t result2 = result; // 0x405c39\n    if ((char)function_405cb0(0, v3) == 0) {\n        // 0x405c3b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405c08\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405c50",
            "funcStartAddr": "405c50",
            "funcEndAddr": "405cad",
            "decompiledFuncCode": "int64_t function_405c50(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405c57\n    int64_t v2; // 0x405c50\n    int64_t result = function_404ce0(a1, v2); // 0x405c68\n    if ((v2 & 32) != 0) {\n        // 0x405c90\n        if ((int32_t)result == 0) {\n            // 0x405c94\n            *__errno_location() = 0;\n        }\n        // 0x405c8a\n        return 0xffffffff;\n    }\n    // 0x405c71\n    if ((int32_t)result == 0) {\n        // 0x405c8a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405c78\n    if (v1 == 0) {\n        // 0x405c7a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x405c8a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405cb0",
            "funcStartAddr": "405cb0",
            "funcEndAddr": "405d0e",
            "decompiledFuncCode": "int64_t function_405cb0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405cb6\n    if (locale == NULL) {\n        // 0x405ce3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405cb6\n    bool v2; // 0x405cb0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g10; // 0x405cb0\n    int64_t v5 = v1; // 0x405cb0\n    int64_t v6 = 2; // 0x405cd5\n    unsigned char v7 = *(char *)v5; // 0x405cd5\n    char v8 = *(char *)v4; // 0x405cd5\n    char v9 = v8; // 0x405cd5\n    bool v10 = false; // 0x405cd5\n    while (v7 == v8) {\n        // 0x405cc8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405ce1\n    int64_t v13 = v1; // 0x405ce1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405ce3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405ce1\n    unsigned char v15 = *(char *)v13; // 0x405cfd\n    char v16 = *(char *)v12; // 0x405cfd\n    char v17 = v16; // 0x405cfd\n    bool v18 = false; // 0x405cfd\n    while (v15 == v16) {\n        // 0x405cf0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405d10",
            "funcStartAddr": "405d10",
            "funcEndAddr": "406272",
            "decompiledFuncCode": "int64_t function_405d10(void) {\n    char * v1 = nl_langinfo(14); // 0x405d26\n    char * v2 = g49; // 0x405d2b\n    char * v3; // 0x405d10\n    int64_t v4; // 0x405d10\n    int64_t v5; // 0x405d10\n    int64_t v6; // 0x405d10\n    int64_t v7; // 0x405d10\n    int32_t size; // 0x405d10\n    int32_t size2; // 0x405d10\n    int32_t len; // 0x405de2\n    int64_t v8; // 0x405de2\n    char * env_val; // 0x405dcd\n    if (v2 == NULL) {\n        // 0x405dc8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405e35;\n        } else {\n            // 0x405dda\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405e35;\n            } else {\n                // 0x405ddf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x405dcd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406265\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405e35;\n                    } else {\n                        // 0x4061d9\n                        size2 = len + 14;\n                        goto lab_0x405dfb;\n                    }\n                } else {\n                    goto lab_0x405dfb;\n                }\n            }\n        }\n    } else {\n        // 0x405d10\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x405d4a;\n    }\n  lab_0x40607c:;\n    // 0x40607c\n    struct _IO_FILE * stream; // 0x405ebb\n    int32_t v10 = __uflow(stream); // 0x40607f\n    int64_t v11; // 0x405d10\n    int64_t v12 = v11; // 0x406089\n    int64_t v13; // 0x405d10\n    int64_t v14 = v13; // 0x406089\n    int32_t v15 = v10; // 0x406089\n    int64_t v16; // 0x405d10\n    int64_t v17 = v16; // 0x406089\n    int64_t v18 = v11; // 0x406089\n    int64_t v19 = v13; // 0x406089\n    int64_t v20 = v16; // 0x406089\n    if (v10 == -1) {\n        // break -> 0x40608f\n        goto lab_0x40608f;\n    }\n    goto lab_0x405f09;\n  lab_0x405efe:;\n    // 0x405efe\n    int64_t v90; // 0x405d10\n    int64_t * v32; // 0x405ef0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405d10\n    v12 = v89;\n    int64_t v91; // 0x405d10\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405d10\n    v17 = v92;\n    goto lab_0x405f09;\n  lab_0x405f09:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405d10\n    int32_t v25; // bp-120, 0x405d10\n    int32_t v26; // bp-184, 0x405d10\n    int64_t v27; // 0x405ebb\n    int64_t v28; // 0x405ed8\n    int64_t v29; // 0x405edd\n    int64_t * v30; // 0x405ef4\n    switch (c) {\n        case 32: {\n            goto lab_0x405ef0;\n        }\n        case 10: {\n            goto lab_0x405ef0;\n        }\n        case 9: {\n            goto lab_0x405ef0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4060e1\n            int32_t v33; // 0x405d10\n            char v34; // 0x405d10\n            int32_t v35; // 0x4060ee\n            if (v31 < *v30) {\n                // 0x4060c0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4060eb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4060e1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4060c0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4060eb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4060d0\n                v36 = v33;\n            }\n            // 0x4061bf\n            if (v36 == -1) {\n                // break -> 0x40608f\n                break;\n            }\n            goto lab_0x405ef0;\n        }\n        default: {\n            // 0x405f1f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40608f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405f48\n            int64_t v39 = v37 + 4; // 0x405f4a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405f56\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405f58\n            while (v41 == 0) {\n                // 0x405f48\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x405f76\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x405f82\n            int64_t v45 = v43 + 4; // 0x405f84\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x405f90\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x405f92\n            while (v47 == 0) {\n                // 0x405f82\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x405f7f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x405fa8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x405fb8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x405fbc\n            int64_t v52 = v51 + v48; // 0x405fc5\n            int64_t * mem; // 0x405d10\n            int64_t v53; // 0x405d10\n            int64_t v54; // 0x405d10\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4060fb\n                int64_t v56 = v55 + 3; // 0x406107\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x405fe1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x405ff0\n            if (mem == NULL) {\n                // 0x40621c\n                free((int64_t *)v21);\n                function_404ce0(v27, v53);\n                v24 = (int64_t)&g9;\n                goto lab_0x405e94;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406008\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406012\n            uint32_t v62 = (int32_t)v59; // 0x406015\n            int64_t v63; // 0x405d10\n            if (v62 >= 8) {\n                // 0x406124\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40613e\n                int64_t v66 = v61 - v65; // 0x406142\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40614d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40615e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40615e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40615b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4061ef\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406027\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40602b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40603b\n            int64_t v74 = v60 - 1; // 0x40603f\n            uint32_t v75 = (int32_t)v73; // 0x406044\n            int64_t v76; // 0x405d10\n            if (v75 >= 8) {\n                // 0x406172\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40617c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40618c\n                int64_t v80 = v74 - v79; // 0x406190\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40619b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4061ab\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4061a9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x406206\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40620e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406056\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40605a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406253\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40606e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x405efe;\n            } else {\n                goto lab_0x40607c;\n            }\n        }\n    }\n  lab_0x405ef0:;\n    int64_t v93 = v23; // 0x405d10\n    int64_t v94 = v22; // 0x405d10\n    int64_t v95 = v21; // 0x405d10\n    goto lab_0x405ef0_2;\n  lab_0x405e35:;\n    int64_t * mem3 = malloc(size); // 0x405e35\n    int64_t v97 = (int64_t)&g9; // 0x405e40\n    int64_t v98; // 0x405d10\n    int64_t path; // 0x405d10\n    if (mem3 == NULL) {\n        goto lab_0x405e12;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405e35\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405e56;\n    }\n  lab_0x405d4a:;\n    int64_t str = v1 == NULL ? (int64_t)&g9 : (int64_t)v1; // 0x405d3d\n    char v100 = *v3; // 0x405d4a\n    int64_t v101; // 0x405d10\n    if (v100 == 0) {\n        // 0x405da4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405d10\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405d10\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405d90\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405d97;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405d60\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x405d6d\n        char v107 = *(char *)v106; // 0x405d72\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405da4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x405d7b\n    v104 = v103 + 1;\n  lab_0x405d97:\n    // 0x405da4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405e12:;\n    char * v108 = (char *)v97;\n    g49 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x405d4a;\n  lab_0x405e56:;\n    int64_t v109 = v98 + path; // 0x405e56\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405e82\n    v24 = (int64_t)&g9;\n    if (fd >= 0) {\n        // 0x405eb1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4061e2\n            close(fd);\n            v24 = (int64_t)&g9;\n        } else {\n            // 0x405ed5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405ef0_2:;\n                uint64_t v96 = *v32; // 0x405ef0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40607c;\n                } else {\n                    goto lab_0x405efe;\n                }\n            }\n          lab_0x40608f:\n            // 0x40608f\n            function_404ce0(v27, v19);\n            v24 = (int64_t)&g9;\n            if (v18 != 0) {\n                // 0x4060ae\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405e94;\n  lab_0x405dfb:;\n    int64_t * mem4 = malloc(size2); // 0x405dfb\n    v97 = (int64_t)&g9;\n    if (mem4 != NULL) {\n        // 0x405ea1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405e56;\n    } else {\n        goto lab_0x405e12;\n    }\n  lab_0x405e94:\n    // 0x405e94\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405e12;\n}\n"
        },
        {
            "funcName": "function_406280",
            "funcStartAddr": "406280",
            "funcEndAddr": "4062dd",
            "decompiledFuncCode": "int64_t function_406280(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406280\n    return function_401400();\n}\n"
        },
        {
            "funcName": "function_4062e0",
            "funcStartAddr": "4062e0",
            "funcEndAddr": "4062e1",
            "decompiledFuncCode": "int64_t function_4062e0(void) {\n    // 0x4062e0\n    int64_t result; // 0x4062e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4062f0",
            "funcStartAddr": "4062f0",
            "funcEndAddr": "406308",
            "decompiledFuncCode": "int64_t function_4062f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4062f0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g15);\n}\n"
        },
        {
            "funcName": "function_406308",
            "funcStartAddr": "406308",
            "funcEndAddr": "406328",
            "decompiledFuncCode": "int64_t function_406308(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g11; // 0x406312\n    while (*(int64_t *)v1 != -1) {\n        // 0x406313\n        v1 -= 8;\n    }\n    // 0x406324\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_fold.elf"
}