{
    "funcInfo": [
        {
            "funcName": "function_401bf0",
            "funcStartAddr": "401bf0",
            "funcEndAddr": "401bf5",
            "decompiledFuncCode": "int64_t function_401bf0(void) {\n    // 0x401bf0\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401bf5",
            "funcStartAddr": "401bf5",
            "funcEndAddr": "401bfa",
            "decompiledFuncCode": "int64_t function_401bf5(void) {\n    // 0x401bf5\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401bfa",
            "funcStartAddr": "401bfa",
            "funcEndAddr": "401bff",
            "decompiledFuncCode": "int64_t function_401bfa(void) {\n    // 0x401bfa\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bff",
            "funcStartAddr": "401bff",
            "funcEndAddr": "401c04",
            "decompiledFuncCode": "int64_t function_401bff(void) {\n    // 0x401bff\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c04",
            "funcStartAddr": "401c04",
            "funcEndAddr": "401c09",
            "decompiledFuncCode": "int64_t function_401c04(void) {\n    // 0x401c04\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c09",
            "funcStartAddr": "401c09",
            "funcEndAddr": "401c0e",
            "decompiledFuncCode": "int64_t function_401c09(void) {\n    // 0x401c09\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c0e",
            "funcStartAddr": "401c0e",
            "funcEndAddr": "401c13",
            "decompiledFuncCode": "int64_t function_401c0e(void) {\n    // 0x401c0e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c13",
            "funcStartAddr": "401c13",
            "funcEndAddr": "401c18",
            "decompiledFuncCode": "int64_t function_401c13(void) {\n    // 0x401c13\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c18",
            "funcStartAddr": "401c18",
            "funcEndAddr": "401c1d",
            "decompiledFuncCode": "int64_t function_401c18(void) {\n    // 0x401c18\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c1d",
            "funcStartAddr": "401c1d",
            "funcEndAddr": "401c22",
            "decompiledFuncCode": "int64_t function_401c1d(void) {\n    // 0x401c1d\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c22",
            "funcStartAddr": "401c22",
            "funcEndAddr": "401c27",
            "decompiledFuncCode": "int64_t function_401c22(void) {\n    // 0x401c22\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c27",
            "funcStartAddr": "401c27",
            "funcEndAddr": "401c2c",
            "decompiledFuncCode": "int64_t function_401c27(void) {\n    // 0x401c27\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c2c",
            "funcStartAddr": "401c2c",
            "funcEndAddr": "401c31",
            "decompiledFuncCode": "int64_t function_401c2c(void) {\n    // 0x401c2c\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401c31",
            "funcStartAddr": "401c31",
            "funcEndAddr": "401c36",
            "decompiledFuncCode": "int64_t function_401c31(void) {\n    // 0x401c31\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c40",
            "funcStartAddr": "401c40",
            "funcEndAddr": "4028e0",
            "decompiledFuncCode": "int64_t function_401c40(int64_t a1, int64_t a2) {\n    int64_t v1 = 0x100000000 * a1;\n    int64_t v2 = v1 >> 32; // 0x401c55\n    int64_t v3; // bp-280, 0x401c40\n    int64_t v4 = &v3; // 0x401c5c\n    int64_t v5 = 0; // bp-224, 0x401c66\n    function_403510(a2);\n    setlocale(LC_ALL, (char *)&g12);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v6; // 0x401c40\n    function_40a910(0x402d90, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v6);\n    *(char *)&g40 = 0;\n    *(char *)&g41 = 0;\n    g42 = 0;\n    int64_t v7 = v2 & 0xffffffff; // 0x401cd0\n    int64_t v8 = a2 - 8;\n    int64_t v9 = 0; // 0x401cbb\n    int64_t v10 = 0; // 0x401cbb\n    int64_t v11 = 0; // 0x401cbb\n    int64_t v12 = 0; // 0x401cbb\n    int64_t v13; // 0x401c40\n    int64_t v14; // 0x401c40\n    int64_t v15; // 0x401c40\n    int64_t v16; // 0x401c40\n    int64_t v17; // 0x401c40\n    int64_t v18; // 0x401c40\n    while (true) {\n      lab_0x401cc0_2:\n        // 0x401cc0\n        v16 = v12;\n        v15 = v11;\n        v14 = v10;\n        v13 = v9;\n        int64_t v19 = v18;\n        int64_t v20 = function_408a70(v7, a2, \"Rcfvr::w::x::X::s::t::u::g::o::a::,::+::=::0::1::2::3::4::5::6::7::\", &g2, 0, v19); // 0x401cd2\n        int32_t v21 = v20;\n        switch (v21) {\n            case -1: {\n                goto lab_0x401f35;\n            }\n            case 99: {\n                // 0x401ed0\n                g20 = 1;\n                v17 = v19;\n                v9 = v13;\n                v10 = v14;\n                v11 = v15;\n                v12 = v16;\n                goto lab_0x401cc0;\n            }\n            default: {\n                if (v21 > 99) {\n                    if (v21 == 118) {\n                        // 0x401ee0\n                        g20 = 0;\n                        v17 = v19;\n                        v9 = v13;\n                        v10 = v14;\n                        v11 = v15;\n                        v12 = v16;\n                        goto lab_0x401cc0;\n                    } else {\n                        if (v21 > 118) {\n                            // 0x401cfa\n                            v17 = v19;\n                            v9 = 0;\n                            v10 = v14;\n                            v11 = v15;\n                            v12 = v16;\n                            if (v21 == 128) {\n                                goto lab_0x401cc0;\n                            } else {\n                                if (v21 > 128) {\n                                    // 0x401d0b\n                                    v17 = v19;\n                                    v9 = 1;\n                                    v10 = v14;\n                                    v11 = v15;\n                                    v12 = v16;\n                                    if (v21 != 129) {\n                                        if (v21 != 130) {\n                                            // 0x401e41\n                                            function_4029c0(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x401d93\n                                        v17 = v19;\n                                        v9 = v13;\n                                        v10 = v14;\n                                        v11 = v15;\n                                        v12 = g58;\n                                    }\n                                    goto lab_0x401cc0;\n                                } else {\n                                    if (v21 >= 121) {\n                                        // 0x401e41\n                                        function_4029c0(1);\n                                        // UNREACHABLE\n                                    }\n                                    goto lab_0x401db0;\n                                }\n                            }\n                        } else {\n                            if (v21 == 111) {\n                                goto lab_0x401db0;\n                            } else {\n                                if (v21 > 111) {\n                                    if (v21 <= 113) {\n                                        // 0x401e41\n                                        function_4029c0(1);\n                                        // UNREACHABLE\n                                    }\n                                    goto lab_0x401db0;\n                                } else {\n                                    if (v21 != 102) {\n                                        if (v21 != 103) {\n                                          lab_0x401e41:\n                                            // 0x401e41\n                                            function_4029c0(1);\n                                            // UNREACHABLE\n                                        }\n                                        goto lab_0x401db0;\n                                    } else {\n                                        // 0x401e60\n                                        *(char *)&g41 = 1;\n                                        v17 = v19;\n                                        v9 = v13;\n                                        v10 = v14;\n                                        v11 = v15;\n                                        v12 = v16;\n                                        goto lab_0x401cc0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    if (v21 > 55) {\n                        if (v21 != 82) {\n                            if (v21 > 82) {\n                                switch (v21) {\n                                    case 88: {\n                                        goto lab_0x401db0;\n                                    }\n                                    case 97: {\n                                        goto lab_0x401db0;\n                                    }\n                                    default: {\n                                        goto lab_0x401e41;\n                                    }\n                                }\n                            } else {\n                                if (v21 != 61) {\n                                    // 0x401e41\n                                    function_4029c0(1);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x401db0;\n                            }\n                        } else {\n                            // 0x401e25\n                            g42 = 1;\n                            v17 = v19;\n                            v9 = v13;\n                            v10 = v14;\n                            v11 = v15;\n                            v12 = v16;\n                            goto lab_0x401cc0;\n                        }\n                    } else {\n                        if (v21 <= 47) {\n                            if (v21 == -130) {\n                                // 0x40281b\n                                function_4029c0(0);\n                                // UNREACHABLE\n                            }\n                            if (v21 <= 0xffffff7e) {\n                                if (v21 == -131) {\n                                    // 0x401d4a\n                                    function_405600((int64_t)g33, \"chmod\", \"GNU coreutils\", (int64_t)g21, \"David MacKenzie\", \"Jim Meyering\");\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x401e41;\n                            }\n                            if (v21 >= 45) {\n                                // 0x401e41\n                                function_4029c0(1);\n                                // UNREACHABLE\n                            }\n                        }\n                        goto lab_0x401db0;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x401f35:;\n    int64_t v22; // 0x401c40\n    int64_t v23; // 0x401c40\n    int64_t v24; // 0x401c40\n    int64_t v25; // 0x401c40\n    if (v16 == 0) {\n        int64_t v26 = g30; // 0x4022ce\n        if (v15 == 0) {\n            int64_t v27 = *(int64_t *)(8 * v26 + a2); // 0x4025de\n            g30 = &g31;\n            v23 = v27;\n            if (v2 > (int64_t)&g31) {\n                goto lab_0x4022e6;\n            } else {\n                // 0x4025f0\n                v25 = v26 + 1;\n                v24 = v27;\n                if (v27 == 0) {\n                    // 0x40260d\n                    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing operand\", 5));\n                    // 0x401e41\n                    function_4029c0(1);\n                    // UNREACHABLE\n                }\n                goto lab_0x4025f5;\n            }\n        } else {\n            // 0x4022de\n            v23 = v15;\n            v25 = v26;\n            v24 = v15;\n            if (v2 > v26) {\n                goto lab_0x4022e6;\n            } else {\n                goto lab_0x4025f5;\n            }\n        }\n    } else {\n        // 0x401f3e\n        if (v15 != 0) {\n            // 0x40260d\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"cannot combine mode and --reference options\", 5));\n            // 0x401e41\n            function_4029c0(1);\n            // UNREACHABLE\n        }\n        // 0x401f47\n        if (g30 >= (int32_t)v2) {\n            // 0x40260d\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing operand\", 5));\n            // 0x401e41\n            function_4029c0(1);\n            // UNREACHABLE\n        }\n        int64_t v28 = function_403330(v16); // 0x401f56\n        g44 = v28;\n        v22 = v15;\n        if (v28 == 0) {\n            // 0x4028a3\n            function_404ee0(4, v16);\n            error(1, *__errno_location(), dcgettext(NULL, \"failed to get attributes of %s\", 5));\n            return &g62;\n        }\n        goto lab_0x401f6b;\n    }\n  lab_0x401cc0:\n    // 0x401cc0\n    v18 = v17;\n    goto lab_0x401cc0_2;\n  lab_0x401db0:;\n    int64_t str = *(int64_t *)(8 * (int64_t)*(int32_t *)0x60f2dc + v8); // 0x401db7\n    int32_t len = strlen((char *)str); // 0x401dc4\n    int64_t v29 = v14 + (int64_t)(v14 != 0); // 0x401dd9\n    int64_t v30 = v29 + (int64_t)len; // 0x401ddc\n    int64_t v31 = v15; // 0x401de5\n    if (v5 <= v30) {\n        // 0x401eef\n        v5 = v30 + 1;\n        v31 = function_4058a0(v15, &v5);\n    }\n    // 0x401deb\n    *(char *)(v31 + v14) = 44;\n    memcpy((int64_t *)(v31 + v29), (int64_t *)str, len + 1);\n    *(char *)&g40 = 1;\n    v17 = v30;\n    v9 = v13;\n    v10 = v30;\n    v11 = v31;\n    v12 = v16;\n    goto lab_0x401cc0;\n  lab_0x401f6b:;\n    int32_t * err_num = __errno_location(); // 0x401f6b\n    unsigned char v32 = g42 & (char)v13; // 0x401f70\n    int64_t v33; // 0x401c40\n    int64_t v34; // 0x401c40\n    int64_t v35; // 0x401c40\n    int64_t v36; // 0x401c40\n    int64_t v37; // 0x401c40\n    if (v32 != 0) {\n        int64_t v38 = function_405150(&g38); // 0x402691\n        g39 = v38;\n        if (v38 != 0) {\n            goto lab_0x401f90;\n        } else {\n            int64_t v39 = function_404ee0(4, (int64_t)\"/\"); // 0x4026b0\n            error(1, *err_num, dcgettext(NULL, \"failed to get attributes of %s\", 5));\n            v37 = v39;\n            v36 = v2;\n            v33 = v32;\n            v34 = v14;\n            v35 = v22;\n            goto lab_0x4026e2;\n        }\n    } else {\n        // 0x401f85\n        g39 = 0;\n        goto lab_0x401f90;\n    }\n  lab_0x4022e6:;\n    int64_t v40 = function_402fc0(v23); // 0x4022e9\n    g44 = v40;\n    if (v40 == 0) {\n        // 0x402831\n        function_405130(v23);\n        error(0, (int32_t)\"invalid mode: %s\" ^ (int32_t)\"invalid mode: %s\", dcgettext(NULL, \"invalid mode: %s\", 5));\n        function_4029c0(1);\n        // UNREACHABLE\n    }\n    // 0x4022fe\n    g43 = umask(0);\n    v22 = v23;\n    goto lab_0x401f6b;\n  lab_0x4025f5:\n    // 0x4025f5\n    if (*(int64_t *)((0x100000000 * v25 >> 29) + v8) != v24) {\n        // 0x40260d\n        int64_t v41; // 0x401c40\n        int64_t v42 = v41;\n        error(0, 0, dcgettext(NULL, (char *)v42, 5));\n        // 0x401e41\n        function_4029c0(1);\n        // UNREACHABLE\n    }\n    // 0x40286f\n    function_405130(*(int64_t *)(v8 + (v1 >> 29)));\n    error(0, (int32_t)\"missing operand after %s\" ^ (int32_t)\"missing operand after %s\", dcgettext(NULL, \"missing operand after %s\", 5));\n    // 0x401e41\n    function_4029c0(1);\n    // UNREACHABLE\n  lab_0x401f90:;\n    int64_t v43 = function_4059d0(8 * (int64_t)g30 + a2, 1041); // 0x401faa\n    int64_t v44 = fts_read(v43); // 0x401fbf\n    g59 = v44;\n    int64_t v45 = 1; // 0x401fca\n    int64_t v46 = v43; // 0x401fca\n    if (v44 == 0) {\n        goto lab_0x402003;\n    } else {\n        goto lab_0x401fd0;\n    }\n  lab_0x402003:;\n    int64_t * err_num2 = (int64_t *)(v4 + 32); // 0x402003\n    int64_t v47 = v45; // 0x40200b\n    if (*(int32_t *)*err_num2 != 0) {\n        // 0x40200d\n        v47 = 0;\n        if (*(char *)&g41 == 0) {\n            // 0x402663\n            error(0, *(int32_t *)*err_num2, dcgettext(NULL, \"fts_read failed\", 5));\n            v47 = 0;\n        }\n    }\n    int64_t v48 = v47; // 0x402028\n    if ((int32_t)fts_close(v46) != 0) {\n        // 0x4025b0\n        error(0, *(int32_t *)*err_num2, dcgettext(NULL, \"fts_close failed\", 5));\n        v48 = 0;\n    }\n    // 0x40202e\n    return v48 % 256 ^ 1;\n  lab_0x401fd0:;\n    int64_t v49 = 0;\n    int64_t v50 = 1;\n    int64_t str2 = *(int64_t *)(v44 + 56); // 0x401fd5\n    int64_t v51 = v50; // 0x401fe3\n    int64_t v52 = v43; // 0x401fe3\n    int64_t v53 = 1; // 0x401fe3\n    int64_t v54; // 0x401c40\n    switch (v44) {\n        case 2: {\n            // 0x40211a\n            if ((char)function_405a20(v43, v44) != 0) {\n                // 0x402627\n                function_404fb0(0, 3, str2);\n                error(0, (int32_t)\"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\" ^ (int32_t)\"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\", dcgettext(NULL, \"WARNING: Circular directory structure.\\nThis almost certainly means that you have a corrupted file system.\\nNOTIFY YOUR SYSTEM MANAGER.\\nThe following directory is part of the cycle:\\n  %s\\n\", 5));\n                v51 = v50;\n                v52 = v43;\n                v53 = 0;\n                goto lab_0x401ff0;\n            } else {\n                goto lab_0x40212d;\n            }\n        }\n        case 4: {\n            // 0x402046\n            if (*(char *)&g41 == 0) {\n                // 0x402591\n                function_404ee0(4, str2);\n                v54 = (int64_t)\"cannot read directory %s\";\n                goto lab_0x402279;\n            } else {\n                goto lab_0x402058;\n            }\n        }\n        case 6: {\n            goto lab_0x401ff0;\n        }\n        case 7: {\n            // 0x402298\n            if (*(char *)&g41 == 0) {\n                // 0x4022a5\n                error(0, *(int32_t *)(v44 + 64), \"%s\", (char *)function_404fb0(0, 3, str2));\n            }\n            goto lab_0x402058;\n        }\n        case 10: {\n            // 0x402240\n            if (*(int64_t *)(v44 + 88) != 0) {\n                goto lab_0x402252;\n            } else {\n                int64_t * v55 = (int64_t *)(v44 + 32); // 0x402247\n                if (*v55 == 0) {\n                    // 0x402769\n                    *v55 = 1;\n                    fts_set(v43, v44, 1);\n                    v51 = v50;\n                    v52 = v43;\n                    v53 = 1;\n                    goto lab_0x401ff0;\n                } else {\n                    goto lab_0x402252;\n                }\n            }\n        }\n        case 13: {\n            // 0x4021fc\n            if (*(char *)&g41 == 0) {\n                // 0x402209\n                function_404ee0(4, str2);\n                error(0, (int32_t)\"cannot operate on dangling symlink %s\" ^ (int32_t)\"cannot operate on dangling symlink %s\", dcgettext(NULL, \"cannot operate on dangling symlink %s\", 5));\n            }\n            goto lab_0x402058;\n        }\n        default: {\n            goto lab_0x40212d;\n        }\n    }\n  lab_0x4026e2:;\n    int64_t v56 = v37; // 0x4026e9\n    int64_t v57 = v36; // 0x4026e9\n    int64_t v58 = v33; // 0x4026e9\n    int64_t v59 = v34; // 0x4026e9\n    int64_t v60 = v35; // 0x4026e9\n    if (*(char *)&g41 == 0) {\n        // 0x40278c\n        function_404ee0(4, v33);\n        char * format = dcgettext(NULL, \"getting new attributes of %s\", 5); // 0x4027a8\n        error(0, *(int32_t *)*(int64_t *)(v4 + 32), format);\n        v56 = v37;\n        v57 = v36;\n        v58 = v33;\n        v59 = v34;\n        v60 = v35;\n    }\n    goto lab_0x4026ef;\n  lab_0x401ff0:;\n    int64_t v78 = fts_read(v52); // 0x401ff6\n    v45 = v51 & 0xffffffff & v53;\n    v46 = v52;\n    if (v78 != 0) {\n        // 0x401ff0\n        goto lab_0x401fd0;\n    } else {\n        goto lab_0x402003;\n    }\n  lab_0x40212d:\n    // 0x40212d\n    if (g39 == 0) {\n        goto lab_0x402149;\n    } else {\n        // 0x402139\n        if (*(int64_t *)(v44 + 128) == *(int64_t *)g39) {\n            // 0x4024d2\n            if (*(int64_t *)(v44 + 120) != *(int64_t *)(g39 + 8)) {\n                goto lab_0x402149;\n            } else {\n                // 0x4024e0\n                if (strcmp((char *)str2, \"/\") != 0) {\n                    // 0x4027c8\n                    function_404e00(1, 4, (int64_t *)\"/\");\n                    function_404e00(0, 4, (int64_t *)str2);\n                    error(0, (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\" ^ (int32_t)\"it is dangerous to operate recursively on %s (same as %s)\", dcgettext(NULL, \"it is dangerous to operate recursively on %s (same as %s)\", 5));\n                } else {\n                    // 0x4024f5\n                    function_404ee0(4, str2);\n                    error(0, (int32_t)\"it is dangerous to operate recursively on %s\" ^ (int32_t)\"it is dangerous to operate recursively on %s\", dcgettext(NULL, \"it is dangerous to operate recursively on %s\", 5));\n                }\n                // 0x402527\n                error(0, (int32_t)\"use --no-preserve-root to override this failsafe\" ^ (int32_t)\"use --no-preserve-root to override this failsafe\", dcgettext(NULL, \"use --no-preserve-root to override this failsafe\", 5));\n                fts_set(v43, v44, 4);\n                fts_read(v43);\n                v51 = v50;\n                v52 = v43;\n                v53 = 0;\n                goto lab_0x401ff0;\n            }\n        } else {\n            goto lab_0x402149;\n        }\n    }\n  lab_0x4026ef:;\n    int64_t v61 = v56; // 0x4026f6\n    int64_t v62 = v57; // 0x4026f6\n    int64_t v63 = v58; // 0x4026f6\n    int64_t v64 = v59; // 0x4026f6\n    int64_t v65 = v60; // 0x4026f6\n    if (g20 == 0) {\n        // 0x4026fc\n        function_402e30(*(int32_t *)(v4 + 8), v4 + 68);\n        char v66 = v60; // 0x402713\n        *(char *)(v4 + 78) = v66;\n        function_402e30(*(int32_t *)(v4 + 12), v4 + 80);\n        *(char *)(v4 + 90) = v66;\n        char * v67 = dcgettext(NULL, \"mode of %s retained as %04lo (%s)\\n\", 5); // 0x40272e\n        function_404ee0(4, v58);\n        __printf_chk(1, v67);\n        v61 = v56;\n        v62 = v57;\n        v63 = v58;\n        v64 = v59;\n        v65 = v60;\n    }\n    goto lab_0x40241a;\n  lab_0x402149:;\n    int32_t v87 = *(int32_t *)(v44 + 144); // 0x402149\n    int64_t * path = (int64_t *)(v4 + 16); // 0x402166\n    *path = *(int64_t *)(v44 + 48);\n    int32_t v88 = v87 & 0xf000; // 0x40216b\n    int32_t * v79 = (int32_t *)(v4 + 12); // 0x402172\n    *v79 = v87;\n    int32_t mode = function_403390(v87, (int64_t)(v88 == 0x4000), g43, (int64_t)g44, 0); // 0x40218b\n    int32_t * v81 = (int32_t *)(v4 + 8); // 0x40218b\n    *v81 = mode;\n    int64_t v71; // 0x401c40\n    int64_t v72; // 0x401c40\n    int32_t v80; // 0x401c40\n    int64_t v70; // 0x401c40\n    int64_t v69; // 0x401c40\n    if (v88 == 0xa000) {\n        int32_t v89 = g20; // 0x402318\n        v69 = v50;\n        v70 = v43;\n        v71 = v44;\n        v72 = 1;\n        if (v89 != 2 && v89 == 0) {\n            // 0x402327\n            function_404ee0(4, str2);\n            __printf_chk(1, dcgettext(NULL, \"neither symbolic link %s nor referent has been changed\\n\", 5));\n            v69 = v50;\n            v70 = v43;\n            v71 = v44;\n            v72 = 1;\n        }\n        goto lab_0x4020f8;\n    } else {\n        int32_t * fd = (int32_t *)(v43 + 44); // 0x40219c\n        if (fchmodat(*fd, (char *)*path, mode, 0) == 0) {\n            // 0x402370\n            v61 = v50;\n            v62 = v43;\n            v63 = str2;\n            v64 = v44;\n            v65 = v49;\n            if (g20 == 2) {\n                goto lab_0x40241a;\n            } else {\n                int32_t v90 = *v81; // 0x40237d\n                v80 = v90;\n                if ((v90 & 3584) != 0) {\n                    // 0x402566\n                    v37 = v50;\n                    v36 = v43;\n                    v33 = str2;\n                    v34 = v44;\n                    v35 = v49;\n                    if (__fxstatat(1, *fd, (char *)*path, (struct stat *)(v4 + 80), 0) != 0) {\n                        goto lab_0x4026e2;\n                    } else {\n                        // 0x402588\n                        v80 = *(int32_t *)(v4 + 104);\n                        goto lab_0x40238c;\n                    }\n                } else {\n                    goto lab_0x40238c;\n                }\n            }\n        } else {\n            // 0x4021b3\n            if (*(char *)&g41 == 0) {\n                // 0x4021c0\n                function_404ee0(4, str2);\n                char * format2 = dcgettext(NULL, \"changing permissions of %s\", 5); // 0x4021dc\n                error(0, *(int32_t *)*(int64_t *)(v4 + 32), format2);\n            }\n            goto lab_0x402058;\n        }\n    }\n  lab_0x402058:;\n    int32_t v84 = g20; // 0x402058\n    v69 = v50;\n    v70 = v43;\n    v71 = v44;\n    v72 = 0;\n    if (v84 != 2 && v84 == 0) {\n        // 0x402072\n        function_402e30(*(int32_t *)(v4 + 8), v4 + 68);\n        char v85 = v49; // 0x402089\n        *(char *)(v4 + 78) = v85;\n        function_402e30(*(int32_t *)(v4 + 12), v4 + 80);\n        *(char *)(v4 + 90) = v85;\n        char * v86 = dcgettext(NULL, \"failed to change mode of %s from %04lo (%s) to %04lo (%s)\\n\", 5); // 0x4020a4\n        function_404ee0(4, str2);\n        *(int64_t *)(v4 - 8) = 5;\n        *(int64_t *)(v4 - 16) = v4 + 69;\n        __printf_chk(1, v86);\n        v69 = v50;\n        v70 = v43;\n        v71 = v44;\n        v72 = 0;\n    }\n    goto lab_0x4020f8;\n  lab_0x402252:\n    // 0x402252\n    if (*(char *)&g41 != 0) {\n        goto lab_0x402058;\n    } else {\n        // 0x40225f\n        function_404ee0(4, str2);\n        v54 = (int64_t)\"cannot access %s\";\n        goto lab_0x402279;\n    }\n  lab_0x40241a:;\n    unsigned char v68 = *(char *)&g40; // 0x40241a\n    v69 = v61;\n    v70 = v62;\n    v71 = v64;\n    v72 = 1;\n    if (v68 != 0) {\n        int32_t v73 = *(int32_t *)(v4 + 12); // 0x40242b\n        int32_t v74 = function_403390(v73, (int64_t)((v73 & 0xf000) == 0x4000), 0, (int64_t)g44, 0); // 0x402452\n        int32_t v75 = *(int32_t *)(v4 + 8); // 0x402456\n        v69 = v61;\n        v70 = v62;\n        v71 = v64;\n        v72 = v68;\n        if ((v75 & -1 - v74) != 0) {\n            int32_t * v76 = (int32_t *)(v4 + 16); // 0x402469\n            *v76 = v74;\n            function_402e30(v75, v4 + 68);\n            function_402e30(*v76, v4 + 80);\n            char v77 = v65; // 0x40248f\n            *(char *)(v4 + 90) = v77;\n            *(char *)(v4 + 78) = v77;\n            function_404fb0(0, 3, v63);\n            error(0, (int32_t)\"%s: new permissions are %s, not %s\" ^ (int32_t)\"%s: new permissions are %s, not %s\", dcgettext(NULL, \"%s: new permissions are %s, not %s\", 5));\n            v69 = v61;\n            v70 = v62;\n            v71 = v64;\n            v72 = 0;\n        }\n    }\n    goto lab_0x4020f8;\n  lab_0x402279:\n    // 0x402279\n    error(0, *(int32_t *)(v44 + 64), dcgettext(NULL, (char *)v54, 5));\n    goto lab_0x402058;\n  lab_0x4020f8:\n    // 0x4020f8\n    v51 = v69;\n    v52 = v70;\n    v53 = v72;\n    if (g42 == 0) {\n        // 0x402105\n        fts_set(v70, v71, 4);\n        v51 = v69;\n        v52 = v70;\n        v53 = v72;\n    }\n    goto lab_0x401ff0;\n  lab_0x40238c:\n    // 0x40238c\n    v56 = v50;\n    v57 = v43;\n    v58 = str2;\n    v59 = v44;\n    v60 = v49;\n    if ((*v79 ^ v80) % 0x1000 == 0) {\n        goto lab_0x4026ef;\n    } else {\n        // 0x40239b\n        function_402e30(*v81, v4 + 68);\n        char v82 = v49; // 0x4023b2\n        *(char *)(v4 + 78) = v82;\n        function_402e30(*v79, v4 + 80);\n        *(char *)(v4 + 90) = v82;\n        char * v83 = dcgettext(NULL, \"mode of %s changed from %04lo (%s) to %04lo (%s)\\n\", 5); // 0x4023cd\n        function_404ee0(4, str2);\n        *(int64_t *)(v4 - 8) = 4;\n        *(int64_t *)(v4 - 16) = v4 + 69;\n        __printf_chk(1, v83);\n        v61 = v50;\n        v62 = v43;\n        v63 = str2;\n        v64 = v44;\n        v65 = v49;\n        goto lab_0x40241a;\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4028e0",
            "funcEndAddr": "40290b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4028e0\n    int64_t v1; // 0x4028e0\n    __libc_start_main(0x401c40, (int32_t)a4, (char **)&v1, (void (*)())0x40a8a0, (void (*)())0x40a900, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40290b",
            "funcStartAddr": "40290b",
            "funcEndAddr": "40292a",
            "decompiledFuncCode": "int64_t function_40290b(void) {\n    // 0x40290b\n    return &g32;\n}\n"
        },
        {
            "funcName": "function_40292a",
            "funcStartAddr": "40292a",
            "funcEndAddr": "402961",
            "decompiledFuncCode": "int64_t function_40292a(void) {\n    // 0x40292a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402961",
            "funcStartAddr": "402961",
            "funcEndAddr": "4029b8",
            "decompiledFuncCode": "int64_t function_402961(void) {\n    // 0x402961\n    if (g36 != 0) {\n        // 0x4029b7\n        int64_t result; // 0x402961\n        return result;\n    }\n    int64_t v1 = g37; // 0x402994\n    int64_t result2; // 0x4029a6\n    if (g37 >= ((int64_t)&g17 - (int64_t)&g16 >> 3) - 1) {\n        // 0x4029a6\n        result2 = function_40290b();\n        g36 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g17 - (int64_t)&g16 >> 3) - 1) {\n        // 0x402996\n        v1++;\n    }\n    // 0x40298a\n    g37 = v1;\n    // 0x4029a6\n    result2 = function_40290b();\n    g36 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4029b8",
            "funcStartAddr": "4029b8",
            "funcEndAddr": "4029bd",
            "decompiledFuncCode": "int64_t function_4029b8(void) {\n    // 0x4029b8\n    return function_40292a();\n}\n"
        },
        {
            "funcName": "function_4029c0",
            "funcStartAddr": "4029c0",
            "funcEndAddr": "402d65",
            "decompiledFuncCode": "int64_t function_4029c0(int64_t a1) {\n    int32_t status = a1; // 0x4029d6\n    if (status != 0) {\n        // 0x4029da\n        __fprintf_chk(g35, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4029ff\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402a06\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... MODE[,MODE]... FILE...\\n  or:  %s [OPTION]... OCTAL-MODE FILE...\\n  or:  %s [OPTION]... --reference=RFILE FILE...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Change the mode of each FILE to MODE.\\nWith --reference, change the mode of each FILE to that of RFILE.\\n\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"  -c, --changes          like verbose but report only when a change is made\\n  -f, --silent, --quiet  suppress most error messages\\n  -v, --verbose          output a diagnostic for every file processed\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"      --no-preserve-root  do not treat '/' specially (the default)\\n      --preserve-root    fail to operate recursively on '/'\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"      --reference=RFILE  use RFILE's mode instead of MODE values\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"  -R, --recursive        change files and directories recursively\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"\\nEach MODE is of the form '[ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+'.\\n\", 5), g33);\n    int64_t v1 = &g1; // bp-136, 0x402b42\n    bool v2; // 0x4029c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402bc8\n    int64_t v6 = *(int64_t *)v5; // 0x402bcc\n    int64_t v7 = 6; // 0x402bd2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"chmod\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402bde\n        char v11 = *(char *)v9; // 0x402bde\n        char v12 = v11; // 0x402bde\n        bool v13 = false; // 0x402bde\n        while (v10 == v11) {\n            // 0x402bd4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402bde\n            int64_t v15 = v8 + v3; // 0x402bde\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402bea\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x402bea\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402cfc;\n        } else {\n            // 0x402ce6\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402d3b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402c4c;\n            } else {\n                goto lab_0x402cfc;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402c4c;\n        } else {\n            // 0x402c32\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402d3b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402c4c;\n            } else {\n                goto lab_0x402c4c;\n            }\n        }\n    }\n  lab_0x402cfc:\n    // 0x402cfc\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402c8c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4029ff\n    exit(status);\n    // UNREACHABLE\n  lab_0x402c4c:\n    // 0x402c4c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402c8c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4029ff\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402d70",
            "funcStartAddr": "402d70",
            "funcEndAddr": "402d78",
            "decompiledFuncCode": "int64_t function_402d70(int64_t a1) {\n    // 0x402d70\n    g46 = a1;\n    int64_t result; // 0x402d70\n    return result;\n}\n"
        },
        {
            "funcName": "function_402d80",
            "funcStartAddr": "402d80",
            "funcEndAddr": "402d88",
            "decompiledFuncCode": "int64_t function_402d80(int64_t a1) {\n    // 0x402d80\n    g45 = a1;\n    int64_t result; // 0x402d80\n    return result;\n}\n"
        },
        {
            "funcName": "function_402d90",
            "funcStartAddr": "402d90",
            "funcEndAddr": "402e2e",
            "decompiledFuncCode": "int64_t function_402d90(void) {\n    // 0x402d90\n    int32_t * err_num; // 0x402da6\n    if ((int32_t)function_408b70((int64_t)g33) == 0) {\n        goto lab_0x402dbc;\n    } else {\n        // 0x402da6\n        err_num = __errno_location();\n        if (g45 == 0) {\n            goto lab_0x402dd3;\n        } else {\n            // 0x402db7\n            if (*err_num != 32) {\n                goto lab_0x402dd3;\n            } else {\n                goto lab_0x402dbc;\n            }\n        }\n    }\n  lab_0x402dbc:;\n    int64_t result = function_408b70((int64_t)g35); // 0x402dc3\n    if ((int32_t)result == 0) {\n        // 0x402dcc\n        return result;\n    }\n    // 0x402e0e\n    _exit(g22);\n    // UNREACHABLE\n  lab_0x402dd3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x402ddf\n    if (g46 == 0) {\n        // 0x402e19\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402df3\n        error(0, *err_num, \"%s: %s\", (char *)function_404f80((int64_t)g46), v1);\n    }\n    // 0x402e0e\n    _exit(g22);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e30",
            "funcStartAddr": "402e30",
            "funcEndAddr": "402fa3",
            "decompiledFuncCode": "int64_t function_402e30(int32_t a1, int64_t a2) {\n    int32_t v1 = a1 & 0xf000; // 0x402e37\n    char v2 = 45; // 0x402e30\n    int64_t v3; // 0x402e30\n    uint64_t v4; // 0x402e30\n    switch ((v1 - 0x1000) / 0x1000) {\n        case 3: {\n            // 0x402e99\n            v2 = 100;\n        }\n        case 7: {\n          lab_0x402e99:\n            // 0x402e99\n            v4 = (int64_t)a1;\n            *(char *)a2 = v2;\n            *(char *)(a2 + 1) = (v4 & 256) == 0 ? 45 : 114;\n            int64_t v5 = v4 & 128; // 0x402eb2\n            char v6 = v5; // 0x402eba\n            *(char *)(a2 + 2) = (v6 - ((char)(v5 == 0) | v6) & -74) + 119;\n            int64_t v7 = v4 & 64; // 0x402ec7\n            int64_t v8 = v7 - (v7 | (int64_t)(v7 == 0)); // 0x402ecd\n            if ((v4 & 2048) == 0) {\n                // 0x402f70\n                v3 = (v8 & 0xffffffb5) + 120 & 0xfffffffd;\n            } else {\n                // 0x402edb\n                v3 = (v8 & 0xffffffe0) + 115 & 0xfffffff3;\n            }\n            // break -> 0x402ee1\n            break;\n        }\n        case 5: {\n            // 0x402e99\n            v2 = 98;\n            // branch (via goto) -> 0x402e99\n            goto lab_0x402e99;\n        }\n        case 1: {\n            // 0x402e99\n            v2 = 99;\n            // branch (via goto) -> 0x402e99\n            goto lab_0x402e99;\n        }\n        case 9: {\n            // 0x402e99\n            v2 = 108;\n            // branch (via goto) -> 0x402e99\n            goto lab_0x402e99;\n        }\n        case 0: {\n            // 0x402e99\n            v2 = 112;\n            // branch (via goto) -> 0x402e99\n            goto lab_0x402e99;\n        }\n        default: {\n            // 0x402e86\n            v2 = v1 != 0xc000 ? 63 : 115;\n            // branch (via goto) -> 0x402e99\n            goto lab_0x402e99;\n        }\n    }\n    // 0x402ee1\n    *(char *)(a2 + 3) = (char)v3;\n    int64_t v9 = v4 & 32; // 0x402ee6\n    char v10 = v9; // 0x402eec\n    *(char *)(a2 + 4) = (v10 - ((char)(v9 == 0) | v10) & -69) + 114;\n    int64_t v11 = v4 & 16; // 0x402ef9\n    char v12 = v11; // 0x402eff\n    *(char *)(a2 + 5) = (v12 - ((char)(v11 == 0) | v12) & -74) + 119;\n    int64_t v13 = v4 & 8; // 0x402f0c\n    int64_t v14 = v13 - (v13 | (int64_t)(v13 == 0)); // 0x402f12\n    int64_t v15; // 0x402e30\n    if ((v4 & 1024) == 0) {\n        // 0x402f80\n        v15 = (v14 & 0xffffffb5) + 120 & 0xfffffffd;\n    } else {\n        // 0x402f1c\n        v15 = (v14 & 0xffffffe0) + 115 & 0xfffffff3;\n    }\n    // 0x402f22\n    *(char *)(a2 + 6) = (char)v15;\n    int64_t v16 = v4 & 4; // 0x402f27\n    char v17 = v16; // 0x402f2d\n    *(char *)(a2 + 7) = (v17 - ((char)(v16 == 0) | v17) & -69) + 114;\n    int64_t v18 = v4 & 2; // 0x402f3a\n    char v19 = v18; // 0x402f40\n    *(char *)(a2 + 8) = (v19 - ((char)(v18 == 0) | v19) & -74) + 119;\n    char v20 = v4 % 2 == 0; // 0x402f53\n    if ((v4 & 512) == 0) {\n        // 0x402f90\n        *(char *)(a2 + 9) = (v20 & -75) + 120;\n        *(int16_t *)(a2 + 10) = 32;\n        return 32;\n    }\n    // 0x402f5d\n    *(char *)(a2 + 9) = (v20 & -32) + 116;\n    *(int16_t *)(a2 + 10) = 32;\n    return 32;\n}\n"
        },
        {
            "funcName": "function_402fb0",
            "funcStartAddr": "402fb0",
            "funcEndAddr": "402fb8",
            "decompiledFuncCode": "int64_t function_402fb0(int64_t a1) {\n    // 0x402fb0\n    int64_t v1; // 0x402fb0\n    return function_402e30(*(int32_t *)(a1 + 24), v1);\n}\n"
        },
        {
            "funcName": "function_402fc0",
            "funcStartAddr": "402fc0",
            "funcEndAddr": "403321",
            "decompiledFuncCode": "int64_t function_402fc0(int64_t a1) {\n    // 0x402fc0\n    int64_t v1; // 0x402fc0\n    char v2 = v1;\n    int64_t v3 = 0x100000000000000 * v1 >> 56; // 0x402fcc\n    int64_t v4 = a1; // 0x402fd4\n    if ((v2 & -8) == 48) {\n        int64_t v5 = 0xffffffd0 + v3; // 0x403096\n        uint32_t v6 = (int32_t)v5;\n        while (v6 < 0x1000) {\n            // 0x403088\n            v4++;\n            char v7 = *(char *)v4; // 0x403088\n            if ((v7 & -8) != 48) {\n                // 0x403290\n                if (v7 == 0) {\n                    int64_t v8 = v4 - a1; // 0x40329a\n                    int32_t v9 = v8 < 5 == (4 - v8 & v8) < 0 ? 4095 : v6 & 3072 | 1023; // 0x4032b9\n                    int64_t result = function_405740(32); // 0x4032bc\n                    *(int16_t *)result = 317;\n                    *(int32_t *)(result + 4) = 4095;\n                    *(int32_t *)(result + 8) = v6;\n                    *(int32_t *)(result + 12) = v9;\n                    *(char *)(result + 17) = 0;\n                    return result;\n                }\n                return 0;\n            }\n            v5 = (int64_t)v7 + 0xffffffd0 + 8 * (v5 & 0xffffffff);\n            v6 = (int32_t)v5;\n        }\n      lab_0x403075:\n        // 0x403075\n        return 0;\n    }\n    int64_t v10 = 1; // 0x402fe1\n    int64_t v11 = a1; // 0x402fe1\n    int64_t v12; // 0x402fc0\n    if (v2 == 0) {\n        // 0x4032e8\n        v12 = 16;\n    } else {\n        int64_t v13 = v3;\n        v11++;\n        unsigned char v14 = *(char *)v11; // 0x403006\n        v10 += (int64_t)((v13 & 239) == 45 | (char)v13 == 43);\n        while (v14 != 0) {\n            // 0x402ff0\n            v13 = v14;\n            v11++;\n            v14 = *(char *)v11;\n            v10 += (int64_t)((v13 & 239) == 45 | (char)v13 == 43);\n        }\n        int64_t v15 = 16 * v10; // 0x40301d\n        if (v15 < 0) {\n            // 0x40331c\n            function_405990(v15);\n            // UNREACHABLE\n        }\n        // 0x40302a\n        v12 = v15;\n        if (v10 >= 0x1000000000000000) {\n            // 0x40331c\n            function_405990(v15);\n            // UNREACHABLE\n        }\n    }\n    int64_t v16 = function_405740(v12); // 0x403033\n    int64_t v17; // 0x402fc0\n    int64_t v18; // 0x402fc0\n    int64_t v19; // 0x402fc0\n    int64_t v20; // 0x402fc0\n    int64_t v21; // 0x402fc0\n    int64_t v22; // 0x402fc0\n    int64_t v23; // 0x402fc0\n    int64_t v24; // 0x402fc0\n    int64_t v25; // 0x402fc0\n    int64_t v26; // 0x402fc0\n    int64_t v27; // 0x402fc0\n    int64_t v28; // 0x402fc0\n    int64_t v29; // 0x402fc0\n    int64_t v30; // 0x402fc0\n    int64_t v31; // 0x402fc0\n    int64_t v32; // 0x402fc0\n    int64_t v33; // 0x403123\n    int64_t v34; // 0x403123\n    char v35; // 0x402fc0\n    while (true) {\n        int64_t v36 = 0;\n        v32 = 0;\n        v18 = 0;\n        v26 = a1;\n        unsigned char v37; // 0x40303d\n        while (true) {\n          lab_0x40303d:\n            // 0x40303d\n            v27 = v26;\n            v37 = *(char *)v27;\n            if (v37 == 97) {\n                // 0x403250\n                v32 = 4095;\n                v19 = 4095;\n                goto lab_0x403255;\n            } else {\n                if (v37 <= 97) {\n                    // break -> 0x4030b0\n                    break;\n                }\n                int64_t v38 = v18; // 0x403280\n                switch (v37) {\n                    case 111: {\n                        int64_t v39 = v38 & 0xfffffdf8 | 519; // 0x403280\n                        v32 = v39;\n                        v19 = v39;\n                        goto lab_0x403255;\n                    }\n                    case 117: {\n                        int64_t v40 = v38 & 0xfffff63f | 2496; // 0x403270\n                        v32 = v40;\n                        v19 = v40;\n                        goto lab_0x403255;\n                    }\n                    case 103: {\n                        int64_t v41 = v38 & 0xfffffbc7 | 1080; // 0x403260\n                        v32 = v41;\n                        v19 = v41;\n                        goto lab_0x403255;\n                    }\n                    default: {\n                        goto lab_0x40306b_3;\n                    }\n                }\n            }\n        }\n        switch (v37) {\n            default: {\n                if (v37 != 43) {\n                    // break -> 0x40306b\n                    break;\n                }\n            }\n            case 45: {\n            }\n            case 61: {\n                // 0x4030c2\n                v29 = v27;\n                v24 = v37;\n                v20 = 16 * v36 + v16;\n                v22 = v36;\n                // break -> 0x403123\n                break;\n            }\n        }\n        while (true) {\n          lab_0x403123:\n            // 0x403123\n            v21 = v20;\n            v25 = v24;\n            int64_t v42 = v29;\n            v33 = v42 + 1;\n            char v43 = *(char *)v33; // 0x403123\n            if (v43 == 103) {\n                // 0x403240\n                v17 = v42 + 2;\n                v30 = 56;\n                goto lab_0x4030de;\n            } else {\n                // 0x403134\n                v34 = v43;\n                if (v43 > 103) {\n                    int64_t v44 = v42 + 2;\n                    v17 = v44;\n                    v30 = 7;\n                    if (v43 != 111) {\n                        // 0x4030d0\n                        v17 = v44;\n                        v30 = 448;\n                        if (v43 != 117) {\n                            goto lab_0x4031c0;\n                        } else {\n                            goto lab_0x4030de;\n                        }\n                    } else {\n                        goto lab_0x4030de;\n                    }\n                } else {\n                    int64_t v45 = v34; // 0x403156\n                    int64_t v46 = v33; // 0x403156\n                    if ((v43 & -8) == 48) {\n                        int64_t v47 = 0xffffffd0 + v45; // 0x40315a\n                        uint32_t v48 = (int32_t)v47;\n                        if (v48 >= 0x1000) {\n                            // break (via goto) -> 0x40306b\n                            goto lab_0x40306b_3;\n                        }\n                        int64_t v49 = v46 + 1; // 0x40315e\n                        char v50 = *(char *)v49; // 0x40316e\n                        int64_t v51 = v50; // 0x40316e\n                        int64_t v52 = v47 & 0xffffffff; // 0x403179\n                        v46 = v49;\n                        while ((v50 & -8) == 48) {\n                            // 0x40315a\n                            v47 = v51 + 0xffffffd0 + 8 * v52;\n                            v48 = (int32_t)v47;\n                            if (v48 >= 0x1000) {\n                                // break (via goto) -> 0x40306b\n                                goto lab_0x40306b_3;\n                            }\n                            // 0x40316e\n                            v49 = v46 + 1;\n                            v50 = *(char *)v49;\n                            v51 = v50;\n                            v52 = v47 & 0xffffffff;\n                            v46 = v49;\n                        }\n                        // 0x40317b\n                        if ((int32_t)v32 != 0) {\n                            // break (via goto) -> 0x40306b\n                            goto lab_0x40306b_3;\n                        }\n                        if (v50 != 0 == (v50 != 44)) {\n                            // break (via goto) -> 0x40306b\n                            goto lab_0x40306b_3;\n                        }\n                        // 0x403190\n                        *(char *)v21 = (char)v25;\n                        v32 = 4095;\n                        *(int32_t *)(v21 + 8) = v48;\n                        *(char *)(v21 + 1) = 1;\n                        *(int32_t *)(v21 + 4) = 4095;\n                        v31 = 4095;\n                        v28 = v49;\n                        v23 = v51 & 0xffffffff;\n                        goto lab_0x4030ff;\n                    } else {\n                        goto lab_0x4031c0;\n                    }\n                }\n            }\n        }\n      lab_0x4032f2:\n        // 0x4032f2\n        if (v35 != 44) {\n            if (v35 != 0) {\n                goto lab_0x40306b_3;\n            } else {\n                // 0x40330d\n                int64_t v53; // 0x402fc0\n                *(char *)(v16 + 1 + 16 * v53) = 0;\n                return 0;\n            }\n        }\n    }\n  lab_0x40306b_3:\n    // 0x40306b\n    free((int64_t *)v16);\n    // 0x403075\n    return (int32_t)&g62 ^ (int32_t)&g62;\n  lab_0x4031e8:;\n    // 0x4031e8\n    int64_t v54; // 0x402fc0\n    int64_t v55 = v54 + 1; // 0x4031e8\n    int64_t v56 = (int64_t)*(char *)v55; // 0x4031ec\n    int64_t v57 = v56 + 0xffffffa8; // 0x4031f0\n    int64_t v58; // 0x402fc0\n    int64_t v59 = v58; // 0x4031f7\n    int64_t v60 = v56; // 0x4031f7\n    int64_t v61; // 0x402fc0\n    int64_t v62 = v61; // 0x4031f7\n    int64_t v63 = v57; // 0x4031f7\n    int64_t v64 = v55; // 0x4031f7\n    if ((char)v57 >= 33) {\n        // break -> 0x4031f9\n        goto lab_0x4031f9_2;\n    }\n    goto lab_0x4031d0;\n  lab_0x4030de:\n    // 0x4030de\n    *(char *)(v21 + 1) = 3;\n    *(int32_t *)(v21 + 4) = (int32_t)v32;\n    *(int32_t *)(v21 + 8) = (int32_t)v30;\n    *(char *)v21 = (char)v25;\n    int64_t v72 = v30; // 0x4030f3\n    int64_t v73 = v17; // 0x4030f3\n    int64_t v74 = (int64_t)*(char *)v17; // 0x4030f3\n    goto lab_0x4030f6;\n  lab_0x4030f6:;\n    int64_t v75 = v32;\n    v31 = v72 & 0xffffffff & ((int32_t)v75 != 0 ? v75 : 0xffffffff);\n    v28 = v73;\n    v23 = v74;\n    goto lab_0x4030ff;\n  lab_0x4031c0:\n    // 0x4031c0\n    v59 = 0;\n    v60 = v34;\n    v62 = 1;\n    v63 = v34 + 0xffffffa8;\n    v64 = v33;\n    int64_t v70; // 0x402fc0\n    int64_t v69; // 0x402fc0\n    int64_t v67; // 0x402fc0\n    int64_t v68; // 0x402fc0\n    while (true) {\n      lab_0x4031d0:\n        // 0x4031d0\n        v54 = v64;\n        int64_t v65 = v62;\n        int64_t v66 = v59;\n        g60 = v63 % 256;\n        v58 = v66;\n        v61 = 2;\n        v67 = v66;\n        v68 = v60;\n        v69 = v65;\n        v70 = v54;\n        uint64_t v71; // 0x402fc0\n        switch ((char)v71) {\n            case 0: {\n                goto lab_0x4031e8;\n            }\n            case 26: {\n                // 0x403238\n                v58 = v66 & 0xfffffedb | 292;\n                v61 = v65;\n                goto lab_0x4031e8;\n            }\n            case 27: {\n                // 0x403230\n                v58 = v66 | 3072;\n                v61 = v65;\n                goto lab_0x4031e8;\n            }\n            case 28: {\n                // 0x403228\n                v58 = v66 | 512;\n                v61 = v65;\n                goto lab_0x4031e8;\n            }\n            case 31: {\n                // 0x403220\n                v58 = v66 | 146;\n                v61 = v65;\n                goto lab_0x4031e8;\n            }\n            case 32: {\n                // 0x403218\n                v58 = v66 & 0xffffffb6 | 73;\n                v61 = v65;\n                goto lab_0x4031e8;\n            }\n            default: {\n                goto lab_0x4031f9_2;\n            }\n        }\n    }\n  lab_0x4031f9_2:\n    // 0x4031f9\n    *(char *)v21 = (char)v25;\n    *(char *)(v21 + 1) = (char)v69;\n    *(int32_t *)(v21 + 4) = (int32_t)v32;\n    *(int32_t *)(v21 + 8) = (int32_t)v67;\n    v72 = v67;\n    v73 = v70;\n    v74 = v68 & 0xffffffff;\n    goto lab_0x4030f6;\n  lab_0x4030ff:\n    // 0x4030ff\n    *(int32_t *)(v21 + 12) = (int32_t)v31;\n    if ((v23 & 239) != 45) {\n        // 0x403116\n        int64_t v76; // 0x402fc0\n        v35 = v76;\n        if (v35 != 43) {\n            // break -> 0x4032f2\n            goto lab_0x4032f2;\n        }\n    }\n    // 0x403120\n    v29 = v28;\n    v24 = v23;\n    v20 = v21 + 16;\n    v22++;\n    goto lab_0x403123;\n  lab_0x403255:\n    // 0x403255\n    v18 = v19;\n    v26 = v27 + 1;\n    goto lab_0x40303d;\n}\n"
        },
        {
            "funcName": "function_403330",
            "funcStartAddr": "403330",
            "funcEndAddr": "403384",
            "decompiledFuncCode": "int64_t function_403330(int64_t a1) {\n    // 0x403330\n    int64_t v1; // bp-152, 0x403330\n    int32_t v2 = __xstat(1, (char *)a1, (struct stat *)&v1); // 0x403343\n    int64_t result = 0; // 0x40334e\n    if (v2 == 0) {\n        // 0x403350\n        result = function_405740(32);\n        *(int16_t *)result = 317;\n        *(int32_t *)(result + 4) = 4095;\n        *(int32_t *)(result + 12) = 4095;\n        *(char *)(result + 17) = 0;\n    }\n    // 0x40337b\n    return result;\n}\n"
        },
        {
            "funcName": "function_403390",
            "funcStartAddr": "403390",
            "funcEndAddr": "40350d",
            "decompiledFuncCode": "int64_t function_403390(uint32_t a1, int64_t a2, int32_t a3, int64_t a4, int32_t a5) {\n    char v1 = *(char *)(a4 + 1); // 0x403390\n    int64_t v2 = a1 % 0x1000; // 0x403399\n    int64_t result = v2; // 0x4033a7\n    int64_t v3 = 0; // 0x4033a7\n    int64_t v4; // 0x403390\n    int64_t v5; // 0x403390\n    int64_t v6; // 0x403390\n    char v7; // 0x403390\n    char v8; // 0x403390\n    int64_t v9; // 0x403390\n    int64_t v10; // 0x403390\n    int64_t v11; // 0x403390\n    int64_t v12; // 0x403390\n    int64_t v13; // 0x403390\n    int64_t v14; // 0x403390\n    int64_t v15; // 0x403390\n    int64_t v16; // 0x403390\n    int64_t v17; // 0x403390\n    int64_t v18; // 0x403390\n    uint32_t v19; // 0x40344b\n    int64_t v20; // 0x40344f\n    if (v1 != 0) {\n        // 0x4033ad\n        v10 = v2;\n        v14 = a4;\n        v12 = 0;\n        v7 = v1;\n        while (true) {\n          lab_0x40344b_2:\n            // 0x40344b\n            v8 = v7;\n            v13 = v12;\n            v15 = v14;\n            v11 = v10;\n            v19 = *(int32_t *)(v15 + 4);\n            v20 = (int64_t)*(int32_t *)(v15 + 8);\n            if ((char)a2 == 0) {\n                // 0x4033c0\n                v16 = 0;\n                v4 = 0xffffffff;\n                if (v8 == 2) {\n                    // 0x403500\n                    v17 = 0;\n                    v9 = v20;\n                    v5 = 0xffffffff;\n                    v18 = 0;\n                    v6 = 0xffffffff;\n                    if ((v11 & 73) == 0) {\n                        goto lab_0x403414;\n                    } else {\n                        goto lab_0x40347c;\n                    }\n                } else {\n                    goto lab_0x4033cf;\n                }\n            } else {\n                int32_t v21 = *(int32_t *)(v15 + 12); // 0x40345c\n                int64_t v22 = v21 | -3073; // 0x403463\n                int64_t v23 = v21 & 3072 ^ 3072; // 0x40346c\n                v16 = v23;\n                v4 = v22;\n                v18 = v23;\n                v6 = v22;\n                if (v8 != 2) {\n                    goto lab_0x4033cf;\n                } else {\n                    goto lab_0x40347c;\n                }\n            }\n        }\n    }\n  lab_0x4034c8_2:\n    // 0x4034c8\n    if (a5 != 0) {\n        // 0x4034cd\n        *(int32_t *)(int64_t)a5 = (int32_t)v3;\n    }\n    // 0x4034d0\n    return result;\n  lab_0x4033cf:;\n    int64_t v24 = v4;\n    int64_t v25 = v16;\n    v17 = v25;\n    v9 = v20;\n    v5 = v24;\n    if (v8 == 3) {\n        int64_t v26 = v11 & v20;\n        int64_t v27 = v26 & 292; // 0x4033db\n        int64_t v28 = (v27 | (int64_t)(v27 == 0)) + (v27 ^ 511) & 292;\n        int64_t v29 = (v26 & 146) != 0 ? v28 | 146 : v28; // 0x4033fe\n        v17 = v25;\n        v9 = ((v26 & 73) != 0 ? v29 | 73 : v29) | v26;\n        v5 = v24;\n    }\n    goto lab_0x403414;\n  lab_0x40347c:;\n    int64_t v60 = (int64_t)*(char *)v15; // 0x403480\n    int64_t v61 = v6 & (v20 | 73); // 0x403484\n    int64_t v32 = v18; // 0x40348a\n    int64_t v33 = v61; // 0x40348a\n    int64_t v34 = v6; // 0x40348a\n    int64_t v35 = v60; // 0x40348a\n    int64_t v36 = v18; // 0x40348a\n    int64_t v37 = v61; // 0x40348a\n    int64_t v38 = v60; // 0x40348a\n    if (v19 == 0) {\n        goto lab_0x403420;\n    } else {\n        goto lab_0x403490;\n    }\n  lab_0x403414:;\n    int64_t v30 = (int64_t)*(char *)v15; // 0x403414\n    int64_t v31 = v9 & 0xffffffff & v5; // 0x403418\n    v32 = v17;\n    v33 = v31;\n    v34 = v5;\n    v35 = v30;\n    v36 = v17;\n    v37 = v31;\n    v38 = v30;\n    if (v19 != 0) {\n        goto lab_0x403490;\n    } else {\n        goto lab_0x403420;\n    }\n  lab_0x403420:;\n    int64_t v39 = v33 & (int64_t)(-1 - a3);\n    int64_t v40 = v39; // 0x403390\n    int64_t v41 = v35; // 0x403390\n    int64_t v42 = v32; // 0x403390\n    int64_t v43 = v39; // 0x403390\n    int64_t v44 = v34; // 0x403390\n    int64_t v45 = v39; // 0x403390\n    int64_t v46; // 0x403390\n    switch ((char)v46) {\n        case 45: {\n            goto lab_0x4034e0;\n        }\n        case 61: {\n            goto lab_0x4034ab;\n        }\n        default: {\n            goto lab_0x403433;\n        }\n    }\n  lab_0x403490:;\n    int64_t v47 = v19; // 0x40344b\n    int64_t v48 = v37 & v47;\n    char v49 = v38; // 0x403493\n    v45 = v48;\n    if (v49 == 45) {\n        goto lab_0x4034e0;\n    } else {\n        // 0x403499\n        if (v49 != 61) {\n            goto lab_0x403433;\n        } else {\n            int64_t v50 = v36 & 0xffffffff | v47 ^ 0xffffffff; // 0x4034a2\n            v42 = v50;\n            v43 = v48;\n            v44 = v50 ^ 0xffffffff;\n            goto lab_0x4034ab;\n        }\n    }\n  lab_0x4034e0:;\n    int64_t v51 = v11 & 0xffffffff & (v45 ^ 0xffffffff); // 0x4034e9\n    int64_t v52 = (v45 | v13) & 0xffffffff; // 0x4034e9\n    goto lab_0x40343d;\n  lab_0x4034ab:;\n    char v57 = *(char *)(v15 + 17); // 0x4034af\n    int64_t v58 = v44 % 0x1000 | v13 & 0xffffffff; // 0x4034bd\n    int64_t v59 = (v42 & v11 | v43) & 0xffffffff; // 0x4034c0\n    int64_t v54 = v59; // 0x4034c6\n    int64_t v55 = v58; // 0x4034c6\n    char v56 = v57; // 0x4034c6\n    result = v59;\n    v3 = v58;\n    if (v57 == 0) {\n        // break -> 0x4034c8\n        goto lab_0x4034c8_2;\n    }\n    goto lab_0x40344b;\n  lab_0x403433:\n    // 0x403433\n    v51 = v11;\n    v52 = v13;\n    if ((char)v41 == 43) {\n        // 0x4034f0\n        v51 = (v40 | v11) & 0xffffffff;\n        v52 = (v40 | v13) & 0xffffffff;\n    }\n    goto lab_0x40343d;\n  lab_0x40343d:;\n    char v53 = *(char *)(v15 + 17); // 0x403441\n    v54 = v51;\n    v55 = v52;\n    v56 = v53;\n    result = v51;\n    v3 = v52;\n    if (v53 == 0) {\n        // break -> 0x4034c8\n        goto lab_0x4034c8_2;\n    }\n    goto lab_0x40344b;\n  lab_0x40344b:\n    // 0x40344b\n    v10 = v54;\n    v14 = v15 + 16;\n    v12 = v55;\n    v7 = v56;\n    goto lab_0x40344b_2;\n}\n"
        },
        {
            "funcName": "function_403510",
            "funcStartAddr": "403510",
            "funcEndAddr": "4035a9",
            "decompiledFuncCode": "int64_t function_403510(int64_t str) {\n    // 0x403510\n    if (str == 0) {\n        // 0x403589\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g35);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40351e\n    int64_t result = (int64_t)found_char_pos; // 0x40351e\n    if (found_char_pos == NULL) {\n        // 0x403579\n        g47 = str;\n        g34 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403528\n    if (v1 - str < 7) {\n        // 0x403579\n        g47 = str;\n        g34 = str;\n        return result;\n    }\n    // 0x403538\n    bool v2; // 0x403510\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403510\n    int64_t v5 = result - 6; // 0x403510\n    int64_t v6 = 7; // 0x403546\n    unsigned char v7 = *(char *)v5; // 0x403546\n    char v8 = *(char *)v4; // 0x403546\n    char v9 = v8; // 0x403546\n    bool v10 = false; // 0x403546\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403550\n    int64_t v13 = v1; // 0x403550\n    int64_t v14 = 3; // 0x403550\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403579\n        g47 = str;\n        g34 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403562\n    char v16 = *(char *)v12; // 0x403562\n    char v17 = v16; // 0x403562\n    bool v18 = false; // 0x403562\n    while (v15 == v16) {\n        // 0x403552\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40356c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40356e\n        v20 = result + 4;\n        g32 = v20;\n    }\n    // 0x403579\n    g47 = v20;\n    g34 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4035b0",
            "funcStartAddr": "4035b0",
            "funcEndAddr": "4036a2",
            "decompiledFuncCode": "int64_t function_4035b0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4035c4\n    int64_t result = (int64_t)v1; // 0x4035c4\n    if (result != a1) {\n        // 0x4035d1\n        return result;\n    }\n    int64_t v2 = function_40a020(); // 0x4035e0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403696\n    if (v3 == 85) {\n        // 0x4035f0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403688\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x40361e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x40362b\n        // 0x4035d1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403688\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x40366d\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x40367a\n    // 0x4035d1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4036b0",
            "funcStartAddr": "4036b0",
            "funcEndAddr": "403707",
            "decompiledFuncCode": "int64_t function_4036b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4036b0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4036f8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403707",
            "funcStartAddr": "403707",
            "funcEndAddr": "4048d1",
            "decompiledFuncCode": "int64_t function_403707(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403751\n    int64_t v3 = 0; // 0x403751\n    int64_t v4; // 0x403707\n    int64_t v5; // 0x403707\n    int64_t v6; // 0x403707\n    int64_t v7; // 0x403707\n    int64_t v8; // 0x403707\n    int64_t v9; // 0x403707\n    int64_t v10; // 0x403707\n    int64_t v11; // 0x403707\n    int64_t v12; // 0x403707\n    int64_t v13; // 0x403707\n    int64_t v14; // 0x403707\n    int64_t v15; // 0x403707\n    int64_t v16; // 0x403707\n    int64_t v17; // 0x403707\n    int64_t v18; // 0x403707\n    int64_t result; // 0x403707\n    int64_t v19; // 0x403707\n    int32_t wc; // bp+132, 0x403707\n    int64_t ps; // bp+136, 0x403707\n    char v20; // 0x403cc0\n    int64_t v21; // 0x403cc0\n    int64_t v22; // 0x404068\n    int64_t v23; // 0x403707\n    int64_t v24; // 0x404087\n    int32_t v25; // 0x403707\n    while (true) {\n      lab_0x403758_2:\n        // 0x403758\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403707\n        int64_t v27; // 0x40378c\n        while (true) {\n          lab_0x403758:\n            // 0x403758\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403763\n            if (v15 == -1) {\n                // 0x403765\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403773\n            if (v28) {\n                // break (via goto) -> 0x403ed8\n                goto lab_0x403ed8;\n            }\n            // 0x40377c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g61 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x403d6b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4038b1;\n                    }\n                    // 0x40418d\n                    v26 = v5 + 1;\n                    goto lab_0x403758;\n                }\n                case 7: {\n                    goto lab_0x4038b1;\n                }\n                case 8: {\n                    goto lab_0x4038b1;\n                }\n                case 9: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4038b1;\n                }\n                case 12: {\n                    goto lab_0x4038b1;\n                }\n                case 13: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40387d;\n                }\n                case 36: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4038b1;\n                }\n                case 38: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4038b1;\n                }\n                case 44: {\n                    goto lab_0x4038b1;\n                }\n                case 45: {\n                    goto lab_0x4038b1;\n                }\n                case 46: {\n                    goto lab_0x4038b1;\n                }\n                case 47: {\n                    goto lab_0x4038b1;\n                }\n                case 48: {\n                    goto lab_0x4038b1;\n                }\n                case 49: {\n                    goto lab_0x4038b1;\n                }\n                case 50: {\n                    goto lab_0x4038b1;\n                }\n                case 51: {\n                    goto lab_0x4038b1;\n                }\n                case 52: {\n                    goto lab_0x4038b1;\n                }\n                case 53: {\n                    goto lab_0x4038b1;\n                }\n                case 54: {\n                    goto lab_0x4038b1;\n                }\n                case 55: {\n                    goto lab_0x4038b1;\n                }\n                case 56: {\n                    goto lab_0x4038b1;\n                }\n                case 57: {\n                    goto lab_0x4038b1;\n                }\n                case 58: {\n                    goto lab_0x4038b1;\n                }\n                case 59: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4038b1;\n                }\n                case 66: {\n                    goto lab_0x4038b1;\n                }\n                case 67: {\n                    goto lab_0x4038b1;\n                }\n                case 68: {\n                    goto lab_0x4038b1;\n                }\n                case 69: {\n                    goto lab_0x4038b1;\n                }\n                case 70: {\n                    goto lab_0x4038b1;\n                }\n                case 71: {\n                    goto lab_0x4038b1;\n                }\n                case 72: {\n                    goto lab_0x4038b1;\n                }\n                case 73: {\n                    goto lab_0x4038b1;\n                }\n                case 74: {\n                    goto lab_0x4038b1;\n                }\n                case 75: {\n                    goto lab_0x4038b1;\n                }\n                case 76: {\n                    goto lab_0x4038b1;\n                }\n                case 77: {\n                    goto lab_0x4038b1;\n                }\n                case 78: {\n                    goto lab_0x4038b1;\n                }\n                case 79: {\n                    goto lab_0x4038b1;\n                }\n                case 80: {\n                    goto lab_0x4038b1;\n                }\n                case 81: {\n                    goto lab_0x4038b1;\n                }\n                case 82: {\n                    goto lab_0x4038b1;\n                }\n                case 83: {\n                    goto lab_0x4038b1;\n                }\n                case 84: {\n                    goto lab_0x4038b1;\n                }\n                case 85: {\n                    goto lab_0x4038b1;\n                }\n                case 86: {\n                    goto lab_0x4038b1;\n                }\n                case 87: {\n                    goto lab_0x4038b1;\n                }\n                case 88: {\n                    goto lab_0x4038b1;\n                }\n                case 89: {\n                    goto lab_0x4038b1;\n                }\n                case 90: {\n                    goto lab_0x4038b1;\n                }\n                case 91: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4038b1;\n                }\n                case 94: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4038b1;\n                }\n                case 96: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4038b1;\n                }\n                case 98: {\n                    goto lab_0x4038b1;\n                }\n                case 99: {\n                    goto lab_0x4038b1;\n                }\n                case 100: {\n                    goto lab_0x4038b1;\n                }\n                case 101: {\n                    goto lab_0x4038b1;\n                }\n                case 102: {\n                    goto lab_0x4038b1;\n                }\n                case 103: {\n                    goto lab_0x4038b1;\n                }\n                case 104: {\n                    goto lab_0x4038b1;\n                }\n                case 105: {\n                    goto lab_0x4038b1;\n                }\n                case 106: {\n                    goto lab_0x4038b1;\n                }\n                case 107: {\n                    goto lab_0x4038b1;\n                }\n                case 108: {\n                    goto lab_0x4038b1;\n                }\n                case 109: {\n                    goto lab_0x4038b1;\n                }\n                case 110: {\n                    goto lab_0x4038b1;\n                }\n                case 111: {\n                    goto lab_0x4038b1;\n                }\n                case 112: {\n                    goto lab_0x4038b1;\n                }\n                case 113: {\n                    goto lab_0x4038b1;\n                }\n                case 114: {\n                    goto lab_0x4038b1;\n                }\n                case 115: {\n                    goto lab_0x4038b1;\n                }\n                case 116: {\n                    goto lab_0x4038b1;\n                }\n                case 117: {\n                    goto lab_0x4038b1;\n                }\n                case 118: {\n                    goto lab_0x4038b1;\n                }\n                case 119: {\n                    goto lab_0x4038b1;\n                }\n                case 120: {\n                    goto lab_0x4038b1;\n                }\n                case 121: {\n                    goto lab_0x4038b1;\n                }\n                case 122: {\n                    goto lab_0x4038b1;\n                }\n                case 123: {\n                    goto lab_0x403855;\n                }\n                case 124: {\n                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403855;\n                }\n                case 126: {\n                    goto lab_0x40387d;\n                }\n                default: {\n                    goto lab_0x403c55;\n                }\n            }\n        }\n      lab_0x403c55:\n        if (v23 != 1) {\n            // 0x403fc0\n            ps = 0;\n            int64_t len = v15; // 0x403fd0\n            if (v15 == -1) {\n                // 0x403fd2\n                len = strlen((char *)str);\n            }\n            // 0x403ffe\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40405f:\n                // 0x40405f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x404064\n                int64_t v30 = v29 + str;\n                v24 = function_408af0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4045da_2;\n                    }\n                    case -1: {\n                        goto lab_0x4045da_2;\n                    }\n                    case -2: {\n                        // 0x4046bd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4046f7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4046fa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404707\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404700\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4045da\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4045da_2;\n                    }\n                    case 1: {\n                        goto lab_0x404030;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4040dc\n                        char v34 = *(char *)v33; // 0x4040ed\n                        unsigned char v35; // 0x403707\n                        if (v34 < 125) {\n                            // 0x4040f8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40410f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4040e0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4040ed\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4040f8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40410f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4040e0\n                            v33++;\n                        }\n                        goto lab_0x404030;\n                    }\n                }\n            }\n            goto lab_0x4045da_2;\n        } else {\n            // 0x403ca4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4038b1;\n        }\n    }\n  lab_0x403ed8:\n    // 0x403ed8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4047da\n        if (v8 > result) {\n            // 0x4047e3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403b07\n        return result;\n    }\n    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4038b1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4038c0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x403aca_2;\n        }\n    }\n    int64_t v39 = result; // 0x4039c1\n    char v40 = v20; // 0x4039c1\n    int64_t v41 = v38; // 0x4039c1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4039c1\n    int64_t v43 = v36; // 0x4039c1\n    goto lab_0x40393d;\n  lab_0x403aca_2:\n    // 0x403b07\n    return function_4036b0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4045da_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4038b1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4041ae\n        int64_t v50 = v5 + 1; // 0x404291\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x404298\n        char v52 = v20; // 0x404298\n        int64_t v53 = result; // 0x404298\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x404261\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x404265\n            int64_t v56 = v54 + 1; // 0x40426a\n            int64_t v57 = v51 + 1; // 0x404291\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40425c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x404261\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x404265\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40393d;\n    }\n  lab_0x404030:\n    // 0x404030\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40404f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404052\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4045da\n        goto lab_0x4045da_2;\n    }\n    goto lab_0x40405f;\n  lab_0x40387d:\n    // 0x40387d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x403aca_2;\n    }\n    goto lab_0x4038b1;\n  lab_0x403855:;\n    bool v60 = v15 == 1; // 0x403860\n    if (v15 == -1) {\n        // 0x403862\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40386e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4038b1;\n    } else {\n        goto lab_0x40387d;\n    }\n  lab_0x40393d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403942\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403946\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403758_2;\n}\n"
        },
        {
            "funcName": "function_4048e0",
            "funcStartAddr": "4048e0",
            "funcEndAddr": "404a7e",
            "decompiledFuncCode": "int64_t function_4048e0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4048e2\n    int32_t * v3 = __errno_location(); // 0x4048fc\n    int32_t v4 = v2; // 0x404911\n    if (v4 < 0) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v5 = (int64_t)g24; // 0x404901\n    int32_t v6 = *v3; // 0x40490b\n    int64_t v7 = v5; // 0x404921\n    if (v2 >= (int64_t)*(int32_t *)&g27) {\n        if (v4 == 0x7fffffff) {\n            // 0x404a79\n            function_405990(a1);\n            // UNREACHABLE\n        }\n        int64_t v8 = v2 + 1; // 0x404930\n        int64_t v9 = 0x100000000 * v8 >> 28; // 0x404937\n        int64_t v10; // 0x4048e0\n        if (g24 == &g25) {\n            int64_t v11 = function_4057a0(0, v9); // 0x404a5a\n            int128_t v12 = __asm_movdqa(*(int128_t *)&g25); // 0x404a5f\n            *(int64_t *)&g24 = v11;\n            __asm_movups(*(int128_t *)v11, v12);\n            v10 = v11;\n        } else {\n            int64_t v13 = function_4057a0(v5, v9); // 0x40494b\n            *(int64_t *)&g24 = v13;\n            v10 = v13;\n        }\n        // 0x40495a\n        v7 = v10;\n        int32_t v14 = *(int32_t *)&g27; // 0x40495a\n        int32_t v15 = v8; // 0x404961\n        memset((int64_t *)(16 * (int64_t)v14 + v7), 0, 16 * (v15 - v14));\n        *(int32_t *)&g27 = v15;\n    }\n    int64_t v16 = v7 + (v1 >> 28); // 0x404991\n    int32_t v17 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40499b\n    int64_t * v18 = (int64_t *)v16; // 0x40499e\n    uint64_t v19 = *v18; // 0x40499e\n    int64_t * v20 = (int64_t *)(v16 + 8); // 0x4049a1\n    int64_t result = *v20; // 0x4049a1\n    int64_t v21; // 0x4048e0\n    uint64_t v22 = function_4036b0(result, v19, a2, a3, v21 & 0xffffffff, v17); // 0x4049c4\n    if (v19 > v22) {\n        // 0x404a3b\n        *v3 = v6;\n        return result;\n    }\n    int64_t v23 = v22 + 1; // 0x4049d7\n    *v18 = v23;\n    if (result != (int64_t)&g48) {\n        // 0x4049e7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_405740(v23); // 0x404a01\n    *v20 = result2;\n    int64_t v24; // 0x4048e0\n    function_4036b0(result2, v23, a2, a3, (int64_t)*(int32_t *)&v24, v17);\n    // 0x404a3b\n    *v3 = v6;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404a80",
            "funcStartAddr": "404a80",
            "funcEndAddr": "404ab4",
            "decompiledFuncCode": "int64_t function_404a80(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x404a87\n    int64_t result = function_405940(a1 == 0 ? (int64_t)&g49 : a1, 56); // 0x404aa6\n    return result;\n}\n"
        },
        {
            "funcName": "function_404ac0",
            "funcStartAddr": "404ac0",
            "funcEndAddr": "404acf",
            "decompiledFuncCode": "int64_t function_404ac0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g49 : a1); // 0x404acc\n    return result;\n}\n"
        },
        {
            "funcName": "function_404ad0",
            "funcStartAddr": "404ad0",
            "funcEndAddr": "404adf",
            "decompiledFuncCode": "int64_t function_404ad0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g49 : a1; // 0x404ad8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g49;\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "404b13",
            "decompiledFuncCode": "int64_t function_404ae0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g49 + 8 : a1 + 8; // 0x404af9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x404afe\n    uint32_t v3 = *v2; // 0x404afe\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404b02\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404b20",
            "funcStartAddr": "404b20",
            "funcEndAddr": "404b33",
            "decompiledFuncCode": "int64_t function_404b20(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g49 + 4 : a1 + 4); // 0x404b2c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404b40",
            "funcStartAddr": "404b40",
            "funcEndAddr": "404b6b",
            "decompiledFuncCode": "int64_t function_404b40(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g49 : a1; // 0x404b48\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404b65\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404b5c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g49;\n}\n"
        },
        {
            "funcName": "function_404b70",
            "funcStartAddr": "404b70",
            "funcEndAddr": "404be2",
            "decompiledFuncCode": "int64_t function_404b70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g49 : a5; // 0x404b92\n    int32_t * v2 = __errno_location(); // 0x404b9b\n    uint32_t v3 = *(int32_t *)v1; // 0x404bbb\n    int64_t result = function_4036b0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x404bca\n    return result;\n}\n"
        },
        {
            "funcName": "function_404bf0",
            "funcStartAddr": "404bf0",
            "funcEndAddr": "404cd1",
            "decompiledFuncCode": "int64_t function_404bf0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g49 : a4; // 0x404c12\n    int32_t * v2 = __errno_location(); // 0x404c18\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404c37\n    int32_t * v4 = (int32_t *)v1; // 0x404c3a\n    int64_t v5 = function_4036b0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404c55\n    int64_t v6 = v5 + 1; // 0x404c5a\n    int64_t result = function_405740(v6); // 0x404c6f\n    function_4036b0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404cb4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x404cbd\n    return result;\n}\n"
        },
        {
            "funcName": "function_404ce0",
            "funcStartAddr": "404ce0",
            "funcEndAddr": "404cea",
            "decompiledFuncCode": "int64_t function_404ce0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404ce0\n    return function_404bf0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404cf0",
            "funcStartAddr": "404cf0",
            "funcEndAddr": "404d85",
            "decompiledFuncCode": "int64_t function_404cf0(void) {\n    uint32_t v1 = *(int32_t *)&g27; // 0x404cf0\n    int64_t v2 = v1; // 0x404cf0\n    int64_t v3 = v2; // 0x404d04\n    if (v1 >= 2) {\n        int64_t v4 = &g27;\n        int64_t v5 = v4 + 16; // 0x404d23\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g62;\n        while (v5 != (int64_t)g24 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404d20\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g62;\n        }\n    }\n    int64_t v6 = v3; // 0x404d3d\n    if (g25 != 0x60f360) {\n        // 0x404d3f\n        free((int64_t *)g25);\n        g25 = 256;\n        *(int64_t *)&g26 = (int64_t)&g48;\n        v6 = &g62;\n    }\n    int64_t result = v6; // 0x404d61\n    if (g24 != &g25) {\n        // 0x404d63\n        free(g24);\n        *(int64_t *)&g24 = (int64_t)&g25;\n        result = &g62;\n    }\n    // 0x404d76\n    *(int32_t *)&g27 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404d90",
            "funcStartAddr": "404d90",
            "funcEndAddr": "404da1",
            "decompiledFuncCode": "int64_t function_404d90(void) {\n    // 0x404d90\n    int64_t v1; // 0x404d90\n    return function_4048e0(v1, v1, -1, (int64_t *)&g49);\n}\n"
        },
        {
            "funcName": "function_404db0",
            "funcStartAddr": "404db0",
            "funcEndAddr": "404dba",
            "decompiledFuncCode": "int64_t function_404db0(void) {\n    // 0x404db0\n    int64_t v1; // 0x404db0\n    return function_4048e0(v1, v1, v1, (int64_t *)&g49);\n}\n"
        },
        {
            "funcName": "function_404dc0",
            "funcStartAddr": "404dc0",
            "funcEndAddr": "404dd6",
            "decompiledFuncCode": "int64_t function_404dc0(int64_t a1) {\n    // 0x404dc0\n    return function_4048e0(0, a1, -1, (int64_t *)&g49);\n}\n"
        },
        {
            "funcName": "function_404de0",
            "funcStartAddr": "404de0",
            "funcEndAddr": "404df2",
            "decompiledFuncCode": "int64_t function_404de0(int64_t a1, int64_t a2) {\n    // 0x404de0\n    return function_4048e0(0, a1, a2, (int64_t *)&g49);\n}\n"
        },
        {
            "funcName": "function_404e00",
            "funcStartAddr": "404e00",
            "funcEndAddr": "404e68",
            "decompiledFuncCode": "int64_t function_404e00(int64_t a1, int64_t a2, int64_t * a3) {\n    if ((int32_t)a2 == 10) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404e10\n    return function_4048e0(a1, (int64_t)a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404e70",
            "funcStartAddr": "404e70",
            "funcEndAddr": "404ed4",
            "decompiledFuncCode": "int64_t function_404e70(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404e80\n    return function_4048e0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404ee0",
            "funcStartAddr": "404ee0",
            "funcEndAddr": "404eec",
            "decompiledFuncCode": "int64_t function_404ee0(int64_t a1, int64_t a2) {\n    // 0x404ee0\n    return function_404e00(0, a1 & 0xffffffff, (int64_t *)a2);\n}\n"
        },
        {
            "funcName": "function_404ef0",
            "funcStartAddr": "404ef0",
            "funcEndAddr": "404eff",
            "decompiledFuncCode": "int64_t function_404ef0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404ef0\n    return function_404e70(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404f00",
            "funcStartAddr": "404f00",
            "funcEndAddr": "404f70",
            "decompiledFuncCode": "int64_t function_404f00(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g49); // 0x404f0d\n    int128_t v2 = __asm_movdqa(g50); // 0x404f15\n    int128_t v3 = __asm_movdqa(g51); // 0x404f1d\n    int64_t v4 = __asm_movaps_6(v1); // bp-72, 0x404f32\n    __asm_movaps_6(v2);\n    __asm_movaps_6(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404f48\n    uint32_t v6 = *v5; // 0x404f48\n    uint32_t v7 = (int32_t)a3 % 32; // 0x404f4d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4048e0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404f70",
            "funcStartAddr": "404f70",
            "funcEndAddr": "404f7d",
            "decompiledFuncCode": "int64_t function_404f70(int64_t a1, int64_t a2) {\n    // 0x404f70\n    return function_404f00(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404f80",
            "funcStartAddr": "404f80",
            "funcEndAddr": "404f91",
            "decompiledFuncCode": "int64_t function_404f80(int64_t a1) {\n    // 0x404f80\n    return function_404f00(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404fa0",
            "funcStartAddr": "404fa0",
            "funcEndAddr": "404faa",
            "decompiledFuncCode": "int64_t function_404fa0(void) {\n    // 0x404fa0\n    int64_t v1; // 0x404fa0\n    return function_404f00(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404fb0",
            "funcStartAddr": "404fb0",
            "funcEndAddr": "40501e",
            "decompiledFuncCode": "int64_t function_404fb0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404fca\n    return function_4048e0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405020",
            "funcStartAddr": "405020",
            "funcEndAddr": "40508c",
            "decompiledFuncCode": "int64_t function_405020(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g49); // 0x405027\n    int128_t v2 = __asm_movdqa(g50); // 0x40502f\n    int128_t v3 = __asm_movdqa(g51); // 0x405037\n    __asm_movaps_6(v1);\n    __asm_movaps_6(v2);\n    __asm_movaps_6(v3);\n    int64_t v4 = 10; // bp-72, 0x405059\n    if (a2 == 0 || a3 == 0) {\n        // 0x405087\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40506a\n    return function_4048e0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_405090",
            "funcStartAddr": "405090",
            "funcEndAddr": "405099",
            "decompiledFuncCode": "int64_t function_405090(void) {\n    // 0x405090\n    int64_t v1; // 0x405090\n    return function_405020(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4050a0",
            "funcStartAddr": "4050a0",
            "funcEndAddr": "4050b7",
            "decompiledFuncCode": "int64_t function_4050a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4050a0\n    return function_405020(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4050c0",
            "funcStartAddr": "4050c0",
            "funcEndAddr": "4050d3",
            "decompiledFuncCode": "int64_t function_4050c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4050c0\n    return function_405020(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4050e0",
            "funcStartAddr": "4050e0",
            "funcEndAddr": "4050ea",
            "decompiledFuncCode": "int64_t function_4050e0(void) {\n    // 0x4050e0\n    int64_t v1; // 0x4050e0\n    return function_4048e0(v1, v1, v1, &g23);\n}\n"
        },
        {
            "funcName": "function_4050f0",
            "funcStartAddr": "4050f0",
            "funcEndAddr": "405102",
            "decompiledFuncCode": "int64_t function_4050f0(int64_t a1, int64_t a2) {\n    // 0x4050f0\n    return function_4048e0(0, a1, a2, &g23);\n}\n"
        },
        {
            "funcName": "function_405110",
            "funcStartAddr": "405110",
            "funcEndAddr": "405121",
            "decompiledFuncCode": "int64_t function_405110(void) {\n    // 0x405110\n    int64_t v1; // 0x405110\n    return function_4048e0(v1, v1, -1, &g23);\n}\n"
        },
        {
            "funcName": "function_405130",
            "funcStartAddr": "405130",
            "funcEndAddr": "405146",
            "decompiledFuncCode": "int64_t function_405130(int64_t a1) {\n    // 0x405130\n    return function_4048e0(0, a1, -1, &g23);\n}\n"
        },
        {
            "funcName": "function_405150",
            "funcStartAddr": "405150",
            "funcEndAddr": "40519b",
            "decompiledFuncCode": "int64_t function_405150(int64_t * a1) {\n    // 0x405150\n    int64_t v1; // bp-152, 0x405150\n    if (__lxstat(1, \"/\", (struct stat *)&v1) != 0) {\n        // 0x405190\n        return 0;\n    }\n    int64_t result = (int64_t)a1;\n    *(int64_t *)(result + 8) = v1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4051a0",
            "funcStartAddr": "4051a0",
            "funcEndAddr": "40557d",
            "decompiledFuncCode": "int64_t function_4051a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405238\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x4051bc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x4051d6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40521b\n    if (a6 < 10) {\n        // 0x40522a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x405322\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405580",
            "funcStartAddr": "405580",
            "funcEndAddr": "4055a0",
            "decompiledFuncCode": "int64_t function_405580(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405580\n    if (a5 == 0) {\n        // 0x40559b\n        return function_4051a0(a1, a2, a3, a4, a5, 0, (int64_t)&g62);\n    }\n    int64_t v1 = 0; // 0x405587\n    v1++;\n    int64_t v2 = v1; // 0x405599\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405590\n        v1++;\n        v2 = v1;\n    }\n    // 0x40559b\n    return function_4051a0(a1, a2, a3, a4, a5, v2, (int64_t)&g62);\n}\n"
        },
        {
            "funcName": "function_4055a0",
            "funcStartAddr": "4055a0",
            "funcEndAddr": "405600",
            "decompiledFuncCode": "int64_t function_4055a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4055a0\n    int64_t v3 = &v2; // 0x4055a0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4055d3\n    int64_t v6; // 0x4055bd\n    int64_t * v7; // 0x4055db\n    int64_t v8; // 0x4055db\n    int64_t v9; // 0x4055e7\n    if (v5 < 48) {\n        // 0x4055b0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4055f3\n            break;\n        }\n    } else {\n        // 0x4055db\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4055f3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4055d1\n    while (v4 != 9) {\n        // 0x4055c9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4055b0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4055f3\n                break;\n            }\n        } else {\n            // 0x4055db\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4055f3\n                break;\n            }\n        }\n        // 0x4055c9\n        v10 = 10;\n    }\n    // 0x4055f3\n    return function_4051a0(a1, a2, a3, a4, v3, v10, (int64_t)&g62);\n}\n"
        },
        {
            "funcName": "function_405600",
            "funcStartAddr": "405600",
            "funcEndAddr": "4056bc",
            "decompiledFuncCode": "int64_t function_405600(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x405600\n    int64_t v1; // bp-168, 0x405600\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x405600\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x405600\n    int64_t v8; // 0x405600\n    int64_t v9; // bp-56, 0x405600\n    int64_t v10; // 0x405665\n    int64_t v11; // 0x405689\n    if ((int32_t)v6 < 48) {\n        // 0x405650\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4056a0\n            break;\n        }\n    } else {\n        // 0x405682\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4056a0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40567a\n    int64_t v13 = 10; // 0x40567a\n    while (v5 != 9) {\n        // 0x40567c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405650\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4056a0\n                break;\n            }\n        } else {\n            // 0x405682\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4056a0\n                break;\n            }\n        }\n        // 0x405672\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4056a0\n    int64_t v14; // bp-136, 0x405600\n    int64_t result = function_4051a0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g62); // 0x4056af\n    return result;\n}\n"
        },
        {
            "funcName": "function_4056c0",
            "funcStartAddr": "4056c0",
            "funcEndAddr": "405734",
            "decompiledFuncCode": "int64_t function_4056c0(int64_t a1) {\n    // 0x4056c0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x405723\n    return fputs_unlocked(v1, g33);\n}\n"
        },
        {
            "funcName": "function_405740",
            "funcStartAddr": "405740",
            "funcEndAddr": "40575a",
            "decompiledFuncCode": "int64_t function_405740(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x405744\n    if (size != 0 != (mem == NULL)) {\n        // 0x405753\n        return (int64_t)mem;\n    }\n    // 0x405755\n    function_405990(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405760",
            "funcStartAddr": "405760",
            "funcEndAddr": "405781",
            "decompiledFuncCode": "int64_t function_405760(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405763\n    int64_t v2 = v1; // 0x405763\n    if (v2 < 0) {\n        // 0x40577b\n        function_405990(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405779\n        return function_405740(v2);\n    }\n    // 0x40577b\n    function_405990(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405790",
            "funcStartAddr": "405790",
            "funcEndAddr": "405792",
            "decompiledFuncCode": "int64_t function_405790(void) {\n    // 0x405790\n    int64_t v1; // 0x405790\n    return function_405740(v1);\n}\n"
        },
        {
            "funcName": "function_4057a0",
            "funcStartAddr": "4057a0",
            "funcEndAddr": "4057d6",
            "decompiledFuncCode": "int64_t function_4057a0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4057c8\n        free(v1);\n        return (int32_t)&g62 ^ (int32_t)&g62;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4057b1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4057c0\n        return (int64_t)mem;\n    }\n    // 0x4057d1\n    function_405990(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4057e0",
            "funcStartAddr": "4057e0",
            "funcEndAddr": "405801",
            "decompiledFuncCode": "int64_t function_4057e0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4057e3\n    int64_t v2 = v1; // 0x4057e3\n    if (v2 < 0) {\n        // 0x4057fb\n        function_405990(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4057f9\n        return function_4057a0(a1, v2);\n    }\n    // 0x4057fb\n    function_405990(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405810",
            "funcStartAddr": "405810",
            "funcEndAddr": "405896",
            "decompiledFuncCode": "int64_t function_405810(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40586b\n            function_405990(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4057a0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405853\n    if (a2 == 0) {\n        // 0x405878\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405858\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40586b\n        function_405990(a1);\n        // UNREACHABLE\n    }\n    // 0x40583a\n    *(int64_t *)a2 = v2;\n    return function_4057a0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4058a0",
            "funcStartAddr": "4058a0",
            "funcEndAddr": "4058f0",
            "decompiledFuncCode": "int64_t function_4058a0(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    if (a1 != 0) {\n        if (a2 >= (int64_t *)0x5555555555555554) {\n            // 0x4058ea\n            function_405990(a1);\n            // UNREACHABLE\n        }\n        int64_t v2 = v1 + 1 + v1 / 2;\n        *a2 = v2;\n        return function_4057a0(a1, v2);\n    }\n    if (a2 == NULL) {\n        // 0x4058d5\n        *a2 = 128;\n        return function_4057a0(0, 128);\n    }\n    // 0x4058e8\n    if (a2 < NULL) {\n        // 0x4058ea\n        function_405990(a1);\n        // UNREACHABLE\n    }\n    // 0x4058c2\n    *a2 = v1;\n    return function_4057a0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4058f0",
            "funcStartAddr": "4058f0",
            "funcEndAddr": "405907",
            "decompiledFuncCode": "int64_t function_4058f0(int64_t a1, int64_t a2) {\n    // 0x4058f0\n    return (int64_t)memset((int64_t *)function_405740(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_405910",
            "funcStartAddr": "405910",
            "funcEndAddr": "40593e",
            "decompiledFuncCode": "int64_t function_405910(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x405917\n    if ((int64_t)v1 < 0) {\n        // 0x405939\n        function_405990(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x405939\n        function_405990(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40592a\n    if (mem != NULL) {\n        // 0x405934\n        return (int64_t)mem;\n    }\n    // 0x405939\n    function_405990(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405940",
            "funcStartAddr": "405940",
            "funcEndAddr": "405968",
            "decompiledFuncCode": "int64_t function_405940(int64_t a1, int64_t a2) {\n    int64_t v1 = function_405740(a2); // 0x40594f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405970",
            "funcStartAddr": "405970",
            "funcEndAddr": "405983",
            "decompiledFuncCode": "int64_t function_405970(int64_t str) {\n    // 0x405970\n    return function_405940(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405990",
            "funcStartAddr": "405990",
            "funcEndAddr": "4059c1",
            "decompiledFuncCode": "int64_t function_405990(int64_t a1) {\n    // 0x405990\n    error(g22, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4059d0",
            "funcStartAddr": "4059d0",
            "funcEndAddr": "405a20",
            "decompiledFuncCode": "int64_t function_4059d0(int64_t a1, int64_t a2) {\n    // 0x4059d0\n    int64_t v1; // 0x4059d0\n    int64_t result = fts_open(a1, (int32_t)a2 | 512, v1); // 0x4059da\n    if (result != 0) {\n        // 0x4059e4\n        return result;\n    }\n    // 0x4059f0\n    if (*__errno_location() == 22) {\n        // 0x405a00\n        __assert_fail(\"errno != EINVAL\", \"lib/xfts.c\", 41, \"xfts_open\");\n        return &g62;\n    }\n    // 0x4059fa\n    function_405990(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405a20",
            "funcStartAddr": "405a20",
            "funcEndAddr": "405a49",
            "decompiledFuncCode": "int64_t function_405a20(int64_t a1, int64_t a2) {\n    int64_t result = 1; // 0x405a20\n    int32_t v1; // 0x405a20\n    switch (v1 & 17) {\n        case 17: {\n            // 0x405a40\n            return *(int64_t *)(a2 + 88) != 0;\n        }\n        default: {\n            // 0x405a37\n            result = 0;\n        }\n        case 16: {\n            // 0x405a37\n            return result;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_405a50",
            "funcStartAddr": "405a50",
            "funcEndAddr": "405a6a",
            "decompiledFuncCode": "int64_t function_405a50(int64_t a1, int64_t a2) {\n    // 0x405a50\n    if (*(int64_t *)(a1 + 8) == *(int64_t *)(a2 + 8)) {\n        // 0x405a60\n        return a2 & -256 | (int64_t)(a1 == a2);\n    }\n    // 0x405a5c\n    return 0;\n}\n"
        },
        {
            "funcName": "function_405a70",
            "funcStartAddr": "405a70",
            "funcEndAddr": "405a7d",
            "decompiledFuncCode": "int64_t function_405a70(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x405a70\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_405a80",
            "funcStartAddr": "405a80",
            "funcEndAddr": "405a8c",
            "decompiledFuncCode": "int64_t function_405a80(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x405a80\n    return a1 % a2;\n}\n"
        },
        {
            "funcName": "function_405a90",
            "funcStartAddr": "405a90",
            "funcEndAddr": "405a9a",
            "decompiledFuncCode": "int64_t function_405a90(int64_t a1, int64_t a2) {\n    // 0x405a90\n    return a2 & -256 | (int64_t)(bool)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_405aa0",
            "funcStartAddr": "405aa0",
            "funcEndAddr": "405ac2",
            "decompiledFuncCode": "int64_t function_405aa0(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a2 + 128); // 0x405aab\n    uint64_t v2 = *(int64_t *)(a1 + 128); // 0x405ab2\n    return v2 < v1 ? 0xffffffff : (int64_t)(v2 > v1);\n}\n"
        },
        {
            "funcName": "function_405ad0",
            "funcStartAddr": "405ad0",
            "funcEndAddr": "405c7a",
            "decompiledFuncCode": "int64_t function_405ad0(int64_t a1, int64_t a2, int32_t a3) {\n    int64_t v1 = a2 + 120; // 0x405ad6\n    int64_t v2 = a1 + 72; // 0x405ade\n    uint64_t v3 = (int64_t)*(int32_t *)v2; // 0x405ade\n    int64_t * v4 = (int64_t *)(a2 + 88); // 0x405ae1\n    int64_t * v5 = (int64_t *)(a2 + 48); // 0x405ae6\n    int64_t v6 = *v5; // 0x405ae6\n    int32_t v7; // 0x405ad0\n    if (*v4 != 0 || v3 % 2 == 0) {\n        if ((v3 & 2) != 0) {\n            goto lab_0x405af0;\n        } else {\n            if ((char)a3 != 0) {\n                goto lab_0x405af0;\n            } else {\n                int32_t v8 = *(int32_t *)(a1 + 44); // 0x405b4b\n                if (__fxstatat(1, v8, (char *)v6, (struct stat *)v1, 256) != 0) {\n                    // 0x405ba0\n                    v7 = *__errno_location();\n                    goto lab_0x405ba7;\n                } else {\n                    goto lab_0x405b67;\n                }\n            }\n        }\n    } else {\n        goto lab_0x405af0;\n    }\n  lab_0x405af0:;\n    struct stat * v9 = (struct stat *)v1; // 0x405af8\n    if (__xstat(1, (char *)v6, v9) == 0) {\n        goto lab_0x405b67;\n    } else {\n        int32_t * v10 = __errno_location(); // 0x405b01\n        int32_t v11 = *v10; // 0x405b09\n        v7 = v11;\n        if (v11 == 2) {\n            // 0x405b14\n            if (__lxstat(1, (char *)*v5, v9) == 0) {\n                // 0x405b2d\n                *v10 = 0;\n                return 13;\n            }\n            // 0x405c50\n            v7 = *v10;\n        }\n        goto lab_0x405ba7;\n    }\n  lab_0x405b67:;\n    int32_t v12 = *(int32_t *)(a2 + 144) & 0xf000; // 0x405b6d\n    int64_t v13; // 0x405ad0\n    switch ((int16_t)v12) {\n        case 0x4000: {\n            uint64_t v14 = *(int64_t *)(a2 + 136); // 0x405be0\n            v13 = -1;\n            if (v14 >= 2) {\n                // 0x405bed\n                v13 = -1;\n                if (*v4 >= 1) {\n                    // 0x405bf4\n                    v13 = (*(char *)v2 & 32) == 0 ? v14 - 2 : v14;\n                }\n            }\n            // break -> 0x405c02\n            break;\n        }\n        case -0x6000: {\n            // 0x405b93\n            return 12;\n        }\n        default: {\n            // 0x405b93\n            return 4 * (int64_t)(v12 == 0x8000) + (v12 == 0x8000 ? 4 : 3);\n        }\n    }\n    int64_t v15 = a2 + 264; // 0x405c02\n    *(int64_t *)(a2 + 104) = v13;\n    if (*(char *)v15 != 46) {\n        // 0x405b93\n        return 1;\n    }\n    // 0x405c18\n    if (*(char *)(a2 + 265) == 0) {\n        // 0x405b93\n        return *v4 == 0 ? 1 : 5;\n    }\n    // 0x405c21\n    if ((*(int32_t *)v15 & 0xffff00) != 0x2e00) {\n        // 0x405b93\n        return 1;\n    }\n    // 0x405b93\n    return *v4 == 0 ? 1 : 5;\n  lab_0x405ba7:\n    // 0x405ba7\n    *(int32_t *)(a2 + 64) = v7;\n    int64_t v16 = a2 + 128 & -8; // 0x405bb0\n    *(int64_t *)v1 = 0;\n    *(int64_t *)(a2 + 256) = 0;\n    __asm_rep_stosq_memset((char *)v16, 0, (a2 + 264 - v16) / 8 % 0x20000000);\n    return 10;\n}\n"
        },
        {
            "funcName": "function_405c80",
            "funcStartAddr": "405c80",
            "funcEndAddr": "405d7d",
            "decompiledFuncCode": "int64_t function_405c80(int64_t a1, int64_t result, uint64_t nmemb) {\n    int64_t v1 = *(int64_t *)(a1 + 64); // 0x405c93\n    int64_t * v2 = (int64_t *)(a1 + 16); // 0x405c97\n    int64_t v3 = *v2; // 0x405c97\n    int64_t * v4 = (int64_t *)(a1 + 56); // 0x405c9b\n    int64_t base = v3; // 0x405c9f\n    if (*v4 < nmemb) {\n        uint64_t v5 = nmemb + 40; // 0x405cab\n        *v4 = v5;\n        if (v5 >= 0x2000000000000000) {\n            // 0x405d51\n            free((int64_t *)v3);\n            *v2 = 0;\n            *v4 = 0;\n            return result;\n        }\n        int64_t * mem = realloc((int64_t *)v3, 8 * (int32_t)v5); // 0x405cc0\n        if (mem == NULL) {\n            // 0x405d51\n            free((int64_t *)*v2);\n            *v2 = 0;\n            *v4 = 0;\n            return result;\n        }\n        // 0x405cd1\n        base = (int64_t)mem;\n        *v2 = base;\n    }\n    int64_t v6 = base; // 0x405cdb\n    int64_t v7 = result; // 0x405cdb\n    if (result != 0) {\n        *(int64_t *)v6 = v7;\n        v7 += 16;\n        v6 += 8;\n        while (v7 != 0) {\n            // 0x405ce0\n            *(int64_t *)v6 = v7;\n            v7 += 16;\n            v6 += 8;\n        }\n    }\n    // 0x405cf1\n    qsort((int64_t *)base, (int32_t)nmemb, 8, (int32_t (*)(int64_t *, int64_t *))v1);\n    int64_t v8 = *v2; // 0x405d01\n    int64_t result2 = *(int64_t *)v8; // 0x405d08\n    if (nmemb == 1) {\n        // 0x405d3a\n        *(int64_t *)(result2 + 16) = 0;\n        return result2;\n    }\n    int64_t v9 = v8 + 8; // 0x405d23\n    int64_t * v10 = (int64_t *)v9; // 0x405d23\n    *(int64_t *)(result2 + 16) = *v10;\n    int64_t v11 = nmemb - 2; // 0x405d2f\n    int64_t v12 = v11; // 0x405d33\n    int64_t v13 = v9; // 0x405d33\n    if (v11 != 0) {\n        v13 += 8;\n        int64_t * v14 = (int64_t *)v13; // 0x405d23\n        *(int64_t *)(*v10 + 16) = *v14;\n        v12--;\n        while (v12 != 0) {\n            int64_t * v15 = v14;\n            v13 += 8;\n            v14 = (int64_t *)v13;\n            *(int64_t *)(*v15 + 16) = *v14;\n            v12--;\n        }\n    }\n    // 0x405d3a\n    *(int64_t *)(*(int64_t *)(8 * nmemb - 8 + v8) + 16) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405d80",
            "funcStartAddr": "405d80",
            "funcEndAddr": "405e0a",
            "decompiledFuncCode": "int64_t function_405d80(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = a3;\n    int64_t * mem = malloc(v1 + 272 & -8); // 0x405d9e\n    int64_t result = (int64_t)mem; // 0x405d9e\n    if (mem != NULL) {\n        int64_t v2 = result + 264; // 0x405dab\n        memcpy((int64_t *)v2, (int64_t *)a2, v1);\n        *(char *)(v2 + a3) = 0;\n        *(int64_t *)(result + 96) = a3;\n        *(int64_t *)(result + 80) = a1;\n        *(int64_t *)(result + 56) = *(int64_t *)(a1 + 32);\n        *(int32_t *)(result + 64) = 0;\n        *(int64_t *)(result + 24) = 0;\n        *(int32_t *)(result + 114) = 0x30000;\n        *(int64_t *)(result + 32) = 0;\n        *(int64_t *)(result + 40) = 0;\n    }\n    // 0x405dfc\n    return result;\n}\n"
        },
        {
            "funcName": "function_405e10",
            "funcStartAddr": "405e10",
            "funcEndAddr": "405e51",
            "decompiledFuncCode": "int64_t function_405e10(int64_t a1) {\n    // 0x405e10\n    if (a1 == 0) {\n        // 0x405e42\n        int64_t result; // 0x405e10\n        return result;\n    }\n    int64_t dirp = *(int64_t *)(a1 + 24); // 0x405e20\n    int64_t v1 = *(int64_t *)(a1 + 16); // 0x405e24\n    if (dirp != 0) {\n        // 0x405e2d\n        closedir((struct __dirstream *)dirp);\n    }\n    // 0x405e32\n    free((int64_t *)a1);\n    while (v1 != 0) {\n        int64_t v2 = v1;\n        dirp = *(int64_t *)(v2 + 24);\n        v1 = *(int64_t *)(v2 + 16);\n        if (dirp != 0) {\n            // 0x405e2d\n            closedir((struct __dirstream *)dirp);\n        }\n        // 0x405e32\n        free((int64_t *)v2);\n    }\n    // 0x405e42\n    return &g62;\n}\n"
        },
        {
            "funcName": "function_405e60",
            "funcStartAddr": "405e60",
            "funcEndAddr": "405e99",
            "decompiledFuncCode": "int64_t function_405e60(int64_t a1) {\n    int64_t result = function_409f80(a1); // 0x405e7f\n    if ((char)result != 0) {\n        // 0x405e88\n        return result;\n    }\n    int32_t fd = function_409fd0(a1); // 0x405e78\n    if (fd >= 0) {\n        // 0x405e90\n        close(fd);\n    }\n    int64_t result2 = function_409f80(a1); // 0x405e7f\n    while ((char)result2 == 0) {\n        // 0x405e70\n        fd = function_409fd0(a1);\n        if (fd >= 0) {\n            // 0x405e90\n            close(fd);\n        }\n        // 0x405e7c\n        result2 = function_409f80(a1);\n    }\n    // 0x405e88\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405ea0",
            "funcStartAddr": "405ea0",
            "funcEndAddr": "405fb1",
            "decompiledFuncCode": "int64_t function_405ea0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 80); // 0x405ea8\n    int64_t v2 = *v1; // 0x405ea8\n    if ((*(char *)(v2 + 73) & 2) == 0) {\n        // 0x405ee2\n        return 0;\n    }\n    int64_t * v3 = (int64_t *)(v2 + 80); // 0x405eb6\n    int64_t v4 = *v3; // 0x405eb6\n    int64_t v5 = v4; // 0x405ec0\n    int64_t result; // bp-152, 0x405ea0\n    if (v4 == 0) {\n        // 0x405f50\n        v5 = function_4095a0(13, 0, 0x405a80, 0x405a90, 0x4017f0);\n        *v3 = v5;\n        if (v5 == 0) {\n            // 0x405f7c\n            fstatfs(*(int32_t *)(*v1 + 44), (struct statfs *)&result);\n            // 0x405ee2\n            return 0;\n        }\n    }\n    int64_t * v6 = (int64_t *)(a1 + 120); // 0x405ec6\n    result = *v6;\n    int64_t v7 = function_409330(v5, &result); // 0x405ed4\n    if (v7 != 0) {\n        // 0x405ee2\n        return *(int64_t *)(v7 + 8);\n    }\n    // 0x405ef0\n    if (fstatfs(*(int32_t *)(*v1 + 44), (struct statfs *)&result) != 0) {\n        // 0x405ee2\n        return 0;\n    }\n    int64_t * mem = malloc(16); // 0x405f0c\n    if (mem == NULL) {\n        // 0x405ee2\n        return result;\n    }\n    int64_t v8 = (int64_t)mem; // 0x405f0c\n    *(int64_t *)(v8 + 8) = result;\n    *mem = *v6;\n    if (function_409d40(v5, v8) != 0) {\n        // 0x405f38\n        return result;\n    }\n    // 0x405fa0\n    free(mem);\n    // 0x405ee2\n    return result;\n}\n"
        },
        {
            "funcName": "function_405fc0",
            "funcStartAddr": "405fc0",
            "funcEndAddr": "406024",
            "decompiledFuncCode": "int64_t function_405fc0(int64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = function_405ea0(a1, a2); // 0x405fc4\n    if (v1 == 0x9fa0) {\n        // 0x405ff6\n        return 0;\n    }\n    if (v1 <= 0x9fa0) {\n        // 0x406000\n        if (v1 != 0) {\n            // 0x406007\n            return v1 != 0x6969;\n        }\n        // 0x405ff6\n        return 0;\n    }\n    // 0x405fd3\n    switch (v1) {\n        case 0x5346414f: {\n            // 0x405ff6\n            return 0;\n        }\n        case 0x58465342: {\n            // 0x405ff6\n            return 2;\n        }\n    }\n    // 0x405ff6\n    return v1 == 0x52654973 ? 2 : 1;\n}\n"
        },
        {
            "funcName": "function_406030",
            "funcStartAddr": "406030",
            "funcEndAddr": "406096",
            "decompiledFuncCode": "int64_t function_406030(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t * v1 = (int32_t *)(a1 + 44); // 0x40603b\n    int32_t fd = *v1; // 0x40603b\n    int32_t v2 = a2; // 0x40603e\n    if (fd == v2 == (fd != -100)) {\n        // 0x406091\n        abort();\n        // UNREACHABLE\n    }\n    if ((char)a3 == 0) {\n        // 0x40604b\n        if (fd >= 0 != ((*(char *)(a1 + 72) & 4) == 0)) {\n            // 0x406055\n            *v1 = v2;\n            int64_t result; // 0x406030\n            return result;\n        }\n        int32_t result2 = close(fd); // 0x406082\n        *v1 = v2;\n        return result2;\n    }\n    int64_t result3 = function_409f90(a1 + 96, fd); // 0x406064\n    uint32_t fd2 = (int32_t)result3; // 0x406069\n    if (fd2 < 0) {\n        // 0x406055\n        *v1 = v2;\n        return result3;\n    }\n    int32_t result4 = close(fd2); // 0x40606f\n    *v1 = v2;\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4060a0",
            "funcStartAddr": "4060a0",
            "funcEndAddr": "4060fa",
            "decompiledFuncCode": "int64_t function_4060a0(int64_t a1) {\n    int32_t v1 = *(int32_t *)(a1 + 72); // 0x4060a9\n    uint32_t v2 = v1 & 4; // 0x4060ae\n    if (v2 != 0) {\n        // 0x4060d2\n        function_405e60(a1 + 96);\n        return 0;\n    }\n    int64_t result; // 0x4060a0\n    if ((v1 & 512) == 0) {\n        // 0x4060e8\n        result = fchdir(*(int32_t *)(a1 + 40)) != 0;\n    } else {\n        // 0x4060b8\n        function_406030(a1, 0xffffff9c, 1);\n        result = v2;\n    }\n    // 0x4060d2\n    function_405e60(a1 + 96);\n    return result;\n}\n"
        },
        {
            "funcName": "function_406100",
            "funcStartAddr": "406100",
            "funcEndAddr": "40616b",
            "decompiledFuncCode": "int64_t function_406100(int64_t a1, uint64_t a2, int64_t a3) {\n    uint64_t v1 = a2 + 256 + a3; // 0x40610a\n    if (v1 < a2) {\n        int64_t * v2 = (int64_t *)a1; // 0x406138\n        free(v2);\n        *v2 = 0;\n        *__errno_location() = 36;\n        return 0;\n    }\n    // 0x406117\n    *(int64_t *)a2 = v1;\n    int64_t * v3 = (int64_t *)a1; // 0x40611d\n    int64_t * mem = realloc(v3, (int32_t)v1); // 0x40611d\n    if (mem != NULL) {\n        // 0x406127\n        *v3 = (int64_t)mem;\n        return 1;\n    }\n    // 0x406158\n    free(v3);\n    *v3 = 0;\n    return (int32_t)&g62 ^ (int32_t)&g62;\n}\n"
        },
        {
            "funcName": "function_406170",
            "funcStartAddr": "406170",
            "funcEndAddr": "4061cb",
            "decompiledFuncCode": "int64_t function_406170(int32_t a1, int64_t a2) {\n    if ((a1 & 258) != 0) {\n        int64_t v1 = function_4095a0(31, 0, 0x405a70, 0x405a50, 0x4017f0); // 0x406193\n        *(int64_t *)a2 = v1;\n        // 0x4061a1\n        return v1 & -256 | (int64_t)(v1 != 0);\n    }\n    int64_t * mem = malloc(32); // 0x4061ad\n    int64_t v2 = (int64_t)mem; // 0x4061ad\n    *(int64_t *)a2 = v2;\n    if (mem == NULL) {\n        // 0x4061a1\n        return 0;\n    }\n    // 0x4061bf\n    function_408bd0(v2);\n    return 1;\n}\n"
        },
        {
            "funcName": "function_4061d0",
            "funcStartAddr": "4061d0",
            "funcEndAddr": "406214",
            "decompiledFuncCode": "int64_t function_4061d0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x2000 * a2 & 0x20000 | 128 * a2 & 0x40000 | 0x90900; // 0x4061ea\n    if ((a2 & 512) == 0) {\n        // 0x406208\n        return function_408c60(a3, v1, (int32_t)v1);\n    }\n    // 0x4061f8\n    return function_40a590((int64_t)a1, a3, (int32_t)v1, a3);\n}\n"
        },
        {
            "funcName": "function_406220",
            "funcStartAddr": "406220",
            "funcEndAddr": "4063e6",
            "decompiledFuncCode": "int64_t function_406220(int64_t a1, int64_t a2, int64_t a3, int32_t a4) {\n    int64_t v1 = a4;\n    int64_t v2 = a3 & 0xffffffff; // 0x40622f\n    int32_t * v3 = (int32_t *)(a1 + 72); // 0x40623c\n    uint32_t v4 = *v3; // 0x40623c\n    int64_t v5 = v4; // 0x40623c\n    int32_t v6 = v4 & 4; // 0x406243\n    int64_t v7; // 0x406220\n    int64_t v8; // 0x406220\n    int64_t v9; // 0x406220\n    int64_t v10; // 0x406220\n    int64_t v11; // 0x406220\n    if (a4 == 0) {\n        goto lab_0x4062c0;\n    } else {\n        // 0x40624b\n        bool v12; // 0x406220\n        int64_t v13 = v12 ? -1 : 1; // 0x406258\n        int64_t v14 = (int64_t)\"..\"; // 0x406220\n        int64_t v15 = v1; // 0x406220\n        int64_t v16 = 3; // 0x406258\n        unsigned char v17 = *(char *)v15; // 0x406258\n        char v18 = *(char *)v14; // 0x406258\n        char v19 = v18; // 0x406258\n        bool v20 = false; // 0x406258\n        while (v17 == v18) {\n            // 0x40624b\n            v16--;\n            v14 += v13;\n            v15 += v13;\n            v19 = v17;\n            v20 = true;\n            if (v16 == 0) {\n                // break -> \n                break;\n            }\n            v17 = *(char *)v15;\n            v18 = *(char *)v14;\n            v19 = v18;\n            v20 = false;\n        }\n        unsigned char v21 = v19;\n        if ((v17 >= v21 && !v20) != v17 < v21) {\n            goto lab_0x4062c0;\n        } else {\n            if (v6 != 0) {\n                goto lab_0x406330;\n            } else {\n                // 0x40626b\n                v11 = v2;\n                v7 = v2;\n                v9 = 1;\n                if ((int32_t)a3 >= 0) {\n                    goto lab_0x4062d2;\n                } else {\n                    // 0x406273\n                    v8 = v5;\n                    v10 = 1;\n                    if ((v5 & 512) == 0) {\n                        goto lab_0x40635e;\n                    } else {\n                        int64_t v22 = a1 + 96; // 0x406280\n                        int64_t v23 = function_409f80(v22); // 0x40628c\n                        v8 = v5;\n                        v10 = v23 & 0xffffffff;\n                        if ((char)v23 != 0) {\n                            goto lab_0x40635e;\n                        } else {\n                            int64_t v24 = function_409fd0(v22); // 0x4062a4\n                            if ((int32_t)v24 < 0) {\n                                // 0x4063a8\n                                v8 = (int64_t)*v3;\n                                v10 = 1;\n                                goto lab_0x40635e;\n                            } else {\n                                // 0x4062b4\n                                v11 = v24 & 0xffffffff;\n                                v7 = v24;\n                                v9 = 1;\n                                goto lab_0x4062d2;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4062c0:\n    if (v6 != 0) {\n        goto lab_0x406330;\n    } else {\n        // 0x4062c4\n        v11 = v2;\n        v7 = v2;\n        v9 = 0;\n        v8 = v5;\n        v10 = 0;\n        if ((int32_t)a3 < 0) {\n            goto lab_0x40635e;\n        } else {\n            goto lab_0x4062d2;\n        }\n    }\n  lab_0x406330:\n    // 0x406330\n    if ((v5 & 512) == 0) {\n        // 0x40633f\n        return 0;\n    }\n    int32_t fd = a3; // 0x406339\n    if (fd >= 0) {\n        // 0x406398\n        close(fd);\n        // 0x40633f\n        return 0;\n    }\n    // 0x40633f\n    return 0;\n  lab_0x40635e:;\n    int64_t v25 = function_4061d0(*(int32_t *)(a1 + 44), v8, v1); // 0x406368\n    v11 = v2;\n    v7 = v25;\n    v9 = v10;\n    if ((int32_t)v25 < 0) {\n        // 0x40633f\n        return 0xffffffff;\n    }\n    goto lab_0x4062d2;\n  lab_0x4062d2:;\n    int32_t fd2 = v7; // 0x4062d7\n    int64_t v26; // bp-200, 0x406220\n    uint32_t v27 = __fxstat(1, fd2, (struct stat *)&v26); // 0x4062df\n    int64_t v28 = 0xffffffff; // 0x4062e8\n    if (v27 != 0) {\n        goto lab_0x406313;\n    } else {\n        // 0x4062ea\n        if (*(int64_t *)(a2 + 120) != v26) {\n            goto lab_0x406303;\n        } else {\n            // 0x4062f5\n            int64_t v29; // 0x406220\n            if (*(int64_t *)(a2 + 128) == v29) {\n                // 0x406380\n                if ((*(char *)(a1 + 73) & 2) != 0) {\n                    // 0x4063b8\n                    function_406030(a1, v7 & 0xffffffff, v9 % 256 ^ 1);\n                    // 0x40633f\n                    return (int64_t)v27 & 0xffffffff;\n                }\n                // 0x406387\n                v28 = fchdir(fd2);\n                goto lab_0x406313;\n            } else {\n                goto lab_0x406303;\n            }\n        }\n    }\n  lab_0x406313:\n    // 0x406313\n    if ((int32_t)v11 < 0) {\n        int32_t * v30 = __errno_location(); // 0x406317\n        close(fd2);\n    }\n    // 0x40633f\n    return v28 & 0xffffffff;\n  lab_0x406303:\n    // 0x406303\n    *__errno_location() = 2;\n    v28 = 0xffffffff;\n    goto lab_0x406313;\n}\n"
        },
        {
            "funcName": "function_4063f0",
            "funcStartAddr": "4063f0",
            "funcEndAddr": "40649f",
            "decompiledFuncCode": "int64_t function_4063f0(int32_t a1, int64_t a2, int64_t a3) {\n    if ((a1 & 258) == 0) {\n        int64_t result = function_408be0(a2, a3 + 120); // 0x406478\n        if ((char)result == 0) {\n            // 0x406461\n            return 1;\n        }\n        // 0x406481\n        *(int64_t *)a3 = a3;\n        *(int16_t *)(a3 + 112) = 2;\n        return result;\n    }\n    int64_t * mem = malloc(24); // 0x406407\n    if (mem == NULL) {\n        // 0x406461\n        return 0;\n    }\n    int64_t v1 = (int64_t)mem; // 0x406407\n    *(int64_t *)(v1 + 16) = a3;\n    *mem = *(int64_t *)(a3 + 120);\n    *(int64_t *)(v1 + 8) = *(int64_t *)(a3 + 128);\n    int64_t v2 = function_409d40(a2, v1); // 0x406436\n    if (v2 == v1) {\n        // 0x406461\n        return 1;\n    }\n    // 0x406443\n    free(mem);\n    int64_t result2 = 0; // 0x40644e\n    if (v2 != 0) {\n        // 0x406450\n        *(int16_t *)(a3 + 112) = 2;\n        *(int64_t *)a3 = *(int64_t *)(v2 + 16);\n        result2 = 1;\n    }\n    // 0x406461\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4064a0",
            "funcStartAddr": "4064a0",
            "funcEndAddr": "406536",
            "decompiledFuncCode": "int64_t function_4064a0(int32_t a1, int64_t a2, int64_t a3) {\n    if ((a1 & 258) != 0) {\n        // 0x4064e0\n        free((int64_t *)function_409d80(a2));\n        return &g62;\n    }\n    int64_t result = *(int64_t *)(a3 + 8); // 0x4064af\n    if (result == 0) {\n        // 0x4064d9\n        return 0;\n    }\n    // 0x4064b8\n    if (*(int64_t *)(result + 88) < 0) {\n        // 0x4064d9\n        return result;\n    }\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40651c\n    int64_t result2 = result; // 0x406520\n    if (*v1 == *(int64_t *)(a3 + 120)) {\n        // 0x406522\n        result2 = *(int64_t *)(result + 128);\n        *v1 = *(int64_t *)(result + 120);\n        *(int64_t *)a2 = result2;\n    }\n    // 0x4064d9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406540",
            "funcStartAddr": "406540",
            "funcEndAddr": "406ef3",
            "decompiledFuncCode": "int64_t function_406540(int64_t a1, int64_t a2) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // 0x406554\n    int64_t * dirp2 = (int64_t *)(a1 + 24); // 0x406558\n    int64_t dirp = *dirp2; // 0x406558\n    int64_t v2; // 0x406540\n    int32_t * v3; // 0x406540\n    int64_t v4; // 0x406540\n    int64_t v5; // 0x406540\n    int64_t v6; // 0x406540\n    int64_t v7; // 0x406540\n    int64_t v8; // 0x406540\n    int64_t v9; // 0x406540\n    char v10; // 0x406540\n    int64_t v11; // 0x406540\n    int64_t v12; // 0x406540\n    int64_t v13; // 0x406976\n    int64_t v14; // 0x406540\n    int64_t v15; // 0x4069b5\n    int32_t * v16; // 0x406540\n    int64_t v17; // 0x4069c2\n    int32_t v18; // 0x4069c6\n    if (dirp == 0) {\n        // 0x406930\n        v14 = a1 + 72;\n        v16 = (int32_t *)v14;\n        uint32_t v19 = *v16; // 0x406930\n        uint64_t v20 = (int64_t)v19; // 0x406930\n        v5 = 0;\n        if ((v19 & 16) != 0) {\n            // 0x40693b\n            v5 = 0x20000;\n            if (v20 % 2 != 0) {\n                // 0x406b10\n                v5 = 0x20000 * (int64_t)(*(int64_t *)(a1 + 88) != 0);\n            }\n        }\n        int64_t v21 = *(int64_t *)(a1 + 48); // 0x40694f\n        int64_t v22 = 0xffffff9c; // 0x406968\n        if ((v20 & 516) == 512) {\n            // 0x40696a\n            v22 = (int64_t)*(int32_t *)(a1 + 44);\n        }\n        int64_t v23 = 128 * v20 & 0x40000 | v5 & 0xfff60000 | 0x90900; // 0x40696e\n        v13 = function_40a590(v22, v21, (int32_t)v23, v5);\n        int32_t fd = v13; // 0x40697d\n        if (fd < 0) {\n            goto lab_0x406cb2;\n        } else {\n            struct __dirstream * v24 = fdopendir(fd); // 0x406987\n            if (v24 == NULL) {\n                int32_t * v25 = __errno_location(); // 0x406c9c\n                close(fd);\n                goto lab_0x406cb2;\n            } else {\n                int16_t * v26 = (int16_t *)(a1 + 112); // 0x406995\n                *dirp2 = (int64_t)v24;\n                if (*v26 == 11) {\n                    // 0x406d4c\n                    *v26 = (int16_t)function_405ad0(a1, a1, 0);\n                    v8 = a1;\n                } else {\n                    int32_t v27 = *v16; // 0x4069a5\n                    v8 = v21;\n                    if ((v27 & 256) != 0) {\n                        int64_t v28 = a1 + 88; // 0x406d00\n                        function_4064a0(v27, v28, a1);\n                        function_405ad0(a1, a1, 0);\n                        int64_t v29 = function_4063f0(*v16, v28, a1); // 0x406d26\n                        v8 = v28;\n                        if ((char)v29 == 0) {\n                            // 0x406d33\n                            *__errno_location() = 12;\n                          lab_0x406af2:\n                            // 0x406af2\n                            return 0;\n                        }\n                    }\n                }\n                // 0x4069b5\n                v15 = a1 + 64;\n                v17 = *(int64_t *)v15 == 0 ? 0x186a0 : -1;\n                v18 = v1;\n                if (v18 == 2) {\n                    goto lab_0x406cf0;\n                } else {\n                    // 0x4069d6\n                    if ((*v16 & 56) == 24) {\n                        // 0x406b22\n                    } else {\n                        // 0x4069e6\n                        goto lab_0x4069f5;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x40656a\n        if (dirfd((struct __dirstream *)dirp) < 0) {\n            // 0x406dcd\n            closedir((struct __dirstream *)*dirp2);\n            *dirp2 = 0;\n            if ((int32_t)v1 != 3) {\n                // 0x406af2\n                return 0;\n            }\n            goto lab_0x406de9;\n        } else {\n            int64_t v30 = a1 + 72;\n            int32_t * v31 = (int32_t *)v30;\n            v3 = v31;\n            v2 = v30;\n            v11 = -1;\n            v7 = a2;\n            if (*(int64_t *)(a1 + 64) == 0) {\n                // 0x406cd8\n                v4 = v30;\n                v12 = 0x186a0;\n                v10 = 1;\n                v9 = a2;\n                v6 = (int64_t)*v31;\n                goto lab_0x406594;\n            } else {\n                goto lab_0x40658b;\n            }\n        }\n    }\n  lab_0x406aa0_2:;\n    // 0x406aa0\n    int64_t v32; // 0x4066c4\n    free((int64_t *)v32);\n    int64_t v33; // 0x406540\n    function_405e10(v33);\n    closedir((struct __dirstream *)*dirp2);\n    *dirp2 = 0;\n    *(int16_t *)(a1 + 112) = 7;\n    int32_t * v34; // 0x406540\n    *v34 = *v34 | 0x4000;\n    return 0;\n  lab_0x40681c_2:;\n    // 0x40681c\n    int64_t v35; // 0x406540\n    int64_t v36 = v35; // 0x406829\n    int64_t v37; // 0x406540\n    int64_t v38 = v37; // 0x406829\n    int64_t v39; // 0x406540\n    int64_t v40 = v39; // 0x406829\n    char * v41; // 0x406540\n    char * v42 = v41; // 0x406829\n    int64_t v43 = v35; // 0x406829\n    int64_t result2 = v37; // 0x406829\n    int64_t v44 = v39; // 0x406829\n    char v45; // 0x406540\n    if (v45 == 0) {\n        goto lab_0x406b71;\n    } else {\n        goto lab_0x40682f;\n    }\n  lab_0x4066ac:;\n    // 0x4066ac\n    char * str; // 0x406540\n    uint64_t len = (int64_t)strlen(str); // 0x4066b3\n    int64_t v46; // 0x406540\n    v32 = function_405d80(a1, v46, len);\n    if (v32 == 0) {\n        goto lab_0x406aa0_2;\n    }\n    // 0x4066d5\n    int64_t v47; // 0x406540\n    int64_t v48 = v47; // 0x4066da\n    char v49; // 0x406540\n    char v50 = v49; // 0x4066da\n    int64_t v51; // 0x406540\n    int64_t v52 = v51; // 0x4066da\n    int64_t v53 = a1; // 0x4066da\n    int64_t v54; // 0x406540\n    int64_t v55; // 0x406540\n    int64_t v56; // 0x4065e2\n    int64_t * v57; // 0x4065e2\n    int64_t v58; // 0x406540\n    int64_t * v59; // 0x406540\n    if (v51 <= len) {\n        char v60 = function_406100(v58, v56, v55 + 2 + len);\n        if (v60 == 0) {\n            goto lab_0x406aa0_2;\n        }\n        int64_t v61 = *v59; // 0x4067a0\n        char v62 = v49; // 0x4067a9\n        int64_t v63 = v47; // 0x4067a9\n        if (v61 != *v59) {\n            // 0x4067af\n            v63 = (*v41 & 4) == 0 ? v47 : v61 + v54;\n            v62 = v60;\n        }\n        // 0x4067c3\n        v48 = v63;\n        v50 = v62;\n        v52 = *v57 - v54;\n        v53 = v58;\n    }\n    uint64_t v64 = v54 + len; // 0x4066e3\n    int32_t * v65; // 0x40667a\n    if (v64 < len) {\n        // 0x406ea0\n        free((int64_t *)v32);\n        function_405e10(v33);\n        closedir((struct __dirstream *)*dirp2);\n        *dirp2 = 0;\n        *(int16_t *)(a1 + 112) = 7;\n        *v34 = *v34 | 0x4000;\n        *v65 = 36;\n        goto lab_0x406af2;\n    }\n    int64_t v66 = v52;\n    v45 = v50;\n    v35 = v48;\n    int64_t v67 = v32 + 264; // 0x4066f3\n    int64_t * v68; // 0x4065f7\n    *(int64_t *)(v32 + 88) = *v68 + 1;\n    *(int64_t *)(v32 + 72) = v64;\n    *(int64_t *)(v32 + 8) = v53;\n    struct dirent * v69; // 0x40668b\n    *(int64_t *)(v32 + 128) = *(int64_t *)v69;\n    int32_t v70 = *v34; // 0x406713\n    int32_t v71; // 0x406540\n    if ((v70 & 4) != 0) {\n        // 0x4067e0\n        *(int64_t *)(v32 + 48) = *(int64_t *)(v32 + 56);\n        int64_t v72 = *(int64_t *)(v32 + 96); // 0x4067ed\n        memmove((int64_t *)v35, (int64_t *)v67, (int32_t)v72 + 1);\n        v71 = *v34;\n    } else {\n        // 0x40671e\n        *(int64_t *)(v32 + 48) = v67;\n        v71 = v70;\n    }\n    int64_t v73 = v71;\n    int64_t v74; // 0x406540\n    int64_t v75; // 0x406540\n    int64_t v76; // 0x406540\n    int64_t v77; // 0x406540\n    int64_t v78; // 0x40673c\n    int64_t v79; // 0x40673c\n    int64_t v80; // 0x406540\n    int64_t v81; // 0x40668b\n    if (*(int64_t *)v80 != 0 == (v73 & 1024) == 0) {\n        // 0x406908\n        *(int16_t *)(v32 + 112) = (int16_t)function_405ad0(a1, v32, 0);\n        v76 = v32;\n        goto lab_0x406637;\n    } else {\n        unsigned char v82 = *(char *)(v81 + 18); // 0x406732\n        int64_t v83 = v82; // 0x40673a\n        v78 = v83 + 0xffffffff;\n        v79 = v78 & 0xffffffff;\n        v77 = v83;\n        if ((v73 & 24) == 24) {\n            unsigned char v84 = v82 & -5;\n            v77 = 0;\n            if (v84 == 0) {\n                goto lab_0x406748;\n            } else {\n                int64_t v85 = v84; // 0x4068d0\n                *(int16_t *)(v32 + 112) = 11;\n                if ((int32_t)v78 < 12) {\n                    int32_t v86 = *(int32_t *)(4 * v79 + (int64_t)&g9); // 0x406a88\n                    *(int32_t *)(v32 + 144) = v86;\n                    v74 = 1;\n                    v75 = v85;\n                } else {\n                    // 0x4068ef\n                    *(int32_t *)(v32 + 144) = 0;\n                    v74 = 1;\n                    v75 = v85;\n                }\n                goto lab_0x406630;\n            }\n        } else {\n            goto lab_0x406748;\n        }\n    }\n  lab_0x406637:;\n    int64_t v87 = v76;\n    *(int64_t *)(v32 + 16) = 0;\n    int64_t v88; // 0x406540\n    v39 = v88 + 1;\n    int64_t v89; // 0x406540\n    int64_t v90; // 0x406540\n    int64_t v91; // 0x406540\n    int64_t v92; // 0x406540\n    int64_t v93; // 0x406540\n    int64_t v94; // 0x406540\n    char v95; // 0x406540\n    int64_t v96; // 0x406540\n    if (v33 == 0) {\n        // 0x406808\n        v96 = v35;\n        v95 = v45;\n        v92 = v66;\n        v93 = v32;\n        v90 = v39;\n        v91 = v87;\n        v89 = v32;\n        v37 = v32;\n        if (v39 >= v12) {\n            goto lab_0x40681c_2;\n        }\n    } else {\n        // 0x40664b\n        *(int64_t *)(v94 + 16) = v32;\n        v96 = v35;\n        v95 = v45;\n        v92 = v66;\n        v93 = v33;\n        v90 = v39;\n        v91 = v87;\n        v89 = v32;\n        v37 = v33;\n        if (v39 >= v12) {\n            goto lab_0x40681c_2;\n        }\n    }\n    goto lab_0x406663;\n  lab_0x406748:\n    // 0x406748\n    *(int16_t *)(v32 + 112) = 11;\n    if ((int32_t)v78 < 12) {\n        int32_t v166 = *(int32_t *)(4 * v79 + (int64_t)&g9); // 0x40675b\n        *(int32_t *)(v32 + 144) = v166;\n        v74 = 2;\n        int64_t v167; // 0x406540\n        v75 = v167;\n    } else {\n        // 0x406620\n        *(int32_t *)(v32 + 144) = 0;\n        v74 = 2;\n        v75 = v77;\n    }\n    goto lab_0x406630;\n  lab_0x406663:;\n    int64_t v97 = *dirp2; // 0x40666d\n    int64_t dirp3 = v97; // 0x406674\n    int64_t v98 = v91; // 0x406674\n    int64_t v99 = v90; // 0x406674\n    int64_t v100 = v93; // 0x406674\n    int64_t v101 = v89; // 0x406674\n    int64_t v102 = v92; // 0x406674\n    char v103 = v95; // 0x406674\n    int64_t v104 = v96; // 0x406674\n    int64_t v105 = v96; // 0x406674\n    char v106 = v95; // 0x406674\n    int64_t v107 = v93; // 0x406674\n    int64_t v108 = v90; // 0x406674\n    if (v97 == 0) {\n        goto lab_0x406b66;\n    }\n    goto lab_0x40667a;\n  lab_0x406630:\n    // 0x406630\n    *(int64_t *)(v32 + 168) = v74;\n    v76 = v75;\n    goto lab_0x406637;\n  lab_0x406cb2:\n    // 0x406cb2\n    *dirp2 = 0;\n    if ((int32_t)v1 != 3) {\n        // 0x406af2\n        return 0;\n    }\n    goto lab_0x406de9;\n  lab_0x406de9:\n    // 0x406de9\n    *(int16_t *)(a1 + 112) = 4;\n    *(int32_t *)(a1 + 64) = *__errno_location();\n    // 0x406af2\n    return 0;\n  lab_0x40658b:\n    // 0x40658b\n    v4 = v2;\n    v12 = v11;\n    v10 = 1;\n    v9 = v7;\n    v6 = (int64_t)*v3;\n    goto lab_0x406594;\n  lab_0x406cf0:\n    // 0x406cf0\n    v4 = v14;\n    v12 = v17;\n    v10 = 0;\n    v9 = v8;\n    v6 = (int64_t)*v16;\n    goto lab_0x406594;\n  lab_0x406594:;\n    int64_t v111 = *(int64_t *)v4; // 0x406594\n    char v112 = *(char *)(v111 - 1 + *(int64_t *)(a1 + 56)); // 0x4065aa\n    v55 = v111 + (int64_t)(v112 == 47);\n    int64_t v113 = 0; // 0x4065cb\n    if ((v6 & 4) != 0) {\n        int64_t v114 = *(int64_t *)(a1 + 32) + v55; // 0x4065d2\n        *(char *)v114 = 47;\n        v113 = v114 + 1;\n    }\n    // 0x4065e2\n    v54 = v111 + (int64_t)(v112 != 47);\n    v56 = a1 + 48;\n    v57 = (int64_t *)v56;\n    v68 = (int64_t *)(a1 + 88);\n    int64_t v115 = *dirp2; // 0x40666d\n    if (v115 == 0) {\n        // 0x4065e2\n        v42 = (char *)v4;\n        v43 = v113;\n        result2 = 0;\n        v44 = 0;\n        goto lab_0x406b71;\n    } else {\n        // 0x40667a\n        v41 = (char *)v4;\n        v58 = a1 + 32;\n        v59 = (int64_t *)v58;\n        v34 = (int32_t *)v4;\n        v80 = a1 + 64;\n        dirp3 = v115;\n        v98 = v9;\n        v99 = 0;\n        v100 = 0;\n        v101 = 0;\n        v102 = *v57 - v54;\n        v103 = 0;\n        v104 = v113;\n        while (true) {\n          lab_0x40667a:\n            // 0x40667a\n            v47 = v104;\n            v49 = v103;\n            v33 = v100;\n            v88 = v99;\n            int64_t v109 = v98;\n            v65 = __errno_location();\n            *v65 = 0;\n            v69 = readdir((struct __dirstream *)dirp3);\n            if (v69 == NULL) {\n                // break -> 0x406c50\n                break;\n            }\n            // 0x40669c\n            v51 = v102;\n            v94 = v101;\n            v81 = (int64_t)v69;\n            v46 = v81 + 19;\n            str = (char *)v46;\n            if ((*v41 & 32) != 0) {\n                goto lab_0x4066ac;\n            } else {\n                // 0x4066a2\n                if (*str == 46) {\n                    int64_t v110 = v81 + 20; // 0x4068b0\n                    v96 = v47;\n                    v95 = v49;\n                    v92 = v51;\n                    v93 = v33;\n                    v90 = v88;\n                    v91 = v109;\n                    v89 = v94;\n                    if (*(char *)v110 == 0) {\n                        goto lab_0x406663;\n                    } else {\n                        // 0x4068b6\n                        v96 = v47;\n                        v95 = v49;\n                        v92 = v51;\n                        v93 = v33;\n                        v90 = v88;\n                        v91 = v109;\n                        v89 = v94;\n                        if (*(int16_t *)v110 != 46) {\n                            goto lab_0x4066ac;\n                        } else {\n                            goto lab_0x406663;\n                        }\n                    }\n                } else {\n                    goto lab_0x4066ac;\n                }\n            }\n        }\n        int32_t v116 = *v65; // 0x406c50\n        if (v116 != 0) {\n            // 0x406c60\n            *(int32_t *)v80 = v116;\n            *(int16_t *)(a1 + 112) = (v88 | dirp) == 0 ? 4 : 7;\n        }\n        int64_t dirp4 = *dirp2; // 0x406c7d\n        v105 = v47;\n        v106 = v49;\n        v107 = v33;\n        v108 = v88;\n        if (dirp4 != 0) {\n            // 0x406c8a\n            closedir((struct __dirstream *)dirp4);\n            *dirp2 = 0;\n            v105 = v47;\n            v106 = v49;\n            v107 = v33;\n            v108 = v88;\n        }\n      lab_0x406b66:\n        // 0x406b66\n        v36 = v105;\n        v38 = v107;\n        v40 = v108;\n        v42 = v41;\n        v43 = v105;\n        result2 = v107;\n        v44 = v108;\n        if (v106 != 0) {\n            goto lab_0x40682f;\n        } else {\n            goto lab_0x406b71;\n        }\n    }\n  lab_0x4069f5:;\n    int64_t v117 = v13 & 0xffffffff; // 0x40697b\n    int64_t v118 = v18 == 3;\n    char v119 = 1;\n    int64_t v120 = v117; // 0x4069fa\n    int16_t * v121; // 0x406540\n    int16_t v122; // 0x406540\n    int64_t v123; // 0x406540\n    int64_t v124; // 0x406540\n    int64_t v125; // 0x406540\n    int64_t v126; // 0x406540\n    int64_t v127; // 0x406540\n    if ((*(char *)(a1 + 73) & 2) != 0) {\n        int64_t v128 = function_40a6b0(v117, 1030, 3, v5); // 0x406d71\n        int64_t v129 = v128 & 0xffffffff; // 0x406d76\n        v120 = v129;\n        if ((int32_t)v128 >= 0) {\n            goto lab_0x406a00;\n        } else {\n            int16_t * v130 = (int16_t *)(a1 + 114);\n            int64_t dirp5 = *dirp2; // 0x406d85\n            int16_t v131 = *v130 | 1;\n            v121 = v130;\n            v123 = v129;\n            v122 = v131;\n            v126 = 1030;\n            v124 = dirp5;\n            if (v119 != 0 == (v118 != 0)) {\n                goto lab_0x406a2d;\n            } else {\n                // 0x406d9a\n                *v130 = v131;\n                closedir((struct __dirstream *)dirp5);\n                v127 = 1030;\n                v125 = (int64_t)*v16;\n                goto lab_0x406a6f;\n            }\n        }\n    } else {\n        goto lab_0x406a00;\n    }\n  lab_0x406b71:\n    // 0x406b71\n    if ((*v42 & 4) != 0) {\n        int64_t v132 = *v57; // 0x406b7d\n        *(char *)(v43 + (int64_t)(v44 == 0 | v132 == v54)) = 0;\n    }\n    // 0x406b96\n    if (dirp != 0 || v10 == 0) {\n        goto lab_0x406c08;\n    } else {\n        // 0x406ba5\n        if ((int32_t)v1 == 1 || v44 == 0) {\n            // 0x406be8\n            int64_t v133; // 0x406540\n            if (*v68 != 0) {\n                int64_t v134 = function_406220(a1, *(int64_t *)(a1 + 8), 0xffffffff, (int32_t)\"..\"); // 0x406dbe\n                v133 = v134;\n            } else {\n                // 0x406bf3\n                v133 = function_4060a0(a1);\n            }\n            // 0x406c00\n            if ((int32_t)v133 != 0) {\n                // 0x406e04\n                *(int16_t *)(a1 + 112) = 7;\n                int32_t * v135 = (int32_t *)v4; // 0x406e13\n                *v135 = *v135 | 0x4000;\n                function_405e10(result2);\n                // 0x406af2\n                return 0;\n            }\n            goto lab_0x406c08;\n        } else {\n            goto lab_0x406bb1;\n        }\n    }\n  lab_0x40682f:;\n    int64_t v136 = *(int64_t *)(a1 + 8); // 0x40682f\n    int64_t v137 = *v59; // 0x406833\n    if (v136 != 0) {\n        int64_t * v138 = (int64_t *)(v136 + 48); // 0x406840\n        int64_t v139 = *v138; // 0x406840\n        int64_t * v140 = (int64_t *)(v136 + 56);\n        if (v139 != v136 + 264) {\n            // 0x406850\n            *v138 = v139 + v137 - *v140;\n        }\n        // 0x40685b\n        *v140 = v137;\n        int64_t v141 = *(int64_t *)(v136 + 16); // 0x40685f\n        int64_t v142 = v141; // 0x406866\n        while (v141 != 0) {\n            // 0x406840\n            v138 = (int64_t *)(v142 + 48);\n            v139 = *v138;\n            v140 = (int64_t *)(v142 + 56);\n            if (v139 != v142 + 264) {\n                // 0x406850\n                *v138 = v139 + v137 - *v140;\n            }\n            // 0x40685b\n            *v140 = v137;\n            v141 = *(int64_t *)(v142 + 16);\n            v142 = v141;\n        }\n    }\n    // 0x406868\n    v42 = v41;\n    v43 = v36;\n    result2 = v38;\n    v44 = v40;\n    if (*(int64_t *)(v38 + 88) >= 0) {\n        int64_t * v143 = (int64_t *)(v38 + 48); // 0x40687e\n        int64_t v144 = *v143; // 0x40687e\n        int64_t * v145 = (int64_t *)(v38 + 56);\n        if (v144 != v38 + 264) {\n            // 0x40688e\n            *v143 = v144 + v137 - *v145;\n        }\n        int64_t v146 = *(int64_t *)(v38 + 16); // 0x406899\n        *v145 = v137;\n        int64_t v147 = v146; // 0x4068a4\n        if (v146 == 0) {\n            // 0x4068a6\n            v147 = *(int64_t *)(v38 + 8);\n        }\n        // 0x406870\n        v42 = v41;\n        v43 = v36;\n        result2 = v38;\n        v44 = v40;\n        while (*(int64_t *)(v147 + 88) >= 0) {\n            int64_t v148 = v147;\n            v143 = (int64_t *)(v148 + 48);\n            v144 = *v143;\n            v145 = (int64_t *)(v148 + 56);\n            if (v144 != v148 + 264) {\n                // 0x40688e\n                *v143 = v144 + v137 - *v145;\n            }\n            // 0x406899\n            v146 = *(int64_t *)(v148 + 16);\n            *v145 = v137;\n            v147 = v146;\n            if (v146 == 0) {\n                // 0x4068a6\n                v147 = *(int64_t *)(v148 + 8);\n            }\n            // 0x406870\n            v42 = v41;\n            v43 = v36;\n            result2 = v38;\n            v44 = v40;\n        }\n    }\n    goto lab_0x406b71;\n  lab_0x406a00:;\n    int64_t v149 = function_406220(a1, a1, v120, 0); // 0x406a0a\n    v3 = v16;\n    v2 = v14;\n    v11 = v17;\n    v7 = a1;\n    int16_t * v150; // 0x406540\n    int16_t v151; // 0x406540\n    int64_t v152; // 0x406540\n    int64_t dirp6; // 0x406540\n    int64_t v153; // 0x406540\n    if ((int32_t)v149 == 0) {\n        goto lab_0x40658b;\n    } else {\n        int16_t * v154 = (int16_t *)(a1 + 114);\n        int64_t v155 = *dirp2; // 0x406a1c\n        int16_t v156 = *v154 | 1;\n        v121 = v154;\n        v123 = v120;\n        v122 = v156;\n        v126 = a1;\n        v124 = v155;\n        v150 = v154;\n        v152 = v120;\n        v151 = v156;\n        v153 = a1;\n        dirp6 = v155;\n        if (v119 == 0 || v118 == 0) {\n            goto lab_0x406a42;\n        } else {\n            goto lab_0x406a2d;\n        }\n    }\n  lab_0x406c08:\n    // 0x406c08\n    if (v44 == 0) {\n        if ((int32_t)v1 != 3) {\n            // 0x406c18\n            function_405e10(result2);\n            // 0x406af2\n            return 0;\n        }\n        int16_t * v157 = (int16_t *)(a1 + 112); // 0x406e78\n        switch (*v157) {\n            case 4: {\n            }\n            case 7: {\n                // 0x406c18\n                function_405e10(result2);\n                // 0x406af2\n                return 0;\n            }\n        }\n        // 0x406e91\n        *v157 = 6;\n        // 0x406c18\n        function_405e10(result2);\n        // 0x406af2\n        return 0;\n    }\n    goto lab_0x406bb1;\n  lab_0x406bb1:;\n    int64_t * v158 = (int64_t *)(a1 + 64); // 0x406bb1\n    int64_t v159 = *v158; // 0x406bb1\n    int64_t v160 = v159; // 0x406bbc\n    if (v44 >= 0x2711) {\n        if (v159 != 0) {\n            // 0x406bc7\n            uint64_t v161; // 0x406540\n            int64_t v162; // 0x406540\n            return function_405c80(a1, v162, v161);\n        }\n        // 0x406e2e\n        int64_t v163; // 0x406540\n        switch (function_405ea0(a1, v163)) {\n            case 0x1021994: {\n            }\n            case 0x6969: {\n                // 0x406c30\n                v160 = *v158;\n                // break -> 0x406c38\n                break;\n            }\n            default: {\n                // 0x406e4e\n                *v158 = 0x405aa0;\n                int64_t result = function_405c80(a1, result2, v44); // 0x406e61\n                *v158 = 0;\n                // 0x406af2\n                return result;\n            }\n        }\n    }\n    // 0x406c38\n    if (v44 == 1 || v160 == 0) {\n        // 0x406af2\n        return result2;\n    }\n    // 0x406bc7\n    return function_405c80(a1, result2, v44);\n  lab_0x406a2d:\n    // 0x406a2d\n    *(int32_t *)v15 = *__errno_location();\n    v150 = v121;\n    v152 = v123;\n    v151 = v122;\n    v153 = v126;\n    dirp6 = v124;\n    goto lab_0x406a42;\n  lab_0x406a42:\n    // 0x406a42\n    *v150 = v151;\n    closedir((struct __dirstream *)dirp6);\n    uint32_t v164 = *v16; // 0x406a4c\n    int64_t v165 = v164; // 0x406a4c\n    *dirp2 = 0;\n    v127 = v153;\n    v125 = v165;\n    if ((v164 & 512) != 0) {\n        uint32_t fd2 = (int32_t)v152; // 0x406a60\n        v127 = v153;\n        v125 = v165;\n        if (fd2 >= 0) {\n            // 0x406a64\n            close(fd2);\n            v127 = v153;\n            v125 = (int64_t)*v16;\n        }\n    }\n    goto lab_0x406a6f;\n  lab_0x406a6f:\n    // 0x406a6f\n    *dirp2 = 0;\n    v4 = v14;\n    v12 = v17;\n    v10 = 0;\n    v9 = v127;\n    v6 = v125;\n    goto lab_0x406594;\n}\n"
        },
        {
            "funcName": "fts_open",
            "funcStartAddr": "406f00",
            "funcEndAddr": "407299",
            "decompiledFuncCode": "int64_t fts_open(int64_t a1, uint32_t a2, int64_t a3) {\n    int64_t v1 = a2;\n    if ((v1 & 18) == 0 || a2 >= 0x2000 || (v1 & 516) == 516) {\n        // 0x4071a0\n        *__errno_location() = 22;\n        // 0x40718d\n        return 0;\n    }\n    int64_t * mem = calloc(128, 1); // 0x406f48\n    int64_t result = (int64_t)mem; // 0x406f48\n    if (mem == NULL) {\n        // 0x40718d\n        return result;\n    }\n    // 0x406f59\n    *(int64_t *)(result + 64) = a3;\n    if ((v1 & 2) != 0) {\n        // 0x4071e0\n        *(int32_t *)(result + 72) = a2 & -517 | 4;\n    } else {\n        // 0x406f67\n        *(int32_t *)(result + 72) = a2;\n    }\n    int32_t * v2 = (int32_t *)(result + 44); // 0x406f6e\n    *v2 = -100;\n    int64_t v3 = a1; // 0x406f84\n    uint64_t v4 = 0;\n    uint64_t len = (int64_t)strlen((char *)128); // 0x406f88\n    int64_t v5 = v4 < len ? len : v4; // 0x406f90\n    v3 += 8;\n    int64_t str = *(int64_t *)v3; // 0x406f98\n    while (str != 0) {\n        // 0x406f88\n        v4 = v5;\n        len = (int64_t)strlen((char *)str);\n        v5 = v4 < len ? len : v4;\n        v3 += 8;\n        str = *(int64_t *)v3;\n    }\n    uint64_t v6 = v5 + 1; // 0x406fa0\n    int64_t v7 = result + 32; // 0x406fb9\n    char v8 = function_406100(v7, result + 48, v6 > 0x1000 ? v6 : 0x1000); // 0x406fc2\n    if (v8 == 0) {\n        // 0x4071cb\n        free(mem);\n        // 0x40718d\n        return 0;\n    }\n    int64_t v9; // 0x406f00\n    int64_t v10; // 0x406f00\n    int64_t v11; // 0x406f00\n    char v12; // 0x406f00\n    char * v13; // 0x406f00\n    char * v14; // 0x406fed\n    if (v7 == 0) {\n        // 0x4071f0\n        v14 = NULL;\n        v10 = 0;\n        v13 = NULL;\n        v9 = 0;\n        if (a3 != 0) {\n            goto lab_0x407013;\n        } else {\n            goto lab_0x40713c;\n        }\n    } else {\n        int64_t v15 = function_405d80(result, (int64_t)&g12, 0); // 0x406fe5\n        if (v15 == 0) {\n            goto lab_0x4071c2;\n        } else {\n            // 0x406ffb\n            v14 = (char *)v15;\n            *(int64_t *)(v15 + 88) = -1;\n            *(int64_t *)(v15 + 104) = -1;\n            v10 = result;\n            v12 = v8;\n            v11 = result;\n            if (a3 == 0) {\n                goto lab_0x407020;\n            } else {\n                goto lab_0x407013;\n            }\n        }\n    }\n  lab_0x4070b8:;\n    // 0x4070b8\n    int64_t v16; // 0x406f00\n    int64_t v17; // 0x407059\n    *(int64_t *)(v17 + 16) = v16;\n    int64_t v18; // 0x406f00\n    int64_t v19 = v18; // 0x4070bc\n    int64_t v20 = v17; // 0x4070bc\n    goto lab_0x4070bf;\n  lab_0x4070bf:;\n    int64_t v21 = v20;\n    int64_t v22; // 0x406f00\n    int64_t v23 = v22 + 1; // 0x4070bf\n    int64_t v24 = *(int64_t *)(8 * v23 + a1); // 0x4070c3\n    int64_t v25 = v19; // 0x4070cb\n    int64_t v26 = v23; // 0x4070cb\n    int64_t v27 = v21; // 0x4070cb\n    int64_t v28 = v24; // 0x4070cb\n    if (v24 == 0) {\n        // 0x407120\n        v13 = v14;\n        v9 = v21;\n        if (a3 == 0 || v23 < 2) {\n            goto lab_0x40713c;\n        } else {\n            // 0x40712b\n            v13 = v14;\n            v9 = function_405c80(result, v21, v23);\n            goto lab_0x40713c;\n        }\n    }\n    goto lab_0x4070cd;\n  lab_0x407250:\n    // 0x407250\n    *(int64_t *)(v18 + 16) = v17;\n    v19 = v17;\n    v20 = v16;\n    goto lab_0x4070bf;\n  lab_0x407013:\n    // 0x407013\n    v12 = (char)(*(int32_t *)(result + 72) / 1024) % 2;\n    v11 = v10;\n    goto lab_0x407020;\n  lab_0x40713c:;\n    int64_t v35 = function_405d80(result, (int64_t)&g12, 0); // 0x407146\n    *mem = v35;\n    char * v33 = v13; // 0x407151\n    int64_t v34 = v9; // 0x407151\n    if (v35 != 0) {\n        // 0x407153\n        *(int64_t *)(v35 + 16) = v9;\n        int32_t * v36 = (int32_t *)(result + 72); // 0x40715c\n        *(int16_t *)(v35 + 112) = 9;\n        v33 = v13;\n        v34 = v9;\n        if ((char)function_406170(*v36, result + 88) != 0) {\n            uint32_t v37 = *v36; // 0x407170\n            if ((v37 & 516) == 0) {\n                int64_t v38 = function_4061d0(*v2, (int64_t)v37, (int64_t)&g8); // 0x407280\n                int32_t v39 = v38; // 0x407285\n                *(int32_t *)(result + 40) = v39;\n                if (v39 < 0) {\n                    int32_t v40 = *v36; // 0x407290\n                    *v36 = v40 | 4;\n                }\n            }\n            // 0x40717f\n            function_409f60(result + 96, 0xffffffff);\n            // 0x40718d\n            return result;\n        }\n    }\n    goto lab_0x4071b0;\n  lab_0x4071c2:\n    // 0x4071c2\n    free((int64_t *)*(int64_t *)v7);\n    // 0x4071cb\n    free(mem);\n    // 0x40718d\n    return 0;\n  lab_0x407020:\n    // 0x407020\n    v13 = v14;\n    v9 = 0;\n    if (v11 == 0) {\n        goto lab_0x40713c;\n    } else {\n        // 0x4070cd\n        v25 = 0;\n        v26 = 0;\n        v27 = 0;\n        v28 = v11;\n        while (true) {\n          lab_0x4070cd:;\n            int64_t str2 = v28;\n            v16 = v27;\n            v22 = v26;\n            v18 = v25;\n            int32_t len2 = strlen((char *)str2); // 0x4070d0\n            int64_t v29 = len2; // 0x4070d0\n            int64_t v30 = v29; // 0x4070d9\n            if ((v1 & 0x1000) == 0 && len2 >= 3) {\n                // 0x4070ea\n                v30 = v29;\n                if (*(char *)(str2 - 1 + v29) == 47) {\n                    int64_t v31 = v29;\n                    v30 = v31;\n                    while (*(char *)(str2 - 2 + v31) == 47) {\n                        int64_t v32 = v31 - 1; // 0x40710c\n                        v30 = v32;\n                        if (v31 == 2) {\n                            // break -> 0x407050\n                            break;\n                        }\n                        v31 = v32;\n                        v30 = v31;\n                    }\n                }\n            }\n            // 0x407050\n            v17 = function_405d80(result, str2, v30);\n            v33 = v14;\n            v34 = v16;\n            if (v17 == 0) {\n                // break -> 0x4071b0\n                break;\n            }\n            // 0x40706a\n            *(int64_t *)(v17 + 88) = 0;\n            *(int64_t *)(v17 + 8) = (int64_t)v14;\n            *(int64_t *)(v17 + 48) = v17 + 264;\n            if (v12 == 0 || v16 == 0) {\n                // 0x407210\n                *(int16_t *)(v17 + 112) = (int16_t)function_405ad0(result, v17, 0);\n                if (a3 != 0) {\n                    goto lab_0x4070b8;\n                } else {\n                    // 0x40722b\n                    *(int64_t *)(v17 + 16) = 0;\n                    v19 = v17;\n                    v20 = v17;\n                    if (v16 != 0) {\n                        goto lab_0x407250;\n                    } else {\n                        goto lab_0x4070bf;\n                    }\n                }\n            } else {\n                // 0x40709a\n                *(int64_t *)(v17 + 168) = 2;\n                *(int16_t *)(v17 + 112) = 11;\n                if (a3 == 0) {\n                    // 0x407248\n                    *(int64_t *)(v17 + 16) = 0;\n                    goto lab_0x407250;\n                } else {\n                    goto lab_0x4070b8;\n                }\n            }\n        }\n        goto lab_0x4071b0;\n    }\n  lab_0x4071b0:\n    // 0x4071b0\n    function_405e10(v34);\n    free((int64_t *)v33);\n    goto lab_0x4071c2;\n}\n"
        },
        {
            "funcName": "fts_close",
            "funcStartAddr": "4072a0",
            "funcEndAddr": "407419",
            "decompiledFuncCode": "int64_t fts_close(int64_t a1) {\n    if (a1 != 0) {\n        int64_t v1 = a1; // 0x4072b4\n        int64_t v2 = a1; // 0x4072b4\n        if (*(int64_t *)(a1 + 88) >= 0) {\n            while (true) {\n                int64_t v3 = v1;\n                int64_t v4 = *(int64_t *)(v3 + 16); // 0x4072cf\n                int64_t v5; // 0x4072a0\n                if (v4 != 0) {\n                    // 0x4072c0\n                    free((int64_t *)v3);\n                    v5 = v4;\n                    v2 = v4;\n                    if (*(int64_t *)(v4 + 88) < 0) {\n                        // break -> 0x4072eb\n                        break;\n                    }\n                } else {\n                    int64_t v6 = *(int64_t *)(v3 + 8); // 0x4072d8\n                    free((int64_t *)v3);\n                    v5 = v6;\n                    v2 = v6;\n                    if (*(int64_t *)(v6 + 88) < 0) {\n                        // break -> 0x4072eb\n                        break;\n                    }\n                }\n                // 0x4072cf\n                v1 = v5;\n            }\n        }\n        // 0x4072eb\n        free((int64_t *)v2);\n    }\n    int64_t v7 = *(int64_t *)(a1 + 8); // 0x4072f3\n    if (v7 != 0) {\n        // 0x4072fc\n        function_405e10(v7);\n    }\n    // 0x407301\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    free((int64_t *)*(int64_t *)(a1 + 32));\n    int32_t * v8 = (int32_t *)(a1 + 72); // 0x407313\n    int32_t v9 = *v8; // 0x407313\n    int32_t * v10; // 0x4072a0\n    int32_t v11; // 0x4072a0\n    if ((v9 & 512) == 0) {\n        // 0x407370\n        v11 = 0;\n        if ((v9 & 4) != 0) {\n            goto lab_0x407324;\n        } else {\n            int32_t * fd = (int32_t *)(a1 + 40); // 0x407374\n            if (fchdir(*fd) != 0) {\n                int32_t * v12 = __errno_location(); // 0x4073d0\n                int32_t v13 = *v12; // 0x4073db\n                v11 = v13;\n                v10 = v12;\n                if (close(*fd) == 0 || v13 != 0) {\n                    goto lab_0x407324;\n                } else {\n                    goto lab_0x4073f2;\n                }\n            } else {\n                // 0x407380\n                v11 = 0;\n                if (close(*fd) == 0) {\n                    goto lab_0x407324;\n                } else {\n                    // 0x40738c\n                    v10 = __errno_location();\n                    goto lab_0x4073f2;\n                }\n            }\n        }\n    } else {\n        int32_t fd2 = *(int32_t *)(a1 + 44); // 0x40731b\n        v11 = 0;\n        if (fd2 >= 0) {\n            // 0x4073a0\n            v11 = 0;\n            if (close(fd2) != 0) {\n                // 0x4073ad\n                v11 = *__errno_location();\n            }\n        }\n        goto lab_0x407324;\n    }\n  lab_0x407324:\n    // 0x407324\n    function_405e60(a1 + 96);\n    int64_t v14 = *(int64_t *)(a1 + 80); // 0x40732d\n    if (v14 != 0) {\n        // 0x407336\n        function_4097e0(v14);\n    }\n    int64_t v15 = *(int64_t *)(a1 + 88); // 0x40733b\n    if ((*v8 & 258) == 0) {\n        // 0x4073c0\n        free((int64_t *)v15);\n    } else {\n        if (v15 != 0) {\n            // 0x40734d\n            function_4097e0(v15);\n        }\n    }\n    // 0x407352\n    free((int64_t *)a1);\n    int64_t result = v11; // 0x40735c\n    if (v11 != 0) {\n        // 0x407408\n        *__errno_location() = v11;\n        result = 0xffffffff;\n    }\n    // 0x407362\n    return result;\n  lab_0x4073f2:\n    // 0x4073f2\n    v11 = *v10;\n    goto lab_0x407324;\n}\n"
        },
        {
            "funcName": "fts_read",
            "funcStartAddr": "407420",
            "funcEndAddr": "407b79",
            "decompiledFuncCode": "int64_t fts_read(int64_t result) {\n    // 0x407420\n    if (result == 0) {\n        // 0x40754a\n        return 0;\n    }\n    int32_t * v1 = (int32_t *)(result + 72); // 0x407434\n    uint32_t v2 = *v1; // 0x407434\n    if ((v2 & 0x4000) != 0) {\n        // 0x40754a\n        return 0;\n    }\n    int16_t * v3 = (int16_t *)(result + 116); // 0x407440\n    int16_t v4 = *v3; // 0x407440\n    *v3 = 3;\n    if (v4 == 1) {\n        // 0x407810\n        *(int16_t *)(result + 112) = (int16_t)function_405ad0(result, result, 0);\n        // 0x40754a\n        return result;\n    }\n    int16_t * v5 = (int16_t *)(result + 112); // 0x40745a\n    int16_t v6 = *v5; // 0x40745a\n    int64_t v7; // 0x407420\n    int64_t v8; // 0x407420\n    int64_t v9; // 0x407420\n    int64_t v10; // 0x407420\n    int64_t v11; // 0x407420\n    int64_t v12; // 0x407420\n    int64_t v13; // 0x407420\n    if (v4 == 2) {\n        if ((v6 || 1) == 13) {\n            int16_t v14 = function_405ad0(result, result, 1); // 0x4077ba\n            *v5 = v14;\n            if (v14 == 1) {\n                uint32_t v15 = *v1; // 0x407aa0\n                if ((v15 & 4) == 0) {\n                    int64_t v16 = v15; // 0x407aa0\n                    int64_t v17 = function_4061d0(*(int32_t *)(result + 44), v16, (int64_t)&g8); // 0x407b1d\n                    int32_t v18 = v17; // 0x407b22\n                    *(int32_t *)(result + 68) = v18;\n                    if (v18 < 0) {\n                        int32_t v19 = *__errno_location(); // 0x407b4e\n                        *v5 = 7;\n                        *(int32_t *)(result + 64) = v19;\n                        *(int64_t *)result = result;\n                        // 0x40754a\n                        return result;\n                    }\n                    int16_t * v20 = (int16_t *)(result + 114); // 0x407b29\n                    *v20 = *v20 | 2;\n                    v7 = result;\n                    v10 = &g8;\n                    v12 = v16;\n                    goto lab_0x407757;\n                } else {\n                    // 0x407aab\n                    *(int64_t *)result = result;\n                    v8 = result;\n                    goto lab_0x40776e;\n                }\n            } else {\n                // 0x4077c8\n                *(int64_t *)result = result;\n                v11 = 1;\n                v9 = result;\n                v13 = result;\n                if (v14 != 11) {\n                    // 0x40754a\n                    return result;\n                }\n                goto lab_0x4077e0;\n            }\n        } else {\n            if (v6 != 1) {\n                goto lab_0x4074a0;\n            } else {\n                goto lab_0x407577;\n            }\n        }\n    } else {\n        if (v6 != 1) {\n            goto lab_0x4074a0;\n        } else {\n            if (v4 != 4) {\n                goto lab_0x407577;\n            } else {\n                goto lab_0x407612;\n            }\n        }\n    }\n  lab_0x4074a0:;\n    int64_t * v21 = (int64_t *)result;\n    int64_t v22 = result;\n    int64_t v23 = *(int64_t *)(v22 + 16); // 0x4074a0\n    int64_t result2; // 0x407420\n    int64_t v24; // 0x407420\n    int64_t v25; // 0x407670\n    while (v23 != 0) {\n        // 0x407478\n        *v21 = v23;\n        free((int64_t *)v22);\n        if (*(int64_t *)(v23 + 88) == 0) {\n            // 0x407660\n            if ((int32_t)function_4060a0(result) != 0) {\n                // 0x4079ff\n                *v1 = *v1 | 0x4000;\n                result2 = 0;\n                return result2;\n            } else {\n                // 0x407670\n                v25 = result + 88;\n                int64_t v26 = *(int64_t *)v25; // 0x407670\n                if ((*v1 & 258) == 0) {\n                    // 0x407a0d\n                    free((int64_t *)v26);\n                    goto lab_0x40768e;\n                } else {\n                    if (v26 == 0) {\n                        goto lab_0x40768e;\n                    } else {\n                        // 0x407689\n                        function_4097e0(v26);\n                        goto lab_0x40768e;\n                    }\n                }\n            }\n        }\n        int16_t * v27 = (int16_t *)(v23 + 116);\n        int16_t v28 = *v27; // 0x40748f\n        if (v28 != 4) {\n            // 0x407710\n            v24 = v23;\n            if (v28 == 2) {\n                int16_t v29 = function_405ad0(result, v23, 1); // 0x407a34\n                int16_t * v30 = (int16_t *)(v23 + 112); // 0x407a34\n                *v30 = v29;\n                if (v29 == 1) {\n                    uint32_t v31 = *v1; // 0x407ab7\n                    if ((v31 & 4) != 0) {\n                        // 0x407a3e\n                        *v27 = 3;\n                        v24 = v23;\n                        goto lab_0x40771a;\n                    } else {\n                        int32_t v32 = *(int32_t *)(result + 44); // 0x407ac6\n                        int64_t v33 = function_4061d0(v32, (int64_t)v31, (int64_t)&g8); // 0x407ad0\n                        int32_t v34 = v33; // 0x407ad5\n                        *(int32_t *)(v23 + 68) = v34;\n                        if (v34 < 0) {\n                            int32_t v35 = *__errno_location(); // 0x407b6b\n                            *v30 = 7;\n                            *(int32_t *)(v23 + 64) = v35;\n                            // 0x407a3e\n                            *v27 = 3;\n                            v24 = v23;\n                            goto lab_0x40771a;\n                        } else {\n                            int16_t * v36 = (int16_t *)(v23 + 114); // 0x407ae0\n                            *v36 = *v36 | 2;\n                            // 0x407a3e\n                            *v27 = 3;\n                            v24 = v23;\n                            goto lab_0x40771a;\n                        }\n                    }\n                } else {\n                    // 0x407a3e\n                    *v27 = 3;\n                    v24 = v23;\n                    goto lab_0x40771a;\n                }\n            } else {\n                goto lab_0x40771a;\n            }\n        }\n        v22 = v23;\n        v23 = *(int64_t *)(v22 + 16);\n    }\n    int64_t * v37 = (int64_t *)(v22 + 8); // 0x4074a9\n    int64_t v38 = *v37; // 0x4074a9\n    int64_t result6 = v38; // 0x4074b2\n    if (*(int64_t *)(v38 + 24) != 0) {\n        // 0x4079c0\n        *v21 = v38;\n        *(char *)(*(int64_t *)(result + 32) + *(int64_t *)(v38 + 72)) = 0;\n        int64_t v39 = function_406540(result, 3); // 0x4079d9\n        if (v39 != 0) {\n            // 0x407a6f\n            free((int64_t *)v22);\n            v24 = v39;\n            goto lab_0x40771a;\n        } else {\n            // 0x4079ea\n            if ((*(char *)(result + 73) & 64) != 0) {\n                // 0x40754a\n                return 0;\n            }\n            // 0x4079f6\n            result6 = *v37;\n            goto lab_0x4074b8;\n        }\n    } else {\n        goto lab_0x4074b8;\n    }\n  lab_0x407577:;\n    int64_t v40 = v2; // 0x407434\n    if ((v40 & 64) == 0) {\n        goto lab_0x40758b;\n    } else {\n        // 0x40757c\n        if (*(int64_t *)(result + 120) != *(int64_t *)(result + 24)) {\n            goto lab_0x407612;\n        } else {\n            goto lab_0x40758b;\n        }\n    }\n  lab_0x4074b8:\n    // 0x4074b8\n    *v21 = result6;\n    free((int64_t *)v22);\n    int64_t * v41 = (int64_t *)(result6 + 88); // 0x4074c4\n    if (*v41 == -1) {\n        // 0x4078df\n        free((int64_t *)result6);\n        *__errno_location() = 0;\n        *v21 = 0;\n        // 0x40754a\n        return 0;\n    }\n    // 0x4074cf\n    *(char *)(*(int64_t *)(result6 + 72) + *(int64_t *)(result + 32)) = 0;\n    if (*v41 == 0) {\n        // 0x40790f\n        if ((int32_t)function_4060a0(result) == 0) {\n            goto lab_0x407506;\n        } else {\n            goto lab_0x40791f;\n        }\n    } else {\n        uint16_t v42 = *(int16_t *)(result6 + 114); // 0x4074f2\n        if ((v42 & 2) != 0) {\n            int32_t v43 = *v1; // 0x407895\n            int32_t * v44 = (int32_t *)(result6 + 68); // 0x40789a\n            uint32_t fd = *v44; // 0x40789a\n            int32_t fd2 = fd; // 0x40789f\n            if ((v43 & 4) == 0) {\n                if ((v43 & 512) == 0) {\n                    // 0x407a7c\n                    if (fchdir(fd) != 0) {\n                        // 0x407a85\n                        *(int32_t *)(result6 + 64) = *__errno_location();\n                        *v1 = *v1 | 0x4000;\n                    }\n                    // 0x407a98\n                    fd2 = *v44;\n                } else {\n                    // 0x4078aa\n                    function_406030(result, (int64_t)fd, 1);\n                    fd2 = *v44;\n                }\n            }\n            // 0x4078bc\n            close(fd2);\n            goto lab_0x407506;\n        } else {\n            if (v42 % 2 == 0) {\n                int64_t v45 = *(int64_t *)(result6 + 8); // 0x407a4c\n                if ((int32_t)function_406220(result, v45, 0xffffffff, (int32_t)\"..\") == 0) {\n                    goto lab_0x407506;\n                } else {\n                    goto lab_0x40791f;\n                }\n            } else {\n                goto lab_0x407506;\n            }\n        }\n    }\n  lab_0x407612:\n    // 0x407612\n    if ((*(char *)(result + 114) & 2) != 0) {\n        // 0x407a17\n        close(*(int32_t *)(result + 68));\n    }\n    int64_t * v46 = (int64_t *)(result + 8); // 0x40761c\n    int64_t v47 = *v46; // 0x40761c\n    if (v47 != 0) {\n        // 0x407626\n        function_405e10(v47);\n        *v46 = 0;\n    }\n    // 0x407634\n    *v5 = 6;\n    function_4064a0(*v1, result + 88, result);\n    // 0x40754a\n    return result;\n  lab_0x4077e0:;\n    int64_t result5 = v9;\n    int64_t result3 = result5; // 0x4077eb\n    if (*(int64_t *)(result5 + 168) != 2) {\n        // 0x40754a\n        return result3;\n    }\n    int64_t v48 = *(int64_t *)(result5 + 8); // 0x407947\n    int64_t * v49 = (int64_t *)(v48 + 104); // 0x40794b\n    int64_t v50; // 0x407420\n    int64_t v51; // 0x407420\n    if (*v49 != 0) {\n        goto lab_0x407963;\n    } else {\n        // 0x407952\n        if ((*v1 & 24) == 24) {\n            // 0x407af9\n            if ((int32_t)function_405fc0(v48, v13, v11) != 2) {\n                goto lab_0x407963;\n            } else {\n                // 0x407b0a\n                v50 = (int64_t)*(int16_t *)(result5 + 112);\n                v51 = result5;\n                goto lab_0x407761;\n            }\n        } else {\n            goto lab_0x407963;\n        }\n    }\n  lab_0x40758b:;\n    int64_t * v52 = (int64_t *)(result + 8); // 0x40758b\n    int64_t v53 = *v52; // 0x40758b\n    int64_t v54; // 0x407420\n    if (v53 == 0) {\n        goto lab_0x407839;\n    } else {\n        if ((v40 & 0x2000) != 0) {\n            // 0x407823\n            *v1 = v2 & -0x2001;\n            function_405e10(v53);\n            *v52 = 0;\n            goto lab_0x407839;\n        } else {\n            int64_t v55 = *(int64_t *)(result + 48); // 0x4075a2\n            if ((int32_t)function_406220(result, result, 0xffffffff, (int32_t)v55) == 0) {\n                // 0x4078c6\n                v54 = *v52;\n            } else {\n                int32_t * v56 = __errno_location(); // 0x4075be\n                int64_t v57 = *v52; // 0x4075c3\n                int16_t * v58 = (int16_t *)(result + 114); // 0x4075ca\n                *v58 = *v58 | 1;\n                *(int32_t *)(result + 64) = *v56;\n                v54 = 0;\n                if (v57 != 0) {\n                    *(int64_t *)(v57 + 48) = *(int64_t *)(*(int64_t *)(v57 + 8) + 48);\n                    int64_t v59 = *(int64_t *)(v57 + 16); // 0x4075ec\n                    int64_t v60 = v59; // 0x4075f3\n                    v54 = v57;\n                    while (v59 != 0) {\n                        int64_t v61 = *(int64_t *)(*(int64_t *)(v60 + 8) + 48); // 0x4075e4\n                        *(int64_t *)(v60 + 48) = v61;\n                        v59 = *(int64_t *)(v60 + 16);\n                        v60 = v59;\n                        v54 = v57;\n                    }\n                }\n            }\n            goto lab_0x4075f5;\n        }\n    }\n  lab_0x407757:;\n    uint16_t v62 = *(int16_t *)(v7 + 112);\n    *(int64_t *)result = v7;\n    v50 = v62;\n    v51 = v7;\n    v11 = v10;\n    v9 = v7;\n    v13 = v12;\n    if (v62 == 11) {\n        goto lab_0x4077e0;\n    } else {\n        goto lab_0x407761;\n    }\n  lab_0x40776e:;\n    int64_t v63 = v8; // 0x407773\n    if (*(int64_t *)(v8 + 88) != 0) {\n        goto lab_0x40777e;\n    } else {\n        goto lab_0x407775;\n    }\n  lab_0x407963:;\n    int64_t v64 = function_405ad0(result, result5, 0); // 0x40796b\n    int16_t v65 = v64; // 0x407976\n    *(int16_t *)(result5 + 112) = v65;\n    v50 = v64;\n    v51 = result5;\n    if ((*(int32_t *)(result5 + 144) & 0xf000) != 0x4000) {\n        goto lab_0x407761;\n    } else {\n        // 0x40798c\n        if (*(int64_t *)(result5 + 88) == 0) {\n            // 0x407aea\n            result3 = result5;\n            if (v65 != 1) {\n                int64_t v66 = result3;\n                result2 = v66;\n                int64_t result4 = result2;\n                return result4;\n            }\n            goto lab_0x407775;\n        } else {\n            uint64_t v67 = *v49 - 1; // 0x40799b\n            if (v67 < 0xfffffffffffffffe) {\n                // 0x407b3a\n                *v49 = v67;\n            }\n            // 0x4079a9\n            v63 = result5;\n            if (v65 != 1) {\n                // 0x40754a\n                return result5;\n            }\n            goto lab_0x40777e;\n        }\n    }\n  lab_0x407839:;\n    int64_t v68 = function_406540(result, 3); // 0x407841\n    *v52 = v68;\n    v54 = v68;\n    if (v68 == 0) {\n        int32_t v69 = *v1; // 0x407857\n        if ((v69 & 0x4000) != 0) {\n            // 0x40754a\n            return 0;\n        }\n        // 0x407868\n        if (*(int32_t *)(result + 64) == 0) {\n            // 0x407883\n            function_4064a0(v69, result + 88, result);\n            result2 = result;\n          lab_0x40754a:\n            // 0x40754a\n            return result2;\n        }\n        // 0x407871\n        if (*v5 != 4) {\n            // 0x407878\n            *v5 = 7;\n        }\n        // 0x407883\n        function_4064a0(v69, result + 88, result);\n        // 0x40754a\n        return result;\n    }\n    goto lab_0x4075f5;\n  lab_0x40771a:;\n    int64_t v70 = *(int64_t *)(v24 + 8); // 0x40771a\n    int64_t v71 = *(int64_t *)(v70 + 72); // 0x40771e\n    char v72 = *(char *)(v71 - 1 + *(int64_t *)(v70 + 56)); // 0x40772a\n    int64_t v73 = *(int64_t *)(result + 32) + v71 + (int64_t)(v72 == 47); // 0x407733\n    *(char *)v73 = 47;\n    int64_t v74 = *(int64_t *)(v24 + 96) + 1; // 0x407743\n    int64_t v75 = v24 + 264; // 0x407747\n    memmove((int64_t *)(v73 + 1), (int64_t *)v75, (int32_t)v74);\n    v7 = v24;\n    v10 = v74;\n    v12 = v75;\n    goto lab_0x407757;\n  lab_0x407506:;\n    int64_t v76 = (int64_t)*v1; // 0x40750b\n    int64_t v77 = v76; // 0x407510\n    int32_t * v78; // 0x407420\n    int64_t v79; // 0x407420\n    if (*(int16_t *)(result6 + 112) == 2) {\n        goto lab_0x407538;\n    } else {\n        // 0x407506\n        v78 = (int32_t *)(result6 + 64);\n        v79 = v76;\n        goto lab_0x407512;\n    }\n  lab_0x40791f:;\n    int32_t v80 = *__errno_location(); // 0x407924\n    int32_t * v81 = (int32_t *)(result6 + 64);\n    *v81 = v80;\n    uint32_t v82 = *v1 | 0x4000; // 0x407929\n    *v1 = v82;\n    if (*(int16_t *)(result6 + 112) == 2) {\n        // 0x40754a\n        return 0;\n    }\n    // 0x40793d\n    v78 = v81;\n    v79 = v82;\n    goto lab_0x407512;\n  lab_0x407761:\n    // 0x407761\n    result2 = v51;\n    v8 = v51;\n    if ((int16_t)v50 != 1) {\n        // 0x40754a\n        return result2;\n    }\n    goto lab_0x40776e;\n  lab_0x40777e:;\n    int64_t v94 = function_4063f0(*v1, result + 88, v63); // 0x40778e\n    result2 = v63;\n    if ((char)v94 == 0) {\n        // 0x40779b\n        *__errno_location() = 12;\n        result2 = 0;\n    }\n    // 0x40754a\n    return result2;\n  lab_0x407775:\n    // 0x407775\n    *(int64_t *)(result + 24) = *(int64_t *)(v8 + 120);\n    v63 = v8;\n    goto lab_0x40777e;\n  lab_0x4075f5:\n    // 0x4075f5\n    *v52 = 0;\n    v24 = v54;\n    goto lab_0x40771a;\n  lab_0x407538:\n    // 0x407538\n    if ((v77 & 0x4000) != 0) {\n        // 0x40754a\n        return 0;\n    }\n    // 0x40754a\n    return result6;\n  lab_0x407512:\n    // 0x407512\n    if (*v78 != 0) {\n        // 0x407901\n        int64_t v83; // 0x407420\n        *(int16_t *)(v83 + 112) = 7;\n        int64_t v84; // 0x407420\n        v77 = v84;\n    } else {\n        // 0x40751d\n        *(int16_t *)(result6 + 112) = 6;\n        function_4064a0((int32_t)v79, result + 88, result6);\n        v77 = (int64_t)*v1;\n    }\n    goto lab_0x407538;\n  lab_0x40768e:;\n    int64_t * v85 = (int64_t *)(v23 + 96); // 0x40768e\n    int64_t v86 = *v85; // 0x40768e\n    int64_t str = v23 + 264; // 0x407692\n    int64_t * v87 = (int64_t *)(result + 32); // 0x407699\n    *(int64_t *)(v23 + 72) = v86;\n    int64_t v88 = v86 + 1; // 0x4076a5\n    int64_t * v89 = (int64_t *)str; // 0x4076a9\n    memmove((int64_t *)*v87, v89, (int32_t)v88);\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4076b6\n    int64_t v90 = v88; // 0x4076be\n    int64_t v91; // 0x4076b6\n    if (found_char_pos == NULL) {\n        goto lab_0x4076eb;\n    } else {\n        // 0x4076c0\n        v91 = (int64_t)found_char_pos;\n        if (str == v91) {\n            // 0x4078d0\n            v90 = v88;\n            if (*(char *)(v23 + 265) == 0) {\n                goto lab_0x4076eb;\n            } else {\n                goto lab_0x4076c9;\n            }\n        } else {\n            goto lab_0x4076c9;\n        }\n    }\n  lab_0x4076eb:;\n    int64_t v92 = *v87; // 0x4076eb\n    *(int64_t *)(v23 + 56) = v92;\n    *(int64_t *)(v23 + 48) = v92;\n    function_406170(*v1, v25);\n    v7 = v23;\n    v10 = v90;\n    v12 = v25;\n    goto lab_0x407757;\n  lab_0x4076c9:;\n    int64_t str2 = v91 + 1; // 0x4076c9\n    int64_t len = strlen((char *)str2); // 0x4076d0\n    int64_t v93 = len + 1; // 0x4076de\n    memmove(v89, (int64_t *)str2, (int32_t)v93);\n    *v85 = len;\n    v90 = v93;\n    goto lab_0x4076eb;\n}\n"
        },
        {
            "funcName": "fts_set",
            "funcStartAddr": "407b80",
            "funcEndAddr": "407ba9",
            "decompiledFuncCode": "int64_t fts_set(int64_t a1, int64_t a2, int64_t a3) {\n    if ((uint32_t)(int32_t)a3 < 5) {\n        // 0x407b85\n        *(int16_t *)(a2 + 116) = (int16_t)a3;\n        return 0;\n    }\n    // 0x407b90\n    *__errno_location() = 22;\n    return 1;\n}\n"
        },
        {
            "funcName": "fts_children",
            "funcStartAddr": "407bb0",
            "funcEndAddr": "407d1d",
            "decompiledFuncCode": "int64_t fts_children(int64_t a1, int64_t a2) {\n    int32_t * v1 = __errno_location(); // 0x407bbd\n    if ((a2 & 0xffffdfff) != 0) {\n        // 0x407ca8\n        *v1 = 22;\n        return 0;\n    }\n    // 0x407bd1\n    *v1 = 0;\n    char * v2 = (char *)(a1 + 73); // 0x407bda\n    if ((*v2 & 64) != 0) {\n        // 0x407c4f\n        return 0;\n    }\n    int16_t v3 = *(int16_t *)(a1 + 112); // 0x407be4\n    if (v3 == 9) {\n        // 0x407cd0\n        return *(int64_t *)(a1 + 16);\n    }\n    // 0x407bf4\n    if (v3 != 1) {\n        // 0x407c4f\n        return 0;\n    }\n    int64_t * v4 = (int64_t *)(a1 + 8); // 0x407bfc\n    int64_t v5 = *v4; // 0x407bfc\n    if (v5 != 0) {\n        // 0x407c05\n        function_405e10(v5);\n    }\n    int64_t v6 = 1; // 0x407c16\n    if ((int32_t)a2 == 0x2000) {\n        int32_t * v7 = (int32_t *)(a1 + 72); // 0x407c18\n        *v7 = *v7 | 0x2000;\n        v6 = 2;\n    }\n    // 0x407c25\n    int64_t result; // 0x407c46\n    if (*(int64_t *)(a1 + 88) != 0 || *(char *)*(int64_t *)(a1 + 48) == 47) {\n        // 0x407c40\n        result = function_406540(a1, v6);\n        *v4 = result;\n        // 0x407c4f\n        return result;\n    }\n    uint32_t v8 = *(int32_t *)(a1 + 72); // 0x407c37\n    if ((v8 & 4) != 0) {\n        // 0x407c40\n        result = function_406540(a1, v6);\n        *v4 = result;\n        // 0x407c4f\n        return result;\n    }\n    int32_t v9 = *(int32_t *)(a1 + 44); // 0x407c60\n    int64_t v10 = function_4061d0(v9, (int64_t)v8, (int64_t)&g8); // 0x407c68\n    int32_t fd = v10; // 0x407c6f\n    if (fd < 0) {\n        // 0x407cf8\n        *v4 = 0;\n        // 0x407c4f\n        return 0;\n    }\n    // 0x407c77\n    *v4 = function_406540(a1, v6);\n    if ((*v2 & 2) != 0) {\n        // 0x407ce0\n        function_406030(a1, v10 & 0xffffffff, 1);\n        // 0x407c4f\n        return *v4;\n    }\n    // 0x407c8c\n    if (fchdir(fd) == 0) {\n        // 0x407c97\n        close(fd);\n        // 0x407c4f\n        return *v4;\n    }\n    // 0x407d07\n    close(fd);\n    // 0x407c4f\n    return 0;\n}\n"
        },
        {
            "funcName": "function_407d20",
            "funcStartAddr": "407d20",
            "funcEndAddr": "407dff",
            "decompiledFuncCode": "int64_t function_407d20(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x407d2c\n    uint32_t v2 = *v1; // 0x407d2c\n    int64_t v3 = a2 & 0xffffffff; // 0x407d31\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x407d34\n    uint64_t v5 = (int64_t)*v4; // 0x407d34\n    int64_t v6; // 0x407da2\n    if (v3 <= v5) {\n      lab_0x407d9c_2:\n        // 0x407d9c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x407d22\n    int64_t v8 = v2; // 0x407d20\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x407d9c\n        goto lab_0x407d9c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x407d58\n    int64_t v17; // 0x407d66\n    int64_t * v18; // 0x407d80\n    int64_t * v19; // 0x407d83\n    int64_t v20; // 0x407d8e\n    int64_t v21; // 0x407d66\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x407d63\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x407d80\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x407d97\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x407d9c\n            goto lab_0x407d9c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x407d9c\n            goto lab_0x407d9c_2;\n        }\n        // 0x407d52\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x407ddb\n    int64_t * v23 = (int64_t *)v22; // 0x407de0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x407de3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x407de0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x407df7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x407d4d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x407d9c\n            goto lab_0x407d9c_2;\n        }\n        // 0x407d52\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x407d63\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x407d80\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x407d97\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x407d9c\n                goto lab_0x407d9c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x407d9c\n                goto lab_0x407d9c_2;\n            }\n            // 0x407d52\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x407dc0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x407de0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x407df7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x407d9c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_407e00",
            "funcStartAddr": "407e00",
            "funcEndAddr": "40841c",
            "decompiledFuncCode": "int64_t function_407e00(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x407e1f\n    int64_t v2 = *v1; // 0x407e1f\n    char * str2 = (char *)v2; // 0x407e2c\n    char c = *str2; // 0x407e2c\n    int64_t v3 = v2; // 0x407e58\n    int64_t v4 = 0; // 0x407e00\n    int32_t v5; // 0x407e00\n    int64_t v6; // 0x407e00\n    int64_t v7; // 0x407e00\n    int64_t v8; // 0x407e00\n    int64_t v9; // 0x407e00\n    int64_t v10; // 0x407e00\n    int64_t v11; // 0x407e00\n    int64_t v12; // 0x407e00\n    int64_t v13; // 0x407e00\n    int64_t str3; // 0x407e00\n    int64_t v14; // 0x407e00\n    int64_t v15; // 0x407e00\n    int64_t v16; // 0x407e00\n    int64_t v17; // 0x407e00\n    int32_t v18; // 0x407e00\n    int32_t v19; // 0x407e00\n    int32_t v20; // 0x407e00\n    int32_t v21; // 0x407e00\n    int32_t v22; // 0x407e00\n    int32_t v23; // 0x407e00\n    int32_t v24; // 0x407e00\n    int32_t v25; // 0x407e00\n    int32_t v26; // 0x407e00\n    int32_t v27; // 0x407e00\n    int32_t v28; // 0x407e00\n    int32_t v29; // 0x407e00\n    int64_t nmemb; // 0x407e00\n    int64_t v30; // 0x407e00\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x407e5c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x407e58\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x407e68\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x407e6e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x407e38\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x407e9c\n                int64_t v34; // 0x407e00\n                int64_t v35; // 0x407e00\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x407ea5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x408020;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x407eb6\n                int64_t v37 = *(int64_t *)v36; // 0x407eba\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x407e90\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x407ea5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x408020;\n                        }\n                    }\n                    // 0x407eb6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x407f06:\n                    // 0x407f06\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x407f60;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4080d0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x407f60;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x408080\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x407f2a;\n                                } else {\n                                    // 0x40808c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x407f2a;\n                                    } else {\n                                        // 0x40809a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x407f2a;\n                                        } else {\n                                            goto lab_0x407f60;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x407f2a;\n                            }\n                        }\n                    }\n                }\n              lab_0x407f71:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x408146\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4082f2\n                            flockfile(g35);\n                            int64_t v41 = *v1; // 0x408312\n                            __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40835f\n                            int64_t v43 = (int64_t)g35;\n                            int64_t v44 = v43; // 0x408379\n                            int64_t v45; // 0x40837b\n                            if (*(char *)v42 != 0) {\n                                // 0x40837b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g35;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x408373\n                            while (v17 + nmemb != v42) {\n                                // 0x408375\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40837b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g35;\n                                }\n                                // 0x408368\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4083a0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g35);\n                            v40 = *v1;\n                        } else {\n                            // 0x408154\n                            __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4082af\n                        free((int64_t *)v17);\n                    }\n                    // 0x4081a9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4081c0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40806e\n                    return 63;\n                }\n                // 0x407f90\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x408014\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x408020:;\n                    int32_t * v49 = (int32_t *)a7; // 0x408030\n                    uint32_t v50 = *v49; // 0x408030\n                    int64_t v51 = v50; // 0x408030\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40803a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x408043\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40826f\n                                __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40821a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40806e\n                            return 63;\n                        }\n                        // 0x4080b8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4083cf\n                                    __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4082cd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4082e0\n                                // 0x40806e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4081de\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4081f2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40805b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40805e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x408062\n                    int64_t result = v59; // 0x408068\n                    if (v58 != 0) {\n                        // 0x40806a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40806e\n                    return result;\n                }\n            } else {\n                // 0x407e6e\n                v5 = v32;\n            }\n            // break -> 0x407f95\n            break;\n        }\n    }\n    // 0x407f95\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x407fad\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x407fb7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40806e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4080f9\n        __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x407fe6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x407ff6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x407f60:\n    // 0x407f60\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x407f60\n    int64_t v63 = *(int64_t *)v62; // 0x407f64\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x407f71\n        goto lab_0x407f71;\n    }\n    goto lab_0x407f06;\n  lab_0x407f2a:\n    // 0x407f2a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x407e00\n    int32_t v65; // 0x407e00\n    int32_t v66; // 0x407e00\n    if (v27 != 0) {\n        goto lab_0x407f60;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4080e0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x407f60;\n            } else {\n                goto lab_0x407f51;\n            }\n        } else {\n            // 0x407f45\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40823c\n                int64_t v67 = (int64_t)mem; // 0x40823c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x407f60;\n                } else {\n                    // 0x40824f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x407f51;\n                }\n            } else {\n                goto lab_0x407f51;\n            }\n        }\n    }\n  lab_0x407f51:\n    // 0x407f51\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x407f60;\n}\n"
        },
        {
            "funcName": "function_408420",
            "funcStartAddr": "408420",
            "funcEndAddr": "4089e6",
            "decompiledFuncCode": "int64_t function_408420(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x408441\n    if (v3 < 1) {\n        // 0x4085fe\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40843d\n    int32_t v5 = *(int32_t *)a7; // 0x408449\n    uint64_t v6 = a1 & 0xffffffff; // 0x40844b\n    int64_t v7 = v2; // 0x408450\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x408453\n    *v8 = 0;\n    int64_t v9; // 0x408420\n    int64_t v10; // 0x408420\n    int64_t v11; // 0x408420\n    int64_t v12; // 0x408420\n    int64_t str; // 0x408420\n    int64_t v13; // 0x408420\n    int64_t v14; // 0x408420\n    int64_t v15; // 0x408420\n    int64_t v16; // 0x408420\n    int64_t v17; // 0x408420\n    int32_t v18; // 0x408420\n    char v19; // 0x408420\n    if (v5 == 0) {\n        // 0x408638\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40846a;\n    } else {\n        // 0x408463\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4084b0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4084b3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x408578;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4084c6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4084d6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40858c;\n                } else {\n                    goto lab_0x4084e8;\n                }\n            }\n        } else {\n            goto lab_0x40846a;\n        }\n    }\n  lab_0x40846a:\n    // 0x40846a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x408470\n    *v24 = 0;\n    int64_t v25; // 0x408420\n    int64_t v26; // 0x408420\n    int64_t v27; // 0x408420\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x408560\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40856d;\n        }\n        case 43: {\n            // 0x408870\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40856d;\n        }\n        default: {\n            // 0x40848c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4087ef\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x408908\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40856d;\n                } else {\n                    // 0x4087fd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40849a;\n                }\n            } else {\n                goto lab_0x40849a;\n            }\n        }\n    }\n  lab_0x408578:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40857f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4084e8;\n    } else {\n        goto lab_0x40858c;\n    }\n  lab_0x40849a:\n    // 0x40849a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40856d;\n  lab_0x40856d:\n    // 0x40856d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x408578;\n  lab_0x4084e8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4084e8\n    int64_t v31 = v30; // 0x4084e8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4084ea\n    if ((int64_t)*v32 > v31) {\n        // 0x4084ef\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4084f2\n    if (*v33 > v30) {\n        // 0x4084f7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4084fa\n    int64_t v35 = v31; // 0x4084fe\n    int64_t v36 = v15; // 0x4084fe\n    int64_t v37; // 0x408420\n    int64_t v38; // 0x408420\n    int64_t v39; // 0x408420\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x408668\n        int64_t v41 = v40; // 0x408668\n        v2 = v41;\n        int64_t v42; // 0x408420\n        if (*v33 == v40) {\n            // 0x408850\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x408858\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x408674\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x408678\n                function_407d20(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x408688\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x408691\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40869a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4086b1\n            int64_t v47 = v45 & 0xffffffff; // 0x4086b5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4086be\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4086c4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4086c6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4086a0\n            int64_t v49 = v48 & 0xffffffff; // 0x4086a0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4086b1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4086be\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4086c4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4086c6;\n                    }\n                }\n                // 0x4086a0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x408868\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4086c6;\n    } else {\n        goto lab_0x408504;\n    }\n  lab_0x40858c:\n    // 0x40858c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40858f\n    int64_t v51 = v12; // 0x40858f\n    int64_t v52 = v14; // 0x40858f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4084e8;\n    } else {\n        goto lab_0x408595;\n    }\n  lab_0x408504:;\n    int32_t v53 = v35; // 0x408504\n    int64_t v54; // 0x408420\n    int64_t v55; // 0x408420\n    int64_t v56; // 0x408420\n    int64_t v57; // 0x408420\n    int64_t v58; // 0x408420\n    int64_t v59; // 0x408420\n    char * v60; // 0x408420\n    int64_t v61; // 0x408420\n    int64_t v62; // 0x408519\n    int64_t v63; // 0x408420\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x408653\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x408656;\n    } else {\n        // 0x40850c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x408420\n        int64_t v66 = v65 ? -1 : 1; // 0x408520\n        int64_t v67 = (int64_t)\"--\"; // 0x408420\n        int64_t v68 = v62; // 0x408420\n        int64_t v69 = 3; // 0x408520\n        unsigned char v70 = *(char *)v68; // 0x408520\n        char v71 = *(char *)v67; // 0x408520\n        char v72 = v71; // 0x408520\n        bool v73 = false; // 0x408520\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x408610\n            if (*(char *)v62 == 45) {\n                // 0x4086d0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4086d0\n                if (c == 0) {\n                    goto lab_0x40861a;\n                } else {\n                    // 0x4086dd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x408760;\n                    } else {\n                        if (c == 45) {\n                            // 0x408943\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4087b5;\n                        } else {\n                            // 0x4086ee\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x408760;\n                            } else {\n                                // 0x4086f3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x408714;\n                                } else {\n                                    // 0x4086fa\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x408760;\n                                    } else {\n                                        goto lab_0x408714;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40861a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x408530\n            v2 = v75;\n            int32_t v76 = *v32; // 0x408533\n            int64_t v77 = v35 + 1; // 0x408536\n            int32_t v78 = v77; // 0x408539\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4088a0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x408547\n                    function_407d20(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x408555\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x408656;\n        }\n    }\n  lab_0x408595:;\n    // 0x408595\n    int64_t v79; // bp-104, 0x408420\n    int64_t v80 = &v79; // 0x40842a\n    int64_t v81 = v50 + 1; // 0x408595\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40859c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4085a1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4085a5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4085a9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4085b1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4085b6\n    int32_t c2 = v84; // 0x4085b6\n    char * found_char_pos = strchr(str2, c2); // 0x4085b6\n    int64_t v87 = *v82; // 0x4085bb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4085c5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4085d0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4088c0\n            __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40888d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4085fe\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4085b6\n    char v91 = *(char *)(v90 + 1); // 0x4085eb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4085a5\n        if (v91 != 58) {\n            // 0x4085fe\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x408814\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x408918\n                *v8 = 0;\n            } else {\n                // 0x4088fc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40883e\n            *v83 = 0;\n            // 0x4085fe\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40881e\n        if (v93 != 0) {\n            // 0x4088b0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40883e\n            *v83 = 0;\n            // 0x4085fe\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x408831\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40883e\n            *v83 = 0;\n            // 0x4085fe\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40897a\n            __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40892a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x408931\n        // 0x40883e\n        *v83 = 0;\n        // 0x4085fe\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x408789\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40878b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4089b0\n                __fprintf_chk(g35, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x408961\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x408968\n            // 0x4085fe\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x408796\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40879a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4087b5;\n  lab_0x4086c6:\n    // 0x4086c6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x408504;\n  lab_0x4087b5:;\n    int64_t v99 = function_407e00(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4087d3\n    // 0x4085fe\n    return v99 & 0xffffffff;\n  lab_0x408656:;\n    int32_t v100 = v55; // 0x408656\n    if (v100 != (int32_t)v59) {\n        // 0x40865a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4085fe\n    return 0xffffffff;\n  lab_0x40861a:\n    // 0x40861a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x408621\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4085fe\n    return v99 & 0xffffffff;\n  lab_0x408760:\n    // 0x408760\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x408595;\n  lab_0x408714:\n    // 0x408714\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_407e00(v6, a2, str, a4, a5, v57, v1, v11, &g11); // 0x40873a\n    if ((int32_t)v101 != -1) {\n        // 0x4085fe\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40874f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x408760;\n}\n"
        },
        {
            "funcName": "function_4089f0",
            "funcStartAddr": "4089f0",
            "funcEndAddr": "408a46",
            "decompiledFuncCode": "int64_t function_4089f0(int64_t a1) {\n    // 0x4089f0\n    *(int32_t *)&g52 = g30;\n    *(int32_t *)&g53 = g29;\n    int64_t v1; // 0x4089f0\n    int64_t result = function_408420(v1, v1, v1, v1, v1, v1, &g52, a1 & 0xffffffff); // 0x408a16\n    g30 = *(int32_t *)&g52;\n    g58 = g55;\n    *(int32_t *)&g28 = g54;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408a50",
            "funcStartAddr": "408a50",
            "funcEndAddr": "408a68",
            "decompiledFuncCode": "int64_t function_408a50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408a50\n    return function_4089f0(1);\n}\n"
        },
        {
            "funcName": "function_408a70",
            "funcStartAddr": "408a70",
            "funcEndAddr": "408a83",
            "decompiledFuncCode": "int64_t function_408a70(int64_t a1, int64_t a2, char * a3, char (**a4)[8], int32_t a5, int64_t a6) {\n    // 0x408a70\n    return function_4089f0(0);\n}\n"
        },
        {
            "funcName": "function_408a90",
            "funcStartAddr": "408a90",
            "funcEndAddr": "408aa5",
            "decompiledFuncCode": "int64_t function_408a90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408a90\n    return function_408420(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_408ab0",
            "funcStartAddr": "408ab0",
            "funcEndAddr": "408ac6",
            "decompiledFuncCode": "int64_t function_408ab0(void) {\n    // 0x408ab0\n    return function_4089f0(0);\n}\n"
        },
        {
            "funcName": "function_408ad0",
            "funcStartAddr": "408ad0",
            "funcEndAddr": "408ae8",
            "decompiledFuncCode": "int64_t function_408ad0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408ad0\n    return function_408420(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_408af0",
            "funcStartAddr": "408af0",
            "funcEndAddr": "408b6a",
            "decompiledFuncCode": "int64_t function_408af0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x408afb\n    int64_t v2 = (int64_t)&g12; // 0x408afb\n    int32_t * pwc; // 0x408af0\n    int64_t v3; // 0x408af0\n    int64_t n; // 0x408af0\n    if (a2 == 0) {\n        goto lab_0x408b42;\n    } else {\n        // 0x408afd\n        if (a3 == 0) {\n            // 0x408b28\n            return -2;\n        }\n        // 0x408b09\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x408b42;\n        } else {\n            goto lab_0x408b14;\n        }\n    }\n  lab_0x408b42:\n    // 0x408b42\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x408af0\n    pwc = (int32_t *)&v4;\n    goto lab_0x408b14;\n  lab_0x408b14:;\n    char * wstr = (char *)v3; // 0x408b1a\n    int64_t ps; // 0x408af0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x408b1a\n    int64_t result = v5; // 0x408b1a\n    if (v5 < 0xfffffffe) {\n        // 0x408b28\n        return result;\n    }\n    int64_t result2 = result; // 0x408b59\n    if ((char)function_408cb0(0, v3) == 0) {\n        // 0x408b5b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x408b28\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408b70",
            "funcStartAddr": "408b70",
            "funcEndAddr": "408bcd",
            "decompiledFuncCode": "int64_t function_408b70(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x408b77\n    int64_t v2; // 0x408b70\n    int64_t result = function_40a630(a1, v2); // 0x408b88\n    if ((v2 & 32) != 0) {\n        // 0x408bb0\n        if ((int32_t)result == 0) {\n            // 0x408bb4\n            *__errno_location() = 0;\n        }\n        // 0x408baa\n        return 0xffffffff;\n    }\n    // 0x408b91\n    if ((int32_t)result == 0) {\n        // 0x408baa\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x408b98\n    if (v1 == 0) {\n        // 0x408b9a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x408baa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408bd0",
            "funcStartAddr": "408bd0",
            "funcEndAddr": "408be0",
            "decompiledFuncCode": "int64_t function_408bd0(int64_t a1) {\n    // 0x408bd0\n    *(int64_t *)(a1 + 16) = 0;\n    *(int32_t *)(a1 + 24) = 0x95f616;\n    int64_t result; // 0x408bd0\n    return result;\n}\n"
        },
        {
            "funcName": "function_408be0",
            "funcStartAddr": "408be0",
            "funcEndAddr": "408c60",
            "decompiledFuncCode": "int64_t function_408be0(int64_t a1, int64_t a2) {\n    // 0x408be0\n    if (*(int32_t *)(a1 + 24) != 0x95f616) {\n        // 0x408c42\n        __assert_fail(\"state->magic == 9827862\", \"lib/cycle-check.c\", 60, \"cycle_check\");\n        return &g62;\n    }\n    int64_t * v1 = (int64_t *)(a1 + 16); // 0x408be9\n    int64_t v2 = *v1; // 0x408be9\n    int64_t v3 = *(int64_t *)(a2 + 8); // 0x408bed\n    if (v2 == 0) {\n        // 0x408c10\n        *v1 = 1;\n        // 0x408c18\n        *(int64_t *)a1 = v3;\n        *(int64_t *)(a1 + 8) = a2;\n        return 0;\n    }\n    if (v3 == a1) {\n        // 0x408c28\n        if (*(int64_t *)(a1 + 8) == a2) {\n            // 0x408c08\n            return 1;\n        }\n    }\n    int64_t v4 = v2 + 1; // 0x408bfb\n    *v1 = v4;\n    if ((v4 & v2) != 0) {\n        // 0x408c08\n        return 0;\n    }\n    // 0x408c37\n    if (v4 == 0) {\n        // 0x408c08\n        return 1;\n    }\n    // 0x408c18\n    *(int64_t *)a1 = v3;\n    *(int64_t *)(a1 + 8) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408c60",
            "funcStartAddr": "408c60",
            "funcEndAddr": "408caa",
            "decompiledFuncCode": "int64_t function_408c60(int64_t path, int64_t oflag, int32_t a3) {\n    uint32_t fd = open((char *)path, (int32_t)oflag); // 0x408c73\n    return function_40a5e0((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_408cb0",
            "funcStartAddr": "408cb0",
            "funcEndAddr": "408d0e",
            "decompiledFuncCode": "int64_t function_408cb0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x408cb6\n    if (locale == NULL) {\n        // 0x408ce3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x408cb6\n    bool v2; // 0x408cb0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g13; // 0x408cb0\n    int64_t v5 = v1; // 0x408cb0\n    int64_t v6 = 2; // 0x408cd5\n    unsigned char v7 = *(char *)v5; // 0x408cd5\n    char v8 = *(char *)v4; // 0x408cd5\n    char v9 = v8; // 0x408cd5\n    bool v10 = false; // 0x408cd5\n    while (v7 == v8) {\n        // 0x408cc8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x408ce1\n    int64_t v13 = v1; // 0x408ce1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x408ce3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x408ce1\n    unsigned char v15 = *(char *)v13; // 0x408cfd\n    char v16 = *(char *)v12; // 0x408cfd\n    char v17 = v16; // 0x408cfd\n    bool v18 = false; // 0x408cfd\n    while (v15 == v16) {\n        // 0x408cf0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_408d10",
            "funcStartAddr": "408d10",
            "funcEndAddr": "408da3",
            "decompiledFuncCode": "int64_t function_408d10(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x408d27\n    if (v1 == -1) {\n        // 0x408d9f\n        return -1;\n    }\n    int64_t v2 = v1; // 0x408d2f\n    int64_t v3; // 0x408d10\n    while (true) {\n      lab_0x408d38:\n        // 0x408d38\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x408d90;\n        } else {\n            goto lab_0x408d95;\n        }\n    }\n  lab_0x408d9f_2:;\n    // 0x408d9f\n    int64_t result; // 0x408d10\n    return result;\n  lab_0x408d95:;\n    int64_t v4 = v3 + 2; // 0x408d95\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x408d9f\n        goto lab_0x408d9f_2;\n    }\n    goto lab_0x408d38;\n  lab_0x408d90:\n    // 0x408d90\n    result = v3;\n    goto lab_0x408d95;\n}\n"
        },
        {
            "funcName": "function_408db0",
            "funcStartAddr": "408db0",
            "funcEndAddr": "408dc0",
            "decompiledFuncCode": "int64_t function_408db0(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x408db0\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_408dc0",
            "funcStartAddr": "408dc0",
            "funcEndAddr": "408dc7",
            "decompiledFuncCode": "int64_t function_408dc0(int64_t a1, int64_t a2) {\n    // 0x408dc0\n    int64_t v1; // 0x408dc0\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_408dd0",
            "funcStartAddr": "408dd0",
            "funcEndAddr": "408df1",
            "decompiledFuncCode": "int64_t function_408dd0(int64_t a1, int64_t a2) {\n    // 0x408dd0\n    int64_t v1; // 0x408dd0\n    return 16 * v1 + a2;\n}\n"
        },
        {
            "funcName": "function_408e00",
            "funcStartAddr": "408e00",
            "funcEndAddr": "408f19",
            "decompiledFuncCode": "int64_t function_408e00(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_408dd0(a1, a2); // 0x408e14\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x408e1c\n    int64_t result2 = *v2; // 0x408e1c\n    if (result2 == 0) {\n        // 0x408eae\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x408e44\n            if (v3 == 0) {\n                // 0x408eae\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x408e51\n            int64_t v5 = v3; // 0x408e57\n            int64_t v6 = v1; // 0x408e57\n            int64_t result = v4; // 0x408e57\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x408e8c_2:\n                // 0x408e8c\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x408e91\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x408ea0\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x408eae\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x408e64\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x408e71\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x408e8c_2;\n                }\n                // 0x408e79\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x408e8c_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x408eae\n            return 0;\n        }\n    }\n    // 0x408ec3\n    if ((char)a4 == 0) {\n        // 0x408eae\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x408ec8\n    if (v12 == 0) {\n        // 0x408f10\n        *v2 = 0;\n        // 0x408eae\n        return result2;\n    }\n    // 0x408ed1\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x408edf\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408f20",
            "funcStartAddr": "408f20",
            "funcEndAddr": "408f9e",
            "decompiledFuncCode": "int64_t function_408f20(uint64_t a1) {\n    if (a1 == (int64_t)&g14) {\n        // 0x408f9d\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x408f2b\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g14) {\n        // 0x408f8a\n        *(int64_t *)a1 = (int64_t)&g14;\n        return 0;\n    }\n    // 0x408f39\n    __asm_comiss_2(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x408f54\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_3(v2, 0x3dcccccd); // 0x408f61\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x408f69\n    __asm_comiss_2(v4, v3);\n    __asm_comiss_2(__asm_movss(0x3f800000), v4);\n    __asm_comiss_2(v1, v3);\n    // 0x408f9d\n    return 1;\n}\n"
        },
        {
            "funcName": "function_408fa0",
            "funcStartAddr": "408fa0",
            "funcEndAddr": "4090ea",
            "decompiledFuncCode": "int64_t function_408fa0(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x408fba\n    uint64_t v2 = *v1; // 0x408fba\n    if (v2 <= a2) {\n        // 0x4090a4\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x408fa0\n    int64_t v8 = a2; // 0x408fa0\n    int64_t v9; // 0x408fa0\n    int64_t result; // 0x408fa0\n    int64_t v10; // 0x408fa0\n    while (true) {\n      lab_0x408fd6_2:\n        // 0x408fd6\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x408fd6\n        int64_t v12 = *v11; // 0x408fd6\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x408fc8;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x408fdf\n            int64_t v14 = *v13; // 0x408fdf\n            int64_t v15 = v14; // 0x408fe7\n            int64_t v16 = v12; // 0x408fe7\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x409004\n                    int64_t v19 = *v18; // 0x409004\n                    int64_t v20 = function_408dd0(v3, v19); // 0x40900d\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x409012\n                    int64_t v22 = *v21; // 0x409012\n                    int64_t * v23 = (int64_t *)v20; // 0x409016\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x408ff0\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40903f\n                            break;\n                        }\n                    } else {\n                        // 0x40901c\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40903f\n                            break;\n                        }\n                    }\n                    // 0x409004\n                    v15 = v22;\n                }\n                // 0x40903f\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x409043\n                v9 = *v1;\n                goto lab_0x408fc8;\n            } else {\n                int64_t v26 = function_408dd0(v3, v25); // 0x40905b\n                int64_t * v27 = (int64_t *)v26; // 0x409060\n                if (*v27 == 0) {\n                    // 0x4090c0\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x409069\n                    int64_t * v29; // 0x408fa0\n                    int64_t v30; // 0x408fa0\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x4090cf\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x4090a4\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x4090cf\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x40907a\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x409089\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x409091\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x40909a\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x4090a4\n                    break;\n                }\n                goto lab_0x408fd6_2;\n            }\n        }\n    }\n    // 0x4090a4\n    return result;\n  lab_0x408fc8:;\n    int64_t v36 = v10 + 16; // 0x408fc8\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x408fd6_2;\n    // 0x408fd6\n    goto lab_0x408fd6_2;\n}\n"
        },
        {
            "funcName": "function_4090f0",
            "funcStartAddr": "4090f0",
            "funcEndAddr": "4090f5",
            "decompiledFuncCode": "int64_t function_4090f0(int64_t a1) {\n    // 0x4090f0\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_409100",
            "funcStartAddr": "409100",
            "funcEndAddr": "409105",
            "decompiledFuncCode": "int64_t function_409100(int64_t a1) {\n    // 0x409100\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_409110",
            "funcStartAddr": "409110",
            "funcEndAddr": "409115",
            "decompiledFuncCode": "int64_t function_409110(int64_t a1) {\n    // 0x409110\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_409120",
            "funcStartAddr": "409120",
            "funcEndAddr": "40916f",
            "decompiledFuncCode": "int64_t function_409120(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x409123\n    int64_t result = 0; // 0x40912c\n    if (v1 <= a1) {\n      lab_0x40916d:\n        // 0x40916d\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x409130\n    while (*(int64_t *)v3 == 0) {\n        // 0x409130\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x40913f\n    int64_t v6 = v5; // 0x40914b\n    int64_t v7 = 1; // 0x40914b\n    int64_t v8; // 0x409120\n    int64_t v9; // 0x409150\n    int64_t v10; // 0x409154\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x409150\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x409160\n    int64_t v12 = v3 + 16; // 0x409164\n    while (v12 < v1) {\n        // 0x409139\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x409130\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x40913f\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x409150\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x40915d\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x40916d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409170",
            "funcStartAddr": "409170",
            "funcEndAddr": "4091d7",
            "decompiledFuncCode": "int64_t function_409170(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x409173\n    int64_t v2 = a1; // 0x40917f\n    int64_t v3 = 0; // 0x40917f\n    int64_t v4 = 0; // 0x40917f\n    int64_t v5 = 0; // 0x40917f\n    int64_t v6 = 0; // 0x40917f\n    int64_t v7; // 0x409170\n    int64_t v8; // 0x409170\n    int64_t v9; // 0x409170\n    if (v1 > a1) {\n        while (true) {\n          lab_0x409191_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x409188;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x409197\n                int64_t v13 = v10 + 1; // 0x40919b\n                int64_t v14 = v11 + 1; // 0x40919f\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x4091a6\n                int64_t v16 = v14; // 0x4091a6\n                if (v12 == 0) {\n                    goto lab_0x409188;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x4091b0\n                    int64_t v18 = v16 + 1; // 0x4091b4\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x4091b0\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x4091bd\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x4091c6\n                        break;\n                    }\n                    goto lab_0x409191_2;\n                }\n            }\n        }\n    }\n  lab_0x4091c6:\n    // 0x4091c6\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x4091cf\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x4091ce\n    return 0;\n  lab_0x409188:;\n    int64_t v20 = v8 + 16; // 0x409188\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x4091c6\n        goto lab_0x4091c6;\n    }\n    goto lab_0x409191_2;\n    // 0x409191\n    goto lab_0x409191_2;\n}\n"
        },
        {
            "funcName": "function_4091e0",
            "funcStartAddr": "4091e0",
            "funcEndAddr": "409328",
            "decompiledFuncCode": "int64_t function_4091e0(uint64_t a1, int64_t a2) {\n    // 0x4091e0\n    int128_t v1; // 0x4091e0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x4091f3\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x4091f7\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x4091fe\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x409210\n            while (*(int64_t *)v7 == 0) {\n                // 0x409210\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x40924d\n                    goto lab_0x40924d;\n                }\n            }\n        }\n    }\n  lab_0x40924d:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x40925c\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x4091e0\n    int128_t v10; // 0x4091e0\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x4092f3\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x4092fc\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x409293;\n        } else {\n            goto lab_0x409309;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x409286\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x409309;\n        } else {\n            goto lab_0x409293;\n        }\n    }\n  lab_0x409293:\n    // 0x409293\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x409297\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x409297\n    goto lab_0x40929c;\n  lab_0x409309:\n    // 0x409309\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x40931a\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x40929c;\n  lab_0x40929c:\n    // 0x40929c\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_409330",
            "funcStartAddr": "409330",
            "funcEndAddr": "409383",
            "decompiledFuncCode": "int64_t function_409330(int64_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int64_t v1 = function_408dd0(a1, result); // 0x40933a\n    int64_t v2 = *(int64_t *)v1; // 0x40933f\n    if (v2 == 0) {\n        // 0x40936d\n        return 0;\n    }\n    // 0x409353\n    if (v2 == result) {\n        // 0x40936d\n        return result;\n    }\n    int64_t v3 = v1; // 0x409364\n    int64_t result2 = v2; // 0x409362\n    while ((char)v1 == 0) {\n        // 0x409364\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x40936d\n            break;\n        }\n        // 0x409350\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x40936d\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x40936d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409390",
            "funcStartAddr": "409390",
            "funcEndAddr": "4093d8",
            "decompiledFuncCode": "int64_t function_409390(uint64_t a1) {\n    int64_t result = 0; // 0x409395\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x4093a7\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40939e\n    if (v1 <= a1) {\n        // 0x4093a7\n        return result;\n    }\n    int64_t v2 = a1; // 0x4093a5\n    int64_t v3 = *(int64_t *)v2; // 0x4093b9\n    result = v3;\n    while (v3 == 0) {\n        // 0x4093b0\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x4093a7\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x4093a7\n    return result;\n}\n"
        },
        {
            "funcName": "function_4093e0",
            "funcStartAddr": "4093e0",
            "funcEndAddr": "40944a",
            "decompiledFuncCode": "int64_t function_4093e0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_408dd0(a1, a2); // 0x4093ec\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x409408\n    while (*(int64_t *)v2 != a2) {\n        // 0x409400\n        if (v3 == 0) {\n            goto lab_0x409416;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x409440\n        return *(int64_t *)v3;\n    }\n  lab_0x409416:;\n    int64_t v4 = v1 + 16; // 0x409428\n    int64_t result = 0; // 0x40942f\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x409420\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x409433\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x409433\n    return result;\n}\n"
        },
        {
            "funcName": "function_409450",
            "funcStartAddr": "409450",
            "funcEndAddr": "4094b4",
            "decompiledFuncCode": "int64_t function_409450(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x409456\n    int64_t result = 0; // 0x40945a\n    if (*v1 <= a1) {\n      lab_0x409471:\n        // 0x409471\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x40945f\n    int64_t v4 = v2; // 0x409465\n    int64_t v5; // 0x409450\n    int64_t v6; // 0x409450\n    int64_t v7; // 0x409498\n    int64_t v8; // 0x4094a1\n    int64_t v9; // 0x409481\n    int64_t v10; // 0x409485\n    if (v3 != 0) {\n        // 0x409478\n        if (v2 >= a3) {\n            // break -> 0x409471\n            break;\n        }\n        // 0x40947d\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x409495\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x409490\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x409495\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x409467\n    result = v11;\n    while (*v1 > v12) {\n        // 0x40945f\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x409478\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x409471\n                break;\n            }\n            // 0x40947d\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x409495\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x409490\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x409495\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x409467\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x409471\n    return result;\n}\n"
        },
        {
            "funcName": "function_4094c0",
            "funcStartAddr": "4094c0",
            "funcEndAddr": "409538",
            "decompiledFuncCode": "int64_t function_4094c0(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x4094d1\n    int64_t result = 0; // 0x4094d5\n    if (v1 <= a1) {\n      lab_0x4094f4:\n        // 0x4094f4\n        return result;\n    }\n    int64_t v2 = a1; // 0x4094ea\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x4094e8\n    int64_t v5 = v2; // 0x4094e8\n    int64_t v6 = v3; // 0x4094e8\n    int64_t v7; // 0x4094c0\n    int64_t v8; // 0x409518\n    int64_t v9; // 0x40951c\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x409518\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x409528\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x409518\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x4094e2\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x409518\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x409528\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x409518\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x4094ea\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x4094f4\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409540",
            "funcStartAddr": "409540",
            "funcEndAddr": "409571",
            "decompiledFuncCode": "int64_t function_409540(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x409547\n    if (v1 == 0) {\n        // 0x40956d\n        return 0;\n    }\n    int64_t result = 0; // 0x409547\n    v2++;\n    char v3 = *(char *)v2; // 0x409563\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x40956d\n    return result;\n}\n"
        },
        {
            "funcName": "function_409580",
            "funcStartAddr": "409580",
            "funcEndAddr": "4095a0",
            "decompiledFuncCode": "int64_t function_409580(int64_t a1) {\n    // 0x409580\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_4095a0",
            "funcStartAddr": "4095a0",
            "funcEndAddr": "40972a",
            "decompiledFuncCode": "int64_t function_4095a0(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x4095a0\n    int128_t v1; // 0x4095a0\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x4095da\n    int64_t result = (int64_t)mem; // 0x4095da\n    if (mem == NULL) {\n        // 0x40968a\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x4095eb\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x4095a0\n    int128_t v6; // 0x4095a0\n    if (a2 == 0) {\n        // 0x4096a0\n        *v4 = (int64_t)&g14;\n        int64_t v7 = function_408f20(v3); // 0x4096a8\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x4096ad\n        if ((char)v7 == 0) {\n            // 0x409680\n            free(mem);\n            // 0x40968a\n            return 0;\n        }\n        // 0x4096b9\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x409703;\n        } else {\n            goto lab_0x4096be;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_408f20(v3) == 0) {\n            // 0x409680\n            free(mem);\n            // 0x40968a\n            return 0;\n        }\n        // 0x409605\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_408d10(a1); // 0x409613\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x409680\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x409680\n                free(mem);\n                // 0x40968a\n                return 0;\n            }\n            // 0x409631\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x409680\n                free(mem);\n                // 0x40968a\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x409642\n            int64_t v10 = (int64_t)mem2; // 0x409642\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x409680\n                free(mem);\n                // 0x40968a\n                return 0;\n            }\n            // 0x40964f\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x408db0 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x408dc0 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x40968a\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x4096f8\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x4096be;\n        } else {\n            goto lab_0x409703;\n        }\n    }\n  lab_0x409703:\n    // 0x409703\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x409713\n    int128_t v13 = v6; // 0x40971c\n    int128_t v14 = __asm_addss(v12, v12); // 0x40971c\n    goto lab_0x4096c7;\n  lab_0x4096be:\n    // 0x4096be\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x4096c7;\n  lab_0x4096c7:\n    // 0x4096c7\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x409680\n    free(mem);\n    // 0x40968a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_409730",
            "funcStartAddr": "409730",
            "funcEndAddr": "4097d8",
            "decompiledFuncCode": "int64_t function_409730(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40973a\n    uint64_t v2 = *v1; // 0x40973a\n    int64_t result; // 0x409730\n    if (v2 <= a1) {\n      lab_0x4097c3:\n        // 0x4097c3\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x409748\n    while (*v6 == 0) {\n        // 0x409748\n        v7 = v5 + 16;\n        int64_t v8; // 0x409730\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x4097c3\n            goto lab_0x4097c3;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x409759\n    int64_t v10 = *v9; // 0x409759\n    int64_t v11 = *v3; // 0x40975e\n    int64_t v12 = v11; // 0x409765\n    int64_t v13 = v10; // 0x409765\n    int64_t result2 = v11; // 0x409765\n    int64_t * v14; // 0x40977e\n    int64_t v15; // 0x40977e\n    int64_t v16; // 0x40977a\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x409775\n            v16 = *v3;\n        }\n        // 0x40977e\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x409770\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x409775\n                v16 = *v3;\n            }\n            // 0x40977e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40979d\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x4097b0\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x4097bd\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40974c\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x409748\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x4097c3\n                goto lab_0x4097c3;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x409759\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x409775\n                v16 = *v3;\n            }\n            // 0x40977e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x409770\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x409775\n                    v16 = *v3;\n                }\n                // 0x40977e\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40979d\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x4097c3\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4097e0",
            "funcStartAddr": "4097e0",
            "funcEndAddr": "4098b6",
            "decompiledFuncCode": "int64_t function_4097e0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x4097ef\n    uint64_t v2 = *v1; // 0x4097ef\n    int64_t v3 = a1; // 0x4097f3\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x409843;\n    } else {\n        // 0x4097f5\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x409843;\n        } else {\n            // 0x4097fc\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x409811\n                int64_t v6; // 0x409808\n                while (v5 == 0) {\n                    // 0x409808\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x409843\n                        goto lab_0x409843;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x409828\n                int64_t v8 = v7; // 0x40982f\n                int64_t v9 = v5; // 0x40982f\n                int64_t v10; // 0x4097e0\n                int64_t v11; // 0x409828\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x409820\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x409823\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x409836\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x409811\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x409808\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x409843\n                            goto lab_0x409843;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x409823\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x409820\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x409823\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x409831\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x409843;\n            } else {\n                goto lab_0x40987c;\n            }\n        }\n    }\n  lab_0x409843:\n    // 0x409843\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x409850\n        int64_t v14 = v13; // 0x409857\n        int64_t v15 = v2; // 0x409857\n        int64_t v16; // 0x409860\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x409860\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x409871\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x409871\n        int64_t v18 = v15; // 0x40987a\n        int64_t v19 = v17; // 0x40987a\n        while (v15 > v17) {\n            // 0x409850\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x409860\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x409871\n                v15 = *v1;\n            }\n            // 0x409871\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x40987c;\n  lab_0x40987c:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x40987c\n    if (v20 == 0) {\n        // 0x4098a1\n        free(NULL);\n        free((int64_t *)a1);\n        return &g62;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x409890\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x40989f\n    while (v21 != 0) {\n        // 0x409890\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x4098a1\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g62;\n}\n"
        },
        {
            "funcName": "function_4098c0",
            "funcStartAddr": "4098c0",
            "funcEndAddr": "409aba",
            "decompiledFuncCode": "int64_t function_4098c0(int64_t a1, uint64_t a2) {\n    // 0x4098c0\n    int128_t v1; // 0x4098c0\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x4098cb\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x4098c0\n        if (a2 < 0) {\n            // 0x409a40\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x409a50\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x4098e0\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x4098e9\n        __asm_comiss(__asm_divss_5(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x409a32\n        return 0;\n    }\n    uint64_t nmemb = function_408d10(a2); // 0x409923\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x409a32\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40995b\n    if (*v6 == nmemb) {\n        // 0x409a32\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40996d\n    int64_t v7 = (int64_t)mem; // 0x40996d\n    int64_t v8 = v7; // bp-104, 0x409972\n    if (mem == NULL) {\n        // 0x409a32\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x4099ca\n    int64_t v10 = *v9; // 0x4099ca\n    int64_t v11 = function_408fa0(&v8, a1, 0); // 0x4099d3\n    int64_t result = v11 & 0xffffffff; // 0x4099d8\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x409994\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x4099f6\n        function_408fa0(v13, v12, 1);\n        function_408fa0(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x409a80\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x409a32\n    return result;\n}\n"
        },
        {
            "funcName": "function_409ac0",
            "funcStartAddr": "409ac0",
            "funcEndAddr": "409d34",
            "decompiledFuncCode": "int64_t function_409ac0(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x409ac0\n    int128_t v1; // 0x409ac0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x409ac0\n    int64_t v5 = function_408e00(a1, a2, &v4, 0); // 0x409ae1\n    if (v5 != 0) {\n        // 0x409aee\n        if (a3 != NULL) {\n            // 0x409af5\n            *a3 = v5;\n        }\n        // 0x409af9\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x409b08\n    uint64_t v7 = *v6; // 0x409b08\n    int64_t v8; // 0x409ac0\n    int64_t v9; // 0x409ac0\n    int64_t v10; // 0x409ac0\n    int128_t v11; // 0x409ac0\n    int128_t v12; // 0x409ac0\n    int64_t v13; // 0x409ac0\n    if (v7 < 0) {\n        // 0x409b90\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x409ba0\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x409ba4\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x409ba9\n        int128_t v17 = __asm_addss(v15, v15); // 0x409bad\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x409b2b;\n        } else {\n            goto lab_0x409bba;\n        }\n    } else {\n        // 0x409b11\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x409b15\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x409b19\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x409b1e\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x409bba;\n        } else {\n            goto lab_0x409b2b;\n        }\n    }\n  lab_0x409b2b:\n    // 0x409b2b\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x409b34\n    __asm_comiss_2(v11, v21);\n    int128_t v22 = v21; // 0x409b3c\n    int128_t v23 = v11; // 0x409b3c\n    if (v13 == 0) {\n        goto lab_0x409b42;\n    } else {\n        goto lab_0x409be1;\n    }\n  lab_0x409bba:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x409bc7\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x409bca\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x409bd3\n    __asm_comiss_2(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x409b42;\n    } else {\n        goto lab_0x409be1;\n    }\n  lab_0x409b42:;\n    int64_t * v28 = (int64_t *)v4; // 0x409b47\n    if (*v28 == 0) {\n        // 0x409c58\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x409c61\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x409b52\n    int64_t v31 = *v30; // 0x409b52\n    int64_t * v32; // 0x409ac0\n    int64_t v33; // 0x409ac0\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x409c7d\n        if (mem == NULL) {\n            // 0x409af9\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x409c7d\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x409b67\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x409b7d\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x409be1:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x409be1\n    function_408f20(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x409bea\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x409bee\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x409bf2\n    int128_t v44; // 0x409ac0\n    if (v42 < 0) {\n        // 0x409cb0\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x409cc0\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x409c00\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x409c09\n    int128_t v47; // 0x409ac0\n    int64_t v48; // 0x409ac0\n    if (v46 < 0) {\n        // 0x409c90\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x409c9d\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x409ca0\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x409c12\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x409c16\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x409c1b\n    __asm_comiss_2(v47, __asm_mulss_4(__asm_movaps(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x409c2b\n        int128_t v53 = v52; // 0x409c34\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x409cd0\n            v53 = __asm_mulss_4(v52, v43);\n        }\n        // 0x409c3a\n        __asm_comiss(v53, 0x5f800000);\n        // 0x409af9\n        return 0xffffffff;\n    }\n    goto lab_0x409b42;\n}\n"
        },
        {
            "funcName": "function_409d40",
            "funcStartAddr": "409d40",
            "funcEndAddr": "409d7b",
            "decompiledFuncCode": "int64_t function_409d40(int64_t a1, int64_t a2) {\n    // 0x409d40\n    int64_t v1; // bp-16, 0x409d40\n    int64_t v2; // 0x409d40\n    int32_t v3 = function_409ac0(a1, a2, &v1, v2); // 0x409d52\n    if (v3 == -1) {\n        // 0x409d60\n        return 0;\n    }\n    // 0x409d57\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_409d80",
            "funcStartAddr": "409d80",
            "funcEndAddr": "409f57",
            "decompiledFuncCode": "int64_t function_409d80(int64_t a1) {\n    // 0x409d80\n    int128_t v1; // 0x409d80\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x409d80\n    int64_t v5; // 0x409d80\n    int64_t result = function_408e00(a1, v5, &v4, 1); // 0x409d95\n    if (result == 0) {\n        // 0x409db2\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x409da7\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x409db2\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x409dc0\n    uint64_t v8 = *v7 - 1; // 0x409dc4\n    *v7 = v8;\n    int64_t v9; // 0x409d80\n    int64_t v10; // 0x409d80\n    int64_t v11; // 0x409d80\n    int128_t v12; // 0x409d80\n    int128_t v13; // 0x409d80\n    int64_t v14; // 0x409d80\n    if (v8 < 0) {\n        // 0x409eb0\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x409ec0\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x409ec4\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x409ec9\n        int128_t v18 = __asm_addss(v16, v16); // 0x409ecd\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x409dec;\n        } else {\n            goto lab_0x409eda;\n        }\n    } else {\n        // 0x409dd2\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x409dd6\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x409dda\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x409ddf\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x409eda;\n        } else {\n            goto lab_0x409dec;\n        }\n    }\n  lab_0x409dec:\n    // 0x409dec\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x409df0\n    int64_t v23 = v14; // 0x409df0\n    int128_t v24 = v12; // 0x409df0\n    int64_t v25 = v10; // 0x409df0\n    int128_t v26 = v22; // 0x409df0\n    goto lab_0x409df5;\n  lab_0x409eda:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x409ee7\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x409eea\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x409df5;\n  lab_0x409df5:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x409df5\n    __asm_comiss_2(v28, v27);\n    if (v23 == 0) {\n        // 0x409db2\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x409dfe\n    function_408f20(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x409e07\n    int64_t v31 = *(int64_t *)v29; // 0x409e0b\n    int128_t v32; // 0x409d80\n    if (v30 < 0) {\n        // 0x409f20\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x409f30\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x409e18\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x409e21\n    int128_t v35; // 0x409d80\n    int64_t v36; // 0x409d80\n    if (v34 < 0) {\n        // 0x409f00\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x409f0d\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x409f10\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x409e2e\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x409e32\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x409e37\n    __asm_comiss_2(__asm_mulss_4(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x409db2\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x409e48\n    int128_t v41 = v40; // 0x409e51\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x409e53\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x409e58\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x409f48\n    if ((char)function_4098c0(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x409db2\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x409e7a\n    if (*v43 != 0) {\n        int64_t v44; // 0x409d80\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x409e88\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x409e99\n    *v43 = 0;\n    // 0x409db2\n    return result;\n}\n"
        },
        {
            "funcName": "function_409f60",
            "funcStartAddr": "409f60",
            "funcEndAddr": "409f7b",
            "decompiledFuncCode": "int64_t function_409f60(int64_t a1, int64_t a2) {\n    // 0x409f60\n    *(int64_t *)(a1 + 20) = 0;\n    *(char *)(a1 + 28) = 1;\n    int32_t v1 = a2; // 0x409f6c\n    *(int32_t *)a1 = v1;\n    *(int32_t *)(a1 + 4) = v1;\n    *(int32_t *)(a1 + 8) = v1;\n    *(int32_t *)(a1 + 12) = v1;\n    *(int32_t *)(a1 + 16) = v1;\n    int64_t result; // 0x409f60\n    return result;\n}\n"
        },
        {
            "funcName": "function_409f80",
            "funcStartAddr": "409f80",
            "funcEndAddr": "409f85",
            "decompiledFuncCode": "int64_t function_409f80(int64_t a1) {\n    // 0x409f80\n    return (int64_t)*(char *)(a1 + 28);\n}\n"
        },
        {
            "funcName": "function_409f90",
            "funcStartAddr": "409f90",
            "funcEndAddr": "409fc5",
            "decompiledFuncCode": "int64_t function_409f90(int64_t a1, int32_t a2) {\n    char * v1 = (char *)(a1 + 28); // 0x409f90\n    int32_t * v2 = (int32_t *)(a1 + 20); // 0x409f94\n    int32_t v3 = (int32_t)(*v1 ^ 1); // 0x409f9d\n    uint32_t v4 = (*v2 + v3) % 4; // 0x409f9f\n    int32_t * v5 = (int32_t *)((int64_t)(4 * v4) + a1); // 0x409fa8\n    *v5 = a2;\n    int32_t * v6 = (int32_t *)(a1 + 24); // 0x409fae\n    int32_t v7 = *v6; // 0x409fae\n    *v2 = v4;\n    if (v7 == v4) {\n        // 0x409fb8\n        *v6 = (v7 + v3) % 4;\n    }\n    // 0x409fc0\n    *v1 = 0;\n    return (int64_t)*v5;\n}\n"
        },
        {
            "funcName": "function_409fd0",
            "funcStartAddr": "409fd0",
            "funcEndAddr": "40a011",
            "decompiledFuncCode": "int64_t function_409fd0(int64_t a1) {\n    char * v1 = (char *)(a1 + 28); // 0x409fd4\n    if (*v1 != 0) {\n        abort();\n        // UNREACHABLE\n    }\n    int32_t * v2 = (int32_t *)(a1 + 20); // 0x409fde\n    uint32_t v3 = *v2; // 0x409fde\n    int32_t * v4 = (int32_t *)(4 * (int64_t)v3 + a1); // 0x409feb\n    int64_t result = (int64_t)*v4; // 0x409feb\n    *v4 = *(int32_t *)(a1 + 16);\n    if (v3 == *(int32_t *)(a1 + 24)) {\n        // 0x40a008\n        *v1 = 1;\n        return result;\n    }\n    // 0x409ff4\n    *v2 = (v3 + 3) % 4;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a020",
            "funcStartAddr": "40a020",
            "funcEndAddr": "40a582",
            "decompiledFuncCode": "int64_t function_40a020(void) {\n    char * v1 = nl_langinfo(14); // 0x40a036\n    char * v2 = g56; // 0x40a03b\n    char * v3; // 0x40a020\n    int64_t v4; // 0x40a020\n    int64_t v5; // 0x40a020\n    int64_t v6; // 0x40a020\n    int64_t v7; // 0x40a020\n    int32_t size; // 0x40a020\n    int32_t size2; // 0x40a020\n    int32_t len; // 0x40a0f2\n    int64_t v8; // 0x40a0f2\n    char * env_val; // 0x40a0dd\n    if (v2 == NULL) {\n        // 0x40a0d8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x40a145;\n        } else {\n            // 0x40a0ea\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x40a145;\n            } else {\n                // 0x40a0ef\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40a0dd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40a575\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x40a145;\n                    } else {\n                        // 0x40a4e9\n                        size2 = len + 14;\n                        goto lab_0x40a10b;\n                    }\n                } else {\n                    goto lab_0x40a10b;\n                }\n            }\n        }\n    } else {\n        // 0x40a020\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40a05a;\n    }\n  lab_0x40a38c:;\n    // 0x40a38c\n    struct _IO_FILE * stream; // 0x40a1cb\n    int32_t v10 = __uflow(stream); // 0x40a38f\n    int64_t v11; // 0x40a020\n    int64_t v12 = v11; // 0x40a399\n    int64_t v13; // 0x40a020\n    int64_t v14 = v13; // 0x40a399\n    int32_t v15 = v10; // 0x40a399\n    int64_t v16; // 0x40a020\n    int64_t v17 = v16; // 0x40a399\n    int64_t v18 = v11; // 0x40a399\n    int64_t v19 = v13; // 0x40a399\n    int64_t v20 = v16; // 0x40a399\n    if (v10 == -1) {\n        // break -> 0x40a39f\n        goto lab_0x40a39f;\n    }\n    goto lab_0x40a219;\n  lab_0x40a20e:;\n    // 0x40a20e\n    int64_t v90; // 0x40a020\n    int64_t * v32; // 0x40a200\n    *v32 = v90 + 1;\n    int64_t v89; // 0x40a020\n    v12 = v89;\n    int64_t v91; // 0x40a020\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x40a020\n    v17 = v92;\n    goto lab_0x40a219;\n  lab_0x40a219:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x40a020\n    int32_t v25; // bp-120, 0x40a020\n    int32_t v26; // bp-184, 0x40a020\n    int64_t v27; // 0x40a1cb\n    int64_t v28; // 0x40a1e8\n    int64_t v29; // 0x40a1ed\n    int64_t * v30; // 0x40a204\n    switch (c) {\n        case 32: {\n            goto lab_0x40a200;\n        }\n        case 10: {\n            goto lab_0x40a200;\n        }\n        case 9: {\n            goto lab_0x40a200;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x40a3f1\n            int32_t v33; // 0x40a020\n            char v34; // 0x40a020\n            int32_t v35; // 0x40a3fe\n            if (v31 < *v30) {\n                // 0x40a3d0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40a3fb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x40a3f1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x40a3d0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40a3fb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x40a3e0\n                v36 = v33;\n            }\n            // 0x40a4cf\n            if (v36 == -1) {\n                // break -> 0x40a39f\n                break;\n            }\n            goto lab_0x40a200;\n        }\n        default: {\n            // 0x40a22f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40a39f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x40a258\n            int64_t v39 = v37 + 4; // 0x40a25a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x40a266\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x40a268\n            while (v41 == 0) {\n                // 0x40a258\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x40a286\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x40a292\n            int64_t v45 = v43 + 4; // 0x40a294\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x40a2a0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x40a2a2\n            while (v47 == 0) {\n                // 0x40a292\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40a28f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x40a2b8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x40a2c8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40a2cc\n            int64_t v52 = v51 + v48; // 0x40a2d5\n            int64_t * mem; // 0x40a020\n            int64_t v53; // 0x40a020\n            int64_t v54; // 0x40a020\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40a40b\n                int64_t v56 = v55 + 3; // 0x40a417\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x40a2f1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x40a300\n            if (mem == NULL) {\n                // 0x40a52c\n                free((int64_t *)v21);\n                function_40a630(v27, v53);\n                v24 = (int64_t)&g12;\n                goto lab_0x40a1a4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x40a318\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x40a322\n            uint32_t v62 = (int32_t)v59; // 0x40a325\n            int64_t v63; // 0x40a020\n            if (v62 >= 8) {\n                // 0x40a434\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40a44e\n                int64_t v66 = v61 - v65; // 0x40a452\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40a45d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40a46e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40a46e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40a46b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40a4ff\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x40a337\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40a33b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40a34b\n            int64_t v74 = v60 - 1; // 0x40a34f\n            uint32_t v75 = (int32_t)v73; // 0x40a354\n            int64_t v76; // 0x40a020\n            if (v75 >= 8) {\n                // 0x40a482\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40a48c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40a49c\n                int64_t v80 = v74 - v79; // 0x40a4a0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40a4ab\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40a4bb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x40a4b9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x40a516\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40a51e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x40a366\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40a36a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x40a563\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40a37e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40a20e;\n            } else {\n                goto lab_0x40a38c;\n            }\n        }\n    }\n  lab_0x40a200:;\n    int64_t v93 = v23; // 0x40a020\n    int64_t v94 = v22; // 0x40a020\n    int64_t v95 = v21; // 0x40a020\n    goto lab_0x40a200_2;\n  lab_0x40a145:;\n    int64_t * mem3 = malloc(size); // 0x40a145\n    int64_t v97 = (int64_t)&g12; // 0x40a150\n    int64_t v98; // 0x40a020\n    int64_t path; // 0x40a020\n    if (mem3 == NULL) {\n        goto lab_0x40a122;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x40a145\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x40a166;\n    }\n  lab_0x40a05a:;\n    int64_t str = v1 == NULL ? (int64_t)&g12 : (int64_t)v1; // 0x40a04d\n    char v100 = *v3; // 0x40a05a\n    int64_t v101; // 0x40a020\n    if (v100 == 0) {\n        // 0x40a0b4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x40a020\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x40a020\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x40a0a0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x40a0a7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x40a070\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40a07d\n        char v107 = *(char *)v106; // 0x40a082\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x40a0b4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40a08b\n    v104 = v103 + 1;\n  lab_0x40a0a7:\n    // 0x40a0b4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x40a122:;\n    char * v108 = (char *)v97;\n    g56 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40a05a;\n  lab_0x40a166:;\n    int64_t v109 = v98 + path; // 0x40a166\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x40a192\n    v24 = (int64_t)&g12;\n    if (fd >= 0) {\n        // 0x40a1c1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40a4f2\n            close(fd);\n            v24 = (int64_t)&g12;\n        } else {\n            // 0x40a1e5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x40a200_2:;\n                uint64_t v96 = *v32; // 0x40a200\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40a38c;\n                } else {\n                    goto lab_0x40a20e;\n                }\n            }\n          lab_0x40a39f:\n            // 0x40a39f\n            function_40a630(v27, v19);\n            v24 = (int64_t)&g12;\n            if (v18 != 0) {\n                // 0x40a3be\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x40a1a4;\n  lab_0x40a10b:;\n    int64_t * mem4 = malloc(size2); // 0x40a10b\n    v97 = (int64_t)&g12;\n    if (mem4 != NULL) {\n        // 0x40a1b1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x40a166;\n    } else {\n        goto lab_0x40a122;\n    }\n  lab_0x40a1a4:\n    // 0x40a1a4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x40a122;\n}\n"
        },
        {
            "funcName": "function_40a590",
            "funcStartAddr": "40a590",
            "funcEndAddr": "40a5da",
            "decompiledFuncCode": "int64_t function_40a590(int64_t fd, int64_t path, int32_t oflag, int64_t a4) {\n    uint32_t v1 = openat((int32_t)fd, (char *)path, oflag); // 0x40a5a2\n    return function_40a5e0((int64_t)v1);\n}\n"
        },
        {
            "funcName": "function_40a5e0",
            "funcStartAddr": "40a5e0",
            "funcEndAddr": "40a62e",
            "decompiledFuncCode": "int64_t function_40a5e0(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x40a5ec\n    if (fd >= 3) {\n        // 0x40a5f1\n        return a1 & 0xffffffff;\n    }\n    // 0x40a600\n    int64_t v1; // 0x40a5e0\n    int64_t v2 = function_40a890(a1, v1); // 0x40a600\n    int32_t * v3 = __errno_location(); // 0x40a608\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40a630",
            "funcStartAddr": "40a630",
            "funcEndAddr": "40a6ab",
            "decompiledFuncCode": "int64_t function_40a630(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40a637\n    if (fileno(stream) < 0) {\n        // 0x40a697\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40a64a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40a67b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x40a697\n            return fclose(stream);\n        }\n    }\n    // 0x40a64c\n    if ((int32_t)function_40a7f0(a1, v1) == 0) {\n        // 0x40a697\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x40a658\n    int32_t v3 = *v2; // 0x40a660\n    int64_t result = fclose(stream); // 0x40a66e\n    if (v3 != 0) {\n        // 0x40a6a0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x40a670\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a6b0",
            "funcStartAddr": "40a6b0",
            "funcEndAddr": "40a7e5",
            "decompiledFuncCode": "int64_t function_40a6b0(int64_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x40a6e0\n    if (cmd != 1030) {\n        // 0x40a790\n        return fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40a6ec\n    int64_t v2; // 0x40a6b0\n    if (g57 < 0) {\n        int64_t v3 = function_40a6b0(fd, 0, v1, a4); // 0x40a734\n        int64_t v4 = v3 & 0xffffffff; // 0x40a739\n        if ((int32_t)v3 < 0) {\n            // 0x40a720\n            return v4 & 0xffffffff;\n        }\n        // 0x40a73f\n        v2 = v4;\n        if (g57 != -1) {\n            // 0x40a720\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x40a707\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x40a716\n            g57 = 1;\n            // 0x40a720\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_40a6b0(fd & 0xffffffff, 0, v1, a4); // 0x40a7c7\n        int64_t v7 = v6 & 0xffffffff; // 0x40a7cc\n        if ((int32_t)v6 < 0) {\n            // 0x40a720\n            return v7 & 0xffffffff;\n        }\n        // 0x40a7d6\n        g57 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x40a74f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40a75a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x40a720\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x40a772\n    close(fd2);\n    // 0x40a720\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40a7f0",
            "funcStartAddr": "40a7f0",
            "funcEndAddr": "40a830",
            "decompiledFuncCode": "int64_t function_40a7f0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40a80a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40a80a\n        return fflush(stream);\n    }\n    // 0x40a818\n    function_40a830(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_40a830",
            "funcStartAddr": "40a830",
            "funcEndAddr": "40a887",
            "decompiledFuncCode": "int64_t function_40a830(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x40a830\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40a83a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40a86b\n    int64_t result = -1; // 0x40a874\n    if (v1 != -1) {\n        // 0x40a876\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x40a882\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a890",
            "funcStartAddr": "40a890",
            "funcEndAddr": "40a89e",
            "decompiledFuncCode": "int64_t function_40a890(int64_t a1, int64_t a2) {\n    // 0x40a890\n    int64_t v1; // 0x40a890\n    return function_40a6b0(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_40a8a0",
            "funcStartAddr": "40a8a0",
            "funcEndAddr": "40a8fd",
            "decompiledFuncCode": "int64_t function_40a8a0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40a8a0\n    return function_401790();\n}\n"
        },
        {
            "funcName": "function_40a900",
            "funcStartAddr": "40a900",
            "funcEndAddr": "40a901",
            "decompiledFuncCode": "int64_t function_40a900(void) {\n    // 0x40a900\n    int64_t result; // 0x40a900\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a910",
            "funcStartAddr": "40a910",
            "funcEndAddr": "40a928",
            "decompiledFuncCode": "int64_t function_40a910(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40a910\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g19);\n}\n"
        },
        {
            "funcName": "function_40a928",
            "funcStartAddr": "40a928",
            "funcEndAddr": "40a948",
            "decompiledFuncCode": "int64_t function_40a928(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g15; // 0x40a932\n    while (*(int64_t *)v1 != -1) {\n        // 0x40a933\n        v1 -= 8;\n    }\n    // 0x40a944\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_chmod.elf"
}