{
    "funcInfo": [
        {
            "funcName": "function_401d40",
            "funcStartAddr": "401d40",
            "funcEndAddr": "401d45",
            "decompiledFuncCode": "int64_t function_401d40(void) {\n    // 0x401d40\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401d45",
            "funcStartAddr": "401d45",
            "funcEndAddr": "401d4a",
            "decompiledFuncCode": "int64_t function_401d45(void) {\n    // 0x401d45\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d4a",
            "funcStartAddr": "401d4a",
            "funcEndAddr": "401d4f",
            "decompiledFuncCode": "int64_t function_401d4a(void) {\n    // 0x401d4a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d4f",
            "funcStartAddr": "401d4f",
            "funcEndAddr": "401d54",
            "decompiledFuncCode": "int64_t function_401d4f(void) {\n    // 0x401d4f\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401d54",
            "funcStartAddr": "401d54",
            "funcEndAddr": "401d59",
            "decompiledFuncCode": "int64_t function_401d54(void) {\n    // 0x401d54\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d59",
            "funcStartAddr": "401d59",
            "funcEndAddr": "401d5e",
            "decompiledFuncCode": "int64_t function_401d59(void) {\n    // 0x401d59\n    return abort();\n}\n"
        },
        {
            "funcName": "function_401d5e",
            "funcStartAddr": "401d5e",
            "funcEndAddr": "401d63",
            "decompiledFuncCode": "int64_t function_401d5e(void) {\n    // 0x401d5e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d70",
            "funcStartAddr": "401d70",
            "funcEndAddr": "4021a2",
            "decompiledFuncCode": "int64_t function_401d70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x401d70\n    function_403110(a2);\n    setlocale(LC_ALL, (char *)&g12);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_409580(0x402de0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v1; // 0x401d70\n    int64_t v2; // 0x401d70\n    while (true) {\n        // 0x401dc0\n        v2 = 0;\n        int64_t v3 = 2; // 0x401d70\n        while (true) {\n          lab_0x401dc0_2:\n            // 0x401dc0\n            v1 = v3;\n            uint32_t v4 = (int32_t)function_4089a0(a1 & 0xffffffff, a2, \"bcp\", &g4, 0, a6);\n            switch (v4) {\n                case -1: {\n                    goto lab_0x401e60;\n                }\n                case 98: {\n                    // 0x401dc0\n                    v3 = 0;\n                    goto lab_0x401dc0_2;\n                }\n                default: {\n                    if (v4 <= 98) {\n                        if (v4 == -131) {\n                            // 0x401dff\n                            function_4051b0((int64_t)g29, \"dircolors\", \"GNU coreutils\", (int64_t)g18, \"H. Peter Anvin\", 0);\n                            exit(0);\n                            // UNREACHABLE\n                        }\n                        if (v4 == -130) {\n                            // 0x401e4b\n                            function_402a50(0);\n                            // UNREACHABLE\n                        }\n                        goto lab_0x402125;\n                    }\n                    // 0x401de8\n                    if (v4 != 99) {\n                        // break -> 0x401e30\n                        break;\n                    }\n                    // 0x401dc0\n                    v3 = 1;\n                    goto lab_0x401dc0_2;\n                }\n            }\n        }\n    }\n  lab_0x401e60:\n    if (v2 != 0 == (v1 != 2)) {\n        // 0x40212f\n        error(0, (int32_t)\"the options to output dircolors' internal database and\\nto select a shell syntax are mutually exclusive\" ^ (int32_t)\"the options to output dircolors' internal database and\\nto select a shell syntax are mutually exclusive\", dcgettext(NULL, \"the options to output dircolors' internal database and\\nto select a shell syntax are mutually exclusive\", 5));\n        // 0x402125\n        function_402a50(1);\n        // UNREACHABLE\n    }\n    uint32_t v5 = (int32_t)a1 - g27; // 0x401e67\n    int64_t v6 = 8 * (int64_t)g27 + a2; // 0x401e6a\n    int64_t v7; // 0x401d70\n    if ((v2 ^ 1) < (int64_t)v5) {\n        if (v2 != 0) {\n            // 0x4020cc\n            function_404d30(*(int64_t *)v6);\n            error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n            __fprintf_chk(g32, 1, \"%s\\n\", dcgettext(NULL, \"file operands cannot be combined with --print-database (-p)\", 5));\n          lab_0x402125:\n            // 0x402125\n            function_402a50(1);\n            // UNREACHABLE\n        }\n        goto lab_0x402172;\n    } else {\n        if (v2 != 0) {\n            int64_t v8; // 0x401d70\n            for (int64_t i = (int64_t)\"# Configuration file for dircolors, a utility to help you set the\"; i < 0x104d + (int64_t)\"# Configuration file for dircolors, a utility to help you set the\"; i += -1 - v8) {\n                // 0x401e9c\n                puts((char *)i);\n                int64_t v9 = i; // 0x401eac\n                int64_t v10 = -1; // 0x401eac\n                v8 = 0;\n                while (v10 != 0) {\n                    int64_t v11 = v9;\n                    v10--;\n                    bool v12; // 0x401d70\n                    v9 = v11 + (v12 ? -1 : 1);\n                    v8 = v10;\n                    if (*(char *)v11 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v8 = 0;\n                }\n            }\n            // 0x401ec8\n            return v2 % 256 ^ 1;\n        }\n        // 0x401ed8\n        v7 = v1;\n        if (v1 == 2) {\n            char * env_val = getenv(\"SHELL\"); // 0x40202f\n            char * format; // 0x40215c\n            if (env_val == NULL) {\n                // 0x402150\n                format = dcgettext(NULL, \"no SHELL environment variable, and no shell type option given\", 5);\n                error(1, (int32_t)\"no SHELL environment variable, and no shell type option given\" ^ (int32_t)\"no SHELL environment variable, and no shell type option given\", format);\n                goto lab_0x402172;\n            } else {\n                // 0x40203d\n                if (*env_val == 0) {\n                    // 0x402150\n                    format = dcgettext(NULL, \"no SHELL environment variable, and no shell type option given\", 5);\n                    error(1, (int32_t)\"no SHELL environment variable, and no shell type option given\" ^ (int32_t)\"no SHELL environment variable, and no shell type option given\", format);\n                    goto lab_0x402172;\n                } else {\n                    char * str = (char *)function_402e80((int64_t)env_val, a2); // 0x402059\n                    v7 = 1;\n                    if (strcmp(str, \"csh\") != 0) {\n                        // 0x402062\n                        v7 = strcmp(str, \"tcsh\") == 0;\n                    }\n                    goto lab_0x401ee2;\n                }\n            }\n        } else {\n            goto lab_0x401ee2;\n        }\n    }\n  lab_0x402172:\n    // 0x402172\n    function_404d30(*(int64_t *)(v6 + 8));\n    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n    // 0x402125\n    function_402a50(1);\n    // UNREACHABLE\n  lab_0x401ee2:\n    // 0x401ee2\n    _obstack_begin(&g35, 0, 0, 0x401b90, 0x401930);\n    int64_t v13; // 0x401d70\n    int64_t str2; // 0x401f04\n    if (v5 == 0) {\n        // 0x40201a\n        v13 = function_402480(0, 0);\n        goto lab_0x401f5e;\n    } else {\n        // 0x401f04\n        str2 = *(int64_t *)v6;\n        if (strcmp((char *)str2, \"-\") == 0) {\n            goto lab_0x401f35;\n        } else {\n            // 0x401f18\n            if (function_402f60(str2, (int64_t *)\"r\", (int64_t)g30) == 0) {\n                goto lab_0x402089;\n            } else {\n                goto lab_0x401f35;\n            }\n        }\n    }\n  lab_0x401f5e:;\n    int64_t v14 = v13 & 0xffffffff;\n    if ((char)v13 == 0) {\n        // 0x401ec8\n        return v14 % 256 ^ 1;\n    }\n    int64_t v15 = (int64_t)g38; // 0x401f67\n    int64_t data = g37; // 0x401f6e\n    if (data == v15) {\n        // 0x40207d\n        g41 |= 2;\n    }\n    int64_t v16 = g40; // 0x401f84\n    int64_t v17 = g36; // 0x401f8b\n    int64_t v18 = v16 + v15 & -1 - v16; // 0x401f9e\n    int64_t v19 = g39; // 0x401fa1\n    int64_t v20 = v18 - v17 > v19 - v17 ? v19 : v18; // 0x401fc3\n    g38 = (char *)v20;\n    g37 = v20;\n    char * v21 = (int32_t)v7 != 0 ? \"setenv LS_COLORS '\" : \"LS_COLORS='\"; // 0x401fea\n    fputs_unlocked(v21, g29);\n    fwrite_unlocked((int64_t *)data, 1, (int32_t)(v15 - data), g29);\n    fputs_unlocked((int32_t)v7 != 0 ? \"'\\n\" : \"';\\nexport LS_COLORS\\n\", g29);\n    // 0x401ec8\n    return v14 % 256 ^ 1;\n  lab_0x401f35:;\n    int64_t v22 = function_402480((int64_t)g30, str2); // 0x401f3f\n    if ((int32_t)function_4055a0((int64_t)g30, str2) != 0) {\n        goto lab_0x402089;\n    } else {\n        // 0x401f5b\n        v13 = v22 & 0xffffffff;\n        goto lab_0x401f5e;\n    }\n  lab_0x402089:\n    // 0x402089\n    error(0, *__errno_location(), \"%s\", (char *)function_404bb0(0, 3, str2));\n    // 0x401ec8\n    return 1;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4021b0",
            "funcEndAddr": "4021db",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4021b0\n    int64_t v1; // 0x4021b0\n    __libc_start_main(0x401d70, (int32_t)a4, (char **)&v1, (void (*)())0x409510, (void (*)())0x409570, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4021db",
            "funcStartAddr": "4021db",
            "funcEndAddr": "4021fa",
            "decompiledFuncCode": "int64_t function_4021db(void) {\n    // 0x4021db\n    return 0x60f2c8;\n}\n"
        },
        {
            "funcName": "function_4021fa",
            "funcStartAddr": "4021fa",
            "funcEndAddr": "402231",
            "decompiledFuncCode": "int64_t function_4021fa(void) {\n    // 0x4021fa\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402231",
            "funcStartAddr": "402231",
            "funcEndAddr": "402288",
            "decompiledFuncCode": "int64_t function_402231(void) {\n    // 0x402231\n    if (g33 != 0) {\n        // 0x402287\n        int64_t result; // 0x402231\n        return result;\n    }\n    int64_t v1 = g34; // 0x402264\n    int64_t result2; // 0x402276\n    if (g34 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x402276\n        result2 = function_4021db();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x402266\n        v1++;\n    }\n    // 0x40225a\n    g34 = v1;\n    // 0x402276\n    result2 = function_4021db();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402288",
            "funcStartAddr": "402288",
            "funcEndAddr": "40228d",
            "decompiledFuncCode": "int64_t function_402288(void) {\n    // 0x402288\n    return function_4021fa();\n}\n"
        },
        {
            "funcName": "function_402290",
            "funcStartAddr": "402290",
            "funcEndAddr": "402471",
            "decompiledFuncCode": "int64_t function_402290(int64_t a1) {\n    char v1 = a1;\n    char v2 = v1; // 0x402295\n    int64_t v3 = a1; // 0x402295\n    if (v1 == 0) {\n        // 0x4023e0\n        return 0;\n    }\n    int64_t v4 = 1; // 0x402295\n    int64_t v5; // 0x402290\n    int64_t v6; // 0x402290\n    int64_t v7; // 0x402290\n    int64_t v8; // 0x402290\n    int64_t v9; // 0x402290\n    int64_t v10; // 0x402345\n    int64_t v11; // 0x40234c\n    while (true) {\n      lab_0x402345:\n        // 0x402345\n        v6 = v4;\n        v7 = v3;\n        char v12 = v2;\n        v10 = g39;\n        v11 = (int64_t)g38;\n        if (v12 == 61) {\n            goto lab_0x402365;\n        } else {\n            if (v12 > 61) {\n                // 0x4023c8\n                v8 = v10;\n                v9 = v11;\n                v5 = 1;\n                if (v12 != 92 != v12 != 94) {\n                    // 0x4023d0\n                    v8 = v10;\n                    v9 = v11;\n                    v5 = v6 & 0xffffffff ^ 1;\n                }\n                goto lab_0x402320;\n            } else {\n                if (v12 == 39) {\n                    int64_t v13 = v11; // 0x4022b3\n                    if (v10 == v11) {\n                        // 0x4023f0\n                        _obstack_newchunk(&g35, 1, v10, v10);\n                        v13 = (int64_t)g38;\n                    }\n                    int64_t v14 = v13;\n                    g38 = (char *)(v14 + 1);\n                    *(char *)v14 = 39;\n                    int64_t v15 = (int64_t)g38; // 0x4022c7\n                    int64_t v16 = v15; // 0x4022d5\n                    if (g39 == v15) {\n                        // 0x402430\n                        _obstack_newchunk(&g35, 1, v14, v10);\n                        v16 = (int64_t)g38;\n                    }\n                    int64_t v17 = v16 + 1; // 0x4022db\n                    g38 = (char *)v17;\n                    *(char *)v16 = 92;\n                    int64_t v18 = (int64_t)g38; // 0x4022e9\n                    int64_t v19 = v18; // 0x4022f7\n                    if (g39 == v18) {\n                        // 0x402410\n                        _obstack_newchunk(&g35, 1, v17, v10);\n                        v19 = (int64_t)g38;\n                    }\n                    // 0x4022fd\n                    g38 = (char *)(v19 + 1);\n                    *(char *)v19 = 39;\n                    v8 = g39;\n                    v9 = (int64_t)g38;\n                    v5 = 1;\n                    goto lab_0x402320;\n                } else {\n                    // 0x402361\n                    v8 = v10;\n                    v9 = v11;\n                    v5 = 1;\n                    if (v12 != 58) {\n                        goto lab_0x402320;\n                    } else {\n                        goto lab_0x402365;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4023e0:\n    // 0x4023e0\n    return 0;\n  lab_0x402365:\n    // 0x402365\n    v8 = v10;\n    v9 = v11;\n    v5 = 1;\n    int64_t v20; // 0x402290\n    int64_t v21; // 0x402290\n    int64_t v22; // 0x402290\n    int64_t v23; // 0x402290\n    if ((char)v6 == 0) {\n        goto lab_0x402320;\n    } else {\n        int64_t v24 = v11; // 0x40236d\n        if (v10 == v11) {\n            // 0x402450\n            _obstack_newchunk(&g35, 1, v10, v10);\n            v24 = (int64_t)g38;\n        }\n        // 0x402373\n        g38 = (char *)(v24 + 1);\n        *(char *)v24 = 92;\n        int64_t v25 = (int64_t)g38; // 0x402388\n        v22 = v25;\n        v4 = v6;\n        v21 = g39;\n        v23 = v25;\n        v20 = v6;\n        if (g39 != v25) {\n            goto lab_0x402325;\n        } else {\n            goto lab_0x402398;\n        }\n    }\n  lab_0x402320:\n    // 0x402320\n    v22 = v9;\n    v4 = v5;\n    v21 = v8;\n    v23 = v8;\n    v20 = v5;\n    if (v8 == v9) {\n        goto lab_0x402398;\n    } else {\n        goto lab_0x402325;\n    }\n  lab_0x402398:\n    // 0x402398\n    _obstack_newchunk(&g35, 1, v23, v21);\n    v22 = (int64_t)g38;\n    v4 = v20;\n    goto lab_0x402325;\n  lab_0x402325:\n    // 0x402325\n    v3 = v7 + 1;\n    g38 = (char *)(v22 + 1);\n    *(char *)v22 = *(char *)v7;\n    v2 = *(char *)v3;\n    if (v2 == 0) {\n        // break -> 0x4023e0\n        goto lab_0x4023e0;\n    }\n    goto lab_0x402345;\n}\n"
        },
        {
            "funcName": "function_402480",
            "funcStartAddr": "402480",
            "funcEndAddr": "402a41",
            "decompiledFuncCode": "int64_t function_402480(int64_t a1, int64_t a2) {\n    int64_t v1 = 0; // bp-72, 0x40249b\n    int64_t v2 = 0; // bp-64, 0x4024a4\n    char * env_val = getenv(\"TERM\"); // 0x4024ad\n    char * v3 = \"none\"; // 0x4024b5\n    if (env_val != NULL) {\n        // 0x4024bb\n        v3 = *env_val != 0 ? env_val : \"none\";\n    }\n    char v4 = 1; // 0x4024e2\n    int64_t v5 = (int64_t)\"# Configuration file for dircolors, a utility to help you set the\"; // 0x4024e2\n    int64_t v6 = 3; // 0x4024e2\n    int64_t v7; // 0x402480\n    int64_t str; // 0x402480\n    int64_t v8; // 0x402480\n    int64_t v9; // 0x402480\n    char v10; // 0x402480\n    char v11; // 0x402480\n    while (true) {\n      lab_0x4024e8_2:\n        // 0x4024e8\n        v10 = v4;\n        v7 = v5;\n        v8 = v6;\n        v11 = v4;\n        str = v5;\n        v9 = v6;\n        if (a1 == 0) {\n            goto lab_0x40269d;\n        } else {\n            goto lab_0x4024f5;\n        }\n    }\n  lab_0x402815_2:;\n    // 0x402815\n    char result; // 0x402480\n    return result;\n  lab_0x40269d:\n    // 0x40269d\n    if (str == (int64_t)\"8.29\") {\n        return result2;\n    }\n    int32_t len = strlen((char *)str); // 0x4026b0\n    char v12 = v11; // 0x4026ba\n    int64_t v13 = str; // 0x4026ba\n    int64_t v14 = str + 1 + (int64_t)len; // 0x4026ba\n    int64_t v15 = v9; // 0x4026ba\n    goto lab_0x40251a;\n  lab_0x4024f5:\n    // 0x4024f5\n    result = v10;\n    int32_t v88 = __getdelim((char **)&v1, (int32_t *)&v2, 10, (struct _IO_FILE *)a1); // 0x402507\n    v12 = result;\n    v13 = v1;\n    v14 = v7;\n    v15 = v8;\n    if (v88 < 1) {\n        // 0x40280b\n        free((int64_t *)v1);\n        goto lab_0x402815_2;\n    }\n    goto lab_0x40251a;\n  lab_0x40251a:\n    // 0x40251a\n    v6 = v15;\n    v5 = v14;\n    char v16 = v12;\n    int16_t ** v17 = __ctype_b_loc(); // 0x40251a\n    int64_t v18 = (int64_t)*v17; // 0x40251f\n    int64_t v19 = v13;\n    unsigned char v20 = *(char *)v19; // 0x402525\n    int64_t v21 = v19 + 1; // 0x40252d\n    while ((*(char *)(v18 + 1 + 2 * (int64_t)v20) & 32) != 0) {\n        // 0x402525\n        v19 = v21;\n        v20 = *(char *)v19;\n        v21 = v19 + 1;\n    }\n    int64_t v22 = v19; // 0x402480\n    v4 = v16;\n    int64_t v23; // 0x402480\n    int64_t v24; // 0x402480\n    int64_t v25; // 0x402480\n    char v26; // 0x402480\n    int64_t v27; // 0x402480\n    char v28; // 0x402480\n    int64_t v29; // 0x40256d\n    int64_t v30; // 0x4025cd\n    int64_t v31; // 0x4025ef\n    switch (v20) {\n        case 0: {\n            goto lab_0x4024e8;\n        }\n        case 35: {\n            goto lab_0x4024e8;\n        }\n        default: {\n            int64_t v32 = v22 + 1; // 0x402540\n            char * v33 = (char *)v32;\n            unsigned char v34 = *v33; // 0x402544\n            uint16_t v35 = *(int16_t *)(2 * (int64_t)v34 + v18); // 0x40254c\n            v22 = v32;\n            while ((((char)(v35 / 0x2000) ^ 1) & (char)(v34 != 0)) != 0) {\n                // 0x402540\n                v32 = v22 + 1;\n                v33 = (char *)v32;\n                v34 = *v33;\n                v35 = *(int16_t *)(2 * (int64_t)v34 + v18);\n                v22 = v32;\n            }\n            // 0x402560\n            v29 = function_405580();\n            if (*v33 == 0) {\n                goto lab_0x4026d0;\n            } else {\n                int64_t v36 = (int64_t)*v17 + 1; // 0x40259c\n                int64_t v37 = v32 + 1; // 0x402590\n                unsigned char v38 = *(char *)v37; // 0x402594\n                int64_t v39 = v37; // 0x4025a1\n                while ((*(char *)(2 * (int64_t)v38 + v36) & 32) != 0) {\n                    // 0x402590\n                    v37 = v39 + 1;\n                    v38 = *(char *)v37;\n                    v39 = v37;\n                }\n                int64_t v40 = v37; // 0x4025a5\n                if (v38 != 0 == (v38 != 35)) {\n                    int64_t v41 = v40;\n                    int64_t v42 = v41 + 1; // 0x4025c3\n                    char v43 = *(char *)v42; // 0x4025c3\n                    v30 = v43 != 0;\n                    int64_t v44 = v30; // 0x4025d8\n                    while (v43 != 0 && v43 != 35) {\n                        // 0x4025c3\n                        v41 = v42;\n                        v42 = v41 + 1;\n                        v43 = *(char *)v42;\n                        v30 = v44 & -256 | (int64_t)(v43 != 0);\n                        v44 = v30;\n                    }\n                    int64_t v45 = (int64_t)*(char *)v41; // 0x4025da\n                    int64_t v46 = v45; // 0x4025e3\n                    int64_t v47 = v41; // 0x4025e3\n                    if ((*(char *)(2 * v45 + v36) & 32) != 0) {\n                        int64_t v48 = v47 - 1; // 0x4027f3\n                        v46 = v48;\n                        v47 = v48;\n                        while ((*(char *)(2 * (int64_t)*(char *)v48 + v36) & 32) != 0) {\n                            // 0x4027f3\n                            v48 = v47 - 1;\n                            v46 = v48;\n                            v47 = v48;\n                        }\n                    }\n                    // 0x4025e9\n                    v31 = function_405580();\n                    v4 = v16;\n                    if (v29 == 0) {\n                        goto lab_0x4024e8;\n                    } else {\n                        if (v31 == 0) {\n                            goto lab_0x4026d9;\n                        } else {\n                            // 0x402609\n                            v27 = v46;\n                            if ((int32_t)function_402d60(v29, \"TERM\", v27) == 0) {\n                                // 0x402728\n                                if ((int32_t)function_407910(v31, (int64_t)v3, 0) == 0) {\n                                    // 0x40274b\n                                    v28 = v16;\n                                    v24 = 2;\n                                    goto lab_0x402680;\n                                } else {\n                                    // 0x40273b\n                                    v28 = v16;\n                                    v24 = 0;\n                                    if ((int32_t)v6 != 2) {\n                                        goto lab_0x402680;\n                                    } else {\n                                        // 0x40274b\n                                        v28 = v16;\n                                        v24 = 2;\n                                        goto lab_0x402680;\n                                    }\n                                }\n                            } else {\n                                // 0x40261e\n                                v28 = v16;\n                                v24 = v6;\n                                switch ((int32_t)v6) {\n                                    case 2: {\n                                        char v49 = *(char *)v29; // 0x402760\n                                        v26 = v49;\n                                        v23 = 1;\n                                        v25 = 1;\n                                        if (v49 != 46) {\n                                            goto lab_0x402638;\n                                        } else {\n                                            goto lab_0x402771;\n                                        }\n                                    }\n                                    case 0: {\n                                        goto lab_0x402680;\n                                    }\n                                    default: {\n                                        char v50 = *(char *)v29; // 0x40262d\n                                        v26 = v50;\n                                        v23 = v6;\n                                        v25 = v6;\n                                        if (v50 == 46) {\n                                            goto lab_0x402771;\n                                        } else {\n                                            goto lab_0x402638;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    goto lab_0x4026d0;\n                }\n            }\n        }\n    }\n  lab_0x4024e8:\n    // 0x4024e8\n    goto lab_0x4024e8_2;\n  lab_0x4026d0:\n    // 0x4026d0\n    v4 = v16;\n    if (v29 == 0) {\n        goto lab_0x4024e8;\n    } else {\n        goto lab_0x4026d9;\n    }\n  lab_0x4026d9:\n    // 0x4026d9\n    function_404bb0(0, 3, a2);\n    error(0, (int32_t)\"%s:%lu: invalid line;  missing second token\" ^ (int32_t)\"%s:%lu: invalid line;  missing second token\", dcgettext(NULL, \"%s:%lu: invalid line;  missing second token\", 5));\n    free((int64_t *)v29);\n    v4 = 0;\n    goto lab_0x4024e8;\n  lab_0x402680:\n    // 0x402680\n    free((int64_t *)v29);\n    free((int64_t *)v31);\n    v10 = v28;\n    v7 = v5;\n    v8 = v24;\n    v11 = v28;\n    str = v5;\n    v9 = v24;\n    if (a1 != 0) {\n        goto lab_0x4024f5;\n    } else {\n        goto lab_0x40269d;\n    }\n  lab_0x402771:;\n    int64_t v51 = (int64_t)g38; // 0x402771\n    int64_t v52 = v51; // 0x40277f\n    if (g39 == v51) {\n        // 0x402896\n        _obstack_newchunk(&g35, 1, v27, v30);\n        v52 = (int64_t)g38;\n    }\n    int64_t v53 = v52 + 1; // 0x402785\n    g38 = (char *)v53;\n    *(char *)v52 = 42;\n    function_402290(v29);\n    int64_t v54 = (int64_t)g38; // 0x40279b\n    int64_t v55 = v54; // 0x4027a9\n    if (g39 == v54) {\n        // 0x4028b1\n        _obstack_newchunk(&g35, 1, v53, v30);\n        v55 = (int64_t)g38;\n    }\n    int64_t v56 = v55 + 1; // 0x4027af\n    g38 = (char *)v56;\n    *(char *)v55 = 61;\n    function_402290(v31);\n    int64_t v57 = (int64_t)g38; // 0x4027c5\n    int64_t v58 = v57; // 0x4027d3\n    int64_t v59 = v25; // 0x4027d3\n    int64_t v60 = v30; // 0x4027d3\n    int64_t v61 = v56; // 0x4027d3\n    int64_t v62 = v25; // 0x4027d3\n    if (g39 == v57) {\n        goto lab_0x402885;\n    } else {\n        goto lab_0x4027d9;\n    }\n  lab_0x402638:;\n    int64_t v63 = v23;\n    int64_t v64; // 0x402480\n    char * v65; // 0x402480\n    int64_t v66; // 0x402480\n    int64_t v67; // 0x402480\n    int64_t v68; // 0x402480\n    if (v26 == 42) {\n        // 0x402830\n        function_402290(v29);\n        int64_t v69 = (int64_t)g38;\n        v64 = v69;\n        v65 = g38;\n        v66 = v30;\n        v67 = v30;\n        v68 = v27;\n        if (g39 == v69) {\n            goto lab_0x40298d;\n        } else {\n            goto lab_0x40284c;\n        }\n    } else {\n        // 0x402640\n        v28 = v16;\n        v24 = v63;\n        if ((int32_t)function_402d60(v29, \"OPTIONS\", v27) == 0) {\n            goto lab_0x402680;\n        } else {\n            // 0x402651\n            v28 = v16;\n            v24 = v63;\n            if ((int32_t)function_402d60(v29, \"COLOR\", v27) == 0) {\n                goto lab_0x402680;\n            } else {\n                // 0x402662\n                v28 = v16;\n                v24 = v63;\n                int64_t v70 = (int64_t)\"NORMAL\"; // 0x402671\n                if ((int32_t)function_402d60(v29, \"EIGHTBIT\", v27) != 0) {\n                    int64_t v71 = 0;\n                    while ((int32_t)function_402d60(v29, (char *)v70, v71) != 0) {\n                        int64_t v72 = v71 + 1; // 0x4028ec\n                        int64_t v73 = *(int64_t *)(8 * v72 + (int64_t)&g6); // 0x4028f0\n                        int64_t v74 = v72; // 0x4028fb\n                        v70 = v73;\n                        if (v73 == 0) {\n                            // 0x4029a1\n                            v28 = v16;\n                            v24 = v63;\n                            if ((int32_t)v63 == 3) {\n                                goto lab_0x402680;\n                            } else {\n                                if (a2 == 0) {\n                                    // 0x4029fb\n                                    dcgettext(NULL, \"<internal>\", 5);\n                                    goto lab_0x4029c4;\n                                } else {\n                                    // 0x4029b5\n                                    function_404bb0(0, 3, a2);\n                                    goto lab_0x4029c4;\n                                }\n                            }\n                        }\n                        v71 = v74;\n                    }\n                    int64_t v75 = (int64_t)g38;\n                    int64_t v76 = v75; // 0x402923\n                    char * v77 = g38; // 0x402923\n                    if (g39 == v75) {\n                        // 0x402a11\n                        _obstack_newchunk(&g35, 1, v71, v30);\n                        v77 = g38;\n                        v76 = (int64_t)v77;\n                    }\n                    int64_t v78 = *(int64_t *)((0x100000000 * v71 >> 29) + (int64_t)&g5); // 0x40292e\n                    g38 = (char *)(v76 + 1);\n                    unsigned char v79 = *(char *)v78; // 0x402948\n                    *v77 = v79;\n                    int64_t v80 = (int64_t)g38;\n                    int64_t v81 = v80; // 0x40295b\n                    char * v82 = g38; // 0x40295b\n                    if (g39 == v80) {\n                        // 0x402a25\n                        _obstack_newchunk(&g35, 1, v78, (int64_t)v79);\n                        v82 = g38;\n                        v81 = (int64_t)v82;\n                    }\n                    int64_t v83 = v81 + 1; // 0x402968\n                    g38 = (char *)v83;\n                    unsigned char v84 = *(char *)(v78 + 1); // 0x402973\n                    *v82 = v84;\n                    int64_t v85 = (int64_t)g38;\n                    v64 = v85;\n                    v65 = g38;\n                    v66 = v83;\n                    v67 = v83;\n                    v68 = v84;\n                    if (g39 != v85) {\n                        goto lab_0x40284c;\n                    } else {\n                        goto lab_0x40298d;\n                    }\n                } else {\n                    goto lab_0x402680;\n                }\n            }\n        }\n    }\n  lab_0x402885:\n    // 0x402885\n    _obstack_newchunk(&g35, 1, v61, v60);\n    v58 = (int64_t)g38;\n    v59 = v62;\n    goto lab_0x4027d9;\n  lab_0x4027d9:\n    // 0x4027d9\n    g38 = (char *)(v58 + 1);\n    *(char *)v58 = 58;\n    v28 = v16;\n    v24 = v59;\n    goto lab_0x402680;\n  lab_0x40298d:\n    // 0x40298d\n    _obstack_newchunk(&g35, 1, v68, v67);\n    v64 = (int64_t)g38;\n    v65 = g38;\n    v66 = v67;\n    goto lab_0x40284c;\n  lab_0x40284c:;\n    int64_t v86 = v64 + 1; // 0x402856\n    g38 = (char *)v86;\n    *v65 = 61;\n    function_402290(v31);\n    int64_t v87 = (int64_t)g38;\n    v58 = v87;\n    v59 = v63;\n    v60 = v66;\n    v61 = v86;\n    v62 = v63;\n    if (g39 == v87) {\n        goto lab_0x402885;\n    } else {\n        goto lab_0x4027d9;\n    }\n  lab_0x4029c4:\n    // 0x4029c4\n    error(0, (int32_t)\"%s:%lu: unrecognized keyword %s\" ^ (int32_t)\"%s:%lu: unrecognized keyword %s\", dcgettext(NULL, \"%s:%lu: unrecognized keyword %s\", 5));\n    v28 = 0;\n    v24 = v63;\n    goto lab_0x402680;\n}\n"
        },
        {
            "funcName": "function_402a50",
            "funcStartAddr": "402a50",
            "funcEndAddr": "402d5d",
            "decompiledFuncCode": "int64_t function_402a50(int32_t status) {\n    // 0x402a50\n    if (status != 0) {\n        // 0x402a6a\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x402a8f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402a96\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Output commands to set the LS_COLORS environment variable.\\n\\nDetermine format of output:\\n  -b, --sh, --bourne-shell    output Bourne shell code to set LS_COLORS\\n  -c, --csh, --c-shell        output C shell code to set LS_COLORS\\n  -p, --print-database        output defaults\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nIf FILE is specified, read it to determine which colors to use for which\\nfile types and extensions.  Otherwise, a precompiled database is used.\\nFor details on the format of these files, run 'dircolors --print-database'.\\n\", 5), g29);\n    int64_t v1 = &g1; // bp-136, 0x402b40\n    bool v2; // 0x402a50\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402bc0\n    int64_t v6 = *(int64_t *)v5; // 0x402bc4\n    int64_t v7 = 10; // 0x402bca\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"dircolors\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402bd6\n        char v11 = *(char *)v9; // 0x402bd6\n        char v12 = v11; // 0x402bd6\n        bool v13 = false; // 0x402bd6\n        while (v10 == v11) {\n            // 0x402bcc\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402bd6\n            int64_t v15 = v8 + v3; // 0x402bd6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402be2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 10;\n    }\n    // 0x402be2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402cf4;\n        } else {\n            // 0x402cde\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402d33\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402c44;\n            } else {\n                goto lab_0x402cf4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402c44;\n        } else {\n            // 0x402c2a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402d33\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402c44;\n            } else {\n                goto lab_0x402c44;\n            }\n        }\n    }\n  lab_0x402cf4:\n    // 0x402cf4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402c84\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402a8f\n    exit(status);\n    // UNREACHABLE\n  lab_0x402c44:\n    // 0x402c44\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402c84\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402a8f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402d60",
            "funcStartAddr": "402d60",
            "funcEndAddr": "402db9",
            "decompiledFuncCode": "int64_t function_402d60(int64_t a1, char * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    if (v1 == a1) {\n        // 0x402db8\n        return 0;\n    }\n    int64_t v2 = 0; // 0x402d65\n    unsigned char v3 = *(char *)(v2 + a1); // 0x402d78\n    int64_t v4 = v3; // 0x402d78\n    uint64_t v5 = v3 == 90 | (int32_t)v3 < 90 ? v4 + 32 : v4;\n    unsigned char v6 = *(char *)(v2 + v1); // 0x402d90\n    bool v7 = v6 == 90 | (int32_t)v6 < 90; // 0x402da0\n    char v8 = v5; // 0x402da9\n    while (v8 != 0) {\n        // 0x402d70\n        v2++;\n        if ((v7 ? v6 + 32 : v6) != v8) {\n            // break -> 0x402dad\n            break;\n        }\n        v3 = *(char *)(v2 + a1);\n        v4 = v3;\n        v5 = v3 == 90 | (int32_t)v3 < 90 ? v4 + 32 : v4;\n        v6 = *(char *)(v2 + v1);\n        v7 = v6 == 90 | (int32_t)v6 < 90;\n        v8 = v5;\n    }\n    int64_t v9 = v6; // 0x402d90\n    // 0x402db8\n    return v5 % 256 - (v7 ? v9 + 32 : v9) % 256 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_402dc0",
            "funcStartAddr": "402dc0",
            "funcEndAddr": "402dc8",
            "decompiledFuncCode": "int64_t function_402dc0(int64_t a1) {\n    // 0x402dc0\n    g43 = a1;\n    int64_t result; // 0x402dc0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402dd0",
            "funcStartAddr": "402dd0",
            "funcEndAddr": "402dd8",
            "decompiledFuncCode": "int64_t function_402dd0(int64_t a1) {\n    // 0x402dd0\n    g42 = a1;\n    int64_t result; // 0x402dd0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402de0",
            "funcStartAddr": "402de0",
            "funcEndAddr": "402e7e",
            "decompiledFuncCode": "int64_t function_402de0(void) {\n    // 0x402de0\n    int32_t * err_num; // 0x402df6\n    if ((int32_t)function_408ee0((int64_t)g29) == 0) {\n        goto lab_0x402e0c;\n    } else {\n        // 0x402df6\n        err_num = __errno_location();\n        if (g42 == 0) {\n            goto lab_0x402e23;\n        } else {\n            // 0x402e07\n            if (*err_num != 32) {\n                goto lab_0x402e23;\n            } else {\n                goto lab_0x402e0c;\n            }\n        }\n    }\n  lab_0x402e0c:;\n    int64_t result = function_408ee0((int64_t)g32); // 0x402e13\n    if ((int32_t)result == 0) {\n        // 0x402e1c\n        return result;\n    }\n    // 0x402e5e\n    _exit(g19);\n    // UNREACHABLE\n  lab_0x402e23:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x402e2f\n    if (g43 == 0) {\n        // 0x402e69\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402e43\n        error(0, *err_num, \"%s: %s\", (char *)function_404b80((int64_t)g43), v1);\n    }\n    // 0x402e5e\n    _exit(g19);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402e80",
            "funcStartAddr": "402e80",
            "funcEndAddr": "402edb",
            "decompiledFuncCode": "int64_t function_402e80(int64_t a1, int64_t a2) {\n    // 0x402e80\n    int64_t v1; // 0x402e80\n    char v2 = v1;\n    int64_t v3 = a1; // 0x402e89\n    int64_t v4 = a1; // 0x402e89\n    char v5 = v2; // 0x402e89\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x402e94\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x402e90\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x402e9e\n    if (v5 == 0) {\n      lab_0x402eda:\n        // 0x402eda\n        return result;\n    }\n    int64_t v7 = v4; // 0x402ec8\n    int64_t v8 = 0; // 0x402ec8\n    int64_t v9; // 0x402e80\n    int64_t v10; // 0x402eca\n    char v11; // 0x402ece\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x402ec5\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x402eca\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x402ec5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x402eba\n    char v14 = *(char *)v13; // 0x402ebe\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x402ec5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x402eca\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x402ec5\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x402eb0\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x402eda\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402ee0",
            "funcStartAddr": "402ee0",
            "funcEndAddr": "402f0b",
            "decompiledFuncCode": "int64_t function_402ee0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x402ee4\n    int64_t result = len; // 0x402ee4\n    if (len < 2) {\n        // 0x402efa\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x402ef8\n    while (*(char *)(v1 + str) == 47) {\n        // 0x402f00\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x402efa\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x402efa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402f10",
            "funcStartAddr": "402f10",
            "funcEndAddr": "402f5b",
            "decompiledFuncCode": "int64_t function_402f10(int32_t a1, int64_t a2) {\n    int32_t fd = open(\"/dev/null\", O_RDONLY); // 0x402f26\n    if (fd == a1) {\n        // 0x402f35\n        return 1;\n    }\n    // 0x402f2f\n    if (fd < 0) {\n        // 0x402f35\n        return 0;\n    }\n    // 0x402f40\n    close(fd);\n    *__errno_location() = 9;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402f60",
            "funcStartAddr": "402f60",
            "funcEndAddr": "40310f",
            "decompiledFuncCode": "int64_t function_402f60(int64_t a1, int64_t * a2, int64_t stream) {\n    int32_t v1 = fileno((struct _IO_FILE *)stream); // 0x402f7c\n    int32_t * v2 = __errno_location(); // 0x402f83\n    int64_t v3 = 0; // 0x402f60\n    int64_t v4 = 0; // 0x402f60\n    int64_t v5 = 0; // 0x402f60\n    int64_t v6 = 0; // 0x402f60\n    int64_t v7 = 0; // 0x402f60\n    switch (v1) {\n        case 1: {\n            goto lab_0x402fd0;\n        }\n        case 2: {\n            goto lab_0x402fba;\n        }\n        case 0: {\n            goto lab_0x40300c;\n        }\n        default: {\n            // 0x402fa5\n            v3 = dup2(2, 2) != 2;\n            goto lab_0x402fba;\n        }\n    }\n  lab_0x402fd0:;\n    // 0x402fd0\n    int64_t v8; // 0x402f60\n    int64_t v9; // 0x402f60\n    int64_t v10; // 0x402f60\n    int64_t v11; // 0x402f60\n    int64_t v12; // 0x402f60\n    int64_t v13; // 0x402f60\n    int64_t v14; // 0x402fe4\n    if (dup2(0, 0) == 0) {\n        // 0x403050\n        v10 = 0;\n        v8 = 0;\n        v14 = 0;\n        if (v4 == 0) {\n            goto lab_0x402ff4;\n        } else {\n            goto lab_0x403058;\n        }\n    } else {\n        int64_t v15 = function_402f10(0, 0); // 0x402fdf\n        v12 = v3;\n        v11 = v4;\n        v9 = 1;\n        v13 = 0;\n        if ((char)v15 == 0) {\n            goto lab_0x40301f;\n        } else {\n            // 0x402fef\n            v14 = v15 & 0xffffffff;\n            v10 = v4;\n            v8 = v14;\n            if (v4 != 0) {\n                goto lab_0x403058;\n            } else {\n                goto lab_0x402ff4;\n            }\n        }\n    }\n  lab_0x402fba:\n    // 0x402fba\n    v4 = dup2(1, 1) != 1;\n    goto lab_0x402fd0;\n  lab_0x40300c:\n    // 0x40300c\n    v12 = v5;\n    v11 = v6;\n    v9 = v7;\n    v13 = function_407b50(a1, (int64_t)a2);\n    goto lab_0x40301f;\n  lab_0x40301f:;\n    int64_t v16 = (int64_t)*v2; // 0x40301f\n    int64_t v17 = v11; // 0x403024\n    int64_t v18 = v13; // 0x403024\n    int64_t v19 = v9; // 0x403024\n    int64_t v20 = v16; // 0x403024\n    int64_t v21 = v11; // 0x403024\n    int64_t v22 = v13; // 0x403024\n    int64_t v23 = v9; // 0x403024\n    int64_t v24 = v16; // 0x403024\n    if ((char)v12 != 0) {\n        goto lab_0x4030c6;\n    } else {\n        goto lab_0x40302a;\n    }\n  lab_0x402ff4:\n    // 0x402ff4\n    v5 = v3;\n    v6 = v10;\n    v7 = v8;\n    if ((char)v3 == 0) {\n        goto lab_0x40300c;\n    } else {\n        int64_t v25 = function_402f10(2, 0); // 0x402ffd\n        v5 = v25 & 0xffffffff;\n        v6 = v10;\n        v7 = v8;\n        if ((char)v25 == 0) {\n            // 0x4030c0\n            v21 = v10;\n            v22 = 0;\n            v23 = v8;\n            v24 = (int64_t)*v2;\n            goto lab_0x4030c6;\n        } else {\n            goto lab_0x40300c;\n        }\n    }\n  lab_0x403058:;\n    int64_t v26 = function_402f10(1, 0); // 0x40305d\n    v10 = v26 & 0xffffffff;\n    v8 = v14;\n    int64_t v27; // 0x402f60\n    int64_t v28; // 0x402f60\n    int64_t v29; // 0x402f60\n    if ((char)v26 != 0) {\n        goto lab_0x402ff4;\n    } else {\n        int64_t v30 = (int64_t)*v2; // 0x403068\n        v27 = 0;\n        v28 = v14;\n        v29 = v30;\n        if ((char)v3 != 0) {\n            // 0x403100\n            close(2);\n            v27 = 0;\n            v28 = v14;\n            v29 = v30;\n        }\n        goto lab_0x403080;\n    }\n  lab_0x4030c6:\n    // 0x4030c6\n    close(2);\n    v17 = v21;\n    v18 = v22;\n    v19 = v23;\n    v20 = v24;\n    goto lab_0x40302a;\n  lab_0x40302a:\n    // 0x40302a\n    v27 = v18;\n    v28 = v19;\n    v29 = v20;\n    int64_t result; // 0x402f60\n    int64_t v31; // 0x402f60\n    int64_t v32; // 0x402f60\n    int64_t v33; // 0x402f60\n    if ((char)v17 != 0) {\n        goto lab_0x403080;\n    } else {\n        // 0x40302f\n        result = v18;\n        v32 = v20;\n        v31 = v18;\n        v33 = v20;\n        if ((char)v19 != 0) {\n            goto lab_0x40308f;\n        } else {\n            goto lab_0x403034;\n        }\n    }\n  lab_0x403080:\n    // 0x403080\n    close(1);\n    result = v27;\n    v32 = v29;\n    v31 = v27;\n    v33 = v29;\n    if ((char)v28 == 0) {\n        goto lab_0x403034;\n    } else {\n        goto lab_0x40308f;\n    }\n  lab_0x403034:;\n    int64_t result2 = 0; // 0x403037\n    int64_t v34 = v32; // 0x403037\n    if (result != 0) {\n        // 0x403039\n        return result;\n    }\n    goto lab_0x40309b;\n  lab_0x40308f:\n    // 0x40308f\n    close(0);\n    result2 = v31;\n    v34 = v33;\n    if (v31 != 0) {\n        // 0x403039\n        int64_t v35; // 0x402f60\n        int64_t result3 = v35;\n        return result3;\n    }\n    goto lab_0x40309b;\n  lab_0x40309b:\n    // 0x40309b\n    *v2 = (int32_t)v34;\n    // 0x403039\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403110",
            "funcStartAddr": "403110",
            "funcEndAddr": "4031a9",
            "decompiledFuncCode": "int64_t function_403110(int64_t str) {\n    // 0x403110\n    if (str == 0) {\n        // 0x403189\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40311e\n    int64_t result = (int64_t)found_char_pos; // 0x40311e\n    if (found_char_pos == NULL) {\n        // 0x403179\n        g44 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403128\n    if (v1 - str < 7) {\n        // 0x403179\n        g44 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x403138\n    bool v2; // 0x403110\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403110\n    int64_t v5 = result - 6; // 0x403110\n    int64_t v6 = 7; // 0x403146\n    unsigned char v7 = *(char *)v5; // 0x403146\n    char v8 = *(char *)v4; // 0x403146\n    char v9 = v8; // 0x403146\n    bool v10 = false; // 0x403146\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403150\n    int64_t v13 = v1; // 0x403150\n    int64_t v14 = 3; // 0x403150\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403179\n        g44 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403162\n    char v16 = *(char *)v12; // 0x403162\n    char v17 = v16; // 0x403162\n    bool v18 = false; // 0x403162\n    while (v15 == v16) {\n        // 0x403152\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40316c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40316e\n        v20 = result + 4;\n        g28 = v20;\n    }\n    // 0x403179\n    g44 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4031b0",
            "funcStartAddr": "4031b0",
            "funcEndAddr": "4032a2",
            "decompiledFuncCode": "int64_t function_4031b0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4031c4\n    int64_t result = (int64_t)v1; // 0x4031c4\n    if (result != a1) {\n        // 0x4031d1\n        return result;\n    }\n    int64_t v2 = function_408fa0(); // 0x4031e0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403296\n    if (v3 == 85) {\n        // 0x4031f0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403288\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g2 : (int64_t)&g7;\n            return result2;\n        }\n        char v4 = *v1; // 0x40321e\n        int64_t result3 = v4 != 96 ? (int64_t)&g8 : (int64_t)&g11; // 0x40322b\n        // 0x4031d1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403288\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g2 : (int64_t)&g7;\n        return result2;\n    }\n    char v5 = *v1; // 0x40326d\n    int64_t result4 = v5 != 96 ? (int64_t)&g9 : (int64_t)&g10; // 0x40327a\n    // 0x4031d1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4032b0",
            "funcStartAddr": "4032b0",
            "funcEndAddr": "403307",
            "decompiledFuncCode": "int64_t function_4032b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4032b0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4032f8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403307",
            "funcStartAddr": "403307",
            "funcEndAddr": "4044d1",
            "decompiledFuncCode": "int64_t function_403307(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403351\n    int64_t v3 = 0; // 0x403351\n    int64_t v4; // 0x403307\n    int64_t v5; // 0x403307\n    int64_t v6; // 0x403307\n    int64_t v7; // 0x403307\n    int64_t v8; // 0x403307\n    int64_t v9; // 0x403307\n    int64_t v10; // 0x403307\n    int64_t v11; // 0x403307\n    int64_t v12; // 0x403307\n    int64_t v13; // 0x403307\n    int64_t v14; // 0x403307\n    int64_t v15; // 0x403307\n    int64_t v16; // 0x403307\n    int64_t v17; // 0x403307\n    int64_t v18; // 0x403307\n    int64_t result; // 0x403307\n    int64_t v19; // 0x403307\n    int32_t wc; // bp+132, 0x403307\n    int64_t ps; // bp+136, 0x403307\n    char v20; // 0x4038c0\n    int64_t v21; // 0x4038c0\n    int64_t v22; // 0x403c68\n    int64_t v23; // 0x403307\n    int64_t v24; // 0x403c87\n    int32_t v25; // 0x403307\n    while (true) {\n      lab_0x403358_2:\n        // 0x403358\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403307\n        int64_t v27; // 0x40338c\n        while (true) {\n          lab_0x403358:\n            // 0x403358\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403363\n            if (v15 == -1) {\n                // 0x403365\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403373\n            if (v28) {\n                // break (via goto) -> 0x403ad8\n                goto lab_0x403ad8;\n            }\n            // 0x40337c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g60 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40396b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4034b1;\n                    }\n                    // 0x403d8d\n                    v26 = v5 + 1;\n                    goto lab_0x403358;\n                }\n                case 7: {\n                    goto lab_0x4034b1;\n                }\n                case 8: {\n                    goto lab_0x4034b1;\n                }\n                case 9: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4034b1;\n                }\n                case 12: {\n                    goto lab_0x4034b1;\n                }\n                case 13: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40347d;\n                }\n                case 36: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4034b1;\n                }\n                case 38: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4034b1;\n                }\n                case 44: {\n                    goto lab_0x4034b1;\n                }\n                case 45: {\n                    goto lab_0x4034b1;\n                }\n                case 46: {\n                    goto lab_0x4034b1;\n                }\n                case 47: {\n                    goto lab_0x4034b1;\n                }\n                case 48: {\n                    goto lab_0x4034b1;\n                }\n                case 49: {\n                    goto lab_0x4034b1;\n                }\n                case 50: {\n                    goto lab_0x4034b1;\n                }\n                case 51: {\n                    goto lab_0x4034b1;\n                }\n                case 52: {\n                    goto lab_0x4034b1;\n                }\n                case 53: {\n                    goto lab_0x4034b1;\n                }\n                case 54: {\n                    goto lab_0x4034b1;\n                }\n                case 55: {\n                    goto lab_0x4034b1;\n                }\n                case 56: {\n                    goto lab_0x4034b1;\n                }\n                case 57: {\n                    goto lab_0x4034b1;\n                }\n                case 58: {\n                    goto lab_0x4034b1;\n                }\n                case 59: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4034b1;\n                }\n                case 66: {\n                    goto lab_0x4034b1;\n                }\n                case 67: {\n                    goto lab_0x4034b1;\n                }\n                case 68: {\n                    goto lab_0x4034b1;\n                }\n                case 69: {\n                    goto lab_0x4034b1;\n                }\n                case 70: {\n                    goto lab_0x4034b1;\n                }\n                case 71: {\n                    goto lab_0x4034b1;\n                }\n                case 72: {\n                    goto lab_0x4034b1;\n                }\n                case 73: {\n                    goto lab_0x4034b1;\n                }\n                case 74: {\n                    goto lab_0x4034b1;\n                }\n                case 75: {\n                    goto lab_0x4034b1;\n                }\n                case 76: {\n                    goto lab_0x4034b1;\n                }\n                case 77: {\n                    goto lab_0x4034b1;\n                }\n                case 78: {\n                    goto lab_0x4034b1;\n                }\n                case 79: {\n                    goto lab_0x4034b1;\n                }\n                case 80: {\n                    goto lab_0x4034b1;\n                }\n                case 81: {\n                    goto lab_0x4034b1;\n                }\n                case 82: {\n                    goto lab_0x4034b1;\n                }\n                case 83: {\n                    goto lab_0x4034b1;\n                }\n                case 84: {\n                    goto lab_0x4034b1;\n                }\n                case 85: {\n                    goto lab_0x4034b1;\n                }\n                case 86: {\n                    goto lab_0x4034b1;\n                }\n                case 87: {\n                    goto lab_0x4034b1;\n                }\n                case 88: {\n                    goto lab_0x4034b1;\n                }\n                case 89: {\n                    goto lab_0x4034b1;\n                }\n                case 90: {\n                    goto lab_0x4034b1;\n                }\n                case 91: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4034b1;\n                }\n                case 94: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4034b1;\n                }\n                case 96: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4034b1;\n                }\n                case 98: {\n                    goto lab_0x4034b1;\n                }\n                case 99: {\n                    goto lab_0x4034b1;\n                }\n                case 100: {\n                    goto lab_0x4034b1;\n                }\n                case 101: {\n                    goto lab_0x4034b1;\n                }\n                case 102: {\n                    goto lab_0x4034b1;\n                }\n                case 103: {\n                    goto lab_0x4034b1;\n                }\n                case 104: {\n                    goto lab_0x4034b1;\n                }\n                case 105: {\n                    goto lab_0x4034b1;\n                }\n                case 106: {\n                    goto lab_0x4034b1;\n                }\n                case 107: {\n                    goto lab_0x4034b1;\n                }\n                case 108: {\n                    goto lab_0x4034b1;\n                }\n                case 109: {\n                    goto lab_0x4034b1;\n                }\n                case 110: {\n                    goto lab_0x4034b1;\n                }\n                case 111: {\n                    goto lab_0x4034b1;\n                }\n                case 112: {\n                    goto lab_0x4034b1;\n                }\n                case 113: {\n                    goto lab_0x4034b1;\n                }\n                case 114: {\n                    goto lab_0x4034b1;\n                }\n                case 115: {\n                    goto lab_0x4034b1;\n                }\n                case 116: {\n                    goto lab_0x4034b1;\n                }\n                case 117: {\n                    goto lab_0x4034b1;\n                }\n                case 118: {\n                    goto lab_0x4034b1;\n                }\n                case 119: {\n                    goto lab_0x4034b1;\n                }\n                case 120: {\n                    goto lab_0x4034b1;\n                }\n                case 121: {\n                    goto lab_0x4034b1;\n                }\n                case 122: {\n                    goto lab_0x4034b1;\n                }\n                case 123: {\n                    goto lab_0x403455;\n                }\n                case 124: {\n                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403455;\n                }\n                case 126: {\n                    goto lab_0x40347d;\n                }\n                default: {\n                    goto lab_0x403855;\n                }\n            }\n        }\n      lab_0x403855:\n        if (v23 != 1) {\n            // 0x403bc0\n            ps = 0;\n            int64_t len = v15; // 0x403bd0\n            if (v15 == -1) {\n                // 0x403bd2\n                len = strlen((char *)str);\n            }\n            // 0x403bfe\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x403c5f:\n                // 0x403c5f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403c64\n                int64_t v30 = v29 + str;\n                v24 = function_408a20(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4041da_2;\n                    }\n                    case -1: {\n                        goto lab_0x4041da_2;\n                    }\n                    case -2: {\n                        // 0x4042bd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4042f7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4042fa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404307\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404300\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4041da\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4041da_2;\n                    }\n                    case 1: {\n                        goto lab_0x403c30;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x403cdc\n                        char v34 = *(char *)v33; // 0x403ced\n                        unsigned char v35; // 0x403307\n                        if (v34 < 125) {\n                            // 0x403cf8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x403d0f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403ce0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x403ced\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403cf8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x403d0f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403ce0\n                            v33++;\n                        }\n                        goto lab_0x403c30;\n                    }\n                }\n            }\n            goto lab_0x4041da_2;\n        } else {\n            // 0x4038a4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4034b1;\n        }\n    }\n  lab_0x403ad8:\n    // 0x403ad8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4043da\n        if (v8 > result) {\n            // 0x4043e3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403707\n        return result;\n    }\n    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4034b1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4034c0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4036ca_2;\n        }\n    }\n    int64_t v39 = result; // 0x4035c1\n    char v40 = v20; // 0x4035c1\n    int64_t v41 = v38; // 0x4035c1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4035c1\n    int64_t v43 = v36; // 0x4035c1\n    goto lab_0x40353d;\n  lab_0x4036ca_2:\n    // 0x403707\n    return function_4032b0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4041da_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4034b1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x403dae\n        int64_t v50 = v5 + 1; // 0x403e91\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403e98\n        char v52 = v20; // 0x403e98\n        int64_t v53 = result; // 0x403e98\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403e61\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403e65\n            int64_t v56 = v54 + 1; // 0x403e6a\n            int64_t v57 = v51 + 1; // 0x403e91\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x403e5c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403e61\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403e65\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40353d;\n    }\n  lab_0x403c30:\n    // 0x403c30\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x403c4f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403c52\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4041da\n        goto lab_0x4041da_2;\n    }\n    goto lab_0x403c5f;\n  lab_0x40347d:\n    // 0x40347d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4036ca_2;\n    }\n    goto lab_0x4034b1;\n  lab_0x403455:;\n    bool v60 = v15 == 1; // 0x403460\n    if (v15 == -1) {\n        // 0x403462\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40346e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4034b1;\n    } else {\n        goto lab_0x40347d;\n    }\n  lab_0x40353d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403542\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403546\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403358_2;\n}\n"
        },
        {
            "funcName": "function_4044e0",
            "funcStartAddr": "4044e0",
            "funcEndAddr": "40467e",
            "decompiledFuncCode": "int64_t function_4044e0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4044e2\n    int32_t * v3 = __errno_location(); // 0x4044fc\n    int32_t v4 = v2; // 0x404511\n    if (v4 < 0) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v5 = (int64_t)g21; // 0x404501\n    int32_t v6 = *v3; // 0x40450b\n    int64_t v7 = v5; // 0x404521\n    if (v2 >= (int64_t)*(int32_t *)&g24) {\n        if (v4 == 0x7fffffff) {\n            // 0x404679\n            function_405540(a1);\n            // UNREACHABLE\n        }\n        int64_t v8 = v2 + 1; // 0x404530\n        int64_t v9 = 0x100000000 * v8 >> 28; // 0x404537\n        int64_t v10; // 0x4044e0\n        if (g21 == &g22) {\n            int64_t v11 = function_405350(0, v9); // 0x40465a\n            int128_t v12 = __asm_movdqa(*(int128_t *)&g22); // 0x40465f\n            *(int64_t *)&g21 = v11;\n            __asm_movups(*(int128_t *)v11, v12);\n            v10 = v11;\n        } else {\n            int64_t v13 = function_405350(v5, v9); // 0x40454b\n            *(int64_t *)&g21 = v13;\n            v10 = v13;\n        }\n        // 0x40455a\n        v7 = v10;\n        int32_t v14 = *(int32_t *)&g24; // 0x40455a\n        int32_t v15 = v8; // 0x404561\n        memset((int64_t *)(16 * (int64_t)v14 + v7), 0, 16 * (v15 - v14));\n        *(int32_t *)&g24 = v15;\n    }\n    int64_t v16 = v7 + (v1 >> 28); // 0x404591\n    int32_t v17 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40459b\n    int64_t * v18 = (int64_t *)v16; // 0x40459e\n    uint64_t v19 = *v18; // 0x40459e\n    int64_t * v20 = (int64_t *)(v16 + 8); // 0x4045a1\n    int64_t result = *v20; // 0x4045a1\n    int64_t v21; // 0x4044e0\n    uint64_t v22 = function_4032b0(result, v19, a2, a3, v21 & 0xffffffff, v17); // 0x4045c4\n    if (v19 > v22) {\n        // 0x40463b\n        *v3 = v6;\n        return result;\n    }\n    int64_t v23 = v22 + 1; // 0x4045d7\n    *v18 = v23;\n    if (result != (int64_t)&g45) {\n        // 0x4045e7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4052f0(v23); // 0x404601\n    *v20 = result2;\n    int64_t v24; // 0x4044e0\n    function_4032b0(result2, v23, a2, a3, (int64_t)*(int32_t *)&v24, v17);\n    // 0x40463b\n    *v3 = v6;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404680",
            "funcStartAddr": "404680",
            "funcEndAddr": "4046b4",
            "decompiledFuncCode": "int64_t function_404680(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x404687\n    int64_t result = function_4054f0(a1 == 0 ? (int64_t)&g46 : a1, 56); // 0x4046a6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4046c0",
            "funcStartAddr": "4046c0",
            "funcEndAddr": "4046cf",
            "decompiledFuncCode": "int64_t function_4046c0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g46 : a1); // 0x4046cc\n    return result;\n}\n"
        },
        {
            "funcName": "function_4046d0",
            "funcStartAddr": "4046d0",
            "funcEndAddr": "4046df",
            "decompiledFuncCode": "int64_t function_4046d0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 : a1; // 0x4046d8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g46;\n}\n"
        },
        {
            "funcName": "function_4046e0",
            "funcStartAddr": "4046e0",
            "funcEndAddr": "404713",
            "decompiledFuncCode": "int64_t function_4046e0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 + 8 : a1 + 8; // 0x4046f9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4046fe\n    uint32_t v3 = *v2; // 0x4046fe\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404702\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404720",
            "funcStartAddr": "404720",
            "funcEndAddr": "404733",
            "decompiledFuncCode": "int64_t function_404720(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g46 + 4 : a1 + 4); // 0x40472c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404740",
            "funcStartAddr": "404740",
            "funcEndAddr": "40476b",
            "decompiledFuncCode": "int64_t function_404740(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g46 : a1; // 0x404748\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404765\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40475c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g46;\n}\n"
        },
        {
            "funcName": "function_404770",
            "funcStartAddr": "404770",
            "funcEndAddr": "4047e2",
            "decompiledFuncCode": "int64_t function_404770(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g46 : a5; // 0x404792\n    int32_t * v2 = __errno_location(); // 0x40479b\n    uint32_t v3 = *(int32_t *)v1; // 0x4047bb\n    int64_t result = function_4032b0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4047ca\n    return result;\n}\n"
        },
        {
            "funcName": "function_4047f0",
            "funcStartAddr": "4047f0",
            "funcEndAddr": "4048d1",
            "decompiledFuncCode": "int64_t function_4047f0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g46 : a4; // 0x404812\n    int32_t * v2 = __errno_location(); // 0x404818\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404837\n    int32_t * v4 = (int32_t *)v1; // 0x40483a\n    int64_t v5 = function_4032b0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404855\n    int64_t v6 = v5 + 1; // 0x40485a\n    int64_t result = function_4052f0(v6); // 0x40486f\n    function_4032b0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4048b4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4048bd\n    return result;\n}\n"
        },
        {
            "funcName": "function_4048e0",
            "funcStartAddr": "4048e0",
            "funcEndAddr": "4048ea",
            "decompiledFuncCode": "int64_t function_4048e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4048e0\n    return function_4047f0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4048f0",
            "funcStartAddr": "4048f0",
            "funcEndAddr": "404985",
            "decompiledFuncCode": "int64_t function_4048f0(void) {\n    uint32_t v1 = *(int32_t *)&g24; // 0x4048f0\n    int64_t v2 = v1; // 0x4048f0\n    int64_t v3 = v2; // 0x404904\n    if (v1 >= 2) {\n        int64_t v4 = &g24;\n        int64_t v5 = v4 + 16; // 0x404923\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g61;\n        while (v5 != (int64_t)g21 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404920\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g61;\n        }\n    }\n    int64_t v6 = v3; // 0x40493d\n    if (g22 != 0x60f3a0) {\n        // 0x40493f\n        free((int64_t *)g22);\n        g22 = 256;\n        *(int64_t *)&g23 = (int64_t)&g45;\n        v6 = &g61;\n    }\n    int64_t result = v6; // 0x404961\n    if (g21 != &g22) {\n        // 0x404963\n        free(g21);\n        *(int64_t *)&g21 = (int64_t)&g22;\n        result = &g61;\n    }\n    // 0x404976\n    *(int32_t *)&g24 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404990",
            "funcStartAddr": "404990",
            "funcEndAddr": "4049a1",
            "decompiledFuncCode": "int64_t function_404990(void) {\n    // 0x404990\n    int64_t v1; // 0x404990\n    return function_4044e0(v1, v1, -1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_4049b0",
            "funcStartAddr": "4049b0",
            "funcEndAddr": "4049ba",
            "decompiledFuncCode": "int64_t function_4049b0(void) {\n    // 0x4049b0\n    int64_t v1; // 0x4049b0\n    return function_4044e0(v1, v1, v1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_4049c0",
            "funcStartAddr": "4049c0",
            "funcEndAddr": "4049d6",
            "decompiledFuncCode": "int64_t function_4049c0(int64_t a1) {\n    // 0x4049c0\n    return function_4044e0(0, a1, -1, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_4049e0",
            "funcStartAddr": "4049e0",
            "funcEndAddr": "4049f2",
            "decompiledFuncCode": "int64_t function_4049e0(int64_t a1, int64_t a2) {\n    // 0x4049e0\n    return function_4044e0(0, a1, a2, (int64_t *)&g46);\n}\n"
        },
        {
            "funcName": "function_404a00",
            "funcStartAddr": "404a00",
            "funcEndAddr": "404a68",
            "decompiledFuncCode": "int64_t function_404a00(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404a10\n    return function_4044e0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404a70",
            "funcStartAddr": "404a70",
            "funcEndAddr": "404ad4",
            "decompiledFuncCode": "int64_t function_404a70(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404a80\n    return function_4044e0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "404aec",
            "decompiledFuncCode": "int64_t function_404ae0(int64_t a1, int64_t a2) {\n    // 0x404ae0\n    return function_404a00(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404af0",
            "funcStartAddr": "404af0",
            "funcEndAddr": "404aff",
            "decompiledFuncCode": "int64_t function_404af0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404af0\n    return function_404a70(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404b00",
            "funcStartAddr": "404b00",
            "funcEndAddr": "404b70",
            "decompiledFuncCode": "int64_t function_404b00(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g46); // 0x404b0d\n    int128_t v2 = __asm_movdqa(g47); // 0x404b15\n    int128_t v3 = __asm_movdqa(g48); // 0x404b1d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404b32\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404b48\n    uint32_t v6 = *v5; // 0x404b48\n    uint32_t v7 = (int32_t)a3 % 32; // 0x404b4d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4044e0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404b70",
            "funcStartAddr": "404b70",
            "funcEndAddr": "404b7d",
            "decompiledFuncCode": "int64_t function_404b70(int64_t a1, int64_t a2) {\n    // 0x404b70\n    return function_404b00(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404b80",
            "funcStartAddr": "404b80",
            "funcEndAddr": "404b91",
            "decompiledFuncCode": "int64_t function_404b80(int64_t a1) {\n    // 0x404b80\n    return function_404b00(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404ba0",
            "funcStartAddr": "404ba0",
            "funcEndAddr": "404baa",
            "decompiledFuncCode": "int64_t function_404ba0(void) {\n    // 0x404ba0\n    int64_t v1; // 0x404ba0\n    return function_404b00(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404bb0",
            "funcStartAddr": "404bb0",
            "funcEndAddr": "404c1e",
            "decompiledFuncCode": "int64_t function_404bb0(int32_t a1, int64_t a2, int64_t a3) {\n    if ((int32_t)a2 == 10) {\n        abort();\n        // UNREACHABLE\n    }\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404bca\n    return function_4044e0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404c20",
            "funcStartAddr": "404c20",
            "funcEndAddr": "404c8c",
            "decompiledFuncCode": "int64_t function_404c20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g46); // 0x404c27\n    int128_t v2 = __asm_movdqa(g47); // 0x404c2f\n    int128_t v3 = __asm_movdqa(g48); // 0x404c37\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404c59\n    if (a2 == 0 || a3 == 0) {\n        // 0x404c87\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404c6a\n    return function_4044e0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404c90",
            "funcStartAddr": "404c90",
            "funcEndAddr": "404c99",
            "decompiledFuncCode": "int64_t function_404c90(void) {\n    // 0x404c90\n    int64_t v1; // 0x404c90\n    return function_404c20(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404ca0",
            "funcStartAddr": "404ca0",
            "funcEndAddr": "404cb7",
            "decompiledFuncCode": "int64_t function_404ca0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404ca0\n    return function_404c20(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404cc0",
            "funcStartAddr": "404cc0",
            "funcEndAddr": "404cd3",
            "decompiledFuncCode": "int64_t function_404cc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404cc0\n    return function_404c20(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404ce0",
            "funcStartAddr": "404ce0",
            "funcEndAddr": "404cea",
            "decompiledFuncCode": "int64_t function_404ce0(void) {\n    // 0x404ce0\n    int64_t v1; // 0x404ce0\n    return function_4044e0(v1, v1, v1, &g20);\n}\n"
        },
        {
            "funcName": "function_404cf0",
            "funcStartAddr": "404cf0",
            "funcEndAddr": "404d02",
            "decompiledFuncCode": "int64_t function_404cf0(int64_t a1, int64_t a2) {\n    // 0x404cf0\n    return function_4044e0(0, a1, a2, &g20);\n}\n"
        },
        {
            "funcName": "function_404d10",
            "funcStartAddr": "404d10",
            "funcEndAddr": "404d21",
            "decompiledFuncCode": "int64_t function_404d10(void) {\n    // 0x404d10\n    int64_t v1; // 0x404d10\n    return function_4044e0(v1, v1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_404d30",
            "funcStartAddr": "404d30",
            "funcEndAddr": "404d46",
            "decompiledFuncCode": "int64_t function_404d30(int64_t a1) {\n    // 0x404d30\n    return function_4044e0(0, a1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_404d50",
            "funcStartAddr": "404d50",
            "funcEndAddr": "40512d",
            "decompiledFuncCode": "int64_t function_404d50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404de8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x404d6c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404d86\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x404dcb\n    if (a6 < 10) {\n        // 0x404dda\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404ed2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405130",
            "funcStartAddr": "405130",
            "funcEndAddr": "405150",
            "decompiledFuncCode": "int64_t function_405130(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405130\n    if (a5 == 0) {\n        // 0x40514b\n        return function_404d50(a1, a2, a3, a4, a5, 0, (int64_t)&g61);\n    }\n    int64_t v1 = 0; // 0x405137\n    v1++;\n    int64_t v2 = v1; // 0x405149\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405140\n        v1++;\n        v2 = v1;\n    }\n    // 0x40514b\n    return function_404d50(a1, a2, a3, a4, a5, v2, (int64_t)&g61);\n}\n"
        },
        {
            "funcName": "function_405150",
            "funcStartAddr": "405150",
            "funcEndAddr": "4051b0",
            "decompiledFuncCode": "int64_t function_405150(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405150\n    int64_t v3 = &v2; // 0x405150\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405183\n    int64_t v6; // 0x40516d\n    int64_t * v7; // 0x40518b\n    int64_t v8; // 0x40518b\n    int64_t v9; // 0x405197\n    if (v5 < 48) {\n        // 0x405160\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4051a3\n            break;\n        }\n    } else {\n        // 0x40518b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4051a3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405181\n    while (v4 != 9) {\n        // 0x405179\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405160\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4051a3\n                break;\n            }\n        } else {\n            // 0x40518b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4051a3\n                break;\n            }\n        }\n        // 0x405179\n        v10 = 10;\n    }\n    // 0x4051a3\n    return function_404d50(a1, a2, a3, a4, v3, v10, (int64_t)&g61);\n}\n"
        },
        {
            "funcName": "function_4051b0",
            "funcStartAddr": "4051b0",
            "funcEndAddr": "40526c",
            "decompiledFuncCode": "int64_t function_4051b0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x4051b0\n    int64_t v1; // bp-168, 0x4051b0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4051b0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4051b0\n    int64_t v8; // 0x4051b0\n    int64_t v9; // bp-56, 0x4051b0\n    int64_t v10; // 0x405215\n    int64_t v11; // 0x405239\n    if ((int32_t)v6 < 48) {\n        // 0x405200\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405250\n            break;\n        }\n    } else {\n        // 0x405232\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405250\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40522a\n    int64_t v13 = 10; // 0x40522a\n    while (v5 != 9) {\n        // 0x40522c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405200\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405250\n                break;\n            }\n        } else {\n            // 0x405232\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405250\n                break;\n            }\n        }\n        // 0x405222\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405250\n    int64_t v14; // bp-136, 0x4051b0\n    int64_t result = function_404d50(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g61); // 0x40525f\n    return result;\n}\n"
        },
        {
            "funcName": "function_405270",
            "funcStartAddr": "405270",
            "funcEndAddr": "4052e4",
            "decompiledFuncCode": "int64_t function_405270(int64_t a1) {\n    // 0x405270\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4052d3\n    return fputs_unlocked(v1, g29);\n}\n"
        },
        {
            "funcName": "function_4052f0",
            "funcStartAddr": "4052f0",
            "funcEndAddr": "40530a",
            "decompiledFuncCode": "int64_t function_4052f0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4052f4\n    if (size != 0 != (mem == NULL)) {\n        // 0x405303\n        return (int64_t)mem;\n    }\n    // 0x405305\n    function_405540(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405310",
            "funcStartAddr": "405310",
            "funcEndAddr": "405331",
            "decompiledFuncCode": "int64_t function_405310(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405313\n    int64_t v2 = v1; // 0x405313\n    if (v2 < 0) {\n        // 0x40532b\n        function_405540(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405329\n        return function_4052f0(v2);\n    }\n    // 0x40532b\n    function_405540(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405340",
            "funcStartAddr": "405340",
            "funcEndAddr": "405342",
            "decompiledFuncCode": "int64_t function_405340(void) {\n    // 0x405340\n    int64_t v1; // 0x405340\n    return function_4052f0(v1);\n}\n"
        },
        {
            "funcName": "function_405350",
            "funcStartAddr": "405350",
            "funcEndAddr": "405386",
            "decompiledFuncCode": "int64_t function_405350(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x405378\n        free(v1);\n        return (int32_t)&g61 ^ (int32_t)&g61;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405361\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x405370\n        return (int64_t)mem;\n    }\n    // 0x405381\n    function_405540(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405390",
            "funcStartAddr": "405390",
            "funcEndAddr": "4053b1",
            "decompiledFuncCode": "int64_t function_405390(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x405393\n    int64_t v2 = v1; // 0x405393\n    if (v2 < 0) {\n        // 0x4053ab\n        function_405540(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4053a9\n        return function_405350(a1, v2);\n    }\n    // 0x4053ab\n    function_405540(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4053c0",
            "funcStartAddr": "4053c0",
            "funcEndAddr": "405446",
            "decompiledFuncCode": "int64_t function_4053c0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40541b\n            function_405540(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405350(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405403\n    if (a2 == 0) {\n        // 0x405428\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405408\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40541b\n        function_405540(a1);\n        // UNREACHABLE\n    }\n    // 0x4053ea\n    *(int64_t *)a2 = v2;\n    return function_405350(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405450",
            "funcStartAddr": "405450",
            "funcEndAddr": "4054a0",
            "decompiledFuncCode": "int64_t function_405450(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405450\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40549a\n            function_405540(a1);\n            // UNREACHABLE\n        }\n        // 0x405472\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405350(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405485\n        *(int64_t *)a2 = 128;\n        return function_405350(0, 128);\n    }\n    // 0x405498\n    if (a2 < 0) {\n        // 0x40549a\n        function_405540(a1);\n        // UNREACHABLE\n    }\n    // 0x405472\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405350(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4054a0",
            "funcStartAddr": "4054a0",
            "funcEndAddr": "4054b7",
            "decompiledFuncCode": "int64_t function_4054a0(int64_t a1, int64_t a2) {\n    // 0x4054a0\n    return (int64_t)memset((int64_t *)function_4052f0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4054c0",
            "funcStartAddr": "4054c0",
            "funcEndAddr": "4054ee",
            "decompiledFuncCode": "int64_t function_4054c0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4054c7\n    if ((int64_t)v1 < 0) {\n        // 0x4054e9\n        function_405540(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4054e9\n        function_405540(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4054da\n    if (mem != NULL) {\n        // 0x4054e4\n        return (int64_t)mem;\n    }\n    // 0x4054e9\n    function_405540(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4054f0",
            "funcStartAddr": "4054f0",
            "funcEndAddr": "405518",
            "decompiledFuncCode": "int64_t function_4054f0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4052f0(a2); // 0x4054ff\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405520",
            "funcStartAddr": "405520",
            "funcEndAddr": "405533",
            "decompiledFuncCode": "int64_t function_405520(int64_t str) {\n    // 0x405520\n    return function_4054f0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405540",
            "funcStartAddr": "405540",
            "funcEndAddr": "405571",
            "decompiledFuncCode": "int64_t function_405540(int64_t a1) {\n    // 0x405540\n    error(g19, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405580",
            "funcStartAddr": "405580",
            "funcEndAddr": "405598",
            "decompiledFuncCode": "int64_t function_405580(void) {\n    // 0x405580\n    int64_t str; // 0x405580\n    char * v1 = strndup((char *)str, (int32_t)str); // 0x405584\n    if (v1 != NULL) {\n        // 0x40558e\n        return (int64_t)v1;\n    }\n    // 0x405593\n    function_405540(str);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4055a0",
            "funcStartAddr": "4055a0",
            "funcEndAddr": "40561b",
            "decompiledFuncCode": "int64_t function_4055a0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4055a7\n    if (fileno(stream) < 0) {\n        // 0x405607\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4055ba\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x4055eb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405607\n            return fclose(stream);\n        }\n    }\n    // 0x4055bc\n    if ((int32_t)function_405620(a1, v1) == 0) {\n        // 0x405607\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x4055c8\n    int32_t v3 = *v2; // 0x4055d0\n    int64_t result = fclose(stream); // 0x4055de\n    if (v3 != 0) {\n        // 0x405610\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x4055e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_405620",
            "funcStartAddr": "405620",
            "funcEndAddr": "405660",
            "decompiledFuncCode": "int64_t function_405620(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40563a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40563a\n        return fflush(stream);\n    }\n    // 0x405648\n    function_407bf0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405660",
            "funcStartAddr": "405660",
            "funcEndAddr": "405759",
            "decompiledFuncCode": "int64_t function_405660(int64_t result) {\n    int32_t v1 = *(int32_t *)(result + 4); // 0x405670\n    int32_t v2 = v1; // 0x405675\n    if (v1 == 0) {\n      lab_0x4056a4_3:\n        // 0x4056a4\n        return result;\n    }\n    int64_t v3 = result; // 0x405675\n    int64_t v4; // 0x405660\n    int64_t v5; // 0x405660\n    int32_t v6; // 0x405660\n    int64_t v7; // 0x405660\n    while (true) {\n      lab_0x405677:\n        // 0x405677\n        v5 = v3;\n        int32_t v8 = v2;\n        while (v8 != 91) {\n            if (v8 < 65) {\n                if ((1 << (int64_t)((v8 + 31) % 64) & 0xc0000601) != 0) {\n                    int64_t v9 = v5 + 8; // 0x40568a\n                    if (*(int32_t *)v9 == 40) {\n                        // 0x405700\n                        v4 = function_405660(v9);\n                        goto lab_0x405670;\n                    }\n                }\n                if (v8 == 41) {\n                    // 0x405750\n                    return v5 + 8;\n                }\n            }\n            int32_t v10 = *(int32_t *)(v5 + 8); // 0x40569d\n            if (v10 == 0) {\n                return result;\n            }\n            v5 += 4;\n            v8 = v10;\n        }\n        int32_t v11 = g49; // 0x4056b8\n        if (g49 == 0) {\n            int32_t v12 = getenv(\"POSIXLY_CORRECT\") == NULL ? -1 : 1; // 0x405738\n            g49 = v12;\n            v11 = v12;\n        }\n        int64_t v13 = v5 + 8; // 0x4056ba\n        int32_t v14 = *(int32_t *)v13; // 0x4056ba\n        if (v14 == 33) {\n            goto lab_0x405718;\n        } else {\n            // 0x4056c2\n            v6 = v14;\n            v7 = v13;\n            if (v11 < 0 == v14 == 94) {\n                goto lab_0x405718;\n            } else {\n                goto lab_0x4056d5;\n            }\n        }\n    }\n  lab_0x4056a4_3:\n    // 0x4056a4\n    return result;\n  lab_0x405718:;\n    int64_t v15 = v5 + 12; // 0x405718\n    v6 = *(int32_t *)v15;\n    v7 = v15;\n    goto lab_0x4056d5;\n  lab_0x4056d5:;\n    int64_t v16 = v7;\n    int32_t v17 = v6; // 0x4056d8\n    int64_t v18 = v16; // 0x4056d8\n    if (v6 == 93) {\n        int64_t v19 = v16 + 4; // 0x4056da\n        v17 = *(int32_t *)v19;\n        v18 = v19;\n    }\n    int64_t v20 = v18; // 0x4056f4\n    int32_t v21 = v17; // 0x4056f4\n    v4 = v18;\n    if (v17 != 93) {\n        if (v21 == 0) {\n            // break (via goto) -> 0x4056a4\n            goto lab_0x4056a4_3;\n        }\n        int64_t v22 = v20 + 4;\n        int32_t v23 = *(int32_t *)v22; // 0x4056e8\n        v20 = v22;\n        v4 = v22;\n        while (v23 != 93) {\n            // 0x4056fa\n            if (v23 == 0) {\n                // break (via goto) -> 0x4056a4\n                goto lab_0x4056a4_3;\n            }\n            // 0x4056e8\n            v22 = v20 + 4;\n            v23 = *(int32_t *)v22;\n            v20 = v22;\n            v4 = v22;\n        }\n    }\n    goto lab_0x405670;\n  lab_0x405670:\n    // 0x405670\n    v3 = v4;\n    v2 = *(int32_t *)(v3 + 4);\n    if (v2 == 0) {\n        // break -> 0x4056a4\n        goto lab_0x4056a4_3;\n    }\n    goto lab_0x405677;\n}\n"
        },
        {
            "funcName": "function_405760",
            "funcStartAddr": "405760",
            "funcEndAddr": "405859",
            "decompiledFuncCode": "int64_t function_405760(int64_t result) {\n    char v1 = *(char *)(result + 1); // 0x405770\n    char v2 = v1; // 0x405776\n    if (v1 == 0) {\n      lab_0x4057a6_3:\n        // 0x4057a6\n        return result;\n    }\n    int64_t v3 = result; // 0x405776\n    int64_t v4; // 0x405760\n    int64_t v5; // 0x405760\n    char v6; // 0x405760\n    int64_t v7; // 0x405760\n    while (true) {\n      lab_0x405778:\n        // 0x405778\n        v5 = v3;\n        char v8 = v2;\n        while (v8 != 91) {\n            if (v8 < 65) {\n                if ((1 << (int64_t)((v8 + 31) % 64) & 0xc0000601) != 0) {\n                    int64_t v9 = v5 + 2; // 0x40578b\n                    if (*(char *)v9 == 40) {\n                        // 0x405808\n                        v4 = function_405760(v9);\n                        goto lab_0x405770;\n                    }\n                }\n                if (v8 == 41) {\n                    // 0x405850\n                    return v5 + 2;\n                }\n            }\n            char v10 = *(char *)(v5 + 2); // 0x40579e\n            if (v10 == 0) {\n                return result;\n            }\n            v5++;\n            v8 = v10;\n        }\n        int32_t v11 = g49; // 0x4057b8\n        if (g49 == 0) {\n            int32_t v12 = getenv(\"POSIXLY_CORRECT\") == NULL ? -1 : 1; // 0x405840\n            g49 = v12;\n            v11 = v12;\n        }\n        int64_t v13 = v5 + 2; // 0x4057ba\n        char v14 = *(char *)v13; // 0x4057ba\n        if (v14 == 33) {\n            goto lab_0x405820;\n        } else {\n            // 0x4057c3\n            v6 = v14;\n            v7 = v13;\n            if (v11 < 0 == v14 == 94) {\n                goto lab_0x405820;\n            } else {\n                goto lab_0x4057d6;\n            }\n        }\n    }\n  lab_0x4057a6_3:\n    // 0x4057a6\n    return result;\n  lab_0x405820:;\n    int64_t v15 = v5 + 3; // 0x405820\n    v6 = *(char *)v15;\n    v7 = v15;\n    goto lab_0x4057d6;\n  lab_0x4057d6:;\n    int64_t v16 = v7;\n    char v17 = v6; // 0x4057d9\n    int64_t v18 = v16; // 0x4057d9\n    if (v6 == 93) {\n        int64_t v19 = v16 + 1; // 0x4057db\n        v17 = *(char *)v19;\n        v18 = v19;\n    }\n    int64_t v20 = v18; // 0x4057f5\n    char v21 = v17; // 0x4057f5\n    v4 = v18;\n    if (v17 != 93) {\n        if (v21 == 0) {\n            // break (via goto) -> 0x4057a6\n            goto lab_0x4057a6_3;\n        }\n        int64_t v22 = v20 + 1;\n        char v23 = *(char *)v22; // 0x4057e8\n        v20 = v22;\n        v4 = v22;\n        while (v23 != 93) {\n            // 0x4057fb\n            if (v23 == 0) {\n                // break (via goto) -> 0x4057a6\n                goto lab_0x4057a6_3;\n            }\n            // 0x4057e8\n            v22 = v20 + 1;\n            v23 = *(char *)v22;\n            v20 = v22;\n            v4 = v22;\n        }\n    }\n    goto lab_0x405770;\n  lab_0x405770:\n    // 0x405770\n    v3 = v4;\n    v2 = *(char *)(v3 + 1);\n    if (v2 == 0) {\n        // break -> 0x4057a6\n        goto lab_0x4057a6_3;\n    }\n    goto lab_0x405778;\n}\n"
        },
        {
            "funcName": "function_405860",
            "funcStartAddr": "405860",
            "funcEndAddr": "405df0",
            "decompiledFuncCode": "int64_t function_405860(int64_t a1, int64_t wstr, uint64_t a3, uint64_t a4, uint64_t a5, uint32_t a6) {\n    int64_t v1 = 0; // bp-64, 0x40588d\n    int32_t v2 = wcslen((int32_t *)wstr); // 0x405895\n    int64_t v3 = wstr + 4; // 0x40589e\n    int32_t v4 = *(int32_t *)v3; // 0x40589e\n    if (v4 == 0) {\n        // 0x405925\n        return 0xffffffff;\n    }\n    int64_t v5 = 0x100000000 * a1 >> 32; // 0x405877\n    int64_t v6 = a5 % 256;\n    int64_t v7 = v2; // 0x405895\n    int32_t v8 = v4; // 0x4058c3\n    int64_t v9 = &v1; // 0x4058c3\n    int64_t v10; // bp-136, 0x405860\n    int64_t v11 = &v10; // 0x4058c3\n    int64_t v12 = v3; // 0x4058c3\n    int64_t v13 = 0; // 0x4058c3\n    int64_t v14 = v3; // 0x4058c3\n    int64_t v15; // 0x405860\n    int64_t v16; // 0x405860\n    int64_t wstr2; // 0x405860\n    int64_t v17; // 0x405860\n    int32_t v18; // 0x405860\n    int64_t v19; // 0x405860\n    int64_t v20; // 0x405860\n    int64_t v21; // 0x405860\n    int64_t v22; // 0x405860\n    int64_t v23; // 0x405860\n    while (true) {\n      lab_0x4058e2:\n        // 0x4058e2\n        v22 = v12;\n        v23 = v11;\n        v19 = v9;\n        wstr2 = v14;\n        v15 = v13;\n        int32_t v24 = v8;\n        while (v24 != 91) {\n            if (v24 >= 65) {\n                // 0x4058c8\n                v16 = v15;\n                v17 = wstr2;\n                if (v24 == 124 == v15 == 0) {\n                    // 0x4059c0\n                    v21 = v7;\n                    if ((int32_t)v5 < 65) {\n                        goto lab_0x4059dd;\n                    } else {\n                        // 0x4059cf\n                        v21 = (wstr2 - v22 >> 2) + 1;\n                        goto lab_0x4059dd;\n                    }\n                } else {\n                    goto lab_0x4058d6;\n                }\n            }\n            if ((1 << (int64_t)((v24 + 31) % 64) & 0xc0000601) != 0) {\n                int64_t v25 = wstr2 + 4; // 0x4058f5\n                if (*(int32_t *)v25 == 40) {\n                    // 0x4058fc\n                    v16 = v15 + 1;\n                    v17 = v25;\n                    goto lab_0x4058d6;\n                }\n            }\n            // 0x4058fc\n            v16 = v15;\n            v17 = wstr2;\n            if (v24 != 41) {\n                goto lab_0x4058d6;\n            }\n            if (v15 == 0) {\n                // break (via goto) -> 0x405a86\n                goto lab_0x405a86;\n            }\n            int64_t v26 = wstr2 + 4; // 0x40590e\n            int32_t v27 = *(int32_t *)v26; // 0x40590e\n            if (v27 == 0) {\n                // 0x405925\n                return 0xffffffff;\n            }\n            wstr2 = v26;\n            v15--;\n            v24 = v27;\n        }\n        int32_t v28 = g49; // 0x405958\n        if (g49 == 0) {\n            int32_t v29 = getenv(\"POSIXLY_CORRECT\") == NULL ? -1 : 1; // 0x405a78\n            g49 = v29;\n            v28 = v29;\n        }\n        int64_t v30 = wstr2 + 4; // 0x40595e\n        int32_t v31 = *(int32_t *)v30; // 0x40595e\n        if (v31 == 33) {\n            goto lab_0x4059b0;\n        } else {\n            // 0x405967\n            v18 = v31;\n            v20 = v30;\n            if (v28 < 0 == v31 == 94) {\n                goto lab_0x4059b0;\n            } else {\n                goto lab_0x40597a;\n            }\n        }\n    }\n  lab_0x405a86:;\n    int64_t v32 = v7; // 0x405a96\n    if ((int32_t)v5 >= 65) {\n        // 0x405a98\n        v32 = (wstr2 - v22 >> 2) + 1;\n    }\n    int64_t v33 = 4 * v32 + 15 & -8; // 0x405ab6\n    if (v32 < 0x4000000000000000 != v33 < 0x1f3f) {\n        // 0x405925\n        return 0xffffffff;\n    }\n    int64_t v34 = v23 + 15 - (v33 + 23 & -16) & -16; // 0x405af8\n    int32_t * v35 = wmempcpy((int32_t *)(v34 | 8), (int32_t *)v22, (int32_t)((wstr2 - v22) / 4)); // 0x405b03\n    *v35 = 0;\n    *(int64_t *)v19 = v34;\n    int64_t v36 = v1; // 0x405b12\n    *(int64_t *)v34 = 0;\n    if (v36 == 0) {\n        // 0x405dca\n        __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 1108, \"ext_wmatch\");\n        return &g61;\n    }\n    // 0x405b26\n    if (*(int32_t *)(wstr2 - 4) != 41) {\n        // 0x405db1\n        __assert_fail(\"p[-1] == L_(')')\", \"lib/fnmatch_loop.c\", 1109, \"ext_wmatch\");\n        // 0x405dca\n        __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 1108, \"ext_wmatch\");\n        return &g61;\n    }\n    int64_t v37 = v5 + 0xffffffdf; // 0x405b35\n    g57 = v37 & 0xffffffff;\n    int64_t v38; // 0x405860\n    int64_t v39; // 0x405860\n    int64_t result2; // 0x405860\n    int64_t v40; // 0x405860\n    int32_t v41; // 0x405c85\n    switch ((int32_t)v37) {\n        case 0: {\n            // 0x405c5a\n            if (a3 > a4) {\n                // 0x405925\n                return 1;\n            }\n            // 0x405c68\n            v41 = a6 % 2 != 0 ? a6 : a6 & -5;\n            v38 = a3;\n            while (true) {\n              lab_0x405c88:;\n                int64_t v42 = v36; // 0x405c8c\n                while ((int32_t)function_405df0(v42 + 8, a3, v38, v6, v41) != 0) {\n                    // 0x405ca9\n                    v42 = *(int64_t *)v42;\n                    if (v42 == 0) {\n                        // 0x405cb2\n                        v40 = v6;\n                        if (v39 == a3) {\n                            goto lab_0x405cd2;\n                        } else {\n                            // 0x405cbb\n                            v40 = (a6 & 5) == 5 == *(int32_t *)(v39 - 4) == 47;\n                            goto lab_0x405cd2;\n                        }\n                    }\n                }\n                goto lab_0x405ced;\n            }\n            int64_t result = result2;\n            return result;\n        }\n        case 9: {\n            // 0x405b4b\n            if ((int32_t)function_405df0(wstr2, a3, a4, v6, a6) == 0) {\n                // 0x405925\n                return 0;\n            }\n        }\n        case 10: {\n            int64_t v43 = v36; // 0x405b94\n            int64_t v44; // 0x405860\n            int64_t v45; // 0x405860\n            int64_t v46; // 0x405860\n            int64_t v47; // 0x405860\n            int32_t v48; // 0x405b84\n            int64_t v49; // 0x405b88\n            int64_t v50; // 0x405c28\n            int64_t v51; // 0x405c0b\n            int32_t * v52; // 0x405baf\n            int32_t v53; // 0x405baf\n            int32_t v54; // 0x405bdc\n            if (a3 <= a4) {\n                if ((int32_t)function_405df0(v45 + 8, a3, v46, v6, v48) == 0) {\n                    if (v47 != a3) {\n                        // 0x405bad\n                        v52 = (int32_t *)(v47 - 4);\n                        v53 = *v52;\n                        result2 = 0;\n                        if ((int32_t)function_405df0(wstr2, v47, a4, (int64_t)((a6 & 5) == 5 == v53 == 47), v48) == 0) {\n                            return result2;\n                        }\n                        // 0x405bda\n                        v54 = *v52;\n                        result2 = 0;\n                        if ((int32_t)function_405df0(v49, v47, a4, (int64_t)((a6 & 5) == 5 == v54 == 47), v48) == 0) {\n                            return result2;\n                        }\n                    } else {\n                        // 0x405c3a\n                        result2 = 0;\n                        if ((int32_t)function_405df0(wstr2, a3, a4, v6, v48) == 0) {\n                            return result2;\n                        }\n                    }\n                    int64_t v55 = v1; // 0x405c07\n                    v44 = v55;\n                }\n                // 0x405c0b\n                v51 = v46 + 4;\n                v46 = v51;\n                while (v51 <= a4) {\n                    // 0x405c18\n                    v47 = v46;\n                    v50 = function_405df0(v45 + 8, a3, v47, v6, v48);\n                    v44 = v45;\n                    if ((int32_t)v50 == 0) {\n                        if (v47 != a3) {\n                            // 0x405bad\n                            v52 = (int32_t *)(v47 - 4);\n                            v53 = *v52;\n                            result2 = 0;\n                            if ((int32_t)function_405df0(wstr2, v47, a4, (int64_t)((a6 & 5) == 5 == v53 == 47), v48) == 0) {\n                                return result2;\n                            }\n                            // 0x405bda\n                            v54 = *v52;\n                            result2 = 0;\n                            if ((int32_t)function_405df0(v49, v47, a4, (int64_t)((a6 & 5) == 5 == v54 == 47), v48) == 0) {\n                                return result2;\n                            }\n                        } else {\n                            // 0x405c3a\n                            result2 = 0;\n                            if ((int32_t)function_405df0(wstr2, a3, a4, v6, v48) == 0) {\n                                return result2;\n                            }\n                        }\n                        // 0x405c07\n                        v44 = v1;\n                    }\n                    // 0x405c0b\n                    v51 = v47 + 4;\n                    v45 = v44;\n                    v46 = v51;\n                }\n            }\n            // 0x405d77\n            v43 = *(int64_t *)v43;\n            v1 = v43;\n            while (v43 != 0) {\n                // 0x405b98\n                if (a3 <= a4) {\n                    v47 = v46;\n                    v50 = function_405df0(v45 + 8, a3, v47, v6, v48);\n                    v44 = v45;\n                    if ((int32_t)v50 == 0) {\n                        if (v47 != a3) {\n                            // 0x405bad\n                            v52 = (int32_t *)(v47 - 4);\n                            v53 = *v52;\n                            result2 = 0;\n                            if ((int32_t)function_405df0(wstr2, v47, a4, (int64_t)((a6 & 5) == 5 == v53 == 47), v48) == 0) {\n                                return result2;\n                            }\n                            // 0x405bda\n                            v54 = *v52;\n                            result2 = 0;\n                            if ((int32_t)function_405df0(v49, v47, a4, (int64_t)((a6 & 5) == 5 == v54 == 47), v48) == 0) {\n                                return result2;\n                            }\n                        } else {\n                            // 0x405c3a\n                            result2 = 0;\n                            if ((int32_t)function_405df0(wstr2, a3, a4, v6, v48) == 0) {\n                                return result2;\n                            }\n                        }\n                        // 0x405c07\n                        v44 = v1;\n                    }\n                    // 0x405c0b\n                    v51 = v47 + 4;\n                    v45 = v44;\n                    v46 = v51;\n                    while (v51 <= a4) {\n                        // 0x405c18\n                        v47 = v46;\n                        v50 = function_405df0(v45 + 8, a3, v47, v6, v48);\n                        v44 = v45;\n                        if ((int32_t)v50 == 0) {\n                            if (v47 != a3) {\n                                // 0x405bad\n                                v52 = (int32_t *)(v47 - 4);\n                                v53 = *v52;\n                                result2 = 0;\n                                if ((int32_t)function_405df0(wstr2, v47, a4, (int64_t)((a6 & 5) == 5 == v53 == 47), v48) == 0) {\n                                    return result2;\n                                }\n                                // 0x405bda\n                                v54 = *v52;\n                                result2 = 0;\n                                if ((int32_t)function_405df0(v49, v47, a4, (int64_t)((a6 & 5) == 5 == v54 == 47), v48) == 0) {\n                                    return result2;\n                                }\n                            } else {\n                                // 0x405c3a\n                                result2 = 0;\n                                if ((int32_t)function_405df0(wstr2, a3, a4, v6, v48) == 0) {\n                                    return result2;\n                                }\n                            }\n                            // 0x405c07\n                            v44 = v1;\n                        }\n                        // 0x405c0b\n                        v51 = v47 + 4;\n                        v45 = v44;\n                        v46 = v51;\n                    }\n                }\n                // 0x405d77\n                v43 = *(int64_t *)v43;\n                v1 = v43;\n            }\n            // 0x405925\n            return 1;\n        }\n        case 30: {\n            // 0x405d51\n            if ((int32_t)function_405df0(wstr2, a3, a4, v6, a6) == 0) {\n                // 0x405925\n                return 0;\n            }\n        }\n        case 31: {\n            int32_t v56 = a6 % 2 != 0 ? a6 : a6 & -5; // 0x405d13\n            int64_t v57 = v36; // 0x405d16\n            int32_t * v58 = wcscat((int32_t *)(v57 + 8), (int32_t *)wstr2); // 0x405d2c\n            result2 = 0;\n            while ((int32_t)function_405df0((int64_t)v58, a3, a4, v6, v56) != 0) {\n                // 0x405d18\n                v57 = *(int64_t *)v57;\n                v1 = v57;\n                result2 = 1;\n                if (v57 == 0) {\n                    // break -> 0x405925\n                    break;\n                }\n                v58 = wcscat((int32_t *)(v57 + 8), (int32_t *)wstr2);\n                result2 = 0;\n            }\n          lab_0x405925_4:\n            // 0x405925\n            return result2;\n        }\n        default: {\n            // 0x405d98\n            __assert_fail(\"! \\\"Invalid extended matching operator\\\"\", \"lib/fnmatch_loop.c\", 1197, \"ext_wmatch\");\n            // 0x405db1\n            __assert_fail(\"p[-1] == L_(')')\", \"lib/fnmatch_loop.c\", 1109, \"ext_wmatch\");\n            // 0x405dca\n            __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 1108, \"ext_wmatch\");\n            return &g61;\n        }\n    }\n  lab_0x4058d6:;\n    int64_t v59 = v17 + 4; // 0x4058d6\n    int32_t v60 = *(int32_t *)v59; // 0x4058da\n    v9 = v19;\n    v11 = v23;\n    v12 = v22;\n    v13 = v16;\n    v14 = v59;\n    goto lab_0x4058de;\n  lab_0x405ced:;\n    int64_t v67 = v38 + 4; // 0x405ced\n    v38 = v67;\n    if (v67 > a4) {\n        // break -> 0x405925\n        goto lab_0x405925_4;\n    }\n    goto lab_0x405c88;\n  lab_0x4059b0:;\n    int64_t v68 = wstr2 + 8; // 0x4059b0\n    v18 = *(int32_t *)v68;\n    v20 = v68;\n    goto lab_0x40597a;\n  lab_0x40597a:;\n    int64_t v69 = v20;\n    int32_t v70 = v18; // 0x40597d\n    int64_t v71 = v69; // 0x40597d\n    if (v18 == 93) {\n        int64_t v72 = v69 + 4; // 0x40597f\n        v70 = *(int32_t *)v72;\n        v71 = v72;\n    }\n    int64_t v73 = v71 + 4; // 0x40599a\n    int64_t v74 = v73; // 0x4059a1\n    int32_t v75 = v70; // 0x4059a1\n    if (v70 != 93) {\n        while (v75 != 0) {\n            int32_t v76 = *(int32_t *)v74; // 0x405994\n            v74 += 4;\n            v75 = v76;\n            if (v76 == 93) {\n                // break -> 0x4059a3\n                break;\n            }\n        }\n        // 0x405925\n        return 0xffffffff;\n    }\n    // 0x4059a3\n    v60 = *(int32_t *)v73;\n    v9 = v19;\n    v11 = v23;\n    v12 = v22;\n    v13 = v15;\n    v14 = v73;\n    goto lab_0x4058de;\n  lab_0x4058de:\n    // 0x4058de\n    v8 = v60;\n    if (v8 == 0) {\n        // 0x405925\n        return 0xffffffff;\n    }\n    goto lab_0x4058e2;\n  lab_0x4059dd:;\n    int64_t v61 = 4 * v21 + 15 & -8; // 0x4059e5\n    result2 = 0xffffffff;\n    if (v21 < 0x4000000000000000 == v61 < 0x1f3f) {\n        int64_t v62 = v23 - (v61 + 23 & -16); // 0x405a1b\n        int64_t v63 = v62 + 15 & -16; // 0x405a27\n        int32_t * v64 = wmempcpy((int32_t *)(v63 | 8), (int32_t *)v22, (int32_t)((wstr2 - v22) / 4)); // 0x405a2f\n        int64_t v65 = wstr2 + 4; // 0x405a34\n        *v64 = 0;\n        *(int64_t *)v63 = 0;\n        *(int64_t *)v19 = v63;\n        v60 = *(int32_t *)v65;\n        v9 = v63;\n        v11 = v62;\n        v12 = v65;\n        v13 = 0;\n        v14 = v65;\n        goto lab_0x4058de;\n    } else {\n        goto lab_0x405925_4;\n    }\n  lab_0x405cd2:\n    // 0x405cd2\n    result2 = 0;\n    int64_t v66; // 0x405860\n    if ((int32_t)function_405df0(v66, v39, a4, v40, v41) == 0) {\n        goto lab_0x405925_4;\n    } else {\n        goto lab_0x405ced;\n    }\n}\n"
        },
        {
            "funcName": "function_405df0",
            "funcStartAddr": "405df0",
            "funcEndAddr": "4068cc",
            "decompiledFuncCode": "int64_t function_405df0(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, uint32_t a5) {\n    int32_t v1 = a1;\n    int64_t v2 = a2; // 0x405e1b\n    int64_t result; // 0x405df0\n    if (v1 == 0) {\n      lab_0x40608c:\n        // 0x40608c\n        if (v2 == a3) {\n            // 0x4060a5\n            return 0;\n        }\n        // 0x406095\n        result = 1;\n        if ((a5 & 8) != 0) {\n            // 0x4067c9\n            result = *(int32_t *)v2 != 47;\n        }\n      lab_0x4060a5_3:\n        // 0x4060a5\n        return result;\n    }\n    int64_t v3 = a5;\n    uint32_t v4 = a5 % 2;\n    int64_t v5 = a1; // 0x405e42\n    int64_t v6 = a2; // 0x405e42\n    int64_t v7 = a4 & 0xffffffff; // 0x405e42\n    int32_t v8 = v1; // 0x405e42\n    int64_t v9; // 0x405df0\n    int64_t v10; // 0x405df0\n    int32_t v11; // 0x405df0\n    int32_t v12; // 0x405df0\n    int32_t v13; // 0x405df0\n    int64_t v14; // 0x405df0\n    int64_t wc7; // 0x405df0\n    int32_t v15; // 0x405df0\n    int64_t v16; // 0x405df0\n    int64_t v17; // 0x405df0\n    int64_t v18; // 0x405df0\n    int64_t v19; // 0x405df0\n    int32_t * wc4; // 0x405df0\n    int32_t wc6; // 0x405eeb\n    while (true) {\n      lab_0x405e45:;\n        int32_t wc = v8;\n        int64_t v20 = v7;\n        wc7 = v6;\n        v17 = v5;\n        int64_t v21 = v20; // 0x405e48\n        int32_t v22 = wc; // 0x405e48\n        if ((v3 & 16) != 0) {\n            // 0x405e4a\n            v21 = v20 % 256;\n            v22 = towlower(wc);\n        }\n        // 0x405e60\n        v16 = v17 + 4;\n        v11 = v22;\n        v9 = v21;\n        g56 = v11 - 33;\n        switch (v11) {\n            case 33: {\n                goto lab_0x4060c0;\n            }\n            case 42: {\n                goto lab_0x406100;\n            }\n            case 43: {\n                goto lab_0x4060c0;\n            }\n            case 47: {\n                if ((a5 & 5) == 5) {\n                    // 0x406428\n                    if (wc7 == a3) {\n                        // 0x4060a5\n                        return 1;\n                    }\n                    // 0x406433\n                    v14 = v16;\n                    v7 = 1;\n                    if (*(int32_t *)wc7 != 47) {\n                        // 0x4060a5\n                        return 1;\n                    }\n                    goto lab_0x40606d;\n                } else {\n                    goto lab_0x40604b;\n                }\n            }\n            case 63: {\n                int64_t v23 = v9; // 0x406015\n                if ((a5 & 32) != 0) {\n                    // 0x406566\n                    v23 = v9;\n                    if (*(int32_t *)v16 == 40) {\n                        int64_t v24 = v9 % 256; // 0x40657a\n                        int64_t v25 = function_405860(63, v16, wc7, a3, v24, a5); // 0x406590\n                        v23 = v24;\n                        result = v25;\n                        if ((int32_t)v25 != -1) {\n                            // 0x4060a5\n                            return result;\n                        }\n                    }\n                }\n                // 0x40601b\n                if (wc7 == a3) {\n                    // 0x4060a5\n                    return 1;\n                }\n                int32_t v26 = *(int32_t *)wc7; // 0x406022\n                if (v26 == 47) {\n                    // 0x406450\n                    v14 = v16;\n                    v7 = 0;\n                    if (v4 != 0) {\n                        // 0x4060a5\n                        return 1;\n                    }\n                } else {\n                    unsigned char v27 = (char)(v26 == 46) & (char)v23; // 0x406033\n                    if (v27 != 0) {\n                        // 0x4060a5\n                        return 1;\n                    }\n                    // 0x406038\n                    v14 = v16;\n                    v7 = v27;\n                }\n                goto lab_0x40606d;\n            }\n            case 64: {\n                goto lab_0x4060c0;\n            }\n            case 91: {\n                int32_t v28 = g49; // 0x405eda\n                int64_t v29 = v9; // 0x405eda\n                if (g49 == 0) {\n                    // 0x406470\n                    v28 = getenv(\"POSIXLY_CORRECT\") == NULL ? -1 : 1;\n                    g49 = v28;\n                    v29 = v9 % 256;\n                }\n                // 0x405ee0\n                if (wc7 == a3) {\n                    // 0x4060a5\n                    return 1;\n                }\n                int32_t v30 = v28; // 0x405f15\n                wc4 = (int32_t *)wc7;\n                wc6 = *wc4;\n                if (wc6 == 46) {\n                    // 0x406460\n                    if ((char)v29 != 0) {\n                        // 0x4060a5\n                        return 1;\n                    }\n                } else {\n                    // 0x405ef8\n                    if (wc6 == 47 == (v4 != 0)) {\n                        // 0x4060a5\n                        return 1;\n                    }\n                }\n                int32_t v31 = *(int32_t *)v16; // 0x405f09\n                if (v31 == 33) {\n                    // 0x406400\n                    v15 = 1;\n                    v10 = v17 + 8;\n                    goto lab_0x405f35;\n                } else {\n                    // 0x405f15\n                    v15 = 0;\n                    v10 = v16;\n                    if (v30 < 0 == v31 == 94) {\n                        // 0x406400\n                        v15 = 1;\n                        v10 = v17 + 8;\n                        goto lab_0x405f35;\n                    } else {\n                        goto lab_0x405f35;\n                    }\n                }\n            }\n            case 92: {\n                if ((v3 & 2) != 0) {\n                    // 0x4062a0\n                    if (wc7 == a3) {\n                        // 0x4060a5\n                        return 1;\n                    }\n                    // 0x4062ab\n                    v18 = v16;\n                    v12 = v11;\n                    v19 = v16;\n                    v13 = v11;\n                    if ((v3 & 16) != 0) {\n                        goto lab_0x405eb6;\n                    } else {\n                        goto lab_0x4062b4;\n                    }\n                } else {\n                    int32_t wc2 = *(int32_t *)v16; // 0x405e81\n                    if (wc2 == 0) {\n                        // 0x4060a5\n                        return 1;\n                    }\n                    int64_t v32 = v17 + 8; // 0x405e85\n                    if ((v3 & 16) == 0) {\n                        // 0x4064a0\n                        v19 = v32;\n                        v13 = wc2;\n                        if (wc7 == a3) {\n                            // 0x4060a5\n                            return 1;\n                        }\n                        goto lab_0x4062b4;\n                    } else {\n                        // 0x405ea0\n                        v18 = v32;\n                        v12 = towlower(wc2);\n                        if (wc7 == a3) {\n                            // 0x4060a5\n                            return 1;\n                        }\n                        goto lab_0x405eb6;\n                    }\n                }\n            }\n            default: {\n                goto lab_0x40604b;\n            }\n        }\n    }\n  lab_0x406100:;\n    int64_t v33 = v9; // 0x406119\n    int64_t result2; // 0x405df0\n    if ((a5 & 32) != 0) {\n        // 0x406524\n        v33 = v9;\n        if (*(int32_t *)v16 == 40) {\n            int64_t v34 = v9 % 256; // 0x40653f\n            int64_t v35 = function_405860(42, v16, wc7, a3, v34, a5); // 0x40654d\n            v33 = v34;\n            if ((int32_t)v35 != -1) {\n                // 0x4060a5\n                result2 = result;\n                return result2;\n            }\n        }\n    }\n    // 0x40611f\n    if (wc7 != a3) {\n        // 0x406124\n        if (*(int32_t *)wc7 == 46) {\n            // 0x406129\n            if ((char)v33 != 0) {\n                // 0x4060a5\n                return 1;\n            }\n        }\n    }\n    uint32_t v36 = *(int32_t *)v16; // 0x406132\n    int64_t v37 = v36; // 0x406132\n    int64_t v38 = v17 + 8; // 0x406136\n    int64_t v39 = wc7; // 0x40613e\n    int64_t v40 = v33; // 0x40613e\n    int64_t v41 = v37; // 0x40613e\n    int64_t v42 = v38; // 0x40613e\n    int32_t * v43; // 0x405df0\n    int64_t v44; // 0x405df0\n    int64_t v45; // 0x405df0\n    int64_t v46; // 0x405df0\n    int64_t v47; // 0x405df0\n    int64_t v48; // 0x405df0\n    int64_t v49; // 0x405df0\n    int64_t v50; // 0x405df0\n    int64_t v51; // 0x405df0\n    int64_t v52; // 0x405df0\n    int64_t v53; // 0x405df0\n    int64_t v54; // 0x405df0\n    int64_t v55; // 0x405df0\n    int64_t v56; // 0x405df0\n    int64_t v57; // 0x405df0\n    int32_t * v58; // 0x405df0\n    if (v36 != 42 != v36 != 63) {\n        // 0x406146\n        v55 = (a5 & 32) != 0;\n        v52 = wc7;\n        v44 = v33;\n        v47 = v37;\n        v49 = v38;\n        while (true) {\n          lab_0x406160_2:\n            // 0x406160\n            v50 = v49;\n            int64_t v59 = v47;\n            int64_t v60 = v44;\n            v53 = v52;\n            int64_t v61 = v55;\n            v58 = (int32_t *)v50;\n            v56 = v61;\n            v45 = v60;\n            v48 = v59;\n            if (*v58 != 40) {\n                goto lab_0x40616e;\n            } else {\n                // 0x406166\n                v56 = v61;\n                v45 = v60;\n                v48 = v59;\n                if ((char)v61 != 0) {\n                    int64_t v62 = function_405660(v50); // 0x4063c1\n                    int64_t v63 = v61 % 256; // 0x4063c6\n                    int64_t v64 = v60 % 256; // 0x4063cb\n                    if (v62 != v50) {\n                        // 0x4063b0\n                        v43 = (int32_t *)v62;\n                        v51 = v62;\n                        v57 = v63;\n                        v54 = v53;\n                        v46 = v64;\n                        goto lab_0x40617b;\n                    } else {\n                        // 0x4063da\n                        v56 = v63;\n                        v45 = v64;\n                        v48 = 0x1000000 * (int32_t)v59 >> 24;\n                        goto lab_0x40616e;\n                    }\n                } else {\n                    goto lab_0x40616e;\n                }\n            }\n        }\n        // 0x4060a5\n        result2 = result;\n        return result2;\n    }\n  lab_0x40618e:;\n    int64_t wstr = v39;\n    int32_t v65 = v41; // 0x406195\n    if (v65 == 0) {\n        // 0x4066b8\n        if (v4 == 0 || (a5 & 8) != 0) {\n            // 0x4060a5\n            return 0;\n        }\n        // 0x4066cb\n        result = wmemchr((int32_t *)wstr, 47, (int32_t)((a3 - wstr) / 4)) != NULL;\n        // 0x4060a5\n        return result;\n    }\n    int64_t v66 = v42;\n    int32_t * v67 = wmemchr((int32_t *)wstr, -v4 & 47, (int32_t)((a3 - wstr) / 4)); // 0x4061c0\n    int64_t v68 = v40 % 256; // 0x4061d4\n    uint64_t v69 = v67 == NULL ? a3 : (int64_t)v67; // 0x4061da\n    if (v65 == 91) {\n        goto lab_0x4064d6;\n    } else {\n        if ((a5 & 32) != 0) {\n            uint64_t v70 = v41 + 0xffffffdf; // 0x4064b0\n            if ((int32_t)v70 < 32) {\n                if ((1 << v70 % 64 & 0x80000401) == 0) {\n                    goto lab_0x4061f6;\n                } else {\n                    // 0x4064cc\n                    if (*(int32_t *)v66 != 40) {\n                        goto lab_0x4061f6;\n                    } else {\n                        goto lab_0x4064d6;\n                    }\n                }\n            } else {\n                goto lab_0x4061f6;\n            }\n        } else {\n            goto lab_0x4061f6;\n        }\n    }\n  lab_0x40616e:;\n    int64_t v71 = v45;\n    int64_t v72 = v56;\n    v43 = v58;\n    v51 = v50;\n    v57 = v72;\n    v54 = v53;\n    v46 = v71;\n    if ((int32_t)v48 == 63) {\n        // 0x4062d0\n        if (v53 == a3) {\n            return 1;\n        }\n        // 0x4062d9\n        if (!((v4 == 0 | *(int32_t *)v53 != 47))) {\n            return 1;\n        }\n        // 0x4062e2\n        v43 = v58;\n        v51 = v50;\n        v57 = v72;\n        v54 = v53 + 4;\n        v46 = v71;\n    }\n    goto lab_0x40617b;\n  lab_0x40617b:;\n    uint32_t v73 = *v43; // 0x40617b\n    int64_t v74 = v73; // 0x40617b\n    int64_t v75 = v51 + 4; // 0x40617e\n    v39 = v54;\n    v40 = v46;\n    v41 = v74;\n    v42 = v75;\n    switch (v73) {\n        case 63: {\n            goto lab_0x406160;\n        }\n        case 42: {\n            goto lab_0x406160;\n        }\n        default: {\n            goto lab_0x40618e;\n        }\n    }\n  lab_0x406160:\n    // 0x406160\n    v55 = v57;\n    v52 = v54;\n    v44 = v46;\n    v47 = v74;\n    v49 = v75;\n    goto lab_0x406160_2;\n  lab_0x406343:;\n    // 0x406343\n    int64_t v76; // 0x405df0\n    int64_t v77 = v76 + 4; // 0x406343\n    int64_t v78 = 58; // 0x40634a\n    int64_t v79 = v77; // 0x40634a\n    int32_t * v80; // 0x405df0\n    int32_t * v81 = v80; // 0x40634a\n    int64_t v82 = v76; // 0x40634a\n    int64_t v83 = v77; // 0x40634a\n    uint32_t v84; // 0x405df0\n    if (v84 == 91) {\n        goto lab_0x4065b0;\n    }\n    goto lab_0x405f77;\n  lab_0x4065b0:;\n    int64_t v118 = v82; // 0x4065b7\n    int64_t v119 = v83; // 0x4065b7\n    int64_t v120 = (int64_t)*v81; // 0x4065b7\n    goto lab_0x4065d3_2;\n  lab_0x4065d3_2:;\n    int32_t v183 = v120; // 0x4065d9\n    result = 1;\n    int32_t v145 = v183; // 0x4065dc\n    int64_t v158 = v120; // 0x4065dc\n    int64_t v157 = v119; // 0x4065dc\n    int64_t v143 = v118; // 0x4065dc\n    if (v183 == 0) {\n        goto lab_0x4060a5_3;\n    } else {\n        goto lab_0x4065e2;\n    }\n  lab_0x405fa6:;\n    // 0x405fa6\n    int64_t v93; // 0x405df0\n    int64_t v172 = v93;\n    int64_t v92; // 0x405df0\n    int64_t v173 = v92;\n    int64_t v91; // 0x405df0\n    int64_t v174 = v91;\n    int64_t v175 = v173 + 4; // 0x405fa6\n    int64_t v121; // 0x405df0\n    int64_t v122; // 0x405df0\n    int32_t v176; // 0x405fb0\n    if (v172 != 45) {\n        // 0x405f60\n        v121 = v172;\n        v122 = v175;\n        if (v84 == (int32_t)v174) {\n            // 0x405f60\n            v81 = (int32_t *)v173;\n            v82 = v173;\n            v83 = v175;\n            goto lab_0x4065b0;\n        }\n        goto lab_0x405f6e;\n    } else {\n        // 0x405fb0\n        v176 = *(int32_t *)v175;\n        switch (v176) {\n            case 93: {\n                goto lab_0x406360;\n            }\n            case 0: {\n                goto lab_0x406360;\n            }\n            default: {\n                goto lab_0x405fc4;\n            }\n        }\n    }\n  lab_0x406052:;\n    // 0x406052\n    int32_t * v94; // 0x405df0\n    int32_t wc5 = *v94; // 0x406052\n    int32_t v124 = wc5; // 0x406057\n    if ((v3 & 16) != 0) {\n        // 0x406059\n        v124 = towlower(wc5);\n    }\n    // 0x406060\n    v14 = v16;\n    v7 = 0;\n    if (v124 != v11) {\n        // 0x4060a5\n        return 1;\n    }\n    goto lab_0x40606d;\n  lab_0x405f9a:;\n    // 0x405f9a\n    int64_t v97; // 0x405df0\n    int64_t v170 = v97;\n    int64_t v96; // 0x405df0\n    int64_t wc10 = v96;\n    int32_t v98; // 0x405df0\n    int64_t v171 = v98;\n    v91 = wc10;\n    v92 = v170;\n    v93 = v171;\n    if ((v3 & 16) != 0) {\n        // 0x405f9f\n        v91 = towlower((int32_t)wc10);\n        v92 = v170;\n        v93 = v171;\n    }\n    goto lab_0x405fa6;\n  lab_0x405f6e:;\n    int64_t v177 = v122;\n    v78 = v121;\n    v79 = v177;\n    int32_t v125; // 0x405df0\n    if (v121 == 93) {\n        // 0x406690\n        v14 = v177;\n        v7 = 0;\n        result = 1;\n        if (v125 != 0) {\n            goto lab_0x40606d;\n        } else {\n            goto lab_0x4060a5_3;\n        }\n    }\n    goto lab_0x405f77;\n  lab_0x406360:\n    // 0x406360\n    v118 = v173;\n    v119 = v175;\n    v120 = v172;\n    if (v84 == (int32_t)v174) {\n        goto lab_0x4065d3_2;\n    }\n    // 0x406368\n    v96 = 45;\n    v97 = v175;\n    v98 = 93;\n    if (v176 != 93) {\n        goto lab_0x405fc4;\n    } else {\n        goto lab_0x405f9a;\n    }\n  lab_0x405fc4:;\n    int64_t v178 = v173 + 8; // 0x405fc4\n    int32_t v179 = v176; // 0x405fcb\n    int64_t v180 = v178; // 0x405fcb\n    if ((v3 & 2) == 0 == v176 == 92) {\n        // 0x406418\n        v179 = *(int32_t *)v178;\n        v180 = v173 + 12;\n    }\n    // 0x405fd6\n    if (v179 == 0) {\n        // 0x4060a5\n        return 1;\n    }\n    int64_t v181 = (int64_t)*(int32_t *)v180; // 0x405fe0\n    int64_t v182 = v180 + 4; // 0x405fe3\n    v121 = v181;\n    v122 = v182;\n    v118 = v180;\n    v119 = v182;\n    v120 = v181;\n    if (v84 >= (int32_t)v174 == v179 >= v84) {\n        goto lab_0x4065d3_2;\n    }\n    goto lab_0x405f6e;\n  lab_0x405f77:;\n    int64_t v85 = v78; // 0x405df0\n    int64_t v86 = v79; // 0x405df0\n    goto lab_0x405f77_2;\n  lab_0x4060c0:\n    if ((a5 & 32) != 0) {\n        // 0x4060c7\n        if (*(int32_t *)v16 == 40) {\n            int64_t v123 = function_405860((int64_t)v11, v16, wc7, a3, v9 % 256, a5); // 0x4060ea\n            result = v123;\n            if ((int32_t)v123 != -1) {\n                // 0x4060a5\n                return result;\n            }\n        }\n    }\n    goto lab_0x40604b;\n  lab_0x40604b:\n    // 0x40604b\n    if (wc7 == a3) {\n        // 0x4060a5\n        return 1;\n    }\n    // 0x40604b\n    v94 = (int32_t *)wc7;\n    goto lab_0x406052;\n  lab_0x40606d:\n    // 0x40606d\n    v5 = v14;\n    v8 = *(int32_t *)v5;\n    v6 = wc7 + 4;\n    v2 = v6;\n    if (v8 == 0) {\n        goto lab_0x40608c;\n    }\n    goto lab_0x405e45;\n  lab_0x405f35:\n    // 0x405f35\n    v125 = v15;\n    int32_t v126 = wc6; // 0x405f38\n    if ((v3 & 16) != 0) {\n        // 0x405f3a\n        v126 = towlower(wc6);\n    }\n    // 0x405f45\n    v84 = v126;\n    v85 = (int64_t)*(int32_t *)v10;\n    v86 = v10 + 4;\n    while (true) {\n      lab_0x405f77_2:\n        // 0x405f77\n        v76 = v86;\n        int64_t v87 = v85;\n        int32_t v88 = v87; // 0x405f7c\n        if ((v3 & 2) == 0 == v88 == 92) {\n            uint32_t wc3 = *(int32_t *)v76; // 0x406388\n            if (wc3 == 0) {\n                // 0x4060a5\n                return 1;\n            }\n            int64_t v89 = wc3; // 0x406396\n            if ((v3 & 16) != 0) {\n                // 0x406398\n                v89 = towlower(wc3);\n            }\n            int64_t v90 = v76 + 4; // 0x40639f\n            v91 = v89;\n            v92 = v90;\n            v93 = (int64_t)*(int32_t *)v90;\n            goto lab_0x405fa6;\n        } else {\n            // 0x405f85\n            v94 = wc4;\n            switch (v88) {\n                case 91: {\n                    // 0x4062f0\n                    v80 = (int32_t *)v76;\n                    int32_t v95 = *v80; // 0x4062f0\n                    v96 = v87;\n                    v97 = v76;\n                    v98 = v95;\n                    int64_t v99 = v76; // 0x4062f8\n                    if (v95 != 58) {\n                        goto lab_0x405f9a;\n                    } else {\n                        int64_t v100 = 0;\n                        int64_t v101 = v99 + 4; // 0x40632b\n                        int32_t v102 = *(int32_t *)v101; // 0x40632b\n                        while (v102 != 58) {\n                            if (v102 >= 122) {\n                                goto lab_0x406343;\n                            }\n                            int64_t v103 = v100 + 1; // 0x406310\n                            int64_t v104; // bp-1416, 0x405df0\n                            *(int32_t *)((int64_t)&v104 + 316 + 4 * v103) = v102;\n                            if (v100 == 255) {\n                                // 0x4060a5\n                                return 1;\n                            }\n                            v100 = v103;\n                            v101 += 4;\n                            v102 = *(int32_t *)v101;\n                        }\n                        // 0x406338\n                        int64_t v105; // 0x405df0\n                        if (*(int32_t *)(v105 + 8) == 93) {\n                            // 0x406742\n                            int64_t v106; // 0x405df0\n                            *(int32_t *)(v106 + 4 * v100) = 0;\n                            int32_t v107; // bp-1096, 0x405df0\n                            int32_t v108 = v107;\n                            int64_t v109; // 0x405df0\n                            int64_t v110; // 0x405df0\n                            if (v108 < 64) {\n                                // 0x406770\n                                if (v109 == v110 || v108 < 37 == ((v108 & -4) != 32)) {\n                                    // 0x4060a5\n                                    return 1;\n                                }\n                            } else {\n                                // 0x4067a4\n                                if (v108 == 64) {\n                                    // 0x4060a5\n                                    return 1;\n                                }\n                                if (v108 < 96) {\n                                    // 0x406781\n                                    if (v109 == v110) {\n                                        // 0x4060a5\n                                        return 1;\n                                    }\n                                } else {\n                                    // 0x4067b2\n                                    if (v108 > 126 || v109 == v110) {\n                                        // 0x4060a5\n                                        return 1;\n                                    }\n                                }\n                            }\n                            int64_t v111 = v109 + 4; // 0x40678a\n                            int64_t v112; // 0x405df0\n                            int64_t v113 = v112 + 1; // 0x40678e\n                            *(char *)v112 = (char)v108;\n                            int32_t v114 = *(int32_t *)v111; // 0x406795\n                            while (v114 != 0) {\n                                int64_t v115 = v113;\n                                int64_t v116 = v111;\n                                v108 = v114;\n                                if (v108 < 64) {\n                                    // 0x406770\n                                    if (v116 == v110 || v108 < 37 == ((v108 & -4) != 32)) {\n                                        // 0x4060a5\n                                        return 1;\n                                    }\n                                } else {\n                                    // 0x4067a4\n                                    if (v108 == 64) {\n                                        // 0x4060a5\n                                        return 1;\n                                    }\n                                    if (v108 < 96) {\n                                        // 0x406781\n                                        if (v116 == v110) {\n                                            // 0x4060a5\n                                            return 1;\n                                        }\n                                    } else {\n                                        // 0x4067b2\n                                        if (v108 > 126 || v116 == v110) {\n                                            // 0x4060a5\n                                            return 1;\n                                        }\n                                    }\n                                }\n                                // 0x40678a\n                                v111 = v116 + 4;\n                                v113 = v115 + 1;\n                                *(char *)v115 = (char)v108;\n                                v114 = *(int32_t *)v111;\n                            }\n                            // 0x406861\n                            *(char *)v113 = 0;\n                            int64_t name; // bp-1368, 0x405df0\n                            int32_t desc = wctype((char *)&name); // 0x40686e\n                            if (desc == 0) {\n                                // 0x4060a5\n                                return 1;\n                            }\n                            // 0x406884\n                            if (iswctype(*wc4, desc) != 0) {\n                                int64_t v117 = v105 + 12; // 0x4068aa\n                                v118 = v117;\n                                v119 = v105 + 16;\n                                v120 = (int64_t)*(int32_t *)v117;\n                                goto lab_0x4065d3_2;\n                            }\n                            // 0x40689a\n                            v121 = (int64_t)*(int32_t *)(v105 + 12);\n                            v122 = v105 + 16;\n                            goto lab_0x405f6e;\n                        } else {\n                            goto lab_0x406343;\n                        }\n                    }\n                }\n                case 0: {\n                    goto lab_0x406052;\n                }\n                default: {\n                    // 0x405f96\n                    v96 = v87;\n                    v97 = v76;\n                    v98 = *(int32_t *)v76;\n                    goto lab_0x405f9a;\n                }\n            }\n        }\n    }\n    goto lab_0x406052;\n  lab_0x405eb6:;\n    int32_t v127 = towlower(*(int32_t *)wc7); // 0x405ec2\n    int32_t v128 = v12; // 0x405ec2\n    int64_t v129 = v18; // 0x405ec2\n    goto lab_0x4062bb;\n  lab_0x4062b4:\n    // 0x4062b4\n    v127 = *(int32_t *)wc7;\n    v128 = v13;\n    v129 = v19;\n    goto lab_0x4062bb;\n  lab_0x4062bb:\n    // 0x4062bb\n    v14 = v129;\n    v7 = 0;\n    if (v127 != v128) {\n        // 0x4060a5\n        return 1;\n    }\n    goto lab_0x40606d;\n  lab_0x4064d6:;\n    int32_t v130 = v4 != 0 ? a5 : a5 & -5; // 0x4064e1\n    int64_t v131 = wstr; // 0x4064ed\n    if (v69 <= wstr) {\n        // 0x4060a5\n        return 1;\n    }\n    int64_t v132 = v68; // 0x4064ed\n    result = 0;\n    while ((int32_t)function_405df0(v66 - 4, v131, a3, v132, v130) != 0) {\n        int64_t v133 = v131 + 4; // 0x406513\n        result = 1;\n        v131 = v133;\n        v132 = 0;\n        if (v69 <= v133) {\n            // break -> 0x4060a5\n            break;\n        }\n        result = 0;\n    }\n    // 0x4060a5\n    return result;\n  lab_0x4061f6:;\n    int32_t v134; // 0x405df0\n    if (v41 == 47) {\n        if (v4 != 0) {\n            // 0x4067ee\n            if (wstr >= a3) {\n                // 0x4060a5\n                return 1;\n            }\n            int64_t v135 = wstr; // 0x4067f1\n            int64_t v136 = v135 + 4;\n            while (*(int32_t *)v135 != 47) {\n                // 0x406800\n                v135 = v136;\n                if (v136 >= a3) {\n                    // 0x4060a5\n                    return 1;\n                }\n                v136 = v135 + 4;\n            }\n            // 0x406812\n            result = (int32_t)function_405df0(v66, v136, a3, (int64_t)(a5 / 4 % 2), a5) != 0;\n            // 0x4060a5\n            return result;\n        }\n        // 0x4067bf\n        v134 = a5 & -5;\n        goto lab_0x406208;\n    } else {\n        // 0x406200\n        v134 = a5;\n        if (v4 == 0) {\n            // 0x4067bf\n            v134 = a5 & -5;\n            goto lab_0x406208;\n        } else {\n            goto lab_0x406208;\n        }\n    }\n  lab_0x406208:;\n    int64_t wc8 = v41; // 0x406210\n    if ((v3 & 2) == 0 && v41 == 92) {\n        // 0x406845\n        wc8 = (int64_t)*(int32_t *)v66;\n    }\n    int64_t v137 = wc8; // 0x406218\n    if ((v3 & 16) != 0) {\n        // 0x40621a\n        v137 = towlower((int32_t)wc8);\n    }\n    // 0x40622f\n    if (v69 <= wstr) {\n        // 0x4060a5\n        return 1;\n    }\n    int64_t v138 = v66 - 4; // 0x40622f\n    int32_t wc9 = *(int32_t *)wstr; // 0x406260\n    int32_t v139 = wc9; // 0x406266\n    if ((v3 & 16) != 0) {\n        // 0x406268\n        v139 = towlower(wc9);\n    }\n    // 0x40626f\n    if (v139 == (int32_t)v137) {\n        // 0x406274\n        if ((int32_t)function_405df0(v138, wstr, a3, v68, v134) == 0) {\n            // break -> 0x4060a5\n            break;\n        }\n    }\n    int64_t v140 = wstr + 4; // 0x406250\n    result = 1;\n    while (v69 > v140) {\n        int64_t v141 = v140;\n        wc9 = *(int32_t *)v141;\n        v139 = wc9;\n        if ((v3 & 16) != 0) {\n            // 0x406268\n            v139 = towlower(wc9);\n        }\n        // 0x40626f\n        if (v139 == (int32_t)v137) {\n            // 0x406274\n            result = 0;\n            if ((int32_t)function_405df0(v138, v141, a3, 0, v134) == 0) {\n                // break -> 0x4060a5\n                break;\n            }\n        }\n        // 0x406250\n        v140 = v141 + 4;\n        result = 1;\n    }\n    // 0x4060a5\n    return result;\n  lab_0x4065e2:;\n    int64_t v142 = v143;\n    int32_t v144 = v145;\n    int32_t v146; // 0x405df0\n    int64_t v147; // 0x405df0\n    int32_t v148; // 0x405df0\n    int64_t v149; // 0x405df0\n    int64_t v150; // 0x405df0\n    int64_t v151; // 0x405df0\n    int64_t v152; // 0x405df0\n    int64_t v153; // 0x405df0\n    int64_t v154; // 0x405df0\n    int64_t v155; // 0x405df0\n    if ((v3 & 2) == 0 == v144 == 92) {\n        // 0x406648\n        result = 1;\n        if (*(int32_t *)(v142 + 4) == 0) {\n            goto lab_0x4060a5_3;\n        } else {\n            int64_t v156 = v142 + 8; // 0x406653\n            v152 = v156;\n            v148 = *(int32_t *)v156;\n            goto lab_0x4065cf;\n        }\n    } else {\n        // 0x4065f5\n        v154 = v157;\n        v153 = v158;\n        v149 = v154;\n        if (v144 != 91) {\n            goto lab_0x4065c0;\n        } else {\n            int32_t v159 = *(int32_t *)(v142 + 4); // 0x4065fb\n            int64_t v160 = v142 + 8;\n            v152 = v154;\n            v148 = v159;\n            switch (v159) {\n                case 58: {\n                    // 0x406726\n                    v155 = v142 + 1024;\n                    v150 = v160;\n                    goto lab_0x406726_2;\n                }\n                case 61: {\n                    // 0x406660\n                    result = 1;\n                    if (*(int32_t *)v160 == 0) {\n                        goto lab_0x4060a5_3;\n                    } else {\n                        // 0x40666b\n                        result = 1;\n                        if (*(int32_t *)(v142 + 12) != 61) {\n                            goto lab_0x4060a5_3;\n                        } else {\n                            // 0x406675\n                            result = 1;\n                            if (*(int32_t *)(v142 + 16) != 93) {\n                                goto lab_0x4060a5_3;\n                            } else {\n                                // 0x40667f\n                                v153 = (int64_t)*(int32_t *)(v142 + 20);\n                                v149 = v142 + 24;\n                                goto lab_0x4065c0;\n                            }\n                        }\n                    }\n                }\n                case 46: {\n                    int64_t v161 = v142 + 12; // 0x40662d\n                    int32_t v162 = *(int32_t *)v161; // 0x40662d\n                    result = 1;\n                    v146 = v162;\n                    v147 = v161;\n                    v151 = v160;\n                    if (v162 == 0) {\n                        goto lab_0x4060a5_3;\n                    } else {\n                        goto lab_0x40663c;\n                    }\n                }\n                default: {\n                    goto lab_0x4065cf;\n                }\n            }\n        }\n    }\n  lab_0x4065c0:;\n    int64_t v163 = v149;\n    if (v153 == 93) {\n        // 0x40684d\n        v14 = v163;\n        v7 = (v3 & 2) == 0 == v144 == 92;\n        result = 1;\n        if (v125 != 0) {\n            goto lab_0x4060a5_3;\n        } else {\n            goto lab_0x40606d;\n        }\n    } else {\n        // 0x4065c9\n        v152 = v163;\n        v148 = *(int32_t *)v163;\n        goto lab_0x4065cf;\n    }\n  lab_0x4065cf:\n    // 0x4065cf\n    result = 1;\n    v145 = v148;\n    v158 = v148;\n    v157 = v152 + 4;\n    v143 = v152;\n    if (v148 == 0) {\n        goto lab_0x4060a5_3;\n    } else {\n        goto lab_0x4065e2;\n    }\n  lab_0x406726_2:;\n    int64_t v164 = v150;\n    int32_t v165 = *(int32_t *)v164;\n    if (v165 != 58) {\n        // 0x406708\n        v152 = v154;\n        v148 = 58;\n        if (v165 < 122) {\n            // 0x406716\n            result = 1;\n            v150 = v164 + 4;\n            if (v155 == v164) {\n                goto lab_0x4060a5_3;\n            } else {\n                goto lab_0x406726_2;\n            }\n        } else {\n            goto lab_0x4065cf;\n        }\n    } else {\n        // 0x40672c\n        v152 = v154;\n        v148 = v165;\n        if (*(int32_t *)(v164 + 4) != 93) {\n            goto lab_0x4065cf;\n        } else {\n            // 0x406736\n            v153 = (int64_t)*(int32_t *)(v164 + 8);\n            v149 = v164 + 12;\n            goto lab_0x4065c0;\n        }\n    }\n  lab_0x40663c:;\n    int64_t v166 = v147;\n    if (v146 != 46) {\n        goto lab_0x40662a;\n    } else {\n        int64_t v167 = v151;\n        if (*(int32_t *)(v167 + 8) == 93) {\n            // 0x4067d6\n            v153 = (int64_t)*(int32_t *)(v167 + 12);\n            v149 = v167 + 16;\n            goto lab_0x4065c0;\n        } else {\n            goto lab_0x40662a;\n        }\n    }\n  lab_0x40662a:;\n    int64_t v168 = v166 + 4; // 0x40662d\n    int32_t v169 = *(int32_t *)v168; // 0x40662d\n    result = 1;\n    v146 = v169;\n    v147 = v168;\n    v151 = v166;\n    if (v169 == 0) {\n        goto lab_0x4060a5_3;\n    } else {\n        goto lab_0x40663c;\n    }\n}\n"
        },
        {
            "funcName": "function_4068d0",
            "funcStartAddr": "4068d0",
            "funcEndAddr": "406e20",
            "decompiledFuncCode": "int64_t function_4068d0(int64_t a1, int64_t str, uint64_t a3, uint64_t a4, uint64_t a5, uint32_t a6) {\n    int64_t v1 = 0; // bp-64, 0x4068fd\n    int32_t len = strlen((char *)str); // 0x406905\n    int64_t v2 = str + 1; // 0x40690e\n    char v3 = *(char *)v2; // 0x40690e\n    if (v3 == 0) {\n        // 0x4069a5\n        return 0xffffffff;\n    }\n    int64_t v4 = 0x100000000 * a1 >> 32; // 0x4068e7\n    int64_t v5 = len; // 0x406905\n    char v6 = v3; // 0x406940\n    int64_t v7 = &v1; // 0x406940\n    int64_t v8; // bp-136, 0x4068d0\n    int64_t v9 = &v8; // 0x406940\n    int64_t v10 = v2; // 0x406940\n    int64_t v11 = v2; // 0x406940\n    int64_t v12 = 0; // 0x406940\n    int64_t v13; // 0x4068d0\n    int64_t v14; // 0x4068d0\n    int64_t v15; // 0x4068d0\n    int64_t v16; // 0x4068d0\n    int64_t v17; // 0x4068d0\n    int64_t v18; // 0x4068d0\n    int64_t v19; // 0x4068d0\n    char v20; // 0x4068d0\n    char v21; // 0x4068d0\n    int64_t v22; // 0x4068d0\n    int64_t v23; // 0x4068d0\n    int64_t v24; // 0x4068d0\n    int64_t v25; // 0x4068d0\n    int64_t v26; // 0x4068d0\n    int64_t v27; // 0x406b34\n    int32_t v28; // 0x406cac\n    int64_t v29; // 0x4068d0\n    int64_t v30; // 0x4068d0\n    while (true) {\n      lab_0x406962:\n        // 0x406962\n        v24 = v10;\n        v26 = v9;\n        v22 = v7;\n        v18 = v12;\n        v15 = v11;\n        char v31 = v6;\n        while (v31 != 91) {\n            if (v31 >= 65) {\n                // 0x406948\n                v16 = v15;\n                v19 = v18;\n                if (v31 == 124 == v18 == 0) {\n                    int64_t v32 = v15 - v24; // 0x406a43\n                    int64_t v33 = ((int32_t)v4 < 65 ? v5 : v32 + 1) + 15 & -8; // 0x406a57\n                    if (v33 < 0x1f3f) {\n                        int64_t v34 = v26 - (v33 + 23 & -16); // 0x406a74\n                        int64_t v35 = v34 + 15 & -16; // 0x406a7c\n                        int64_t * v36 = mempcpy((int64_t *)(v35 | 8), (int64_t *)v24, (int32_t)v32); // 0x406a84\n                        int64_t v37 = v15 + 1; // 0x406a89\n                        *(char *)v36 = 0;\n                        *(int64_t *)v35 = 0;\n                        *(int64_t *)v22 = v35;\n                        v20 = *(char *)v37;\n                        v7 = v35;\n                        v9 = v34;\n                        v10 = v37;\n                        v11 = v37;\n                        v12 = 0;\n                        goto lab_0x40695e;\n                    } else {\n                        return 0xffffffff;\n                    }\n                } else {\n                    goto lab_0x406955;\n                }\n            }\n            if ((1 << (int64_t)((v31 + 31) % 64) & 0xc0000601) != 0) {\n                int64_t v38 = v15 + 1; // 0x406974\n                if (*(char *)v38 == 40) {\n                    // 0x40697b\n                    v16 = v38;\n                    v19 = v18 + 1;\n                    goto lab_0x406955;\n                }\n            }\n            // 0x40697b\n            v16 = v15;\n            v19 = v18;\n            if (v31 != 41) {\n                goto lab_0x406955;\n            }\n            if (v18 == 0) {\n                // 0x406ad6\n                if ((((int32_t)v4 < 65 ? v5 : v15 - v24 + 1) + 15 & -8) < 0x1f3f) {\n                    // 0x406b0e\n                    int64_t v39; // 0x406af9\n                    int64_t v40 = v26 + 15 - (v39 + 23 & -16) & -16; // 0x406b1e\n                    int64_t v41; // 0x406ae3\n                    int64_t * v42 = mempcpy((int64_t *)(v40 | 8), (int64_t *)v24, (int32_t)v41); // 0x406b29\n                    *(int64_t *)v22 = v40;\n                    *(char *)v42 = 0;\n                    v27 = v1;\n                    *(int64_t *)v40 = 0;\n                    if (v27 == 0) {\n                        // 0x406dfa\n                        __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 1108, \"ext_match\");\n                        return &g61;\n                    }\n                    char v43 = *(char *)(v15 - 1); // 0x406b4d\n                    if (v43 != 41) {\n                        // 0x406de1\n                        __assert_fail(\"p[-1] == L_(')')\", \"lib/fnmatch_loop.c\", 1109, \"ext_match\");\n                        // 0x406dfa\n                        __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 1108, \"ext_match\");\n                        return &g61;\n                    }\n                    int64_t v44 = v4 + 0xffffffdf; // 0x406b5c\n                    g59 = v44 & 0xffffffff;\n                    switch ((int32_t)v44) {\n                        case 0: {\n                            // 0x406c85\n                            if (a3 > a4) {\n                                return 0xffffffff;\n                            } else {\n                                // 0x406c93\n                                v28 = a6 % 2 != 0 ? a6 : a6 & -5;\n                                v30 = 0x100000000 * v15 >> 32;\n                                v13 = a3;\n                                // 0x406caf\n                                v14 = v13;\n                                v17 = v27;\n                                goto lab_0x406cb8;\n                            }\n                        }\n                        case 9: {\n                            // 0x406b72\n                            if ((int32_t)function_406e20(v15, a3, a4, v29, a6) == 0) {\n                                return 0xffffffff;\n                            } else {\n                                goto lab_0x406b92;\n                            }\n                        }\n                        case 10: {\n                            goto lab_0x406b92;\n                        }\n                        case 30: {\n                            // 0x406d7c\n                            if ((int32_t)function_406e20(v15, a3, a4, v29, a6) != 0) {\n                                goto lab_0x406d2c;\n                            } else {\n                                return 0xffffffff;\n                            }\n                        }\n                        case 31: {\n                            goto lab_0x406d2c;\n                        }\n                        default: {\n                            // 0x406dc8\n                            __assert_fail(\"! \\\"Invalid extended matching operator\\\"\", \"lib/fnmatch_loop.c\", 1197, \"ext_match\");\n                            // 0x406de1\n                            __assert_fail(\"p[-1] == L_(')')\", \"lib/fnmatch_loop.c\", 1109, \"ext_match\");\n                            // 0x406dfa\n                            __assert_fail(\"list != NULL\", \"lib/fnmatch_loop.c\", 1108, \"ext_match\");\n                            return &g61;\n                        }\n                    }\n                } else {\n                    return 0xffffffff;\n                }\n            }\n            int64_t v45 = v15 + 1; // 0x40698c\n            char v46 = *(char *)v45; // 0x40698c\n            if (v46 == 0) {\n                return 0xffffffff;\n            }\n            v18--;\n            v15 = v45;\n            v31 = v46;\n        }\n        int32_t v47 = g49; // 0x4069d8\n        v8 = v24;\n        if (g49 == 0) {\n            // 0x406ab0\n            v8 = v24;\n            int32_t v48 = getenv(\"POSIXLY_CORRECT\") == NULL ? -1 : 1; // 0x406ac8\n            g49 = v48;\n            v47 = v48;\n        }\n        // 0x4069de\n        v25 = v8;\n        int64_t v49 = v15 + 1; // 0x4069de\n        char v50 = *(char *)v49; // 0x4069de\n        if (v50 == 33) {\n            goto lab_0x406a30;\n        } else {\n            // 0x4069e7\n            v21 = v50;\n            v23 = v49;\n            if (v47 < 0 == v50 == 94) {\n                goto lab_0x406a30;\n            } else {\n                goto lab_0x4069f9;\n            }\n        }\n    }\n  lab_0x4069a5_3:\n    // 0x4069a5\n    return 0xffffffff;\n  lab_0x406955:;\n    int64_t v51 = v16 + 1; // 0x406955\n    v20 = *(char *)v51;\n    v7 = v22;\n    v9 = v26;\n    v10 = v24;\n    v11 = v51;\n    v12 = v19;\n    goto lab_0x40695e;\n  lab_0x406a30:;\n    int64_t v82 = v15 + 2; // 0x406a30\n    v21 = *(char *)v82;\n    v23 = v82;\n    goto lab_0x4069f9;\n  lab_0x4069f9:;\n    int64_t v83 = v23;\n    char v84 = v21; // 0x4069fb\n    int64_t v85 = v83; // 0x4069fb\n    int64_t v86; // 0x4068d0\n    int64_t v87; // 0x4068d0\n    char v88; // 0x4068d0\n    if (v21 != 93) {\n        goto lab_0x406a1b;\n    } else {\n        char v89 = *(char *)(v83 + 1); // 0x4069fd\n        int64_t v90 = v83 + 2; // 0x406a05\n        v88 = v89;\n        v87 = v90;\n        v86 = v90;\n        if (v89 == 93) {\n            goto lab_0x406a23;\n        } else {\n            goto lab_0x406a10;\n        }\n    }\n  lab_0x406a1b:;\n    int64_t v91 = v85 + 1;\n    v88 = v84;\n    v87 = v91;\n    v86 = v91;\n    if (v84 != 93) {\n        goto lab_0x406a10;\n    } else {\n        goto lab_0x406a23;\n    }\n  lab_0x406a10:\n    // 0x406a10\n    if (v88 == 0) {\n        // break -> 0x4069a5\n        goto lab_0x4069a5_3;\n    }\n    // 0x406a14\n    v84 = *(char *)v87;\n    v85 = v87;\n    goto lab_0x406a1b;\n  lab_0x406a23:\n    // 0x406a23\n    v20 = *(char *)v86;\n    v7 = v22;\n    v9 = v26;\n    v10 = v25;\n    v11 = v86;\n    v12 = v18;\n    goto lab_0x40695e;\n  lab_0x40695e:\n    // 0x40695e\n    v6 = v20;\n    if (v6 == 0) {\n        // break -> 0x4069a5\n        goto lab_0x4069a5_3;\n    }\n    goto lab_0x406962;\n  lab_0x406b92:;\n    int32_t v52 = a6 % 2 != 0 ? a6 : a6 & -5; // 0x406baf\n    int64_t v53 = str - 1; // 0x406bb3\n    int64_t v54 = 0x100000000 * v15 >> 32;\n    int64_t v55 = v27; // 0x406bbf\n    goto lab_0x406bc3;\n  lab_0x406d2c:;\n    int32_t v62 = a6 % 2 != 0 ? a6 : a6 & -5; // 0x406d3e\n    char * str2 = (char *)v15; // 0x406d57\n    int64_t v61 = v27; // 0x406d41\n    goto lab_0x406d50;\n  lab_0x406bc3:;\n    int64_t v56 = v55;\n    int64_t v57 = a3; // 0x406bc6\n    int64_t v58 = v56; // 0x406bc6\n    int64_t v59 = v56; // 0x406bc6\n    if (a3 > a4) {\n        goto lab_0x406da2;\n    } else {\n        goto lab_0x406c43;\n    }\n  lab_0x406d50:;\n    int64_t v60 = v61;\n    char * dest_str = strcat((char *)(v60 + 8), str2); // 0x406d57\n    if ((int32_t)function_406e20((int64_t)dest_str, a3, a4, v29, v62) != 0) {\n        int64_t v63 = *(int64_t *)v60; // 0x406d43\n        v1 = v63;\n        v61 = v63;\n        if (v63 == 0) {\n            goto lab_0x4069a5_3;\n        } else {\n            goto lab_0x406d50;\n        }\n    } else {\n        goto lab_0x4069a5_3;\n    }\n  lab_0x406da2:;\n    int64_t v64 = v59;\n    int64_t v65 = *(int64_t *)v64; // 0x406da2\n    v1 = v65;\n    v55 = v65;\n    if (v65 != 0) {\n        goto lab_0x406bc3;\n    } else {\n        goto lab_0x4069a5_3;\n    }\n  lab_0x406c43:;\n    int64_t v66 = v58;\n    int64_t v67 = v57;\n    int64_t v68 = function_406e20(v66 + 8, a3, v67, v29, v52); // 0x406c53\n    int64_t v69 = v66; // 0x406c5a\n    if ((int32_t)v68 != 0) {\n        goto lab_0x406c36;\n    } else {\n        int64_t v70; // 0x406c32\n        if (v67 != a3) {\n            char * v71 = (char *)(v67 - 1); // 0x406bda\n            char v72 = *v71; // 0x406bda\n            if ((int32_t)function_406e20(v54, v67, a4, (int64_t)((a6 & 5) == 5 == v72 == 47), v52) == 0) {\n                goto lab_0x4069a5_3;\n            } else {\n                char v73 = *v71; // 0x406c07\n                if ((int32_t)function_406e20(v53, v67, a4, (int64_t)((a6 & 5) == 5 == v73 == 47), v52) == 0) {\n                    goto lab_0x4069a5_3;\n                } else {\n                    // 0x406c32\n                    v70 = v1;\n                    v69 = v70;\n                    goto lab_0x406c36;\n                }\n            }\n        } else {\n            // 0x406c65\n            if ((int32_t)function_406e20(v54, a3, a4, v29, v52) != 0) {\n                // 0x406c32\n                v70 = v1;\n                v69 = v70;\n                goto lab_0x406c36;\n            } else {\n                goto lab_0x4069a5_3;\n            }\n        }\n    }\n  lab_0x406cb8:;\n    int64_t v74 = v17;\n    int64_t v75; // 0x4068d0\n    if ((int32_t)function_406e20(v74 + 8, a3, v14, v29, v28) == 0) {\n        goto lab_0x406d14;\n    } else {\n        int64_t v76 = *(int64_t *)v74; // 0x406cd1\n        v17 = v76;\n        if (v76 != 0) {\n            goto lab_0x406cb8;\n        } else {\n            // 0x406cd9\n            v75 = v29;\n            if (v14 == a3) {\n                goto lab_0x406cf9;\n            } else {\n                char v77 = *(char *)(v14 - 1); // 0x406ce4\n                v75 = (a6 & 5) == 5 == v77 == 47;\n                goto lab_0x406cf9;\n            }\n        }\n    }\n  lab_0x406c36:;\n    int64_t v78 = v69;\n    int64_t v79 = v67 + 1; // 0x406c36\n    v57 = v79;\n    v58 = v78;\n    v59 = v78;\n    if (v79 > a4) {\n        goto lab_0x406da2;\n    } else {\n        goto lab_0x406c43;\n    }\n  lab_0x406d14:;\n    int64_t v80 = v14 + 1; // 0x406d14\n    v13 = v80;\n    if (v80 <= a4) {\n        // 0x406caf\n        v14 = v13;\n        v17 = v27;\n        goto lab_0x406cb8;\n    } else {\n        goto lab_0x4069a5_3;\n    }\n  lab_0x406cf9:;\n    int64_t v81 = v75;\n    if ((int32_t)function_406e20(v30, v14, a4, v81, v28) == 0) {\n        goto lab_0x4069a5_3;\n    } else {\n        goto lab_0x406d14;\n    }\n}\n"
        },
        {
            "funcName": "function_406e20",
            "funcStartAddr": "406e20",
            "funcEndAddr": "407903",
            "decompiledFuncCode": "int64_t function_406e20(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, uint32_t a5) {\n    char v1 = a1;\n    int64_t v2 = a2; // 0x406e4e\n    int64_t result; // 0x406e20\n    if (v1 == 0) {\n      lab_0x407119:\n        // 0x407119\n        if (v2 == a3) {\n            // 0x407135\n            return 0;\n        }\n        // 0x407124\n        result = 1;\n        if ((a5 & 8) != 0) {\n            // 0x40784c\n            result = *(char *)v2 != 47;\n        }\n      lab_0x407135_3:\n        // 0x407135\n        return result;\n    }\n    int64_t v3 = a5;\n    uint32_t v4 = a5 % 2;\n    int64_t v5 = a1; // 0x406e6c\n    char v6 = v1; // 0x406e6c\n    int64_t v7 = a2; // 0x406e6c\n    int64_t v8 = a4 & 0xffffffff; // 0x406e6c\n    int64_t v9; // 0x406e20\n    int64_t v10; // 0x406e20\n    int64_t v11; // 0x406e20\n    int64_t v12; // 0x406e20\n    uint64_t v13; // 0x406e20\n    int64_t v14; // 0x406e20\n    int64_t result2; // 0x406e20\n    int64_t v15; // 0x406e20\n    int64_t v16; // 0x406e20\n    int32_t v17; // 0x406e20\n    int64_t v18; // 0x406e20\n    int64_t v19; // 0x406e20\n    int64_t v20; // 0x406e20\n    int64_t v21; // 0x406e20\n    char * wc; // 0x406e20\n    unsigned char v22; // 0x406f09\n    while (true) {\n      lab_0x406e6f:\n        // 0x406e6f\n        v13 = v8;\n        v12 = v7;\n        v19 = v5;\n        int64_t v23 = v6;\n        int64_t v24 = v23; // 0x406e71\n        if ((v3 & 16) != 0) {\n            int32_t ** v25 = __ctype_tolower_loc(); // 0x406e73\n            v24 = (int64_t)*(char *)(4 * v23 + (int64_t)*v25);\n        }\n        // 0x406e80\n        v18 = v19 + 1;\n        v9 = v24;\n        uint64_t v26 = v9 + 0xffffffdf; // 0x406e80\n        g58 = v26 % 256;\n        switch ((char)v26) {\n            case 0: {\n                goto lab_0x407150;\n            }\n            case 9: {\n                goto lab_0x407190;\n            }\n            case 10: {\n                goto lab_0x407150;\n            }\n            case 14: {\n                if ((a5 & 5) == 5) {\n                    // 0x407568\n                    if (v12 == a3) {\n                        // 0x407135\n                        return 1;\n                    }\n                    // 0x407573\n                    v11 = v18;\n                    v8 = 1;\n                    if (*(char *)v12 != 47) {\n                        // 0x407135\n                        return 1;\n                    }\n                    goto lab_0x4070fe;\n                } else {\n                    goto lab_0x4070d3;\n                }\n            }\n            case 30: {\n                if ((a5 & 32) != 0) {\n                    // 0x40767b\n                    if (*(char *)v18 == 40) {\n                        int64_t v27 = function_4068d0(63, v18, v12, a3, v13 % 256, a5); // 0x4076a1\n                        result = v27;\n                        if ((int32_t)v27 != -1) {\n                            // 0x407135\n                            return result;\n                        }\n                    }\n                }\n                // 0x40709b\n                if (v12 == a3) {\n                    // 0x407135\n                    return 1;\n                }\n                char v28 = *(char *)v12; // 0x4070a6\n                if (v28 == 47) {\n                    // 0x4075a0\n                    v11 = v18;\n                    v8 = 0;\n                    if (v4 != 0) {\n                        // 0x407135\n                        return 1;\n                    }\n                } else {\n                    unsigned char v29 = (char)(v28 == 46) & (char)v13; // 0x4070b7\n                    if (v29 != 0) {\n                        // 0x407135\n                        return 1;\n                    }\n                    // 0x4070bc\n                    v11 = v18;\n                    v8 = v29;\n                }\n                goto lab_0x4070fe;\n            }\n            case 31: {\n                goto lab_0x407150;\n            }\n            case 58: {\n                int32_t v30 = g49; // 0x406ef8\n                if (g49 == 0) {\n                    // 0x4075b0\n                    v30 = getenv(\"POSIXLY_CORRECT\") == NULL ? -1 : 1;\n                    g49 = v30;\n                }\n                // 0x406efe\n                if (v12 == a3) {\n                    // 0x407135\n                    return 1;\n                }\n                int32_t v31 = v30; // 0x406f35\n                wc = (char *)v12;\n                v22 = *wc;\n                if (v22 == 46) {\n                    // 0x407590\n                    if ((char)v13 != 0) {\n                        // 0x407135\n                        return 1;\n                    }\n                } else {\n                    // 0x406f17\n                    if (v22 == 47 == (v4 != 0)) {\n                        // 0x407135\n                        return 1;\n                    }\n                }\n                char v32 = *(char *)v18; // 0x406f28\n                if (v32 == 33) {\n                    // 0x407550\n                    v17 = 1;\n                    v14 = v19 + 2;\n                    goto lab_0x406f54;\n                } else {\n                    // 0x406f35\n                    v17 = 0;\n                    v14 = v18;\n                    if (v31 < 0 == v32 == 94) {\n                        // 0x407550\n                        v17 = 1;\n                        v14 = v19 + 2;\n                        goto lab_0x406f54;\n                    } else {\n                        goto lab_0x406f54;\n                    }\n                }\n            }\n            case 59: {\n                if ((v3 & 2) != 0) {\n                    // 0x407340\n                    if (v12 == a3) {\n                        // 0x407135\n                        return 1;\n                    }\n                    // 0x40734b\n                    v20 = v18;\n                    v21 = 92;\n                    if ((v3 & 16) == 0) {\n                        goto lab_0x406ed6;\n                    } else {\n                        int32_t * v33 = *__ctype_tolower_loc(); // 0x40735d\n                        v15 = 92;\n                        v16 = (int64_t)v33;\n                        v10 = v18;\n                        goto lab_0x407365;\n                    }\n                } else {\n                    unsigned char v34 = *(char *)v18; // 0x406ea8\n                    if (v34 == 0) {\n                        // 0x407135\n                        return 1;\n                    }\n                    int64_t v35 = v34; // 0x406ea8\n                    int64_t v36 = v19 + 2; // 0x406ead\n                    if ((v3 & 16) != 0) {\n                        int32_t * v37 = *__ctype_tolower_loc(); // 0x4075e5\n                        if (v12 == a3) {\n                            // 0x407135\n                            result2 = result;\n                            return result2;\n                        }\n                        int64_t v38 = (int64_t)v37; // 0x4075e5\n                        v15 = (int64_t)(*(int32_t *)(4 * v35 + v38) % 256);\n                        v16 = v38;\n                        v10 = v36;\n                        goto lab_0x407365;\n                    } else {\n                        // 0x406ec7\n                        v20 = v36;\n                        v21 = v35;\n                        if (v12 == a3) {\n                            // 0x407135\n                            return 1;\n                        }\n                        goto lab_0x406ed6;\n                    }\n                }\n            }\n            default: {\n                goto lab_0x4070d3;\n            }\n        }\n    }\n  lab_0x407190:\n    if ((a5 & 32) != 0) {\n        // 0x4076b8\n        if (*(char *)v18 == 40) {\n            // 0x4076c3\n            if ((int32_t)function_4068d0(42, v18, v12, a3, v13 % 256, a5) != -1) {\n                // 0x407135\n                result2 = result;\n                return result2;\n            }\n        }\n    }\n    if (v12 != a3) {\n        // 0x4071a8\n        if (*(char *)v12 == 46) {\n            // 0x4071ae\n            if ((char)v13 != 0) {\n                // 0x407135\n                return 1;\n            }\n        }\n    }\n    char v39 = *(char *)v18; // 0x4071b7\n    int64_t v40 = v19 + 2; // 0x4071bc\n    char v41 = v39; // 0x4071c4\n    int64_t v42 = v40; // 0x4071c4\n    int64_t v43 = v12; // 0x4071c4\n    char * v44; // 0x406e20\n    int64_t v45; // 0x406e20\n    int64_t v46; // 0x406e20\n    int64_t v47; // 0x406e20\n    char v48; // 0x406e20\n    char v49; // 0x406e20\n    int64_t v50; // 0x406e20\n    int64_t v51; // 0x406e20\n    int64_t v52; // 0x406e20\n    char * v53; // 0x406e20\n    if (v39 != 42 != v39 != 63) {\n        // 0x4071cc\n        v48 = v39;\n        v50 = v40;\n        v45 = v12;\n        while (true) {\n          lab_0x4071e8_2:\n            // 0x4071e8\n            v46 = v45;\n            v51 = v50;\n            v49 = v48;\n            v53 = (char *)v51;\n            if ((a5 & 32) != 0 == *v53 == 40) {\n                int64_t v54 = function_405760(v51); // 0x407485\n                if (v54 != v51) {\n                    // 0x407478\n                    v44 = (char *)v54;\n                    v52 = v54;\n                    v47 = v46;\n                    goto lab_0x407204;\n                } else {\n                    goto lab_0x4071f7;\n                }\n            } else {\n                goto lab_0x4071f7;\n            }\n        }\n        // 0x407135\n        result2 = result;\n        return result2;\n    }\n  lab_0x407218:;\n    int64_t v55 = v43;\n    if (v41 == 0) {\n        // 0x407758\n        if (v4 == 0) {\n            // 0x407135\n            return 0;\n        }\n        // 0x407760\n        if ((a5 & 8) == 0) {\n            // 0x407135\n            return function_408aa0(v55, 47, a3 - v55) != 0;\n        }\n        // 0x407135\n        return 0;\n    }\n    int64_t v56 = function_408aa0(v55, -v4 & 47, a3 - v55); // 0x40724b\n    int64_t v57 = 0x100000000000000 * v42 >> 56; // 0x407260\n    uint64_t v58 = v56 == 0 ? a3 : v56; // 0x407265\n    if (v41 == 91) {\n        goto lab_0x40762a;\n    } else {\n        if ((a5 & 32) != 0 == v41 < 65) {\n            if ((1 << (int64_t)((v41 + 31) % 64) & 0x80000401) == 0) {\n                goto lab_0x40727f;\n            } else {\n                // 0x407620\n                if (*(char *)v57 != 40) {\n                    goto lab_0x40727f;\n                } else {\n                    goto lab_0x40762a;\n                }\n            }\n        } else {\n            goto lab_0x40727f;\n        }\n    }\n  lab_0x4071f7:\n    // 0x4071f7\n    v44 = v53;\n    v52 = v51;\n    v47 = v46;\n    if (v49 == 63) {\n        // 0x407378\n        if (v46 == a3) {\n            return 1;\n        }\n        // 0x407383\n        if (!((v4 == 0 | *(char *)v46 != 47))) {\n            return 1;\n        }\n        // 0x40738d\n        v44 = v53;\n        v52 = v51;\n        v47 = v46 + 1;\n    }\n    goto lab_0x407204;\n  lab_0x407204:;\n    char v59 = *v44; // 0x407204\n    int64_t v60 = v52 + 1; // 0x407208\n    v41 = v59;\n    v42 = v60;\n    v43 = v47;\n    switch (v59) {\n        case 63: {\n            goto lab_0x4071e8;\n        }\n        case 42: {\n            goto lab_0x4071e8;\n        }\n        default: {\n            goto lab_0x407218;\n        }\n    }\n  lab_0x4071e8:\n    // 0x4071e8\n    v48 = v59;\n    v50 = v60;\n    v45 = v47;\n    goto lab_0x4071e8_2;\n  lab_0x4073f8:;\n    // 0x4073f8\n    int64_t v61; // 0x406e20\n    int64_t v62 = v61 + 1; // 0x4073f8\n    int64_t v63 = v62; // 0x407400\n    int64_t v64 = 58; // 0x407400\n    char * v65; // 0x406e20\n    char * v66 = v65; // 0x407400\n    int64_t v67 = v62; // 0x407400\n    int64_t v68 = v61; // 0x407400\n    int64_t v69; // 0x406e20\n    if (v69 == 91) {\n        goto lab_0x407790;\n    }\n    goto lab_0x406f9a;\n  lab_0x407790:;\n    int64_t v97 = v67; // 0x407795\n    int64_t v98 = (int64_t)*v66; // 0x407795\n    int64_t v99 = v68; // 0x407795\n    goto lab_0x407047;\n  lab_0x407047:;\n    char v160 = v98; // 0x40704c\n    char v137 = v160; // 0x40704f\n    int64_t v151 = v98; // 0x40704f\n    int64_t v135 = v99; // 0x40704f\n    int64_t v150 = v97; // 0x40704f\n    result = 1;\n    if (v160 == 0) {\n        goto lab_0x407135_3;\n    } else {\n        goto lab_0x407055;\n    }\n  lab_0x407043:;\n    // 0x407043\n    int64_t v149; // 0x406e20\n    v97 = v149 + 1;\n    int64_t v148; // 0x406e20\n    v98 = v148;\n    v99 = v149;\n    goto lab_0x407047;\n  lab_0x406fdb:;\n    // 0x406fdb\n    int64_t v81; // 0x406e20\n    int64_t v161 = v81;\n    int64_t v80; // 0x406e20\n    int64_t v162 = v80;\n    int64_t v79; // 0x406e20\n    int64_t v163 = v79;\n    int64_t v164 = v162 + 1; // 0x406fdb\n    int64_t v100; // 0x406e20\n    int64_t v101; // 0x406e20\n    char v165; // 0x406fe5\n    unsigned char v111; // 0x406e20\n    if (v163 != 45) {\n        // 0x406f80\n        v100 = v164;\n        v101 = v163;\n        if (v111 == (char)v161) {\n            // 0x406f80\n            v66 = (char *)v162;\n            v67 = v164;\n            v68 = v162;\n            goto lab_0x407790;\n        }\n        goto lab_0x406f90;\n    } else {\n        // 0x406fe5\n        v165 = *(char *)v164;\n        switch (v165) {\n            case 93: {\n                goto lab_0x407418;\n            }\n            case 0: {\n                goto lab_0x407418;\n            }\n            default: {\n                goto lab_0x406fff;\n            }\n        }\n    }\n  lab_0x4070da:;\n    // 0x4070da\n    char * v82; // 0x406e20\n    int64_t v103 = (int64_t)*v82; // 0x4070da\n    int64_t v104 = v103; // 0x4070e3\n    if ((v3 & 16) != 0) {\n        int32_t * v105 = *__ctype_tolower_loc(); // 0x4070ea\n        v104 = (int64_t)*(int32_t *)(4 * v103 + (int64_t)v105);\n    }\n    // 0x4070f1\n    v11 = v18;\n    v8 = 0;\n    int64_t v83; // 0x406e20\n    if ((int32_t)v104 != (int32_t)v83) {\n        // 0x407135\n        return 1;\n    }\n    goto lab_0x4070fe;\n  lab_0x406fc0:;\n    // 0x406fc0\n    int64_t v87; // 0x406e20\n    int64_t v170 = v87;\n    int64_t v86; // 0x406e20\n    int64_t v171 = v86;\n    char v85; // 0x406e20\n    int64_t v172 = v85;\n    v79 = v172;\n    v80 = v171;\n    v81 = v170;\n    if ((v3 & 16) != 0) {\n        int32_t * v173 = *__ctype_tolower_loc(); // 0x406fd3\n        v79 = v172;\n        v80 = v171;\n        v81 = (int64_t)*(char *)(4 * v170 + (int64_t)v173);\n    }\n    goto lab_0x406fdb;\n  lab_0x406f90:;\n    int64_t v174 = v100;\n    v63 = v174;\n    v64 = v101;\n    int32_t v107; // 0x406e20\n    if (v101 == 93) {\n        // 0x407730\n        v11 = v174;\n        v8 = 0;\n        result = 1;\n        if (v107 != 0) {\n            goto lab_0x4070fe;\n        } else {\n            goto lab_0x407135_3;\n        }\n    }\n    goto lab_0x406f9a;\n  lab_0x407418:\n    // 0x407418\n    v97 = v164;\n    v98 = v163;\n    v99 = v162;\n    if (v111 == (char)v161) {\n        goto lab_0x407047;\n    }\n    // 0x407421\n    v85 = 93;\n    v86 = v164;\n    v87 = 45;\n    if (v165 != 93) {\n        goto lab_0x406fff;\n    } else {\n        goto lab_0x406fc0;\n    }\n  lab_0x406fff:;\n    int64_t v175 = v162 + 2; // 0x406fff\n    int64_t v176 = v175; // 0x407005\n    char v177 = v165; // 0x407005\n    if ((v3 & 2) == 0 == v165 == 92) {\n        // 0x407538\n        v176 = v162 + 3;\n        v177 = *(char *)v175;\n    }\n    // 0x407010\n    if (v177 == 0) {\n        // 0x407135\n        return 1;\n    }\n    int64_t v178 = (int64_t)*(char *)v176; // 0x407018\n    v100 = v176 + 1;\n    v101 = v178;\n    v148 = v178;\n    v149 = v176;\n    int32_t v110; // 0x406f65\n    if (v110 >= (int32_t)(0x100000000000000 * v161 >> 56) && v177 >= v111) {\n        goto lab_0x407043;\n    }\n    goto lab_0x406f90;\n  lab_0x406f9a:;\n    int64_t v70 = v63; // 0x406e20\n    int64_t v71 = v64; // 0x406e20\n    goto lab_0x406f9a_2;\n  lab_0x407150:\n    if ((a5 & 32) != 0) {\n        // 0x40715b\n        if (*(char *)v18 == 40) {\n            int64_t v102 = function_4068d0(v9, v18, v12, a3, v13 % 256, a5); // 0x407180\n            result = v102;\n            if ((int32_t)v102 != -1) {\n                // 0x407135\n                return result;\n            }\n        }\n    }\n    goto lab_0x4070d3;\n  lab_0x4070d3:\n    // 0x4070d3\n    if (v12 == a3) {\n        // 0x407135\n        return 1;\n    }\n    // 0x4070d3\n    v82 = (char *)v12;\n    v83 = v9;\n    goto lab_0x4070da;\n  lab_0x4070fe:\n    // 0x4070fe\n    v5 = v11;\n    v6 = *(char *)v5;\n    v7 = v12 + 1;\n    v2 = v7;\n    if (v6 == 0) {\n        goto lab_0x407119;\n    }\n    goto lab_0x406e6f;\n  lab_0x406f54:;\n    int64_t v106 = v22; // 0x406f09\n    v107 = v17;\n    int64_t v108 = v106; // 0x406f56\n    if ((v3 & 16) != 0) {\n        int32_t * v109 = *__ctype_tolower_loc(); // 0x406f5d\n        v108 = (int64_t)*(char *)(4 * v106 + (int64_t)v109);\n    }\n    // 0x406f65\n    v69 = v108;\n    v110 = v69;\n    v111 = (char)v69;\n    v70 = v14 + 1;\n    v71 = (int64_t)*(char *)v14;\n    while (true) {\n      lab_0x406f9a_2:;\n        int64_t v72 = v71;\n        v61 = v70;\n        char v73 = v72; // 0x406f9e\n        if ((v3 & 2) == 0 == v73 == 92) {\n            unsigned char v74 = *(char *)v61; // 0x407448\n            if (v74 == 0) {\n                // 0x407135\n                return 1;\n            }\n            int64_t v75 = v74; // 0x407448\n            int64_t v76 = v75; // 0x407458\n            if ((v3 & 16) != 0) {\n                int32_t * v77 = *__ctype_tolower_loc(); // 0x40745f\n                v76 = (int64_t)*(char *)(4 * v75 + (int64_t)v77);\n            }\n            int64_t v78 = v61 + 1; // 0x407467\n            v79 = (int64_t)*(char *)v78;\n            v80 = v78;\n            v81 = v76;\n            goto lab_0x406fdb;\n        } else {\n            // 0x406fa8\n            v82 = wc;\n            v83 = 91;\n            switch (v73) {\n                case 91: {\n                    // 0x4073a0\n                    v65 = (char *)v61;\n                    char v84 = *v65; // 0x4073a0\n                    v85 = v84;\n                    v86 = v61;\n                    v87 = v72;\n                    int64_t v88 = v61; // 0x4073a9\n                    if (v84 != 58) {\n                        goto lab_0x406fc0;\n                    } else {\n                        int64_t v89 = 0;\n                        int64_t v90 = v88 + 1; // 0x4073e1\n                        char v91 = *(char *)v90; // 0x4073e1\n                        while (v91 != 58) {\n                            if (v91 >= 122) {\n                                goto lab_0x4073f8;\n                            }\n                            int64_t v92 = v89 + 1; // 0x4073c9\n                            int64_t v93; // bp-376, 0x406e20\n                            *(char *)((int64_t)&v93 + 47 + v92) = v91;\n                            if (v89 == 255) {\n                                // 0x407135\n                                return 1;\n                            }\n                            v89 = v92;\n                            v90++;\n                            v91 = *(char *)v90;\n                        }\n                        // 0x4073ee\n                        int64_t v94; // 0x406e20\n                        if (*(char *)(v94 + 2) == 93) {\n                            // 0x4077ea\n                            int64_t v95; // 0x406e20\n                            *(char *)(v95 + v89) = 0;\n                            int64_t name; // bp-328, 0x406e20\n                            int32_t desc = wctype((char *)&name); // 0x4077f9\n                            if (desc == 0) {\n                                // 0x407135\n                                return 1;\n                            }\n                            // 0x40780f\n                            if (iswctype(btowc((int32_t)*wc), desc) != 0) {\n                                int64_t v96 = v94 + 3; // 0x4078e4\n                                v97 = v94 + 4;\n                                v98 = (int64_t)*(char *)v96;\n                                v99 = v96;\n                                goto lab_0x407047;\n                            }\n                            // 0x407834\n                            v100 = v94 + 4;\n                            v101 = (int64_t)*(char *)((0x100000000000000 * v90 >> 56) + 2);\n                            goto lab_0x406f90;\n                        } else {\n                            goto lab_0x4073f8;\n                        }\n                    }\n                }\n                case 0: {\n                    goto lab_0x4070da;\n                }\n                default: {\n                    // 0x406fbb\n                    v85 = *(char *)v61;\n                    v86 = v61;\n                    v87 = v72;\n                    goto lab_0x406fc0;\n                }\n            }\n        }\n    }\n    goto lab_0x4070da;\n  lab_0x406ed6:;\n    int64_t v112 = v21; // 0x406eda\n    int32_t v113 = (int32_t)*(char *)v12; // 0x406eda\n    int64_t v114 = v20; // 0x406eda\n    goto lab_0x406edf;\n  lab_0x406edf:\n    // 0x406edf\n    v11 = v114;\n    v8 = 0;\n    if (v113 != (int32_t)v112) {\n        // 0x407135\n        return 1;\n    }\n    goto lab_0x4070fe;\n  lab_0x407365:;\n    int32_t v115 = *(int32_t *)(4 * (int64_t)*(char *)v12 + v16); // 0x407369\n    v112 = v15;\n    v113 = v115;\n    v114 = v10;\n    goto lab_0x406edf;\n  lab_0x40762a:;\n    int32_t v116 = v4 != 0 ? a5 : a5 & -5; // 0x407639\n    int64_t v117 = v55; // 0x407642\n    if (v58 <= v55) {\n        // 0x407135\n        return 1;\n    }\n    int64_t v118 = v13; // 0x407642\n    result = 0;\n    while ((int32_t)function_406e20(v57 - 1, v117, a3, v118 % 256, v116) != 0) {\n        int64_t v119 = v117 + 1; // 0x40766a\n        result = 1;\n        v117 = v119;\n        v118 = 0;\n        if (v58 == v119) {\n            // break -> 0x407135\n            break;\n        }\n        result = 0;\n    }\n    // 0x407135\n    return result;\n  lab_0x40727f:;\n    int32_t v120; // 0x406e20\n    if (v41 == 47) {\n        if (v4 != 0) {\n            int64_t v121 = v55; // 0x407874\n            if (v55 >= a3) {\n                // 0x407135\n                result2 = result;\n                return result2;\n            }\n            int64_t v122 = v121 + 1;\n            while (*(char *)v121 != 47) {\n                // 0x407880\n                v121 = v122;\n                if (v122 == a3) {\n                    // 0x407135\n                    return 1;\n                }\n                v122 = v121 + 1;\n            }\n            // 0x407893\n            result = (int32_t)function_406e20(v57, v122, a3, (int64_t)(a5 / 4 % 2), a5) != 0;\n            // 0x407135\n            return result;\n        }\n        // 0x407842\n        v120 = a5 & -5;\n        goto lab_0x407291;\n    } else {\n        // 0x407289\n        v120 = a5;\n        if (v4 == 0) {\n            // 0x407842\n            v120 = a5 & -5;\n            goto lab_0x407291;\n        } else {\n            goto lab_0x407291;\n        }\n    }\n  lab_0x407291:;\n    char v123 = v41; // 0x407299\n    if ((v3 & 2) == 0 && v41 == 92) {\n        // 0x4078c7\n        v123 = *(char *)v57;\n    }\n    int64_t v124 = v123;\n    int64_t v125 = v124; // 0x4072a1\n    if ((v3 & 16) != 0) {\n        int32_t * v126 = *__ctype_tolower_loc(); // 0x4072bd\n        v125 = (int64_t)*(char *)(4 * v124 + (int64_t)v126);\n    }\n    // 0x4072c5\n    if (v58 <= v55) {\n        // 0x407135\n        return 1;\n    }\n    int64_t v127 = v57 - 1; // 0x4072c5\n    int64_t v128 = v13 % 256;\n    int64_t v129 = (int64_t)*(char *)v55; // 0x4072f0\n    int64_t v130 = v129; // 0x4072f9\n    int32_t * v131; // 0x407304\n    if ((v3 & 16) != 0) {\n        // 0x4072fb\n        v131 = *__ctype_tolower_loc();\n        v130 = (int64_t)*(int32_t *)(4 * v129 + (int64_t)v131);\n    }\n    // 0x40730a\n    if ((int32_t)v125 == (int32_t)v130) {\n        // 0x40730e\n        if ((int32_t)function_406e20(v127, v55, a3, v128, v120) == 0) {\n            // break -> 0x407135\n            break;\n        }\n    }\n    int64_t v132 = v55 + 1; // 0x4072e0\n    result = 1;\n    while (v58 != v132) {\n        int64_t v133 = v132;\n        v129 = (int64_t)*(char *)v133;\n        v130 = v129;\n        if ((v3 & 16) != 0) {\n            // 0x4072fb\n            v131 = *__ctype_tolower_loc();\n            v130 = (int64_t)*(int32_t *)(4 * v129 + (int64_t)v131);\n        }\n        // 0x40730a\n        if ((int32_t)v125 == (int32_t)v130) {\n            // 0x40730e\n            result = 0;\n            if ((int32_t)function_406e20(v127, v133, a3, 0, v120) == 0) {\n                // break -> 0x407135\n                break;\n            }\n        }\n        // 0x4072e0\n        v132 = v133 + 1;\n        result = 1;\n    }\n    // 0x407135\n    return result;\n  lab_0x407055:;\n    int64_t v134 = v135;\n    char v136 = v137;\n    char v138; // 0x406e20\n    int64_t v139; // 0x406e20\n    int64_t v140; // 0x406e20\n    int64_t v141; // 0x406e20\n    int64_t v142; // 0x406e20\n    int64_t v143; // 0x406e20\n    int64_t v144; // 0x406e20\n    char v145; // 0x406e20\n    int64_t v146; // 0x406e20\n    if ((v3 & 2) == 0 == v136 == 92) {\n        // 0x407518\n        result = 1;\n        if (*(char *)(v134 + 1) == 0) {\n            goto lab_0x407135_3;\n        } else {\n            int64_t v147 = v134 + 2; // 0x407523\n            v148 = (int64_t)*(char *)v147;\n            v149 = v147;\n            goto lab_0x407043;\n        }\n    } else {\n        // 0x40706b\n        v142 = v150;\n        v143 = v151;\n        v141 = v142;\n        if (v136 == 91) {\n            char v152 = *(char *)(v134 + 1); // 0x4074c0\n            if (v152 == 58) {\n                // 0x40779a\n                v146 = v134 + 256;\n                v144 = v134 + 2;\n                goto lab_0x4077cd;\n            } else {\n                int64_t v153 = v134 + 2;\n                if (v152 == 61) {\n                    // 0x4076f8\n                    result = 1;\n                    if (*(char *)v153 == 0) {\n                        goto lab_0x407135_3;\n                    } else {\n                        // 0x407703\n                        result = 1;\n                        if (*(char *)(v134 + 3) != 61) {\n                            goto lab_0x407135_3;\n                        } else {\n                            // 0x40770e\n                            result = 1;\n                            if (*(char *)(v134 + 4) != 93) {\n                                goto lab_0x407135_3;\n                            } else {\n                                // 0x407719\n                                v143 = (int64_t)*(char *)(v134 + 5);\n                                v141 = v134 + 6;\n                                goto lab_0x407075;\n                            }\n                        }\n                    }\n                } else {\n                    // 0x4074d9\n                    v145 = v152;\n                    if (v152 != 46) {\n                        goto lab_0x407043_2;\n                    } else {\n                        int64_t v154 = v134 + 3; // 0x4074fd\n                        char v155 = *(char *)v154; // 0x4074fd\n                        result = 1;\n                        v138 = v155;\n                        v139 = v154;\n                        v140 = v153;\n                        if (v155 == 0) {\n                            goto lab_0x407135_3;\n                        } else {\n                            goto lab_0x40750e;\n                        }\n                    }\n                }\n            }\n        } else {\n            goto lab_0x407075;\n        }\n    }\n  lab_0x407075:;\n    int64_t v156 = v141;\n    if ((char)v143 == 93) {\n        // 0x4078d0\n        v11 = v156;\n        v8 = (v3 & 2) == 0 == v136 == 92;\n        result = 1;\n        if (v107 != 0) {\n            goto lab_0x407135_3;\n        } else {\n            goto lab_0x4070fe;\n        }\n    } else {\n        unsigned char v157 = *(char *)v156; // 0x407081\n        v137 = v157;\n        v151 = v157;\n        v135 = v156;\n        v150 = v156 + 1;\n        result = 1;\n        if (v157 == 0) {\n            goto lab_0x407135_3;\n        } else {\n            goto lab_0x407055;\n        }\n    }\n  lab_0x4077cd:;\n    int64_t v158 = v144;\n    char v159 = *(char *)v158;\n    if (v159 != 58) {\n        // 0x4077b0\n        v148 = 58;\n        v149 = v142;\n        if (v159 < 122) {\n            // 0x4077bd\n            result = 1;\n            v144 = v158 + 1;\n            if (v146 == v158) {\n                goto lab_0x407135_3;\n            } else {\n                goto lab_0x4077cd;\n            }\n        } else {\n            goto lab_0x407043;\n        }\n    } else {\n        // 0x4077d3\n        v145 = v159;\n        if (*(char *)(v158 + 1) != 93) {\n            goto lab_0x407043_2;\n        } else {\n            // 0x4077dd\n            v143 = (int64_t)*(char *)(v158 + 2);\n            v141 = v158 + 3;\n            goto lab_0x407075;\n        }\n    }\n  lab_0x407043_2:\n    // 0x407043\n    v148 = v145;\n    v149 = v142;\n    goto lab_0x407043;\n  lab_0x40750e:;\n    int64_t v166 = v139;\n    if (v138 != 46) {\n        goto lab_0x4074fa;\n    } else {\n        int64_t v167 = v140;\n        if (*(char *)(v167 + 2) == 93) {\n            // 0x40785a\n            v143 = (int64_t)*(char *)(v167 + 3);\n            v141 = v167 + 4;\n            goto lab_0x407075;\n        } else {\n            goto lab_0x4074fa;\n        }\n    }\n  lab_0x4074fa:;\n    int64_t v168 = v166 + 1; // 0x4074fd\n    char v169 = *(char *)v168; // 0x4074fd\n    result = 1;\n    v138 = v169;\n    v139 = v168;\n    v140 = v166;\n    if (v169 == 0) {\n        goto lab_0x407135_3;\n    } else {\n        goto lab_0x40750e;\n    }\n}\n"
        },
        {
            "funcName": "function_407910",
            "funcStartAddr": "407910",
            "funcEndAddr": "407b50",
            "decompiledFuncCode": "int64_t function_407910(int64_t a1, int64_t a2, uint32_t a3) {\n    uint64_t v1 = (int64_t)a3; // 0x40791c\n    int64_t wstr = a1; // bp-80, 0x407924\n    int64_t wstr2 = a2; // bp-88, 0x407928\n    int64_t v2 = a2; // 0x407935\n    if (__ctype_get_mb_cur_max() != 1) {\n        int64_t ps = 0; // bp-64, 0x407978\n        int32_t v3 = mbsrtowcs(NULL, (char **)&wstr, 0, (struct _TYPEDEF___mbstate_t *)&ps); // 0x407984\n        uint64_t len = (int64_t)v3 + 1; // 0x407989\n        v2 = a2;\n        if (len != 0) {\n            // 0x407992\n            if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps) == 0) {\n                // 0x407b2f\n                __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 297, \"gnu_fnmatch\");\n                return &g61;\n            }\n            int32_t v4 = mbsrtowcs(NULL, (char **)&wstr2, 0, (struct _TYPEDEF___mbstate_t *)&ps); // 0x4079af\n            int64_t len2 = (int64_t)v4 + 1; // 0x4079b4\n            if (len2 != 0) {\n                // 0x4079c1\n                if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps) == 0) {\n                    // 0x407b16\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 301, \"gnu_fnmatch\");\n                    // 0x407b2f\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 297, \"gnu_fnmatch\");\n                    return &g61;\n                }\n                uint64_t v5 = len2 + len; // 0x4079d5\n                if (v5 >= len != v5 < 0x4000000000000000) {\n                    // 0x407a75\n                    *__errno_location() = 12;\n                    // 0x40795f\n                    return 0xffffffff;\n                }\n                int64_t size = 4 * v5; // 0x4079f1\n                if (v5 < 2000) {\n                    // 0x407a05\n                    int64_t v6; // bp-104, 0x407910\n                    int64_t wstr3 = (int64_t)&v6 + 15 - (size + 23 & -16) & -16; // 0x407a20\n                    mbsrtowcs((int32_t *)wstr3, (char **)&wstr, (int32_t)len, (struct _TYPEDEF___mbstate_t *)&ps);\n                    if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps) != 0) {\n                        int64_t wstr4 = wstr3 + 4 * len; // 0x407a27\n                        mbsrtowcs((int32_t *)wstr4, (char **)&wstr2, (int32_t)len2, (struct _TYPEDEF___mbstate_t *)&ps);\n                        // 0x40795f\n                        return function_405df0(wstr3, wstr4, 4 * len2 - 4 + wstr4, v1 / 4 % 2, a3);\n                    }\n                    // 0x407afd\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 327, \"gnu_fnmatch\");\n                    // 0x407b16\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 301, \"gnu_fnmatch\");\n                    // 0x407b2f\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 297, \"gnu_fnmatch\");\n                    return &g61;\n                }\n                int64_t * mem = malloc((int32_t)size); // 0x407a8a\n                if (mem == NULL) {\n                    // 0x407a75\n                    *__errno_location() = 12;\n                    // 0x40795f\n                    return 0xffffffff;\n                }\n                // 0x407a97\n                mbsrtowcs((int32_t *)mem, (char **)&wstr, (int32_t)len, (struct _TYPEDEF___mbstate_t *)&ps);\n                if (mbsinit((struct _TYPEDEF___mbstate_t *)&ps) == 0) {\n                    // 0x407afd\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 327, \"gnu_fnmatch\");\n                    // 0x407b16\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 301, \"gnu_fnmatch\");\n                    // 0x407b2f\n                    __assert_fail(\"mbsinit (&ps)\", \"lib/fnmatch.c\", 297, \"gnu_fnmatch\");\n                    return &g61;\n                }\n                int64_t v7 = (int64_t)mem; // 0x407a8a\n                int64_t wstr5 = 4 * len + v7; // 0x407aa5\n                mbsrtowcs((int32_t *)wstr5, (char **)&wstr2, (int32_t)len2, (struct _TYPEDEF___mbstate_t *)&ps);\n                int64_t v8 = function_405df0(v7, wstr5, 4 * len2 - 4 + wstr5, v1 / 4 % 2, a3); // 0x407ae5\n                free(mem);\n                // 0x40795f\n                return v8 & 0xffffffff;\n            }\n            // 0x4079a3\n            v2 = wstr2;\n        }\n    }\n    int64_t str = v2; // 0x407937\n    // 0x40795f\n    return function_406e20(wstr, str, str + (int64_t)strlen((char *)str), v1 / 4 % 2, a3);\n}\n"
        },
        {
            "funcName": "function_407b50",
            "funcStartAddr": "407b50",
            "funcEndAddr": "407bee",
            "decompiledFuncCode": "int64_t function_407b50(int64_t a1, int64_t a2) {\n    char * file_path = (char *)a1; // 0x407b5e\n    char * mode = (char *)a2; // 0x407b5e\n    int64_t stream; // 0x407b50\n    struct _IO_FILE * file = freopen(file_path, mode, (struct _IO_FILE *)stream); // 0x407b5e\n    if (a1 == 0 || file == NULL) {\n        // 0x407b88\n        return (int64_t)file;\n    }\n    int32_t fd2 = fileno(file); // 0x407b73\n    if (dup2(fd2, fd2) >= 0 || *__errno_location() != 9) {\n        // 0x407b88\n        return (int64_t)file;\n    }\n    int32_t fd = open(\"/dev/null\", O_CLOEXEC); // 0x407bae\n    if (fd == fd2) {\n        // 0x407bd1\n        return (int64_t)freopen(file_path, mode, file);\n    }\n    int32_t v1 = dup2(fd, fd2); // 0x407bc0\n    close(fd);\n    if (v1 < 0) {\n        // 0x407b88\n        return (int64_t)file;\n    }\n    // 0x407bd1\n    return (int64_t)freopen(file_path, mode, file);\n}\n"
        },
        {
            "funcName": "function_407bf0",
            "funcStartAddr": "407bf0",
            "funcEndAddr": "407c47",
            "decompiledFuncCode": "int64_t function_407bf0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x407bf0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x407bfa\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x407c2b\n    int64_t result = -1; // 0x407c34\n    if (v1 != -1) {\n        // 0x407c36\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x407c42\n    return result;\n}\n"
        },
        {
            "funcName": "function_407c50",
            "funcStartAddr": "407c50",
            "funcEndAddr": "407d2f",
            "decompiledFuncCode": "int64_t function_407c50(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x407c5c\n    uint32_t v2 = *v1; // 0x407c5c\n    int64_t v3 = a2 & 0xffffffff; // 0x407c61\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x407c64\n    uint64_t v5 = (int64_t)*v4; // 0x407c64\n    int64_t v6; // 0x407cd2\n    if (v3 <= v5) {\n      lab_0x407ccc_2:\n        // 0x407ccc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x407c52\n    int64_t v8 = v2; // 0x407c50\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x407ccc\n        goto lab_0x407ccc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x407c88\n    int64_t v17; // 0x407c96\n    int64_t * v18; // 0x407cb0\n    int64_t * v19; // 0x407cb3\n    int64_t v20; // 0x407cbe\n    int64_t v21; // 0x407c96\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x407c93\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x407cb0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x407cc7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x407ccc\n            goto lab_0x407ccc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x407ccc\n            goto lab_0x407ccc_2;\n        }\n        // 0x407c82\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x407d0b\n    int64_t * v23 = (int64_t *)v22; // 0x407d10\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x407d13\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x407d10\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x407d27\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x407c7d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x407ccc\n            goto lab_0x407ccc_2;\n        }\n        // 0x407c82\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x407c93\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x407cb0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x407cc7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x407ccc\n                goto lab_0x407ccc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x407ccc\n                goto lab_0x407ccc_2;\n            }\n            // 0x407c82\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x407cf0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x407d10\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x407d27\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x407ccc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_407d30",
            "funcStartAddr": "407d30",
            "funcEndAddr": "40834c",
            "decompiledFuncCode": "int64_t function_407d30(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x407d4f\n    int64_t v2 = *v1; // 0x407d4f\n    char * str2 = (char *)v2; // 0x407d5c\n    char c = *str2; // 0x407d5c\n    int64_t v3 = v2; // 0x407d88\n    int64_t v4 = 0; // 0x407d30\n    int32_t v5; // 0x407d30\n    int64_t v6; // 0x407d30\n    int64_t v7; // 0x407d30\n    int64_t v8; // 0x407d30\n    int64_t v9; // 0x407d30\n    int64_t v10; // 0x407d30\n    int64_t v11; // 0x407d30\n    int64_t v12; // 0x407d30\n    int64_t v13; // 0x407d30\n    int64_t str3; // 0x407d30\n    int64_t v14; // 0x407d30\n    int64_t v15; // 0x407d30\n    int64_t v16; // 0x407d30\n    int64_t v17; // 0x407d30\n    int32_t v18; // 0x407d30\n    int32_t v19; // 0x407d30\n    int32_t v20; // 0x407d30\n    int32_t v21; // 0x407d30\n    int32_t v22; // 0x407d30\n    int32_t v23; // 0x407d30\n    int32_t v24; // 0x407d30\n    int32_t v25; // 0x407d30\n    int32_t v26; // 0x407d30\n    int32_t v27; // 0x407d30\n    int32_t v28; // 0x407d30\n    int32_t v29; // 0x407d30\n    int64_t nmemb; // 0x407d30\n    int64_t v30; // 0x407d30\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x407d8c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x407d88\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x407d98\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x407d9e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x407d68\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x407dcc\n                int64_t v34; // 0x407d30\n                int64_t v35; // 0x407d30\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x407dd5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x407f50;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x407de6\n                int64_t v37 = *(int64_t *)v36; // 0x407dea\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x407dc0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x407dd5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x407f50;\n                        }\n                    }\n                    // 0x407de6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x407e36:\n                    // 0x407e36\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x407e90;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x408000\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x407e90;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x407fb0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x407e5a;\n                                } else {\n                                    // 0x407fbc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x407e5a;\n                                    } else {\n                                        // 0x407fca\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x407e5a;\n                                        } else {\n                                            goto lab_0x407e90;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x407e5a;\n                            }\n                        }\n                    }\n                }\n              lab_0x407ea1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x408076\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x408222\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x408242\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40828f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x4082a9\n                            int64_t v45; // 0x4082ab\n                            if (*(char *)v42 != 0) {\n                                // 0x4082ab\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4082a3\n                            while (v17 + nmemb != v42) {\n                                // 0x4082a5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4082ab\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x408298\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4082d0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x408084\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4081df\n                        free((int64_t *)v17);\n                    }\n                    // 0x4080d9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4080f0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x407f9e\n                    return 63;\n                }\n                // 0x407ec0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x407f44\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x407f50:;\n                    int32_t * v49 = (int32_t *)a7; // 0x407f60\n                    uint32_t v50 = *v49; // 0x407f60\n                    int64_t v51 = v50; // 0x407f60\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x407f6a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x407f73\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40819f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40814a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x407f9e\n                            return 63;\n                        }\n                        // 0x407fe8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4082ff\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4081fd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x408210\n                                // 0x407f9e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40810e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x408122\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x407f8b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x407f8e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x407f92\n                    int64_t result = v59; // 0x407f98\n                    if (v58 != 0) {\n                        // 0x407f9a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x407f9e\n                    return result;\n                }\n            } else {\n                // 0x407d9e\n                v5 = v32;\n            }\n            // break -> 0x407ec5\n            break;\n        }\n    }\n    // 0x407ec5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x407edd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x407ee7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x407f9e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x408029\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x407f16\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x407f26\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x407e90:\n    // 0x407e90\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x407e90\n    int64_t v63 = *(int64_t *)v62; // 0x407e94\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x407ea1\n        goto lab_0x407ea1;\n    }\n    goto lab_0x407e36;\n  lab_0x407e5a:\n    // 0x407e5a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x407d30\n    int32_t v65; // 0x407d30\n    int32_t v66; // 0x407d30\n    if (v27 != 0) {\n        goto lab_0x407e90;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x408010\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x407e90;\n            } else {\n                goto lab_0x407e81;\n            }\n        } else {\n            // 0x407e75\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40816c\n                int64_t v67 = (int64_t)mem; // 0x40816c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x407e90;\n                } else {\n                    // 0x40817f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x407e81;\n                }\n            } else {\n                goto lab_0x407e81;\n            }\n        }\n    }\n  lab_0x407e81:\n    // 0x407e81\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x407e90;\n}\n"
        },
        {
            "funcName": "function_408350",
            "funcStartAddr": "408350",
            "funcEndAddr": "408916",
            "decompiledFuncCode": "int64_t function_408350(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x408371\n    if (v3 < 1) {\n        // 0x40852e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40836d\n    int32_t v5 = *(int32_t *)a7; // 0x408379\n    uint64_t v6 = a1 & 0xffffffff; // 0x40837b\n    int64_t v7 = v2; // 0x408380\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x408383\n    *v8 = 0;\n    int64_t v9; // 0x408350\n    int64_t v10; // 0x408350\n    int64_t v11; // 0x408350\n    int64_t v12; // 0x408350\n    int64_t str; // 0x408350\n    int64_t v13; // 0x408350\n    int64_t v14; // 0x408350\n    int64_t v15; // 0x408350\n    int64_t v16; // 0x408350\n    int64_t v17; // 0x408350\n    int32_t v18; // 0x408350\n    char v19; // 0x408350\n    if (v5 == 0) {\n        // 0x408568\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40839a;\n    } else {\n        // 0x408393\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4083e0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4083e3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4084a8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4083f6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x408406\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4084bc;\n                } else {\n                    goto lab_0x408418;\n                }\n            }\n        } else {\n            goto lab_0x40839a;\n        }\n    }\n  lab_0x40839a:\n    // 0x40839a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4083a0\n    *v24 = 0;\n    int64_t v25; // 0x408350\n    int64_t v26; // 0x408350\n    int64_t v27; // 0x408350\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x408490\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40849d;\n        }\n        case 43: {\n            // 0x4087a0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40849d;\n        }\n        default: {\n            // 0x4083bc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40871f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x408838\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40849d;\n                } else {\n                    // 0x40872d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4083ca;\n                }\n            } else {\n                goto lab_0x4083ca;\n            }\n        }\n    }\n  lab_0x4084a8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4084af\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x408418;\n    } else {\n        goto lab_0x4084bc;\n    }\n  lab_0x4083ca:\n    // 0x4083ca\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40849d;\n  lab_0x40849d:\n    // 0x40849d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4084a8;\n  lab_0x408418:;\n    uint32_t v30 = *(int32_t *)a7; // 0x408418\n    int64_t v31 = v30; // 0x408418\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40841a\n    if ((int64_t)*v32 > v31) {\n        // 0x40841f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x408422\n    if (*v33 > v30) {\n        // 0x408427\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40842a\n    int64_t v35 = v31; // 0x40842e\n    int64_t v36 = v15; // 0x40842e\n    int64_t v37; // 0x408350\n    int64_t v38; // 0x408350\n    int64_t v39; // 0x408350\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x408598\n        int64_t v41 = v40; // 0x408598\n        v2 = v41;\n        int64_t v42; // 0x408350\n        if (*v33 == v40) {\n            // 0x408780\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x408788\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x4085a4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4085a8\n                function_407c50(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4085b8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4085c1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4085ca\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4085e1\n            int64_t v47 = v45 & 0xffffffff; // 0x4085e5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4085ee\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4085f4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4085f6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x4085d0\n            int64_t v49 = v48 & 0xffffffff; // 0x4085d0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4085e1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4085ee\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4085f4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4085f6;\n                    }\n                }\n                // 0x4085d0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x408798\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4085f6;\n    } else {\n        goto lab_0x408434;\n    }\n  lab_0x4084bc:\n    // 0x4084bc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4084bf\n    int64_t v51 = v12; // 0x4084bf\n    int64_t v52 = v14; // 0x4084bf\n    if (*(char *)v10 == 0) {\n        goto lab_0x408418;\n    } else {\n        goto lab_0x4084c5;\n    }\n  lab_0x408434:;\n    int32_t v53 = v35; // 0x408434\n    int64_t v54; // 0x408350\n    int64_t v55; // 0x408350\n    int64_t v56; // 0x408350\n    int64_t v57; // 0x408350\n    int64_t v58; // 0x408350\n    int64_t v59; // 0x408350\n    char * v60; // 0x408350\n    int64_t v61; // 0x408350\n    int64_t v62; // 0x408449\n    int64_t v63; // 0x408350\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x408583\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x408586;\n    } else {\n        // 0x40843c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x408350\n        int64_t v66 = v65 ? -1 : 1; // 0x408450\n        int64_t v67 = (int64_t)\"--\"; // 0x408350\n        int64_t v68 = v62; // 0x408350\n        int64_t v69 = 3; // 0x408450\n        unsigned char v70 = *(char *)v68; // 0x408450\n        char v71 = *(char *)v67; // 0x408450\n        char v72 = v71; // 0x408450\n        bool v73 = false; // 0x408450\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x408540\n            if (*(char *)v62 == 45) {\n                // 0x408600\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x408600\n                if (c == 0) {\n                    goto lab_0x40854a;\n                } else {\n                    // 0x40860d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x408690;\n                    } else {\n                        if (c == 45) {\n                            // 0x408873\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4086e5;\n                        } else {\n                            // 0x40861e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x408690;\n                            } else {\n                                // 0x408623\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x408644;\n                                } else {\n                                    // 0x40862a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x408690;\n                                    } else {\n                                        goto lab_0x408644;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40854a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x408460\n            v2 = v75;\n            int32_t v76 = *v32; // 0x408463\n            int64_t v77 = v35 + 1; // 0x408466\n            int32_t v78 = v77; // 0x408469\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4087d0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x408477\n                    function_407c50(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x408485\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x408586;\n        }\n    }\n  lab_0x4084c5:;\n    // 0x4084c5\n    int64_t v79; // bp-104, 0x408350\n    int64_t v80 = &v79; // 0x40835a\n    int64_t v81 = v50 + 1; // 0x4084c5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4084cc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x4084d1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x4084d5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x4084d9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4084e1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4084e6\n    int32_t c2 = v84; // 0x4084e6\n    char * found_char_pos = strchr(str2, c2); // 0x4084e6\n    int64_t v87 = *v82; // 0x4084eb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4084f5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x408500\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4087f0\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x4087bd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40852e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4084e6\n    char v91 = *(char *)(v90 + 1); // 0x40851b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x4084d5\n        if (v91 != 58) {\n            // 0x40852e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x408744\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x408848\n                *v8 = 0;\n            } else {\n                // 0x40882c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40876e\n            *v83 = 0;\n            // 0x40852e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40874e\n        if (v93 != 0) {\n            // 0x4087e0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40876e\n            *v83 = 0;\n            // 0x40852e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x408761\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40876e\n            *v83 = 0;\n            // 0x40852e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x4088aa\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40885a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x408861\n        // 0x40876e\n        *v83 = 0;\n        // 0x40852e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4086b9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4086bb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4088e0\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x408891\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x408898\n            // 0x40852e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4086c6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4086ca\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4086e5;\n  lab_0x4085f6:\n    // 0x4085f6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x408434;\n  lab_0x4086e5:;\n    int64_t v99 = function_407d30(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x408703\n    // 0x40852e\n    return v99 & 0xffffffff;\n  lab_0x408586:;\n    int32_t v100 = v55; // 0x408586\n    if (v100 != (int32_t)v59) {\n        // 0x40858a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40852e\n    return 0xffffffff;\n  lab_0x40854a:\n    // 0x40854a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x408551\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40852e\n    return v99 & 0xffffffff;\n  lab_0x408690:\n    // 0x408690\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4084c5;\n  lab_0x408644:\n    // 0x408644\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_407d30(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40866a\n    if ((int32_t)v101 != -1) {\n        // 0x40852e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40867f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x408690;\n}\n"
        },
        {
            "funcName": "function_408920",
            "funcStartAddr": "408920",
            "funcEndAddr": "408976",
            "decompiledFuncCode": "int64_t function_408920(int64_t a1) {\n    // 0x408920\n    *(int32_t *)&g50 = g27;\n    *(int32_t *)&g51 = g26;\n    int64_t v1; // 0x408920\n    int64_t result = function_408350(v1, v1, v1, v1, v1, v1, &g50, a1 & 0xffffffff); // 0x408946\n    g27 = *(int32_t *)&g50;\n    g55 = g53;\n    *(int32_t *)&g25 = g52;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408980",
            "funcStartAddr": "408980",
            "funcEndAddr": "408998",
            "decompiledFuncCode": "int64_t function_408980(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408980\n    return function_408920(1);\n}\n"
        },
        {
            "funcName": "function_4089a0",
            "funcStartAddr": "4089a0",
            "funcEndAddr": "4089b3",
            "decompiledFuncCode": "int64_t function_4089a0(int64_t a1, int64_t a2, char * a3, char (**a4)[13], int32_t a5, int64_t a6) {\n    // 0x4089a0\n    return function_408920(0);\n}\n"
        },
        {
            "funcName": "function_4089c0",
            "funcStartAddr": "4089c0",
            "funcEndAddr": "4089d5",
            "decompiledFuncCode": "int64_t function_4089c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4089c0\n    return function_408350(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4089e0",
            "funcStartAddr": "4089e0",
            "funcEndAddr": "4089f6",
            "decompiledFuncCode": "int64_t function_4089e0(void) {\n    // 0x4089e0\n    return function_408920(0);\n}\n"
        },
        {
            "funcName": "function_408a00",
            "funcStartAddr": "408a00",
            "funcEndAddr": "408a18",
            "decompiledFuncCode": "int64_t function_408a00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408a00\n    return function_408350(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_408a20",
            "funcStartAddr": "408a20",
            "funcEndAddr": "408a9a",
            "decompiledFuncCode": "int64_t function_408a20(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x408a2b\n    int64_t v2 = (int64_t)&g12; // 0x408a2b\n    int32_t * pwc; // 0x408a20\n    int64_t v3; // 0x408a20\n    int64_t n; // 0x408a20\n    if (a2 == 0) {\n        goto lab_0x408a72;\n    } else {\n        // 0x408a2d\n        if (a3 == 0) {\n            // 0x408a58\n            return -2;\n        }\n        // 0x408a39\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x408a72;\n        } else {\n            goto lab_0x408a44;\n        }\n    }\n  lab_0x408a72:\n    // 0x408a72\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x408a20\n    pwc = (int32_t *)&v4;\n    goto lab_0x408a44;\n  lab_0x408a44:;\n    char * wstr = (char *)v3; // 0x408a4a\n    int64_t ps; // 0x408a20\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x408a4a\n    int64_t result = v5; // 0x408a4a\n    if (v5 < 0xfffffffe) {\n        // 0x408a58\n        return result;\n    }\n    int64_t result2 = result; // 0x408a89\n    if ((char)function_408f40(0, v3) == 0) {\n        // 0x408a8b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x408a58\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408aa0",
            "funcStartAddr": "408aa0",
            "funcEndAddr": "408ba4",
            "decompiledFuncCode": "int64_t function_408aa0(int64_t result, int32_t a2, int64_t a3) {\n    // 0x408aa0\n    if (a3 == 0) {\n        // 0x408ad9\n        return 0;\n    }\n    int64_t v1 = result; // 0x408aac\n    int64_t v2 = a3; // 0x408aac\n    int64_t result2; // 0x408aa0\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x408aae\n        int64_t v4 = result; // 0x408ab1\n        if ((char)result == v3) {\n            // 0x408ad9\n            return result;\n        }\n        int64_t v5 = a3; // 0x408ab1\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x408ac0\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x408ae0;\n            }\n            // 0x408ac6\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x408ad9\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x408ad9\n        return result2;\n    }\n  lab_0x408ae0:;\n    int64_t result3 = v1; // 0x408b0d\n    int64_t v6 = v2; // 0x408b0d\n    if (v2 >= 8) {\n        uint64_t v7 = (int64_t)a2;\n        int64_t v8 = 256 * v7 & 0xff00 | v7 % 256; // 0x408aef\n        int64_t v9 = 0x10000 * v8 | v8; // 0x408afc\n        int64_t v10 = 0x100000000 * v9 | v9; // 0x408b06\n        int64_t v11 = *(int64_t *)v1 ^ v10; // 0x408b26\n        result3 = v1;\n        v6 = v2;\n        if (((v11 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v11 - 0x101010101010101) == 0) {\n            int64_t v12 = v2 - 8; // 0x408b55\n            int64_t v13 = v1 + 8; // 0x408b59\n            while (v12 >= 8) {\n                int64_t v14 = *(int64_t *)v13 ^ v10; // 0x408b43\n                result3 = v13;\n                v6 = v12;\n                if (((v14 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v14 - 0x101010101010101) != 0) {\n                    goto lab_0x408b6c;\n                }\n                v12 -= 8;\n                v13 += 8;\n            }\n            // 0x408b63\n            result3 = v13;\n            v6 = v12;\n            if (v12 == 0) {\n                // 0x408ad9\n                return 0;\n            }\n        }\n    }\n  lab_0x408b6c:;\n    char v15 = a2; // 0x408b6c\n    if (*(char *)result3 == v15) {\n        // 0x408ad9\n        return result3;\n    }\n    int64_t v16 = result3 + 1;\n    result2 = 0;\n    while (v16 != v6 + result3) {\n        // 0x408b80\n        result2 = v16;\n        if (*(char *)v16 == v15) {\n            // break -> 0x408ad9\n            break;\n        }\n        v16++;\n        result2 = 0;\n    }\n    // 0x408ad9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408bb0",
            "funcStartAddr": "408bb0",
            "funcEndAddr": "408beb",
            "decompiledFuncCode": "int64_t function_408bb0(int64_t a1) {\n    // 0x408bb0\n    __fprintf_chk(g32, 1, \"%s\\n\", dcgettext(NULL, \"memory exhausted\", 5));\n    exit(g19);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408bf0",
            "funcStartAddr": "408bf0",
            "funcEndAddr": "408c05",
            "decompiledFuncCode": "int64_t function_408bf0(int64_t a1, int64_t a2) {\n    // 0x408bf0\n    return *(int64_t *)(a1 + 56);\n}\n"
        },
        {
            "funcName": "function_408c10",
            "funcStartAddr": "408c10",
            "funcEndAddr": "408c25",
            "decompiledFuncCode": "int64_t function_408c10(int64_t a1, int64_t a2) {\n    // 0x408c10\n    return *(int64_t *)(a1 + 64);\n}\n"
        },
        {
            "funcName": "function_408c30",
            "funcStartAddr": "408c30",
            "funcEndAddr": "408cb3",
            "decompiledFuncCode": "int64_t function_408c30(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a3 == 0 ? 15 : a3 - 1;\n    *(int64_t *)(a1 + 48) = v1;\n    int64_t v2 = a2 == 0 ? 4064 : a2; // 0x408c52\n    *(int64_t *)a1 = v2;\n    int64_t v3 = function_408bf0(a1, v2); // 0x408c59\n    *(int64_t *)(a1 + 8) = v3;\n    if (v3 == 0) {\n        // 0x408cad\n        function_408bb0(a1);\n        // UNREACHABLE\n    }\n    int64_t v4 = v1 + 16 + v3 & (a3 == 0 ? -16 : -a3); // 0x408c6f\n    *(int64_t *)(a1 + 16) = v4;\n    int64_t v5 = v3 + a1; // 0x408c79\n    *(int64_t *)(a1 + 24) = v4;\n    *(int64_t *)v3 = v5;\n    *(int64_t *)(a1 + 32) = v5;\n    *(int64_t *)(v3 + 8) = 0;\n    char * v6 = (char *)(a1 + 80); // 0x408c94\n    *v6 = *v6 & -7;\n    return 1;\n}\n"
        },
        {
            "funcName": "obstack_begin",
            "funcStartAddr": "408cc0",
            "funcEndAddr": "408cd1",
            "decompiledFuncCode": "int64_t _obstack_begin(int64_t * a1, int32_t a2, int32_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = (int64_t)a1;\n    char * v2 = (char *)(v1 + 80); // 0x408cc0\n    *v2 = *v2 & -2;\n    *(int64_t *)(v1 + 56) = a4;\n    *(int64_t *)(v1 + 64) = a5;\n    return function_408c30(v1, (int64_t)a2, (int64_t)a3);\n}\n"
        },
        {
            "funcName": "obstack_begin_1",
            "funcStartAddr": "408ce0",
            "funcEndAddr": "408cf5",
            "decompiledFuncCode": "int64_t _obstack_begin_1(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    char * v1 = (char *)(a1 + 80); // 0x408ce0\n    *v1 = *v1 | 1;\n    *(int64_t *)(a1 + 56) = a4;\n    *(int64_t *)(a1 + 64) = a5;\n    *(int64_t *)(a1 + 72) = a6;\n    return function_408c30(a1, a2, a3);\n}\n"
        },
        {
            "funcName": "obstack_newchunk",
            "funcStartAddr": "408d00",
            "funcEndAddr": "408dfb",
            "decompiledFuncCode": "int64_t _obstack_newchunk(int64_t * a1, uint64_t a2, int64_t a3, int64_t a4) {\n    uint64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(v1 + 24); // 0x408d0a\n    int64_t * v3 = (int64_t *)(v1 + 16); // 0x408d0e\n    uint64_t v4 = *v2 - *v3; // 0x408d0e\n    uint64_t v5 = v4 + a2; // 0x408d16\n    if (v5 < a2) {\n        // 0x408df5\n        function_408bb0(v1);\n        // UNREACHABLE\n    }\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x408d1f\n    uint64_t v7 = v5 + *v6; // 0x408d1f\n    if (v7 < v5) {\n        // 0x408df5\n        function_408bb0(v1);\n        // UNREACHABLE\n    }\n    int64_t * v8 = (int64_t *)(v1 + 8); // 0x408d12\n    int64_t v9 = *v8; // 0x408d12\n    uint64_t v10 = v4 / 8 + 100 + v7; // 0x408d2d\n    uint64_t v11 = v7 <= v1 ? v1 : v7; // 0x408d32\n    int64_t v12 = v11 >= v10 ? v11 : v10; // 0x408d39\n    int64_t v13 = function_408bf0(v1, v12); // 0x408d58\n    if (v13 == 0) {\n        // 0x408df5\n        function_408bb0(v1);\n        // UNREACHABLE\n    }\n    int64_t v14 = v13 + v12; // 0x408d69\n    *v8 = v13;\n    int64_t * v15 = (int64_t *)(v13 + 8); // 0x408d75\n    *v15 = v9;\n    *(int64_t *)(v1 + 32) = v14;\n    *(int64_t *)v13 = v14;\n    int64_t v16 = *v6; // 0x408d81\n    int64_t v17 = v13 + 16 + v16 & -1 - v16; // 0x408d93\n    int64_t * dest_mem = memcpy((int64_t *)v17, (int64_t *)*v3, (int32_t)v4); // 0x408d99\n    char * v18 = (char *)(v1 + 80); // 0x408d9e\n    int64_t result = (int64_t)dest_mem; // 0x408da4\n    if ((*v18 & 2) == 0) {\n        int64_t v19 = *v6; // 0x408da6\n        int64_t v20 = v9 + 16 + v19 & -1 - v19; // 0x408db3\n        result = v20;\n        if (*v3 == v20) {\n            // 0x408de0\n            *v15 = *(int64_t *)(v9 + 8);\n            result = function_408c10(v1, v9);\n        }\n    }\n    // 0x408dbd\n    *v3 = v17;\n    *v2 = v17 + v4;\n    *v18 = *v18 & -3;\n    return result;\n}\n"
        },
        {
            "funcName": "obstack_allocated_p",
            "funcStartAddr": "408e00",
            "funcEndAddr": "408e37",
            "decompiledFuncCode": "int64_t _obstack_allocated_p(int64_t a1, uint64_t a2) {\n    int64_t v1 = *(int64_t *)(a1 + 8); // 0x408e00\n    if (v1 == 0) {\n        // 0x408e23\n        return 0;\n    }\n    if (v1 < a2) {\n        // 0x408e15\n        if (*(int64_t *)v1 >= a2) {\n            // break -> 0x408e23\n            break;\n        }\n    }\n    int64_t v2 = *(int64_t *)(v1 + 8); // 0x408e1a\n    int64_t result = 0; // 0x408e21\n    while (v2 != 0) {\n        uint64_t v3 = v2;\n        if (v3 < a2) {\n            // 0x408e15\n            result = 1;\n            if (*(int64_t *)v3 >= a2) {\n                // break -> 0x408e23\n                break;\n            }\n        }\n        // 0x408e1a\n        v2 = *(int64_t *)(v3 + 8);\n        result = 0;\n    }\n    // 0x408e23\n    return result;\n}\n"
        },
        {
            "funcName": "obstack_free",
            "funcStartAddr": "408e40",
            "funcEndAddr": "408ea5",
            "decompiledFuncCode": "int64_t _obstack_free(int64_t a1, uint64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x408e47\n    int64_t v2 = *v1; // 0x408e47\n    int64_t result2; // 0x408e40\n    if (v2 != 0) {\n        char * v3 = (char *)(a1 + 80);\n        uint64_t result; // 0x408e5d\n        if (v2 < a2) {\n            // 0x408e5d\n            result = *(int64_t *)v2;\n            if (result >= a2) {\n                // 0x408e90\n                *(int64_t *)(a1 + 24) = a2;\n                *(int64_t *)(a1 + 16) = a2;\n                *(int64_t *)(a1 + 32) = result;\n                *v1 = v2;\n                return result;\n            }\n        }\n        int64_t v4 = *(int64_t *)(v2 + 8); // 0x408e65\n        int64_t v5 = function_408c10(a1, v2); // 0x408e6c\n        *v3 = *v3 | 2;\n        result2 = v5;\n        while (v4 != 0) {\n            uint64_t v6 = v4;\n            if (v6 < a2) {\n                // 0x408e5d\n                result = *(int64_t *)v6;\n                if (result >= a2) {\n                    // 0x408e90\n                    *(int64_t *)(a1 + 24) = a2;\n                    *(int64_t *)(a1 + 16) = a2;\n                    *(int64_t *)(a1 + 32) = result;\n                    *v1 = v6;\n                    return result;\n                }\n            }\n            // 0x408e65\n            v4 = *(int64_t *)(v6 + 8);\n            v5 = function_408c10(a1, v6);\n            *v3 = *v3 | 2;\n            result2 = v5;\n        }\n    }\n    if (a2 == 0) {\n        // 0x408e86\n        return result2;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "obstack_memory_used",
            "funcStartAddr": "408eb0",
            "funcEndAddr": "408ed9",
            "decompiledFuncCode": "int64_t _obstack_memory_used(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 8); // 0x408eb0\n    int64_t result = 0; // 0x408eb9\n    if (v1 == 0) {\n        // 0x408ed2\n        return 0;\n    }\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x408ec6\n    result += *(int64_t *)v2 - v2;\n    while (v3 != 0) {\n        // 0x408ec0\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n        result += *(int64_t *)v2 - v2;\n    }\n    // 0x408ed2\n    return result;\n}\n"
        },
        {
            "funcName": "function_408ee0",
            "funcStartAddr": "408ee0",
            "funcEndAddr": "408f3d",
            "decompiledFuncCode": "int64_t function_408ee0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x408ee7\n    int64_t v2; // 0x408ee0\n    int64_t result = function_4055a0(a1, v2); // 0x408ef8\n    if ((v2 & 32) != 0) {\n        // 0x408f20\n        if ((int32_t)result == 0) {\n            // 0x408f24\n            *__errno_location() = 0;\n        }\n        // 0x408f1a\n        return 0xffffffff;\n    }\n    // 0x408f01\n    if ((int32_t)result == 0) {\n        // 0x408f1a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x408f08\n    if (v1 == 0) {\n        // 0x408f0a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x408f1a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408f40",
            "funcStartAddr": "408f40",
            "funcEndAddr": "408f9e",
            "decompiledFuncCode": "int64_t function_408f40(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x408f46\n    if (locale == NULL) {\n        // 0x408f73\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x408f46\n    bool v2; // 0x408f40\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g3; // 0x408f40\n    int64_t v5 = v1; // 0x408f40\n    int64_t v6 = 2; // 0x408f65\n    unsigned char v7 = *(char *)v5; // 0x408f65\n    char v8 = *(char *)v4; // 0x408f65\n    char v9 = v8; // 0x408f65\n    bool v10 = false; // 0x408f65\n    while (v7 == v8) {\n        // 0x408f58\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x408f71\n    int64_t v13 = v1; // 0x408f71\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x408f73\n        return 0;\n    }\n    int64_t v14 = 6; // 0x408f71\n    unsigned char v15 = *(char *)v13; // 0x408f8d\n    char v16 = *(char *)v12; // 0x408f8d\n    char v17 = v16; // 0x408f8d\n    bool v18 = false; // 0x408f8d\n    while (v15 == v16) {\n        // 0x408f80\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_408fa0",
            "funcStartAddr": "408fa0",
            "funcEndAddr": "409502",
            "decompiledFuncCode": "int64_t function_408fa0(void) {\n    char * v1 = nl_langinfo(14); // 0x408fb6\n    char * v2 = g54; // 0x408fbb\n    char * v3; // 0x408fa0\n    int64_t v4; // 0x408fa0\n    int64_t v5; // 0x408fa0\n    int64_t v6; // 0x408fa0\n    int64_t v7; // 0x408fa0\n    int32_t size; // 0x408fa0\n    int32_t size2; // 0x408fa0\n    int32_t len; // 0x409072\n    int64_t v8; // 0x409072\n    char * env_val; // 0x40905d\n    if (v2 == NULL) {\n        // 0x409058\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x4090c5;\n        } else {\n            // 0x40906a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x4090c5;\n            } else {\n                // 0x40906f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40905d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4094f5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x4090c5;\n                    } else {\n                        // 0x409469\n                        size2 = len + 14;\n                        goto lab_0x40908b;\n                    }\n                } else {\n                    goto lab_0x40908b;\n                }\n            }\n        }\n    } else {\n        // 0x408fa0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x408fda;\n    }\n  lab_0x40930c:;\n    // 0x40930c\n    struct _IO_FILE * stream; // 0x40914b\n    int32_t v10 = __uflow(stream); // 0x40930f\n    int64_t v11; // 0x408fa0\n    int64_t v12 = v11; // 0x409319\n    int64_t v13; // 0x408fa0\n    int64_t v14 = v13; // 0x409319\n    int32_t v15 = v10; // 0x409319\n    int64_t v16; // 0x408fa0\n    int64_t v17 = v16; // 0x409319\n    int64_t v18 = v11; // 0x409319\n    int64_t v19 = v13; // 0x409319\n    int64_t v20 = v16; // 0x409319\n    if (v10 == -1) {\n        // break -> 0x40931f\n        goto lab_0x40931f;\n    }\n    goto lab_0x409199;\n  lab_0x40918e:;\n    // 0x40918e\n    int64_t v90; // 0x408fa0\n    int64_t * v32; // 0x409180\n    *v32 = v90 + 1;\n    int64_t v89; // 0x408fa0\n    v12 = v89;\n    int64_t v91; // 0x408fa0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x408fa0\n    v17 = v92;\n    goto lab_0x409199;\n  lab_0x409199:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x408fa0\n    int32_t v25; // bp-120, 0x408fa0\n    int32_t v26; // bp-184, 0x408fa0\n    int64_t v27; // 0x40914b\n    int64_t v28; // 0x409168\n    int64_t v29; // 0x40916d\n    int64_t * v30; // 0x409184\n    switch (c) {\n        case 32: {\n            goto lab_0x409180;\n        }\n        case 10: {\n            goto lab_0x409180;\n        }\n        case 9: {\n            goto lab_0x409180;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x409371\n            int32_t v33; // 0x408fa0\n            char v34; // 0x408fa0\n            int32_t v35; // 0x40937e\n            if (v31 < *v30) {\n                // 0x409350\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40937b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x409371\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x409350\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40937b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x409360\n                v36 = v33;\n            }\n            // 0x40944f\n            if (v36 == -1) {\n                // break -> 0x40931f\n                break;\n            }\n            goto lab_0x409180;\n        }\n        default: {\n            // 0x4091af\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40931f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x4091d8\n            int64_t v39 = v37 + 4; // 0x4091da\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x4091e6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x4091e8\n            while (v41 == 0) {\n                // 0x4091d8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x409206\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x409212\n            int64_t v45 = v43 + 4; // 0x409214\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x409220\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x409222\n            while (v47 == 0) {\n                // 0x409212\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40920f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x409238\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x409248\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40924c\n            int64_t v52 = v51 + v48; // 0x409255\n            int64_t * mem; // 0x408fa0\n            int64_t v53; // 0x408fa0\n            int64_t v54; // 0x408fa0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40938b\n                int64_t v56 = v55 + 3; // 0x409397\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x409271\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x409280\n            if (mem == NULL) {\n                // 0x4094ac\n                free((int64_t *)v21);\n                function_4055a0(v27, v53);\n                v24 = (int64_t)&g12;\n                goto lab_0x409124;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x409298\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x4092a2\n            uint32_t v62 = (int32_t)v59; // 0x4092a5\n            int64_t v63; // 0x408fa0\n            if (v62 >= 8) {\n                // 0x4093b4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x4093ce\n                int64_t v66 = v61 - v65; // 0x4093d2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x4093dd\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4093ee\n                    int64_t v70 = v69 & 0xffffffff; // 0x4093ee\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4093eb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40947f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x4092b7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x4092bb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x4092cb\n            int64_t v74 = v60 - 1; // 0x4092cf\n            uint32_t v75 = (int32_t)v73; // 0x4092d4\n            int64_t v76; // 0x408fa0\n            if (v75 >= 8) {\n                // 0x409402\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40940c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40941c\n                int64_t v80 = v74 - v79; // 0x409420\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40942b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40943b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x409439\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x409496\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40949e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4092e6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4092ea\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4094e3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4092fe\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40918e;\n            } else {\n                goto lab_0x40930c;\n            }\n        }\n    }\n  lab_0x409180:;\n    int64_t v93 = v23; // 0x408fa0\n    int64_t v94 = v22; // 0x408fa0\n    int64_t v95 = v21; // 0x408fa0\n    goto lab_0x409180_2;\n  lab_0x4090c5:;\n    int64_t * mem3 = malloc(size); // 0x4090c5\n    int64_t v97 = (int64_t)&g12; // 0x4090d0\n    int64_t v98; // 0x408fa0\n    int64_t path; // 0x408fa0\n    if (mem3 == NULL) {\n        goto lab_0x4090a2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x4090c5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x4090e6;\n    }\n  lab_0x408fda:;\n    int64_t str = v1 == NULL ? (int64_t)&g12 : (int64_t)v1; // 0x408fcd\n    char v100 = *v3; // 0x408fda\n    int64_t v101; // 0x408fa0\n    if (v100 == 0) {\n        // 0x409034\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x408fa0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x408fa0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x409020\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x409027;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x408ff0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x408ffd\n        char v107 = *(char *)v106; // 0x409002\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x409034\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40900b\n    v104 = v103 + 1;\n  lab_0x409027:\n    // 0x409034\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4090a2:;\n    char * v108 = (char *)v97;\n    g54 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x408fda;\n  lab_0x4090e6:;\n    int64_t v109 = v98 + path; // 0x4090e6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x409112\n    v24 = (int64_t)&g12;\n    if (fd >= 0) {\n        // 0x409141\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x409472\n            close(fd);\n            v24 = (int64_t)&g12;\n        } else {\n            // 0x409165\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x409180_2:;\n                uint64_t v96 = *v32; // 0x409180\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40930c;\n                } else {\n                    goto lab_0x40918e;\n                }\n            }\n          lab_0x40931f:\n            // 0x40931f\n            function_4055a0(v27, v19);\n            v24 = (int64_t)&g12;\n            if (v18 != 0) {\n                // 0x40933e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x409124;\n  lab_0x40908b:;\n    int64_t * mem4 = malloc(size2); // 0x40908b\n    v97 = (int64_t)&g12;\n    if (mem4 != NULL) {\n        // 0x409131\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x4090e6;\n    } else {\n        goto lab_0x4090a2;\n    }\n  lab_0x409124:\n    // 0x409124\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4090a2;\n}\n"
        },
        {
            "funcName": "function_409510",
            "funcStartAddr": "409510",
            "funcEndAddr": "40956d",
            "decompiledFuncCode": "int64_t function_409510(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409510\n    return function_4018c8();\n}\n"
        },
        {
            "funcName": "function_409570",
            "funcStartAddr": "409570",
            "funcEndAddr": "409571",
            "decompiledFuncCode": "int64_t function_409570(void) {\n    // 0x409570\n    int64_t result; // 0x409570\n    return result;\n}\n"
        },
        {
            "funcName": "function_409580",
            "funcStartAddr": "409580",
            "funcEndAddr": "409598",
            "decompiledFuncCode": "int64_t function_409580(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409580\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_409598",
            "funcStartAddr": "409598",
            "funcEndAddr": "4095b8",
            "decompiledFuncCode": "int64_t function_409598(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x4095a2\n    while (*(int64_t *)v1 != -1) {\n        // 0x4095a3\n        v1 -= 8;\n    }\n    // 0x4095b4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_dircolors.elf"
}