{
    "funcInfo": [
        {
            "funcName": "function_401580",
            "funcStartAddr": "401580",
            "funcEndAddr": "401585",
            "decompiledFuncCode": "int64_t function_401580(void) {\n    // 0x401580\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401585",
            "funcStartAddr": "401585",
            "funcEndAddr": "40158a",
            "decompiledFuncCode": "int64_t function_401585(void) {\n    // 0x401585\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40158a",
            "funcStartAddr": "40158a",
            "funcEndAddr": "40158f",
            "decompiledFuncCode": "int64_t function_40158a(void) {\n    // 0x40158a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40158f",
            "funcStartAddr": "40158f",
            "funcEndAddr": "401594",
            "decompiledFuncCode": "int64_t function_40158f(void) {\n    // 0x40158f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401594",
            "funcStartAddr": "401594",
            "funcEndAddr": "401599",
            "decompiledFuncCode": "int64_t function_401594(void) {\n    // 0x401594\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401599",
            "funcStartAddr": "401599",
            "funcEndAddr": "40159e",
            "decompiledFuncCode": "int64_t function_401599(void) {\n    // 0x401599\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4015a0",
            "funcStartAddr": "4015a0",
            "funcEndAddr": "4017e0",
            "decompiledFuncCode": "int64_t function_4015a0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 & 0xffffffff; // 0x4015a8\n    function_401e00(a2);\n    setlocale(LC_ALL, (char *)&g13);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x4015a0\n    function_4058e0(0x401bd0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    function_401cf0(v1, a2, \"yes\", \"GNU coreutils\", (int64_t)g20, 0x4018c0);\n    if ((int32_t)function_405020(v1, a2, &g2, &g4, 0, 0x4018c0) != -1) {\n        // 0x4017c6\n        function_4018c0(1);\n        // UNREACHABLE\n    }\n    int32_t v3 = *(int32_t *)0x60923c; // 0x40163c\n    int64_t v4 = (0x100000000 * a1 >> 29) + a2; // 0x40164d\n    int64_t v5 = v4; // 0x401654\n    if (v3 == (int32_t)a1) {\n        // 0x401656\n        *(int64_t *)v4 = (int64_t)&g3;\n        v5 = v4 + 8;\n    }\n    int64_t v6 = 8 * (int64_t)v3 + a2; // 0x401646\n    if (v5 <= v6) {\n        int64_t result = function_404040(0x2000); // 0x4017d5\n        *(char *)(result - 1) = 10;\n        return result;\n    }\n    int64_t str = *(int64_t *)v6; // 0x40166a\n    int64_t v7 = v6 + 8; // 0x401688\n    int64_t v8 = (int64_t)strlen((char *)str) + 1; // 0x401691\n    int64_t v9 = 1; // 0x40169b\n    int64_t v10 = v8; // 0x40169b\n    int64_t v11 = v7; // 0x40169b\n    int64_t v12 = 1; // 0x40169b\n    if (v7 < v5) {\n        int64_t str2 = *(int64_t *)v11; // 0x401720\n        v12 &= 0xffffffff;\n        v11 += 8;\n        int64_t v13 = (int64_t)strlen((char *)str2) + 1; // 0x401691\n        v10 += v13;\n        v9 = v12;\n        while (v11 < v5) {\n            int64_t v14 = str2;\n            str2 = *(int64_t *)v11;\n            v12 &= 0xffffffff;\n            v11 += 8;\n            v13 = (int64_t)strlen((char *)str2) + 1;\n            v10 += v13;\n            v9 = v12;\n        }\n    }\n    int64_t v15 = 0x2000; // 0x4016a4\n    int64_t v16; // 0x4015a0\n    int64_t v17; // 0x4015a0\n    int64_t v18; // 0x4015a0\n    if (v15 < 0x1001) {\n        goto lab_0x401704;\n    } else {\n        // 0x4016a6\n        v16 = v15;\n        v17 = str;\n        v18 = v9;\n        if ((char)v9 == 0) {\n            goto lab_0x401704;\n        } else {\n            goto lab_0x4016ab;\n        }\n    }\n  lab_0x401704:;\n    int64_t v19 = function_404040(v15); // 0x40170a\n    v16 = v15;\n    v17 = v19;\n    v18 = 0;\n    goto lab_0x4016ab;\n  lab_0x4016ab:;\n    int64_t v20 = 0;\n    int64_t str3 = *(int64_t *)v6; // 0x4016c7\n    int32_t len = strlen((char *)str3); // 0x4016d3\n    if ((char)v18 == 0) {\n        // 0x4016e5\n        memcpy((int64_t *)(v20 + v17), (int64_t *)str3, len);\n    }\n    int64_t v21 = v20 + (int64_t)len; // 0x4016b0\n    int64_t v22 = v6 + 8; // 0x4016b4\n    int64_t v23 = v21 + 1; // 0x4016b8\n    char * v24 = (char *)(v21 + v17);\n    *v24 = 32;\n    int64_t v25 = v22; // 0x4016c5\n    while (v5 > v22) {\n        // 0x4016c7\n        v20 = v23;\n        str3 = *(int64_t *)v25;\n        len = strlen((char *)str3);\n        if ((char)v18 == 0) {\n            // 0x4016e5\n            memcpy((int64_t *)(v20 + v17), (int64_t *)str3, len);\n        }\n        // 0x4016b0\n        v21 = v20 + (int64_t)len;\n        v22 = v25 + 8;\n        v23 = v21 + 1;\n        v24 = (char *)(v21 + v17);\n        *v24 = 32;\n        v25 = v22;\n    }\n    // 0x401738\n    *v24 = 10;\n    uint64_t v26 = v16 / v23;\n    int64_t v27 = v26 - 1; // 0x401749\n    int64_t v28 = v23; // 0x40174d\n    if (v27 != 0) {\n        int64_t dest_mem = v17; // 0x401754\n        int64_t v29 = v27; // 0x401754\n        v29--;\n        dest_mem += v23;\n        while (v29 != 0) {\n            // 0x401758\n            v29--;\n            dest_mem += v23;\n        }\n        // 0x401772\n        v28 = v26 * v23;\n    }\n    int64_t v30 = v28;\n    while (function_401c70(1, v17, v30) == v30) {\n        // continue -> 0x401776\n    }\n    // 0x40178b\n    error(0, *__errno_location(), dcgettext(NULL, \"standard output\", 5));\n    return 1;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4017e0",
            "funcEndAddr": "40180b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4017e0\n    int64_t v1; // 0x4017e0\n    __libc_start_main(0x4015a0, (int32_t)a4, (char **)&v1, (void (*)())0x405870, (void (*)())0x4058d0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40180b",
            "funcStartAddr": "40180b",
            "funcEndAddr": "40182a",
            "decompiledFuncCode": "int64_t function_40180b(void) {\n    // 0x40180b\n    return &g30;\n}\n"
        },
        {
            "funcName": "function_40182a",
            "funcStartAddr": "40182a",
            "funcEndAddr": "401861",
            "decompiledFuncCode": "int64_t function_40182a(void) {\n    // 0x40182a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401861",
            "funcStartAddr": "401861",
            "funcEndAddr": "4018b8",
            "decompiledFuncCode": "int64_t function_401861(void) {\n    // 0x401861\n    if (g34 != 0) {\n        // 0x4018b7\n        int64_t result; // 0x401861\n        return result;\n    }\n    int64_t v1 = g35; // 0x401894\n    int64_t result2; // 0x4018a6\n    if (g35 >= ((int64_t)&g17 - (int64_t)&g16 >> 3) - 1) {\n        // 0x4018a6\n        result2 = function_40180b();\n        g34 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g17 - (int64_t)&g16 >> 3) - 1) {\n        // 0x401896\n        v1++;\n    }\n    // 0x40188a\n    g35 = v1;\n    // 0x4018a6\n    result2 = function_40180b();\n    g34 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4018b8",
            "funcStartAddr": "4018b8",
            "funcEndAddr": "4018bd",
            "decompiledFuncCode": "int64_t function_4018b8(void) {\n    // 0x4018b8\n    return function_40182a();\n}\n"
        },
        {
            "funcName": "function_4018c0",
            "funcStartAddr": "4018c0",
            "funcEndAddr": "401bad",
            "decompiledFuncCode": "int64_t function_4018c0(int64_t a1) {\n    int32_t status = a1; // 0x4018d6\n    if (status != 0) {\n        // 0x4018da\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4018ff\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401906\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [STRING]...\\n  or:  %s OPTION\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Repeatedly output a line with all specified STRING(s), or 'y'.\\n\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g31);\n    int64_t v1 = &g1; // bp-136, 0x401990\n    bool v2; // 0x4018c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x401a10\n    int64_t v6 = *(int64_t *)v5; // 0x401a14\n    int64_t v7 = 4; // 0x401a1a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"yes\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x401a26\n        char v11 = *(char *)v9; // 0x401a26\n        char v12 = v11; // 0x401a26\n        bool v13 = false; // 0x401a26\n        while (v10 == v11) {\n            // 0x401a1c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x401a26\n            int64_t v15 = v8 + v3; // 0x401a26\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x401a32\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 4;\n    }\n    // 0x401a32\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x401b44;\n        } else {\n            // 0x401b2e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401b83\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401a94;\n            } else {\n                goto lab_0x401b44;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x401a94;\n        } else {\n            // 0x401a7a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401b83\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401a94;\n            } else {\n                goto lab_0x401a94;\n            }\n        }\n    }\n  lab_0x401b44:\n    // 0x401b44\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401ad4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4018ff\n    exit(status);\n    // UNREACHABLE\n  lab_0x401a94:\n    // 0x401a94\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401ad4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4018ff\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bb0",
            "funcStartAddr": "401bb0",
            "funcEndAddr": "401bb8",
            "decompiledFuncCode": "int64_t function_401bb0(int64_t a1) {\n    // 0x401bb0\n    g37 = a1;\n    int64_t result; // 0x401bb0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401bc0",
            "funcStartAddr": "401bc0",
            "funcEndAddr": "401bc8",
            "decompiledFuncCode": "int64_t function_401bc0(int64_t a1) {\n    // 0x401bc0\n    g36 = a1;\n    int64_t result; // 0x401bc0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401bd0",
            "funcStartAddr": "401bd0",
            "funcEndAddr": "401c6e",
            "decompiledFuncCode": "int64_t function_401bd0(void) {\n    // 0x401bd0\n    int32_t * err_num; // 0x401be6\n    if ((int32_t)function_405120((int64_t)g31) == 0) {\n        goto lab_0x401bfc;\n    } else {\n        // 0x401be6\n        err_num = __errno_location();\n        if (g36 == 0) {\n            goto lab_0x401c13;\n        } else {\n            // 0x401bf7\n            if (*err_num != 32) {\n                goto lab_0x401c13;\n            } else {\n                goto lab_0x401bfc;\n            }\n        }\n    }\n  lab_0x401bfc:;\n    int64_t result = function_405120((int64_t)g33); // 0x401c03\n    if ((int32_t)result == 0) {\n        // 0x401c0c\n        return result;\n    }\n    // 0x401c4e\n    _exit(g21);\n    // UNREACHABLE\n  lab_0x401c13:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x401c1f\n    if (g37 == 0) {\n        // 0x401c59\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x401c33\n        error(0, *err_num, \"%s: %s\", (char *)function_403870((int64_t)g37), v1);\n    }\n    // 0x401c4e\n    _exit(g21);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c70",
            "funcStartAddr": "401c70",
            "funcEndAddr": "401ce6",
            "decompiledFuncCode": "int64_t function_401c70(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x401c70\n    if (a3 == 0) {\n        // 0x401cb4\n        return 0;\n    }\n    int64_t v1 = a3; // 0x401c8b\n    int64_t v2 = a2; // 0x401c8b\n    int64_t result = 0;\n    int64_t v3 = function_403a40(a1 & 0xffffffff, v2, v1); // 0x401ca9\n    int64_t result2 = result; // 0x401cb2\n    while (v3 != -1) {\n        if (v3 == 0) {\n            // 0x401cc8\n            *__errno_location() = 28;\n            return result;\n        }\n        int64_t v4 = v3 + result; // 0x401c95\n        v1 -= v3;\n        v2 += v3;\n        result2 = v4;\n        if (v1 == 0) {\n            // break -> 0x401cb4\n            break;\n        }\n        result = v4;\n        v3 = function_403a40(a1 & 0xffffffff, v2, v1);\n        result2 = result;\n    }\n    // 0x401cb4\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401cf0",
            "funcStartAddr": "401cf0",
            "funcEndAddr": "401df2",
            "decompiledFuncCode": "int64_t function_401cf0(int64_t a1, int64_t a2, char * a3, char * a4, int64_t a5, int64_t a6) {\n    // 0x401cf0\n    int64_t v1; // 0x401cf0\n    if ((char)v1 != 0) {\n        // 0x401d03\n        int128_t v2; // 0x401cf0\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int32_t v3 = g28; // 0x401d3a\n    g28 = 0;\n    if ((int32_t)a1 != 2) {\n        // 0x401d4f\n        g28 = v3;\n        g29 = 0;\n        int64_t result; // 0x401cf0\n        return result;\n    }\n    int64_t result2 = function_405020(a1, a2, &g2, (int64_t *)&g5, 0, a6); // 0x401d89\n    int32_t v4 = result2; // 0x401d8e\n    switch (v4) {\n        default: {\n            // 0x401d98\n            if (v4 == 118) {\n                int64_t v5 = 48; // bp-240, 0x401dba\n                function_403ea0((int64_t)g31, (int64_t)a3, (int64_t)a4, a5, &v5, a6);\n                exit(0);\n                // UNREACHABLE\n            }\n        }\n        case -1: {\n        }\n        case 104: {\n            // 0x401d4f\n            g28 = v3;\n            g29 = 0;\n            return result2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_401e00",
            "funcStartAddr": "401e00",
            "funcEndAddr": "401e99",
            "decompiledFuncCode": "int64_t function_401e00(int64_t str) {\n    // 0x401e00\n    if (str == 0) {\n        // 0x401e79\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g33);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x401e0e\n    int64_t result = (int64_t)found_char_pos; // 0x401e0e\n    if (found_char_pos == NULL) {\n        // 0x401e69\n        g38 = str;\n        g32 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x401e18\n    if (v1 - str < 7) {\n        // 0x401e69\n        g38 = str;\n        g32 = str;\n        return result;\n    }\n    // 0x401e28\n    bool v2; // 0x401e00\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x401e00\n    int64_t v5 = result - 6; // 0x401e00\n    int64_t v6 = 7; // 0x401e36\n    unsigned char v7 = *(char *)v5; // 0x401e36\n    char v8 = *(char *)v4; // 0x401e36\n    char v9 = v8; // 0x401e36\n    bool v10 = false; // 0x401e36\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x401e40\n    int64_t v13 = v1; // 0x401e40\n    int64_t v14 = 3; // 0x401e40\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x401e69\n        g38 = str;\n        g32 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x401e52\n    char v16 = *(char *)v12; // 0x401e52\n    char v17 = v16; // 0x401e52\n    bool v18 = false; // 0x401e52\n    while (v15 == v16) {\n        // 0x401e42\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x401e5c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x401e5e\n        v20 = result + 4;\n        g30 = v20;\n    }\n    // 0x401e69\n    g38 = v20;\n    g32 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_401ea0",
            "funcStartAddr": "401ea0",
            "funcEndAddr": "401f92",
            "decompiledFuncCode": "int64_t function_401ea0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x401eb4\n    int64_t result = (int64_t)v1; // 0x401eb4\n    if (result != a1) {\n        // 0x401ec1\n        return result;\n    }\n    int64_t v2 = function_4051e0(); // 0x401ed0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x401f86\n    if (v3 == 85) {\n        // 0x401ee0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x401f78\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g11 : (int64_t)&g6;\n            return result2;\n        }\n        char v4 = *v1; // 0x401f0e\n        int64_t result3 = v4 != 96 ? (int64_t)&g7 : (int64_t)&g10; // 0x401f1b\n        // 0x401ec1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x401f78\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g11 : (int64_t)&g6;\n        return result2;\n    }\n    char v5 = *v1; // 0x401f5d\n    int64_t result4 = v5 != 96 ? (int64_t)&g8 : (int64_t)&g9; // 0x401f6a\n    // 0x401ec1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_401fa0",
            "funcStartAddr": "401fa0",
            "funcEndAddr": "401ff7",
            "decompiledFuncCode": "int64_t function_401fa0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x401fa0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x401fe8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ff7",
            "funcStartAddr": "401ff7",
            "funcEndAddr": "4031c1",
            "decompiledFuncCode": "int64_t function_401ff7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402041\n    int64_t v3 = 0; // 0x402041\n    int64_t v4; // 0x401ff7\n    int64_t v5; // 0x401ff7\n    int64_t v6; // 0x401ff7\n    int64_t v7; // 0x401ff7\n    int64_t v8; // 0x401ff7\n    int64_t v9; // 0x401ff7\n    int64_t v10; // 0x401ff7\n    int64_t v11; // 0x401ff7\n    int64_t v12; // 0x401ff7\n    int64_t v13; // 0x401ff7\n    int64_t v14; // 0x401ff7\n    int64_t v15; // 0x401ff7\n    int64_t v16; // 0x401ff7\n    int64_t v17; // 0x401ff7\n    int64_t v18; // 0x401ff7\n    int64_t result; // 0x401ff7\n    int64_t v19; // 0x401ff7\n    int32_t wc; // bp+132, 0x401ff7\n    int64_t ps; // bp+136, 0x401ff7\n    char v20; // 0x4025b0\n    int64_t v21; // 0x4025b0\n    int64_t v22; // 0x402958\n    int64_t v23; // 0x401ff7\n    int64_t v24; // 0x402977\n    int32_t v25; // 0x401ff7\n    while (true) {\n      lab_0x402048_2:\n        // 0x402048\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x401ff7\n        int64_t v27; // 0x40207c\n        while (true) {\n          lab_0x402048:\n            // 0x402048\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402053\n            if (v15 == -1) {\n                // 0x402055\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402063\n            if (v28) {\n                // break (via goto) -> 0x4027c8\n                goto lab_0x4027c8;\n            }\n            // 0x40206c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g49 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40265b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4021a1;\n                    }\n                    // 0x402a7d\n                    v26 = v5 + 1;\n                    goto lab_0x402048;\n                }\n                case 7: {\n                    goto lab_0x4021a1;\n                }\n                case 8: {\n                    goto lab_0x4021a1;\n                }\n                case 9: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4021a1;\n                }\n                case 12: {\n                    goto lab_0x4021a1;\n                }\n                case 13: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40216d;\n                }\n                case 36: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4021a1;\n                }\n                case 38: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4021a1;\n                }\n                case 44: {\n                    goto lab_0x4021a1;\n                }\n                case 45: {\n                    goto lab_0x4021a1;\n                }\n                case 46: {\n                    goto lab_0x4021a1;\n                }\n                case 47: {\n                    goto lab_0x4021a1;\n                }\n                case 48: {\n                    goto lab_0x4021a1;\n                }\n                case 49: {\n                    goto lab_0x4021a1;\n                }\n                case 50: {\n                    goto lab_0x4021a1;\n                }\n                case 51: {\n                    goto lab_0x4021a1;\n                }\n                case 52: {\n                    goto lab_0x4021a1;\n                }\n                case 53: {\n                    goto lab_0x4021a1;\n                }\n                case 54: {\n                    goto lab_0x4021a1;\n                }\n                case 55: {\n                    goto lab_0x4021a1;\n                }\n                case 56: {\n                    goto lab_0x4021a1;\n                }\n                case 57: {\n                    goto lab_0x4021a1;\n                }\n                case 58: {\n                    goto lab_0x4021a1;\n                }\n                case 59: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4021a1;\n                }\n                case 66: {\n                    goto lab_0x4021a1;\n                }\n                case 67: {\n                    goto lab_0x4021a1;\n                }\n                case 68: {\n                    goto lab_0x4021a1;\n                }\n                case 69: {\n                    goto lab_0x4021a1;\n                }\n                case 70: {\n                    goto lab_0x4021a1;\n                }\n                case 71: {\n                    goto lab_0x4021a1;\n                }\n                case 72: {\n                    goto lab_0x4021a1;\n                }\n                case 73: {\n                    goto lab_0x4021a1;\n                }\n                case 74: {\n                    goto lab_0x4021a1;\n                }\n                case 75: {\n                    goto lab_0x4021a1;\n                }\n                case 76: {\n                    goto lab_0x4021a1;\n                }\n                case 77: {\n                    goto lab_0x4021a1;\n                }\n                case 78: {\n                    goto lab_0x4021a1;\n                }\n                case 79: {\n                    goto lab_0x4021a1;\n                }\n                case 80: {\n                    goto lab_0x4021a1;\n                }\n                case 81: {\n                    goto lab_0x4021a1;\n                }\n                case 82: {\n                    goto lab_0x4021a1;\n                }\n                case 83: {\n                    goto lab_0x4021a1;\n                }\n                case 84: {\n                    goto lab_0x4021a1;\n                }\n                case 85: {\n                    goto lab_0x4021a1;\n                }\n                case 86: {\n                    goto lab_0x4021a1;\n                }\n                case 87: {\n                    goto lab_0x4021a1;\n                }\n                case 88: {\n                    goto lab_0x4021a1;\n                }\n                case 89: {\n                    goto lab_0x4021a1;\n                }\n                case 90: {\n                    goto lab_0x4021a1;\n                }\n                case 91: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4021a1;\n                }\n                case 94: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4021a1;\n                }\n                case 96: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4021a1;\n                }\n                case 98: {\n                    goto lab_0x4021a1;\n                }\n                case 99: {\n                    goto lab_0x4021a1;\n                }\n                case 100: {\n                    goto lab_0x4021a1;\n                }\n                case 101: {\n                    goto lab_0x4021a1;\n                }\n                case 102: {\n                    goto lab_0x4021a1;\n                }\n                case 103: {\n                    goto lab_0x4021a1;\n                }\n                case 104: {\n                    goto lab_0x4021a1;\n                }\n                case 105: {\n                    goto lab_0x4021a1;\n                }\n                case 106: {\n                    goto lab_0x4021a1;\n                }\n                case 107: {\n                    goto lab_0x4021a1;\n                }\n                case 108: {\n                    goto lab_0x4021a1;\n                }\n                case 109: {\n                    goto lab_0x4021a1;\n                }\n                case 110: {\n                    goto lab_0x4021a1;\n                }\n                case 111: {\n                    goto lab_0x4021a1;\n                }\n                case 112: {\n                    goto lab_0x4021a1;\n                }\n                case 113: {\n                    goto lab_0x4021a1;\n                }\n                case 114: {\n                    goto lab_0x4021a1;\n                }\n                case 115: {\n                    goto lab_0x4021a1;\n                }\n                case 116: {\n                    goto lab_0x4021a1;\n                }\n                case 117: {\n                    goto lab_0x4021a1;\n                }\n                case 118: {\n                    goto lab_0x4021a1;\n                }\n                case 119: {\n                    goto lab_0x4021a1;\n                }\n                case 120: {\n                    goto lab_0x4021a1;\n                }\n                case 121: {\n                    goto lab_0x4021a1;\n                }\n                case 122: {\n                    goto lab_0x4021a1;\n                }\n                case 123: {\n                    goto lab_0x402145;\n                }\n                case 124: {\n                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402145;\n                }\n                case 126: {\n                    goto lab_0x40216d;\n                }\n                default: {\n                    goto lab_0x402545;\n                }\n            }\n        }\n      lab_0x402545:\n        if (v23 != 1) {\n            // 0x4028b0\n            ps = 0;\n            int64_t len = v15; // 0x4028c0\n            if (v15 == -1) {\n                // 0x4028c2\n                len = strlen((char *)str);\n            }\n            // 0x4028ee\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40294f:\n                // 0x40294f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x402954\n                int64_t v30 = v29 + str;\n                v24 = function_4050a0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x402eca_2;\n                    }\n                    case -1: {\n                        goto lab_0x402eca_2;\n                    }\n                    case -2: {\n                        // 0x402fad\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x402fe7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x402fea\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x402ff7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x402ff0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x402eca\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x402eca_2;\n                    }\n                    case 1: {\n                        goto lab_0x402920;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4029cc\n                        char v34 = *(char *)v33; // 0x4029dd\n                        unsigned char v35; // 0x401ff7\n                        if (v34 < 125) {\n                            // 0x4029e8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x4029ff\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4029d0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4029dd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x4029e8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x4029ff\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4029d0\n                            v33++;\n                        }\n                        goto lab_0x402920;\n                    }\n                }\n            }\n            goto lab_0x402eca_2;\n        } else {\n            // 0x402594\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4021a1;\n        }\n    }\n  lab_0x4027c8:\n    // 0x4027c8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4030ca\n        if (v8 > result) {\n            // 0x4030d3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4023f7\n        return result;\n    }\n    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4021a1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4021b0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4023ba_2;\n        }\n    }\n    int64_t v39 = result; // 0x4022b1\n    char v40 = v20; // 0x4022b1\n    int64_t v41 = v38; // 0x4022b1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4022b1\n    int64_t v43 = v36; // 0x4022b1\n    goto lab_0x40222d;\n  lab_0x4023ba_2:\n    // 0x4023f7\n    return function_401fa0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402eca_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4021a1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x402a9e\n        int64_t v50 = v5 + 1; // 0x402b81\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x402b88\n        char v52 = v20; // 0x402b88\n        int64_t v53 = result; // 0x402b88\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x402b51\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x402b55\n            int64_t v56 = v54 + 1; // 0x402b5a\n            int64_t v57 = v51 + 1; // 0x402b81\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x402b4c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x402b51\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x402b55\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40222d;\n    }\n  lab_0x402920:\n    // 0x402920\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40293f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402942\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x402eca\n        goto lab_0x402eca_2;\n    }\n    goto lab_0x40294f;\n  lab_0x40216d:\n    // 0x40216d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4023ba_2;\n    }\n    goto lab_0x4021a1;\n  lab_0x402145:;\n    bool v60 = v15 == 1; // 0x402150\n    if (v15 == -1) {\n        // 0x402152\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40215e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4021a1;\n    } else {\n        goto lab_0x40216d;\n    }\n  lab_0x40222d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402232\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402236\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402048_2;\n}\n"
        },
        {
            "funcName": "function_4031d0",
            "funcStartAddr": "4031d0",
            "funcEndAddr": "40336e",
            "decompiledFuncCode": "int64_t function_4031d0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4031d2\n    int32_t * v3 = __errno_location(); // 0x4031ec\n    int64_t v4 = (int64_t)g23; // 0x4031f1\n    int32_t v5 = *v3; // 0x4031fb\n    int64_t v6 = v4; // 0x403211\n    if (v2 >= (int64_t)*(int32_t *)&g26) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403369\n            function_404290(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403220\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403227\n        int64_t v9; // 0x4031d0\n        if (g23 == &g24) {\n            int64_t v10 = function_4040a0(0, v8); // 0x40334a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g24); // 0x40334f\n            *(int64_t *)&g23 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4040a0(v4, v8); // 0x40323b\n            *(int64_t *)&g23 = v12;\n            v9 = v12;\n        }\n        // 0x40324a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g26; // 0x40324a\n        int32_t v14 = v7; // 0x403251\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g26 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403281\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40328b\n    int64_t * v17 = (int64_t *)v15; // 0x40328e\n    uint64_t v18 = *v17; // 0x40328e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403291\n    int64_t result = *v19; // 0x403291\n    int64_t v20; // 0x4031d0\n    uint64_t v21 = function_401fa0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4032b4\n    if (v18 > v21) {\n        // 0x40332b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4032c7\n    *v17 = v22;\n    if (result != (int64_t)&g39) {\n        // 0x4032d7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404040(v22); // 0x4032f1\n    *v19 = result2;\n    int64_t v23; // 0x4031d0\n    function_401fa0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40332b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403370",
            "funcStartAddr": "403370",
            "funcEndAddr": "4033a4",
            "decompiledFuncCode": "int64_t function_403370(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403377\n    int64_t result = function_404240(a1 == 0 ? (int64_t)&g40 : a1, 56); // 0x403396\n    return result;\n}\n"
        },
        {
            "funcName": "function_4033b0",
            "funcStartAddr": "4033b0",
            "funcEndAddr": "4033bf",
            "decompiledFuncCode": "int64_t function_4033b0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g40 : a1); // 0x4033bc\n    return result;\n}\n"
        },
        {
            "funcName": "function_4033c0",
            "funcStartAddr": "4033c0",
            "funcEndAddr": "4033cf",
            "decompiledFuncCode": "int64_t function_4033c0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 : a1; // 0x4033c8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g40;\n}\n"
        },
        {
            "funcName": "function_4033d0",
            "funcStartAddr": "4033d0",
            "funcEndAddr": "403403",
            "decompiledFuncCode": "int64_t function_4033d0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 + 8 : a1 + 8; // 0x4033e9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4033ee\n    uint32_t v3 = *v2; // 0x4033ee\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4033f2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403410",
            "funcStartAddr": "403410",
            "funcEndAddr": "403423",
            "decompiledFuncCode": "int64_t function_403410(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g40 + 4 : a1 + 4); // 0x40341c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403430",
            "funcStartAddr": "403430",
            "funcEndAddr": "40345b",
            "decompiledFuncCode": "int64_t function_403430(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 : a1; // 0x403438\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x403455\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40344c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g40;\n}\n"
        },
        {
            "funcName": "function_403460",
            "funcStartAddr": "403460",
            "funcEndAddr": "4034d2",
            "decompiledFuncCode": "int64_t function_403460(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g40 : a5; // 0x403482\n    int32_t * v2 = __errno_location(); // 0x40348b\n    uint32_t v3 = *(int32_t *)v1; // 0x4034ab\n    int64_t result = function_401fa0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4034ba\n    return result;\n}\n"
        },
        {
            "funcName": "function_4034e0",
            "funcStartAddr": "4034e0",
            "funcEndAddr": "4035c1",
            "decompiledFuncCode": "int64_t function_4034e0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g40 : a4; // 0x403502\n    int32_t * v2 = __errno_location(); // 0x403508\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403527\n    int32_t * v4 = (int32_t *)v1; // 0x40352a\n    int64_t v5 = function_401fa0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403545\n    int64_t v6 = v5 + 1; // 0x40354a\n    int64_t result = function_404040(v6); // 0x40355f\n    function_401fa0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4035a4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4035ad\n    return result;\n}\n"
        },
        {
            "funcName": "function_4035d0",
            "funcStartAddr": "4035d0",
            "funcEndAddr": "4035da",
            "decompiledFuncCode": "int64_t function_4035d0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4035d0\n    return function_4034e0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4035e0",
            "funcStartAddr": "4035e0",
            "funcEndAddr": "403675",
            "decompiledFuncCode": "int64_t function_4035e0(void) {\n    uint32_t v1 = *(int32_t *)&g26; // 0x4035e0\n    int64_t v2 = v1; // 0x4035e0\n    int64_t v3 = v2; // 0x4035f4\n    if (v1 >= 2) {\n        int64_t v4 = &g26;\n        int64_t v5 = v4 + 16; // 0x403613\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g50;\n        while (v5 != (int64_t)g23 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403610\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g50;\n        }\n    }\n    int64_t v6 = v3; // 0x40362d\n    if (g24 != 0x6092a0) {\n        // 0x40362f\n        free((int64_t *)g24);\n        g24 = 256;\n        *(int64_t *)&g25 = (int64_t)&g39;\n        v6 = &g50;\n    }\n    int64_t result = v6; // 0x403651\n    if (g23 != &g24) {\n        // 0x403653\n        free(g23);\n        *(int64_t *)&g23 = (int64_t)&g24;\n        result = &g50;\n    }\n    // 0x403666\n    *(int32_t *)&g26 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403680",
            "funcStartAddr": "403680",
            "funcEndAddr": "403691",
            "decompiledFuncCode": "int64_t function_403680(void) {\n    // 0x403680\n    int64_t v1; // 0x403680\n    return function_4031d0(v1, v1, -1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_4036a0",
            "funcStartAddr": "4036a0",
            "funcEndAddr": "4036aa",
            "decompiledFuncCode": "int64_t function_4036a0(void) {\n    // 0x4036a0\n    int64_t v1; // 0x4036a0\n    return function_4031d0(v1, v1, v1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_4036b0",
            "funcStartAddr": "4036b0",
            "funcEndAddr": "4036c6",
            "decompiledFuncCode": "int64_t function_4036b0(int64_t a1) {\n    // 0x4036b0\n    return function_4031d0(0, a1, -1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_4036d0",
            "funcStartAddr": "4036d0",
            "funcEndAddr": "4036e2",
            "decompiledFuncCode": "int64_t function_4036d0(int64_t a1, int64_t a2) {\n    // 0x4036d0\n    return function_4031d0(0, a1, a2, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_4036f0",
            "funcStartAddr": "4036f0",
            "funcEndAddr": "403758",
            "decompiledFuncCode": "int64_t function_4036f0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403700\n    return function_4031d0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403760",
            "funcStartAddr": "403760",
            "funcEndAddr": "4037c4",
            "decompiledFuncCode": "int64_t function_403760(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403770\n    return function_4031d0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4037d0",
            "funcStartAddr": "4037d0",
            "funcEndAddr": "4037dc",
            "decompiledFuncCode": "int64_t function_4037d0(int64_t a1, int64_t a2) {\n    // 0x4037d0\n    return function_4036f0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_4037e0",
            "funcStartAddr": "4037e0",
            "funcEndAddr": "4037ef",
            "decompiledFuncCode": "int64_t function_4037e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4037e0\n    return function_403760(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_4037f0",
            "funcStartAddr": "4037f0",
            "funcEndAddr": "403860",
            "decompiledFuncCode": "int64_t function_4037f0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g40); // 0x4037fd\n    int128_t v2 = __asm_movdqa(g41); // 0x403805\n    int128_t v3 = __asm_movdqa(g42); // 0x40380d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x403822\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x403838\n    uint32_t v6 = *v5; // 0x403838\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40383d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4031d0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_403860",
            "funcStartAddr": "403860",
            "funcEndAddr": "40386d",
            "decompiledFuncCode": "int64_t function_403860(int64_t a1, int64_t a2) {\n    // 0x403860\n    return function_4037f0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403870",
            "funcStartAddr": "403870",
            "funcEndAddr": "403881",
            "decompiledFuncCode": "int64_t function_403870(int64_t a1) {\n    // 0x403870\n    return function_4037f0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403890",
            "funcStartAddr": "403890",
            "funcEndAddr": "40389a",
            "decompiledFuncCode": "int64_t function_403890(void) {\n    // 0x403890\n    int64_t v1; // 0x403890\n    return function_4037f0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_4038a0",
            "funcStartAddr": "4038a0",
            "funcEndAddr": "40390e",
            "decompiledFuncCode": "int64_t function_4038a0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4038ba\n    return function_4031d0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403910",
            "funcStartAddr": "403910",
            "funcEndAddr": "40397c",
            "decompiledFuncCode": "int64_t function_403910(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g40); // 0x403917\n    int128_t v2 = __asm_movdqa(g41); // 0x40391f\n    int128_t v3 = __asm_movdqa(g42); // 0x403927\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x403949\n    if (a2 == 0 || a3 == 0) {\n        // 0x403977\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40395a\n    return function_4031d0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403980",
            "funcStartAddr": "403980",
            "funcEndAddr": "403989",
            "decompiledFuncCode": "int64_t function_403980(void) {\n    // 0x403980\n    int64_t v1; // 0x403980\n    return function_403910(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403990",
            "funcStartAddr": "403990",
            "funcEndAddr": "4039a7",
            "decompiledFuncCode": "int64_t function_403990(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403990\n    return function_403910(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4039b0",
            "funcStartAddr": "4039b0",
            "funcEndAddr": "4039c3",
            "decompiledFuncCode": "int64_t function_4039b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4039b0\n    return function_403910(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4039d0",
            "funcStartAddr": "4039d0",
            "funcEndAddr": "4039da",
            "decompiledFuncCode": "int64_t function_4039d0(void) {\n    // 0x4039d0\n    int64_t v1; // 0x4039d0\n    return function_4031d0(v1, v1, v1, &g22);\n}\n"
        },
        {
            "funcName": "function_4039e0",
            "funcStartAddr": "4039e0",
            "funcEndAddr": "4039f2",
            "decompiledFuncCode": "int64_t function_4039e0(int64_t a1, int64_t a2) {\n    // 0x4039e0\n    return function_4031d0(0, a1, a2, &g22);\n}\n"
        },
        {
            "funcName": "function_403a00",
            "funcStartAddr": "403a00",
            "funcEndAddr": "403a11",
            "decompiledFuncCode": "int64_t function_403a00(void) {\n    // 0x403a00\n    int64_t v1; // 0x403a00\n    return function_4031d0(v1, v1, -1, &g22);\n}\n"
        },
        {
            "funcName": "function_403a20",
            "funcStartAddr": "403a20",
            "funcEndAddr": "403a36",
            "decompiledFuncCode": "int64_t function_403a20(int64_t a1) {\n    // 0x403a20\n    return function_4031d0(0, a1, -1, &g22);\n}\n"
        },
        {
            "funcName": "function_403a40",
            "funcStartAddr": "403a40",
            "funcEndAddr": "403a9e",
            "decompiledFuncCode": "int64_t function_403a40(int64_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte); // 0x403a61\n    while (result < 0) {\n        // 0x403a6e\n        if (*__errno_location() != 4) {\n            // break -> 0x403a7a\n            break;\n        }\n        result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_403aa0",
            "funcStartAddr": "403aa0",
            "funcEndAddr": "403e7d",
            "decompiledFuncCode": "int64_t function_403aa0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x403b38\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x403abc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403ad6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x403b1b\n    if (a6 < 10) {\n        // 0x403b2a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x403c22\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_403e80",
            "funcStartAddr": "403e80",
            "funcEndAddr": "403ea0",
            "decompiledFuncCode": "int64_t function_403e80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403e80\n    if (a5 == 0) {\n        // 0x403e9b\n        return function_403aa0(a1, a2, a3, a4, a5, 0, (int64_t)&g50);\n    }\n    int64_t v1 = 0; // 0x403e87\n    v1++;\n    int64_t v2 = v1; // 0x403e99\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x403e90\n        v1++;\n        v2 = v1;\n    }\n    // 0x403e9b\n    return function_403aa0(a1, a2, a3, a4, a5, v2, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_403ea0",
            "funcStartAddr": "403ea0",
            "funcEndAddr": "403f00",
            "decompiledFuncCode": "int64_t function_403ea0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = v1;\n    int64_t v3; // bp-88, 0x403ea0\n    int64_t v4 = &v3; // 0x403ea0\n    int64_t v5 = 0;\n    uint32_t v6 = (int32_t)v1; // 0x403ed3\n    int64_t v7; // 0x403ebd\n    int64_t * v8; // 0x403edb\n    int64_t v9; // 0x403edb\n    int64_t v10; // 0x403ee7\n    if (v6 < 48) {\n        // 0x403eb0\n        *(int32_t *)v2 = v6 + 8;\n        v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n        *(int64_t *)(8 * v5 + v4) = v7;\n        if (v7 == 0) {\n            // break -> 0x403ef3\n            break;\n        }\n    } else {\n        // 0x403edb\n        v8 = (int64_t *)(v2 + 8);\n        v9 = *v8;\n        *v8 = v9 + 8;\n        v10 = *(int64_t *)v9;\n        *(int64_t *)(8 * v5 + v4) = v10;\n        if (v10 == 0) {\n            // break -> 0x403ef3\n            break;\n        }\n    }\n    int64_t v11 = 10; // 0x403ed1\n    while (v5 != 9) {\n        // 0x403ec9\n        v5++;\n        v6 = *(int32_t *)&v2;\n        if (v6 < 48) {\n            // 0x403eb0\n            *(int32_t *)v2 = v6 + 8;\n            v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n            *(int64_t *)(8 * v5 + v4) = v7;\n            v11 = v5;\n            if (v7 == 0) {\n                // break -> 0x403ef3\n                break;\n            }\n        } else {\n            // 0x403edb\n            v8 = (int64_t *)(v2 + 8);\n            v9 = *v8;\n            *v8 = v9 + 8;\n            v10 = *(int64_t *)v9;\n            *(int64_t *)(8 * v5 + v4) = v10;\n            v11 = v5;\n            if (v10 == 0) {\n                // break -> 0x403ef3\n                break;\n            }\n        }\n        // 0x403ec9\n        v11 = 10;\n    }\n    // 0x403ef3\n    return function_403aa0(a1, a2, a3, a4, v4, v11, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_403f00",
            "funcStartAddr": "403f00",
            "funcEndAddr": "403fbc",
            "decompiledFuncCode": "int64_t function_403f00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403f00\n    int64_t v1; // bp-168, 0x403f00\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x403f00\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x403f00\n    int64_t v8; // 0x403f00\n    int64_t v9; // bp-56, 0x403f00\n    int64_t v10; // 0x403f65\n    int64_t v11; // 0x403f89\n    if ((int32_t)v6 < 48) {\n        // 0x403f50\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x403fa0\n            break;\n        }\n    } else {\n        // 0x403f82\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x403fa0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x403f7a\n    int64_t v13 = 10; // 0x403f7a\n    while (v5 != 9) {\n        // 0x403f7c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x403f50\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x403fa0\n                break;\n            }\n        } else {\n            // 0x403f82\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x403fa0\n                break;\n            }\n        }\n        // 0x403f72\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x403fa0\n    int64_t v14; // bp-136, 0x403f00\n    int64_t result = function_403aa0(a1, a2, a3, a4, (int64_t)&v14, v13, (int64_t)&g50); // 0x403faf\n    return result;\n}\n"
        },
        {
            "funcName": "function_403fc0",
            "funcStartAddr": "403fc0",
            "funcEndAddr": "404034",
            "decompiledFuncCode": "int64_t function_403fc0(int64_t a1) {\n    // 0x403fc0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404023\n    return fputs_unlocked(v1, g31);\n}\n"
        },
        {
            "funcName": "function_404040",
            "funcStartAddr": "404040",
            "funcEndAddr": "40405a",
            "decompiledFuncCode": "int64_t function_404040(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404044\n    if (size != 0 != (mem == NULL)) {\n        // 0x404053\n        return (int64_t)mem;\n    }\n    // 0x404055\n    function_404290(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404060",
            "funcStartAddr": "404060",
            "funcEndAddr": "404081",
            "decompiledFuncCode": "int64_t function_404060(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404063\n    int64_t v2 = v1; // 0x404063\n    if (v2 < 0) {\n        // 0x40407b\n        function_404290(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404079\n        return function_404040(v2);\n    }\n    // 0x40407b\n    function_404290(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404090",
            "funcStartAddr": "404090",
            "funcEndAddr": "404092",
            "decompiledFuncCode": "int64_t function_404090(void) {\n    // 0x404090\n    int64_t v1; // 0x404090\n    return function_404040(v1);\n}\n"
        },
        {
            "funcName": "function_4040a0",
            "funcStartAddr": "4040a0",
            "funcEndAddr": "4040d6",
            "decompiledFuncCode": "int64_t function_4040a0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4040c8\n        free(v1);\n        return (int32_t)&g50 ^ (int32_t)&g50;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4040b1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4040c0\n        return (int64_t)mem;\n    }\n    // 0x4040d1\n    function_404290(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4040e0",
            "funcStartAddr": "4040e0",
            "funcEndAddr": "404101",
            "decompiledFuncCode": "int64_t function_4040e0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4040e3\n    int64_t v2 = v1; // 0x4040e3\n    if (v2 < 0) {\n        // 0x4040fb\n        function_404290(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4040f9\n        return function_4040a0(a1, v2);\n    }\n    // 0x4040fb\n    function_404290(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404110",
            "funcStartAddr": "404110",
            "funcEndAddr": "404196",
            "decompiledFuncCode": "int64_t function_404110(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40416b\n            function_404290(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4040a0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404153\n    if (a2 == 0) {\n        // 0x404178\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404158\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40416b\n        function_404290(a1);\n        // UNREACHABLE\n    }\n    // 0x40413a\n    *(int64_t *)a2 = v2;\n    return function_4040a0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4041a0",
            "funcStartAddr": "4041a0",
            "funcEndAddr": "4041f0",
            "decompiledFuncCode": "int64_t function_4041a0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4041a0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4041ea\n            function_404290(a1);\n            // UNREACHABLE\n        }\n        // 0x4041c2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4040a0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4041d5\n        *(int64_t *)a2 = 128;\n        return function_4040a0(0, 128);\n    }\n    // 0x4041e8\n    if (a2 < 0) {\n        // 0x4041ea\n        function_404290(a1);\n        // UNREACHABLE\n    }\n    // 0x4041c2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4040a0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4041f0",
            "funcStartAddr": "4041f0",
            "funcEndAddr": "404207",
            "decompiledFuncCode": "int64_t function_4041f0(int64_t a1, int64_t a2) {\n    // 0x4041f0\n    return (int64_t)memset((int64_t *)function_404040(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404210",
            "funcStartAddr": "404210",
            "funcEndAddr": "40423e",
            "decompiledFuncCode": "int64_t function_404210(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404217\n    if ((int64_t)v1 < 0) {\n        // 0x404239\n        function_404290(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404239\n        function_404290(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40422a\n    if (mem != NULL) {\n        // 0x404234\n        return (int64_t)mem;\n    }\n    // 0x404239\n    function_404290(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404240",
            "funcStartAddr": "404240",
            "funcEndAddr": "404268",
            "decompiledFuncCode": "int64_t function_404240(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404040(a2); // 0x40424f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404270",
            "funcStartAddr": "404270",
            "funcEndAddr": "404283",
            "decompiledFuncCode": "int64_t function_404270(int64_t str) {\n    // 0x404270\n    return function_404240(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404290",
            "funcStartAddr": "404290",
            "funcEndAddr": "4042c1",
            "decompiledFuncCode": "int64_t function_404290(int64_t a1) {\n    // 0x404290\n    error(g21, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4042d0",
            "funcStartAddr": "4042d0",
            "funcEndAddr": "4043af",
            "decompiledFuncCode": "int64_t function_4042d0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4042dc\n    uint32_t v2 = *v1; // 0x4042dc\n    int64_t v3 = a2 & 0xffffffff; // 0x4042e1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x4042e4\n    uint64_t v5 = (int64_t)*v4; // 0x4042e4\n    int64_t v6; // 0x404352\n    if (v3 <= v5) {\n      lab_0x40434c_2:\n        // 0x40434c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4042d2\n    int64_t v8 = v2; // 0x4042d0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40434c\n        goto lab_0x40434c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404308\n    int64_t v17; // 0x404316\n    int64_t * v18; // 0x404330\n    int64_t * v19; // 0x404333\n    int64_t v20; // 0x40433e\n    int64_t v21; // 0x404316\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x404313\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x404330\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x404347\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40434c\n            goto lab_0x40434c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40434c\n            goto lab_0x40434c_2;\n        }\n        // 0x404302\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40438b\n    int64_t * v23 = (int64_t *)v22; // 0x404390\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x404393\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x404390\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4043a7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x4042fd\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40434c\n            goto lab_0x40434c_2;\n        }\n        // 0x404302\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x404313\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x404330\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x404347\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40434c\n                goto lab_0x40434c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40434c\n                goto lab_0x40434c_2;\n            }\n            // 0x404302\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x404370\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x404390\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4043a7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40434c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4043b0",
            "funcStartAddr": "4043b0",
            "funcEndAddr": "4049cc",
            "decompiledFuncCode": "int64_t function_4043b0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4043cf\n    int64_t v2 = *v1; // 0x4043cf\n    char * str2 = (char *)v2; // 0x4043dc\n    char c = *str2; // 0x4043dc\n    int64_t v3 = v2; // 0x404408\n    int64_t v4 = 0; // 0x4043b0\n    int32_t v5; // 0x4043b0\n    int64_t v6; // 0x4043b0\n    int64_t v7; // 0x4043b0\n    int64_t v8; // 0x4043b0\n    int64_t v9; // 0x4043b0\n    int64_t v10; // 0x4043b0\n    int64_t v11; // 0x4043b0\n    int64_t v12; // 0x4043b0\n    int64_t v13; // 0x4043b0\n    int64_t str3; // 0x4043b0\n    int64_t v14; // 0x4043b0\n    int64_t v15; // 0x4043b0\n    int64_t v16; // 0x4043b0\n    int64_t v17; // 0x4043b0\n    int32_t v18; // 0x4043b0\n    int32_t v19; // 0x4043b0\n    int32_t v20; // 0x4043b0\n    int32_t v21; // 0x4043b0\n    int32_t v22; // 0x4043b0\n    int32_t v23; // 0x4043b0\n    int32_t v24; // 0x4043b0\n    int32_t v25; // 0x4043b0\n    int32_t v26; // 0x4043b0\n    int32_t v27; // 0x4043b0\n    int32_t v28; // 0x4043b0\n    int32_t v29; // 0x4043b0\n    int64_t nmemb; // 0x4043b0\n    int64_t v30; // 0x4043b0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40440c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404408\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404418\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40441e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4043e8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40444c\n                int64_t v34; // 0x4043b0\n                int64_t v35; // 0x4043b0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x404455\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4045d0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x404466\n                int64_t v37 = *(int64_t *)v36; // 0x40446a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x404440\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x404455\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4045d0;\n                        }\n                    }\n                    // 0x404466\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4044b6:\n                    // 0x4044b6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x404510;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x404680\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x404510;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x404630\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4044da;\n                                } else {\n                                    // 0x40463c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4044da;\n                                    } else {\n                                        // 0x40464a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4044da;\n                                        } else {\n                                            goto lab_0x404510;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4044da;\n                            }\n                        }\n                    }\n                }\n              lab_0x404521:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x4046f6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4048a2\n                            flockfile(g33);\n                            int64_t v41 = *v1; // 0x4048c2\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40490f\n                            int64_t v43 = (int64_t)g33;\n                            int64_t v44 = v43; // 0x404929\n                            int64_t v45; // 0x40492b\n                            if (*(char *)v42 != 0) {\n                                // 0x40492b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g33;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x404923\n                            while (v17 + nmemb != v42) {\n                                // 0x404925\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40492b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g33;\n                                }\n                                // 0x404918\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x404950\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g33);\n                            v40 = *v1;\n                        } else {\n                            // 0x404704\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40485f\n                        free((int64_t *)v17);\n                    }\n                    // 0x404759\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x404770\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40461e\n                    return 63;\n                }\n                // 0x404540\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4045c4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4045d0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x4045e0\n                    uint32_t v50 = *v49; // 0x4045e0\n                    int64_t v51 = v50; // 0x4045e0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x4045ea\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x4045f3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40481f\n                                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4047ca\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40461e\n                            return 63;\n                        }\n                        // 0x404668\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40497f\n                                    __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40487d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x404890\n                                // 0x40461e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40478e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4047a2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40460b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40460e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x404612\n                    int64_t result = v59; // 0x404618\n                    if (v58 != 0) {\n                        // 0x40461a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40461e\n                    return result;\n                }\n            } else {\n                // 0x40441e\n                v5 = v32;\n            }\n            // break -> 0x404545\n            break;\n        }\n    }\n    // 0x404545\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40455d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x404567\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40461e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4046a9\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x404596\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4045a6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x404510:\n    // 0x404510\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x404510\n    int64_t v63 = *(int64_t *)v62; // 0x404514\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x404521\n        goto lab_0x404521;\n    }\n    goto lab_0x4044b6;\n  lab_0x4044da:\n    // 0x4044da\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4043b0\n    int32_t v65; // 0x4043b0\n    int32_t v66; // 0x4043b0\n    if (v27 != 0) {\n        goto lab_0x404510;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x404690\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x404510;\n            } else {\n                goto lab_0x404501;\n            }\n        } else {\n            // 0x4044f5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x4047ec\n                int64_t v67 = (int64_t)mem; // 0x4047ec\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x404510;\n                } else {\n                    // 0x4047ff\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x404501;\n                }\n            } else {\n                goto lab_0x404501;\n            }\n        }\n    }\n  lab_0x404501:\n    // 0x404501\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x404510;\n}\n"
        },
        {
            "funcName": "function_4049d0",
            "funcStartAddr": "4049d0",
            "funcEndAddr": "404f96",
            "decompiledFuncCode": "int64_t function_4049d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x4049f1\n    if (v3 < 1) {\n        // 0x404bae\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x4049ed\n    int32_t v5 = *(int32_t *)a7; // 0x4049f9\n    uint64_t v6 = a1 & 0xffffffff; // 0x4049fb\n    int64_t v7 = v2; // 0x404a00\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x404a03\n    *v8 = 0;\n    int64_t v9; // 0x4049d0\n    int64_t v10; // 0x4049d0\n    int64_t v11; // 0x4049d0\n    int64_t v12; // 0x4049d0\n    int64_t str; // 0x4049d0\n    int64_t v13; // 0x4049d0\n    int64_t v14; // 0x4049d0\n    int64_t v15; // 0x4049d0\n    int64_t v16; // 0x4049d0\n    int64_t v17; // 0x4049d0\n    int32_t v18; // 0x4049d0\n    char v19; // 0x4049d0\n    if (v5 == 0) {\n        // 0x404be8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x404a1a;\n    } else {\n        // 0x404a13\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x404a60\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x404a63\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x404b28;\n            } else {\n                int64_t v22 = v7 + 1; // 0x404a76\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x404a86\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x404b3c;\n                } else {\n                    goto lab_0x404a98;\n                }\n            }\n        } else {\n            goto lab_0x404a1a;\n        }\n    }\n  lab_0x404a1a:\n    // 0x404a1a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x404a20\n    *v24 = 0;\n    int64_t v25; // 0x4049d0\n    int64_t v26; // 0x4049d0\n    int64_t v27; // 0x4049d0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x404b10\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404b1d;\n        }\n        case 43: {\n            // 0x404e20\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404b1d;\n        }\n        default: {\n            // 0x404a3c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x404d9f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x404eb8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x404b1d;\n                } else {\n                    // 0x404dad\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x404a4a;\n                }\n            } else {\n                goto lab_0x404a4a;\n            }\n        }\n    }\n  lab_0x404b28:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x404b2f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x404a98;\n    } else {\n        goto lab_0x404b3c;\n    }\n  lab_0x404a4a:\n    // 0x404a4a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x404b1d;\n  lab_0x404b1d:\n    // 0x404b1d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x404b28;\n  lab_0x404a98:;\n    uint32_t v30 = *(int32_t *)a7; // 0x404a98\n    int64_t v31 = v30; // 0x404a98\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x404a9a\n    if ((int64_t)*v32 > v31) {\n        // 0x404a9f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x404aa2\n    if (*v33 > v30) {\n        // 0x404aa7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x404aaa\n    int64_t v35 = v31; // 0x404aae\n    int64_t v36 = v15; // 0x404aae\n    int64_t v37; // 0x4049d0\n    int64_t v38; // 0x4049d0\n    int64_t v39; // 0x4049d0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x404c18\n        int64_t v41 = v40; // 0x404c18\n        v2 = v41;\n        int64_t v42; // 0x4049d0\n        if (*v33 == v40) {\n            // 0x404e00\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x404e08\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x404c24\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x404c38\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x404c41\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x404c4a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x404c61\n            int64_t v47 = v45 & 0xffffffff; // 0x404c65\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x404c6e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x404c74\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x404c76;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x404c50\n            int64_t v49 = v48 & 0xffffffff; // 0x404c50\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x404c61\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x404c6e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x404c74\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x404c76;\n                    }\n                }\n                // 0x404c50\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x404e18\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x404c76;\n    } else {\n        goto lab_0x404ab4;\n    }\n  lab_0x404b3c:\n    // 0x404b3c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x404b3f\n    int64_t v51 = v12; // 0x404b3f\n    int64_t v52 = v14; // 0x404b3f\n    if (*(char *)v10 == 0) {\n        goto lab_0x404a98;\n    } else {\n        goto lab_0x404b45;\n    }\n  lab_0x404ab4:;\n    int32_t v53 = v35; // 0x404ab4\n    int64_t v54; // 0x4049d0\n    int64_t v55; // 0x4049d0\n    int64_t v56; // 0x4049d0\n    int64_t v57; // 0x4049d0\n    int64_t v58; // 0x4049d0\n    int64_t v59; // 0x4049d0\n    char * v60; // 0x4049d0\n    int64_t v61; // 0x4049d0\n    int64_t v62; // 0x404ac9\n    int64_t v63; // 0x4049d0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x404c03\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x404c06;\n    } else {\n        // 0x404abc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4049d0\n        int64_t v66 = v65 ? -1 : 1; // 0x404ad0\n        int64_t v67 = (int64_t)\"--\"; // 0x4049d0\n        int64_t v68 = v62; // 0x4049d0\n        int64_t v69 = 3; // 0x404ad0\n        unsigned char v70 = *(char *)v68; // 0x404ad0\n        char v71 = *(char *)v67; // 0x404ad0\n        char v72 = v71; // 0x404ad0\n        bool v73 = false; // 0x404ad0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x404bc0\n            if (*(char *)v62 == 45) {\n                // 0x404c80\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x404c80\n                if (c == 0) {\n                    goto lab_0x404bca;\n                } else {\n                    // 0x404c8d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x404d10;\n                    } else {\n                        if (c == 45) {\n                            // 0x404ef3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x404d65;\n                        } else {\n                            // 0x404c9e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x404d10;\n                            } else {\n                                // 0x404ca3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x404cc4;\n                                } else {\n                                    // 0x404caa\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x404d10;\n                                    } else {\n                                        goto lab_0x404cc4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x404bca;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x404ae0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x404ae3\n            int64_t v77 = v35 + 1; // 0x404ae6\n            int32_t v78 = v77; // 0x404ae9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x404e50\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x404af7\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x404b05\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x404c06;\n        }\n    }\n  lab_0x404b45:;\n    // 0x404b45\n    int64_t v79; // bp-104, 0x4049d0\n    int64_t v80 = &v79; // 0x4049da\n    int64_t v81 = v50 + 1; // 0x404b45\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x404b4c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x404b51\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x404b55\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x404b59\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x404b61\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x404b66\n    int32_t c2 = v84; // 0x404b66\n    char * found_char_pos = strchr(str2, c2); // 0x404b66\n    int64_t v87 = *v82; // 0x404b6b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x404b75\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x404b80\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x404e70\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x404e3d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x404bae\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x404b66\n    char v91 = *(char *)(v90 + 1); // 0x404b9b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x404b55\n        if (v91 != 58) {\n            // 0x404bae\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x404dc4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x404ec8\n                *v8 = 0;\n            } else {\n                // 0x404eac\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x404dee\n            *v83 = 0;\n            // 0x404bae\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x404dce\n        if (v93 != 0) {\n            // 0x404e60\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x404dee\n            *v83 = 0;\n            // 0x404bae\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x404de1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x404dee\n            *v83 = 0;\n            // 0x404bae\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x404f2a\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x404eda\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x404ee1\n        // 0x404dee\n        *v83 = 0;\n        // 0x404bae\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x404d39\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x404d3b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x404f60\n                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x404f11\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x404f18\n            // 0x404bae\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x404d46\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x404d4a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x404d65;\n  lab_0x404c76:\n    // 0x404c76\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x404ab4;\n  lab_0x404d65:;\n    int64_t v99 = function_4043b0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x404d83\n    // 0x404bae\n    return v99 & 0xffffffff;\n  lab_0x404c06:;\n    int32_t v100 = v55; // 0x404c06\n    if (v100 != (int32_t)v59) {\n        // 0x404c0a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x404bae\n    return 0xffffffff;\n  lab_0x404bca:\n    // 0x404bca\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x404bd1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x404bae\n    return v99 & 0xffffffff;\n  lab_0x404d10:\n    // 0x404d10\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x404b45;\n  lab_0x404cc4:\n    // 0x404cc4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4043b0(v6, a2, str, a4, a5, v57, v1, v11, &g12); // 0x404cea\n    if ((int32_t)v101 != -1) {\n        // 0x404bae\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x404cff\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x404d10;\n}\n"
        },
        {
            "funcName": "function_404fa0",
            "funcStartAddr": "404fa0",
            "funcEndAddr": "404ff6",
            "decompiledFuncCode": "int64_t function_404fa0(int64_t a1) {\n    // 0x404fa0\n    *(int32_t *)&g43 = g29;\n    *(int32_t *)&g44 = g28;\n    int64_t v1; // 0x404fa0\n    int64_t result = function_4049d0(v1, v1, v1, v1, v1, v1, &g43, a1 & 0xffffffff); // 0x404fc6\n    g29 = *(int32_t *)&g43;\n    g48 = g46;\n    *(int32_t *)&g27 = g45;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405000",
            "funcStartAddr": "405000",
            "funcEndAddr": "405018",
            "decompiledFuncCode": "int64_t function_405000(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405000\n    return function_404fa0(1);\n}\n"
        },
        {
            "funcName": "function_405020",
            "funcStartAddr": "405020",
            "funcEndAddr": "405033",
            "decompiledFuncCode": "int64_t function_405020(int64_t a1, int64_t a2, int64_t * a3, int64_t * a4, int32_t a5, int64_t a6) {\n    // 0x405020\n    return function_404fa0(0);\n}\n"
        },
        {
            "funcName": "function_405040",
            "funcStartAddr": "405040",
            "funcEndAddr": "405055",
            "decompiledFuncCode": "int64_t function_405040(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405040\n    return function_4049d0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405060",
            "funcStartAddr": "405060",
            "funcEndAddr": "405076",
            "decompiledFuncCode": "int64_t function_405060(void) {\n    // 0x405060\n    return function_404fa0(0);\n}\n"
        },
        {
            "funcName": "function_405080",
            "funcStartAddr": "405080",
            "funcEndAddr": "405098",
            "decompiledFuncCode": "int64_t function_405080(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405080\n    return function_4049d0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4050a0",
            "funcStartAddr": "4050a0",
            "funcEndAddr": "40511a",
            "decompiledFuncCode": "int64_t function_4050a0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4050ab\n    int64_t v2 = (int64_t)&g13; // 0x4050ab\n    int32_t * pwc; // 0x4050a0\n    int64_t v3; // 0x4050a0\n    int64_t n; // 0x4050a0\n    if (a2 == 0) {\n        goto lab_0x4050f2;\n    } else {\n        // 0x4050ad\n        if (a3 == 0) {\n            // 0x4050d8\n            return -2;\n        }\n        // 0x4050b9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x4050f2;\n        } else {\n            goto lab_0x4050c4;\n        }\n    }\n  lab_0x4050f2:\n    // 0x4050f2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4050a0\n    pwc = (int32_t *)&v4;\n    goto lab_0x4050c4;\n  lab_0x4050c4:;\n    char * wstr = (char *)v3; // 0x4050ca\n    int64_t ps; // 0x4050a0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4050ca\n    int64_t result = v5; // 0x4050ca\n    if (v5 < 0xfffffffe) {\n        // 0x4050d8\n        return result;\n    }\n    int64_t result2 = result; // 0x405109\n    if ((char)function_405180(0, v3) == 0) {\n        // 0x40510b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4050d8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405120",
            "funcStartAddr": "405120",
            "funcEndAddr": "40517d",
            "decompiledFuncCode": "int64_t function_405120(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405127\n    int64_t v2; // 0x405120\n    int64_t result = function_405750(a1, v2); // 0x405138\n    if ((v2 & 32) != 0) {\n        // 0x405160\n        if ((int32_t)result == 0) {\n            // 0x405164\n            *__errno_location() = 0;\n        }\n        // 0x40515a\n        return 0xffffffff;\n    }\n    // 0x405141\n    if ((int32_t)result == 0) {\n        // 0x40515a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405148\n    if (v1 == 0) {\n        // 0x40514a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40515a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405180",
            "funcStartAddr": "405180",
            "funcEndAddr": "4051de",
            "decompiledFuncCode": "int64_t function_405180(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405186\n    if (locale == NULL) {\n        // 0x4051b3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405186\n    bool v2; // 0x405180\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g14; // 0x405180\n    int64_t v5 = v1; // 0x405180\n    int64_t v6 = 2; // 0x4051a5\n    unsigned char v7 = *(char *)v5; // 0x4051a5\n    char v8 = *(char *)v4; // 0x4051a5\n    char v9 = v8; // 0x4051a5\n    bool v10 = false; // 0x4051a5\n    while (v7 == v8) {\n        // 0x405198\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4051b1\n    int64_t v13 = v1; // 0x4051b1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4051b3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4051b1\n    unsigned char v15 = *(char *)v13; // 0x4051cd\n    char v16 = *(char *)v12; // 0x4051cd\n    char v17 = v16; // 0x4051cd\n    bool v18 = false; // 0x4051cd\n    while (v15 == v16) {\n        // 0x4051c0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4051e0",
            "funcStartAddr": "4051e0",
            "funcEndAddr": "405742",
            "decompiledFuncCode": "int64_t function_4051e0(void) {\n    char * v1 = nl_langinfo(14); // 0x4051f6\n    char * v2 = g47; // 0x4051fb\n    char * v3; // 0x4051e0\n    int64_t v4; // 0x4051e0\n    int64_t v5; // 0x4051e0\n    int64_t v6; // 0x4051e0\n    int64_t v7; // 0x4051e0\n    int32_t size; // 0x4051e0\n    int32_t size2; // 0x4051e0\n    int32_t len; // 0x4052b2\n    int64_t v8; // 0x4052b2\n    char * env_val; // 0x40529d\n    if (v2 == NULL) {\n        // 0x405298\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405305;\n        } else {\n            // 0x4052aa\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405305;\n            } else {\n                // 0x4052af\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40529d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x405735\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405305;\n                    } else {\n                        // 0x4056a9\n                        size2 = len + 14;\n                        goto lab_0x4052cb;\n                    }\n                } else {\n                    goto lab_0x4052cb;\n                }\n            }\n        }\n    } else {\n        // 0x4051e0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40521a;\n    }\n  lab_0x40554c:;\n    // 0x40554c\n    struct _IO_FILE * stream; // 0x40538b\n    int32_t v10 = __uflow(stream); // 0x40554f\n    int64_t v11; // 0x4051e0\n    int64_t v12 = v11; // 0x405559\n    int64_t v13; // 0x4051e0\n    int64_t v14 = v13; // 0x405559\n    int32_t v15 = v10; // 0x405559\n    int64_t v16; // 0x4051e0\n    int64_t v17 = v16; // 0x405559\n    int64_t v18 = v11; // 0x405559\n    int64_t v19 = v13; // 0x405559\n    int64_t v20 = v16; // 0x405559\n    if (v10 == -1) {\n        // break -> 0x40555f\n        goto lab_0x40555f;\n    }\n    goto lab_0x4053d9;\n  lab_0x4053ce:;\n    // 0x4053ce\n    int64_t v90; // 0x4051e0\n    int64_t * v32; // 0x4053c0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4051e0\n    v12 = v89;\n    int64_t v91; // 0x4051e0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4051e0\n    v17 = v92;\n    goto lab_0x4053d9;\n  lab_0x4053d9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4051e0\n    int32_t v25; // bp-120, 0x4051e0\n    int32_t v26; // bp-184, 0x4051e0\n    int64_t v27; // 0x40538b\n    int64_t v28; // 0x4053a8\n    int64_t v29; // 0x4053ad\n    int64_t * v30; // 0x4053c4\n    switch (c) {\n        case 32: {\n            goto lab_0x4053c0;\n        }\n        case 10: {\n            goto lab_0x4053c0;\n        }\n        case 9: {\n            goto lab_0x4053c0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4055b1\n            int32_t v33; // 0x4051e0\n            char v34; // 0x4051e0\n            int32_t v35; // 0x4055be\n            if (v31 < *v30) {\n                // 0x405590\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4055bb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4055b1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x405590\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4055bb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4055a0\n                v36 = v33;\n            }\n            // 0x40568f\n            if (v36 == -1) {\n                // break -> 0x40555f\n                break;\n            }\n            goto lab_0x4053c0;\n        }\n        default: {\n            // 0x4053ef\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40555f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405418\n            int64_t v39 = v37 + 4; // 0x40541a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405426\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405428\n            while (v41 == 0) {\n                // 0x405418\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x405446\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x405452\n            int64_t v45 = v43 + 4; // 0x405454\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x405460\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x405462\n            while (v47 == 0) {\n                // 0x405452\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40544f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x405478\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x405488\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40548c\n            int64_t v52 = v51 + v48; // 0x405495\n            int64_t * mem; // 0x4051e0\n            int64_t v53; // 0x4051e0\n            int64_t v54; // 0x4051e0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4055cb\n                int64_t v56 = v55 + 3; // 0x4055d7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4054b1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4054c0\n            if (mem == NULL) {\n                // 0x4056ec\n                free((int64_t *)v21);\n                function_405750(v27, v53);\n                v24 = (int64_t)&g13;\n                goto lab_0x405364;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4054d8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x4054e2\n            uint32_t v62 = (int32_t)v59; // 0x4054e5\n            int64_t v63; // 0x4051e0\n            if (v62 >= 8) {\n                // 0x4055f4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40560e\n                int64_t v66 = v61 - v65; // 0x405612\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40561d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40562e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40562e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40562b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4056bf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x4054f7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x4054fb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40550b\n            int64_t v74 = v60 - 1; // 0x40550f\n            uint32_t v75 = (int32_t)v73; // 0x405514\n            int64_t v76; // 0x4051e0\n            if (v75 >= 8) {\n                // 0x405642\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40564c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40565c\n                int64_t v80 = v74 - v79; // 0x405660\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40566b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40567b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x405679\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x4056d6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x4056de\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x405526\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40552a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x405723\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40553e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4053ce;\n            } else {\n                goto lab_0x40554c;\n            }\n        }\n    }\n  lab_0x4053c0:;\n    int64_t v93 = v23; // 0x4051e0\n    int64_t v94 = v22; // 0x4051e0\n    int64_t v95 = v21; // 0x4051e0\n    goto lab_0x4053c0_2;\n  lab_0x405305:;\n    int64_t * mem3 = malloc(size); // 0x405305\n    int64_t v97 = (int64_t)&g13; // 0x405310\n    int64_t v98; // 0x4051e0\n    int64_t path; // 0x4051e0\n    if (mem3 == NULL) {\n        goto lab_0x4052e2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405305\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405326;\n    }\n  lab_0x40521a:;\n    int64_t str = v1 == NULL ? (int64_t)&g13 : (int64_t)v1; // 0x40520d\n    char v100 = *v3; // 0x40521a\n    int64_t v101; // 0x4051e0\n    if (v100 == 0) {\n        // 0x405274\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4051e0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4051e0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405260\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405267;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405230\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40523d\n        char v107 = *(char *)v106; // 0x405242\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405274\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40524b\n    v104 = v103 + 1;\n  lab_0x405267:\n    // 0x405274\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4052e2:;\n    char * v108 = (char *)v97;\n    g47 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40521a;\n  lab_0x405326:;\n    int64_t v109 = v98 + path; // 0x405326\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405352\n    v24 = (int64_t)&g13;\n    if (fd >= 0) {\n        // 0x405381\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4056b2\n            close(fd);\n            v24 = (int64_t)&g13;\n        } else {\n            // 0x4053a5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4053c0_2:;\n                uint64_t v96 = *v32; // 0x4053c0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40554c;\n                } else {\n                    goto lab_0x4053ce;\n                }\n            }\n          lab_0x40555f:\n            // 0x40555f\n            function_405750(v27, v19);\n            v24 = (int64_t)&g13;\n            if (v18 != 0) {\n                // 0x40557e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405364;\n  lab_0x4052cb:;\n    int64_t * mem4 = malloc(size2); // 0x4052cb\n    v97 = (int64_t)&g13;\n    if (mem4 != NULL) {\n        // 0x405371\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405326;\n    } else {\n        goto lab_0x4052e2;\n    }\n  lab_0x405364:\n    // 0x405364\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4052e2;\n}\n"
        },
        {
            "funcName": "function_405750",
            "funcStartAddr": "405750",
            "funcEndAddr": "4057cb",
            "decompiledFuncCode": "int64_t function_405750(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405757\n    if (fileno(stream) < 0) {\n        // 0x4057b7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40576a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40579b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x4057b7\n            return fclose(stream);\n        }\n    }\n    // 0x40576c\n    if ((int32_t)function_4057d0(a1, v1) == 0) {\n        // 0x4057b7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405778\n    int32_t v3 = *v2; // 0x405780\n    int64_t result = fclose(stream); // 0x40578e\n    if (v3 != 0) {\n        // 0x4057c0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405790\n    return result;\n}\n"
        },
        {
            "funcName": "function_4057d0",
            "funcStartAddr": "4057d0",
            "funcEndAddr": "405810",
            "decompiledFuncCode": "int64_t function_4057d0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x4057ea\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x4057ea\n        return fflush(stream);\n    }\n    // 0x4057f8\n    function_405810(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405810",
            "funcStartAddr": "405810",
            "funcEndAddr": "405867",
            "decompiledFuncCode": "int64_t function_405810(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405810\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40581a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40584b\n    int64_t result = -1; // 0x405854\n    if (v1 != -1) {\n        // 0x405856\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405862\n    return result;\n}\n"
        },
        {
            "funcName": "function_405870",
            "funcStartAddr": "405870",
            "funcEndAddr": "4058cd",
            "decompiledFuncCode": "int64_t function_405870(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405870\n    return function_401228();\n}\n"
        },
        {
            "funcName": "function_4058d0",
            "funcStartAddr": "4058d0",
            "funcEndAddr": "4058d1",
            "decompiledFuncCode": "int64_t function_4058d0(void) {\n    // 0x4058d0\n    int64_t result; // 0x4058d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058e0",
            "funcStartAddr": "4058e0",
            "funcEndAddr": "4058f8",
            "decompiledFuncCode": "int64_t function_4058e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4058e0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g19);\n}\n"
        },
        {
            "funcName": "function_4058f8",
            "funcStartAddr": "4058f8",
            "funcEndAddr": "405918",
            "decompiledFuncCode": "int64_t function_4058f8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g15; // 0x405902\n    while (*(int64_t *)v1 != -1) {\n        // 0x405903\n        v1 -= 8;\n    }\n    // 0x405914\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_yes.elf"
}