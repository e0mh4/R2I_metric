{
    "funcInfo": [
        {
            "funcName": "function_401bd0",
            "funcStartAddr": "401bd0",
            "funcEndAddr": "401bd5",
            "decompiledFuncCode": "int64_t function_401bd0(void) {\n    // 0x401bd0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bd5",
            "funcStartAddr": "401bd5",
            "funcEndAddr": "401bda",
            "decompiledFuncCode": "int64_t function_401bd5(void) {\n    // 0x401bd5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bda",
            "funcStartAddr": "401bda",
            "funcEndAddr": "401bdf",
            "decompiledFuncCode": "int64_t function_401bda(void) {\n    // 0x401bda\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bdf",
            "funcStartAddr": "401bdf",
            "funcEndAddr": "401be4",
            "decompiledFuncCode": "int64_t function_401bdf(void) {\n    // 0x401bdf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401be4",
            "funcStartAddr": "401be4",
            "funcEndAddr": "401be9",
            "decompiledFuncCode": "int64_t function_401be4(void) {\n    // 0x401be4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401be9",
            "funcStartAddr": "401be9",
            "funcEndAddr": "401bee",
            "decompiledFuncCode": "int64_t function_401be9(void) {\n    // 0x401be9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bee",
            "funcStartAddr": "401bee",
            "funcEndAddr": "401bf3",
            "decompiledFuncCode": "int64_t function_401bee(void) {\n    // 0x401bee\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c00",
            "funcStartAddr": "401c00",
            "funcEndAddr": "4022a0",
            "decompiledFuncCode": "int64_t function_401c00(int64_t a1, int64_t a2) {\n    // 0x401c00\n    function_402a20(a2);\n    setlocale(LC_ALL, (char *)&g11);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v1; // 0x401c00\n    function_4074c0(0x402380, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    char v2 = 0; // 0x401c67\n    int64_t v3 = 0; // 0x401c67\n    int64_t v4 = 0; // 0x401c67\n    int64_t v5 = 0; // 0x401c67\n    int64_t v6 = 0; // 0x401c67\n    int64_t v7 = 0; // 0x401c67\n    int64_t v8 = 0; // 0x401c67\n    int64_t v9; // 0x401c00\n    int64_t v10; // 0x401c00\n    int64_t v11; // 0x401c00\n    int64_t v12; // 0x401c00\n    int64_t v13; // 0x401c00\n    int64_t v14; // 0x401c00\n    char v15; // 0x401c00\n    while (true) {\n      lab_0x401c70:\n        // 0x401c70\n        v15 = v2;\n        int64_t v16 = v3; // 0x401ceb\n        int64_t v17 = v4; // 0x401c00\n        int64_t v18 = v5; // 0x401c00\n        int64_t v19 = v6; // 0x401c00\n        int64_t v20 = v7; // 0x401c00\n        int64_t v21 = v8; // 0x401c00\n        while (true) {\n            // 0x401c70\n            v14 = v16;\n            int64_t v22 = v17; // 0x401d70\n            int64_t v23 = v18; // 0x401c00\n            int64_t v24 = v19; // 0x401c00\n            int64_t v25 = v20; // 0x401c00\n            int64_t v26 = v21; // 0x401c00\n            uint32_t v27; // 0x401c00\n            while (true) {\n                // 0x401c70\n                v12 = v26;\n                v13 = v22;\n                int64_t v28 = v23; // 0x401c00\n                int64_t v29 = v24; // 0x401c00\n                int64_t v30 = v25; // 0x401c00\n                while (true) {\n                    // 0x401c70\n                    v9 = v28;\n                    while (true) {\n                        // 0x401c70\n                        v10 = v29;\n                        int64_t v31 = v30; // 0x401c00\n                        while (true) {\n                          lab_0x401c70_2:\n                            // 0x401c70\n                            v11 = v31;\n                            v27 = (int32_t)function_405f90(a1 & 0xffffffff, a2, \"dp:qtuV\", &g2, 0, v1);\n                            switch (v27) {\n                                case -1: {\n                                    goto lab_0x401d87;\n                                }\n                                case 112: {\n                                    goto lab_0x401d70;\n                                }\n                                default: {\n                                    if (v27 <= 112) {\n                                        // break (via goto) -> 0x401cb8\n                                        goto lab_0x401cb8;\n                                    }\n                                    // 0x401c9b\n                                    v2 = 1;\n                                    v3 = v14;\n                                    v4 = v13;\n                                    v5 = v9;\n                                    v6 = v10;\n                                    v7 = v11;\n                                    v8 = 1;\n                                    if (v27 == 116) {\n                                        goto lab_0x401c70;\n                                    } else {\n                                        if (v27 <= 116) {\n                                            // break -> 0x401d00\n                                            break;\n                                        }\n                                        // 0x401ca6\n                                        v31 = 1;\n                                        if (v27 != 117) {\n                                            // break (via goto) -> 0x401ce0\n                                            goto lab_0x401ce0;\n                                        }\n                                        goto lab_0x401c70_2;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x401d00\n                        if (v27 != 113) {\n                            // 0x4021ca\n                            function_4023c0(1);\n                            // UNREACHABLE\n                        }\n                    }\n                  lab_0x401cb8:\n                    if (v27 == -130) {\n                        // 0x4021d4\n                        function_4023c0(0);\n                        // UNREACHABLE\n                    }\n                    if (v27 <= 0xffffff7e) {\n                        if (v27 != -131) {\n                            goto lab_0x4021ca;\n                        } else {\n                            goto lab_0x401d23;\n                        }\n                    }\n                    if (v27 == 86) {\n                      lab_0x401d23:\n                        // 0x401d23\n                        function_404d50((int64_t)g29, \"mktemp\", \"GNU coreutils\", (int64_t)g18, \"Jim Meyering\", \"Eric Blake\");\n                        exit(0);\n                        // UNREACHABLE\n                    }\n                    // 0x401cca\n                    v28 = 1;\n                    v29 = v10;\n                    v30 = v11;\n                    if (v27 != 100) {\n                        // 0x4021ca\n                        function_4023c0(1);\n                        // UNREACHABLE\n                    }\n                }\n              lab_0x401d70:\n                // 0x401d70\n                v22 = g48;\n                v23 = v9;\n                v24 = v10;\n                v25 = v11;\n                v26 = 1;\n            }\n          lab_0x401ce0:\n            if (v27 != 128) {\n              lab_0x4021ca:\n                // 0x4021ca\n                function_4023c0(1);\n                // UNREACHABLE\n            }\n            // 0x401ceb\n            v16 = g48;\n            v17 = v13;\n            v18 = v9;\n            v19 = v10;\n            v20 = v11;\n            v21 = v12;\n        }\n    }\n  lab_0x401d87:;\n    int32_t v32 = *(int32_t *)0x60b2bc; // 0x401d87\n    uint32_t v33 = (int32_t)a1 - v32; // 0x401d8e\n    if (v33 >= 2) {\n        // 0x4021ab\n        error(0, (int32_t)\"too many templates\" ^ (int32_t)\"too many templates\", dcgettext(NULL, \"too many templates\", 5));\n        // 0x4021ca\n        function_4023c0(1);\n        // UNREACHABLE\n    }\n    int64_t v34; // 0x401c00\n    int64_t v35; // 0x401c00\n    char * format; // 0x402282\n    if (v33 == 0) {\n        if (v14 == 0) {\n            // 0x4020a9\n            v35 = (int64_t)\"tmp.XXXXXXXXXX\";\n            v34 = 1;\n            goto lab_0x4020b4;\n        } else {\n            // 0x401f60\n            goto lab_0x401ddd;\n        }\n    } else {\n        // 0x401da1\n        v35 = *(int64_t *)(8 * (int64_t)v32 + a2);\n        v34 = v12;\n        if (v14 == 0) {\n            goto lab_0x4020b4;\n        } else {\n            // 0x401db1\n            int64_t v36; // 0x401c00\n            while (v36 != 0) {\n                // 0x401db1\n                int64_t v37; // 0x401c00\n                int64_t v38 = v37;\n                char v39 = *(char *)v38; // 0x401dba\n                int64_t v40; // 0x401c00\n                int64_t v41 = v40 - 1; // 0x401dba\n                v36 = v41;\n                int64_t v42; // 0x401c00\n                v37 = v38 + v42;\n                int64_t v43 = v41; // 0x401dba\n                if (v39 == 0) {\n                    // break -> \n                    break;\n                }\n                v40 = v36;\n                v43 = 0;\n            }\n            int64_t v44 = -2; // 0x401dc5\n            int64_t v45; // 0x401da7\n            if (v44 == 0) {\n                // 0x40226b\n                function_404640(v45);\n                format = dcgettext(NULL, \"with --suffix, template %s must end in X\", 5);\n                error(1, (int32_t)\"with --suffix, template %s must end in X\" ^ (int32_t)\"with --suffix, template %s must end in X\", format);\n                return &g50;\n            }\n            // 0x401dd2\n            if (*(char *)(v45 - 1 + v44) != 88) {\n                // 0x40226b\n                function_404640(v45);\n                format = dcgettext(NULL, \"with --suffix, template %s must end in X\", 5);\n                error(1, (int32_t)\"with --suffix, template %s must end in X\" ^ (int32_t)\"with --suffix, template %s must end in X\", format);\n                return &g50;\n            }\n            goto lab_0x401ddd;\n        }\n    }\n  lab_0x4020b4:;\n    int64_t str = function_4050c0(v35); // 0x4020b7\n    char * found_char_pos = strrchr((char *)str, 88); // 0x4020c7\n    int64_t v46 = (int64_t)found_char_pos; // 0x4020c7\n    int64_t v47; // 0x401c00\n    int64_t v48; // 0x401c00\n    bool v49; // 0x401c00\n    if (found_char_pos == NULL) {\n        char v50 = v46;\n        int64_t v51 = v49 ? -1 : 1;\n        int64_t v52 = str; // 0x401c00\n        int64_t v53 = -1; // 0x40218e\n        int64_t v54 = 0; // 0x40218e\n        while (v53 != 0) {\n            int64_t v55 = v52;\n            v53--;\n            v52 = v55 + v51;\n            v54 = v53;\n            if (*(char *)v55 == v50) {\n                // break -> \n                break;\n            }\n            v54 = 0;\n        }\n        v47 = v51;\n        v48 = str - 1 + -1 - v54;\n    } else {\n        // 0x4020b4\n        v47 = v49 ? -1 : 1;\n        v48 = v46 + 1;\n    }\n    int64_t v56 = v47;\n    int64_t v57 = v48; // 0x4020e2\n    int64_t v58 = -1;\n    int64_t v59 = 0; // 0x4020e2\n    while (v58 != 0) {\n        int64_t v60 = v57;\n        int64_t v61 = v58 - 1; // 0x4020e2\n        int64_t v62 = v61; // 0x4020e2\n        v57 = v60 + v56;\n        v59 = v61;\n        if (*(char *)v60 == 0) {\n            // break -> \n            break;\n        }\n        v58 = v62;\n        v59 = 0;\n    }\n    int32_t v63 = -2 - (int32_t)v59; // 0x4020f3\n    int64_t v64 = str; // 0x4020f3\n    int64_t v65 = v48; // 0x4020f3\n    int64_t v66 = 88; // 0x4020f3\n    int64_t v67 = v34; // 0x4020f3\n    goto lab_0x401e38;\n  lab_0x401ddd:;\n    int64_t v88 = 14;\n    int64_t v89 = -1; // 0x401ded\n    int64_t v90 = v14; // 0x401ded\n    int64_t v91 = 0; // 0x401ded\n    while (v89 != 0) {\n        int64_t v92 = v90;\n        int64_t v93 = v89 - 1; // 0x401ded\n        v89 = v93;\n        v90 = v92 + (v49 ? -1 : 1);\n        v91 = v93;\n        if (*(char *)v92 == 0) {\n            // break -> \n            break;\n        }\n        v91 = 0;\n    }\n    int64_t v94 = -2 - v91; // 0x401df5\n    int64_t v95 = function_404e90(v88 + 1 + v94); // 0x401e08\n    memcpy((int64_t *)v95, (int64_t *)(int64_t)\"tmp.XXXXXXXXXX\", (int32_t)v88);\n    int64_t v96 = v95 + v88; // 0x401e25\n    memcpy((int64_t *)v96, (int64_t *)v14, -1 - (int32_t)v91);\n    v63 = v94;\n    v64 = v95;\n    v65 = v96;\n    v66 = v14;\n    v67 = 1;\n    goto lab_0x401e38;\n  lab_0x401e38:;\n    int64_t v68 = v66;\n    int64_t v69 = v65;\n    int64_t v70 = v64;\n    uint32_t v71 = v63;\n    int64_t v72; // 0x401c00\n    if (v71 == 0) {\n        goto lab_0x401e51;\n    } else {\n        int64_t v73 = function_402890(v69, v68); // 0x401e43\n        v72 = v69;\n        if (v73 != v69) {\n            goto lab_0x40223b;\n        } else {\n            goto lab_0x401e51;\n        }\n    }\n  lab_0x401e51:;\n    int64_t v74 = v70; // 0x401e57\n    int64_t v75 = v70; // 0x401e57\n    int64_t v76; // 0x401c00\n    int64_t v77; // 0x401e85\n    if (v69 == v70) {\n        goto lab_0x40220b;\n    } else {\n        // 0x401e5d\n        v74 = v70;\n        v75 = v69;\n        if (*(char *)(v69 - 1) != 88) {\n            goto lab_0x40220b;\n        } else {\n            int64_t v78 = v69 - 2;\n            while (v70 - 1 != v78) {\n                int64_t v79 = v78 - 1; // 0x401e80\n                if (*(char *)v78 != 88) {\n                    // break -> 0x401e8d\n                    break;\n                }\n                v78 = v79;\n            }\n            // 0x401e8d\n            v77 = v69 + -1 - v78;\n            v74 = v70;\n            v75 = v77;\n            if (v77 < 3) {\n                goto lab_0x40220b;\n            } else {\n                // 0x401e97\n                v76 = v70;\n                if ((char)v67 == 0) {\n                    goto lab_0x401ee5;\n                } else {\n                    if (v15 != 0) {\n                        // 0x402036\n                        getenv(\"TMPDIR\");\n                        if (function_402890(v70, v68) == v70) {\n                            goto lab_0x401eca;\n                        } else {\n                            // 0x402079\n                            function_404640(v70);\n                            error(1, (int32_t)\"invalid template, %s, contains directory separator\" ^ (int32_t)\"invalid template, %s, contains directory separator\", dcgettext(NULL, \"invalid template, %s, contains directory separator\", 5));\n                            // 0x4020a9\n                            v35 = (int64_t)\"tmp.XXXXXXXXXX\";\n                            v34 = 1;\n                            goto lab_0x4020b4;\n                        }\n                    } else {\n                        if (v13 == 0) {\n                            // 0x402010\n                            getenv(\"TMPDIR\");\n                            goto lab_0x401ec1;\n                        } else {\n                            // 0x401eb5\n                            if (*(char *)v13 == 0) {\n                                // 0x402010\n                                getenv(\"TMPDIR\");\n                                goto lab_0x401ec1;\n                            } else {\n                                goto lab_0x401ec1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40220b:\n    // 0x40220b\n    function_404640(v74);\n    error(1, (int32_t)\"too few X's in template %s\" ^ (int32_t)\"too few X's in template %s\", dcgettext(NULL, \"too few X's in template %s\", 5));\n    v72 = v75;\n    goto lab_0x40223b;\n  lab_0x40223b:\n    // 0x40223b\n    function_404640(v72);\n    error(1, (int32_t)\"invalid suffix %s, contains directory separator\" ^ (int32_t)\"invalid suffix %s, contains directory separator\", dcgettext(NULL, \"invalid suffix %s, contains directory separator\", 5));\n    int64_t v80 = (int32_t)\"invalid suffix %s, contains directory separator\" ^ (int32_t)\"invalid suffix %s, contains directory separator\"; // 0x402266\n    // 0x40226b\n    function_404640(v80);\n    format = dcgettext(NULL, \"with --suffix, template %s must end in X\", 5);\n    error(1, (int32_t)\"with --suffix, template %s must end in X\" ^ (int32_t)\"with --suffix, template %s must end in X\", format);\n    return &g50;\n  lab_0x401ee5:;\n    int64_t v81 = v76;\n    int64_t str2 = function_4050c0(v81); // 0x401ee8\n    int64_t v82 = v71;\n    if (v9 == 0) {\n        if (v11 != 0) {\n            // 0x401fc0\n            if ((int32_t)function_404870(str2, v82, 0, 2) >= 0) {\n                // 0x401fda\n                puts((char *)str2);\n                // 0x401faf\n                return 0;\n            }\n            goto lab_0x401fa1;\n        } else {\n            int32_t fd = function_404870(str2, v82, 0, 0); // 0x401f99\n            if (fd >= 0) {\n                // 0x4020f8\n                if (close(fd) != 0) {\n                    goto lab_0x401fa1;\n                } else {\n                    goto lab_0x402107;\n                }\n            } else {\n                goto lab_0x401fa1;\n            }\n        }\n    } else {\n        if (v11 != 0) {\n            int64_t v83 = function_404870(str2, v82, 0, 2); // 0x401ff7\n            if ((int32_t)v83 == 0) {\n                // 0x402006\n                puts((char *)str2);\n                // 0x401faf\n                return v83 & 0xffffffff;\n            }\n            goto lab_0x401f20;\n        } else {\n            // 0x401f02\n            if ((int32_t)function_404870(str2, v82, 0, 1) == 0) {\n                goto lab_0x402107;\n            } else {\n                goto lab_0x401f20;\n            }\n        }\n    }\n  lab_0x401eca:;\n    int64_t v84 = function_402920(); // 0x401ed2\n    free((int64_t *)v70);\n    v76 = v84;\n    goto lab_0x401ee5;\n  lab_0x401fa1:\n    // 0x401fa1\n    if (v10 != 0) {\n        // 0x401faf\n        return 1;\n    }\n    // 0x40216d\n    function_404640(v81);\n    int64_t v85 = (int64_t)\"failed to create file via template %s\"; // 0x402182\n    goto lab_0x401f3e;\n  lab_0x401f20:\n    // 0x401f20\n    if (v10 != 0) {\n        // 0x401faf\n        return 1;\n    }\n    // 0x401f29\n    function_404640(v81);\n    v85 = (int64_t)\"failed to create directory via template %s\";\n    goto lab_0x401f3e;\n  lab_0x402107:;\n    char * str3 = (char *)str2; // 0x40210a\n    puts(str3);\n    g34 = 1;\n    if ((int32_t)function_402770((int64_t)g29) == 0) {\n        // 0x401faf\n        int64_t v86; // 0x401c00\n        int64_t result = v86;\n        return result;\n    }\n    int32_t err_num = *__errno_location(); // 0x402134\n    remove(str3);\n    if (v10 == 0) {\n        // 0x402144\n        error(0, err_num, dcgettext(NULL, \"write error\", 5));\n    }\n    // 0x401faf\n    return 1;\n  lab_0x401ec1:\n    // 0x401ec1\n    if (*(char *)v70 == 47) {\n        int64_t v87 = function_404640(v70); // 0x4021de\n        error(1, (int32_t)\"invalid template, %s; with --tmpdir, it may not be absolute\" ^ (int32_t)\"invalid template, %s; with --tmpdir, it may not be absolute\", dcgettext(NULL, \"invalid template, %s; with --tmpdir, it may not be absolute\", 5));\n        v74 = v87;\n        v75 = v77;\n        goto lab_0x40220b;\n    } else {\n        goto lab_0x401eca;\n    }\n  lab_0x401f3e:\n    // 0x401f3e\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v85, 5));\n    // 0x401faf\n    return 1;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4022a0",
            "funcEndAddr": "4022cb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4022a0\n    int64_t v1; // 0x4022a0\n    __libc_start_main(0x401c00, (int32_t)a4, (char **)&v1, (void (*)())0x407450, (void (*)())0x4074b0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4022cb",
            "funcStartAddr": "4022cb",
            "funcEndAddr": "4022ea",
            "decompiledFuncCode": "int64_t function_4022cb(void) {\n    // 0x4022cb\n    return &g28;\n}\n"
        },
        {
            "funcName": "function_4022ea",
            "funcStartAddr": "4022ea",
            "funcEndAddr": "402321",
            "decompiledFuncCode": "int64_t function_4022ea(void) {\n    // 0x4022ea\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402321",
            "funcStartAddr": "402321",
            "funcEndAddr": "402378",
            "decompiledFuncCode": "int64_t function_402321(void) {\n    // 0x402321\n    if (g32 != 0) {\n        // 0x402377\n        int64_t result; // 0x402321\n        return result;\n    }\n    int64_t v1 = g33; // 0x402354\n    int64_t result2; // 0x402366\n    if (g33 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x402366\n        result2 = function_4022cb();\n        g32 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x402356\n        v1++;\n    }\n    // 0x40234a\n    g33 = v1;\n    // 0x402366\n    result2 = function_4022cb();\n    g32 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402378",
            "funcStartAddr": "402378",
            "funcEndAddr": "40237d",
            "decompiledFuncCode": "int64_t function_402378(void) {\n    // 0x402378\n    return function_4022ea();\n}\n"
        },
        {
            "funcName": "function_402380",
            "funcStartAddr": "402380",
            "funcEndAddr": "4023b3",
            "decompiledFuncCode": "int64_t function_402380(void) {\n    // 0x402380\n    if (g34 == 0) {\n        // 0x402389\n        return function_4027f0();\n    }\n    int64_t result = function_402770((int64_t)g31); // 0x40239b\n    if ((int32_t)result == 0) {\n        // 0x4023a4\n        return result;\n    }\n    // 0x4023a9\n    _exit(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023c0",
            "funcStartAddr": "4023c0",
            "funcEndAddr": "40276d",
            "decompiledFuncCode": "int64_t function_4023c0(int64_t a1) {\n    int32_t status = a1; // 0x4023d6\n    if (status != 0) {\n        // 0x4023da\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4023ff\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402406\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [TEMPLATE]\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Create a temporary file or directory, safely, and print its name.\\nTEMPLATE must contain at least 3 consecutive 'X's in last component.\\nIf TEMPLATE is not specified, use tmp.XXXXXXXXXX, and --tmpdir is implied.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"Files are created u+rw, and directories u+rwx, minus umask restrictions.\\n\", 5), g29);\n    fputc_unlocked(10, g29);\n    fputs_unlocked(dcgettext(NULL, \"  -d, --directory     create a directory, not a file\\n  -u, --dry-run       do not create anything; merely print a name (unsafe)\\n  -q, --quiet         suppress diagnostics about file/dir-creation failure\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --suffix=SUFF   append SUFF to TEMPLATE; SUFF must not contain a slash.\\n                        This option is implied if TEMPLATE does not end in X\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -p DIR, --tmpdir[=DIR]  interpret TEMPLATE relative to DIR; if DIR is not\\n                        specified, use $TMPDIR if set, else /tmp.  With\\n                        this option, TEMPLATE must not be an absolute name;\\n                        unlike with -t, TEMPLATE may contain slashes, but\\n                        mktemp creates only the final component\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -t                  interpret TEMPLATE as a single file name component,\\n                        relative to a directory: $TMPDIR, if set; else the\\n                        directory specified via -p; else /tmp [deprecated]\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g29);\n    int64_t v1 = &g1; // bp-136, 0x40254d\n    bool v2; // 0x4023c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4025d0\n    int64_t v6 = *(int64_t *)v5; // 0x4025d4\n    int64_t v7 = 7; // 0x4025da\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"mktemp\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4025e6\n        char v11 = *(char *)v9; // 0x4025e6\n        char v12 = v11; // 0x4025e6\n        bool v13 = false; // 0x4025e6\n        while (v10 == v11) {\n            // 0x4025dc\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4025e6\n            int64_t v15 = v8 + v3; // 0x4025e6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4025f2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 7;\n    }\n    // 0x4025f2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402704;\n        } else {\n            // 0x4026ee\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402743\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402654;\n            } else {\n                goto lab_0x402704;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402654;\n        } else {\n            // 0x40263a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402743\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402654;\n            } else {\n                goto lab_0x402654;\n            }\n        }\n    }\n  lab_0x402704:\n    // 0x402704\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402694\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4023ff\n    exit(status);\n    // UNREACHABLE\n  lab_0x402654:\n    // 0x402654\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402694\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4023ff\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402770",
            "funcStartAddr": "402770",
            "funcEndAddr": "4027cd",
            "decompiledFuncCode": "int64_t function_402770(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x402777\n    int64_t v2; // 0x402770\n    int64_t result = function_405120(a1, v2); // 0x402788\n    if ((v2 & 32) != 0) {\n        // 0x4027b0\n        if ((int32_t)result == 0) {\n            // 0x4027b4\n            *__errno_location() = 0;\n        }\n        // 0x4027aa\n        return 0xffffffff;\n    }\n    // 0x402791\n    if ((int32_t)result == 0) {\n        // 0x4027aa\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x402798\n    if (v1 == 0) {\n        // 0x40279a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4027aa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4027d0",
            "funcStartAddr": "4027d0",
            "funcEndAddr": "4027d8",
            "decompiledFuncCode": "int64_t function_4027d0(int64_t a1) {\n    // 0x4027d0\n    g36 = a1;\n    int64_t result; // 0x4027d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4027e0",
            "funcStartAddr": "4027e0",
            "funcEndAddr": "4027e8",
            "decompiledFuncCode": "int64_t function_4027e0(int64_t a1) {\n    // 0x4027e0\n    g35 = a1;\n    int64_t result; // 0x4027e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4027f0",
            "funcStartAddr": "4027f0",
            "funcEndAddr": "40288e",
            "decompiledFuncCode": "int64_t function_4027f0(void) {\n    // 0x4027f0\n    int32_t * err_num; // 0x402806\n    if ((int32_t)function_402770((int64_t)g29) == 0) {\n        goto lab_0x40281c;\n    } else {\n        // 0x402806\n        err_num = __errno_location();\n        if (g35 == 0) {\n            goto lab_0x402833;\n        } else {\n            // 0x402817\n            if (*err_num != 32) {\n                goto lab_0x402833;\n            } else {\n                goto lab_0x40281c;\n            }\n        }\n    }\n  lab_0x40281c:;\n    int64_t result = function_402770((int64_t)g31); // 0x402823\n    if ((int32_t)result == 0) {\n        // 0x40282c\n        return result;\n    }\n    // 0x40286e\n    _exit(g19);\n    // UNREACHABLE\n  lab_0x402833:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40283f\n    if (g36 == 0) {\n        // 0x402879\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402853\n        error(0, *err_num, \"%s: %s\", (char *)function_404490((int64_t)g36), v1);\n    }\n    // 0x40286e\n    _exit(g19);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402890",
            "funcStartAddr": "402890",
            "funcEndAddr": "4028eb",
            "decompiledFuncCode": "int64_t function_402890(int64_t a1, int64_t a2) {\n    // 0x402890\n    int64_t v1; // 0x402890\n    char v2 = v1;\n    int64_t v3 = a1; // 0x402899\n    int64_t v4 = a1; // 0x402899\n    char v5 = v2; // 0x402899\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x4028a4\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x4028a0\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x4028ae\n    if (v5 == 0) {\n      lab_0x4028ea:\n        // 0x4028ea\n        return result;\n    }\n    int64_t v7 = v4; // 0x4028d8\n    int64_t v8 = 0; // 0x4028d8\n    int64_t v9; // 0x402890\n    int64_t v10; // 0x4028da\n    char v11; // 0x4028de\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x4028d5\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x4028da\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x4028d5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x4028ca\n    char v14 = *(char *)v13; // 0x4028ce\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x4028d5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x4028da\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x4028d5\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x4028c0\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x4028ea\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4028f0",
            "funcStartAddr": "4028f0",
            "funcEndAddr": "40291b",
            "decompiledFuncCode": "int64_t function_4028f0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x4028f4\n    int64_t result = len; // 0x4028f4\n    if (len < 2) {\n        // 0x40290a\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x402908\n    while (*(char *)(v1 + str) == 47) {\n        // 0x402910\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x40290a\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x40290a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402920",
            "funcStartAddr": "402920",
            "funcEndAddr": "402938",
            "decompiledFuncCode": "int64_t function_402920(void) {\n    // 0x402920\n    int64_t v1; // 0x402920\n    int64_t result = function_402940(v1, v1, v1); // 0x402924\n    if (result != 0) {\n        // 0x40292e\n        return result;\n    }\n    // 0x402933\n    function_4050e0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402940",
            "funcStartAddr": "402940",
            "funcEndAddr": "402a19",
            "decompiledFuncCode": "int64_t function_402940(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = function_402890(a1, a2); // 0x402958\n    int64_t v2 = function_4028f0(v1); // 0x402963\n    int64_t v3 = 0; // 0x402977\n    if (v2 != 0) {\n        // 0x402979\n        v3 = *(char *)(v1 - 1 + v2) != 47;\n    }\n    int64_t str = a2; // 0x402990\n    int64_t v4 = a2; // 0x402990\n    int64_t v5; // 0x402940\n    if ((char)v5 == 47) {\n        v4++;\n        str = v4;\n        while (*(char *)v4 == 47) {\n            // 0x402a08\n            v4++;\n            str = v4;\n        }\n    }\n    int64_t v6 = v1 - a1 + v2; // 0x402971\n    int32_t len = strlen((char *)str); // 0x402995\n    int64_t * mem = malloc(len + (int32_t)(v6 + 1 + v3)); // 0x4029a5\n    if (mem == NULL) {\n        // 0x4029f1\n        return (int64_t)mem;\n    }\n    int64_t * v7 = mempcpy(mem, (int64_t *)a1, (int32_t)v6); // 0x4029bb\n    *(char *)v7 = 47;\n    int64_t v8 = v3 + (int64_t)v7; // 0x4029c7\n    if (a3 != 0) {\n        // 0x4029d0\n        *(int64_t *)a3 = v8 - (int64_t)((char)v5 == 47);\n    }\n    // 0x4029e3\n    *(char *)mempcpy((int64_t *)v8, (int64_t *)str, len) = 0;\n    // 0x4029f1\n    return (int64_t)mem;\n}\n"
        },
        {
            "funcName": "function_402a20",
            "funcStartAddr": "402a20",
            "funcEndAddr": "402ab9",
            "decompiledFuncCode": "int64_t function_402a20(int64_t str) {\n    // 0x402a20\n    if (str == 0) {\n        // 0x402a99\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g31);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x402a2e\n    int64_t result = (int64_t)found_char_pos; // 0x402a2e\n    if (found_char_pos == NULL) {\n        // 0x402a89\n        g37 = str;\n        g30 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402a38\n    if (v1 - str < 7) {\n        // 0x402a89\n        g37 = str;\n        g30 = str;\n        return result;\n    }\n    // 0x402a48\n    bool v2; // 0x402a20\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402a20\n    int64_t v5 = result - 6; // 0x402a20\n    int64_t v6 = 7; // 0x402a56\n    unsigned char v7 = *(char *)v5; // 0x402a56\n    char v8 = *(char *)v4; // 0x402a56\n    char v9 = v8; // 0x402a56\n    bool v10 = false; // 0x402a56\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402a60\n    int64_t v13 = v1; // 0x402a60\n    int64_t v14 = 3; // 0x402a60\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402a89\n        g37 = str;\n        g30 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x402a72\n    char v16 = *(char *)v12; // 0x402a72\n    char v17 = v16; // 0x402a72\n    bool v18 = false; // 0x402a72\n    while (v15 == v16) {\n        // 0x402a62\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x402a7c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x402a7e\n        v20 = result + 4;\n        g28 = v20;\n    }\n    // 0x402a89\n    g37 = v20;\n    g30 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ac0",
            "funcStartAddr": "402ac0",
            "funcEndAddr": "402bb2",
            "decompiledFuncCode": "int64_t function_402ac0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402ad4\n    int64_t result = (int64_t)v1; // 0x402ad4\n    if (result != a1) {\n        // 0x402ae1\n        return result;\n    }\n    int64_t v2 = function_4060f0(); // 0x402af0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402ba6\n    if (v3 == 85) {\n        // 0x402b00\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402b98\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x402b2e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x402b3b\n        // 0x402ae1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402b98\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g9 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x402b7d\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x402b8a\n    // 0x402ae1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402bc0",
            "funcStartAddr": "402bc0",
            "funcEndAddr": "402c17",
            "decompiledFuncCode": "int64_t function_402bc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402bc0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402c08\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402c17",
            "funcStartAddr": "402c17",
            "funcEndAddr": "403de1",
            "decompiledFuncCode": "int64_t function_402c17(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402c61\n    int64_t v3 = 0; // 0x402c61\n    int64_t v4; // 0x402c17\n    int64_t v5; // 0x402c17\n    int64_t v6; // 0x402c17\n    int64_t v7; // 0x402c17\n    int64_t v8; // 0x402c17\n    int64_t v9; // 0x402c17\n    int64_t v10; // 0x402c17\n    int64_t v11; // 0x402c17\n    int64_t v12; // 0x402c17\n    int64_t v13; // 0x402c17\n    int64_t v14; // 0x402c17\n    int64_t v15; // 0x402c17\n    int64_t v16; // 0x402c17\n    int64_t v17; // 0x402c17\n    int64_t v18; // 0x402c17\n    int64_t result; // 0x402c17\n    int64_t v19; // 0x402c17\n    int32_t wc; // bp+132, 0x402c17\n    int64_t ps; // bp+136, 0x402c17\n    char v20; // 0x4031d0\n    int64_t v21; // 0x4031d0\n    int64_t v22; // 0x403578\n    int64_t v23; // 0x402c17\n    int64_t v24; // 0x403597\n    int32_t v25; // 0x402c17\n    while (true) {\n      lab_0x402c68_2:\n        // 0x402c68\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402c17\n        int64_t v27; // 0x402c9c\n        while (true) {\n          lab_0x402c68:\n            // 0x402c68\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x402c73\n            if (v15 == -1) {\n                // 0x402c75\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402c83\n            if (v28) {\n                // break (via goto) -> 0x4033e8\n                goto lab_0x4033e8;\n            }\n            // 0x402c8c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g49 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40327b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402dc1;\n                    }\n                    // 0x40369d\n                    v26 = v5 + 1;\n                    goto lab_0x402c68;\n                }\n                case 7: {\n                    goto lab_0x402dc1;\n                }\n                case 8: {\n                    goto lab_0x402dc1;\n                }\n                case 9: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402dc1;\n                }\n                case 12: {\n                    goto lab_0x402dc1;\n                }\n                case 13: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x402d8d;\n                }\n                case 36: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402dc1;\n                }\n                case 38: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402dc1;\n                }\n                case 44: {\n                    goto lab_0x402dc1;\n                }\n                case 45: {\n                    goto lab_0x402dc1;\n                }\n                case 46: {\n                    goto lab_0x402dc1;\n                }\n                case 47: {\n                    goto lab_0x402dc1;\n                }\n                case 48: {\n                    goto lab_0x402dc1;\n                }\n                case 49: {\n                    goto lab_0x402dc1;\n                }\n                case 50: {\n                    goto lab_0x402dc1;\n                }\n                case 51: {\n                    goto lab_0x402dc1;\n                }\n                case 52: {\n                    goto lab_0x402dc1;\n                }\n                case 53: {\n                    goto lab_0x402dc1;\n                }\n                case 54: {\n                    goto lab_0x402dc1;\n                }\n                case 55: {\n                    goto lab_0x402dc1;\n                }\n                case 56: {\n                    goto lab_0x402dc1;\n                }\n                case 57: {\n                    goto lab_0x402dc1;\n                }\n                case 58: {\n                    goto lab_0x402dc1;\n                }\n                case 59: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402dc1;\n                }\n                case 66: {\n                    goto lab_0x402dc1;\n                }\n                case 67: {\n                    goto lab_0x402dc1;\n                }\n                case 68: {\n                    goto lab_0x402dc1;\n                }\n                case 69: {\n                    goto lab_0x402dc1;\n                }\n                case 70: {\n                    goto lab_0x402dc1;\n                }\n                case 71: {\n                    goto lab_0x402dc1;\n                }\n                case 72: {\n                    goto lab_0x402dc1;\n                }\n                case 73: {\n                    goto lab_0x402dc1;\n                }\n                case 74: {\n                    goto lab_0x402dc1;\n                }\n                case 75: {\n                    goto lab_0x402dc1;\n                }\n                case 76: {\n                    goto lab_0x402dc1;\n                }\n                case 77: {\n                    goto lab_0x402dc1;\n                }\n                case 78: {\n                    goto lab_0x402dc1;\n                }\n                case 79: {\n                    goto lab_0x402dc1;\n                }\n                case 80: {\n                    goto lab_0x402dc1;\n                }\n                case 81: {\n                    goto lab_0x402dc1;\n                }\n                case 82: {\n                    goto lab_0x402dc1;\n                }\n                case 83: {\n                    goto lab_0x402dc1;\n                }\n                case 84: {\n                    goto lab_0x402dc1;\n                }\n                case 85: {\n                    goto lab_0x402dc1;\n                }\n                case 86: {\n                    goto lab_0x402dc1;\n                }\n                case 87: {\n                    goto lab_0x402dc1;\n                }\n                case 88: {\n                    goto lab_0x402dc1;\n                }\n                case 89: {\n                    goto lab_0x402dc1;\n                }\n                case 90: {\n                    goto lab_0x402dc1;\n                }\n                case 91: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402dc1;\n                }\n                case 94: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402dc1;\n                }\n                case 96: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402dc1;\n                }\n                case 98: {\n                    goto lab_0x402dc1;\n                }\n                case 99: {\n                    goto lab_0x402dc1;\n                }\n                case 100: {\n                    goto lab_0x402dc1;\n                }\n                case 101: {\n                    goto lab_0x402dc1;\n                }\n                case 102: {\n                    goto lab_0x402dc1;\n                }\n                case 103: {\n                    goto lab_0x402dc1;\n                }\n                case 104: {\n                    goto lab_0x402dc1;\n                }\n                case 105: {\n                    goto lab_0x402dc1;\n                }\n                case 106: {\n                    goto lab_0x402dc1;\n                }\n                case 107: {\n                    goto lab_0x402dc1;\n                }\n                case 108: {\n                    goto lab_0x402dc1;\n                }\n                case 109: {\n                    goto lab_0x402dc1;\n                }\n                case 110: {\n                    goto lab_0x402dc1;\n                }\n                case 111: {\n                    goto lab_0x402dc1;\n                }\n                case 112: {\n                    goto lab_0x402dc1;\n                }\n                case 113: {\n                    goto lab_0x402dc1;\n                }\n                case 114: {\n                    goto lab_0x402dc1;\n                }\n                case 115: {\n                    goto lab_0x402dc1;\n                }\n                case 116: {\n                    goto lab_0x402dc1;\n                }\n                case 117: {\n                    goto lab_0x402dc1;\n                }\n                case 118: {\n                    goto lab_0x402dc1;\n                }\n                case 119: {\n                    goto lab_0x402dc1;\n                }\n                case 120: {\n                    goto lab_0x402dc1;\n                }\n                case 121: {\n                    goto lab_0x402dc1;\n                }\n                case 122: {\n                    goto lab_0x402dc1;\n                }\n                case 123: {\n                    goto lab_0x402d65;\n                }\n                case 124: {\n                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402d65;\n                }\n                case 126: {\n                    goto lab_0x402d8d;\n                }\n                default: {\n                    goto lab_0x403165;\n                }\n            }\n        }\n      lab_0x403165:\n        if (v23 != 1) {\n            // 0x4034d0\n            ps = 0;\n            int64_t len = v15; // 0x4034e0\n            if (v15 == -1) {\n                // 0x4034e2\n                len = strlen((char *)str);\n            }\n            // 0x40350e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40356f:\n                // 0x40356f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403574\n                int64_t v30 = v29 + str;\n                v24 = function_406010(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x403aea_2;\n                    }\n                    case -1: {\n                        goto lab_0x403aea_2;\n                    }\n                    case -2: {\n                        // 0x403bcd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403c07\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x403c0a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403c17\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403c10\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x403aea\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x403aea_2;\n                    }\n                    case 1: {\n                        goto lab_0x403540;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x4035ec\n                        char v34 = *(char *)v33; // 0x4035fd\n                        unsigned char v35; // 0x402c17\n                        if (v34 < 125) {\n                            // 0x403608\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40361f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x4035f0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x4035fd\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403608\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40361f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x4035f0\n                            v33++;\n                        }\n                        goto lab_0x403540;\n                    }\n                }\n            }\n            goto lab_0x403aea_2;\n        } else {\n            // 0x4031b4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402dc1;\n        }\n    }\n  lab_0x4033e8:\n    // 0x4033e8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x403cea\n        if (v8 > result) {\n            // 0x403cf3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403017\n        return result;\n    }\n    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402dc1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402dd0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x402fda_2;\n        }\n    }\n    int64_t v39 = result; // 0x402ed1\n    char v40 = v20; // 0x402ed1\n    int64_t v41 = v38; // 0x402ed1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402ed1\n    int64_t v43 = v36; // 0x402ed1\n    goto lab_0x402e4d;\n  lab_0x402fda_2:\n    // 0x403017\n    return function_402bc0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403aea_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402dc1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4036be\n        int64_t v50 = v5 + 1; // 0x4037a1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x4037a8\n        char v52 = v20; // 0x4037a8\n        int64_t v53 = result; // 0x4037a8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403771\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403775\n            int64_t v56 = v54 + 1; // 0x40377a\n            int64_t v57 = v51 + 1; // 0x4037a1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40376c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403771\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403775\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x402e4d;\n    }\n  lab_0x403540:\n    // 0x403540\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x40355f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403562\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x403aea\n        goto lab_0x403aea_2;\n    }\n    goto lab_0x40356f;\n  lab_0x402d8d:\n    // 0x402d8d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x402fda_2;\n    }\n    goto lab_0x402dc1;\n  lab_0x402d65:;\n    bool v60 = v15 == 1; // 0x402d70\n    if (v15 == -1) {\n        // 0x402d72\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x402d7e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402dc1;\n    } else {\n        goto lab_0x402d8d;\n    }\n  lab_0x402e4d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402e52\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402e56\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402c68_2;\n}\n"
        },
        {
            "funcName": "function_403df0",
            "funcStartAddr": "403df0",
            "funcEndAddr": "403f8e",
            "decompiledFuncCode": "int64_t function_403df0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403df2\n    int32_t * v3 = __errno_location(); // 0x403e0c\n    int64_t v4 = (int64_t)g21; // 0x403e11\n    int32_t v5 = *v3; // 0x403e1b\n    int64_t v6 = v4; // 0x403e31\n    if (v2 >= (int64_t)*(int32_t *)&g24) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403f89\n            function_4050e0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403e40\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403e47\n        int64_t v9; // 0x403df0\n        if (g21 == &g22) {\n            int64_t v10 = function_404ef0(0, v8); // 0x403f6a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g22); // 0x403f6f\n            *(int64_t *)&g21 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404ef0(v4, v8); // 0x403e5b\n            *(int64_t *)&g21 = v12;\n            v9 = v12;\n        }\n        // 0x403e6a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g24; // 0x403e6a\n        int32_t v14 = v7; // 0x403e71\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g24 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403ea1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x403eab\n    int64_t * v17 = (int64_t *)v15; // 0x403eae\n    uint64_t v18 = *v17; // 0x403eae\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403eb1\n    int64_t result = *v19; // 0x403eb1\n    int64_t v20; // 0x403df0\n    uint64_t v21 = function_402bc0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403ed4\n    if (v18 > v21) {\n        // 0x403f4b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403ee7\n    *v17 = v22;\n    if (result != (int64_t)&g38) {\n        // 0x403ef7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404e90(v22); // 0x403f11\n    *v19 = result2;\n    int64_t v23; // 0x403df0\n    function_402bc0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x403f4b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403f90",
            "funcStartAddr": "403f90",
            "funcEndAddr": "403fc4",
            "decompiledFuncCode": "int64_t function_403f90(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403f97\n    int64_t result = function_405090(a1 == 0 ? (int64_t)&g39 : a1, 56); // 0x403fb6\n    return result;\n}\n"
        },
        {
            "funcName": "function_403fd0",
            "funcStartAddr": "403fd0",
            "funcEndAddr": "403fdf",
            "decompiledFuncCode": "int64_t function_403fd0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g39 : a1); // 0x403fdc\n    return result;\n}\n"
        },
        {
            "funcName": "function_403fe0",
            "funcStartAddr": "403fe0",
            "funcEndAddr": "403fef",
            "decompiledFuncCode": "int64_t function_403fe0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x403fe8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_403ff0",
            "funcStartAddr": "403ff0",
            "funcEndAddr": "404023",
            "decompiledFuncCode": "int64_t function_403ff0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 + 8 : a1 + 8; // 0x404009\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40400e\n    uint32_t v3 = *v2; // 0x40400e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404012\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404030",
            "funcStartAddr": "404030",
            "funcEndAddr": "404043",
            "decompiledFuncCode": "int64_t function_404030(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g39 + 4 : a1 + 4); // 0x40403c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404050",
            "funcStartAddr": "404050",
            "funcEndAddr": "40407b",
            "decompiledFuncCode": "int64_t function_404050(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g39 : a1; // 0x404058\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404075\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40406c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g39;\n}\n"
        },
        {
            "funcName": "function_404080",
            "funcStartAddr": "404080",
            "funcEndAddr": "4040f2",
            "decompiledFuncCode": "int64_t function_404080(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g39 : a5; // 0x4040a2\n    int32_t * v2 = __errno_location(); // 0x4040ab\n    uint32_t v3 = *(int32_t *)v1; // 0x4040cb\n    int64_t result = function_402bc0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4040da\n    return result;\n}\n"
        },
        {
            "funcName": "function_404100",
            "funcStartAddr": "404100",
            "funcEndAddr": "4041e1",
            "decompiledFuncCode": "int64_t function_404100(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g39 : a4; // 0x404122\n    int32_t * v2 = __errno_location(); // 0x404128\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404147\n    int32_t * v4 = (int32_t *)v1; // 0x40414a\n    int64_t v5 = function_402bc0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404165\n    int64_t v6 = v5 + 1; // 0x40416a\n    int64_t result = function_404e90(v6); // 0x40417f\n    function_402bc0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4041c4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4041cd\n    return result;\n}\n"
        },
        {
            "funcName": "function_4041f0",
            "funcStartAddr": "4041f0",
            "funcEndAddr": "4041fa",
            "decompiledFuncCode": "int64_t function_4041f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4041f0\n    return function_404100(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404200",
            "funcStartAddr": "404200",
            "funcEndAddr": "404295",
            "decompiledFuncCode": "int64_t function_404200(void) {\n    uint32_t v1 = *(int32_t *)&g24; // 0x404200\n    int64_t v2 = v1; // 0x404200\n    int64_t v3 = v2; // 0x404214\n    if (v1 >= 2) {\n        int64_t v4 = &g24;\n        int64_t v5 = v4 + 16; // 0x404233\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g50;\n        while (v5 != (int64_t)g21 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404230\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g50;\n        }\n    }\n    int64_t v6 = v3; // 0x40424d\n    if (g22 != 0x60b320) {\n        // 0x40424f\n        free((int64_t *)g22);\n        g22 = 256;\n        *(int64_t *)&g23 = (int64_t)&g38;\n        v6 = &g50;\n    }\n    int64_t result = v6; // 0x404271\n    if (g21 != &g22) {\n        // 0x404273\n        free(g21);\n        *(int64_t *)&g21 = (int64_t)&g22;\n        result = &g50;\n    }\n    // 0x404286\n    *(int32_t *)&g24 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4042a0",
            "funcStartAddr": "4042a0",
            "funcEndAddr": "4042b1",
            "decompiledFuncCode": "int64_t function_4042a0(void) {\n    // 0x4042a0\n    int64_t v1; // 0x4042a0\n    return function_403df0(v1, v1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_4042c0",
            "funcStartAddr": "4042c0",
            "funcEndAddr": "4042ca",
            "decompiledFuncCode": "int64_t function_4042c0(void) {\n    // 0x4042c0\n    int64_t v1; // 0x4042c0\n    return function_403df0(v1, v1, v1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_4042d0",
            "funcStartAddr": "4042d0",
            "funcEndAddr": "4042e6",
            "decompiledFuncCode": "int64_t function_4042d0(int64_t a1) {\n    // 0x4042d0\n    return function_403df0(0, a1, -1, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_4042f0",
            "funcStartAddr": "4042f0",
            "funcEndAddr": "404302",
            "decompiledFuncCode": "int64_t function_4042f0(int64_t a1, int64_t a2) {\n    // 0x4042f0\n    return function_403df0(0, a1, a2, (int64_t *)&g39);\n}\n"
        },
        {
            "funcName": "function_404310",
            "funcStartAddr": "404310",
            "funcEndAddr": "404378",
            "decompiledFuncCode": "int64_t function_404310(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404320\n    return function_403df0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404380",
            "funcStartAddr": "404380",
            "funcEndAddr": "4043e4",
            "decompiledFuncCode": "int64_t function_404380(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404390\n    return function_403df0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_4043f0",
            "funcStartAddr": "4043f0",
            "funcEndAddr": "4043fc",
            "decompiledFuncCode": "int64_t function_4043f0(int64_t a1, int64_t a2) {\n    // 0x4043f0\n    return function_404310(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404400",
            "funcStartAddr": "404400",
            "funcEndAddr": "40440f",
            "decompiledFuncCode": "int64_t function_404400(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404400\n    return function_404380(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404410",
            "funcStartAddr": "404410",
            "funcEndAddr": "404480",
            "decompiledFuncCode": "int64_t function_404410(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x40441d\n    int128_t v2 = __asm_movdqa(g40); // 0x404425\n    int128_t v3 = __asm_movdqa(g41); // 0x40442d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404442\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404458\n    uint32_t v6 = *v5; // 0x404458\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40445d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403df0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404480",
            "funcStartAddr": "404480",
            "funcEndAddr": "40448d",
            "decompiledFuncCode": "int64_t function_404480(int64_t a1, int64_t a2) {\n    // 0x404480\n    return function_404410(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404490",
            "funcStartAddr": "404490",
            "funcEndAddr": "4044a1",
            "decompiledFuncCode": "int64_t function_404490(int64_t a1) {\n    // 0x404490\n    return function_404410(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4044b0",
            "funcStartAddr": "4044b0",
            "funcEndAddr": "4044ba",
            "decompiledFuncCode": "int64_t function_4044b0(void) {\n    // 0x4044b0\n    int64_t v1; // 0x4044b0\n    return function_404410(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_4044c0",
            "funcStartAddr": "4044c0",
            "funcEndAddr": "40452e",
            "decompiledFuncCode": "int64_t function_4044c0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4044da\n    return function_403df0(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404530",
            "funcStartAddr": "404530",
            "funcEndAddr": "40459c",
            "decompiledFuncCode": "int64_t function_404530(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g39); // 0x404537\n    int128_t v2 = __asm_movdqa(g40); // 0x40453f\n    int128_t v3 = __asm_movdqa(g41); // 0x404547\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404569\n    if (a2 == 0 || a3 == 0) {\n        // 0x404597\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40457a\n    return function_403df0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4045a0",
            "funcStartAddr": "4045a0",
            "funcEndAddr": "4045a9",
            "decompiledFuncCode": "int64_t function_4045a0(void) {\n    // 0x4045a0\n    int64_t v1; // 0x4045a0\n    return function_404530(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4045b0",
            "funcStartAddr": "4045b0",
            "funcEndAddr": "4045c7",
            "decompiledFuncCode": "int64_t function_4045b0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4045b0\n    return function_404530(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4045d0",
            "funcStartAddr": "4045d0",
            "funcEndAddr": "4045e3",
            "decompiledFuncCode": "int64_t function_4045d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4045d0\n    return function_404530(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_4045f0",
            "funcStartAddr": "4045f0",
            "funcEndAddr": "4045fa",
            "decompiledFuncCode": "int64_t function_4045f0(void) {\n    // 0x4045f0\n    int64_t v1; // 0x4045f0\n    return function_403df0(v1, v1, v1, &g20);\n}\n"
        },
        {
            "funcName": "function_404600",
            "funcStartAddr": "404600",
            "funcEndAddr": "404612",
            "decompiledFuncCode": "int64_t function_404600(int64_t a1, int64_t a2) {\n    // 0x404600\n    return function_403df0(0, a1, a2, &g20);\n}\n"
        },
        {
            "funcName": "function_404620",
            "funcStartAddr": "404620",
            "funcEndAddr": "404631",
            "decompiledFuncCode": "int64_t function_404620(void) {\n    // 0x404620\n    int64_t v1; // 0x404620\n    return function_403df0(v1, v1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_404640",
            "funcStartAddr": "404640",
            "funcEndAddr": "404656",
            "decompiledFuncCode": "int64_t function_404640(int64_t a1) {\n    // 0x404640\n    return function_403df0(0, a1, -1, &g20);\n}\n"
        },
        {
            "funcName": "function_404660",
            "funcStartAddr": "404660",
            "funcEndAddr": "4046b4",
            "decompiledFuncCode": "int64_t function_404660(int64_t a1) {\n    // 0x404660\n    int64_t v1; // bp-152, 0x404660\n    int32_t v2 = __lxstat(1, (char *)a1, (struct stat *)&v1); // 0x404673\n    int32_t * v3 = __errno_location(); // 0x40467a\n    if (v2 == 0) {\n        // 0x4046a0\n        *v3 = 17;\n        return 0xffffffff;\n    }\n    int32_t v4 = *v3; // 0x404683\n    if (v4 != 75) {\n        // 0x40468a\n        return v4 != 2 ? 0xffffffff : 0;\n    }\n    // 0x4046a0\n    *v3 = 17;\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4046c0",
            "funcStartAddr": "4046c0",
            "funcEndAddr": "4046ca",
            "decompiledFuncCode": "int64_t function_4046c0(void) {\n    // 0x4046c0\n    int64_t path; // 0x4046c0\n    return mkdir((char *)path, 448);\n}\n"
        },
        {
            "funcName": "function_4046d0",
            "funcStartAddr": "4046d0",
            "funcEndAddr": "4046e6",
            "decompiledFuncCode": "int64_t function_4046d0(void) {\n    // 0x4046d0\n    int64_t path; // 0x4046d0\n    return open((char *)path, (int32_t)path & -196 | 194);\n}\n"
        },
        {
            "funcName": "function_4046f0",
            "funcStartAddr": "4046f0",
            "funcEndAddr": "404710",
            "decompiledFuncCode": "int64_t function_4046f0(void) {\n    // 0x4046f0\n    __assert_fail(\"! \\\"invalid KIND in __gen_tempname\\\"\", \"lib/tempname.c\", 327, \"gen_tempname_len\");\n    return &g50;\n}\n"
        },
        {
            "funcName": "function_404710",
            "funcStartAddr": "404710",
            "funcEndAddr": "40486d",
            "decompiledFuncCode": "int64_t function_404710(int64_t str, int64_t a2, int32_t * a3, int64_t a4, uint64_t a5) {\n    int32_t * v1 = __errno_location(); // 0x404735\n    int32_t v2 = *v1; // 0x404740\n    uint64_t len = (int64_t)strlen((char *)str); // 0x404746\n    uint64_t v3 = (0x100000000 * a2 >> 32) + a5; // 0x40474e\n    if (v3 > len) {\n        // 0x404858\n        *v1 = 22;\n        // 0x404840\n        return 0xffffffff;\n    }\n    int64_t str2 = len - v3 + str;\n    if ((int64_t)strspn((char *)str2, \"X\") < a5) {\n        // 0x404858\n        *v1 = 22;\n        // 0x404840\n        return 0xffffffff;\n    }\n    int64_t v4 = function_406690(); // 0x404784\n    if (v4 == 0) {\n        // 0x404840\n        return 0xffffffff;\n    }\n    int32_t v5 = 0x3a2f8; // 0x4047a6\n    int64_t v6; // 0x404710\n    int64_t v7; // 0x4047c8\n    int64_t v8; // 0x4047cc\n    char v9; // 0x4047d1\n    if (a5 != 0) {\n        v7 = str2 + 1;\n        v8 = function_4066d0(v4, 61);\n        v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n        *(char *)str2 = v9;\n        v6 = v7;\n        while (v7 != str2 + a5) {\n            // 0x4047c0\n            v7 = v6 + 1;\n            v8 = function_4066d0(v4, 61);\n            v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n            *(char *)v6 = v9;\n            v6 = v7;\n        }\n    }\n    int32_t v10; // 0x404710\n    int64_t v11; // 0x404710\n    int64_t result; // 0x404710\n    while ((int32_t)a4 < 0) {\n        int32_t v12 = *v1; // 0x4047f8\n        v10 = v12;\n        v11 = 0xffffffff;\n        if (v12 != 17) {\n            goto lab_0x404825;\n        }\n        // 0x404800\n        v5--;\n        if (v5 == 0) {\n            // 0x404806\n            function_4067f0(v4);\n            *v1 = 17;\n            result = 0xffffffff;\n            return result;\n        }\n        if (a5 != 0) {\n            v7 = str2 + 1;\n            v8 = function_4066d0(v4, 61);\n            v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n            *(char *)str2 = v9;\n            v6 = v7;\n            while (v7 != str2 + a5) {\n                // 0x4047c0\n                v7 = v6 + 1;\n                v8 = function_4066d0(v4, 61);\n                v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n                *(char *)v6 = v9;\n                v6 = v7;\n            }\n        }\n    }\n    // 0x40481c\n    *v1 = v2;\n    v10 = v2;\n    v11 = a4 & 0xffffffff;\n  lab_0x404825:\n    // 0x404825\n    function_4067f0(v4);\n    *v1 = v10;\n    result = v11;\n  lab_0x404840:\n    // 0x404840\n    return result;\n}\n"
        },
        {
            "funcName": "function_404870",
            "funcStartAddr": "404870",
            "funcEndAddr": "4048eb",
            "decompiledFuncCode": "int64_t function_404870(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int32_t v1 = a3; // bp-12, 0x404874\n    if ((int32_t)a4 < 3) {\n        int64_t v2 = *(int64_t *)((8 * a4 & 0x7fffffff8) + (int64_t)&g8); // 0x404884\n        int64_t v3; // 0x404870\n        return function_404710(a1, a2, &v1, v2, v3);\n    }\n    // 0x4048cc\n    function_4046f0();\n    function_4046f0();\n    return function_404710(a1, a2, (int32_t *)(int64_t)a3, a4, 6);\n}\n"
        },
        {
            "funcName": "function_4048f0",
            "funcStartAddr": "4048f0",
            "funcEndAddr": "404ccd",
            "decompiledFuncCode": "int64_t function_4048f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404988\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40490c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404926\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40496b\n    if (a6 < 10) {\n        // 0x40497a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404a72\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404cd0",
            "funcStartAddr": "404cd0",
            "funcEndAddr": "404cf0",
            "decompiledFuncCode": "int64_t function_404cd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404cd0\n    if (a5 == 0) {\n        // 0x404ceb\n        return function_4048f0(a1, a2, a3, a4, a5, 0, (int64_t)&g50);\n    }\n    int64_t v1 = 0; // 0x404cd7\n    v1++;\n    int64_t v2 = v1; // 0x404ce9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404ce0\n        v1++;\n        v2 = v1;\n    }\n    // 0x404ceb\n    return function_4048f0(a1, a2, a3, a4, a5, v2, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_404cf0",
            "funcStartAddr": "404cf0",
            "funcEndAddr": "404d50",
            "decompiledFuncCode": "int64_t function_404cf0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404cf0\n    int64_t v3 = &v2; // 0x404cf0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404d23\n    int64_t v6; // 0x404d0d\n    int64_t * v7; // 0x404d2b\n    int64_t v8; // 0x404d2b\n    int64_t v9; // 0x404d37\n    if (v5 < 48) {\n        // 0x404d00\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404d43\n            break;\n        }\n    } else {\n        // 0x404d2b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404d43\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404d21\n    while (v4 != 9) {\n        // 0x404d19\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x404d00\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404d43\n                break;\n            }\n        } else {\n            // 0x404d2b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404d43\n                break;\n            }\n        }\n        // 0x404d19\n        v10 = 10;\n    }\n    // 0x404d43\n    return function_4048f0(a1, a2, a3, a4, v3, v10, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_404d50",
            "funcStartAddr": "404d50",
            "funcEndAddr": "404e0c",
            "decompiledFuncCode": "int64_t function_404d50(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x404d50\n    int64_t v1; // bp-168, 0x404d50\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404d50\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404d50\n    int64_t v8; // 0x404d50\n    int64_t v9; // bp-56, 0x404d50\n    int64_t v10; // 0x404db5\n    int64_t v11; // 0x404dd9\n    if ((int32_t)v6 < 48) {\n        // 0x404da0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404df0\n            break;\n        }\n    } else {\n        // 0x404dd2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404df0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x404dca\n    int64_t v13 = 10; // 0x404dca\n    while (v5 != 9) {\n        // 0x404dcc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404da0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404df0\n                break;\n            }\n        } else {\n            // 0x404dd2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404df0\n                break;\n            }\n        }\n        // 0x404dc2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404df0\n    int64_t v14; // bp-136, 0x404d50\n    int64_t result = function_4048f0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g50); // 0x404dff\n    return result;\n}\n"
        },
        {
            "funcName": "function_404e10",
            "funcStartAddr": "404e10",
            "funcEndAddr": "404e84",
            "decompiledFuncCode": "int64_t function_404e10(int64_t a1) {\n    // 0x404e10\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404e73\n    return fputs_unlocked(v1, g29);\n}\n"
        },
        {
            "funcName": "function_404e90",
            "funcStartAddr": "404e90",
            "funcEndAddr": "404eaa",
            "decompiledFuncCode": "int64_t function_404e90(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404e94\n    if (size != 0 != (mem == NULL)) {\n        // 0x404ea3\n        return (int64_t)mem;\n    }\n    // 0x404ea5\n    function_4050e0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404eb0",
            "funcStartAddr": "404eb0",
            "funcEndAddr": "404ed1",
            "decompiledFuncCode": "int64_t function_404eb0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404eb3\n    int64_t v2 = v1; // 0x404eb3\n    if (v2 < 0) {\n        // 0x404ecb\n        function_4050e0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404ec9\n        return function_404e90(v2);\n    }\n    // 0x404ecb\n    function_4050e0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404ee0",
            "funcStartAddr": "404ee0",
            "funcEndAddr": "404ee2",
            "decompiledFuncCode": "int64_t function_404ee0(void) {\n    // 0x404ee0\n    int64_t v1; // 0x404ee0\n    return function_404e90(v1);\n}\n"
        },
        {
            "funcName": "function_404ef0",
            "funcStartAddr": "404ef0",
            "funcEndAddr": "404f26",
            "decompiledFuncCode": "int64_t function_404ef0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404f18\n        free(v1);\n        return (int32_t)&g50 ^ (int32_t)&g50;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x404f01\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404f10\n        return (int64_t)mem;\n    }\n    // 0x404f21\n    function_4050e0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404f30",
            "funcStartAddr": "404f30",
            "funcEndAddr": "404f51",
            "decompiledFuncCode": "int64_t function_404f30(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404f33\n    int64_t v2 = v1; // 0x404f33\n    if (v2 < 0) {\n        // 0x404f4b\n        function_4050e0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404f49\n        return function_404ef0(a1, v2);\n    }\n    // 0x404f4b\n    function_4050e0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404f60",
            "funcStartAddr": "404f60",
            "funcEndAddr": "404fe6",
            "decompiledFuncCode": "int64_t function_404f60(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x404fbb\n            function_4050e0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404ef0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404fa3\n    if (a2 == 0) {\n        // 0x404fc8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404fa8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x404fbb\n        function_4050e0(a1);\n        // UNREACHABLE\n    }\n    // 0x404f8a\n    *(int64_t *)a2 = v2;\n    return function_404ef0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404ff0",
            "funcStartAddr": "404ff0",
            "funcEndAddr": "405040",
            "decompiledFuncCode": "int64_t function_404ff0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404ff0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40503a\n            function_4050e0(a1);\n            // UNREACHABLE\n        }\n        // 0x405012\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404ef0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405025\n        *(int64_t *)a2 = 128;\n        return function_404ef0(0, 128);\n    }\n    // 0x405038\n    if (a2 < 0) {\n        // 0x40503a\n        function_4050e0(a1);\n        // UNREACHABLE\n    }\n    // 0x405012\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404ef0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_405040",
            "funcStartAddr": "405040",
            "funcEndAddr": "405057",
            "decompiledFuncCode": "int64_t function_405040(int64_t a1, int64_t a2) {\n    // 0x405040\n    return (int64_t)memset((int64_t *)function_404e90(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_405060",
            "funcStartAddr": "405060",
            "funcEndAddr": "40508e",
            "decompiledFuncCode": "int64_t function_405060(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x405067\n    if ((int64_t)v1 < 0) {\n        // 0x405089\n        function_4050e0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x405089\n        function_4050e0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40507a\n    if (mem != NULL) {\n        // 0x405084\n        return (int64_t)mem;\n    }\n    // 0x405089\n    function_4050e0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405090",
            "funcStartAddr": "405090",
            "funcEndAddr": "4050b8",
            "decompiledFuncCode": "int64_t function_405090(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404e90(a2); // 0x40509f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4050c0",
            "funcStartAddr": "4050c0",
            "funcEndAddr": "4050d3",
            "decompiledFuncCode": "int64_t function_4050c0(int64_t str) {\n    // 0x4050c0\n    return function_405090(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4050e0",
            "funcStartAddr": "4050e0",
            "funcEndAddr": "405111",
            "decompiledFuncCode": "int64_t function_4050e0(int64_t a1) {\n    // 0x4050e0\n    error(g19, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405120",
            "funcStartAddr": "405120",
            "funcEndAddr": "40519b",
            "decompiledFuncCode": "int64_t function_405120(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405127\n    if (fileno(stream) < 0) {\n        // 0x405187\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40513a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40516b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405187\n            return fclose(stream);\n        }\n    }\n    // 0x40513c\n    if ((int32_t)function_4051a0(a1, v1) == 0) {\n        // 0x405187\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405148\n    int32_t v3 = *v2; // 0x405150\n    int64_t result = fclose(stream); // 0x40515e\n    if (v3 != 0) {\n        // 0x405190\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405160\n    return result;\n}\n"
        },
        {
            "funcName": "function_4051a0",
            "funcStartAddr": "4051a0",
            "funcEndAddr": "4051e0",
            "decompiledFuncCode": "int64_t function_4051a0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x4051ba\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x4051ba\n        return fflush(stream);\n    }\n    // 0x4051c8\n    function_4051e0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4051e0",
            "funcStartAddr": "4051e0",
            "funcEndAddr": "405237",
            "decompiledFuncCode": "int64_t function_4051e0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4051e0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4051ea\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40521b\n    int64_t result = -1; // 0x405224\n    if (v1 != -1) {\n        // 0x405226\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405232\n    return result;\n}\n"
        },
        {
            "funcName": "function_405240",
            "funcStartAddr": "405240",
            "funcEndAddr": "40531f",
            "decompiledFuncCode": "int64_t function_405240(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40524c\n    uint32_t v2 = *v1; // 0x40524c\n    int64_t v3 = a2 & 0xffffffff; // 0x405251\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x405254\n    uint64_t v5 = (int64_t)*v4; // 0x405254\n    int64_t v6; // 0x4052c2\n    if (v3 <= v5) {\n      lab_0x4052bc_2:\n        // 0x4052bc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x405242\n    int64_t v8 = v2; // 0x405240\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4052bc\n        goto lab_0x4052bc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x405278\n    int64_t v17; // 0x405286\n    int64_t * v18; // 0x4052a0\n    int64_t * v19; // 0x4052a3\n    int64_t v20; // 0x4052ae\n    int64_t v21; // 0x405286\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x405283\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x4052a0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4052b7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4052bc\n            goto lab_0x4052bc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4052bc\n            goto lab_0x4052bc_2;\n        }\n        // 0x405272\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4052fb\n    int64_t * v23 = (int64_t *)v22; // 0x405300\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x405303\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x405300\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x405317\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40526d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4052bc\n            goto lab_0x4052bc_2;\n        }\n        // 0x405272\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x405283\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x4052a0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4052b7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4052bc\n                goto lab_0x4052bc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4052bc\n                goto lab_0x4052bc_2;\n            }\n            // 0x405272\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4052e0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x405300\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x405317\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4052bc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405320",
            "funcStartAddr": "405320",
            "funcEndAddr": "40593c",
            "decompiledFuncCode": "int64_t function_405320(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40533f\n    int64_t v2 = *v1; // 0x40533f\n    char * str2 = (char *)v2; // 0x40534c\n    char c = *str2; // 0x40534c\n    int64_t v3 = v2; // 0x405378\n    int64_t v4 = 0; // 0x405320\n    int32_t v5; // 0x405320\n    int64_t v6; // 0x405320\n    int64_t v7; // 0x405320\n    int64_t v8; // 0x405320\n    int64_t v9; // 0x405320\n    int64_t v10; // 0x405320\n    int64_t v11; // 0x405320\n    int64_t v12; // 0x405320\n    int64_t v13; // 0x405320\n    int64_t str3; // 0x405320\n    int64_t v14; // 0x405320\n    int64_t v15; // 0x405320\n    int64_t v16; // 0x405320\n    int64_t v17; // 0x405320\n    int32_t v18; // 0x405320\n    int32_t v19; // 0x405320\n    int32_t v20; // 0x405320\n    int32_t v21; // 0x405320\n    int32_t v22; // 0x405320\n    int32_t v23; // 0x405320\n    int32_t v24; // 0x405320\n    int32_t v25; // 0x405320\n    int32_t v26; // 0x405320\n    int32_t v27; // 0x405320\n    int32_t v28; // 0x405320\n    int32_t v29; // 0x405320\n    int64_t nmemb; // 0x405320\n    int64_t v30; // 0x405320\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40537c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405378\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405388\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40538e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405358\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4053bc\n                int64_t v34; // 0x405320\n                int64_t v35; // 0x405320\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4053c5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405540;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4053d6\n                int64_t v37 = *(int64_t *)v36; // 0x4053da\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4053b0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4053c5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405540;\n                        }\n                    }\n                    // 0x4053d6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405426:\n                    // 0x405426\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405480;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4055f0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405480;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4055a0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40544a;\n                                } else {\n                                    // 0x4055ac\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40544a;\n                                    } else {\n                                        // 0x4055ba\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40544a;\n                                        } else {\n                                            goto lab_0x405480;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40544a;\n                            }\n                        }\n                    }\n                }\n              lab_0x405491:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405666\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405812\n                            flockfile(g31);\n                            int64_t v41 = *v1; // 0x405832\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40587f\n                            int64_t v43 = (int64_t)g31;\n                            int64_t v44 = v43; // 0x405899\n                            int64_t v45; // 0x40589b\n                            if (*(char *)v42 != 0) {\n                                // 0x40589b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g31;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405893\n                            while (v17 + nmemb != v42) {\n                                // 0x405895\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40589b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g31;\n                                }\n                                // 0x405888\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x4058c0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g31);\n                            v40 = *v1;\n                        } else {\n                            // 0x405674\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4057cf\n                        free((int64_t *)v17);\n                    }\n                    // 0x4056c9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4056e0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40558e\n                    return 63;\n                }\n                // 0x4054b0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405534\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405540:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405550\n                    uint32_t v50 = *v49; // 0x405550\n                    int64_t v51 = v50; // 0x405550\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40555a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405563\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40578f\n                                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40573a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40558e\n                            return 63;\n                        }\n                        // 0x4055d8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4058ef\n                                    __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4057ed\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405800\n                                // 0x40558e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4056fe\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405712\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40557b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40557e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405582\n                    int64_t result = v59; // 0x405588\n                    if (v58 != 0) {\n                        // 0x40558a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40558e\n                    return result;\n                }\n            } else {\n                // 0x40538e\n                v5 = v32;\n            }\n            // break -> 0x4054b5\n            break;\n        }\n    }\n    // 0x4054b5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x4054cd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4054d7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40558e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405619\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405506\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405516\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405480:\n    // 0x405480\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405480\n    int64_t v63 = *(int64_t *)v62; // 0x405484\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405491\n        goto lab_0x405491;\n    }\n    goto lab_0x405426;\n  lab_0x40544a:\n    // 0x40544a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405320\n    int32_t v65; // 0x405320\n    int32_t v66; // 0x405320\n    if (v27 != 0) {\n        goto lab_0x405480;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x405600\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405480;\n            } else {\n                goto lab_0x405471;\n            }\n        } else {\n            // 0x405465\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40575c\n                int64_t v67 = (int64_t)mem; // 0x40575c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405480;\n                } else {\n                    // 0x40576f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405471;\n                }\n            } else {\n                goto lab_0x405471;\n            }\n        }\n    }\n  lab_0x405471:\n    // 0x405471\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405480;\n}\n"
        },
        {
            "funcName": "function_405940",
            "funcStartAddr": "405940",
            "funcEndAddr": "405f06",
            "decompiledFuncCode": "int64_t function_405940(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405961\n    if (v3 < 1) {\n        // 0x405b1e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40595d\n    int32_t v5 = *(int32_t *)a7; // 0x405969\n    uint64_t v6 = a1 & 0xffffffff; // 0x40596b\n    int64_t v7 = v2; // 0x405970\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405973\n    *v8 = 0;\n    int64_t v9; // 0x405940\n    int64_t v10; // 0x405940\n    int64_t v11; // 0x405940\n    int64_t v12; // 0x405940\n    int64_t str; // 0x405940\n    int64_t v13; // 0x405940\n    int64_t v14; // 0x405940\n    int64_t v15; // 0x405940\n    int64_t v16; // 0x405940\n    int64_t v17; // 0x405940\n    int32_t v18; // 0x405940\n    char v19; // 0x405940\n    if (v5 == 0) {\n        // 0x405b58\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40598a;\n    } else {\n        // 0x405983\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4059d0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4059d3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405a98;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4059e6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4059f6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x405aac;\n                } else {\n                    goto lab_0x405a08;\n                }\n            }\n        } else {\n            goto lab_0x40598a;\n        }\n    }\n  lab_0x40598a:\n    // 0x40598a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405990\n    *v24 = 0;\n    int64_t v25; // 0x405940\n    int64_t v26; // 0x405940\n    int64_t v27; // 0x405940\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405a80\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405a8d;\n        }\n        case 43: {\n            // 0x405d90\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405a8d;\n        }\n        default: {\n            // 0x4059ac\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x405d0f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x405e28\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x405a8d;\n                } else {\n                    // 0x405d1d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4059ba;\n                }\n            } else {\n                goto lab_0x4059ba;\n            }\n        }\n    }\n  lab_0x405a98:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x405a9f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405a08;\n    } else {\n        goto lab_0x405aac;\n    }\n  lab_0x4059ba:\n    // 0x4059ba\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x405a8d;\n  lab_0x405a8d:\n    // 0x405a8d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405a98;\n  lab_0x405a08:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405a08\n    int64_t v31 = v30; // 0x405a08\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x405a0a\n    if ((int64_t)*v32 > v31) {\n        // 0x405a0f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405a12\n    if (*v33 > v30) {\n        // 0x405a17\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x405a1a\n    int64_t v35 = v31; // 0x405a1e\n    int64_t v36 = v15; // 0x405a1e\n    int64_t v37; // 0x405940\n    int64_t v38; // 0x405940\n    int64_t v39; // 0x405940\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405b88\n        int64_t v41 = v40; // 0x405b88\n        v2 = v41;\n        int64_t v42; // 0x405940\n        if (*v33 == v40) {\n            // 0x405d70\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405d78\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405b94\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405b98\n                function_405240(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405ba8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405bb1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x405bba\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405bd1\n            int64_t v47 = v45 & 0xffffffff; // 0x405bd5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x405bde\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405be4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405be6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405bc0\n            int64_t v49 = v48 & 0xffffffff; // 0x405bc0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405bd1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x405bde\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405be4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405be6;\n                    }\n                }\n                // 0x405bc0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405d88\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405be6;\n    } else {\n        goto lab_0x405a24;\n    }\n  lab_0x405aac:\n    // 0x405aac\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x405aaf\n    int64_t v51 = v12; // 0x405aaf\n    int64_t v52 = v14; // 0x405aaf\n    if (*(char *)v10 == 0) {\n        goto lab_0x405a08;\n    } else {\n        goto lab_0x405ab5;\n    }\n  lab_0x405a24:;\n    int32_t v53 = v35; // 0x405a24\n    int64_t v54; // 0x405940\n    int64_t v55; // 0x405940\n    int64_t v56; // 0x405940\n    int64_t v57; // 0x405940\n    int64_t v58; // 0x405940\n    int64_t v59; // 0x405940\n    char * v60; // 0x405940\n    int64_t v61; // 0x405940\n    int64_t v62; // 0x405a39\n    int64_t v63; // 0x405940\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405b73\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405b76;\n    } else {\n        // 0x405a2c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405940\n        int64_t v66 = v65 ? -1 : 1; // 0x405a40\n        int64_t v67 = (int64_t)\"--\"; // 0x405940\n        int64_t v68 = v62; // 0x405940\n        int64_t v69 = 3; // 0x405a40\n        unsigned char v70 = *(char *)v68; // 0x405a40\n        char v71 = *(char *)v67; // 0x405a40\n        char v72 = v71; // 0x405a40\n        bool v73 = false; // 0x405a40\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405b30\n            if (*(char *)v62 == 45) {\n                // 0x405bf0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x405bf0\n                if (c == 0) {\n                    goto lab_0x405b3a;\n                } else {\n                    // 0x405bfd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405c80;\n                    } else {\n                        if (c == 45) {\n                            // 0x405e63\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405cd5;\n                        } else {\n                            // 0x405c0e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405c80;\n                            } else {\n                                // 0x405c13\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x405c34;\n                                } else {\n                                    // 0x405c1a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405c80;\n                                    } else {\n                                        goto lab_0x405c34;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x405b3a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405a50\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405a53\n            int64_t v77 = v35 + 1; // 0x405a56\n            int32_t v78 = v77; // 0x405a59\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405dc0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405a67\n                    function_405240(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405a75\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405b76;\n        }\n    }\n  lab_0x405ab5:;\n    // 0x405ab5\n    int64_t v79; // bp-104, 0x405940\n    int64_t v80 = &v79; // 0x40594a\n    int64_t v81 = v50 + 1; // 0x405ab5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x405abc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405ac1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405ac5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405ac9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405ad1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405ad6\n    int32_t c2 = v84; // 0x405ad6\n    char * found_char_pos = strchr(str2, c2); // 0x405ad6\n    int64_t v87 = *v82; // 0x405adb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405ae5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x405af0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x405de0\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x405dad\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x405b1e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405ad6\n    char v91 = *(char *)(v90 + 1); // 0x405b0b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405ac5\n        if (v91 != 58) {\n            // 0x405b1e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405d34\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405e38\n                *v8 = 0;\n            } else {\n                // 0x405e1c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x405d5e\n            *v83 = 0;\n            // 0x405b1e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x405d3e\n        if (v93 != 0) {\n            // 0x405dd0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x405d5e\n            *v83 = 0;\n            // 0x405b1e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405d51\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x405d5e\n            *v83 = 0;\n            // 0x405b1e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x405e9a\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x405e4a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405e51\n        // 0x405d5e\n        *v83 = 0;\n        // 0x405b1e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405ca9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x405cab\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405ed0\n                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405e81\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405e88\n            // 0x405b1e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405cb6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x405cba\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405cd5;\n  lab_0x405be6:\n    // 0x405be6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405a24;\n  lab_0x405cd5:;\n    int64_t v99 = function_405320(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x405cf3\n    // 0x405b1e\n    return v99 & 0xffffffff;\n  lab_0x405b76:;\n    int32_t v100 = v55; // 0x405b76\n    if (v100 != (int32_t)v59) {\n        // 0x405b7a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x405b1e\n    return 0xffffffff;\n  lab_0x405b3a:\n    // 0x405b3a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405b41\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x405b1e\n    return v99 & 0xffffffff;\n  lab_0x405c80:\n    // 0x405c80\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405ab5;\n  lab_0x405c34:\n    // 0x405c34\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405320(v6, a2, str, a4, a5, v57, v1, v11, &g10); // 0x405c5a\n    if ((int32_t)v101 != -1) {\n        // 0x405b1e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x405c6f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405c80;\n}\n"
        },
        {
            "funcName": "function_405f10",
            "funcStartAddr": "405f10",
            "funcEndAddr": "405f66",
            "decompiledFuncCode": "int64_t function_405f10(int64_t a1) {\n    // 0x405f10\n    *(int32_t *)&g42 = g27;\n    *(int32_t *)&g43 = g26;\n    int64_t v1; // 0x405f10\n    int64_t result = function_405940(v1, v1, v1, v1, v1, v1, &g42, a1 & 0xffffffff); // 0x405f36\n    g27 = *(int32_t *)&g42;\n    g48 = g45;\n    *(int32_t *)&g25 = g44;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405f70",
            "funcStartAddr": "405f70",
            "funcEndAddr": "405f88",
            "decompiledFuncCode": "int64_t function_405f70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405f70\n    return function_405f10(1);\n}\n"
        },
        {
            "funcName": "function_405f90",
            "funcStartAddr": "405f90",
            "funcEndAddr": "405fa3",
            "decompiledFuncCode": "int64_t function_405f90(int64_t a1, int64_t a2, char * a3, char (**a4)[10], int32_t a5, int64_t a6) {\n    // 0x405f90\n    return function_405f10(0);\n}\n"
        },
        {
            "funcName": "function_405fb0",
            "funcStartAddr": "405fb0",
            "funcEndAddr": "405fc5",
            "decompiledFuncCode": "int64_t function_405fb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405fb0\n    return function_405940(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405fd0",
            "funcStartAddr": "405fd0",
            "funcEndAddr": "405fe6",
            "decompiledFuncCode": "int64_t function_405fd0(void) {\n    // 0x405fd0\n    return function_405f10(0);\n}\n"
        },
        {
            "funcName": "function_405ff0",
            "funcStartAddr": "405ff0",
            "funcEndAddr": "406008",
            "decompiledFuncCode": "int64_t function_405ff0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405ff0\n    return function_405940(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406010",
            "funcStartAddr": "406010",
            "funcEndAddr": "40608a",
            "decompiledFuncCode": "int64_t function_406010(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40601b\n    int64_t v2 = (int64_t)&g11; // 0x40601b\n    int32_t * pwc; // 0x406010\n    int64_t v3; // 0x406010\n    int64_t n; // 0x406010\n    if (a2 == 0) {\n        goto lab_0x406062;\n    } else {\n        // 0x40601d\n        if (a3 == 0) {\n            // 0x406048\n            return -2;\n        }\n        // 0x406029\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x406062;\n        } else {\n            goto lab_0x406034;\n        }\n    }\n  lab_0x406062:\n    // 0x406062\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x406010\n    pwc = (int32_t *)&v4;\n    goto lab_0x406034;\n  lab_0x406034:;\n    char * wstr = (char *)v3; // 0x40603a\n    int64_t ps; // 0x406010\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40603a\n    int64_t result = v5; // 0x40603a\n    if (v5 < 0xfffffffe) {\n        // 0x406048\n        return result;\n    }\n    int64_t result2 = result; // 0x406079\n    if ((char)function_406090(0, v3) == 0) {\n        // 0x40607b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x406048\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406090",
            "funcStartAddr": "406090",
            "funcEndAddr": "4060ee",
            "decompiledFuncCode": "int64_t function_406090(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x406096\n    if (locale == NULL) {\n        // 0x4060c3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x406096\n    bool v2; // 0x406090\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g12; // 0x406090\n    int64_t v5 = v1; // 0x406090\n    int64_t v6 = 2; // 0x4060b5\n    unsigned char v7 = *(char *)v5; // 0x4060b5\n    char v8 = *(char *)v4; // 0x4060b5\n    char v9 = v8; // 0x4060b5\n    bool v10 = false; // 0x4060b5\n    while (v7 == v8) {\n        // 0x4060a8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4060c1\n    int64_t v13 = v1; // 0x4060c1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4060c3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4060c1\n    unsigned char v15 = *(char *)v13; // 0x4060dd\n    char v16 = *(char *)v12; // 0x4060dd\n    char v17 = v16; // 0x4060dd\n    bool v18 = false; // 0x4060dd\n    while (v15 == v16) {\n        // 0x4060d0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4060f0",
            "funcStartAddr": "4060f0",
            "funcEndAddr": "406652",
            "decompiledFuncCode": "int64_t function_4060f0(void) {\n    char * v1 = nl_langinfo(14); // 0x406106\n    char * v2 = g46; // 0x40610b\n    char * v3; // 0x4060f0\n    int64_t v4; // 0x4060f0\n    int64_t v5; // 0x4060f0\n    int64_t v6; // 0x4060f0\n    int64_t v7; // 0x4060f0\n    int32_t size; // 0x4060f0\n    int32_t size2; // 0x4060f0\n    int32_t len; // 0x4061c2\n    int64_t v8; // 0x4061c2\n    char * env_val; // 0x4061ad\n    if (v2 == NULL) {\n        // 0x4061a8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406215;\n        } else {\n            // 0x4061ba\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406215;\n            } else {\n                // 0x4061bf\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4061ad\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x406645\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406215;\n                    } else {\n                        // 0x4065b9\n                        size2 = len + 14;\n                        goto lab_0x4061db;\n                    }\n                } else {\n                    goto lab_0x4061db;\n                }\n            }\n        }\n    } else {\n        // 0x4060f0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40612a;\n    }\n  lab_0x40645c:;\n    // 0x40645c\n    struct _IO_FILE * stream; // 0x40629b\n    int32_t v10 = __uflow(stream); // 0x40645f\n    int64_t v11; // 0x4060f0\n    int64_t v12 = v11; // 0x406469\n    int64_t v13; // 0x4060f0\n    int64_t v14 = v13; // 0x406469\n    int32_t v15 = v10; // 0x406469\n    int64_t v16; // 0x4060f0\n    int64_t v17 = v16; // 0x406469\n    int64_t v18 = v11; // 0x406469\n    int64_t v19 = v13; // 0x406469\n    int64_t v20 = v16; // 0x406469\n    if (v10 == -1) {\n        // break -> 0x40646f\n        goto lab_0x40646f;\n    }\n    goto lab_0x4062e9;\n  lab_0x4062de:;\n    // 0x4062de\n    int64_t v90; // 0x4060f0\n    int64_t * v32; // 0x4062d0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4060f0\n    v12 = v89;\n    int64_t v91; // 0x4060f0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4060f0\n    v17 = v92;\n    goto lab_0x4062e9;\n  lab_0x4062e9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4060f0\n    int32_t v25; // bp-120, 0x4060f0\n    int32_t v26; // bp-184, 0x4060f0\n    int64_t v27; // 0x40629b\n    int64_t v28; // 0x4062b8\n    int64_t v29; // 0x4062bd\n    int64_t * v30; // 0x4062d4\n    switch (c) {\n        case 32: {\n            goto lab_0x4062d0;\n        }\n        case 10: {\n            goto lab_0x4062d0;\n        }\n        case 9: {\n            goto lab_0x4062d0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4064c1\n            int32_t v33; // 0x4060f0\n            char v34; // 0x4060f0\n            int32_t v35; // 0x4064ce\n            if (v31 < *v30) {\n                // 0x4064a0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4064cb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4064c1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4064a0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4064cb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x4064b0\n                v36 = v33;\n            }\n            // 0x40659f\n            if (v36 == -1) {\n                // break -> 0x40646f\n                break;\n            }\n            goto lab_0x4062d0;\n        }\n        default: {\n            // 0x4062ff\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40646f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406328\n            int64_t v39 = v37 + 4; // 0x40632a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406336\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406338\n            while (v41 == 0) {\n                // 0x406328\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406356\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406362\n            int64_t v45 = v43 + 4; // 0x406364\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x406370\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x406372\n            while (v47 == 0) {\n                // 0x406362\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40635f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406388\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x406398\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40639c\n            int64_t v52 = v51 + v48; // 0x4063a5\n            int64_t * mem; // 0x4060f0\n            int64_t v53; // 0x4060f0\n            int64_t v54; // 0x4060f0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4064db\n                int64_t v56 = v55 + 3; // 0x4064e7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4063c1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4063d0\n            if (mem == NULL) {\n                // 0x4065fc\n                free((int64_t *)v21);\n                function_405120(v27, v53);\n                v24 = (int64_t)&g11;\n                goto lab_0x406274;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4063e8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x4063f2\n            uint32_t v62 = (int32_t)v59; // 0x4063f5\n            int64_t v63; // 0x4060f0\n            if (v62 >= 8) {\n                // 0x406504\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40651e\n                int64_t v66 = v61 - v65; // 0x406522\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40652d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40653e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40653e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40653b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4065cf\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406407\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40640b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40641b\n            int64_t v74 = v60 - 1; // 0x40641f\n            uint32_t v75 = (int32_t)v73; // 0x406424\n            int64_t v76; // 0x4060f0\n            if (v75 >= 8) {\n                // 0x406552\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40655c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40656c\n                int64_t v80 = v74 - v79; // 0x406570\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40657b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40658b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x406589\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x4065e6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x4065ee\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406436\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40643a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x406633\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40644e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4062de;\n            } else {\n                goto lab_0x40645c;\n            }\n        }\n    }\n  lab_0x4062d0:;\n    int64_t v93 = v23; // 0x4060f0\n    int64_t v94 = v22; // 0x4060f0\n    int64_t v95 = v21; // 0x4060f0\n    goto lab_0x4062d0_2;\n  lab_0x406215:;\n    int64_t * mem3 = malloc(size); // 0x406215\n    int64_t v97 = (int64_t)&g11; // 0x406220\n    int64_t v98; // 0x4060f0\n    int64_t path; // 0x4060f0\n    if (mem3 == NULL) {\n        goto lab_0x4061f2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406215\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406236;\n    }\n  lab_0x40612a:;\n    int64_t str = v1 == NULL ? (int64_t)&g11 : (int64_t)v1; // 0x40611d\n    char v100 = *v3; // 0x40612a\n    int64_t v101; // 0x4060f0\n    if (v100 == 0) {\n        // 0x406184\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4060f0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4060f0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x406170\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x406177;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406140\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40614d\n        char v107 = *(char *)v106; // 0x406152\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x406184\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40615b\n    v104 = v103 + 1;\n  lab_0x406177:\n    // 0x406184\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4061f2:;\n    char * v108 = (char *)v97;\n    g46 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40612a;\n  lab_0x406236:;\n    int64_t v109 = v98 + path; // 0x406236\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x406262\n    v24 = (int64_t)&g11;\n    if (fd >= 0) {\n        // 0x406291\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4065c2\n            close(fd);\n            v24 = (int64_t)&g11;\n        } else {\n            // 0x4062b5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4062d0_2:;\n                uint64_t v96 = *v32; // 0x4062d0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40645c;\n                } else {\n                    goto lab_0x4062de;\n                }\n            }\n          lab_0x40646f:\n            // 0x40646f\n            function_405120(v27, v19);\n            v24 = (int64_t)&g11;\n            if (v18 != 0) {\n                // 0x40648e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x406274;\n  lab_0x4061db:;\n    int64_t * mem4 = malloc(size2); // 0x4061db\n    v97 = (int64_t)&g11;\n    if (mem4 != NULL) {\n        // 0x406281\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406236;\n    } else {\n        goto lab_0x4061f2;\n    }\n  lab_0x406274:\n    // 0x406274\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4061f2;\n}\n"
        },
        {
            "funcName": "function_406660",
            "funcStartAddr": "406660",
            "funcEndAddr": "406683",
            "decompiledFuncCode": "int64_t function_406660(int64_t a1) {\n    int64_t result = function_404e90(24); // 0x406669\n    *(int64_t *)result = a1;\n    *(int64_t *)(result + 16) = 0;\n    *(int64_t *)(result + 8) = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406690",
            "funcStartAddr": "406690",
            "funcEndAddr": "4066bf",
            "decompiledFuncCode": "int64_t function_406690(void) {\n    // 0x406690\n    int64_t v1; // 0x406690\n    int64_t v2 = function_4068b0(v1, v1, v1); // 0x406691\n    int64_t result = 0; // 0x40669e\n    if (v2 != 0) {\n        // 0x4066a0\n        result = function_404e90(24);\n        *(int64_t *)result = v2;\n        *(int64_t *)(result + 16) = 0;\n        *(int64_t *)(result + 8) = 0;\n    }\n    // 0x4066bd\n    return result;\n}\n"
        },
        {
            "funcName": "function_4066c0",
            "funcStartAddr": "4066c0",
            "funcEndAddr": "4066c4",
            "decompiledFuncCode": "int64_t function_4066c0(int64_t result) {\n    // 0x4066c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4066d0",
            "funcStartAddr": "4066d0",
            "funcEndAddr": "4067c5",
            "decompiledFuncCode": "int64_t function_4066d0(int64_t a1, uint64_t a2) {\n    uint64_t v1 = a2 + 1; // 0x4066d7\n    int64_t * v2 = (int64_t *)(a1 + 8); // 0x4066eb\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x4066ef\n    int64_t v4 = *v3; // 0x4066f3\n    int64_t result = *v2; // 0x4066f3\n    int64_t v5; // 0x4066d0\n    while (true) {\n        int64_t v6 = result;\n        int64_t v7 = v4;\n        int64_t v8 = v7; // 0x406730\n        int64_t v9; // 0x4066d0\n        int64_t v10; // 0x4066d0\n        if (v7 >= a2) {\n            // 0x4066f8\n            v10 = v7;\n            v9 = v6;\n            v5 = v6;\n            if (v7 == a2) {\n                // break -> 0x40678f\n                break;\n            }\n        } else {\n            int64_t v11 = 1; // 0x406744\n            int64_t v12 = 256 * v8 | 255; // 0x406748\n            v8 = v12;\n            int64_t v13 = v11; // 0x406751\n            while (v12 < a2) {\n                // 0x406740\n                v11 = v13 + 1;\n                v12 = 256 * v8 | 255;\n                v8 = v12;\n                v13 = v11;\n            }\n            // 0x406753\n            int64_t v14; // bp-64, 0x4066d0\n            function_406bc0(a1, &v14, v11);\n            int64_t v15 = &v14; // 0x406765\n            int64_t v16 = 256 * v7 | 255; // 0x406777\n            int64_t v17 = 256 * v6 | (int64_t)*(char *)v15; // 0x40677e\n            v15++;\n            int64_t v18 = v16; // 0x406784\n            int64_t v19 = v17; // 0x406784\n            while (v16 < a2) {\n                // 0x406768\n                v16 = 256 * v18 | 255;\n                v17 = 256 * v19 | (int64_t)*(char *)v15;\n                v15++;\n                v18 = v16;\n                v19 = v17;\n            }\n            // 0x406786\n            v10 = v16;\n            v9 = v17;\n            v5 = v17;\n            if (v16 == a2) {\n                // break -> 0x40678f\n                break;\n            }\n        }\n        uint64_t v20 = v9;\n        uint64_t v21 = v10 - a2; // 0x406706\n        uint64_t v22 = v21 % v1;\n        result = v20 % v1;\n        v4 = v22 - 1;\n        if (v20 <= v10 - v22) {\n            // 0x4067b8\n            *v2 = v20 / v1;\n            *v3 = v21 / v1;\n            return result;\n        }\n    }\n    // 0x40678f\n    *v3 = 0;\n    *v2 = 0;\n    result = v5;\n  lab_0x40679f:\n    // 0x40679f\n    return result;\n}\n"
        },
        {
            "funcName": "function_4067d0",
            "funcStartAddr": "4067d0",
            "funcEndAddr": "4067ee",
            "decompiledFuncCode": "int64_t function_4067d0(int64_t a1) {\n    // 0x4067d0\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return &g50;\n}\n"
        },
        {
            "funcName": "function_4067f0",
            "funcStartAddr": "4067f0",
            "funcEndAddr": "406841",
            "decompiledFuncCode": "int64_t function_4067f0(int64_t a1) {\n    int64_t v1 = function_406d20(a1); // 0x406800\n    int32_t * v2 = __errno_location(); // 0x406808\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_406850",
            "funcStartAddr": "406850",
            "funcEndAddr": "4068ad",
            "decompiledFuncCode": "int64_t function_406850(int64_t a1) {\n    // 0x406850\n    function_404640(a1);\n    int32_t * err_num = __errno_location(); // 0x406867\n    char * format; // 0x406850\n    if (*err_num == 0) {\n        // 0x40689f\n        format = dcgettext(NULL, \"%s: end of file\", 5);\n    } else {\n        // 0x406879\n        format = dcgettext(NULL, \"%s: read error\", 5);\n    }\n    // 0x406885\n    error(g19, *err_num, format);\n    return &g50;\n}\n"
        },
        {
            "funcName": "function_4068b0",
            "funcStartAddr": "4068b0",
            "funcEndAddr": "406b9f",
            "decompiledFuncCode": "int64_t function_4068b0(int64_t a1, uint64_t a2, int64_t a3) {\n    if (a2 == 0) {\n        int64_t result = function_404e90(0x1038); // 0x4069cd\n        *(int64_t *)result = 0;\n        *(int64_t *)(result + 8) = 0x406850;\n        *(int64_t *)(result + 16) = 0;\n        // 0x406922\n        return result;\n    }\n    if (a1 != 0) {\n        int64_t stream = function_407260(a1, \"rb\"); // 0x4068d7\n        int64_t result2 = 0; // 0x4068e2\n        if (stream != 0) {\n            // 0x4068e8\n            result2 = function_404e90(0x1038);\n            *(int64_t *)result2 = stream;\n            int64_t size = a2 < 0x1000 ? a2 : 0x1000; // 0x406904\n            *(int64_t *)(result2 + 8) = 0x406850;\n            *(int64_t *)(result2 + 16) = a1;\n            setvbuf((struct _IO_FILE *)stream, (char *)(result2 + 24), 0, (int32_t)size);\n        }\n        // 0x406922\n        return result2;\n    }\n    int64_t result3 = function_404e90(0x1038); // 0x40693d\n    *(int64_t *)result3 = 0;\n    int64_t v1 = result3 + 32; // 0x406953\n    *(int64_t *)(result3 + 8) = 0x406850;\n    *(int64_t *)(result3 + 16) = 0;\n    *(int64_t *)(result3 + 24) = 0;\n    int32_t fd = open(\"/dev/urandom\", O_RDONLY); // 0x406971\n    int64_t v2; // 0x4068b0\n    int128_t pid2; // bp-72, 0x4068b0\n    if (fd < 0) {\n        // 0x4069f8\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_movups(*(int128_t *)v1, __asm_movdqa(0));\n        int32_t pid = getpid(); // 0x406a17\n        pid2 = pid;\n        *(int32_t *)(result3 + 48) = pid;\n        v2 = 20;\n    } else {\n        int32_t v3 = __read_chk(fd, (int64_t *)v1, (int32_t)(a2 < 2048 ? a2 : 2048), 0x1018); // 0x40699b\n        close(fd);\n        if (v3 >= 2048) {\n            // 0x4069b8\n            function_407020(v1);\n            // 0x406922\n            return result3;\n        }\n        int64_t v4 = v3 > 0 ? v3 : 0;\n        uint64_t v5 = 2048 - v4; // 0x406b26\n        int64_t v6 = v5 < 16 ? v5 : 16; // 0x406b32\n        uint64_t v7 = v6 + v4; // 0x406b38\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_rep_movsb_memcpy((char *)(v1 + v4), (char *)&pid2, v6);\n        if (v7 > 2047) {\n            // 0x4069b8\n            function_407020(v1);\n            // 0x406922\n            return result3;\n        }\n        uint64_t v8 = 2048 - v7; // 0x406b61\n        int64_t v9 = v8 < 4 ? v8 : 4; // 0x406b6d\n        pid2 = getpid();\n        int64_t v10 = v9 + v7; // 0x406b85\n        __asm_rep_movsb_memcpy((char *)(v7 + v1), (char *)&pid2, v9);\n        v2 = v10;\n        if (v10 >= 2048) {\n            // 0x4069b8\n            function_407020(v1);\n            // 0x406922\n            return result3;\n        }\n    }\n    int64_t v11 = &pid2;\n    uint64_t v12 = 2048 - v2; // 0x406a2d\n    int64_t v13 = v12 < 4 ? v12 : 4; // 0x406a34\n    pid2 = getppid();\n    if (v13 != 0) {\n        int64_t v14 = 0;\n        int64_t v15 = v14 + 1; // 0x406a50\n        *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        while ((int32_t)v15 < (int32_t)v13) {\n            // 0x406a4e\n            v14 = v15 & 0xffffffff;\n            v15 = v14 + 1;\n            *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        }\n    }\n    uint64_t v16 = v13 + v2; // 0x406a5f\n    if (v16 >= 2048) {\n        // 0x4069b8\n        function_407020(v1);\n        // 0x406922\n        return result3;\n    }\n    uint64_t v17 = 2048 - v16; // 0x406a7a\n    int64_t v18 = v17 < 4 ? v17 : 4; // 0x406a81\n    pid2 = getuid();\n    if (v18 != 0) {\n        int64_t v19 = 0;\n        int64_t v20 = v19 + 1; // 0x406a9f\n        *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        while ((int32_t)v20 < (int32_t)v18) {\n            // 0x406a9d\n            v19 = v20 & 0xffffffff;\n            v20 = v19 + 1;\n            *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        }\n    }\n    uint64_t v21 = v18 + v16; // 0x406aae\n    if (v21 >= 2048) {\n        // 0x4069b8\n        function_407020(v1);\n        // 0x406922\n        return result3;\n    }\n    // 0x406abe\n    pid2 = getgid();\n    uint64_t v22 = 2048 - v21; // 0x406ad6\n    int64_t v23 = v22 < 4 ? v22 : 4; // 0x406add\n    if (v23 == 0) {\n        // 0x4069b8\n        function_407020(v1);\n        // 0x406922\n        return result3;\n    }\n    int64_t v24 = 0;\n    int64_t v25 = v24 + 1; // 0x406aef\n    *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    while ((int32_t)v25 < (int32_t)v23) {\n        // 0x406aed\n        v24 = v25 & 0xffffffff;\n        v25 = v24 + 1;\n        *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    }\n    // 0x4069b8\n    function_407020(v1);\n    // 0x406922\n    return result3;\n}\n"
        },
        {
            "funcName": "function_406ba0",
            "funcStartAddr": "406ba0",
            "funcEndAddr": "406ba5",
            "decompiledFuncCode": "int64_t function_406ba0(int64_t a1, int64_t a2) {\n    // 0x406ba0\n    *(int64_t *)(a1 + 8) = a2;\n    int64_t result; // 0x406ba0\n    return result;\n}\n"
        },
        {
            "funcName": "function_406bb0",
            "funcStartAddr": "406bb0",
            "funcEndAddr": "406bb5",
            "decompiledFuncCode": "int64_t function_406bb0(int64_t a1, int64_t a2) {\n    // 0x406bb0\n    *(int64_t *)(a1 + 16) = a2;\n    int64_t result; // 0x406bb0\n    return result;\n}\n"
        },
        {
            "funcName": "function_406bc0",
            "funcStartAddr": "406bc0",
            "funcEndAddr": "406d1c",
            "decompiledFuncCode": "int64_t function_406bc0(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    if (a1 != 0) {\n        int32_t * v2 = __errno_location(); // 0x406bdf\n        int64_t result = fread_unlocked(a2, 1, (int32_t)a3, (struct _IO_FILE *)a1); // 0x406c1a\n        int64_t v3 = a3 - result; // 0x406c25\n        if (v3 == 0) {\n            // 0x406c2a\n            return result;\n        }\n        int64_t v4 = v3; // 0x406c25\n        int64_t v5 = result + v1; // 0x406c22\n        int64_t v6 = *(int64_t *)(a1 + 16); // 0x406bf4\n        *v2 = (v1 & 32) == 0 ? 0 : *v2;\n        int64_t result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6); // 0x406c1a\n        v4 -= result2;\n        while (v4 != 0) {\n            int64_t v7 = v5;\n            v5 = result2 + v7;\n            v6 = *(int64_t *)(a1 + 16);\n            *v2 = (v7 & 32) == 0 ? 0 : *v2;\n            result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6);\n            v4 -= result2;\n        }\n        // 0x406c2a\n        return result2;\n    }\n    int64_t v8 = *(int64_t *)24; // 0x406c40\n    int64_t v9 = a3; // 0x406c52\n    int64_t * v10; // 0x406bc0\n    int64_t v11; // 0x406bc0\n    int64_t v12; // 0x406bc0\n    int64_t v13; // 0x406bc0\n    if (v8 < a3) {\n        int64_t v14 = v8;\n        int64_t v15 = v14 + v1; // 0x406c63\n        v9 -= v14;\n        memcpy((int64_t *)v1, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        while (v15 % 8 != 0) {\n            // 0x406c7a\n            function_406d70(32, 2104);\n            v13 = v9;\n            v12 = v15;\n            v10 = (int64_t *)2104;\n            v11 = 2048;\n            if (v9 < 2049) {\n                goto lab_0x406cd5;\n            }\n            v14 = 2048;\n            int64_t v16 = v15;\n            v15 = v14 + v16;\n            v9 -= v14;\n            memcpy((int64_t *)v16, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        }\n        int64_t v17 = v15;\n        int64_t v18 = v9;\n        while (v18 >= 2048) {\n            int64_t result3 = function_406d70(32, v17); // 0x406cad\n            int64_t v19 = v18 - 2048; // 0x406cb2\n            if (v19 == 0) {\n                // 0x406cf8\n                *(int64_t *)24 = 0;\n                return result3;\n            }\n            v17 += 2048;\n            v18 = v19;\n        }\n        // 0x406cc4\n        function_406d70(32, 2104);\n        v13 = v18;\n        v12 = v17;\n        v10 = (int64_t *)2104;\n        v11 = 2048;\n    } else {\n        // 0x406d10\n        v13 = a3;\n        v12 = v1;\n        v10 = (int64_t *)(0x1038 - v8);\n        v11 = v8;\n    }\n  lab_0x406cd5:;\n    int64_t * dest_mem = memcpy((int64_t *)v12, v10, (int32_t)v13); // 0x406cde\n    *(int64_t *)24 = v11 - v13;\n    // 0x406c2a\n    return (int64_t)dest_mem;\n}\n"
        },
        {
            "funcName": "function_406d20",
            "funcStartAddr": "406d20",
            "funcEndAddr": "406d69",
            "decompiledFuncCode": "int64_t function_406d20(int64_t a1) {\n    // 0x406d20\n    __explicit_bzero_chk(a1, 0x1038, -1);\n    free((int64_t *)a1);\n    if (a1 == 0) {\n        // 0x406d60\n        return 0;\n    }\n    // 0x406d4a\n    return function_405120(a1, 0x1038);\n}\n"
        },
        {
            "funcName": "function_406d70",
            "funcStartAddr": "406d70",
            "funcEndAddr": "407015",
            "decompiledFuncCode": "int64_t function_406d70(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 2064); // 0x406d70\n    int64_t * v2 = (int64_t *)(a1 + 2056); // 0x406d77\n    int64_t * v3 = (int64_t *)(a1 + 2048); // 0x406d86\n    int64_t v4 = *v1 + 1; // 0x406d90\n    *v1 = v4;\n    int64_t v5 = a2; // 0x406da1\n    int64_t v6 = *v3;\n    int64_t v7 = a1;\n    int64_t * v8 = (int64_t *)v7; // 0x406db2\n    int64_t v9 = *v8; // 0x406db2\n    uint64_t v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6); // 0x406db8\n    uint64_t v11 = v10 + *v2 + v4 + *(int64_t *)((v9 & 2040) + a1); // 0x406dd3\n    *v8 = v11;\n    int64_t v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9; // 0x406df2\n    *(int64_t *)v5 = v12;\n    int64_t * v13 = (int64_t *)(v7 + 8); // 0x406df8\n    int64_t v14 = *v13; // 0x406df8\n    int64_t v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10); // 0x406dfc\n    uint64_t v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1); // 0x406e20\n    *v13 = v16;\n    int64_t v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14; // 0x406e35\n    *(int64_t *)(v5 + 8) = v17;\n    int64_t * v18 = (int64_t *)(v7 + 16); // 0x406e3c\n    int64_t v19 = *v18; // 0x406e3c\n    uint64_t v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15); // 0x406e40\n    uint64_t v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1); // 0x406e5b\n    *v18 = v21;\n    int64_t v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19; // 0x406e6d\n    *(int64_t *)(v5 + 16) = v22;\n    int64_t * v23 = (int64_t *)(v7 + 24); // 0x406e78\n    int64_t v24 = *v23; // 0x406e78\n    int64_t v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20); // 0x406e89\n    uint64_t v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1); // 0x406ea0\n    int64_t v27 = v7 + 32; // 0x406ea3\n    *v23 = v26;\n    int64_t v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24; // 0x406ebd\n    *(int64_t *)(v5 + 24) = v28;\n    v5 += 32;\n    while (v7 != a1 + 992) {\n        // 0x406da8\n        v6 = v25;\n        v7 = v27;\n        v8 = (int64_t *)v7;\n        v9 = *v8;\n        v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6);\n        v11 = v10 + v28 + *(int64_t *)((v9 & 2040) + a1);\n        *v8 = v11;\n        v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9;\n        *(int64_t *)v5 = v12;\n        v13 = (int64_t *)(v7 + 8);\n        v14 = *v13;\n        v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10);\n        v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1);\n        *v13 = v16;\n        v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14;\n        *(int64_t *)(v5 + 8) = v17;\n        v18 = (int64_t *)(v7 + 16);\n        v19 = *v18;\n        v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15);\n        v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1);\n        *v18 = v21;\n        v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19;\n        *(int64_t *)(v5 + 16) = v22;\n        v23 = (int64_t *)(v7 + 24);\n        v24 = *v23;\n        v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20);\n        v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1);\n        v27 = v7 + 32;\n        *v23 = v26;\n        v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24;\n        *(int64_t *)(v5 + 24) = v28;\n        v5 += 32;\n    }\n    int64_t v29 = a2 + 1024; // 0x406edb\n    int64_t v30 = v25;\n    int64_t v31 = v27;\n    int64_t * v32 = (int64_t *)v31; // 0x406eea\n    int64_t v33 = *v32; // 0x406eea\n    uint64_t v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30); // 0x406ef0\n    uint64_t v35 = v34 + v28 + *(int64_t *)((v33 & 2040) + a1); // 0x406f15\n    *v32 = v35;\n    int64_t v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33; // 0x406f26\n    *(int64_t *)v29 = v36;\n    int64_t * v37 = (int64_t *)(v31 + 8); // 0x406f2d\n    int64_t v38 = *v37; // 0x406f2d\n    int64_t v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34); // 0x406f34\n    uint64_t v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1); // 0x406f58\n    *v37 = v40;\n    int64_t v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38; // 0x406f6d\n    *(int64_t *)(v29 + 8) = v41;\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x406f74\n    int64_t v43 = *v42; // 0x406f74\n    uint64_t v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39); // 0x406f78\n    uint64_t v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1); // 0x406f93\n    *v42 = v45;\n    int64_t v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43; // 0x406fa5\n    *(int64_t *)(v29 + 16) = v46;\n    int64_t * v47 = (int64_t *)(v31 + 24); // 0x406fb0\n    int64_t v48 = *v47; // 0x406fb0\n    int64_t v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44); // 0x406fc1\n    uint64_t v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1); // 0x406fd8\n    int64_t result = v31 + 32; // 0x406fdb\n    *v47 = v50;\n    int64_t v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48; // 0x406ff5\n    *(int64_t *)(v29 + 24) = v51;\n    v29 += 32;\n    while (v31 != a1 + 2016) {\n        // 0x406ee0\n        v30 = v49;\n        v31 = result;\n        v32 = (int64_t *)v31;\n        v33 = *v32;\n        v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30);\n        v35 = v34 + v51 + *(int64_t *)((v33 & 2040) + a1);\n        *v32 = v35;\n        v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33;\n        *(int64_t *)v29 = v36;\n        v37 = (int64_t *)(v31 + 8);\n        v38 = *v37;\n        v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34);\n        v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1);\n        *v37 = v40;\n        v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38;\n        *(int64_t *)(v29 + 8) = v41;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v42;\n        v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39);\n        v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1);\n        *v42 = v45;\n        v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43;\n        *(int64_t *)(v29 + 16) = v46;\n        v47 = (int64_t *)(v31 + 24);\n        v48 = *v47;\n        v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44);\n        v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1);\n        result = v31 + 32;\n        *v47 = v50;\n        v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48;\n        *(int64_t *)(v29 + 24) = v51;\n        v29 += 32;\n    }\n    // 0x407005\n    *v3 = v49;\n    *v2 = v51;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407020",
            "funcStartAddr": "407020",
            "funcEndAddr": "407254",
            "decompiledFuncCode": "int64_t function_407020(int64_t a1) {\n    int64_t v1 = a1 + 2048; // 0x407067\n    int64_t v2 = a1; // 0x407083\n    int64_t * v3 = (int64_t *)v2; // 0x407088\n    int64_t * v4 = (int64_t *)(v2 + 32); // 0x40708b\n    int64_t v5 = *v4 - 0x7d0fac247caa1f32; // 0x40708b\n    int64_t * v6 = (int64_t *)(v2 + 56); // 0x40708f\n    uint64_t v7 = *v6 - 0x670a8fb093bb3f55; // 0x40708f\n    int64_t * v8 = (int64_t *)(v2 + 40); // 0x407093\n    int64_t * v9 = (int64_t *)(v2 + 48); // 0x40709a\n    int64_t v10 = *v3 - v5 + 0x647c4677a2884b7c; // 0x40709e\n    int64_t v11 = *v8 + 0x48fe4a0fa5a09315 ^ v7 / 512; // 0x4070ab\n    int64_t * v12 = (int64_t *)(v2 + 8); // 0x4070ae\n    uint64_t v13 = *v12 - v11 - 0x46074cdd38c5379e; // 0x4070b5\n    int64_t v14 = *v9 - 0x5167a40d34037613 ^ 512 * v10; // 0x4070c2\n    int64_t * v15 = (int64_t *)(v2 + 16); // 0x4070c5\n    int64_t v16 = *v15 - v14 - 0x73f15afac2b8ed60; // 0x4070cc\n    int64_t v17 = v13 / 0x800000 ^ v10 + v7; // 0x4070d9\n    int64_t * v18 = (int64_t *)(v2 + 24); // 0x4070dc\n    uint64_t v19 = *v18 - v17 - 0x4d64d17db5a6aadc; // 0x4070e3\n    int64_t v20 = 0x8000 * v16 ^ v13 + v10; // 0x4070f0\n    int64_t v21 = v5 - v20; // 0x4070f6\n    *v3 = v20;\n    int64_t v22 = v19 / 0x4000 ^ v16 + v13; // 0x407100\n    uint64_t v23 = v11 - v22; // 0x407109\n    *v12 = v22;\n    int64_t v24 = v19 + v16 ^ 0x100000 * v21; // 0x407114\n    int64_t v25 = v14 - v24; // 0x40711e\n    *v15 = v24;\n    v2 += 64;\n    int64_t v26 = v23 / 0x20000 ^ v19 + v21; // 0x40712d\n    int64_t v27 = v23 + v25; // 0x407133\n    int64_t v28 = v17 - v26; // 0x407136\n    *v18 = v26;\n    int64_t v29 = 0x4000 * v25 ^ v23 + v21; // 0x407141\n    int64_t v30 = v28 + v25; // 0x407144\n    *v8 = v27;\n    *v4 = v29;\n    *v9 = v30;\n    *v6 = v28;\n    int64_t v31 = a1; // 0x40715a\n    while (v1 != v2) {\n        // 0x407088\n        v3 = (int64_t *)v2;\n        v4 = (int64_t *)(v2 + 32);\n        v5 = *v4 + v29;\n        v6 = (int64_t *)(v2 + 56);\n        v7 = *v6 + v28;\n        v8 = (int64_t *)(v2 + 40);\n        v9 = (int64_t *)(v2 + 48);\n        v10 = *v3 - v5 + v20;\n        v11 = *v8 + v27 ^ v7 / 512;\n        v12 = (int64_t *)(v2 + 8);\n        v13 = *v12 - v11 + v22;\n        v14 = *v9 + v30 ^ 512 * v10;\n        v15 = (int64_t *)(v2 + 16);\n        v16 = *v15 - v14 + v24;\n        v17 = v13 / 0x800000 ^ v10 + v7;\n        v18 = (int64_t *)(v2 + 24);\n        v19 = *v18 - v17 + v26;\n        v20 = 0x8000 * v16 ^ v13 + v10;\n        v21 = v5 - v20;\n        *v3 = v20;\n        v22 = v19 / 0x4000 ^ v16 + v13;\n        v23 = v11 - v22;\n        *v12 = v22;\n        v24 = v19 + v16 ^ 0x100000 * v21;\n        v25 = v14 - v24;\n        *v15 = v24;\n        v2 += 64;\n        v26 = v23 / 0x20000 ^ v19 + v21;\n        v27 = v23 + v25;\n        v28 = v17 - v26;\n        *v18 = v26;\n        v29 = 0x4000 * v25 ^ v23 + v21;\n        v30 = v28 + v25;\n        *v8 = v27;\n        *v4 = v29;\n        *v9 = v30;\n        *v6 = v28;\n        v31 = a1;\n    }\n    int64_t * v32 = (int64_t *)(v31 + 56); // 0x407160\n    uint64_t v33 = *v32 + v28; // 0x407160\n    int64_t * v34 = (int64_t *)(v31 + 32); // 0x407164\n    int64_t v35 = *v34 + v29; // 0x407164\n    int64_t * v36 = (int64_t *)v31; // 0x407168\n    int64_t * v37 = (int64_t *)(v31 + 40); // 0x40716e\n    int64_t v38 = *v36 + v20 - v35; // 0x407172\n    int64_t * v39 = (int64_t *)(v31 + 8); // 0x407179\n    int64_t * v40 = (int64_t *)(v31 + 48); // 0x40717d\n    int64_t v41 = *v37 + v27 ^ v33 / 512; // 0x407181\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x407187\n    uint64_t v43 = *v39 + v22 - v41; // 0x40718e\n    int64_t * v44 = (int64_t *)(v31 + 24); // 0x407195\n    int64_t v45 = *v40 + v30 ^ 512 * v38; // 0x407199\n    int64_t v46 = *v42 + v24 - v45; // 0x4071a2\n    int64_t v47 = v43 / 0x800000 ^ v38 + v33; // 0x4071a9\n    uint64_t v48 = *v44 + v26 - v47; // 0x4071b2\n    int64_t v49 = 0x8000 * v46 ^ v43 + v38; // 0x4071b9\n    int64_t v50 = v35 - v49; // 0x4071c2\n    *v36 = v49;\n    int64_t v51 = v48 / 0x4000 ^ v46 + v43; // 0x4071cc\n    uint64_t v52 = v41 - v51; // 0x4071d5\n    *v39 = v51;\n    int64_t v53 = 0x100000 * v50 ^ v48 + v46; // 0x4071e0\n    int64_t result = v52 + v50; // 0x4071e3\n    int64_t v54 = v45 - v53; // 0x4071ea\n    *v42 = v53;\n    int64_t v55 = v31 + 64; // 0x4071f5\n    int64_t v56 = v52 / 0x20000 ^ v50 + v48; // 0x4071f9\n    int64_t v57 = v54 + v52; // 0x4071ff\n    int64_t v58 = v47 - v56; // 0x407202\n    *v44 = v56;\n    int64_t v59 = 0x4000 * v54 ^ result; // 0x40720d\n    int64_t v60 = v58 + v54; // 0x407210\n    *v37 = v57;\n    *v34 = v59;\n    *v40 = v60;\n    *v32 = v58;\n    v31 = v55;\n    while (v1 != v55) {\n        // 0x407160\n        v32 = (int64_t *)(v31 + 56);\n        v33 = *v32 + v58;\n        v34 = (int64_t *)(v31 + 32);\n        v35 = *v34 + v59;\n        v36 = (int64_t *)v31;\n        v37 = (int64_t *)(v31 + 40);\n        v38 = *v36 + v49 - v35;\n        v39 = (int64_t *)(v31 + 8);\n        v40 = (int64_t *)(v31 + 48);\n        v41 = *v37 + v57 ^ v33 / 512;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v39 + v51 - v41;\n        v44 = (int64_t *)(v31 + 24);\n        v45 = *v40 + v60 ^ 512 * v38;\n        v46 = *v42 + v53 - v45;\n        v47 = v43 / 0x800000 ^ v38 + v33;\n        v48 = *v44 + v56 - v47;\n        v49 = 0x8000 * v46 ^ v43 + v38;\n        v50 = v35 - v49;\n        *v36 = v49;\n        v51 = v48 / 0x4000 ^ v46 + v43;\n        v52 = v41 - v51;\n        *v39 = v51;\n        v53 = 0x100000 * v50 ^ v48 + v46;\n        result = v52 + v50;\n        v54 = v45 - v53;\n        *v42 = v53;\n        v55 = v31 + 64;\n        v56 = v52 / 0x20000 ^ v50 + v48;\n        v57 = v54 + v52;\n        v58 = v47 - v56;\n        *v44 = v56;\n        v59 = 0x4000 * v54 ^ result;\n        v60 = v58 + v54;\n        *v37 = v57;\n        *v34 = v59;\n        *v40 = v60;\n        *v32 = v58;\n        v31 = v55;\n    }\n    // 0x40722c\n    *(int64_t *)(a1 + 2064) = 0;\n    *(int64_t *)(a1 + 2056) = 0;\n    *(int64_t *)v1 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407260",
            "funcStartAddr": "407260",
            "funcEndAddr": "4072f3",
            "decompiledFuncCode": "int64_t function_407260(int64_t file_path, char * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, mode); // 0x407267\n    int64_t result = (int64_t)file; // 0x407267\n    if (file == NULL) {\n        // 0x407281\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x407277\n    if (v1 >= 3) {\n        // 0x407281\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_407300((int64_t)v1, v2); // 0x40729a\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x4072d8\n        function_405120(result, v2);\n        // 0x407281\n        return 0;\n    }\n    // 0x40729e\n    if ((int32_t)function_405120(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, mode); // 0x4072b0\n        if (v4 != NULL) {\n            // 0x407281\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x4072bd\n    close(fd);\n    // 0x407281\n    return 0;\n}\n"
        },
        {
            "funcName": "function_407300",
            "funcStartAddr": "407300",
            "funcEndAddr": "40730e",
            "decompiledFuncCode": "int64_t function_407300(int64_t a1, int64_t a2) {\n    // 0x407300\n    int64_t v1; // 0x407300\n    return function_407310(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_407310",
            "funcStartAddr": "407310",
            "funcEndAddr": "407445",
            "decompiledFuncCode": "int64_t function_407310(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x4073f0\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40734c\n    int64_t v2; // 0x407310\n    if (g47 < 0) {\n        int64_t v3 = function_407310(fd, 0, v1, a4); // 0x407394\n        int64_t v4 = v3 & 0xffffffff; // 0x407399\n        if ((int32_t)v3 < 0) {\n            // 0x407380\n            return v4 & 0xffffffff;\n        }\n        // 0x40739f\n        v2 = v4;\n        if (g47 != -1) {\n            // 0x407380\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x407367\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x407376\n            g47 = 1;\n            // 0x407380\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_407310(fd & 0xffffffff, 0, v1, a4); // 0x407427\n        int64_t v7 = v6 & 0xffffffff; // 0x40742c\n        if ((int32_t)v6 < 0) {\n            // 0x407380\n            return v7 & 0xffffffff;\n        }\n        // 0x407436\n        g47 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x4073af\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x4073ba\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x407380\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x4073d2\n    close(fd2);\n    // 0x407380\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_407450",
            "funcStartAddr": "407450",
            "funcEndAddr": "4074ad",
            "decompiledFuncCode": "int64_t function_407450(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407450\n    return function_401750();\n}\n"
        },
        {
            "funcName": "function_4074b0",
            "funcStartAddr": "4074b0",
            "funcEndAddr": "4074b1",
            "decompiledFuncCode": "int64_t function_4074b0(void) {\n    // 0x4074b0\n    int64_t result; // 0x4074b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4074c0",
            "funcStartAddr": "4074c0",
            "funcEndAddr": "4074d8",
            "decompiledFuncCode": "int64_t function_4074c0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4074c0\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_4074d8",
            "funcStartAddr": "4074d8",
            "funcEndAddr": "4074f8",
            "decompiledFuncCode": "int64_t function_4074d8(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x4074e2\n    while (*(int64_t *)v1 != -1) {\n        // 0x4074e3\n        v1 -= 8;\n    }\n    // 0x4074f4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_mktemp.elf"
}