{
    "funcInfo": [
        {
            "funcName": "function_401670",
            "funcStartAddr": "401670",
            "funcEndAddr": "401675",
            "decompiledFuncCode": "int64_t function_401670(void) {\n    // 0x401670\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401675",
            "funcStartAddr": "401675",
            "funcEndAddr": "40167a",
            "decompiledFuncCode": "int64_t function_401675(void) {\n    // 0x401675\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40167a",
            "funcStartAddr": "40167a",
            "funcEndAddr": "40167f",
            "decompiledFuncCode": "int64_t function_40167a(void) {\n    // 0x40167a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40167f",
            "funcStartAddr": "40167f",
            "funcEndAddr": "401684",
            "decompiledFuncCode": "int64_t function_40167f(void) {\n    // 0x40167f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401684",
            "funcStartAddr": "401684",
            "funcEndAddr": "401689",
            "decompiledFuncCode": "int64_t function_401684(void) {\n    // 0x401684\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401689",
            "funcStartAddr": "401689",
            "funcEndAddr": "40168e",
            "decompiledFuncCode": "int64_t function_401689(void) {\n    // 0x401689\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401690",
            "funcStartAddr": "401690",
            "funcEndAddr": "401950",
            "decompiledFuncCode": "int64_t function_401690(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    uint64_t v1 = a1 & 0xffffffff; // 0x40169c\n    function_4023a0(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_405e20(0x401db0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v2; // 0x401690\n    while (true) {\n        // 0x4016e0\n        v2 = 0;\n        while (true) {\n          lab_0x4016e0:;\n            uint32_t v3 = (int32_t)function_405560(v1, a2, \"m:Z\", &g2, 0, a6);\n            switch (v3) {\n                case -1: {\n                    goto lab_0x401795;\n                }\n                case -130: {\n                    // 0x4018db\n                    function_401a30(0);\n                    // UNREACHABLE\n                }\n                default: {\n                    if (v3 <= 0xffffff7e) {\n                        if (v3 == -131) {\n                            // 0x40174b\n                            function_404440((int64_t)g29, \"mkfifo\", \"GNU coreutils\", (int64_t)g17, \"David MacKenzie\", 0);\n                            exit(0);\n                            // UNREACHABLE\n                        }\n                        goto lab_0x401901;\n                    }\n                    if (v3 != 90) {\n                        // break -> 0x401780\n                        break;\n                    }\n                    // 0x401712\n                    if (g46 != 0) {\n                        // 0x40171c\n                        error(0, (int32_t)\"warning: ignoring --context; it requires an SELinux/SMACK-enabled kernel\" ^ (int32_t)\"warning: ignoring --context; it requires an SELinux/SMACK-enabled kernel\", dcgettext(NULL, \"warning: ignoring --context; it requires an SELinux/SMACK-enabled kernel\", 5));\n                    }\n                    goto lab_0x4016e0;\n                }\n            }\n        }\n    }\n  lab_0x401795:\n    // 0x401795\n    if (*(int32_t *)0x60923c == (int32_t)a1) {\n        // 0x4018e2\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n      lab_0x401901:\n        // 0x401901\n        function_401a30(1);\n        // UNREACHABLE\n    }\n    int64_t v4 = 438; // 0x4017a4\n    if (v2 != 0) {\n        int64_t v5 = function_401e50(v2); // 0x4017ad\n        char * format; // 0x401939\n        if (v5 == 0) {\n            // 0x40192d\n            format = dcgettext(NULL, \"invalid mode\", 5);\n            error(1, (int32_t)\"invalid mode\" ^ (int32_t)\"invalid mode\", format);\n            return &g49;\n        }\n        uint32_t cmask = umask(0); // 0x4017c0\n        umask(cmask);\n        int64_t v6 = function_402220(438, 0, (int64_t)cmask, v5, 0); // 0x4017df\n        free((int64_t *)v5);\n        v4 = v6 & 0xffffffff;\n        if ((v6 & 0xfffffe00) != 0) {\n            // 0x40190b\n            error(1, (int32_t)\"mode must specify only file permission bits\" ^ (int32_t)\"mode must specify only file permission bits\", dcgettext(NULL, \"mode must specify only file permission bits\", 5));\n            // 0x40192d\n            format = dcgettext(NULL, \"invalid mode\", 5);\n            error(1, (int32_t)\"invalid mode\" ^ (int32_t)\"invalid mode\", format);\n            return &g49;\n        }\n    }\n    int64_t v7 = g26; // 0x4017fc\n    if (v1 <= v7) {\n        // 0x4018a8\n        return 0;\n    }\n    int32_t mode = v4; // 0x401843\n    int64_t v8 = v7; // 0x401690\n    int64_t v9 = 0; // 0x401690\n    int64_t v10; // 0x401690\n    int64_t v11; // 0x401690\n    while (true) {\n      lab_0x401841:;\n        int64_t pathname = *(int64_t *)((0x100000000 * v8 >> 29) + a2); // 0x401846\n        if (mkfifo((char *)pathname, mode) == 0) {\n            int64_t v12 = v9;\n            v10 = v12;\n            if (v2 == 0) {\n                goto lab_0x40182e;\n            } else {\n                int64_t path = *(int64_t *)(8 * (int64_t)g26 + a2); // 0x40181d\n                v10 = v12;\n                if (chmod((char *)path, mode) != 0) {\n                    int32_t v13 = g26; // 0x4018b7\n                    int64_t v14 = *(int64_t *)(8 * (int64_t)v13 + a2); // 0x4018c3\n                    function_403d70(4, v14);\n                    v11 = (int64_t)\"cannot set permissions of %s\";\n                    goto lab_0x401875;\n                } else {\n                    goto lab_0x40182e;\n                }\n            }\n        } else {\n            // 0x401853\n            function_403d70(4, *(int64_t *)(8 * (int64_t)g26 + a2));\n            v11 = (int64_t)\"cannot create fifo %s\";\n            goto lab_0x401875;\n        }\n    }\n  lab_0x4018a8:;\n    // 0x4018a8\n    int64_t v15; // 0x401690\n    return v15 & 0xffffffff;\n  lab_0x40182e:\n    // 0x40182e\n    g26 = &g27;\n    v8 = &g27;\n    v9 = v10;\n    v15 = v10;\n    if (v1 <= (int64_t)&g27) {\n        // break -> 0x4018a8\n        goto lab_0x4018a8;\n    }\n    goto lab_0x401841;\n  lab_0x401875:\n    // 0x401875\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v11, 5));\n    v10 = 1;\n    goto lab_0x40182e;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401950",
            "funcEndAddr": "40197b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401950\n    int64_t v1; // 0x401950\n    __libc_start_main(0x401690, (int32_t)a4, (char **)&v1, (void (*)())0x405db0, (void (*)())0x405e10, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40197b",
            "funcStartAddr": "40197b",
            "funcEndAddr": "40199a",
            "decompiledFuncCode": "int64_t function_40197b(void) {\n    // 0x40197b\n    return &g28;\n}\n"
        },
        {
            "funcName": "function_40199a",
            "funcStartAddr": "40199a",
            "funcEndAddr": "4019d1",
            "decompiledFuncCode": "int64_t function_40199a(void) {\n    // 0x40199a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4019d1",
            "funcStartAddr": "4019d1",
            "funcEndAddr": "401a28",
            "decompiledFuncCode": "int64_t function_4019d1(void) {\n    // 0x4019d1\n    if (g32 != 0) {\n        // 0x401a27\n        int64_t result; // 0x4019d1\n        return result;\n    }\n    int64_t v1 = g33; // 0x401a04\n    int64_t result2; // 0x401a16\n    if (g33 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401a16\n        result2 = function_40197b();\n        g32 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401a06\n        v1++;\n    }\n    // 0x4019fa\n    g33 = v1;\n    // 0x401a16\n    result2 = function_40197b();\n    g32 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401a28",
            "funcStartAddr": "401a28",
            "funcEndAddr": "401a2d",
            "decompiledFuncCode": "int64_t function_401a28(void) {\n    // 0x401a28\n    return function_40199a();\n}\n"
        },
        {
            "funcName": "function_401a30",
            "funcStartAddr": "401a30",
            "funcEndAddr": "401d8d",
            "decompiledFuncCode": "int64_t function_401a30(int32_t status) {\n    // 0x401a30\n    if (status != 0) {\n        // 0x401a4a\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401a6f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401a76\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... NAME...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Create named pipes (FIFOs) with the given NAMEs.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -m, --mode=MODE    set file permission bits to MODE, not a=rw - umask\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -Z                   set the SELinux security context to default type\\n      --context[=CTX]  like -Z, or if CTX is specified then set the SELinux\\n                         or SMACK security context to CTX\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g29);\n    int64_t v1 = &g1; // bp-136, 0x401b66\n    bool v2; // 0x401a30\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x401bf0\n    int64_t v6 = *(int64_t *)v5; // 0x401bf4\n    int64_t v7 = 7; // 0x401bfa\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"mkfifo\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x401c06\n        char v11 = *(char *)v9; // 0x401c06\n        char v12 = v11; // 0x401c06\n        bool v13 = false; // 0x401c06\n        while (v10 == v11) {\n            // 0x401bfc\n            v7--;\n            int64_t v14 = v9 + v3; // 0x401c06\n            int64_t v15 = v8 + v3; // 0x401c06\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x401c12\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 7;\n    }\n    // 0x401c12\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x401d24;\n        } else {\n            // 0x401d0e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401d63\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401c74;\n            } else {\n                goto lab_0x401d24;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x401c74;\n        } else {\n            // 0x401c5a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401d63\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401c74;\n            } else {\n                goto lab_0x401c74;\n            }\n        }\n    }\n  lab_0x401d24:\n    // 0x401d24\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401cb4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401a6f\n    exit(status);\n    // UNREACHABLE\n  lab_0x401c74:\n    // 0x401c74\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401cb4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401a6f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d90",
            "funcStartAddr": "401d90",
            "funcEndAddr": "401d98",
            "decompiledFuncCode": "int64_t function_401d90(int64_t a1) {\n    // 0x401d90\n    g35 = a1;\n    int64_t result; // 0x401d90\n    return result;\n}\n"
        },
        {
            "funcName": "function_401da0",
            "funcStartAddr": "401da0",
            "funcEndAddr": "401da8",
            "decompiledFuncCode": "int64_t function_401da0(int64_t a1) {\n    // 0x401da0\n    g34 = a1;\n    int64_t result; // 0x401da0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401db0",
            "funcStartAddr": "401db0",
            "funcEndAddr": "401e4e",
            "decompiledFuncCode": "int64_t function_401db0(void) {\n    // 0x401db0\n    int32_t * err_num; // 0x401dc6\n    if ((int32_t)function_405660((int64_t)g29) == 0) {\n        goto lab_0x401ddc;\n    } else {\n        // 0x401dc6\n        err_num = __errno_location();\n        if (g34 == 0) {\n            goto lab_0x401df3;\n        } else {\n            // 0x401dd7\n            if (*err_num != 32) {\n                goto lab_0x401df3;\n            } else {\n                goto lab_0x401ddc;\n            }\n        }\n    }\n  lab_0x401ddc:;\n    int64_t result = function_405660((int64_t)g31); // 0x401de3\n    if ((int32_t)result == 0) {\n        // 0x401dec\n        return result;\n    }\n    // 0x401e2e\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x401df3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x401dff\n    if (g35 == 0) {\n        // 0x401e39\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x401e13\n        error(0, *err_num, \"%s: %s\", (char *)function_403e10((int64_t)g35), v1);\n    }\n    // 0x401e2e\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e50",
            "funcStartAddr": "401e50",
            "funcEndAddr": "4021b1",
            "decompiledFuncCode": "int64_t function_401e50(int64_t a1) {\n    // 0x401e50\n    int64_t v1; // 0x401e50\n    char v2 = v1;\n    int64_t v3 = 0x100000000000000 * v1 >> 56; // 0x401e5c\n    int64_t v4 = a1; // 0x401e64\n    if ((v2 & -8) == 48) {\n        int64_t v5 = 0xffffffd0 + v3; // 0x401f26\n        uint32_t v6 = (int32_t)v5;\n        while (v6 < 0x1000) {\n            // 0x401f18\n            v4++;\n            char v7 = *(char *)v4; // 0x401f18\n            if ((v7 & -8) != 48) {\n                // 0x402120\n                if (v7 == 0) {\n                    int64_t v8 = v4 - a1; // 0x40212a\n                    int32_t v9 = v8 < 5 == (4 - v8 & v8) < 0 ? 4095 : v6 & 3072 | 1023; // 0x402149\n                    int64_t result = function_404580(32); // 0x40214c\n                    *(int16_t *)result = 317;\n                    *(int32_t *)(result + 4) = 4095;\n                    *(int32_t *)(result + 8) = v6;\n                    *(int32_t *)(result + 12) = v9;\n                    *(char *)(result + 17) = 0;\n                    return result;\n                }\n                return 0;\n            }\n            v5 = (int64_t)v7 + 0xffffffd0 + 8 * (v5 & 0xffffffff);\n            v6 = (int32_t)v5;\n        }\n      lab_0x401f05:\n        // 0x401f05\n        return 0;\n    }\n    int64_t v10 = 1; // 0x401e71\n    int64_t v11 = a1; // 0x401e71\n    int64_t v12; // 0x401e50\n    if (v2 == 0) {\n        // 0x402178\n        v12 = 16;\n    } else {\n        int64_t v13 = v3;\n        v11++;\n        unsigned char v14 = *(char *)v11; // 0x401e96\n        v10 += (int64_t)((v13 & 239) == 45 | (char)v13 == 43);\n        while (v14 != 0) {\n            // 0x401e80\n            v13 = v14;\n            v11++;\n            v14 = *(char *)v11;\n            v10 += (int64_t)((v13 & 239) == 45 | (char)v13 == 43);\n        }\n        int64_t v15 = 16 * v10; // 0x401ead\n        if (v15 < 0) {\n            // 0x4021ac\n            function_4047d0(v15);\n            // UNREACHABLE\n        }\n        // 0x401eba\n        v12 = v15;\n        if (v10 >= 0x1000000000000000) {\n            // 0x4021ac\n            function_4047d0(v15);\n            // UNREACHABLE\n        }\n    }\n    int64_t v16 = function_404580(v12); // 0x401ec3\n    int64_t v17; // 0x401e50\n    int64_t v18; // 0x401e50\n    int64_t v19; // 0x401e50\n    int64_t v20; // 0x401e50\n    int64_t v21; // 0x401e50\n    int64_t v22; // 0x401e50\n    int64_t v23; // 0x401e50\n    int64_t v24; // 0x401e50\n    int64_t v25; // 0x401e50\n    int64_t v26; // 0x401e50\n    int64_t v27; // 0x401e50\n    int64_t v28; // 0x401e50\n    int64_t v29; // 0x401e50\n    int64_t v30; // 0x401e50\n    int64_t v31; // 0x401e50\n    int64_t v32; // 0x401e50\n    int64_t v33; // 0x401fb3\n    int64_t v34; // 0x401fb3\n    char v35; // 0x401e50\n    while (true) {\n        int64_t v36 = 0;\n        v32 = 0;\n        v18 = 0;\n        v26 = a1;\n        unsigned char v37; // 0x401ecd\n        while (true) {\n          lab_0x401ecd:\n            // 0x401ecd\n            v27 = v26;\n            v37 = *(char *)v27;\n            if (v37 == 97) {\n                // 0x4020e0\n                v32 = 4095;\n                v19 = 4095;\n                goto lab_0x4020e5;\n            } else {\n                if (v37 <= 97) {\n                    // break -> 0x401f40\n                    break;\n                }\n                int64_t v38 = v18; // 0x402110\n                switch (v37) {\n                    case 111: {\n                        int64_t v39 = v38 & 0xfffffdf8 | 519; // 0x402110\n                        v32 = v39;\n                        v19 = v39;\n                        goto lab_0x4020e5;\n                    }\n                    case 117: {\n                        int64_t v40 = v38 & 0xfffff63f | 2496; // 0x402100\n                        v32 = v40;\n                        v19 = v40;\n                        goto lab_0x4020e5;\n                    }\n                    case 103: {\n                        int64_t v41 = v38 & 0xfffffbc7 | 1080; // 0x4020f0\n                        v32 = v41;\n                        v19 = v41;\n                        goto lab_0x4020e5;\n                    }\n                    default: {\n                        goto lab_0x401efb_3;\n                    }\n                }\n            }\n        }\n        switch (v37) {\n            default: {\n                if (v37 != 43) {\n                    // break -> 0x401efb\n                    break;\n                }\n            }\n            case 45: {\n            }\n            case 61: {\n                // 0x401f52\n                v29 = v27;\n                v24 = v37;\n                v20 = 16 * v36 + v16;\n                v22 = v36;\n                // break -> 0x401fb3\n                break;\n            }\n        }\n        while (true) {\n          lab_0x401fb3:\n            // 0x401fb3\n            v21 = v20;\n            v25 = v24;\n            int64_t v42 = v29;\n            v33 = v42 + 1;\n            char v43 = *(char *)v33; // 0x401fb3\n            if (v43 == 103) {\n                // 0x4020d0\n                v17 = v42 + 2;\n                v30 = 56;\n                goto lab_0x401f6e;\n            } else {\n                // 0x401fc4\n                v34 = v43;\n                if (v43 > 103) {\n                    int64_t v44 = v42 + 2;\n                    v17 = v44;\n                    v30 = 7;\n                    if (v43 != 111) {\n                        // 0x401f60\n                        v17 = v44;\n                        v30 = 448;\n                        if (v43 != 117) {\n                            goto lab_0x402050;\n                        } else {\n                            goto lab_0x401f6e;\n                        }\n                    } else {\n                        goto lab_0x401f6e;\n                    }\n                } else {\n                    int64_t v45 = v34; // 0x401fe6\n                    int64_t v46 = v33; // 0x401fe6\n                    if ((v43 & -8) == 48) {\n                        int64_t v47 = 0xffffffd0 + v45; // 0x401fea\n                        uint32_t v48 = (int32_t)v47;\n                        if (v48 >= 0x1000) {\n                            // break (via goto) -> 0x401efb\n                            goto lab_0x401efb_3;\n                        }\n                        int64_t v49 = v46 + 1; // 0x401fee\n                        char v50 = *(char *)v49; // 0x401ffe\n                        int64_t v51 = v50; // 0x401ffe\n                        int64_t v52 = v47 & 0xffffffff; // 0x402009\n                        v46 = v49;\n                        while ((v50 & -8) == 48) {\n                            // 0x401fea\n                            v47 = v51 + 0xffffffd0 + 8 * v52;\n                            v48 = (int32_t)v47;\n                            if (v48 >= 0x1000) {\n                                // break (via goto) -> 0x401efb\n                                goto lab_0x401efb_3;\n                            }\n                            // 0x401ffe\n                            v49 = v46 + 1;\n                            v50 = *(char *)v49;\n                            v51 = v50;\n                            v52 = v47 & 0xffffffff;\n                            v46 = v49;\n                        }\n                        // 0x40200b\n                        if ((int32_t)v32 != 0) {\n                            // break (via goto) -> 0x401efb\n                            goto lab_0x401efb_3;\n                        }\n                        if (v50 != 0 == (v50 != 44)) {\n                            // break (via goto) -> 0x401efb\n                            goto lab_0x401efb_3;\n                        }\n                        // 0x402020\n                        *(char *)v21 = (char)v25;\n                        v32 = 4095;\n                        *(int32_t *)(v21 + 8) = v48;\n                        *(char *)(v21 + 1) = 1;\n                        *(int32_t *)(v21 + 4) = 4095;\n                        v31 = 4095;\n                        v28 = v49;\n                        v23 = v51 & 0xffffffff;\n                        goto lab_0x401f8f;\n                    } else {\n                        goto lab_0x402050;\n                    }\n                }\n            }\n        }\n      lab_0x402182:\n        // 0x402182\n        if (v35 != 44) {\n            if (v35 != 0) {\n                goto lab_0x401efb_3;\n            } else {\n                // 0x40219d\n                int64_t v53; // 0x401e50\n                *(char *)(v16 + 1 + 16 * v53) = 0;\n                return 0;\n            }\n        }\n    }\n  lab_0x401efb_3:\n    // 0x401efb\n    free((int64_t *)v16);\n    // 0x401f05\n    return (int32_t)&g49 ^ (int32_t)&g49;\n  lab_0x402078:;\n    // 0x402078\n    int64_t v54; // 0x401e50\n    int64_t v55 = v54 + 1; // 0x402078\n    int64_t v56 = (int64_t)*(char *)v55; // 0x40207c\n    int64_t v57 = v56 + 0xffffffa8; // 0x402080\n    int64_t v58; // 0x401e50\n    int64_t v59 = v58; // 0x402087\n    int64_t v60 = v56; // 0x402087\n    int64_t v61; // 0x401e50\n    int64_t v62 = v61; // 0x402087\n    int64_t v63 = v57; // 0x402087\n    int64_t v64 = v55; // 0x402087\n    if ((char)v57 >= 33) {\n        // break -> 0x402089\n        goto lab_0x402089_2;\n    }\n    goto lab_0x402060;\n  lab_0x401f6e:\n    // 0x401f6e\n    *(char *)(v21 + 1) = 3;\n    *(int32_t *)(v21 + 4) = (int32_t)v32;\n    *(int32_t *)(v21 + 8) = (int32_t)v30;\n    *(char *)v21 = (char)v25;\n    int64_t v72 = v30; // 0x401f83\n    int64_t v73 = v17; // 0x401f83\n    int64_t v74 = (int64_t)*(char *)v17; // 0x401f83\n    goto lab_0x401f86;\n  lab_0x401f86:;\n    int64_t v75 = v32;\n    v31 = v72 & 0xffffffff & ((int32_t)v75 != 0 ? v75 : 0xffffffff);\n    v28 = v73;\n    v23 = v74;\n    goto lab_0x401f8f;\n  lab_0x402050:\n    // 0x402050\n    v59 = 0;\n    v60 = v34;\n    v62 = 1;\n    v63 = v34 + 0xffffffa8;\n    v64 = v33;\n    int64_t v70; // 0x401e50\n    int64_t v69; // 0x401e50\n    int64_t v67; // 0x401e50\n    int64_t v68; // 0x401e50\n    while (true) {\n      lab_0x402060:\n        // 0x402060\n        v54 = v64;\n        int64_t v65 = v62;\n        int64_t v66 = v59;\n        g47 = v63 % 256;\n        v58 = v66;\n        v61 = 2;\n        v67 = v66;\n        v68 = v60;\n        v69 = v65;\n        v70 = v54;\n        uint64_t v71; // 0x401e50\n        switch ((char)v71) {\n            case 0: {\n                goto lab_0x402078;\n            }\n            case 26: {\n                // 0x4020c8\n                v58 = v66 & 0xfffffedb | 292;\n                v61 = v65;\n                goto lab_0x402078;\n            }\n            case 27: {\n                // 0x4020c0\n                v58 = v66 | 3072;\n                v61 = v65;\n                goto lab_0x402078;\n            }\n            case 28: {\n                // 0x4020b8\n                v58 = v66 | 512;\n                v61 = v65;\n                goto lab_0x402078;\n            }\n            case 31: {\n                // 0x4020b0\n                v58 = v66 | 146;\n                v61 = v65;\n                goto lab_0x402078;\n            }\n            case 32: {\n                // 0x4020a8\n                v58 = v66 & 0xffffffb6 | 73;\n                v61 = v65;\n                goto lab_0x402078;\n            }\n            default: {\n                goto lab_0x402089_2;\n            }\n        }\n    }\n  lab_0x402089_2:\n    // 0x402089\n    *(char *)v21 = (char)v25;\n    *(char *)(v21 + 1) = (char)v69;\n    *(int32_t *)(v21 + 4) = (int32_t)v32;\n    *(int32_t *)(v21 + 8) = (int32_t)v67;\n    v72 = v67;\n    v73 = v70;\n    v74 = v68 & 0xffffffff;\n    goto lab_0x401f86;\n  lab_0x401f8f:\n    // 0x401f8f\n    *(int32_t *)(v21 + 12) = (int32_t)v31;\n    if ((v23 & 239) != 45) {\n        // 0x401fa6\n        int64_t v76; // 0x401e50\n        v35 = v76;\n        if (v35 != 43) {\n            // break -> 0x402182\n            goto lab_0x402182;\n        }\n    }\n    // 0x401fb0\n    v29 = v28;\n    v24 = v23;\n    v20 = v21 + 16;\n    v22++;\n    goto lab_0x401fb3;\n  lab_0x4020e5:\n    // 0x4020e5\n    v18 = v19;\n    v26 = v27 + 1;\n    goto lab_0x401ecd;\n}\n"
        },
        {
            "funcName": "function_4021c0",
            "funcStartAddr": "4021c0",
            "funcEndAddr": "402214",
            "decompiledFuncCode": "int64_t function_4021c0(int64_t a1) {\n    // 0x4021c0\n    int64_t v1; // bp-152, 0x4021c0\n    int32_t v2 = __xstat(1, (char *)a1, (struct stat *)&v1); // 0x4021d3\n    int64_t result = 0; // 0x4021de\n    if (v2 == 0) {\n        // 0x4021e0\n        result = function_404580(32);\n        *(int16_t *)result = 317;\n        *(int32_t *)(result + 4) = 4095;\n        *(int32_t *)(result + 12) = 4095;\n        *(char *)(result + 17) = 0;\n    }\n    // 0x40220b\n    return result;\n}\n"
        },
        {
            "funcName": "function_402220",
            "funcStartAddr": "402220",
            "funcEndAddr": "40239d",
            "decompiledFuncCode": "int64_t function_402220(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int32_t a5) {\n    char v1 = *(char *)(a4 + 1); // 0x402220\n    int64_t v2 = a1 % 0x1000; // 0x402229\n    int64_t result = v2; // 0x402237\n    int64_t v3 = 0; // 0x402237\n    int64_t v4; // 0x402220\n    int64_t v5; // 0x402220\n    int64_t v6; // 0x402220\n    char v7; // 0x402220\n    char v8; // 0x402220\n    int64_t v9; // 0x402220\n    int64_t v10; // 0x402220\n    int64_t v11; // 0x402220\n    int64_t v12; // 0x402220\n    int64_t v13; // 0x402220\n    int64_t v14; // 0x402220\n    int64_t v15; // 0x402220\n    int64_t v16; // 0x402220\n    int64_t v17; // 0x402220\n    int64_t v18; // 0x402220\n    uint32_t v19; // 0x4022db\n    int64_t v20; // 0x4022df\n    if (v1 != 0) {\n        // 0x40223d\n        v10 = v2;\n        v14 = a4;\n        v12 = 0;\n        v7 = v1;\n        while (true) {\n          lab_0x4022db_2:\n            // 0x4022db\n            v8 = v7;\n            v13 = v12;\n            v15 = v14;\n            v11 = v10;\n            v19 = *(int32_t *)(v15 + 4);\n            v20 = (int64_t)*(int32_t *)(v15 + 8);\n            if ((char)a2 == 0) {\n                // 0x402250\n                v16 = 0;\n                v4 = 0xffffffff;\n                if (v8 == 2) {\n                    // 0x402390\n                    v17 = 0;\n                    v9 = v20;\n                    v5 = 0xffffffff;\n                    v18 = 0;\n                    v6 = 0xffffffff;\n                    if ((v11 & 73) == 0) {\n                        goto lab_0x4022a4;\n                    } else {\n                        goto lab_0x40230c;\n                    }\n                } else {\n                    goto lab_0x40225f;\n                }\n            } else {\n                int32_t v21 = *(int32_t *)(v15 + 12); // 0x4022ec\n                int64_t v22 = v21 | -3073; // 0x4022f3\n                int64_t v23 = v21 & 3072 ^ 3072; // 0x4022fc\n                v16 = v23;\n                v4 = v22;\n                v18 = v23;\n                v6 = v22;\n                if (v8 != 2) {\n                    goto lab_0x40225f;\n                } else {\n                    goto lab_0x40230c;\n                }\n            }\n        }\n    }\n  lab_0x402358_2:\n    // 0x402358\n    if (a5 != 0) {\n        // 0x40235d\n        *(int32_t *)(int64_t)a5 = (int32_t)v3;\n    }\n    // 0x402360\n    return result;\n  lab_0x40225f:;\n    int64_t v24 = v4;\n    int64_t v25 = v16;\n    v17 = v25;\n    v9 = v20;\n    v5 = v24;\n    if (v8 == 3) {\n        int64_t v26 = v11 & v20;\n        int64_t v27 = v26 & 292; // 0x40226b\n        int64_t v28 = (v27 | (int64_t)(v27 == 0)) + (v27 ^ 511) & 292;\n        int64_t v29 = (v26 & 146) != 0 ? v28 | 146 : v28; // 0x40228e\n        v17 = v25;\n        v9 = ((v26 & 73) != 0 ? v29 | 73 : v29) | v26;\n        v5 = v24;\n    }\n    goto lab_0x4022a4;\n  lab_0x40230c:;\n    int64_t v60 = (int64_t)*(char *)v15; // 0x402310\n    int64_t v61 = v6 & (v20 | 73); // 0x402314\n    int64_t v32 = v18; // 0x40231a\n    int64_t v33 = v61; // 0x40231a\n    int64_t v34 = v6; // 0x40231a\n    int64_t v35 = v60; // 0x40231a\n    int64_t v36 = v18; // 0x40231a\n    int64_t v37 = v61; // 0x40231a\n    int64_t v38 = v60; // 0x40231a\n    if (v19 == 0) {\n        goto lab_0x4022b0;\n    } else {\n        goto lab_0x402320;\n    }\n  lab_0x4022a4:;\n    int64_t v30 = (int64_t)*(char *)v15; // 0x4022a4\n    int64_t v31 = v9 & 0xffffffff & v5; // 0x4022a8\n    v32 = v17;\n    v33 = v31;\n    v34 = v5;\n    v35 = v30;\n    v36 = v17;\n    v37 = v31;\n    v38 = v30;\n    if (v19 != 0) {\n        goto lab_0x402320;\n    } else {\n        goto lab_0x4022b0;\n    }\n  lab_0x4022b0:;\n    int64_t v39 = v33 & (a3 & 0xffffffff ^ 0xffffffff);\n    int64_t v40 = v39; // 0x402220\n    int64_t v41 = v35; // 0x402220\n    int64_t v42 = v32; // 0x402220\n    int64_t v43 = v39; // 0x402220\n    int64_t v44 = v34; // 0x402220\n    int64_t v45 = v39; // 0x402220\n    int64_t v46; // 0x402220\n    switch ((char)v46) {\n        case 45: {\n            goto lab_0x402370;\n        }\n        case 61: {\n            goto lab_0x40233b;\n        }\n        default: {\n            goto lab_0x4022c3;\n        }\n    }\n  lab_0x402320:;\n    int64_t v47 = v19; // 0x4022db\n    int64_t v48 = v37 & v47;\n    char v49 = v38; // 0x402323\n    v45 = v48;\n    if (v49 == 45) {\n        goto lab_0x402370;\n    } else {\n        // 0x402329\n        if (v49 != 61) {\n            goto lab_0x4022c3;\n        } else {\n            int64_t v50 = v36 & 0xffffffff | v47 ^ 0xffffffff; // 0x402332\n            v42 = v50;\n            v43 = v48;\n            v44 = v50 ^ 0xffffffff;\n            goto lab_0x40233b;\n        }\n    }\n  lab_0x402370:;\n    int64_t v51 = v11 & 0xffffffff & (v45 ^ 0xffffffff); // 0x402379\n    int64_t v52 = (v45 | v13) & 0xffffffff; // 0x402379\n    goto lab_0x4022cd;\n  lab_0x40233b:;\n    char v57 = *(char *)(v15 + 17); // 0x40233f\n    int64_t v58 = v44 % 0x1000 | v13 & 0xffffffff; // 0x40234d\n    int64_t v59 = (v42 & v11 | v43) & 0xffffffff; // 0x402350\n    int64_t v54 = v59; // 0x402356\n    int64_t v55 = v58; // 0x402356\n    char v56 = v57; // 0x402356\n    result = v59;\n    v3 = v58;\n    if (v57 == 0) {\n        // break -> 0x402358\n        goto lab_0x402358_2;\n    }\n    goto lab_0x4022db;\n  lab_0x4022c3:\n    // 0x4022c3\n    v51 = v11;\n    v52 = v13;\n    if ((char)v41 == 43) {\n        // 0x402380\n        v51 = (v40 | v11) & 0xffffffff;\n        v52 = (v40 | v13) & 0xffffffff;\n    }\n    goto lab_0x4022cd;\n  lab_0x4022cd:;\n    char v53 = *(char *)(v15 + 17); // 0x4022d1\n    v54 = v51;\n    v55 = v52;\n    v56 = v53;\n    result = v51;\n    v3 = v52;\n    if (v53 == 0) {\n        // break -> 0x402358\n        goto lab_0x402358_2;\n    }\n    goto lab_0x4022db;\n  lab_0x4022db:\n    // 0x4022db\n    v10 = v54;\n    v14 = v15 + 16;\n    v12 = v55;\n    v7 = v56;\n    goto lab_0x4022db_2;\n}\n"
        },
        {
            "funcName": "function_4023a0",
            "funcStartAddr": "4023a0",
            "funcEndAddr": "402439",
            "decompiledFuncCode": "int64_t function_4023a0(int64_t str) {\n    // 0x4023a0\n    if (str == 0) {\n        // 0x402419\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g31);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4023ae\n    int64_t result = (int64_t)found_char_pos; // 0x4023ae\n    if (found_char_pos == NULL) {\n        // 0x402409\n        g36 = str;\n        g30 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4023b8\n    if (v1 - str < 7) {\n        // 0x402409\n        g36 = str;\n        g30 = str;\n        return result;\n    }\n    // 0x4023c8\n    bool v2; // 0x4023a0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4023a0\n    int64_t v5 = result - 6; // 0x4023a0\n    int64_t v6 = 7; // 0x4023d6\n    unsigned char v7 = *(char *)v5; // 0x4023d6\n    char v8 = *(char *)v4; // 0x4023d6\n    char v9 = v8; // 0x4023d6\n    bool v10 = false; // 0x4023d6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4023e0\n    int64_t v13 = v1; // 0x4023e0\n    int64_t v14 = 3; // 0x4023e0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x402409\n        g36 = str;\n        g30 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4023f2\n    char v16 = *(char *)v12; // 0x4023f2\n    char v17 = v16; // 0x4023f2\n    bool v18 = false; // 0x4023f2\n    while (v15 == v16) {\n        // 0x4023e2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4023fc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4023fe\n        v20 = result + 4;\n        g28 = v20;\n    }\n    // 0x402409\n    g36 = v20;\n    g30 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402440",
            "funcStartAddr": "402440",
            "funcEndAddr": "402532",
            "decompiledFuncCode": "int64_t function_402440(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402454\n    int64_t result = (int64_t)v1; // 0x402454\n    if (result != a1) {\n        // 0x402461\n        return result;\n    }\n    int64_t v2 = function_405720(); // 0x402470\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402526\n    if (v3 == 85) {\n        // 0x402480\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402518\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x4024ae\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x4024bb\n        // 0x402461\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402518\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x4024fd\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x40250a\n    // 0x402461\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402540",
            "funcStartAddr": "402540",
            "funcEndAddr": "402597",
            "decompiledFuncCode": "int64_t function_402540(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402540\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402588\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402597",
            "funcStartAddr": "402597",
            "funcEndAddr": "403761",
            "decompiledFuncCode": "int64_t function_402597(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4025e1\n    int64_t v3 = 0; // 0x4025e1\n    int64_t v4; // 0x402597\n    int64_t v5; // 0x402597\n    int64_t v6; // 0x402597\n    int64_t v7; // 0x402597\n    int64_t v8; // 0x402597\n    int64_t v9; // 0x402597\n    int64_t v10; // 0x402597\n    int64_t v11; // 0x402597\n    int64_t v12; // 0x402597\n    int64_t v13; // 0x402597\n    int64_t v14; // 0x402597\n    int64_t v15; // 0x402597\n    int64_t v16; // 0x402597\n    int64_t v17; // 0x402597\n    int64_t v18; // 0x402597\n    int64_t result; // 0x402597\n    int64_t v19; // 0x402597\n    int32_t wc; // bp+132, 0x402597\n    int64_t ps; // bp+136, 0x402597\n    char v20; // 0x402b50\n    int64_t v21; // 0x402b50\n    int64_t v22; // 0x402ef8\n    int64_t v23; // 0x402597\n    int64_t v24; // 0x402f17\n    int32_t v25; // 0x402597\n    while (true) {\n      lab_0x4025e8_2:\n        // 0x4025e8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402597\n        int64_t v27; // 0x40261c\n        while (true) {\n          lab_0x4025e8:\n            // 0x4025e8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4025f3\n            if (v15 == -1) {\n                // 0x4025f5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x402603\n            if (v28) {\n                // break (via goto) -> 0x402d68\n                goto lab_0x402d68;\n            }\n            // 0x40260c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g48 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x402bfb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402741;\n                    }\n                    // 0x40301d\n                    v26 = v5 + 1;\n                    goto lab_0x4025e8;\n                }\n                case 7: {\n                    goto lab_0x402741;\n                }\n                case 8: {\n                    goto lab_0x402741;\n                }\n                case 9: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402741;\n                }\n                case 12: {\n                    goto lab_0x402741;\n                }\n                case 13: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40270d;\n                }\n                case 36: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402741;\n                }\n                case 38: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402741;\n                }\n                case 44: {\n                    goto lab_0x402741;\n                }\n                case 45: {\n                    goto lab_0x402741;\n                }\n                case 46: {\n                    goto lab_0x402741;\n                }\n                case 47: {\n                    goto lab_0x402741;\n                }\n                case 48: {\n                    goto lab_0x402741;\n                }\n                case 49: {\n                    goto lab_0x402741;\n                }\n                case 50: {\n                    goto lab_0x402741;\n                }\n                case 51: {\n                    goto lab_0x402741;\n                }\n                case 52: {\n                    goto lab_0x402741;\n                }\n                case 53: {\n                    goto lab_0x402741;\n                }\n                case 54: {\n                    goto lab_0x402741;\n                }\n                case 55: {\n                    goto lab_0x402741;\n                }\n                case 56: {\n                    goto lab_0x402741;\n                }\n                case 57: {\n                    goto lab_0x402741;\n                }\n                case 58: {\n                    goto lab_0x402741;\n                }\n                case 59: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402741;\n                }\n                case 66: {\n                    goto lab_0x402741;\n                }\n                case 67: {\n                    goto lab_0x402741;\n                }\n                case 68: {\n                    goto lab_0x402741;\n                }\n                case 69: {\n                    goto lab_0x402741;\n                }\n                case 70: {\n                    goto lab_0x402741;\n                }\n                case 71: {\n                    goto lab_0x402741;\n                }\n                case 72: {\n                    goto lab_0x402741;\n                }\n                case 73: {\n                    goto lab_0x402741;\n                }\n                case 74: {\n                    goto lab_0x402741;\n                }\n                case 75: {\n                    goto lab_0x402741;\n                }\n                case 76: {\n                    goto lab_0x402741;\n                }\n                case 77: {\n                    goto lab_0x402741;\n                }\n                case 78: {\n                    goto lab_0x402741;\n                }\n                case 79: {\n                    goto lab_0x402741;\n                }\n                case 80: {\n                    goto lab_0x402741;\n                }\n                case 81: {\n                    goto lab_0x402741;\n                }\n                case 82: {\n                    goto lab_0x402741;\n                }\n                case 83: {\n                    goto lab_0x402741;\n                }\n                case 84: {\n                    goto lab_0x402741;\n                }\n                case 85: {\n                    goto lab_0x402741;\n                }\n                case 86: {\n                    goto lab_0x402741;\n                }\n                case 87: {\n                    goto lab_0x402741;\n                }\n                case 88: {\n                    goto lab_0x402741;\n                }\n                case 89: {\n                    goto lab_0x402741;\n                }\n                case 90: {\n                    goto lab_0x402741;\n                }\n                case 91: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402741;\n                }\n                case 94: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402741;\n                }\n                case 96: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402741;\n                }\n                case 98: {\n                    goto lab_0x402741;\n                }\n                case 99: {\n                    goto lab_0x402741;\n                }\n                case 100: {\n                    goto lab_0x402741;\n                }\n                case 101: {\n                    goto lab_0x402741;\n                }\n                case 102: {\n                    goto lab_0x402741;\n                }\n                case 103: {\n                    goto lab_0x402741;\n                }\n                case 104: {\n                    goto lab_0x402741;\n                }\n                case 105: {\n                    goto lab_0x402741;\n                }\n                case 106: {\n                    goto lab_0x402741;\n                }\n                case 107: {\n                    goto lab_0x402741;\n                }\n                case 108: {\n                    goto lab_0x402741;\n                }\n                case 109: {\n                    goto lab_0x402741;\n                }\n                case 110: {\n                    goto lab_0x402741;\n                }\n                case 111: {\n                    goto lab_0x402741;\n                }\n                case 112: {\n                    goto lab_0x402741;\n                }\n                case 113: {\n                    goto lab_0x402741;\n                }\n                case 114: {\n                    goto lab_0x402741;\n                }\n                case 115: {\n                    goto lab_0x402741;\n                }\n                case 116: {\n                    goto lab_0x402741;\n                }\n                case 117: {\n                    goto lab_0x402741;\n                }\n                case 118: {\n                    goto lab_0x402741;\n                }\n                case 119: {\n                    goto lab_0x402741;\n                }\n                case 120: {\n                    goto lab_0x402741;\n                }\n                case 121: {\n                    goto lab_0x402741;\n                }\n                case 122: {\n                    goto lab_0x402741;\n                }\n                case 123: {\n                    goto lab_0x4026e5;\n                }\n                case 124: {\n                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4026e5;\n                }\n                case 126: {\n                    goto lab_0x40270d;\n                }\n                default: {\n                    goto lab_0x402ae5;\n                }\n            }\n        }\n      lab_0x402ae5:\n        if (v23 != 1) {\n            // 0x402e50\n            ps = 0;\n            int64_t len = v15; // 0x402e60\n            if (v15 == -1) {\n                // 0x402e62\n                len = strlen((char *)str);\n            }\n            // 0x402e8e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x402eef:\n                // 0x402eef\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x402ef4\n                int64_t v30 = v29 + str;\n                v24 = function_4055e0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40346a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40346a_2;\n                    }\n                    case -2: {\n                        // 0x40354d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403587\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40358a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403597\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403590\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40346a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40346a_2;\n                    }\n                    case 1: {\n                        goto lab_0x402ec0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x402f6c\n                        char v34 = *(char *)v33; // 0x402f7d\n                        unsigned char v35; // 0x402597\n                        if (v34 < 125) {\n                            // 0x402f88\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x402f9f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x402f70\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x402f7d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x402f88\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x402f9f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x402f70\n                            v33++;\n                        }\n                        goto lab_0x402ec0;\n                    }\n                }\n            }\n            goto lab_0x40346a_2;\n        } else {\n            // 0x402b34\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402741;\n        }\n    }\n  lab_0x402d68:\n    // 0x402d68\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40366a\n        if (v8 > result) {\n            // 0x403673\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402997\n        return result;\n    }\n    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402741:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402750\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40295a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402851\n    char v40 = v20; // 0x402851\n    int64_t v41 = v38; // 0x402851\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402851\n    int64_t v43 = v36; // 0x402851\n    goto lab_0x4027cd;\n  lab_0x40295a_2:\n    // 0x402997\n    return function_402540(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40346a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402741;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40303e\n        int64_t v50 = v5 + 1; // 0x403121\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403128\n        char v52 = v20; // 0x403128\n        int64_t v53 = result; // 0x403128\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x4030f1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x4030f5\n            int64_t v56 = v54 + 1; // 0x4030fa\n            int64_t v57 = v51 + 1; // 0x403121\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x4030ec\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x4030f1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x4030f5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x4027cd;\n    }\n  lab_0x402ec0:\n    // 0x402ec0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x402edf\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402ee2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40346a\n        goto lab_0x40346a_2;\n    }\n    goto lab_0x402eef;\n  lab_0x40270d:\n    // 0x40270d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40295a_2;\n    }\n    goto lab_0x402741;\n  lab_0x4026e5:;\n    bool v60 = v15 == 1; // 0x4026f0\n    if (v15 == -1) {\n        // 0x4026f2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4026fe\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402741;\n    } else {\n        goto lab_0x40270d;\n    }\n  lab_0x4027cd:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4027d2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4027d6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4025e8_2;\n}\n"
        },
        {
            "funcName": "function_403770",
            "funcStartAddr": "403770",
            "funcEndAddr": "40390e",
            "decompiledFuncCode": "int64_t function_403770(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403772\n    int32_t * v3 = __errno_location(); // 0x40378c\n    int64_t v4 = (int64_t)g20; // 0x403791\n    int32_t v5 = *v3; // 0x40379b\n    int64_t v6 = v4; // 0x4037b1\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x403909\n            function_4047d0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4037c0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4037c7\n        int64_t v9; // 0x403770\n        if (g20 == &g21) {\n            int64_t v10 = function_4045e0(0, v8); // 0x4038ea\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x4038ef\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4045e0(v4, v8); // 0x4037db\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x4037ea\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x4037ea\n        int32_t v14 = v7; // 0x4037f1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403821\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40382b\n    int64_t * v17 = (int64_t *)v15; // 0x40382e\n    uint64_t v18 = *v17; // 0x40382e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403831\n    int64_t result = *v19; // 0x403831\n    int64_t v20; // 0x403770\n    uint64_t v21 = function_402540(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403854\n    if (v18 > v21) {\n        // 0x4038cb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403867\n    *v17 = v22;\n    if (result != (int64_t)&g37) {\n        // 0x403877\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404580(v22); // 0x403891\n    *v19 = result2;\n    int64_t v23; // 0x403770\n    function_402540(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x4038cb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403910",
            "funcStartAddr": "403910",
            "funcEndAddr": "403944",
            "decompiledFuncCode": "int64_t function_403910(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403917\n    int64_t result = function_404780(a1 == 0 ? (int64_t)&g38 : a1, 56); // 0x403936\n    return result;\n}\n"
        },
        {
            "funcName": "function_403950",
            "funcStartAddr": "403950",
            "funcEndAddr": "40395f",
            "decompiledFuncCode": "int64_t function_403950(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g38 : a1); // 0x40395c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403960",
            "funcStartAddr": "403960",
            "funcEndAddr": "40396f",
            "decompiledFuncCode": "int64_t function_403960(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g38 : a1; // 0x403968\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g38;\n}\n"
        },
        {
            "funcName": "function_403970",
            "funcStartAddr": "403970",
            "funcEndAddr": "4039a3",
            "decompiledFuncCode": "int64_t function_403970(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g38 + 8 : a1 + 8; // 0x403989\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40398e\n    uint32_t v3 = *v2; // 0x40398e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403992\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4039b0",
            "funcStartAddr": "4039b0",
            "funcEndAddr": "4039c3",
            "decompiledFuncCode": "int64_t function_4039b0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g38 + 4 : a1 + 4); // 0x4039bc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4039d0",
            "funcStartAddr": "4039d0",
            "funcEndAddr": "4039fb",
            "decompiledFuncCode": "int64_t function_4039d0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g38 : a1; // 0x4039d8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4039f5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4039ec\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g38;\n}\n"
        },
        {
            "funcName": "function_403a00",
            "funcStartAddr": "403a00",
            "funcEndAddr": "403a72",
            "decompiledFuncCode": "int64_t function_403a00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g38 : a5; // 0x403a22\n    int32_t * v2 = __errno_location(); // 0x403a2b\n    uint32_t v3 = *(int32_t *)v1; // 0x403a4b\n    int64_t result = function_402540(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x403a5a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403a80",
            "funcStartAddr": "403a80",
            "funcEndAddr": "403b61",
            "decompiledFuncCode": "int64_t function_403a80(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g38 : a4; // 0x403aa2\n    int32_t * v2 = __errno_location(); // 0x403aa8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403ac7\n    int32_t * v4 = (int32_t *)v1; // 0x403aca\n    int64_t v5 = function_402540(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403ae5\n    int64_t v6 = v5 + 1; // 0x403aea\n    int64_t result = function_404580(v6); // 0x403aff\n    function_402540(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403b44\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x403b4d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403b70",
            "funcStartAddr": "403b70",
            "funcEndAddr": "403b7a",
            "decompiledFuncCode": "int64_t function_403b70(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403b70\n    return function_403a80(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403b80",
            "funcStartAddr": "403b80",
            "funcEndAddr": "403c15",
            "decompiledFuncCode": "int64_t function_403b80(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x403b80\n    int64_t v2 = v1; // 0x403b80\n    int64_t v3 = v2; // 0x403b94\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x403bb3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g49;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403bb0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g49;\n        }\n    }\n    int64_t v6 = v3; // 0x403bcd\n    if (g21 != 0x6092a0) {\n        // 0x403bcf\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g37;\n        v6 = &g49;\n    }\n    int64_t result = v6; // 0x403bf1\n    if (g20 != &g21) {\n        // 0x403bf3\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g49;\n    }\n    // 0x403c06\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403c20",
            "funcStartAddr": "403c20",
            "funcEndAddr": "403c31",
            "decompiledFuncCode": "int64_t function_403c20(void) {\n    // 0x403c20\n    int64_t v1; // 0x403c20\n    return function_403770(v1, v1, -1, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_403c40",
            "funcStartAddr": "403c40",
            "funcEndAddr": "403c4a",
            "decompiledFuncCode": "int64_t function_403c40(void) {\n    // 0x403c40\n    int64_t v1; // 0x403c40\n    return function_403770(v1, v1, v1, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_403c50",
            "funcStartAddr": "403c50",
            "funcEndAddr": "403c66",
            "decompiledFuncCode": "int64_t function_403c50(int64_t a1) {\n    // 0x403c50\n    return function_403770(0, a1, -1, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_403c70",
            "funcStartAddr": "403c70",
            "funcEndAddr": "403c82",
            "decompiledFuncCode": "int64_t function_403c70(int64_t a1, int64_t a2) {\n    // 0x403c70\n    return function_403770(0, a1, a2, (int64_t *)&g38);\n}\n"
        },
        {
            "funcName": "function_403c90",
            "funcStartAddr": "403c90",
            "funcEndAddr": "403cf8",
            "decompiledFuncCode": "int64_t function_403c90(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403ca0\n    return function_403770((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403d00",
            "funcStartAddr": "403d00",
            "funcEndAddr": "403d64",
            "decompiledFuncCode": "int64_t function_403d00(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403d10\n    return function_403770((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403d70",
            "funcStartAddr": "403d70",
            "funcEndAddr": "403d7c",
            "decompiledFuncCode": "int64_t function_403d70(int64_t a1, int64_t a2) {\n    // 0x403d70\n    return function_403c90(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_403d80",
            "funcStartAddr": "403d80",
            "funcEndAddr": "403d8f",
            "decompiledFuncCode": "int64_t function_403d80(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403d80\n    return function_403d00(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_403d90",
            "funcStartAddr": "403d90",
            "funcEndAddr": "403e00",
            "decompiledFuncCode": "int64_t function_403d90(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g38); // 0x403d9d\n    int128_t v2 = __asm_movdqa(g39); // 0x403da5\n    int128_t v3 = __asm_movdqa(g40); // 0x403dad\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x403dc2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x403dd8\n    uint32_t v6 = *v5; // 0x403dd8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x403ddd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403770(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_403e00",
            "funcStartAddr": "403e00",
            "funcEndAddr": "403e0d",
            "decompiledFuncCode": "int64_t function_403e00(int64_t a1, int64_t a2) {\n    // 0x403e00\n    return function_403d90(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403e10",
            "funcStartAddr": "403e10",
            "funcEndAddr": "403e21",
            "decompiledFuncCode": "int64_t function_403e10(int64_t a1) {\n    // 0x403e10\n    return function_403d90(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403e30",
            "funcStartAddr": "403e30",
            "funcEndAddr": "403e3a",
            "decompiledFuncCode": "int64_t function_403e30(void) {\n    // 0x403e30\n    int64_t v1; // 0x403e30\n    return function_403d90(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403e40",
            "funcStartAddr": "403e40",
            "funcEndAddr": "403eae",
            "decompiledFuncCode": "int64_t function_403e40(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403e5a\n    return function_403770(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403eb0",
            "funcStartAddr": "403eb0",
            "funcEndAddr": "403f1c",
            "decompiledFuncCode": "int64_t function_403eb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g38); // 0x403eb7\n    int128_t v2 = __asm_movdqa(g39); // 0x403ebf\n    int128_t v3 = __asm_movdqa(g40); // 0x403ec7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x403ee9\n    if (a2 == 0 || a3 == 0) {\n        // 0x403f17\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403efa\n    return function_403770(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403f20",
            "funcStartAddr": "403f20",
            "funcEndAddr": "403f29",
            "decompiledFuncCode": "int64_t function_403f20(void) {\n    // 0x403f20\n    int64_t v1; // 0x403f20\n    return function_403eb0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403f30",
            "funcStartAddr": "403f30",
            "funcEndAddr": "403f47",
            "decompiledFuncCode": "int64_t function_403f30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403f30\n    return function_403eb0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_403f50",
            "funcStartAddr": "403f50",
            "funcEndAddr": "403f63",
            "decompiledFuncCode": "int64_t function_403f50(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403f50\n    return function_403eb0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_403f70",
            "funcStartAddr": "403f70",
            "funcEndAddr": "403f7a",
            "decompiledFuncCode": "int64_t function_403f70(void) {\n    // 0x403f70\n    int64_t v1; // 0x403f70\n    return function_403770(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_403f80",
            "funcStartAddr": "403f80",
            "funcEndAddr": "403f92",
            "decompiledFuncCode": "int64_t function_403f80(int64_t a1, int64_t a2) {\n    // 0x403f80\n    return function_403770(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_403fa0",
            "funcStartAddr": "403fa0",
            "funcEndAddr": "403fb1",
            "decompiledFuncCode": "int64_t function_403fa0(void) {\n    // 0x403fa0\n    int64_t v1; // 0x403fa0\n    return function_403770(v1, v1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_403fc0",
            "funcStartAddr": "403fc0",
            "funcEndAddr": "403fd6",
            "decompiledFuncCode": "int64_t function_403fc0(int64_t a1) {\n    // 0x403fc0\n    return function_403770(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_403fe0",
            "funcStartAddr": "403fe0",
            "funcEndAddr": "4043bd",
            "decompiledFuncCode": "int64_t function_403fe0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404078\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x403ffc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404016\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40405b\n    if (a6 < 10) {\n        // 0x40406a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404162\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_4043c0",
            "funcStartAddr": "4043c0",
            "funcEndAddr": "4043e0",
            "decompiledFuncCode": "int64_t function_4043c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4043c0\n    if (a5 == 0) {\n        // 0x4043db\n        return function_403fe0(a1, a2, a3, a4, a5, 0, (int64_t)&g49);\n    }\n    int64_t v1 = 0; // 0x4043c7\n    v1++;\n    int64_t v2 = v1; // 0x4043d9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4043d0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4043db\n    return function_403fe0(a1, a2, a3, a4, a5, v2, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_4043e0",
            "funcStartAddr": "4043e0",
            "funcEndAddr": "404440",
            "decompiledFuncCode": "int64_t function_4043e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4043e0\n    int64_t v3 = &v2; // 0x4043e0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404413\n    int64_t v6; // 0x4043fd\n    int64_t * v7; // 0x40441b\n    int64_t v8; // 0x40441b\n    int64_t v9; // 0x404427\n    if (v5 < 48) {\n        // 0x4043f0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404433\n            break;\n        }\n    } else {\n        // 0x40441b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404433\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404411\n    while (v4 != 9) {\n        // 0x404409\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4043f0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404433\n                break;\n            }\n        } else {\n            // 0x40441b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404433\n                break;\n            }\n        }\n        // 0x404409\n        v10 = 10;\n    }\n    // 0x404433\n    return function_403fe0(a1, a2, a3, a4, v3, v10, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_404440",
            "funcStartAddr": "404440",
            "funcEndAddr": "4044fc",
            "decompiledFuncCode": "int64_t function_404440(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x404440\n    int64_t v1; // bp-168, 0x404440\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404440\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404440\n    int64_t v8; // 0x404440\n    int64_t v9; // bp-56, 0x404440\n    int64_t v10; // 0x4044a5\n    int64_t v11; // 0x4044c9\n    if ((int32_t)v6 < 48) {\n        // 0x404490\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4044e0\n            break;\n        }\n    } else {\n        // 0x4044c2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4044e0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4044ba\n    int64_t v13 = 10; // 0x4044ba\n    while (v5 != 9) {\n        // 0x4044bc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404490\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4044e0\n                break;\n            }\n        } else {\n            // 0x4044c2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4044e0\n                break;\n            }\n        }\n        // 0x4044b2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4044e0\n    int64_t v14; // bp-136, 0x404440\n    int64_t result = function_403fe0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g49); // 0x4044ef\n    return result;\n}\n"
        },
        {
            "funcName": "function_404500",
            "funcStartAddr": "404500",
            "funcEndAddr": "404574",
            "decompiledFuncCode": "int64_t function_404500(int64_t a1) {\n    // 0x404500\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404563\n    return fputs_unlocked(v1, g29);\n}\n"
        },
        {
            "funcName": "function_404580",
            "funcStartAddr": "404580",
            "funcEndAddr": "40459a",
            "decompiledFuncCode": "int64_t function_404580(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404584\n    if (size != 0 != (mem == NULL)) {\n        // 0x404593\n        return (int64_t)mem;\n    }\n    // 0x404595\n    function_4047d0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4045a0",
            "funcStartAddr": "4045a0",
            "funcEndAddr": "4045c1",
            "decompiledFuncCode": "int64_t function_4045a0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4045a3\n    int64_t v2 = v1; // 0x4045a3\n    if (v2 < 0) {\n        // 0x4045bb\n        function_4047d0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4045b9\n        return function_404580(v2);\n    }\n    // 0x4045bb\n    function_4047d0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4045d0",
            "funcStartAddr": "4045d0",
            "funcEndAddr": "4045d2",
            "decompiledFuncCode": "int64_t function_4045d0(void) {\n    // 0x4045d0\n    int64_t v1; // 0x4045d0\n    return function_404580(v1);\n}\n"
        },
        {
            "funcName": "function_4045e0",
            "funcStartAddr": "4045e0",
            "funcEndAddr": "404616",
            "decompiledFuncCode": "int64_t function_4045e0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x404608\n        free(v1);\n        return (int32_t)&g49 ^ (int32_t)&g49;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4045f1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x404600\n        return (int64_t)mem;\n    }\n    // 0x404611\n    function_4047d0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404620",
            "funcStartAddr": "404620",
            "funcEndAddr": "404641",
            "decompiledFuncCode": "int64_t function_404620(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404623\n    int64_t v2 = v1; // 0x404623\n    if (v2 < 0) {\n        // 0x40463b\n        function_4047d0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404639\n        return function_4045e0(a1, v2);\n    }\n    // 0x40463b\n    function_4047d0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404650",
            "funcStartAddr": "404650",
            "funcEndAddr": "4046d6",
            "decompiledFuncCode": "int64_t function_404650(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4046ab\n            function_4047d0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4045e0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404693\n    if (a2 == 0) {\n        // 0x4046b8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404698\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4046ab\n        function_4047d0(a1);\n        // UNREACHABLE\n    }\n    // 0x40467a\n    *(int64_t *)a2 = v2;\n    return function_4045e0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4046e0",
            "funcStartAddr": "4046e0",
            "funcEndAddr": "404730",
            "decompiledFuncCode": "int64_t function_4046e0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4046e0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40472a\n            function_4047d0(a1);\n            // UNREACHABLE\n        }\n        // 0x404702\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4045e0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404715\n        *(int64_t *)a2 = 128;\n        return function_4045e0(0, 128);\n    }\n    // 0x404728\n    if (a2 < 0) {\n        // 0x40472a\n        function_4047d0(a1);\n        // UNREACHABLE\n    }\n    // 0x404702\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4045e0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404730",
            "funcStartAddr": "404730",
            "funcEndAddr": "404747",
            "decompiledFuncCode": "int64_t function_404730(int64_t a1, int64_t a2) {\n    // 0x404730\n    return (int64_t)memset((int64_t *)function_404580(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404750",
            "funcStartAddr": "404750",
            "funcEndAddr": "40477e",
            "decompiledFuncCode": "int64_t function_404750(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404757\n    if ((int64_t)v1 < 0) {\n        // 0x404779\n        function_4047d0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404779\n        function_4047d0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40476a\n    if (mem != NULL) {\n        // 0x404774\n        return (int64_t)mem;\n    }\n    // 0x404779\n    function_4047d0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404780",
            "funcStartAddr": "404780",
            "funcEndAddr": "4047a8",
            "decompiledFuncCode": "int64_t function_404780(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404580(a2); // 0x40478f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4047b0",
            "funcStartAddr": "4047b0",
            "funcEndAddr": "4047c3",
            "decompiledFuncCode": "int64_t function_4047b0(int64_t str) {\n    // 0x4047b0\n    return function_404780(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4047d0",
            "funcStartAddr": "4047d0",
            "funcEndAddr": "404801",
            "decompiledFuncCode": "int64_t function_4047d0(int64_t a1) {\n    // 0x4047d0\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404810",
            "funcStartAddr": "404810",
            "funcEndAddr": "4048ef",
            "decompiledFuncCode": "int64_t function_404810(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40481c\n    uint32_t v2 = *v1; // 0x40481c\n    int64_t v3 = a2 & 0xffffffff; // 0x404821\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x404824\n    uint64_t v5 = (int64_t)*v4; // 0x404824\n    int64_t v6; // 0x404892\n    if (v3 <= v5) {\n      lab_0x40488c_2:\n        // 0x40488c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x404812\n    int64_t v8 = v2; // 0x404810\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40488c\n        goto lab_0x40488c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404848\n    int64_t v17; // 0x404856\n    int64_t * v18; // 0x404870\n    int64_t * v19; // 0x404873\n    int64_t v20; // 0x40487e\n    int64_t v21; // 0x404856\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x404853\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x404870\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x404887\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40488c\n            goto lab_0x40488c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40488c\n            goto lab_0x40488c_2;\n        }\n        // 0x404842\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4048cb\n    int64_t * v23 = (int64_t *)v22; // 0x4048d0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4048d3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4048d0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4048e7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40483d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40488c\n            goto lab_0x40488c_2;\n        }\n        // 0x404842\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x404853\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x404870\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x404887\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40488c\n                goto lab_0x40488c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40488c\n                goto lab_0x40488c_2;\n            }\n            // 0x404842\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4048b0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4048d0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4048e7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40488c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4048f0",
            "funcStartAddr": "4048f0",
            "funcEndAddr": "404f0c",
            "decompiledFuncCode": "int64_t function_4048f0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40490f\n    int64_t v2 = *v1; // 0x40490f\n    char * str2 = (char *)v2; // 0x40491c\n    char c = *str2; // 0x40491c\n    int64_t v3 = v2; // 0x404948\n    int64_t v4 = 0; // 0x4048f0\n    int32_t v5; // 0x4048f0\n    int64_t v6; // 0x4048f0\n    int64_t v7; // 0x4048f0\n    int64_t v8; // 0x4048f0\n    int64_t v9; // 0x4048f0\n    int64_t v10; // 0x4048f0\n    int64_t v11; // 0x4048f0\n    int64_t v12; // 0x4048f0\n    int64_t v13; // 0x4048f0\n    int64_t str3; // 0x4048f0\n    int64_t v14; // 0x4048f0\n    int64_t v15; // 0x4048f0\n    int64_t v16; // 0x4048f0\n    int64_t v17; // 0x4048f0\n    int32_t v18; // 0x4048f0\n    int32_t v19; // 0x4048f0\n    int32_t v20; // 0x4048f0\n    int32_t v21; // 0x4048f0\n    int32_t v22; // 0x4048f0\n    int32_t v23; // 0x4048f0\n    int32_t v24; // 0x4048f0\n    int32_t v25; // 0x4048f0\n    int32_t v26; // 0x4048f0\n    int32_t v27; // 0x4048f0\n    int32_t v28; // 0x4048f0\n    int32_t v29; // 0x4048f0\n    int64_t nmemb; // 0x4048f0\n    int64_t v30; // 0x4048f0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40494c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404948\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404958\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40495e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x404928\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40498c\n                int64_t v34; // 0x4048f0\n                int64_t v35; // 0x4048f0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x404995\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x404b10;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4049a6\n                int64_t v37 = *(int64_t *)v36; // 0x4049aa\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x404980\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x404995\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x404b10;\n                        }\n                    }\n                    // 0x4049a6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4049f6:\n                    // 0x4049f6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x404a50;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x404bc0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x404a50;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x404b70\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x404a1a;\n                                } else {\n                                    // 0x404b7c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x404a1a;\n                                    } else {\n                                        // 0x404b8a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x404a1a;\n                                        } else {\n                                            goto lab_0x404a50;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x404a1a;\n                            }\n                        }\n                    }\n                }\n              lab_0x404a61:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x404c36\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x404de2\n                            flockfile(g31);\n                            int64_t v41 = *v1; // 0x404e02\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x404e4f\n                            int64_t v43 = (int64_t)g31;\n                            int64_t v44 = v43; // 0x404e69\n                            int64_t v45; // 0x404e6b\n                            if (*(char *)v42 != 0) {\n                                // 0x404e6b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g31;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x404e63\n                            while (v17 + nmemb != v42) {\n                                // 0x404e65\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x404e6b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g31;\n                                }\n                                // 0x404e58\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x404e90\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g31);\n                            v40 = *v1;\n                        } else {\n                            // 0x404c44\n                            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x404d9f\n                        free((int64_t *)v17);\n                    }\n                    // 0x404c99\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x404cb0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x404b5e\n                    return 63;\n                }\n                // 0x404a80\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x404b04\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x404b10:;\n                    int32_t * v49 = (int32_t *)a7; // 0x404b20\n                    uint32_t v50 = *v49; // 0x404b20\n                    int64_t v51 = v50; // 0x404b20\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x404b2a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x404b33\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x404d5f\n                                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x404d0a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x404b5e\n                            return 63;\n                        }\n                        // 0x404ba8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x404ebf\n                                    __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x404dbd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x404dd0\n                                // 0x404b5e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x404cce\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x404ce2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x404b4b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x404b4e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x404b52\n                    int64_t result = v59; // 0x404b58\n                    if (v58 != 0) {\n                        // 0x404b5a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x404b5e\n                    return result;\n                }\n            } else {\n                // 0x40495e\n                v5 = v32;\n            }\n            // break -> 0x404a85\n            break;\n        }\n    }\n    // 0x404a85\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x404a9d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x404aa7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x404b5e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x404be9\n        __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x404ad6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x404ae6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x404a50:\n    // 0x404a50\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x404a50\n    int64_t v63 = *(int64_t *)v62; // 0x404a54\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x404a61\n        goto lab_0x404a61;\n    }\n    goto lab_0x4049f6;\n  lab_0x404a1a:\n    // 0x404a1a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4048f0\n    int32_t v65; // 0x4048f0\n    int32_t v66; // 0x4048f0\n    if (v27 != 0) {\n        goto lab_0x404a50;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x404bd0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x404a50;\n            } else {\n                goto lab_0x404a41;\n            }\n        } else {\n            // 0x404a35\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x404d2c\n                int64_t v67 = (int64_t)mem; // 0x404d2c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x404a50;\n                } else {\n                    // 0x404d3f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x404a41;\n                }\n            } else {\n                goto lab_0x404a41;\n            }\n        }\n    }\n  lab_0x404a41:\n    // 0x404a41\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x404a50;\n}\n"
        },
        {
            "funcName": "function_404f10",
            "funcStartAddr": "404f10",
            "funcEndAddr": "4054d6",
            "decompiledFuncCode": "int64_t function_404f10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x404f31\n    if (v3 < 1) {\n        // 0x4050ee\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x404f2d\n    int32_t v5 = *(int32_t *)a7; // 0x404f39\n    uint64_t v6 = a1 & 0xffffffff; // 0x404f3b\n    int64_t v7 = v2; // 0x404f40\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x404f43\n    *v8 = 0;\n    int64_t v9; // 0x404f10\n    int64_t v10; // 0x404f10\n    int64_t v11; // 0x404f10\n    int64_t v12; // 0x404f10\n    int64_t str; // 0x404f10\n    int64_t v13; // 0x404f10\n    int64_t v14; // 0x404f10\n    int64_t v15; // 0x404f10\n    int64_t v16; // 0x404f10\n    int64_t v17; // 0x404f10\n    int32_t v18; // 0x404f10\n    char v19; // 0x404f10\n    if (v5 == 0) {\n        // 0x405128\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x404f5a;\n    } else {\n        // 0x404f53\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x404fa0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x404fa3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405068;\n            } else {\n                int64_t v22 = v7 + 1; // 0x404fb6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x404fc6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40507c;\n                } else {\n                    goto lab_0x404fd8;\n                }\n            }\n        } else {\n            goto lab_0x404f5a;\n        }\n    }\n  lab_0x404f5a:\n    // 0x404f5a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x404f60\n    *v24 = 0;\n    int64_t v25; // 0x404f10\n    int64_t v26; // 0x404f10\n    int64_t v27; // 0x404f10\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405050\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40505d;\n        }\n        case 43: {\n            // 0x405360\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40505d;\n        }\n        default: {\n            // 0x404f7c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4052df\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4053f8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40505d;\n                } else {\n                    // 0x4052ed\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x404f8a;\n                }\n            } else {\n                goto lab_0x404f8a;\n            }\n        }\n    }\n  lab_0x405068:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40506f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x404fd8;\n    } else {\n        goto lab_0x40507c;\n    }\n  lab_0x404f8a:\n    // 0x404f8a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40505d;\n  lab_0x40505d:\n    // 0x40505d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405068;\n  lab_0x404fd8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x404fd8\n    int64_t v31 = v30; // 0x404fd8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x404fda\n    if ((int64_t)*v32 > v31) {\n        // 0x404fdf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x404fe2\n    if (*v33 > v30) {\n        // 0x404fe7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x404fea\n    int64_t v35 = v31; // 0x404fee\n    int64_t v36 = v15; // 0x404fee\n    int64_t v37; // 0x404f10\n    int64_t v38; // 0x404f10\n    int64_t v39; // 0x404f10\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405158\n        int64_t v41 = v40; // 0x405158\n        v2 = v41;\n        int64_t v42; // 0x404f10\n        if (*v33 == v40) {\n            // 0x405340\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405348\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405164\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405178\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405181\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40518a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4051a1\n            int64_t v47 = v45 & 0xffffffff; // 0x4051a5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4051ae\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4051b4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4051b6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405190\n            int64_t v49 = v48 & 0xffffffff; // 0x405190\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4051a1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4051ae\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4051b4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4051b6;\n                    }\n                }\n                // 0x405190\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405358\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4051b6;\n    } else {\n        goto lab_0x404ff4;\n    }\n  lab_0x40507c:\n    // 0x40507c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40507f\n    int64_t v51 = v12; // 0x40507f\n    int64_t v52 = v14; // 0x40507f\n    if (*(char *)v10 == 0) {\n        goto lab_0x404fd8;\n    } else {\n        goto lab_0x405085;\n    }\n  lab_0x404ff4:;\n    int32_t v53 = v35; // 0x404ff4\n    int64_t v54; // 0x404f10\n    int64_t v55; // 0x404f10\n    int64_t v56; // 0x404f10\n    int64_t v57; // 0x404f10\n    int64_t v58; // 0x404f10\n    int64_t v59; // 0x404f10\n    char * v60; // 0x404f10\n    int64_t v61; // 0x404f10\n    int64_t v62; // 0x405009\n    int64_t v63; // 0x404f10\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405143\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405146;\n    } else {\n        // 0x404ffc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x404f10\n        int64_t v66 = v65 ? -1 : 1; // 0x405010\n        int64_t v67 = (int64_t)\"--\"; // 0x404f10\n        int64_t v68 = v62; // 0x404f10\n        int64_t v69 = 3; // 0x405010\n        unsigned char v70 = *(char *)v68; // 0x405010\n        char v71 = *(char *)v67; // 0x405010\n        char v72 = v71; // 0x405010\n        bool v73 = false; // 0x405010\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405100\n            if (*(char *)v62 == 45) {\n                // 0x4051c0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4051c0\n                if (c == 0) {\n                    goto lab_0x40510a;\n                } else {\n                    // 0x4051cd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405250;\n                    } else {\n                        if (c == 45) {\n                            // 0x405433\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4052a5;\n                        } else {\n                            // 0x4051de\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405250;\n                            } else {\n                                // 0x4051e3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x405204;\n                                } else {\n                                    // 0x4051ea\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405250;\n                                    } else {\n                                        goto lab_0x405204;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40510a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405020\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405023\n            int64_t v77 = v35 + 1; // 0x405026\n            int32_t v78 = v77; // 0x405029\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405390\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405037\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405045\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405146;\n        }\n    }\n  lab_0x405085:;\n    // 0x405085\n    int64_t v79; // bp-104, 0x404f10\n    int64_t v80 = &v79; // 0x404f1a\n    int64_t v81 = v50 + 1; // 0x405085\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40508c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405091\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405095\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405099\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4050a1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4050a6\n    int32_t c2 = v84; // 0x4050a6\n    char * found_char_pos = strchr(str2, c2); // 0x4050a6\n    int64_t v87 = *v82; // 0x4050ab\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4050b5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4050c0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4053b0\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40537d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4050ee\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4050a6\n    char v91 = *(char *)(v90 + 1); // 0x4050db\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405095\n        if (v91 != 58) {\n            // 0x4050ee\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x405304\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x405408\n                *v8 = 0;\n            } else {\n                // 0x4053ec\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40532e\n            *v83 = 0;\n            // 0x4050ee\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40530e\n        if (v93 != 0) {\n            // 0x4053a0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40532e\n            *v83 = 0;\n            // 0x4050ee\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405321\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40532e\n            *v83 = 0;\n            // 0x4050ee\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40546a\n            __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40541a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405421\n        // 0x40532e\n        *v83 = 0;\n        // 0x4050ee\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405279\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40527b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4054a0\n                __fprintf_chk(g31, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405451\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405458\n            // 0x4050ee\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405286\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40528a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4052a5;\n  lab_0x4051b6:\n    // 0x4051b6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x404ff4;\n  lab_0x4052a5:;\n    int64_t v99 = function_4048f0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4052c3\n    // 0x4050ee\n    return v99 & 0xffffffff;\n  lab_0x405146:;\n    int32_t v100 = v55; // 0x405146\n    if (v100 != (int32_t)v59) {\n        // 0x40514a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4050ee\n    return 0xffffffff;\n  lab_0x40510a:\n    // 0x40510a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405111\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4050ee\n    return v99 & 0xffffffff;\n  lab_0x405250:\n    // 0x405250\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405085;\n  lab_0x405204:\n    // 0x405204\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4048f0(v6, a2, str, a4, a5, v57, v1, v11, &g9); // 0x40522a\n    if ((int32_t)v101 != -1) {\n        // 0x4050ee\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40523f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405250;\n}\n"
        },
        {
            "funcName": "function_4054e0",
            "funcStartAddr": "4054e0",
            "funcEndAddr": "405536",
            "decompiledFuncCode": "int64_t function_4054e0(int64_t a1) {\n    // 0x4054e0\n    *(int32_t *)&g41 = g26;\n    *(int32_t *)&g42 = g25;\n    int64_t v1; // 0x4054e0\n    int64_t result = function_404f10(v1, v1, v1, v1, v1, v1, &g41, a1 & 0xffffffff); // 0x405506\n    g26 = *(int32_t *)&g41;\n    g46 = g44;\n    *(int32_t *)&g24 = g43;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405540",
            "funcStartAddr": "405540",
            "funcEndAddr": "405558",
            "decompiledFuncCode": "int64_t function_405540(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405540\n    return function_4054e0(1);\n}\n"
        },
        {
            "funcName": "function_405560",
            "funcStartAddr": "405560",
            "funcEndAddr": "405573",
            "decompiledFuncCode": "int64_t function_405560(int64_t a1, int64_t a2, char * a3, char (**a4)[8], int32_t a5, int64_t a6) {\n    // 0x405560\n    return function_4054e0(0);\n}\n"
        },
        {
            "funcName": "function_405580",
            "funcStartAddr": "405580",
            "funcEndAddr": "405595",
            "decompiledFuncCode": "int64_t function_405580(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405580\n    return function_404f10(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4055a0",
            "funcStartAddr": "4055a0",
            "funcEndAddr": "4055b6",
            "decompiledFuncCode": "int64_t function_4055a0(void) {\n    // 0x4055a0\n    return function_4054e0(0);\n}\n"
        },
        {
            "funcName": "function_4055c0",
            "funcStartAddr": "4055c0",
            "funcEndAddr": "4055d8",
            "decompiledFuncCode": "int64_t function_4055c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4055c0\n    return function_404f10(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4055e0",
            "funcStartAddr": "4055e0",
            "funcEndAddr": "40565a",
            "decompiledFuncCode": "int64_t function_4055e0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4055eb\n    int64_t v2 = (int64_t)&g10; // 0x4055eb\n    int32_t * pwc; // 0x4055e0\n    int64_t v3; // 0x4055e0\n    int64_t n; // 0x4055e0\n    if (a2 == 0) {\n        goto lab_0x405632;\n    } else {\n        // 0x4055ed\n        if (a3 == 0) {\n            // 0x405618\n            return -2;\n        }\n        // 0x4055f9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405632;\n        } else {\n            goto lab_0x405604;\n        }\n    }\n  lab_0x405632:\n    // 0x405632\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4055e0\n    pwc = (int32_t *)&v4;\n    goto lab_0x405604;\n  lab_0x405604:;\n    char * wstr = (char *)v3; // 0x40560a\n    int64_t ps; // 0x4055e0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40560a\n    int64_t result = v5; // 0x40560a\n    if (v5 < 0xfffffffe) {\n        // 0x405618\n        return result;\n    }\n    int64_t result2 = result; // 0x405649\n    if ((char)function_4056c0(0, v3) == 0) {\n        // 0x40564b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405618\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405660",
            "funcStartAddr": "405660",
            "funcEndAddr": "4056bd",
            "decompiledFuncCode": "int64_t function_405660(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405667\n    int64_t v2; // 0x405660\n    int64_t result = function_405c90(a1, v2); // 0x405678\n    if ((v2 & 32) != 0) {\n        // 0x4056a0\n        if ((int32_t)result == 0) {\n            // 0x4056a4\n            *__errno_location() = 0;\n        }\n        // 0x40569a\n        return 0xffffffff;\n    }\n    // 0x405681\n    if ((int32_t)result == 0) {\n        // 0x40569a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405688\n    if (v1 == 0) {\n        // 0x40568a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40569a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4056c0",
            "funcStartAddr": "4056c0",
            "funcEndAddr": "40571e",
            "decompiledFuncCode": "int64_t function_4056c0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4056c6\n    if (locale == NULL) {\n        // 0x4056f3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4056c6\n    bool v2; // 0x4056c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x4056c0\n    int64_t v5 = v1; // 0x4056c0\n    int64_t v6 = 2; // 0x4056e5\n    unsigned char v7 = *(char *)v5; // 0x4056e5\n    char v8 = *(char *)v4; // 0x4056e5\n    char v9 = v8; // 0x4056e5\n    bool v10 = false; // 0x4056e5\n    while (v7 == v8) {\n        // 0x4056d8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4056f1\n    int64_t v13 = v1; // 0x4056f1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4056f3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4056f1\n    unsigned char v15 = *(char *)v13; // 0x40570d\n    char v16 = *(char *)v12; // 0x40570d\n    char v17 = v16; // 0x40570d\n    bool v18 = false; // 0x40570d\n    while (v15 == v16) {\n        // 0x405700\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405720",
            "funcStartAddr": "405720",
            "funcEndAddr": "405c82",
            "decompiledFuncCode": "int64_t function_405720(void) {\n    char * v1 = nl_langinfo(14); // 0x405736\n    char * v2 = g45; // 0x40573b\n    char * v3; // 0x405720\n    int64_t v4; // 0x405720\n    int64_t v5; // 0x405720\n    int64_t v6; // 0x405720\n    int64_t v7; // 0x405720\n    int32_t size; // 0x405720\n    int32_t size2; // 0x405720\n    int32_t len; // 0x4057f2\n    int64_t v8; // 0x4057f2\n    char * env_val; // 0x4057dd\n    if (v2 == NULL) {\n        // 0x4057d8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405845;\n        } else {\n            // 0x4057ea\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405845;\n            } else {\n                // 0x4057ef\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4057dd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x405c75\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405845;\n                    } else {\n                        // 0x405be9\n                        size2 = len + 14;\n                        goto lab_0x40580b;\n                    }\n                } else {\n                    goto lab_0x40580b;\n                }\n            }\n        }\n    } else {\n        // 0x405720\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40575a;\n    }\n  lab_0x405a8c:;\n    // 0x405a8c\n    struct _IO_FILE * stream; // 0x4058cb\n    int32_t v10 = __uflow(stream); // 0x405a8f\n    int64_t v11; // 0x405720\n    int64_t v12 = v11; // 0x405a99\n    int64_t v13; // 0x405720\n    int64_t v14 = v13; // 0x405a99\n    int32_t v15 = v10; // 0x405a99\n    int64_t v16; // 0x405720\n    int64_t v17 = v16; // 0x405a99\n    int64_t v18 = v11; // 0x405a99\n    int64_t v19 = v13; // 0x405a99\n    int64_t v20 = v16; // 0x405a99\n    if (v10 == -1) {\n        // break -> 0x405a9f\n        goto lab_0x405a9f;\n    }\n    goto lab_0x405919;\n  lab_0x40590e:;\n    // 0x40590e\n    int64_t v90; // 0x405720\n    int64_t * v32; // 0x405900\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405720\n    v12 = v89;\n    int64_t v91; // 0x405720\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405720\n    v17 = v92;\n    goto lab_0x405919;\n  lab_0x405919:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405720\n    int32_t v25; // bp-120, 0x405720\n    int32_t v26; // bp-184, 0x405720\n    int64_t v27; // 0x4058cb\n    int64_t v28; // 0x4058e8\n    int64_t v29; // 0x4058ed\n    int64_t * v30; // 0x405904\n    switch (c) {\n        case 32: {\n            goto lab_0x405900;\n        }\n        case 10: {\n            goto lab_0x405900;\n        }\n        case 9: {\n            goto lab_0x405900;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x405af1\n            int32_t v33; // 0x405720\n            char v34; // 0x405720\n            int32_t v35; // 0x405afe\n            if (v31 < *v30) {\n                // 0x405ad0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x405afb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x405af1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x405ad0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x405afb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x405ae0\n                v36 = v33;\n            }\n            // 0x405bcf\n            if (v36 == -1) {\n                // break -> 0x405a9f\n                break;\n            }\n            goto lab_0x405900;\n        }\n        default: {\n            // 0x40592f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x405a9f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405958\n            int64_t v39 = v37 + 4; // 0x40595a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405966\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405968\n            while (v41 == 0) {\n                // 0x405958\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x405986\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x405992\n            int64_t v45 = v43 + 4; // 0x405994\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4059a0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4059a2\n            while (v47 == 0) {\n                // 0x405992\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40598f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4059b8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4059c8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4059cc\n            int64_t v52 = v51 + v48; // 0x4059d5\n            int64_t * mem; // 0x405720\n            int64_t v53; // 0x405720\n            int64_t v54; // 0x405720\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x405b0b\n                int64_t v56 = v55 + 3; // 0x405b17\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4059f1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x405a00\n            if (mem == NULL) {\n                // 0x405c2c\n                free((int64_t *)v21);\n                function_405c90(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x4058a4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x405a18\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x405a22\n            uint32_t v62 = (int32_t)v59; // 0x405a25\n            int64_t v63; // 0x405720\n            if (v62 >= 8) {\n                // 0x405b34\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x405b4e\n                int64_t v66 = v61 - v65; // 0x405b52\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x405b5d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x405b6e\n                    int64_t v70 = v69 & 0xffffffff; // 0x405b6e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x405b6b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x405bff\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x405a37\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x405a3b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x405a4b\n            int64_t v74 = v60 - 1; // 0x405a4f\n            uint32_t v75 = (int32_t)v73; // 0x405a54\n            int64_t v76; // 0x405720\n            if (v75 >= 8) {\n                // 0x405b82\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x405b8c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x405b9c\n                int64_t v80 = v74 - v79; // 0x405ba0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x405bab\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x405bbb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x405bb9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x405c16\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x405c1e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x405a66\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x405a6a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x405c63\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x405a7e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40590e;\n            } else {\n                goto lab_0x405a8c;\n            }\n        }\n    }\n  lab_0x405900:;\n    int64_t v93 = v23; // 0x405720\n    int64_t v94 = v22; // 0x405720\n    int64_t v95 = v21; // 0x405720\n    goto lab_0x405900_2;\n  lab_0x405845:;\n    int64_t * mem3 = malloc(size); // 0x405845\n    int64_t v97 = (int64_t)&g10; // 0x405850\n    int64_t v98; // 0x405720\n    int64_t path; // 0x405720\n    if (mem3 == NULL) {\n        goto lab_0x405822;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405845\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405866;\n    }\n  lab_0x40575a:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x40574d\n    char v100 = *v3; // 0x40575a\n    int64_t v101; // 0x405720\n    if (v100 == 0) {\n        // 0x4057b4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405720\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405720\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4057a0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4057a7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405770\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40577d\n        char v107 = *(char *)v106; // 0x405782\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4057b4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40578b\n    v104 = v103 + 1;\n  lab_0x4057a7:\n    // 0x4057b4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405822:;\n    char * v108 = (char *)v97;\n    g45 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40575a;\n  lab_0x405866:;\n    int64_t v109 = v98 + path; // 0x405866\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405892\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x4058c1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x405bf2\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x4058e5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405900_2:;\n                uint64_t v96 = *v32; // 0x405900\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x405a8c;\n                } else {\n                    goto lab_0x40590e;\n                }\n            }\n          lab_0x405a9f:\n            // 0x405a9f\n            function_405c90(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x405abe\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4058a4;\n  lab_0x40580b:;\n    int64_t * mem4 = malloc(size2); // 0x40580b\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x4058b1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405866;\n    } else {\n        goto lab_0x405822;\n    }\n  lab_0x4058a4:\n    // 0x4058a4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405822;\n}\n"
        },
        {
            "funcName": "function_405c90",
            "funcStartAddr": "405c90",
            "funcEndAddr": "405d0b",
            "decompiledFuncCode": "int64_t function_405c90(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405c97\n    if (fileno(stream) < 0) {\n        // 0x405cf7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x405caa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x405cdb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405cf7\n            return fclose(stream);\n        }\n    }\n    // 0x405cac\n    if ((int32_t)function_405d10(a1, v1) == 0) {\n        // 0x405cf7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405cb8\n    int32_t v3 = *v2; // 0x405cc0\n    int64_t result = fclose(stream); // 0x405cce\n    if (v3 != 0) {\n        // 0x405d00\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405cd0\n    return result;\n}\n"
        },
        {
            "funcName": "function_405d10",
            "funcStartAddr": "405d10",
            "funcEndAddr": "405d50",
            "decompiledFuncCode": "int64_t function_405d10(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x405d2a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x405d2a\n        return fflush(stream);\n    }\n    // 0x405d38\n    function_405d50(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405d50",
            "funcStartAddr": "405d50",
            "funcEndAddr": "405da7",
            "decompiledFuncCode": "int64_t function_405d50(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405d50\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x405d5a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x405d8b\n    int64_t result = -1; // 0x405d94\n    if (v1 != -1) {\n        // 0x405d96\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405da2\n    return result;\n}\n"
        },
        {
            "funcName": "function_405db0",
            "funcStartAddr": "405db0",
            "funcEndAddr": "405e0d",
            "decompiledFuncCode": "int64_t function_405db0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405db0\n    return function_4012e8();\n}\n"
        },
        {
            "funcName": "function_405e10",
            "funcStartAddr": "405e10",
            "funcEndAddr": "405e11",
            "decompiledFuncCode": "int64_t function_405e10(void) {\n    // 0x405e10\n    int64_t result; // 0x405e10\n    return result;\n}\n"
        },
        {
            "funcName": "function_405e20",
            "funcStartAddr": "405e20",
            "funcEndAddr": "405e38",
            "decompiledFuncCode": "int64_t function_405e20(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405e20\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_405e38",
            "funcStartAddr": "405e38",
            "funcEndAddr": "405e58",
            "decompiledFuncCode": "int64_t function_405e38(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x405e42\n    while (*(int64_t *)v1 != -1) {\n        // 0x405e43\n        v1 -= 8;\n    }\n    // 0x405e54\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_mkfifo.elf"
}