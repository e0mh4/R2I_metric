{
    "funcInfo": [
        {
            "funcName": "function_4021d0",
            "funcStartAddr": "4021d0",
            "funcEndAddr": "4021d5",
            "decompiledFuncCode": "int64_t function_4021d0(void) {\n    // 0x4021d0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4021d5",
            "funcStartAddr": "4021d5",
            "funcEndAddr": "4021da",
            "decompiledFuncCode": "int64_t function_4021d5(void) {\n    // 0x4021d5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4021da",
            "funcStartAddr": "4021da",
            "funcEndAddr": "4021df",
            "decompiledFuncCode": "int64_t function_4021da(void) {\n    // 0x4021da\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4021df",
            "funcStartAddr": "4021df",
            "funcEndAddr": "4021e4",
            "decompiledFuncCode": "int64_t function_4021df(void) {\n    // 0x4021df\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4021e4",
            "funcStartAddr": "4021e4",
            "funcEndAddr": "4021e9",
            "decompiledFuncCode": "int64_t function_4021e4(void) {\n    // 0x4021e4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4021e9",
            "funcStartAddr": "4021e9",
            "funcEndAddr": "4021ee",
            "decompiledFuncCode": "int64_t function_4021e9(void) {\n    // 0x4021e9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4021ee",
            "funcStartAddr": "4021ee",
            "funcEndAddr": "4021f3",
            "decompiledFuncCode": "int64_t function_4021ee(void) {\n    // 0x4021ee\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4021f3",
            "funcStartAddr": "4021f3",
            "funcEndAddr": "4021f8",
            "decompiledFuncCode": "int64_t function_4021f3(void) {\n    // 0x4021f3\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4021f8",
            "funcStartAddr": "4021f8",
            "funcEndAddr": "4021fd",
            "decompiledFuncCode": "int64_t function_4021f8(void) {\n    // 0x4021f8\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4021fd",
            "funcStartAddr": "4021fd",
            "funcEndAddr": "402202",
            "decompiledFuncCode": "int64_t function_4021fd(void) {\n    // 0x4021fd\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402202",
            "funcStartAddr": "402202",
            "funcEndAddr": "402207",
            "decompiledFuncCode": "int64_t function_402202(void) {\n    // 0x402202\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402210",
            "funcStartAddr": "402210",
            "funcEndAddr": "402950",
            "decompiledFuncCode": "int64_t function_402210(int64_t a1, int64_t a2) {\n    // 0x402210\n    function_406260(a2);\n    setlocale(LC_ALL, (char *)&g16);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v1; // 0x402210\n    function_40bb40(0x404960, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    g43 = 0;\n    g44 = 0;\n    *(char *)&g46 = 0;\n    *(char *)&g45 = 0;\n    g49 = 0;\n    int64_t v2 = 0; // 0x402298\n    int64_t v3 = a1 & 0xffffffff; // 0x402298\n    int64_t v4 = 0; // 0x402298\n    int64_t v5 = 0; // 0x402298\n    int64_t v6 = 0; // 0x402298\n    int64_t v7 = 0; // 0x402298\n    int64_t v8; // 0x402210\n    int64_t v9; // 0x402210\n    int64_t v10; // 0x402210\n    int64_t v11; // 0x402210\n    int64_t v12; // 0x402210\n    int64_t v13; // 0x402210\n    int64_t v14; // 0x402210\n    int64_t v15; // 0x402210\n    int64_t v16; // 0x402210\n    int64_t v17; // 0x402210\n    int64_t v18; // bp-200, 0x402210\n    char * format; // 0x402932\n    int32_t v19; // 0x402210\n    while (true) {\n      lab_0x4022a0_2:\n        // 0x4022a0\n        v13 = v7;\n        v12 = v6;\n        v9 = v5;\n        v8 = v4;\n        v15 = v3;\n        int64_t v20 = function_40a1b0(v15 & 0xffffffff, a2, \"bdfinrst:vFLPS:T\", &g2, 0, v1); // 0x4022b2\n        int32_t v21 = v20; // 0x4022b7\n        switch (v21) {\n            case -1: {\n                goto lab_0x4024fc;\n            }\n            case 98: {\n                char * v22 = g66; // 0x4024a8\n                v3 = v15;\n                v4 = v8;\n                v5 = v9;\n                v6 = 1;\n                v7 = v22 != NULL ? (int64_t)v22 : v13;\n                goto lab_0x4022a0_2;\n            }\n            default: {\n                // 0x4022c9\n                v14 = v20;\n                v16 = v15;\n                v10 = v9;\n                if (v21 > 98) {\n                    if (v21 == 110) {\n                        // 0x402498\n                        g23 = 0;\n                        v3 = v15;\n                        v4 = v8;\n                        v5 = v9;\n                        v6 = v12;\n                        v7 = v13;\n                        goto lab_0x4022a0_2;\n                    } else {\n                        if (v21 > 110) {\n                            if (v21 == 115) {\n                                // 0x402488\n                                g49 = 1;\n                                v3 = v15;\n                                v4 = v8;\n                                v5 = v9;\n                                v6 = v12;\n                                v7 = v13;\n                                goto lab_0x4022a0_2;\n                            } else {\n                                if (v21 > 115) {\n                                    if (v21 != 116) {\n                                        if (v21 != 118) {\n                                            // 0x4023b9\n                                            function_4032b0(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x40239d\n                                        g44 = 1;\n                                        v3 = v15;\n                                        v4 = v8;\n                                        v5 = v9;\n                                        v6 = v12;\n                                        v7 = v13;\n                                        goto lab_0x4022a0_2;\n                                    } else {\n                                        if (v9 != 0) {\n                                            // 0x402926\n                                            format = dcgettext(NULL, \"multiple target directories specified\", 5);\n                                            error(1, (int32_t)\"multiple target directories specified\" ^ (int32_t)\"multiple target directories specified\", format);\n                                            return &g68;\n                                        }\n                                        // 0x4022ff\n                                        if (__xstat(1, g66, (struct stat *)&v18) != 0) {\n                                            goto lab_0x4028e5;\n                                        }\n                                        int64_t v23 = (int64_t)g66; // 0x402321\n                                        v3 = v15;\n                                        v4 = v8;\n                                        v5 = v23;\n                                        v6 = v12;\n                                        v7 = v13;\n                                        if ((v19 & 0xf000) == 0x4000) {\n                                            goto lab_0x4022a0_2;\n                                        } else {\n                                            int64_t v24 = function_407c30(4, v23); // 0x402340\n                                            error(1, (int32_t)\"target %s is not a directory\" ^ (int32_t)\"target %s is not a directory\", dcgettext(NULL, \"target %s is not a directory\", 5));\n                                            v14 = &g68;\n                                            v16 = v24;\n                                            v10 = v23;\n                                            goto lab_0x402370;\n                                        }\n                                    }\n                                } else {\n                                    if (v21 != 114) {\n                                        // 0x4023b9\n                                        function_4032b0(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x402425\n                                    g48 = 1;\n                                    v3 = v15;\n                                    v4 = v8;\n                                    v5 = v9;\n                                    v6 = v12;\n                                    v7 = v13;\n                                    goto lab_0x4022a0_2;\n                                }\n                            }\n                        } else {\n                            if (v21 == 102) {\n                                // 0x402470\n                                *(char *)&g45 = 1;\n                                *(char *)&g46 = 0;\n                                v3 = v15;\n                                v4 = v8;\n                                v5 = v9;\n                                v6 = v12;\n                                v7 = v13;\n                                goto lab_0x4022a0_2;\n                            } else {\n                                if (v21 != 105) {\n                                    // 0x402458\n                                    v17 = v15;\n                                    v11 = v9;\n                                    if (v21 != 100) {\n                                        // 0x4023b9\n                                        function_4032b0(1);\n                                        // UNREACHABLE\n                                    }\n                                    goto lab_0x402461;\n                                } else {\n                                    // 0x402442\n                                    *(char *)&g45 = 0;\n                                    *(char *)&g46 = 1;\n                                    v3 = v15;\n                                    v4 = v8;\n                                    v5 = v9;\n                                    v6 = v12;\n                                    v7 = v13;\n                                    goto lab_0x4022a0_2;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    goto lab_0x402370;\n                }\n            }\n        }\n    }\n  lab_0x4024fc:;\n    int32_t v25 = (int32_t)v15 - g33; // 0x402503\n    char * format2; // 0x40282f\n    if (v25 < 1) {\n        // 0x402823\n        format2 = dcgettext(NULL, \"missing file operand\", 5);\n        error(0, (int32_t)\"missing file operand\" ^ (int32_t)\"missing file operand\", format2);\n        // 0x4023b9\n        function_4032b0(1);\n        // UNREACHABLE\n    }\n    int64_t v26 = 8 * (int64_t)g33 + a2; // 0x402505\n    int32_t err_num; // 0x402210\n    int64_t v27; // 0x402210\n    int64_t v28; // 0x402210\n    int64_t v29; // 0x402210\n    int64_t v30; // 0x402210\n    int64_t v31; // 0x402210\n    int64_t v32; // 0x402210\n    int64_t v33; // 0x402210\n    int32_t v34; // 0x402210\n    int64_t * v35; // 0x402688\n    int64_t v36; // 0x402688\n    uint32_t err_num2; // 0x402701\n    if (v8 != 0) {\n        if (v9 != 0) {\n            // 0x402884\n            error(1, (int32_t)\"cannot combine --target-directory and --no-target-directory\" ^ (int32_t)\"cannot combine --target-directory and --no-target-directory\", dcgettext(NULL, \"cannot combine --target-directory and --no-target-directory\", 5));\n            goto lab_0x4028a6;\n        } else {\n            // 0x4025b4\n            v28 = 2;\n            v31 = a2;\n            v27 = 0;\n            if (v25 != 2) {\n                if (v25 != 1) {\n                    // 0x40284c\n                    function_407c30(4, *(int64_t *)(v26 + 16));\n                    // 0x402867\n                    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"extra operand %s\", 5));\n                    // 0x4023b9\n                    function_4032b0(1);\n                    // UNREACHABLE\n                }\n                goto lab_0x4028a6;\n            } else {\n                goto lab_0x402524;\n            }\n        }\n    } else {\n        int64_t v37 = v25; // 0x402503\n        v28 = v37;\n        v31 = a2;\n        v27 = v9;\n        if (v9 == 0) {\n            // 0x402671\n            v28 = 1;\n            v31 = a2;\n            v27 = (int64_t)\".\";\n            if (v25 == 1) {\n                goto lab_0x402524;\n            } else {\n                // 0x402680\n                v35 = (int64_t *)(v26 - 8 + (0x100000000 * v37 >> 29));\n                v36 = *v35;\n                int64_t v38 = function_404ca0(v36, a2); // 0x402693\n                int64_t v39 = -1; // 0x4026a5\n                int64_t v40 = v38; // 0x4026a5\n                int64_t v41 = 0; // 0x4026a5\n                while (v39 != 0) {\n                    int64_t v42 = v40;\n                    v39--;\n                    bool v43; // 0x402210\n                    v40 = v42 + (v43 ? -1 : 1);\n                    v41 = v39;\n                    if (*(char *)v42 == (char)v8) {\n                        // break -> \n                        break;\n                    }\n                    v41 = 0;\n                }\n                int64_t v44 = -2 - v41; // 0x4026b5\n                v34 = 1;\n                if (v44 != 0) {\n                    // 0x4026bb\n                    v34 = *(char *)(v38 - 1 + v44) == 47;\n                }\n                char * v45 = (char *)v36;\n                int32_t v46; // 0x402210\n                if (g23 == 0) {\n                    // 0x4027a3\n                    v46 = __lxstat(1, v45, (struct stat *)&v18);\n                } else {\n                    // 0x4026f3\n                    v46 = __xstat(1, v45, (struct stat *)&v18);\n                }\n                // 0x4026f8\n                v30 = v37;\n                v33 = v36;\n                if (v46 == 0) {\n                    goto lab_0x402775;\n                } else {\n                    // 0x4026fc\n                    err_num2 = *__errno_location();\n                    v30 = v37;\n                    v33 = v36;\n                    if (err_num2 == 0) {\n                        goto lab_0x402775;\n                    } else {\n                        if (err_num2 < 41) {\n                            if ((1 << (int64_t)(err_num2 % 64) & 0x11000100004) == 0) {\n                                goto lab_0x4027b4;\n                            } else {\n                                // 0x402727\n                                v29 = v37;\n                                v32 = v36;\n                                err_num = err_num2;\n                                if (v34 != 0) {\n                                    goto lab_0x4027ed;\n                                } else {\n                                    goto lab_0x402732;\n                                }\n                            }\n                        } else {\n                            goto lab_0x4027b4;\n                        }\n                    }\n                }\n            }\n        } else {\n            goto lab_0x402524;\n        }\n    }\n  lab_0x402370:;\n    int64_t v47 = v10;\n    int64_t v48 = v16;\n    int32_t v49 = v14;\n    if (v49 == 76) {\n        // 0x4024e0\n        g47 = 1;\n        v3 = v48;\n        v4 = v8;\n        v5 = v47;\n        v6 = v12;\n        v7 = v13;\n        goto lab_0x4022a0_2;\n    } else {\n        if (v49 > 76) {\n            if (v49 == 83) {\n                // 0x4024c8\n                v3 = v48;\n                v4 = v8;\n                v5 = v47;\n                v6 = 1;\n                v7 = v13;\n            } else {\n                // 0x402384\n                v3 = v48;\n                v4 = 1;\n                v5 = v47;\n                v6 = v12;\n                v7 = v13;\n                if (v49 != 84) {\n                    if (v49 != 80) {\n                        // 0x4023b9\n                        function_4032b0(1);\n                        // UNREACHABLE\n                    }\n                    // 0x4024f0\n                    g47 = 0;\n                    v3 = v48;\n                    v4 = v8;\n                    v5 = v47;\n                    v6 = v12;\n                    v7 = v13;\n                }\n            }\n            goto lab_0x4022a0_2;\n        } else {\n            // 0x4023c8\n            v17 = v48;\n            v11 = v47;\n            switch (v49) {\n                case -130: {\n                    // 0x4027ad\n                    function_4032b0(0);\n                    // UNREACHABLE\n                }\n                case 70: {\n                    goto lab_0x402461;\n                }\n                default: {\n                    if (v49 != -131) {\n                        // 0x4023b9\n                        function_4032b0(1);\n                        // UNREACHABLE\n                    }\n                    // 0x4023e3\n                    function_408910((int64_t)g36, \"ln\", \"GNU coreutils\", (int64_t)g24, \"Mike Parker\", \"David MacKenzie\");\n                    exit(0);\n                    // UNREACHABLE\n                }\n            }\n        }\n    }\n  lab_0x4022a0:\n    // 0x4022a0\n    goto lab_0x4022a0_2;\n  lab_0x402461:\n    // 0x402461\n    g43 = 1;\n    v3 = v17;\n    v4 = v8;\n    v5 = v11;\n    v6 = v12;\n    v7 = v13;\n    goto lab_0x4022a0;\n  lab_0x402524:;\n    int32_t v50 = 0; // 0x402529\n    int64_t v51 = v31; // 0x402529\n    if (v12 != 0) {\n        char * v52 = dcgettext(NULL, \"backup type\", 5); // 0x40264a\n        v50 = function_404280((int64_t)v52, v13);\n        v51 = v13;\n    }\n    // 0x40252f\n    g50 = v50;\n    function_403ce0(v2);\n    if (g48 != 0 == g49 == 0) {\n        // 0x4028c3\n        error(1, (int32_t)\"cannot do --relative without --symbolic\" ^ (int32_t)\"cannot do --relative without --symbolic\", dcgettext(NULL, \"cannot do --relative without --symbolic\", 5));\n      lab_0x4028e5:\n        // 0x4028e5\n        function_407c30(4, (int64_t)g66);\n        error(1, *__errno_location(), dcgettext(NULL, \"failed to access %s\", 5));\n        // 0x402926\n        format = dcgettext(NULL, \"multiple target directories specified\", 5);\n        error(1, (int32_t)\"multiple target directories specified\" ^ (int32_t)\"multiple target directories specified\", format);\n        return &g68;\n    }\n    if (v27 == 0) {\n        int64_t v53 = *(int64_t *)v26; // 0x402663\n        // 0x402624\n        return (function_402a30(v53, *(int64_t *)(v26 + 8)) & 0xffffffff) % 256 ^ 1;\n    }\n    int64_t v54 = v51; // 0x402561\n    if (!((v28 == 1 | *(char *)&g45 == 0))) {\n        // 0x40256c\n        v54 = v51;\n        if (g49 == 0 && g50 != 3) {\n            int64_t v55 = function_4057d0(61, 0, 0x406190, 0x4061d0, 0x406240); // 0x402595\n            g42 = v55;\n            v54 = 0;\n            if (v55 == 0) {\n                // 0x4025a6\n                function_408ca0(61);\n                // UNREACHABLE\n            }\n        }\n    }\n    int64_t * v56 = (int64_t *)v26; // 0x4025e0\n    int64_t v57 = v26 + 8; // 0x4025e4\n    function_404ca0(*v56, v54);\n    int64_t v58 = function_404e40(); // 0x4025f6\n    function_404d30(v18);\n    int64_t v59 = function_402a30(*v56, v58) & 1;\n    free((int64_t *)v58);\n    int64_t v60 = v57; // 0x402622\n    int64_t v61 = v58; // 0x402622\n    int64_t v62 = v59; // 0x402622\n    while (v57 != v26 + 8 + (8 * v28 + 0x7fffffff8 & 0x7fffffff8)) {\n        // 0x4025e0\n        v56 = (int64_t *)v60;\n        v57 = v60 + 8;\n        function_404ca0(*v56, v61);\n        v58 = function_404e40();\n        function_404d30(v18);\n        v59 = function_402a30(*v56, v58) & v62;\n        free((int64_t *)v58);\n        v60 = v57;\n        v61 = v58;\n        v62 = v59;\n    }\n    // 0x402624\n    return v59 % 256 ^ 1;\n  lab_0x4028a6:\n    // 0x4028a6\n    function_407c30(4, *(int64_t *)v26);\n    // 0x402867\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"missing destination file operand after %s\", 5));\n    // 0x4023b9\n    function_4032b0(1);\n    // UNREACHABLE\n  lab_0x402775:\n    // 0x402775\n    err_num = 0;\n    if ((char)v34 > (char)((v19 & 0xf000) == 0x4000)) {\n        goto lab_0x4027ed;\n    } else {\n        int64_t v63 = v33;\n        int64_t v64 = v30;\n        v29 = v64;\n        v32 = v63;\n        if ((v19 & 0xf000) != 0x4000) {\n            goto lab_0x402732;\n        } else {\n            int64_t v65 = v64 + 0xffffffff; // 0x402793\n            v28 = v65 & 0xffffffff;\n            v31 = v63;\n            v27 = *(int64_t *)((0x100000000 * v65 >> 29) + v26);\n            goto lab_0x402524;\n        }\n    }\n  lab_0x4027ed:\n    // 0x4027ed\n    function_407c30(4, v36);\n    error(1, err_num, dcgettext(NULL, \"target %s is not a directory\", 5));\n    // 0x402823\n    format2 = dcgettext(NULL, \"missing file operand\", 5);\n    error(0, (int32_t)\"missing file operand\" ^ (int32_t)\"missing file operand\", format2);\n    // 0x4023b9\n    function_4032b0(1);\n    // UNREACHABLE\n  lab_0x402732:\n    // 0x402732\n    v28 = 2;\n    v31 = v32;\n    v27 = 0;\n    if ((int32_t)v29 == 2) {\n        goto lab_0x402524;\n    } else {\n        int64_t v66 = function_407c30(4, *v35); // 0x402748\n        error(1, (int32_t)\"target %s is not a directory\" ^ (int32_t)\"target %s is not a directory\", dcgettext(NULL, \"target %s is not a directory\", 5));\n        v30 = v66;\n        v33 = (int32_t)\"target %s is not a directory\" ^ (int32_t)\"target %s is not a directory\";\n        goto lab_0x402775;\n    }\n  lab_0x4027b4:\n    // 0x4027b4\n    function_407c30(4, v36);\n    error(1, err_num2, dcgettext(NULL, \"failed to access %s\", 5));\n    err_num = 0;\n    goto lab_0x4027ed;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402950",
            "funcEndAddr": "40297b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402950\n    int64_t v1; // 0x402950\n    __libc_start_main(0x402210, (int32_t)a4, (char **)&v1, (void (*)())0x40bad0, (void (*)())0x40bb30, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40297b",
            "funcStartAddr": "40297b",
            "funcEndAddr": "40299a",
            "decompiledFuncCode": "int64_t function_40297b(void) {\n    // 0x40297b\n    return 0x611388;\n}\n"
        },
        {
            "funcName": "function_40299a",
            "funcStartAddr": "40299a",
            "funcEndAddr": "4029d1",
            "decompiledFuncCode": "int64_t function_40299a(void) {\n    // 0x40299a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4029d1",
            "funcStartAddr": "4029d1",
            "funcEndAddr": "402a28",
            "decompiledFuncCode": "int64_t function_4029d1(void) {\n    // 0x4029d1\n    if (g40 != 0) {\n        // 0x402a27\n        int64_t result; // 0x4029d1\n        return result;\n    }\n    int64_t v1 = g41; // 0x402a04\n    int64_t result2; // 0x402a16\n    if (g41 >= ((int64_t)&g20 - (int64_t)&g19 >> 3) - 1) {\n        // 0x402a16\n        result2 = function_40297b();\n        g40 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g20 - (int64_t)&g19 >> 3) - 1) {\n        // 0x402a06\n        v1++;\n    }\n    // 0x4029fa\n    g41 = v1;\n    // 0x402a16\n    result2 = function_40297b();\n    g40 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402a28",
            "funcStartAddr": "402a28",
            "funcEndAddr": "402a2d",
            "decompiledFuncCode": "int64_t function_402a28(void) {\n    // 0x402a28\n    return function_40299a();\n}\n"
        },
        {
            "funcName": "function_402a30",
            "funcStartAddr": "402a30",
            "funcEndAddr": "4032ac",
            "decompiledFuncCode": "int64_t function_402a30(int64_t a1, int64_t file_path4) {\n    char v1 = 0; // 0x402a50\n    int64_t v2; // bp-344, 0x402a30\n    if (g49 != 0) {\n        goto lab_0x402a95;\n    } else {\n        char * v3 = (char *)a1;\n        if (g47 == 0) {\n            // 0x402ce8\n            if (__lxstat(1, v3, (struct stat *)&v2) == 0) {\n                goto lab_0x402a7e;\n            } else {\n                goto lab_0x402cfa;\n            }\n        } else {\n            // 0x402a6c\n            if (__xstat(1, v3, (struct stat *)&v2) != 0) {\n                goto lab_0x402cfa;\n            } else {\n                goto lab_0x402a7e;\n            }\n        }\n    }\n  lab_0x402a95:;\n    char v4 = *(char *)&g45; // 0x402a95\n    char v5 = 0; // 0x402aa0\n    int64_t file_path3 = 0; // 0x402aa0\n    int64_t v6; // 0x402a30\n    int64_t v7; // 0x402a30\n    int64_t v8; // bp-200, 0x402a30\n    char * file_path; // 0x402abf\n    if ((*(char *)&g46 || v4) == 0 == g50 == 0) {\n        goto lab_0x402aeb;\n    } else {\n        // 0x402aaf\n        file_path = (char *)file_path4;\n        if (__lxstat(1, file_path, (struct stat *)&v8) == 0) {\n            char v9 = v4; // 0x402c0a\n            if (g42 != 0) {\n                // 0x402c0c\n                if ((char)function_404e00((int64_t)g42, file_path4, &v8) != 0) {\n                    // 0x403200\n                    function_407b50(1, 4, a1);\n                    function_407b50(0, 4, file_path4);\n                    // 0x402ff0\n                    error(0, 0, dcgettext(NULL, \"will not overwrite just-created %s with %s\", 5));\n                    // 0x402be5\n                    return 0;\n                }\n                // 0x402c24\n                v9 = *(char *)&g45;\n            }\n            // 0x402c2c\n            if (v9 == 0) {\n                int64_t v10 = &v8; // 0x402aaf\n                v6 = v10;\n                v7 = v10;\n                if (g49 != 0 || g50 == 0) {\n                    goto lab_0x402c70;\n                } else {\n                    goto lab_0x402f6b;\n                }\n            } else {\n                int64_t v11 = g50; // 0x402c35\n                if (g50 != 0) {\n                    // 0x403180\n                    v6 = v11;\n                    v7 = v11;\n                    if (g49 != 0) {\n                        goto lab_0x402c70;\n                    } else {\n                        goto lab_0x402f6b;\n                    }\n                } else {\n                    // 0x402c43\n                    v7 = v11;\n                    if (g49 == 0) {\n                        goto lab_0x402f6b;\n                    } else {\n                        int64_t v12 = &v2; // 0x402c50\n                        int32_t v13 = __xstat(1, (char *)a1, (struct stat *)&v2); // 0x402c5d\n                        v6 = v12;\n                        v7 = v12;\n                        if (v13 == 0) {\n                            goto lab_0x402f6b;\n                        } else {\n                            goto lab_0x402c70;\n                        }\n                    }\n                }\n            }\n        } else {\n            int32_t * err_num = __errno_location(); // 0x402acf\n            v5 = 0;\n            file_path3 = 0;\n            if (*err_num != 2) {\n                // 0x4030d8\n                function_407c30(4, file_path4);\n                error(0, *err_num, dcgettext(NULL, \"failed to access %s\", 5));\n                // 0x402be5\n                return 0;\n            }\n            goto lab_0x402aeb;\n        }\n    }\n  lab_0x402aeb:;\n    int64_t v14 = a1; // 0x402af5\n    int64_t v15 = 0; // 0x402af5\n    int64_t v16; // 0x402e43\n    int64_t v17; // 0x402e55\n    int64_t v18; // 0x402e6a\n    if (g48 != 0) {\n        // 0x402e40\n        v16 = function_404bc0();\n        v17 = function_4042d0(v16, 2);\n        v18 = function_4042d0(a1, 2);\n        if (v17 == 0 || v18 == 0) {\n            goto lab_0x403060;\n        } else {\n            int64_t v19 = function_408a50(0x1000); // 0x402e8b\n            if ((char)function_403a10(v18, v17, v19, 0x1000) == 0) {\n                // 0x403058\n                free((int64_t *)v19);\n                goto lab_0x403060;\n            } else {\n                // 0x402eb2\n                free((int64_t *)v16);\n                free((int64_t *)v17);\n                free((int64_t *)v18);\n                v14 = v19;\n                v15 = v19;\n                if (v19 == 0) {\n                    goto lab_0x40307e;\n                } else {\n                    goto lab_0x402afb;\n                }\n            }\n        }\n    } else {\n        goto lab_0x402afb;\n    }\n  lab_0x402afb:;\n    int64_t v20 = (int64_t)(*(char *)&g45 | v5); // 0x402b08\n    int64_t v21; // 0x402a30\n    if (g49 != 0) {\n        // 0x402e20\n        v21 = function_403890(v14, 0xffffff9c, file_path4, v20);\n    } else {\n        // 0x402b12\n        v21 = function_403750(0xffffff9c, v14, 0xffffff9c, file_path4, 1024 * (int32_t)(g47 != 0), v20);\n    }\n    // 0x402b3d\n    if (v21 > -1) {\n        // 0x402b45\n        if (g49 == 0) {\n            // 0x4030b8\n            function_404d70((int64_t)g42, file_path4, &v2);\n        }\n        // 0x402b52\n        if (g44 == 0) {\n            // 0x402bd5\n            free((int64_t *)file_path3);\n            free((int64_t *)v15);\n            // 0x402be5\n            return v21 > -1;\n        }\n        if (file_path3 != 0) {\n            // 0x402b60\n            __printf_chk(1, \"%s ~ \", (char *)function_407c30(4, file_path3));\n        }\n        int64_t v22 = function_407b50(1, 4, v14); // 0x402b94\n        char v23 = g49 != 0 ? 45 : 61; // 0x402bd0\n        __printf_chk(1, \"%s %c> %s\\n\", (char *)function_407b50(0, 4, file_path4), v23, (char *)v22);\n        // 0x402bd5\n        free((int64_t *)file_path3);\n        free((int64_t *)v15);\n        // 0x402be5\n        return v21 > 0xffffffffffffffff;\n    }\n    // 0x402d40\n    function_407b50(1, 4, v14);\n    function_407b50(0, 4, file_path4);\n    int32_t * err_num3 = __errno_location(); // 0x402d6b\n    int32_t v24 = *err_num3;\n    char * format; // 0x402a30\n    if (g49 == 0) {\n        switch (v24) {\n            case 31: {\n                if (v1 != 0) {\n                    // 0x403038\n                    format = dcgettext(NULL, \"failed to create hard link %s => %s\", 5);\n                    goto lab_0x402da6;\n                } else {\n                    // 0x4031e1\n                    format = dcgettext(NULL, \"failed to create hard link to %.0s%s\", 5);\n                    goto lab_0x402da6;\n                }\n            }\n            case 122: {\n                // 0x403098\n                format = dcgettext(NULL, \"failed to create hard link %s\", 5);\n                goto lab_0x402da6;\n            }\n            case 17: {\n                // 0x403098\n                format = dcgettext(NULL, \"failed to create hard link %s\", 5);\n                goto lab_0x402da6;\n            }\n            default: {\n                if ((v24 - 28 & -3) == 0) {\n                    // 0x403098\n                    format = dcgettext(NULL, \"failed to create hard link %s\", 5);\n                    goto lab_0x402da6;\n                } else {\n                    // 0x403038\n                    format = dcgettext(NULL, \"failed to create hard link %s => %s\", 5);\n                    goto lab_0x402da6;\n                }\n            }\n        }\n    } else {\n        if (v24 == 36) {\n            // 0x402d97\n            format = dcgettext(NULL, \"failed to create symbolic link %s -> %s\", 5);\n            goto lab_0x402da6;\n        } else {\n            // 0x402d8c\n            if (*(char *)v14 != 0) {\n                // 0x403298\n                format = dcgettext(NULL, \"failed to create symbolic link %s\", 5);\n                goto lab_0x402da6;\n            } else {\n                // 0x402d97\n                format = dcgettext(NULL, \"failed to create symbolic link %s -> %s\", 5);\n                goto lab_0x402da6;\n            }\n        }\n    }\n  lab_0x402a7e:\n    // 0x402a7e\n    v1 = 0;\n    int64_t v25; // 0x402a30\n    int32_t v26; // 0x402a30\n    if ((v26 & 0xf000) == 0x4000) {\n        // 0x402f00\n        v1 = g43;\n        if (g43 != 0) {\n            goto lab_0x402a95;\n        } else {\n            // 0x402f11\n            function_407d00(0, 3, a1);\n            v25 = (int64_t)\"%s: hard link not allowed for directory\";\n            goto lab_0x402f2d;\n        }\n    } else {\n        goto lab_0x402a95;\n    }\n  lab_0x402cfa:\n    // 0x402cfa\n    function_407c30(4, a1);\n    error(0, *__errno_location(), dcgettext(NULL, \"failed to access %s\", 5));\n    // 0x402be5\n    return g49;\n  lab_0x403060:\n    // 0x403060\n    free((int64_t *)v16);\n    free((int64_t *)v17);\n    free((int64_t *)v18);\n    goto lab_0x40307e;\n  lab_0x40307e:;\n    int64_t v27 = function_408c80(a1); // 0x403081\n    v14 = v27;\n    v15 = v27;\n    goto lab_0x402afb;\n  lab_0x402c70:\n    if ((v26 & 0xf000) == 0x4000) {\n        // 0x4031b0\n        function_407d00(0, 3, file_path4);\n        v25 = (int64_t)\"%s: cannot overwrite directory\";\n        goto lab_0x402f2d;\n    } else {\n        unsigned char result = *(char *)&g46; // 0x402c87\n        int64_t v28 = v6; // 0x402c90\n        if (result != 0) {\n            // 0x403120\n            function_407c30(4, file_path4);\n            char * v29 = dcgettext(NULL, \"%s: replace %s? \", 5); // 0x403143\n            __fprintf_chk(g39, 1, v29);\n            if ((char)function_408d10() == 0) {\n                // 0x402be5\n                return result;\n            }\n            // 0x403171\n            *(char *)&g45 = 1;\n            v28 = (int64_t)v29;\n        }\n        // 0x402c96\n        v5 = 0;\n        file_path3 = 0;\n        if (g50 != 0) {\n            int64_t file_path2 = function_404240(file_path4, g50, v28); // 0x402ca7\n            if (rename(file_path, (char *)file_path2) != 0) {\n                int32_t err_num2 = *__errno_location(); // 0x403248\n                free((int64_t *)file_path2);\n                v5 = 0;\n                file_path3 = 0;\n                if (err_num2 != 2) {\n                    // 0x403258\n                    function_407c30(4, file_path4);\n                    error(0, err_num2, dcgettext(NULL, \"cannot backup %s\", 5));\n                    // 0x402be5\n                    return 0;\n                }\n            } else {\n                // 0x402cc2\n                v5 = file_path2 != 0;\n                file_path3 = file_path2;\n            }\n        }\n        goto lab_0x402aeb;\n    }\n  lab_0x402f6b:\n    // 0x402f6b\n    v6 = v7;\n    // 0x402f7e\n    v6 = v7;\n    if (v2 != v8) {\n        goto lab_0x402c70;\n    } else {\n        int64_t v30; // 0x402a30\n        if (v30 == 1) {\n            goto lab_0x402fac;\n        } else {\n            // 0x402f99\n            v6 = v7;\n            if ((char)function_4080f0(a1, file_path4) == 0) {\n                goto lab_0x402c70;\n            } else {\n                goto lab_0x402fac;\n            }\n        }\n    }\n  lab_0x402da6:\n    // 0x402da6\n    error(0, *err_num3, format);\n    if (file_path3 == 0) {\n        // 0x402bd5\n        free((int64_t *)file_path3);\n        free((int64_t *)v15);\n        // 0x402be5\n        return v21 > 0xffffffffffffffff;\n    }\n    // 0x402dc9\n    if (rename((char *)file_path3, (char *)file_path4) != 0) {\n        // 0x402ddc\n        function_407c30(4, file_path4);\n        error(0, *err_num3, dcgettext(NULL, \"cannot un-backup %s\", 5));\n    }\n    // 0x402bd5\n    free((int64_t *)file_path3);\n    free((int64_t *)v15);\n    // 0x402be5\n    return v21 > 0xffffffffffffffff;\n  lab_0x402f2d:\n    // 0x402f2d\n    error(0, 0, dcgettext(NULL, (char *)v25, 5));\n    // 0x402be5\n    return 0;\n  lab_0x402fac:\n    // 0x402fac\n    function_407b50(1, 4, file_path4);\n    function_407b50(0, 4, a1);\n    // 0x402ff0\n    error(0, 0, dcgettext(NULL, \"%s and %s are the same file\", 5));\n    // 0x402be5\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4032b0",
            "funcStartAddr": "4032b0",
            "funcEndAddr": "40369d",
            "decompiledFuncCode": "int64_t function_4032b0(int64_t a1) {\n    int32_t status = a1; // 0x4032c6\n    if (status != 0) {\n        // 0x4032ca\n        __fprintf_chk(g39, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4032ef\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4032f6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [-T] TARGET LINK_NAME   (1st form)\\n  or:  %s [OPTION]... TARGET                  (2nd form)\\n  or:  %s [OPTION]... TARGET... DIRECTORY     (3rd form)\\n  or:  %s [OPTION]... -t DIRECTORY TARGET...  (4th form)\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"In the 1st form, create a link to TARGET with the name LINK_NAME.\\nIn the 2nd form, create a link to TARGET in the current directory.\\nIn the 3rd and 4th forms, create links to each TARGET in DIRECTORY.\\nCreate hard links by default, symbolic links with --symbolic.\\nBy default, each destination (name of new link) should not already exist.\\nWhen creating hard links, each TARGET must exist.  Symbolic links\\ncan hold arbitrary text; if later resolved, a relative link is\\ninterpreted in relation to its parent directory.\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"      --backup[=CONTROL]      make a backup of each existing destination file\\n  -b                          like --backup but does not accept an argument\\n  -d, -F, --directory         allow the superuser to attempt to hard link\\n                                directories (note: will probably fail due to\\n                                system restrictions, even for the superuser)\\n  -f, --force                 remove existing destination files\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"  -i, --interactive           prompt whether to remove destinations\\n  -L, --logical               dereference TARGETs that are symbolic links\\n  -n, --no-dereference        treat LINK_NAME as a normal file if\\n                                it is a symbolic link to a directory\\n  -P, --physical              make hard links directly to symbolic links\\n  -r, --relative              create symbolic links relative to link location\\n  -s, --symbolic              make symbolic links instead of hard links\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"  -S, --suffix=SUFFIX         override the usual backup suffix\\n  -t, --target-directory=DIRECTORY  specify the DIRECTORY in which to create\\n                                the links\\n  -T, --no-target-directory   treat LINK_NAME as a normal file always\\n  -v, --verbose               print name of each linked file\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe backup suffix is '~', unless set with --suffix or SIMPLE_BACKUP_SUFFIX.\\nThe version control method may be selected via the --backup option or through\\nthe VERSION_CONTROL environment variable.  Here are the values:\\n\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"  none, off       never make backups (even if --backup is given)\\n  numbered, t     make numbered backups\\n  existing, nil   numbered if numbered backups exist, simple otherwise\\n  simple, never   always make simple backups\\n\", 5), g36);\n    __printf_chk(1, dcgettext(NULL, \"\\nUsing -s ignores -L and -P.  Otherwise, the last option specified controls\\nbehavior when a TARGET is a symbolic link, defaulting to %s.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x40347d\n    bool v2; // 0x4032b0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x403500\n    int64_t v6 = *(int64_t *)v5; // 0x403504\n    int64_t v7 = 3; // 0x40350a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"ln\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x403516\n        char v11 = *(char *)v9; // 0x403516\n        char v12 = v11; // 0x403516\n        bool v13 = false; // 0x403516\n        while (v10 == v11) {\n            // 0x40350c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x403516\n            int64_t v15 = v8 + v3; // 0x403516\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x403522\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 3;\n    }\n    // 0x403522\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x403634;\n        } else {\n            // 0x40361e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403673\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403584;\n            } else {\n                goto lab_0x403634;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x403584;\n        } else {\n            // 0x40356a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403673\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403584;\n            } else {\n                goto lab_0x403584;\n            }\n        }\n    }\n  lab_0x403634:\n    // 0x403634\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4035c4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4032ef\n    exit(status);\n    // UNREACHABLE\n  lab_0x403584:\n    // 0x403584\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x4035c4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4032ef\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4036a0",
            "funcStartAddr": "4036a0",
            "funcEndAddr": "4036b8",
            "decompiledFuncCode": "int64_t function_4036a0(int64_t path2, int64_t a2) {\n    int32_t fd2 = *(int32_t *)(a2 + 16); // 0x4036a6\n    int64_t path1 = *(int64_t *)(a2 + 8); // 0x4036a9\n    int32_t flag = *(int32_t *)(a2 + 20); // 0x4036ad\n    int64_t fd; // 0x4036a0\n    return linkat((int32_t)fd, (char *)path1, fd2, (char *)path2, flag);\n}\n"
        },
        {
            "funcName": "function_4036c0",
            "funcStartAddr": "4036c0",
            "funcEndAddr": "403724",
            "decompiledFuncCode": "int64_t function_4036c0(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = function_404ca0(a1, v1) - a1; // 0x4036cf\n    uint64_t size = v2 + 9; // 0x4036d2\n    int64_t result = v1; // 0x4036e0\n    if (size >= 257) {\n        int64_t * mem = malloc((int32_t)size); // 0x4036e2\n        result = (int64_t)mem;\n        if (mem == NULL) {\n            // 0x403714\n            return 0;\n        }\n    }\n    int64_t * v3 = mempcpy((int64_t *)result, (int64_t *)a1, (int32_t)v2); // 0x4036f8\n    *v3 = 0x5858585858587543;\n    *(char *)((int64_t)v3 + 8) = 0;\n    // 0x403714\n    return result;\n}\n"
        },
        {
            "funcName": "function_403730",
            "funcStartAddr": "403730",
            "funcEndAddr": "403741",
            "decompiledFuncCode": "int64_t function_403730(int64_t path2, int64_t a2) {\n    uint32_t path1 = *(int32_t *)(a2 + 8); // 0x403736\n    return symlinkat((char *)(int64_t)path1, path1, (char *)path2);\n}\n"
        },
        {
            "funcName": "function_403750",
            "funcStartAddr": "403750",
            "funcEndAddr": "403885",
            "decompiledFuncCode": "int64_t function_403750(int64_t fd, int64_t path1, int64_t a3, int64_t a4, int32_t flag, int64_t a6) {\n    int32_t fd2 = a3; // 0x403774\n    char * path2 = (char *)a4; // 0x403774\n    uint32_t v1 = linkat((int32_t)fd, (char *)path1, fd2, path2, flag); // 0x403774\n    int64_t result = v1; // 0x40377e\n    if ((char)a6 != 1 || v1 == 0) {\n        // 0x403794\n        return result;\n    }\n    int32_t * v2 = __errno_location(); // 0x40378a\n    if (*v2 != 17) {\n        // 0x403794\n        return result;\n    }\n    // 0x4037b0\n    int64_t v3; // bp-312, 0x403750\n    int64_t v4 = function_4036c0(a4, &v3); // 0x4037bd\n    if (v4 == 0) {\n        // 0x403794\n        return 0xffffffff;\n    }\n    int64_t v5 = 0x100000000 * fd >> 32; // bp-344, 0x4037e3\n    int64_t v6 = function_4082d0(v4, 0, &v5, 0x4036a0, 6); // 0x4037f6\n    int64_t v7 = 0x100000000 * (int64_t)v2 >> 32; // 0x4037fb\n    int32_t v8; // 0x403750\n    if ((int32_t)v6 == 0) {\n        char * path = (char *)v4; // 0x40384f\n        int32_t v9 = 0; // 0x40385e\n        if (renameat(fd2, path, fd2, path2) != 0) {\n            // 0x403860\n            v9 = *(int32_t *)v7;\n        }\n        // 0x403863\n        unlinkat(fd2, path, 0);\n        v8 = v9;\n    } else {\n        // 0x403804\n        v8 = *(int32_t *)v7;\n    }\n    // 0x403807\n    if (v4 != (int64_t)&v3) {\n        // 0x403811\n        free((int64_t *)v4);\n    }\n    int64_t result2 = 1; // 0x40382b\n    if (v8 != 0) {\n        // 0x403831\n        *(int32_t *)v7 = v8;\n        result2 = 0xffffffff;\n    }\n    // 0x403794\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403890",
            "funcStartAddr": "403890",
            "funcEndAddr": "403990",
            "decompiledFuncCode": "int64_t function_403890(int64_t path1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t fd = a2; // 0x4038ac\n    char * path2 = (char *)a3; // 0x4038ac\n    uint32_t v1 = symlinkat((char *)path1, fd, path2); // 0x4038ac\n    int64_t result = v1; // 0x4038b1\n    if ((char)a4 != 1 || v1 == 0) {\n        // 0x4038ca\n        return result;\n    }\n    int32_t * v2 = __errno_location(); // 0x4038bd\n    if (*v2 != 17) {\n        // 0x4038ca\n        return result;\n    }\n    // 0x4038e0\n    int64_t v3; // bp-312, 0x403890\n    int64_t v4 = function_4036c0(a3, &v3); // 0x4038eb\n    if (v4 == 0) {\n        // 0x4038ca\n        return 0xffffffff;\n    }\n    int64_t v5 = &v3; // 0x4038e0\n    int64_t v6 = path1; // bp-328, 0x40390f\n    int32_t v7; // 0x403890\n    if ((int32_t)function_4082d0(v4, 0, &v6, 0x403730, 6) == 0) {\n        char * path = (char *)v4; // 0x40394a\n        if (renameat(fd, path, fd, path2) == 0) {\n            // 0x403953\n            if (v4 != v5) {\n                // 0x403958\n                free((int64_t *)v4);\n            }\n            // 0x4038ca\n            return 1;\n        }\n        // 0x403968\n        unlinkat(fd, path, 0);\n        v7 = *v2;\n    } else {\n        // 0x403920\n        v7 = *v2;\n    }\n    // 0x403923\n    if (v4 != v5) {\n        // 0x403928\n        free((int64_t *)v4);\n    }\n    int64_t result2 = 1; // 0x403933\n    if (v7 != 0) {\n        // 0x403979\n        *v2 = v7;\n        result2 = 0xffffffff;\n    }\n    // 0x4038ca\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403990",
            "funcStartAddr": "403990",
            "funcEndAddr": "403a07",
            "decompiledFuncCode": "int64_t function_403990(int64_t str, int64_t * a2, int64_t * a3) {\n    if (a2 == NULL) {\n        // 0x4039f0\n        fputs_unlocked((char *)str, g36);\n        return 0;\n    }\n    int32_t len = strlen((char *)str); // 0x4039a9\n    uint64_t v1 = (int64_t)len; // 0x4039a9\n    if ((int64_t)a3 <= v1) {\n        // 0x4039bc\n        return 1;\n    }\n    // 0x4039c8\n    memcpy(a2, (int64_t *)str, len + 1);\n    *a2 = v1 + str;\n    *a3 = 1;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_403a10",
            "funcStartAddr": "403a10",
            "funcEndAddr": "403c07",
            "decompiledFuncCode": "int64_t function_403a10(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    char v1 = *(char *)(a2 + 1); // 0x403a18\n    char v2 = *(char *)(a1 + 1); // 0x403a1d\n    int64_t v3 = a4; // bp-40, 0x403a22\n    int64_t v4 = a3; // bp-32, 0x403a2a\n    char v5 = a2;\n    if (v5 == 0 || v1 == 47 != (v2 == 47)) {\n        // 0x403b1d\n        return 0;\n    }\n    char v6 = a1;\n    bool result = v6 == 0 | v5 != v6;\n    if (result) {\n        // 0x403b1d\n        return 0;\n    }\n    int64_t v7 = v5 == 47 ? 0x100000001 : 0;\n    int64_t v8 = v7 % 2; // 0x403a9e\n    char v9 = v2; // 0x403aac\n    int64_t v10 = 1; // 0x403aac\n    int64_t v11 = v7; // 0x403aac\n    int64_t v12 = v8; // 0x403aac\n    bool v13 = v2 == 0; // 0x403aac\n    int64_t v14; // 0x403a10\n    int64_t v15; // 0x403a10\n    bool v16; // 0x403a10\n    int64_t v17; // 0x403a10\n    char v18; // 0x403a10\n    if (v1 != 0) {\n        int64_t v19 = 2; // 0x403a73\n        v16 = v2 == 0;\n        v15 = v8;\n        v17 = v7;\n        v14 = 1;\n        v18 = v1;\n        if (v2 != 0 == v1 == v2) {\n            char v20 = *(char *)(v19 + a2); // 0x403a82\n            char v21 = *(char *)(v19 + a1); // 0x403a87\n            int64_t v22 = v19 + 0x100000000; // 0x403a9a\n            int64_t v23 = v22 & 0xffffffff; // 0x403a9a\n            int64_t v24 = v1 == 47 ? v22 : v8;\n            int64_t v25 = v24 & 0xffffffff; // 0x403a9e\n            v9 = v21;\n            v10 = v23;\n            v11 = v24;\n            v12 = v25;\n            v13 = v21 == 0;\n            while (v20 != 0) {\n                // 0x403a70\n                v19++;\n                char v26 = v20; // 0x403a73\n                v16 = v21 == 0;\n                v15 = v25;\n                v17 = v24;\n                v14 = v23;\n                v18 = v20;\n                if (v21 != 0 != (v20 == v21)) {\n                    goto lab_0x403b30;\n                }\n                v20 = *(char *)(v19 + a2);\n                v21 = *(char *)(v19 + a1);\n                v22 = v19 + 0x100000000;\n                v23 = v22 & 0xffffffff;\n                v24 = v26 == 47 ? v22 : v25;\n                v25 = v24 & 0xffffffff;\n                v9 = v21;\n                v10 = v23;\n                v11 = v24;\n                v12 = v25;\n                v13 = v21 == 0;\n            }\n            goto lab_0x403aae;\n        } else {\n            goto lab_0x403b30;\n        }\n    } else {\n        goto lab_0x403aae;\n    }\n  lab_0x403b30:;\n    int64_t v27 = v17; // 0x403b34\n    int64_t v28 = v15; // 0x403b34\n    int64_t v29 = v14; // 0x403b34\n    if (v16 == v18 == 47) {\n        goto lab_0x403ac5;\n    } else {\n        goto lab_0x403ac1;\n    }\n  lab_0x403aae:\n    // 0x403aae\n    v27 = v11;\n    v28 = v12;\n    v29 = v10;\n    if (v9 == 47 || v13) {\n        goto lab_0x403ac5;\n    } else {\n        goto lab_0x403ac1;\n    }\n  lab_0x403ac5:;\n    int64_t v30 = 0x100000000 * v29 >> 32; // 0x403ac5\n    int64_t v31 = v30 + a2; // 0x403ac8\n    char v32 = *(char *)v31; // 0x403ad0\n    char v33 = v32; // 0x403ad6\n    int64_t v34 = v31; // 0x403ad6\n    if (v32 == 47) {\n        int64_t v35 = v31 + 1; // 0x403ad8\n        v33 = *(char *)v35;\n        v34 = v35;\n    }\n    int64_t v36 = v30 + a1; // 0x403acc\n    int64_t v37 = v36 + (int64_t)(*(char *)v36 == 47); // 0x403ae8\n    int64_t v38; // 0x403a10\n    if (v33 != 0) {\n        int64_t v39 = function_403990((int64_t)\"..\", &v4, &v3) & 0xffffffff; // 0x403b52\n        char v40 = *(char *)v34; // 0x403b55\n        int64_t v41 = v39; // 0x403b5b\n        if (v40 != 0) {\n            int64_t v42 = v39; // 0x403bbb\n            int64_t v43; // 0x403ba5\n            if (v40 == 47) {\n                // 0x403bbd\n                v43 = function_403990((int64_t)\"/..\", &v4, &v3);\n                v42 = (v43 | v39) & 0xffffffff;\n            }\n            int64_t v44 = v34 + 1; // 0x403bad\n            char v45 = *(char *)v44; // 0x403bb1\n            v41 = v42;\n            int64_t v46 = v44; // 0x403bb7\n            while (v45 != 0) {\n                int64_t v47 = v42;\n                v42 = v47;\n                if (v45 == 47) {\n                    // 0x403bbd\n                    v43 = function_403990((int64_t)\"/..\", &v4, &v3);\n                    v42 = (v43 | v47) & 0xffffffff;\n                }\n                // 0x403bad\n                v44 = v46 + 1;\n                v45 = *(char *)v44;\n                v41 = v42;\n                v46 = v44;\n            }\n        }\n        // 0x403b60\n        v38 = v41;\n        if (*(char *)v37 != 0) {\n            int64_t v48 = function_403990((int64_t)\"/\", &v4, &v3); // 0x403b72\n            int64_t v49 = function_403990(v37, &v4, &v3); // 0x403b84\n            v38 = (v48 | v41 | v49) & 0xffffffff;\n        }\n    } else {\n        int64_t v50 = *(char *)v37 == 0 ? (int64_t)\".\" : v37; // 0x403aff\n        v38 = function_403990(v50, &v4, &v3) & 0xffffffff;\n    }\n    // 0x403b0e\n    if ((char)v38 != 0) {\n        // 0x403bc0\n        error(0, ENAMETOOLONG, \"%s\", dcgettext(NULL, \"generating relative path\", 5));\n    }\n    // 0x403b1d\n    return v38 & 0xffffffff ^ 1;\n  lab_0x403ac1:\n    // 0x403ac1\n    v29 = v28;\n    if ((int32_t)v27 == 0) {\n        // 0x403b1d\n        return result;\n    }\n    goto lab_0x403ac5;\n}\n"
        },
        {
            "funcName": "function_403c10",
            "funcStartAddr": "403c10",
            "funcEndAddr": "403cde",
            "decompiledFuncCode": "int64_t function_403c10(int64_t path, int64_t a2) {\n    int64_t v1 = function_404ca0(path, a2); // 0x403c24\n    uint64_t result = function_404d00(v1); // 0x403c2f\n    if (result < 15) {\n        // 0x403c3a\n        return result;\n    }\n    int16_t * v2 = (int16_t *)v1; // 0x403c55\n    *v2 = 46;\n    int32_t * v3 = __errno_location(); // 0x403c61\n    *v3 = 0;\n    int32_t v4 = pathconf((char *)path, _PC_NAME_MAX); // 0x403c77\n    int64_t result2 = v4; // 0x403c77\n    int64_t v5; // 0x403c10\n    if (v4 < 0) {\n        // 0x403cd0\n        v5 = 255;\n        if (*v3 != 0) {\n            goto lab_0x403c84;\n        } else {\n            // 0x403c81\n            v5 = result2;\n            goto lab_0x403c84;\n        }\n    } else {\n        // 0x403c81\n        v5 = result2;\n        goto lab_0x403c84;\n    }\n  lab_0x403c84:;\n    uint64_t v6 = v5;\n    if (result <= v6) {\n        // 0x403c3a\n        return result2;\n    }\n    int64_t v7 = a2 + path; // 0x403c8e\n    uint64_t result3 = v7 - v1; // 0x403c95\n    *(char *)(result3 >= v6 ? v1 - 1 + v6 : v7) = 126;\n    *(char *)((result3 >= v6 ? v6 : result3 + 1) + v1) = 0;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_403ce0",
            "funcStartAddr": "403ce0",
            "funcEndAddr": "403d34",
            "decompiledFuncCode": "int64_t function_403ce0(int64_t a1) {\n    int64_t result = a1; // 0x403ce7\n    int64_t result2; // 0x403ce0\n    if (a1 == 0) {\n        char * env_val = getenv(\"SIMPLE_BACKUP_SUFFIX\"); // 0x403d25\n        result = (int64_t)env_val;\n        result2 = result;\n        if (env_val == NULL) {\n            // 0x403cee\n            g51 = (char *)&g3;\n            return result;\n        }\n    }\n    char * v1 = (char *)result; // 0x403ce9\n    if (*v1 == 0) {\n        // 0x403cee\n        g51 = (char *)&g3;\n        return result2;\n    }\n    // 0x403d00\n    int64_t v2; // 0x403ce0\n    int64_t result3 = function_404ca0(result, v2); // 0x403d03\n    if (result3 != result) {\n        // 0x403cee\n        g51 = (char *)&g3;\n        return result3;\n    }\n    // 0x403d0d\n    g51 = v1;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_403d40",
            "funcStartAddr": "403d40",
            "funcEndAddr": "404201",
            "decompiledFuncCode": "int64_t function_403d40(int64_t a1, int64_t a2, int32_t a3) {\n    int64_t str = function_404ca0(a1, a2); // 0x403d5e\n    int32_t len = strlen((char *)str); // 0x403d69\n    int64_t v1 = (int64_t)g51; // 0x403d71\n    int64_t str2 = v1; // 0x403d83\n    if (g51 == NULL) {\n        // 0x4041f0\n        function_403ce0(v1);\n        str2 = (int64_t)g51;\n    }\n    int64_t v2 = str - a1; // 0x403d6e\n    int64_t v3 = len + (int32_t)v2; // 0x403d8e\n    uint64_t v4 = (int64_t)strlen((char *)str2) + 1; // 0x403d93\n    int64_t v5 = v3 + 1; // 0x403d9b\n    int32_t size = (int32_t)((v4 >= 9 ? v4 : 9) + v5); // 0x403dc0\n    int64_t * mem = malloc(size); // 0x403dc0\n    int64_t result = (int64_t)mem; // 0x403dc0\n    if (mem == NULL) {\n        // 0x40409d\n        return result;\n    }\n    int32_t v6 = v4; // 0x403d9f\n    int64_t v7 = v3 + 2;\n    int64_t v8 = 0x100000000 * a2 >> 32;\n    int64_t dirp2 = 0;\n    int64_t v9 = v2; // 0x403d40\n    int64_t result2 = result;\n    struct __dirstream * v10; // 0x403d40\n    int64_t v11; // 0x403d40\n    int64_t v12; // 0x403d40\n    int64_t v13; // 0x403d40\n    int64_t v14; // 0x403d40\n    int64_t v15; // 0x403d40\n    int64_t v16; // 0x403d40\n    int64_t v17; // 0x403d40\n    int64_t v18; // 0x403d40\n    int64_t v19; // 0x403d40\n    int32_t v20; // 0x403de6\n    int64_t v21; // 0x403df8\n    while (true) {\n      lab_0x403dd4:\n        // 0x403dd4\n        v15 = result2;\n        v14 = v9;\n        int64_t v22 = dirp2;\n        v18 = v8;\n        memcpy((int64_t *)v15, (int64_t *)a1, (int32_t)v5);\n        v20 = v18;\n        if (v20 == 1) {\n            // 0x4040c0\n            memcpy((int64_t *)(v15 + v3), (int64_t *)g51, v6);\n            v19 = v18;\n            v13 = v22;\n            v17 = v15;\n            goto lab_0x40402b;\n        } else {\n            int64_t v23 = v15 + v14; // 0x403df1\n            v21 = function_404d00(v23);\n            if (v22 == 0) {\n                int16_t * v24 = (int16_t *)v23; // 0x40412d\n                int16_t v25 = *v24; // 0x40412d\n                *v24 = 46;\n                int64_t v26 = function_404b20(); // 0x40413b\n                int64_t v27 = v21 + v23; // 0x404140\n                if (v26 == 0) {\n                    // 0x4041a0\n                    __errno_location();\n                    *v24 = v25;\n                    *(int32_t *)v27 = 0x7e317e2e;\n                    *(char *)(v27 + 4) = 0;\n                    v12 = 0;\n                    v16 = v15;\n                    goto lab_0x404010;\n                } else {\n                    // 0x40414c\n                    *v24 = v25;\n                    *(int32_t *)v27 = 0x7e317e2e;\n                    *(char *)(v27 + 4) = 0;\n                    v10 = (struct __dirstream *)v26;\n                    v11 = v26;\n                    goto lab_0x403e11;\n                }\n            } else {\n                struct __dirstream * dirp = (struct __dirstream *)v22;\n                rewinddir(dirp);\n                v10 = dirp;\n                v11 = v22;\n                goto lab_0x403e11;\n            }\n        }\n    }\n  lab_0x4041d8_2:\n    // 0x4041d8\n    if (dirp2 != 0) {\n        // 0x4041e1\n        closedir((struct __dirstream *)dirp2);\n    }\n    // 0x40409d\n    return result2;\n  lab_0x404010:;\n    int64_t v28 = v16;\n    v19 = v18;\n    v13 = v12;\n    v17 = v28;\n    int64_t v29 = v28; // 0x403d40\n    int64_t v30 = v12; // 0x403d40\n    int64_t v31 = v28; // 0x403d40\n    int64_t v32 = v12; // 0x403d40\n    int64_t v33 = v18; // 0x403d40\n    int64_t * v34; // 0x403d40\n    int64_t v35; // 0x403d40\n    switch ((int32_t)v35) {\n        case 2: {\n            goto lab_0x4040e0;\n        }\n        case 3: {\n            // 0x404168\n            v34 = (int64_t *)v28;\n          lab_0x404168:\n            // 0x404168\n            free(v34);\n            *__errno_location() = 12;\n            // 0x40409d\n            return 0;\n        }\n        case 1: {\n            goto lab_0x404110;\n        }\n        default: {\n            goto lab_0x40402b;\n        }\n    }\n  lab_0x403f8a:;\n    // 0x403f8a\n    int64_t v36; // 0x403d40\n    int64_t v37 = v36;\n    int32_t v38; // 0x403d40\n    int32_t v39 = v38;\n    int64_t v40 = v37 + v3; // 0x403f9e\n    *(int16_t *)v40 = 0x7e2e;\n    int64_t v41 = v40 + 2; // 0x403fa4\n    *(char *)v41 = 48;\n    uint64_t v42; // 0x403d40\n    int64_t str4; // 0x403e7d\n    int64_t v43; // 0x403f14\n    int64_t v44 = v42 - 1 + (int64_t)memcpy((int64_t *)(v41 + v43), (int64_t *)str4, (int32_t)v42 + 2); // 0x403fc9\n    char * v45 = (char *)v44;\n    char v46 = *v45; // 0x403fc9\n    int64_t v47 = v44; // 0x403fd4\n    char * v48 = v45; // 0x403fd4\n    char v49 = v46; // 0x403fd4\n    if (v46 == 57) {\n        *(char *)v47 = 48;\n        int64_t v50 = v47 - 1; // 0x403fe3\n        char * v51 = (char *)v50;\n        char v52 = *v51; // 0x403fe7\n        v47 = v50;\n        v48 = v51;\n        v49 = v52;\n        while (v52 == 57) {\n            // 0x403fe0\n            *(char *)v47 = 48;\n            v50 = v47 - 1;\n            v51 = (char *)v50;\n            v52 = *v51;\n            v47 = v50;\n            v48 = v51;\n            v49 = v52;\n        }\n    }\n    // 0x403fef\n    *v48 = v49 + 1;\n    struct __dirstream * dirp3; // 0x403d40\n    struct dirent * v53 = readdir(dirp3); // 0x403ffa\n    int64_t v54; // 0x403d40\n    v12 = v54;\n    v16 = v37;\n    if (v53 == NULL) {\n        // break (via goto) -> 0x404010\n        goto lab_0x404010;\n    }\n    // 0x403e49\n    int64_t v55; // 0x403f21\n    int32_t v56 = v55;\n    int64_t str3 = (int64_t)v53 + 19; // 0x403e49\n    int32_t v57 = v56; // 0x403e5a\n    int32_t v58 = v39; // 0x403e5a\n    int64_t v59 = v43; // 0x403e5a\n    int64_t v60 = v37; // 0x403e5a\n    uint64_t v61; // 0x403e29\n    if (v61 > (int64_t)strlen((char *)str3)) {\n        // break -> 0x403e38\n        goto lab_0x403e38_2;\n    }\n    // 0x403e5c\n    int32_t n; // 0x403d40\n    int32_t memcmp_rc = memcmp((int64_t *)(v37 + v14), (int64_t *)str3, n); // 0x403e6f\n    v57 = v56;\n    v58 = v39;\n    v59 = v43;\n    v60 = v37;\n    int32_t v62 = v56; // 0x403e76\n    int32_t v63 = v39; // 0x403e76\n    int64_t v64 = v43; // 0x403e76\n    int64_t v65 = v37; // 0x403e76\n    int64_t v66 = str3; // 0x403e76\n    if (memcmp_rc != 0) {\n        // break -> 0x403e38\n        goto lab_0x403e38_2;\n    }\n    goto lab_0x403e78;\n  lab_0x403f5d:;\n    // 0x403f5d\n    int64_t v91; // 0x403d40\n    int32_t v92 = v91;\n    int64_t v67; // 0x403d40\n    int64_t * v93 = (int64_t *)v67;\n    int64_t * mem2 = realloc(v93, v92); // 0x403f6f\n    v38 = v92;\n    v36 = (int64_t)mem2;\n    v34 = v93;\n    if (mem2 == NULL) {\n        goto lab_0x404168;\n    }\n    goto lab_0x403f8a;\n  lab_0x40402b:\n    // 0x40402b\n    result2 = v17;\n    dirp2 = v13;\n    if ((char)a3 == 0) {\n        // break -> 0x4041d8\n        goto lab_0x4041d8_2;\n    }\n    // 0x404036\n    v8 = v19;\n    int64_t v94; // 0x403d40\n    int64_t v95; // 0x403d40\n    if (dirp2 == 0) {\n        goto lab_0x4040b0;\n    } else {\n        int32_t v96 = dirfd((struct __dirstream *)dirp2); // 0x40403e\n        v94 = result2 + v14;\n        v95 = v96;\n        v9 = v14;\n        if (v96 < 0) {\n            goto lab_0x4040b0;\n        } else {\n            goto lab_0x40404d;\n        }\n    }\n  lab_0x4040b0:\n    // 0x4040b0\n    v94 = result2;\n    v95 = 0xffffff9c;\n    v9 = 0;\n    goto lab_0x40404d;\n  lab_0x403e11:\n    // 0x403e11\n    v54 = v11;\n    dirp3 = v10;\n    struct dirent * v101 = readdir(dirp3); // 0x403e3b\n    v29 = v15;\n    v30 = v54;\n    if (v101 == NULL) {\n        goto lab_0x4040e0;\n    } else {\n        // 0x403e49\n        v61 = v21 + 4;\n        n = (int32_t)v21 + 2;\n        int64_t v70 = n;\n        struct dirent * v102 = v101; // 0x403e3b\n        int64_t v103 = v15;\n        int64_t v104 = 2;\n        int32_t v105 = size;\n        int32_t v106 = 1;\n        while (true) {\n            int32_t v107 = v106;\n            int32_t v108 = v105;\n            int64_t v109 = v104;\n            int64_t v110 = v103;\n            int64_t str5 = (int64_t)v102 + 19; // 0x403e49\n            v57 = v107;\n            v58 = v108;\n            v59 = v109;\n            v60 = v110;\n            if (v61 <= (int64_t)strlen((char *)str5)) {\n                int32_t memcmp_rc3 = memcmp((int64_t *)(v110 + v14), (int64_t *)str5, n); // 0x403e6f\n                v57 = v107;\n                v58 = v108;\n                v59 = v109;\n                v60 = v110;\n                v62 = v107;\n                v63 = v108;\n                v64 = v109;\n                v65 = v110;\n                v66 = str5;\n                if (memcmp_rc3 == 0) {\n                    while (true) {\n                      lab_0x403e78:\n                        // 0x403e78\n                        v67 = v65;\n                        int64_t v68 = v64;\n                        int32_t v69 = v63;\n                        int32_t n2 = v62;\n                        str4 = v66 + v70;\n                        char v71 = *(char *)str4; // 0x403e80\n                        v57 = n2;\n                        v58 = v69;\n                        v59 = v68;\n                        v60 = v67;\n                        if (v71 >= 58) {\n                            // break -> 0x403e38\n                            break;\n                        }\n                        int64_t v72 = str4 + 1; // 0x403e8b\n                        char v73 = *(char *)v72; // 0x403e8b\n                        int64_t v74 = v71 == 57; // 0x403e96\n                        int64_t v75 = (int64_t)v73 & 0xffffffff; // 0x403e9a\n                        int64_t v76 = v75; // 0x403ea2\n                        int64_t v77 = v74; // 0x403ea2\n                        int64_t v78 = v75; // 0x403ea2\n                        int64_t v79 = 1; // 0x403ea2\n                        int64_t v80 = v74; // 0x403ea2\n                        if (v73 == 57 || (int32_t)v73 < 57) {\n                            int64_t v81 = 2; // 0x403ead\n                            char v82 = *(char *)(v81 + str4); // 0x403eb1\n                            int64_t v83 = v77 & (int64_t)((char)v76 == 57);\n                            int64_t v84 = (int64_t)v82 & 0xffffffff; // 0x403eb8\n                            int64_t v85 = v81; // 0x403ec0\n                            v77 = v83;\n                            v78 = v84;\n                            v79 = v81;\n                            v80 = v83;\n                            while (v82 == 57 || (int32_t)v82 < 57) {\n                                // 0x403ea8\n                                v81 = v85 + 1;\n                                v82 = *(char *)(v81 + str4);\n                                v83 = v77 & (int64_t)((char)v84 == 57);\n                                v84 = (int64_t)v82 & 0xffffffff;\n                                v85 = v81;\n                                v77 = v83;\n                                v78 = v84;\n                                v79 = v81;\n                                v80 = v83;\n                            }\n                        }\n                        // 0x403ec2\n                        v57 = n2;\n                        v58 = v69;\n                        v59 = v68;\n                        v60 = v67;\n                        if ((char)v78 != 126) {\n                            // break -> 0x403e38\n                            break;\n                        }\n                        // 0x403eca\n                        v42 = v79;\n                        v57 = n2;\n                        v58 = v69;\n                        v59 = v68;\n                        v60 = v67;\n                        if (*(char *)(v42 + v72) != 0) {\n                            // break -> 0x403e38\n                            break;\n                        }\n                        int64_t v86 = v80;\n                        uint64_t v87 = (int64_t)n2; // 0x403ed5\n                        int64_t v88 = v86; // 0x403edd\n                        if (v42 <= v87) {\n                            // 0x403edf\n                            v57 = n2;\n                            v58 = v69;\n                            v59 = v68;\n                            v60 = v67;\n                            if (v42 != v87) {\n                                // break -> 0x403e38\n                                break;\n                            }\n                            int32_t memcmp_rc2 = memcmp((int64_t *)(v7 + v67), (int64_t *)str4, n2); // 0x403efc\n                            v57 = n2;\n                            v58 = v69;\n                            v59 = v68;\n                            v60 = v67;\n                            v88 = v86 % 256;\n                            if (memcmp_rc2 >= 0 == (memcmp_rc2 != 0)) {\n                                // break -> 0x403e38\n                                break;\n                            }\n                        }\n                        // 0x403f14\n                        v43 = v88 % 256;\n                        v55 = v43 + v42;\n                        int64_t v89 = v3 + 4 + v55; // 0x403f2a\n                        v38 = v69;\n                        v36 = v67;\n                        if (v89 > (int64_t)v69) {\n                            int64_t v90 = 2 * v89; // 0x403f46\n                            if (v90 < 0) {\n                                // 0x404188\n                                v91 = v89;\n                                goto lab_0x403f5d;\n                            } else {\n                                // 0x403f4f\n                                v91 = v90;\n                                if (v89 < 0) {\n                                    // 0x404188\n                                    v91 = v89;\n                                    goto lab_0x403f5d;\n                                } else {\n                                    goto lab_0x403f5d;\n                                }\n                            }\n                        } else {\n                            goto lab_0x403f8a;\n                        }\n                    }\n                }\n            }\n          lab_0x403e38_2:\n            // 0x403e38\n            v103 = v60;\n            v104 = v59;\n            v105 = v58;\n            v106 = v57;\n            v102 = readdir(dirp3);\n            v12 = v54;\n            v16 = v103;\n            if (v102 == NULL) {\n                // break -> 0x404010\n                break;\n            }\n        }\n        goto lab_0x404010;\n    }\n  lab_0x40404d:\n    // 0x40404d\n    if ((int32_t)function_407ea0(0xffffff9c, a1, v95, v94, (int64_t)((int32_t)v8 != 1)) == 0) {\n        // break -> 0x4041d8\n        goto lab_0x4041d8_2;\n    }\n    int32_t * v97 = __errno_location(); // 0x404070\n    int32_t v98 = *v97; // 0x404075\n    if (v98 != 17) {\n        if (dirp2 != 0) {\n            // 0x404088\n            closedir((struct __dirstream *)dirp2);\n        }\n        // 0x404090\n        free((int64_t *)result2);\n        *v97 = v98;\n        // 0x40409d\n        return 0;\n    }\n    goto lab_0x403dd4;\n  lab_0x4040e0:;\n    int64_t v99 = v30;\n    int64_t v100 = v29;\n    v31 = v100;\n    v32 = v99;\n    v33 = v18;\n    if (v20 == 2) {\n        // 0x4040e7\n        memcpy((int64_t *)(v100 + v3), (int64_t *)g51, v6);\n        v31 = v100;\n        v32 = v99;\n        v33 = 1;\n    }\n    goto lab_0x404110;\n  lab_0x404110:\n    // 0x404110\n    function_403c10(v31, v3);\n    v19 = v33;\n    v13 = v32;\n    v17 = v31;\n    goto lab_0x40402b;\n}\n"
        },
        {
            "funcName": "function_404210",
            "funcStartAddr": "404210",
            "funcEndAddr": "40423c",
            "decompiledFuncCode": "int64_t function_404210(void) {\n    // 0x404210\n    int64_t v1; // 0x404210\n    int64_t v2 = function_40a670(v1, v1, g6, (int64_t *)&g5, 4, g34); // 0x40422b\n    return (int64_t)*(int32_t *)(4 * v2 + (int64_t)&g5);\n}\n"
        },
        {
            "funcName": "function_404240",
            "funcStartAddr": "404240",
            "funcEndAddr": "40425a",
            "decompiledFuncCode": "int64_t function_404240(int64_t a1, int32_t a2, int64_t a3) {\n    int64_t result = function_403d40(a1, (int64_t)a2, 0); // 0x404246\n    if (result != 0) {\n        // 0x404250\n        return result;\n    }\n    // 0x404255\n    function_408ca0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404260",
            "funcStartAddr": "404260",
            "funcEndAddr": "404272",
            "decompiledFuncCode": "int64_t function_404260(int64_t a1, int64_t a2) {\n    // 0x404260\n    if (a2 == 0) {\n        // 0x40426a\n        return 2;\n    }\n    int64_t v1; // 0x404260\n    if ((char)v1 != 0) {\n        // 0x404270\n        return function_404210();\n    }\n    // 0x40426a\n    return 2;\n}\n"
        },
        {
            "funcName": "function_404280",
            "funcStartAddr": "404280",
            "funcEndAddr": "4042c1",
            "decompiledFuncCode": "int64_t function_404280(int64_t a1, int64_t a2) {\n    // 0x404280\n    if (a2 != 0) {\n        int64_t v1; // 0x404280\n        if ((char)v1 != 0) {\n            // 0x4042bc\n            return function_404210();\n        }\n    }\n    char * env_val = getenv(\"VERSION_CONTROL\"); // 0x404293\n    if (env_val == NULL) {\n        // 0x4042a2\n        return 2;\n    }\n    // 0x40429d\n    if (*env_val != 0) {\n        // 0x4042bc\n        return function_404210();\n    }\n    // 0x4042a2\n    return 2;\n}\n"
        },
        {
            "funcName": "function_4042d0",
            "funcStartAddr": "4042d0",
            "funcEndAddr": "404943",
            "decompiledFuncCode": "int64_t function_4042d0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1;\n    uint32_t v2 = (int32_t)a2;\n    uint32_t v3 = v2 % 4; // 0x4042e9\n    if (a1 == 0 || (v2 + 3 & v3) != 0) {\n        // 0x404780\n        *__errno_location() = 22;\n        // 0x4045ce\n        return 0;\n    }\n    int64_t v4; // 0x4042d0\n    int64_t v5; // 0x4042d0\n    int64_t v6; // 0x4042d0\n    switch ((char)a1) {\n        case 0: {\n            // 0x404841\n            *__errno_location() = 2;\n            // 0x4045ce\n            return 0;\n        }\n        case 47: {\n            int64_t v7 = function_408a50(0x1000); // 0x404495\n            *(char *)v7 = 47;\n            v6 = v7 + 1;\n            v5 = v7 + 0x1000;\n            v4 = v7;\n            // break -> 0x404345\n            break;\n        }\n        default: {\n            int64_t str = function_408ce0(a1, a2); // 0x404317\n            if (str == 0) {\n                // 0x4045ce\n                return 0;\n            }\n            int32_t len = strlen((char *)str); // 0x40432b\n            int64_t v8 = len; // 0x40432b\n            if (len < 0x1000) {\n                int64_t v9 = function_408ab0(str, 0x1000); // 0x40485c\n                v6 = v9 + v8;\n                v5 = v9 + 0x1000;\n                v4 = v9;\n            } else {\n                int64_t v10 = str + v8; // 0x40433f\n                v6 = v10;\n                v5 = v10;\n                v4 = str;\n            }\n            // break -> 0x404345\n            break;\n        }\n    }\n    int64_t v11 = a1; // 0x404372\n    int64_t v12 = 0; // 0x404372\n    int64_t v13 = 0; // 0x404372\n    int64_t v14 = 0; // 0x404372\n    char * v15 = (char *)&v1; // 0x404372\n    int64_t v16 = v6; // 0x404372\n    int64_t v17 = v5; // 0x404372\n    int64_t v18 = v4; // 0x404372\n    int64_t v19 = a1; // 0x404372\n    int64_t v20; // 0x4042d0\n    int64_t v21; // 0x4042d0\n    int64_t v22; // 0x4042d0\n    int64_t v23; // 0x4042d0\n    char * v24; // 0x4042d0\n    int64_t v25; // 0x4042d0\n    int64_t v26; // 0x4042d0\n    int64_t v27; // 0x4042d0\n    int64_t v28; // 0x4042d0\n    int64_t v29; // 0x4042d0\n    int64_t v30; // 0x4042d0\n    int64_t v31; // 0x4042d0\n    int64_t v32; // 0x4042d0\n    int64_t v33; // 0x4042d0\n    int32_t * v34; // 0x4042d0\n    int32_t * v35; // 0x4042d0\n    int32_t v36; // 0x4042d0\n    int32_t v37; // 0x4042d0\n    int32_t v38; // 0x4042d0\n    int64_t v39; // 0x4042d0\n    int64_t v40; // 0x4042d0\n    int64_t v41; // 0x4042d0\n    int64_t v42; // 0x4042d0\n    int64_t v43; // 0x4042d0\n    int64_t v44; // 0x4042d0\n    int64_t v45; // 0x4042d0\n    uint64_t v46; // 0x4042d0\n    int64_t v47; // 0x4043b3\n    char * str3; // 0x4042d0\n    int64_t v48; // 0x4043b3\n    char * v49; // 0x4042d0\n    int64_t v50; // 0x404644\n    char * str2; // 0x404658\n    int32_t len2; // 0x404658\n    int64_t v51; // 0x404658\n    int32_t len3; // 0x404663\n    while (true) {\n      lab_0x404378_4:\n        // 0x404378\n        v37 = v36;\n        v40 = v14;\n        int64_t v52 = v13;\n        int64_t v53 = v11;\n        int16_t v54 = (int16_t)v37 & -0x1000;\n        v42 = v12;\n        v24 = v15;\n        v27 = v16;\n        v22 = v19;\n        int32_t v55; // 0x4042d0\n        while (true) {\n          lab_0x404378_3:\n            // 0x404378\n            v21 = v18;\n            v26 = v17;\n            v43 = v42;\n            v46 = v21 + 1;\n            v25 = (int64_t)*v24;\n            v29 = v27;\n            v23 = v22;\n            int64_t v56; // 0x4042d0\n            int64_t v57; // 0x4043d0\n            while (true) {\n              lab_0x404378_2:\n                // 0x404378\n                v30 = v29;\n                if (v25 == 0) {\n                    // break (via goto) -> 0x404580\n                    goto lab_0x404580_3;\n                }\n                int64_t v58 = v23; // 0x404384\n                int64_t v59 = v25; // 0x404384\n                int64_t v60 = v23; // 0x404384\n                int64_t v61; // 0x404390\n                unsigned char v62; // 0x404394\n                if (v25 == 47) {\n                    v61 = v58 + 1;\n                    v62 = *(char *)v61;\n                    v58 = v61;\n                    while (v62 == 47) {\n                        // 0x404390\n                        v61 = v58 + 1;\n                        v62 = *(char *)v61;\n                        v58 = v61;\n                    }\n                    // 0x40439d\n                    v59 = v62;\n                    v60 = v61;\n                    if (v62 == 0) {\n                        // break (via goto) -> 0x404580\n                        goto lab_0x404580_3;\n                    }\n                }\n                // 0x4043a5\n                v56 = v60;\n                int64_t v63 = v59;\n                v47 = v56 + 1;\n                str3 = (char *)v47;\n                unsigned char v64 = *str3; // 0x4043b3\n                int64_t v65 = v47; // 0x4043be\n                while (v64 != 0 == (v64 != 47)) {\n                    // 0x4043b3\n                    v47 = v65 + 1;\n                    str3 = (char *)v47;\n                    v64 = *str3;\n                    v65 = v47;\n                }\n                if (v47 == v56) {\n                    // break (via goto) -> 0x404580\n                    goto lab_0x404580_3;\n                }\n                // 0x4043cd\n                v48 = v64;\n                v57 = v47 - v56;\n                while (v57 != 1) {\n                    if (v57 == 2 != ((char)v63 == 46)) {\n                        // break (via goto) -> 0x4043ec\n                        goto lab_0x4043ec_2;\n                    }\n                    // 0x404740\n                    if (*(char *)(v56 + 1) != 46) {\n                        // break (via goto) -> 0x4043ec\n                        goto lab_0x4043ec_2;\n                    }\n                    int64_t v66 = v48; // 0x404756\n                    int64_t v67 = v47; // 0x404756\n                    if (v30 > v46) {\n                        int64_t v68 = v30 - 1; // 0x40475c\n                        v28 = v68;\n                        if (v21 >= v68) {\n                            goto lab_0x404378;\n                        } else {\n                            int64_t v69 = v30 - 2; // 0x404765\n                            v28 = v68;\n                            if (*(char *)v69 != 47) {\n                                // 0x4048a3\n                                v28 = v21;\n                                v31 = v69;\n                                if (v21 == v69) {\n                                    goto lab_0x404378;\n                                } else {\n                                    goto lab_0x4048b0;\n                                }\n                            } else {\n                                goto lab_0x404378;\n                            }\n                        }\n                    }\n                    if (v66 == 0) {\n                        // break (via goto) -> 0x404580\n                        goto lab_0x404580_3;\n                    }\n                    // 0x404380\n                    v58 = v67;\n                    v59 = v66;\n                    v60 = v67;\n                    if (v66 == 47) {\n                        v61 = v58 + 1;\n                        v62 = *(char *)v61;\n                        v58 = v61;\n                        while (v62 == 47) {\n                            // 0x404390\n                            v61 = v58 + 1;\n                            v62 = *(char *)v61;\n                            v58 = v61;\n                        }\n                        // 0x40439d\n                        v59 = v62;\n                        v60 = v61;\n                        if (v62 == 0) {\n                            // break (via goto) -> 0x404580\n                            goto lab_0x404580_3;\n                        }\n                    }\n                    // 0x4043a5\n                    v56 = v60;\n                    v63 = v59;\n                    v47 = v56 + 1;\n                    str3 = (char *)v47;\n                    v64 = *str3;\n                    v65 = v47;\n                    while (v64 != 0 == (v64 != 47)) {\n                        // 0x4043b3\n                        v47 = v65 + 1;\n                        str3 = (char *)v47;\n                        v64 = *str3;\n                        v65 = v47;\n                    }\n                    if (v47 == v56) {\n                        // break (via goto) -> 0x404580\n                        goto lab_0x404580_3;\n                    }\n                    // 0x4043cd\n                    v48 = v64;\n                    v57 = v47 - v56;\n                }\n                // 0x404568\n                v28 = v30;\n                if ((char)v63 != 46) {\n                    // break -> 0x4043ec\n                    break;\n                }\n                goto lab_0x404378;\n            }\n          lab_0x4043ec_2:;\n            int64_t v70 = v30; // 0x4043f0\n            if (*(char *)(v30 - 1) != 47) {\n                // 0x4043f2\n                *(char *)v30 = 47;\n                v70 = v30 + 1;\n            }\n            int64_t v71 = v70;\n            int64_t v72 = v71 + v57;\n            int64_t v73 = v72; // 0x404400\n            int64_t v74 = v71; // 0x404400\n            v17 = v26;\n            int64_t v75 = v21; // 0x404400\n            if (v26 <= v72) {\n                int64_t v76 = v57 < 0x1000 == (4095 - v57 & v57) < 0 ? v57 + 1 : 0x1000;\n                int64_t v77 = v76 + v26 - v21; // 0x404423\n                v75 = function_408ab0(v21, v77);\n                v74 = v75 + v71 - v21;\n                v73 = v74 + v57;\n                v17 = v75 + v77;\n            }\n            // 0x40443d\n            v18 = v75;\n            v20 = v73;\n            memcpy((int64_t *)v74, (int64_t *)v56, (int32_t)v57);\n            *(char *)v20 = 0;\n            v55 = 0;\n            if ((a2 & 4) != 0 && v3 == 2) {\n                // break -> 0x404473\n                break;\n            }\n            // 0x4044b0\n            v1 = 1;\n            v49 = (char *)v18;\n            int64_t v78; // bp-200, 0x4042d0\n            int32_t v79; // 0x4042d0\n            if ((a2 & 4) == 0) {\n                // 0x4045e8\n                v79 = __lxstat(1, v49, (struct stat *)&v78);\n            } else {\n                // 0x4044c9\n                v79 = __xstat(1, v49, (struct stat *)&v78);\n            }\n            // 0x4044d3\n            if (v79 == 0) {\n                // 0x404540\n                v55 = v37;\n                v15 = str3;\n                v11 = v53;\n                v12 = v43;\n                v13 = v52;\n                v14 = v40;\n                v38 = v37;\n                v16 = v20;\n                v19 = v47;\n                switch (v54) {\n                    case -0x6000: {\n                        int64_t v80 = v43; // 0x404606\n                        if (v43 == 0) {\n                            // 0x404793\n                            v1 = 7;\n                            v80 = function_4057d0(7, 0, 0x406190, 0x406200, 0x406240);\n                            if (v80 == 0) {\n                                // 0x4047bd\n                                function_408ca0(7);\n                                // UNREACHABLE\n                            }\n                        }\n                        // 0x40460c\n                        v45 = v80;\n                        int64_t v81 = function_404e00(v45, v53, &v78); // 0x40461b\n                        if ((char)v81 != 0) {\n                            // 0x4046d9\n                            v44 = v45;\n                            if (v3 != 2) {\n                                // 0x4046e4\n                                v32 = 40;\n                                v34 = __errno_location();\n                                goto lab_0x4046f1_2;\n                            }\n                        } else {\n                            // 0x404628\n                            function_404d70(v45, v53, &v78);\n                            int64_t v82; // 0x4042d0\n                            v50 = function_40a2b0(v18, v82);\n                            if (v50 != 0) {\n                                // 0x404655\n                                str2 = (char *)v50;\n                                len2 = strlen(str2);\n                                v51 = len2;\n                                len3 = strlen(str3);\n                                uint64_t v83 = v51 + 1 + (int64_t)len3; // 0x404671\n                                if (v52 == 0) {\n                                    int64_t v84 = v83 >= 0x1000 ? v83 : 0x1000; // 0x404821\n                                    int64_t v85 = function_408a50(v84); // 0x40482d\n                                    v39 = v84;\n                                    v41 = v85;\n                                    goto lab_0x404687;\n                                } else {\n                                    // 0x40467c\n                                    v39 = v52;\n                                    v41 = v40;\n                                    if (v83 > v52) {\n                                        int64_t v86 = function_408ab0(v40, v83); // 0x4048e2\n                                        v39 = v83;\n                                        v41 = v86;\n                                        goto lab_0x404687;\n                                    } else {\n                                        goto lab_0x404687;\n                                    }\n                                }\n                            }\n                            int32_t * v87 = __errno_location(); // 0x404873\n                            uint32_t v88 = *v87; // 0x404880\n                            v44 = v45;\n                            if (v3 == 2 != v88 != 12) {\n                                // 0x4046f1\n                                v32 = v88;\n                                v34 = v87;\n                                goto lab_0x4046f1_2;\n                            }\n                        }\n                        goto lab_0x404529;\n                    }\n                    case 0x4000: {\n                        goto lab_0x404484;\n                    }\n                    default: {\n                        goto lab_0x404473;\n                    }\n                }\n            } else {\n                int32_t * v89 = __errno_location(); // 0x4044d7\n                uint32_t v90 = *v89; // 0x4044df\n                if (v3 == 0) {\n                    // 0x4047d5\n                    v33 = v90;\n                    v35 = v89;\n                    goto lab_0x4047d5_3;\n                }\n                // 0x4044ed\n                v55 = 0;\n                if (v3 != 1) {\n                    // break -> 0x404473\n                    break;\n                }\n                char v91 = *(char *)(v47 + (int64_t)strspn(str3, \"/\")); // 0x404515\n                v44 = v43;\n                if (v90 == 2 != (v91 == 0)) {\n                    // 0x4047d5\n                    v33 = v90;\n                    v35 = v89;\n                    goto lab_0x4047d5_3;\n                }\n                goto lab_0x404529;\n            }\n        }\n      lab_0x404473:\n        // 0x404473\n        v15 = str3;\n        v11 = v53;\n        v12 = v43;\n        v13 = v52;\n        v14 = v40;\n        v38 = v55;\n        v16 = v20;\n        v19 = v47;\n        if (v3 != 2 == (*str3 != 0)) {\n            // 0x4047c8\n            v33 = 20;\n            v35 = __errno_location();\n            goto lab_0x4047d5_3;\n        }\n        goto lab_0x404484;\n    }\n  lab_0x404580_3:;\n    char * v92; // 0x4042d0\n    int64_t v93; // 0x4042d0\n    int64_t v94; // 0x4042d0\n    if (v30 > v46) {\n        int64_t v95 = v30 - 1; // 0x40458a\n        char * v96 = (char *)v95;\n        v92 = v96;\n        v93 = v30;\n        v94 = v95;\n        if (*v96 == 47) {\n            goto lab_0x404598;\n        } else {\n            goto lab_0x404594;\n        }\n    } else {\n        goto lab_0x404594;\n    }\n  lab_0x404378:\n    // 0x404378\n    v25 = v48;\n    v29 = v28;\n    v23 = v47;\n    goto lab_0x404378_2;\n  lab_0x404484:\n    // 0x404484\n    v36 = v38;\n    goto lab_0x404378_4;\n  lab_0x404529:\n    // 0x404529\n    v42 = v44;\n    v24 = str3;\n    v27 = v20;\n    v22 = v47;\n    goto lab_0x404378_3;\n  lab_0x404594:\n    // 0x404594\n    v92 = (char *)v30;\n    v93 = v30 + 1;\n    v94 = v30;\n    goto lab_0x404598;\n  lab_0x404598:\n    // 0x404598\n    *v92 = 0;\n    int64_t v97 = v21; // 0x40459e\n    if (v26 != v93) {\n        // 0x4045a0\n        v97 = function_408ab0(v21, 1 - v21 + v94);\n    }\n    // 0x4045b2\n    free((int64_t *)v40);\n    int64_t result = v97; // 0x4045c4\n    if (v43 != 0) {\n        // 0x4045c6\n        function_405a10(v43);\n        result = v97;\n    }\n  lab_0x4045ce:\n    // 0x4045ce\n    return result;\n  lab_0x4048b0:;\n    int64_t v98 = v31 - 1; // 0x4048b0\n    v28 = v31;\n    if (*(char *)v98 == 47) {\n        goto lab_0x404378;\n    } else {\n        // 0x4048ba\n        v28 = v98;\n        v31 = v98;\n        if (v21 != v98) {\n            goto lab_0x4048b0;\n        } else {\n            goto lab_0x404378;\n        }\n    }\n  lab_0x4047d5_3:\n    // 0x4047d5\n    free((int64_t *)v40);\n    free((int64_t *)v18);\n    int64_t v99 = v43; // 0x4047ff\n    int64_t v100 = v33; // 0x4047ff\n    int32_t * v101 = v35; // 0x4047ff\n    if (v43 == 0) {\n        goto lab_0x404731;\n    } else {\n        goto lab_0x404715;\n    }\n  lab_0x404731:\n    // 0x404731\n    *v101 = (int32_t)(v100 & 0xffffffff);\n    result = 0;\n    goto lab_0x4045ce;\n  lab_0x404715:\n    // 0x404715\n    function_405a10(v99);\n    goto lab_0x404731;\n  lab_0x4046f1_2:\n    // 0x4046f1\n    free((int64_t *)v40);\n    free((int64_t *)v18);\n    v99 = v45;\n    v100 = v32;\n    v101 = v34;\n    goto lab_0x404715;\n  lab_0x404687:\n    // 0x404687\n    memmove((int64_t *)(v41 + v51), (int64_t *)v47, len3 + 1);\n    int64_t * v102 = (int64_t *)v50; // 0x4046a7\n    int64_t * dest_mem = memcpy((int64_t *)v41, v102, len2); // 0x4046a7\n    int64_t v103 = v18 + 1; // 0x4046b0\n    int64_t v104; // 0x4042d0\n    int64_t v105; // 0x4042d0\n    if (*str2 == 47) {\n        // 0x404896\n        *v49 = 47;\n        v104 = v103;\n        goto lab_0x4046cc;\n    } else {\n        // 0x4046c3\n        v104 = v20;\n        if (v20 > v103) {\n            int64_t v106 = v20 - 1; // 0x40490c\n            v104 = v106;\n            if (v18 >= v106) {\n                goto lab_0x4046cc;\n            } else {\n                // 0x404915\n                v104 = v106;\n                v105 = v106;\n                if (*(char *)(v20 - 2) == 47) {\n                    goto lab_0x4046cc;\n                } else {\n                    goto lab_0x404922;\n                }\n            }\n        } else {\n            goto lab_0x4046cc;\n        }\n    }\n  lab_0x4046cc:;\n    int64_t v107 = (int64_t)dest_mem; // 0x4046a7\n    free(v102);\n    v15 = (char *)dest_mem;\n    v11 = v107;\n    v12 = v45;\n    v13 = v39;\n    v14 = v41;\n    v38 = v37;\n    v16 = v104;\n    v19 = v107;\n    goto lab_0x404484;\n  lab_0x404922:;\n    int64_t v108 = v105;\n    int64_t v109 = v108 - 1; // 0x404922\n    v104 = v18;\n    if (v18 == v109) {\n        goto lab_0x4046cc;\n    } else {\n        // 0x40492f\n        v104 = v109;\n        v105 = v109;\n        if (*(char *)(v108 - 2) == 47) {\n            goto lab_0x4046cc;\n        } else {\n            goto lab_0x404922;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_404950",
            "funcStartAddr": "404950",
            "funcEndAddr": "404958",
            "decompiledFuncCode": "int64_t function_404950(int64_t a1) {\n    // 0x404950\n    g52 = a1;\n    int64_t result; // 0x404950\n    return result;\n}\n"
        },
        {
            "funcName": "function_404960",
            "funcStartAddr": "404960",
            "funcEndAddr": "404a5d",
            "decompiledFuncCode": "int64_t function_404960(int64_t a1, int64_t a2) {\n    int64_t v1 = (int64_t)g37; // 0x404964\n    int64_t v2; // 0x404960\n    if (function_408f00(v1) != 0) {\n        int64_t v3 = function_408f30(v1, 0, 1); // 0x404a1a\n        int64_t v4 = (int64_t)g37; // 0x404a1f\n        v2 = v4;\n        if ((int32_t)v3 == 0) {\n            int64_t v5 = function_408ec0(v4, 0); // 0x404998\n            int64_t v6 = (int64_t)g37; // 0x40499d\n            v2 = v6;\n            if ((int32_t)v5 == 0) {\n                goto lab_0x404a2e;\n            } else {\n                // 0x4049ac\n                function_40a730(v6);\n                goto lab_0x4049b8;\n            }\n        } else {\n            goto lab_0x404a2e;\n        }\n    } else {\n        // 0x40497c\n        if ((int32_t)function_40a730(v1) == 0) {\n            // 0x404988\n            return function_404a80();\n        }\n        goto lab_0x4049b8;\n    }\n  lab_0x404a2e:\n    // 0x404a2e\n    if ((int32_t)function_40a730(v2) == 0) {\n        // 0x404a3b\n        return function_404a80();\n    }\n    goto lab_0x4049b8;\n  lab_0x4049b8:;\n    char * v7 = dcgettext(NULL, \"error closing file\", 5); // 0x4049c4\n    int32_t * err_num = __errno_location(); // 0x4049d3\n    if (g52 == 0) {\n        // 0x404a48\n        error(0, *err_num, \"%s\", v7);\n    } else {\n        // 0x4049e0\n        error(0, *err_num, \"%s: %s\", (char *)function_407cd0((int64_t)g52), v7);\n    }\n    // 0x4049ff\n    function_404a80();\n    _exit(g25);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404a60",
            "funcStartAddr": "404a60",
            "funcEndAddr": "404a68",
            "decompiledFuncCode": "int64_t function_404a60(int64_t a1) {\n    // 0x404a60\n    g54 = a1;\n    int64_t result; // 0x404a60\n    return result;\n}\n"
        },
        {
            "funcName": "function_404a70",
            "funcStartAddr": "404a70",
            "funcEndAddr": "404a78",
            "decompiledFuncCode": "int64_t function_404a70(int64_t a1) {\n    // 0x404a70\n    g53 = a1;\n    int64_t result; // 0x404a70\n    return result;\n}\n"
        },
        {
            "funcName": "function_404a80",
            "funcStartAddr": "404a80",
            "funcEndAddr": "404b1e",
            "decompiledFuncCode": "int64_t function_404a80(void) {\n    // 0x404a80\n    int32_t * err_num; // 0x404a96\n    if ((int32_t)function_40a730((int64_t)g36) == 0) {\n        goto lab_0x404aac;\n    } else {\n        // 0x404a96\n        err_num = __errno_location();\n        if (g53 == 0) {\n            goto lab_0x404ac3;\n        } else {\n            // 0x404aa7\n            if (*err_num != 32) {\n                goto lab_0x404ac3;\n            } else {\n                goto lab_0x404aac;\n            }\n        }\n    }\n  lab_0x404aac:;\n    int64_t result = function_40a730((int64_t)g39); // 0x404ab3\n    if ((int32_t)result == 0) {\n        // 0x404abc\n        return result;\n    }\n    // 0x404afe\n    _exit(g25);\n    // UNREACHABLE\n  lab_0x404ac3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x404acf\n    if (g54 == 0) {\n        // 0x404b09\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x404ae3\n        error(0, *err_num, \"%s: %s\", (char *)function_407cd0((int64_t)g54), v1);\n    }\n    // 0x404afe\n    _exit(g25);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404b20",
            "funcStartAddr": "404b20",
            "funcEndAddr": "404bb6",
            "decompiledFuncCode": "int64_t function_404b20(void) {\n    // 0x404b20\n    int64_t name; // 0x404b20\n    struct __dirstream * dirp = opendir((char *)name); // 0x404b28\n    if (dirp == NULL) {\n        // 0x404b42\n        return (int64_t)dirp;\n    }\n    uint32_t v1 = dirfd(dirp); // 0x404b38\n    if (v1 >= 3) {\n        // 0x404b42\n        return (int64_t)dirp;\n    }\n    int64_t v2 = function_408d80((int64_t)v1, 1030, 3, name); // 0x404b5e\n    int32_t * v3 = __errno_location(); // 0x404b66\n    int32_t fd = v2; // 0x404b6e\n    if (fd < 0) {\n        // 0x404b79\n        closedir(dirp);\n        return 0;\n    }\n    struct __dirstream * v4 = fdopendir(fd); // 0x404b9b\n    if (v4 == NULL) {\n        // 0x404bac\n        close(fd);\n    }\n    // 0x404b79\n    closedir(dirp);\n    return (int64_t)v4;\n}\n"
        },
        {
            "funcName": "function_404bc0",
            "funcStartAddr": "404bc0",
            "funcEndAddr": "404bd8",
            "decompiledFuncCode": "int64_t function_404bc0(void) {\n    // 0x404bc0\n    int64_t v1; // 0x404bc0\n    int64_t result = function_404c40(v1); // 0x404bc4\n    if (result != 0) {\n        // 0x404bce\n        return result;\n    }\n    // 0x404bd3\n    function_408ca0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404be0",
            "funcStartAddr": "404be0",
            "funcEndAddr": "404c3d",
            "decompiledFuncCode": "int64_t function_404be0(int64_t a1) {\n    // 0x404be0\n    int64_t v1; // 0x404be0\n    uint64_t v2 = (int64_t)((char)v1 == 47); // 0x404bee\n    int64_t v3 = function_404ca0(a1, v1); // 0x404bf2\n    int64_t result = v3 - a1; // 0x404bfa\n    if (result <= v2 || *(char *)(v3 - 1) != 47) {\n        // 0x404c23\n        return result;\n    }\n    int64_t result2 = result;\n    result2--;\n    while (result2 != v2) {\n        // 0x404c10\n        if (*(char *)(a1 - 1 + result2) != 47) {\n            // break -> 0x404c23\n            break;\n        }\n        result2--;\n    }\n    // 0x404c23\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404c40",
            "funcStartAddr": "404c40",
            "funcEndAddr": "404c9a",
            "decompiledFuncCode": "int64_t function_404c40(int64_t a1) {\n    // 0x404c40\n    int64_t v1; // 0x404c40\n    int64_t v2 = v1;\n    int64_t * mem = malloc((int32_t)(v2 + 1 + (int64_t)(v2 == 0))); // 0x404c5f\n    if (mem == NULL) {\n        // 0x404c86\n        return (int64_t)mem;\n    }\n    int64_t * dest_mem = memcpy(mem, (int64_t *)a1, (int32_t)v2); // 0x404c75\n    int64_t v3; // 0x404c40\n    if (v2 == 0) {\n        // 0x404c90\n        *(char *)dest_mem = 46;\n        v3 = 1;\n    }\n    int64_t result = (int64_t)dest_mem; // 0x404c75\n    *(char *)(v3 + result) = 0;\n    // 0x404c86\n    return result;\n}\n"
        },
        {
            "funcName": "function_404ca0",
            "funcStartAddr": "404ca0",
            "funcEndAddr": "404cfb",
            "decompiledFuncCode": "int64_t function_404ca0(int64_t a1, int64_t a2) {\n    // 0x404ca0\n    int64_t v1; // 0x404ca0\n    char v2 = v1;\n    int64_t v3 = a1; // 0x404ca9\n    int64_t v4 = a1; // 0x404ca9\n    char v5 = v2; // 0x404ca9\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x404cb4\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x404cb0\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x404cbe\n    if (v5 == 0) {\n      lab_0x404cfa:\n        // 0x404cfa\n        return result;\n    }\n    int64_t v7 = v4; // 0x404ce8\n    int64_t v8 = 0; // 0x404ce8\n    int64_t v9; // 0x404ca0\n    int64_t v10; // 0x404cea\n    char v11; // 0x404cee\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x404ce5\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x404cea\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x404ce5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x404cda\n    char v14 = *(char *)v13; // 0x404cde\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x404ce5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x404cea\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x404ce5\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x404cd0\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x404cfa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404d00",
            "funcStartAddr": "404d00",
            "funcEndAddr": "404d2b",
            "decompiledFuncCode": "int64_t function_404d00(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x404d04\n    int64_t result = len; // 0x404d04\n    if (len < 2) {\n        // 0x404d1a\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x404d18\n    while (*(char *)(v1 + str) == 47) {\n        // 0x404d20\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x404d1a\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x404d1a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404d30",
            "funcStartAddr": "404d30",
            "funcEndAddr": "404d63",
            "decompiledFuncCode": "int64_t function_404d30(int64_t a1) {\n    // 0x404d30\n    int64_t v1; // 0x404d30\n    int64_t v2 = function_404ca0(a1, v1); // 0x404d39\n    int64_t v3 = *(char *)v2 == 0 ? a1 : v2; // 0x404d44\n    int64_t v4 = function_404d00(v3); // 0x404d4b\n    char * v5 = (char *)(v3 + v4); // 0x404d53\n    *v5 = 0;\n    return v4 & -256 | (int64_t)(*v5 != 0);\n}\n"
        },
        {
            "funcName": "function_404d70",
            "funcStartAddr": "404d70",
            "funcEndAddr": "404df6",
            "decompiledFuncCode": "int64_t function_404d70(int64_t a1, int64_t a2, int64_t * a3) {\n    if (a1 == 0) {\n        // 0x404de0\n        int64_t result; // 0x404d70\n        return result;\n    }\n    int64_t v1 = (int64_t)a3;\n    int64_t result2 = function_408a50(24); // 0x404d8d\n    *(int64_t *)result2 = function_408c80(a2);\n    *(int64_t *)(result2 + 8) = *(int64_t *)(v1 + 8);\n    *(int64_t *)(result2 + 16) = v1;\n    int64_t v2 = function_405f70(a1, result2); // 0x404db6\n    if (v2 == 0) {\n        // 0x404df1\n        function_408ca0(a1);\n        // UNREACHABLE\n    }\n    // 0x404dc0\n    if (result2 == v2) {\n        // 0x404de0\n        return result2;\n    }\n    // 0x404dc5\n    return function_406240(result2);\n}\n"
        },
        {
            "funcName": "function_404e00",
            "funcStartAddr": "404e00",
            "funcEndAddr": "404e3b",
            "decompiledFuncCode": "int64_t function_404e00(int64_t a1, int64_t a2, int64_t * a3) {\n    if (a1 == 0) {\n        // 0x404e38\n        return 0;\n    }\n    int64_t v1 = a2; // bp-40, 0x404e0d\n    int64_t v2 = function_405560(a1, &v1); // 0x404e21\n    return v2 & -256 | (int64_t)(v2 != 0);\n}\n"
        },
        {
            "funcName": "function_404e40",
            "funcStartAddr": "404e40",
            "funcEndAddr": "404e58",
            "decompiledFuncCode": "int64_t function_404e40(void) {\n    // 0x404e40\n    int64_t v1; // 0x404e40\n    int64_t result = function_404e60(v1, v1, v1); // 0x404e44\n    if (result != 0) {\n        // 0x404e4e\n        return result;\n    }\n    // 0x404e53\n    function_408ca0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404e60",
            "funcStartAddr": "404e60",
            "funcEndAddr": "404f39",
            "decompiledFuncCode": "int64_t function_404e60(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = function_404ca0(a1, a2); // 0x404e78\n    int64_t v2 = function_404d00(v1); // 0x404e83\n    int64_t v3 = 0; // 0x404e97\n    if (v2 != 0) {\n        // 0x404e99\n        v3 = *(char *)(v1 - 1 + v2) != 47;\n    }\n    int64_t str = a2; // 0x404eb0\n    int64_t v4 = a2; // 0x404eb0\n    int64_t v5; // 0x404e60\n    if ((char)v5 == 47) {\n        v4++;\n        str = v4;\n        while (*(char *)v4 == 47) {\n            // 0x404f28\n            v4++;\n            str = v4;\n        }\n    }\n    int64_t v6 = v1 - a1 + v2; // 0x404e91\n    int32_t len = strlen((char *)str); // 0x404eb5\n    int64_t * mem = malloc(len + (int32_t)(v6 + 1 + v3)); // 0x404ec5\n    if (mem == NULL) {\n        // 0x404f11\n        return (int64_t)mem;\n    }\n    int64_t * v7 = mempcpy(mem, (int64_t *)a1, (int32_t)v6); // 0x404edb\n    *(char *)v7 = 47;\n    int64_t v8 = v3 + (int64_t)v7; // 0x404ee7\n    if (a3 != 0) {\n        // 0x404ef0\n        *(int64_t *)a3 = v8 - (int64_t)((char)v5 == 47);\n    }\n    // 0x404f03\n    *(char *)mempcpy((int64_t *)v8, (int64_t *)str, len) = 0;\n    // 0x404f11\n    return (int64_t)mem;\n}\n"
        },
        {
            "funcName": "function_404f40",
            "funcStartAddr": "404f40",
            "funcEndAddr": "404fd3",
            "decompiledFuncCode": "int64_t function_404f40(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x404f57\n    if (v1 == -1) {\n        // 0x404fcf\n        return -1;\n    }\n    int64_t v2 = v1; // 0x404f5f\n    int64_t v3; // 0x404f40\n    while (true) {\n      lab_0x404f68:\n        // 0x404f68\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x404fc0;\n        } else {\n            goto lab_0x404fc5;\n        }\n    }\n  lab_0x404fcf_2:;\n    // 0x404fcf\n    int64_t result; // 0x404f40\n    return result;\n  lab_0x404fc5:;\n    int64_t v4 = v3 + 2; // 0x404fc5\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x404fcf\n        goto lab_0x404fcf_2;\n    }\n    goto lab_0x404f68;\n  lab_0x404fc0:\n    // 0x404fc0\n    result = v3;\n    goto lab_0x404fc5;\n}\n"
        },
        {
            "funcName": "function_404fe0",
            "funcStartAddr": "404fe0",
            "funcEndAddr": "404ff0",
            "decompiledFuncCode": "int64_t function_404fe0(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x404fe0\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_404ff0",
            "funcStartAddr": "404ff0",
            "funcEndAddr": "404ff7",
            "decompiledFuncCode": "int64_t function_404ff0(int64_t a1, int64_t a2) {\n    // 0x404ff0\n    int64_t v1; // 0x404ff0\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_405000",
            "funcStartAddr": "405000",
            "funcEndAddr": "405021",
            "decompiledFuncCode": "int64_t function_405000(int64_t a1, int64_t a2) {\n    // 0x405000\n    int64_t v1; // 0x405000\n    uint64_t v2 = v1;\n    if (*(int64_t *)(a1 + 16) > v2) {\n        // 0x405018\n        return 16 * v2 + a2;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405030",
            "funcStartAddr": "405030",
            "funcEndAddr": "405149",
            "decompiledFuncCode": "int64_t function_405030(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_405000(a1, a2); // 0x405044\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x40504c\n    int64_t result2 = *v2; // 0x40504c\n    if (result2 == 0) {\n        // 0x4050de\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x405074\n            if (v3 == 0) {\n                // 0x4050de\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x405081\n            int64_t v5 = v3; // 0x405087\n            int64_t v6 = v1; // 0x405087\n            int64_t result = v4; // 0x405087\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x4050bc_2:\n                // 0x4050bc\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x4050c1\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x4050d0\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x4050de\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x405094\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x4050a1\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x4050bc_2;\n                }\n                // 0x4050a9\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x4050bc_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x4050de\n            return 0;\n        }\n    }\n    // 0x4050f3\n    if ((char)a4 == 0) {\n        // 0x4050de\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x4050f8\n    if (v12 == 0) {\n        // 0x405140\n        *v2 = 0;\n        // 0x4050de\n        return result2;\n    }\n    // 0x405101\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x40510f\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405150",
            "funcStartAddr": "405150",
            "funcEndAddr": "4051ce",
            "decompiledFuncCode": "int64_t function_405150(uint64_t a1) {\n    if (a1 == (int64_t)&g7) {\n        // 0x4051cd\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x40515b\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g7) {\n        // 0x4051ba\n        *(int64_t *)a1 = (int64_t)&g7;\n        return 0;\n    }\n    // 0x405169\n    __asm_comiss_1(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x405184\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_2(v2, 0x3dcccccd); // 0x405191\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x405199\n    __asm_comiss_1(v4, v3);\n    __asm_comiss_1(__asm_movss(0x3f800000), v4);\n    __asm_comiss_1(v1, v3);\n    // 0x4051cd\n    return 1;\n}\n"
        },
        {
            "funcName": "function_4051d0",
            "funcStartAddr": "4051d0",
            "funcEndAddr": "40531a",
            "decompiledFuncCode": "int64_t function_4051d0(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x4051ea\n    uint64_t v2 = *v1; // 0x4051ea\n    if (v2 <= a2) {\n        // 0x4052d4\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x4051d0\n    int64_t v8 = a2; // 0x4051d0\n    int64_t v9; // 0x4051d0\n    int64_t result; // 0x4051d0\n    int64_t v10; // 0x4051d0\n    while (true) {\n      lab_0x405206_2:\n        // 0x405206\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x405206\n        int64_t v12 = *v11; // 0x405206\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x4051f8;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x40520f\n            int64_t v14 = *v13; // 0x40520f\n            int64_t v15 = v14; // 0x405217\n            int64_t v16 = v12; // 0x405217\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x405234\n                    int64_t v19 = *v18; // 0x405234\n                    int64_t v20 = function_405000(v3, v19); // 0x40523d\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x405242\n                    int64_t v22 = *v21; // 0x405242\n                    int64_t * v23 = (int64_t *)v20; // 0x405246\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x405220\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40526f\n                            break;\n                        }\n                    } else {\n                        // 0x40524c\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x40526f\n                            break;\n                        }\n                    }\n                    // 0x405234\n                    v15 = v22;\n                }\n                // 0x40526f\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x405273\n                v9 = *v1;\n                goto lab_0x4051f8;\n            } else {\n                int64_t v26 = function_405000(v3, v25); // 0x40528b\n                int64_t * v27 = (int64_t *)v26; // 0x405290\n                if (*v27 == 0) {\n                    // 0x4052f0\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x405299\n                    int64_t * v29; // 0x4051d0\n                    int64_t v30; // 0x4051d0\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x4052ff\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x4052d4\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x4052ff\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x4052aa\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x4052b9\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x4052c1\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x4052ca\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x4052d4\n                    break;\n                }\n                goto lab_0x405206_2;\n            }\n        }\n    }\n    // 0x4052d4\n    return result;\n  lab_0x4051f8:;\n    int64_t v36 = v10 + 16; // 0x4051f8\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x405206_2;\n    // 0x405206\n    goto lab_0x405206_2;\n}\n"
        },
        {
            "funcName": "function_405320",
            "funcStartAddr": "405320",
            "funcEndAddr": "405325",
            "decompiledFuncCode": "int64_t function_405320(int64_t a1) {\n    // 0x405320\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_405330",
            "funcStartAddr": "405330",
            "funcEndAddr": "405335",
            "decompiledFuncCode": "int64_t function_405330(int64_t a1) {\n    // 0x405330\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_405340",
            "funcStartAddr": "405340",
            "funcEndAddr": "405345",
            "decompiledFuncCode": "int64_t function_405340(int64_t a1) {\n    // 0x405340\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_405350",
            "funcStartAddr": "405350",
            "funcEndAddr": "40539f",
            "decompiledFuncCode": "int64_t function_405350(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x405353\n    int64_t result = 0; // 0x40535c\n    if (v1 <= a1) {\n      lab_0x40539d:\n        // 0x40539d\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x405360\n    while (*(int64_t *)v3 == 0) {\n        // 0x405360\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x40536f\n    int64_t v6 = v5; // 0x40537b\n    int64_t v7 = 1; // 0x40537b\n    int64_t v8; // 0x405350\n    int64_t v9; // 0x405380\n    int64_t v10; // 0x405384\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x405380\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x405390\n    int64_t v12 = v3 + 16; // 0x405394\n    while (v12 < v1) {\n        // 0x405369\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x405360\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x40536f\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x405380\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x40538d\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x40539d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4053a0",
            "funcStartAddr": "4053a0",
            "funcEndAddr": "405407",
            "decompiledFuncCode": "int64_t function_4053a0(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x4053a3\n    int64_t v2 = a1; // 0x4053af\n    int64_t v3 = 0; // 0x4053af\n    int64_t v4 = 0; // 0x4053af\n    int64_t v5 = 0; // 0x4053af\n    int64_t v6 = 0; // 0x4053af\n    int64_t v7; // 0x4053a0\n    int64_t v8; // 0x4053a0\n    int64_t v9; // 0x4053a0\n    if (v1 > a1) {\n        while (true) {\n          lab_0x4053c1_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x4053b8;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x4053c7\n                int64_t v13 = v10 + 1; // 0x4053cb\n                int64_t v14 = v11 + 1; // 0x4053cf\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x4053d6\n                int64_t v16 = v14; // 0x4053d6\n                if (v12 == 0) {\n                    goto lab_0x4053b8;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x4053e0\n                    int64_t v18 = v16 + 1; // 0x4053e4\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x4053e0\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x4053ed\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x4053f6\n                        break;\n                    }\n                    goto lab_0x4053c1_2;\n                }\n            }\n        }\n    }\n  lab_0x4053f6:\n    // 0x4053f6\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x4053ff\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x4053fe\n    return 0;\n  lab_0x4053b8:;\n    int64_t v20 = v8 + 16; // 0x4053b8\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x4053f6\n        goto lab_0x4053f6;\n    }\n    goto lab_0x4053c1_2;\n    // 0x4053c1\n    goto lab_0x4053c1_2;\n}\n"
        },
        {
            "funcName": "function_405410",
            "funcStartAddr": "405410",
            "funcEndAddr": "405558",
            "decompiledFuncCode": "int64_t function_405410(uint64_t a1, int64_t a2) {\n    // 0x405410\n    int128_t v1; // 0x405410\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x405423\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x405427\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x40542e\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x405440\n            while (*(int64_t *)v7 == 0) {\n                // 0x405440\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x40547d\n                    goto lab_0x40547d;\n                }\n            }\n        }\n    }\n  lab_0x40547d:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x40548c\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x405410\n    int128_t v10; // 0x405410\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x405523\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x40552c\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x4054c3;\n        } else {\n            goto lab_0x405539;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x4054b6\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x405539;\n        } else {\n            goto lab_0x4054c3;\n        }\n    }\n  lab_0x4054c3:\n    // 0x4054c3\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x4054c7\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x4054c7\n    goto lab_0x4054cc;\n  lab_0x405539:\n    // 0x405539\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x40554a\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x4054cc;\n  lab_0x4054cc:\n    // 0x4054cc\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_405560",
            "funcStartAddr": "405560",
            "funcEndAddr": "4055b3",
            "decompiledFuncCode": "int64_t function_405560(int64_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int64_t v1 = function_405000(a1, result); // 0x40556a\n    int64_t v2 = *(int64_t *)v1; // 0x40556f\n    if (v2 == 0) {\n        // 0x40559d\n        return 0;\n    }\n    // 0x405583\n    if (v2 == result) {\n        // 0x40559d\n        return result;\n    }\n    int64_t v3 = v1; // 0x405594\n    int64_t result2 = v2; // 0x405592\n    while ((char)v1 == 0) {\n        // 0x405594\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x40559d\n            break;\n        }\n        // 0x405580\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x40559d\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x40559d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4055c0",
            "funcStartAddr": "4055c0",
            "funcEndAddr": "405608",
            "decompiledFuncCode": "int64_t function_4055c0(uint64_t a1) {\n    int64_t result = 0; // 0x4055c5\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x4055d7\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x4055ce\n    if (v1 <= a1) {\n        // 0x4055d7\n        return result;\n    }\n    int64_t v2 = a1; // 0x4055d5\n    int64_t v3 = *(int64_t *)v2; // 0x4055e9\n    result = v3;\n    while (v3 == 0) {\n        // 0x4055e0\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x4055d7\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x4055d7\n    return result;\n}\n"
        },
        {
            "funcName": "function_405610",
            "funcStartAddr": "405610",
            "funcEndAddr": "40567a",
            "decompiledFuncCode": "int64_t function_405610(int64_t a1, int64_t a2) {\n    int64_t v1 = function_405000(a1, a2); // 0x40561c\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x405638\n    while (*(int64_t *)v2 != a2) {\n        // 0x405630\n        if (v3 == 0) {\n            goto lab_0x405646;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x405670\n        return *(int64_t *)v3;\n    }\n  lab_0x405646:;\n    int64_t v4 = v1 + 16; // 0x405658\n    int64_t result = 0; // 0x40565f\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x405650\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x405663\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x405663\n    return result;\n}\n"
        },
        {
            "funcName": "function_405680",
            "funcStartAddr": "405680",
            "funcEndAddr": "4056e4",
            "decompiledFuncCode": "int64_t function_405680(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x405686\n    int64_t result = 0; // 0x40568a\n    if (*v1 <= a1) {\n      lab_0x4056a1:\n        // 0x4056a1\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x40568f\n    int64_t v4 = v2; // 0x405695\n    int64_t v5; // 0x405680\n    int64_t v6; // 0x405680\n    int64_t v7; // 0x4056c8\n    int64_t v8; // 0x4056d1\n    int64_t v9; // 0x4056b1\n    int64_t v10; // 0x4056b5\n    if (v3 != 0) {\n        // 0x4056a8\n        if (v2 >= a3) {\n            // break -> 0x4056a1\n            break;\n        }\n        // 0x4056ad\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x4056c5\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x4056c0\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x4056c5\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x405697\n    result = v11;\n    while (*v1 > v12) {\n        // 0x40568f\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x4056a8\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x4056a1\n                break;\n            }\n            // 0x4056ad\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x4056c5\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x4056c0\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x4056c5\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x405697\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x4056a1\n    return result;\n}\n"
        },
        {
            "funcName": "function_4056f0",
            "funcStartAddr": "4056f0",
            "funcEndAddr": "405768",
            "decompiledFuncCode": "int64_t function_4056f0(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x405701\n    int64_t result = 0; // 0x405705\n    if (v1 <= a1) {\n      lab_0x405724:\n        // 0x405724\n        return result;\n    }\n    int64_t v2 = a1; // 0x40571a\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x405718\n    int64_t v5 = v2; // 0x405718\n    int64_t v6 = v3; // 0x405718\n    int64_t v7; // 0x4056f0\n    int64_t v8; // 0x405748\n    int64_t v9; // 0x40574c\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x405748\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x405758\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x405748\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x405712\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x405748\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x405758\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x405748\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x40571a\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x405724\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405770",
            "funcStartAddr": "405770",
            "funcEndAddr": "4057a1",
            "decompiledFuncCode": "int64_t function_405770(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x405777\n    if (v1 == 0) {\n        // 0x40579d\n        return 0;\n    }\n    int64_t result = 0; // 0x405777\n    v2++;\n    char v3 = *(char *)v2; // 0x405793\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x40579d\n    return result;\n}\n"
        },
        {
            "funcName": "function_4057b0",
            "funcStartAddr": "4057b0",
            "funcEndAddr": "4057d0",
            "decompiledFuncCode": "int64_t function_4057b0(int64_t a1) {\n    // 0x4057b0\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_4057d0",
            "funcStartAddr": "4057d0",
            "funcEndAddr": "40595a",
            "decompiledFuncCode": "int64_t function_4057d0(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x4057d0\n    int128_t v1; // 0x4057d0\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x40580a\n    int64_t result = (int64_t)mem; // 0x40580a\n    if (mem == NULL) {\n        // 0x4058ba\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x40581b\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x4057d0\n    int128_t v6; // 0x4057d0\n    if (a2 == 0) {\n        // 0x4058d0\n        *v4 = (int64_t)&g7;\n        int64_t v7 = function_405150(v3); // 0x4058d8\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x4058dd\n        if ((char)v7 == 0) {\n            // 0x4058b0\n            free(mem);\n            // 0x4058ba\n            return 0;\n        }\n        // 0x4058e9\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x405933;\n        } else {\n            goto lab_0x4058ee;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_405150(v3) == 0) {\n            // 0x4058b0\n            free(mem);\n            // 0x4058ba\n            return 0;\n        }\n        // 0x405835\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_404f40(a1); // 0x405843\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x4058b0\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x4058b0\n                free(mem);\n                // 0x4058ba\n                return 0;\n            }\n            // 0x405861\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x4058b0\n                free(mem);\n                // 0x4058ba\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x405872\n            int64_t v10 = (int64_t)mem2; // 0x405872\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x4058b0\n                free(mem);\n                // 0x4058ba\n                return 0;\n            }\n            // 0x40587f\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x404fe0 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x404ff0 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x4058ba\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x405928\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x4058ee;\n        } else {\n            goto lab_0x405933;\n        }\n    }\n  lab_0x405933:\n    // 0x405933\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x405943\n    int128_t v13 = v6; // 0x40594c\n    int128_t v14 = __asm_addss(v12, v12); // 0x40594c\n    goto lab_0x4058f7;\n  lab_0x4058ee:\n    // 0x4058ee\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x4058f7;\n  lab_0x4058f7:\n    // 0x4058f7\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x4058b0\n    free(mem);\n    // 0x4058ba\n    return 0;\n}\n"
        },
        {
            "funcName": "function_405960",
            "funcStartAddr": "405960",
            "funcEndAddr": "405a08",
            "decompiledFuncCode": "int64_t function_405960(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x40596a\n    uint64_t v2 = *v1; // 0x40596a\n    int64_t result; // 0x405960\n    if (v2 <= a1) {\n      lab_0x4059f3:\n        // 0x4059f3\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x405978\n    while (*v6 == 0) {\n        // 0x405978\n        v7 = v5 + 16;\n        int64_t v8; // 0x405960\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x4059f3\n            goto lab_0x4059f3;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x405989\n    int64_t v10 = *v9; // 0x405989\n    int64_t v11 = *v3; // 0x40598e\n    int64_t v12 = v11; // 0x405995\n    int64_t v13 = v10; // 0x405995\n    int64_t result2 = v11; // 0x405995\n    int64_t * v14; // 0x4059ae\n    int64_t v15; // 0x4059ae\n    int64_t v16; // 0x4059aa\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x4059a5\n            v16 = *v3;\n        }\n        // 0x4059ae\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x4059a0\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x4059a5\n                v16 = *v3;\n            }\n            // 0x4059ae\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x4059cd\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x4059e0\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x4059ed\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40597c\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x405978\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x4059f3\n                goto lab_0x4059f3;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x405989\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x4059a5\n                v16 = *v3;\n            }\n            // 0x4059ae\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x4059a0\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x4059a5\n                    v16 = *v3;\n                }\n                // 0x4059ae\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x4059cd\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x4059f3\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405a10",
            "funcStartAddr": "405a10",
            "funcEndAddr": "405ae6",
            "decompiledFuncCode": "int64_t function_405a10(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x405a1f\n    uint64_t v2 = *v1; // 0x405a1f\n    int64_t v3 = a1; // 0x405a23\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x405a73;\n    } else {\n        // 0x405a25\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x405a73;\n        } else {\n            // 0x405a2c\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x405a41\n                int64_t v6; // 0x405a38\n                while (v5 == 0) {\n                    // 0x405a38\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x405a73\n                        goto lab_0x405a73;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x405a58\n                int64_t v8 = v7; // 0x405a5f\n                int64_t v9 = v5; // 0x405a5f\n                int64_t v10; // 0x405a10\n                int64_t v11; // 0x405a58\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x405a50\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x405a53\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x405a66\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x405a41\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x405a38\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x405a73\n                            goto lab_0x405a73;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x405a53\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x405a50\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x405a53\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x405a61\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x405a73;\n            } else {\n                goto lab_0x405aac;\n            }\n        }\n    }\n  lab_0x405a73:\n    // 0x405a73\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x405a80\n        int64_t v14 = v13; // 0x405a87\n        int64_t v15 = v2; // 0x405a87\n        int64_t v16; // 0x405a90\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x405a90\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x405aa1\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x405aa1\n        int64_t v18 = v15; // 0x405aaa\n        int64_t v19 = v17; // 0x405aaa\n        while (v15 > v17) {\n            // 0x405a80\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x405a90\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x405aa1\n                v15 = *v1;\n            }\n            // 0x405aa1\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x405aac;\n  lab_0x405aac:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x405aac\n    if (v20 == 0) {\n        // 0x405ad1\n        free(NULL);\n        free((int64_t *)a1);\n        return &g68;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x405ac0\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x405acf\n    while (v21 != 0) {\n        // 0x405ac0\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x405ad1\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g68;\n}\n"
        },
        {
            "funcName": "function_405af0",
            "funcStartAddr": "405af0",
            "funcEndAddr": "405cea",
            "decompiledFuncCode": "int64_t function_405af0(int64_t a1, uint64_t a2) {\n    // 0x405af0\n    int128_t v1; // 0x405af0\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x405afb\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x405af0\n        if (a2 < 0) {\n            // 0x405c70\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x405c80\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x405b10\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x405b19\n        __asm_comiss(__asm_divss_4(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x405c62\n        return 0;\n    }\n    uint64_t nmemb = function_404f40(a2); // 0x405b53\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x405c62\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x405b8b\n    if (*v6 == nmemb) {\n        // 0x405c62\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x405b9d\n    int64_t v7 = (int64_t)mem; // 0x405b9d\n    int64_t v8 = v7; // bp-104, 0x405ba2\n    if (mem == NULL) {\n        // 0x405c62\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x405bfa\n    int64_t v10 = *v9; // 0x405bfa\n    int64_t v11 = function_4051d0(&v8, a1, 0); // 0x405c03\n    int64_t result = v11 & 0xffffffff; // 0x405c08\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x405bc4\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x405c26\n        function_4051d0(v13, v12, 1);\n        function_4051d0(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x405cb0\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x405c62\n    return result;\n}\n"
        },
        {
            "funcName": "function_405cf0",
            "funcStartAddr": "405cf0",
            "funcEndAddr": "405f64",
            "decompiledFuncCode": "int64_t function_405cf0(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x405cf0\n    int128_t v1; // 0x405cf0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x405cf0\n    int64_t v5 = function_405030(a1, a2, &v4, 0); // 0x405d11\n    if (v5 != 0) {\n        // 0x405d1e\n        if (a3 != NULL) {\n            // 0x405d25\n            *a3 = v5;\n        }\n        // 0x405d29\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x405d38\n    uint64_t v7 = *v6; // 0x405d38\n    int64_t v8; // 0x405cf0\n    int64_t v9; // 0x405cf0\n    int64_t v10; // 0x405cf0\n    int128_t v11; // 0x405cf0\n    int128_t v12; // 0x405cf0\n    int64_t v13; // 0x405cf0\n    if (v7 < 0) {\n        // 0x405dc0\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x405dd0\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x405dd4\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x405dd9\n        int128_t v17 = __asm_addss(v15, v15); // 0x405ddd\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x405d5b;\n        } else {\n            goto lab_0x405dea;\n        }\n    } else {\n        // 0x405d41\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x405d45\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x405d49\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x405d4e\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x405dea;\n        } else {\n            goto lab_0x405d5b;\n        }\n    }\n  lab_0x405d5b:\n    // 0x405d5b\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x405d64\n    __asm_comiss_1(v11, v21);\n    int128_t v22 = v21; // 0x405d6c\n    int128_t v23 = v11; // 0x405d6c\n    if (v13 == 0) {\n        goto lab_0x405d72;\n    } else {\n        goto lab_0x405e11;\n    }\n  lab_0x405dea:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x405df7\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x405dfa\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x405e03\n    __asm_comiss_1(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x405d72;\n    } else {\n        goto lab_0x405e11;\n    }\n  lab_0x405d72:;\n    int64_t * v28 = (int64_t *)v4; // 0x405d77\n    if (*v28 == 0) {\n        // 0x405e88\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x405e91\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x405d82\n    int64_t v31 = *v30; // 0x405d82\n    int64_t * v32; // 0x405cf0\n    int64_t v33; // 0x405cf0\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x405ead\n        if (mem == NULL) {\n            // 0x405d29\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x405ead\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x405d97\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x405dad\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x405e11:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x405e11\n    function_405150(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x405e1a\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x405e1e\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x405e22\n    int128_t v44; // 0x405cf0\n    if (v42 < 0) {\n        // 0x405ee0\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x405ef0\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x405e30\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x405e39\n    int128_t v47; // 0x405cf0\n    int64_t v48; // 0x405cf0\n    if (v46 < 0) {\n        // 0x405ec0\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x405ecd\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x405ed0\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x405e42\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x405e46\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x405e4b\n    __asm_comiss_1(v47, __asm_mulss_3(__asm_movaps(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x405e5b\n        int128_t v53 = v52; // 0x405e64\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x405f00\n            v53 = __asm_mulss_3(v52, v43);\n        }\n        // 0x405e6a\n        __asm_comiss(v53, 0x5f800000);\n        // 0x405d29\n        return 0xffffffff;\n    }\n    goto lab_0x405d72;\n}\n"
        },
        {
            "funcName": "function_405f70",
            "funcStartAddr": "405f70",
            "funcEndAddr": "405fab",
            "decompiledFuncCode": "int64_t function_405f70(int64_t a1, int64_t a2) {\n    // 0x405f70\n    int64_t v1; // bp-16, 0x405f70\n    int64_t v2; // 0x405f70\n    int32_t v3 = function_405cf0(a1, a2, &v1, v2); // 0x405f82\n    if (v3 == -1) {\n        // 0x405f90\n        return 0;\n    }\n    // 0x405f87\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_405fb0",
            "funcStartAddr": "405fb0",
            "funcEndAddr": "406187",
            "decompiledFuncCode": "int64_t function_405fb0(int64_t a1) {\n    // 0x405fb0\n    int128_t v1; // 0x405fb0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x405fb0\n    int64_t v5; // 0x405fb0\n    int64_t result = function_405030(a1, v5, &v4, 1); // 0x405fc5\n    if (result == 0) {\n        // 0x405fe2\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x405fd7\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x405fe2\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x405ff0\n    uint64_t v8 = *v7 - 1; // 0x405ff4\n    *v7 = v8;\n    int64_t v9; // 0x405fb0\n    int64_t v10; // 0x405fb0\n    int64_t v11; // 0x405fb0\n    int128_t v12; // 0x405fb0\n    int128_t v13; // 0x405fb0\n    int64_t v14; // 0x405fb0\n    if (v8 < 0) {\n        // 0x4060e0\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x4060f0\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x4060f4\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x4060f9\n        int128_t v18 = __asm_addss(v16, v16); // 0x4060fd\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x40601c;\n        } else {\n            goto lab_0x40610a;\n        }\n    } else {\n        // 0x406002\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x406006\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x40600a\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x40600f\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x40610a;\n        } else {\n            goto lab_0x40601c;\n        }\n    }\n  lab_0x40601c:\n    // 0x40601c\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x406020\n    int64_t v23 = v14; // 0x406020\n    int128_t v24 = v12; // 0x406020\n    int64_t v25 = v10; // 0x406020\n    int128_t v26 = v22; // 0x406020\n    goto lab_0x406025;\n  lab_0x40610a:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x406117\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x40611a\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x406025;\n  lab_0x406025:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x406025\n    __asm_comiss_1(v28, v27);\n    if (v23 == 0) {\n        // 0x405fe2\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x40602e\n    function_405150(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x406037\n    int64_t v31 = *(int64_t *)v29; // 0x40603b\n    int128_t v32; // 0x405fb0\n    if (v30 < 0) {\n        // 0x406150\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x406160\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x406048\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x406051\n    int128_t v35; // 0x405fb0\n    int64_t v36; // 0x405fb0\n    if (v34 < 0) {\n        // 0x406130\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x40613d\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x406140\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x40605e\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x406062\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x406067\n    __asm_comiss_1(__asm_mulss_3(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x405fe2\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x406078\n    int128_t v41 = v40; // 0x406081\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x406083\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x406088\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x406178\n    if ((char)function_405af0(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x405fe2\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x4060aa\n    if (*v43 != 0) {\n        int64_t v44; // 0x405fb0\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x4060b8\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x4060c9\n    *v43 = 0;\n    // 0x405fe2\n    return result;\n}\n"
        },
        {
            "funcName": "function_406190",
            "funcStartAddr": "406190",
            "funcEndAddr": "4061b7",
            "decompiledFuncCode": "int64_t function_406190(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x406190\n    return (*(int64_t *)(a1 + 8) ^ function_40a7f0(a1, a2, a3)) % a2;\n}\n"
        },
        {
            "funcName": "function_4061c0",
            "funcStartAddr": "4061c0",
            "funcEndAddr": "4061cd",
            "decompiledFuncCode": "int64_t function_4061c0(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x4061c0\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_4061d0",
            "funcStartAddr": "4061d0",
            "funcEndAddr": "4061f5",
            "decompiledFuncCode": "int64_t function_4061d0(int64_t a1, int64_t a2) {\n    // 0x4061d0\n    if (*(int64_t *)(a1 + 8) != *(int64_t *)(a2 + 8) || *(int64_t *)(a1 + 16) != *(int64_t *)(a2 + 16)) {\n        // 0x4061da\n        return 0;\n    }\n    // 0x4061ea\n    return function_4080f0(a1, a2);\n}\n"
        },
        {
            "funcName": "function_406200",
            "funcStartAddr": "406200",
            "funcEndAddr": "406233",
            "decompiledFuncCode": "int64_t function_406200(int64_t str, int64_t str2) {\n    // 0x406200\n    if (*(int64_t *)(str + 8) != *(int64_t *)(str2 + 8) || *(int64_t *)(str + 16) != *(int64_t *)(str2 + 16)) {\n        // 0x40620c\n        return 0;\n    }\n    int32_t strcmp_rc = strcmp((char *)str, (char *)str2); // 0x406224\n    return (int64_t)(strcmp_rc & -256) | (int64_t)(strcmp_rc == 0);\n}\n"
        },
        {
            "funcName": "function_406240",
            "funcStartAddr": "406240",
            "funcEndAddr": "406255",
            "decompiledFuncCode": "int64_t function_406240(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x406247\n    free(v1);\n    free(v1);\n    return &g68;\n}\n"
        },
        {
            "funcName": "function_406260",
            "funcStartAddr": "406260",
            "funcEndAddr": "4062f9",
            "decompiledFuncCode": "int64_t function_406260(int64_t str) {\n    // 0x406260\n    if (str == 0) {\n        // 0x4062d9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g39);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40626e\n    int64_t result = (int64_t)found_char_pos; // 0x40626e\n    if (found_char_pos == NULL) {\n        // 0x4062c9\n        g55 = str;\n        g38 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x406278\n    if (v1 - str < 7) {\n        // 0x4062c9\n        g55 = str;\n        g38 = str;\n        return result;\n    }\n    // 0x406288\n    bool v2; // 0x406260\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x406260\n    int64_t v5 = result - 6; // 0x406260\n    int64_t v6 = 7; // 0x406296\n    unsigned char v7 = *(char *)v5; // 0x406296\n    char v8 = *(char *)v4; // 0x406296\n    char v9 = v8; // 0x406296\n    bool v10 = false; // 0x406296\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4062a0\n    int64_t v13 = v1; // 0x4062a0\n    int64_t v14 = 3; // 0x4062a0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4062c9\n        g55 = str;\n        g38 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4062b2\n    char v16 = *(char *)v12; // 0x4062b2\n    char v17 = v16; // 0x4062b2\n    bool v18 = false; // 0x4062b2\n    while (v15 == v16) {\n        // 0x4062a2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4062bc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4062be\n        v20 = result + 4;\n        g35 = v20;\n    }\n    // 0x4062c9\n    g55 = v20;\n    g38 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406300",
            "funcStartAddr": "406300",
            "funcEndAddr": "4063f2",
            "decompiledFuncCode": "int64_t function_406300(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x406314\n    int64_t result = (int64_t)v1; // 0x406314\n    if (result != a1) {\n        // 0x406321\n        return result;\n    }\n    int64_t v2 = function_40a830(); // 0x406330\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4063e6\n    if (v3 == 85) {\n        // 0x406340\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4063d8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g14 : (int64_t)&g8;\n            return result2;\n        }\n        char v4 = *v1; // 0x40636e\n        int64_t result3 = v4 != 96 ? (int64_t)&g9 : (int64_t)&g12; // 0x40637b\n        // 0x406321\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4063d8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g14 : (int64_t)&g8;\n        return result2;\n    }\n    char v5 = *v1; // 0x4063bd\n    int64_t result4 = v5 != 96 ? (int64_t)&g10 : (int64_t)&g11; // 0x4063ca\n    // 0x406321\n    return result4;\n}\n"
        },
        {
            "funcName": "function_406400",
            "funcStartAddr": "406400",
            "funcEndAddr": "406457",
            "decompiledFuncCode": "int64_t function_406400(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x406400\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_406457",
            "funcStartAddr": "406457",
            "funcEndAddr": "407621",
            "decompiledFuncCode": "int64_t function_406457(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4064a1\n    int64_t v3 = 0; // 0x4064a1\n    int64_t v4; // 0x406457\n    int64_t v5; // 0x406457\n    int64_t v6; // 0x406457\n    int64_t v7; // 0x406457\n    int64_t v8; // 0x406457\n    int64_t v9; // 0x406457\n    int64_t v10; // 0x406457\n    int64_t v11; // 0x406457\n    int64_t v12; // 0x406457\n    int64_t v13; // 0x406457\n    int64_t v14; // 0x406457\n    int64_t v15; // 0x406457\n    int64_t v16; // 0x406457\n    int64_t v17; // 0x406457\n    int64_t v18; // 0x406457\n    int64_t result; // 0x406457\n    int64_t v19; // 0x406457\n    int32_t wc; // bp+132, 0x406457\n    int64_t ps; // bp+136, 0x406457\n    char v20; // 0x406a10\n    int64_t v21; // 0x406a10\n    int64_t v22; // 0x406db8\n    int64_t v23; // 0x406457\n    int64_t v24; // 0x406dd7\n    int32_t v25; // 0x406457\n    while (true) {\n      lab_0x4064a8_2:\n        // 0x4064a8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x406457\n        int64_t v27; // 0x4064dc\n        while (true) {\n          lab_0x4064a8:\n            // 0x4064a8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4064b3\n            if (v15 == -1) {\n                // 0x4064b5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4064c3\n            if (v28) {\n                // break (via goto) -> 0x406c28\n                goto lab_0x406c28;\n            }\n            // 0x4064cc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g67 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x406abb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x406601;\n                    }\n                    // 0x406edd\n                    v26 = v5 + 1;\n                    goto lab_0x4064a8;\n                }\n                case 7: {\n                    goto lab_0x406601;\n                }\n                case 8: {\n                    goto lab_0x406601;\n                }\n                case 9: {\n                    goto lab_0x40681a_2;\n                }\n                case 10: {\n                    goto lab_0x40681a_2;\n                }\n                case 11: {\n                    goto lab_0x406601;\n                }\n                case 12: {\n                    goto lab_0x406601;\n                }\n                case 13: {\n                    goto lab_0x40681a_2;\n                }\n                case 32: {\n                    goto lab_0x40681a_2;\n                }\n                case 33: {\n                    goto lab_0x40681a_2;\n                }\n                case 34: {\n                    goto lab_0x40681a_2;\n                }\n                case 35: {\n                    goto lab_0x4065cd;\n                }\n                case 36: {\n                    goto lab_0x40681a_2;\n                }\n                case 37: {\n                    goto lab_0x406601;\n                }\n                case 38: {\n                    goto lab_0x40681a_2;\n                }\n                case 39: {\n                    goto lab_0x40681a_2;\n                }\n                case 40: {\n                    goto lab_0x40681a_2;\n                }\n                case 41: {\n                    goto lab_0x40681a_2;\n                }\n                case 42: {\n                    goto lab_0x40681a_2;\n                }\n                case 43: {\n                    goto lab_0x406601;\n                }\n                case 44: {\n                    goto lab_0x406601;\n                }\n                case 45: {\n                    goto lab_0x406601;\n                }\n                case 46: {\n                    goto lab_0x406601;\n                }\n                case 47: {\n                    goto lab_0x406601;\n                }\n                case 48: {\n                    goto lab_0x406601;\n                }\n                case 49: {\n                    goto lab_0x406601;\n                }\n                case 50: {\n                    goto lab_0x406601;\n                }\n                case 51: {\n                    goto lab_0x406601;\n                }\n                case 52: {\n                    goto lab_0x406601;\n                }\n                case 53: {\n                    goto lab_0x406601;\n                }\n                case 54: {\n                    goto lab_0x406601;\n                }\n                case 55: {\n                    goto lab_0x406601;\n                }\n                case 56: {\n                    goto lab_0x406601;\n                }\n                case 57: {\n                    goto lab_0x406601;\n                }\n                case 58: {\n                    goto lab_0x406601;\n                }\n                case 59: {\n                    goto lab_0x40681a_2;\n                }\n                case 60: {\n                    goto lab_0x40681a_2;\n                }\n                case 61: {\n                    goto lab_0x40681a_2;\n                }\n                case 62: {\n                    goto lab_0x40681a_2;\n                }\n                case 63: {\n                    goto lab_0x40681a_2;\n                }\n                case 65: {\n                    goto lab_0x406601;\n                }\n                case 66: {\n                    goto lab_0x406601;\n                }\n                case 67: {\n                    goto lab_0x406601;\n                }\n                case 68: {\n                    goto lab_0x406601;\n                }\n                case 69: {\n                    goto lab_0x406601;\n                }\n                case 70: {\n                    goto lab_0x406601;\n                }\n                case 71: {\n                    goto lab_0x406601;\n                }\n                case 72: {\n                    goto lab_0x406601;\n                }\n                case 73: {\n                    goto lab_0x406601;\n                }\n                case 74: {\n                    goto lab_0x406601;\n                }\n                case 75: {\n                    goto lab_0x406601;\n                }\n                case 76: {\n                    goto lab_0x406601;\n                }\n                case 77: {\n                    goto lab_0x406601;\n                }\n                case 78: {\n                    goto lab_0x406601;\n                }\n                case 79: {\n                    goto lab_0x406601;\n                }\n                case 80: {\n                    goto lab_0x406601;\n                }\n                case 81: {\n                    goto lab_0x406601;\n                }\n                case 82: {\n                    goto lab_0x406601;\n                }\n                case 83: {\n                    goto lab_0x406601;\n                }\n                case 84: {\n                    goto lab_0x406601;\n                }\n                case 85: {\n                    goto lab_0x406601;\n                }\n                case 86: {\n                    goto lab_0x406601;\n                }\n                case 87: {\n                    goto lab_0x406601;\n                }\n                case 88: {\n                    goto lab_0x406601;\n                }\n                case 89: {\n                    goto lab_0x406601;\n                }\n                case 90: {\n                    goto lab_0x406601;\n                }\n                case 91: {\n                    goto lab_0x40681a_2;\n                }\n                case 92: {\n                    goto lab_0x40681a_2;\n                }\n                case 93: {\n                    goto lab_0x406601;\n                }\n                case 94: {\n                    goto lab_0x40681a_2;\n                }\n                case 95: {\n                    goto lab_0x406601;\n                }\n                case 96: {\n                    goto lab_0x40681a_2;\n                }\n                case 97: {\n                    goto lab_0x406601;\n                }\n                case 98: {\n                    goto lab_0x406601;\n                }\n                case 99: {\n                    goto lab_0x406601;\n                }\n                case 100: {\n                    goto lab_0x406601;\n                }\n                case 101: {\n                    goto lab_0x406601;\n                }\n                case 102: {\n                    goto lab_0x406601;\n                }\n                case 103: {\n                    goto lab_0x406601;\n                }\n                case 104: {\n                    goto lab_0x406601;\n                }\n                case 105: {\n                    goto lab_0x406601;\n                }\n                case 106: {\n                    goto lab_0x406601;\n                }\n                case 107: {\n                    goto lab_0x406601;\n                }\n                case 108: {\n                    goto lab_0x406601;\n                }\n                case 109: {\n                    goto lab_0x406601;\n                }\n                case 110: {\n                    goto lab_0x406601;\n                }\n                case 111: {\n                    goto lab_0x406601;\n                }\n                case 112: {\n                    goto lab_0x406601;\n                }\n                case 113: {\n                    goto lab_0x406601;\n                }\n                case 114: {\n                    goto lab_0x406601;\n                }\n                case 115: {\n                    goto lab_0x406601;\n                }\n                case 116: {\n                    goto lab_0x406601;\n                }\n                case 117: {\n                    goto lab_0x406601;\n                }\n                case 118: {\n                    goto lab_0x406601;\n                }\n                case 119: {\n                    goto lab_0x406601;\n                }\n                case 120: {\n                    goto lab_0x406601;\n                }\n                case 121: {\n                    goto lab_0x406601;\n                }\n                case 122: {\n                    goto lab_0x406601;\n                }\n                case 123: {\n                    goto lab_0x4065a5;\n                }\n                case 124: {\n                    goto lab_0x40681a_2;\n                }\n                case 125: {\n                    goto lab_0x4065a5;\n                }\n                case 126: {\n                    goto lab_0x4065cd;\n                }\n                default: {\n                    goto lab_0x4069a5;\n                }\n            }\n        }\n      lab_0x4069a5:\n        if (v23 != 1) {\n            // 0x406d10\n            ps = 0;\n            int64_t len = v15; // 0x406d20\n            if (v15 == -1) {\n                // 0x406d22\n                len = strlen((char *)str);\n            }\n            // 0x406d4e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x406daf:\n                // 0x406daf\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x406db4\n                int64_t v30 = v29 + str;\n                v24 = function_40a230(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40732a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40732a_2;\n                    }\n                    case -2: {\n                        // 0x40740d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x407447\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40744a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x407457\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x407450\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40732a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40732a_2;\n                    }\n                    case 1: {\n                        goto lab_0x406d80;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x406e2c\n                        char v34 = *(char *)v33; // 0x406e3d\n                        unsigned char v35; // 0x406457\n                        if (v34 < 125) {\n                            // 0x406e48\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x406e5f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                goto lab_0x40681a_2;\n                            }\n                        }\n                        // 0x406e30\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x406e3d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x406e48\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x406e5f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    goto lab_0x40681a_2;\n                                }\n                            }\n                            // 0x406e30\n                            v33++;\n                        }\n                        goto lab_0x406d80;\n                    }\n                }\n            }\n            goto lab_0x40732a_2;\n        } else {\n            // 0x4069f4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x406601;\n        }\n    }\n  lab_0x406c28:\n    // 0x406c28\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40752a\n        if (v8 > result) {\n            // 0x407533\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x406857\n        return result;\n    }\n    goto lab_0x40681a_2;\n  lab_0x406601:;\n    int64_t v56 = v13;\n    int64_t v57 = v9;\n    int64_t v58 = v16;\n    if (v23 != 0) {\n        // 0x406610\n        v4 = v58;\n        v6 = v57;\n        v10 = v56;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40681a_2;\n        }\n    }\n    int64_t v42 = result; // 0x406711\n    char v43 = v20; // 0x406711\n    int64_t v44 = v58; // 0x406711\n    v3 = v5 + 1;\n    int64_t v45 = v57; // 0x406711\n    int64_t v46 = v56; // 0x406711\n    goto lab_0x40668d;\n  lab_0x40681a_2:;\n    // 0x406857\n    char * v36; // 0x406457\n    return function_406400(v10, v6, str, v4, 2, v25 & -3, 0, (int64_t)v36, (int64_t)v36);\n  lab_0x40732a_2:;\n    uint64_t v37 = v19;\n    int64_t v38 = 0x100000000 * v8 >> 32;\n    int64_t v39 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v38;\n    v13 = v39;\n    if (v37 < 2) {\n        goto lab_0x406601;\n    } else {\n        uint64_t v40 = v37 + v5; // 0x406efe\n        int64_t v41 = v5 + 1; // 0x406fe1\n        v42 = result;\n        v43 = v20;\n        v44 = v22;\n        v3 = v41;\n        v45 = v38;\n        v46 = v39;\n        int64_t v47 = v41; // 0x406fe8\n        char v48 = v20; // 0x406fe8\n        int64_t v49 = result; // 0x406fe8\n        if (v41 < v40) {\n            uint64_t v50 = v49;\n            if (v38 > v50) {\n                // 0x406fb1\n                *(char *)(v50 + v39) = v48;\n            }\n            char v51 = *(char *)(v47 + str); // 0x406fb5\n            int64_t v52 = v50 + 1; // 0x406fba\n            int64_t v53 = v47 + 1; // 0x406fe1\n            v42 = v52;\n            v43 = v51;\n            v44 = v22;\n            v3 = v53;\n            v45 = v38;\n            v46 = v39;\n            v47 = v53;\n            while (v53 < v40) {\n                // 0x406fac\n                v50 = v52;\n                if (v38 > v50) {\n                    // 0x406fb1\n                    *(char *)(v50 + v39) = v51;\n                }\n                // 0x406fb5\n                v51 = *(char *)(v47 + str);\n                v52 = v50 + 1;\n                v53 = v47 + 1;\n                v42 = v52;\n                v43 = v51;\n                v44 = v22;\n                v3 = v53;\n                v45 = v38;\n                v46 = v39;\n                v47 = v53;\n            }\n        }\n        goto lab_0x40668d;\n    }\n  lab_0x406d80:\n    // 0x406d80\n    iswprint(wc);\n    int64_t v54 = v24 + v18; // 0x406d9f\n    int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x406da2\n    v17 = v54;\n    v19 = v54;\n    if (v55 != 0) {\n        // break -> 0x40732a\n        goto lab_0x40732a_2;\n    }\n    goto lab_0x406daf;\n  lab_0x4065cd:\n    // 0x4065cd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40681a_2;\n    }\n    goto lab_0x406601;\n  lab_0x4065a5:;\n    bool v61 = v15 == 1; // 0x4065b0\n    if (v15 == -1) {\n        // 0x4065b2\n        v61 = *(char *)v1 == 0;\n    }\n    // 0x4065be\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v61) {\n        goto lab_0x406601;\n    } else {\n        goto lab_0x4065cd;\n    }\n  lab_0x40668d:;\n    int64_t v59 = v46;\n    uint64_t v60 = v42;\n    if (v60 < v45) {\n        // 0x406692\n        *(char *)(v59 + v60) = v43;\n    }\n    // 0x406696\n    v2 = v60 + 1;\n    v14 = v44;\n    v7 = v45;\n    v11 = v59;\n    goto lab_0x4064a8_2;\n}\n"
        },
        {
            "funcName": "function_407630",
            "funcStartAddr": "407630",
            "funcEndAddr": "4077ce",
            "decompiledFuncCode": "int64_t function_407630(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x407632\n    int32_t * v3 = __errno_location(); // 0x40764c\n    int64_t v4 = (int64_t)g27; // 0x407651\n    int32_t v5 = *v3; // 0x40765b\n    int64_t v6 = v4; // 0x407671\n    if (v2 >= (int64_t)*(int32_t *)&g30) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4077c9\n            function_408ca0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x407680\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x407687\n        int64_t v9; // 0x407630\n        if (g27 == &g28) {\n            int64_t v10 = function_408ab0(0, v8); // 0x4077aa\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g28); // 0x4077af\n            *(int64_t *)&g27 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_408ab0(v4, v8); // 0x40769b\n            *(int64_t *)&g27 = v12;\n            v9 = v12;\n        }\n        // 0x4076aa\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g30; // 0x4076aa\n        int32_t v14 = v7; // 0x4076b1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g30 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x4076e1\n    int64_t v17 = v15 + 8; // 0x4076e4\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x4076eb\n    int64_t * v19 = (int64_t *)v16; // 0x4076ee\n    uint64_t v20 = *v19; // 0x4076ee\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x4076f1\n    int64_t result = *v21; // 0x4076f1\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x4076fc\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x407705\n    int64_t v24; // 0x407630\n    uint64_t v25 = function_406400(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x407714\n    if (v20 > v25) {\n        // 0x40778b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x407727\n    *v19 = v26;\n    if (result != (int64_t)&g56) {\n        // 0x407737\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_408a50(v26); // 0x407751\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x40776b\n    int64_t v28 = *v23; // 0x40776e\n    int64_t v29; // 0x407630\n    function_406400(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x40778b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4077d0",
            "funcStartAddr": "4077d0",
            "funcEndAddr": "407804",
            "decompiledFuncCode": "int64_t function_4077d0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4077d7\n    int64_t result = function_408c50(a1 == 0 ? (int64_t)&g57 : a1, 56); // 0x4077f6\n    return result;\n}\n"
        },
        {
            "funcName": "function_407810",
            "funcStartAddr": "407810",
            "funcEndAddr": "40781f",
            "decompiledFuncCode": "int64_t function_407810(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g57 : a1); // 0x40781c\n    return result;\n}\n"
        },
        {
            "funcName": "function_407820",
            "funcStartAddr": "407820",
            "funcEndAddr": "40782f",
            "decompiledFuncCode": "int64_t function_407820(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g57 : a1; // 0x407828\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g57;\n}\n"
        },
        {
            "funcName": "function_407830",
            "funcStartAddr": "407830",
            "funcEndAddr": "407863",
            "decompiledFuncCode": "int64_t function_407830(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g57 + 8 : a1 + 8; // 0x407849\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40784e\n    uint32_t v3 = *v2; // 0x40784e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x407852\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_407870",
            "funcStartAddr": "407870",
            "funcEndAddr": "407883",
            "decompiledFuncCode": "int64_t function_407870(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g57 + 4 : a1 + 4); // 0x40787c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_407890",
            "funcStartAddr": "407890",
            "funcEndAddr": "4078bb",
            "decompiledFuncCode": "int64_t function_407890(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g57 : a1; // 0x407898\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4078b5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4078ac\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g57;\n}\n"
        },
        {
            "funcName": "function_4078c0",
            "funcStartAddr": "4078c0",
            "funcEndAddr": "407932",
            "decompiledFuncCode": "int64_t function_4078c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g57 : a5; // 0x4078e2\n    int32_t * v2 = __errno_location(); // 0x4078eb\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x407904\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x407908\n    uint32_t v5 = *(int32_t *)v1; // 0x40790b\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x407911\n    int64_t result = function_406400(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x40791a\n    return result;\n}\n"
        },
        {
            "funcName": "function_407940",
            "funcStartAddr": "407940",
            "funcEndAddr": "407a21",
            "decompiledFuncCode": "int64_t function_407940(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g57 : a4; // 0x407962\n    int32_t * v2 = __errno_location(); // 0x407968\n    int64_t v3 = v1 + 8; // 0x40797f\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x407987\n    int32_t * v5 = (int32_t *)v1; // 0x40798a\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x407998\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x40799b\n    int64_t v8 = function_406400(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x4079a5\n    int64_t v9 = v8 + 1; // 0x4079aa\n    int64_t result = function_408a50(v9); // 0x4079bf\n    function_406400(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x407a04\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x407a0d\n    return result;\n}\n"
        },
        {
            "funcName": "function_407a30",
            "funcStartAddr": "407a30",
            "funcEndAddr": "407a3a",
            "decompiledFuncCode": "int64_t function_407a30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407a30\n    return function_407940(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_407a40",
            "funcStartAddr": "407a40",
            "funcEndAddr": "407ad5",
            "decompiledFuncCode": "int64_t function_407a40(void) {\n    uint32_t v1 = *(int32_t *)&g30; // 0x407a40\n    int64_t v2 = v1; // 0x407a40\n    int64_t v3 = v2; // 0x407a54\n    if (v1 >= 2) {\n        int64_t v4 = &g30;\n        int64_t v5 = v4 + 16; // 0x407a73\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g68;\n        while (v5 != (int64_t)g27 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x407a70\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g68;\n        }\n    }\n    int64_t v6 = v3; // 0x407a8d\n    if (g28 != 0x611420) {\n        // 0x407a8f\n        free((int64_t *)g28);\n        g28 = 256;\n        *(int64_t *)&g29 = (int64_t)&g56;\n        v6 = &g68;\n    }\n    int64_t result = v6; // 0x407ab1\n    if (g27 != &g28) {\n        // 0x407ab3\n        free(g27);\n        *(int64_t *)&g27 = (int64_t)&g28;\n        result = &g68;\n    }\n    // 0x407ac6\n    *(int32_t *)&g30 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407ae0",
            "funcStartAddr": "407ae0",
            "funcEndAddr": "407af1",
            "decompiledFuncCode": "int64_t function_407ae0(void) {\n    // 0x407ae0\n    int64_t v1; // 0x407ae0\n    return function_407630(v1, v1, -1, (int64_t *)&g57);\n}\n"
        },
        {
            "funcName": "function_407b00",
            "funcStartAddr": "407b00",
            "funcEndAddr": "407b0a",
            "decompiledFuncCode": "int64_t function_407b00(void) {\n    // 0x407b00\n    int64_t v1; // 0x407b00\n    return function_407630(v1, v1, v1, (int64_t *)&g57);\n}\n"
        },
        {
            "funcName": "function_407b10",
            "funcStartAddr": "407b10",
            "funcEndAddr": "407b26",
            "decompiledFuncCode": "int64_t function_407b10(int64_t a1) {\n    // 0x407b10\n    return function_407630(0, a1, -1, (int64_t *)&g57);\n}\n"
        },
        {
            "funcName": "function_407b30",
            "funcStartAddr": "407b30",
            "funcEndAddr": "407b42",
            "decompiledFuncCode": "int64_t function_407b30(int64_t a1, int64_t a2) {\n    // 0x407b30\n    return function_407630(0, a1, a2, (int64_t *)&g57);\n}\n"
        },
        {
            "funcName": "function_407b50",
            "funcStartAddr": "407b50",
            "funcEndAddr": "407bb8",
            "decompiledFuncCode": "int64_t function_407b50(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x407b60\n    return function_407630(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_407bc0",
            "funcStartAddr": "407bc0",
            "funcEndAddr": "407c24",
            "decompiledFuncCode": "int64_t function_407bc0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x407bd0\n    return function_407630((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_407c30",
            "funcStartAddr": "407c30",
            "funcEndAddr": "407c3c",
            "decompiledFuncCode": "int64_t function_407c30(int64_t a1, int64_t a2) {\n    // 0x407c30\n    return function_407b50(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_407c40",
            "funcStartAddr": "407c40",
            "funcEndAddr": "407c4f",
            "decompiledFuncCode": "int64_t function_407c40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407c40\n    return function_407bc0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_407c50",
            "funcStartAddr": "407c50",
            "funcEndAddr": "407cc0",
            "decompiledFuncCode": "int64_t function_407c50(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g57); // 0x407c5d\n    int128_t v2 = __asm_movdqa(g58); // 0x407c65\n    int128_t v3 = __asm_movdqa(g59); // 0x407c6d\n    int64_t v4 = __asm_movaps_5(v1); // bp-72, 0x407c82\n    __asm_movaps_5(v2);\n    __asm_movaps_5(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x407c98\n    uint32_t v6 = *v5; // 0x407c98\n    uint32_t v7 = (int32_t)a3 % 32; // 0x407c9d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_407630(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_407cc0",
            "funcStartAddr": "407cc0",
            "funcEndAddr": "407ccd",
            "decompiledFuncCode": "int64_t function_407cc0(int64_t a1, int64_t a2) {\n    // 0x407cc0\n    return function_407c50(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_407cd0",
            "funcStartAddr": "407cd0",
            "funcEndAddr": "407ce1",
            "decompiledFuncCode": "int64_t function_407cd0(int64_t a1) {\n    // 0x407cd0\n    return function_407c50(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_407cf0",
            "funcStartAddr": "407cf0",
            "funcEndAddr": "407cfa",
            "decompiledFuncCode": "int64_t function_407cf0(void) {\n    // 0x407cf0\n    int64_t v1; // 0x407cf0\n    return function_407c50(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_407d00",
            "funcStartAddr": "407d00",
            "funcEndAddr": "407d6e",
            "decompiledFuncCode": "int64_t function_407d00(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x407d1a\n    return function_407630((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_407d70",
            "funcStartAddr": "407d70",
            "funcEndAddr": "407ddc",
            "decompiledFuncCode": "int64_t function_407d70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g57); // 0x407d77\n    int128_t v2 = __asm_movdqa(g58); // 0x407d7f\n    int128_t v3 = __asm_movdqa(g59); // 0x407d87\n    __asm_movaps_5(v1);\n    __asm_movaps_5(v2);\n    __asm_movaps_5(v3);\n    int64_t v4 = 10; // bp-72, 0x407da9\n    if (a2 == 0 || a3 == 0) {\n        // 0x407dd7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x407dba\n    return function_407630(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_407de0",
            "funcStartAddr": "407de0",
            "funcEndAddr": "407de9",
            "decompiledFuncCode": "int64_t function_407de0(void) {\n    // 0x407de0\n    int64_t v1; // 0x407de0\n    return function_407d70(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_407df0",
            "funcStartAddr": "407df0",
            "funcEndAddr": "407e07",
            "decompiledFuncCode": "int64_t function_407df0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407df0\n    return function_407d70(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_407e10",
            "funcStartAddr": "407e10",
            "funcEndAddr": "407e23",
            "decompiledFuncCode": "int64_t function_407e10(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x407e10\n    return function_407d70(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_407e30",
            "funcStartAddr": "407e30",
            "funcEndAddr": "407e3a",
            "decompiledFuncCode": "int64_t function_407e30(void) {\n    // 0x407e30\n    int64_t v1; // 0x407e30\n    return function_407630(v1, v1, v1, &g26);\n}\n"
        },
        {
            "funcName": "function_407e40",
            "funcStartAddr": "407e40",
            "funcEndAddr": "407e52",
            "decompiledFuncCode": "int64_t function_407e40(int64_t a1, int64_t a2) {\n    // 0x407e40\n    return function_407630(0, a1, a2, &g26);\n}\n"
        },
        {
            "funcName": "function_407e60",
            "funcStartAddr": "407e60",
            "funcEndAddr": "407e71",
            "decompiledFuncCode": "int64_t function_407e60(int64_t a1, int64_t a2) {\n    // 0x407e60\n    return function_407630(a1, a2, -1, &g26);\n}\n"
        },
        {
            "funcName": "function_407e80",
            "funcStartAddr": "407e80",
            "funcEndAddr": "407e96",
            "decompiledFuncCode": "int64_t function_407e80(int64_t a1) {\n    // 0x407e80\n    return function_407630(0, a1, -1, &g26);\n}\n"
        },
        {
            "funcName": "function_407ea0",
            "funcStartAddr": "407ea0",
            "funcEndAddr": "4080e2",
            "decompiledFuncCode": "int64_t function_407ea0(int64_t fd, int64_t a2, int64_t fd2, int64_t a4, int64_t a5) {\n    int32_t result = syscall(SYS_vmsplice); // 0x407ed4\n    if (result >= 0) {\n        // 0x407f1b\n        return result;\n    }\n    int32_t * v1 = __errno_location(); // 0x407ee3\n    int32_t v2 = *v1; // 0x407eef\n    if (v2 != 95 && (v2 - 22 & -17) != 0) {\n        // 0x407f1b\n        return result;\n    }\n    int64_t v3 = (int64_t)v1; // 0x407ee3\n    char * str2; // 0x407ea0\n    char v4; // 0x407ea0\n    int64_t v5; // 0x407ea0\n    int64_t v6; // bp-200, 0x407ea0\n    if ((int32_t)a5 == 0) {\n        // 0x407f06\n        str2 = (char *)a4;\n        v5 = v3;\n        v4 = !((v2 == 95 | (v2 - 22 & -17) == 0));\n    } else {\n        if ((a5 & 0xfffffffe) != 0) {\n            // 0x407f0f\n            *v1 = 95;\n            // 0x407f1b\n            return -1;\n        }\n        char * v7 = (char *)a4;\n        int32_t v8 = __fxstatat(1, (int32_t)fd2, v7, (struct stat *)&v6, 256); // 0x407f4e\n        int64_t v9 = 0x100000000 * v3 >> 32; // 0x407f53\n        int32_t * v10 = (int32_t *)v9;\n        if (v8 == 0) {\n            // 0x4080b0\n            *v10 = 17;\n            // 0x407f1b\n            return -1;\n        }\n        int32_t v11 = *v10; // 0x407f60\n        if (v11 == 75) {\n            // 0x4080b0\n            *v10 = 17;\n            // 0x407f1b\n            return -1;\n        }\n        // 0x407f6c\n        str2 = v7;\n        v5 = v9;\n        v4 = 1;\n        if (v11 != 2) {\n            // 0x407f1b\n            return -1;\n        }\n    }\n    char * str = (char *)a2; // 0x407f88\n    int32_t len = strlen(str); // 0x407f88\n    int32_t len2 = strlen(str2); // 0x407f93\n    if (len == 0 || len2 == 0) {\n        // 0x407f1b\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    // 0x407faf\n    if (*(char *)(a2 - 1 + (int64_t)len) != 47) {\n        // 0x407fb6\n        if (*(char *)(a4 - 1 + (int64_t)len2) != 47) {\n            // 0x407f1b\n            return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n        }\n    }\n    // 0x407fc2\n    int64_t v12; // bp-344, 0x407ea0\n    if (__fxstatat(1, (int32_t)fd, str, (struct stat *)&v12, 256) != 0) {\n        // 0x407f1b\n        return -1;\n    }\n    int64_t v13 = 0x100000000 * v5 >> 32; // 0x407fe9\n    int32_t v14; // 0x407ea0\n    if (v4 != 0) {\n        if ((v14 & 0xf000) == 0x4000) {\n            // 0x407f1b\n            return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n        }\n        // 0x408004\n        *(int32_t *)v13 = 2;\n        // 0x407f1b\n        return -1;\n    }\n    // 0x408050\n    if (__fxstatat(1, (int32_t)fd2, str2, (struct stat *)&v6, 256) != 0) {\n        // 0x40807c\n        if (*(int32_t *)v13 != 2 || (v14 & 0xf000) != 0x4000) {\n            // 0x407f1b\n            return -1;\n        }\n        // 0x407f1b\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    if ((v14 & 0xf000) != 0x4000) {\n        // 0x40802f\n        *(int32_t *)v13 = 20;\n        // 0x407f1b\n        return -1;\n    }\n    if ((v14 & 0xf000) == 0x4000) {\n        // 0x407f1b\n        return renameat((int32_t)fd, str, (int32_t)fd2, str2);\n    }\n    // 0x4080d1\n    *(int32_t *)v13 = 21;\n    // 0x407f1b\n    return -1;\n}\n"
        },
        {
            "funcName": "function_4080f0",
            "funcStartAddr": "4080f0",
            "funcEndAddr": "408220",
            "decompiledFuncCode": "int64_t function_4080f0(int64_t a1, int64_t a2) {\n    int64_t str = function_404ca0(a1, a2); // 0x408109\n    int64_t str2 = function_404ca0(a2, a2); // 0x408114\n    int64_t n = function_404d00(str); // 0x40811f\n    if (n != function_404d00(str2) || memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) != 0) {\n        // 0x408134\n        return 0;\n    }\n    int64_t v1 = function_404bc0(); // 0x408165\n    int64_t v2 = function_404bc0(); // 0x408170\n    char * v3 = (char *)v1; // 0x408183\n    int64_t v4; // bp-344, 0x4080f0\n    if (__xstat(1, v3, (struct stat *)&v4) != 0) {\n        // 0x408200\n        error(1, *__errno_location(), \"%s\", v3);\n    }\n    char * v5 = (char *)v2; // 0x40819c\n    int64_t v6; // bp-200, 0x4080f0\n    if (__xstat(1, v5, (struct stat *)&v6) != 0) {\n        // 0x4081e0\n        error(1, *__errno_location(), \"%s\", v5);\n    }\n    int64_t v7 = 0; // 0x4081b4\n    // 0x4081b6\n    v7 = v4 == v6;\n    // 0x4081c5\n    free((int64_t *)v1);\n    free((int64_t *)v2);\n    // 0x408134\n    return v7 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408220",
            "funcStartAddr": "408220",
            "funcEndAddr": "408274",
            "decompiledFuncCode": "int64_t function_408220(int64_t a1) {\n    // 0x408220\n    int64_t v1; // bp-152, 0x408220\n    int32_t v2 = __lxstat(1, (char *)a1, (struct stat *)&v1); // 0x408233\n    int32_t * v3 = __errno_location(); // 0x40823a\n    if (v2 == 0) {\n        // 0x408260\n        *v3 = 17;\n        return 0xffffffff;\n    }\n    int32_t v4 = *v3; // 0x408243\n    if (v4 != 75) {\n        // 0x40824a\n        return v4 != 2 ? 0xffffffff : 0;\n    }\n    // 0x408260\n    *v3 = 17;\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408280",
            "funcStartAddr": "408280",
            "funcEndAddr": "40828a",
            "decompiledFuncCode": "int64_t function_408280(void) {\n    // 0x408280\n    int64_t path; // 0x408280\n    return mkdir((char *)path, 448);\n}\n"
        },
        {
            "funcName": "function_408290",
            "funcStartAddr": "408290",
            "funcEndAddr": "4082a6",
            "decompiledFuncCode": "int64_t function_408290(void) {\n    // 0x408290\n    int64_t path; // 0x408290\n    return open((char *)path, (int32_t)path & -196 | 194);\n}\n"
        },
        {
            "funcName": "function_4082b0",
            "funcStartAddr": "4082b0",
            "funcEndAddr": "4082b1",
            "decompiledFuncCode": "int64_t function_4082b0(void) {\n    // 0x4082b0\n    int64_t result; // 0x4082b0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4082d0",
            "funcStartAddr": "4082d0",
            "funcEndAddr": "40842d",
            "decompiledFuncCode": "int64_t function_4082d0(int64_t str, int32_t a2, int64_t * a3, int64_t a4, uint64_t a5) {\n    int32_t * v1 = __errno_location(); // 0x4082f5\n    int32_t v2 = *v1; // 0x408300\n    uint64_t len = (int64_t)strlen((char *)str); // 0x408306\n    uint64_t v3 = (int64_t)a2 + a5; // 0x40830e\n    if (v3 > len) {\n        // 0x408418\n        *v1 = 22;\n        // 0x408400\n        return 0xffffffff;\n    }\n    int64_t str2 = len - v3 + str;\n    if ((int64_t)strspn((char *)str2, \"X\") < a5) {\n        // 0x408418\n        *v1 = 22;\n        // 0x408400\n        return 0xffffffff;\n    }\n    int64_t v4 = function_40add0(); // 0x408344\n    if (v4 == 0) {\n        // 0x408400\n        return 0xffffffff;\n    }\n    int32_t v5 = 0x3a2f8; // 0x408366\n    int64_t v6; // 0x4082d0\n    int64_t v7; // 0x408388\n    int64_t v8; // 0x40838c\n    char v9; // 0x408391\n    if (a5 != 0) {\n        v7 = str2 + 1;\n        v8 = function_40ae10(v4, 61);\n        v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n        *(char *)str2 = v9;\n        v6 = v7;\n        while (v7 != str2 + a5) {\n            // 0x408380\n            v7 = v6 + 1;\n            v8 = function_40ae10(v4, 61);\n            v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n            *(char *)v6 = v9;\n            v6 = v7;\n        }\n    }\n    int32_t v10; // 0x4082d0\n    int64_t v11; // 0x4082d0\n    int64_t result; // 0x4082d0\n    while ((int32_t)a4 < 0) {\n        int32_t v12 = *v1; // 0x4083b8\n        v10 = v12;\n        v11 = 0xffffffff;\n        if (v12 != 17) {\n            goto lab_0x4083e5;\n        }\n        // 0x4083c0\n        v5--;\n        if (v5 == 0) {\n            // 0x4083c6\n            function_40af30(v4);\n            *v1 = 17;\n            result = 0xffffffff;\n            return result;\n        }\n        if (a5 != 0) {\n            v7 = str2 + 1;\n            v8 = function_40ae10(v4, 61);\n            v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n            *(char *)str2 = v9;\n            v6 = v7;\n            while (v7 != str2 + a5) {\n                // 0x408380\n                v7 = v6 + 1;\n                v8 = function_40ae10(v4, 61);\n                v9 = *(char *)(v8 + (int64_t)\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\");\n                *(char *)v6 = v9;\n                v6 = v7;\n            }\n        }\n    }\n    // 0x4083dc\n    *v1 = v2;\n    v10 = v2;\n    v11 = a4 & 0xffffffff;\n  lab_0x4083e5:\n    // 0x4083e5\n    function_40af30(v4);\n    *v1 = v10;\n    result = v11;\n  lab_0x408400:\n    // 0x408400\n    return result;\n}\n"
        },
        {
            "funcName": "function_408430",
            "funcStartAddr": "408430",
            "funcEndAddr": "4084ab",
            "decompiledFuncCode": "int64_t function_408430(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a3 >> 32; // bp-12, 0x408434\n    if ((int32_t)a4 < 3) {\n        int64_t v2 = *(int64_t *)((8 * a4 & 0x7fffffff8) + (int64_t)&g13); // 0x408444\n        int64_t v3; // 0x408430\n        return function_4082d0(a1, (int32_t)a2, &v1, v2, v3);\n    }\n    // 0x40848c\n    function_4082b0();\n    function_4082b0();\n    return function_4082d0(a1, (int32_t)a2, (int64_t *)a3, a4, 6);\n}\n"
        },
        {
            "funcName": "function_4084b0",
            "funcStartAddr": "4084b0",
            "funcEndAddr": "40888d",
            "decompiledFuncCode": "int64_t function_4084b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x408548\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x4084cc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x4084e6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40852b\n    if (a6 < 10) {\n        // 0x40853a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x408632\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_408890",
            "funcStartAddr": "408890",
            "funcEndAddr": "4088b0",
            "decompiledFuncCode": "int64_t function_408890(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408890\n    if (a5 == 0) {\n        // 0x4088ab\n        return function_4084b0(a1, a2, a3, a4, a5, 0, (int64_t)&g68);\n    }\n    int64_t v1 = 0; // 0x408897\n    v1++;\n    int64_t v2 = v1; // 0x4088a9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4088a0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4088ab\n    return function_4084b0(a1, a2, a3, a4, a5, v2, (int64_t)&g68);\n}\n"
        },
        {
            "funcName": "function_4088b0",
            "funcStartAddr": "4088b0",
            "funcEndAddr": "408910",
            "decompiledFuncCode": "int64_t function_4088b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4088b0\n    int64_t v3 = &v2; // 0x4088b0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4088e3\n    int64_t v6; // 0x4088cd\n    int64_t * v7; // 0x4088eb\n    int64_t v8; // 0x4088eb\n    int64_t v9; // 0x4088f7\n    if (v5 < 48) {\n        // 0x4088c0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x408903\n            break;\n        }\n    } else {\n        // 0x4088eb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x408903\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4088e1\n    while (v4 != 9) {\n        // 0x4088d9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4088c0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x408903\n                break;\n            }\n        } else {\n            // 0x4088eb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x408903\n                break;\n            }\n        }\n        // 0x4088d9\n        v10 = 10;\n    }\n    // 0x408903\n    return function_4084b0(a1, a2, a3, a4, v3, v10, (int64_t)&g68);\n}\n"
        },
        {
            "funcName": "function_408910",
            "funcStartAddr": "408910",
            "funcEndAddr": "4089cc",
            "decompiledFuncCode": "int64_t function_408910(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x408910\n    int64_t v1; // bp-168, 0x408910\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x408910\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x408910\n    int64_t v8; // 0x408910\n    int64_t v9; // bp-56, 0x408910\n    int64_t v10; // 0x408975\n    int64_t v11; // 0x408999\n    if ((int32_t)v6 < 48) {\n        // 0x408960\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4089b0\n            break;\n        }\n    } else {\n        // 0x408992\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4089b0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40898a\n    int64_t v13 = 10; // 0x40898a\n    while (v5 != 9) {\n        // 0x40898c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x408960\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4089b0\n                break;\n            }\n        } else {\n            // 0x408992\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4089b0\n                break;\n            }\n        }\n        // 0x408982\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4089b0\n    int64_t v14; // bp-136, 0x408910\n    int64_t result = function_4084b0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g68); // 0x4089bf\n    return result;\n}\n"
        },
        {
            "funcName": "function_4089d0",
            "funcStartAddr": "4089d0",
            "funcEndAddr": "408a44",
            "decompiledFuncCode": "int64_t function_4089d0(int64_t a1) {\n    // 0x4089d0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x408a33\n    return fputs_unlocked(v1, g36);\n}\n"
        },
        {
            "funcName": "function_408a50",
            "funcStartAddr": "408a50",
            "funcEndAddr": "408a6a",
            "decompiledFuncCode": "int64_t function_408a50(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x408a54\n    if (size != 0 != (mem == NULL)) {\n        // 0x408a63\n        return (int64_t)mem;\n    }\n    // 0x408a65\n    function_408ca0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408a70",
            "funcStartAddr": "408a70",
            "funcEndAddr": "408a91",
            "decompiledFuncCode": "int64_t function_408a70(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x408a73\n    int64_t v2 = v1; // 0x408a73\n    if (v2 < 0) {\n        // 0x408a8b\n        function_408ca0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x408a89\n        return function_408a50(v2);\n    }\n    // 0x408a8b\n    function_408ca0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408aa0",
            "funcStartAddr": "408aa0",
            "funcEndAddr": "408aa2",
            "decompiledFuncCode": "int64_t function_408aa0(void) {\n    // 0x408aa0\n    int64_t v1; // 0x408aa0\n    return function_408a50(v1);\n}\n"
        },
        {
            "funcName": "function_408ab0",
            "funcStartAddr": "408ab0",
            "funcEndAddr": "408ae6",
            "decompiledFuncCode": "int64_t function_408ab0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x408ad8\n        free(v1);\n        return (int32_t)&g68 ^ (int32_t)&g68;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x408ac1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x408ad0\n        return (int64_t)mem;\n    }\n    // 0x408ae1\n    function_408ca0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408af0",
            "funcStartAddr": "408af0",
            "funcEndAddr": "408b11",
            "decompiledFuncCode": "int64_t function_408af0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x408af3\n    int64_t v2 = v1; // 0x408af3\n    if (v2 < 0) {\n        // 0x408b0b\n        function_408ca0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x408b09\n        return function_408ab0(a1, v2);\n    }\n    // 0x408b0b\n    function_408ca0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408b20",
            "funcStartAddr": "408b20",
            "funcEndAddr": "408ba6",
            "decompiledFuncCode": "int64_t function_408b20(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x408b7b\n            function_408ca0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_408ab0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x408b63\n    if (a2 == 0) {\n        // 0x408b88\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x408b68\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x408b7b\n        function_408ca0(a1);\n        // UNREACHABLE\n    }\n    // 0x408b4a\n    *(int64_t *)a2 = v2;\n    return function_408ab0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_408bb0",
            "funcStartAddr": "408bb0",
            "funcEndAddr": "408c00",
            "decompiledFuncCode": "int64_t function_408bb0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x408bb0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x408bfa\n            function_408ca0(a1);\n            // UNREACHABLE\n        }\n        // 0x408bd2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_408ab0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x408be5\n        *(int64_t *)a2 = 128;\n        return function_408ab0(0, 128);\n    }\n    // 0x408bf8\n    if (a2 < 0) {\n        // 0x408bfa\n        function_408ca0(a1);\n        // UNREACHABLE\n    }\n    // 0x408bd2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_408ab0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_408c00",
            "funcStartAddr": "408c00",
            "funcEndAddr": "408c17",
            "decompiledFuncCode": "int64_t function_408c00(int64_t a1, int64_t a2) {\n    // 0x408c00\n    return (int64_t)memset((int64_t *)function_408a50(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_408c20",
            "funcStartAddr": "408c20",
            "funcEndAddr": "408c4e",
            "decompiledFuncCode": "int64_t function_408c20(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x408c27\n    if ((int64_t)v1 < 0) {\n        // 0x408c49\n        function_408ca0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x408c49\n        function_408ca0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x408c3a\n    if (mem != NULL) {\n        // 0x408c44\n        return (int64_t)mem;\n    }\n    // 0x408c49\n    function_408ca0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408c50",
            "funcStartAddr": "408c50",
            "funcEndAddr": "408c78",
            "decompiledFuncCode": "int64_t function_408c50(int64_t a1, int64_t a2) {\n    int64_t v1 = function_408a50(a2); // 0x408c5f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_408c80",
            "funcStartAddr": "408c80",
            "funcEndAddr": "408c93",
            "decompiledFuncCode": "int64_t function_408c80(int64_t str) {\n    // 0x408c80\n    return function_408c50(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_408ca0",
            "funcStartAddr": "408ca0",
            "funcEndAddr": "408cd1",
            "decompiledFuncCode": "int64_t function_408ca0(int64_t a1) {\n    // 0x408ca0\n    error(g25, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408ce0",
            "funcStartAddr": "408ce0",
            "funcEndAddr": "408d0f",
            "decompiledFuncCode": "int64_t function_408ce0(int64_t a1, int64_t a2) {\n    int64_t result = function_408f90(0, 0); // 0x408ce5\n    if (result != 0 || *__errno_location() != 12) {\n        // 0x408cf2\n        return result;\n    }\n    // 0x408d0a\n    function_408ca0(0);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_408d10",
            "funcStartAddr": "408d10",
            "funcEndAddr": "408d79",
            "decompiledFuncCode": "int64_t function_408d10(void) {\n    char * v1 = NULL; // bp-24, 0x408d2b\n    int64_t v2 = 0; // bp-16, 0x408d33\n    int32_t v3 = __getdelim(&v1, (int32_t *)&v2, 10, g37); // 0x408d3c\n    if (v3 < 1) {\n        // 0x408d5e\n        free((int64_t *)v1);\n        return 0;\n    }\n    int64_t v4 = (int64_t)v1; // 0x408d46\n    char * v5 = (char *)((int64_t)v3 - 1 + v4); // 0x408d4f\n    int64_t response = v4; // 0x408d52\n    if (*v5 == 10) {\n        // 0x408d70\n        *v5 = 0;\n        response = (int64_t)v1;\n    }\n    int32_t v6 = rpmatch((char *)response); // 0x408d54\n    // 0x408d5e\n    free((int64_t *)v1);\n    return v6 >= 0 == (v6 != 0);\n}\n"
        },
        {
            "funcName": "function_408d80",
            "funcStartAddr": "408d80",
            "funcEndAddr": "408eb5",
            "decompiledFuncCode": "int64_t function_408d80(int64_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x408db0\n    if (cmd != 1030) {\n        // 0x408e60\n        return fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x408dbc\n    int64_t v2; // 0x408d80\n    if (g60 < 0) {\n        int64_t v3 = function_408d80(fd, 0, v1, a4); // 0x408e04\n        int64_t v4 = v3 & 0xffffffff; // 0x408e09\n        if ((int32_t)v3 < 0) {\n            // 0x408df0\n            return v4 & 0xffffffff;\n        }\n        // 0x408e0f\n        v2 = v4;\n        if (g60 != -1) {\n            // 0x408df0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x408dd7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x408de6\n            g60 = 1;\n            // 0x408df0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_408d80(fd & 0xffffffff, 0, v1, a4); // 0x408e97\n        int64_t v7 = v6 & 0xffffffff; // 0x408e9c\n        if ((int32_t)v6 < 0) {\n            // 0x408df0\n            return v7 & 0xffffffff;\n        }\n        // 0x408ea6\n        g60 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x408e1f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x408e2a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x408df0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x408e42\n    close(fd2);\n    // 0x408df0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408ec0",
            "funcStartAddr": "408ec0",
            "funcEndAddr": "408f00",
            "decompiledFuncCode": "int64_t function_408ec0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x408eda\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x408eda\n        return fflush(stream);\n    }\n    // 0x408ee8\n    function_408f30(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_408f00",
            "funcStartAddr": "408f00",
            "funcEndAddr": "408f28",
            "decompiledFuncCode": "int64_t function_408f00(int64_t a1) {\n    // 0x408f00\n    if (*(int64_t *)(a1 + 40) > *(int64_t *)(a1 + 32)) {\n        // 0x408f27\n        return 0;\n    }\n    int64_t v1 = *(int64_t *)(a1 + 16) - *(int64_t *)(a1 + 8); // 0x408f10\n    int64_t result = v1; // 0x408f1a\n    if ((a1 & 256) != 0) {\n        // 0x408f1c\n        result = *(int64_t *)(a1 + 88) + v1 - *(int64_t *)(a1 + 72);\n    }\n    // 0x408f27\n    return result;\n}\n"
        },
        {
            "funcName": "function_408f30",
            "funcStartAddr": "408f30",
            "funcEndAddr": "408f87",
            "decompiledFuncCode": "int64_t function_408f30(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x408f30\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x408f3a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x408f6b\n    int64_t result = -1; // 0x408f74\n    if (v1 != -1) {\n        // 0x408f76\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x408f82\n    return result;\n}\n"
        },
        {
            "funcName": "function_408f90",
            "funcStartAddr": "408f90",
            "funcEndAddr": "409452",
            "decompiledFuncCode": "int64_t function_408f90(int32_t a1, int32_t a2) {\n    // 0x408f90\n    int32_t size; // 0x408f90\n    int32_t v1; // 0x408f90\n    int32_t v2; // 0x408f90\n    if (a2 != 0) {\n        // 0x408ff0\n        size = a2;\n        v1 = a2;\n        v2 = a1;\n        if (a1 == 0) {\n            goto lab_0x408fc2;\n        } else {\n            goto lab_0x40900c;\n        }\n    } else {\n        // 0x408fb0\n        size = 0x1000;\n        if (a1 != 0) {\n            // 0x4093b0\n            *__errno_location() = 22;\n            // 0x408fd6\n            return 0;\n        }\n        goto lab_0x408fc2;\n    }\n  lab_0x409350:;\n    // 0x409350\n    int32_t v3; // 0x40934a\n    int64_t v4 = v3; // 0x409352\n    int64_t v5; // 0x408f90\n    int64_t dirp2 = v5; // 0x409352\n    int32_t * v6; // 0x409096\n    if (v3 != 0) {\n        goto lab_0x409361;\n    } else {\n        // 0x409354\n        *v6 = 2;\n        v4 = 2;\n        dirp2 = v5;\n        goto lab_0x409361;\n    }\n  lab_0x409162:;\n    // 0x409162\n    int64_t v7; // 0x408f90\n    int64_t v8 = v7;\n    int64_t v9; // 0x408f90\n    int64_t v10 = v9 + 19; // 0x409162\n    char * str = (char *)v10;\n    int64_t v11; // bp-200, 0x408f90\n    int64_t v12; // 0x408f90\n    int32_t v13; // 0x408f90\n    int32_t fd; // 0x4090b2\n    if ((v13 & 0xf000) == 0x4000 == __fxstatat(1, fd, str, (struct stat *)&v11, 256) == 0) {\n        // 0x409195\n        if (v11 == v12) {\n            // break -> 0x4091b0\n            goto lab_0x4091b0;\n        }\n    }\n    int64_t v14 = v8; // 0x408f90\n    goto lab_0x409120_2;\n  lab_0x40942e_2:\n    // 0x40942e\n    *v6 = 12;\n    v4 = 12;\n    dirp2 = v5;\n    goto lab_0x409361;\n  lab_0x408fc2:;\n    int64_t * mem = malloc(size); // 0x408fc7\n    int32_t v41 = (int64_t)mem; // 0x408fcc\n    int32_t result = v41; // 0x408fd4\n    v1 = size;\n    v2 = v41;\n    if (mem == NULL) {\n        // 0x408fd6\n        return result;\n    }\n    goto lab_0x40900c;\n  lab_0x40900c:;\n    int32_t v42 = v2;\n    int64_t v43 = v42;\n    int64_t v44 = v1;\n    int64_t v45 = v43 + v44; // 0x409011\n    int64_t v46 = v45 - 1; // 0x409020\n    *(char *)v46 = 0;\n    int64_t v47; // 0x408f90\n    int64_t v48; // 0x408f90\n    int32_t * v49; // 0x408f90\n    int64_t v50; // 0x408f90\n    int64_t v33; // 0x408f90\n    int64_t v40; // 0x408f90\n    int64_t v51; // 0x408f90\n    int32_t v38; // 0x408f90\n    int32_t v52; // 0x408f90\n    int32_t v53; // 0x408f90\n    if (__lxstat(1, \".\", (struct stat *)&v11) < 0) {\n        goto lab_0x409388;\n    } else {\n        // 0x409036\n        if (__lxstat(1, \"/\", (struct stat *)&v11) < 0) {\n            goto lab_0x409388;\n        } else {\n            // 0x409061\n            v47 = v44;\n            v48 = v43;\n            v52 = v42;\n            v51 = v46;\n            v50 = v45;\n            if (true) {\n                goto lab_0x4092a8;\n            } else {\n                // 0x409096\n                v6 = __errno_location();\n                int32_t v54 = v1; // 0x4090a3\n                int32_t v55 = v42; // 0x4090a3\n                int64_t v56 = v11; // 0x4090a3\n                int64_t v57 = v46; // 0x4090a3\n                int64_t v58 = 0; // 0x4090a3\n                int32_t fd2 = -100; // 0x4090a3\n                int64_t dirp3; // 0x408f90\n                while (true) {\n                    // 0x4090a6\n                    dirp3 = v58;\n                    v38 = v55;\n                    fd = openat(fd2, \"..\", O_RDONLY);\n                    if (fd < 0) {\n                        // break -> 0x4093d7\n                        break;\n                    }\n                    // 0x4090c2\n                    if (__fxstat(1, fd, (struct stat *)&v11) != 0) {\n                        int64_t v59 = (int64_t)*v6; // 0x4093e8\n                        v40 = v59;\n                        if (dirp3 == 0) {\n                            goto lab_0x4093cd;\n                        } else {\n                            // 0x4093f1\n                            closedir((struct __dirstream *)dirp3);\n                            v40 = v59;\n                            goto lab_0x4093cd;\n                        }\n                    }\n                    // 0x4090db\n                    v12 = v56;\n                    int32_t v60 = v54;\n                    if (dirp3 != 0) {\n                        // 0x4090e0\n                        if (closedir((struct __dirstream *)dirp3) != 0) {\n                            // 0x4093c9\n                            v40 = (int64_t)*v6;\n                            goto lab_0x4093cd;\n                        }\n                    }\n                    struct __dirstream * dirp = fdopendir(fd); // 0x409107\n                    if (dirp == NULL) {\n                        // 0x4093c9\n                        v40 = (int64_t)*v6;\n                        goto lab_0x4093cd;\n                    }\n                    // 0x409118\n                    v5 = (int64_t)dirp;\n                    v14 = false;\n                    while (true) {\n                      lab_0x409120_2:;\n                        int64_t v15 = v14; // 0x408f90\n                        int64_t v16; // 0x408f90\n                        int64_t v17; // 0x408f90\n                        while (true) {\n                            int64_t v18 = v15;\n                            *v6 = 0;\n                            struct dirent * v19 = readdir(dirp); // 0x40912b\n                            int64_t v20; // 0x408f90\n                            int64_t v21; // 0x408f90\n                            if (v19 == NULL) {\n                                int32_t v22 = *v6; // 0x409300\n                                v3 = v22;\n                                if ((char)v18 == 0 || v22 != 0) {\n                                    goto lab_0x409350;\n                                }\n                                // 0x40930d\n                                rewinddir(dirp);\n                                struct dirent * v23 = readdir(dirp); // 0x409318\n                                if (v23 == NULL) {\n                                    // 0x40934a\n                                    v3 = *v6;\n                                    goto lab_0x409350;\n                                }\n                                int64_t v24 = (int64_t)v23;\n                                v9 = v24;\n                                v7 = 0;\n                                v21 = v24;\n                                v20 = 0;\n                                if (*(char *)(v24 + 19) != 46) {\n                                    goto lab_0x409162;\n                                }\n                            } else {\n                                int64_t v25 = (int64_t)v19;\n                                v17 = v25;\n                                v16 = v18;\n                                v21 = v25;\n                                v20 = v18;\n                                if (*(char *)(v25 + 19) != 46) {\n                                    // break -> 0x409143\n                                    break;\n                                }\n                            }\n                            int64_t v26 = v20;\n                            int64_t v27 = v21;\n                            int64_t v28 = v27 + 20; // 0x409330\n                            if (*(char *)v28 != 0) {\n                                // 0x40933a\n                                v17 = v27;\n                                v16 = v26;\n                                if (*(int16_t *)v28 != 46) {\n                                    // break -> 0x409143\n                                    break;\n                                }\n                            }\n                            // 0x409120\n                            v15 = v26;\n                        }\n                        int64_t v29 = v16;\n                        int64_t v30 = v17;\n                        v9 = v30;\n                        v7 = v29;\n                        if ((char)v29 == 0) {\n                            goto lab_0x409162;\n                        } else {\n                            // 0x409148\n                            v9 = v30;\n                            v7 = 1;\n                            int64_t v31 = v29; // 0x40915d\n                            int64_t v32; // 0x408f90\n                            if (v11 == v12 && *(int64_t *)v30 != v32) {\n                                // 0x409120\n                                v14 = v31;\n                                goto lab_0x409120_2;\n                            } else {\n                                goto lab_0x409162;\n                            }\n                        }\n                    }\n                  lab_0x4091b0:;\n                    int64_t v61 = v38; // 0x4091b8\n                    uint64_t v62 = v57 - v61; // 0x4091b8\n                    int32_t len = strlen(str); // 0x4091bd\n                    uint64_t v63 = (int64_t)len; // 0x4091bd\n                    int32_t v64 = v60; // 0x4091c8\n                    int32_t v65 = v38; // 0x4091c8\n                    int64_t dest_mem = v57; // 0x4091c8\n                    if (v62 <= v63) {\n                        if (a2 != 0) {\n                            // 0x409440\n                            *v6 = 34;\n                            v4 = 34;\n                            dirp2 = v5;\n                            goto lab_0x409361;\n                        }\n                        uint64_t v66 = (int64_t)v60; // 0x4091d6\n                        int64_t v67 = len >= v60 ? v63 : v66; // 0x4091e1\n                        uint64_t v68 = v67 + v66; // 0x4091e5\n                        if (v68 < v66) {\n                            goto lab_0x40942e_2;\n                        }\n                        // 0x4091f8\n                        v64 = v68;\n                        int64_t * mem2 = realloc((int64_t *)v61, v64); // 0x409200\n                        if (mem2 == NULL) {\n                            goto lab_0x40942e_2;\n                        }\n                        int64_t v69 = (int64_t)mem2; // 0x409200\n                        int64_t v70 = v62 + v69;\n                        v65 = v69;\n                        dest_mem = (int64_t)memcpy((int64_t *)(v70 + v67), (int64_t *)v70, v60 - (int32_t)v62);\n                    }\n                    int32_t v71 = v65;\n                    int32_t v72 = v64;\n                    int64_t v73 = (int64_t)memcpy((int64_t *)(dest_mem - v63), (int64_t *)v10, len) - 1; // 0x40925d\n                    *(char *)v73 = 47;\n                    v54 = v72;\n                    v55 = v71;\n                    v56 = v11;\n                    v57 = v73;\n                    v58 = v5;\n                    fd2 = fd;\n                    // 0x40928e\n                    v53 = v71;\n                    v49 = v6;\n                    if (closedir(dirp) != 0) {\n                        goto lab_0x409390;\n                    } else {\n                        int64_t v74 = v71;\n                        int64_t v75 = v72;\n                        v47 = v75;\n                        v48 = v74;\n                        v52 = v71;\n                        v51 = v73;\n                        v50 = v74 + v75;\n                        goto lab_0x4092a8;\n                    }\n                }\n                int64_t v76 = (int64_t)*v6; // 0x4093d7\n                v4 = v76;\n                dirp2 = dirp3;\n                v33 = v76;\n                if (dirp3 == 0) {\n                    goto lab_0x409369;\n                } else {\n                    goto lab_0x409361;\n                }\n            }\n        }\n    }\n  lab_0x409388:\n    // 0x409388\n    v53 = v42;\n    v49 = __errno_location();\n    goto lab_0x409390;\n  lab_0x409390:;\n    int64_t v77 = (int64_t)*v49; // 0x409396\n    int64_t v34 = v77; // 0x40939a\n    int32_t * v35 = v49; // 0x40939a\n    int32_t * v36 = v49; // 0x40939a\n    int32_t v37 = v53; // 0x40939a\n    int64_t v39 = v77; // 0x40939a\n    if (a1 != 0) {\n        goto lab_0x409371;\n    } else {\n        goto lab_0x40939c;\n    }\n  lab_0x409371:\n    // 0x409371\n    *v35 = (int32_t)v34;\n    // 0x408fd6\n    return 0;\n  lab_0x40939c:\n    // 0x40939c\n    free((int64_t *)(int64_t)v37);\n    v34 = v39;\n    v35 = v36;\n    goto lab_0x409371;\n  lab_0x4092a8:\n    // 0x4092a8\n    if (v51 == v47 - 1 + v48) {\n        // 0x409417\n        int64_t v78; // 0x408f90\n        int64_t v79 = v78 - 1; // 0x40941c\n        *(char *)v79 = 47;\n    }\n    int64_t * v80 = (int64_t *)v48; // 0x4092d2\n    int32_t v81 = v50 - v51; // 0x4092d2\n    memmove(v80, (int64_t *)v51, v81);\n    int32_t mem3 = a1; // 0x4092dd\n    if (a2 == 0) {\n        // 0x409400\n        mem3 = (int64_t)realloc(v80, v81);\n    }\n    int32_t v82 = mem3;\n    int32_t result2 = v82 == 0 ? v52 : v82;\n    // 0x408fd6\n    return result2;\n  lab_0x409369:\n    // 0x409369\n    v34 = v33;\n    v35 = v6;\n    v36 = v6;\n    v37 = v38;\n    v39 = v33;\n    if (a1 == 0) {\n        goto lab_0x40939c;\n    } else {\n        goto lab_0x409371;\n    }\n  lab_0x409361:\n    // 0x409361\n    closedir((struct __dirstream *)dirp2);\n    v33 = v4;\n    goto lab_0x409369;\n  lab_0x4093cd:\n    // 0x4093cd\n    close(fd);\n    v33 = v40;\n    goto lab_0x409369;\n}\n"
        },
        {
            "funcName": "function_409460",
            "funcStartAddr": "409460",
            "funcEndAddr": "40953f",
            "decompiledFuncCode": "int64_t function_409460(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40946c\n    uint32_t v2 = *v1; // 0x40946c\n    int64_t v3 = a2 & 0xffffffff; // 0x409471\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x409474\n    uint64_t v5 = (int64_t)*v4; // 0x409474\n    int64_t v6; // 0x4094e2\n    if (v3 <= v5) {\n      lab_0x4094dc_2:\n        // 0x4094dc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x409462\n    int64_t v8 = v2; // 0x409460\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4094dc\n        goto lab_0x4094dc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x409498\n    int64_t v17; // 0x4094a6\n    int64_t * v18; // 0x4094c0\n    int64_t * v19; // 0x4094c3\n    int64_t v20; // 0x4094ce\n    int64_t v21; // 0x4094a6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x4094a3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x4094c0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4094d7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4094dc\n            goto lab_0x4094dc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4094dc\n            goto lab_0x4094dc_2;\n        }\n        // 0x409492\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40951b\n    int64_t * v23 = (int64_t *)v22; // 0x409520\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x409523\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x409520\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x409537\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40948d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4094dc\n            goto lab_0x4094dc_2;\n        }\n        // 0x409492\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x4094a3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x4094c0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4094d7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4094dc\n                goto lab_0x4094dc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4094dc\n                goto lab_0x4094dc_2;\n            }\n            // 0x409492\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x409500\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x409520\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x409537\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4094dc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_409540",
            "funcStartAddr": "409540",
            "funcEndAddr": "409b5c",
            "decompiledFuncCode": "int64_t function_409540(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40955f\n    int64_t v2 = *v1; // 0x40955f\n    char * str2 = (char *)v2; // 0x40956c\n    char c = *str2; // 0x40956c\n    int64_t v3 = v2; // 0x409598\n    int64_t v4 = 0; // 0x409540\n    int32_t v5; // 0x409540\n    int64_t v6; // 0x409540\n    int64_t v7; // 0x409540\n    int64_t v8; // 0x409540\n    int64_t v9; // 0x409540\n    int64_t v10; // 0x409540\n    int64_t v11; // 0x409540\n    int64_t v12; // 0x409540\n    int64_t v13; // 0x409540\n    int64_t str3; // 0x409540\n    int64_t v14; // 0x409540\n    int64_t v15; // 0x409540\n    int64_t v16; // 0x409540\n    int64_t v17; // 0x409540\n    int32_t v18; // 0x409540\n    int32_t v19; // 0x409540\n    int32_t v20; // 0x409540\n    int32_t v21; // 0x409540\n    int32_t v22; // 0x409540\n    int32_t v23; // 0x409540\n    int32_t v24; // 0x409540\n    int32_t v25; // 0x409540\n    int32_t v26; // 0x409540\n    int32_t v27; // 0x409540\n    int32_t v28; // 0x409540\n    int32_t v29; // 0x409540\n    int64_t nmemb; // 0x409540\n    int64_t v30; // 0x409540\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40959c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x409598\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4095a8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4095ae\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x409578\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4095dc\n                int64_t v34; // 0x409540\n                int64_t v35; // 0x409540\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4095e5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x409760;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4095f6\n                int64_t v37 = *(int64_t *)v36; // 0x4095fa\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4095d0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4095e5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x409760;\n                        }\n                    }\n                    // 0x4095f6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x409646:\n                    // 0x409646\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4096a0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x409810\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4096a0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4097c0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40966a;\n                                } else {\n                                    // 0x4097cc\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40966a;\n                                    } else {\n                                        // 0x4097da\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40966a;\n                                        } else {\n                                            goto lab_0x4096a0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40966a;\n                            }\n                        }\n                    }\n                }\n              lab_0x4096b1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x409886\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x409a32\n                            flockfile(g39);\n                            int64_t v41 = *v1; // 0x409a52\n                            __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x409a9f\n                            int64_t v43 = (int64_t)g39;\n                            int64_t v44 = v43; // 0x409ab9\n                            int64_t v45; // 0x409abb\n                            if (*(char *)v42 != 0) {\n                                // 0x409abb\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g39;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x409ab3\n                            while (v17 + nmemb != v42) {\n                                // 0x409ab5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x409abb\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g39;\n                                }\n                                // 0x409aa8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x409ae0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g39);\n                            v40 = *v1;\n                        } else {\n                            // 0x409894\n                            __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x4099ef\n                        free((int64_t *)v17);\n                    }\n                    // 0x4098e9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x409900\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4097ae\n                    return 63;\n                }\n                // 0x4096d0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x409754\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x409760:;\n                    int32_t * v49 = (int32_t *)a7; // 0x409770\n                    uint32_t v50 = *v49; // 0x409770\n                    int64_t v51 = v50; // 0x409770\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40977a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x409783\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4099af\n                                __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40995a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4097ae\n                            return 63;\n                        }\n                        // 0x4097f8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x409b0f\n                                    __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x409a0d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x409a20\n                                // 0x4097ae\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40991e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x409932\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40979b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40979e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4097a2\n                    int64_t result = v59; // 0x4097a8\n                    if (v58 != 0) {\n                        // 0x4097aa\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4097ae\n                    return result;\n                }\n            } else {\n                // 0x4095ae\n                v5 = v32;\n            }\n            // break -> 0x4096d5\n            break;\n        }\n    }\n    // 0x4096d5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x4096ed\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4096f7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4097ae\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x409839\n        __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x409726\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x409736\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4096a0:\n    // 0x4096a0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4096a0\n    int64_t v63 = *(int64_t *)v62; // 0x4096a4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x4096b1\n        goto lab_0x4096b1;\n    }\n    goto lab_0x409646;\n  lab_0x40966a:\n    // 0x40966a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x409540\n    int32_t v65; // 0x409540\n    int32_t v66; // 0x409540\n    if (v27 != 0) {\n        goto lab_0x4096a0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x409820\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4096a0;\n            } else {\n                goto lab_0x409691;\n            }\n        } else {\n            // 0x409685\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40997c\n                int64_t v67 = (int64_t)mem; // 0x40997c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4096a0;\n                } else {\n                    // 0x40998f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x409691;\n                }\n            } else {\n                goto lab_0x409691;\n            }\n        }\n    }\n  lab_0x409691:\n    // 0x409691\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4096a0;\n}\n"
        },
        {
            "funcName": "function_409b60",
            "funcStartAddr": "409b60",
            "funcEndAddr": "40a126",
            "decompiledFuncCode": "int64_t function_409b60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x409b81\n    if (v3 < 1) {\n        // 0x409d3e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x409b7d\n    int32_t v5 = *(int32_t *)a7; // 0x409b89\n    uint64_t v6 = a1 & 0xffffffff; // 0x409b8b\n    int64_t v7 = v2; // 0x409b90\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x409b93\n    *v8 = 0;\n    int64_t v9; // 0x409b60\n    int64_t v10; // 0x409b60\n    int64_t v11; // 0x409b60\n    int64_t v12; // 0x409b60\n    int64_t str; // 0x409b60\n    int64_t v13; // 0x409b60\n    int64_t v14; // 0x409b60\n    int64_t v15; // 0x409b60\n    int64_t v16; // 0x409b60\n    int64_t v17; // 0x409b60\n    int32_t v18; // 0x409b60\n    char v19; // 0x409b60\n    if (v5 == 0) {\n        // 0x409d78\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x409baa;\n    } else {\n        // 0x409ba3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x409bf0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x409bf3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x409cb8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x409c06\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x409c16\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x409ccc;\n                } else {\n                    goto lab_0x409c28;\n                }\n            }\n        } else {\n            goto lab_0x409baa;\n        }\n    }\n  lab_0x409baa:\n    // 0x409baa\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x409bb0\n    *v24 = 0;\n    int64_t v25; // 0x409b60\n    int64_t v26; // 0x409b60\n    int64_t v27; // 0x409b60\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x409ca0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x409cad;\n        }\n        case 43: {\n            // 0x409fb0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x409cad;\n        }\n        default: {\n            // 0x409bcc\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x409f2f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x40a048\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x409cad;\n                } else {\n                    // 0x409f3d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x409bda;\n                }\n            } else {\n                goto lab_0x409bda;\n            }\n        }\n    }\n  lab_0x409cb8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x409cbf\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x409c28;\n    } else {\n        goto lab_0x409ccc;\n    }\n  lab_0x409bda:\n    // 0x409bda\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x409cad;\n  lab_0x409cad:\n    // 0x409cad\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x409cb8;\n  lab_0x409c28:;\n    uint32_t v30 = *(int32_t *)a7; // 0x409c28\n    int64_t v31 = v30; // 0x409c28\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x409c2a\n    if ((int64_t)*v32 > v31) {\n        // 0x409c2f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x409c32\n    if (*v33 > v30) {\n        // 0x409c37\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x409c3a\n    int64_t v35 = v31; // 0x409c3e\n    int64_t v36 = v15; // 0x409c3e\n    int64_t v37; // 0x409b60\n    int64_t v38; // 0x409b60\n    int64_t v39; // 0x409b60\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x409da8\n        int64_t v41 = v40; // 0x409da8\n        v2 = v41;\n        int64_t v42; // 0x409b60\n        if (*v33 == v40) {\n            // 0x409f90\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x409f98\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x409db4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x409db8\n                function_409460(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x409dc8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x409dd1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x409dda\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x409df1\n            int64_t v47 = v45 & 0xffffffff; // 0x409df5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x409dfe\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x409e04\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x409e06;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x409de0\n            int64_t v49 = v48 & 0xffffffff; // 0x409de0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x409df1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x409dfe\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x409e04\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x409e06;\n                    }\n                }\n                // 0x409de0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x409fa8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x409e06;\n    } else {\n        goto lab_0x409c44;\n    }\n  lab_0x409ccc:\n    // 0x409ccc\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x409ccf\n    int64_t v51 = v12; // 0x409ccf\n    int64_t v52 = v14; // 0x409ccf\n    if (*(char *)v10 == 0) {\n        goto lab_0x409c28;\n    } else {\n        goto lab_0x409cd5;\n    }\n  lab_0x409c44:;\n    int32_t v53 = v35; // 0x409c44\n    int64_t v54; // 0x409b60\n    int64_t v55; // 0x409b60\n    int64_t v56; // 0x409b60\n    int64_t v57; // 0x409b60\n    int64_t v58; // 0x409b60\n    int64_t v59; // 0x409b60\n    char * v60; // 0x409b60\n    int64_t v61; // 0x409b60\n    int64_t v62; // 0x409c59\n    int64_t v63; // 0x409b60\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x409d93\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x409d96;\n    } else {\n        // 0x409c4c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x409b60\n        int64_t v66 = v65 ? -1 : 1; // 0x409c60\n        int64_t v67 = (int64_t)\"--\"; // 0x409b60\n        int64_t v68 = v62; // 0x409b60\n        int64_t v69 = 3; // 0x409c60\n        unsigned char v70 = *(char *)v68; // 0x409c60\n        char v71 = *(char *)v67; // 0x409c60\n        char v72 = v71; // 0x409c60\n        bool v73 = false; // 0x409c60\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x409d50\n            if (*(char *)v62 == 45) {\n                // 0x409e10\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x409e10\n                if (c == 0) {\n                    goto lab_0x409d5a;\n                } else {\n                    // 0x409e1d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x409ea0;\n                    } else {\n                        if (c == 45) {\n                            // 0x40a083\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x409ef5;\n                        } else {\n                            // 0x409e2e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x409ea0;\n                            } else {\n                                // 0x409e33\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x409e54;\n                                } else {\n                                    // 0x409e3a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x409ea0;\n                                    } else {\n                                        goto lab_0x409e54;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x409d5a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x409c70\n            v2 = v75;\n            int32_t v76 = *v32; // 0x409c73\n            int64_t v77 = v35 + 1; // 0x409c76\n            int32_t v78 = v77; // 0x409c79\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x409fe0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x409c87\n                    function_409460(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x409c95\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x409d96;\n        }\n    }\n  lab_0x409cd5:;\n    // 0x409cd5\n    int64_t v79; // bp-104, 0x409b60\n    int64_t v80 = &v79; // 0x409b6a\n    int64_t v81 = v50 + 1; // 0x409cd5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x409cdc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x409ce1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x409ce5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x409ce9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x409cf1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x409cf6\n    int32_t c2 = v84; // 0x409cf6\n    char * found_char_pos = strchr(str2, c2); // 0x409cf6\n    int64_t v87 = *v82; // 0x409cfb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x409d05\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x409d10\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x40a000\n            __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x409fcd\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x409d3e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x409cf6\n    char v91 = *(char *)(v90 + 1); // 0x409d2b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x409ce5\n        if (v91 != 58) {\n            // 0x409d3e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x409f54\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x40a058\n                *v8 = 0;\n            } else {\n                // 0x40a03c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x409f7e\n            *v83 = 0;\n            // 0x409d3e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x409f5e\n        if (v93 != 0) {\n            // 0x409ff0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x409f7e\n            *v83 = 0;\n            // 0x409d3e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x409f71\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x409f7e\n            *v83 = 0;\n            // 0x409d3e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40a0ba\n            __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40a06a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x40a071\n        // 0x409f7e\n        *v83 = 0;\n        // 0x409d3e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x409ec9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x409ecb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x40a0f0\n                __fprintf_chk(g39, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x40a0a1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x40a0a8\n            // 0x409d3e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x409ed6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x409eda\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x409ef5;\n  lab_0x409e06:\n    // 0x409e06\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x409c44;\n  lab_0x409ef5:;\n    int64_t v99 = function_409540(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x409f13\n    // 0x409d3e\n    return v99 & 0xffffffff;\n  lab_0x409d96:;\n    int32_t v100 = v55; // 0x409d96\n    if (v100 != (int32_t)v59) {\n        // 0x409d9a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x409d3e\n    return 0xffffffff;\n  lab_0x409d5a:\n    // 0x409d5a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x409d61\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x409d3e\n    return v99 & 0xffffffff;\n  lab_0x409ea0:\n    // 0x409ea0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x409cd5;\n  lab_0x409e54:\n    // 0x409e54\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_409540(v6, a2, str, a4, a5, v57, v1, v11, &g15); // 0x409e7a\n    if ((int32_t)v101 != -1) {\n        // 0x409d3e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x409e8f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x409ea0;\n}\n"
        },
        {
            "funcName": "function_40a130",
            "funcStartAddr": "40a130",
            "funcEndAddr": "40a186",
            "decompiledFuncCode": "int64_t function_40a130(int64_t a1) {\n    // 0x40a130\n    *(int32_t *)&g61 = g33;\n    *(int32_t *)&g62 = g32;\n    int64_t v1; // 0x40a130\n    int64_t result = function_409b60(v1, v1, v1, v1, v1, v1, &g61, a1 & 0xffffffff); // 0x40a156\n    g33 = *(int32_t *)&g61;\n    g66 = (char *)g64;\n    *(int32_t *)&g31 = g63;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a190",
            "funcStartAddr": "40a190",
            "funcEndAddr": "40a1a8",
            "decompiledFuncCode": "int64_t function_40a190(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40a190\n    return function_40a130(1);\n}\n"
        },
        {
            "funcName": "function_40a1b0",
            "funcStartAddr": "40a1b0",
            "funcEndAddr": "40a1c3",
            "decompiledFuncCode": "int64_t function_40a1b0(int64_t a1, int64_t a2, char * a3, char (**a4)[7], int32_t a5, int64_t a6) {\n    // 0x40a1b0\n    return function_40a130(0);\n}\n"
        },
        {
            "funcName": "function_40a1d0",
            "funcStartAddr": "40a1d0",
            "funcEndAddr": "40a1e5",
            "decompiledFuncCode": "int64_t function_40a1d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40a1d0\n    return function_409b60(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40a1f0",
            "funcStartAddr": "40a1f0",
            "funcEndAddr": "40a206",
            "decompiledFuncCode": "int64_t function_40a1f0(void) {\n    // 0x40a1f0\n    return function_40a130(0);\n}\n"
        },
        {
            "funcName": "function_40a210",
            "funcStartAddr": "40a210",
            "funcEndAddr": "40a228",
            "decompiledFuncCode": "int64_t function_40a210(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40a210\n    return function_409b60(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40a230",
            "funcStartAddr": "40a230",
            "funcEndAddr": "40a2aa",
            "decompiledFuncCode": "int64_t function_40a230(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40a23b\n    int64_t v2 = (int64_t)&g16; // 0x40a23b\n    int32_t * pwc; // 0x40a230\n    int64_t v3; // 0x40a230\n    int64_t n; // 0x40a230\n    if (a2 == 0) {\n        goto lab_0x40a282;\n    } else {\n        // 0x40a23d\n        if (a3 == 0) {\n            // 0x40a268\n            return -2;\n        }\n        // 0x40a249\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x40a282;\n        } else {\n            goto lab_0x40a254;\n        }\n    }\n  lab_0x40a282:\n    // 0x40a282\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x40a230\n    pwc = (int32_t *)&v4;\n    goto lab_0x40a254;\n  lab_0x40a254:;\n    char * wstr = (char *)v3; // 0x40a25a\n    int64_t ps; // 0x40a230\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40a25a\n    int64_t result = v5; // 0x40a25a\n    if (v5 < 0xfffffffe) {\n        // 0x40a268\n        return result;\n    }\n    int64_t result2 = result; // 0x40a299\n    if ((char)function_40a790(0, v3) == 0) {\n        // 0x40a29b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x40a268\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a2b0",
            "funcStartAddr": "40a2b0",
            "funcEndAddr": "40a39f",
            "decompiledFuncCode": "int64_t function_40a2b0(int64_t path, uint64_t a2) {\n    int64_t size = a2 >= 1025 ? 1025 : a2 + 1; // 0x40a2e9\n    int64_t * mem = malloc((int32_t)size); // 0x40a2f3\n    int64_t result = 0; // 0x40a2fe\n    while (mem != NULL) {\n        uint64_t buf_size = size;\n        int64_t * buf = mem;\n        int32_t v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size); // 0x40a309\n        if (v1 < 0) {\n            // 0x40a368\n            if (*__errno_location() != 34) {\n                // 0x40a372\n                free(buf);\n                result = 0;\n                return result;\n            }\n        }\n        uint64_t v2 = (int64_t)v1; // 0x40a309\n        int64_t v3; // 0x40a2b0\n        if (buf_size > v2) {\n            // 0x40a380\n            v3 = (int64_t)buf;\n            *(char *)(v2 + v3) = 0;\n            result = v3;\n            return result;\n        }\n        // 0x40a31b\n        free(buf);\n        while (buf_size <= 0x3fffffffffffffff) {\n            int64_t size2 = 2 * buf_size; // 0x40a328\n            int64_t * mem2 = malloc((int32_t)size2); // 0x40a32e\n            if (mem2 == NULL) {\n                // 0x40a33b\n                result = (int64_t)mem2;\n                return result;\n            }\n            buf_size = size2;\n            buf = mem2;\n            v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size);\n            if (v1 < 0) {\n                // 0x40a368\n                if (*__errno_location() != 34) {\n                    // 0x40a372\n                    free(buf);\n                    result = 0;\n                    return result;\n                }\n            }\n            // 0x40a316\n            v2 = (int64_t)v1;\n            if (buf_size > v2) {\n                // 0x40a380\n                v3 = (int64_t)buf;\n                *(char *)(v2 + v3) = 0;\n                result = v3;\n                return result;\n            }\n            // 0x40a31b\n            free(buf);\n        }\n        // 0x40a350\n        size = 0x7fffffffffffffff;\n        if (buf_size > 0x7ffffffffffffffe) {\n            // 0x40a390\n            *__errno_location() = 12;\n            result = 0;\n            return result;\n        }\n        mem = malloc((int32_t)size);\n        result = 0;\n    }\n  lab_0x40a33b_2:\n    // 0x40a33b\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a3a0",
            "funcStartAddr": "40a3a0",
            "funcEndAddr": "40a3aa",
            "decompiledFuncCode": "int64_t function_40a3a0(void) {\n    // 0x40a3a0\n    return function_4032b0(1);\n}\n"
        },
        {
            "funcName": "function_40a3b0",
            "funcStartAddr": "40a3b0",
            "funcEndAddr": "40a4c6",
            "decompiledFuncCode": "int64_t function_40a3b0(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x40a3d1\n    int32_t len = strlen(str); // 0x40a3d1\n    if (a2 == 0) {\n        // 0x40a49d\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x40a437\n    int64_t v4 = a3; // 0x40a3b0\n    int64_t v5 = a2; // 0x40a43e\n    int64_t str4; // 0x40a3b0\n    int64_t v6; // 0x40a3b0\n    int32_t v7; // 0x40a3b0\n    int32_t v8; // 0x40a3b0\n    int32_t v9; // 0x40a3b0\n    int64_t v10; // 0x40a3b0\n    int64_t result; // 0x40a3b0\n    int32_t v11; // 0x40a433\n    char * str2; // 0x40a452\n    while (true) {\n        // 0x40a447\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x40a45b\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x40a49d\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x40a46f\n                break;\n            }\n            // 0x40a400\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x40a40e\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x40a437\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x40a473\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x40a47a\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x40a447\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x40a447\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x40a45b\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x40a49d\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x40a46f\n                    break;\n                }\n                // 0x40a400\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x40a40e\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x40a437\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x40a46f\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x40a488:\n    // 0x40a49d\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_40a4d0",
            "funcStartAddr": "40a4d0",
            "funcEndAddr": "40a541",
            "decompiledFuncCode": "int64_t function_40a4d0(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x40a4d0\n    if (a3 == -1) {\n        // 0x40a530\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x40a4e5\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x40a4f4\n    function_407e60(1, a1);\n    function_407b50(0, 8, a2);\n    error(0, 0, format);\n    return &g68;\n}\n"
        },
        {
            "funcName": "function_40a550",
            "funcStartAddr": "40a550",
            "funcEndAddr": "40a668",
            "decompiledFuncCode": "int64_t function_40a550(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x40a57d\n    fputs_unlocked(v1, g39);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x40a5f0\n        int64_t v5; // 0x40a5f7\n        int64_t v6; // 0x40a617\n        while (v3 != 0) {\n            // 0x40a5db\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x40a5a0\n                break;\n            }\n            // 0x40a5ed\n            v4 = v3 + 1;\n            v5 = function_407e80(v2);\n            __fprintf_chk(g39, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x40a620\n                goto lab_0x40a620;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x40a5a3\n        int64_t v8 = function_407e80(v2); // 0x40a5ad\n        __fprintf_chk(g39, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x40a5cd\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x40a5db\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x40a5a0\n                    break;\n                }\n                // 0x40a5ed\n                v4 = v3 + 1;\n                v5 = function_407e80(v2);\n                __fprintf_chk(g39, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x40a620\n                    goto lab_0x40a620;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x40a5a0\n            v7 = v3 + 1;\n            v8 = function_407e80(v2);\n            __fprintf_chk(g39, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x40a620:;\n    int64_t v10 = (int64_t)g39; // 0x40a620\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x40a627\n    uint64_t result = *v11; // 0x40a627\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x40a650\n        return __overflow(g39, 10);\n    }\n    // 0x40a631\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a670",
            "funcStartAddr": "40a670",
            "funcEndAddr": "40a6e0",
            "decompiledFuncCode": "int64_t function_40a670(int64_t a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_40a3b0(a2, v2, v1, a5); // 0x40a69c\n    int64_t result = v3; // 0x40a6a4\n    if (v3 < 0) {\n        // 0x40a6b8\n        function_40a4d0(a1, a2, v3);\n        function_40a550(v2, v1, a5);\n        result = -1;\n    }\n    // 0x40a6a6\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a6e0",
            "funcStartAddr": "40a6e0",
            "funcEndAddr": "40a72d",
            "decompiledFuncCode": "int64_t function_40a6e0(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x40a6e0\n    if (result == 0) {\n        // 0x40a721\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x40a718\n    int32_t n = a4; // 0x40a718\n    int64_t v1 = result; // 0x40a71f\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x40a721\n        return result;\n    }\n    int64_t str3 = str2; // 0x40a71f\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x40a700\n    int64_t result2 = 0; // 0x40a70d\n    while (v2 != 0) {\n        // 0x40a70f\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x40a721\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x40a721\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a730",
            "funcStartAddr": "40a730",
            "funcEndAddr": "40a78d",
            "decompiledFuncCode": "int64_t function_40a730(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x40a737\n    int64_t v2; // 0x40a730\n    int64_t result = function_40b9a0(a1, v2); // 0x40a748\n    if ((v2 & 32) != 0) {\n        // 0x40a770\n        if ((int32_t)result == 0) {\n            // 0x40a774\n            *__errno_location() = 0;\n        }\n        // 0x40a76a\n        return 0xffffffff;\n    }\n    // 0x40a751\n    if ((int32_t)result == 0) {\n        // 0x40a76a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x40a758\n    if (v1 == 0) {\n        // 0x40a75a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40a76a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a790",
            "funcStartAddr": "40a790",
            "funcEndAddr": "40a7ee",
            "decompiledFuncCode": "int64_t function_40a790(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x40a796\n    if (locale == NULL) {\n        // 0x40a7c3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x40a796\n    bool v2; // 0x40a790\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g17; // 0x40a790\n    int64_t v5 = v1; // 0x40a790\n    int64_t v6 = 2; // 0x40a7b5\n    unsigned char v7 = *(char *)v5; // 0x40a7b5\n    char v8 = *(char *)v4; // 0x40a7b5\n    char v9 = v8; // 0x40a7b5\n    bool v10 = false; // 0x40a7b5\n    while (v7 == v8) {\n        // 0x40a7a8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x40a7c1\n    int64_t v13 = v1; // 0x40a7c1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x40a7c3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x40a7c1\n    unsigned char v15 = *(char *)v13; // 0x40a7dd\n    char v16 = *(char *)v12; // 0x40a7dd\n    char v17 = v16; // 0x40a7dd\n    bool v18 = false; // 0x40a7dd\n    while (v15 == v16) {\n        // 0x40a7d0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_40a7f0",
            "funcStartAddr": "40a7f0",
            "funcEndAddr": "40a826",
            "decompiledFuncCode": "int64_t function_40a7f0(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x40a7f6\n    if (v1 == 0) {\n        // 0x40a820\n        return 0;\n    }\n    uint64_t v3 = 0;\n    v2++;\n    int64_t v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v1; // 0x40a808\n    char v5 = *(char *)v2; // 0x40a80b\n    while (v5 != 0) {\n        // 0x40a800\n        v3 = v4;\n        v2++;\n        v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v5;\n        v5 = *(char *)v2;\n    }\n    // 0x40a813\n    return v4 % a2;\n}\n"
        },
        {
            "funcName": "function_40a830",
            "funcStartAddr": "40a830",
            "funcEndAddr": "40ad92",
            "decompiledFuncCode": "int64_t function_40a830(void) {\n    char * v1 = nl_langinfo(14); // 0x40a846\n    char * v2 = g65; // 0x40a84b\n    char * v3; // 0x40a830\n    int64_t v4; // 0x40a830\n    int64_t v5; // 0x40a830\n    int64_t v6; // 0x40a830\n    int64_t v7; // 0x40a830\n    int32_t size; // 0x40a830\n    int32_t size2; // 0x40a830\n    int32_t len; // 0x40a902\n    int64_t v8; // 0x40a902\n    char * env_val; // 0x40a8ed\n    if (v2 == NULL) {\n        // 0x40a8e8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x40a955;\n        } else {\n            // 0x40a8fa\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x40a955;\n            } else {\n                // 0x40a8ff\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40a8ed\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40ad85\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x40a955;\n                    } else {\n                        // 0x40acf9\n                        size2 = len + 14;\n                        goto lab_0x40a91b;\n                    }\n                } else {\n                    goto lab_0x40a91b;\n                }\n            }\n        }\n    } else {\n        // 0x40a830\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40a86a;\n    }\n  lab_0x40ab9c:;\n    // 0x40ab9c\n    struct _IO_FILE * stream; // 0x40a9db\n    int32_t v10 = __uflow(stream); // 0x40ab9f\n    int64_t v11; // 0x40a830\n    int64_t v12 = v11; // 0x40aba9\n    int64_t v13; // 0x40a830\n    int64_t v14 = v13; // 0x40aba9\n    int32_t v15 = v10; // 0x40aba9\n    int64_t v16; // 0x40a830\n    int64_t v17 = v16; // 0x40aba9\n    int64_t v18 = v11; // 0x40aba9\n    int64_t v19 = v13; // 0x40aba9\n    int64_t v20 = v16; // 0x40aba9\n    if (v10 == -1) {\n        // break -> 0x40abaf\n        goto lab_0x40abaf;\n    }\n    goto lab_0x40aa29;\n  lab_0x40aa1e:;\n    // 0x40aa1e\n    int64_t v90; // 0x40a830\n    int64_t * v32; // 0x40aa10\n    *v32 = v90 + 1;\n    int64_t v89; // 0x40a830\n    v12 = v89;\n    int64_t v91; // 0x40a830\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x40a830\n    v17 = v92;\n    goto lab_0x40aa29;\n  lab_0x40aa29:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x40a830\n    int32_t v25; // bp-120, 0x40a830\n    int32_t v26; // bp-184, 0x40a830\n    int64_t v27; // 0x40a9db\n    int64_t v28; // 0x40a9f8\n    int64_t v29; // 0x40a9fd\n    int64_t * v30; // 0x40aa14\n    switch (c) {\n        case 32: {\n            goto lab_0x40aa10;\n        }\n        case 10: {\n            goto lab_0x40aa10;\n        }\n        case 9: {\n            goto lab_0x40aa10;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x40ac01\n            int32_t v33; // 0x40a830\n            char v34; // 0x40a830\n            int32_t v35; // 0x40ac0e\n            if (v31 < *v30) {\n                // 0x40abe0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40ac0b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x40ac01\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x40abe0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40ac0b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x40abf0\n                v36 = v33;\n            }\n            // 0x40acdf\n            if (v36 == -1) {\n                // break -> 0x40abaf\n                break;\n            }\n            goto lab_0x40aa10;\n        }\n        default: {\n            // 0x40aa3f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40abaf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x40aa68\n            int64_t v39 = v37 + 4; // 0x40aa6a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x40aa76\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x40aa78\n            while (v41 == 0) {\n                // 0x40aa68\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x40aa96\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x40aaa2\n            int64_t v45 = v43 + 4; // 0x40aaa4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x40aab0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x40aab2\n            while (v47 == 0) {\n                // 0x40aaa2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40aa9f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x40aac8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x40aad8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40aadc\n            int64_t v52 = v51 + v48; // 0x40aae5\n            int64_t * mem; // 0x40a830\n            int64_t v53; // 0x40a830\n            int64_t v54; // 0x40a830\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40ac1b\n                int64_t v56 = v55 + 3; // 0x40ac27\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x40ab01\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x40ab10\n            if (mem == NULL) {\n                // 0x40ad3c\n                free((int64_t *)v21);\n                function_40b9a0(v27, v53);\n                v24 = (int64_t)&g16;\n                goto lab_0x40a9b4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x40ab28\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x40ab32\n            uint32_t v62 = (int32_t)v59; // 0x40ab35\n            int64_t v63; // 0x40a830\n            if (v62 >= 8) {\n                // 0x40ac44\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40ac5e\n                int64_t v66 = v61 - v65; // 0x40ac62\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40ac6d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40ac7e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40ac7e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40ac7b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40ad0f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x40ab47\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40ab4b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40ab5b\n            int64_t v74 = v60 - 1; // 0x40ab5f\n            uint32_t v75 = (int32_t)v73; // 0x40ab64\n            int64_t v76; // 0x40a830\n            if (v75 >= 8) {\n                // 0x40ac92\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40ac9c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40acac\n                int64_t v80 = v74 - v79; // 0x40acb0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40acbb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40accb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x40acc9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x40ad26\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40ad2e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x40ab76\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40ab7a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x40ad73\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40ab8e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40aa1e;\n            } else {\n                goto lab_0x40ab9c;\n            }\n        }\n    }\n  lab_0x40aa10:;\n    int64_t v93 = v23; // 0x40a830\n    int64_t v94 = v22; // 0x40a830\n    int64_t v95 = v21; // 0x40a830\n    goto lab_0x40aa10_2;\n  lab_0x40a955:;\n    int64_t * mem3 = malloc(size); // 0x40a955\n    int64_t v97 = (int64_t)&g16; // 0x40a960\n    int64_t v98; // 0x40a830\n    int64_t path; // 0x40a830\n    if (mem3 == NULL) {\n        goto lab_0x40a932;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x40a955\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x40a976;\n    }\n  lab_0x40a86a:;\n    int64_t str = v1 == NULL ? (int64_t)&g16 : (int64_t)v1; // 0x40a85d\n    char v100 = *v3; // 0x40a86a\n    int64_t v101; // 0x40a830\n    if (v100 == 0) {\n        // 0x40a8c4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x40a830\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x40a830\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x40a8b0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x40a8b7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x40a880\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40a88d\n        char v107 = *(char *)v106; // 0x40a892\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x40a8c4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40a89b\n    v104 = v103 + 1;\n  lab_0x40a8b7:\n    // 0x40a8c4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x40a932:;\n    char * v108 = (char *)v97;\n    g65 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40a86a;\n  lab_0x40a976:;\n    int64_t v109 = v98 + path; // 0x40a976\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x40a9a2\n    v24 = (int64_t)&g16;\n    if (fd >= 0) {\n        // 0x40a9d1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40ad02\n            close(fd);\n            v24 = (int64_t)&g16;\n        } else {\n            // 0x40a9f5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x40aa10_2:;\n                uint64_t v96 = *v32; // 0x40aa10\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40ab9c;\n                } else {\n                    goto lab_0x40aa1e;\n                }\n            }\n          lab_0x40abaf:\n            // 0x40abaf\n            function_40b9a0(v27, v19);\n            v24 = (int64_t)&g16;\n            if (v18 != 0) {\n                // 0x40abce\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x40a9b4;\n  lab_0x40a91b:;\n    int64_t * mem4 = malloc(size2); // 0x40a91b\n    v97 = (int64_t)&g16;\n    if (mem4 != NULL) {\n        // 0x40a9c1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x40a976;\n    } else {\n        goto lab_0x40a932;\n    }\n  lab_0x40a9b4:\n    // 0x40a9b4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x40a932;\n}\n"
        },
        {
            "funcName": "function_40ada0",
            "funcStartAddr": "40ada0",
            "funcEndAddr": "40adc3",
            "decompiledFuncCode": "int64_t function_40ada0(int64_t a1) {\n    int64_t result = function_408a50(24); // 0x40ada9\n    *(int64_t *)result = a1;\n    *(int64_t *)(result + 16) = 0;\n    *(int64_t *)(result + 8) = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40add0",
            "funcStartAddr": "40add0",
            "funcEndAddr": "40adff",
            "decompiledFuncCode": "int64_t function_40add0(void) {\n    // 0x40add0\n    int64_t v1; // 0x40add0\n    int64_t v2 = function_40aff0(v1, v1, v1); // 0x40add1\n    int64_t result = 0; // 0x40adde\n    if (v2 != 0) {\n        // 0x40ade0\n        result = function_408a50(24);\n        *(int64_t *)result = v2;\n        *(int64_t *)(result + 16) = 0;\n        *(int64_t *)(result + 8) = 0;\n    }\n    // 0x40adfd\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ae00",
            "funcStartAddr": "40ae00",
            "funcEndAddr": "40ae04",
            "decompiledFuncCode": "int64_t function_40ae00(int64_t result) {\n    // 0x40ae00\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ae10",
            "funcStartAddr": "40ae10",
            "funcEndAddr": "40af05",
            "decompiledFuncCode": "int64_t function_40ae10(int64_t a1, uint64_t a2) {\n    uint64_t v1 = a2 + 1; // 0x40ae17\n    int64_t * v2 = (int64_t *)(a1 + 8); // 0x40ae2b\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x40ae2f\n    int64_t v4 = *v3; // 0x40ae33\n    int64_t result = *v2; // 0x40ae33\n    int64_t v5; // 0x40ae10\n    while (true) {\n        int64_t v6 = result;\n        int64_t v7 = v4;\n        int64_t v8 = v7; // 0x40ae70\n        int64_t v9; // 0x40ae10\n        int64_t v10; // 0x40ae10\n        if (v7 >= a2) {\n            // 0x40ae38\n            v10 = v7;\n            v9 = v6;\n            v5 = v6;\n            if (v7 == a2) {\n                // break -> 0x40aecf\n                break;\n            }\n        } else {\n            int64_t v11 = 1; // 0x40ae84\n            int64_t v12 = 256 * v8 | 255; // 0x40ae88\n            v8 = v12;\n            int64_t v13 = v11; // 0x40ae91\n            while (v12 < a2) {\n                // 0x40ae80\n                v11 = v13 + 1;\n                v12 = 256 * v8 | 255;\n                v8 = v12;\n                v13 = v11;\n            }\n            // 0x40ae93\n            int64_t v14; // bp-64, 0x40ae10\n            function_40b300(a1, &v14, v11);\n            int64_t v15 = &v14; // 0x40aea5\n            int64_t v16 = 256 * v7 | 255; // 0x40aeb7\n            int64_t v17 = 256 * v6 | (int64_t)*(char *)v15; // 0x40aebe\n            v15++;\n            int64_t v18 = v16; // 0x40aec4\n            int64_t v19 = v17; // 0x40aec4\n            while (v16 < a2) {\n                // 0x40aea8\n                v16 = 256 * v18 | 255;\n                v17 = 256 * v19 | (int64_t)*(char *)v15;\n                v15++;\n                v18 = v16;\n                v19 = v17;\n            }\n            // 0x40aec6\n            v10 = v16;\n            v9 = v17;\n            v5 = v17;\n            if (v16 == a2) {\n                // break -> 0x40aecf\n                break;\n            }\n        }\n        uint64_t v20 = v9;\n        uint64_t v21 = v10 - a2; // 0x40ae46\n        uint64_t v22 = v21 % v1;\n        result = v20 % v1;\n        v4 = v22 - 1;\n        if (v20 <= v10 - v22) {\n            // 0x40aef8\n            *v2 = v20 / v1;\n            *v3 = v21 / v1;\n            return result;\n        }\n    }\n    // 0x40aecf\n    *v3 = 0;\n    *v2 = 0;\n    result = v5;\n  lab_0x40aedf:\n    // 0x40aedf\n    return result;\n}\n"
        },
        {
            "funcName": "function_40af10",
            "funcStartAddr": "40af10",
            "funcEndAddr": "40af2e",
            "decompiledFuncCode": "int64_t function_40af10(int64_t a1) {\n    // 0x40af10\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return &g68;\n}\n"
        },
        {
            "funcName": "function_40af30",
            "funcStartAddr": "40af30",
            "funcEndAddr": "40af81",
            "decompiledFuncCode": "int64_t function_40af30(int64_t a1) {\n    int64_t v1 = function_40b460(a1); // 0x40af40\n    int32_t * v2 = __errno_location(); // 0x40af48\n    __explicit_bzero_chk(a1, 24, -1);\n    free((int64_t *)a1);\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40af90",
            "funcStartAddr": "40af90",
            "funcEndAddr": "40afed",
            "decompiledFuncCode": "int64_t function_40af90(int64_t a1) {\n    // 0x40af90\n    function_407e80(a1);\n    int32_t * err_num = __errno_location(); // 0x40afa7\n    char * format; // 0x40af90\n    if (*err_num == 0) {\n        // 0x40afdf\n        format = dcgettext(NULL, \"%s: end of file\", 5);\n    } else {\n        // 0x40afb9\n        format = dcgettext(NULL, \"%s: read error\", 5);\n    }\n    // 0x40afc5\n    error(g25, *err_num, format);\n    return &g68;\n}\n"
        },
        {
            "funcName": "function_40aff0",
            "funcStartAddr": "40aff0",
            "funcEndAddr": "40b2df",
            "decompiledFuncCode": "int64_t function_40aff0(int64_t a1, uint64_t a2, int64_t a3) {\n    if (a2 == 0) {\n        int64_t result = function_408a50(0x1038); // 0x40b10d\n        *(int64_t *)result = 0;\n        *(int64_t *)(result + 8) = 0x40af90;\n        *(int64_t *)(result + 16) = 0;\n        // 0x40b062\n        return result;\n    }\n    if (a1 != 0) {\n        int64_t stream = function_40ba20(a1, \"rb\"); // 0x40b017\n        int64_t result2 = 0; // 0x40b022\n        if (stream != 0) {\n            // 0x40b028\n            result2 = function_408a50(0x1038);\n            *(int64_t *)result2 = stream;\n            int64_t size = a2 < 0x1000 ? a2 : 0x1000; // 0x40b044\n            *(int64_t *)(result2 + 8) = 0x40af90;\n            *(int64_t *)(result2 + 16) = a1;\n            setvbuf((struct _IO_FILE *)stream, (char *)(result2 + 24), 0, (int32_t)size);\n        }\n        // 0x40b062\n        return result2;\n    }\n    int64_t result3 = function_408a50(0x1038); // 0x40b07d\n    *(int64_t *)result3 = 0;\n    int64_t v1 = result3 + 32; // 0x40b093\n    *(int64_t *)(result3 + 8) = 0x40af90;\n    *(int64_t *)(result3 + 16) = 0;\n    *(int64_t *)(result3 + 24) = 0;\n    int32_t fd = open(\"/dev/urandom\", O_RDONLY); // 0x40b0b1\n    int64_t v2; // 0x40aff0\n    int128_t pid2; // bp-72, 0x40aff0\n    if (fd < 0) {\n        // 0x40b138\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_movups(*(int128_t *)v1, __asm_movdqa(0));\n        int32_t pid = getpid(); // 0x40b157\n        pid2 = pid;\n        *(int32_t *)(result3 + 48) = pid;\n        v2 = 20;\n    } else {\n        int32_t v3 = __read_chk(fd, (int64_t *)v1, (int32_t)(a2 < 2048 ? a2 : 2048), 0x1018); // 0x40b0db\n        close(fd);\n        if (v3 >= 2048) {\n            // 0x40b0f8\n            function_40b760(v1);\n            // 0x40b062\n            return result3;\n        }\n        int64_t v4 = v3 > 0 ? v3 : 0;\n        uint64_t v5 = 2048 - v4; // 0x40b266\n        int64_t v6 = v5 < 16 ? v5 : 16; // 0x40b272\n        uint64_t v7 = v6 + v4; // 0x40b278\n        gettimeofday((struct timeval *)&pid2, NULL);\n        __asm_rep_movsb_memcpy((char *)(v1 + v4), (char *)&pid2, v6);\n        if (v7 > 2047) {\n            // 0x40b0f8\n            function_40b760(v1);\n            // 0x40b062\n            return result3;\n        }\n        uint64_t v8 = 2048 - v7; // 0x40b2a1\n        int64_t v9 = v8 < 4 ? v8 : 4; // 0x40b2ad\n        pid2 = getpid();\n        int64_t v10 = v9 + v7; // 0x40b2c5\n        __asm_rep_movsb_memcpy((char *)(v7 + v1), (char *)&pid2, v9);\n        v2 = v10;\n        if (v10 >= 2048) {\n            // 0x40b0f8\n            function_40b760(v1);\n            // 0x40b062\n            return result3;\n        }\n    }\n    int64_t v11 = &pid2;\n    uint64_t v12 = 2048 - v2; // 0x40b16d\n    int64_t v13 = v12 < 4 ? v12 : 4; // 0x40b174\n    pid2 = getppid();\n    if (v13 != 0) {\n        int64_t v14 = 0;\n        int64_t v15 = v14 + 1; // 0x40b190\n        *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        while ((int32_t)v15 < (int32_t)v13) {\n            // 0x40b18e\n            v14 = v15 & 0xffffffff;\n            v15 = v14 + 1;\n            *(char *)(v2 + v1 + v14) = *(char *)(v14 + v11);\n        }\n    }\n    uint64_t v16 = v13 + v2; // 0x40b19f\n    if (v16 >= 2048) {\n        // 0x40b0f8\n        function_40b760(v1);\n        // 0x40b062\n        return result3;\n    }\n    uint64_t v17 = 2048 - v16; // 0x40b1ba\n    int64_t v18 = v17 < 4 ? v17 : 4; // 0x40b1c1\n    pid2 = getuid();\n    if (v18 != 0) {\n        int64_t v19 = 0;\n        int64_t v20 = v19 + 1; // 0x40b1df\n        *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        while ((int32_t)v20 < (int32_t)v18) {\n            // 0x40b1dd\n            v19 = v20 & 0xffffffff;\n            v20 = v19 + 1;\n            *(char *)(v16 + v1 + v19) = *(char *)(v19 + v11);\n        }\n    }\n    uint64_t v21 = v18 + v16; // 0x40b1ee\n    if (v21 >= 2048) {\n        // 0x40b0f8\n        function_40b760(v1);\n        // 0x40b062\n        return result3;\n    }\n    // 0x40b1fe\n    pid2 = getgid();\n    uint64_t v22 = 2048 - v21; // 0x40b216\n    int64_t v23 = v22 < 4 ? v22 : 4; // 0x40b21d\n    if (v23 == 0) {\n        // 0x40b0f8\n        function_40b760(v1);\n        // 0x40b062\n        return result3;\n    }\n    int64_t v24 = 0;\n    int64_t v25 = v24 + 1; // 0x40b22f\n    *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    while ((int32_t)v25 < (int32_t)v23) {\n        // 0x40b22d\n        v24 = v25 & 0xffffffff;\n        v25 = v24 + 1;\n        *(char *)(v21 + v1 + v24) = *(char *)(v24 + v11);\n    }\n    // 0x40b0f8\n    function_40b760(v1);\n    // 0x40b062\n    return result3;\n}\n"
        },
        {
            "funcName": "function_40b2e0",
            "funcStartAddr": "40b2e0",
            "funcEndAddr": "40b2e5",
            "decompiledFuncCode": "int64_t function_40b2e0(int64_t a1, int64_t a2) {\n    // 0x40b2e0\n    *(int64_t *)(a1 + 8) = a2;\n    int64_t result; // 0x40b2e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b2f0",
            "funcStartAddr": "40b2f0",
            "funcEndAddr": "40b2f5",
            "decompiledFuncCode": "int64_t function_40b2f0(int64_t a1, int64_t a2) {\n    // 0x40b2f0\n    *(int64_t *)(a1 + 16) = a2;\n    int64_t result; // 0x40b2f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b300",
            "funcStartAddr": "40b300",
            "funcEndAddr": "40b45c",
            "decompiledFuncCode": "int64_t function_40b300(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    if (a1 != 0) {\n        int32_t * v2 = __errno_location(); // 0x40b31f\n        int64_t result = fread_unlocked(a2, 1, (int32_t)a3, (struct _IO_FILE *)a1); // 0x40b35a\n        int64_t v3 = a3 - result; // 0x40b365\n        if (v3 == 0) {\n            // 0x40b36a\n            return result;\n        }\n        int64_t v4 = v3; // 0x40b365\n        int64_t v5 = result + v1; // 0x40b362\n        int64_t v6 = *(int64_t *)(a1 + 16); // 0x40b334\n        *v2 = (v1 & 32) == 0 ? 0 : *v2;\n        int64_t result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6); // 0x40b35a\n        v4 -= result2;\n        while (v4 != 0) {\n            int64_t v7 = v5;\n            v5 = result2 + v7;\n            v6 = *(int64_t *)(a1 + 16);\n            *v2 = (v7 & 32) == 0 ? 0 : *v2;\n            result2 = fread_unlocked((int64_t *)v5, 1, (int32_t)v4, (struct _IO_FILE *)v6);\n            v4 -= result2;\n        }\n        // 0x40b36a\n        return result2;\n    }\n    int64_t v8 = *(int64_t *)24; // 0x40b380\n    int64_t v9 = a3; // 0x40b392\n    int64_t * v10; // 0x40b300\n    int64_t v11; // 0x40b300\n    int64_t v12; // 0x40b300\n    int64_t v13; // 0x40b300\n    if (v8 < a3) {\n        int64_t v14 = v8;\n        int64_t v15 = v14 + v1; // 0x40b3a3\n        v9 -= v14;\n        memcpy((int64_t *)v1, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        while (v15 % 8 != 0) {\n            // 0x40b3ba\n            function_40b4b0(32, 2104);\n            v13 = v9;\n            v12 = v15;\n            v10 = (int64_t *)2104;\n            v11 = 2048;\n            if (v9 < 2049) {\n                goto lab_0x40b415;\n            }\n            v14 = 2048;\n            int64_t v16 = v15;\n            v15 = v14 + v16;\n            v9 -= v14;\n            memcpy((int64_t *)v16, (int64_t *)(0x1038 - v14), (int32_t)v14);\n        }\n        int64_t v17 = v15;\n        int64_t v18 = v9;\n        while (v18 >= 2048) {\n            int64_t result3 = function_40b4b0(32, v17); // 0x40b3ed\n            int64_t v19 = v18 - 2048; // 0x40b3f2\n            if (v19 == 0) {\n                // 0x40b438\n                *(int64_t *)24 = 0;\n                return result3;\n            }\n            v17 += 2048;\n            v18 = v19;\n        }\n        // 0x40b404\n        function_40b4b0(32, 2104);\n        v13 = v18;\n        v12 = v17;\n        v10 = (int64_t *)2104;\n        v11 = 2048;\n    } else {\n        // 0x40b450\n        v13 = a3;\n        v12 = v1;\n        v10 = (int64_t *)(0x1038 - v8);\n        v11 = v8;\n    }\n  lab_0x40b415:;\n    int64_t * dest_mem = memcpy((int64_t *)v12, v10, (int32_t)v13); // 0x40b41e\n    *(int64_t *)24 = v11 - v13;\n    // 0x40b36a\n    return (int64_t)dest_mem;\n}\n"
        },
        {
            "funcName": "function_40b460",
            "funcStartAddr": "40b460",
            "funcEndAddr": "40b4a9",
            "decompiledFuncCode": "int64_t function_40b460(int64_t a1) {\n    // 0x40b460\n    __explicit_bzero_chk(a1, 0x1038, -1);\n    free((int64_t *)a1);\n    if (a1 == 0) {\n        // 0x40b4a0\n        return 0;\n    }\n    // 0x40b48a\n    return function_40b9a0(a1, 0x1038);\n}\n"
        },
        {
            "funcName": "function_40b4b0",
            "funcStartAddr": "40b4b0",
            "funcEndAddr": "40b755",
            "decompiledFuncCode": "int64_t function_40b4b0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 2064); // 0x40b4b0\n    int64_t * v2 = (int64_t *)(a1 + 2056); // 0x40b4b7\n    int64_t * v3 = (int64_t *)(a1 + 2048); // 0x40b4c6\n    int64_t v4 = *v1 + 1; // 0x40b4d0\n    *v1 = v4;\n    int64_t v5 = a2; // 0x40b4e1\n    int64_t v6 = *v3;\n    int64_t v7 = a1;\n    int64_t * v8 = (int64_t *)v7; // 0x40b4f2\n    int64_t v9 = *v8; // 0x40b4f2\n    uint64_t v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6); // 0x40b4f8\n    uint64_t v11 = v10 + *v2 + v4 + *(int64_t *)((v9 & 2040) + a1); // 0x40b513\n    *v8 = v11;\n    int64_t v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9; // 0x40b532\n    *(int64_t *)v5 = v12;\n    int64_t * v13 = (int64_t *)(v7 + 8); // 0x40b538\n    int64_t v14 = *v13; // 0x40b538\n    int64_t v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10); // 0x40b53c\n    uint64_t v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1); // 0x40b560\n    *v13 = v16;\n    int64_t v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14; // 0x40b575\n    *(int64_t *)(v5 + 8) = v17;\n    int64_t * v18 = (int64_t *)(v7 + 16); // 0x40b57c\n    int64_t v19 = *v18; // 0x40b57c\n    uint64_t v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15); // 0x40b580\n    uint64_t v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1); // 0x40b59b\n    *v18 = v21;\n    int64_t v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19; // 0x40b5ad\n    *(int64_t *)(v5 + 16) = v22;\n    int64_t * v23 = (int64_t *)(v7 + 24); // 0x40b5b8\n    int64_t v24 = *v23; // 0x40b5b8\n    int64_t v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20); // 0x40b5c9\n    uint64_t v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1); // 0x40b5e0\n    int64_t v27 = v7 + 32; // 0x40b5e3\n    *v23 = v26;\n    int64_t v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24; // 0x40b5fd\n    *(int64_t *)(v5 + 24) = v28;\n    v5 += 32;\n    while (v7 != a1 + 992) {\n        // 0x40b4e8\n        v6 = v25;\n        v7 = v27;\n        v8 = (int64_t *)v7;\n        v9 = *v8;\n        v10 = *(int64_t *)(v7 + 1024) + (0x200000 * v6 ^ -1 - v6);\n        v11 = v10 + v28 + *(int64_t *)((v9 & 2040) + a1);\n        *v8 = v11;\n        v12 = *(int64_t *)((v11 / 256 & 2040) + a1) + v9;\n        *(int64_t *)v5 = v12;\n        v13 = (int64_t *)(v7 + 8);\n        v14 = *v13;\n        v15 = *(int64_t *)(v7 + 1032) + (v10 / 32 ^ v10);\n        v16 = v15 + v12 + *(int64_t *)((v14 & 2040) + a1);\n        *v13 = v16;\n        v17 = *(int64_t *)((v16 / 256 & 2040) + a1) + v14;\n        *(int64_t *)(v5 + 8) = v17;\n        v18 = (int64_t *)(v7 + 16);\n        v19 = *v18;\n        v20 = *(int64_t *)(v7 + 1040) + (0x1000 * v15 ^ v15);\n        v21 = v20 + v17 + *(int64_t *)((v19 & 2040) + a1);\n        *v18 = v21;\n        v22 = *(int64_t *)((v21 / 256 & 2040) + a1) + v19;\n        *(int64_t *)(v5 + 16) = v22;\n        v23 = (int64_t *)(v7 + 24);\n        v24 = *v23;\n        v25 = *(int64_t *)(v7 + 1048) + (v20 / 0x200000000 ^ v20);\n        v26 = v25 + v22 + *(int64_t *)((v24 & 2040) + a1);\n        v27 = v7 + 32;\n        *v23 = v26;\n        v28 = *(int64_t *)((v26 / 256 & 2040) + a1) + v24;\n        *(int64_t *)(v5 + 24) = v28;\n        v5 += 32;\n    }\n    int64_t v29 = a2 + 1024; // 0x40b61b\n    int64_t v30 = v25;\n    int64_t v31 = v27;\n    int64_t * v32 = (int64_t *)v31; // 0x40b62a\n    int64_t v33 = *v32; // 0x40b62a\n    uint64_t v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30); // 0x40b630\n    uint64_t v35 = v34 + v28 + *(int64_t *)((v33 & 2040) + a1); // 0x40b655\n    *v32 = v35;\n    int64_t v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33; // 0x40b666\n    *(int64_t *)v29 = v36;\n    int64_t * v37 = (int64_t *)(v31 + 8); // 0x40b66d\n    int64_t v38 = *v37; // 0x40b66d\n    int64_t v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34); // 0x40b674\n    uint64_t v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1); // 0x40b698\n    *v37 = v40;\n    int64_t v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38; // 0x40b6ad\n    *(int64_t *)(v29 + 8) = v41;\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x40b6b4\n    int64_t v43 = *v42; // 0x40b6b4\n    uint64_t v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39); // 0x40b6b8\n    uint64_t v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1); // 0x40b6d3\n    *v42 = v45;\n    int64_t v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43; // 0x40b6e5\n    *(int64_t *)(v29 + 16) = v46;\n    int64_t * v47 = (int64_t *)(v31 + 24); // 0x40b6f0\n    int64_t v48 = *v47; // 0x40b6f0\n    int64_t v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44); // 0x40b701\n    uint64_t v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1); // 0x40b718\n    int64_t result = v31 + 32; // 0x40b71b\n    *v47 = v50;\n    int64_t v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48; // 0x40b735\n    *(int64_t *)(v29 + 24) = v51;\n    v29 += 32;\n    while (v31 != a1 + 2016) {\n        // 0x40b620\n        v30 = v49;\n        v31 = result;\n        v32 = (int64_t *)v31;\n        v33 = *v32;\n        v34 = *(int64_t *)(v31 - 1024) + (0x200000 * v30 ^ -1 - v30);\n        v35 = v34 + v51 + *(int64_t *)((v33 & 2040) + a1);\n        *v32 = v35;\n        v36 = *(int64_t *)((v35 / 256 & 2040) + a1) + v33;\n        *(int64_t *)v29 = v36;\n        v37 = (int64_t *)(v31 + 8);\n        v38 = *v37;\n        v39 = *(int64_t *)(v31 - 1016) + (v34 / 32 ^ v34);\n        v40 = v39 + v36 + *(int64_t *)((v38 & 2040) + a1);\n        *v37 = v40;\n        v41 = *(int64_t *)((v40 / 256 & 2040) + a1) + v38;\n        *(int64_t *)(v29 + 8) = v41;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v42;\n        v44 = *(int64_t *)(v31 - 1008) + (0x1000 * v39 ^ v39);\n        v45 = v44 + v41 + *(int64_t *)((v43 & 2040) + a1);\n        *v42 = v45;\n        v46 = *(int64_t *)((v45 / 256 & 2040) + a1) + v43;\n        *(int64_t *)(v29 + 16) = v46;\n        v47 = (int64_t *)(v31 + 24);\n        v48 = *v47;\n        v49 = *(int64_t *)(v31 - 1000) + (v44 / 0x200000000 ^ v44);\n        v50 = v49 + v46 + *(int64_t *)((v48 & 2040) + a1);\n        result = v31 + 32;\n        *v47 = v50;\n        v51 = *(int64_t *)((v50 / 256 & 2040) + a1) + v48;\n        *(int64_t *)(v29 + 24) = v51;\n        v29 += 32;\n    }\n    // 0x40b745\n    *v3 = v49;\n    *v2 = v51;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b760",
            "funcStartAddr": "40b760",
            "funcEndAddr": "40b994",
            "decompiledFuncCode": "int64_t function_40b760(int64_t a1) {\n    int64_t v1 = a1 + 2048; // 0x40b7a7\n    int64_t v2 = a1; // 0x40b7c3\n    int64_t * v3 = (int64_t *)v2; // 0x40b7c8\n    int64_t * v4 = (int64_t *)(v2 + 32); // 0x40b7cb\n    int64_t v5 = *v4 - 0x7d0fac247caa1f32; // 0x40b7cb\n    int64_t * v6 = (int64_t *)(v2 + 56); // 0x40b7cf\n    uint64_t v7 = *v6 - 0x670a8fb093bb3f55; // 0x40b7cf\n    int64_t * v8 = (int64_t *)(v2 + 40); // 0x40b7d3\n    int64_t * v9 = (int64_t *)(v2 + 48); // 0x40b7da\n    int64_t v10 = *v3 - v5 + 0x647c4677a2884b7c; // 0x40b7de\n    int64_t v11 = *v8 + 0x48fe4a0fa5a09315 ^ v7 / 512; // 0x40b7eb\n    int64_t * v12 = (int64_t *)(v2 + 8); // 0x40b7ee\n    uint64_t v13 = *v12 - v11 - 0x46074cdd38c5379e; // 0x40b7f5\n    int64_t v14 = *v9 - 0x5167a40d34037613 ^ 512 * v10; // 0x40b802\n    int64_t * v15 = (int64_t *)(v2 + 16); // 0x40b805\n    int64_t v16 = *v15 - v14 - 0x73f15afac2b8ed60; // 0x40b80c\n    int64_t v17 = v13 / 0x800000 ^ v10 + v7; // 0x40b819\n    int64_t * v18 = (int64_t *)(v2 + 24); // 0x40b81c\n    uint64_t v19 = *v18 - v17 - 0x4d64d17db5a6aadc; // 0x40b823\n    int64_t v20 = 0x8000 * v16 ^ v13 + v10; // 0x40b830\n    int64_t v21 = v5 - v20; // 0x40b836\n    *v3 = v20;\n    int64_t v22 = v19 / 0x4000 ^ v16 + v13; // 0x40b840\n    uint64_t v23 = v11 - v22; // 0x40b849\n    *v12 = v22;\n    int64_t v24 = v19 + v16 ^ 0x100000 * v21; // 0x40b854\n    int64_t v25 = v14 - v24; // 0x40b85e\n    *v15 = v24;\n    v2 += 64;\n    int64_t v26 = v23 / 0x20000 ^ v19 + v21; // 0x40b86d\n    int64_t v27 = v23 + v25; // 0x40b873\n    int64_t v28 = v17 - v26; // 0x40b876\n    *v18 = v26;\n    int64_t v29 = 0x4000 * v25 ^ v23 + v21; // 0x40b881\n    int64_t v30 = v28 + v25; // 0x40b884\n    *v8 = v27;\n    *v4 = v29;\n    *v9 = v30;\n    *v6 = v28;\n    int64_t v31 = a1; // 0x40b89a\n    while (v1 != v2) {\n        // 0x40b7c8\n        v3 = (int64_t *)v2;\n        v4 = (int64_t *)(v2 + 32);\n        v5 = *v4 + v29;\n        v6 = (int64_t *)(v2 + 56);\n        v7 = *v6 + v28;\n        v8 = (int64_t *)(v2 + 40);\n        v9 = (int64_t *)(v2 + 48);\n        v10 = *v3 - v5 + v20;\n        v11 = *v8 + v27 ^ v7 / 512;\n        v12 = (int64_t *)(v2 + 8);\n        v13 = *v12 - v11 + v22;\n        v14 = *v9 + v30 ^ 512 * v10;\n        v15 = (int64_t *)(v2 + 16);\n        v16 = *v15 - v14 + v24;\n        v17 = v13 / 0x800000 ^ v10 + v7;\n        v18 = (int64_t *)(v2 + 24);\n        v19 = *v18 - v17 + v26;\n        v20 = 0x8000 * v16 ^ v13 + v10;\n        v21 = v5 - v20;\n        *v3 = v20;\n        v22 = v19 / 0x4000 ^ v16 + v13;\n        v23 = v11 - v22;\n        *v12 = v22;\n        v24 = v19 + v16 ^ 0x100000 * v21;\n        v25 = v14 - v24;\n        *v15 = v24;\n        v2 += 64;\n        v26 = v23 / 0x20000 ^ v19 + v21;\n        v27 = v23 + v25;\n        v28 = v17 - v26;\n        *v18 = v26;\n        v29 = 0x4000 * v25 ^ v23 + v21;\n        v30 = v28 + v25;\n        *v8 = v27;\n        *v4 = v29;\n        *v9 = v30;\n        *v6 = v28;\n        v31 = a1;\n    }\n    int64_t * v32 = (int64_t *)(v31 + 56); // 0x40b8a0\n    uint64_t v33 = *v32 + v28; // 0x40b8a0\n    int64_t * v34 = (int64_t *)(v31 + 32); // 0x40b8a4\n    int64_t v35 = *v34 + v29; // 0x40b8a4\n    int64_t * v36 = (int64_t *)v31; // 0x40b8a8\n    int64_t * v37 = (int64_t *)(v31 + 40); // 0x40b8ae\n    int64_t v38 = *v36 + v20 - v35; // 0x40b8b2\n    int64_t * v39 = (int64_t *)(v31 + 8); // 0x40b8b9\n    int64_t * v40 = (int64_t *)(v31 + 48); // 0x40b8bd\n    int64_t v41 = *v37 + v27 ^ v33 / 512; // 0x40b8c1\n    int64_t * v42 = (int64_t *)(v31 + 16); // 0x40b8c7\n    uint64_t v43 = *v39 + v22 - v41; // 0x40b8ce\n    int64_t * v44 = (int64_t *)(v31 + 24); // 0x40b8d5\n    int64_t v45 = *v40 + v30 ^ 512 * v38; // 0x40b8d9\n    int64_t v46 = *v42 + v24 - v45; // 0x40b8e2\n    int64_t v47 = v43 / 0x800000 ^ v38 + v33; // 0x40b8e9\n    uint64_t v48 = *v44 + v26 - v47; // 0x40b8f2\n    int64_t v49 = 0x8000 * v46 ^ v43 + v38; // 0x40b8f9\n    int64_t v50 = v35 - v49; // 0x40b902\n    *v36 = v49;\n    int64_t v51 = v48 / 0x4000 ^ v46 + v43; // 0x40b90c\n    uint64_t v52 = v41 - v51; // 0x40b915\n    *v39 = v51;\n    int64_t v53 = 0x100000 * v50 ^ v48 + v46; // 0x40b920\n    int64_t result = v52 + v50; // 0x40b923\n    int64_t v54 = v45 - v53; // 0x40b92a\n    *v42 = v53;\n    int64_t v55 = v31 + 64; // 0x40b935\n    int64_t v56 = v52 / 0x20000 ^ v50 + v48; // 0x40b939\n    int64_t v57 = v54 + v52; // 0x40b93f\n    int64_t v58 = v47 - v56; // 0x40b942\n    *v44 = v56;\n    int64_t v59 = 0x4000 * v54 ^ result; // 0x40b94d\n    int64_t v60 = v58 + v54; // 0x40b950\n    *v37 = v57;\n    *v34 = v59;\n    *v40 = v60;\n    *v32 = v58;\n    v31 = v55;\n    while (v1 != v55) {\n        // 0x40b8a0\n        v32 = (int64_t *)(v31 + 56);\n        v33 = *v32 + v58;\n        v34 = (int64_t *)(v31 + 32);\n        v35 = *v34 + v59;\n        v36 = (int64_t *)v31;\n        v37 = (int64_t *)(v31 + 40);\n        v38 = *v36 + v49 - v35;\n        v39 = (int64_t *)(v31 + 8);\n        v40 = (int64_t *)(v31 + 48);\n        v41 = *v37 + v57 ^ v33 / 512;\n        v42 = (int64_t *)(v31 + 16);\n        v43 = *v39 + v51 - v41;\n        v44 = (int64_t *)(v31 + 24);\n        v45 = *v40 + v60 ^ 512 * v38;\n        v46 = *v42 + v53 - v45;\n        v47 = v43 / 0x800000 ^ v38 + v33;\n        v48 = *v44 + v56 - v47;\n        v49 = 0x8000 * v46 ^ v43 + v38;\n        v50 = v35 - v49;\n        *v36 = v49;\n        v51 = v48 / 0x4000 ^ v46 + v43;\n        v52 = v41 - v51;\n        *v39 = v51;\n        v53 = 0x100000 * v50 ^ v48 + v46;\n        result = v52 + v50;\n        v54 = v45 - v53;\n        *v42 = v53;\n        v55 = v31 + 64;\n        v56 = v52 / 0x20000 ^ v50 + v48;\n        v57 = v54 + v52;\n        v58 = v47 - v56;\n        *v44 = v56;\n        v59 = 0x4000 * v54 ^ result;\n        v60 = v58 + v54;\n        *v37 = v57;\n        *v34 = v59;\n        *v40 = v60;\n        *v32 = v58;\n        v31 = v55;\n    }\n    // 0x40b96c\n    *(int64_t *)(a1 + 2064) = 0;\n    *(int64_t *)(a1 + 2056) = 0;\n    *(int64_t *)v1 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b9a0",
            "funcStartAddr": "40b9a0",
            "funcEndAddr": "40ba1b",
            "decompiledFuncCode": "int64_t function_40b9a0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40b9a7\n    if (fileno(stream) < 0) {\n        // 0x40ba07\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40b9ba\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40b9eb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x40ba07\n            return fclose(stream);\n        }\n    }\n    // 0x40b9bc\n    if ((int32_t)function_408ec0(a1, v1) == 0) {\n        // 0x40ba07\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x40b9c8\n    int32_t v3 = *v2; // 0x40b9d0\n    int64_t result = fclose(stream); // 0x40b9de\n    if (v3 != 0) {\n        // 0x40ba10\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x40b9e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ba20",
            "funcStartAddr": "40ba20",
            "funcEndAddr": "40bab3",
            "decompiledFuncCode": "int64_t function_40ba20(int64_t file_path, char * mode) {\n    struct _IO_FILE * file = fopen((char *)file_path, mode); // 0x40ba27\n    int64_t result = (int64_t)file; // 0x40ba27\n    if (file == NULL) {\n        // 0x40ba41\n        return result;\n    }\n    uint32_t v1 = fileno(file); // 0x40ba37\n    if (v1 >= 3) {\n        // 0x40ba41\n        return result;\n    }\n    int64_t v2 = (int64_t)mode;\n    int32_t fd = function_40bac0((int64_t)v1, v2); // 0x40ba5a\n    if (fd < 0) {\n        int32_t * v3 = __errno_location(); // 0x40ba98\n        function_40b9a0(result, v2);\n        // 0x40ba41\n        return 0;\n    }\n    // 0x40ba5e\n    if ((int32_t)function_40b9a0(result, v2) == 0) {\n        struct _IO_FILE * v4 = fdopen(fd, mode); // 0x40ba70\n        if (v4 != NULL) {\n            // 0x40ba41\n            return (int64_t)v4;\n        }\n    }\n    int32_t * v5 = __errno_location(); // 0x40ba7d\n    close(fd);\n    // 0x40ba41\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40bac0",
            "funcStartAddr": "40bac0",
            "funcEndAddr": "40bace",
            "decompiledFuncCode": "int64_t function_40bac0(int64_t a1, int64_t a2) {\n    // 0x40bac0\n    int64_t v1; // 0x40bac0\n    return function_408d80(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_40bad0",
            "funcStartAddr": "40bad0",
            "funcEndAddr": "40bb2d",
            "decompiledFuncCode": "int64_t function_40bad0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40bad0\n    return function_401c28();\n}\n"
        },
        {
            "funcName": "function_40bb30",
            "funcStartAddr": "40bb30",
            "funcEndAddr": "40bb31",
            "decompiledFuncCode": "int64_t function_40bb30(void) {\n    // 0x40bb30\n    int64_t result; // 0x40bb30\n    return result;\n}\n"
        },
        {
            "funcName": "function_40bb40",
            "funcStartAddr": "40bb40",
            "funcEndAddr": "40bb58",
            "decompiledFuncCode": "int64_t function_40bb40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40bb40\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g22);\n}\n"
        },
        {
            "funcName": "function_40bb58",
            "funcStartAddr": "40bb58",
            "funcEndAddr": "40bb78",
            "decompiledFuncCode": "int64_t function_40bb58(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g18; // 0x40bb62\n    while (*(int64_t *)v1 != -1) {\n        // 0x40bb63\n        v1 -= 8;\n    }\n    // 0x40bb74\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_ln.elf"
}