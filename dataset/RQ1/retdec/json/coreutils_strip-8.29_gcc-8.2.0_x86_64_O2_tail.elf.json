{
    "funcInfo": [
        {
            "funcName": "function_401e20",
            "funcStartAddr": "401e20",
            "funcEndAddr": "401e25",
            "decompiledFuncCode": "int64_t function_401e20(void) {\n    // 0x401e20\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e25",
            "funcStartAddr": "401e25",
            "funcEndAddr": "401e2a",
            "decompiledFuncCode": "int64_t function_401e25(void) {\n    // 0x401e25\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e2a",
            "funcStartAddr": "401e2a",
            "funcEndAddr": "401e2f",
            "decompiledFuncCode": "int64_t function_401e2a(void) {\n    // 0x401e2a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e2f",
            "funcStartAddr": "401e2f",
            "funcEndAddr": "401e34",
            "decompiledFuncCode": "int64_t function_401e2f(void) {\n    // 0x401e2f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e34",
            "funcStartAddr": "401e34",
            "funcEndAddr": "401e39",
            "decompiledFuncCode": "int64_t function_401e34(void) {\n    // 0x401e34\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e39",
            "funcStartAddr": "401e39",
            "funcEndAddr": "401e3e",
            "decompiledFuncCode": "int64_t function_401e39(void) {\n    // 0x401e39\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e3e",
            "funcStartAddr": "401e3e",
            "funcEndAddr": "401e43",
            "decompiledFuncCode": "int64_t function_401e3e(void) {\n    // 0x401e3e\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e43",
            "funcStartAddr": "401e43",
            "funcEndAddr": "401e48",
            "decompiledFuncCode": "int64_t function_401e43(void) {\n    // 0x401e43\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e48",
            "funcStartAddr": "401e48",
            "funcEndAddr": "401e4d",
            "decompiledFuncCode": "int64_t function_401e48(void) {\n    // 0x401e48\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e4d",
            "funcStartAddr": "401e4d",
            "funcEndAddr": "401e52",
            "decompiledFuncCode": "int64_t function_401e4d(void) {\n    // 0x401e4d\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e60",
            "funcStartAddr": "401e60",
            "funcEndAddr": "4046d6",
            "decompiledFuncCode": "int64_t function_401e60(int64_t a1, int64_t a2) {\n    // 0x401e60\n    int64_t v1; // 0x401e60\n    int64_t v2 = v1;\n    int64_t v3 = 10; // bp-376, 0x401e79\n    function_407b40(a2);\n    setlocale(LC_ALL, (char *)&g16);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_40c180(0x406590, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v1);\n    g46 = 0;\n    *(char *)&g53 = 1;\n    g49 = 0;\n    *(char *)&g50 = 0;\n    *(char *)&g52 = 0;\n    *(char *)&g48 = 10;\n    int32_t v4 = a1; // 0x401ee6\n    char * str4; // 0x401e60\n    int64_t v5; // 0x401e60\n    switch (v4) {\n        case 2: {\n            goto lab_0x401f0b;\n        }\n        case 3: {\n            int64_t v6 = *(int64_t *)(a2 + 16); // 0x4023cb\n            char * v7 = (char *)v6;\n            if (*v7 != 45) {\n                goto lab_0x401f0b;\n            } else {\n                // 0x4023d8\n                str4 = v7;\n                if (*(char *)(v6 + 1) != 0) {\n                    goto lab_0x401efd;\n                } else {\n                    goto lab_0x401f0b;\n                }\n            }\n        }\n        default: {\n            // 0x401ef4\n            v5 = 0;\n            if (v4 != 4) {\n                goto lab_0x401f2f;\n            } else {\n                // 0x401ef9\n                str4 = (char *)*(int64_t *)(a2 + 16);\n                goto lab_0x401efd;\n            }\n        }\n    }\n  lab_0x4032ae_2:;\n    // 0x4032ae\n    int64_t v8; // 0x401e60\n    int64_t v9 = v8;\n    g44 = 1;\n    int32_t * v10; // 0x401e60\n    int32_t * err_num5; // bp-520, 0x401e60\n    int64_t v11; // 0x401e60\n    if (g47 != 0) {\n        // 0x4032ae\n        v10 = err_num5;\n        v11 = 0;\n    } else {\n        // 0x4032be\n        v10 = err_num5;\n        v11 = 0;\n        if (g26 == 2 == err_num5 == (int32_t *)1) {\n            // 0x403b25\n            v10 = (int32_t *)1;\n            v11 = 0;\n            if (*(int32_t *)(v9 + 56) != -1) {\n                int32_t v12 = *(int32_t *)(v9 + 48); // 0x403b34\n                v10 = (int32_t *)1;\n                v11 = (v12 & 0xf000) != 0x8000;\n            }\n        }\n    }\n    // 0x4032d5\n    int64_t v13; // 0x401e60\n    int64_t v14 = v13; // 0x403300\n    int32_t v15; // 0x401e60\n    int32_t v16 = v15; // 0x403300\n    int64_t v17 = v9; // 0x403300\n    int32_t v18; // 0x401e60\n    int32_t v19 = v18; // 0x403300\n    int32_t v20; // 0x401e60\n    int32_t v21 = v20; // 0x403300\n    int32_t v22; // 0x401e60\n    int32_t v23 = v22; // 0x403300\n    struct stat * v24; // 0x401e60\n    struct stat * v25 = v24; // 0x403300\n    int32_t v26 = 0; // 0x403300\n    int32_t v27; // 0x401e60\n    int32_t v28 = v27; // 0x403300\n    int32_t v29 = 0x1000000 * (v15 + 52 + (int32_t)v9) >> 24; // 0x403300\n    int32_t v30; // 0x401e60\n    int32_t v31 = v30; // 0x403300\n    int32_t v32 = (int32_t)(int64_t)v10 - 1; // 0x403300\n    int64_t v33; // 0x401e60\n    int64_t v34 = v33; // 0x403300\n    int32_t v35 = v11; // 0x403300\n    bool v36; // 0x401e60\n    bool v37 = v36; // 0x403300\n    int128_t v38; // 0x401e60\n    int128_t v39 = v38; // 0x403300\n    int64_t v40; // 0x401e60\n    int64_t v41 = v40; // 0x403300\n    int64_t v42; // 0x401e60\n    int64_t v43 = v42; // 0x403300\n    int64_t v44; // 0x401e60\n    int64_t v45 = v44; // 0x403300\n    int64_t v46; // 0x401e60\n    int64_t v47 = v46; // 0x403300\n    int64_t v48; // 0x401e60\n    int64_t v49 = v48; // 0x403300\n    int64_t v50 = v11; // 0x403300\n    goto lab_0x403305;\n  lab_0x4033e1:;\n    // 0x4033e1\n    int64_t v141; // 0x401e60\n    int64_t v184 = v141;\n    int64_t v140; // 0x401e60\n    int64_t v182 = v140;\n    int64_t v139; // 0x401e60\n    int64_t v180 = v139;\n    int64_t v137; // 0x401e60\n    int64_t fd2 = v137;\n    int128_t v135; // 0x401e60\n    int128_t v177 = v135;\n    bool v134; // 0x401e60\n    bool v175 = v134;\n    int32_t v133; // 0x401e60\n    int32_t v173 = v133;\n    int64_t v132; // 0x401e60\n    int64_t v171 = v132;\n    int32_t v131; // 0x401e60\n    int32_t v169 = v131;\n    int32_t v130; // 0x401e60\n    int32_t v167 = v130;\n    int32_t v129; // 0x401e60\n    int32_t v165 = v129;\n    int32_t v128; // 0x401e60\n    int32_t v163 = v128;\n    int32_t v127; // 0x401e60\n    int32_t v161 = v127;\n    int32_t v126; // 0x401e60\n    int32_t v159 = v126;\n    struct stat * v125; // 0x401e60\n    struct stat * v157 = v125;\n    int32_t v124; // 0x401e60\n    int32_t v155 = v124;\n    int32_t v123; // 0x401e60\n    int32_t v153 = v123;\n    int32_t v122; // 0x401e60\n    int32_t v151 = v122;\n    int64_t v121; // 0x401e60\n    int64_t v149 = v121;\n    int32_t v120; // 0x401e60\n    int32_t v147 = v120;\n    int64_t v119; // 0x401e60\n    int64_t v145 = v119;\n    unsigned char v1300 = *(char *)&g54; // 0x4033e1\n    int64_t v136; // 0x401e60\n    int64_t v1301 = v136; // 0x4033ea\n    int64_t v138; // 0x401e60\n    int64_t v1302 = v138; // 0x4033ea\n    bool v313; // 0x401e60\n    int64_t v315; // 0x401e60\n    int64_t v316; // 0x401e60\n    int64_t v317; // 0x401e60\n    int32_t v304; // 0x401e60\n    int32_t v303; // 0x401e60\n    int32_t v301; // 0x401e60\n    int64_t v311; // 0x401e60\n    int32_t v309; // 0x401e60\n    int64_t v302; // 0x401e60\n    int32_t v305; // 0x401e60\n    int64_t v300; // 0x401e60\n    int32_t v307; // 0x401e60\n    struct stat * v306; // 0x401e60\n    int32_t v312; // 0x401e60\n    int32_t v310; // 0x401e60\n    int32_t v308; // 0x401e60\n    int128_t v314; // 0x401e60\n    if (v1300 != 0 != (g26 == 1)) {\n        int64_t v1303 = 0x100000000000000 * (int64_t)v165 >> 56; // 0x4033fe\n        int64_t v1304 = v149 + 52;\n        uint32_t v1305 = *(int32_t *)(v1304 + 4); // 0x403410\n        while (v1305 < 0) {\n            // 0x40341b\n            if (v1300 != 0 == (*(char *)v1304 != 1)) {\n                // break -> 0x403798\n                break;\n            }\n            int64_t v1306 = v1304 + 96; // 0x403428\n            if (v1303 == v1306) {\n                // 0x403431\n                error(0, (int32_t)\"no files remaining\" ^ (int32_t)\"no files remaining\", dcgettext(NULL, \"no files remaining\", 5));\n                v300 = v145;\n                v301 = v147;\n                v302 = v149;\n                v303 = v151;\n                v304 = v153;\n                v305 = v155;\n                v306 = v157;\n                v307 = v159;\n                v308 = v161;\n                v309 = v167;\n                v310 = v169;\n                v311 = v171;\n                v312 = v173;\n                v313 = v175;\n                v314 = v177;\n                v315 = v180;\n                v316 = v182;\n                v317 = v184;\n                goto lab_0x402988;\n            }\n            v1304 = v1306;\n            v1305 = *(int32_t *)(v1304 + 4);\n        }\n        // 0x403798\n        v1301 = v1303;\n        v1302 = v1305;\n    }\n    int64_t v190 = v1300; // 0x4033e1\n    int64_t v191 = v1302;\n    int64_t v189 = v1301;\n    char v1295 = v161; // 0x403798\n    if (v1295 != 1) {\n        goto lab_0x4038bd;\n    } else {\n        if ((char)v173 != 0) {\n            goto lab_0x4038bd;\n        } else {\n            // 0x4037ae\n            v14 = v145;\n            v16 = v147;\n            v17 = v149;\n            v19 = v151;\n            v21 = v153;\n            v23 = v155;\n            v25 = v157;\n            v26 = v159;\n            v28 = v163;\n            v29 = v165;\n            v31 = v167;\n            v32 = v169;\n            v34 = v171;\n            v35 = v173;\n            v37 = v175;\n            v39 = v177;\n            v41 = v189;\n            v43 = v190;\n            v45 = fd2;\n            v47 = v191;\n            v49 = v180;\n            v50 = v184;\n            if (g51 == 0) {\n                goto lab_0x403305;\n            } else {\n                goto lab_0x4037bb;\n            }\n        }\n    }\n  lab_0x403320:;\n    // 0x403320\n    int64_t v111; // 0x401e60\n    int64_t v578 = v111;\n    int32_t v110; // 0x401e60\n    int32_t v1299 = v110;\n    int64_t v109; // 0x401e60\n    int64_t v577 = v109;\n    int64_t v107; // 0x401e60\n    int64_t v573 = v107;\n    int64_t v81; // 0x401e60\n    int64_t v108; // 0x401e60\n    int64_t v561 = function_4047e0(*(int64_t *)v573, v108, v81); // 0x403323\n    int32_t * v554 = (int32_t *)(v573 + 48); // 0x403328\n    int64_t v581 = (int64_t)*v554; // 0x403328\n    int32_t * v556 = (int32_t *)(v573 + 64); // 0x40332f\n    uint32_t v1307 = *v556; // 0x40332f\n    int64_t v76; // 0x401e60\n    int32_t v1308 = v76; // 0x403333\n    int64_t v555 = v1307; // 0x403336\n    int64_t v82; // 0x401e60\n    int64_t v104; // 0x401e60\n    if (v1307 == v1308) {\n        goto lab_0x40337e;\n    } else {\n        int64_t v1309 = function_40a6a0(v578, 3, v81, v82); // 0x403341\n        int32_t v1310 = v1309;\n        if (v1308 != 0) {\n            if (v1310 >= 0) {\n                // 0x403377\n                *v556 = v1308;\n                v555 = v104;\n                goto lab_0x40337e;\n            } else {\n                goto lab_0x403688;\n            }\n        } else {\n            if (v1310 < 0) {\n                goto lab_0x403688;\n            } else {\n                int64_t v1311 = v1309 & 0xfffff7ff | 2048; // 0x403359\n                if (v1310 == (int32_t)v1311) {\n                    // 0x403377\n                    *v556 = v1308;\n                    v555 = v104;\n                    goto lab_0x40337e;\n                } else {\n                    // 0x403360\n                    if ((int32_t)function_40a6a0(v578, 4, v1311, v82) == -1) {\n                        goto lab_0x403688;\n                    } else {\n                        // 0x403377\n                        *v556 = v1308;\n                        v555 = v104;\n                        goto lab_0x40337e;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4031cb:;\n    // 0x4031cb\n    int64_t v321; // 0x401e60\n    int64_t v325 = v321;\n    int64_t str; // 0x401e60\n    int64_t v346 = str + 96; // 0x4031cb\n    int64_t v318 = v325; // 0x4031d2\n    int64_t v319 = v346; // 0x4031d2\n    int64_t v271; // 0x401e60\n    if (v346 == v271) {\n        // break -> 0x4031d4\n        goto lab_0x4031d4;\n    }\n    goto lab_0x403182;\n  lab_0x4031c0:;\n    // 0x4031c0\n    int32_t * v323; // 0x4031a2\n    *v323 = -1;\n    char * v322; // 0x403198\n    *v322 = 1;\n    int64_t v320; // 0x401e60\n    v321 = v320;\n    goto lab_0x4031cb;\n  lab_0x403049:;\n    // 0x403049\n    int64_t v510; // 0x401e60\n    int64_t v1312 = v510;\n    int64_t v517; // 0x401e60\n    int64_t v1313 = v517;\n    int64_t v512; // 0x401e60\n    int64_t v1314 = v512;\n    int64_t v1315 = *(int64_t *)(v517 + 0x2000) + v517 - v1313; // 0x403049\n    int64_t v493; // 0x401e60\n    int64_t v1316 = v493; // 0x40304c\n    if (v1315 != 0) {\n        // 0x4034fe\n        function_4048a0(v1313, v1315);\n        v1316 = v1315;\n    }\n    int64_t v1317 = *(int64_t *)(v517 + 0x2010); // 0x403052\n    int32_t v535; // 0x402636\n    int32_t v565 = v535; // 0x40305c\n    int32_t v518; // 0x401e60\n    int32_t v566 = v518; // 0x40305c\n    int64_t v567 = v1314; // 0x40305c\n    int64_t v568 = v1316; // 0x40305c\n    int64_t v569 = v517; // 0x40305c\n    int64_t v570 = v1312; // 0x40305c\n    int64_t v1318 = v1317; // 0x40305c\n    if (v1317 != 0) {\n        int64_t v1319 = v1318;\n        int64_t v1320 = *(int64_t *)(v1319 + 0x2000); // 0x403060\n        if (v1320 != 0) {\n            // 0x40306c\n            function_4048a0(v1319, v1320);\n        }\n        int64_t v1321 = *(int64_t *)(v1319 + 0x2010); // 0x403074\n        v565 = v535;\n        v566 = v518;\n        v567 = v1314;\n        v568 = v1320;\n        v569 = v517;\n        v570 = v1312;\n        while (v1321 != 0) {\n            // 0x403060\n            v1319 = v1321;\n            v1320 = *(int64_t *)(v1319 + 0x2000);\n            if (v1320 != 0) {\n                // 0x40306c\n                function_4048a0(v1319, v1320);\n            }\n            // 0x403074\n            v1321 = *(int64_t *)(v1319 + 0x2010);\n            v565 = v535;\n            v566 = v518;\n            v567 = v1314;\n            v568 = v1320;\n            v569 = v517;\n            v570 = v1312;\n        }\n    }\n    goto lab_0x402cb0;\n  lab_0x401f50:;\n    // 0x401f50\n    int64_t v1322; // 0x401e60\n    int64_t v1323 = v1322; // 0x401e60\n    int64_t v1324; // 0x401e60\n    int64_t v1325 = v1324; // 0x401e60\n    int64_t v1326; // 0x401e60\n    int64_t v1327 = v1326; // 0x401e60\n    goto lab_0x401f50_2;\n  lab_0x402151:;\n    // 0x402151\n    int64_t v1345; // 0x401e60\n    *(char *)&g53 = (char)((int32_t)v1345 == 110);\n    char * v1347; // 0x402151\n    switch (*v1347) {\n        case 43: {\n            // 0x4023e7\n            *(char *)&g50 = 1;\n            // break -> 0x402177\n            break;\n        }\n        case 45: {\n            // 0x4027bb\n            g69 = (char *)((int64_t)g69 + 1);\n            // break -> 0x402177\n            break;\n        }\n    }\n    char * v1348; // 0x401e60\n    if ((int32_t)v1345 == 110) {\n        // 0x4022b4\n        v1348 = dcgettext(NULL, \"invalid number of lines\", 5);\n    } else {\n        // 0x402185\n        v1348 = dcgettext(NULL, \"invalid number of bytes\", 5);\n    }\n    // 0x402194\n    v3 = function_40a130((int64_t)g69, 0, -1, \"bkKmMGTPEZY0\", (int64_t)v1348, 0);\n    int64_t v1330; // 0x401e60\n    v1322 = v1330;\n    int64_t v1346; // 0x401e60\n    v1324 = v1346;\n    v1326 = 0;\n    goto lab_0x401f50;\n  lab_0x402148:;\n    // 0x402148\n    int64_t v1341; // 0x401e60\n    v1345 = v1341;\n    int64_t v1342; // 0x401e60\n    v1346 = v1342;\n    if ((int32_t)v1341 != 110) {\n        // 0x403ad7\n        function_405d10(1);\n        // UNREACHABLE\n    }\n    goto lab_0x402151;\n  lab_0x402019:;\n    char * v1349 = g69; // 0x402019\n    *(char *)&g52 = 1;\n    int64_t v1328; // 0x401e60\n    int64_t v1329; // 0x401e60\n    if (v1349 == NULL) {\n        // 0x4022c8\n        g26 = 2;\n        v1322 = v1330;\n        v1324 = v1329;\n        v1326 = v1328;\n    } else {\n        int64_t v1350 = g28; // 0x402040\n        int64_t v1351 = function_406440(\"--follow\", (int64_t)v1349, g6, (int64_t *)&g5, 4, v1350); // 0x40204c\n        g26 = *(int32_t *)(4 * v1351 + (int64_t)&g5);\n        v1322 = v1330;\n        v1324 = v1329;\n        v1326 = v1350;\n    }\n    goto lab_0x401f50;\n  lab_0x404336_2:;\n    // 0x404336\n    int64_t v1008; // 0x401e60\n    int64_t v1352 = v1008;\n    char * format14 = dcgettext(NULL, \"error reading inotify event\", 5); // 0x404342\n    int32_t * v1353 = __errno_location(); // 0x40434a\n    int32_t err_num14 = *v1353; // 0x404357\n    error(1, err_num14, format14);\n    int64_t v961; // 0x401e60\n    int64_t v882 = v961; // 0x40435b\n    int32_t v960; // 0x401e60\n    int32_t v883 = v960; // 0x40435b\n    int64_t v959; // 0x401e60\n    int64_t v884 = v959; // 0x40435b\n    int32_t v987; // 0x401e60\n    int32_t v885 = v987; // 0x40435b\n    int32_t v958; // 0x401e60\n    int32_t v886 = v958; // 0x40435b\n    int32_t v957; // 0x401e60\n    int32_t v887 = v957; // 0x40435b\n    struct stat * v995; // 0x401e60\n    struct stat * v888 = v995; // 0x40435b\n    int32_t v956; // 0x401e60\n    int32_t v889 = v956; // 0x40435b\n    int32_t v955; // 0x401e60\n    int32_t v890 = v955; // 0x40435b\n    int32_t v954; // 0x401e60\n    int32_t v891 = v954; // 0x40435b\n    int32_t v953; // 0x401e60\n    int32_t v892 = v953; // 0x40435b\n    int32_t v994; // 0x401e60\n    int32_t v893 = v994; // 0x40435b\n    int32_t v1354; // 0x401e60\n    int32_t v894 = v1354; // 0x40435b\n    int64_t v986; // 0x401e60\n    int64_t v895 = v986; // 0x40435b\n    int32_t v992; // 0x401e60\n    int32_t v896 = v992; // 0x40435b\n    bool v897 = false; // 0x40435b\n    int128_t v1355; // 0x401e60\n    int128_t v898 = v1355; // 0x40435b\n    int64_t v899 = (int64_t)format14; // 0x40435b\n    int64_t v900 = v1352; // 0x40435b\n    int64_t v952; // 0x401e60\n    int64_t v901 = v952; // 0x40435b\n    int64_t v985; // 0x401e60\n    int64_t v902 = v985; // 0x40435b\n    int64_t v1004; // 0x40430f\n    int64_t v903 = v1004; // 0x40435b\n    int64_t v951; // 0x401e60\n    int64_t v904 = v951; // 0x40435b\n    goto lab_0x404360;\n  lab_0x4040b4:;\n    // 0x4040b4\n    int128_t v1001; // 0x401e60\n    v1355 = v1001;\n    int32_t v1000; // 0x401e60\n    v1354 = v1000;\n    char * v964; // 0x401e60\n    __asm_rep_stosq_memset(v964, 0, 16);\n    int64_t v965; // 0x401e60\n    int64_t * v1356 = (int64_t *)(v965 + 8 * (int64_t)__fdelt_chk(v955)); // 0x4040cc\n    *v1356 = *v1356 | v952;\n    char readfds; // bp-200, 0x401e60\n    if (g51 != 0) {\n        // 0x4040dd\n        readfds |= 2;\n    }\n    // 0x4040e6\n    int64_t v966; // 0x401e60\n    int64_t timeout2 = g47 != 0 ? v966 : 0; // 0x404103\n    bool v1033; // 0x401e60\n    int64_t v1037; // 0x401e60\n    int64_t v1036; // 0x401e60\n    int64_t v1035; // 0x401e60\n    int32_t v1031; // 0x401e60\n    int64_t v1032; // 0x401e60\n    int32_t v997; // 0x401e60\n    struct _TYPEDEF_fd_set * readfds2; // 0x401e60\n    int32_t nfds; // 0x401e60\n    int128_t v996; // 0x401e60\n    int128_t v1034; // 0x401e60\n    switch (select(nfds, readfds2, NULL, NULL, (struct timeval *)timeout2)) {\n        case 0: {\n            // 0x404058\n            v996 = v1355;\n            v997 = v1354;\n            goto lab_0x404061;\n        }\n        case -1: {\n            // 0x40466d\n            error(1, *__errno_location(), dcgettext(NULL, \"error waiting for inotify and output events\", 5));\n            v1031 = v987;\n            v1032 = v986;\n            v1033 = false;\n            v1034 = v1355;\n            v1035 = 0;\n            v1036 = timeout2;\n            v1037 = v985;\n            goto lab_0x404697;\n        }\n        default: {\n            // 0x40412b\n            if ((readfds & 2) == 0) {\n                // break -> 0x404302\n                break;\n            }\n            // 0x404139\n            raise(13);\n            // 0x404058\n            v996 = v1355;\n            v997 = v1354;\n            goto lab_0x404061;\n        }\n    }\n  lab_0x404148:;\n    int128_t v1357 = __asm_movsd(v961); // 0x404148\n    int128_t v999; // 0x401e60\n    __asm_pxor(v999, v999);\n    int64_t v1358 = __asm_cvttsd2si(v1357); // 0x404152\n    int128_t v1359 = __asm_cvtsi2sd(v1358); // 0x404157\n    int64_t timeout = v1358; // bp-360, 0x40415c\n    int128_t v1360 = __asm_mulsd(__asm_movsd(0x412e848000000000), __asm_subsd(v1357, v1359)); // 0x404170\n    __asm_cvttsd2si(v1360);\n    int32_t v998; // 0x401e60\n    v1000 = v998;\n    v1001 = v1360;\n    goto lab_0x4040b4;\n  lab_0x4042a0:;\n    int64_t v905 = v961; // 0x4042b7\n    int32_t v906 = v960; // 0x4042b7\n    int64_t v907 = v959; // 0x4042b7\n    int32_t v908 = v987; // 0x4042b7\n    int32_t v909 = v958; // 0x4042b7\n    int32_t v910 = v957; // 0x4042b7\n    struct stat * v911 = v995; // 0x4042b7\n    int32_t v912 = v956; // 0x4042b7\n    int32_t v913 = v955; // 0x4042b7\n    int32_t v914 = v954; // 0x4042b7\n    int32_t v915 = v953; // 0x4042b7\n    int32_t v916 = v994; // 0x4042b7\n    int32_t v1015; // 0x401e60\n    int32_t v917 = v1015; // 0x4042b7\n    int64_t v1016; // 0x40418b\n    int64_t v918 = v1016; // 0x4042b7\n    int32_t v919 = v992; // 0x4042b7\n    bool v1014; // 0x401e60\n    bool v920 = v1014; // 0x4042b7\n    int128_t v1013; // 0x401e60\n    int128_t v921 = v1013; // 0x4042b7\n    int64_t v1021; // 0x401e60\n    int64_t v922 = v1021; // 0x4042b7\n    char v962; // 0x401e60\n    int64_t v923 = function_406df0(v962, v951); // 0x4042b7\n    int64_t v1020; // 0x40419d\n    int64_t v924 = v1020; // 0x4042b7\n    int64_t v925 = v952; // 0x4042b7\n    int64_t v926 = v985; // 0x4042b7\n    int64_t v1012; // 0x401e60\n    int64_t v927 = v1012; // 0x4042b7\n    int64_t v928 = v951; // 0x4042b7\n    goto lab_0x404264;\n  lab_0x40404b:;\n    // 0x40404b\n    int32_t v1040; // 0x401e60\n    int32_t v968 = v1040; // 0x401e60\n    struct stat * v969 = v995; // 0x401e60\n    int32_t v970 = v994; // 0x401e60\n    int32_t v971 = v1015; // 0x401e60\n    int64_t v972 = v1016; // 0x401e60\n    int32_t v973 = v992; // 0x401e60\n    bool v974 = v1014; // 0x401e60\n    int128_t v975 = v1013; // 0x401e60\n    int64_t v1041; // 0x401e60\n    int64_t v976 = v1041; // 0x401e60\n    int64_t v1023; // 0x4041d3\n    int64_t v977 = v1023; // 0x401e60\n    int64_t v978 = v1012; // 0x401e60\n    goto lab_0x40404b_2;\n  lab_0x404580_2:;\n    // 0x404580\n    int64_t v1361; // 0x403f32\n    int64_t * v1362; // 0x401e60\n    int64_t v1363; // 0x403f61\n    int64_t v1364 = function_409510(4, function_4047e0(*v1362, v1363, v1361)); // 0x404590\n    char * format15 = dcgettext(NULL, \"%s was replaced\", 5); // 0x4045a4\n    int32_t * err_num15 = __errno_location(); // 0x4045ac\n    error(0, *err_num15, format15);\n    int32_t v1365; // 0x401e60\n    function_4072a0((char)v1365);\n    *err_num15 = 0;\n    int64_t v1366; // 0x401e60\n    int64_t v228 = v1366; // 0x4045d5\n    int32_t v1367; // 0x401e60\n    int32_t v229 = v1367; // 0x4045d5\n    int64_t v1368; // 0x401e60\n    int64_t v224 = v1368; // 0x4045d5\n    int32_t v1369; // 0x401e60\n    int32_t v230 = v1369; // 0x4045d5\n    int32_t v1370; // 0x401e60\n    int32_t v231 = v1370; // 0x4045d5\n    int32_t v1371; // 0x401e60\n    int32_t v220 = v1371; // 0x4045d5\n    struct stat * v1372; // 0x401e60\n    struct stat * v232 = v1372; // 0x4045d5\n    int32_t v1373; // 0x401e60\n    int32_t v233 = v1373; // 0x4045d5\n    int32_t v1374; // 0x401e60\n    int32_t v234 = v1374; // 0x4045d5\n    int64_t v1375; // 0x401e60\n    int64_t v235 = v1375; // 0x4045d5\n    bool v1376; // 0x401e60\n    bool v236 = v1376; // 0x4045d5\n    int128_t v1377; // 0x401e60\n    int128_t v237 = v1377; // 0x4045d5\n    int64_t v238 = v1364; // 0x4045d5\n    int64_t v1378; // 0x401e60\n    int64_t v222 = v1378; // 0x4045d5\n    goto lab_0x403db0;\n  lab_0x401f0b:;\n    int64_t v1379 = function_407ac0(); // 0x401f0b\n    int64_t * v1380 = (int64_t *)(a2 + 8); // 0x401f10\n    int64_t v1381 = *v1380; // 0x401f10\n    int64_t v1382 = v1381 + 1; // 0x401f17\n    v5 = 0;\n    switch (*(char *)v1381) {\n        case 43: {\n            // 0x4023b0\n            v5 = 0;\n            if ((int32_t)v1379 < 0x31069) {\n                goto lab_0x401f2f;\n            } else {\n                goto lab_0x4022f5;\n            }\n        }\n        case 45: {\n            // 0x4022d7\n            if ((int32_t)v1379 < 0x30db0) {\n                goto lab_0x4022f5;\n            } else {\n                // 0x4022de\n                v5 = 0;\n                if (*(char *)(v1382 + (int64_t)(*(char *)v1382 == 99)) == 0) {\n                    goto lab_0x401f2f;\n                } else {\n                    goto lab_0x4022f5;\n                }\n            }\n        }\n        default: {\n            goto lab_0x401f2f;\n        }\n    }\n  lab_0x401f2f:;\n    // 0x401f2f\n    int64_t v1383; // 0x401e60\n    int64_t v1384 = v1383;\n    int64_t v1333 = 8 * v5 + a2; // 0x401f3a\n    int64_t v1385 = a1 - v5; // 0x401f40\n    int64_t v1332 = v1385 & 0xffffffff; // 0x401f40\n    int128_t v1344 = g7;\n    v1323 = __asm_movsd_1(__asm_movsd(0x3ff0000000000000));\n    v1325 = 0;\n    int64_t v1331; // 0x401f62\n    while (true) {\n      lab_0x401f50_2:\n        // 0x401f50\n        v1328 = v1327;\n        v1329 = v1325;\n        v1330 = v1323;\n        v1331 = function_40b530(v1332, v1333, \"c:n:fFqs:vz0123456789\", &g4, 0, v1328);\n        int32_t v1334 = v1331;\n        v1322 = v1330;\n        v1324 = 2;\n        v1326 = v1328;\n        switch (v1334) {\n            case -1: {\n                goto lab_0x4023f3;\n            }\n            case 113: {\n                goto lab_0x401f50;\n            }\n            default: {\n                if (v1334 > 113) {\n                    if (v1334 == 129) {\n                        char * v1335 = dcgettext(NULL, \"invalid maximum number of unchanged stats between opens\", 5); // 0x402224\n                        int64_t v1336 = function_40a130((int64_t)g69, (int32_t)\"invalid maximum number of unchanged stats between opens\" ^ (int32_t)\"invalid maximum number of unchanged stats between opens\", -1, (char *)&g16, (int64_t)v1335, 0); // 0x402244\n                        g25 = v1336;\n                        v1322 = v1330;\n                        v1324 = v1329;\n                        v1326 = 0;\n                        goto lab_0x401f50;\n                    } else {\n                        if (v1334 > 129) {\n                            if (v1334 == 131) {\n                                // 0x4022a8\n                                g45 = 1;\n                                v1322 = v1330;\n                                v1324 = v1329;\n                                v1326 = v1328;\n                                goto lab_0x401f50;\n                            } else {\n                                if (v1334 < 131) {\n                                    char * v1337 = dcgettext(NULL, \"invalid PID\", 5); // 0x402274\n                                    int64_t v1338 = function_40a130((int64_t)g69, (int32_t)\"invalid PID\" ^ (int32_t)\"invalid PID\", 0x7fffffff, (char *)&g16, (int64_t)v1337, 0); // 0x402292\n                                    g47 = v1338;\n                                    v1322 = v1330;\n                                    v1324 = v1329;\n                                    v1326 = 0;\n                                    goto lab_0x401f50;\n                                } else {\n                                    if (v1334 == 132) {\n                                        goto lab_0x402019;\n                                    } else {\n                                        if (v1334 != 133) {\n                                            // 0x403ad7\n                                            function_405d10(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x4021e7\n                                        g44 = 1;\n                                        v1322 = v1330;\n                                        v1324 = v1329;\n                                        v1326 = v1328;\n                                        goto lab_0x401f50;\n                                    }\n                                }\n                            }\n                        } else {\n                            // 0x401f8c\n                            v1322 = v1330;\n                            v1324 = 1;\n                            v1326 = v1328;\n                            if (v1334 == 118) {\n                                goto lab_0x401f50;\n                            } else {\n                                if (v1334 > 118) {\n                                    if (v1334 != 122) {\n                                        if (v1334 != 128) {\n                                          lab_0x403ad7:\n                                            // 0x403ad7\n                                            function_405d10(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x401ffb\n                                        *(char *)&g54 = 1;\n                                        v1322 = v1330;\n                                        v1324 = v1329;\n                                        v1326 = v1328;\n                                    } else {\n                                        // 0x401fa0\n                                        *(char *)&g48 = 0;\n                                        v1322 = v1330;\n                                        v1324 = v1329;\n                                        v1326 = v1328;\n                                    }\n                                    goto lab_0x401f50;\n                                } else {\n                                    if (v1334 != 115) {\n                                        // 0x403ad7\n                                        function_405d10(1);\n                                        // UNREACHABLE\n                                    }\n                                    int64_t v1339 = function_40a1c0((int64_t)g69, 0, (int64_t *)&readfds, 0x406500); // 0x4020e7\n                                    if ((char)v1339 == 0) {\n                                        int64_t v1340 = function_409760((int64_t)g69); // 0x402114\n                                        error(1, (int32_t)\"invalid number of seconds: %s\" ^ (int32_t)\"invalid number of seconds: %s\", dcgettext(NULL, \"invalid number of seconds: %s\", 5));\n                                        v1341 = &g73;\n                                        v1342 = v1340;\n                                        goto lab_0x402148;\n                                    } else {\n                                        int128_t v1343 = __asm_movsd((int64_t)readfds); // 0x4020f0\n                                        __asm_comisd(v1343, v1344);\n                                        v1322 = __asm_movsd_1(v1343);\n                                        v1324 = v1329;\n                                        v1326 = v1328;\n                                        goto lab_0x401f50;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    if (v1334 < 58) {\n                        if (v1334 > 47) {\n                            // 0x403ab2\n                            error(1, (int32_t)\"option used in invalid context -- %c\" ^ (int32_t)\"option used in invalid context -- %c\", dcgettext(NULL, \"option used in invalid context -- %c\", 5));\n                            goto lab_0x403ad7;\n                        } else {\n                            if (v1334 == -131) {\n                                // 0x40207f\n                                function_409c90((int64_t)g39, \"tail\", \"GNU coreutils\", (int64_t)g27, \"Paul Rubin\", \"David MacKenzie\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            if (v1334 == -130) {\n                                // 0x4021fe\n                                function_405d10(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x403ad7;\n                        }\n                    }\n                    // 0x401fb9\n                    v1345 = v1331;\n                    v1346 = v1329;\n                    if (v1334 == 99) {\n                        goto lab_0x402151;\n                    } else {\n                        if (v1334 > 99) {\n                            // 0x402010\n                            v1341 = v1331;\n                            v1342 = v1329;\n                            if (v1334 != 102) {\n                                goto lab_0x402148;\n                            } else {\n                                goto lab_0x402019;\n                            }\n                        } else {\n                            if (v1334 != 70) {\n                                // 0x403ad7\n                                function_405d10(1);\n                                // UNREACHABLE\n                            }\n                            // 0x401fcd\n                            *(char *)&g52 = 1;\n                            g26 = 1;\n                            *(char *)&g54 = 1;\n                            v1322 = v1330;\n                            v1324 = v1329;\n                            v1326 = v1328;\n                            goto lab_0x401f50;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4023f3:;\n    // 0x4023f3\n    int32_t pid3; // 0x401e60\n    if (*(char *)&g54 == 0) {\n        goto lab_0x4027f1;\n    } else {\n        // 0x402403\n        if (*(char *)&g52 == 0) {\n            // 0x4027cb\n            *(char *)&g54 = 0;\n            goto lab_0x4027dc;\n        } else {\n            // 0x402410\n            if (g26 == 2) {\n                goto lab_0x4027dc;\n            } else {\n                // 0x40241d\n                pid3 = g47;\n                if (g47 == 0) {\n                    goto lab_0x402436;\n                } else {\n                    goto lab_0x402427;\n                }\n            }\n        }\n    }\n  lab_0x4027f1:;\n    int32_t v1386 = g47; // 0x4027f1\n    if (v1386 == 0) {\n        goto lab_0x402436;\n    } else {\n        // 0x4027ff\n        pid3 = v1386;\n        if (*(char *)&g52 != 0) {\n            goto lab_0x402427;\n        } else {\n            // 0x40280c\n            error(0, (int32_t)\"warning: PID ignored; --pid=PID is useful only when following\" ^ (int32_t)\"warning: PID ignored; --pid=PID is useful only when following\", dcgettext(NULL, \"warning: PID ignored; --pid=PID is useful only when following\", 5));\n            goto lab_0x402436;\n        }\n    }\n  lab_0x401efd:\n    // 0x401efd\n    v5 = 0;\n    if (strcmp(str4, \"--\") != 0) {\n        goto lab_0x401f2f;\n    } else {\n        goto lab_0x401f0b;\n    }\n  lab_0x4022f5:;\n    int64_t v1387 = 0;\n    char v1388 = *(char *)v1382; // 0x4022f5\n    int64_t v1389 = v1382; // 0x402304\n    char v1390 = v1388; // 0x402304\n    int64_t v1391 = v1382; // 0x402304\n    if (v1388 == 57 || (int32_t)v1388 < 57) {\n        int64_t v1392 = v1389 + 1; // 0x402310\n        char v1393 = *(char *)v1392; // 0x402314\n        v1389 = v1392;\n        v1390 = v1393;\n        v1391 = v1392;\n        while (v1393 == 57 || (int32_t)v1393 < 57) {\n            // 0x402310\n            v1392 = v1389 + 1;\n            v1393 = *(char *)v1392;\n            v1389 = v1392;\n            v1390 = v1393;\n            v1391 = v1392;\n        }\n    }\n    int64_t v1394 = v1391;\n    int64_t v1395 = v1394; // 0x401e60\n    int64_t v1396 = 10; // 0x401e60\n    int64_t v1397 = 1; // 0x401e60\n    int64_t v1398 = 0x1400; // 0x401e60\n    int64_t v1399 = 0; // 0x401e60\n    switch (v1390) {\n        case 99: {\n            // 0x403091\n            v1398 = 10;\n            v1399 = 0;\n        }\n        case 98: {\n          lab_0x402e78:\n            // 0x402e78\n            v1395 = v1394 + 1;\n            v1396 = v1398;\n            v1397 = v1399;\n            // break -> 0x40234a\n            break;\n        }\n        case 108: {\n            // 0x402e81\n            v1398 = 10;\n            v1399 = 1;\n            // branch (via goto) -> 0x402e78\n            goto lab_0x402e78;\n        }\n    }\n    int64_t v1400 = v1397;\n    char v1401 = *(char *)v1395; // 0x40234d\n    v5 = 0;\n    v1383 = v1400;\n    int64_t v1118; // 0x401e60\n    int64_t v1120; // 0x401e60\n    int64_t v1117; // 0x401e60\n    int64_t v1115; // 0x401e60\n    int64_t v1113; // 0x401e60\n    int64_t v1114; // 0x401e60\n    if (*(char *)(v1395 + (int64_t)(v1401 == 102)) != 0) {\n        goto lab_0x401f2f;\n    } else {\n        if (v1382 == v1394) {\n            // 0x402830\n            v3 = v1396 & 0xffffffff;\n            goto lab_0x402391;\n        } else {\n            // 0x40236e\n            if ((function_40a260(v1382, 0, 10, &v3, &g3, v1) & 0xfffffffd) != 0) {\n                int64_t v1402 = function_409760(*v1380); // 0x403ec3\n                char * v1403 = dcgettext(NULL, \"invalid number\", 5); // 0x403ed7\n                int64_t v1404 = (int64_t)v1403; // 0x403ed7\n                error(1, *__errno_location(), \"%s: %s\", v1403, (char *)v1402);\n                v1113 = v1404;\n                v1114 = (int64_t)\"%s: %s\";\n                v1115 = v1404;\n                v1117 = v1402;\n                v1118 = v1387;\n                v1120 = v1400;\n                goto lab_0x403efd;\n            } else {\n                goto lab_0x402391;\n            }\n        }\n    }\n  lab_0x402436:;\n    char v1405 = *(char *)&g50; // 0x402436\n    if (v1405 != 0) {\n        int64_t v1406 = v3; // 0x40243f\n        if (v1406 != 0) {\n            // 0x40244c\n            v3 = v1406 - 1;\n        }\n    }\n    int64_t v1407 = (int64_t)*(int32_t *)0x61233c; // 0x402458\n    int64_t v1408 = &g24; // 0x402461\n    int32_t * v1409 = (int32_t *)1; // 0x402461\n    if (v1332 > v1407) {\n        // 0x402467\n        v1408 = 8 * v1407 + v1333;\n        v1409 = (int32_t *)(0x100000000 * (v1385 - v1407) >> 32);\n    }\n    int64_t v1410 = v1331 & 0xffffffff; // 0x4023fa\n    int32_t * v1411 = v1409; // 0x4024e2\n    int64_t v1412 = v1408;\n    err_num5 = v1411;\n    int64_t v1413 = 8 * (int64_t)v1411 + v1412; // 0x402481\n    bool v1414; // 0x401e60\n    int64_t v1415 = v1414 ? -1 : 1; // 0x40249d\n    int64_t v1416 = 2; // 0x40249d\n    int64_t v1417 = *(int64_t *)v1412;\n    int64_t v1418 = (int64_t)\"-\";\n    unsigned char v1419 = *(char *)v1417; // 0x40249d\n    char v1420 = *(char *)v1418; // 0x40249d\n    char v1421 = v1420; // 0x40249d\n    bool v1422 = false; // 0x40249d\n    int64_t v1423; // 0x401e60\n    int64_t v1424; // 0x401e60\n    while (v1419 == v1420) {\n        v1416--;\n        v1423 = v1418 + v1415;\n        v1424 = v1417 + v1415;\n        v1421 = v1419;\n        v1422 = true;\n        if (v1416 == 0) {\n            // break -> \n            break;\n        }\n        v1417 = v1424;\n        v1418 = v1423;\n        v1419 = *(char *)v1417;\n        v1420 = *(char *)v1418;\n        v1421 = v1420;\n        v1422 = false;\n    }\n    unsigned char v1425 = v1421;\n    int64_t v1426 = !((v1419 < v1425 | v1422)) == v1419 < v1425 ? 1 : 0;\n    int64_t v1427 = v1412 + 8; // 0x4024ab\n    int64_t v1428 = v1427; // 0x4024b2\n    int64_t v1429 = v1426; // 0x4024b2\n    while (v1427 != v1413) {\n        // 0x402490\n        v1416 = 2;\n        v1417 = *(int64_t *)v1428;\n        v1418 = (int64_t)\"-\";\n        v1419 = *(char *)v1417;\n        v1420 = *(char *)v1418;\n        v1421 = v1420;\n        v1422 = false;\n        while (v1419 == v1420) {\n            v1416--;\n            v1423 = v1418 + v1415;\n            v1424 = v1417 + v1415;\n            v1421 = v1419;\n            v1422 = true;\n            if (v1416 == 0) {\n                // break -> \n                break;\n            }\n            v1417 = v1424;\n            v1418 = v1423;\n            v1419 = *(char *)v1417;\n            v1420 = *(char *)v1418;\n            v1421 = v1420;\n            v1422 = false;\n        }\n        v1425 = v1421;\n        v1426 = !((v1419 < v1425 | v1422)) == v1419 < v1425 ? 1 : v1429;\n        v1427 = v1428 + 8;\n        v1428 = v1427;\n        v1429 = v1426;\n    }\n    char v1430; // 0x401e60\n    if ((char)v1426 == 0) {\n        goto lab_0x40252c;\n    } else {\n        int32_t v1431 = g26; // 0x4024b9\n        if (v1431 == 1) {\n            // 0x403e0f\n            function_409510(4, (int64_t)\"-\");\n            error(1, (int32_t)\"cannot follow %s by name\" ^ (int32_t)\"cannot follow %s by name\", dcgettext(NULL, \"cannot follow %s by name\", 5));\n            goto lab_0x403e46;\n        } else {\n            // 0x4024c8\n            if (*(char *)&g52 == 0) {\n                // 0x4030b5\n                v1430 = v1405;\n                if (v3 != 0) {\n                    goto lab_0x402544;\n                } else {\n                    goto lab_0x4030c4;\n                }\n            } else {\n                // 0x4024d5\n                if (g47 != 0) {\n                    goto lab_0x40283f;\n                } else {\n                    if (v1411 == (int32_t *)1 == v1431 == 2) {\n                        int32_t v1432 = __fxstat(1, 0, (struct stat *)&readfds); // 0x402508\n                        uint32_t v1433; // 0x401e60\n                        if ((v1433 & 0xf000) == 0x8000 || v1432 != 0) {\n                            goto lab_0x40283f;\n                        } else {\n                            goto lab_0x40252c;\n                        }\n                    } else {\n                        goto lab_0x40283f;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40252c:\n    // 0x40252c\n    if (v3 == 0 == *(char *)&g52 == 0) {\n        // 0x40252c\n        v1430 = *(char *)&g50;\n        goto lab_0x4030c4;\n    } else {\n        goto lab_0x402544;\n    }\n  lab_0x402427:\n    // 0x402427\n    if (kill(pid3, 0) != 0) {\n        // 0x40350b\n        if (*__errno_location() == 38) {\n            // 0x403519\n            error(0, (int32_t)\"warning: --pid=PID is not supported on this system\" ^ (int32_t)\"warning: --pid=PID is not supported on this system\", dcgettext(NULL, \"warning: --pid=PID is not supported on this system\", 5));\n            g47 = 0;\n        }\n    }\n    goto lab_0x402436;\n  lab_0x4027dc:\n    // 0x4027dc\n    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"warning: --retry ignored; --retry is useful only when following\", 5));\n    goto lab_0x4027f1;\n  lab_0x402544:;\n    int64_t v1434 = (int64_t)err_num5; // 0x402544\n    int64_t v1435 = 96 * v1434; // 0x402544\n    int64_t v1436 = function_409dd0(v1435); // 0x402551\n    int64_t v1437 = v1436; // 0x40255b\n    int64_t v1438 = *(int64_t *)v1412; // 0x402560\n    int64_t v1439 = v1412 + 8; // 0x402564\n    *(int64_t *)v1437 = v1438;\n    v1437 += 96;\n    int64_t v1440 = v1439; // 0x402573\n    while (v1439 != v1413) {\n        // 0x402560\n        v1438 = *(int64_t *)v1440;\n        v1439 = v1440 + 8;\n        *(int64_t *)v1437 = v1438;\n        v1437 += 96;\n        v1440 = v1439;\n    }\n    int32_t v1441 = v1329; // 0x402575\n    if (v1441 == 1) {\n        // 0x402872\n        g49 = 1;\n        goto lab_0x40258d;\n    } else {\n        if (v1441 != 0) {\n            goto lab_0x40258d;\n        } else {\n            // 0x402582\n            if (err_num5 != (int32_t *)1) {\n                // 0x402872\n                g49 = 1;\n                goto lab_0x40258d;\n            } else {\n                goto lab_0x40258d;\n            }\n        }\n    }\n  lab_0x402391:\n    // 0x402391\n    *(char *)&g50 = (char)v1387;\n    *(char *)&g53 = (char)v1400;\n    *(char *)&g52 = (char)(v1401 == 102);\n    v5 = 1;\n    v1383 = v1400;\n    goto lab_0x401f2f;\n  lab_0x4030c4:\n    // 0x4030c4\n    if (v1430 == 0) {\n        // 0x4029a3\n        return 0;\n    }\n    goto lab_0x402544;\n  lab_0x403e46:\n    // 0x403e46\n    __assert_fail(\"beg\", \"src/tail.c\", 713, \"pipe_lines\");\n    int64_t v328 = v1330; // 0x403e5a\n    int32_t v524; // 0x401e60\n    int32_t v329 = v524; // 0x403e5a\n    int64_t v525; // 0x401e60\n    int64_t v330 = v525; // 0x403e5a\n    int32_t v526; // 0x401e60\n    int32_t v331 = v526; // 0x403e5a\n    int32_t v527; // 0x401e60\n    int32_t v332 = v527; // 0x403e5a\n    int32_t v528; // 0x401e60\n    int32_t v333 = v528; // 0x403e5a\n    struct stat * v529; // 0x401e60\n    struct stat * v334 = v529; // 0x403e5a\n    int32_t v530; // 0x401e60\n    int32_t v335 = v530; // 0x403e5a\n    int32_t v531; // 0x401e60\n    int32_t v336 = v531; // 0x403e5a\n    int32_t v533; // 0x401e60\n    int32_t v337 = v533; // 0x403e5a\n    int32_t v534; // 0x401e60\n    int32_t v338 = v534; // 0x403e5a\n    int32_t v537; // 0x401e60\n    int32_t v339 = v537; // 0x403e5a\n    int32_t v538; // 0x401e60\n    int32_t v340 = v538; // 0x403e5a\n    int64_t v539; // 0x401e60\n    int64_t v341 = v539; // 0x403e5a\n    int32_t v540; // 0x401e60\n    int32_t v342 = v540; // 0x403e5a\n    bool v541; // 0x401e60\n    bool v343 = v541; // 0x403e5a\n    int128_t v542; // 0x401e60\n    int128_t v344 = v542; // 0x403e5a\n    int64_t v345 = v1412; // 0x403e5a\n    int64_t v347 = v1384; // 0x403e5a\n    int64_t v348 = v1410; // 0x403e5a\n    int64_t v544; // 0x401e60\n    int64_t v349 = v544; // 0x403e5a\n    goto lab_0x403e5f;\n  lab_0x403efd:;\n    // 0x403efd\n    int32_t v1102; // 0x401e60\n    int64_t v1477 = 0x100000000000000 * (int64_t)v1102 >> 56; // 0x403efd\n    int64_t v1478 = function_407800((char)v1477, v1115); // 0x403f05\n    int64_t v703 = v1477; // 0x403f0d\n    if (v1478 == 0) {\n      lab_0x4045da:\n        // 0x4045da\n        function_40a020(v703);\n        // UNREACHABLE\n    }\n    // 0x403f13\n    int64_t v1085; // 0x401e60\n    int64_t v1128 = v1085; // 0x403f18\n    int32_t v1087; // 0x401e60\n    int32_t v1129 = v1087; // 0x403f18\n    int64_t v1089; // 0x401e60\n    int64_t v1130 = v1089; // 0x403f18\n    int32_t v1091; // 0x401e60\n    int32_t v1131 = v1091; // 0x403f18\n    int32_t v1093; // 0x401e60\n    int32_t v1132 = v1093; // 0x403f18\n    int32_t v1095; // 0x401e60\n    int32_t v1133 = v1095; // 0x403f18\n    struct stat * v1097; // 0x401e60\n    struct stat * v1134 = v1097; // 0x403f18\n    int32_t v1099; // 0x401e60\n    int32_t v1135 = v1099; // 0x403f18\n    int32_t v1100; // 0x401e60\n    int32_t v1136 = 0x1000000 * v1100 >> 24; // 0x403f18\n    int32_t v1138 = v1100; // 0x403f18\n    int32_t v1139 = v1102; // 0x403f18\n    int32_t v1104; // 0x401e60\n    int32_t v1140 = v1104; // 0x403f18\n    int32_t v1105; // 0x401e60\n    int32_t v1141 = v1105; // 0x403f18\n    int64_t v1107; // 0x401e60\n    int64_t v1142 = v1107; // 0x403f18\n    bool v1109; // 0x401e60\n    bool v1143 = v1109; // 0x403f18\n    int128_t v1111; // 0x401e60\n    int128_t v1144 = v1111; // 0x403f18\n    int64_t v1145 = v1113; // 0x403f18\n    int64_t v1146 = v1114; // 0x403f18\n    int64_t v1147 = v1115; // 0x403f18\n    int64_t v1148 = v1117; // 0x403f18\n    int64_t v1149 = v1118; // 0x403f18\n    int64_t v1150 = v1120; // 0x403f18\n    goto lab_0x403f1c;\n  lab_0x40258d:;\n    int64_t v272 = v1330; // 0x4025af\n    int32_t v273 = v1435; // 0x4025af\n    int64_t v274 = v1436; // 0x4025af\n    int32_t v275 = -1; // 0x4025af\n    int32_t v276 = 1; // 0x4025af\n    int32_t v277 = 0x6000000000 * v1434 / 0x100000000 + v1436; // 0x4025af\n    int64_t v284 = v1438; // 0x4025af\n    int64_t v286 = v1384; // 0x4025af\n    int64_t v287 = v1436; // 0x4025af\n    int64_t v288 = v1436; // 0x4025af\n    goto lab_0x4025b0;\n  lab_0x403e5f:\n    // 0x403e5f\n    error(1, *__errno_location(), dcgettext(NULL, \"standard output\", 5));\n    int64_t v144 = v328; // 0x403e84\n    int32_t v146 = v329; // 0x403e84\n    int64_t v148 = v330; // 0x403e84\n    int32_t v150 = v331; // 0x403e84\n    int32_t v152 = v332; // 0x403e84\n    int32_t v154 = v333; // 0x403e84\n    struct stat * v156 = v334; // 0x403e84\n    int32_t v158 = v335; // 0x403e84\n    int32_t v160 = v336; // 0x403e84\n    int32_t v162 = v337; // 0x403e84\n    int32_t v164 = v338; // 0x403e84\n    int32_t v166 = v339; // 0x403e84\n    int32_t v168 = v340; // 0x403e84\n    int64_t v170 = v341; // 0x403e84\n    int32_t v172 = v342; // 0x403e84\n    bool v174 = v343; // 0x403e84\n    int128_t v176 = v344; // 0x403e84\n    int64_t v178 = v345; // 0x403e84\n    int64_t v179 = v347; // 0x403e84\n    int64_t v181 = v348; // 0x403e84\n    int64_t v183 = v349; // 0x403e84\n    goto lab_0x403e89;\n  lab_0x40283f:\n    // 0x40283f\n    if (isatty(0) != 0) {\n        // 0x40284e\n        error(0, (int32_t)\"warning: following standard input indefinitely is ineffective\" ^ (int32_t)\"warning: following standard input indefinitely is ineffective\", dcgettext(NULL, \"warning: following standard input indefinitely is ineffective\", 5));\n    }\n    goto lab_0x40252c;\n  lab_0x403f1c:\n    // 0x403f1c\n    v1378 = v1150;\n    int64_t v1458 = v1149;\n    int64_t v1452 = v1148;\n    int64_t v1446 = v1146;\n    int64_t v1459 = v1145;\n    v1377 = v1144;\n    v1376 = v1143;\n    v1375 = v1142;\n    int32_t v1455 = v1141;\n    v1374 = v1140;\n    v1365 = v1139;\n    v1373 = v1138;\n    int32_t v1460 = v1136;\n    int32_t v1454 = v1135;\n    v1372 = v1134;\n    v1371 = v1133;\n    v1370 = v1132;\n    v1369 = v1131;\n    v1368 = v1130;\n    v1367 = v1129;\n    v1366 = v1128;\n    int64_t v1461 = v1147 + 96; // 0x403f1c\n    int64_t v1450 = v1371; // 0x403f20\n    int64_t v706 = v1366; // 0x403f25\n    int32_t v707 = v1367; // 0x403f25\n    int64_t v708 = v1368; // 0x403f25\n    int32_t v709 = v1369; // 0x403f25\n    int32_t v710 = v1370; // 0x403f25\n    int32_t v711 = v1371; // 0x403f25\n    struct stat * v712 = v1372; // 0x403f25\n    int32_t v713 = v1454; // 0x403f25\n    int32_t v714 = v1460; // 0x403f25\n    int32_t v715 = v1373; // 0x403f25\n    int32_t v716 = v1365; // 0x403f25\n    int32_t v717 = v1374; // 0x403f25\n    int32_t v718 = v1455; // 0x403f25\n    int64_t v719 = v1375; // 0x403f25\n    bool v720 = v1376; // 0x403f25\n    int128_t v721 = v1377; // 0x403f25\n    int64_t v722 = v1459; // 0x403f25\n    int64_t v723 = v1446; // 0x403f25\n    int64_t v724 = v1461; // 0x403f25\n    int64_t v725 = v1452; // 0x403f25\n    int64_t v726 = v1458; // 0x403f25\n    int64_t v727 = v1378; // 0x403f25\n    bool v1171; // 0x401e60\n    int64_t v1174; // 0x401e60\n    int64_t v1173; // 0x401e60\n    int32_t v1164; // 0x401e60\n    int32_t v1163; // 0x401e60\n    int32_t v1161; // 0x401e60\n    int64_t v1170; // 0x401e60\n    int32_t v1169; // 0x401e60\n    int64_t v1162; // 0x401e60\n    int32_t v1165; // 0x401e60\n    int32_t v1167; // 0x401e60\n    int64_t v1160; // 0x401e60\n    struct stat * v1166; // 0x401e60\n    int32_t v1168; // 0x401e60\n    int128_t v1172; // 0x401e60\n    if (v1461 != v1450) {\n        goto lab_0x403c9f;\n    } else {\n        // 0x403f2b\n        if (g26 == 2) {\n            // 0x404391\n            v1160 = v1366;\n            v1161 = v1367;\n            v1162 = v1368;\n            v1163 = v1369;\n            v1164 = v1370;\n            v1165 = v1371;\n            v1166 = v1372;\n            v1167 = v1373;\n            v1168 = v1365;\n            v1169 = v1374;\n            v1170 = v1375;\n            v1171 = v1376;\n            v1172 = v1377;\n            v1173 = v1459;\n            v1174 = v1378;\n            if ((char)v1458 != 0) {\n                goto lab_0x403d9b;\n            } else {\n                // 0x40439a\n                if ((char)v1460 == 0) {\n                    // 0x4029a3\n                    return 1;\n                }\n                goto lab_0x403f3d;\n            }\n        } else {\n            goto lab_0x403f3d;\n        }\n    }\n  lab_0x4025b0:;\n    int64_t v1046 = v288;\n    int64_t v442 = v287;\n    int64_t v440 = v286;\n    int128_t v283; // 0x401e60\n    int128_t v467 = v283;\n    bool v282; // 0x401e60\n    bool v466 = v282;\n    int32_t v281; // 0x401e60\n    int32_t v436 = v281;\n    int64_t v280; // 0x401e60\n    int64_t v434 = v280;\n    int32_t v279; // 0x401e60\n    int32_t v432 = v279;\n    int32_t v278; // 0x401e60\n    int32_t v430 = v278;\n    int32_t v464 = v277;\n    int32_t v463 = v276;\n    int32_t v462 = v275;\n    int64_t v461 = v274;\n    int32_t v460 = v273;\n    int64_t v459 = v272;\n    int64_t v421 = v3; // 0x4025b0\n    struct stat * v423 = (struct stat *)v421; // 0x4025c2\n    int64_t * v1043 = (int64_t *)v442; // 0x4025c7\n    int64_t v1462 = *v1043; // 0x4025c7\n    int64_t v1463 = v466 ? -1 : 1; // 0x4025cd\n    int64_t v1464 = 2; // 0x401e60\n    int64_t v1465 = v1462;\n    int64_t v1466 = (int64_t)\"-\";\n    unsigned char v1467 = *(char *)v1465; // 0x4025cd\n    char v1468 = *(char *)v1466; // 0x4025cd\n    char v1469 = v1468; // 0x4025cd\n    bool v1470 = false; // 0x4025cd\n    while (v1467 == v1468) {\n        int64_t v1471 = v1464 - 1; // 0x4025cd\n        int64_t v1472 = v1466 + v1463; // 0x4025cd\n        int64_t v1473 = v1465 + v1463; // 0x4025cd\n        v1464 = v1471;\n        v1469 = v1467;\n        v1470 = true;\n        if (v1471 == 0) {\n            // break -> \n            break;\n        }\n        v1465 = v1473;\n        v1466 = v1472;\n        v1467 = *(char *)v1465;\n        v1468 = *(char *)v1466;\n        v1469 = v1468;\n        v1470 = false;\n    }\n    unsigned char v1474 = v1469;\n    int64_t v1475 = (int64_t)!((v1467 < v1474 | v1470)) - (int64_t)(v1467 < v1474); // 0x4025d2\n    int64_t v1044 = v1475 % 256 | v284 & -256; // 0x4025d2\n    int32_t v465 = v1475; // 0x4025d8\n    int64_t v1457; // 0x401e60\n    int64_t v1054; // 0x401e60\n    int32_t v1456; // 0x401e60\n    int32_t v1047; // 0x401e60\n    char v1042; // 0x4028c3\n    int32_t v1045; // 0x4028ca\n    if (v465 != 0) {\n        int64_t v1476 = function_406780(v1462, 0, v1044); // 0x4028be\n        v1042 = *(char *)&g54;\n        v1045 = v1476;\n        if (v1042 == 0) {\n            // 0x402c48\n            *(char *)(v442 + 54) = 1;\n            if (v1045 == -1) {\n                goto lab_0x4028e4;\n            } else {\n                // 0x402c58\n                v1047 = v1045;\n                v1054 = 0;\n                goto lab_0x4025f8;\n            }\n        } else {\n            if (v1045 != -1) {\n                // 0x40309e\n                v1456 = v1045;\n                v1457 = 0;\n                goto lab_0x4025f3;\n            } else {\n                // 0x4028df\n                *(char *)(v442 + 54) = 0;\n                goto lab_0x4028e4;\n            }\n        }\n    } else {\n        // 0x4025e4\n        g46 = 1;\n        v1456 = 0;\n        v1457 = v1475;\n        goto lab_0x4025f3;\n    }\n  lab_0x403e89:;\n    char * format16 = dcgettext(NULL, \"write error\", 5); // 0x403e95\n    error(1, *__errno_location(), format16);\n    int64_t v589 = v144; // 0x403eae\n    int32_t v590 = v146; // 0x403eae\n    int64_t v591 = v148; // 0x403eae\n    int32_t v592 = v150; // 0x403eae\n    int32_t v593 = v152; // 0x403eae\n    int32_t v594 = v154; // 0x403eae\n    struct stat * v595 = v156; // 0x403eae\n    int32_t v596 = v158; // 0x403eae\n    int32_t v597 = v160; // 0x403eae\n    int32_t v598 = v162; // 0x403eae\n    int32_t v599 = v164; // 0x403eae\n    int32_t v600 = v166; // 0x403eae\n    int32_t v601 = v168; // 0x403eae\n    int64_t v602 = v170; // 0x403eae\n    int32_t v603 = v172; // 0x403eae\n    bool v604 = v174; // 0x403eae\n    int128_t v605 = v176; // 0x403eae\n    int64_t v606 = (int64_t)format16; // 0x403eae\n    int64_t v607 = v178; // 0x403eae\n    int64_t v608 = v179; // 0x403eae\n    int64_t v609 = v181; // 0x403eae\n    int64_t v610 = v183; // 0x403eae\n    goto lab_0x403eb3;\n  lab_0x403c9f:;\n    int64_t v1121 = v727;\n    int64_t v1119 = v726;\n    int64_t v1077 = v725;\n    int64_t v1116 = v724;\n    int128_t v1112 = v721;\n    bool v1110 = v720;\n    int64_t v1108 = v719;\n    int32_t v1106 = v718;\n    int32_t v1186 = v717;\n    int32_t v1103 = v716;\n    int32_t v1101 = v715;\n    int32_t v1137 = v714;\n    int32_t v1083 = v713;\n    struct stat * v1098 = v712;\n    int32_t v1096 = v711;\n    int32_t v1094 = v710;\n    int32_t v1092 = v709;\n    int64_t v1090 = v708;\n    int32_t v1088 = v707;\n    int64_t v1086 = v706;\n    v1128 = v1086;\n    v1129 = v1088;\n    v1130 = v1090;\n    v1131 = v1092;\n    v1132 = v1094;\n    v1133 = v1096;\n    v1134 = v1098;\n    v1135 = v1083;\n    v1136 = v1137;\n    v1138 = v1101;\n    v1139 = v1103;\n    v1140 = v1186;\n    v1141 = v1106;\n    v1142 = v1108;\n    v1143 = v1110;\n    v1144 = v1112;\n    v1145 = v722;\n    v1146 = v723;\n    v1147 = v1116;\n    v1148 = v1077;\n    v1149 = v1119;\n    v1150 = v1121;\n    int64_t v854; // 0x401e60\n    int64_t v856; // 0x401e60\n    int64_t * v1082; // 0x403ca9\n    int64_t v1187; // 0x403ca9\n    int64_t v857; // 0x401e60\n    if (*(char *)(v1116 + 52) != 0) {\n        goto lab_0x403f1c;\n    } else {\n        // 0x403ca9\n        v1082 = (int64_t *)v1116;\n        v1187 = *v1082;\n        v857 = v1110 ? -1 : 1;\n        v854 = -1;\n        v856 = v1187;\n        goto lab_dec_label_pc_unknown;\n    }\n  lab_0x403eb3:;\n    int64_t v611 = v589; // 0x403eba\n    int32_t v612 = v590; // 0x403eba\n    int64_t v613 = v591; // 0x403eba\n    int32_t v614 = v592; // 0x403eba\n    int32_t v615 = v593; // 0x403eba\n    int32_t v616 = v594; // 0x403eba\n    struct stat * v617 = v595; // 0x403eba\n    int32_t v618 = v596; // 0x403eba\n    int32_t v619 = v597; // 0x403eba\n    int32_t v620 = v598; // 0x403eba\n    int32_t v621 = v599; // 0x403eba\n    int32_t v622 = v600; // 0x403eba\n    int32_t v623 = v601; // 0x403eba\n    int64_t v624 = v602; // 0x403eba\n    int32_t v625 = v603; // 0x403eba\n    bool v626 = v604; // 0x403eba\n    int128_t v627 = v605; // 0x403eba\n    int64_t v628 = -2; // 0x403eba\n    int64_t v629 = v606; // 0x403eba\n    int64_t v630 = v607; // 0x403eba\n    int64_t v631 = v608; // 0x403eba\n    int64_t v632 = v609; // 0x403eba\n    int64_t v633 = v610; // 0x403eba\n    goto lab_0x40338d;\n  lab_0x403f3d:\n    // 0x403f3d\n    v1361 = (int64_t)v1372;\n    int64_t v1188 = v1368 - 96 + (int64_t)v1367; // bp-368, 0x403f51\n    int64_t v1444 = v1368;\n    int64_t v1445 = v1446;\n    int64_t v1447 = v1445; // 0x403fb6\n    int64_t v1448; // 0x401e60\n    if (*(char *)(v1444 + 52) == 0) {\n        // 0x403fb8\n        if (g26 != 1) {\n            // 0x403f5b\n            v1448 = v1445;\n            if (*(int32_t *)(v1444 + 56) != -1) {\n                // 0x403f61\n                v1362 = (int64_t *)v1444;\n                v1363 = *v1362;\n                v1448 = v1361;\n                if (__xstat(1, (char *)v1363, v1372) == 0) {\n                    // 0x403f75\n                    if (*(int64_t *)(v1444 + 32) != (int64_t)readfds) {\n                        goto lab_0x404580_2;\n                    }\n                    // 0x403f87\n                    v1448 = v1361;\n                    if (*(int64_t *)(v1444 + 40) != v1) {\n                        goto lab_0x404580_2;\n                    }\n                }\n            }\n        } else {\n            // 0x403fc1\n            function_4056e0(v1444, 0, v1445);\n            v1448 = v1445;\n        }\n        // 0x403f99\n        function_404f00(v1444, &v1188);\n        v1447 = v1448;\n    }\n    int64_t v1449 = v1444 + 96; // 0x403fa9\n    while (v1449 != v1450) {\n        // 0x403fb2\n        v1444 = v1449;\n        v1445 = v1447;\n        v1447 = v1445;\n        if (*(char *)(v1444 + 52) == 0) {\n            // 0x403fb8\n            if (g26 != 1) {\n                // 0x403f5b\n                v1448 = v1445;\n                if (*(int32_t *)(v1444 + 56) != -1) {\n                    // 0x403f61\n                    v1362 = (int64_t *)v1444;\n                    v1363 = *v1362;\n                    v1448 = v1361;\n                    if (__xstat(1, (char *)v1363, v1372) == 0) {\n                        // 0x403f75\n                        if (*(int64_t *)(v1444 + 32) != (int64_t)readfds) {\n                            goto lab_0x404580_2;\n                        }\n                        // 0x403f87\n                        v1448 = v1361;\n                        if (*(int64_t *)(v1444 + 40) != v1) {\n                            goto lab_0x404580_2;\n                        }\n                    }\n                }\n            } else {\n                // 0x403fc1\n                function_4056e0(v1444, 0, v1445);\n                v1448 = v1445;\n            }\n            // 0x403f99\n            function_404f00(v1444, &v1188);\n            v1447 = v1448;\n        }\n        // 0x403fa9\n        v1449 = v1444 + 96;\n    }\n    int64_t v1451 = v1452 + 17; // 0x404012\n    int64_t v1453 = function_409dd0(v1451); // 0x404023\n    int64_t v929 = v1366; // 0x404046\n    int32_t v930 = v1367; // 0x404046\n    int64_t v931 = v1368; // 0x404046\n    int32_t v932 = v1369; // 0x404046\n    int32_t v933 = v1370; // 0x404046\n    int32_t v934 = v1371; // 0x404046\n    struct stat * v935 = (struct stat *)v1451; // 0x404046\n    int32_t v936 = v1454; // 0x404046\n    int32_t v937 = v1378; // 0x404046\n    int32_t v938 = v1373; // 0x404046\n    int32_t v939 = v1365; // 0x404046\n    int32_t v940 = 3; // 0x404046\n    int32_t v941 = v1455; // 0x404046\n    int64_t v942 = v1375; // 0x404046\n    int32_t v943 = v1453; // 0x404046\n    bool v944 = v1376; // 0x404046\n    int128_t v945 = v1377; // 0x404046\n    int64_t v946 = 0; // 0x404046\n    int64_t v947 = 1 << v1378 % 64; // 0x404046\n    int64_t v948 = v1378; // 0x404046\n    int64_t v949 = 0; // 0x404046\n    int64_t v950 = v1361; // 0x404046\n    goto lab_0x40404b_3;\n  lab_0x4025f3:\n    // 0x4025f3\n    *(char *)(v442 + 54) = 1;\n    v1047 = v1456;\n    v1054 = v1457;\n    goto lab_0x4025f8;\n  lab_0x40338d:;\n    int64_t v1442 = function_404a20(0, v631, (int32_t)v630, v628); // 0x403394\n    int64_t * v1443 = (int64_t *)(v632 + 8); // 0x40339f\n    *v1443 = *v1443 + v1442;\n    int64_t v192 = v611; // 0x4033a3\n    int32_t v193 = v612; // 0x4033a3\n    int64_t v194 = v613; // 0x4033a3\n    int32_t v195 = v614; // 0x4033a3\n    int32_t v196 = v615; // 0x4033a3\n    int32_t v197 = v616; // 0x4033a3\n    struct stat * v198 = v617; // 0x4033a3\n    int32_t v199 = v618; // 0x4033a3\n    int32_t v200 = 0x1000000 * (v619 | (int32_t)(v1442 != 0)) >> 24; // 0x4033a3\n    int32_t v201 = v620; // 0x4033a3\n    int32_t v202 = v621; // 0x4033a3\n    int32_t v203 = v622; // 0x4033a3\n    int32_t v204 = v623; // 0x4033a3\n    int64_t v205 = v624; // 0x4033a3\n    int32_t v206 = v625; // 0x4033a3\n    bool v207 = v626; // 0x4033a3\n    int128_t v208 = v627; // 0x4033a3\n    int64_t v209 = v628; // 0x4033a3\n    int64_t v210 = v630 & 0xffffff00 | (int64_t)(v1442 != 0); // 0x4033a3\n    int64_t v211 = v629; // 0x4033a3\n    int64_t v212 = v630; // 0x4033a3\n    int64_t v213 = v631; // 0x4033a3\n    int64_t v214 = v631; // 0x4033a3\n    int64_t v215 = v632; // 0x4033a3\n    int64_t v216 = v633; // 0x4033a3\n    goto lab_0x4033a7;\n  lab_0x403d9b:\n    // 0x403d9b\n    function_4072a0((char)v1168);\n    *__errno_location() = 0;\n    v228 = v1160;\n    v229 = v1161;\n    v224 = v1162;\n    v230 = v1163;\n    v231 = v1164;\n    v220 = v1165;\n    v232 = v1166;\n    v233 = v1167;\n    v234 = v1169;\n    v235 = v1170;\n    v236 = v1171;\n    v237 = v1172;\n    v238 = v1173;\n    v222 = v1174;\n    goto lab_0x403db0;\n  lab_0x40404b_3:\n    // 0x40404b\n    v951 = v950;\n    v952 = v947;\n    v953 = v939;\n    v954 = v938;\n    v955 = v937;\n    v956 = v936;\n    v957 = v934;\n    v958 = v933;\n    v959 = v931;\n    v960 = v930;\n    v961 = v929;\n    v962 = v953;\n    int32_t v963 = 0x1000000 * v954 >> 24;\n    v964 = (char *)v951;\n    v965 = (int64_t)&err_num5 + 320;\n    v966 = &timeout;\n    readfds2 = (struct _TYPEDEF_fd_set *)v951;\n    int64_t v967 = v956;\n    v968 = v932;\n    v969 = v935;\n    v970 = v940;\n    v971 = v941;\n    v972 = v942;\n    v973 = v943;\n    v974 = v944;\n    v975 = v945;\n    v976 = v946;\n    v977 = v948;\n    v978 = v949;\n    bool v844; // 0x401e60\n    int64_t v849; // 0x401e60\n    int64_t v850; // 0x401e60\n    int64_t v851; // 0x401e60\n    int64_t v852; // 0x401e60\n    int64_t v848; // 0x401e60\n    int64_t v847; // 0x401e60\n    int64_t v979; // 0x401e60\n    int64_t v846; // 0x401e60\n    int32_t v833; // 0x401e60\n    int32_t v832; // 0x401e60\n    int32_t v830; // 0x401e60\n    int64_t v842; // 0x401e60\n    int32_t v840; // 0x401e60\n    int64_t v831; // 0x401e60\n    int32_t v834; // 0x401e60\n    int32_t v838; // 0x401e60\n    int64_t v829; // 0x401e60\n    int32_t v836; // 0x401e60\n    struct stat * v835; // 0x401e60\n    int32_t v843; // 0x401e60\n    int32_t v839; // 0x401e60\n    int32_t v841; // 0x401e60\n    int32_t v837; // 0x401e60\n    int32_t v980; // 0x401e60\n    int32_t v981; // 0x40419b\n    int64_t v982; // 0x404235\n    int64_t v983; // 0x40424d\n    int32_t v984; // 0x404463\n    int128_t v845; // 0x401e60\n    while (true) {\n      lab_0x40404b_2:\n        // 0x40404b\n        v985 = v977;\n        v986 = v972;\n        v987 = v968;\n        v980 = v985;\n        nfds = v980 >= 0 == (v980 != 0) ? v980 + 1 : 2;\n        int64_t v988 = v978;\n        int64_t v989 = v976;\n        int128_t v990 = v975;\n        bool v991 = v974;\n        v992 = v973;\n        int32_t v993 = v971;\n        v994 = v970;\n        v995 = v969;\n        if (g26 == 1) {\n            // 0x4042b9\n            if (*(char *)&g54 == 0) {\n                // 0x4042c6\n                if (function_406bd0(v962) == 0) {\n                    // break (via goto) -> 0x4042d9\n                    goto lab_0x4042d9;\n                }\n            }\n        }\n        // 0x404058\n        v996 = v990;\n        v997 = v993;\n        while (v989 >= v988) {\n            // 0x40404b\n            while (true) {\n                // 0x404061\n                v998 = v997;\n                v999 = v996;\n                int32_t pid = g47; // 0x404061\n                v1000 = v998;\n                v1001 = v999;\n                if (pid == 0) {\n                    goto lab_0x4040b4;\n                } else {\n                    if ((char)v998 != 0) {\n                        // 0x404375\n                        exit(0);\n                        // UNREACHABLE\n                    }\n                    // 0x404076\n                    if (kill(pid, 0) == 0) {\n                        goto lab_0x404148;\n                    } else {\n                        // 0x404085\n                        if (*__errno_location() == 1) {\n                            goto lab_0x404148;\n                        } else {\n                            // 0x404093\n                            timeout = 0;\n                            v1000 = v963;\n                            v1001 = v999;\n                            goto lab_0x4040b4;\n                        }\n                    }\n                }\n            }\n            int64_t v1002 = (int64_t)v995; // 0x404302\n            int64_t v1003 = v992;\n            v1004 = function_409780(v980, v1003, v1002);\n            int64_t v1005 = v989; // 0x40431a\n            if (v1004 != 0) {\n                // 0x404320\n                if (v1004 != -1) {\n                    goto lab_0x404186;\n                }\n                int32_t * v1006 = __errno_location(); // 0x40432c\n                int32_t v1007 = *v1006; // 0x404331\n                v1008 = 0;\n                v1005 = 0;\n                if (v1007 != 22) {\n                    goto lab_0x404336_2;\n                }\n            }\n            int64_t v1009 = v1005;\n            v1008 = v1009;\n            if (v994 % 256 == 0) {\n                goto lab_0x404336_2;\n            }\n            int64_t v1010 = 2 * v1002; // 0x4043c8\n            int64_t v1011 = function_409e30(v1003, v1010); // 0x4043d3\n            v988 = v978;\n            v989 = v976;\n            v990 = v975;\n            v991 = v974;\n            v992 = v973;\n            v993 = v971;\n            v994 = v970;\n            v995 = v969;\n            if (g26 == 1) {\n                // 0x4042b9\n                if (*(char *)&g54 == 0) {\n                    // 0x4042c6\n                    if (function_406bd0(v962) == 0) {\n                        // break (via goto) -> 0x4042d9\n                        goto lab_0x4042d9;\n                    }\n                }\n            }\n            // 0x404058\n            v996 = v990;\n            v997 = v993;\n        }\n      lab_0x404186:\n        // 0x404186\n        v1012 = v988;\n        v1013 = v990;\n        v1014 = v991;\n        v1015 = v993;\n        v1016 = v989 + (int64_t)v992;\n        uint32_t v1017 = *(int32_t *)(v1016 + 12); // 0x40418f\n        int64_t v1018 = v1017; // 0x40418f\n        uint32_t v1019 = *(int32_t *)(v1016 + 4); // 0x404192\n        v981 = *(int32_t *)v1016;\n        v1020 = v989 + 16 + v1018;\n        if ((v1019 & 1024) == 0) {\n            // 0x404298\n            v1021 = v1018;\n            if (v1017 == 0) {\n                goto lab_0x4042a0;\n            }\n        } else {\n            if (v1017 == 0) {\n                // 0x404411\n                goto lab_0x404411_2;\n            }\n        }\n        int32_t v1022 = v1020;\n        v1023 = v985 & 0xffffffff;\n        char * str3 = (char *)(v1016 + 16); // 0x4041e0\n        int64_t v1024 = v1019;\n        int64_t v1025 = 0;\n        int64_t v1026 = v959;\n        int64_t v1027 = v1024; // 0x404200\n        int64_t v1028; // 0x404216\n        int64_t v1029; // 0x40423a\n        int64_t * v1030; // 0x40445d\n        int32_t * err_num7; // 0x404470\n        char * format8; // 0x4044ac\n        if (*(int32_t *)(v1026 + 72) == v981) {\n            // 0x404202\n            v1028 = *(int64_t *)v1026;\n            v1027 = v1024 & 0xffffffff;\n            if (strcmp(str3, (char *)(v1028 + *(int64_t *)(v1026 + 80))) == 0) {\n                // 0x40422a\n                v982 = 0x100000000 * v1020 >> 32;\n                v1029 = 96 * v1025;\n                v983 = v1029 + v959;\n                if ((v1024 & 512) == 0) {\n                    // 0x404459\n                    v1030 = (int64_t *)v983;\n                    v984 = inotify_add_watch(v980, (char *)*v1030, v956);\n                    v979 = v967;\n                    if (v984 >= 0) {\n                        goto lab_0x4044cd;\n                    } else {\n                        // 0x404470\n                        err_num7 = __errno_location();\n                        if ((*err_num7 & -17) == 12) {\n                            // 0x404697\n                            v1031 = v984;\n                            v1032 = v1016;\n                            v1033 = v1014;\n                            v1034 = v1013;\n                            v1035 = v959;\n                            v1036 = (int64_t)err_num7;\n                            v1037 = v1023;\n                            goto lab_0x404697;\n                        } else {\n                            // 0x404486\n                            function_409510(4, *v1030);\n                            format8 = dcgettext(NULL, \"cannot watch %s\", 5);\n                            error(0, *err_num7, format8);\n                            v979 = (int64_t)format8;\n                            goto lab_0x4044cd;\n                        }\n                    }\n                } else {\n                    // 0x404257\n                    v905 = v961;\n                    v906 = v960;\n                    v907 = v959;\n                    v908 = v1022;\n                    v909 = v958;\n                    v910 = v957;\n                    v911 = v995;\n                    v912 = v956;\n                    v913 = v955;\n                    v914 = v954;\n                    v915 = v953;\n                    v916 = v994;\n                    v917 = v1015;\n                    v918 = v1016;\n                    v919 = v992;\n                    v920 = v1014;\n                    v921 = v1013;\n                    v922 = v1029;\n                    v923 = v983;\n                    v924 = v982;\n                    v925 = v952;\n                    v926 = v1023;\n                    v927 = v1012;\n                    v928 = v951;\n                    v829 = v961;\n                    v830 = v960;\n                    v831 = v959;\n                    v832 = v1022;\n                    v833 = v958;\n                    v834 = v957;\n                    v835 = v995;\n                    v836 = v956;\n                    v837 = v955;\n                    v838 = v954;\n                    v839 = v953;\n                    v840 = v994;\n                    v841 = v1015;\n                    v842 = v1016;\n                    v843 = v992;\n                    v844 = v1014;\n                    v845 = v1013;\n                    v846 = v1029;\n                    v847 = v983;\n                    v848 = v982;\n                    v849 = v952;\n                    v850 = v1023;\n                    v851 = v1012;\n                    v852 = v951;\n                    if (g26 == 1) {\n                        goto lab_0x404571;\n                    } else {\n                        goto lab_0x404264;\n                    }\n                }\n            }\n        }\n        int64_t v1038 = v1025 + 1; // 0x4041ea\n        int64_t v1039 = v1026 + 96; // 0x4041f6\n        while (v1038 != (int64_t)err_num5) {\n            // 0x4041fc\n            v1024 = v1027;\n            v1025 = v1038;\n            v1026 = v1039;\n            v1027 = v1024;\n            if (*(int32_t *)(v1026 + 72) == v981) {\n                // 0x404202\n                v1028 = *(int64_t *)v1026;\n                v1027 = v1024 & 0xffffffff;\n                if (strcmp(str3, (char *)(v1028 + *(int64_t *)(v1026 + 80))) == 0) {\n                    // 0x40422a\n                    v982 = 0x100000000 * v1020 >> 32;\n                    v1029 = 96 * v1025;\n                    v983 = v1029 + v959;\n                    if ((v1024 & 512) == 0) {\n                        // 0x404459\n                        v1030 = (int64_t *)v983;\n                        v984 = inotify_add_watch(v980, (char *)*v1030, v956);\n                        v979 = v967;\n                        if (v984 >= 0) {\n                            goto lab_0x4044cd;\n                        } else {\n                            // 0x404470\n                            err_num7 = __errno_location();\n                            if ((*err_num7 & -17) == 12) {\n                                // 0x404697\n                                v1031 = v984;\n                                v1032 = v1016;\n                                v1033 = v1014;\n                                v1034 = v1013;\n                                v1035 = v959;\n                                v1036 = (int64_t)err_num7;\n                                v1037 = v1023;\n                                goto lab_0x404697;\n                            } else {\n                                // 0x404486\n                                function_409510(4, *v1030);\n                                format8 = dcgettext(NULL, \"cannot watch %s\", 5);\n                                error(0, *err_num7, format8);\n                                v979 = (int64_t)format8;\n                                goto lab_0x4044cd;\n                            }\n                        }\n                    } else {\n                        // 0x404257\n                        v905 = v961;\n                        v906 = v960;\n                        v907 = v959;\n                        v908 = v1022;\n                        v909 = v958;\n                        v910 = v957;\n                        v911 = v995;\n                        v912 = v956;\n                        v913 = v955;\n                        v914 = v954;\n                        v915 = v953;\n                        v916 = v994;\n                        v917 = v1015;\n                        v918 = v1016;\n                        v919 = v992;\n                        v920 = v1014;\n                        v921 = v1013;\n                        v922 = v1029;\n                        v923 = v983;\n                        v924 = v982;\n                        v925 = v952;\n                        v926 = v1023;\n                        v927 = v1012;\n                        v928 = v951;\n                        v829 = v961;\n                        v830 = v960;\n                        v831 = v959;\n                        v832 = v1022;\n                        v833 = v958;\n                        v834 = v957;\n                        v835 = v995;\n                        v836 = v956;\n                        v837 = v955;\n                        v838 = v954;\n                        v839 = v953;\n                        v840 = v994;\n                        v841 = v1015;\n                        v842 = v1016;\n                        v843 = v992;\n                        v844 = v1014;\n                        v845 = v1013;\n                        v846 = v1029;\n                        v847 = v983;\n                        v848 = v982;\n                        v849 = v952;\n                        v850 = v1023;\n                        v851 = v1012;\n                        v852 = v951;\n                        if (g26 == 1) {\n                            goto lab_0x404571;\n                        } else {\n                            goto lab_0x404264;\n                        }\n                    }\n                }\n            }\n            // 0x4041ea\n            v1038 = v1025 + 1;\n            v1039 = v1026 + 96;\n        }\n        // 0x40437c\n        v1040 = v1022;\n        v1041 = 0x100000000 * v1020 >> 32;\n        goto lab_0x40404b;\n    }\n  lab_0x4042d9:\n    // 0x4042d9\n    error(0, (int32_t)\"no files remaining\" ^ (int32_t)\"no files remaining\", dcgettext(NULL, \"no files remaining\", 5));\n    // 0x4029a3\n    return 1;\n  lab_0x4028e4:;\n    int32_t * err_num8 = __errno_location(); // 0x4028e4\n    if (*(char *)&g52 != 0) {\n        // 0x4028f5\n        *(int32_t *)(v442 + 56) = -1;\n        *(char *)(v442 + 52) = v1042 ^ 1;\n        *(int32_t *)(v442 + 60) = *err_num8;\n        *(int64_t *)(v442 + 40) = 0;\n        *(int64_t *)(v442 + 32) = 0;\n    }\n    // 0x40291a\n    function_409510(4, function_4047e0(*v1043, 0, v1044));\n    char * format9 = dcgettext(NULL, \"cannot open %s for reading\", 5); // 0x40293e\n    error(0, *err_num8, format9);\n    int64_t v266 = v459; // 0x402955\n    int32_t v264 = v460; // 0x402955\n    int64_t v262 = v461; // 0x402955\n    int32_t v260 = v462; // 0x402955\n    int32_t v270 = v463; // 0x402955\n    int32_t v258 = v464; // 0x402955\n    struct stat * v296 = v423; // 0x402955\n    int32_t v294 = v465; // 0x402955\n    int32_t v292 = v1045; // 0x402955\n    int32_t v256 = 0; // 0x402955\n    int32_t v254 = v430; // 0x402955\n    int32_t v252 = v432; // 0x402955\n    int64_t v250 = v434; // 0x402955\n    int32_t v248 = v436; // 0x402955\n    bool v246 = v466; // 0x402955\n    int128_t v244 = v467; // 0x402955\n    int64_t v285 = (int64_t)format9; // 0x402955\n    int64_t v242 = v440; // 0x402955\n    int64_t v268 = v442; // 0x402955\n    int64_t v240 = v1046; // 0x402955\n    goto lab_0x40295a;\n  lab_0x4025f8:;\n    uint32_t fd = v1047;\n    if (g49 != 0) {\n        // 0x402b27\n        int64_t v1048; // 0x401e60\n        int64_t v1049 = v1048;\n        int64_t v1050; // 0x401e60\n        int64_t v1051 = function_4047e0(v1049, v1050, v1044); // 0x402b2a\n        char v1052 = g23; // 0x402b39\n        int64_t v1053 = v1052 == 0 ? (int64_t)&g15 : (int64_t)&g16; // 0x402b40\n        __printf_chk(1, \"%s==> %s <==\\n\", (char *)v1053, (char *)v1051);\n        g23 = 0;\n    }\n    int64_t v418 = function_4047e0(*v1043, v1054, v1044); // 0x402608\n    int64_t v327 = 0; // bp-344, 0x402616\n    char v1055 = *(char *)&g53; // 0x402627\n    int32_t v1056 = __fxstat(1, fd, (struct stat *)&readfds);\n    int32_t offset; // 0x401e60\n    int64_t v439; // 0x401e60\n    int64_t v476; // 0x401e60\n    int64_t v441; // 0x401e60\n    int64_t v443; // 0x401e60\n    int64_t v477; // 0x401e60\n    int64_t v425; // 0x401e60\n    int64_t v415; // 0x401e60\n    int64_t v417; // 0x401e60\n    int64_t v474; // 0x401e60\n    int64_t v437; // 0x401e60\n    int64_t v438; // 0x401e60\n    int64_t v475; // 0x401e60\n    int64_t v433; // 0x401e60\n    int64_t v472; // 0x401e60\n    int32_t v429; // 0x401e60\n    int32_t v470; // 0x401e60\n    struct stat * v427; // 0x401e60\n    int32_t v435; // 0x401e60\n    int32_t v473; // 0x401e60\n    int32_t v428; // 0x401e60\n    int32_t v431; // 0x401e60\n    int32_t v471; // 0x401e60\n    char v1057; // 0x4029c2\n    int32_t v499; // 0x402656\n    int32_t v351; // 0x401e60\n    if (v1055 == 0) {\n        if (v1056 != 0) {\n            // 0x402ee6\n            function_409510(4, 0x100000000 * v418 >> 32);\n            char * format10 = dcgettext(NULL, \"cannot fstat %s\", 5); // 0x402f04\n            uint32_t err_num9 = *__errno_location(); // 0x402f19\n            error(0, err_num9, format10);\n            v427 = v423;\n            v428 = 0;\n            v429 = v430;\n            v431 = v432;\n            v433 = v434;\n            v435 = v436;\n            v437 = (int64_t)format10;\n            v438 = err_num9;\n            v439 = v440;\n            v441 = v442;\n            v443 = v1046;\n            goto lab_0x402a5e;\n        } else {\n            // 0x4029c2\n            v1057 = *(char *)&g50;\n            char v1058 = g45; // 0x4029cf\n            if (v1057 == 0) {\n                if (v421 < 0 || v1058 != 0) {\n                    goto lab_0x402d56;\n                } else {\n                    // 0x402f33\n                    v417 = -1;\n                    v425 = v1046;\n                    if ((v351 & 0xd000) != 0x8000) {\n                        int32_t v1059 = lseek(fd, -(int32_t)v421, SEEK_END); // 0x40355b\n                        if (v1059 == -1) {\n                            goto lab_0x402d56;\n                        } else {\n                            int64_t v1060 = v1059; // 0x40355b\n                            v417 = v1060;\n                            v415 = v421 + v1060;\n                            v425 = v421;\n                            goto lab_0x402f56;\n                        }\n                    } else {\n                        goto lab_0x402f56;\n                    }\n                }\n            } else {\n                if (v421 < 0 || v1058 != 0) {\n                    goto lab_0x402ad3;\n                } else {\n                    if ((v351 & 0xf000) == 0x8000) {\n                        int32_t v1061 = v421;\n                        int64_t v1062 = function_404c20((int64_t)fd, v1061, 1, 0x100000000 * v418 >> 32); // 0x403a58\n                        offset = v1061;\n                        if (v1062 >= 0) {\n                            goto lab_0x402a26;\n                        } else {\n                            goto lab_0x402a09;\n                        }\n                    } else {\n                        // 0x4029f2\n                        offset = v421;\n                        goto lab_0x402a09;\n                    }\n                }\n            }\n        }\n    } else {\n        if (v1056 != 0) {\n            // 0x402ea0\n            function_409510(4, 0x100000000 * v418 >> 32);\n            char * format11 = dcgettext(NULL, \"cannot fstat %s\", 5); // 0x402ebe\n            uint32_t err_num10 = *__errno_location(); // 0x402ed3\n            error(0, err_num10, format11);\n            v470 = 0;\n            v471 = v432;\n            v472 = v434;\n            v473 = v436;\n            v474 = (int64_t)format11;\n            v475 = err_num10;\n            v476 = v440;\n            v477 = v1046;\n            goto lab_0x402cc4;\n        } else {\n            char v1063 = *(char *)&g50; // 0x40264f\n            v499 = v1063;\n            if (v1063 != 0) {\n                int64_t v1064 = 0x100000000 * v418 >> 32; // 0x402e52\n                int32_t v1065 = function_404920(v1064, fd, v421, &v327); // 0x402e5c\n                int64_t v1066 = fd;\n                if (v1065 == 0) {\n                    // 0x403155\n                    int64_t v1067; // bp-1, 0x401e60\n                    int64_t v1068 = function_404a20(0, v1064, fd, (int64_t)&v1067); // 0x403164\n                    v327 += v1068;\n                    v470 = v499;\n                    v471 = v432;\n                    v472 = v434;\n                    v473 = v436;\n                    v474 = v1066;\n                    v475 = v1064;\n                    v476 = v440;\n                    v477 = v1046;\n                } else {\n                    // 0x402e64\n                    v470 = v1065 < 0;\n                    v471 = v432;\n                    v472 = v434;\n                    v473 = v436;\n                    v474 = v421;\n                    v475 = v1066;\n                    v476 = v440;\n                    v477 = v1046;\n                }\n                goto lab_0x402cc4;\n            } else {\n                // 0x402662\n                v535 = v1055;\n                if ((v351 & 0xf000) == 0x8000 == g45 == 0) {\n                    int32_t v1069 = lseek(fd, 0, SEEK_CUR); // 0x4030e7\n                    if (v1069 == -1) {\n                        goto lab_0x402682;\n                    } else {\n                        int64_t v1070 = fd; // 0x4030d8\n                        int32_t v1071 = lseek(fd, 0, SEEK_END); // 0x403103\n                        if (v1069 < v1071) {\n                            int64_t v1072 = v1071; // 0x403103\n                            v327 = v1072;\n                            v470 = v535;\n                            v471 = v432;\n                            v472 = v434;\n                            v473 = v436;\n                            v474 = 2;\n                            v475 = 0;\n                            v476 = v440;\n                            v477 = v1070;\n                            if (v1071 != 0) {\n                                int64_t v1073 = function_404cd0(0x100000000 * v418 >> 32, fd, v421, (int64_t)v1069, v1072, &v327); // 0x403147\n                                v470 = 0x1000000 * (int32_t)v1073 >> 24;\n                                v471 = v432;\n                                v472 = v434;\n                                v473 = v436;\n                                v474 = v421;\n                                v475 = v1070;\n                                v476 = v440;\n                                v477 = v1070;\n                            }\n                            goto lab_0x402cc4;\n                        } else {\n                            // 0x403a8b\n                            function_404c20(v1070, v1069, 0, 0x100000000 * v418 >> 32);\n                            goto lab_0x402682;\n                        }\n                    }\n                } else {\n                    goto lab_0x402682;\n                }\n            }\n        }\n    }\n  lab_0x4033a7:;\n    int64_t v217 = v211 + 1; // 0x4033a7\n    int64_t v218 = v215 + 96; // 0x4033ab\n    int64_t v51 = v192; // 0x4033b3\n    int32_t v52 = v193; // 0x4033b3\n    int64_t v53 = v194; // 0x4033b3\n    int32_t v54 = v195; // 0x4033b3\n    int32_t v55 = v196; // 0x4033b3\n    int32_t v56 = v197; // 0x4033b3\n    struct stat * v57 = v198; // 0x4033b3\n    int32_t v58 = v199; // 0x4033b3\n    int32_t v59 = v200; // 0x4033b3\n    int32_t v60 = v201; // 0x4033b3\n    int32_t v61 = v202; // 0x4033b3\n    int32_t v62 = v203; // 0x4033b3\n    int32_t v63 = v204; // 0x4033b3\n    int64_t v64 = v205; // 0x4033b3\n    int32_t v65 = v206; // 0x4033b3\n    bool v66 = v207; // 0x4033b3\n    int128_t v67 = v208; // 0x4033b3\n    int64_t v68 = v209; // 0x4033b3\n    int64_t v69 = v210; // 0x4033b3\n    int64_t v70 = v217; // 0x4033b3\n    int64_t v71 = v212; // 0x4033b3\n    int64_t v72 = v213; // 0x4033b3\n    int64_t v73 = v214; // 0x4033b3\n    int64_t v74 = v218; // 0x4033b3\n    int64_t v75 = v216; // 0x4033b3\n    v119 = v192;\n    v120 = v193;\n    v121 = v194;\n    v122 = v195;\n    v123 = v196;\n    v124 = v197;\n    v125 = v198;\n    v126 = v199;\n    v127 = v200;\n    v128 = v201;\n    v129 = v202;\n    v130 = v203;\n    v131 = v204;\n    v132 = v205;\n    v133 = v206;\n    v134 = v207;\n    v135 = v208;\n    v136 = v209;\n    v137 = v212;\n    v138 = v213;\n    v139 = v214;\n    v140 = v218;\n    v141 = v216;\n    if (v217 == (int64_t)err_num5) {\n        goto lab_0x4033e1;\n    } else {\n        goto lab_0x4033b5;\n    }\n  lab_0x403db0:;\n    char * format = dcgettext(NULL, \"inotify cannot be used, reverting to polling\", 5); // 0x403dbc\n    error(0, *__errno_location(), format);\n    int64_t v219 = v220; // 0x403ddc\n    int32_t v221 = v222;\n    int32_t v223 = *(int32_t *)(v224 + 68); // 0x403de1\n    if (v223 != -1) {\n        // 0x403de9\n        inotify_rm_watch(v221, v223);\n    }\n    uint32_t v225 = *(int32_t *)(v224 + 72); // 0x403df1\n    if (v225 != -1) {\n        // 0x403df9\n        inotify_rm_watch(v221, v225);\n    }\n    int64_t v226 = v224 + 96; // 0x403e01\n    int64_t v227 = v226; // 0x403e08\n    while (v226 != v219) {\n        // 0x403de1\n        v223 = *(int32_t *)(v227 + 68);\n        if (v223 != -1) {\n            // 0x403de9\n            inotify_rm_watch(v221, v223);\n        }\n        // 0x403df1\n        v225 = *(int32_t *)(v227 + 72);\n        if (v225 != -1) {\n            // 0x403df9\n            inotify_rm_watch(v221, v225);\n        }\n        // 0x403e01\n        v226 = v227 + 96;\n        v227 = v226;\n    }\n    // 0x4032ae\n    v13 = v228;\n    v15 = v229;\n    v8 = v224;\n    v18 = v230;\n    v20 = v231;\n    v22 = v220;\n    v24 = v232;\n    v27 = v233;\n    v30 = v234;\n    v33 = v235;\n    v36 = v236;\n    v38 = v237;\n    v40 = v238;\n    v42 = (int64_t)format;\n    v44 = v219;\n    v46 = v225;\n    v48 = v222;\n    goto lab_0x4032ae_2;\n  lab_0x40295a:;\n    int64_t v239 = v240;\n    int64_t v241 = v242;\n    int128_t v243 = v244;\n    bool v245 = v246;\n    int32_t v247 = v248;\n    int64_t v249 = v250;\n    int32_t v251 = v252;\n    int32_t v253 = v254;\n    int32_t v255 = v256;\n    int32_t v257 = v258;\n    int32_t v259 = v260;\n    int64_t v261 = v262;\n    int32_t v263 = v264;\n    int64_t v265 = v266;\n    int64_t v267 = v268 + 96; // 0x40295f\n    int32_t v269 = 0x1000000 * (v255 & v270) >> 24; // 0x402963\n    v271 = v257;\n    v272 = v265;\n    v273 = v263;\n    v274 = v261;\n    v275 = v259;\n    v276 = v269;\n    v277 = v257;\n    v278 = v253;\n    v279 = v251;\n    v280 = v249;\n    v281 = v247;\n    v282 = v245;\n    v283 = v243;\n    v284 = v285;\n    v286 = v241;\n    v287 = v267;\n    v288 = v239;\n    int64_t v289; // 0x401e60\n    int64_t v290; // 0x401e60\n    if (v267 != v271) {\n        goto lab_0x4025b0;\n    } else {\n        int32_t v291 = v292;\n        int32_t v293 = v294;\n        struct stat * v295 = v296;\n        int64_t v297 = v255 % 256; // 0x40295a\n        char v298 = *(char *)&g52; // 0x402975\n        int32_t v299 = v298; // 0x40297c\n        v300 = v265;\n        v301 = v263;\n        v302 = v261;\n        v303 = v259;\n        v304 = v269;\n        v305 = v257;\n        v306 = v295;\n        v307 = v293;\n        v308 = v291;\n        v309 = v253;\n        v310 = v251;\n        v311 = v249;\n        v312 = v247;\n        v313 = v245;\n        v314 = v243;\n        v315 = v241;\n        v316 = v267;\n        v317 = v239;\n        v318 = 0;\n        v319 = v261;\n        if (v298 != 0) {\n            while (true) {\n              lab_0x403182:\n                // 0x403182\n                str = v319;\n                v320 = v318;\n                if (strcmp((char *)*(int64_t *)str, \"-\") != 0) {\n                    // 0x403462\n                    v321 = v320 + 1;\n                    goto lab_0x4031cb;\n                } else {\n                    // 0x403198\n                    v322 = (char *)(str + 52);\n                    if (*v322 != 0) {\n                        // 0x403462\n                        v321 = v320 + 1;\n                        goto lab_0x4031cb;\n                    } else {\n                        // 0x4031a2\n                        v323 = (int32_t *)(str + 56);\n                        uint32_t v324 = *v323; // 0x4031a2\n                        if (v324 < 0) {\n                            // 0x403462\n                            v321 = v320 + 1;\n                            goto lab_0x4031cb;\n                        } else {\n                            // 0x4031ad\n                            if ((*(int32_t *)(str + 48) & 0xf000) != 0x1000) {\n                                // 0x403455\n                                if ((int32_t)function_40b5b0((int64_t)v324) != 0) {\n                                    goto lab_0x4031c0;\n                                } else {\n                                    // 0x403462\n                                    v321 = v320 + 1;\n                                    goto lab_0x4031cb;\n                                }\n                            } else {\n                                goto lab_0x4031c0;\n                            }\n                        }\n                    }\n                }\n            }\n          lab_0x4031d4:\n            // 0x4031d4\n            v300 = v265;\n            v301 = v263;\n            v302 = v261;\n            v303 = v259;\n            v304 = v269;\n            v305 = v257;\n            v306 = v295;\n            v307 = v293;\n            v308 = v291;\n            v309 = v253;\n            v310 = v251;\n            v311 = v249;\n            v312 = v247;\n            v313 = v245;\n            v314 = v243;\n            v315 = v241;\n            v316 = v267;\n            v317 = v239;\n            if (v325 == 0) {\n                goto lab_0x402988;\n            } else {\n                int32_t v326 = __fxstat(1, 1, (struct stat *)&v327); // 0x4031ef\n                v328 = v265;\n                v329 = v263;\n                v330 = v261;\n                v331 = v259;\n                v332 = v269;\n                v333 = v257;\n                v334 = v295;\n                v335 = v293;\n                v336 = v291;\n                v337 = v299;\n                v338 = v255;\n                v339 = v253;\n                v340 = v251;\n                v341 = v249;\n                v342 = v247;\n                v343 = v245;\n                v344 = v243;\n                v345 = v346;\n                v347 = v241;\n                v348 = v267;\n                v349 = v239;\n                if (v326 < 0) {\n                    goto lab_0x403e5f;\n                } else {\n                    int64_t v350 = 1; // 0x403212\n                    if ((v351 & 0xf000) != 0x1000) {\n                        // 0x403214\n                        v350 = (int32_t)function_40b5b0(1) != 0;\n                    }\n                    int64_t v352 = v350;\n                    g51 = v352;\n                    int64_t v353 = v261; // 0x403239\n                    v13 = v265;\n                    v15 = v263;\n                    v8 = v261;\n                    v18 = v259;\n                    v20 = v269;\n                    v22 = v257;\n                    v24 = v295;\n                    v27 = v299;\n                    v30 = v253;\n                    v33 = v249;\n                    v36 = v245;\n                    v38 = v243;\n                    v40 = v297;\n                    v42 = v352;\n                    v44 = v346;\n                    v46 = 1;\n                    v48 = v241;\n                    if (g44 == 0) {\n                        int64_t str2 = v353;\n                        int64_t v354 = 1; // 0x403249\n                        if (*(char *)(str2 + 52) == 0) {\n                            // 0x40324b\n                            v354 = (int64_t)\"-\";\n                            v13 = v265;\n                            v15 = v263;\n                            v8 = v261;\n                            v18 = v259;\n                            v20 = v269;\n                            v22 = v257;\n                            v24 = v295;\n                            v27 = v299;\n                            v30 = v253;\n                            v33 = v249;\n                            v36 = v245;\n                            v38 = v243;\n                            v40 = v297;\n                            v42 = v352;\n                            v44 = v271;\n                            v46 = (int64_t)\"-\";\n                            v48 = v241;\n                            if (strcmp((char *)*(int64_t *)str2, \"-\") == 0) {\n                                goto lab_0x4032ae_2;\n                            }\n                        }\n                        int64_t v355 = v354;\n                        int64_t v356 = str2 + 96; // 0x40325c\n                        while (v356 != v271) {\n                            // 0x403245\n                            str2 = v356;\n                            v354 = v355;\n                            if (*(char *)(str2 + 52) == 0) {\n                                // 0x40324b\n                                v354 = (int64_t)\"-\";\n                                v13 = v265;\n                                v15 = v263;\n                                v8 = v261;\n                                v18 = v259;\n                                v20 = v269;\n                                v22 = v257;\n                                v24 = v295;\n                                v27 = v299;\n                                v30 = v253;\n                                v33 = v249;\n                                v36 = v245;\n                                v38 = v243;\n                                v40 = v297;\n                                v42 = v352;\n                                v44 = v271;\n                                v46 = (int64_t)\"-\";\n                                v48 = v241;\n                                if (strcmp((char *)*(int64_t *)str2, \"-\") == 0) {\n                                    goto lab_0x4032ae_2;\n                                }\n                            }\n                            // 0x40325c\n                            v355 = v354;\n                            v356 = str2 + 96;\n                        }\n                        int64_t v357 = v263; // 0x403265\n                        int64_t v358 = v261 + 56; // 0x403271\n                        int64_t v359 = v261 + 53;\n                        int64_t v360 = 0;\n                        if (*(int32_t *)(v360 + v358) >= 0) {\n                            // 0x403278\n                            v13 = v265;\n                            v15 = v263;\n                            v8 = v261;\n                            v18 = v259;\n                            v20 = v269;\n                            v22 = v257;\n                            v24 = v295;\n                            v27 = v299;\n                            v30 = v253;\n                            v33 = v249;\n                            v36 = v245;\n                            v38 = v243;\n                            v40 = v357;\n                            v42 = v261;\n                            v44 = v271;\n                            v46 = v355;\n                            v48 = v241;\n                            if (*(char *)(v360 + v359) != 0) {\n                                goto lab_0x4032ae_2;\n                            }\n                        }\n                        int64_t v361 = v360 + 96; // 0x40327f\n                        while (v361 != v357) {\n                            // 0x403271\n                            v360 = v361;\n                            if (*(int32_t *)(v360 + v358) >= 0) {\n                                // 0x403278\n                                v13 = v265;\n                                v15 = v263;\n                                v8 = v261;\n                                v18 = v259;\n                                v20 = v269;\n                                v22 = v257;\n                                v24 = v295;\n                                v27 = v299;\n                                v30 = v253;\n                                v33 = v249;\n                                v36 = v245;\n                                v38 = v243;\n                                v40 = v357;\n                                v42 = v261;\n                                v44 = v271;\n                                v46 = v355;\n                                v48 = v241;\n                                if (*(char *)(v360 + v359) != 0) {\n                                    goto lab_0x4032ae_2;\n                                }\n                            }\n                            // 0x40327f\n                            v361 = v360 + 96;\n                        }\n                        int64_t v362 = 0;\n                        int64_t v363 = v357; // 0x403294\n                        unsigned char v364; // 0x403296\n                        if (*(int32_t *)(v362 + v358) >= 0) {\n                            // 0x403296\n                            v364 = *(char *)(v362 + v359);\n                            v363 = v364;\n                            v289 = v271;\n                            v290 = v261;\n                            if (v364 == 0) {\n                                goto lab_0x403b91;\n                            }\n                        }\n                        int64_t v365 = v362 + 96; // 0x4032a3\n                        int64_t v366 = v363; // 0x4032ac\n                        v13 = v265;\n                        v15 = v263;\n                        v8 = v261;\n                        v18 = v259;\n                        v20 = v269;\n                        v22 = v257;\n                        v24 = v295;\n                        v27 = v299;\n                        v30 = v253;\n                        v33 = v249;\n                        v36 = v245;\n                        v38 = v243;\n                        v40 = v363;\n                        v42 = v261;\n                        v44 = v271;\n                        v46 = v355;\n                        v48 = v241;\n                        while (v365 != v357) {\n                            // 0x40328f\n                            v362 = v365;\n                            v363 = v366;\n                            if (*(int32_t *)(v362 + v358) >= 0) {\n                                // 0x403296\n                                v364 = *(char *)(v362 + v359);\n                                v363 = v364;\n                                v289 = v271;\n                                v290 = v261;\n                                if (v364 == 0) {\n                                    goto lab_0x403b91;\n                                }\n                            }\n                            // 0x4032a3\n                            v365 = v362 + 96;\n                            v366 = v363;\n                            v13 = v265;\n                            v15 = v263;\n                            v8 = v261;\n                            v18 = v259;\n                            v20 = v269;\n                            v22 = v257;\n                            v24 = v295;\n                            v27 = v299;\n                            v30 = v253;\n                            v33 = v249;\n                            v36 = v245;\n                            v38 = v243;\n                            v40 = v363;\n                            v42 = v261;\n                            v44 = v271;\n                            v46 = v355;\n                            v48 = v241;\n                        }\n                    }\n                    goto lab_0x4032ae_2;\n                }\n            }\n        } else {\n            goto lab_0x402988;\n        }\n    }\n  lab_0x4033b5:\n    // 0x4033b5\n    v76 = v75;\n    int64_t v77 = v74;\n    int64_t v78 = v73;\n    int64_t v79 = v72;\n    int64_t v80 = v70;\n    v81 = v69;\n    v82 = v68;\n    int128_t v83 = v67;\n    bool v84 = v66;\n    int32_t v85 = v65;\n    int64_t v86 = v64;\n    int32_t v87 = v63;\n    int32_t v88 = v62;\n    int32_t v89 = v61;\n    int32_t v90 = v60;\n    int32_t v91 = v59;\n    int32_t v92 = v58;\n    struct stat * v93 = v57;\n    int32_t v94 = v56;\n    int32_t v95 = v55;\n    int32_t v96 = v54;\n    int64_t v97 = v53;\n    int32_t v98 = v52;\n    int64_t v99 = v51;\n    int64_t v100 = v80; // 0x4033ba\n    int64_t v101 = v71; // 0x4033ba\n    int64_t v102 = v79; // 0x4033ba\n    int64_t v103 = v77; // 0x4033ba\n    if (*(char *)(v77 + 52) != 0) {\n        goto lab_0x4033a7_2;\n    } else {\n        // 0x4033bc\n        v104 = v76 & 0xffffffff;\n        int32_t v105 = *(int32_t *)(v77 + 56); // 0x4033bc\n        int64_t v106 = v105; // 0x4033bc\n        v107 = v77;\n        v108 = v79;\n        v109 = v80;\n        v110 = v105;\n        v111 = v106;\n        int64_t v112 = v106; // 0x4033c2\n        int64_t v113 = v80; // 0x4033c2\n        int64_t v114 = v77; // 0x4033c2\n        if (v105 >= 0) {\n            goto lab_0x403320;\n        } else {\n            int64_t v115 = v114;\n            int64_t v116 = v112;\n            int64_t v117 = v113 + 1; // 0x4033ce\n            int64_t v118 = v115 + 96; // 0x4033d2\n            function_4056e0(v115, v104, v81);\n            v119 = v99;\n            v120 = v98;\n            v121 = v97;\n            v122 = v96;\n            v123 = v95;\n            v124 = v94;\n            v125 = v93;\n            v126 = v92;\n            v127 = v91;\n            v128 = v90;\n            v129 = v89;\n            v130 = v88;\n            v131 = v87;\n            v132 = v86;\n            v133 = v85;\n            v134 = v84;\n            v135 = v83;\n            v136 = v82;\n            v137 = v116;\n            v138 = v104;\n            v139 = v78;\n            v140 = v118;\n            v141 = v76;\n            if (v117 == (int64_t)err_num5) {\n                goto lab_0x4033e1;\n            }\n            // 0x4033b5\n            v100 = v117;\n            v101 = v116;\n            v102 = v104;\n            v103 = v118;\n            while (*(char *)(v115 + 148) == 0) {\n                int32_t v142 = *(int32_t *)(v115 + 152); // 0x4033bc\n                int64_t v143 = v142; // 0x4033bc\n                v107 = v118;\n                v108 = v104;\n                v109 = v117;\n                v110 = v142;\n                v111 = v143;\n                v112 = v143;\n                v113 = v117;\n                v114 = v118;\n                if (v142 >= 0) {\n                    goto lab_0x403320;\n                }\n                v115 = v114;\n                v116 = v112;\n                v117 = v113 + 1;\n                v118 = v115 + 96;\n                function_4056e0(v115, v104, v81);\n                v119 = v99;\n                v120 = v98;\n                v121 = v97;\n                v122 = v96;\n                v123 = v95;\n                v124 = v94;\n                v125 = v93;\n                v126 = v92;\n                v127 = v91;\n                v128 = v90;\n                v129 = v89;\n                v130 = v88;\n                v131 = v87;\n                v132 = v86;\n                v133 = v85;\n                v134 = v84;\n                v135 = v83;\n                v136 = v82;\n                v137 = v116;\n                v138 = v104;\n                v139 = v78;\n                v140 = v118;\n                v141 = v76;\n                if (v117 == (int64_t)err_num5) {\n                    goto lab_0x4033e1;\n                }\n                // 0x4033b5\n                v100 = v117;\n                v101 = v116;\n                v102 = v104;\n                v103 = v118;\n            }\n            goto lab_0x4033a7_2;\n        }\n    }\n  lab_0x4038bd:\n    // 0x4038bd\n    v144 = v145;\n    v146 = v147;\n    v148 = v149;\n    v150 = v151;\n    v152 = v153;\n    v154 = v155;\n    v156 = v157;\n    v158 = v159;\n    v160 = v161;\n    v162 = v163;\n    v164 = v165;\n    v166 = v167;\n    v168 = v169;\n    v170 = v171;\n    v172 = v173;\n    v174 = v175;\n    v176 = v177;\n    v178 = fd2;\n    v179 = v180;\n    v181 = v182;\n    v183 = v184;\n    bool v185; // 0x401e60\n    int64_t v186; // 0x401e60\n    int64_t v187; // 0x401e60\n    int64_t v188; // 0x401e60\n    if (fflush_unlocked(g39) != 0) {\n        goto lab_0x403e89;\n    } else {\n        // 0x4038d1\n        v185 = v175;\n        v186 = v189;\n        v187 = v190;\n        v188 = v191;\n        if (g51 == 0) {\n            goto lab_0x403816;\n        } else {\n            goto lab_0x4037bb;\n        }\n    }\n  lab_0x4033a7_2:\n    // 0x4033a7\n    v192 = v99;\n    v193 = v98;\n    v194 = v97;\n    v195 = v96;\n    v196 = v95;\n    v197 = v94;\n    v198 = v93;\n    v199 = v92;\n    v200 = v91;\n    v201 = v90;\n    v202 = v89;\n    v203 = v88;\n    v204 = v87;\n    v205 = v86;\n    v206 = v85;\n    v207 = v84;\n    v208 = v83;\n    v209 = v82;\n    v210 = v81;\n    v211 = v100;\n    v212 = v101;\n    v213 = v102;\n    v214 = v78;\n    v215 = v103;\n    v216 = v76;\n    goto lab_0x4033a7;\n  lab_0x403305:\n    // 0x403305\n    v51 = v14;\n    v52 = v16;\n    v53 = v17;\n    v54 = v19;\n    v55 = v21;\n    v56 = v23;\n    v57 = v25;\n    v58 = v26;\n    v59 = 0;\n    v60 = v28;\n    v61 = v29;\n    v62 = v31;\n    v63 = v32;\n    v64 = v34;\n    v65 = v35;\n    v66 = v37;\n    v67 = v39;\n    v68 = v41;\n    v69 = v43;\n    v70 = 0;\n    v71 = v45;\n    v72 = v47;\n    v73 = v49;\n    v74 = v17;\n    v75 = v50;\n    goto lab_0x4033b5;\n  lab_0x402988:;\n    uint32_t v367 = v304;\n    if (g46 == 0 || close(0) >= 0) {\n        // 0x4029a3\n        return v367 % 256 ^ 1;\n    }\n    uint32_t err_num = *__errno_location(); // 0x403489\n    error(1, err_num, \"-\");\n    int32_t * v368 = (int32_t *)(v316 + 60); // 0x40348d\n    int64_t v369 = v300; // 0x40348d\n    int32_t v370 = v301; // 0x40348d\n    int64_t v371 = v302; // 0x40348d\n    int32_t v372 = v303; // 0x40348d\n    int32_t v373 = v367; // 0x40348d\n    int32_t v374 = v305; // 0x40348d\n    struct stat * v375 = v306; // 0x40348d\n    int32_t v376 = v307; // 0x40348d\n    int32_t v377 = v308; // 0x40348d\n    int32_t v378 = v309; // 0x40348d\n    int32_t v379 = v310; // 0x40348d\n    int64_t v380 = v311; // 0x40348d\n    int32_t v381 = v312; // 0x40348d\n    bool v382 = v313; // 0x40348d\n    int128_t v383 = v314; // 0x40348d\n    int64_t v384 = (int64_t)\"-\"; // 0x40348d\n    int64_t v385 = err_num; // 0x40348d\n    int64_t v386 = v315; // 0x40348d\n    int64_t v387 = v316; // 0x40348d\n    int64_t v388 = v317; // 0x40348d\n    goto lab_0x403492;\n  lab_0x402a5e:;\n    int64_t v444 = v443;\n    int64_t v445 = v441;\n    int64_t v446 = v439;\n    int32_t v447 = v435;\n    int64_t v448 = v433;\n    int32_t v449 = v431;\n    int32_t v450 = v429;\n    int32_t v451 = v428;\n    struct stat * v452 = v427;\n    int64_t * v393; // 0x401e60\n    bool v407; // 0x401e60\n    int64_t v411; // 0x401e60\n    int64_t v412; // 0x401e60\n    int64_t v413; // 0x401e60\n    int64_t v409; // 0x401e60\n    int64_t v410; // 0x401e60\n    int32_t v398; // 0x401e60\n    int32_t v397; // 0x401e60\n    int32_t v395; // 0x401e60\n    int64_t v405; // 0x401e60\n    int32_t v403; // 0x401e60\n    int64_t v396; // 0x401e60\n    int32_t v399; // 0x401e60\n    int64_t v394; // 0x401e60\n    int32_t v401; // 0x401e60\n    struct stat * v400; // 0x401e60\n    int32_t v406; // 0x401e60\n    int32_t v404; // 0x401e60\n    int32_t v402; // 0x401e60\n    int64_t v453; // 0x402b69\n    int64_t v454; // 0x402b8e\n    int128_t v408; // 0x401e60\n    if (*(char *)&g52 != 0) {\n        // 0x402b64\n        v453 = fd;\n        int32_t * v455 = (int32_t *)(v445 + 60);\n        *v455 = v451 % 256 - 1;\n        if (__fxstat(1, fd, (struct stat *)&readfds) < 0) {\n            int32_t * v456 = __errno_location(); // 0x402cd2\n            int64_t * v457 = (int64_t *)v445;\n            *v455 = *v456;\n            int64_t v458 = function_4047e0(*v457, v453, (int64_t)&readfds); // 0x402ce3\n            function_409510(4, v458);\n            char * format3 = dcgettext(NULL, \"error reading %s\", 5); // 0x402d04\n            uint32_t err_num2 = *v456; // 0x402d09\n            error(0, err_num2, format3);\n            v393 = v457;\n            v394 = v459;\n            v395 = v460;\n            v396 = v461;\n            v397 = v462;\n            v398 = v463;\n            v399 = v464;\n            v400 = v452;\n            v401 = v465;\n            v402 = fd;\n            v403 = v450;\n            v404 = v449;\n            v405 = v448;\n            v406 = v447;\n            v407 = v466;\n            v408 = v467;\n            v409 = (int64_t)format3;\n            v410 = err_num2;\n            v411 = v446;\n            v412 = v445;\n            v413 = v444;\n            goto lab_0x402d1a;\n        } else {\n            // 0x402b8e\n            v454 = v351;\n            if ((v351 & 0xf000) < 0x3000) {\n                goto lab_0x402bba;\n            } else {\n                // 0x402ba8\n                v368 = v455;\n                v369 = v459;\n                v370 = v460;\n                v371 = v461;\n                v372 = v462;\n                v373 = v463;\n                v374 = v464;\n                v375 = v452;\n                v376 = v465;\n                v377 = fd;\n                v378 = v450;\n                v379 = v449;\n                v380 = v448;\n                v381 = v447;\n                v382 = v466;\n                v383 = v467;\n                v384 = v454;\n                v385 = v453;\n                v386 = v446;\n                v387 = v445;\n                v388 = v444;\n                if ((v454 & 0xb000) != 0x8000) {\n                    goto lab_0x403492;\n                } else {\n                    goto lab_0x402bba;\n                }\n            }\n        }\n    } else {\n        int64_t v468 = v437;\n        v266 = v459;\n        v264 = v460;\n        v262 = v461;\n        v260 = v462;\n        v270 = v463;\n        v258 = v464;\n        v296 = v452;\n        v294 = 0;\n        v292 = fd;\n        v256 = v451;\n        v254 = v450;\n        v252 = v449;\n        v250 = v448;\n        v248 = v447;\n        v246 = v466;\n        v244 = v467;\n        v285 = v468;\n        v242 = v446;\n        v268 = v445;\n        v240 = v444;\n        if (v465 != 0) {\n            int32_t v469 = close(fd); // 0x402a7a\n            v266 = v459;\n            v264 = v460;\n            v262 = v461;\n            v260 = v462;\n            v270 = v463;\n            v258 = v464;\n            v296 = v452;\n            v294 = v465;\n            v292 = fd;\n            v256 = v451;\n            v254 = v450;\n            v252 = v449;\n            v250 = v448;\n            v248 = v447;\n            v246 = v466;\n            v244 = v467;\n            v285 = v468;\n            v242 = v446;\n            v268 = v445;\n            v240 = v444;\n            if (v469 != 0) {\n                // 0x402a87\n                function_409510(4, function_4047e0(*(int64_t *)v445, v438, v468));\n                char * format4 = dcgettext(NULL, \"error reading %s\", 5); // 0x402aab\n                error(0, *__errno_location(), format4);\n                v266 = v459;\n                v264 = v460;\n                v262 = v461;\n                v260 = v462;\n                v270 = v463;\n                v258 = v464;\n                v296 = v452;\n                v294 = v465;\n                v292 = fd;\n                v256 = 0;\n                v254 = v450;\n                v252 = v449;\n                v250 = v448;\n                v248 = v447;\n                v246 = v466;\n                v244 = v467;\n                v285 = (int64_t)format4;\n                v242 = v446;\n                v268 = v445;\n                v240 = v444;\n            }\n        }\n        goto lab_0x40295a;\n    }\n  lab_0x402cc4:\n    // 0x402cc4\n    v427 = v423;\n    v428 = 0x1000000 * v470 >> 24;\n    v429 = v470;\n    v431 = v471;\n    v433 = v472;\n    v435 = v473;\n    v437 = v474;\n    v438 = v475;\n    v439 = v476;\n    v441 = v442;\n    v443 = v477;\n    goto lab_0x402a5e;\n  lab_0x403492:\n    // 0x403492\n    *(char *)(v387 + 54) = 0;\n    *v368 = -1;\n    char v389 = *(char *)&g54 ^ 1;\n    *(char *)(v387 + 52) = v389;\n    int64_t v390 = v384; // 0x4034b4\n    int64_t v391 = v385; // 0x4034b4\n    if (v389 != 0) {\n        // 0x403576\n        dcgettext(NULL, \"; giving up on this name\", 5);\n        v390 = 5;\n        v391 = (int64_t)\"; giving up on this name\";\n    }\n    int64_t * v392 = (int64_t *)v387;\n    function_4095e0(0, 3, function_4047e0(*v392, v391, v390));\n    char * format2 = dcgettext(NULL, \"%s: cannot follow end of this type of file%s\", 5); // 0x4034e0\n    error(0, (int32_t)\"%s: cannot follow end of this type of file%s\" ^ (int32_t)\"%s: cannot follow end of this type of file%s\", format2);\n    v393 = v392;\n    v394 = v369;\n    v395 = v370;\n    v396 = v371;\n    v397 = v372;\n    v398 = v373;\n    v399 = v374;\n    v400 = v375;\n    v401 = v376;\n    v402 = v377;\n    v403 = v378;\n    v404 = v379;\n    v405 = v380;\n    v406 = v381;\n    v407 = v382;\n    v408 = v383;\n    v409 = (int64_t)format2;\n    v410 = (int32_t)\"%s: cannot follow end of this type of file%s\" ^ (int32_t)\"%s: cannot follow end of this type of file%s\";\n    v411 = v386;\n    v412 = v387;\n    v413 = v388;\n    goto lab_0x402d1a;\n  lab_0x402d56:;\n    int64_t v1191 = function_409dd0(0x2010); // 0x402d5e\n    *(int64_t *)(v1191 + 0x2000) = 0;\n    *(int64_t *)(v1191 + 0x2008) = 0;\n    int64_t v1192 = function_409dd0(0x2010); // 0x402d84\n    int64_t v1193 = function_409780(fd, v1192, 0x2000); // 0x402dd8\n    int64_t v1194 = v1193; // 0x402de5\n    int64_t v1195 = v1191; // 0x402de5\n    int64_t v1196 = v1191; // 0x402de5\n    int64_t v1197 = v1192; // 0x402de5\n    int64_t v1198 = v1192; // 0x402de5\n    int64_t v1199 = v1191; // 0x402de5\n    int64_t v1200 = 0; // 0x402de5\n    int64_t v1201 = v1193; // 0x402de5\n    if (v1193 < 0xffffffffffffffff) {\n        int64_t v1202 = v1197;\n        int64_t v1203 = v1196;\n        int64_t v1204 = v1195;\n        int64_t v1205 = v1194;\n        v327 += v1205;\n        int64_t v1206 = v1205; // 0x402df3\n        int64_t * v1207 = (int64_t *)(v1202 + 0x2000); // 0x402df6\n        *v1207 = v1205;\n        int64_t * v1208 = (int64_t *)(v1204 + 0x2000); // 0x402dfd\n        int64_t v1209 = *v1208; // 0x402dfd\n        *(int64_t *)(v1202 + 0x2008) = 0;\n        int64_t v1210; // 0x401e60\n        int64_t v1211; // 0x401e60\n        int64_t v1212; // 0x401e60\n        int64_t v1213; // 0x401e60\n        int64_t v1214; // 0x402da3\n        if (v1209 + v1205 < 0x2000) {\n            // 0x402e1c\n            memcpy((int64_t *)(v1209 + v1204), (int64_t *)v1202, (int32_t)v1205);\n            *v1208 = *v1208 + *v1207;\n            v1211 = v1202;\n            v1213 = v1204;\n            v1212 = v1203;\n            v1210 = v1206;\n        } else {\n            // 0x402da0\n            v1214 = v1206 - *(int64_t *)(v1203 + 0x2000);\n            *(int64_t *)(v1204 + 0x2008) = v1202;\n            if (v421 >= v1214) {\n                // 0x4030a6\n                v1211 = function_409dd0(0x2010);\n                v1213 = v1202;\n                v1212 = v1203;\n                v1210 = v1206;\n            } else {\n                // 0x402dba\n                v1211 = v1203;\n                v1213 = v1202;\n                v1212 = *(int64_t *)(v1203 + 0x2008);\n                v1210 = v1214;\n            }\n        }\n        int64_t v1215 = function_409780(fd, v1211, 0x2000); // 0x402dd8\n        v1198 = v1211;\n        v1199 = v1212;\n        v1200 = v1210;\n        v1201 = v1215;\n        while (v1215 < 0xffffffffffffffff) {\n            // 0x402deb\n            v1202 = v1211;\n            v1203 = v1212;\n            v1204 = v1213;\n            v1205 = v1215;\n            v327 += v1205;\n            v1206 = v1210 + v1205;\n            v1207 = (int64_t *)(v1202 + 0x2000);\n            *v1207 = v1205;\n            v1208 = (int64_t *)(v1204 + 0x2000);\n            v1209 = *v1208;\n            *(int64_t *)(v1202 + 0x2008) = 0;\n            if (v1209 + v1205 < 0x2000) {\n                // 0x402e1c\n                memcpy((int64_t *)(v1209 + v1204), (int64_t *)v1202, (int32_t)v1205);\n                *v1208 = *v1208 + *v1207;\n                v1211 = v1202;\n                v1213 = v1204;\n                v1212 = v1203;\n                v1210 = v1206;\n            } else {\n                // 0x402da0\n                v1214 = v1206 - *(int64_t *)(v1203 + 0x2000);\n                *(int64_t *)(v1204 + 0x2008) = v1202;\n                if (v421 >= v1214) {\n                    // 0x4030a6\n                    v1211 = function_409dd0(0x2010);\n                    v1213 = v1202;\n                    v1212 = v1203;\n                    v1210 = v1206;\n                } else {\n                    // 0x402dba\n                    v1211 = v1203;\n                    v1213 = v1202;\n                    v1212 = *(int64_t *)(v1203 + 0x2008);\n                    v1210 = v1214;\n                }\n            }\n            // 0x402dc7\n            v1215 = function_409780(fd, v1211, 0x2000);\n            v1198 = v1211;\n            v1199 = v1212;\n            v1200 = v1210;\n            v1201 = v1215;\n        }\n    }\n    int64_t v1216 = v1199;\n    free((int64_t *)v1198);\n    int64_t v1217; // 0x401e60\n    int64_t v1218; // 0x401e60\n    int32_t v1219; // 0x401e60\n    if (v1201 != -1) {\n        int64_t v1220 = *(int64_t *)(v1216 + 0x2000); // 0x403970\n        int64_t v1221 = v1200 - v1220; // 0x40397a\n        int64_t v1222 = v1221; // 0x403980\n        int64_t v1223 = v1216; // 0x403980\n        int64_t v1224 = v1216; // 0x403980\n        int64_t v1225 = v1200; // 0x403980\n        int64_t v1226 = v1220; // 0x403980\n        if (v421 < v1221) {\n            int64_t v1227 = *(int64_t *)(v1223 + 0x2008); // 0x403966\n            int64_t v1228 = *(int64_t *)(v1227 + 0x2000); // 0x403970\n            int64_t v1229 = v1222 - v1228; // 0x40397a\n            v1223 = v1227;\n            v1224 = v1227;\n            v1225 = v1222;\n            v1226 = v1228;\n            while (v421 < v1229) {\n                int64_t v1230 = v1229;\n                v1227 = *(int64_t *)(v1223 + 0x2008);\n                v1228 = *(int64_t *)(v1227 + 0x2000);\n                v1229 = v1230 - v1228;\n                v1223 = v1227;\n                v1224 = v1227;\n                v1225 = v1230;\n                v1226 = v1228;\n            }\n        }\n        uint64_t v1231 = v1225;\n        int64_t v1232 = v1224;\n        int64_t v1233 = v1231 <= v421 ? 0 : v1231 - v421;\n        int64_t v1234 = v1226 - v1233; // 0x403994\n        if (v1234 != 0) {\n            // 0x403999\n            function_4048a0(v1233 + v1232, v1234);\n        }\n        int64_t v1235 = *(int64_t *)(v1232 + 0x2008); // 0x4039a2\n        v1219 = 1;\n        v1217 = v421;\n        v1218 = v1234;\n        int64_t v1236 = v1235; // 0x4039ac\n        if (v1235 != 0) {\n            int64_t v1237 = v1236;\n            int64_t v1238 = *(int64_t *)(v1237 + 0x2000); // 0x4039ae\n            if (v1238 != 0) {\n                // 0x4039ba\n                function_4048a0(v1237, v1238);\n            }\n            int64_t v1239 = *(int64_t *)(v1237 + 0x2008); // 0x4039a2\n            v1219 = 1;\n            v1217 = v421;\n            v1218 = v1238;\n            while (v1239 != 0) {\n                // 0x4039ae\n                v1237 = v1239;\n                v1238 = *(int64_t *)(v1237 + 0x2000);\n                if (v1238 != 0) {\n                    // 0x4039ba\n                    function_4048a0(v1237, v1238);\n                }\n                // 0x4039a2\n                v1239 = *(int64_t *)(v1237 + 0x2008);\n                v1219 = 1;\n                v1217 = v421;\n                v1218 = v1238;\n            }\n        }\n    } else {\n        // 0x403ae1\n        function_409510(4, 0x100000000 * v418 >> 32);\n        char * format13 = dcgettext(NULL, \"error reading %s\", 5); // 0x403aff\n        uint32_t err_num13 = *__errno_location(); // 0x403b14\n        error(0, err_num13, format13);\n        v1219 = v1057;\n        v1217 = (int64_t)format13;\n        v1218 = err_num13;\n    }\n    int32_t v1240 = v442; // 0x402d89\n    int64_t v1241 = fd; // 0x402d8e\n    int32_t v1242 = v1201; // 0x40393f\n    int64_t v1243 = 0x100000000 * v442 >> 32; // 0x403944\n    int64_t v1244 = v1218;\n    int64_t v1245 = v1217;\n    int32_t v1246 = v1219;\n    v427 = v423;\n    v428 = v1246;\n    v429 = v430;\n    v431 = v1240;\n    v433 = v434;\n    v435 = v1242;\n    v437 = v1245;\n    v438 = v1244;\n    v439 = v421;\n    v441 = v1243;\n    v443 = v1241;\n    int64_t v1247 = v1216; // 0x4039e0\n    if (v1216 != 0) {\n        int64_t v1248 = *(int64_t *)(v1247 + 0x2008); // 0x4039ce\n        free((int64_t *)v1247);\n        v427 = v423;\n        v428 = v1246;\n        v429 = v430;\n        v431 = v1240;\n        v433 = v434;\n        v435 = v1242;\n        v437 = v1245;\n        v438 = v1244;\n        v439 = v421;\n        v441 = v1243;\n        v443 = v1241;\n        v1247 = v1248;\n        while (v1248 != 0) {\n            // 0x4039ce\n            v1248 = *(int64_t *)(v1247 + 0x2008);\n            free((int64_t *)v1247);\n            v427 = v423;\n            v428 = v1246;\n            v429 = v430;\n            v431 = v1240;\n            v433 = v434;\n            v435 = v1242;\n            v437 = v1245;\n            v438 = v1244;\n            v439 = v421;\n            v441 = v1243;\n            v443 = v1241;\n            v1247 = v1248;\n        }\n    }\n    goto lab_0x402a5e;\n  lab_0x402ad3:;\n    int64_t v1249 = function_404b40(0x100000000 * v418 >> 32, fd, v421, &v327); // 0x402ae9\n    int32_t v1250 = v1249; // 0x402af7\n    struct stat * v422 = (struct stat *)-1; // 0x402af9\n    int64_t v424 = v1046; // 0x402af9\n    if (v1250 == 0) {\n        goto lab_0x402a3c;\n    } else {\n        // 0x402aff\n        v427 = (struct stat *)-1;\n        v428 = v1250 < 0;\n        v429 = v430;\n        v431 = v432;\n        v433 = v434;\n        v435 = v436;\n        v437 = v421;\n        v438 = fd;\n        v439 = v440;\n        v441 = v442;\n        v443 = v1046;\n        goto lab_0x402a5e;\n    }\n  lab_0x402682:;\n    int64_t v1251 = function_409dd0(0x2018); // 0x402687\n    *(int64_t *)(v1251 + 0x2008) = 0;\n    *(int64_t *)(v1251 + 0x2000) = 0;\n    *(int64_t *)(v1251 + 0x2010) = 0;\n    int32_t v1252 = v1251; // 0x4026b5\n    int64_t v1253 = function_409dd0(0x2018); // 0x4026ba\n    int64_t v1254 = function_409780(fd, v1253, 0x2000); // 0x4026e4\n    int64_t v1255 = v1254; // 0x4026f4\n    int64_t v1256 = v1253; // 0x4026f4\n    int64_t v1257 = v1251; // 0x4026f4\n    int64_t v1258 = 0; // 0x4026f4\n    int32_t v1259 = v1252; // 0x4026f4\n    int64_t v481 = v1251; // 0x4026f4\n    int32_t v483 = v1252; // 0x4026f4\n    int64_t v479 = v1253; // 0x4026f4\n    int32_t v486 = 0; // 0x4026f4\n    int64_t v488 = v440; // 0x4026f4\n    int64_t v490 = v1254; // 0x4026f4\n    int64_t v489; // 0x401e60\n    int64_t * v478; // 0x401e60\n    int64_t v487; // 0x401e60\n    int64_t v480; // 0x401e60\n    int64_t v484; // 0x401e60\n    int32_t v485; // 0x401e60\n    int32_t v482; // 0x401e60\n    if (v1254 < 0xffffffffffffffff) {\n        int64_t v1260; // 0x401e60\n        int64_t v1261; // 0x401e60\n        int32_t v1262; // 0x401e60\n        int64_t * v1263; // 0x401e60\n        int64_t v1264; // 0x402701\n        int64_t v1265; // 0x40276e\n        int64_t v1266; // 0x4026e4\n        while (true) {\n            // 0x4026fa\n            v1260 = v1257;\n            int64_t * v1267 = (int64_t *)(v1260 + 0x2008);\n            v1262 = v1259;\n            v1261 = v1256;\n            int64_t * v1268 = (int64_t *)(v1261 + 0x2000); // 0x4026fa\n            int64_t * v1269 = (int64_t *)(v1261 + 0x2008); // 0x40271a\n            int64_t v1270 = v1262;\n            int64_t * v1271 = (int64_t *)(v1270 + 0x2000);\n            v1263 = (int64_t *)v1261;\n            int64_t * v1272 = (int64_t *)(v1270 + 0x2008);\n            int64_t v1273 = v1255;\n            *v1268 = v1273;\n            v1264 = v1273 + v1261;\n            v327 += v1273;\n            *v1269 = 0;\n            *(int64_t *)(v1261 + 0x2010) = 0;\n            int64_t v1274 = (int64_t)*(char *)&g48 & 0xffffffff; // 0x402749\n            int64_t v1275 = function_40b730(v1261, v1274, v1273); // 0x40274f\n            int64_t v1276 = 1; // 0x40275b\n            int64_t v1277 = v1275; // 0x40275b\n            int64_t v1278; // 0x40273f\n            int64_t v1279; // 0x40274f\n            if (v1275 != 0) {\n                *v1269 = v1276;\n                v1278 = v1277 + 1;\n                v1279 = function_40b730(v1278, v1274, v1264 - v1278);\n                v1276++;\n                while (v1279 != 0) {\n                    // 0x402738\n                    *v1269 = v1276;\n                    v1278 = v1279 + 1;\n                    v1279 = function_40b730(v1278, v1274, v1264 - v1278);\n                    v1276++;\n                }\n            }\n            int64_t v1280 = *v1271; // 0x402767\n            v1265 = 0x100000000 * v1258 >> 32;\n            int64_t v1281; // 0x401e60\n            int64_t v1282; // 0x401e60\n            while (v1280 + v1273 < 0x2000) {\n                // 0x40287e\n                memcpy((int64_t *)(v1280 + v1270), v1263, (int32_t)v1273);\n                *v1271 = *v1271 + *v1268;\n                *v1272 = *v1272 + *v1269;\n                v1266 = function_409780(fd, v1261, 0x2000);\n                v1281 = v1266;\n                v1282 = v1265;\n                if (v1266 >= 0xffffffffffffffff) {\n                    // break (via goto) -> 0x4026d8\n                    goto lab_0x4026d8;\n                }\n                v1273 = v1281;\n                *v1268 = v1273;\n                v1264 = v1273 + v1261;\n                v327 += v1273;\n                *v1269 = 0;\n                *(int64_t *)(v1261 + 0x2010) = 0;\n                v1274 = (int64_t)*(char *)&g48 & 0xffffffff;\n                v1275 = function_40b730(v1261, v1274, v1273);\n                v1276 = 1;\n                v1277 = v1275;\n                if (v1275 != 0) {\n                    *v1269 = v1276;\n                    v1278 = v1277 + 1;\n                    v1279 = function_40b730(v1278, v1274, v1264 - v1278);\n                    v1276++;\n                    while (v1279 != 0) {\n                        // 0x402738\n                        *v1269 = v1276;\n                        v1278 = v1279 + 1;\n                        v1279 = function_40b730(v1278, v1274, v1264 - v1278);\n                        v1276++;\n                    }\n                }\n                // 0x40275d\n                v1280 = *v1271;\n                v1265 = 0x100000000 * v1282 >> 32;\n            }\n            // 0x402781\n            *(int64_t *)(v1270 + 0x2010) = v1261;\n            int64_t v1283 = v1265 - *v1267; // 0x402790\n            while (v1283 <= v421) {\n                int64_t v1284 = function_409dd0(0x2018); // 0x402b10\n                int32_t v1285 = v1261;\n                int64_t v1286 = function_409780(fd, v1284, 0x2000); // 0x4026e4\n                int64_t v1287 = v1286; // 0x4026f4\n                int64_t v1288 = v1284; // 0x4026f4\n                int64_t v1289 = v1265; // 0x4026f4\n                int32_t v1290 = v1285; // 0x4026f4\n                if (v1286 >= 0xffffffffffffffff) {\n                    // 0x4026d8\n                    v481 = v1260;\n                    v483 = v1285;\n                    v479 = v1284;\n                    v486 = v1265;\n                    v488 = v1264;\n                    v490 = v1286;\n                    goto lab_0x4026d8_4;\n                }\n                v1262 = v1290;\n                v1261 = v1288;\n                v1268 = (int64_t *)(v1261 + 0x2000);\n                v1269 = (int64_t *)(v1261 + 0x2008);\n                v1270 = v1262;\n                v1271 = (int64_t *)(v1270 + 0x2000);\n                v1263 = (int64_t *)v1261;\n                v1272 = (int64_t *)(v1270 + 0x2008);\n                v1273 = v1287;\n                *v1268 = v1273;\n                v1264 = v1273 + v1261;\n                v327 += v1273;\n                *v1269 = 0;\n                *(int64_t *)(v1261 + 0x2010) = 0;\n                v1274 = (int64_t)*(char *)&g48 & 0xffffffff;\n                v1275 = function_40b730(v1261, v1274, v1273);\n                v1276 = 1;\n                v1277 = v1275;\n                if (v1275 != 0) {\n                    *v1269 = v1276;\n                    v1278 = v1277 + 1;\n                    v1279 = function_40b730(v1278, v1274, v1264 - v1278);\n                    v1276++;\n                    while (v1279 != 0) {\n                        // 0x402738\n                        *v1269 = v1276;\n                        v1278 = v1279 + 1;\n                        v1279 = function_40b730(v1278, v1274, v1264 - v1278);\n                        v1276++;\n                    }\n                }\n                // 0x40275d\n                v1280 = *v1271;\n                v1265 = 0x100000000 * v1289 >> 32;\n                while (v1280 + v1273 < 0x2000) {\n                    // 0x40287e\n                    memcpy((int64_t *)(v1280 + v1270), v1263, (int32_t)v1273);\n                    *v1271 = *v1271 + *v1268;\n                    *v1272 = *v1272 + *v1269;\n                    v1266 = function_409780(fd, v1261, 0x2000);\n                    v1281 = v1266;\n                    v1282 = v1265;\n                    if (v1266 >= 0xffffffffffffffff) {\n                        // break (via goto) -> 0x4026d8\n                        goto lab_0x4026d8;\n                    }\n                    v1273 = v1281;\n                    *v1268 = v1273;\n                    v1264 = v1273 + v1261;\n                    v327 += v1273;\n                    *v1269 = 0;\n                    *(int64_t *)(v1261 + 0x2010) = 0;\n                    v1274 = (int64_t)*(char *)&g48 & 0xffffffff;\n                    v1275 = function_40b730(v1261, v1274, v1273);\n                    v1277 = v1275;\n                    if (v1275 != 0) {\n                        *v1269 = 1;\n                        v1278 = v1277 + 1;\n                        while (function_40b730(v1278, v1274, v1264 - v1278) != 0) {\n                            // 0x402738\n                            *v1269 = v1276;\n                            v1278 = v1277 + 1;\n                            v1279 = function_40b730(v1278, v1274, v1264 - v1278);\n                            v1276++;\n                            v1277 = v1279;\n                        }\n                    }\n                    // 0x40275d\n                    v1280 = *v1271;\n                    v1265 = 0x100000000 * v1282 >> 32;\n                }\n                // 0x402781\n                *(int64_t *)(v1270 + 0x2010) = v1261;\n                v1283 = v1265 - *v1267;\n            }\n            int32_t v1291 = v1261;\n            int64_t v1292 = *(int64_t *)(v1260 + 0x2010); // 0x4027af\n            int64_t v1293 = function_409780(fd, v1260, 0x2000); // 0x4026e4\n            v1255 = v1293;\n            v1256 = v1260;\n            v1257 = v1292;\n            v1258 = v1283;\n            v1259 = v1291;\n            if (v1293 >= 0xffffffffffffffff) {\n                // 0x4026d8\n                v481 = v1292;\n                v483 = v1291;\n                v479 = v1260;\n                v486 = v1283;\n                v488 = v1264;\n                v490 = v1293;\n                goto lab_0x4026d8_4;\n            }\n        }\n      lab_0x4026d8:\n        // 0x4026d8\n        v478 = v1263;\n        v480 = v1260;\n        v482 = v1262;\n        v484 = v1261;\n        v485 = v1265;\n        v487 = v1264;\n        v489 = v1266;\n        goto lab_0x402c60;\n    } else {\n        goto lab_0x4026d8_4;\n    }\n  lab_0x403816:;\n    int64_t v1294 = v188;\n    int64_t v559 = v187;\n    int64_t v560 = v186;\n    bool v551 = v185;\n    v14 = v145;\n    v16 = v147;\n    v17 = v149;\n    v19 = v151;\n    v21 = v153;\n    v23 = v155;\n    v25 = v157;\n    v26 = v159;\n    v28 = v163;\n    v29 = v165;\n    v31 = v167;\n    v32 = v169;\n    v34 = v171;\n    v35 = v173;\n    v37 = v551;\n    v39 = v177;\n    v41 = v560;\n    v43 = v559;\n    v45 = fd2;\n    v47 = v1294;\n    v49 = v180;\n    v50 = v184;\n    int64_t v558; // 0x401e60\n    uint32_t pid2; // 0x40382c\n    if (v1295 != 0) {\n        goto lab_0x403305;\n    } else {\n        // 0x403821\n        v300 = v145;\n        v301 = v147;\n        v302 = v149;\n        v303 = v151;\n        v304 = v153;\n        v305 = v155;\n        v306 = v157;\n        v307 = v159;\n        v308 = v161;\n        v309 = v167;\n        v310 = v169;\n        v311 = v171;\n        v312 = v173;\n        v313 = v551;\n        v314 = v177;\n        v315 = v180;\n        v316 = v182;\n        v317 = v184;\n        if ((char)v159 != 0) {\n            goto lab_0x402988;\n        } else {\n            // 0x40382c\n            pid2 = g47;\n            v558 = v1294;\n            if (pid2 != 0) {\n                // 0x403902\n                v558 = 0;\n                if (kill(pid2, 0) == 0) {\n                    goto lab_0x40383a;\n                } else {\n                    int32_t v1296 = *__errno_location(); // 0x403916\n                    v558 = 0;\n                    if (v1296 == 1) {\n                        goto lab_0x40383a;\n                    } else {\n                        // 0x40391f\n                        v14 = v145;\n                        v16 = v147;\n                        v17 = v149;\n                        v19 = v151;\n                        v21 = v153;\n                        v23 = v155;\n                        v25 = v157;\n                        v26 = 0x1000000 * v163 >> 24;\n                        v28 = v163;\n                        v29 = v165;\n                        v31 = v167;\n                        v32 = v169;\n                        v34 = v171;\n                        v35 = v173;\n                        v37 = v551;\n                        v39 = v177;\n                        v41 = v560;\n                        v43 = v559;\n                        v45 = fd2;\n                        v47 = 0;\n                        v49 = v180;\n                        v50 = v184;\n                        goto lab_0x403305;\n                    }\n                }\n            } else {\n                goto lab_0x40383a;\n            }\n        }\n    }\n  lab_0x4037bb:\n    // 0x4037bb\n    timeout = 0;\n    __asm_rep_stosq_memset(&readfds, 0, 16);\n    int64_t v1297 = &readfds; // 0x4037f7\n    readfds |= 2;\n    int32_t v1298 = select(2, (struct _TYPEDEF_fd_set *)&readfds, NULL, NULL, (struct timeval *)&timeout); // 0x403808\n    v185 = false;\n    v186 = 0;\n    v187 = 0;\n    v188 = v1297;\n    if (v1298 == 1) {\n        // 0x40392d\n        raise(13);\n        v185 = false;\n        v186 = 0;\n        v187 = 0;\n        v188 = v1297;\n    }\n    goto lab_0x403816;\n  lab_0x40337e:\n    // 0x40337e\n    v611 = v99;\n    v612 = v98;\n    v613 = v97;\n    v614 = v96;\n    v615 = v95;\n    v616 = v94;\n    v617 = v93;\n    v618 = v92;\n    v619 = v91;\n    v620 = v90;\n    v621 = v89;\n    v622 = v88;\n    v623 = v87;\n    v624 = v86;\n    v625 = v85;\n    v626 = v84;\n    v627 = v83;\n    v628 = -2;\n    v629 = v577;\n    v630 = v578;\n    v631 = v561;\n    v632 = v573;\n    v633 = v76;\n    int64_t v572; // 0x401e60\n    if (v555 == 0) {\n        // 0x403590\n        if (__fxstat(1, v1299, (struct stat *)&readfds) != 0) {\n            goto lab_0x403877;\n        } else {\n            // 0x4035ac\n            if (*v554 == v351) {\n                if ((v351 & 0xf000) == 0x8000) {\n                    // 0x4038e3\n                    if (*(int64_t *)(v573 + 8) == v1) {\n                        goto lab_0x4036d1;\n                    } else {\n                        // 0x4038f5\n                        v572 = v351;\n                        goto lab_0x4035cd;\n                    }\n                } else {\n                    goto lab_0x4036d1;\n                }\n            } else {\n                // 0x4035bd\n                v572 = v351;\n                goto lab_0x4035cd;\n            }\n        }\n    } else {\n        goto lab_0x40338d;\n    }\n  lab_0x402d1a:\n    // 0x402d1a\n    *(char *)(v412 + 52) = *(char *)&g54 ^ 1;\n    function_404820(v402, function_4047e0(*v393, v410, v409));\n    *(int32_t *)(v412 + 56) = -1;\n    v266 = v394;\n    v264 = v395;\n    v262 = v396;\n    v260 = v397;\n    v270 = v398;\n    v258 = v399;\n    v296 = v400;\n    v294 = v401;\n    v292 = v402;\n    v256 = 0;\n    v254 = v403;\n    v252 = v404;\n    v250 = v405;\n    v248 = v406;\n    v246 = v407;\n    v244 = v408;\n    v285 = v409;\n    v242 = v411;\n    v268 = v412;\n    v240 = v413;\n    goto lab_0x40295a;\n  lab_0x402f56:;\n    int64_t v414 = v415;\n    if (v414 > (v2 < 0x2000000000000001 ? v2 : 512)) {\n        int64_t v416 = v417; // 0x402f85\n        if (v417 == -1) {\n            // 0x4039e7\n            v416 = function_404c20((int64_t)fd, 0, 1, 0x100000000 * v418 >> 32);\n        }\n        int64_t v419 = v416;\n        int64_t v420 = v419; // 0x402f8e\n        if (v414 > v419 == v414 - v419 > v421) {\n            // 0x403a6b\n            v420 = v414 - v421;\n            function_404c20((int64_t)fd, (int32_t)v420, 0, 0x100000000 * v418 >> 32);\n        }\n        // 0x402fa1\n        v327 = v420;\n        v422 = v423;\n        v424 = v425;\n        goto lab_0x402a3c;\n    } else {\n        goto lab_0x402d56;\n    }\n  lab_0x402a3c:;\n    int64_t v426 = 0x100000000 * v418 >> 32; // 0x402a47\n    v327 += function_404a20(0, v426, fd, (int64_t)v422);\n    v427 = v422;\n    v428 = 1;\n    v429 = v430;\n    v431 = v432;\n    v433 = v434;\n    v435 = v436;\n    v437 = fd;\n    v438 = v426;\n    v439 = v440;\n    v441 = v442;\n    v443 = v424;\n    goto lab_0x402a5e;\n  lab_0x4026d8_4:\n    // 0x4026d8\n    v478 = (int64_t *)v479;\n    v480 = v481;\n    v482 = v483;\n    v484 = v479;\n    v485 = v486;\n    v487 = v488;\n    v489 = v490;\n    goto lab_0x402c60;\n  lab_0x402bba:;\n    int64_t * v1189 = (int64_t *)v445;\n    v393 = v1189;\n    v394 = v459;\n    v395 = v460;\n    v396 = v461;\n    v397 = v462;\n    v398 = v463;\n    v399 = v464;\n    v400 = v452;\n    v401 = v465;\n    v402 = fd;\n    v403 = v450;\n    v404 = v449;\n    v405 = v448;\n    v406 = v447;\n    v407 = v466;\n    v408 = v467;\n    v409 = v454;\n    v410 = v453;\n    v411 = v446;\n    v412 = v445;\n    v413 = v444;\n    if ((char)v451 == 0) {\n        goto lab_0x402d1a;\n    } else {\n        // 0x402bc5\n        *(char *)(v445 + 52) = 0;\n        *(int32_t *)(v445 + 56) = fd;\n        *(int64_t *)(v445 + 8) = v327;\n        *(int32_t *)(v445 + 64) = v465 == 0 ? v462 : 1;\n        *(int64_t *)(v445 + 88) = 0;\n        *(int64_t *)(v445 + 24) = (int64_t)v351;\n        *(int64_t *)(v445 + 32) = (int64_t)readfds;\n        int64_t v1190 = function_405090(v453, function_4047e0(*v1189, v453, v454)); // 0x402c3a\n        *(char *)(v445 + 53) = (char)v1190;\n        v266 = v459;\n        v264 = v460;\n        v262 = v461;\n        v260 = v462;\n        v270 = v463;\n        v258 = v464;\n        v296 = v452;\n        v294 = v465;\n        v292 = fd;\n        v256 = v451;\n        v254 = v450;\n        v252 = v449;\n        v250 = v448;\n        v248 = v447;\n        v246 = v466;\n        v244 = v467;\n        v285 = v454;\n        v242 = v446;\n        v268 = v445;\n        v240 = v444;\n        goto lab_0x40295a;\n    }\n  lab_0x402a26:\n    // 0x402a26\n    v327 += v421;\n    v422 = (struct stat *)-1;\n    v424 = v1046;\n    goto lab_0x402a3c;\n  lab_0x402a09:\n    // 0x402a09\n    if (lseek(fd, offset, SEEK_CUR) == -1) {\n        goto lab_0x402ad3;\n    } else {\n        goto lab_0x402a26;\n    }\n  lab_0x402c60:;\n    int64_t v491 = v487;\n    int32_t v492 = v485;\n    v493 = v484;\n    int32_t v494 = v482;\n    int64_t v495 = v480;\n    free(v478);\n    int64_t v496; // 0x401e60\n    int64_t v497; // 0x401e60\n    int32_t v498; // 0x401e60\n    if (v489 == -1) {\n        // 0x403a04\n        function_409510(4, 0x100000000 * v418 >> 32);\n        char * format5 = dcgettext(NULL, \"error reading %s\", 5); // 0x403a22\n        uint32_t err_num3 = *__errno_location(); // 0x403a37\n        error(0, err_num3, format5);\n        v498 = v499;\n        v496 = (int64_t)format5;\n        v497 = err_num3;\n        goto lab_0x402ca1;\n    } else {\n        int64_t v500 = v494; // 0x402c7a\n        int64_t v501 = *(int64_t *)(v500 + 0x2000); // 0x402c7f\n        bool v502 = v421 == 0 | v501 == 0;\n        int64_t v503 = (int64_t)v502 | 0x2000; // 0x402c95\n        v498 = 1;\n        v496 = v503;\n        v497 = v493;\n        if (!v502) {\n            int32_t v504 = v492; // 0x402fbb\n            if (*(char *)(v500 - 1 + v501) != *(char *)&g48) {\n                int64_t * v505 = (int64_t *)(v500 + 0x2008); // 0x402fbd\n                *v505 = *v505 + 1;\n                v504 = v492 + 1;\n            }\n            int64_t v506 = v504;\n            int64_t v507 = v506 - *(int64_t *)(v495 + 0x2008); // 0x402fd8\n            int64_t v508 = v507; // 0x402fe2\n            int64_t v509 = v495; // 0x402fe2\n            v510 = v506;\n            int32_t v511 = v504; // 0x402fe2\n            v512 = v503;\n            int64_t v513 = v495; // 0x402fe2\n            if (v507 > v421) {\n                int64_t v514 = v508;\n                int64_t v515 = *(int64_t *)(v509 + 0x2010); // 0x402fe8\n                int64_t v516 = v514 - *(int64_t *)(v515 + 0x2008); // 0x402ff2\n                v509 = v515;\n                while (v421 < v516) {\n                    // 0x402fe8\n                    v514 = v516;\n                    v515 = *(int64_t *)(v509 + 0x2010);\n                    v516 = v514 - *(int64_t *)(v515 + 0x2008);\n                    v509 = v515;\n                }\n                // 0x402ffe\n                v510 = 0x100000000 * v514 >> 32;\n                v511 = v514;\n                v512 = v514;\n                v513 = v515;\n            }\n            // 0x403003\n            v517 = v513;\n            v518 = v511;\n            if (v510 <= v421) {\n                goto lab_0x403049;\n            } else {\n                int64_t v519; // 0x401e60\n                int64_t v520 = v519;\n                int64_t v521; // 0x403017\n                int64_t v522; // 0x40302b\n                int64_t v523 = function_40b730(v520, v522, v521 - v520); // 0x403031\n                v524 = v460;\n                v525 = v461;\n                v526 = v462;\n                v527 = v463;\n                v528 = v464;\n                v529 = v423;\n                v530 = v465;\n                v531 = fd;\n                int32_t v532; // 0x402622\n                v533 = v532;\n                v534 = v535;\n                int32_t v536; // 0x402c97\n                v537 = v536;\n                v538 = v494;\n                v539 = v442;\n                v540 = v518;\n                v541 = v466;\n                v542 = v467;\n                int64_t v543; // 0x401e60\n                v544 = v543;\n                // 0x40301f\n                while (v523 != 0) {\n                    int64_t v545 = v523 + 1; // 0x40303f\n                    int64_t v546; // 0x401e60\n                    int64_t v547 = v546 - 1; // 0x403043\n                    v519 = v545;\n                    v543 = v547;\n                    if (v547 == 0) {\n                        goto lab_0x403049;\n                    }\n                    v546 = v543;\n                    v520 = v519;\n                    int64_t v548 = v521 - v520; // 0x40302e\n                    v523 = function_40b730(v520, v522, v548);\n                    v524 = v460;\n                    v525 = v461;\n                    v526 = v462;\n                    v527 = v463;\n                    v528 = v464;\n                    v529 = v423;\n                    v530 = v465;\n                    v531 = fd;\n                    v533 = v532;\n                    v534 = v535;\n                    v537 = v536;\n                    v538 = v494;\n                    v539 = v442;\n                    v540 = v518;\n                    v541 = v466;\n                    v542 = v467;\n                    v544 = v546;\n                }\n                goto lab_0x403e46;\n            }\n        } else {\n            goto lab_0x402ca1;\n        }\n    }\n  lab_0x403877:\n    // 0x403877\n    *(int32_t *)(v182 + 56) = -1;\n    int32_t * v549 = __errno_location(); // 0x40387f\n    *(int32_t *)(v182 + 60) = *v549;\n    int64_t v550 = function_4095e0(0, 3, v180); // 0x403897\n    uint32_t err_num4 = *v549; // 0x40389c\n    error(0, err_num4, \"%s\", (char *)v550);\n    close((int32_t)fd2);\n    v192 = v145;\n    v193 = v147;\n    v194 = v149;\n    v195 = v151;\n    v196 = v153;\n    v197 = v155;\n    v198 = v157;\n    v199 = v159;\n    v200 = v161;\n    v201 = v163;\n    v202 = v165;\n    v203 = v167;\n    v204 = v169;\n    v205 = v171;\n    v206 = v173;\n    v207 = v551;\n    int128_t v552; // 0x40383a\n    v208 = v552;\n    v209 = v550;\n    v210 = (int64_t)\"%s\";\n    char * format6; // 0x403859\n    v211 = (int64_t)format6;\n    v212 = fd2;\n    v213 = err_num4;\n    v214 = v180;\n    v215 = v182;\n    v216 = v184;\n    goto lab_0x4033a7;\n  lab_0x403688:;\n    int32_t * v553 = __errno_location(); // 0x403688\n    if ((*v554 & 0xf000) != 0x8000) {\n        goto lab_0x403b51;\n    } else {\n        // 0x4036a3\n        if (*v553 != 1) {\n            goto lab_0x403b51;\n        } else {\n            // 0x4036ac\n            v555 = (int64_t)*v556;\n            goto lab_0x40337e;\n        }\n    }\n  lab_0x40383a:\n    // 0x40383a\n    v552 = __asm_movsd(v145);\n    int64_t v557 = function_40a160((int64_t)pid2, v558, v559); // 0x403840\n    v14 = v145;\n    v16 = v147;\n    v17 = v149;\n    v19 = v151;\n    v21 = v153;\n    v23 = v155;\n    v25 = v157;\n    v26 = v159;\n    v28 = v163;\n    v29 = v165;\n    v31 = v167;\n    v32 = v169;\n    v34 = v171;\n    v35 = v173;\n    v37 = v551;\n    v39 = v552;\n    v41 = v560;\n    v43 = v559;\n    v45 = fd2;\n    v47 = v558;\n    v49 = v180;\n    v50 = v184;\n    if ((int32_t)v557 == 0) {\n        goto lab_0x403305;\n    } else {\n        // 0x40384d\n        format6 = dcgettext(NULL, \"cannot read realtime clock\", 5);\n        error(1, *__errno_location(), format6);\n        goto lab_0x403877;\n    }\n  lab_0x403b51:\n    // 0x403b51\n    err_num5 = v553;\n    function_4095e0(0, 3, v561);\n    error(1, *err_num5, dcgettext(NULL, \"%s: cannot change nonblocking mode\", 5));\n    v289 = v94;\n    v290 = v97;\n  lab_0x403b91:;\n    int64_t v562 = v290; // 0x403b9a\n    int64_t v563 = *(int64_t *)v562; // 0x403ba2\n    while ((v351 & 0xf000) == 0xa000 != (__lxstat(1, (char *)v563, (struct stat *)&readfds) == 0)) {\n        int64_t v564 = v562 + 96; // 0x403bcd\n        v562 = v564;\n        if (v564 == v289) {\n            // 0x403bdf\n            goto lab_0x403bdf_2;\n        }\n        v563 = *(int64_t *)v562;\n    }\n    goto lab_0x4032ae_2;\n  lab_0x402ca1:\n    // 0x402ca1\n    v565 = v498;\n    v566 = v492;\n    v567 = v496;\n    v568 = v497;\n    v569 = v491;\n    v570 = v493;\n    v470 = v498;\n    v471 = v494;\n    v472 = v442;\n    v473 = v492;\n    v474 = v496;\n    v475 = v497;\n    v476 = v491;\n    v477 = v493;\n    if (v495 == 0) {\n        goto lab_0x402cc4;\n    } else {\n        goto lab_0x402cb0;\n    }\n  lab_0x4036d1:;\n    int64_t v571 = v351; // 0x4036d1\n    v572 = v571;\n    if (*(int64_t *)(v573 + 16) != v1) {\n        goto lab_0x4035cd;\n    } else {\n        // 0x4036e3\n        v572 = v571;\n        if (*(int32_t *)(v573 + 24) != v351) {\n            goto lab_0x4035cd;\n        } else {\n            int64_t * v574 = (int64_t *)(v573 + 88); // 0x4036ed\n            uint64_t v575 = *v574; // 0x4036ed\n            int64_t v576 = v575 + 1; // 0x4036f8\n            *v574 = v576;\n            v192 = v99;\n            v193 = v98;\n            v194 = v97;\n            v195 = v96;\n            v196 = v95;\n            v197 = v94;\n            v198 = v93;\n            v199 = v92;\n            v200 = v91;\n            v201 = v90;\n            v202 = v89;\n            v203 = v88;\n            v204 = v87;\n            v205 = v86;\n            v206 = v85;\n            v207 = v84;\n            v208 = v83;\n            v209 = v571;\n            v210 = v576;\n            v211 = v577;\n            v212 = v578;\n            v213 = v578;\n            v214 = v561;\n            v215 = v573;\n            v216 = v76;\n            if (v575 >= g25) {\n                // 0x403706\n                v192 = v99;\n                v193 = v98;\n                v194 = v97;\n                v195 = v96;\n                v196 = v95;\n                v197 = v94;\n                v198 = v93;\n                v199 = v92;\n                v200 = v91;\n                v201 = v90;\n                v202 = v89;\n                v203 = v88;\n                v204 = v87;\n                v205 = v86;\n                v206 = v85;\n                v207 = v84;\n                v208 = v83;\n                v209 = v571;\n                v210 = v576;\n                v211 = v577;\n                v212 = v578;\n                v213 = v578;\n                v214 = v561;\n                v215 = v573;\n                v216 = v76;\n                if (g26 == 1) {\n                    int64_t v579 = *v556 != 0; // 0x40371d\n                    function_4056e0(v573, v579, v576);\n                    *v574 = 0;\n                    v192 = v99;\n                    v193 = v98;\n                    v194 = v97;\n                    v195 = v96;\n                    v196 = v95;\n                    v197 = v94;\n                    v198 = v93;\n                    v199 = v92;\n                    v200 = v91;\n                    v201 = v90;\n                    v202 = v89;\n                    v203 = v88;\n                    v204 = v87;\n                    v205 = v86;\n                    v206 = v85;\n                    v207 = v84;\n                    v208 = v83;\n                    v209 = v571;\n                    v210 = v576;\n                    v211 = v577;\n                    v212 = v578;\n                    v213 = v579;\n                    v214 = v561;\n                    v215 = v573;\n                    v216 = v76;\n                }\n            }\n            goto lab_0x4033a7;\n        }\n    }\n  lab_0x4035cd:\n    // 0x4035cd\n    *(int64_t *)(v573 + 24) = v572;\n    *(int64_t *)(v573 + 88) = 0;\n    struct stat * v580 = v93; // 0x4035ef\n    if ((v581 & 0xf000) == 0x8000) {\n        int64_t * v582 = (int64_t *)(v573 + 8); // 0x403733\n        v580 = v93;\n        if (v1 < *v582) {\n            int64_t v583 = function_4095e0(0, 3, v561); // 0x40374f\n            error(0, (int32_t)\"%s: file truncated\" ^ (int32_t)\"%s: file truncated\", dcgettext(NULL, \"%s: file truncated\", 5));\n            function_404c20(v578, (int32_t)\"%s: file truncated\" ^ (int32_t)\"%s: file truncated\" ^ (int32_t)\"%s: file truncated\" ^ (int32_t)\"%s: file truncated\", 0, v561);\n            *v582 = 0;\n            v580 = (struct stat *)v583;\n        }\n    }\n    struct stat * v584 = v580;\n    int32_t v585 = v87; // 0x4035fa\n    if (v577 != (int64_t)v87) {\n        int32_t v586 = v577; // 0x403603\n        v585 = v586;\n        if (g49 != 0) {\n            char * v587 = g23 != 0 ? (char *)&g16 : (char *)&g15; // 0x40362e\n            __printf_chk(1, \"%s==> %s <==\\n\", v587, (char *)v561);\n            g23 = 0;\n            v585 = v586;\n        }\n    }\n    int32_t v588 = v585;\n    v589 = v99;\n    v590 = v98;\n    v591 = v97;\n    v592 = v96;\n    v593 = v95;\n    v594 = v94;\n    v595 = v584;\n    v596 = v92;\n    v597 = v91;\n    v598 = v90;\n    v599 = v89;\n    v600 = v88;\n    v601 = v588;\n    v602 = v86;\n    v603 = v85;\n    v604 = v84;\n    v605 = v83;\n    v606 = v577;\n    v607 = v578;\n    v608 = v561;\n    v609 = v573;\n    v610 = v76;\n    if (*v556 != 0) {\n        goto lab_0x403eb3;\n    } else {\n        // 0x40364b\n        v611 = v99;\n        v612 = v98;\n        v613 = v97;\n        v614 = v96;\n        v615 = v95;\n        v616 = v94;\n        v617 = v584;\n        v618 = v92;\n        v619 = v91;\n        v620 = v90;\n        v621 = v89;\n        v622 = v88;\n        v623 = v588;\n        v624 = v86;\n        v625 = v85;\n        v626 = v84;\n        v627 = v83;\n        v628 = -1;\n        v629 = v577;\n        v630 = v578;\n        v631 = v561;\n        v632 = v573;\n        v633 = v76;\n        if ((v581 & 0xf000) == 0x8000) {\n            // 0x40365f\n            v611 = v99;\n            v612 = v98;\n            v613 = v97;\n            v614 = v96;\n            v615 = v95;\n            v616 = v94;\n            v617 = v584;\n            v618 = v92;\n            v619 = v91;\n            v620 = v90;\n            v621 = v89;\n            v622 = v88;\n            v623 = v588;\n            v624 = v86;\n            v625 = v85;\n            v626 = v84;\n            v627 = v83;\n            v628 = -1;\n            v629 = v577;\n            v630 = v578;\n            v631 = v561;\n            v632 = v573;\n            v633 = v76;\n            if (*(char *)(v573 + 53) != 0) {\n                // 0x40366a\n                v611 = v99;\n                v612 = v98;\n                v613 = v97;\n                v614 = v96;\n                v615 = v95;\n                v616 = v94;\n                v617 = v584;\n                v618 = v92;\n                v619 = v91;\n                v620 = v90;\n                v621 = v89;\n                v622 = v88;\n                v623 = v588;\n                v624 = v86;\n                v625 = v85;\n                v626 = v84;\n                v627 = v83;\n                v628 = v1 - *(int64_t *)(v573 + 8);\n                v629 = v577;\n                v630 = v578;\n                v631 = v561;\n                v632 = v573;\n                v633 = v76;\n            }\n        }\n        goto lab_0x40338d;\n    }\n  lab_0x402cb0:;\n    int64_t v634 = *(int64_t *)(v495 + 0x2010); // 0x402cb0\n    free((int64_t *)v495);\n    int64_t v635 = v634; // 0x402cc2\n    v470 = v565;\n    v471 = v494;\n    v472 = v442;\n    v473 = v566;\n    v474 = v567;\n    v475 = v568;\n    v476 = v569;\n    v477 = v570;\n    while (v634 != 0) {\n        // 0x402cb0\n        v634 = *(int64_t *)(v635 + 0x2010);\n        free((int64_t *)v635);\n        v635 = v634;\n        v470 = v565;\n        v471 = v494;\n        v472 = v442;\n        v473 = v566;\n        v474 = v567;\n        v475 = v568;\n        v476 = v569;\n        v477 = v570;\n    }\n    goto lab_0x402cc4;\n  lab_0x403bdf_2:;\n    // 0x403bdf\n    int64_t v636; // 0x401e60\n    int64_t v637 = v636;\n    int64_t v638; // 0x401e60\n    int64_t v639 = v638;\n    int64_t v640; // 0x401e60\n    int64_t v641 = v639 + v640;\n    int32_t v642 = *(int32_t *)(v641 + 56); // 0x403bdf\n    int64_t v643 = v637; // 0x403be4\n    bool v644; // 0x401e60\n    int64_t v645; // 0x401e60\n    int64_t v646; // 0x401e60\n    int32_t v647; // 0x401e60\n    int32_t v648; // 0x401e60\n    int32_t v649; // 0x401e60\n    int64_t v650; // 0x401e60\n    int32_t v651; // 0x401e60\n    int32_t v652; // 0x401e60\n    int32_t v653; // 0x401e60\n    int64_t v654; // 0x401e60\n    struct stat * v655; // 0x401e60\n    int128_t v656; // 0x401e60\n    if (v642 < 0) {\n        goto lab_0x403c04;\n    } else {\n        int32_t v657 = *(int32_t *)(v641 + 48); // 0x403be6\n        uint32_t v658 = v657 & 0xf000; // 0x403bea\n        int64_t v659 = v658; // 0x403bea\n        v13 = v654;\n        v15 = v649;\n        v8 = v640;\n        v18 = v648;\n        v20 = v647;\n        v22 = v652;\n        v24 = v655;\n        v27 = v653;\n        v30 = v651;\n        v33 = v650;\n        v36 = v644;\n        v38 = v656;\n        v40 = v640;\n        v42 = v659;\n        v44 = v646;\n        v46 = v563;\n        v48 = v645;\n        v643 = v659;\n        if (v658 != 0x8000 == (v658 != 0x1000)) {\n            goto lab_0x4032ae_2;\n        } else {\n            goto lab_0x403c04;\n        }\n    }\n  lab_0x403c04:;\n    int64_t v660 = v643;\n    int64_t v661 = v639 + 96; // 0x403c04\n    v638 = v661;\n    v636 = v660;\n    bool v662; // 0x401e60\n    int64_t v663; // 0x401e60\n    int64_t v664; // 0x401e60\n    int64_t v665; // 0x401e60\n    int64_t v666; // 0x401e60\n    int64_t v667; // 0x401e60\n    int64_t v668; // 0x401e60\n    int64_t v669; // 0x401e60\n    int64_t v670; // 0x401e60\n    int32_t v671; // 0x401e60\n    int32_t v672; // 0x401e60\n    int64_t v673; // 0x401e60\n    int32_t v674; // 0x401e60\n    int64_t v675; // 0x401e60\n    int32_t v676; // 0x401e60\n    int32_t v677; // 0x401e60\n    int64_t v678; // 0x401e60\n    int32_t v679; // 0x401e60\n    struct stat * v680; // 0x401e60\n    int32_t v681; // 0x401e60\n    int32_t v682; // 0x401e60\n    int32_t v683; // 0x401e60\n    int32_t v684; // 0x401e60\n    int64_t v685; // 0x401e60\n    int128_t v686; // 0x401e60\n    if (v661 != v685) {\n        goto lab_0x403bdf_2;\n    } else {\n        int32_t v687 = g26; // 0x403c19\n        v13 = v654;\n        v15 = v649;\n        v8 = v640;\n        v18 = v648;\n        v20 = v647;\n        v22 = v652;\n        v24 = v655;\n        v27 = v653;\n        v30 = v651;\n        v33 = v650;\n        v36 = v644;\n        v38 = v656;\n        v40 = v640;\n        v42 = v660;\n        v44 = v646;\n        v46 = v563;\n        v48 = v645;\n        if ((char)v647 == 0 == v687 == 2) {\n            goto lab_0x4032ae_2;\n        } else {\n            int32_t v688 = inotify_init(); // 0x403c26\n            int64_t v689 = v688; // 0x403c2b\n            v228 = v654;\n            v229 = v649;\n            v224 = v640;\n            v230 = v648;\n            v231 = v647;\n            v220 = v652;\n            v232 = v655;\n            v233 = v653;\n            v234 = v651;\n            v235 = v650;\n            v236 = v644;\n            v237 = v656;\n            v238 = v640;\n            v222 = v689;\n            if (v688 < 0) {\n                goto lab_0x403db0;\n            } else {\n                struct _IO_FILE * stream = g39; // 0x403c36\n                int32_t v690; // 0x403b91\n                if (fflush_unlocked(stream) != 0) {\n                    char * format7 = dcgettext(NULL, \"write error\", 5); // 0x404636\n                    int64_t v691 = (int64_t)format7; // 0x404636\n                    int32_t * v692 = __errno_location(); // 0x40463e\n                    int32_t err_num6 = *v692; // 0x40464b\n                    error(1, err_num6, format7);\n                    v678 = v654;\n                    v672 = v649;\n                    v675 = v640;\n                    v671 = v647;\n                    v676 = v652;\n                    v680 = v655;\n                    int32_t v693; // 0x401e60\n                    v679 = v693;\n                    int32_t v694; // 0x401e60\n                    v684 = v694;\n                    v677 = v653;\n                    int32_t v695; // 0x401e60\n                    v682 = v695;\n                    v674 = v651;\n                    v683 = v690;\n                    v673 = v650;\n                    int32_t v696; // 0x401e60\n                    v681 = v696;\n                    v662 = v644;\n                    v686 = v656;\n                    v667 = &g73;\n                    v670 = v691;\n                    v669 = v691;\n                    v668 = v646;\n                    int64_t v697; // 0x401e60\n                    v663 = v697;\n                    v664 = v689;\n                    int64_t v698; // 0x401e60\n                    v665 = v698;\n                    int64_t v699; // 0x403b9a\n                    v666 = v699;\n                    goto lab_0x404654;\n                } else {\n                    int32_t * v700 = err_num5; // 0x403c4a\n                    int64_t v701 = (int64_t)v700; // 0x403c4a\n                    int64_t v702 = function_407060(v701, 0, 0x4047c0, 0x4047d0, 0); // 0x403c5d\n                    v703 = v701;\n                    if (v702 == 0) {\n                        goto lab_0x4045da;\n                    } else {\n                        int32_t v704 = g26; // 0x403c7f\n                        int32_t v705 = v704 != 1 ? 2 : 3078; // 0x403c9b\n                        v706 = v654;\n                        v707 = v649;\n                        v708 = v640;\n                        v709 = v648;\n                        v710 = v647;\n                        v711 = v652;\n                        v712 = (struct stat *)&readfds;\n                        v713 = v705;\n                        v714 = 0;\n                        v715 = v653;\n                        v716 = 0x1000000 * (int32_t)v702 >> 24;\n                        v717 = v651;\n                        v718 = v690;\n                        v719 = v650;\n                        v720 = v644;\n                        v721 = v656;\n                        v722 = 0x4047d0;\n                        v723 = 2;\n                        v724 = v640;\n                        v725 = 0;\n                        v726 = 0;\n                        v727 = v689;\n                        goto lab_0x403c9f;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x404654:\n    // 0x404654\n    function_4056e0(v667, 0, v670);\n    int64_t v728 = v678; // 0x404668\n    int32_t v729 = v672; // 0x404668\n    int64_t v730 = v675; // 0x404668\n    int32_t v731 = v671; // 0x404668\n    int32_t v732 = v676; // 0x404668\n    struct stat * v733 = v680; // 0x404668\n    int32_t v734 = v679; // 0x404668\n    int32_t v735 = v684; // 0x404668\n    int32_t v736 = v677; // 0x404668\n    int32_t v737 = v682; // 0x404668\n    int32_t v738 = v674; // 0x404668\n    int32_t v739 = v683; // 0x404668\n    int64_t v740 = v673; // 0x404668\n    int32_t v741 = v681; // 0x404668\n    bool v742 = v662; // 0x404668\n    int128_t v743 = v686; // 0x404668\n    int64_t v744 = 0x100000000 * v667 >> 32; // 0x404668\n    int64_t v745 = v669; // 0x404668\n    int64_t v746 = v668; // 0x404668\n    int64_t v747 = 0; // 0x404668\n    int64_t v748 = v663; // 0x404668\n    int64_t v749 = v664; // 0x404668\n    int64_t v750 = v665; // 0x404668\n    int64_t v751 = v666; // 0x404668\n    goto lab_0x40452e;\n  lab_0x40452e:;\n    int64_t v752 = v744;\n    *(int32_t *)(v752 + 68) = -1;\n    int64_t v753 = function_4047e0(*(int64_t *)v752, v747, v752); // 0x40453d\n    int64_t v754 = 0x100000000 * v752 >> 32; // 0x404542\n    function_404820(*(int32_t *)(v754 + 56), v753);\n    int64_t v755 = v728; // 0x40454d\n    int32_t v756 = v729; // 0x40454d\n    int64_t v757 = v730; // 0x40454d\n    int32_t v758 = v752; // 0x40454d\n    int32_t v759 = v731; // 0x40454d\n    int32_t v760 = v732; // 0x40454d\n    struct stat * v761 = v733; // 0x40454d\n    int32_t v762 = v734; // 0x40454d\n    int32_t v763 = v735; // 0x40454d\n    int32_t v764 = v736; // 0x40454d\n    int32_t v765 = v737; // 0x40454d\n    int32_t v766 = v738; // 0x40454d\n    int32_t v767 = v739; // 0x40454d\n    int64_t v768 = v740; // 0x40454d\n    int32_t v769 = v741; // 0x40454d\n    bool v770 = v742; // 0x40454d\n    int128_t v771 = v743; // 0x40454d\n    int64_t v772 = v754; // 0x40454d\n    int64_t v773 = v745; // 0x40454d\n    int64_t v774 = v746; // 0x40454d\n    int64_t v775 = v748; // 0x40454d\n    int64_t v776 = v749; // 0x40454d\n    int64_t v777 = v750; // 0x40454d\n    int64_t v778 = v751; // 0x40454d\n    goto lab_0x404552;\n  lab_0x404552:;\n    int64_t v779 = 0x100000000000000 * (int64_t)v765 >> 56; // 0x404552\n    int64_t v780 = function_407800((char)v779, v773); // 0x40455a\n    int64_t v781 = v755; // 0x404562\n    int32_t v782 = v756; // 0x404562\n    int64_t v783 = v757; // 0x404562\n    int32_t v784 = v758; // 0x404562\n    int32_t v785 = v759; // 0x404562\n    int32_t v786 = v760; // 0x404562\n    struct stat * v787 = v761; // 0x404562\n    int32_t v788 = v762; // 0x404562\n    int32_t v789 = v763; // 0x404562\n    int32_t v790 = v764; // 0x404562\n    int32_t v791 = v765; // 0x404562\n    int32_t v792 = v766; // 0x404562\n    int32_t v793 = v767; // 0x404562\n    int64_t v794 = v768; // 0x404562\n    int32_t v795 = v769; // 0x404562\n    bool v796 = v770; // 0x404562\n    int128_t v797 = v771; // 0x404562\n    int64_t v798 = v772; // 0x404562\n    int64_t v799 = v773; // 0x404562\n    int64_t v800 = v774; // 0x404562\n    int64_t v801 = v775; // 0x404562\n    int64_t v802 = v776; // 0x404562\n    int64_t v803 = v777; // 0x404562\n    int64_t v804 = v778; // 0x404562\n    v703 = v779;\n    if (v780 == 0) {\n        goto lab_0x4045da;\n    } else {\n        goto lab_0x404564;\n    }\n  lab_0x404564:;\n    int64_t v805 = v781; // 0x40456b\n    int32_t v806 = v782; // 0x40456b\n    int64_t v807 = v783; // 0x40456b\n    int32_t v808 = v784; // 0x40456b\n    int32_t v809 = v785; // 0x40456b\n    int32_t v810 = v786; // 0x40456b\n    struct stat * v811 = v787; // 0x40456b\n    int32_t v812 = v788; // 0x40456b\n    int32_t v813 = v789; // 0x40456b\n    int32_t v814 = v790; // 0x40456b\n    int32_t v815 = v791; // 0x40456b\n    int32_t v816 = v792; // 0x40456b\n    int32_t v817 = v793; // 0x40456b\n    int64_t v818 = v794; // 0x40456b\n    int32_t v819 = v795; // 0x40456b\n    bool v820 = v796; // 0x40456b\n    int128_t v821 = v797; // 0x40456b\n    int64_t v822 = v798; // 0x40456b\n    int64_t v823 = v799; // 0x40456b\n    int64_t v824 = v800; // 0x40456b\n    int64_t v825 = v801; // 0x40456b\n    int64_t v826 = v802; // 0x40456b\n    int64_t v827 = v803; // 0x40456b\n    int64_t v828 = v804; // 0x40456b\n    v829 = v781;\n    v830 = v782;\n    v831 = v783;\n    v832 = v784;\n    v833 = v785;\n    v834 = v786;\n    v835 = v787;\n    v836 = v788;\n    v837 = v789;\n    v838 = v790;\n    v839 = v791;\n    v840 = v792;\n    v841 = v793;\n    v842 = v794;\n    v843 = v795;\n    v844 = v796;\n    v845 = v797;\n    v846 = v798;\n    v847 = v799;\n    v848 = v800;\n    v849 = v801;\n    v850 = v802;\n    v851 = v803;\n    v852 = v804;\n    if (g26 != 1) {\n        goto lab_0x40426d;\n    } else {\n        goto lab_0x404571;\n    }\n  lab_dec_label_pc_unknown:;\n    int64_t v853 = v854;\n    if (v853 == 0) {\n        goto lab_dec_label_pc_unknown_2;\n    } else {\n        int64_t v855 = v856;\n        v854 = v853 - 1;\n        v856 = v855 + v857;\n        if (*(char *)v855 == 0) {\n            goto lab_dec_label_pc_unknown_2;\n        } else {\n            goto lab_dec_label_pc_unknown;\n        }\n    }\n  lab_0x40426d:;\n    int64_t v858 = v828;\n    int64_t v859 = v827;\n    int64_t v860 = v826;\n    int64_t v861 = v825;\n    int64_t v862 = v824;\n    int64_t v863 = v823;\n    int128_t v864 = v821;\n    bool v865 = v820;\n    int32_t v866 = v819;\n    int64_t v867 = v818;\n    int32_t v868 = v817;\n    int32_t v869 = v816;\n    int32_t v870 = v815;\n    int32_t v871 = v814;\n    int32_t v872 = v813;\n    int32_t v873 = v812;\n    struct stat * v874 = v811;\n    int32_t v875 = v810;\n    int32_t v876 = v809;\n    int32_t v877 = v808;\n    int64_t v878 = v807;\n    int32_t v879 = v806;\n    int64_t v880 = v805;\n    int32_t v881 = *(int32_t *)(v867 + 4); // 0x404272\n    v882 = v880;\n    v883 = v879;\n    v884 = v878;\n    v885 = v877;\n    v886 = v876;\n    v887 = v875;\n    v888 = v874;\n    v889 = v873;\n    v890 = v872;\n    v891 = v871;\n    v892 = v870;\n    v893 = v869;\n    v894 = v868;\n    v895 = v867;\n    v896 = v866;\n    v897 = v865;\n    v898 = v864;\n    v899 = v863;\n    v900 = v862;\n    v901 = v861;\n    v902 = v860;\n    v903 = v859;\n    v904 = v858;\n    if ((v881 & 3588) == 0) {\n        goto lab_0x404360;\n    } else {\n        // 0x404280\n        if ((v881 & 1024) != 0) {\n            // 0x4043e2\n            inotify_rm_watch((int32_t)v860, *(int32_t *)(v863 + 68));\n            function_407840((char)v870);\n            goto lab_0x404289;\n        } else {\n            goto lab_0x404289;\n        }\n    }\n  lab_0x404571:\n    // 0x404571\n    function_4056e0(v847, 0, v846);\n    v905 = v829;\n    v906 = v830;\n    v907 = v831;\n    v908 = v832;\n    v909 = v833;\n    v910 = v834;\n    v911 = v835;\n    v912 = v836;\n    v913 = v837;\n    v914 = v838;\n    v915 = v839;\n    v916 = v840;\n    v917 = v841;\n    v918 = v842;\n    v919 = v843;\n    v920 = v844;\n    v921 = v845;\n    v922 = v846;\n    v923 = v847;\n    v924 = v848;\n    v925 = v849;\n    v926 = v850;\n    v927 = v851;\n    v928 = v852;\n    goto lab_0x404264;\n  lab_dec_label_pc_unknown_2:;\n    int64_t v1075 = 0;\n    int32_t * v1084 = (int32_t *)(v1116 + 68); // 0x403cb7\n    *v1084 = -1;\n    int32_t v1081; // 0x401e60\n    int32_t v1079; // 0x401e60\n    int64_t v1158; // 0x403cdb\n    int64_t v1153; // 0x403ce3\n    int64_t v1156; // 0x403d14\n    if (g26 != 1) {\n        // .dec_label_pc_403d3d_crit_edge\n        v1081 = v1121;\n        v1079 = v1186;\n        goto lab_0x403d3d;\n    } else {\n        // 0x403cd8\n        v1158 = function_406630(v1187);\n        v1153 = v1158 + v1187;\n        *(int64_t *)(v1116 + 80) = function_4066f0(v1187, v1153) - v1187;\n        *(char *)(0x100000000000000 * v1153 >> 56) = 0;\n        v1156 = (int64_t)&g2;\n        if (v1158 == 0) {\n            goto lab_0x403d17;\n        } else {\n            // 0x403d14\n            v1156 = *v1082;\n            goto lab_0x403d17;\n        }\n    }\n  lab_0x404360:\n    // 0x404360\n    function_404f00(v899, &v1188);\n    v929 = v882;\n    v930 = v883;\n    v931 = v884;\n    v932 = v885;\n    v933 = v886;\n    v934 = v887;\n    v935 = v888;\n    v936 = v889;\n    v937 = v890;\n    v938 = v891;\n    v939 = v892;\n    v940 = v893;\n    v941 = v894;\n    v942 = v895;\n    v943 = v896;\n    v944 = v897;\n    v945 = v898;\n    v946 = v900;\n    v947 = v901;\n    v948 = v902;\n    v949 = v903;\n    v950 = v904;\n    goto lab_0x40404b_3;\n  lab_0x404264:\n    // 0x404264\n    v929 = v905;\n    v930 = v906;\n    v931 = v907;\n    v932 = v908;\n    v933 = v909;\n    v934 = v910;\n    v935 = v911;\n    v936 = v912;\n    v937 = v913;\n    v938 = v914;\n    v939 = v915;\n    v940 = v916;\n    v941 = v917;\n    v942 = v918;\n    v943 = v919;\n    v944 = v920;\n    v945 = v921;\n    v946 = v924;\n    v947 = v925;\n    v948 = v926;\n    v949 = v927;\n    v950 = v928;\n    v805 = v905;\n    v806 = v906;\n    v807 = v907;\n    v808 = v908;\n    v809 = v909;\n    v810 = v910;\n    v811 = v911;\n    v812 = v912;\n    v813 = v913;\n    v814 = v914;\n    v815 = v915;\n    v816 = v916;\n    v817 = v917;\n    v818 = v918;\n    v819 = v919;\n    v820 = v920;\n    v821 = v921;\n    v822 = v922;\n    v823 = v923;\n    v824 = v924;\n    v825 = v925;\n    v826 = v926;\n    v827 = v927;\n    v828 = v928;\n    if (v923 == 0) {\n        goto lab_0x40404b_3;\n    } else {\n        goto lab_0x40426d;\n    }\n  lab_0x404289:\n    // 0x404289\n    function_4056e0(v863, 0, v822);\n    v929 = v880;\n    v930 = v879;\n    v931 = v878;\n    v932 = v877;\n    v933 = v876;\n    v934 = v875;\n    v935 = v874;\n    v936 = v873;\n    v937 = v872;\n    v938 = v871;\n    v939 = v870;\n    v940 = v869;\n    v941 = v868;\n    v942 = v867;\n    v943 = v866;\n    v944 = v865;\n    v945 = v864;\n    v946 = v862;\n    v947 = v861;\n    v948 = v860;\n    v949 = v859;\n    v950 = v858;\n    goto lab_0x40404b_3;\n  lab_0x403d3d:;\n    uint64_t v1074 = -2 - v1075; // 0x403cc4\n    int64_t v1076 = v1077 < v1074 ? v1074 : v1077; // 0x403ccb\n    int32_t v1078 = v1079;\n    int32_t v1080 = inotify_add_watch(v1081, (char *)*v1082, v1083); // 0x403d47\n    *v1084 = v1080;\n    v1085 = v1086;\n    v1087 = v1088;\n    v1089 = v1090;\n    v1091 = v1092;\n    v1093 = v1094;\n    v1095 = v1096;\n    v1097 = v1098;\n    v1099 = v1083;\n    v1100 = v1101;\n    v1102 = v1103;\n    v1104 = v1078;\n    v1105 = v1106;\n    v1107 = v1108;\n    v1109 = v1110;\n    v1111 = v1112;\n    v1113 = v1075;\n    v1114 = v1083;\n    v1115 = v1116;\n    v1117 = v1076;\n    v1118 = v1119;\n    v1120 = v1121;\n    int32_t v1122; // 0x401e60\n    if (v1080 >= 0) {\n        goto lab_0x403efd;\n    } else {\n        int32_t v1123 = *(int32_t *)(v1116 + 56); // 0x403d5c\n        int32_t * err_num11 = __errno_location(); // 0x403d64\n        int32_t v1124 = *err_num11; // 0x403d6c\n        uint32_t v1125 = v1124 & -17; // 0x403d70\n        v1122 = v1078;\n        if (v1125 != 12) {\n            uint32_t v1126 = v1123 != -1 ? v1101 % 256 : (int32_t)v1119; // 0x403d60\n            int64_t v1127 = v1126; // 0x403d60\n            v1128 = v1086;\n            v1129 = v1088;\n            v1130 = v1090;\n            v1131 = v1092;\n            v1132 = v1094;\n            v1133 = v1096;\n            v1134 = v1098;\n            v1135 = v1083;\n            v1136 = v1137;\n            v1138 = v1101;\n            v1139 = v1103;\n            v1140 = v1078;\n            v1141 = v1106;\n            v1142 = v1108;\n            v1143 = v1110;\n            v1144 = v1112;\n            v1145 = v1075;\n            v1146 = v1125;\n            v1147 = v1116;\n            v1148 = v1076;\n            v1149 = v1127;\n            v1150 = v1121;\n            if (*(int32_t *)(v1116 + 60) == v1124) {\n                goto lab_0x403f1c;\n            } else {\n                int64_t v1151 = function_409510(4, *v1082); // 0x403fde\n                char * format12 = dcgettext(NULL, \"cannot watch %s\", 5); // 0x403ff4\n                error(0, *err_num11, format12);\n                v1128 = v1086;\n                v1129 = v1088;\n                v1130 = v1090;\n                v1131 = v1092;\n                v1132 = v1094;\n                v1133 = v1096;\n                v1134 = v1098;\n                v1135 = v1083;\n                v1136 = v1137;\n                v1138 = v1101;\n                v1139 = v1103;\n                v1140 = v1078;\n                v1141 = v1106;\n                v1142 = v1108;\n                v1143 = v1110;\n                v1144 = v1112;\n                v1145 = v1151;\n                v1146 = (int64_t)format12;\n                v1147 = v1116;\n                v1148 = v1076;\n                v1149 = v1127;\n                v1150 = v1121;\n                goto lab_0x403f1c;\n            }\n        } else {\n            goto lab_0x403d7c;\n        }\n    }\n  lab_0x403d17:;\n    int32_t v1152 = 0x1000000 * (int32_t)v1153 >> 24; // 0x403ced\n    int32_t v1154 = v1121;\n    int32_t v1155 = inotify_add_watch(v1154, (char *)v1156, 1924); // 0x403d1f\n    int32_t * v1157 = (int32_t *)(v1116 + 72); // 0x403d29\n    *v1157 = v1155;\n    *(char *)(*v1082 + v1158) = *(char *)v1153;\n    v1081 = v1154;\n    v1079 = v1152;\n    if (*v1157 < 0) {\n        int32_t * err_num12 = __errno_location(); // 0x4045df\n        v1122 = v1152;\n        if (*err_num12 == 28) {\n            goto lab_0x403d7c;\n        } else {\n            int64_t v1159 = function_409510(4, *v1082); // 0x4045fb\n            error(0, *err_num12, dcgettext(NULL, \"cannot watch parent directory of %s\", 5));\n            v1160 = v1086;\n            v1161 = v1088;\n            v1162 = v1090;\n            v1163 = v1092;\n            v1164 = v1094;\n            v1165 = v1096;\n            v1166 = v1098;\n            v1167 = v1101;\n            v1168 = v1103;\n            v1169 = v1152;\n            v1170 = v1108;\n            v1171 = v1110;\n            v1172 = v1112;\n            v1173 = v1159;\n            v1174 = v1121;\n            goto lab_0x403d9b;\n        }\n    } else {\n        goto lab_0x403d3d;\n    }\n  lab_0x403d7c:\n    // 0x403d7c\n    error(0, (int32_t)\"inotify resources exhausted\" ^ (int32_t)\"inotify resources exhausted\", dcgettext(NULL, \"inotify resources exhausted\", 5));\n    v1160 = v1086;\n    v1161 = v1088;\n    v1162 = v1090;\n    v1163 = v1092;\n    v1164 = v1094;\n    v1165 = v1096;\n    v1166 = v1098;\n    v1167 = v1101;\n    v1168 = v1103;\n    v1169 = v1122;\n    v1170 = v1108;\n    v1171 = v1110;\n    v1172 = v1112;\n    v1173 = v1075;\n    v1174 = v1121;\n    goto lab_0x403d9b;\n  lab_0x404697:\n    // 0x404697\n    error(0, (int32_t)\"inotify resources exhausted\" ^ (int32_t)\"inotify resources exhausted\", dcgettext(NULL, \"inotify resources exhausted\", 5));\n    function_4072a0(v962);\n    *(int32_t *)(0x100000000 * v1036 >> 32) = 0;\n    v228 = v961;\n    v229 = v960;\n    v224 = v959;\n    v230 = v1031;\n    v231 = v958;\n    v220 = v957;\n    v232 = v995;\n    v233 = v954;\n    v234 = v994;\n    v235 = v1032;\n    v236 = v1033;\n    v237 = v1034;\n    v238 = v1035;\n    v222 = v1037;\n    goto lab_0x403db0;\n  lab_0x404411_2:;\n    // 0x404411\n    int64_t v1175; // 0x401e60\n    int64_t v1176 = v1175;\n    int64_t v1177 = 96 * v1176; // 0x404411\n    int64_t v1178; // 0x40441a\n    int32_t v1179 = *(int32_t *)(v1178 + v1177); // 0x40441a\n    if (v1179 != v981) {\n        int64_t v1180 = v1176 + 1; // 0x404403\n        v1021 = v1177;\n        v1175 = v1180;\n        int64_t v1181; // 0x401e60\n        if (v1180 == v1181) {\n            goto lab_0x4042a0;\n        } else {\n            goto lab_0x404411_2;\n        }\n    } else {\n        // 0x404420\n        function_4072a0(v962);\n        error(0, (int32_t)\"directory containing watched file was removed\" ^ (int32_t)\"directory containing watched file was removed\", dcgettext(NULL, \"directory containing watched file was removed\", 5));\n        int32_t * v1182 = __errno_location(); // 0x404449\n        *v1182 = 0;\n        v228 = v961;\n        v229 = v960;\n        v224 = v959;\n        v230 = v987;\n        v231 = v958;\n        v220 = v957;\n        v232 = v995;\n        v233 = v954;\n        v234 = v994;\n        v235 = v1016;\n        v236 = v1014;\n        v237 = v1013;\n        v238 = v959;\n        v222 = v985;\n        goto lab_0x403db0;\n    }\n  lab_0x4044cd:;\n    int32_t * v1183 = (int32_t *)(v983 + 68); // 0x4044cd\n    int32_t v1184 = *v1183; // 0x4044cd\n    v781 = v961;\n    v782 = v960;\n    v783 = v959;\n    v784 = v984;\n    v785 = v958;\n    v786 = v957;\n    v787 = v995;\n    v788 = v956;\n    v789 = v955;\n    v790 = v954;\n    v791 = v953;\n    v792 = v994;\n    v793 = v1015;\n    v794 = v1016;\n    v795 = v992;\n    v796 = v1014;\n    v797 = v1013;\n    v798 = v979;\n    v799 = v983;\n    v800 = v982;\n    v801 = v952;\n    v802 = v1023;\n    v803 = v1012;\n    v804 = v951;\n    if (v1184 > -1 == v984 == v1184) {\n        goto lab_0x404564;\n    } else {\n        if (v1184 < 0) {\n            goto lab_0x4044f7;\n        } else {\n            // 0x4044e2\n            inotify_rm_watch(v980, v1184);\n            function_407840(v962);\n            goto lab_0x4044f7;\n        }\n    }\n  lab_0x4044f7:\n    // 0x4044f7\n    *v1183 = v984;\n    v1040 = -1;\n    v1041 = v982;\n    if (v984 == -1) {\n        goto lab_0x40404b;\n    } else {\n        int64_t v1185 = function_407840(v962); // 0x40450f\n        v755 = v961;\n        v756 = v960;\n        v757 = v959;\n        v758 = v984;\n        v759 = v958;\n        v760 = v957;\n        v761 = v995;\n        v762 = v956;\n        v763 = v955;\n        v764 = v954;\n        v765 = v953;\n        v766 = v994;\n        v767 = v1015;\n        v768 = v1016;\n        v769 = v992;\n        v770 = v1014;\n        v771 = v1013;\n        v772 = v1185;\n        v773 = v983;\n        v774 = v982;\n        v775 = v952;\n        v776 = v1023;\n        v777 = v1012;\n        v778 = v951;\n        if (v1185 == 0 || v983 == v1185) {\n            goto lab_0x404552;\n        } else {\n            // 0x404521\n            v728 = v961;\n            v729 = v960;\n            v730 = v959;\n            v731 = v958;\n            v732 = v957;\n            v733 = v995;\n            v734 = v956;\n            v735 = v955;\n            v736 = v954;\n            v737 = v953;\n            v738 = v994;\n            v739 = v1015;\n            v740 = v1016;\n            v741 = v992;\n            v742 = v1014;\n            v743 = v1013;\n            v744 = v1185;\n            v745 = v983;\n            v746 = v982;\n            v747 = v983;\n            v748 = v952;\n            v749 = v1023;\n            v750 = v1012;\n            v751 = v951;\n            v678 = v961;\n            v672 = v960;\n            v675 = v959;\n            v671 = v958;\n            v676 = v957;\n            v680 = v995;\n            v679 = v956;\n            v684 = v955;\n            v677 = v954;\n            v682 = v953;\n            v674 = v994;\n            v683 = v1015;\n            v673 = v1016;\n            v681 = v992;\n            v662 = v1014;\n            v686 = v1013;\n            v667 = v1185;\n            v670 = v1185;\n            v669 = v983;\n            v668 = v982;\n            v663 = v952;\n            v664 = v1023;\n            v665 = v1012;\n            v666 = v951;\n            if (g26 == 1) {\n                goto lab_0x404654;\n            } else {\n                goto lab_0x40452e;\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4046e0",
            "funcEndAddr": "40470b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4046e0\n    int64_t v1; // 0x4046e0\n    __libc_start_main(0x401e60, (int32_t)a4, (char **)&v1, (void (*)())0x40c110, (void (*)())0x40c170, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40470b",
            "funcStartAddr": "40470b",
            "funcEndAddr": "40472a",
            "decompiledFuncCode": "int64_t function_40470b(void) {\n    // 0x40470b\n    return &g38;\n}\n"
        },
        {
            "funcName": "function_40472a",
            "funcStartAddr": "40472a",
            "funcEndAddr": "404761",
            "decompiledFuncCode": "int64_t function_40472a(void) {\n    // 0x40472a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_404761",
            "funcStartAddr": "404761",
            "funcEndAddr": "4047b8",
            "decompiledFuncCode": "int64_t function_404761(void) {\n    // 0x404761\n    if (g42 != 0) {\n        // 0x4047b7\n        int64_t result; // 0x404761\n        return result;\n    }\n    int64_t v1 = g43; // 0x404794\n    int64_t result2; // 0x4047a6\n    if (g43 >= ((int64_t)&g20 - (int64_t)&g19 >> 3) - 1) {\n        // 0x4047a6\n        result2 = function_40470b();\n        g42 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g20 - (int64_t)&g19 >> 3) - 1) {\n        // 0x404796\n        v1++;\n    }\n    // 0x40478a\n    g43 = v1;\n    // 0x4047a6\n    result2 = function_40470b();\n    g42 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4047b8",
            "funcStartAddr": "4047b8",
            "funcEndAddr": "4047bd",
            "decompiledFuncCode": "int64_t function_4047b8(void) {\n    // 0x4047b8\n    return function_40472a();\n}\n"
        },
        {
            "funcName": "function_4047c0",
            "funcStartAddr": "4047c0",
            "funcEndAddr": "4047cd",
            "decompiledFuncCode": "int64_t function_4047c0(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x4047c0\n    return (int64_t)*(int32_t *)(a1 + 68) % a2;\n}\n"
        },
        {
            "funcName": "function_4047d0",
            "funcStartAddr": "4047d0",
            "funcEndAddr": "4047da",
            "decompiledFuncCode": "int64_t function_4047d0(int64_t a1, int64_t a2) {\n    int32_t v1 = *(int32_t *)(a2 + 68); // 0x4047d0\n    return (int64_t)(*(int32_t *)(a1 + 68) == v1) | (int64_t)(v1 & -256);\n}\n"
        },
        {
            "funcName": "function_4047e0",
            "funcStartAddr": "4047e0",
            "funcEndAddr": "404811",
            "decompiledFuncCode": "int64_t function_4047e0(int64_t result, int64_t a2, int64_t a3) {\n    // 0x4047e0\n    bool v1; // 0x4047e0\n    int64_t v2 = v1 ? -1 : 1; // 0x4047f0\n    int64_t v3 = (int64_t)\"-\"; // 0x4047e0\n    int64_t v4 = result; // 0x4047e0\n    int64_t v5 = 2; // 0x4047f0\n    unsigned char v6 = *(char *)v4; // 0x4047f0\n    char v7 = *(char *)v3; // 0x4047f0\n    char v8 = v7; // 0x4047f0\n    bool v9 = false; // 0x4047f0\n    while (v6 == v7) {\n        v5--;\n        v3 += v2;\n        v4 += v2;\n        v8 = v6;\n        v9 = true;\n        if (v5 == 0) {\n            // break -> \n            break;\n        }\n        v6 = *(char *)v4;\n        v7 = *(char *)v3;\n        v8 = v7;\n        v9 = false;\n    }\n    unsigned char v10 = v8;\n    if ((v6 >= v10 && !v9) == v6 < v10) {\n        // 0x404800\n        return (int64_t)dcgettext(NULL, \"standard input\", 5);\n    }\n    // 0x4047fc\n    return result;\n}\n"
        },
        {
            "funcName": "function_404820",
            "funcStartAddr": "404820",
            "funcEndAddr": "404891",
            "decompiledFuncCode": "int64_t function_404820(int32_t fd, int64_t a2) {\n    uint32_t result = fd + 1; // 0x404820\n    if (fd == 0 || result == 0) {\n        // 0x404828\n        return result;\n    }\n    int32_t result2 = close(fd); // 0x404839\n    if (result2 == 0) {\n        // 0x404842\n        return result2;\n    }\n    // 0x404850\n    function_409510(4, a2);\n    error(0, *__errno_location(), dcgettext(NULL, \"closing %s (fd=%d)\", 5));\n    return &g73;\n}\n"
        },
        {
            "funcName": "function_4048a0",
            "funcStartAddr": "4048a0",
            "funcEndAddr": "404920",
            "decompiledFuncCode": "int64_t function_4048a0(int64_t data, uint64_t n) {\n    uint64_t result = (int64_t)fwrite_unlocked((int64_t *)data, 1, (int32_t)n, g39); // 0x4048b8\n    if (result >= n) {\n        // 0x4048c2\n        return result;\n    }\n    // 0x4048c9\n    clearerr_unlocked(g39);\n    function_409510(4, (int64_t)\"standard output\");\n    error(1, *__errno_location(), dcgettext(NULL, \"error writing %s\", 5));\n    return &g73;\n}\n"
        },
        {
            "funcName": "function_404920",
            "funcStartAddr": "404920",
            "funcEndAddr": "404a19",
            "decompiledFuncCode": "int64_t function_404920(int64_t a1, int32_t a2, int64_t a3, int64_t * a4) {\n    // 0x404920\n    if (a3 == 0) {\n        // 0x4049b9\n        return 0;\n    }\n    int64_t v1 = (int64_t)a4; // 0x404941\n    int64_t v2 = a3; // 0x404941\n    int64_t result; // 0x404920\n    while (true) {\n      lab_0x404948:;\n        int64_t v3 = function_409780(a2, v1, 0x2000); // 0x404955\n        result = 0xffffffff;\n        switch (v3) {\n            case 0: {\n                return result;\n            }\n            case -1: {\n                // 0x4049d8\n                function_409510(4, a1);\n                error(0, *__errno_location(), dcgettext(NULL, \"error reading %s\", 5));\n                // 0x4049b9\n                return 1;\n            }\n            default: {\n                // 0x404965\n                *a4 = v3 + v1;\n                uint64_t v4 = v3 + v1; // 0x404976\n                int64_t v5 = (int64_t)*(char *)&g48 & 0xffffffff; // 0x404983\n                int64_t v6 = v1;\n                int64_t v7 = v2;\n                int64_t v8 = function_40b730(v6, v5, v4 - v6); // 0x404989\n                v2 = v7;\n                while (v8 != 0) {\n                    int64_t v9 = v8 + 1; // 0x404993\n                    int64_t v10 = v7 - 1; // 0x404997\n                    if (v10 == 0) {\n                        // 0x40499d\n                        result = 0;\n                        if (v4 > v9) {\n                            int64_t v11 = v4 - v9; // 0x4049a4\n                            result = 0;\n                            if (v11 == 0) {\n                                return result;\n                            } else {\n                                // 0x4049a9\n                                function_4048a0(v9, v11);\n                                result = 0;\n                                return result;\n                            }\n                        } else {\n                            return result;\n                        }\n                    }\n                    v6 = v9;\n                    v7 = v10;\n                    v8 = function_40b730(v6, v5, v4 - v6);\n                    v2 = v7;\n                }\n                goto lab_0x404948;\n            }\n        }\n    }\n  lab_0x4049b9:\n    // 0x4049b9\n    return result;\n}\n"
        },
        {
            "funcName": "function_404a20",
            "funcStartAddr": "404a20",
            "funcEndAddr": "404b40",
            "decompiledFuncCode": "int64_t function_404a20(int32_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    // 0x404a20\n    int64_t v1; // bp-8248, 0x404a20\n    int64_t v2 = &v1; // 0x404a54\n    int64_t v3 = a4; // 0x404a44\n    char v4 = a1; // 0x404a44\n    int64_t v5 = 0; // 0x404a44\n    int64_t result; // 0x404a20\n    int32_t * err_num; // 0x404ad8\n    while (true) {\n        // 0x404a48\n        result = v5;\n        int64_t v6 = v3;\n        int64_t v7 = function_409780(a3, v2, v6 < 0x2000 ? v6 : 0x2000); // 0x404a60\n        int64_t result2 = result; // 0x404a20\n        switch (v7) {\n            case -1: {\n                // 0x404ad8\n                err_num = __errno_location();\n                if (*err_num == 11) {\n                    // 0x404ae5\n                    return result;\n                }\n                // 0x404afa\n                function_409510(4, a2);\n                error(1, *err_num, dcgettext(NULL, \"error reading %s\", 5));\n                return &g73;\n            }\n            case 0: {\n                // 0x404ae5\n                return result2;\n            }\n        }\n        // 0x404a73\n        if (v4 != 0) {\n            char * v8 = g23 == 0 ? (char *)&g15 : (char *)&g16; // 0x404a9e\n            __printf_chk(1, \"%s==> %s <==\\n\", v8, (char *)a2);\n            g23 = 0;\n        }\n        // 0x404aaa\n        v5 = v7 + result;\n        function_4048a0(v2, v7);\n        v3 = v6;\n        if (a4 != -1) {\n            // 0x404ac0\n            v3 = v6 - v7;\n            result2 = v5;\n            if (a4 == -2 || v3 == 0) {\n                // 0x404ae5\n                return result2;\n            }\n        }\n        // 0x404acb\n        v4 = 0;\n    }\n    // 0x404ad8\n    err_num = __errno_location();\n    if (*err_num == 11) {\n        // 0x404ae5\n        return result;\n    }\n    // 0x404afa\n    function_409510(4, a2);\n    error(1, *err_num, dcgettext(NULL, \"error reading %s\", 5));\n    return &g73;\n}\n"
        },
        {
            "funcName": "function_404b40",
            "funcStartAddr": "404b40",
            "funcEndAddr": "404c20",
            "decompiledFuncCode": "int64_t function_404b40(int64_t a1, int32_t a2, int64_t a3, int64_t * a4) {\n    // 0x404b40\n    if (a3 == 0) {\n        // 0x404b91\n        return 0;\n    }\n    // 0x404b49\n    int64_t v1; // bp-8232, 0x404b40\n    int64_t v2 = &v1; // 0x404b5b\n    int64_t v3 = a3; // 0x404b62\n    uint64_t v4 = function_409780(a2, v2, 0x2000); // 0x404b87\n    int64_t result = 0xffffffff; // 0x404b8f\n    while (v4 != 0) {\n        if (v4 == -1) {\n            // 0x404bd0\n            function_409510(4, a1);\n            error(0, *__errno_location(), dcgettext(NULL, \"error reading %s\", 5));\n            return 1;\n        }\n        uint64_t v5 = v3;\n        *a4 = v4 + (int64_t)a4;\n        if (v5 < v4) {\n            // 0x404ba8\n            function_4048a0(v5 + v2, v4 - v5);\n            result = 0;\n            return result;\n        }\n        // 0x404b77\n        v3 = v5 - v4;\n        result = 0;\n        if (v3 == 0) {\n            // break -> 0x404b91\n            break;\n        }\n        v4 = function_409780(a2, v2, 0x2000);\n        result = 0xffffffff;\n    }\n  lab_0x404b91:\n    // 0x404b91\n    return result;\n}\n"
        },
        {
            "funcName": "function_404c20",
            "funcStartAddr": "404c20",
            "funcEndAddr": "404cc4",
            "decompiledFuncCode": "int64_t function_404c20(int64_t fd, int32_t offset, int32_t whence, int64_t a4) {\n    int32_t result = lseek((int32_t)fd, offset, whence); // 0x404c32\n    if (result >= 0) {\n        // 0x404c3c\n        return result;\n    }\n    // 0x404c50\n    int64_t v1; // bp-72, 0x404c20\n    function_407a20((int64_t)offset, &v1);\n    int32_t * err_num = __errno_location(); // 0x404c5e\n    function_4095e0(0, 3, a4);\n    char * format = dcgettext(NULL, whence == 1 ? \"%s: cannot seek to relative offset %s\" : \"%s: cannot seek to offset %s\", 5); // 0x404c89\n    error(0, *err_num, format);\n    exit(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404cd0",
            "funcStartAddr": "404cd0",
            "funcEndAddr": "404ef1",
            "decompiledFuncCode": "int64_t function_404cd0(int64_t a1, uint32_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t * a6) {\n    int64_t v1 = a1; // bp-8280, 0x404ce1\n    if (a3 == 0) {\n        // 0x404e42\n        return 1;\n    }\n    int64_t v2 = a2;\n    int64_t v3; // bp-8248, 0x404cd0\n    int64_t v4 = &v3; // 0x404d0c\n    int64_t v5 = a5 - a4; // 0x404d14\n    uint64_t v6 = (v5 >> 63) / 0x8000000000000; // 0x404d20\n    int64_t v7 = (v6 + v5) % 0x2000 - v6; // 0x404d2d\n    int64_t v8 = v7 == 0 ? 0x2000 : v7; // 0x404d35\n    int64_t v9 = a5 - v8; // 0x404d3b\n    function_404c20(v2, (int32_t)v9, 0, a1);\n    int64_t v10 = function_409780(a2, v4, v8); // 0x404d55\n    char v11; // 0x404cd0\n    int64_t v12; // 0x404cd0\n    int64_t v13; // 0x404cd0\n    int64_t v14; // 0x404cd0\n    int64_t v15; // 0x404cd0\n    int64_t v16; // 0x404cd0\n    if (v10 == -1) {\n        goto lab_0x404eaf;\n    } else {\n        // 0x404d67\n        *a6 = v10 + v9;\n        v13 = v9;\n        v15 = a3;\n        if (v10 != 0) {\n            char v17 = *(char *)&g48; // 0x404e58\n            char v18 = *(char *)((int64_t)&v1 + 31 + v10); // 0x404e5f\n            v11 = v17;\n            v12 = v10;\n            v14 = v9;\n            v16 = a3 - (int64_t)(v18 != v17);\n            goto lab_0x404dd3;\n        } else {\n            goto lab_0x404d7d;\n        }\n    }\n  lab_0x404eaf:\n    // 0x404eaf\n    function_409510(4, v1);\n    error(0, *__errno_location(), dcgettext(NULL, \"error reading %s\", 5));\n    // 0x404e42\n    return (int32_t)&g73 ^ (int32_t)&g73;\n  lab_0x404d7d:\n    // 0x404d7d\n    if (v13 == a4) {\n        // 0x404e72\n        function_404c20(v2, (int32_t)a4, 0, v1);\n        *a6 = function_404a20(0, v1, a2, a5) + a4;\n        // 0x404e42\n        return 1;\n    }\n    int64_t v19 = v13 - 0x2000; // 0x404d8c\n    function_404c20(v2, (int32_t)v19, 0, v1);\n    int64_t v20 = function_409780(a2, v4, 0x2000); // 0x404dab\n    if (v20 == -1) {\n        goto lab_0x404eaf;\n    } else {\n        // 0x404dbd\n        *a6 = v20 + v19;\n        if (v20 == 0) {\n          lab_0x404e42:\n            // 0x404e42\n            return 1;\n        }\n        // 0x404dbd\n        v11 = *(char *)&g48;\n        v12 = v20;\n        v14 = v19;\n        v16 = v15;\n        goto lab_0x404dd3;\n    }\n  lab_0x404dd3:;\n    int64_t v21 = v14;\n    int64_t v22 = v12;\n    int64_t v23 = v16;\n    int64_t * v24 = memrchr(&v3, (int32_t)v11, (int32_t)v22); // 0x404ded\n    v13 = v21;\n    v15 = v23;\n    while (v24 != NULL) {\n        int64_t v25 = (int64_t)v24;\n        int64_t v26 = v25 - v4; // 0x404dfe\n        if (v23 == 0) {\n            int64_t v27 = v22 - 1; // 0x404e06\n            if (v27 == v26) {\n                goto lab_0x404e1c;\n            } else {\n                // 0x404e10\n                function_4048a0(v25 + 1, v27 - v26);\n                goto lab_0x404e1c;\n            }\n        }\n        int64_t v28 = v23 - 1; // 0x404dfa\n        v13 = v21;\n        v15 = v28;\n        int64_t v29 = v26; // 0x404de6\n        int64_t v30 = v28; // 0x404de6\n        if (v26 == 0) {\n            // break -> 0x404d7d\n            break;\n        }\n        v23 = v30;\n        v24 = memrchr(&v3, (int32_t)v11, (int32_t)v29);\n        v13 = v21;\n        v15 = v23;\n    }\n    goto lab_0x404d7d;\n  lab_0x404e1c:;\n    int64_t v31 = function_404a20(0, v1, a2, a5 - v22 - v21); // 0x404e30\n    *a6 = v31 + (int64_t)a6;\n    goto lab_0x404e42;\n}\n"
        },
        {
            "funcName": "function_404f00",
            "funcStartAddr": "404f00",
            "funcEndAddr": "405090",
            "decompiledFuncCode": "int64_t function_404f00(int64_t a1, int64_t * a2) {\n    int32_t * v1 = (int32_t *)(a1 + 56);\n    if (*v1 == -1) {\n        // 0x404f83\n        int64_t result; // 0x404f00\n        return result;\n    }\n    // 0x404f0a\n    int64_t v2; // 0x404f00\n    int64_t v3 = function_4047e0(a1, (int64_t)a2, v2); // 0x404f22\n    uint32_t v4 = *v1; // 0x404f27\n    int64_t v5; // bp-184, 0x404f00\n    int32_t v6 = __fxstat(1, v4, (struct stat *)&v5); // 0x404f35\n    int32_t * v7 = v1; // 0x404f3e\n    int64_t v8 = a1; // 0x404f3e\n    if (v6 == 0) {\n        int64_t v9 = v4; // 0x404f27\n        int64_t * v10 = (int64_t *)(a1 + 8);\n        int64_t v11 = v9; // 0x404f51\n        if ((*(int32_t *)(a1 + 48) & 0xf000) == 0x8000) {\n            int64_t v12 = *v10; // 0x404fa0\n            if (v2 < v12) {\n                // 0x405040\n                function_4095e0(0, 3, v3);\n                error(0, (int32_t)\"%s: file truncated\" ^ (int32_t)\"%s: file truncated\", dcgettext(NULL, \"%s: file truncated\", 5));\n                uint32_t v13 = *v1; // 0x405074\n                function_404c20((int64_t)v13, (int32_t)\"%s: file truncated\" ^ (int32_t)\"%s: file truncated\" ^ (int32_t)\"%s: file truncated\" ^ (int32_t)\"%s: file truncated\", 0, v3);\n                *v10 = 0;\n                v11 = (int32_t)\"%s: file truncated\" ^ (int32_t)\"%s: file truncated\" ^ (int32_t)\"%s: file truncated\" ^ (int32_t)\"%s: file truncated\";\n            } else {\n                // 0x404faf\n                v11 = v9;\n                if (v2 == v12) {\n                    // 0x404fb1\n                    v11 = v9;\n                    if (*(int64_t *)(a1 + 16) == v2) {\n                        // 0x404fc1\n                        v11 = v9;\n                        int32_t result2; // 0x404f00\n                        if (*(int32_t *)(a1 + 24) == result2) {\n                            // 0x404f83\n                            return result2;\n                        }\n                    }\n                }\n            }\n        }\n        int32_t v14 = g49 == 0 ? v6 : (int32_t)(v11 != a1);\n        int64_t result3 = function_404a20(v14, v3, *v1, -1); // 0x404f75\n        *v10 = *v10 + result3;\n        if (result3 == 0) {\n            // 0x404f83\n            return result3;\n        }\n        // 0x404fd0\n        *a2 = a1;\n        if (fflush_unlocked(g39) == 0) {\n            // 0x404f83\n            return 0;\n        }\n        char * format = dcgettext(NULL, \"write error\", 5); // 0x404ff0\n        v8 = (int64_t)format;\n        error(1, *__errno_location(), format);\n        v7 = (int32_t *)(v8 + 56);\n    }\n    // 0x405010\n    *(int32_t *)(v8 + 60) = *__errno_location();\n    int64_t result4 = function_404820(*v7, v3); // 0x405020\n    *v7 = -1;\n    return result4;\n}\n"
        },
        {
            "funcName": "function_405090",
            "funcStartAddr": "405090",
            "funcEndAddr": "4056d7",
            "decompiledFuncCode": "int64_t function_405090(int64_t a1, int64_t a2) {\n    // 0x405090\n    int64_t v1; // bp-152, 0x405090\n    if (fstatfs((int32_t)a1, (struct statfs *)&v1) != 0) {\n        int32_t * err_num = __errno_location(); // 0x4050a7\n        if (*err_num == 38) {\n            // 0x4050b9\n            return 1;\n        }\n        // 0x4050c8\n        function_409510(4, a2);\n        error(0, *err_num, dcgettext(NULL, \"cannot determine location of %s. reverting to polling\", 5));\n        return 1;\n    }\n    int64_t v2 = v1; // 0x405110\n    if (v2 == 0x15013346) {\n        // 0x4050b9\n        return 0;\n    }\n    int64_t v3; // 0x405090\n    int64_t v4; // 0x405090\n    if (v2 <= 0x15013346) {\n        // 0x405122\n        if (v2 == 0x72b6) {\n            // 0x4050b9\n            return 0;\n        }\n        if (v2 > 0x72b6) {\n            // 0x405268\n            if (v2 == 0x414a53) {\n                // 0x4050b9\n                return 0;\n            }\n            if (v2 <= 0x414a53) {\n                // 0x40527a\n                if (v2 == 0xadff) {\n                    // 0x4050b9\n                    return 0;\n                }\n                if (v2 <= 0xadff) {\n                    if (v2 > 0x9fa2) {\n                        // 0x4050b9\n                        return (v4 & -256 | (int64_t)(v2 != 0xadf5)) & 0xffffffff;\n                    }\n                    // 0x405298\n                    v3 = 0;\n                    if (v2 <= 0x9f9f) {\n                        // 0x4052a4\n                        v3 = v4 & -256 | (int64_t)(v2 != 0x9660);\n                    }\n                    // 0x4050b9\n                    return v3 & 0xffffffff;\n                }\n                // 0x405360\n                if (v2 == 0xf15f) {\n                    // 0x4050b9\n                    return 0;\n                }\n                if (v2 > 0xf15f) {\n                    // 0x4053c0\n                    v3 = 0;\n                    if (v2 != 0x11954) {\n                        // 0x4053cc\n                        v3 = v4 & -256 | (int64_t)(v2 != 0x27e0eb);\n                    }\n                    // 0x4050b9\n                    return v3 & 0xffffffff;\n                }\n                // 0x40536e\n                v3 = 0;\n                if (v2 != 0xef51) {\n                    // 0x40537a\n                    v3 = v4 & -256 | (int64_t)(v2 != 0xef53);\n                }\n                // 0x4050b9\n                return v3 & 0xffffffff;\n            }\n            if (v2 <= 0x12ff7b7) {\n                // 0x405398\n                if (v2 > 0x12ff7b3 || v2 == 0x1021994) {\n                    // 0x4050b9\n                    return 0;\n                }\n                if (v2 <= 0x1021994) {\n                    // 0x4050b9\n                    return (v4 & -256 | (int64_t)(v2 != 0xc0ffee)) & 0xffffffff;\n                }\n                // 0x4053e0\n                v3 = 0;\n                if (v2 != 0x1021997) {\n                    // 0x4053ec\n                    v3 = v4 & -256 | (int64_t)(v2 != 0x12fd16d);\n                }\n                // 0x4050b9\n                return v3 & 0xffffffff;\n            }\n            // 0x405400\n            if (v2 == 0xbad1dea) {\n                // 0x4050b9\n                return 0;\n            }\n            if (v2 > 0xbad1dea) {\n                // 0x405520\n                v3 = 0;\n                if (v2 != 0x11307854) {\n                    // 0x40552c\n                    v3 = v4 & -256 | (int64_t)(v2 != 0x13661366);\n                }\n                // 0x4050b9\n                return v3 & 0xffffffff;\n            }\n            // 0x405412\n            v3 = 0;\n            if (v2 != 0x7655821) {\n                // 0x40541e\n                v3 = v4 & -256 | (int64_t)(v2 != 0x9041934);\n            }\n            // 0x4050b9\n            return v3 & 0xffffffff;\n        }\n        // 0x405134\n        if (v2 == 0x3434) {\n            // 0x4050b9\n            return 0;\n        }\n        if (v2 <= 0x3434) {\n            // 0x405146\n            if (v2 == 0x137d) {\n                // 0x4050b9\n                return 0;\n            }\n            if (v2 <= 0x137d) {\n                // 0x405158\n                if (v2 == 391) {\n                    // 0x4050b9\n                    return 0;\n                }\n                if (v2 <= 391) {\n                    // 0x405166\n                    return v4 & 0xffffff00 | (int64_t)(v2 != 47);\n                }\n                // 0x4051e0\n                v3 = 0;\n                if (v2 != 1984) {\n                    // 0x4051ec\n                    v3 = v4 & -256 | (int64_t)(v2 != 0x1373);\n                }\n                // 0x4050b9\n                return v3 & 0xffffffff;\n            }\n            // 0x405200\n            if (v2 == 0x1cd1) {\n                // 0x4050b9\n                return 0;\n            }\n            if (v2 > 0x1cd1) {\n                // 0x4052b8\n                v3 = 0;\n                if (v2 != 0x2468) {\n                    // 0x4052c4\n                    v3 = v4 & -256 | (int64_t)(v2 != 0x2478);\n                }\n                // 0x4050b9\n                return v3 & 0xffffffff;\n            }\n            // 0x405212\n            v3 = 0;\n            if (v2 != 0x137f) {\n                // 0x40521e\n                v3 = v4 & -256 | (int64_t)(v2 != 0x138f);\n            }\n            // 0x4050b9\n            return v3 & 0xffffffff;\n        }\n        // 0x405230\n        if (v2 == 0x482b) {\n            // 0x4050b9\n            return 0;\n        }\n        if (v2 <= 0x482b) {\n            // 0x405242\n            if (v2 == 0x4004) {\n                // 0x4050b9\n                return 0;\n            }\n            if (v2 <= 0x4004) {\n                // 0x4050b9\n                return (v4 & -256 | (int64_t)(v2 != 0x4000)) & 0xffffffff;\n            }\n            // 0x4052d8\n            v3 = 0;\n            if (v2 != 0x4006) {\n                // 0x4052e4\n                v3 = v4 & -256 | (int64_t)(v2 != 0x4244);\n            }\n            // 0x4050b9\n            return v3 & 0xffffffff;\n        }\n        // 0x4052f8\n        if (v2 == 0x4d5a) {\n            // 0x4050b9\n            return 0;\n        }\n        if (v2 > 0x4d5a) {\n            // 0x4054a0\n            v3 = 0;\n            if (v2 != 0x5df5) {\n                // 0x4054ac\n                v3 = v4 & -256 | (int64_t)(v2 != 0x7275);\n            }\n            // 0x4050b9\n            return v3 & 0xffffffff;\n        }\n        // 0x40530a\n        v3 = 0;\n        if (v2 != 0x4858) {\n            // 0x405316\n            v3 = v4 & -256 | (int64_t)(v2 != 0x4d44);\n        }\n        // 0x4050b9\n        return v3 & 0xffffffff;\n    }\n    // 0x405180\n    if (v2 == 0x62646576) {\n        // 0x4050b9\n        return 0;\n    }\n    if (v2 <= 0x62646576) {\n        // 0x405192\n        if (v2 == 0x453dcd28) {\n            // 0x4050b9\n            return 0;\n        }\n        if (v2 <= 0x453dcd28) {\n            // 0x4051a4\n            if (v2 == 0x2bad1dea) {\n                // 0x4050b9\n                return 0;\n            }\n            if (v2 <= 0x2bad1dea) {\n                // 0x4051b6\n                if (v2 == 0x1badface) {\n                    // 0x4050b9\n                    return 0;\n                }\n                if (v2 <= 0x1badface) {\n                    // 0x4051c8\n                    return v4 & 0xffffff00 | (int64_t)(v2 != 0x19800202);\n                }\n                // 0x405328\n                v3 = 0;\n                if (v2 != 0x24051905) {\n                    // 0x405334\n                    v3 = v4 & -256 | (int64_t)(v2 != 0x28cd3d45);\n                }\n                // 0x4050b9\n                return v3 & 0xffffffff;\n            }\n            // 0x405470\n            if (v2 == 0x42465331) {\n                // 0x4050b9\n                return 0;\n            }\n            if (v2 > 0x42465331) {\n                // 0x4054c0\n                v3 = 0;\n                if (v2 != 0x42494e4d) {\n                    // 0x4054cc\n                    v3 = v4 & -256 | (int64_t)(v2 != 0x43415d53);\n                }\n                // 0x4050b9\n                return v3 & 0xffffffff;\n            }\n            // 0x40547e\n            v3 = 0;\n            if (v2 != 0x2fc12fc1) {\n                // 0x40548a\n                v3 = v4 & -256 | (int64_t)(v2 != 0x3153464a);\n            }\n            // 0x4050b9\n            return v3 & 0xffffffff;\n        }\n        // 0x405430\n        if (v2 == 0x54190100) {\n            // 0x4050b9\n            return 0;\n        }\n        if (v2 > 0x54190100) {\n            // 0x405560\n            if (v2 == 0x58465342) {\n                // 0x4050b9\n                return 0;\n            }\n            if (v2 > 0x58465342) {\n                // 0x405690\n                v3 = 0;\n                if (v2 != 0x5a3c69f0) {\n                    // 0x405698\n                    v3 = v4 & -256 | (int64_t)(v2 != 0x6165676c);\n                }\n                // 0x4050b9\n                return v3 & 0xffffffff;\n            }\n            // 0x405572\n            v3 = 0;\n            if (v2 != 0x565a4653) {\n                // 0x40557e\n                v3 = v4 & -256 | (int64_t)(v2 != 0x58295829);\n            }\n            // 0x4050b9\n            return v3 & 0xffffffff;\n        }\n        // 0x405442\n        if (v2 == 0x53464846) {\n            // 0x4050b9\n            return 0;\n        }\n        if (v2 > 0x53464846) {\n            // 0x405540\n            v3 = 0;\n            if (v2 != 0x5346544e) {\n                // 0x40554c\n                v3 = v4 & -256 | (int64_t)(v2 != 0x534f434b);\n            }\n            // 0x4050b9\n            return v3 & 0xffffffff;\n        }\n        // 0x405454\n        v3 = 0;\n        if (v2 != 0x52654973) {\n            // 0x405460\n            v3 = v4 & -256 | (int64_t)(v2 != 0x5346314d);\n        }\n        // 0x4050b9\n        return v3 & 0xffffffff;\n    }\n    // 0x4054e0\n    if (v2 == 0x73727279) {\n        // 0x4050b9\n        return 0;\n    }\n    if (v2 <= 0x73727279) {\n        // 0x4054f2\n        if (v2 == 0x64646178) {\n            // 0x4050b9\n            return 0;\n        }\n        if (v2 <= 0x64646178) {\n            // 0x405504\n            if (v2 == 0x62656572) {\n                // 0x4050b9\n                return 0;\n            }\n            if (v2 <= 0x62656572) {\n                // 0x4050b9\n                return (v4 & -256 | (int64_t)(v2 != 0x62656570)) & 0xffffffff;\n            }\n            // 0x405590\n            v3 = 0;\n            if (v2 != 0x63677270) {\n                // 0x40559c\n                v3 = v4 & -256 | (int64_t)(v2 != 0x64626720);\n            }\n            // 0x4050b9\n            return v3 & 0xffffffff;\n        }\n        // 0x4055b0\n        if (v2 == 0x6e736673) {\n            // 0x4050b9\n            return 0;\n        }\n        if (v2 > 0x6e736673) {\n            // 0x405620\n            v3 = 0;\n            if (v2 != 0x73636673) {\n                // 0x40562c\n                v3 = v4 & -256 | (int64_t)(v2 != 0x73717368);\n            }\n            // 0x4050b9\n            return v3 & 0xffffffff;\n        }\n        // 0x4055be\n        v3 = 0;\n        if (v2 != 0x67596969) {\n            // 0x4055ca\n            v3 = v4 & -256 | (int64_t)(v2 != 0x68191122);\n        }\n        // 0x4050b9\n        return v3 & 0xffffffff;\n    }\n    // 0x4055e0\n    if (v2 == 0xc97e8168) {\n        // 0x4050b9\n        return 0;\n    }\n    if (v2 > 0xc97e8168) {\n        // 0x405660\n        if (v2 == 0xf2f52010) {\n            // 0x4050b9\n            return 0;\n        }\n        if (v2 > 0xf2f52010) {\n            // 0x4056b0\n            v3 = 0;\n            if (v2 != 0xf97cff8c) {\n                // 0x4056ba\n                v3 = v4 & -256 | (int64_t)(v2 != 0xf995e849);\n            }\n            // 0x4050b9\n            return v3 & 0xffffffff;\n        }\n        // 0x40566c\n        v3 = 0;\n        if (v2 != 0xcafe4a11) {\n            // 0x405678\n            v3 = v4 & -256 | (int64_t)(v2 != 0xde5e81e4);\n        }\n        // 0x4050b9\n        return v3 & 0xffffffff;\n    }\n    // 0x4055f0\n    if (v2 == 0x9123683e) {\n        // 0x4050b9\n        return 0;\n    }\n    if (v2 > 0x9123683e) {\n        // 0x405640\n        v3 = 0;\n        if (v2 != 0x958458f6) {\n            // 0x40564e\n            v3 = v4 & -256 | (int64_t)(v2 != 0xabba1974);\n        }\n        // 0x4050b9\n        return v3 & 0xffffffff;\n    }\n    // 0x405602\n    v3 = 0;\n    if (v2 != 0x74726163) {\n        // 0x40560e\n        v3 = v4 & -256 | (int64_t)(v2 != 0x858458f6);\n    }\n    // 0x4050b9\n    return v3 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4056e0",
            "funcStartAddr": "4056e0",
            "funcEndAddr": "405d03",
            "decompiledFuncCode": "int64_t function_4056e0(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t * v1 = (int32_t *)(a1 + 60); // 0x405704\n    int32_t v2 = *v1; // 0x405704\n    bool v3; // 0x4056e0\n    int64_t v4 = v3 ? -1 : 1; // 0x40570b\n    int64_t v5 = (int64_t)\"-\"; // 0x40570b\n    int64_t v6 = a1; // 0x40570b\n    int64_t v7 = 2; // 0x40570b\n    unsigned char v8 = *(char *)v6; // 0x40570b\n    char v9 = *(char *)v5; // 0x40570b\n    v5 += v4;\n    v6 += v4;\n    char v10 = v9; // 0x40570b\n    bool v11 = false; // 0x40570b\n    while (v8 == v9) {\n        v7--;\n        v10 = v8;\n        v11 = true;\n        if (v7 == 0) {\n            // break -> \n            break;\n        }\n        v8 = *(char *)v6;\n        v9 = *(char *)v5;\n        v5 += v4;\n        v6 += v4;\n        v10 = v9;\n        v11 = false;\n    }\n    unsigned char v12 = v10;\n    char * v13 = (char *)(a1 + 54); // 0x40570d\n    char v14 = *v13; // 0x40570d\n    int64_t v15 = (int64_t)!((v8 < v12 | v11)) - (int64_t)(v8 < v12); // 0x405719\n    int32_t v16 = v2; // 0x405723\n    int64_t v17 = v6; // 0x405723\n    int64_t v18 = v5; // 0x405723\n    int64_t v19 = 0; // 0x405723\n    if ((int32_t)v15 != 0) {\n        // 0x405729\n        v17 = 2048 * (int64_t)((char)a2 == 0);\n        int64_t v20 = function_406780(a1, (int32_t)v17, a3); // 0x40573a\n        v16 = *v1;\n        v18 = a1;\n        v19 = v20 & 0xffffffff;\n    }\n    int32_t * v21 = (int32_t *)(a1 + 56); // 0x405745\n    int32_t v22 = *v21; // 0x405745\n    int32_t v23; // 0x4056e0\n    int64_t v24; // 0x4056e0\n    int64_t v25; // 0x4056e0\n    int64_t v26; // 0x4056e0\n    int64_t v27; // 0x4056e0\n    int64_t v28; // 0x4056e0\n    int64_t v29; // 0x4056e0\n    int64_t v30; // 0x4056e0\n    int64_t v31; // 0x4056e0\n    int64_t v32; // 0x4056e0\n    int64_t v33; // 0x4056e0\n    int64_t v34; // 0x4056e0\n    int64_t v35; // bp-200, 0x4056e0\n    char v36; // 0x405759\n    int32_t v37; // 0x4056e0\n    if (v22 == -1 == v16 == 0) {\n        // 0x405cbc\n        __assert_fail(\"valid_file_spec (f)\", \"src/tail.c\", 967, \"recheck\");\n        v23 = v2;\n        goto lab_0x405cd5;\n    } else {\n        int64_t v38 = a3 & -256 | (int64_t)(v22 == -1); // 0x405749\n        v36 = *(char *)&g54;\n        if (v36 != 0) {\n            if (v19 == 0xffffffff) {\n                // 0x405950\n                *v13 = 0;\n                if (g44 == 0) {\n                    int64_t v39 = &v35; // 0x405bb8\n                    int32_t v40 = __lxstat(1, (char *)v18, (struct stat *)&v35); // 0x405bc5\n                    v29 = v39;\n                    v33 = v18;\n                    v27 = 1;\n                    if (v40 != 0) {\n                        goto lab_0x405787;\n                    } else {\n                        // 0x405bd2\n                        v29 = v39;\n                        v33 = v18;\n                        v27 = 1;\n                        v31 = v39;\n                        if ((v37 & 0xf000) != 0xa000) {\n                            goto lab_0x405787;\n                        } else {\n                            goto lab_0x405bf0;\n                        }\n                    }\n                } else {\n                    // 0x40595f\n                    *v1 = *__errno_location();\n                    v30 = v38;\n                    v25 = v18;\n                    v34 = v17;\n                    goto lab_0x405969;\n                }\n            } else {\n                // 0x40580a\n                *v13 = 1;\n                int64_t v41 = &v35; // 0x40580e\n                v24 = v41;\n                if (g44 == 0) {\n                    int32_t v42 = __lxstat(1, (char *)v18, (struct stat *)&v35); // 0x405a50\n                    v24 = v41;\n                    if (v42 != 0) {\n                        goto lab_0x40581b;\n                    } else {\n                        // 0x405a62\n                        v24 = v41;\n                        v31 = v41;\n                        if ((v37 & 0xf000) != 0xa000) {\n                            goto lab_0x40581b;\n                        } else {\n                            goto lab_0x405bf0;\n                        }\n                    }\n                } else {\n                    goto lab_0x40581b;\n                }\n            }\n        } else {\n            // 0x405771\n            *v13 = 1;\n            v28 = v38;\n            v32 = v17;\n            v26 = v18;\n            if (g44 == 0) {\n                int64_t v43 = &v35; // 0x405a05\n                int32_t v44 = __lxstat(1, (char *)v18, (struct stat *)&v35); // 0x405a08\n                v28 = v43;\n                v32 = v18;\n                v26 = 1;\n                if (v44 != 0) {\n                    goto lab_0x40577d;\n                } else {\n                    // 0x405a15\n                    v28 = v43;\n                    v32 = v18;\n                    v26 = 1;\n                    v31 = v43;\n                    if ((v37 & 0xf000) != 0xa000) {\n                        goto lab_0x40577d;\n                    } else {\n                        goto lab_0x405bf0;\n                    }\n                }\n            } else {\n                goto lab_0x40577d;\n            }\n        }\n    }\n  lab_0x405cd5:\n    // 0x405cd5\n    __assert_fail(\"f->fd == -1\", \"src/tail.c\", 1044, \"recheck\");\n    int64_t v45 = 1044; // 0x405ce9\n    int64_t v46 = v15; // 0x405ce9\n    int64_t v47 = (int64_t)\"src/tail.c\"; // 0x405ce9\n    int32_t v48 = v23; // 0x405ce9\n    goto lab_0x405cee;\n  lab_0x405cee:;\n    int64_t v49 = v45; // 0x405cf8\n    int64_t v50 = v46; // 0x405cf8\n    int64_t v51 = v47; // 0x405cf8\n    int64_t v52 = v45; // 0x405cf8\n    int64_t v53 = v46; // 0x405cf8\n    int64_t v54 = v47; // 0x405cf8\n    if (v48 != -1) {\n        goto lab_0x405b70;\n    } else {\n        goto lab_0x4057ae;\n    }\n  lab_0x40577d:\n    // 0x40577d\n    v29 = v28;\n    v33 = v32;\n    v27 = v26;\n    if (v19 != 0xffffffff) {\n        // 0x405a30\n        v24 = &v35;\n        goto lab_0x40581b;\n    } else {\n        goto lab_0x405787;\n    }\n  lab_0x405b70:\n    // 0x405b70\n    function_409510(4, function_4047e0(v53, v54, v52));\n    char * format = dcgettext(NULL, \"%s has been replaced with an untailable file%s\", 5); // 0x405b94\n    error(0, (int32_t)\"%s has been replaced with an untailable file%s\" ^ (int32_t)\"%s has been replaced with an untailable file%s\", format);\n    v49 = (int64_t)format;\n    v50 = 0;\n    v51 = (int32_t)\"%s has been replaced with an untailable file%s\" ^ (int32_t)\"%s has been replaced with an untailable file%s\";\n    goto lab_0x4057ae;\n  lab_0x4057ae:;\n    int64_t v55 = function_4047e0(v50, v51, v49); // 0x4057b1\n    function_404820((int32_t)v19, v55);\n    int64_t v56 = function_4047e0(v19, v55, v49); // 0x4057c4\n    int64_t result = function_404820(*v21, v56); // 0x4057cf\n    *v21 = -1;\n    // 0x4057db\n    return result;\n  lab_0x40581b:;\n    int32_t v57 = v19; // 0x405826\n    int32_t v58 = __fxstat(1, v57, (struct stat *)v24); // 0x405826\n    v29 = v24;\n    v33 = v19;\n    v27 = 1;\n    int64_t v59; // 0x4056e0\n    int64_t v60; // 0x40584a\n    if (v58 < 0) {\n        goto lab_0x405787;\n    } else {\n        int64_t v61 = v37; // 0x405833\n        v59 = v61;\n        if ((v37 & 0xf000) < 0x3000) {\n            goto lab_0x40585c;\n        } else {\n            // 0x40584a\n            v60 = v61 & 0xb000;\n            v59 = v60;\n            if (v60 != 0x8000) {\n                // 0x405b10\n                *v1 = -1;\n                *v13 = 0;\n                if (v36 == 0) {\n                    goto lab_0x405b48;\n                } else {\n                    // 0x405b20\n                    if (g26 != 1) {\n                        goto lab_0x405b48;\n                    } else {\n                        // 0x405b29\n                        *(char *)(a1 + 52) = 0;\n                        v52 = v60;\n                        v53 = 1;\n                        v54 = v19;\n                        v45 = v60;\n                        v46 = 1;\n                        v47 = v19;\n                        v48 = v2;\n                        if (v14 == 0) {\n                            goto lab_0x405cee;\n                        } else {\n                            goto lab_0x405b70;\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40585c;\n            }\n        }\n    }\n  lab_0x405787:;\n    int32_t * v62 = __errno_location(); // 0x405787\n    int32_t v63 = *v62; // 0x405797\n    *v1 = v63;\n    v30 = v29;\n    v25 = v27;\n    v34 = v33;\n    if (*v13 == 0) {\n        goto lab_0x405969;\n    } else {\n        // 0x4057a5\n        v49 = v29;\n        v50 = v27;\n        v51 = v33;\n        if (v63 != v2) {\n            int64_t v64 = function_4095e0(0, 3, function_4047e0(v27, v33, v29)); // 0x4059d2\n            uint32_t err_num = *v62; // 0x4059d7\n            error(0, err_num, \"%s\", (char *)v64);\n            v49 = (int64_t)\"%s\";\n            v50 = 0;\n            v51 = err_num;\n        }\n        goto lab_0x4057ae;\n    }\n  lab_0x405969:\n    // 0x405969\n    v49 = v30;\n    v50 = v25;\n    v51 = v34;\n    if (v14 != 0) {\n        // 0x405974\n        function_409510(4, function_4047e0(v25, v34, v30));\n        char * format2 = dcgettext(NULL, \"%s has become inaccessible\", 5); // 0x405998\n        uint32_t err_num2 = *v1; // 0x40599d\n        error(0, err_num2, format2);\n        v49 = (int64_t)format2;\n        v50 = 0;\n        v51 = err_num2;\n    }\n    goto lab_0x4057ae;\n  lab_0x405bf0:\n    // 0x405bf0\n    *v1 = -1;\n    *(char *)(a1 + 52) = 1;\n    function_409510(4, function_4047e0(1, v18, v31));\n    char * format3 = dcgettext(NULL, \"%s has been replaced with an untailable symbolic link\", 5); // 0x405c1f\n    error(0, (int32_t)\"%s has been replaced with an untailable symbolic link\" ^ (int32_t)\"%s has been replaced with an untailable symbolic link\", format3);\n    v49 = (int64_t)format3;\n    v50 = 0;\n    v51 = (int32_t)\"%s has been replaced with an untailable symbolic link\" ^ (int32_t)\"%s has been replaced with an untailable symbolic link\";\n    goto lab_0x4057ae;\n  lab_0x40585c:;\n    int64_t v65 = function_4047e0(1, v19, v59); // 0x40585f\n    char v66 = function_405090(v19, v65); // 0x40586f\n    *(char *)(a1 + 53) = v66;\n    int64_t v67; // 0x4056e0\n    int64_t v68; // 0x4056e0\n    int64_t v69; // 0x4056e0\n    int64_t v70; // 0x4056e0\n    if (v66 != 0 == g44 == 0) {\n        // 0x405c40\n        *v1 = -1;\n        function_409510(4, function_4047e0(v19, v65, v59));\n        char * format4 = dcgettext(NULL, \"%s has been replaced with an untailable remote file\", 5); // 0x405c6b\n        error(0, (int32_t)\"%s has been replaced with an untailable remote file\" ^ (int32_t)\"%s has been replaced with an untailable remote file\", format4);\n        *(int16_t *)(a1 + 52) = 257;\n        v49 = (int64_t)format4;\n        v50 = 0;\n        v51 = (int32_t)\"%s has been replaced with an untailable remote file\" ^ (int32_t)\"%s has been replaced with an untailable remote file\";\n        goto lab_0x4057ae;\n    } else {\n        int32_t v71 = v2 & -3; // 0x405883\n        *v1 = 0;\n        int32_t v72 = *v21; // 0x40588e\n        if (v71 == 0) {\n            if (v72 == -1) {\n                // 0x405c98\n                function_409510(4, function_4047e0(v19, v65, v59));\n                v70 = (int64_t)\"%s has appeared;  following new file\";\n                goto lab_0x4058c2;\n            } else {\n                // 0x405a8c\n                int64_t v73; // 0x4056e0\n                if (*(int64_t *)(a1 + 40) == v73) {\n                    // 0x405a97\n                    if (*(int64_t *)(a1 + 32) == v35) {\n                        // 0x4057db\n                        return function_404820(v57, function_4047e0(v19, v65, v59));\n                    }\n                }\n                // 0x405ac0\n                function_409510(4, function_4047e0(v19, v65, v59));\n                char * format5 = dcgettext(NULL, \"%s has been replaced;  following new file\", 5); // 0x405ae1\n                int64_t v74 = (int64_t)format5; // 0x405ae1\n                error(0, (int32_t)\"%s has been replaced;  following new file\" ^ (int32_t)\"%s has been replaced;  following new file\", format5);\n                int64_t v75 = function_4047e0(0, (int64_t)((int32_t)\"%s has been replaced;  following new file\" ^ (int32_t)\"%s has been replaced;  following new file\"), v74); // 0x405afa\n                uint32_t v76 = *v21; // 0x405aff\n                function_404820(v76, v75);\n                v68 = v74;\n                v69 = v75;\n                v67 = v76;\n                goto lab_0x4058da;\n            }\n        } else {\n            // 0x405897\n            v23 = v71;\n            if (v72 != -1) {\n                goto lab_0x405cd5;\n            } else {\n                // 0x4058a0\n                function_409510(4, function_4047e0(v19, v65, v59));\n                v70 = (int64_t)\"%s has become accessible\";\n                goto lab_0x4058c2;\n            }\n        }\n    }\n  lab_0x405b48:\n    // 0x405b48\n    *(char *)(a1 + 52) = 1;\n    v49 = v60;\n    v50 = 1;\n    v51 = v19;\n    if (v2 == -1 == v14 == 0) {\n        goto lab_0x4057ae;\n    } else {\n        // 0x405b59\n        dcgettext(NULL, \"; giving up on this name\", 5);\n        v52 = 5;\n        v53 = 0;\n        v54 = (int64_t)\"; giving up on this name\";\n        goto lab_0x405b70;\n    }\n  lab_0x4058c2:;\n    char * format6 = dcgettext(NULL, (char *)v70, 5); // 0x4058c4\n    error(0, 0, format6);\n    v68 = (int64_t)format6;\n    v69 = 0;\n    v67 = 0;\n    goto lab_0x4058da;\n  lab_0x4058da:\n    // 0x4058da\n    *v21 = v57;\n    int32_t v77 = (int32_t)v15 == 0 ? -1 : (int32_t)a2 % 256; // 0x4058e9\n    *(char *)(a1 + 52) = 0;\n    *(int64_t *)(a1 + 8) = 0;\n    *(int32_t *)(a1 + 64) = v77;\n    *(int64_t *)(a1 + 88) = 0;\n    *(int64_t *)(a1 + 32) = v35;\n    // 0x4057db\n    return function_404c20(v19, 0, 0, function_4047e0(v67, v69, v68));\n}\n"
        },
        {
            "funcName": "function_405d10",
            "funcStartAddr": "405d10",
            "funcEndAddr": "406165",
            "decompiledFuncCode": "int64_t function_405d10(int32_t status) {\n    // 0x405d10\n    if (status != 0) {\n        // 0x405d2a\n        __fprintf_chk(g41, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x405d4f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x405d56\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"Print the last %d lines of each FILE to standard output.\\nWith more than one FILE, precede each with a header giving the file name.\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"  -c, --bytes=[+]NUM       output the last NUM bytes; or use -c +NUM to\\n                             output starting with byte NUM of each file\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"  -f, --follow[={name|descriptor}]\\n                           output appended data as the file grows;\\n                             an absent option argument means 'descriptor'\\n  -F                       same as --follow=name --retry\\n\", 5), g39);\n    __printf_chk(1, dcgettext(NULL, \"  -n, --lines=[+]NUM       output the last NUM lines, instead of the last %d;\\n                             or use -n +NUM to output starting with line NUM\\n      --max-unchanged-stats=N\\n                           with --follow=name, reopen a FILE which has not\\n                             changed size after N (default %d) iterations\\n                             to see if it has been unlinked or renamed\\n                             (this is the usual case of rotated log files);\\n                             with inotify, this option is rarely useful\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"      --pid=PID            with -f, terminate after process ID, PID dies\\n  -q, --quiet, --silent    never output headers giving file names\\n      --retry              keep trying to open a file if it is inaccessible\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"  -s, --sleep-interval=N   with -f, sleep for approximately N seconds\\n                             (default 1.0) between iterations;\\n                             with inotify and --pid=P, check process P at\\n                             least once every N seconds\\n  -v, --verbose            always output headers giving file names\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"  -z, --zero-terminated    line delimiter is NUL, not newline\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"\\nNUM may have a multiplier suffix:\\nb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\\nGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y.\\n\\n\", 5), g39);\n    fputs_unlocked(dcgettext(NULL, \"With --follow (-f), tail defaults to following the file descriptor, which\\nmeans that even if a tail'ed file is renamed, tail will continue to track\\nits end.  This default behavior is not desirable when you really want to\\ntrack the actual name of the file, not the file descriptor (e.g., log\\nrotation).  Use --follow=name in that case.  That causes tail to track the\\nnamed file in a way that accommodates renaming, removal and creation.\\n\", 5), g39);\n    int64_t v1 = &g1; // bp-136, 0x405f44\n    bool v2; // 0x405d10\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x405fc8\n    int64_t v6 = *(int64_t *)v5; // 0x405fcc\n    int64_t v7 = 5; // 0x405fd2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"tail\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x405fde\n        char v11 = *(char *)v9; // 0x405fde\n        char v12 = v11; // 0x405fde\n        bool v13 = false; // 0x405fde\n        while (v10 == v11) {\n            // 0x405fd4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x405fde\n            int64_t v15 = v8 + v3; // 0x405fde\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x405fea\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x405fea\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4060fc;\n        } else {\n            // 0x4060e6\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40613b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40604c;\n            } else {\n                goto lab_0x4060fc;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40604c;\n        } else {\n            // 0x406032\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40613b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40604c;\n            } else {\n                goto lab_0x40604c;\n            }\n        }\n    }\n  lab_0x4060fc:\n    // 0x4060fc\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40608c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x405d4f\n    exit(status);\n    // UNREACHABLE\n  lab_0x40604c:\n    // 0x40604c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40608c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x405d4f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406170",
            "funcStartAddr": "406170",
            "funcEndAddr": "40617a",
            "decompiledFuncCode": "int64_t function_406170(void) {\n    // 0x406170\n    return function_405d10(1);\n}\n"
        },
        {
            "funcName": "function_406180",
            "funcStartAddr": "406180",
            "funcEndAddr": "406296",
            "decompiledFuncCode": "int64_t function_406180(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x4061a1\n    int32_t len = strlen(str); // 0x4061a1\n    if (a2 == 0) {\n        // 0x40626d\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x406207\n    int64_t v4 = a3; // 0x406180\n    int64_t v5 = a2; // 0x40620e\n    int64_t str4; // 0x406180\n    int64_t v6; // 0x406180\n    int32_t v7; // 0x406180\n    int32_t v8; // 0x406180\n    int32_t v9; // 0x406180\n    int64_t v10; // 0x406180\n    int64_t result; // 0x406180\n    int32_t v11; // 0x406203\n    char * str2; // 0x406222\n    while (true) {\n        // 0x406217\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x40622b\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x40626d\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x40623f\n                break;\n            }\n            // 0x4061d0\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x4061de\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x406207\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x406243\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x40624a\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x406217\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x406217\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x40622b\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x40626d\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x40623f\n                    break;\n                }\n                // 0x4061d0\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x4061de\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x406207\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x40623f\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x406258:\n    // 0x40626d\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_4062a0",
            "funcStartAddr": "4062a0",
            "funcEndAddr": "406311",
            "decompiledFuncCode": "int64_t function_4062a0(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x4062a0\n    if (a3 == -1) {\n        // 0x406300\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x4062b5\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x4062c4\n    function_409740(1, a1);\n    function_409430(0, 8, a2);\n    error(0, 0, format);\n    return &g73;\n}\n"
        },
        {
            "funcName": "function_406320",
            "funcStartAddr": "406320",
            "funcEndAddr": "406438",
            "decompiledFuncCode": "int64_t function_406320(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x40634d\n    fputs_unlocked(v1, g41);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x4063c0\n        int64_t v5; // 0x4063c7\n        int64_t v6; // 0x4063e7\n        while (v3 != 0) {\n            // 0x4063ab\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x406370\n                break;\n            }\n            // 0x4063bd\n            v4 = v3 + 1;\n            v5 = function_409760(v2);\n            __fprintf_chk(g41, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x4063f0\n                goto lab_0x4063f0;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x406373\n        int64_t v8 = function_409760(v2); // 0x40637d\n        __fprintf_chk(g41, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x40639d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x4063ab\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x406370\n                    break;\n                }\n                // 0x4063bd\n                v4 = v3 + 1;\n                v5 = function_409760(v2);\n                __fprintf_chk(g41, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x4063f0\n                    goto lab_0x4063f0;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x406370\n            v7 = v3 + 1;\n            v8 = function_409760(v2);\n            __fprintf_chk(g41, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x4063f0:;\n    int64_t v10 = (int64_t)g41; // 0x4063f0\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x4063f7\n    uint64_t result = *v11; // 0x4063f7\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x406420\n        return __overflow(g41, 10);\n    }\n    // 0x406401\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406440",
            "funcStartAddr": "406440",
            "funcEndAddr": "4064b0",
            "decompiledFuncCode": "int64_t function_406440(char * a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_406180(a2, v2, v1, a5); // 0x40646c\n    int64_t result = v3; // 0x406474\n    if (v3 < 0) {\n        // 0x406488\n        function_4062a0((int64_t)a1, a2, v3);\n        function_406320(v2, v1, a5);\n        result = -1;\n    }\n    // 0x406476\n    return result;\n}\n"
        },
        {
            "funcName": "function_4064b0",
            "funcStartAddr": "4064b0",
            "funcEndAddr": "4064fd",
            "decompiledFuncCode": "int64_t function_4064b0(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x4064b0\n    if (result == 0) {\n        // 0x4064f1\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x4064e8\n    int32_t n = a4; // 0x4064e8\n    int64_t v1 = result; // 0x4064ef\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x4064f1\n        return result;\n    }\n    int64_t str3 = str2; // 0x4064ef\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x4064d0\n    int64_t result2 = 0; // 0x4064dd\n    while (v2 != 0) {\n        // 0x4064df\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x4064f1\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x4064f1\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406500",
            "funcStartAddr": "406500",
            "funcEndAddr": "40656a",
            "decompiledFuncCode": "int64_t function_406500(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406500\n    int128_t v1; // 0x406500\n    int128_t v2 = v1;\n    struct __locale_struct * v3 = g55;\n    if (v3 != NULL) {\n        // 0x406524\n        return strtod_l((char *)a1, (char **)a2, v3);\n    }\n    struct __locale_struct * v4 = newlocale(0x1fbf, \"C\", NULL); // 0x40655c\n    g55 = v4;\n    if (v4 != NULL) {\n        // 0x406524\n        return strtod_l((char *)a1, (char **)a2, v4);\n    }\n    if (a2 != 0) {\n        // 0x40653d\n        *(int64_t *)a2 = a1;\n    }\n    // 0x406540\n    __asm_pxor(v2, v2);\n    return (int64_t)v4;\n}\n"
        },
        {
            "funcName": "function_406570",
            "funcStartAddr": "406570",
            "funcEndAddr": "406578",
            "decompiledFuncCode": "int64_t function_406570(int64_t a1) {\n    // 0x406570\n    g57 = a1;\n    int64_t result; // 0x406570\n    return result;\n}\n"
        },
        {
            "funcName": "function_406580",
            "funcStartAddr": "406580",
            "funcEndAddr": "406588",
            "decompiledFuncCode": "int64_t function_406580(int64_t a1) {\n    // 0x406580\n    g56 = a1;\n    int64_t result; // 0x406580\n    return result;\n}\n"
        },
        {
            "funcName": "function_406590",
            "funcStartAddr": "406590",
            "funcEndAddr": "40662e",
            "decompiledFuncCode": "int64_t function_406590(void) {\n    // 0x406590\n    int32_t * err_num; // 0x4065a6\n    if ((int32_t)function_40b8f0((int64_t)g39) == 0) {\n        goto lab_0x4065bc;\n    } else {\n        // 0x4065a6\n        err_num = __errno_location();\n        if (g56 == 0) {\n            goto lab_0x4065d3;\n        } else {\n            // 0x4065b7\n            if (*err_num != 32) {\n                goto lab_0x4065d3;\n            } else {\n                goto lab_0x4065bc;\n            }\n        }\n    }\n  lab_0x4065bc:;\n    int64_t result = function_40b8f0((int64_t)g41); // 0x4065c3\n    if ((int32_t)result == 0) {\n        // 0x4065cc\n        return result;\n    }\n    // 0x40660e\n    _exit(g29);\n    // UNREACHABLE\n  lab_0x4065d3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4065df\n    if (g57 == 0) {\n        // 0x406619\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4065f3\n        error(0, *err_num, \"%s: %s\", (char *)function_4095b0((int64_t)g57), v1);\n    }\n    // 0x40660e\n    _exit(g29);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406630",
            "funcStartAddr": "406630",
            "funcEndAddr": "40668d",
            "decompiledFuncCode": "int64_t function_406630(int64_t a1) {\n    // 0x406630\n    int64_t v1; // 0x406630\n    uint64_t v2 = (int64_t)((char)v1 == 47); // 0x40663e\n    int64_t v3 = function_4066f0(a1, v1); // 0x406642\n    int64_t result = v3 - a1; // 0x40664a\n    if (result <= v2 || *(char *)(v3 - 1) != 47) {\n        // 0x406673\n        return result;\n    }\n    int64_t result2 = result;\n    result2--;\n    while (result2 != v2) {\n        // 0x406660\n        if (*(char *)(a1 - 1 + result2) != 47) {\n            // break -> 0x406673\n            break;\n        }\n        result2--;\n    }\n    // 0x406673\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406690",
            "funcStartAddr": "406690",
            "funcEndAddr": "4066ea",
            "decompiledFuncCode": "int64_t function_406690(int64_t a1) {\n    int64_t v1 = function_406630(a1); // 0x406699\n    int64_t * mem = malloc((int32_t)(v1 + 1 + (int64_t)(v1 == 0))); // 0x4066af\n    if (mem == NULL) {\n        // 0x4066d6\n        return (int64_t)mem;\n    }\n    int64_t * dest_mem = memcpy(mem, (int64_t *)a1, (int32_t)v1); // 0x4066c5\n    int64_t v2 = v1; // 0x4066d0\n    if (v1 == 0) {\n        // 0x4066e0\n        *(char *)dest_mem = 46;\n        v2 = 1;\n    }\n    int64_t result = (int64_t)dest_mem; // 0x4066c5\n    *(char *)(v2 + result) = 0;\n    // 0x4066d6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4066f0",
            "funcStartAddr": "4066f0",
            "funcEndAddr": "40674b",
            "decompiledFuncCode": "int64_t function_4066f0(int64_t a1, int64_t a2) {\n    // 0x4066f0\n    int64_t v1; // 0x4066f0\n    char v2 = v1;\n    int64_t v3 = a1; // 0x4066f9\n    int64_t v4 = a1; // 0x4066f9\n    char v5 = v2; // 0x4066f9\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x406704\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x406700\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x40670e\n    if (v5 == 0) {\n      lab_0x40674a:\n        // 0x40674a\n        return result;\n    }\n    int64_t v7 = v4; // 0x406738\n    int64_t v8 = 0; // 0x406738\n    int64_t v9; // 0x4066f0\n    int64_t v10; // 0x40673a\n    char v11; // 0x40673e\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x406735\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x40673a\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x406735\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x40672a\n    char v14 = *(char *)v13; // 0x40672e\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x406735\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x40673a\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x406735\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x406720\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x40674a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406750",
            "funcStartAddr": "406750",
            "funcEndAddr": "40677b",
            "decompiledFuncCode": "int64_t function_406750(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x406754\n    int64_t result = len; // 0x406754\n    if (len < 2) {\n        // 0x40676a\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x406768\n    while (*(char *)(v1 + str) == 47) {\n        // 0x406770\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x40676a\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x40676a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406780",
            "funcStartAddr": "406780",
            "funcEndAddr": "4067ca",
            "decompiledFuncCode": "int64_t function_406780(int64_t path, int32_t oflag, int64_t a3) {\n    uint32_t fd = open((char *)path, oflag); // 0x406793\n    return function_4097e0((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_4067d0",
            "funcStartAddr": "4067d0",
            "funcEndAddr": "406863",
            "decompiledFuncCode": "int64_t function_4067d0(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x4067e7\n    if (v1 == -1) {\n        // 0x40685f\n        return -1;\n    }\n    int64_t v2 = v1; // 0x4067ef\n    int64_t v3; // 0x4067d0\n    while (true) {\n      lab_0x4067f8:\n        // 0x4067f8\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x406850;\n        } else {\n            goto lab_0x406855;\n        }\n    }\n  lab_0x40685f_2:;\n    // 0x40685f\n    int64_t result; // 0x4067d0\n    return result;\n  lab_0x406855:;\n    int64_t v4 = v3 + 2; // 0x406855\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x40685f\n        goto lab_0x40685f_2;\n    }\n    goto lab_0x4067f8;\n  lab_0x406850:\n    // 0x406850\n    result = v3;\n    goto lab_0x406855;\n}\n"
        },
        {
            "funcName": "function_406870",
            "funcStartAddr": "406870",
            "funcEndAddr": "406880",
            "decompiledFuncCode": "int64_t function_406870(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x406870\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_406880",
            "funcStartAddr": "406880",
            "funcEndAddr": "406887",
            "decompiledFuncCode": "int64_t function_406880(int64_t a1, int64_t a2) {\n    // 0x406880\n    int64_t v1; // 0x406880\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_406890",
            "funcStartAddr": "406890",
            "funcEndAddr": "4068b1",
            "decompiledFuncCode": "int64_t function_406890(int64_t a1, int64_t a2) {\n    // 0x406890\n    int64_t v1; // 0x406890\n    uint64_t v2 = v1;\n    if (*(int64_t *)(a1 + 16) > v2) {\n        // 0x4068a8\n        return 16 * v2 + a2;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4068c0",
            "funcStartAddr": "4068c0",
            "funcEndAddr": "4069d9",
            "decompiledFuncCode": "int64_t function_4068c0(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_406890(a1, a2); // 0x4068d4\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x4068dc\n    int64_t result2 = *v2; // 0x4068dc\n    if (result2 == 0) {\n        // 0x40696e\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x406904\n            if (v3 == 0) {\n                // 0x40696e\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x406911\n            int64_t v5 = v3; // 0x406917\n            int64_t v6 = v1; // 0x406917\n            int64_t result = v4; // 0x406917\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x40694c_2:\n                // 0x40694c\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x406951\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x406960\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x40696e\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x406924\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x406931\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x40694c_2;\n                }\n                // 0x406939\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x40694c_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x40696e\n            return 0;\n        }\n    }\n    // 0x406983\n    if ((char)a4 == 0) {\n        // 0x40696e\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x406988\n    if (v12 == 0) {\n        // 0x4069d0\n        *v2 = 0;\n        // 0x40696e\n        return result2;\n    }\n    // 0x406991\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x40699f\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4069e0",
            "funcStartAddr": "4069e0",
            "funcEndAddr": "406a5e",
            "decompiledFuncCode": "int64_t function_4069e0(uint64_t a1) {\n    if (a1 == (int64_t)&g8) {\n        // 0x406a5d\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x4069eb\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g8) {\n        // 0x406a4a\n        *(int64_t *)a1 = (int64_t)&g8;\n        return 0;\n    }\n    // 0x4069f9\n    __asm_comiss_2(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x406a14\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_3(v2, 0x3dcccccd); // 0x406a21\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x406a29\n    __asm_comiss_2(v4, v3);\n    __asm_comiss_2(__asm_movss(0x3f800000), v4);\n    __asm_comiss_2(v1, v3);\n    // 0x406a5d\n    return 1;\n}\n"
        },
        {
            "funcName": "function_406a60",
            "funcStartAddr": "406a60",
            "funcEndAddr": "406baa",
            "decompiledFuncCode": "int64_t function_406a60(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x406a7a\n    uint64_t v2 = *v1; // 0x406a7a\n    if (v2 <= a2) {\n        // 0x406b64\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x406a60\n    int64_t v8 = a2; // 0x406a60\n    int64_t v9; // 0x406a60\n    int64_t result; // 0x406a60\n    int64_t v10; // 0x406a60\n    while (true) {\n      lab_0x406a96_2:\n        // 0x406a96\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x406a96\n        int64_t v12 = *v11; // 0x406a96\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x406a88;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x406a9f\n            int64_t v14 = *v13; // 0x406a9f\n            int64_t v15 = v14; // 0x406aa7\n            int64_t v16 = v12; // 0x406aa7\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x406ac4\n                    int64_t v19 = *v18; // 0x406ac4\n                    int64_t v20 = function_406890(v3, v19); // 0x406acd\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x406ad2\n                    int64_t v22 = *v21; // 0x406ad2\n                    int64_t * v23 = (int64_t *)v20; // 0x406ad6\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x406ab0\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x406aff\n                            break;\n                        }\n                    } else {\n                        // 0x406adc\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x406aff\n                            break;\n                        }\n                    }\n                    // 0x406ac4\n                    v15 = v22;\n                }\n                // 0x406aff\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x406b03\n                v9 = *v1;\n                goto lab_0x406a88;\n            } else {\n                int64_t v26 = function_406890(v3, v25); // 0x406b1b\n                int64_t * v27 = (int64_t *)v26; // 0x406b20\n                if (*v27 == 0) {\n                    // 0x406b80\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x406b29\n                    int64_t * v29; // 0x406a60\n                    int64_t v30; // 0x406a60\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x406b8f\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x406b64\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x406b8f\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x406b3a\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x406b49\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x406b51\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x406b5a\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x406b64\n                    break;\n                }\n                goto lab_0x406a96_2;\n            }\n        }\n    }\n    // 0x406b64\n    return result;\n  lab_0x406a88:;\n    int64_t v36 = v10 + 16; // 0x406a88\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x406a96_2;\n    // 0x406a96\n    goto lab_0x406a96_2;\n}\n"
        },
        {
            "funcName": "function_406bb0",
            "funcStartAddr": "406bb0",
            "funcEndAddr": "406bb5",
            "decompiledFuncCode": "int64_t function_406bb0(int64_t a1) {\n    // 0x406bb0\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_406bc0",
            "funcStartAddr": "406bc0",
            "funcEndAddr": "406bc5",
            "decompiledFuncCode": "int64_t function_406bc0(int64_t a1) {\n    // 0x406bc0\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_406bd0",
            "funcStartAddr": "406bd0",
            "funcEndAddr": "406bd5",
            "decompiledFuncCode": "int64_t function_406bd0(char a1) {\n    // 0x406bd0\n    return *(int64_t *)((int64_t)a1 + 32);\n}\n"
        },
        {
            "funcName": "function_406be0",
            "funcStartAddr": "406be0",
            "funcEndAddr": "406c2f",
            "decompiledFuncCode": "int64_t function_406be0(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x406be3\n    int64_t result = 0; // 0x406bec\n    if (v1 <= a1) {\n      lab_0x406c2d:\n        // 0x406c2d\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x406bf0\n    while (*(int64_t *)v3 == 0) {\n        // 0x406bf0\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x406bff\n    int64_t v6 = v5; // 0x406c0b\n    int64_t v7 = 1; // 0x406c0b\n    int64_t v8; // 0x406be0\n    int64_t v9; // 0x406c10\n    int64_t v10; // 0x406c14\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x406c10\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x406c20\n    int64_t v12 = v3 + 16; // 0x406c24\n    while (v12 < v1) {\n        // 0x406bf9\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x406bf0\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x406bff\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x406c10\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x406c1d\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x406c2d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406c30",
            "funcStartAddr": "406c30",
            "funcEndAddr": "406c97",
            "decompiledFuncCode": "int64_t function_406c30(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x406c33\n    int64_t v2 = a1; // 0x406c3f\n    int64_t v3 = 0; // 0x406c3f\n    int64_t v4 = 0; // 0x406c3f\n    int64_t v5 = 0; // 0x406c3f\n    int64_t v6 = 0; // 0x406c3f\n    int64_t v7; // 0x406c30\n    int64_t v8; // 0x406c30\n    int64_t v9; // 0x406c30\n    if (v1 > a1) {\n        while (true) {\n          lab_0x406c51_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x406c48;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x406c57\n                int64_t v13 = v10 + 1; // 0x406c5b\n                int64_t v14 = v11 + 1; // 0x406c5f\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x406c66\n                int64_t v16 = v14; // 0x406c66\n                if (v12 == 0) {\n                    goto lab_0x406c48;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x406c70\n                    int64_t v18 = v16 + 1; // 0x406c74\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x406c70\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x406c7d\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x406c86\n                        break;\n                    }\n                    goto lab_0x406c51_2;\n                }\n            }\n        }\n    }\n  lab_0x406c86:\n    // 0x406c86\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x406c8f\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x406c8e\n    return 0;\n  lab_0x406c48:;\n    int64_t v20 = v8 + 16; // 0x406c48\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x406c86\n        goto lab_0x406c86;\n    }\n    goto lab_0x406c51_2;\n    // 0x406c51\n    goto lab_0x406c51_2;\n}\n"
        },
        {
            "funcName": "function_406ca0",
            "funcStartAddr": "406ca0",
            "funcEndAddr": "406de8",
            "decompiledFuncCode": "int64_t function_406ca0(uint64_t a1, int64_t a2) {\n    // 0x406ca0\n    int128_t v1; // 0x406ca0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x406cb3\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x406cb7\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x406cbe\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x406cd0\n            while (*(int64_t *)v7 == 0) {\n                // 0x406cd0\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x406d0d\n                    goto lab_0x406d0d;\n                }\n            }\n        }\n    }\n  lab_0x406d0d:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x406d1c\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x406ca0\n    int128_t v10; // 0x406ca0\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x406db3\n        int128_t v12 = __asm_mulsd_6(__asm_addsd(v11, v11), 0x4059000000000000); // 0x406dbc\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x406d53;\n        } else {\n            goto lab_0x406dc9;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd_6(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x406d46\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x406dc9;\n        } else {\n            goto lab_0x406d53;\n        }\n    }\n  lab_0x406d53:\n    // 0x406d53\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x406d57\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x406d57\n    goto lab_0x406d5c;\n  lab_0x406dc9:\n    // 0x406dc9\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x406dda\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x406d5c;\n  lab_0x406d5c:\n    // 0x406d5c\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_406df0",
            "funcStartAddr": "406df0",
            "funcEndAddr": "406e43",
            "decompiledFuncCode": "int64_t function_406df0(char a1, int64_t result) {\n    int64_t v1 = function_406890((int64_t)a1, result); // 0x406dfa\n    int64_t v2 = *(int64_t *)v1; // 0x406dff\n    if (v2 == 0) {\n        // 0x406e2d\n        return 0;\n    }\n    // 0x406e13\n    if (v2 == result) {\n        // 0x406e2d\n        return result;\n    }\n    int64_t v3 = v1; // 0x406e24\n    int64_t result2 = v2; // 0x406e22\n    while ((char)v1 == 0) {\n        // 0x406e24\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x406e2d\n            break;\n        }\n        // 0x406e10\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x406e2d\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x406e2d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406e50",
            "funcStartAddr": "406e50",
            "funcEndAddr": "406e98",
            "decompiledFuncCode": "int64_t function_406e50(uint64_t a1) {\n    int64_t result = 0; // 0x406e55\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x406e67\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x406e5e\n    if (v1 <= a1) {\n        // 0x406e67\n        return result;\n    }\n    int64_t v2 = a1; // 0x406e65\n    int64_t v3 = *(int64_t *)v2; // 0x406e79\n    result = v3;\n    while (v3 == 0) {\n        // 0x406e70\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x406e67\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x406e67\n    return result;\n}\n"
        },
        {
            "funcName": "function_406ea0",
            "funcStartAddr": "406ea0",
            "funcEndAddr": "406f0a",
            "decompiledFuncCode": "int64_t function_406ea0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_406890(a1, a2); // 0x406eac\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x406ec8\n    while (*(int64_t *)v2 != a2) {\n        // 0x406ec0\n        if (v3 == 0) {\n            goto lab_0x406ed6;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x406f00\n        return *(int64_t *)v3;\n    }\n  lab_0x406ed6:;\n    int64_t v4 = v1 + 16; // 0x406ee8\n    int64_t result = 0; // 0x406eef\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x406ee0\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x406ef3\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x406ef3\n    return result;\n}\n"
        },
        {
            "funcName": "function_406f10",
            "funcStartAddr": "406f10",
            "funcEndAddr": "406f74",
            "decompiledFuncCode": "int64_t function_406f10(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x406f16\n    int64_t result = 0; // 0x406f1a\n    if (*v1 <= a1) {\n      lab_0x406f31:\n        // 0x406f31\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x406f1f\n    int64_t v4 = v2; // 0x406f25\n    int64_t v5; // 0x406f10\n    int64_t v6; // 0x406f10\n    int64_t v7; // 0x406f58\n    int64_t v8; // 0x406f61\n    int64_t v9; // 0x406f41\n    int64_t v10; // 0x406f45\n    if (v3 != 0) {\n        // 0x406f38\n        if (v2 >= a3) {\n            // break -> 0x406f31\n            break;\n        }\n        // 0x406f3d\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x406f55\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x406f50\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x406f55\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x406f27\n    result = v11;\n    while (*v1 > v12) {\n        // 0x406f1f\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x406f38\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x406f31\n                break;\n            }\n            // 0x406f3d\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x406f55\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x406f50\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x406f55\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x406f27\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x406f31\n    return result;\n}\n"
        },
        {
            "funcName": "function_406f80",
            "funcStartAddr": "406f80",
            "funcEndAddr": "406ff8",
            "decompiledFuncCode": "int64_t function_406f80(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x406f91\n    int64_t result = 0; // 0x406f95\n    if (v1 <= a1) {\n      lab_0x406fb4:\n        // 0x406fb4\n        return result;\n    }\n    int64_t v2 = a1; // 0x406faa\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x406fa8\n    int64_t v5 = v2; // 0x406fa8\n    int64_t v6 = v3; // 0x406fa8\n    int64_t v7; // 0x406f80\n    int64_t v8; // 0x406fd8\n    int64_t v9; // 0x406fdc\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x406fd8\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x406fe8\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x406fd8\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x406fa2\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x406fd8\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x406fe8\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x406fd8\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x406faa\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x406fb4\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407000",
            "funcStartAddr": "407000",
            "funcEndAddr": "407031",
            "decompiledFuncCode": "int64_t function_407000(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x407007\n    if (v1 == 0) {\n        // 0x40702d\n        return 0;\n    }\n    int64_t result = 0; // 0x407007\n    v2++;\n    char v3 = *(char *)v2; // 0x407023\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x40702d\n    return result;\n}\n"
        },
        {
            "funcName": "function_407040",
            "funcStartAddr": "407040",
            "funcEndAddr": "407060",
            "decompiledFuncCode": "int64_t function_407040(int64_t a1) {\n    // 0x407040\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_407060",
            "funcStartAddr": "407060",
            "funcEndAddr": "4071ea",
            "decompiledFuncCode": "int64_t function_407060(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int32_t a5) {\n    // 0x407060\n    int128_t v1; // 0x407060\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x40709a\n    int64_t result = (int64_t)mem; // 0x40709a\n    if (mem == NULL) {\n        // 0x40714a\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x4070ab\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x407060\n    int128_t v6; // 0x407060\n    if (a2 == 0) {\n        // 0x407160\n        *v4 = (int64_t)&g8;\n        int64_t v7 = function_4069e0(v3); // 0x407168\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x40716d\n        if ((char)v7 == 0) {\n            // 0x407140\n            free(mem);\n            // 0x40714a\n            return 0;\n        }\n        // 0x407179\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x4071c3;\n        } else {\n            goto lab_0x40717e;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_4069e0(v3) == 0) {\n            // 0x407140\n            free(mem);\n            // 0x40714a\n            return 0;\n        }\n        // 0x4070c5\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_4067d0(a1); // 0x4070d3\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x407140\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x407140\n                free(mem);\n                // 0x40714a\n                return 0;\n            }\n            // 0x4070f1\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x407140\n                free(mem);\n                // 0x40714a\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x407102\n            int64_t v10 = (int64_t)mem2; // 0x407102\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x407140\n                free(mem);\n                // 0x40714a\n                return 0;\n            }\n            // 0x40710f\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x406870 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x406880 : a4;\n            *(int64_t *)(result + 64) = (int64_t)a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x40714a\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x4071b8\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x40717e;\n        } else {\n            goto lab_0x4071c3;\n        }\n    }\n  lab_0x4071c3:\n    // 0x4071c3\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x4071d3\n    int128_t v13 = v6; // 0x4071dc\n    int128_t v14 = __asm_addss(v12, v12); // 0x4071dc\n    goto lab_0x407187;\n  lab_0x40717e:\n    // 0x40717e\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x407187;\n  lab_0x407187:\n    // 0x407187\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x407140\n    free(mem);\n    // 0x40714a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4071f0",
            "funcStartAddr": "4071f0",
            "funcEndAddr": "407298",
            "decompiledFuncCode": "int64_t function_4071f0(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x4071fa\n    uint64_t v2 = *v1; // 0x4071fa\n    int64_t result; // 0x4071f0\n    if (v2 <= a1) {\n      lab_0x407283:\n        // 0x407283\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x407208\n    while (*v6 == 0) {\n        // 0x407208\n        v7 = v5 + 16;\n        int64_t v8; // 0x4071f0\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x407283\n            goto lab_0x407283;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x407219\n    int64_t v10 = *v9; // 0x407219\n    int64_t v11 = *v3; // 0x40721e\n    int64_t v12 = v11; // 0x407225\n    int64_t v13 = v10; // 0x407225\n    int64_t result2 = v11; // 0x407225\n    int64_t * v14; // 0x40723e\n    int64_t v15; // 0x40723e\n    int64_t v16; // 0x40723a\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x407235\n            v16 = *v3;\n        }\n        // 0x40723e\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x407230\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x407235\n                v16 = *v3;\n            }\n            // 0x40723e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40725d\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x407270\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x40727d\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40720c\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x407208\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x407283\n                goto lab_0x407283;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x407219\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x407235\n                v16 = *v3;\n            }\n            // 0x40723e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x407230\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x407235\n                    v16 = *v3;\n                }\n                // 0x40723e\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40725d\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x407283\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4072a0",
            "funcStartAddr": "4072a0",
            "funcEndAddr": "407376",
            "decompiledFuncCode": "int64_t function_4072a0(char a1) {\n    int64_t v1 = a1;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x4072af\n    uint64_t v3 = *v2; // 0x4072af\n    int64_t v4 = v1; // 0x4072b3\n    if (*(int64_t *)(v1 + 64) == 0) {\n        goto lab_0x407303;\n    } else {\n        // 0x4072b5\n        v4 = v1;\n        if (*(int64_t *)(v1 + 32) == 0) {\n            goto lab_0x407303;\n        } else {\n            // 0x4072bc\n            if (v3 > v1) {\n                int64_t v5 = v1;\n                int64_t v6 = *(int64_t *)v5; // 0x4072d1\n                int64_t v7; // 0x4072c8\n                while (v6 == 0) {\n                    // 0x4072c8\n                    v7 = v5 + 16;\n                    v4 = 0;\n                    if (v3 <= v7) {\n                        // break (via goto) -> 0x407303\n                        goto lab_0x407303;\n                    }\n                    v5 = v7;\n                    v6 = *(int64_t *)v5;\n                }\n                int64_t v8 = *(int64_t *)(v5 + 8); // 0x4072e8\n                int64_t v9 = v8; // 0x4072ef\n                int64_t v10 = v6; // 0x4072ef\n                int64_t v11; // 0x4072a0\n                int64_t v12; // 0x4072e8\n                if (v8 != 0) {\n                    v11 = v9;\n                    v12 = *(int64_t *)(v11 + 8);\n                    while (v12 != 0) {\n                        // 0x4072e0\n                        v11 = v12;\n                        v12 = *(int64_t *)(v11 + 8);\n                    }\n                    // 0x4072e3\n                    v10 = *(int64_t *)v11;\n                }\n                int64_t v13 = v5 + 16; // 0x4072f6\n                v4 = v10;\n                while (v3 > v13) {\n                    // 0x4072d1\n                    v5 = v13;\n                    v6 = *(int64_t *)v5;\n                    while (v6 == 0) {\n                        // 0x4072c8\n                        v7 = v5 + 16;\n                        v4 = 0;\n                        if (v3 <= v7) {\n                            // break (via goto) -> 0x407303\n                            goto lab_0x407303;\n                        }\n                        v5 = v7;\n                        v6 = *(int64_t *)v5;\n                    }\n                    // 0x4072e3\n                    v8 = *(int64_t *)(v5 + 8);\n                    v9 = v8;\n                    v10 = v6;\n                    if (v8 != 0) {\n                        v11 = v9;\n                        v12 = *(int64_t *)(v11 + 8);\n                        while (v12 != 0) {\n                            // 0x4072e0\n                            v11 = v12;\n                            v12 = *(int64_t *)(v11 + 8);\n                        }\n                        // 0x4072e3\n                        v10 = *(int64_t *)v11;\n                    }\n                    // 0x4072f1\n                    v13 = v5 + 16;\n                    v4 = v10;\n                }\n                goto lab_0x407303;\n            } else {\n                goto lab_0x40733c;\n            }\n        }\n    }\n  lab_0x407303:\n    // 0x407303\n    if (v4 < v3) {\n        int64_t v14 = *(int64_t *)(v4 + 8); // 0x407310\n        int64_t v15 = v14; // 0x407317\n        int64_t v16 = v3; // 0x407317\n        int64_t v17; // 0x407320\n        if (v14 != 0) {\n            v17 = *(int64_t *)(v15 + 8);\n            free((int64_t *)v15);\n            v15 = v17;\n            while (v17 != 0) {\n                // 0x407320\n                v17 = *(int64_t *)(v15 + 8);\n                free((int64_t *)v15);\n                v15 = v17;\n            }\n            // 0x407331\n            v16 = *v2;\n        }\n        int64_t v18 = v4 + 16; // 0x407331\n        int64_t v19 = v16; // 0x40733a\n        int64_t v20 = v18; // 0x40733a\n        while (v16 > v18) {\n            // 0x407310\n            v14 = *(int64_t *)(v20 + 8);\n            v15 = v14;\n            v16 = v19;\n            if (v14 != 0) {\n                v17 = *(int64_t *)(v15 + 8);\n                free((int64_t *)v15);\n                v15 = v17;\n                while (v17 != 0) {\n                    // 0x407320\n                    v17 = *(int64_t *)(v15 + 8);\n                    free((int64_t *)v15);\n                    v15 = v17;\n                }\n                // 0x407331\n                v16 = *v2;\n            }\n            // 0x407331\n            v18 = v20 + 16;\n            v19 = v16;\n            v20 = v18;\n        }\n    }\n    goto lab_0x40733c;\n  lab_0x40733c:;\n    int64_t v21 = *(int64_t *)(v1 + 72); // 0x40733c\n    if (v21 == 0) {\n        // 0x407361\n        free(NULL);\n        free((int64_t *)v1);\n        return &g73;\n    }\n    int64_t v22 = *(int64_t *)(v21 + 8); // 0x407350\n    free((int64_t *)v21);\n    int64_t v23 = v22; // 0x40735f\n    while (v22 != 0) {\n        // 0x407350\n        v22 = *(int64_t *)(v23 + 8);\n        free((int64_t *)v23);\n        v23 = v22;\n    }\n    // 0x407361\n    free((int64_t *)v22);\n    free((int64_t *)v1);\n    return &g73;\n}\n"
        },
        {
            "funcName": "function_407380",
            "funcStartAddr": "407380",
            "funcEndAddr": "40757a",
            "decompiledFuncCode": "int64_t function_407380(int64_t a1, uint64_t a2) {\n    // 0x407380\n    int128_t v1; // 0x407380\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x40738b\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x407380\n        if (a2 < 0) {\n            // 0x407500\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x407510\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x4073a0\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x4073a9\n        __asm_comiss(__asm_divss_5(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x4074f2\n        return 0;\n    }\n    uint64_t nmemb = function_4067d0(a2); // 0x4073e3\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x4074f2\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40741b\n    if (*v6 == nmemb) {\n        // 0x4074f2\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40742d\n    int64_t v7 = (int64_t)mem; // 0x40742d\n    int64_t v8 = v7; // bp-104, 0x407432\n    if (mem == NULL) {\n        // 0x4074f2\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x40748a\n    int64_t v10 = *v9; // 0x40748a\n    int64_t v11 = function_406a60(&v8, a1, 0); // 0x407493\n    int64_t result = v11 & 0xffffffff; // 0x407498\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x407454\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x4074b6\n        function_406a60(v13, v12, 1);\n        function_406a60(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x407540\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x4074f2\n    return result;\n}\n"
        },
        {
            "funcName": "function_407580",
            "funcStartAddr": "407580",
            "funcEndAddr": "4077f4",
            "decompiledFuncCode": "int64_t function_407580(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x407580\n    int128_t v1; // 0x407580\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x407580\n    int64_t v5 = function_4068c0(a1, a2, &v4, 0); // 0x4075a1\n    if (v5 != 0) {\n        // 0x4075ae\n        if (a3 != NULL) {\n            // 0x4075b5\n            *a3 = v5;\n        }\n        // 0x4075b9\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x4075c8\n    uint64_t v7 = *v6; // 0x4075c8\n    int64_t v8; // 0x407580\n    int64_t v9; // 0x407580\n    int64_t v10; // 0x407580\n    int128_t v11; // 0x407580\n    int128_t v12; // 0x407580\n    int64_t v13; // 0x407580\n    if (v7 < 0) {\n        // 0x407650\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x407660\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x407664\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x407669\n        int128_t v17 = __asm_addss(v15, v15); // 0x40766d\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x4075eb;\n        } else {\n            goto lab_0x40767a;\n        }\n    } else {\n        // 0x4075d1\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x4075d5\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x4075d9\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x4075de\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x40767a;\n        } else {\n            goto lab_0x4075eb;\n        }\n    }\n  lab_0x4075eb:\n    // 0x4075eb\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x4075f4\n    __asm_comiss_2(v11, v21);\n    int128_t v22 = v21; // 0x4075fc\n    int128_t v23 = v11; // 0x4075fc\n    if (v13 == 0) {\n        goto lab_0x407602;\n    } else {\n        goto lab_0x4076a1;\n    }\n  lab_0x40767a:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x407687\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x40768a\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x407693\n    __asm_comiss_2(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x407602;\n    } else {\n        goto lab_0x4076a1;\n    }\n  lab_0x407602:;\n    int64_t * v28 = (int64_t *)v4; // 0x407607\n    if (*v28 == 0) {\n        // 0x407718\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x407721\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x407612\n    int64_t v31 = *v30; // 0x407612\n    int64_t * v32; // 0x407580\n    int64_t v33; // 0x407580\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x40773d\n        if (mem == NULL) {\n            // 0x4075b9\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x40773d\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x407627\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x40763d\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x4076a1:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x4076a1\n    function_4069e0(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x4076aa\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x4076ae\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x4076b2\n    int128_t v44; // 0x407580\n    if (v42 < 0) {\n        // 0x407770\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x407780\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x4076c0\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x4076c9\n    int128_t v47; // 0x407580\n    int64_t v48; // 0x407580\n    if (v46 < 0) {\n        // 0x407750\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x40775d\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x407760\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x4076d2\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x4076d6\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x4076db\n    __asm_comiss_2(v47, __asm_mulss_4(__asm_movaps(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x4076eb\n        int128_t v53 = v52; // 0x4076f4\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x407790\n            v53 = __asm_mulss_4(v52, v43);\n        }\n        // 0x4076fa\n        __asm_comiss(v53, 0x5f800000);\n        // 0x4075b9\n        return 0xffffffff;\n    }\n    goto lab_0x407602;\n}\n"
        },
        {
            "funcName": "function_407800",
            "funcStartAddr": "407800",
            "funcEndAddr": "40783b",
            "decompiledFuncCode": "int64_t function_407800(char a1, int64_t a2) {\n    // 0x407800\n    int64_t v1; // bp-16, 0x407800\n    int64_t v2; // 0x407800\n    int32_t v3 = function_407580((int64_t)a1, a2, &v1, v2); // 0x407812\n    if (v3 == -1) {\n        // 0x407820\n        return 0;\n    }\n    // 0x407817\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_407840",
            "funcStartAddr": "407840",
            "funcEndAddr": "407a17",
            "decompiledFuncCode": "int64_t function_407840(char a1) {\n    // 0x407840\n    int128_t v1; // 0x407840\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4 = a1;\n    int64_t v5; // bp-32, 0x407840\n    int64_t v6; // 0x407840\n    int64_t result = function_4068c0(v4, v6, &v5, 1); // 0x407855\n    if (result == 0) {\n        // 0x407872\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(v4 + 32); // 0x407867\n    *v7 = *v7 - 1;\n    if (*(int64_t *)v5 != 0) {\n        // 0x407872\n        return result;\n    }\n    int64_t * v8 = (int64_t *)(v4 + 24); // 0x407880\n    uint64_t v9 = *v8 - 1; // 0x407884\n    *v8 = v9;\n    int64_t v10; // 0x407840\n    int64_t v11; // 0x407840\n    int64_t v12; // 0x407840\n    int128_t v13; // 0x407840\n    int128_t v14; // 0x407840\n    int64_t v15; // 0x407840\n    if (v9 < 0) {\n        // 0x407970\n        __asm_pxor(v3, v3);\n        int64_t v16 = *(int64_t *)(v4 + 16); // 0x407980\n        int128_t v17 = __asm_cvtsi2ss(v9 / 2 | v9 % 2); // 0x407984\n        int64_t v18 = *(int64_t *)(v4 + 40); // 0x407989\n        int128_t v19 = __asm_addss(v17, v17); // 0x40798d\n        v15 = v16;\n        v13 = v19;\n        v11 = v18;\n        v14 = v19;\n        v10 = v16;\n        v12 = v18;\n        if (v16 >= 0) {\n            goto lab_0x4078ac;\n        } else {\n            goto lab_0x40799a;\n        }\n    } else {\n        // 0x407892\n        __asm_pxor(v3, v3);\n        int64_t v20 = *(int64_t *)(v4 + 40); // 0x407896\n        int128_t v21 = __asm_cvtsi2ss(v9); // 0x40789a\n        int64_t v22 = *(int64_t *)(v4 + 16); // 0x40789f\n        v15 = v22;\n        v13 = v21;\n        v11 = v20;\n        v14 = v21;\n        v10 = v22;\n        v12 = v20;\n        if (v22 < 0) {\n            goto lab_0x40799a;\n        } else {\n            goto lab_0x4078ac;\n        }\n    }\n  lab_0x4078ac:\n    // 0x4078ac\n    __asm_pxor(v2, v2);\n    int128_t v23 = __asm_cvtsi2ss(v15); // 0x4078b0\n    int64_t v24 = v15; // 0x4078b0\n    int128_t v25 = v13; // 0x4078b0\n    int64_t v26 = v11; // 0x4078b0\n    int128_t v27 = v23; // 0x4078b0\n    goto lab_0x4078b5;\n  lab_0x40799a:;\n    uint64_t v48 = v10;\n    __asm_pxor(v2, v2);\n    int64_t v49 = v48 / 2 | v48 % 2; // 0x4079a7\n    int128_t v50 = __asm_cvtsi2ss(v49); // 0x4079aa\n    v24 = v49;\n    v25 = v14;\n    v26 = v12;\n    v27 = __asm_addss(v50, v50);\n    goto lab_0x4078b5;\n  lab_0x4078b5:;\n    int128_t v28 = v25;\n    int128_t v29 = __asm_mulss(v27, *(int32_t *)v26); // 0x4078b5\n    __asm_comiss_2(v29, v28);\n    if (v24 == 0) {\n        // 0x407872\n        return result;\n    }\n    int64_t v30 = v4 + 40; // 0x4078be\n    function_4069e0(v30);\n    uint64_t v31 = *(int64_t *)(v4 + 16); // 0x4078c7\n    int64_t v32 = *(int64_t *)v30; // 0x4078cb\n    int128_t v33; // 0x407840\n    if (v31 < 0) {\n        // 0x4079e0\n        __asm_pxor(v28, v28);\n        int128_t v34 = __asm_cvtsi2ss(v31 / 2 | v31 % 2); // 0x4079f0\n        v33 = __asm_addss(v34, v34);\n    } else {\n        // 0x4078d8\n        __asm_pxor(v28, v28);\n        v33 = __asm_cvtsi2ss(v31);\n    }\n    uint64_t v35 = *v8; // 0x4078e1\n    int128_t v36; // 0x407840\n    int64_t v37; // 0x407840\n    if (v35 < 0) {\n        // 0x4079c0\n        __asm_pxor(v29, v29);\n        int64_t v38 = v35 / 2 | v35 % 2; // 0x4079cd\n        int128_t v39 = __asm_cvtsi2ss(v38); // 0x4079d0\n        v37 = v38;\n        v36 = __asm_addss(v39, v39);\n    } else {\n        // 0x4078ee\n        __asm_pxor(v29, v29);\n        int128_t v40 = __asm_cvtsi2ss(v35); // 0x4078f2\n        v37 = v35;\n        v36 = v40;\n    }\n    // 0x4078f7\n    __asm_comiss_2(__asm_mulss_4(__asm_movss(*(int32_t *)v32), v33), v36);\n    if (v37 == 0) {\n        // 0x407872\n        return result;\n    }\n    int128_t v41 = __asm_mulss(v33, *(int32_t *)(v32 + 4)); // 0x407908\n    int128_t v42 = v41; // 0x407911\n    if (*(char *)(v32 + 16) == 0) {\n        // 0x407913\n        v42 = __asm_mulss(v41, *(int32_t *)(v32 + 8));\n    }\n    // 0x407918\n    __asm_comiss(v42, 0x5f000000);\n    int64_t v43 = __asm_cvttss2si(__asm_subss(v42, 0x5f000000)); // 0x407a08\n    if ((char)function_407380(v4, v43 ^ -0x8000000000000000) != 0) {\n        // 0x407872\n        return result;\n    }\n    int64_t * v44 = (int64_t *)(v4 + 72); // 0x40793a\n    if (*v44 != 0) {\n        int64_t v45; // 0x407840\n        free((int64_t *)v45);\n        while (*(int64_t *)(v45 + 8) != 0) {\n            int64_t v46 = v45;\n            int64_t v47 = *(int64_t *)(v46 + 8); // 0x407948\n            free((int64_t *)v46);\n            v45 = v47;\n        }\n    }\n    // 0x407959\n    *v44 = 0;\n    // 0x407872\n    return result;\n}\n"
        },
        {
            "funcName": "function_407a20",
            "funcStartAddr": "407a20",
            "funcEndAddr": "407abc",
            "decompiledFuncCode": "int64_t function_407a20(int64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x407a20\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x407a45\n    if (a1 >= 0) {\n        result--;\n        *(char *)result = (char)a1 + 48;\n        // 0x407a76\n        return result;\n    }\n    int64_t v2 = v1;\n    int64_t v3 = a1 / 0x8000000000000000; // 0x407a98\n    int64_t v4 = v2 - 1; // 0x407aa8\n    *(char *)v4 = 48 - (char)a1 + 10 * (char)v3;\n    while (v3 != 0) {\n        uint64_t v5 = v3;\n        v2 = v4;\n        v3 = v5 / 0x8000000000000000;\n        v4 = v2 - 1;\n        *(char *)v4 = 48 - (char)v5 + 10 * (char)v3;\n    }\n    int64_t result2 = v2 - 2; // 0x407ab0\n    *(char *)result2 = 45;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407ac0",
            "funcStartAddr": "407ac0",
            "funcEndAddr": "407b32",
            "decompiledFuncCode": "int64_t function_407ac0(void) {\n    char * env_val = getenv(\"_POSIX2_VERSION\"); // 0x407acf\n    if (env_val == NULL || *env_val == 0) {\n        // 0x407ade\n        return 0x31069;\n    }\n    // 0x407af0\n    char * endptr; // bp-16, 0x407ac0\n    int32_t str_as_l = strtol(env_val, &endptr, 10); // 0x407afd\n    if (*endptr != 0) {\n        // 0x407ade\n        return 0x31069;\n    }\n    int64_t v1 = str_as_l; // 0x407afd\n    int64_t v2 = v1 - 0x7fffffff; // 0x407b14\n    return v2 == 0 | v2 < 0 != (0x7ffffffe - v1 & v1) < 0 ? v1 & 0xffffffff : 0x7fffffff;\n}\n"
        },
        {
            "funcName": "function_407b40",
            "funcStartAddr": "407b40",
            "funcEndAddr": "407bd9",
            "decompiledFuncCode": "int64_t function_407b40(int64_t str) {\n    // 0x407b40\n    if (str == 0) {\n        // 0x407bb9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g41);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x407b4e\n    int64_t result = (int64_t)found_char_pos; // 0x407b4e\n    if (found_char_pos == NULL) {\n        // 0x407ba9\n        g58 = str;\n        g40 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x407b58\n    if (v1 - str < 7) {\n        // 0x407ba9\n        g58 = str;\n        g40 = str;\n        return result;\n    }\n    // 0x407b68\n    bool v2; // 0x407b40\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x407b40\n    int64_t v5 = result - 6; // 0x407b40\n    int64_t v6 = 7; // 0x407b76\n    unsigned char v7 = *(char *)v5; // 0x407b76\n    char v8 = *(char *)v4; // 0x407b76\n    char v9 = v8; // 0x407b76\n    bool v10 = false; // 0x407b76\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x407b80\n    int64_t v13 = v1; // 0x407b80\n    int64_t v14 = 3; // 0x407b80\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x407ba9\n        g58 = str;\n        g40 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x407b92\n    char v16 = *(char *)v12; // 0x407b92\n    char v17 = v16; // 0x407b92\n    bool v18 = false; // 0x407b92\n    while (v15 == v16) {\n        // 0x407b82\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x407b9c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x407b9e\n        v20 = result + 4;\n        g38 = v20;\n    }\n    // 0x407ba9\n    g58 = v20;\n    g40 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407be0",
            "funcStartAddr": "407be0",
            "funcEndAddr": "407cd2",
            "decompiledFuncCode": "int64_t function_407be0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x407bf4\n    int64_t result = (int64_t)v1; // 0x407bf4\n    if (result != a1) {\n        // 0x407c01\n        return result;\n    }\n    int64_t v2 = function_40ba70(); // 0x407c10\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x407cc6\n    if (v3 == 85) {\n        // 0x407c20\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x407cb8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g14 : (int64_t)&g9;\n            return result2;\n        }\n        char v4 = *v1; // 0x407c4e\n        int64_t result3 = v4 != 96 ? (int64_t)&g10 : (int64_t)&g13; // 0x407c5b\n        // 0x407c01\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x407cb8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g14 : (int64_t)&g9;\n        return result2;\n    }\n    char v5 = *v1; // 0x407c9d\n    int64_t result4 = v5 != 96 ? (int64_t)&g11 : (int64_t)&g12; // 0x407caa\n    // 0x407c01\n    return result4;\n}\n"
        },
        {
            "funcName": "function_407ce0",
            "funcStartAddr": "407ce0",
            "funcEndAddr": "407d37",
            "decompiledFuncCode": "int64_t function_407ce0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x407ce0\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_407d37",
            "funcStartAddr": "407d37",
            "funcEndAddr": "408f01",
            "decompiledFuncCode": "int64_t function_407d37(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x407d81\n    int64_t v3 = 0; // 0x407d81\n    int64_t v4; // 0x407d37\n    int64_t v5; // 0x407d37\n    int64_t v6; // 0x407d37\n    int64_t v7; // 0x407d37\n    int64_t v8; // 0x407d37\n    int64_t v9; // 0x407d37\n    int64_t v10; // 0x407d37\n    int64_t v11; // 0x407d37\n    int64_t v12; // 0x407d37\n    int64_t v13; // 0x407d37\n    int64_t v14; // 0x407d37\n    int64_t v15; // 0x407d37\n    int64_t v16; // 0x407d37\n    int64_t v17; // 0x407d37\n    int64_t v18; // 0x407d37\n    int64_t result; // 0x407d37\n    int64_t v19; // 0x407d37\n    int32_t wc; // bp+132, 0x407d37\n    int64_t ps; // bp+136, 0x407d37\n    char v20; // 0x4082f0\n    int64_t v21; // 0x4082f0\n    int64_t v22; // 0x408698\n    int64_t v23; // 0x407d37\n    int64_t v24; // 0x4086b7\n    int32_t v25; // 0x407d37\n    while (true) {\n      lab_0x407d88_2:\n        // 0x407d88\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x407d37\n        int64_t v27; // 0x407dbc\n        while (true) {\n          lab_0x407d88:\n            // 0x407d88\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x407d93\n            if (v15 == -1) {\n                // 0x407d95\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x407da3\n            if (v28) {\n                // break (via goto) -> 0x408508\n                goto lab_0x408508;\n            }\n            // 0x407dac\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g72 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40839b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x407ee1;\n                    }\n                    // 0x4087bd\n                    v26 = v5 + 1;\n                    goto lab_0x407d88;\n                }\n                case 7: {\n                    goto lab_0x407ee1;\n                }\n                case 8: {\n                    goto lab_0x407ee1;\n                }\n                case 9: {\n                    goto lab_0x4080fa_2;\n                }\n                case 10: {\n                    goto lab_0x4080fa_2;\n                }\n                case 11: {\n                    goto lab_0x407ee1;\n                }\n                case 12: {\n                    goto lab_0x407ee1;\n                }\n                case 13: {\n                    goto lab_0x4080fa_2;\n                }\n                case 32: {\n                    goto lab_0x4080fa_2;\n                }\n                case 33: {\n                    goto lab_0x4080fa_2;\n                }\n                case 34: {\n                    goto lab_0x4080fa_2;\n                }\n                case 35: {\n                    goto lab_0x407ead;\n                }\n                case 36: {\n                    goto lab_0x4080fa_2;\n                }\n                case 37: {\n                    goto lab_0x407ee1;\n                }\n                case 38: {\n                    goto lab_0x4080fa_2;\n                }\n                case 39: {\n                    goto lab_0x4080fa_2;\n                }\n                case 40: {\n                    goto lab_0x4080fa_2;\n                }\n                case 41: {\n                    goto lab_0x4080fa_2;\n                }\n                case 42: {\n                    goto lab_0x4080fa_2;\n                }\n                case 43: {\n                    goto lab_0x407ee1;\n                }\n                case 44: {\n                    goto lab_0x407ee1;\n                }\n                case 45: {\n                    goto lab_0x407ee1;\n                }\n                case 46: {\n                    goto lab_0x407ee1;\n                }\n                case 47: {\n                    goto lab_0x407ee1;\n                }\n                case 48: {\n                    goto lab_0x407ee1;\n                }\n                case 49: {\n                    goto lab_0x407ee1;\n                }\n                case 50: {\n                    goto lab_0x407ee1;\n                }\n                case 51: {\n                    goto lab_0x407ee1;\n                }\n                case 52: {\n                    goto lab_0x407ee1;\n                }\n                case 53: {\n                    goto lab_0x407ee1;\n                }\n                case 54: {\n                    goto lab_0x407ee1;\n                }\n                case 55: {\n                    goto lab_0x407ee1;\n                }\n                case 56: {\n                    goto lab_0x407ee1;\n                }\n                case 57: {\n                    goto lab_0x407ee1;\n                }\n                case 58: {\n                    goto lab_0x407ee1;\n                }\n                case 59: {\n                    goto lab_0x4080fa_2;\n                }\n                case 60: {\n                    goto lab_0x4080fa_2;\n                }\n                case 61: {\n                    goto lab_0x4080fa_2;\n                }\n                case 62: {\n                    goto lab_0x4080fa_2;\n                }\n                case 63: {\n                    goto lab_0x4080fa_2;\n                }\n                case 65: {\n                    goto lab_0x407ee1;\n                }\n                case 66: {\n                    goto lab_0x407ee1;\n                }\n                case 67: {\n                    goto lab_0x407ee1;\n                }\n                case 68: {\n                    goto lab_0x407ee1;\n                }\n                case 69: {\n                    goto lab_0x407ee1;\n                }\n                case 70: {\n                    goto lab_0x407ee1;\n                }\n                case 71: {\n                    goto lab_0x407ee1;\n                }\n                case 72: {\n                    goto lab_0x407ee1;\n                }\n                case 73: {\n                    goto lab_0x407ee1;\n                }\n                case 74: {\n                    goto lab_0x407ee1;\n                }\n                case 75: {\n                    goto lab_0x407ee1;\n                }\n                case 76: {\n                    goto lab_0x407ee1;\n                }\n                case 77: {\n                    goto lab_0x407ee1;\n                }\n                case 78: {\n                    goto lab_0x407ee1;\n                }\n                case 79: {\n                    goto lab_0x407ee1;\n                }\n                case 80: {\n                    goto lab_0x407ee1;\n                }\n                case 81: {\n                    goto lab_0x407ee1;\n                }\n                case 82: {\n                    goto lab_0x407ee1;\n                }\n                case 83: {\n                    goto lab_0x407ee1;\n                }\n                case 84: {\n                    goto lab_0x407ee1;\n                }\n                case 85: {\n                    goto lab_0x407ee1;\n                }\n                case 86: {\n                    goto lab_0x407ee1;\n                }\n                case 87: {\n                    goto lab_0x407ee1;\n                }\n                case 88: {\n                    goto lab_0x407ee1;\n                }\n                case 89: {\n                    goto lab_0x407ee1;\n                }\n                case 90: {\n                    goto lab_0x407ee1;\n                }\n                case 91: {\n                    goto lab_0x4080fa_2;\n                }\n                case 92: {\n                    goto lab_0x4080fa_2;\n                }\n                case 93: {\n                    goto lab_0x407ee1;\n                }\n                case 94: {\n                    goto lab_0x4080fa_2;\n                }\n                case 95: {\n                    goto lab_0x407ee1;\n                }\n                case 96: {\n                    goto lab_0x4080fa_2;\n                }\n                case 97: {\n                    goto lab_0x407ee1;\n                }\n                case 98: {\n                    goto lab_0x407ee1;\n                }\n                case 99: {\n                    goto lab_0x407ee1;\n                }\n                case 100: {\n                    goto lab_0x407ee1;\n                }\n                case 101: {\n                    goto lab_0x407ee1;\n                }\n                case 102: {\n                    goto lab_0x407ee1;\n                }\n                case 103: {\n                    goto lab_0x407ee1;\n                }\n                case 104: {\n                    goto lab_0x407ee1;\n                }\n                case 105: {\n                    goto lab_0x407ee1;\n                }\n                case 106: {\n                    goto lab_0x407ee1;\n                }\n                case 107: {\n                    goto lab_0x407ee1;\n                }\n                case 108: {\n                    goto lab_0x407ee1;\n                }\n                case 109: {\n                    goto lab_0x407ee1;\n                }\n                case 110: {\n                    goto lab_0x407ee1;\n                }\n                case 111: {\n                    goto lab_0x407ee1;\n                }\n                case 112: {\n                    goto lab_0x407ee1;\n                }\n                case 113: {\n                    goto lab_0x407ee1;\n                }\n                case 114: {\n                    goto lab_0x407ee1;\n                }\n                case 115: {\n                    goto lab_0x407ee1;\n                }\n                case 116: {\n                    goto lab_0x407ee1;\n                }\n                case 117: {\n                    goto lab_0x407ee1;\n                }\n                case 118: {\n                    goto lab_0x407ee1;\n                }\n                case 119: {\n                    goto lab_0x407ee1;\n                }\n                case 120: {\n                    goto lab_0x407ee1;\n                }\n                case 121: {\n                    goto lab_0x407ee1;\n                }\n                case 122: {\n                    goto lab_0x407ee1;\n                }\n                case 123: {\n                    goto lab_0x407e85;\n                }\n                case 124: {\n                    goto lab_0x4080fa_2;\n                }\n                case 125: {\n                    goto lab_0x407e85;\n                }\n                case 126: {\n                    goto lab_0x407ead;\n                }\n                default: {\n                    goto lab_0x408285;\n                }\n            }\n        }\n      lab_0x408285:\n        if (v23 != 1) {\n            // 0x4085f0\n            ps = 0;\n            int64_t len = v15; // 0x408600\n            if (v15 == -1) {\n                // 0x408602\n                len = strlen((char *)str);\n            }\n            // 0x40862e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x40868f:\n                // 0x40868f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x408694\n                int64_t v30 = v29 + str;\n                v24 = function_40b6b0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x408c0a_2;\n                    }\n                    case -1: {\n                        goto lab_0x408c0a_2;\n                    }\n                    case -2: {\n                        // 0x408ced\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x408d27\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x408d2a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x408d37\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x408d30\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x408c0a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x408c0a_2;\n                    }\n                    case 1: {\n                        goto lab_0x408660;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x40870c\n                        char v34 = *(char *)v33; // 0x40871d\n                        unsigned char v35; // 0x407d37\n                        if (v34 < 125) {\n                            // 0x408728\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40873f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                goto lab_0x4080fa_2;\n                            }\n                        }\n                        // 0x408710\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x40871d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x408728\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40873f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    goto lab_0x4080fa_2;\n                                }\n                            }\n                            // 0x408710\n                            v33++;\n                        }\n                        goto lab_0x408660;\n                    }\n                }\n            }\n            goto lab_0x408c0a_2;\n        } else {\n            // 0x4082d4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x407ee1;\n        }\n    }\n  lab_0x408508:\n    // 0x408508\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x408e0a\n        if (v8 > result) {\n            // 0x408e13\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x408137\n        return result;\n    }\n    goto lab_0x4080fa_2;\n  lab_0x407ee1:;\n    int64_t v56 = v13;\n    int64_t v57 = v9;\n    int64_t v58 = v16;\n    if (v23 != 0) {\n        // 0x407ef0\n        v4 = v58;\n        v6 = v57;\n        v10 = v56;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4080fa_2;\n        }\n    }\n    int64_t v42 = result; // 0x407ff1\n    char v43 = v20; // 0x407ff1\n    int64_t v44 = v58; // 0x407ff1\n    v3 = v5 + 1;\n    int64_t v45 = v57; // 0x407ff1\n    int64_t v46 = v56; // 0x407ff1\n    goto lab_0x407f6d;\n  lab_0x4080fa_2:;\n    // 0x408137\n    char * v36; // 0x407d37\n    return function_407ce0(v10, v6, str, v4, 2, v25 & -3, 0, (int64_t)v36, (int64_t)v36);\n  lab_0x408c0a_2:;\n    uint64_t v37 = v19;\n    int64_t v38 = 0x100000000 * v8 >> 32;\n    int64_t v39 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v38;\n    v13 = v39;\n    if (v37 < 2) {\n        goto lab_0x407ee1;\n    } else {\n        uint64_t v40 = v37 + v5; // 0x4087de\n        int64_t v41 = v5 + 1; // 0x4088c1\n        v42 = result;\n        v43 = v20;\n        v44 = v22;\n        v3 = v41;\n        v45 = v38;\n        v46 = v39;\n        int64_t v47 = v41; // 0x4088c8\n        char v48 = v20; // 0x4088c8\n        int64_t v49 = result; // 0x4088c8\n        if (v41 < v40) {\n            uint64_t v50 = v49;\n            if (v38 > v50) {\n                // 0x408891\n                *(char *)(v50 + v39) = v48;\n            }\n            char v51 = *(char *)(v47 + str); // 0x408895\n            int64_t v52 = v50 + 1; // 0x40889a\n            int64_t v53 = v47 + 1; // 0x4088c1\n            v42 = v52;\n            v43 = v51;\n            v44 = v22;\n            v3 = v53;\n            v45 = v38;\n            v46 = v39;\n            v47 = v53;\n            while (v53 < v40) {\n                // 0x40888c\n                v50 = v52;\n                if (v38 > v50) {\n                    // 0x408891\n                    *(char *)(v50 + v39) = v51;\n                }\n                // 0x408895\n                v51 = *(char *)(v47 + str);\n                v52 = v50 + 1;\n                v53 = v47 + 1;\n                v42 = v52;\n                v43 = v51;\n                v44 = v22;\n                v3 = v53;\n                v45 = v38;\n                v46 = v39;\n                v47 = v53;\n            }\n        }\n        goto lab_0x407f6d;\n    }\n  lab_0x408660:\n    // 0x408660\n    iswprint(wc);\n    int64_t v54 = v24 + v18; // 0x40867f\n    int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x408682\n    v17 = v54;\n    v19 = v54;\n    if (v55 != 0) {\n        // break -> 0x408c0a\n        goto lab_0x408c0a_2;\n    }\n    goto lab_0x40868f;\n  lab_0x407ead:\n    // 0x407ead\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4080fa_2;\n    }\n    goto lab_0x407ee1;\n  lab_0x407e85:;\n    bool v61 = v15 == 1; // 0x407e90\n    if (v15 == -1) {\n        // 0x407e92\n        v61 = *(char *)v1 == 0;\n    }\n    // 0x407e9e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v61) {\n        goto lab_0x407ee1;\n    } else {\n        goto lab_0x407ead;\n    }\n  lab_0x407f6d:;\n    int64_t v59 = v46;\n    uint64_t v60 = v42;\n    if (v60 < v45) {\n        // 0x407f72\n        *(char *)(v59 + v60) = v43;\n    }\n    // 0x407f76\n    v2 = v60 + 1;\n    v14 = v44;\n    v7 = v45;\n    v11 = v59;\n    goto lab_0x407d88_2;\n}\n"
        },
        {
            "funcName": "function_408f10",
            "funcStartAddr": "408f10",
            "funcEndAddr": "4090ae",
            "decompiledFuncCode": "int64_t function_408f10(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x408f12\n    int32_t * v3 = __errno_location(); // 0x408f2c\n    int64_t v4 = (int64_t)g31; // 0x408f31\n    int32_t v5 = *v3; // 0x408f3b\n    int64_t v6 = v4; // 0x408f51\n    if (v2 >= (int64_t)*(int32_t *)&g34) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4090a9\n            function_40a020(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x408f60\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x408f67\n        int64_t v9; // 0x408f10\n        if (g31 == &g32) {\n            int64_t v10 = function_409e30(0, v8); // 0x40908a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g32); // 0x40908f\n            *(int64_t *)&g31 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_409e30(v4, v8); // 0x408f7b\n            *(int64_t *)&g31 = v12;\n            v9 = v12;\n        }\n        // 0x408f8a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g34; // 0x408f8a\n        int32_t v14 = v7; // 0x408f91\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g34 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x408fc1\n    int64_t v17 = v15 + 8; // 0x408fc4\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x408fcb\n    int64_t * v19 = (int64_t *)v16; // 0x408fce\n    uint64_t v20 = *v19; // 0x408fce\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x408fd1\n    int64_t result = *v21; // 0x408fd1\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x408fdc\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x408fe5\n    int64_t v24; // 0x408f10\n    uint64_t v25 = function_407ce0(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x408ff4\n    if (v20 > v25) {\n        // 0x40906b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x409007\n    *v19 = v26;\n    if (result != (int64_t)&g59) {\n        // 0x409017\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_409dd0(v26); // 0x409031\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x40904b\n    int64_t v28 = *v23; // 0x40904e\n    int64_t v29; // 0x408f10\n    function_407ce0(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x40906b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4090b0",
            "funcStartAddr": "4090b0",
            "funcEndAddr": "4090e4",
            "decompiledFuncCode": "int64_t function_4090b0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4090b7\n    int64_t result = function_409fd0(a1 == 0 ? (int64_t)&g60 : a1, 56); // 0x4090d6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4090f0",
            "funcStartAddr": "4090f0",
            "funcEndAddr": "4090ff",
            "decompiledFuncCode": "int64_t function_4090f0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g60 : a1); // 0x4090fc\n    return result;\n}\n"
        },
        {
            "funcName": "function_409100",
            "funcStartAddr": "409100",
            "funcEndAddr": "40910f",
            "decompiledFuncCode": "int64_t function_409100(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g60 : a1; // 0x409108\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g60;\n}\n"
        },
        {
            "funcName": "function_409110",
            "funcStartAddr": "409110",
            "funcEndAddr": "409143",
            "decompiledFuncCode": "int64_t function_409110(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g60 + 8 : a1 + 8; // 0x409129\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40912e\n    uint32_t v3 = *v2; // 0x40912e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x409132\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_409150",
            "funcStartAddr": "409150",
            "funcEndAddr": "409163",
            "decompiledFuncCode": "int64_t function_409150(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g60 + 4 : a1 + 4); // 0x40915c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_409170",
            "funcStartAddr": "409170",
            "funcEndAddr": "40919b",
            "decompiledFuncCode": "int64_t function_409170(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g60 : a1; // 0x409178\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x409195\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40918c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g60;\n}\n"
        },
        {
            "funcName": "function_4091a0",
            "funcStartAddr": "4091a0",
            "funcEndAddr": "409212",
            "decompiledFuncCode": "int64_t function_4091a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g60 : a5; // 0x4091c2\n    int32_t * v2 = __errno_location(); // 0x4091cb\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x4091e4\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x4091e8\n    uint32_t v5 = *(int32_t *)v1; // 0x4091eb\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x4091f1\n    int64_t result = function_407ce0(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x4091fa\n    return result;\n}\n"
        },
        {
            "funcName": "function_409220",
            "funcStartAddr": "409220",
            "funcEndAddr": "409301",
            "decompiledFuncCode": "int64_t function_409220(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g60 : a4; // 0x409242\n    int32_t * v2 = __errno_location(); // 0x409248\n    int64_t v3 = v1 + 8; // 0x40925f\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x409267\n    int32_t * v5 = (int32_t *)v1; // 0x40926a\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x409278\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x40927b\n    int64_t v8 = function_407ce0(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x409285\n    int64_t v9 = v8 + 1; // 0x40928a\n    int64_t result = function_409dd0(v9); // 0x40929f\n    function_407ce0(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x4092e4\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x4092ed\n    return result;\n}\n"
        },
        {
            "funcName": "function_409310",
            "funcStartAddr": "409310",
            "funcEndAddr": "40931a",
            "decompiledFuncCode": "int64_t function_409310(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409310\n    return function_409220(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_409320",
            "funcStartAddr": "409320",
            "funcEndAddr": "4093b5",
            "decompiledFuncCode": "int64_t function_409320(void) {\n    uint32_t v1 = *(int32_t *)&g34; // 0x409320\n    int64_t v2 = v1; // 0x409320\n    int64_t v3 = v2; // 0x409334\n    if (v1 >= 2) {\n        int64_t v4 = &g34;\n        int64_t v5 = v4 + 16; // 0x409353\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g73;\n        while (v5 != (int64_t)g31 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x409350\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g73;\n        }\n    }\n    int64_t v6 = v3; // 0x40936d\n    if (g32 != 0x6123c0) {\n        // 0x40936f\n        free((int64_t *)g32);\n        g32 = 256;\n        *(int64_t *)&g33 = (int64_t)&g59;\n        v6 = &g73;\n    }\n    int64_t result = v6; // 0x409391\n    if (g31 != &g32) {\n        // 0x409393\n        free(g31);\n        *(int64_t *)&g31 = (int64_t)&g32;\n        result = &g73;\n    }\n    // 0x4093a6\n    *(int32_t *)&g34 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4093c0",
            "funcStartAddr": "4093c0",
            "funcEndAddr": "4093d1",
            "decompiledFuncCode": "int64_t function_4093c0(void) {\n    // 0x4093c0\n    int64_t v1; // 0x4093c0\n    return function_408f10(v1, v1, -1, (int64_t *)&g60);\n}\n"
        },
        {
            "funcName": "function_4093e0",
            "funcStartAddr": "4093e0",
            "funcEndAddr": "4093ea",
            "decompiledFuncCode": "int64_t function_4093e0(void) {\n    // 0x4093e0\n    int64_t v1; // 0x4093e0\n    return function_408f10(v1, v1, v1, (int64_t *)&g60);\n}\n"
        },
        {
            "funcName": "function_4093f0",
            "funcStartAddr": "4093f0",
            "funcEndAddr": "409406",
            "decompiledFuncCode": "int64_t function_4093f0(int64_t a1) {\n    // 0x4093f0\n    return function_408f10(0, a1, -1, (int64_t *)&g60);\n}\n"
        },
        {
            "funcName": "function_409410",
            "funcStartAddr": "409410",
            "funcEndAddr": "409422",
            "decompiledFuncCode": "int64_t function_409410(int64_t a1, int64_t a2) {\n    // 0x409410\n    return function_408f10(0, a1, a2, (int64_t *)&g60);\n}\n"
        },
        {
            "funcName": "function_409430",
            "funcStartAddr": "409430",
            "funcEndAddr": "409498",
            "decompiledFuncCode": "int64_t function_409430(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x409440\n    return function_408f10((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4094a0",
            "funcStartAddr": "4094a0",
            "funcEndAddr": "409504",
            "decompiledFuncCode": "int64_t function_4094a0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4094b0\n    return function_408f10((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_409510",
            "funcStartAddr": "409510",
            "funcEndAddr": "40951c",
            "decompiledFuncCode": "int64_t function_409510(int64_t a1, int64_t a2) {\n    // 0x409510\n    return function_409430(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_409520",
            "funcStartAddr": "409520",
            "funcEndAddr": "40952f",
            "decompiledFuncCode": "int64_t function_409520(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409520\n    return function_4094a0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_409530",
            "funcStartAddr": "409530",
            "funcEndAddr": "4095a0",
            "decompiledFuncCode": "int64_t function_409530(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g60); // 0x40953d\n    int128_t v2 = __asm_movdqa(g61); // 0x409545\n    int128_t v3 = __asm_movdqa(g62); // 0x40954d\n    int64_t v4 = __asm_movaps_7(v1); // bp-72, 0x409562\n    __asm_movaps_7(v2);\n    __asm_movaps_7(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x409578\n    uint32_t v6 = *v5; // 0x409578\n    uint32_t v7 = (int32_t)a3 % 32; // 0x40957d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_408f10(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4095a0",
            "funcStartAddr": "4095a0",
            "funcEndAddr": "4095ad",
            "decompiledFuncCode": "int64_t function_4095a0(int64_t a1, int64_t a2) {\n    // 0x4095a0\n    return function_409530(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4095b0",
            "funcStartAddr": "4095b0",
            "funcEndAddr": "4095c1",
            "decompiledFuncCode": "int64_t function_4095b0(int64_t a1) {\n    // 0x4095b0\n    return function_409530(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_4095d0",
            "funcStartAddr": "4095d0",
            "funcEndAddr": "4095da",
            "decompiledFuncCode": "int64_t function_4095d0(void) {\n    // 0x4095d0\n    int64_t v1; // 0x4095d0\n    return function_409530(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_4095e0",
            "funcStartAddr": "4095e0",
            "funcEndAddr": "40964e",
            "decompiledFuncCode": "int64_t function_4095e0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4095fa\n    return function_408f10((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_409650",
            "funcStartAddr": "409650",
            "funcEndAddr": "4096bc",
            "decompiledFuncCode": "int64_t function_409650(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g60); // 0x409657\n    int128_t v2 = __asm_movdqa(g61); // 0x40965f\n    int128_t v3 = __asm_movdqa(g62); // 0x409667\n    __asm_movaps_7(v1);\n    __asm_movaps_7(v2);\n    __asm_movaps_7(v3);\n    int64_t v4 = 10; // bp-72, 0x409689\n    if (a2 == 0 || a3 == 0) {\n        // 0x4096b7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40969a\n    return function_408f10(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_4096c0",
            "funcStartAddr": "4096c0",
            "funcEndAddr": "4096c9",
            "decompiledFuncCode": "int64_t function_4096c0(void) {\n    // 0x4096c0\n    int64_t v1; // 0x4096c0\n    return function_409650(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_4096d0",
            "funcStartAddr": "4096d0",
            "funcEndAddr": "4096e7",
            "decompiledFuncCode": "int64_t function_4096d0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4096d0\n    return function_409650(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_4096f0",
            "funcStartAddr": "4096f0",
            "funcEndAddr": "409703",
            "decompiledFuncCode": "int64_t function_4096f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4096f0\n    return function_409650(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_409710",
            "funcStartAddr": "409710",
            "funcEndAddr": "40971a",
            "decompiledFuncCode": "int64_t function_409710(void) {\n    // 0x409710\n    int64_t v1; // 0x409710\n    return function_408f10(v1, v1, v1, &g30);\n}\n"
        },
        {
            "funcName": "function_409720",
            "funcStartAddr": "409720",
            "funcEndAddr": "409732",
            "decompiledFuncCode": "int64_t function_409720(int64_t a1, int64_t a2) {\n    // 0x409720\n    return function_408f10(0, a1, a2, &g30);\n}\n"
        },
        {
            "funcName": "function_409740",
            "funcStartAddr": "409740",
            "funcEndAddr": "409751",
            "decompiledFuncCode": "int64_t function_409740(int64_t a1, int64_t a2) {\n    // 0x409740\n    return function_408f10(a1, a2, -1, &g30);\n}\n"
        },
        {
            "funcName": "function_409760",
            "funcStartAddr": "409760",
            "funcEndAddr": "409776",
            "decompiledFuncCode": "int64_t function_409760(int64_t a1) {\n    // 0x409760\n    return function_408f10(0, a1, -1, &g30);\n}\n"
        },
        {
            "funcName": "function_409780",
            "funcStartAddr": "409780",
            "funcEndAddr": "4097de",
            "decompiledFuncCode": "int64_t function_409780(int32_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = read(fd, (int64_t *)buf, (int32_t)nbyte); // 0x4097a1\n    while (result < 0) {\n        // 0x4097ae\n        if (*__errno_location() != 4) {\n            // break -> 0x4097ba\n            break;\n        }\n        result = read(fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_4097e0",
            "funcStartAddr": "4097e0",
            "funcEndAddr": "40982e",
            "decompiledFuncCode": "int64_t function_4097e0(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x4097ec\n    if (fd >= 3) {\n        // 0x4097f1\n        return a1 & 0xffffffff;\n    }\n    // 0x409800\n    int64_t v1; // 0x4097e0\n    int64_t v2 = function_40bfe0(a1, v1); // 0x409800\n    int32_t * v3 = __errno_location(); // 0x409808\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_409830",
            "funcStartAddr": "409830",
            "funcEndAddr": "409c0d",
            "decompiledFuncCode": "int64_t function_409830(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4098c8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40984c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x409866\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4098ab\n    if (a6 < 10) {\n        // 0x4098ba\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4099b2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_409c10",
            "funcStartAddr": "409c10",
            "funcEndAddr": "409c30",
            "decompiledFuncCode": "int64_t function_409c10(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x409c10\n    if (a5 == 0) {\n        // 0x409c2b\n        return function_409830(a1, a2, a3, a4, a5, 0, (int64_t)&g73);\n    }\n    int64_t v1 = 0; // 0x409c17\n    v1++;\n    int64_t v2 = v1; // 0x409c29\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x409c20\n        v1++;\n        v2 = v1;\n    }\n    // 0x409c2b\n    return function_409830(a1, a2, a3, a4, a5, v2, (int64_t)&g73);\n}\n"
        },
        {
            "funcName": "function_409c30",
            "funcStartAddr": "409c30",
            "funcEndAddr": "409c90",
            "decompiledFuncCode": "int64_t function_409c30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x409c30\n    int64_t v3 = &v2; // 0x409c30\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x409c63\n    int64_t v6; // 0x409c4d\n    int64_t * v7; // 0x409c6b\n    int64_t v8; // 0x409c6b\n    int64_t v9; // 0x409c77\n    if (v5 < 48) {\n        // 0x409c40\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x409c83\n            break;\n        }\n    } else {\n        // 0x409c6b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x409c83\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x409c61\n    while (v4 != 9) {\n        // 0x409c59\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x409c40\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x409c83\n                break;\n            }\n        } else {\n            // 0x409c6b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x409c83\n                break;\n            }\n        }\n        // 0x409c59\n        v10 = 10;\n    }\n    // 0x409c83\n    return function_409830(a1, a2, a3, a4, v3, v10, (int64_t)&g73);\n}\n"
        },
        {
            "funcName": "function_409c90",
            "funcStartAddr": "409c90",
            "funcEndAddr": "409d4c",
            "decompiledFuncCode": "int64_t function_409c90(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x409c90\n    int64_t v1; // bp-168, 0x409c90\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x409c90\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x409c90\n    int64_t v8; // 0x409c90\n    int64_t v9; // bp-56, 0x409c90\n    int64_t v10; // 0x409cf5\n    int64_t v11; // 0x409d19\n    if ((int32_t)v6 < 48) {\n        // 0x409ce0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x409d30\n            break;\n        }\n    } else {\n        // 0x409d12\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x409d30\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x409d0a\n    int64_t v13 = 10; // 0x409d0a\n    while (v5 != 9) {\n        // 0x409d0c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x409ce0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x409d30\n                break;\n            }\n        } else {\n            // 0x409d12\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x409d30\n                break;\n            }\n        }\n        // 0x409d02\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x409d30\n    int64_t v14; // bp-136, 0x409c90\n    int64_t result = function_409830(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g73); // 0x409d3f\n    return result;\n}\n"
        },
        {
            "funcName": "function_409d50",
            "funcStartAddr": "409d50",
            "funcEndAddr": "409dc4",
            "decompiledFuncCode": "int64_t function_409d50(int64_t a1) {\n    // 0x409d50\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x409db3\n    return fputs_unlocked(v1, g39);\n}\n"
        },
        {
            "funcName": "function_409dd0",
            "funcStartAddr": "409dd0",
            "funcEndAddr": "409dea",
            "decompiledFuncCode": "int64_t function_409dd0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x409dd4\n    if (size != 0 != (mem == NULL)) {\n        // 0x409de3\n        return (int64_t)mem;\n    }\n    // 0x409de5\n    function_40a020(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409df0",
            "funcStartAddr": "409df0",
            "funcEndAddr": "409e11",
            "decompiledFuncCode": "int64_t function_409df0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x409df3\n    int64_t v2 = v1; // 0x409df3\n    if (v2 < 0) {\n        // 0x409e0b\n        function_40a020(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x409e09\n        return function_409dd0(v2);\n    }\n    // 0x409e0b\n    function_40a020(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409e20",
            "funcStartAddr": "409e20",
            "funcEndAddr": "409e22",
            "decompiledFuncCode": "int64_t function_409e20(void) {\n    // 0x409e20\n    int64_t v1; // 0x409e20\n    return function_409dd0(v1);\n}\n"
        },
        {
            "funcName": "function_409e30",
            "funcStartAddr": "409e30",
            "funcEndAddr": "409e66",
            "decompiledFuncCode": "int64_t function_409e30(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x409e58\n        free(v1);\n        return (int32_t)&g73 ^ (int32_t)&g73;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x409e41\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x409e50\n        return (int64_t)mem;\n    }\n    // 0x409e61\n    function_40a020(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409e70",
            "funcStartAddr": "409e70",
            "funcEndAddr": "409e91",
            "decompiledFuncCode": "int64_t function_409e70(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x409e73\n    int64_t v2 = v1; // 0x409e73\n    if (v2 < 0) {\n        // 0x409e8b\n        function_40a020(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x409e89\n        return function_409e30(a1, v2);\n    }\n    // 0x409e8b\n    function_40a020(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409ea0",
            "funcStartAddr": "409ea0",
            "funcEndAddr": "409f26",
            "decompiledFuncCode": "int64_t function_409ea0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x409efb\n            function_40a020(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_409e30(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x409ee3\n    if (a2 == 0) {\n        // 0x409f08\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x409ee8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x409efb\n        function_40a020(a1);\n        // UNREACHABLE\n    }\n    // 0x409eca\n    *(int64_t *)a2 = v2;\n    return function_409e30(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_409f30",
            "funcStartAddr": "409f30",
            "funcEndAddr": "409f80",
            "decompiledFuncCode": "int64_t function_409f30(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x409f30\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x409f7a\n            function_40a020(a1);\n            // UNREACHABLE\n        }\n        // 0x409f52\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_409e30(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x409f65\n        *(int64_t *)a2 = 128;\n        return function_409e30(0, 128);\n    }\n    // 0x409f78\n    if (a2 < 0) {\n        // 0x409f7a\n        function_40a020(a1);\n        // UNREACHABLE\n    }\n    // 0x409f52\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_409e30(a1, v1);\n}\n"
        },
        {
            "funcName": "function_409f80",
            "funcStartAddr": "409f80",
            "funcEndAddr": "409f97",
            "decompiledFuncCode": "int64_t function_409f80(int64_t a1, int64_t a2) {\n    // 0x409f80\n    return (int64_t)memset((int64_t *)function_409dd0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_409fa0",
            "funcStartAddr": "409fa0",
            "funcEndAddr": "409fce",
            "decompiledFuncCode": "int64_t function_409fa0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x409fa7\n    if ((int64_t)v1 < 0) {\n        // 0x409fc9\n        function_40a020(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x409fc9\n        function_40a020(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x409fba\n    if (mem != NULL) {\n        // 0x409fc4\n        return (int64_t)mem;\n    }\n    // 0x409fc9\n    function_40a020(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_409fd0",
            "funcStartAddr": "409fd0",
            "funcEndAddr": "409ff8",
            "decompiledFuncCode": "int64_t function_409fd0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_409dd0(a2); // 0x409fdf\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_40a000",
            "funcStartAddr": "40a000",
            "funcEndAddr": "40a013",
            "decompiledFuncCode": "int64_t function_40a000(int64_t str) {\n    // 0x40a000\n    return function_409fd0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_40a020",
            "funcStartAddr": "40a020",
            "funcEndAddr": "40a051",
            "decompiledFuncCode": "int64_t function_40a020(int64_t a1) {\n    // 0x40a020\n    error(g29, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a060",
            "funcStartAddr": "40a060",
            "funcEndAddr": "40a130",
            "decompiledFuncCode": "int64_t function_40a060(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, int64_t a5, int64_t a6, int32_t a7) {\n    // 0x40a060\n    int64_t result2; // bp-64, 0x40a060\n    int64_t v1 = function_40a260(a1, 0, a2 & 0xffffffff, &result2, (int64_t *)a5, a6); // 0x40a087\n    int32_t v2 = v1; // 0x40a08c\n    int32_t * v3; // 0x40a060\n    if (v2 != 0) {\n        int32_t * v4 = __errno_location(); // 0x40a10a\n        if (v2 == 1) {\n            // 0x40a128\n            *v4 = 75;\n            v3 = v4;\n        } else {\n            // 0x40a117\n            v3 = v4;\n            if (v2 == 3) {\n                // 0x40a11c\n                *v4 = 0;\n                v3 = v4;\n            }\n        }\n    } else {\n        uint64_t result = result2; // 0x40a090\n        if (result >= a3 && result <= a4) {\n            // 0x40a0f2\n            return result;\n        }\n        int32_t * v5 = __errno_location(); // 0x40a09f\n        *v5 = result < 0x40000000 ? 34 : 75;\n        v3 = v5;\n    }\n    int64_t v6 = function_409760(a1); // 0x40a0bc\n    int32_t v7 = *v3; // 0x40a0c1\n    int32_t err_num = v7 == 22 ? 0 : v7; // 0x40a0d7\n    error(a7 == 0 ? 1 : a7, err_num, \"%s: %s\", (char *)a6, (char *)v6);\n    // 0x40a0f2\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40a130",
            "funcStartAddr": "40a130",
            "funcEndAddr": "40a151",
            "decompiledFuncCode": "int64_t function_40a130(int64_t a1, int32_t a2, int64_t a3, char * a4, int64_t a5, int32_t a6) {\n    // 0x40a130\n    int64_t result; // 0x40a130\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a160",
            "funcStartAddr": "40a160",
            "funcEndAddr": "40a1b3",
            "decompiledFuncCode": "int64_t function_40a160(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40a160\n    int64_t v1; // 0x40a160\n    int64_t v2 = function_40b950(a1, a2, a3, v1); // bp-24, 0x40a16a\n    int32_t * v3 = __errno_location(); // 0x40a173\n    *v3 = 0;\n    int64_t v4 = function_40b840(&v2, 0); // 0x40a193\n    int64_t result = v4; // 0x40a19a\n    while ((int32_t)v4 != 0) {\n        // 0x40a180\n        result = 0xffffffff;\n        if ((*v3 & -5) != 0) {\n            // break -> 0x40a19c\n            break;\n        }\n        *v3 = 0;\n        v4 = function_40b840(&v2, 0);\n        result = v4;\n    }\n    // 0x40a19c\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a1c0",
            "funcStartAddr": "40a1c0",
            "funcEndAddr": "40a25c",
            "decompiledFuncCode": "int64_t function_40a1c0(int64_t a1, int32_t a2, int64_t * a3, int64_t a4) {\n    int32_t * v1 = __errno_location(); // 0x40a1d8\n    *v1 = 0;\n    char * v2; // 0x40a1c0\n    int64_t v3 = (int64_t)v2; // 0x40a1f1\n    int64_t result = 0; // 0x40a1f9\n    int128_t v4; // 0x40a1c0\n    if (v3 != a1) {\n        int64_t v5; // 0x40a1c0\n        if (a2 == 0) {\n            char v6 = *v2; // 0x40a23a\n            if (v6 != 0) {\n                // 0x40a222\n                *a3 = __asm_movsd_1(v4);\n                return 0;\n            }\n            unsigned char v7 = llvm_ctpop_i8(v6); // 0x40a23a\n            __asm_ucomisd(v4, (int64_t)g7);\n            v5 = 0;\n            if (v7 % 2 != 0) {\n                // 0x40a222\n                *a3 = __asm_movsd_1(v4);\n                return 1;\n            }\n        } else {\n            unsigned char v8 = llvm_ctpop_i8((char)a2); // 0x40a1fb\n            __asm_ucomisd(v4, (int64_t)g7);\n            v5 = v8 % 2 == 0 ? (int64_t)v1 & -256 : 0;\n        }\n        // 0x40a211\n        result = v5 | (int64_t)(*v1 != 34);\n    }\n    // 0x40a219\n    if (a2 != 0) {\n        // 0x40a21e\n        *(int64_t *)(int64_t)a2 = v3;\n    }\n    // 0x40a222\n    *a3 = __asm_movsd_1(v4);\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a260",
            "funcStartAddr": "40a260",
            "funcEndAddr": "40a6a0",
            "decompiledFuncCode": "int64_t function_40a260(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t * str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x40a26e\n    if (v1 >= 37) {\n        // 0x40a67b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g73;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x40a292\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x40a2c2\n    int64_t v4 = a1; // 0x40a2c7\n    char v5 = c; // 0x40a2c7\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x40a2bc\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x40a2b8\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x40a2c9\n    if (v5 == 45) {\n        // 0x40a305\n        return 4;\n    }\n    // 0x40a2ce\n    int64_t v7; // bp-64, 0x40a260\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x40a28e\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x40a2d6\n    int64_t * v10 = (int64_t *)v8; // 0x40a2db\n    int64_t v11 = *v10; // 0x40a2db\n    char v12; // 0x40a260\n    int64_t v13; // 0x40a260\n    int64_t v14; // 0x40a260\n    int64_t v15; // 0x40a260\n    int64_t v16; // 0x40a260\n    int64_t v17; // 0x40a260\n    int64_t v18; // 0x40a260\n    if (v11 == a1) {\n        // 0x40a338\n        if (c == 0 || str == NULL) {\n            // 0x40a305\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x40a359\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x40a305\n            return 4;\n        }\n        goto lab_0x40a367;\n    } else {\n        int32_t v19 = *v2; // 0x40a2e6\n        int64_t v20 = 0; // 0x40a2ec\n        if (v19 != 0) {\n            // 0x40a320\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x40a305\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x40a2d6\n        v16 = v21;\n        v13 = v20;\n        if (str == NULL) {\n            goto lab_0x40a302;\n        } else {\n            char c2 = *(char *)v11; // 0x40a2f5\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x40a463\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x40a367;\n                } else {\n                    goto lab_0x40a475;\n                }\n            } else {\n                goto lab_0x40a302;\n            }\n        }\n    }\n  lab_0x40a367:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x40a36f\n    int64_t v24 = 1; // 0x40a36f\n    int64_t v25; // 0x40a260\n    int64_t v26; // 0x40a260\n    int64_t v27; // 0x40a260\n    int64_t v28; // 0x40a260\n    int64_t v29; // 0x40a260\n    int64_t v30; // 0x40a260\n    int64_t v31; // 0x40a260\n    int64_t v32; // 0x40a260\n    int64_t v33; // 0x40a260\n    int64_t v34; // 0x40a260\n    int64_t v35; // 0x40a260\n    int64_t v36; // 0x40a260\n    int64_t v37; // 0x40a260\n    int64_t v38; // 0x40a260\n    int64_t v39; // 0x40a260\n    int64_t v40; // 0x40a260\n    int64_t v41; // 0x40a260\n    int64_t v42; // 0x40a260\n    int64_t v43; // 0x40a260\n    int64_t v44; // 0x40a260\n    if (v22 < 48) {\n        // 0x40a371\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x40a3da;\n        } else {\n            // 0x40a384\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x40a3da;\n            } else {\n                // 0x40a3a0\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x40a3da;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x40a609\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x40a3da;\n                    }\n                    default: {\n                        // 0x40a3b5\n                        g70 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x40a57b;\n                            }\n                            case 70: {\n                                goto lab_0x40a475;\n                            }\n                            case 71: {\n                                goto lab_0x40a5b3;\n                            }\n                            case 72: {\n                                goto lab_0x40a475;\n                            }\n                            case 73: {\n                                goto lab_0x40a475;\n                            }\n                            case 74: {\n                                goto lab_0x40a475;\n                            }\n                            case 75: {\n                                goto lab_0x40a43c;\n                            }\n                            case 76: {\n                                goto lab_0x40a475;\n                            }\n                            case 77: {\n                                goto lab_0x40a3fe;\n                            }\n                            case 78: {\n                                goto lab_0x40a475;\n                            }\n                            case 79: {\n                                goto lab_0x40a475;\n                            }\n                            case 80: {\n                                goto lab_0x40a548;\n                            }\n                            case 81: {\n                                goto lab_0x40a475;\n                            }\n                            case 82: {\n                                goto lab_0x40a475;\n                            }\n                            case 83: {\n                                goto lab_0x40a475;\n                            }\n                            case 84: {\n                                goto lab_0x40a518;\n                            }\n                            case 85: {\n                                goto lab_0x40a475;\n                            }\n                            case 86: {\n                                goto lab_0x40a475;\n                            }\n                            case 87: {\n                                goto lab_0x40a475;\n                            }\n                            case 88: {\n                                goto lab_0x40a475;\n                            }\n                            case 89: {\n                                goto lab_0x40a4e6;\n                            }\n                            case 90: {\n                                goto lab_0x40a4ab;\n                            }\n                            case 91: {\n                                goto lab_0x40a475;\n                            }\n                            case 92: {\n                                goto lab_0x40a475;\n                            }\n                            case 93: {\n                                goto lab_0x40a475;\n                            }\n                            case 94: {\n                                goto lab_0x40a475;\n                            }\n                            case 95: {\n                                goto lab_0x40a475;\n                            }\n                            case 96: {\n                                goto lab_0x40a475;\n                            }\n                            case 97: {\n                                goto lab_0x40a475;\n                            }\n                            case 98: {\n                                goto lab_0x40a48f;\n                            }\n                            case 99: {\n                                goto lab_0x40a418;\n                            }\n                            case 100: {\n                                goto lab_0x40a475;\n                            }\n                            case 101: {\n                                goto lab_0x40a475;\n                            }\n                            case 102: {\n                                goto lab_0x40a475;\n                            }\n                            case 103: {\n                                goto lab_0x40a5b3;\n                            }\n                            case 104: {\n                                goto lab_0x40a475;\n                            }\n                            case 105: {\n                                goto lab_0x40a475;\n                            }\n                            case 106: {\n                                goto lab_0x40a475;\n                            }\n                            case 107: {\n                                goto lab_0x40a43c;\n                            }\n                            case 108: {\n                                goto lab_0x40a475;\n                            }\n                            case 109: {\n                                goto lab_0x40a3fe;\n                            }\n                            case 110: {\n                                goto lab_0x40a475;\n                            }\n                            case 111: {\n                                goto lab_0x40a475;\n                            }\n                            case 112: {\n                                goto lab_0x40a475;\n                            }\n                            case 113: {\n                                goto lab_0x40a475;\n                            }\n                            case 114: {\n                                goto lab_0x40a475;\n                            }\n                            case 115: {\n                                goto lab_0x40a475;\n                            }\n                            case 116: {\n                                goto lab_0x40a518;\n                            }\n                            default: {\n                                goto lab_0x40a3da;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40a3da;\n    }\n  lab_0x40a302:\n    // 0x40a302\n    *a4 = v16;\n    // 0x40a305\n    return v13 & 0xffffffff;\n  lab_0x40a3da:\n    // 0x40a3da\n    g71 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x40a260\n    switch (v12) {\n        case 66: {\n            // 0x40a5d4\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x40a447;\n            } else {\n                // 0x40a5e1\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x40a418;\n            }\n        }\n        case 69: {\n            goto lab_0x40a57b;\n        }\n        case 71: {\n            goto lab_0x40a5b3;\n        }\n        case 75: {\n            goto lab_0x40a43c;\n        }\n        case 77: {\n            goto lab_0x40a3fe;\n        }\n        case 80: {\n            goto lab_0x40a548;\n        }\n        case 84: {\n            goto lab_0x40a518;\n        }\n        case 89: {\n            goto lab_0x40a4e6;\n        }\n        case 90: {\n            goto lab_0x40a4ab;\n        }\n        case 98: {\n            goto lab_0x40a48f;\n        }\n        case 99: {\n            goto lab_0x40a418;\n        }\n        case 103: {\n            goto lab_0x40a5b3;\n        }\n        case 107: {\n            goto lab_0x40a43c;\n        }\n        case 109: {\n            goto lab_0x40a3fe;\n        }\n        case 116: {\n            goto lab_0x40a518;\n        }\n        case 119: {\n            // 0x40a480\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x40a447;\n            } else {\n                // 0x40a485\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x40a418;\n            }\n        }\n        default: {\n            goto lab_0x40a475;\n        }\n    }\n  lab_0x40a57b:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x40a593\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x40a59f\n    int64_t v51 = v48; // 0x40a5a2\n    int64_t v52 = v37; // 0x40a5a2\n    int64_t v53 = v49; // 0x40a5a2\n    int32_t v54 = v50; // 0x40a5a2\n    int64_t v55 = v49; // 0x40a5a2\n    while (v50 != 0) {\n        // 0x40a590\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x40a4d4;\n  lab_0x40a5b3:\n    // 0x40a5b3\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x40a5be\n        int128_t v56; // 0x40a5b9\n        uint128_t v57; // 0x40a5b9\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x40a5be\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x40a260\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x40a5c3\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x40a5c8\n                v26 = v60;\n                int64_t v61; // 0x40a260\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x40a418;\n  lab_0x40a43c:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x40a43f\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x40a418;\n    } else {\n        goto lab_0x40a447;\n    }\n  lab_0x40a3fe:;\n    int128_t v65 = v27; // 0x40a404\n    uint128_t v66 = v65 * (int128_t)v17; // 0x40a404\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x40a447;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x40a409\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x40a447;\n        } else {\n            // 0x40a40e\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x40a418;\n        }\n    }\n  lab_0x40a548:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x40a55b\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x40a567\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x40a56a\n    int64_t v73 = v70; // 0x40a56a\n    while (v71 != 0) {\n        // 0x40a558\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x40a4d4;\n  lab_0x40a518:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x40a52b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x40a537\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x40a53a\n    int64_t v79 = v76; // 0x40a53a\n    while (v77 != 0) {\n        // 0x40a528\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x40a4d4;\n  lab_0x40a4e6:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x40a4fb\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x40a507\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x40a50a\n    int64_t v85 = v82; // 0x40a50a\n    while (v83 != 0) {\n        // 0x40a4f8\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x40a4d4;\n  lab_0x40a4ab:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x40a4c3\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x40a4cf\n    int32_t v90 = v89; // 0x40a4d2\n    int64_t v91 = v88; // 0x40a4d2\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x40a4c0\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x40a4d4;\n  lab_0x40a48f:\n    // 0x40a48f\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x40a447;\n    } else {\n        // 0x40a498\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x40a418;\n    }\n  lab_0x40a418:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x40a41d\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x40a302;\n  lab_0x40a475:\n    // 0x40a475\n    *a4 = v18;\n    // 0x40a305\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x40a447:\n    // 0x40a447\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x40a418;\n  lab_0x40a4d4:\n    // 0x40a4d4\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x40a418;\n}\n"
        },
        {
            "funcName": "function_40a6a0",
            "funcStartAddr": "40a6a0",
            "funcEndAddr": "40a7d5",
            "decompiledFuncCode": "int64_t function_40a6a0(int64_t fd, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t cmd = a2; // 0x40a6d0\n    if (cmd != 1030) {\n        // 0x40a780\n        return fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40a6dc\n    int64_t v2; // 0x40a6a0\n    if (g63 < 0) {\n        int64_t v3 = function_40a6a0(fd, 0, v1, a4); // 0x40a724\n        int64_t v4 = v3 & 0xffffffff; // 0x40a729\n        if ((int32_t)v3 < 0) {\n            // 0x40a710\n            return v4 & 0xffffffff;\n        }\n        // 0x40a72f\n        v2 = v4;\n        if (g63 != -1) {\n            // 0x40a710\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x40a6f7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x40a706\n            g63 = 1;\n            // 0x40a710\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_40a6a0(fd & 0xffffffff, 0, v1, a4); // 0x40a7b7\n        int64_t v7 = v6 & 0xffffffff; // 0x40a7bc\n        if ((int32_t)v6 < 0) {\n            // 0x40a710\n            return v7 & 0xffffffff;\n        }\n        // 0x40a7c6\n        g63 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x40a73f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40a74a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x40a710\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x40a762\n    close(fd2);\n    // 0x40a710\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40a7e0",
            "funcStartAddr": "40a7e0",
            "funcEndAddr": "40a8bf",
            "decompiledFuncCode": "int64_t function_40a7e0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40a7ec\n    uint32_t v2 = *v1; // 0x40a7ec\n    int64_t v3 = a2 & 0xffffffff; // 0x40a7f1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x40a7f4\n    uint64_t v5 = (int64_t)*v4; // 0x40a7f4\n    int64_t v6; // 0x40a862\n    if (v3 <= v5) {\n      lab_0x40a85c_2:\n        // 0x40a85c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x40a7e2\n    int64_t v8 = v2; // 0x40a7e0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40a85c\n        goto lab_0x40a85c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x40a818\n    int64_t v17; // 0x40a826\n    int64_t * v18; // 0x40a840\n    int64_t * v19; // 0x40a843\n    int64_t v20; // 0x40a84e\n    int64_t v21; // 0x40a826\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x40a823\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x40a840\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x40a857\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40a85c\n            goto lab_0x40a85c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40a85c\n            goto lab_0x40a85c_2;\n        }\n        // 0x40a812\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40a89b\n    int64_t * v23 = (int64_t *)v22; // 0x40a8a0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x40a8a3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x40a8a0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x40a8b7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40a80d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40a85c\n            goto lab_0x40a85c_2;\n        }\n        // 0x40a812\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x40a823\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x40a840\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x40a857\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40a85c\n                goto lab_0x40a85c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40a85c\n                goto lab_0x40a85c_2;\n            }\n            // 0x40a812\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x40a880\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x40a8a0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x40a8b7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40a85c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40a8c0",
            "funcStartAddr": "40a8c0",
            "funcEndAddr": "40aedc",
            "decompiledFuncCode": "int64_t function_40a8c0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40a8df\n    int64_t v2 = *v1; // 0x40a8df\n    char * str2 = (char *)v2; // 0x40a8ec\n    char c = *str2; // 0x40a8ec\n    int64_t v3 = v2; // 0x40a918\n    int64_t v4 = 0; // 0x40a8c0\n    int32_t v5; // 0x40a8c0\n    int64_t v6; // 0x40a8c0\n    int64_t v7; // 0x40a8c0\n    int64_t v8; // 0x40a8c0\n    int64_t v9; // 0x40a8c0\n    int64_t v10; // 0x40a8c0\n    int64_t v11; // 0x40a8c0\n    int64_t v12; // 0x40a8c0\n    int64_t v13; // 0x40a8c0\n    int64_t str3; // 0x40a8c0\n    int64_t v14; // 0x40a8c0\n    int64_t v15; // 0x40a8c0\n    int64_t v16; // 0x40a8c0\n    int64_t v17; // 0x40a8c0\n    int32_t v18; // 0x40a8c0\n    int32_t v19; // 0x40a8c0\n    int32_t v20; // 0x40a8c0\n    int32_t v21; // 0x40a8c0\n    int32_t v22; // 0x40a8c0\n    int32_t v23; // 0x40a8c0\n    int32_t v24; // 0x40a8c0\n    int32_t v25; // 0x40a8c0\n    int32_t v26; // 0x40a8c0\n    int32_t v27; // 0x40a8c0\n    int32_t v28; // 0x40a8c0\n    int32_t v29; // 0x40a8c0\n    int64_t nmemb; // 0x40a8c0\n    int64_t v30; // 0x40a8c0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40a91c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x40a918\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x40a928\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40a92e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x40a8f8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40a95c\n                int64_t v34; // 0x40a8c0\n                int64_t v35; // 0x40a8c0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x40a965\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x40aae0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x40a976\n                int64_t v37 = *(int64_t *)v36; // 0x40a97a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x40a950\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x40a965\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x40aae0;\n                        }\n                    }\n                    // 0x40a976\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x40a9c6:\n                    // 0x40a9c6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x40aa20;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x40ab90\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x40aa20;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x40ab40\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40a9ea;\n                                } else {\n                                    // 0x40ab4c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40a9ea;\n                                    } else {\n                                        // 0x40ab5a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40a9ea;\n                                        } else {\n                                            goto lab_0x40aa20;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40a9ea;\n                            }\n                        }\n                    }\n                }\n              lab_0x40aa31:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x40ac06\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x40adb2\n                            flockfile(g41);\n                            int64_t v41 = *v1; // 0x40add2\n                            __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40ae1f\n                            int64_t v43 = (int64_t)g41;\n                            int64_t v44 = v43; // 0x40ae39\n                            int64_t v45; // 0x40ae3b\n                            if (*(char *)v42 != 0) {\n                                // 0x40ae3b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g41;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x40ae33\n                            while (v17 + nmemb != v42) {\n                                // 0x40ae35\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40ae3b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g41;\n                                }\n                                // 0x40ae28\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x40ae60\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g41);\n                            v40 = *v1;\n                        } else {\n                            // 0x40ac14\n                            __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40ad6f\n                        free((int64_t *)v17);\n                    }\n                    // 0x40ac69\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x40ac80\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40ab2e\n                    return 63;\n                }\n                // 0x40aa50\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x40aad4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x40aae0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x40aaf0\n                    uint32_t v50 = *v49; // 0x40aaf0\n                    int64_t v51 = v50; // 0x40aaf0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40aafa\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x40ab03\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40ad2f\n                                __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40acda\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40ab2e\n                            return 63;\n                        }\n                        // 0x40ab78\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40ae8f\n                                    __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40ad8d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x40ada0\n                                // 0x40ab2e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40ac9e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x40acb2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40ab1b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40ab1e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x40ab22\n                    int64_t result = v59; // 0x40ab28\n                    if (v58 != 0) {\n                        // 0x40ab2a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40ab2e\n                    return result;\n                }\n            } else {\n                // 0x40a92e\n                v5 = v32;\n            }\n            // break -> 0x40aa55\n            break;\n        }\n    }\n    // 0x40aa55\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40aa6d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x40aa77\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40ab2e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x40abb9\n        __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x40aaa6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x40aab6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x40aa20:\n    // 0x40aa20\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x40aa20\n    int64_t v63 = *(int64_t *)v62; // 0x40aa24\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x40aa31\n        goto lab_0x40aa31;\n    }\n    goto lab_0x40a9c6;\n  lab_0x40a9ea:\n    // 0x40a9ea\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x40a8c0\n    int32_t v65; // 0x40a8c0\n    int32_t v66; // 0x40a8c0\n    if (v27 != 0) {\n        goto lab_0x40aa20;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x40aba0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x40aa20;\n            } else {\n                goto lab_0x40aa11;\n            }\n        } else {\n            // 0x40aa05\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40acfc\n                int64_t v67 = (int64_t)mem; // 0x40acfc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x40aa20;\n                } else {\n                    // 0x40ad0f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x40aa11;\n                }\n            } else {\n                goto lab_0x40aa11;\n            }\n        }\n    }\n  lab_0x40aa11:\n    // 0x40aa11\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x40aa20;\n}\n"
        },
        {
            "funcName": "function_40aee0",
            "funcStartAddr": "40aee0",
            "funcEndAddr": "40b4a6",
            "decompiledFuncCode": "int64_t function_40aee0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x40af01\n    if (v3 < 1) {\n        // 0x40b0be\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40aefd\n    int32_t v5 = *(int32_t *)a7; // 0x40af09\n    uint64_t v6 = a1 & 0xffffffff; // 0x40af0b\n    int64_t v7 = v2; // 0x40af10\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x40af13\n    *v8 = 0;\n    int64_t v9; // 0x40aee0\n    int64_t v10; // 0x40aee0\n    int64_t v11; // 0x40aee0\n    int64_t v12; // 0x40aee0\n    int64_t str; // 0x40aee0\n    int64_t v13; // 0x40aee0\n    int64_t v14; // 0x40aee0\n    int64_t v15; // 0x40aee0\n    int64_t v16; // 0x40aee0\n    int64_t v17; // 0x40aee0\n    int32_t v18; // 0x40aee0\n    char v19; // 0x40aee0\n    if (v5 == 0) {\n        // 0x40b0f8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40af2a;\n    } else {\n        // 0x40af23\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x40af70\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x40af73\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x40b038;\n            } else {\n                int64_t v22 = v7 + 1; // 0x40af86\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x40af96\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40b04c;\n                } else {\n                    goto lab_0x40afa8;\n                }\n            }\n        } else {\n            goto lab_0x40af2a;\n        }\n    }\n  lab_0x40af2a:\n    // 0x40af2a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x40af30\n    *v24 = 0;\n    int64_t v25; // 0x40aee0\n    int64_t v26; // 0x40aee0\n    int64_t v27; // 0x40aee0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x40b020\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40b02d;\n        }\n        case 43: {\n            // 0x40b330\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40b02d;\n        }\n        default: {\n            // 0x40af4c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40b2af\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x40b3c8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40b02d;\n                } else {\n                    // 0x40b2bd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40af5a;\n                }\n            } else {\n                goto lab_0x40af5a;\n            }\n        }\n    }\n  lab_0x40b038:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40b03f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x40afa8;\n    } else {\n        goto lab_0x40b04c;\n    }\n  lab_0x40af5a:\n    // 0x40af5a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40b02d;\n  lab_0x40b02d:\n    // 0x40b02d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x40b038;\n  lab_0x40afa8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x40afa8\n    int64_t v31 = v30; // 0x40afa8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40afaa\n    if ((int64_t)*v32 > v31) {\n        // 0x40afaf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x40afb2\n    if (*v33 > v30) {\n        // 0x40afb7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40afba\n    int64_t v35 = v31; // 0x40afbe\n    int64_t v36 = v15; // 0x40afbe\n    int64_t v37; // 0x40aee0\n    int64_t v38; // 0x40aee0\n    int64_t v39; // 0x40aee0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x40b128\n        int64_t v41 = v40; // 0x40b128\n        v2 = v41;\n        int64_t v42; // 0x40aee0\n        if (*v33 == v40) {\n            // 0x40b310\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40b318\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x40b134\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40b138\n                function_40a7e0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x40b148\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x40b151\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40b15a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x40b171\n            int64_t v47 = v45 & 0xffffffff; // 0x40b175\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40b17e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x40b184\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x40b186;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x40b160\n            int64_t v49 = v48 & 0xffffffff; // 0x40b160\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x40b171\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40b17e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x40b184\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x40b186;\n                    }\n                }\n                // 0x40b160\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x40b328\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x40b186;\n    } else {\n        goto lab_0x40afc4;\n    }\n  lab_0x40b04c:\n    // 0x40b04c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40b04f\n    int64_t v51 = v12; // 0x40b04f\n    int64_t v52 = v14; // 0x40b04f\n    if (*(char *)v10 == 0) {\n        goto lab_0x40afa8;\n    } else {\n        goto lab_0x40b055;\n    }\n  lab_0x40afc4:;\n    int32_t v53 = v35; // 0x40afc4\n    int64_t v54; // 0x40aee0\n    int64_t v55; // 0x40aee0\n    int64_t v56; // 0x40aee0\n    int64_t v57; // 0x40aee0\n    int64_t v58; // 0x40aee0\n    int64_t v59; // 0x40aee0\n    char * v60; // 0x40aee0\n    int64_t v61; // 0x40aee0\n    int64_t v62; // 0x40afd9\n    int64_t v63; // 0x40aee0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x40b113\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x40b116;\n    } else {\n        // 0x40afcc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x40aee0\n        int64_t v66 = v65 ? -1 : 1; // 0x40afe0\n        int64_t v67 = (int64_t)\"--\"; // 0x40aee0\n        int64_t v68 = v62; // 0x40aee0\n        int64_t v69 = 3; // 0x40afe0\n        unsigned char v70 = *(char *)v68; // 0x40afe0\n        char v71 = *(char *)v67; // 0x40afe0\n        char v72 = v71; // 0x40afe0\n        bool v73 = false; // 0x40afe0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x40b0d0\n            if (*(char *)v62 == 45) {\n                // 0x40b190\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x40b190\n                if (c == 0) {\n                    goto lab_0x40b0da;\n                } else {\n                    // 0x40b19d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x40b220;\n                    } else {\n                        if (c == 45) {\n                            // 0x40b403\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x40b275;\n                        } else {\n                            // 0x40b1ae\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x40b220;\n                            } else {\n                                // 0x40b1b3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x40b1d4;\n                                } else {\n                                    // 0x40b1ba\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x40b220;\n                                    } else {\n                                        goto lab_0x40b1d4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40b0da;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x40aff0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x40aff3\n            int64_t v77 = v35 + 1; // 0x40aff6\n            int32_t v78 = v77; // 0x40aff9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x40b360\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x40b007\n                    function_40a7e0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x40b015\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x40b116;\n        }\n    }\n  lab_0x40b055:;\n    // 0x40b055\n    int64_t v79; // bp-104, 0x40aee0\n    int64_t v80 = &v79; // 0x40aeea\n    int64_t v81 = v50 + 1; // 0x40b055\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40b05c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x40b061\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x40b065\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x40b069\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x40b071\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x40b076\n    int32_t c2 = v84; // 0x40b076\n    char * found_char_pos = strchr(str2, c2); // 0x40b076\n    int64_t v87 = *v82; // 0x40b07b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x40b085\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x40b090\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x40b380\n            __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40b34d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40b0be\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x40b076\n    char v91 = *(char *)(v90 + 1); // 0x40b0ab\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x40b065\n        if (v91 != 58) {\n            // 0x40b0be\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x40b2d4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x40b3d8\n                *v8 = 0;\n            } else {\n                // 0x40b3bc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40b2fe\n            *v83 = 0;\n            // 0x40b0be\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40b2de\n        if (v93 != 0) {\n            // 0x40b370\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40b2fe\n            *v83 = 0;\n            // 0x40b0be\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x40b2f1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40b2fe\n            *v83 = 0;\n            // 0x40b0be\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40b43a\n            __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40b3ea\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x40b3f1\n        // 0x40b2fe\n        *v83 = 0;\n        // 0x40b0be\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x40b249\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40b24b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x40b470\n                __fprintf_chk(g41, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x40b421\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x40b428\n            // 0x40b0be\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x40b256\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40b25a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x40b275;\n  lab_0x40b186:\n    // 0x40b186\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x40afc4;\n  lab_0x40b275:;\n    int64_t v99 = function_40a8c0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x40b293\n    // 0x40b0be\n    return v99 & 0xffffffff;\n  lab_0x40b116:;\n    int32_t v100 = v55; // 0x40b116\n    if (v100 != (int32_t)v59) {\n        // 0x40b11a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40b0be\n    return 0xffffffff;\n  lab_0x40b0da:\n    // 0x40b0da\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x40b0e1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40b0be\n    return v99 & 0xffffffff;\n  lab_0x40b220:\n    // 0x40b220\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x40b055;\n  lab_0x40b1d4:\n    // 0x40b1d4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_40a8c0(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40b1fa\n    if ((int32_t)v101 != -1) {\n        // 0x40b0be\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40b20f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x40b220;\n}\n"
        },
        {
            "funcName": "function_40b4b0",
            "funcStartAddr": "40b4b0",
            "funcEndAddr": "40b506",
            "decompiledFuncCode": "int64_t function_40b4b0(int64_t a1) {\n    // 0x40b4b0\n    *(int32_t *)&g64 = g37;\n    *(int32_t *)&g65 = g36;\n    int64_t v1; // 0x40b4b0\n    int64_t result = function_40aee0(v1, v1, v1, v1, v1, v1, &g64, a1 & 0xffffffff); // 0x40b4d6\n    g37 = *(int32_t *)&g64;\n    g69 = (char *)g67;\n    *(int32_t *)&g35 = g66;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b510",
            "funcStartAddr": "40b510",
            "funcEndAddr": "40b528",
            "decompiledFuncCode": "int64_t function_40b510(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40b510\n    return function_40b4b0(1);\n}\n"
        },
        {
            "funcName": "function_40b530",
            "funcStartAddr": "40b530",
            "funcEndAddr": "40b543",
            "decompiledFuncCode": "int64_t function_40b530(int64_t a1, int64_t a2, char * a3, char (**a4)[6], int32_t a5, int64_t a6) {\n    // 0x40b530\n    return function_40b4b0(0);\n}\n"
        },
        {
            "funcName": "function_40b550",
            "funcStartAddr": "40b550",
            "funcEndAddr": "40b565",
            "decompiledFuncCode": "int64_t function_40b550(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40b550\n    return function_40aee0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40b570",
            "funcStartAddr": "40b570",
            "funcEndAddr": "40b586",
            "decompiledFuncCode": "int64_t function_40b570(void) {\n    // 0x40b570\n    return function_40b4b0(0);\n}\n"
        },
        {
            "funcName": "function_40b590",
            "funcStartAddr": "40b590",
            "funcEndAddr": "40b5a8",
            "decompiledFuncCode": "int64_t function_40b590(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40b590\n    return function_40aee0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40b5b0",
            "funcStartAddr": "40b5b0",
            "funcEndAddr": "40b6a1",
            "decompiledFuncCode": "int64_t function_40b5b0(int64_t a1) {\n    int32_t fds[2]; // 0x40b605\n    // 0x40b5b0\n    int64_t v1; // bp-312, 0x40b5b0\n    uint32_t result = __fxstat(1, (int32_t)a1, (struct stat *)&v1); // 0x40b5c7\n    if (result != 0) {\n        // 0x40b5f2\n        return result;\n    }\n    // 0x40b5d2\n    int32_t fd2; // 0x40b5b0\n    int32_t v2 = fd2 & 0xf000; // 0x40b5d6\n    bool result2 = v2 == 0x1000 | v2 == 0xc000;\n    if (!result2) {\n        // 0x40b5f2\n        return result2;\n    }\n    // 0x40b600\n    int32_t fd; // bp-320, 0x40b5b0\n    fds[0] = &fd;\n    uint32_t result3 = pipe(fds); // 0x40b605\n    if (result3 != 0) {\n        // 0x40b5f2\n        return result3;\n    }\n    // 0x40b610\n    int64_t v3; // bp-168, 0x40b5b0\n    uint32_t v4 = __fxstat(1, fd, (struct stat *)&v3); // 0x40b621\n    int64_t result4 = v4; // 0x40b626\n    int32_t * v5 = __errno_location(); // 0x40b628\n    close(fd);\n    close(fd2);\n    if (v4 != 0) {\n        // 0x40b5f2\n        return result4;\n    }\n    // 0x40b649\n    int64_t v6; // 0x40b5b0\n    if ((uint64_t)v6 > v6) {\n        // 0x40b5f2\n        return result4;\n    }\n    // 0x40b65f\n    if ((fd2 & 0xf000) == 0x1000) {\n        // 0x40b5f2\n        return v2 == 0x1000;\n    }\n    // 0x40b5f2\n    return v2 == 0xc000;\n}\n"
        },
        {
            "funcName": "function_40b6b0",
            "funcStartAddr": "40b6b0",
            "funcEndAddr": "40b72a",
            "decompiledFuncCode": "int64_t function_40b6b0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40b6bb\n    int64_t v2 = (int64_t)&g16; // 0x40b6bb\n    int32_t * pwc; // 0x40b6b0\n    int64_t v3; // 0x40b6b0\n    int64_t n; // 0x40b6b0\n    if (a2 == 0) {\n        goto lab_0x40b702;\n    } else {\n        // 0x40b6bd\n        if (a3 == 0) {\n            // 0x40b6e8\n            return -2;\n        }\n        // 0x40b6c9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x40b702;\n        } else {\n            goto lab_0x40b6d4;\n        }\n    }\n  lab_0x40b702:\n    // 0x40b702\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x40b6b0\n    pwc = (int32_t *)&v4;\n    goto lab_0x40b6d4;\n  lab_0x40b6d4:;\n    char * wstr = (char *)v3; // 0x40b6da\n    int64_t ps; // 0x40b6b0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40b6da\n    int64_t result = v5; // 0x40b6da\n    if (v5 < 0xfffffffe) {\n        // 0x40b6e8\n        return result;\n    }\n    int64_t result2 = result; // 0x40b719\n    if ((char)function_40ba10(0, v3) == 0) {\n        // 0x40b71b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x40b6e8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b730",
            "funcStartAddr": "40b730",
            "funcEndAddr": "40b834",
            "decompiledFuncCode": "int64_t function_40b730(int64_t result, uint64_t a2, int64_t a3) {\n    // 0x40b730\n    if (a3 == 0) {\n        // 0x40b769\n        return 0;\n    }\n    int64_t v1 = result; // 0x40b73c\n    int64_t v2 = a3; // 0x40b73c\n    int64_t result2; // 0x40b730\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x40b73e\n        int64_t v4 = result; // 0x40b741\n        if ((char)result == v3) {\n            // 0x40b769\n            return result;\n        }\n        int64_t v5 = a3; // 0x40b741\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x40b750\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x40b770;\n            }\n            // 0x40b756\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x40b769\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x40b769\n        return result2;\n    }\n  lab_0x40b770:;\n    int64_t result3 = v1; // 0x40b79d\n    int64_t v6 = v2; // 0x40b79d\n    if (v2 >= 8) {\n        int64_t v7 = 256 * a2 & 0xff00 | a2 % 256; // 0x40b77f\n        int64_t v8 = 0x10000 * v7 | v7; // 0x40b78c\n        int64_t v9 = 0x100000000 * v8 | v8; // 0x40b796\n        int64_t v10 = *(int64_t *)v1 ^ v9; // 0x40b7b6\n        result3 = v1;\n        v6 = v2;\n        if (((v10 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v10 - 0x101010101010101) == 0) {\n            int64_t v11 = v2 - 8; // 0x40b7e5\n            int64_t v12 = v1 + 8; // 0x40b7e9\n            while (v11 >= 8) {\n                int64_t v13 = *(int64_t *)v12 ^ v9; // 0x40b7d3\n                result3 = v12;\n                v6 = v11;\n                if (((v13 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v13 - 0x101010101010101) != 0) {\n                    goto lab_0x40b7fc;\n                }\n                v11 -= 8;\n                v12 += 8;\n            }\n            // 0x40b7f3\n            result3 = v12;\n            v6 = v11;\n            if (v11 == 0) {\n                // 0x40b769\n                return 0;\n            }\n        }\n    }\n  lab_0x40b7fc:;\n    char v14 = a2; // 0x40b7fc\n    if (*(char *)result3 == v14) {\n        // 0x40b769\n        return result3;\n    }\n    int64_t v15 = result3 + 1;\n    result2 = 0;\n    while (v15 != v6 + result3) {\n        // 0x40b810\n        result2 = v15;\n        if (*(char *)v15 == v14) {\n            // break -> 0x40b769\n            break;\n        }\n        v15++;\n        result2 = 0;\n    }\n    // 0x40b769\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b840",
            "funcStartAddr": "40b840",
            "funcEndAddr": "40b8e2",
            "decompiledFuncCode": "int64_t function_40b840(int64_t * a1, int32_t a2) {\n    int64_t v1 = (int64_t)a1;\n    if (*(int64_t *)(v1 + 8) >= 0x3b9aca00) {\n        // 0x40b8d0\n        *__errno_location() = 22;\n        // 0x40b8c7\n        return 0xffffffff;\n    }\n    int64_t v2 = a2;\n    struct timespec * rmtp = (struct timespec *)v2;\n    int64_t v3 = v1; // 0x40b869\n    int64_t v4 = v1; // 0x40b869\n    int64_t rqtp; // bp-40, 0x40b840\n    if (a1 <= (int64_t *)0x1fa400) {\n      lab_0x40b8b8:\n        // 0x40b8b8\n        rqtp = v4;\n        // 0x40b8c7\n        return nanosleep((struct timespec *)&rqtp, rmtp);\n    }\n    rqtp = 0x1fa400;\n    v3 -= 0x1fa400;\n    int32_t v5 = nanosleep((struct timespec *)&rqtp, rmtp); // 0x40b897\n    while (v5 == 0) {\n        // 0x40b870\n        v4 = v3;\n        if (v3 < 0x1fa401) {\n            goto lab_0x40b8b8;\n        }\n        rqtp = 0x1fa400;\n        v3 -= 0x1fa400;\n        v5 = nanosleep((struct timespec *)&rqtp, rmtp);\n    }\n    int64_t result = v5; // 0x40b897\n    if (a2 == 0) {\n        // 0x40b8c7\n        return result;\n    }\n    // 0x40b8a5\n    *(int64_t *)v2 = v3 + v2;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40b8f0",
            "funcStartAddr": "40b8f0",
            "funcEndAddr": "40b94d",
            "decompiledFuncCode": "int64_t function_40b8f0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x40b8f7\n    int64_t v2; // 0x40b8f0\n    int64_t result = function_40bff0(a1, v2); // 0x40b908\n    if ((v2 & 32) != 0) {\n        // 0x40b930\n        if ((int32_t)result == 0) {\n            // 0x40b934\n            *__errno_location() = 0;\n        }\n        // 0x40b92a\n        return 0xffffffff;\n    }\n    // 0x40b911\n    if ((int32_t)result == 0) {\n        // 0x40b92a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x40b918\n    if (v1 == 0) {\n        // 0x40b91a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40b92a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40b950",
            "funcStartAddr": "40b950",
            "funcEndAddr": "40ba0c",
            "decompiledFuncCode": "int64_t function_40b950(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40b950\n    int128_t v1; // 0x40b950\n    __asm_comisd(v1, g17);\n    bool v2; // 0x40b950\n    if (v2 || v2) {\n        // 0x40b96c\n        return -0x8000000000000000;\n    }\n    int128_t v3 = __asm_movsd(0x43e0000000000000); // 0x40b95e\n    __asm_comisd(v3, v1);\n    int64_t v4 = __asm_cvttsd2si(v1); // 0x40b980\n    __asm_pxor(v3, v3);\n    int128_t v5 = __asm_cvtsi2sd(v4); // 0x40b98b\n    int128_t v6 = __asm_mulsd_6(__asm_subsd(v1, v5), 0x41cdcd6500000000); // 0x40b994\n    __asm_pxor(v5, v5);\n    int64_t v7 = __asm_cvttsd2si(v6); // 0x40b9a0\n    __asm_comisd(v6, __asm_cvtsi2sd(v7));\n    int64_t result = (v7 >> 63) + v4; // 0x40b9d2\n    if ((v7 >> 63 & -0x3b9aca00) + v7 < 0) {\n        // 0x40ba00\n        return result - 1;\n    }\n    // 0x40b96c\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ba10",
            "funcStartAddr": "40ba10",
            "funcEndAddr": "40ba6e",
            "decompiledFuncCode": "int64_t function_40ba10(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x40ba16\n    if (locale == NULL) {\n        // 0x40ba43\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x40ba16\n    bool v2; // 0x40ba10\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"C\"; // 0x40ba10\n    int64_t v5 = v1; // 0x40ba10\n    int64_t v6 = 2; // 0x40ba35\n    unsigned char v7 = *(char *)v5; // 0x40ba35\n    char v8 = *(char *)v4; // 0x40ba35\n    char v9 = v8; // 0x40ba35\n    bool v10 = false; // 0x40ba35\n    while (v7 == v8) {\n        // 0x40ba28\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x40ba41\n    int64_t v13 = v1; // 0x40ba41\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x40ba43\n        return 0;\n    }\n    int64_t v14 = 6; // 0x40ba41\n    unsigned char v15 = *(char *)v13; // 0x40ba5d\n    char v16 = *(char *)v12; // 0x40ba5d\n    char v17 = v16; // 0x40ba5d\n    bool v18 = false; // 0x40ba5d\n    while (v15 == v16) {\n        // 0x40ba50\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_40ba70",
            "funcStartAddr": "40ba70",
            "funcEndAddr": "40bfd2",
            "decompiledFuncCode": "int64_t function_40ba70(void) {\n    char * v1 = nl_langinfo(14); // 0x40ba86\n    char * v2 = g68; // 0x40ba8b\n    char * v3; // 0x40ba70\n    int64_t v4; // 0x40ba70\n    int64_t v5; // 0x40ba70\n    int64_t v6; // 0x40ba70\n    int64_t v7; // 0x40ba70\n    int32_t size; // 0x40ba70\n    int32_t size2; // 0x40ba70\n    int32_t len; // 0x40bb42\n    int64_t v8; // 0x40bb42\n    char * env_val; // 0x40bb2d\n    if (v2 == NULL) {\n        // 0x40bb28\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x40bb95;\n        } else {\n            // 0x40bb3a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x40bb95;\n            } else {\n                // 0x40bb3f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40bb2d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40bfc5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x40bb95;\n                    } else {\n                        // 0x40bf39\n                        size2 = len + 14;\n                        goto lab_0x40bb5b;\n                    }\n                } else {\n                    goto lab_0x40bb5b;\n                }\n            }\n        }\n    } else {\n        // 0x40ba70\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40baaa;\n    }\n  lab_0x40bddc:;\n    // 0x40bddc\n    struct _IO_FILE * stream; // 0x40bc1b\n    int32_t v10 = __uflow(stream); // 0x40bddf\n    int64_t v11; // 0x40ba70\n    int64_t v12 = v11; // 0x40bde9\n    int64_t v13; // 0x40ba70\n    int64_t v14 = v13; // 0x40bde9\n    int32_t v15 = v10; // 0x40bde9\n    int64_t v16; // 0x40ba70\n    int64_t v17 = v16; // 0x40bde9\n    int64_t v18 = v11; // 0x40bde9\n    int64_t v19 = v13; // 0x40bde9\n    int64_t v20 = v16; // 0x40bde9\n    if (v10 == -1) {\n        // break -> 0x40bdef\n        goto lab_0x40bdef;\n    }\n    goto lab_0x40bc69;\n  lab_0x40bc5e:;\n    // 0x40bc5e\n    int64_t v90; // 0x40ba70\n    int64_t * v32; // 0x40bc50\n    *v32 = v90 + 1;\n    int64_t v89; // 0x40ba70\n    v12 = v89;\n    int64_t v91; // 0x40ba70\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x40ba70\n    v17 = v92;\n    goto lab_0x40bc69;\n  lab_0x40bc69:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x40ba70\n    int32_t v25; // bp-120, 0x40ba70\n    int32_t v26; // bp-184, 0x40ba70\n    int64_t v27; // 0x40bc1b\n    int64_t v28; // 0x40bc38\n    int64_t v29; // 0x40bc3d\n    int64_t * v30; // 0x40bc54\n    switch (c) {\n        case 32: {\n            goto lab_0x40bc50;\n        }\n        case 10: {\n            goto lab_0x40bc50;\n        }\n        case 9: {\n            goto lab_0x40bc50;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x40be41\n            int32_t v33; // 0x40ba70\n            char v34; // 0x40ba70\n            int32_t v35; // 0x40be4e\n            if (v31 < *v30) {\n                // 0x40be20\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40be4b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x40be41\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x40be20\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40be4b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x40be30\n                v36 = v33;\n            }\n            // 0x40bf1f\n            if (v36 == -1) {\n                // break -> 0x40bdef\n                break;\n            }\n            goto lab_0x40bc50;\n        }\n        default: {\n            // 0x40bc7f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40bdef\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x40bca8\n            int64_t v39 = v37 + 4; // 0x40bcaa\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x40bcb6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x40bcb8\n            while (v41 == 0) {\n                // 0x40bca8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x40bcd6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x40bce2\n            int64_t v45 = v43 + 4; // 0x40bce4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x40bcf0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x40bcf2\n            while (v47 == 0) {\n                // 0x40bce2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40bcdf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x40bd08\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x40bd18\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40bd1c\n            int64_t v52 = v51 + v48; // 0x40bd25\n            int64_t * mem; // 0x40ba70\n            int64_t v53; // 0x40ba70\n            int64_t v54; // 0x40ba70\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40be5b\n                int64_t v56 = v55 + 3; // 0x40be67\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x40bd41\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x40bd50\n            if (mem == NULL) {\n                // 0x40bf7c\n                free((int64_t *)v21);\n                function_40bff0(v27, v53);\n                v24 = (int64_t)&g16;\n                goto lab_0x40bbf4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x40bd68\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x40bd72\n            uint32_t v62 = (int32_t)v59; // 0x40bd75\n            int64_t v63; // 0x40ba70\n            if (v62 >= 8) {\n                // 0x40be84\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40be9e\n                int64_t v66 = v61 - v65; // 0x40bea2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40bead\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40bebe\n                    int64_t v70 = v69 & 0xffffffff; // 0x40bebe\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40bebb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40bf4f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x40bd87\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40bd8b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40bd9b\n            int64_t v74 = v60 - 1; // 0x40bd9f\n            uint32_t v75 = (int32_t)v73; // 0x40bda4\n            int64_t v76; // 0x40ba70\n            if (v75 >= 8) {\n                // 0x40bed2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40bedc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40beec\n                int64_t v80 = v74 - v79; // 0x40bef0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40befb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40bf0b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x40bf09\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x40bf66\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40bf6e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x40bdb6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40bdba\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x40bfb3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40bdce\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40bc5e;\n            } else {\n                goto lab_0x40bddc;\n            }\n        }\n    }\n  lab_0x40bc50:;\n    int64_t v93 = v23; // 0x40ba70\n    int64_t v94 = v22; // 0x40ba70\n    int64_t v95 = v21; // 0x40ba70\n    goto lab_0x40bc50_2;\n  lab_0x40bb95:;\n    int64_t * mem3 = malloc(size); // 0x40bb95\n    int64_t v97 = (int64_t)&g16; // 0x40bba0\n    int64_t v98; // 0x40ba70\n    int64_t path; // 0x40ba70\n    if (mem3 == NULL) {\n        goto lab_0x40bb72;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x40bb95\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x40bbb6;\n    }\n  lab_0x40baaa:;\n    int64_t str = v1 == NULL ? (int64_t)&g16 : (int64_t)v1; // 0x40ba9d\n    char v100 = *v3; // 0x40baaa\n    int64_t v101; // 0x40ba70\n    if (v100 == 0) {\n        // 0x40bb04\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x40ba70\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x40ba70\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x40baf0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x40baf7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x40bac0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40bacd\n        char v107 = *(char *)v106; // 0x40bad2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x40bb04\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40badb\n    v104 = v103 + 1;\n  lab_0x40baf7:\n    // 0x40bb04\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x40bb72:;\n    char * v108 = (char *)v97;\n    g68 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40baaa;\n  lab_0x40bbb6:;\n    int64_t v109 = v98 + path; // 0x40bbb6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x40bbe2\n    v24 = (int64_t)&g16;\n    if (fd >= 0) {\n        // 0x40bc11\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40bf42\n            close(fd);\n            v24 = (int64_t)&g16;\n        } else {\n            // 0x40bc35\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x40bc50_2:;\n                uint64_t v96 = *v32; // 0x40bc50\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40bddc;\n                } else {\n                    goto lab_0x40bc5e;\n                }\n            }\n          lab_0x40bdef:\n            // 0x40bdef\n            function_40bff0(v27, v19);\n            v24 = (int64_t)&g16;\n            if (v18 != 0) {\n                // 0x40be0e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x40bbf4;\n  lab_0x40bb5b:;\n    int64_t * mem4 = malloc(size2); // 0x40bb5b\n    v97 = (int64_t)&g16;\n    if (mem4 != NULL) {\n        // 0x40bc01\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x40bbb6;\n    } else {\n        goto lab_0x40bb72;\n    }\n  lab_0x40bbf4:\n    // 0x40bbf4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x40bb72;\n}\n"
        },
        {
            "funcName": "function_40bfe0",
            "funcStartAddr": "40bfe0",
            "funcEndAddr": "40bfee",
            "decompiledFuncCode": "int64_t function_40bfe0(int64_t a1, int64_t a2) {\n    // 0x40bfe0\n    int64_t v1; // 0x40bfe0\n    return function_40a6a0(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_40bff0",
            "funcStartAddr": "40bff0",
            "funcEndAddr": "40c06b",
            "decompiledFuncCode": "int64_t function_40bff0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40bff7\n    if (fileno(stream) < 0) {\n        // 0x40c057\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40c00a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40c03b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x40c057\n            return fclose(stream);\n        }\n    }\n    // 0x40c00c\n    if ((int32_t)function_40c070(a1, v1) == 0) {\n        // 0x40c057\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x40c018\n    int32_t v3 = *v2; // 0x40c020\n    int64_t result = fclose(stream); // 0x40c02e\n    if (v3 != 0) {\n        // 0x40c060\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x40c030\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c070",
            "funcStartAddr": "40c070",
            "funcEndAddr": "40c0b0",
            "decompiledFuncCode": "int64_t function_40c070(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40c08a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40c08a\n        return fflush(stream);\n    }\n    // 0x40c098\n    function_40c0b0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_40c0b0",
            "funcStartAddr": "40c0b0",
            "funcEndAddr": "40c107",
            "decompiledFuncCode": "int64_t function_40c0b0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x40c0b0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40c0ba\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40c0eb\n    int64_t result = -1; // 0x40c0f4\n    if (v1 != -1) {\n        // 0x40c0f6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x40c102\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c110",
            "funcStartAddr": "40c110",
            "funcEndAddr": "40c16d",
            "decompiledFuncCode": "int64_t function_40c110(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40c110\n    return function_401930();\n}\n"
        },
        {
            "funcName": "function_40c170",
            "funcStartAddr": "40c170",
            "funcEndAddr": "40c171",
            "decompiledFuncCode": "int64_t function_40c170(void) {\n    // 0x40c170\n    int64_t result; // 0x40c170\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c180",
            "funcStartAddr": "40c180",
            "funcEndAddr": "40c198",
            "decompiledFuncCode": "int64_t function_40c180(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40c180\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g22);\n}\n"
        },
        {
            "funcName": "function_40c198",
            "funcStartAddr": "40c198",
            "funcEndAddr": "40c1b8",
            "decompiledFuncCode": "int64_t function_40c198(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g18; // 0x40c1a2\n    while (*(int64_t *)v1 != -1) {\n        // 0x40c1a3\n        v1 -= 8;\n    }\n    // 0x40c1b4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_tail.elf"
}