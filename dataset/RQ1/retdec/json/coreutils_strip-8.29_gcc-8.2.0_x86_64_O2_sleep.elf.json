{
    "funcInfo": [
        {
            "funcName": "function_401630",
            "funcStartAddr": "401630",
            "funcEndAddr": "401635",
            "decompiledFuncCode": "int64_t function_401630(void) {\n    // 0x401630\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401635",
            "funcStartAddr": "401635",
            "funcEndAddr": "40163a",
            "decompiledFuncCode": "int64_t function_401635(void) {\n    // 0x401635\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40163a",
            "funcStartAddr": "40163a",
            "funcEndAddr": "40163f",
            "decompiledFuncCode": "int64_t function_40163a(void) {\n    // 0x40163a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40163f",
            "funcStartAddr": "40163f",
            "funcEndAddr": "401644",
            "decompiledFuncCode": "int64_t function_40163f(void) {\n    // 0x40163f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401644",
            "funcStartAddr": "401644",
            "funcEndAddr": "401649",
            "decompiledFuncCode": "int64_t function_401644(void) {\n    // 0x401644\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401649",
            "funcStartAddr": "401649",
            "funcEndAddr": "40164e",
            "decompiledFuncCode": "int64_t function_401649(void) {\n    // 0x401649\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401650",
            "funcStartAddr": "401650",
            "funcEndAddr": "401890",
            "decompiledFuncCode": "int64_t function_401650(int64_t a1, int64_t a2) {\n    // 0x401650\n    int128_t v1; // 0x401650\n    int128_t v2 = v1;\n    int64_t v3 = a1 & 0xffffffff; // 0x401656\n    function_401e80(a2);\n    setlocale(LC_ALL, (char *)&g12);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v4; // 0x401650\n    function_405b70(0x401cd0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v4);\n    function_401d70(v3, a2, \"sleep\", \"GNU coreutils\", (int64_t)g19, 0x401970);\n    int64_t v5 = function_405140(v3, a2, (int64_t *)&g12, &g2, 0, 0x401970); // 0x4016e0\n    if ((int32_t)v5 != -1) {\n        // 0x401857\n        function_401970(1);\n        // UNREACHABLE\n    }\n    if ((int32_t)a1 == 1) {\n        // 0x401838\n        error(0, (int32_t)\"missing operand\" ^ (int32_t)\"missing operand\", dcgettext(NULL, \"missing operand\", 5));\n        // 0x401857\n        function_401970(1);\n        // UNREACHABLE\n    }\n    uint32_t v6 = *(int32_t *)0x60923c; // 0x4016f7\n    uint64_t v7 = (int64_t)v6; // 0x4016f7\n    bool v8; // 0x401650\n    int64_t v9; // 0x401650\n    int64_t v10; // 0x401650\n    int64_t v11; // 0x401650\n    int64_t v12; // 0x401650\n    int64_t v13; // 0x401650\n    int64_t v14; // 0x401650\n    int64_t v15; // 0x401650\n    int64_t v16; // 0x401650\n    int64_t v17; // 0x401650\n    int64_t v18; // 0x401650\n    char * v19; // bp-32, 0x401650\n    int64_t v20; // bp-40, 0x401650\n    int64_t v21; // 0x401650\n    int64_t v22; // 0x401650\n    int64_t v23; // 0x401791\n    int64_t * v24; // 0x401784\n    int64_t v25; // 0x401784\n    int64_t v26; // 0x401779\n    int128_t v27; // 0x401650\n    int128_t v28; // 0x401650\n    int128_t v29; // 0x401650\n    if (v3 > v7) {\n        // 0x401705\n        v23 = (int64_t)&v19;\n        v21 = 0;\n        v12 = 0x100000000 * v7 / 0x20000000 + a2;\n        v10 = 1;\n        while (true) {\n          lab_0x401784:\n            // 0x401784\n            v11 = v10;\n            v29 = v28;\n            v24 = (int64_t *)v12;\n            v25 = *v24;\n            int64_t v30 = function_404350(v25, (int64_t *)&v19, &v20, 0x401c40); // 0x401796\n            v8 = false;\n            if ((char)v30 == 0) {\n                uint32_t v31 = *__errno_location(); // 0x401735\n                v27 = v29;\n                v8 = v31 < 34;\n                if (v31 == 34) {\n                    goto lab_0x40179f;\n                } else {\n                    goto lab_0x40173a;\n                }\n            } else {\n                goto lab_0x40179f;\n            }\n        }\n      lab_0x401800:\n        // 0x401800\n        v22 = v26;\n        v16 = v15;\n        v18 = v17;\n        v14 = v13;\n        if ((char)v9 == 0) {\n            // 0x401857\n            function_401970(1);\n            // UNREACHABLE\n        }\n    } else {\n        // 0x40182c\n        v22 = __asm_movsd_1(__asm_pxor(v2, v2));\n        v16 = (int64_t)&g12;\n        v18 = a2;\n        v14 = v3;\n    }\n    // 0x401805\n    __asm_movsd(v22);\n    if ((int32_t)function_4042f0(v14, v18, v16) != 0) {\n        // 0x401861\n        error(1, *__errno_location(), dcgettext(NULL, \"cannot read realtime clock\", 5));\n        return &g50;\n    }\n    // 0x401814\n    return 0;\n  lab_0x40179f:;\n    int128_t v32 = __asm_movsd(v20); // 0x40179f\n    int128_t v33 = __asm_pxor(v29, v29); // 0x4017a5\n    __asm_comisd(v32, v33);\n    v27 = v33;\n    int64_t v34; // 0x401650\n    int128_t v35; // 0x401650\n    int128_t v36; // 0x401650\n    if (v8) {\n        goto lab_0x40173a;\n    } else {\n        int64_t v37 = (int64_t)v19; // 0x4017af\n        char v38 = *v19; // 0x4017b4\n        v35 = v32;\n        v36 = v33;\n        v15 = v37;\n        v34 = v11;\n        v17 = v23;\n        v13 = v25;\n        if (v38 == 0) {\n            goto lab_0x40176f;\n        } else {\n            // 0x4017bb\n            v27 = v33;\n            if (*(char *)(v37 + 1) != 0) {\n                goto lab_0x40173a;\n            } else {\n                if (v38 == 104) {\n                    // 0x40181f\n                    v35 = __asm_mulsd(v32, 0x40ac200000000000);\n                    v36 = v33;\n                    v15 = v37;\n                    v34 = v11;\n                    v17 = v23;\n                    v13 = v25;\n                    goto lab_0x40176f;\n                } else {\n                    if (v38 > 104) {\n                        if (v38 != 109) {\n                            // 0x4017f0\n                            v27 = v33;\n                            v35 = v32;\n                            v36 = v33;\n                            v15 = v37;\n                            v34 = v11;\n                            v17 = v23;\n                            v13 = v25;\n                            if (v38 != 115) {\n                                goto lab_0x40173a;\n                            } else {\n                                goto lab_0x40176f;\n                            }\n                        } else {\n                            // 0x4017e4\n                            v35 = __asm_mulsd(v32, 0x404e000000000000);\n                            v36 = v33;\n                            v15 = v37;\n                            v34 = v11;\n                            v17 = v23;\n                            v13 = v25;\n                            goto lab_0x40176f;\n                        }\n                    } else {\n                        // 0x4017cb\n                        v27 = v33;\n                        if (v38 != 100) {\n                            goto lab_0x40173a;\n                        } else {\n                            // 0x4017d3\n                            v35 = __asm_mulsd(v32, 0x40f5180000000000);\n                            v36 = v33;\n                            v15 = v37;\n                            v34 = v11;\n                            v17 = v23;\n                            v13 = v25;\n                            goto lab_0x40176f;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40173a:\n    // 0x40173a\n    function_403aa0(*v24);\n    char * format = dcgettext(NULL, \"invalid time interval %s\", 5); // 0x401751\n    error(0, (int32_t)\"invalid time interval %s\" ^ (int32_t)\"invalid time interval %s\", format);\n    v35 = __asm_movsd(v20);\n    v36 = v27;\n    v15 = (int64_t)format;\n    v34 = 0;\n    v17 = (int32_t)\"invalid time interval %s\" ^ (int32_t)\"invalid time interval %s\";\n    v13 = 0;\n    goto lab_0x40176f;\n  lab_0x40176f:\n    // 0x40176f\n    v9 = v34;\n    int64_t v39 = v12 + 8; // 0x401775\n    v26 = __asm_movsd_1(__asm_addsd(v35, v21));\n    v21 = v26;\n    v28 = v36;\n    v12 = v39;\n    v10 = v9;\n    if (v39 == a2 + 8 + 8 * (((v7 ^ 0xffffffff) + a1 & 0xffffffff) + (int64_t)v6)) {\n        // break -> 0x401800\n        goto lab_0x401800;\n    }\n    goto lab_0x401784;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401890",
            "funcEndAddr": "4018bb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401890\n    int64_t v1; // 0x401890\n    __libc_start_main(0x401650, (int32_t)a4, (char **)&v1, (void (*)())0x405b00, (void (*)())0x405b60, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4018bb",
            "funcStartAddr": "4018bb",
            "funcEndAddr": "4018da",
            "decompiledFuncCode": "int64_t function_4018bb(void) {\n    // 0x4018bb\n    return &g29;\n}\n"
        },
        {
            "funcName": "function_4018da",
            "funcStartAddr": "4018da",
            "funcEndAddr": "401911",
            "decompiledFuncCode": "int64_t function_4018da(void) {\n    // 0x4018da\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401911",
            "funcStartAddr": "401911",
            "funcEndAddr": "401968",
            "decompiledFuncCode": "int64_t function_401911(void) {\n    // 0x401911\n    if (g33 != 0) {\n        // 0x401967\n        int64_t result; // 0x401911\n        return result;\n    }\n    int64_t v1 = g34; // 0x401944\n    int64_t result2; // 0x401956\n    if (g34 >= ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x401956\n        result2 = function_4018bb();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g16 - (int64_t)&g15 >> 3) - 1) {\n        // 0x401946\n        v1++;\n    }\n    // 0x40193a\n    g34 = v1;\n    // 0x401956\n    result2 = function_4018bb();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401968",
            "funcStartAddr": "401968",
            "funcEndAddr": "40196d",
            "decompiledFuncCode": "int64_t function_401968(void) {\n    // 0x401968\n    return function_4018da();\n}\n"
        },
        {
            "funcName": "function_401970",
            "funcStartAddr": "401970",
            "funcEndAddr": "401c3d",
            "decompiledFuncCode": "int64_t function_401970(int64_t a1) {\n    int32_t status = a1; // 0x401986\n    if (status != 0) {\n        // 0x40198a\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4019af\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4019b6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s NUMBER[SUFFIX]...\\n  or:  %s OPTION\\nPause for NUMBER seconds.  SUFFIX may be 's' for seconds (the default),\\n'm' for minutes, 'h' for hours or 'd' for days.  Unlike most implementations\\nthat require NUMBER be an integer, here NUMBER may be an arbitrary floating\\npoint number.  Given two or more arguments, pause for the amount of time\\nspecified by the sum of their values.\\n\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g30);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g30);\n    int64_t v1 = &g1; // bp-136, 0x401a1d\n    bool v2; // 0x401970\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x401aa0\n    int64_t v6 = *(int64_t *)v5; // 0x401aa4\n    int64_t v7 = 6; // 0x401aaa\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"sleep\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x401ab6\n        char v11 = *(char *)v9; // 0x401ab6\n        char v12 = v11; // 0x401ab6\n        bool v13 = false; // 0x401ab6\n        while (v10 == v11) {\n            // 0x401aac\n            v7--;\n            int64_t v14 = v9 + v3; // 0x401ab6\n            int64_t v15 = v8 + v3; // 0x401ab6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x401ac2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x401ac2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x401bd4;\n        } else {\n            // 0x401bbe\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401c13\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401b24;\n            } else {\n                goto lab_0x401bd4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x401b24;\n        } else {\n            // 0x401b0a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401c13\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401b24;\n            } else {\n                goto lab_0x401b24;\n            }\n        }\n    }\n  lab_0x401bd4:\n    // 0x401bd4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401b64\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4019af\n    exit(status);\n    // UNREACHABLE\n  lab_0x401b24:\n    // 0x401b24\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401b64\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4019af\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401c40",
            "funcStartAddr": "401c40",
            "funcEndAddr": "401caa",
            "decompiledFuncCode": "int64_t function_401c40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x401c40\n    int128_t v1; // 0x401c40\n    int128_t v2 = v1;\n    struct __locale_struct * v3 = g35;\n    if (v3 != NULL) {\n        // 0x401c64\n        return strtod_l((char *)a1, (char **)a2, v3);\n    }\n    struct __locale_struct * v4 = newlocale(0x1fbf, \"C\", NULL); // 0x401c9c\n    g35 = v4;\n    if (v4 != NULL) {\n        // 0x401c64\n        return strtod_l((char *)a1, (char **)a2, v4);\n    }\n    if (a2 != 0) {\n        // 0x401c7d\n        *(int64_t *)a2 = a1;\n    }\n    // 0x401c80\n    __asm_pxor(v2, v2);\n    return (int64_t)v4;\n}\n"
        },
        {
            "funcName": "function_401cb0",
            "funcStartAddr": "401cb0",
            "funcEndAddr": "401cb8",
            "decompiledFuncCode": "int64_t function_401cb0(int64_t a1) {\n    // 0x401cb0\n    g37 = a1;\n    int64_t result; // 0x401cb0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401cc0",
            "funcStartAddr": "401cc0",
            "funcEndAddr": "401cc8",
            "decompiledFuncCode": "int64_t function_401cc0(int64_t a1) {\n    // 0x401cc0\n    g36 = a1;\n    int64_t result; // 0x401cc0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401cd0",
            "funcStartAddr": "401cd0",
            "funcEndAddr": "401d6e",
            "decompiledFuncCode": "int64_t function_401cd0(void) {\n    // 0x401cd0\n    int32_t * err_num; // 0x401ce6\n    if ((int32_t)function_4052f0((int64_t)g30) == 0) {\n        goto lab_0x401cfc;\n    } else {\n        // 0x401ce6\n        err_num = __errno_location();\n        if (g36 == 0) {\n            goto lab_0x401d13;\n        } else {\n            // 0x401cf7\n            if (*err_num != 32) {\n                goto lab_0x401d13;\n            } else {\n                goto lab_0x401cfc;\n            }\n        }\n    }\n  lab_0x401cfc:;\n    int64_t result = function_4052f0((int64_t)g32); // 0x401d03\n    if ((int32_t)result == 0) {\n        // 0x401d0c\n        return result;\n    }\n    // 0x401d4e\n    _exit(g20);\n    // UNREACHABLE\n  lab_0x401d13:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x401d1f\n    if (g37 == 0) {\n        // 0x401d59\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x401d33\n        error(0, *err_num, \"%s: %s\", (char *)function_4038f0((int64_t)g37), v1);\n    }\n    // 0x401d4e\n    _exit(g20);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d70",
            "funcStartAddr": "401d70",
            "funcEndAddr": "401e72",
            "decompiledFuncCode": "int64_t function_401d70(int64_t a1, int64_t a2, char * a3, char * a4, int64_t a5, int64_t a6) {\n    // 0x401d70\n    int64_t v1; // 0x401d70\n    if ((char)v1 != 0) {\n        // 0x401d83\n        int128_t v2; // 0x401d70\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int32_t v3 = g27; // 0x401dba\n    g27 = 0;\n    if ((int32_t)a1 != 2) {\n        // 0x401dcf\n        g27 = v3;\n        g28 = 0;\n        int64_t result; // 0x401d70\n        return result;\n    }\n    int64_t result2 = function_405140(a1, a2, &g3, (int64_t *)&g4, 0, a6); // 0x401e09\n    int32_t v4 = result2; // 0x401e0e\n    switch (v4) {\n        default: {\n            // 0x401e18\n            if (v4 == 118) {\n                int64_t v5 = 48; // bp-240, 0x401e3a\n                function_403ec0((int64_t)g30, (int64_t)a3, (int64_t)a4, a5, &v5, a6);\n                exit(0);\n                // UNREACHABLE\n            }\n        }\n        case -1: {\n        }\n        case 104: {\n            // 0x401dcf\n            g27 = v3;\n            g28 = 0;\n            return result2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_401e80",
            "funcStartAddr": "401e80",
            "funcEndAddr": "401f19",
            "decompiledFuncCode": "int64_t function_401e80(int64_t str) {\n    // 0x401e80\n    if (str == 0) {\n        // 0x401ef9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x401e8e\n    int64_t result = (int64_t)found_char_pos; // 0x401e8e\n    if (found_char_pos == NULL) {\n        // 0x401ee9\n        g38 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x401e98\n    if (v1 - str < 7) {\n        // 0x401ee9\n        g38 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x401ea8\n    bool v2; // 0x401e80\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x401e80\n    int64_t v5 = result - 6; // 0x401e80\n    int64_t v6 = 7; // 0x401eb6\n    unsigned char v7 = *(char *)v5; // 0x401eb6\n    char v8 = *(char *)v4; // 0x401eb6\n    char v9 = v8; // 0x401eb6\n    bool v10 = false; // 0x401eb6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x401ec0\n    int64_t v13 = v1; // 0x401ec0\n    int64_t v14 = 3; // 0x401ec0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x401ee9\n        g38 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x401ed2\n    char v16 = *(char *)v12; // 0x401ed2\n    char v17 = v16; // 0x401ed2\n    bool v18 = false; // 0x401ed2\n    while (v15 == v16) {\n        // 0x401ec2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x401edc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x401ede\n        v20 = result + 4;\n        g29 = v20;\n    }\n    // 0x401ee9\n    g38 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_401f20",
            "funcStartAddr": "401f20",
            "funcEndAddr": "402012",
            "decompiledFuncCode": "int64_t function_401f20(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x401f34\n    int64_t result = (int64_t)v1; // 0x401f34\n    if (result != a1) {\n        // 0x401f41\n        return result;\n    }\n    int64_t v2 = function_405470(); // 0x401f50\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402006\n    if (v3 == 85) {\n        // 0x401f60\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x401ff8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x401f8e\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x401f9b\n        // 0x401f41\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x401ff8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x401fdd\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x401fea\n    // 0x401f41\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402020",
            "funcStartAddr": "402020",
            "funcEndAddr": "402077",
            "decompiledFuncCode": "int64_t function_402020(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402020\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402068\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402077",
            "funcStartAddr": "402077",
            "funcEndAddr": "403241",
            "decompiledFuncCode": "int64_t function_402077(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4020c1\n    int64_t v3 = 0; // 0x4020c1\n    int64_t v4; // 0x402077\n    int64_t v5; // 0x402077\n    int64_t v6; // 0x402077\n    int64_t v7; // 0x402077\n    int64_t v8; // 0x402077\n    int64_t v9; // 0x402077\n    int64_t v10; // 0x402077\n    int64_t v11; // 0x402077\n    int64_t v12; // 0x402077\n    int64_t v13; // 0x402077\n    int64_t v14; // 0x402077\n    int64_t v15; // 0x402077\n    int64_t v16; // 0x402077\n    int64_t v17; // 0x402077\n    int64_t v18; // 0x402077\n    int64_t result; // 0x402077\n    int64_t v19; // 0x402077\n    int32_t wc; // bp+132, 0x402077\n    int64_t ps; // bp+136, 0x402077\n    char v20; // 0x402630\n    int64_t v21; // 0x402630\n    int64_t v22; // 0x4029d8\n    int64_t v23; // 0x402077\n    int64_t v24; // 0x4029f7\n    int32_t v25; // 0x402077\n    while (true) {\n      lab_0x4020c8_2:\n        // 0x4020c8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402077\n        int64_t v27; // 0x4020fc\n        while (true) {\n          lab_0x4020c8:\n            // 0x4020c8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4020d3\n            if (v15 == -1) {\n                // 0x4020d5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4020e3\n            if (v28) {\n                // break (via goto) -> 0x402848\n                goto lab_0x402848;\n            }\n            // 0x4020ec\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g49 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4026db\n                    if (v25 % 2 == 0) {\n                        goto lab_0x402221;\n                    }\n                    // 0x402afd\n                    v26 = v5 + 1;\n                    goto lab_0x4020c8;\n                }\n                case 7: {\n                    goto lab_0x402221;\n                }\n                case 8: {\n                    goto lab_0x402221;\n                }\n                case 9: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x402221;\n                }\n                case 12: {\n                    goto lab_0x402221;\n                }\n                case 13: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x4021ed;\n                }\n                case 36: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x402221;\n                }\n                case 38: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x402221;\n                }\n                case 44: {\n                    goto lab_0x402221;\n                }\n                case 45: {\n                    goto lab_0x402221;\n                }\n                case 46: {\n                    goto lab_0x402221;\n                }\n                case 47: {\n                    goto lab_0x402221;\n                }\n                case 48: {\n                    goto lab_0x402221;\n                }\n                case 49: {\n                    goto lab_0x402221;\n                }\n                case 50: {\n                    goto lab_0x402221;\n                }\n                case 51: {\n                    goto lab_0x402221;\n                }\n                case 52: {\n                    goto lab_0x402221;\n                }\n                case 53: {\n                    goto lab_0x402221;\n                }\n                case 54: {\n                    goto lab_0x402221;\n                }\n                case 55: {\n                    goto lab_0x402221;\n                }\n                case 56: {\n                    goto lab_0x402221;\n                }\n                case 57: {\n                    goto lab_0x402221;\n                }\n                case 58: {\n                    goto lab_0x402221;\n                }\n                case 59: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x402221;\n                }\n                case 66: {\n                    goto lab_0x402221;\n                }\n                case 67: {\n                    goto lab_0x402221;\n                }\n                case 68: {\n                    goto lab_0x402221;\n                }\n                case 69: {\n                    goto lab_0x402221;\n                }\n                case 70: {\n                    goto lab_0x402221;\n                }\n                case 71: {\n                    goto lab_0x402221;\n                }\n                case 72: {\n                    goto lab_0x402221;\n                }\n                case 73: {\n                    goto lab_0x402221;\n                }\n                case 74: {\n                    goto lab_0x402221;\n                }\n                case 75: {\n                    goto lab_0x402221;\n                }\n                case 76: {\n                    goto lab_0x402221;\n                }\n                case 77: {\n                    goto lab_0x402221;\n                }\n                case 78: {\n                    goto lab_0x402221;\n                }\n                case 79: {\n                    goto lab_0x402221;\n                }\n                case 80: {\n                    goto lab_0x402221;\n                }\n                case 81: {\n                    goto lab_0x402221;\n                }\n                case 82: {\n                    goto lab_0x402221;\n                }\n                case 83: {\n                    goto lab_0x402221;\n                }\n                case 84: {\n                    goto lab_0x402221;\n                }\n                case 85: {\n                    goto lab_0x402221;\n                }\n                case 86: {\n                    goto lab_0x402221;\n                }\n                case 87: {\n                    goto lab_0x402221;\n                }\n                case 88: {\n                    goto lab_0x402221;\n                }\n                case 89: {\n                    goto lab_0x402221;\n                }\n                case 90: {\n                    goto lab_0x402221;\n                }\n                case 91: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x402221;\n                }\n                case 94: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x402221;\n                }\n                case 96: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x402221;\n                }\n                case 98: {\n                    goto lab_0x402221;\n                }\n                case 99: {\n                    goto lab_0x402221;\n                }\n                case 100: {\n                    goto lab_0x402221;\n                }\n                case 101: {\n                    goto lab_0x402221;\n                }\n                case 102: {\n                    goto lab_0x402221;\n                }\n                case 103: {\n                    goto lab_0x402221;\n                }\n                case 104: {\n                    goto lab_0x402221;\n                }\n                case 105: {\n                    goto lab_0x402221;\n                }\n                case 106: {\n                    goto lab_0x402221;\n                }\n                case 107: {\n                    goto lab_0x402221;\n                }\n                case 108: {\n                    goto lab_0x402221;\n                }\n                case 109: {\n                    goto lab_0x402221;\n                }\n                case 110: {\n                    goto lab_0x402221;\n                }\n                case 111: {\n                    goto lab_0x402221;\n                }\n                case 112: {\n                    goto lab_0x402221;\n                }\n                case 113: {\n                    goto lab_0x402221;\n                }\n                case 114: {\n                    goto lab_0x402221;\n                }\n                case 115: {\n                    goto lab_0x402221;\n                }\n                case 116: {\n                    goto lab_0x402221;\n                }\n                case 117: {\n                    goto lab_0x402221;\n                }\n                case 118: {\n                    goto lab_0x402221;\n                }\n                case 119: {\n                    goto lab_0x402221;\n                }\n                case 120: {\n                    goto lab_0x402221;\n                }\n                case 121: {\n                    goto lab_0x402221;\n                }\n                case 122: {\n                    goto lab_0x402221;\n                }\n                case 123: {\n                    goto lab_0x4021c5;\n                }\n                case 124: {\n                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4021c5;\n                }\n                case 126: {\n                    goto lab_0x4021ed;\n                }\n                default: {\n                    goto lab_0x4025c5;\n                }\n            }\n        }\n      lab_0x4025c5:\n        if (v23 != 1) {\n            // 0x402930\n            ps = 0;\n            int64_t len = v15; // 0x402940\n            if (v15 == -1) {\n                // 0x402942\n                len = strlen((char *)str);\n            }\n            // 0x40296e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x4029cf:\n                // 0x4029cf\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x4029d4\n                int64_t v30 = v29 + str;\n                v24 = function_4051c0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x402f4a_2;\n                    }\n                    case -1: {\n                        goto lab_0x402f4a_2;\n                    }\n                    case -2: {\n                        // 0x40302d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403067\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40306a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403077\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403070\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x402f4a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x402f4a_2;\n                    }\n                    case 1: {\n                        goto lab_0x4029a0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x402a4c\n                        char v34 = *(char *)v33; // 0x402a5d\n                        unsigned char v35; // 0x402077\n                        if (v34 < 125) {\n                            // 0x402a68\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x402a7f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x402a50\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x402a5d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x402a68\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x402a7f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x402a50\n                            v33++;\n                        }\n                        goto lab_0x4029a0;\n                    }\n                }\n            }\n            goto lab_0x402f4a_2;\n        } else {\n            // 0x402614\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x402221;\n        }\n    }\n  lab_0x402848:\n    // 0x402848\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40314a\n        if (v8 > result) {\n            // 0x403153\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402477\n        return result;\n    }\n    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402221:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402230\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40243a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402331\n    char v40 = v20; // 0x402331\n    int64_t v41 = v38; // 0x402331\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402331\n    int64_t v43 = v36; // 0x402331\n    goto lab_0x4022ad;\n  lab_0x40243a_2:\n    // 0x402477\n    return function_402020(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x402f4a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x402221;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x402b1e\n        int64_t v50 = v5 + 1; // 0x402c01\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x402c08\n        char v52 = v20; // 0x402c08\n        int64_t v53 = result; // 0x402c08\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x402bd1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x402bd5\n            int64_t v56 = v54 + 1; // 0x402bda\n            int64_t v57 = v51 + 1; // 0x402c01\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x402bcc\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x402bd1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x402bd5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x4022ad;\n    }\n  lab_0x4029a0:\n    // 0x4029a0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x4029bf\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x4029c2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x402f4a\n        goto lab_0x402f4a_2;\n    }\n    goto lab_0x4029cf;\n  lab_0x4021ed:\n    // 0x4021ed\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40243a_2;\n    }\n    goto lab_0x402221;\n  lab_0x4021c5:;\n    bool v60 = v15 == 1; // 0x4021d0\n    if (v15 == -1) {\n        // 0x4021d2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4021de\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x402221;\n    } else {\n        goto lab_0x4021ed;\n    }\n  lab_0x4022ad:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4022b2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4022b6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4020c8_2;\n}\n"
        },
        {
            "funcName": "function_403250",
            "funcStartAddr": "403250",
            "funcEndAddr": "4033ee",
            "decompiledFuncCode": "int64_t function_403250(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403252\n    int32_t * v3 = __errno_location(); // 0x40326c\n    int64_t v4 = (int64_t)g22; // 0x403271\n    int32_t v5 = *v3; // 0x40327b\n    int64_t v6 = v4; // 0x403291\n    if (v2 >= (int64_t)*(int32_t *)&g25) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4033e9\n            function_4042b0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4032a0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4032a7\n        int64_t v9; // 0x403250\n        if (g22 == &g23) {\n            int64_t v10 = function_4040c0(0, v8); // 0x4033ca\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g23); // 0x4033cf\n            *(int64_t *)&g22 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4040c0(v4, v8); // 0x4032bb\n            *(int64_t *)&g22 = v12;\n            v9 = v12;\n        }\n        // 0x4032ca\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g25; // 0x4032ca\n        int32_t v14 = v7; // 0x4032d1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g25 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403301\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40330b\n    int64_t * v17 = (int64_t *)v15; // 0x40330e\n    uint64_t v18 = *v17; // 0x40330e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403311\n    int64_t result = *v19; // 0x403311\n    int64_t v20; // 0x403250\n    uint64_t v21 = function_402020(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403334\n    if (v18 > v21) {\n        // 0x4033ab\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403347\n    *v17 = v22;\n    if (result != (int64_t)&g39) {\n        // 0x403357\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404060(v22); // 0x403371\n    *v19 = result2;\n    int64_t v23; // 0x403250\n    function_402020(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x4033ab\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4033f0",
            "funcStartAddr": "4033f0",
            "funcEndAddr": "403424",
            "decompiledFuncCode": "int64_t function_4033f0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4033f7\n    int64_t result = function_404260(a1 == 0 ? (int64_t)&g40 : a1, 56); // 0x403416\n    return result;\n}\n"
        },
        {
            "funcName": "function_403430",
            "funcStartAddr": "403430",
            "funcEndAddr": "40343f",
            "decompiledFuncCode": "int64_t function_403430(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g40 : a1); // 0x40343c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403440",
            "funcStartAddr": "403440",
            "funcEndAddr": "40344f",
            "decompiledFuncCode": "int64_t function_403440(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 : a1; // 0x403448\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g40;\n}\n"
        },
        {
            "funcName": "function_403450",
            "funcStartAddr": "403450",
            "funcEndAddr": "403483",
            "decompiledFuncCode": "int64_t function_403450(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 + 8 : a1 + 8; // 0x403469\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40346e\n    uint32_t v3 = *v2; // 0x40346e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403472\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403490",
            "funcStartAddr": "403490",
            "funcEndAddr": "4034a3",
            "decompiledFuncCode": "int64_t function_403490(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g40 + 4 : a1 + 4); // 0x40349c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4034b0",
            "funcStartAddr": "4034b0",
            "funcEndAddr": "4034db",
            "decompiledFuncCode": "int64_t function_4034b0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 : a1; // 0x4034b8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4034d5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4034cc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g40;\n}\n"
        },
        {
            "funcName": "function_4034e0",
            "funcStartAddr": "4034e0",
            "funcEndAddr": "403552",
            "decompiledFuncCode": "int64_t function_4034e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g40 : a5; // 0x403502\n    int32_t * v2 = __errno_location(); // 0x40350b\n    uint32_t v3 = *(int32_t *)v1; // 0x40352b\n    int64_t result = function_402020(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40353a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403560",
            "funcStartAddr": "403560",
            "funcEndAddr": "403641",
            "decompiledFuncCode": "int64_t function_403560(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g40 : a4; // 0x403582\n    int32_t * v2 = __errno_location(); // 0x403588\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4035a7\n    int32_t * v4 = (int32_t *)v1; // 0x4035aa\n    int64_t v5 = function_402020(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4035c5\n    int64_t v6 = v5 + 1; // 0x4035ca\n    int64_t result = function_404060(v6); // 0x4035df\n    function_402020(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403624\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40362d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403650",
            "funcStartAddr": "403650",
            "funcEndAddr": "40365a",
            "decompiledFuncCode": "int64_t function_403650(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403650\n    return function_403560(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403660",
            "funcStartAddr": "403660",
            "funcEndAddr": "4036f5",
            "decompiledFuncCode": "int64_t function_403660(void) {\n    uint32_t v1 = *(int32_t *)&g25; // 0x403660\n    int64_t v2 = v1; // 0x403660\n    int64_t v3 = v2; // 0x403674\n    if (v1 >= 2) {\n        int64_t v4 = &g25;\n        int64_t v5 = v4 + 16; // 0x403693\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g50;\n        while (v5 != (int64_t)g22 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403690\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g50;\n        }\n    }\n    int64_t v6 = v3; // 0x4036ad\n    if (g23 != 0x6092a0) {\n        // 0x4036af\n        free((int64_t *)g23);\n        g23 = 256;\n        *(int64_t *)&g24 = (int64_t)&g39;\n        v6 = &g50;\n    }\n    int64_t result = v6; // 0x4036d1\n    if (g22 != &g23) {\n        // 0x4036d3\n        free(g22);\n        *(int64_t *)&g22 = (int64_t)&g23;\n        result = &g50;\n    }\n    // 0x4036e6\n    *(int32_t *)&g25 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403700",
            "funcStartAddr": "403700",
            "funcEndAddr": "403711",
            "decompiledFuncCode": "int64_t function_403700(void) {\n    // 0x403700\n    int64_t v1; // 0x403700\n    return function_403250(v1, v1, -1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_403720",
            "funcStartAddr": "403720",
            "funcEndAddr": "40372a",
            "decompiledFuncCode": "int64_t function_403720(void) {\n    // 0x403720\n    int64_t v1; // 0x403720\n    return function_403250(v1, v1, v1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_403730",
            "funcStartAddr": "403730",
            "funcEndAddr": "403746",
            "decompiledFuncCode": "int64_t function_403730(int64_t a1) {\n    // 0x403730\n    return function_403250(0, a1, -1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_403750",
            "funcStartAddr": "403750",
            "funcEndAddr": "403762",
            "decompiledFuncCode": "int64_t function_403750(int64_t a1, int64_t a2) {\n    // 0x403750\n    return function_403250(0, a1, a2, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_403770",
            "funcStartAddr": "403770",
            "funcEndAddr": "4037d8",
            "decompiledFuncCode": "int64_t function_403770(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403780\n    return function_403250((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4037e0",
            "funcStartAddr": "4037e0",
            "funcEndAddr": "403844",
            "decompiledFuncCode": "int64_t function_4037e0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4037f0\n    return function_403250((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403850",
            "funcStartAddr": "403850",
            "funcEndAddr": "40385c",
            "decompiledFuncCode": "int64_t function_403850(int64_t a1, int64_t a2) {\n    // 0x403850\n    return function_403770(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_403860",
            "funcStartAddr": "403860",
            "funcEndAddr": "40386f",
            "decompiledFuncCode": "int64_t function_403860(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403860\n    return function_4037e0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_403870",
            "funcStartAddr": "403870",
            "funcEndAddr": "4038e0",
            "decompiledFuncCode": "int64_t function_403870(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g40); // 0x40387d\n    int128_t v2 = __asm_movdqa(g41); // 0x403885\n    int128_t v3 = __asm_movdqa(g42); // 0x40388d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x4038a2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4038b8\n    uint32_t v6 = *v5; // 0x4038b8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4038bd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403250(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4038e0",
            "funcStartAddr": "4038e0",
            "funcEndAddr": "4038ed",
            "decompiledFuncCode": "int64_t function_4038e0(int64_t a1, int64_t a2) {\n    // 0x4038e0\n    return function_403870(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_4038f0",
            "funcStartAddr": "4038f0",
            "funcEndAddr": "403901",
            "decompiledFuncCode": "int64_t function_4038f0(int64_t a1) {\n    // 0x4038f0\n    return function_403870(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403910",
            "funcStartAddr": "403910",
            "funcEndAddr": "40391a",
            "decompiledFuncCode": "int64_t function_403910(void) {\n    // 0x403910\n    int64_t v1; // 0x403910\n    return function_403870(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403920",
            "funcStartAddr": "403920",
            "funcEndAddr": "40398e",
            "decompiledFuncCode": "int64_t function_403920(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x40393a\n    return function_403250(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403990",
            "funcStartAddr": "403990",
            "funcEndAddr": "4039fc",
            "decompiledFuncCode": "int64_t function_403990(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g40); // 0x403997\n    int128_t v2 = __asm_movdqa(g41); // 0x40399f\n    int128_t v3 = __asm_movdqa(g42); // 0x4039a7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x4039c9\n    if (a2 == 0 || a3 == 0) {\n        // 0x4039f7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4039da\n    return function_403250(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403a00",
            "funcStartAddr": "403a00",
            "funcEndAddr": "403a09",
            "decompiledFuncCode": "int64_t function_403a00(void) {\n    // 0x403a00\n    int64_t v1; // 0x403a00\n    return function_403990(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403a10",
            "funcStartAddr": "403a10",
            "funcEndAddr": "403a27",
            "decompiledFuncCode": "int64_t function_403a10(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403a10\n    return function_403990(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_403a30",
            "funcStartAddr": "403a30",
            "funcEndAddr": "403a43",
            "decompiledFuncCode": "int64_t function_403a30(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403a30\n    return function_403990(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_403a50",
            "funcStartAddr": "403a50",
            "funcEndAddr": "403a5a",
            "decompiledFuncCode": "int64_t function_403a50(void) {\n    // 0x403a50\n    int64_t v1; // 0x403a50\n    return function_403250(v1, v1, v1, &g21);\n}\n"
        },
        {
            "funcName": "function_403a60",
            "funcStartAddr": "403a60",
            "funcEndAddr": "403a72",
            "decompiledFuncCode": "int64_t function_403a60(int64_t a1, int64_t a2) {\n    // 0x403a60\n    return function_403250(0, a1, a2, &g21);\n}\n"
        },
        {
            "funcName": "function_403a80",
            "funcStartAddr": "403a80",
            "funcEndAddr": "403a91",
            "decompiledFuncCode": "int64_t function_403a80(void) {\n    // 0x403a80\n    int64_t v1; // 0x403a80\n    return function_403250(v1, v1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_403aa0",
            "funcStartAddr": "403aa0",
            "funcEndAddr": "403ab6",
            "decompiledFuncCode": "int64_t function_403aa0(int64_t a1) {\n    // 0x403aa0\n    return function_403250(0, a1, -1, &g21);\n}\n"
        },
        {
            "funcName": "function_403ac0",
            "funcStartAddr": "403ac0",
            "funcEndAddr": "403e9d",
            "decompiledFuncCode": "int64_t function_403ac0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x403b58\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x403adc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403af6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x403b3b\n    if (a6 < 10) {\n        // 0x403b4a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x403c42\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_403ea0",
            "funcStartAddr": "403ea0",
            "funcEndAddr": "403ec0",
            "decompiledFuncCode": "int64_t function_403ea0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403ea0\n    if (a5 == 0) {\n        // 0x403ebb\n        return function_403ac0(a1, a2, a3, a4, a5, 0, (int64_t)&g50);\n    }\n    int64_t v1 = 0; // 0x403ea7\n    v1++;\n    int64_t v2 = v1; // 0x403eb9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x403eb0\n        v1++;\n        v2 = v1;\n    }\n    // 0x403ebb\n    return function_403ac0(a1, a2, a3, a4, a5, v2, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_403ec0",
            "funcStartAddr": "403ec0",
            "funcEndAddr": "403f20",
            "decompiledFuncCode": "int64_t function_403ec0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = v1;\n    int64_t v3; // bp-88, 0x403ec0\n    int64_t v4 = &v3; // 0x403ec0\n    int64_t v5 = 0;\n    uint32_t v6 = (int32_t)v1; // 0x403ef3\n    int64_t v7; // 0x403edd\n    int64_t * v8; // 0x403efb\n    int64_t v9; // 0x403efb\n    int64_t v10; // 0x403f07\n    if (v6 < 48) {\n        // 0x403ed0\n        *(int32_t *)v2 = v6 + 8;\n        v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n        *(int64_t *)(8 * v5 + v4) = v7;\n        if (v7 == 0) {\n            // break -> 0x403f13\n            break;\n        }\n    } else {\n        // 0x403efb\n        v8 = (int64_t *)(v2 + 8);\n        v9 = *v8;\n        *v8 = v9 + 8;\n        v10 = *(int64_t *)v9;\n        *(int64_t *)(8 * v5 + v4) = v10;\n        if (v10 == 0) {\n            // break -> 0x403f13\n            break;\n        }\n    }\n    int64_t v11 = 10; // 0x403ef1\n    while (v5 != 9) {\n        // 0x403ee9\n        v5++;\n        v6 = *(int32_t *)&v2;\n        if (v6 < 48) {\n            // 0x403ed0\n            *(int32_t *)v2 = v6 + 8;\n            v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n            *(int64_t *)(8 * v5 + v4) = v7;\n            v11 = v5;\n            if (v7 == 0) {\n                // break -> 0x403f13\n                break;\n            }\n        } else {\n            // 0x403efb\n            v8 = (int64_t *)(v2 + 8);\n            v9 = *v8;\n            *v8 = v9 + 8;\n            v10 = *(int64_t *)v9;\n            *(int64_t *)(8 * v5 + v4) = v10;\n            v11 = v5;\n            if (v10 == 0) {\n                // break -> 0x403f13\n                break;\n            }\n        }\n        // 0x403ee9\n        v11 = 10;\n    }\n    // 0x403f13\n    return function_403ac0(a1, a2, a3, a4, v4, v11, (int64_t)&g50);\n}\n"
        },
        {
            "funcName": "function_403f20",
            "funcStartAddr": "403f20",
            "funcEndAddr": "403fdc",
            "decompiledFuncCode": "int64_t function_403f20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403f20\n    int64_t v1; // bp-168, 0x403f20\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x403f20\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x403f20\n    int64_t v8; // 0x403f20\n    int64_t v9; // bp-56, 0x403f20\n    int64_t v10; // 0x403f85\n    int64_t v11; // 0x403fa9\n    if ((int32_t)v6 < 48) {\n        // 0x403f70\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x403fc0\n            break;\n        }\n    } else {\n        // 0x403fa2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x403fc0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x403f9a\n    int64_t v13 = 10; // 0x403f9a\n    while (v5 != 9) {\n        // 0x403f9c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x403f70\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x403fc0\n                break;\n            }\n        } else {\n            // 0x403fa2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x403fc0\n                break;\n            }\n        }\n        // 0x403f92\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x403fc0\n    int64_t v14; // bp-136, 0x403f20\n    int64_t result = function_403ac0(a1, a2, a3, a4, (int64_t)&v14, v13, (int64_t)&g50); // 0x403fcf\n    return result;\n}\n"
        },
        {
            "funcName": "function_403fe0",
            "funcStartAddr": "403fe0",
            "funcEndAddr": "404054",
            "decompiledFuncCode": "int64_t function_403fe0(int64_t a1) {\n    // 0x403fe0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404043\n    return fputs_unlocked(v1, g30);\n}\n"
        },
        {
            "funcName": "function_404060",
            "funcStartAddr": "404060",
            "funcEndAddr": "40407a",
            "decompiledFuncCode": "int64_t function_404060(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404064\n    if (size != 0 != (mem == NULL)) {\n        // 0x404073\n        return (int64_t)mem;\n    }\n    // 0x404075\n    function_4042b0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404080",
            "funcStartAddr": "404080",
            "funcEndAddr": "4040a1",
            "decompiledFuncCode": "int64_t function_404080(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404083\n    int64_t v2 = v1; // 0x404083\n    if (v2 < 0) {\n        // 0x40409b\n        function_4042b0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404099\n        return function_404060(v2);\n    }\n    // 0x40409b\n    function_4042b0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4040b0",
            "funcStartAddr": "4040b0",
            "funcEndAddr": "4040b2",
            "decompiledFuncCode": "int64_t function_4040b0(void) {\n    // 0x4040b0\n    int64_t v1; // 0x4040b0\n    return function_404060(v1);\n}\n"
        },
        {
            "funcName": "function_4040c0",
            "funcStartAddr": "4040c0",
            "funcEndAddr": "4040f6",
            "decompiledFuncCode": "int64_t function_4040c0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4040e8\n        free(v1);\n        return (int32_t)&g50 ^ (int32_t)&g50;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4040d1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4040e0\n        return (int64_t)mem;\n    }\n    // 0x4040f1\n    function_4042b0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404100",
            "funcStartAddr": "404100",
            "funcEndAddr": "404121",
            "decompiledFuncCode": "int64_t function_404100(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404103\n    int64_t v2 = v1; // 0x404103\n    if (v2 < 0) {\n        // 0x40411b\n        function_4042b0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404119\n        return function_4040c0(a1, v2);\n    }\n    // 0x40411b\n    function_4042b0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404130",
            "funcStartAddr": "404130",
            "funcEndAddr": "4041b6",
            "decompiledFuncCode": "int64_t function_404130(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40418b\n            function_4042b0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4040c0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404173\n    if (a2 == 0) {\n        // 0x404198\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404178\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40418b\n        function_4042b0(a1);\n        // UNREACHABLE\n    }\n    // 0x40415a\n    *(int64_t *)a2 = v2;\n    return function_4040c0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4041c0",
            "funcStartAddr": "4041c0",
            "funcEndAddr": "404210",
            "decompiledFuncCode": "int64_t function_4041c0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4041c0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40420a\n            function_4042b0(a1);\n            // UNREACHABLE\n        }\n        // 0x4041e2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4040c0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4041f5\n        *(int64_t *)a2 = 128;\n        return function_4040c0(0, 128);\n    }\n    // 0x404208\n    if (a2 < 0) {\n        // 0x40420a\n        function_4042b0(a1);\n        // UNREACHABLE\n    }\n    // 0x4041e2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4040c0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404210",
            "funcStartAddr": "404210",
            "funcEndAddr": "404227",
            "decompiledFuncCode": "int64_t function_404210(int64_t a1, int64_t a2) {\n    // 0x404210\n    return (int64_t)memset((int64_t *)function_404060(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404230",
            "funcStartAddr": "404230",
            "funcEndAddr": "40425e",
            "decompiledFuncCode": "int64_t function_404230(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404237\n    if ((int64_t)v1 < 0) {\n        // 0x404259\n        function_4042b0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404259\n        function_4042b0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40424a\n    if (mem != NULL) {\n        // 0x404254\n        return (int64_t)mem;\n    }\n    // 0x404259\n    function_4042b0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404260",
            "funcStartAddr": "404260",
            "funcEndAddr": "404288",
            "decompiledFuncCode": "int64_t function_404260(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404060(a2); // 0x40426f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404290",
            "funcStartAddr": "404290",
            "funcEndAddr": "4042a3",
            "decompiledFuncCode": "int64_t function_404290(int64_t str) {\n    // 0x404290\n    return function_404260(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4042b0",
            "funcStartAddr": "4042b0",
            "funcEndAddr": "4042e1",
            "decompiledFuncCode": "int64_t function_4042b0(int64_t a1) {\n    // 0x4042b0\n    error(g20, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4042f0",
            "funcStartAddr": "4042f0",
            "funcEndAddr": "404343",
            "decompiledFuncCode": "int64_t function_4042f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4042f0\n    int64_t v1; // 0x4042f0\n    int64_t v2 = function_405350(a1, a2, a3, v1); // bp-24, 0x4042fa\n    int32_t * v3 = __errno_location(); // 0x404303\n    *v3 = 0;\n    int64_t v4 = function_405240(&v2, 0); // 0x404323\n    int64_t result = v4; // 0x40432a\n    while ((int32_t)v4 != 0) {\n        // 0x404310\n        result = 0xffffffff;\n        if ((*v3 & -5) != 0) {\n            // break -> 0x40432c\n            break;\n        }\n        *v3 = 0;\n        v4 = function_405240(&v2, 0);\n        result = v4;\n    }\n    // 0x40432c\n    return result;\n}\n"
        },
        {
            "funcName": "function_404350",
            "funcStartAddr": "404350",
            "funcEndAddr": "4043ec",
            "decompiledFuncCode": "int64_t function_404350(int64_t a1, int64_t * a2, int64_t * a3, int64_t a4) {\n    int32_t * v1 = __errno_location(); // 0x404368\n    *v1 = 0;\n    char * v2; // 0x404350\n    int64_t v3 = (int64_t)v2; // 0x404381\n    int64_t result = 0; // 0x404389\n    int128_t v4; // 0x404350\n    if (v3 != a1) {\n        int64_t v5; // 0x404350\n        if (a2 == NULL) {\n            char v6 = *v2; // 0x4043ca\n            if (v6 != 0) {\n                // 0x4043b2\n                *a3 = __asm_movsd_1(v4);\n                return 0;\n            }\n            unsigned char v7 = llvm_ctpop_i8(v6); // 0x4043ca\n            __asm_ucomisd(v4, 0);\n            v5 = 0;\n            if (v7 % 2 != 0) {\n                // 0x4043b2\n                *a3 = __asm_movsd_1(v4);\n                return 1;\n            }\n        } else {\n            unsigned char v8 = llvm_ctpop_i8((char)(int64_t)a2); // 0x40438b\n            __asm_ucomisd(v4, 0);\n            v5 = v8 % 2 == 0 ? (int64_t)v1 & -256 : 0;\n        }\n        // 0x4043a1\n        result = v5 | (int64_t)(*v1 != 34);\n    }\n    // 0x4043a9\n    if (a2 != NULL) {\n        // 0x4043ae\n        *a2 = v3;\n    }\n    // 0x4043b2\n    *a3 = __asm_movsd_1(v4);\n    return result;\n}\n"
        },
        {
            "funcName": "function_4043f0",
            "funcStartAddr": "4043f0",
            "funcEndAddr": "4044cf",
            "decompiledFuncCode": "int64_t function_4043f0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4043fc\n    uint32_t v2 = *v1; // 0x4043fc\n    int64_t v3 = a2 & 0xffffffff; // 0x404401\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x404404\n    uint64_t v5 = (int64_t)*v4; // 0x404404\n    int64_t v6; // 0x404472\n    if (v3 <= v5) {\n      lab_0x40446c_2:\n        // 0x40446c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4043f2\n    int64_t v8 = v2; // 0x4043f0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40446c\n        goto lab_0x40446c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x404428\n    int64_t v17; // 0x404436\n    int64_t * v18; // 0x404450\n    int64_t * v19; // 0x404453\n    int64_t v20; // 0x40445e\n    int64_t v21; // 0x404436\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x404433\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x404450\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x404467\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40446c\n            goto lab_0x40446c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40446c\n            goto lab_0x40446c_2;\n        }\n        // 0x404422\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4044ab\n    int64_t * v23 = (int64_t *)v22; // 0x4044b0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4044b3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4044b0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4044c7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40441d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40446c\n            goto lab_0x40446c_2;\n        }\n        // 0x404422\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x404433\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x404450\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x404467\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40446c\n                goto lab_0x40446c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40446c\n                goto lab_0x40446c_2;\n            }\n            // 0x404422\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x404490\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4044b0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4044c7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40446c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4044d0",
            "funcStartAddr": "4044d0",
            "funcEndAddr": "404aec",
            "decompiledFuncCode": "int64_t function_4044d0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4044ef\n    int64_t v2 = *v1; // 0x4044ef\n    char * str2 = (char *)v2; // 0x4044fc\n    char c = *str2; // 0x4044fc\n    int64_t v3 = v2; // 0x404528\n    int64_t v4 = 0; // 0x4044d0\n    int32_t v5; // 0x4044d0\n    int64_t v6; // 0x4044d0\n    int64_t v7; // 0x4044d0\n    int64_t v8; // 0x4044d0\n    int64_t v9; // 0x4044d0\n    int64_t v10; // 0x4044d0\n    int64_t v11; // 0x4044d0\n    int64_t v12; // 0x4044d0\n    int64_t v13; // 0x4044d0\n    int64_t str3; // 0x4044d0\n    int64_t v14; // 0x4044d0\n    int64_t v15; // 0x4044d0\n    int64_t v16; // 0x4044d0\n    int64_t v17; // 0x4044d0\n    int32_t v18; // 0x4044d0\n    int32_t v19; // 0x4044d0\n    int32_t v20; // 0x4044d0\n    int32_t v21; // 0x4044d0\n    int32_t v22; // 0x4044d0\n    int32_t v23; // 0x4044d0\n    int32_t v24; // 0x4044d0\n    int32_t v25; // 0x4044d0\n    int32_t v26; // 0x4044d0\n    int32_t v27; // 0x4044d0\n    int32_t v28; // 0x4044d0\n    int32_t v29; // 0x4044d0\n    int64_t nmemb; // 0x4044d0\n    int64_t v30; // 0x4044d0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40452c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404528\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404538\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40453e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x404508\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40456c\n                int64_t v34; // 0x4044d0\n                int64_t v35; // 0x4044d0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x404575\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4046f0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x404586\n                int64_t v37 = *(int64_t *)v36; // 0x40458a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x404560\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x404575\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4046f0;\n                        }\n                    }\n                    // 0x404586\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4045d6:\n                    // 0x4045d6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x404630;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4047a0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x404630;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x404750\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4045fa;\n                                } else {\n                                    // 0x40475c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4045fa;\n                                    } else {\n                                        // 0x40476a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4045fa;\n                                        } else {\n                                            goto lab_0x404630;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4045fa;\n                            }\n                        }\n                    }\n                }\n              lab_0x404641:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x404816\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4049c2\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x4049e2\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x404a2f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x404a49\n                            int64_t v45; // 0x404a4b\n                            if (*(char *)v42 != 0) {\n                                // 0x404a4b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x404a43\n                            while (v17 + nmemb != v42) {\n                                // 0x404a45\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x404a4b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x404a38\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x404a70\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x404824\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40497f\n                        free((int64_t *)v17);\n                    }\n                    // 0x404879\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x404890\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40473e\n                    return 63;\n                }\n                // 0x404660\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4046e4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4046f0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x404700\n                    uint32_t v50 = *v49; // 0x404700\n                    int64_t v51 = v50; // 0x404700\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40470a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x404713\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40493f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4048ea\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40473e\n                            return 63;\n                        }\n                        // 0x404788\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x404a9f\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40499d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4049b0\n                                // 0x40473e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4048ae\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4048c2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40472b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40472e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x404732\n                    int64_t result = v59; // 0x404738\n                    if (v58 != 0) {\n                        // 0x40473a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40473e\n                    return result;\n                }\n            } else {\n                // 0x40453e\n                v5 = v32;\n            }\n            // break -> 0x404665\n            break;\n        }\n    }\n    // 0x404665\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40467d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x404687\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40473e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4047c9\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4046b6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4046c6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x404630:\n    // 0x404630\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x404630\n    int64_t v63 = *(int64_t *)v62; // 0x404634\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x404641\n        goto lab_0x404641;\n    }\n    goto lab_0x4045d6;\n  lab_0x4045fa:\n    // 0x4045fa\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4044d0\n    int32_t v65; // 0x4044d0\n    int32_t v66; // 0x4044d0\n    if (v27 != 0) {\n        goto lab_0x404630;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4047b0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x404630;\n            } else {\n                goto lab_0x404621;\n            }\n        } else {\n            // 0x404615\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40490c\n                int64_t v67 = (int64_t)mem; // 0x40490c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x404630;\n                } else {\n                    // 0x40491f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x404621;\n                }\n            } else {\n                goto lab_0x404621;\n            }\n        }\n    }\n  lab_0x404621:\n    // 0x404621\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x404630;\n}\n"
        },
        {
            "funcName": "function_404af0",
            "funcStartAddr": "404af0",
            "funcEndAddr": "4050b6",
            "decompiledFuncCode": "int64_t function_404af0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x404b11\n    if (v3 < 1) {\n        // 0x404cce\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x404b0d\n    int32_t v5 = *(int32_t *)a7; // 0x404b19\n    uint64_t v6 = a1 & 0xffffffff; // 0x404b1b\n    int64_t v7 = v2; // 0x404b20\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x404b23\n    *v8 = 0;\n    int64_t v9; // 0x404af0\n    int64_t v10; // 0x404af0\n    int64_t v11; // 0x404af0\n    int64_t v12; // 0x404af0\n    int64_t str; // 0x404af0\n    int64_t v13; // 0x404af0\n    int64_t v14; // 0x404af0\n    int64_t v15; // 0x404af0\n    int64_t v16; // 0x404af0\n    int64_t v17; // 0x404af0\n    int32_t v18; // 0x404af0\n    char v19; // 0x404af0\n    if (v5 == 0) {\n        // 0x404d08\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x404b3a;\n    } else {\n        // 0x404b33\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x404b80\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x404b83\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x404c48;\n            } else {\n                int64_t v22 = v7 + 1; // 0x404b96\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x404ba6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x404c5c;\n                } else {\n                    goto lab_0x404bb8;\n                }\n            }\n        } else {\n            goto lab_0x404b3a;\n        }\n    }\n  lab_0x404b3a:\n    // 0x404b3a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x404b40\n    *v24 = 0;\n    int64_t v25; // 0x404af0\n    int64_t v26; // 0x404af0\n    int64_t v27; // 0x404af0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x404c30\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404c3d;\n        }\n        case 43: {\n            // 0x404f40\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x404c3d;\n        }\n        default: {\n            // 0x404b5c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x404ebf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x404fd8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x404c3d;\n                } else {\n                    // 0x404ecd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x404b6a;\n                }\n            } else {\n                goto lab_0x404b6a;\n            }\n        }\n    }\n  lab_0x404c48:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x404c4f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x404bb8;\n    } else {\n        goto lab_0x404c5c;\n    }\n  lab_0x404b6a:\n    // 0x404b6a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x404c3d;\n  lab_0x404c3d:\n    // 0x404c3d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x404c48;\n  lab_0x404bb8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x404bb8\n    int64_t v31 = v30; // 0x404bb8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x404bba\n    if ((int64_t)*v32 > v31) {\n        // 0x404bbf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x404bc2\n    if (*v33 > v30) {\n        // 0x404bc7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x404bca\n    int64_t v35 = v31; // 0x404bce\n    int64_t v36 = v15; // 0x404bce\n    int64_t v37; // 0x404af0\n    int64_t v38; // 0x404af0\n    int64_t v39; // 0x404af0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x404d38\n        int64_t v41 = v40; // 0x404d38\n        v2 = v41;\n        int64_t v42; // 0x404af0\n        if (*v33 == v40) {\n            // 0x404f20\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x404f28\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x404d44\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x404d48\n                function_4043f0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x404d58\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x404d61\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x404d6a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x404d81\n            int64_t v47 = v45 & 0xffffffff; // 0x404d85\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x404d8e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x404d94\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x404d96;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x404d70\n            int64_t v49 = v48 & 0xffffffff; // 0x404d70\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x404d81\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x404d8e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x404d94\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x404d96;\n                    }\n                }\n                // 0x404d70\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x404f38\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x404d96;\n    } else {\n        goto lab_0x404bd4;\n    }\n  lab_0x404c5c:\n    // 0x404c5c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x404c5f\n    int64_t v51 = v12; // 0x404c5f\n    int64_t v52 = v14; // 0x404c5f\n    if (*(char *)v10 == 0) {\n        goto lab_0x404bb8;\n    } else {\n        goto lab_0x404c65;\n    }\n  lab_0x404bd4:;\n    int32_t v53 = v35; // 0x404bd4\n    int64_t v54; // 0x404af0\n    int64_t v55; // 0x404af0\n    int64_t v56; // 0x404af0\n    int64_t v57; // 0x404af0\n    int64_t v58; // 0x404af0\n    int64_t v59; // 0x404af0\n    char * v60; // 0x404af0\n    int64_t v61; // 0x404af0\n    int64_t v62; // 0x404be9\n    int64_t v63; // 0x404af0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x404d23\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x404d26;\n    } else {\n        // 0x404bdc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x404af0\n        int64_t v66 = v65 ? -1 : 1; // 0x404bf0\n        int64_t v67 = (int64_t)\"--\"; // 0x404af0\n        int64_t v68 = v62; // 0x404af0\n        int64_t v69 = 3; // 0x404bf0\n        unsigned char v70 = *(char *)v68; // 0x404bf0\n        char v71 = *(char *)v67; // 0x404bf0\n        char v72 = v71; // 0x404bf0\n        bool v73 = false; // 0x404bf0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x404ce0\n            if (*(char *)v62 == 45) {\n                // 0x404da0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x404da0\n                if (c == 0) {\n                    goto lab_0x404cea;\n                } else {\n                    // 0x404dad\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x404e30;\n                    } else {\n                        if (c == 45) {\n                            // 0x405013\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x404e85;\n                        } else {\n                            // 0x404dbe\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x404e30;\n                            } else {\n                                // 0x404dc3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x404de4;\n                                } else {\n                                    // 0x404dca\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x404e30;\n                                    } else {\n                                        goto lab_0x404de4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x404cea;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x404c00\n            v2 = v75;\n            int32_t v76 = *v32; // 0x404c03\n            int64_t v77 = v35 + 1; // 0x404c06\n            int32_t v78 = v77; // 0x404c09\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x404f70\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x404c17\n                    function_4043f0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x404c25\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x404d26;\n        }\n    }\n  lab_0x404c65:;\n    // 0x404c65\n    int64_t v79; // bp-104, 0x404af0\n    int64_t v80 = &v79; // 0x404afa\n    int64_t v81 = v50 + 1; // 0x404c65\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x404c6c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x404c71\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x404c75\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x404c79\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x404c81\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x404c86\n    int32_t c2 = v84; // 0x404c86\n    char * found_char_pos = strchr(str2, c2); // 0x404c86\n    int64_t v87 = *v82; // 0x404c8b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x404c95\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x404ca0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x404f90\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x404f5d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x404cce\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x404c86\n    char v91 = *(char *)(v90 + 1); // 0x404cbb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x404c75\n        if (v91 != 58) {\n            // 0x404cce\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x404ee4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x404fe8\n                *v8 = 0;\n            } else {\n                // 0x404fcc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x404f0e\n            *v83 = 0;\n            // 0x404cce\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x404eee\n        if (v93 != 0) {\n            // 0x404f80\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x404f0e\n            *v83 = 0;\n            // 0x404cce\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x404f01\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x404f0e\n            *v83 = 0;\n            // 0x404cce\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40504a\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x404ffa\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405001\n        // 0x404f0e\n        *v83 = 0;\n        // 0x404cce\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x404e59\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x404e5b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405080\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405031\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405038\n            // 0x404cce\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x404e66\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x404e6a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x404e85;\n  lab_0x404d96:\n    // 0x404d96\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x404bd4;\n  lab_0x404e85:;\n    int64_t v99 = function_4044d0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x404ea3\n    // 0x404cce\n    return v99 & 0xffffffff;\n  lab_0x404d26:;\n    int32_t v100 = v55; // 0x404d26\n    if (v100 != (int32_t)v59) {\n        // 0x404d2a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x404cce\n    return 0xffffffff;\n  lab_0x404cea:\n    // 0x404cea\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x404cf1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x404cce\n    return v99 & 0xffffffff;\n  lab_0x404e30:\n    // 0x404e30\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x404c65;\n  lab_0x404de4:\n    // 0x404de4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4044d0(v6, a2, str, a4, a5, v57, v1, v11, &g11); // 0x404e0a\n    if ((int32_t)v101 != -1) {\n        // 0x404cce\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x404e1f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x404e30;\n}\n"
        },
        {
            "funcName": "function_4050c0",
            "funcStartAddr": "4050c0",
            "funcEndAddr": "405116",
            "decompiledFuncCode": "int64_t function_4050c0(int64_t a1) {\n    // 0x4050c0\n    *(int32_t *)&g43 = g28;\n    *(int32_t *)&g44 = g27;\n    int64_t v1; // 0x4050c0\n    int64_t result = function_404af0(v1, v1, v1, v1, v1, v1, &g43, a1 & 0xffffffff); // 0x4050e6\n    g28 = *(int32_t *)&g43;\n    g48 = g46;\n    *(int32_t *)&g26 = g45;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405120",
            "funcStartAddr": "405120",
            "funcEndAddr": "405138",
            "decompiledFuncCode": "int64_t function_405120(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405120\n    return function_4050c0(1);\n}\n"
        },
        {
            "funcName": "function_405140",
            "funcStartAddr": "405140",
            "funcEndAddr": "405153",
            "decompiledFuncCode": "int64_t function_405140(int64_t a1, int64_t a2, int64_t * a3, int64_t * a4, int32_t a5, int64_t a6) {\n    // 0x405140\n    return function_4050c0(0);\n}\n"
        },
        {
            "funcName": "function_405160",
            "funcStartAddr": "405160",
            "funcEndAddr": "405175",
            "decompiledFuncCode": "int64_t function_405160(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405160\n    return function_404af0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405180",
            "funcStartAddr": "405180",
            "funcEndAddr": "405196",
            "decompiledFuncCode": "int64_t function_405180(void) {\n    // 0x405180\n    return function_4050c0(0);\n}\n"
        },
        {
            "funcName": "function_4051a0",
            "funcStartAddr": "4051a0",
            "funcEndAddr": "4051b8",
            "decompiledFuncCode": "int64_t function_4051a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4051a0\n    return function_404af0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4051c0",
            "funcStartAddr": "4051c0",
            "funcEndAddr": "40523a",
            "decompiledFuncCode": "int64_t function_4051c0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4051cb\n    int64_t v2 = (int64_t)&g12; // 0x4051cb\n    int32_t * pwc; // 0x4051c0\n    int64_t v3; // 0x4051c0\n    int64_t n; // 0x4051c0\n    if (a2 == 0) {\n        goto lab_0x405212;\n    } else {\n        // 0x4051cd\n        if (a3 == 0) {\n            // 0x4051f8\n            return -2;\n        }\n        // 0x4051d9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405212;\n        } else {\n            goto lab_0x4051e4;\n        }\n    }\n  lab_0x405212:\n    // 0x405212\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4051c0\n    pwc = (int32_t *)&v4;\n    goto lab_0x4051e4;\n  lab_0x4051e4:;\n    char * wstr = (char *)v3; // 0x4051ea\n    int64_t ps; // 0x4051c0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4051ea\n    int64_t result = v5; // 0x4051ea\n    if (v5 < 0xfffffffe) {\n        // 0x4051f8\n        return result;\n    }\n    int64_t result2 = result; // 0x405229\n    if ((char)function_405410(0, v3) == 0) {\n        // 0x40522b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4051f8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405240",
            "funcStartAddr": "405240",
            "funcEndAddr": "4052e2",
            "decompiledFuncCode": "int64_t function_405240(int64_t * a1, int32_t a2) {\n    int64_t v1 = (int64_t)a1;\n    if (*(int64_t *)(v1 + 8) >= 0x3b9aca00) {\n        // 0x4052d0\n        *__errno_location() = 22;\n        // 0x4052c7\n        return 0xffffffff;\n    }\n    int64_t v2 = a2;\n    struct timespec * rmtp = (struct timespec *)v2;\n    int64_t v3 = v1; // 0x405269\n    int64_t v4 = v1; // 0x405269\n    int64_t rqtp; // bp-40, 0x405240\n    if (a1 <= (int64_t *)0x1fa400) {\n      lab_0x4052b8:\n        // 0x4052b8\n        rqtp = v4;\n        // 0x4052c7\n        return nanosleep((struct timespec *)&rqtp, rmtp);\n    }\n    rqtp = 0x1fa400;\n    v3 -= 0x1fa400;\n    int32_t v5 = nanosleep((struct timespec *)&rqtp, rmtp); // 0x405297\n    while (v5 == 0) {\n        // 0x405270\n        v4 = v3;\n        if (v3 < 0x1fa401) {\n            goto lab_0x4052b8;\n        }\n        rqtp = 0x1fa400;\n        v3 -= 0x1fa400;\n        v5 = nanosleep((struct timespec *)&rqtp, rmtp);\n    }\n    int64_t result = v5; // 0x405297\n    if (a2 == 0) {\n        // 0x4052c7\n        return result;\n    }\n    // 0x4052a5\n    *(int64_t *)v2 = v3 + v2;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4052f0",
            "funcStartAddr": "4052f0",
            "funcEndAddr": "40534d",
            "decompiledFuncCode": "int64_t function_4052f0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4052f7\n    int64_t v2; // 0x4052f0\n    int64_t result = function_4059e0(a1, v2); // 0x405308\n    if ((v2 & 32) != 0) {\n        // 0x405330\n        if ((int32_t)result == 0) {\n            // 0x405334\n            *__errno_location() = 0;\n        }\n        // 0x40532a\n        return 0xffffffff;\n    }\n    // 0x405311\n    if ((int32_t)result == 0) {\n        // 0x40532a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405318\n    if (v1 == 0) {\n        // 0x40531a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40532a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405350",
            "funcStartAddr": "405350",
            "funcEndAddr": "40540c",
            "decompiledFuncCode": "int64_t function_405350(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405350\n    int128_t v1; // 0x405350\n    __asm_comisd(v1, g13);\n    bool v2; // 0x405350\n    if (v2 || v2) {\n        // 0x40536c\n        return -0x8000000000000000;\n    }\n    int128_t v3 = __asm_movsd(0x43e0000000000000); // 0x40535e\n    __asm_comisd(v3, v1);\n    int64_t v4 = __asm_cvttsd2si(v1); // 0x405380\n    __asm_pxor(v3, v3);\n    int128_t v5 = __asm_cvtsi2sd(v4); // 0x40538b\n    int128_t v6 = __asm_mulsd(__asm_subsd(v1, v5), 0x41cdcd6500000000); // 0x405394\n    __asm_pxor(v5, v5);\n    int64_t v7 = __asm_cvttsd2si(v6); // 0x4053a0\n    __asm_comisd(v6, __asm_cvtsi2sd(v7));\n    int64_t result = (v7 >> 63) + v4; // 0x4053d2\n    if ((v7 >> 63 & -0x3b9aca00) + v7 < 0) {\n        // 0x405400\n        return result - 1;\n    }\n    // 0x40536c\n    return result;\n}\n"
        },
        {
            "funcName": "function_405410",
            "funcStartAddr": "405410",
            "funcEndAddr": "40546e",
            "decompiledFuncCode": "int64_t function_405410(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x405416\n    if (locale == NULL) {\n        // 0x405443\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x405416\n    bool v2; // 0x405410\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"C\"; // 0x405410\n    int64_t v5 = v1; // 0x405410\n    int64_t v6 = 2; // 0x405435\n    unsigned char v7 = *(char *)v5; // 0x405435\n    char v8 = *(char *)v4; // 0x405435\n    char v9 = v8; // 0x405435\n    bool v10 = false; // 0x405435\n    while (v7 == v8) {\n        // 0x405428\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x405441\n    int64_t v13 = v1; // 0x405441\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x405443\n        return 0;\n    }\n    int64_t v14 = 6; // 0x405441\n    unsigned char v15 = *(char *)v13; // 0x40545d\n    char v16 = *(char *)v12; // 0x40545d\n    char v17 = v16; // 0x40545d\n    bool v18 = false; // 0x40545d\n    while (v15 == v16) {\n        // 0x405450\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405470",
            "funcStartAddr": "405470",
            "funcEndAddr": "4059d2",
            "decompiledFuncCode": "int64_t function_405470(void) {\n    char * v1 = nl_langinfo(14); // 0x405486\n    char * v2 = g47; // 0x40548b\n    char * v3; // 0x405470\n    int64_t v4; // 0x405470\n    int64_t v5; // 0x405470\n    int64_t v6; // 0x405470\n    int64_t v7; // 0x405470\n    int32_t size; // 0x405470\n    int32_t size2; // 0x405470\n    int32_t len; // 0x405542\n    int64_t v8; // 0x405542\n    char * env_val; // 0x40552d\n    if (v2 == NULL) {\n        // 0x405528\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405595;\n        } else {\n            // 0x40553a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405595;\n            } else {\n                // 0x40553f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40552d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4059c5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405595;\n                    } else {\n                        // 0x405939\n                        size2 = len + 14;\n                        goto lab_0x40555b;\n                    }\n                } else {\n                    goto lab_0x40555b;\n                }\n            }\n        }\n    } else {\n        // 0x405470\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x4054aa;\n    }\n  lab_0x4057dc:;\n    // 0x4057dc\n    struct _IO_FILE * stream; // 0x40561b\n    int32_t v10 = __uflow(stream); // 0x4057df\n    int64_t v11; // 0x405470\n    int64_t v12 = v11; // 0x4057e9\n    int64_t v13; // 0x405470\n    int64_t v14 = v13; // 0x4057e9\n    int32_t v15 = v10; // 0x4057e9\n    int64_t v16; // 0x405470\n    int64_t v17 = v16; // 0x4057e9\n    int64_t v18 = v11; // 0x4057e9\n    int64_t v19 = v13; // 0x4057e9\n    int64_t v20 = v16; // 0x4057e9\n    if (v10 == -1) {\n        // break -> 0x4057ef\n        goto lab_0x4057ef;\n    }\n    goto lab_0x405669;\n  lab_0x40565e:;\n    // 0x40565e\n    int64_t v90; // 0x405470\n    int64_t * v32; // 0x405650\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405470\n    v12 = v89;\n    int64_t v91; // 0x405470\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405470\n    v17 = v92;\n    goto lab_0x405669;\n  lab_0x405669:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405470\n    int32_t v25; // bp-120, 0x405470\n    int32_t v26; // bp-184, 0x405470\n    int64_t v27; // 0x40561b\n    int64_t v28; // 0x405638\n    int64_t v29; // 0x40563d\n    int64_t * v30; // 0x405654\n    switch (c) {\n        case 32: {\n            goto lab_0x405650;\n        }\n        case 10: {\n            goto lab_0x405650;\n        }\n        case 9: {\n            goto lab_0x405650;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x405841\n            int32_t v33; // 0x405470\n            char v34; // 0x405470\n            int32_t v35; // 0x40584e\n            if (v31 < *v30) {\n                // 0x405820\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40584b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x405841\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x405820\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40584b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x405830\n                v36 = v33;\n            }\n            // 0x40591f\n            if (v36 == -1) {\n                // break -> 0x4057ef\n                break;\n            }\n            goto lab_0x405650;\n        }\n        default: {\n            // 0x40567f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4057ef\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x4056a8\n            int64_t v39 = v37 + 4; // 0x4056aa\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x4056b6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x4056b8\n            while (v41 == 0) {\n                // 0x4056a8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4056d6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4056e2\n            int64_t v45 = v43 + 4; // 0x4056e4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4056f0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4056f2\n            while (v47 == 0) {\n                // 0x4056e2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4056df\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x405708\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x405718\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40571c\n            int64_t v52 = v51 + v48; // 0x405725\n            int64_t * mem; // 0x405470\n            int64_t v53; // 0x405470\n            int64_t v54; // 0x405470\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40585b\n                int64_t v56 = v55 + 3; // 0x405867\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x405741\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x405750\n            if (mem == NULL) {\n                // 0x40597c\n                free((int64_t *)v21);\n                function_4059e0(v27, v53);\n                v24 = (int64_t)&g12;\n                goto lab_0x4055f4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x405768\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x405772\n            uint32_t v62 = (int32_t)v59; // 0x405775\n            int64_t v63; // 0x405470\n            if (v62 >= 8) {\n                // 0x405884\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40589e\n                int64_t v66 = v61 - v65; // 0x4058a2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x4058ad\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4058be\n                    int64_t v70 = v69 & 0xffffffff; // 0x4058be\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4058bb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40594f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x405787\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40578b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40579b\n            int64_t v74 = v60 - 1; // 0x40579f\n            uint32_t v75 = (int32_t)v73; // 0x4057a4\n            int64_t v76; // 0x405470\n            if (v75 >= 8) {\n                // 0x4058d2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4058dc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4058ec\n                int64_t v80 = v74 - v79; // 0x4058f0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4058fb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40590b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x405909\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x405966\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40596e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4057b6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4057ba\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4059b3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4057ce\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40565e;\n            } else {\n                goto lab_0x4057dc;\n            }\n        }\n    }\n  lab_0x405650:;\n    int64_t v93 = v23; // 0x405470\n    int64_t v94 = v22; // 0x405470\n    int64_t v95 = v21; // 0x405470\n    goto lab_0x405650_2;\n  lab_0x405595:;\n    int64_t * mem3 = malloc(size); // 0x405595\n    int64_t v97 = (int64_t)&g12; // 0x4055a0\n    int64_t v98; // 0x405470\n    int64_t path; // 0x405470\n    if (mem3 == NULL) {\n        goto lab_0x405572;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405595\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x4055b6;\n    }\n  lab_0x4054aa:;\n    int64_t str = v1 == NULL ? (int64_t)&g12 : (int64_t)v1; // 0x40549d\n    char v100 = *v3; // 0x4054aa\n    int64_t v101; // 0x405470\n    if (v100 == 0) {\n        // 0x405504\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405470\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405470\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4054f0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4054f7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4054c0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4054cd\n        char v107 = *(char *)v106; // 0x4054d2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x405504\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4054db\n    v104 = v103 + 1;\n  lab_0x4054f7:\n    // 0x405504\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405572:;\n    char * v108 = (char *)v97;\n    g47 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x4054aa;\n  lab_0x4055b6:;\n    int64_t v109 = v98 + path; // 0x4055b6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4055e2\n    v24 = (int64_t)&g12;\n    if (fd >= 0) {\n        // 0x405611\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x405942\n            close(fd);\n            v24 = (int64_t)&g12;\n        } else {\n            // 0x405635\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405650_2:;\n                uint64_t v96 = *v32; // 0x405650\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4057dc;\n                } else {\n                    goto lab_0x40565e;\n                }\n            }\n          lab_0x4057ef:\n            // 0x4057ef\n            function_4059e0(v27, v19);\n            v24 = (int64_t)&g12;\n            if (v18 != 0) {\n                // 0x40580e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4055f4;\n  lab_0x40555b:;\n    int64_t * mem4 = malloc(size2); // 0x40555b\n    v97 = (int64_t)&g12;\n    if (mem4 != NULL) {\n        // 0x405601\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x4055b6;\n    } else {\n        goto lab_0x405572;\n    }\n  lab_0x4055f4:\n    // 0x4055f4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405572;\n}\n"
        },
        {
            "funcName": "function_4059e0",
            "funcStartAddr": "4059e0",
            "funcEndAddr": "405a5b",
            "decompiledFuncCode": "int64_t function_4059e0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4059e7\n    if (fileno(stream) < 0) {\n        // 0x405a47\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4059fa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x405a2b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405a47\n            return fclose(stream);\n        }\n    }\n    // 0x4059fc\n    if ((int32_t)function_405a60(a1, v1) == 0) {\n        // 0x405a47\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405a08\n    int32_t v3 = *v2; // 0x405a10\n    int64_t result = fclose(stream); // 0x405a1e\n    if (v3 != 0) {\n        // 0x405a50\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405a20\n    return result;\n}\n"
        },
        {
            "funcName": "function_405a60",
            "funcStartAddr": "405a60",
            "funcEndAddr": "405aa0",
            "decompiledFuncCode": "int64_t function_405a60(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x405a7a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x405a7a\n        return fflush(stream);\n    }\n    // 0x405a88\n    function_405aa0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405aa0",
            "funcStartAddr": "405aa0",
            "funcEndAddr": "405af7",
            "decompiledFuncCode": "int64_t function_405aa0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405aa0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x405aaa\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x405adb\n    int64_t result = -1; // 0x405ae4\n    if (v1 != -1) {\n        // 0x405ae6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405af2\n    return result;\n}\n"
        },
        {
            "funcName": "function_405b00",
            "funcStartAddr": "405b00",
            "funcEndAddr": "405b5d",
            "decompiledFuncCode": "int64_t function_405b00(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405b00\n    return function_4012b0();\n}\n"
        },
        {
            "funcName": "function_405b60",
            "funcStartAddr": "405b60",
            "funcEndAddr": "405b61",
            "decompiledFuncCode": "int64_t function_405b60(void) {\n    // 0x405b60\n    int64_t result; // 0x405b60\n    return result;\n}\n"
        },
        {
            "funcName": "function_405b70",
            "funcStartAddr": "405b70",
            "funcEndAddr": "405b88",
            "decompiledFuncCode": "int64_t function_405b70(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405b70\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g18);\n}\n"
        },
        {
            "funcName": "function_405b88",
            "funcStartAddr": "405b88",
            "funcEndAddr": "405ba8",
            "decompiledFuncCode": "int64_t function_405b88(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g14; // 0x405b92\n    while (*(int64_t *)v1 != -1) {\n        // 0x405b93\n        v1 -= 8;\n    }\n    // 0x405ba4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_sleep.elf"
}