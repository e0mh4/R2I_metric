{
    "funcInfo": [
        {
            "funcName": "function_4017c0",
            "funcStartAddr": "4017c0",
            "funcEndAddr": "4017c5",
            "decompiledFuncCode": "int64_t function_4017c0(void) {\n    // 0x4017c0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017c5",
            "funcStartAddr": "4017c5",
            "funcEndAddr": "4017ca",
            "decompiledFuncCode": "int64_t function_4017c5(void) {\n    // 0x4017c5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017ca",
            "funcStartAddr": "4017ca",
            "funcEndAddr": "4017cf",
            "decompiledFuncCode": "int64_t function_4017ca(void) {\n    // 0x4017ca\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017cf",
            "funcStartAddr": "4017cf",
            "funcEndAddr": "4017d4",
            "decompiledFuncCode": "int64_t function_4017cf(void) {\n    // 0x4017cf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017d4",
            "funcStartAddr": "4017d4",
            "funcEndAddr": "4017d9",
            "decompiledFuncCode": "int64_t function_4017d4(void) {\n    // 0x4017d4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017d9",
            "funcStartAddr": "4017d9",
            "funcEndAddr": "4017de",
            "decompiledFuncCode": "int64_t function_4017d9(void) {\n    // 0x4017d9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4017e0",
            "funcStartAddr": "4017e0",
            "funcEndAddr": "401c89",
            "decompiledFuncCode": "int64_t function_4017e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a1 & 0xffffffff; // 0x4017ec\n    function_403240(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_407200(0x403160, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    g60 = 0;\n    g61 = 0;\n    g62 = 0;\n    g63 = 0;\n    g58 = 75;\n    g59 = (char *)&g10;\n    g57 = 0;\n    g56 = 0;\n    g55 = 0;\n    int64_t v2 = a2; // 0x401882\n    int64_t v3 = v1; // 0x401882\n    int64_t v4 = 0; // 0x401882\n    if ((int32_t)a1 >= 2) {\n        int64_t v5 = a2 + 8; // 0x401884\n        int64_t * v6 = (int64_t *)v5; // 0x401884\n        int64_t v7 = *v6; // 0x401884\n        v2 = a2;\n        v3 = v1;\n        v4 = 0;\n        if (*(char *)v7 == 45) {\n            int64_t v8 = v7 + 1; // 0x401a3c\n            char v9 = *(char *)v8; // 0x401a3c\n            v2 = a2;\n            v3 = v1;\n            v4 = 0;\n            if (v9 == 57 || (int32_t)v9 < 57) {\n                // 0x401a4c\n                *v6 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\";\n                v2 = v5;\n                v3 = a1 + 0xffffffff & 0xffffffff;\n                v4 = v8;\n            }\n        }\n    }\n    int64_t v10 = v4; // 0x40189a\n    int64_t v11 = 0; // 0x40189a\n    int64_t v12; // 0x4017e0\n    while (true) {\n        // 0x4018a0\n        v12 = v10;\n        int32_t v13; // 0x4017e0\n        while (true) {\n            // 0x4018a0\n            while (true) {\n              lab_0x4018a0_2:;\n                int64_t v14 = function_406a60(v3, v2, \"0123456789cstuw:p:g:\", &g3, 0, a6); // 0x4018b2\n                v13 = v14;\n                switch (v13) {\n                    case -1: {\n                        goto lab_0x401a62;\n                    }\n                    case 112: {\n                        int64_t v15 = (int64_t)g76; // 0x4019b0\n                        g56 = 0;\n                        int64_t v16 = v15; // 0x4019c5\n                        char * str = g76; // 0x4019c5\n                        int64_t v17 = v15; // 0x4019c5\n                        if (*g76 == 32) {\n                            int64_t v18 = v16;\n                            int64_t v19 = v18 + 1; // 0x4019d4\n                            char * v20 = (char *)v19;\n                            while (*v20 == 32) {\n                                // 0x4019d0\n                                v18 = v19;\n                                v19 = v18 + 1;\n                                v20 = (char *)v19;\n                            }\n                            // 0x4019de\n                            g56 = 1 - v15 + v18;\n                            str = v20;\n                            v17 = v19;\n                        }\n                        int64_t v21 = v17;\n                        g59 = str;\n                        int32_t len = strlen(str); // 0x4019ee\n                        g57 = len;\n                        int64_t v22 = v21 + (int64_t)len; // 0x4019fb\n                        int64_t v23 = v22; // 0x401a01\n                        int64_t v24 = v22; // 0x401a01\n                        if (v21 < v22) {\n                            int64_t v25 = v23 - 1; // 0x401a11\n                            v24 = v23;\n                            while (*(char *)v25 == 32) {\n                                // 0x401a08\n                                v23 = v25;\n                                v24 = v21;\n                                if (v21 == v25) {\n                                    // break -> 0x401a17\n                                    break;\n                                }\n                                v25 = v23 - 1;\n                                v24 = v23;\n                            }\n                        }\n                        // 0x401a17\n                        *(char *)v24 = 0;\n                        g55 = v24 - v21;\n                        goto lab_0x4018a0_2;\n                    }\n                    default: {\n                        if (v13 > 112) {\n                            if (v13 == 116) {\n                                // 0x401a30\n                                g62 = 1;\n                            } else {\n                                if (v13 > 116) {\n                                    if (v13 != 117) {\n                                        // break (via goto) -> 0x401910\n                                        goto lab_0x401910;\n                                    }\n                                    // 0x4018e1\n                                    g60 = 1;\n                                } else {\n                                    if (v13 != 115) {\n                                        // 0x401c54\n                                        function_402dc0(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x40193a\n                                    g61 = 1;\n                                }\n                            }\n                        } else {\n                            if (v13 == -130) {\n                                // 0x401c5e\n                                function_402dc0(0);\n                                // UNREACHABLE\n                            }\n                            if (v13 <= 0xffffff7e) {\n                                if (v13 == -131) {\n                                    // 0x40197d\n                                    function_4052e0((int64_t)g29, \"fmt\", \"GNU coreutils\", (int64_t)g17, \"Ross Paterson\", 0);\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x401c54;\n                            }\n                            if (v13 != 99) {\n                                // break -> 0x401950\n                                break;\n                            }\n                            // 0x401905\n                            g63 = 1;\n                        }\n                        goto lab_0x4018a0_2;\n                    }\n                }\n            }\n        }\n      lab_0x401910:\n        if (v13 != 119) {\n          lab_0x401c54:\n            // 0x401c54\n            function_402dc0(1);\n            // UNREACHABLE\n        }\n        // 0x40191a\n        v10 = (int64_t)g76;\n    }\n  lab_0x401a62:;\n    int32_t v26; // 0x4017e0\n    if (v12 == 0) {\n        if (v11 != 0) {\n            char * v27 = dcgettext(NULL, \"invalid width\", 5); // 0x401c18\n            int64_t v28 = function_405780(v11, (int32_t)\"invalid width\" ^ (int32_t)\"invalid width\", 75, (int64_t *)&g10, (int64_t)v27, 0); // 0x401c32\n            int32_t v29 = v28; // 0x401c37\n            g53 = v29;\n            g58 = v29 + 10;\n            goto lab_0x401ad7;\n        } else {\n            // 0x401bea\n            v26 = g58;\n            goto lab_0x401bef;\n        }\n    } else {\n        char * v30 = dcgettext(NULL, \"invalid width\", 5); // 0x401a77\n        int64_t v31 = function_405780(v12, (int32_t)\"invalid width\" ^ (int32_t)\"invalid width\", 2500, (int64_t *)&g10, (int64_t)v30, 0); // 0x401a91\n        int32_t v32 = v31; // 0x401a99\n        g58 = v32;\n        v26 = v32;\n        if (v11 == 0) {\n            goto lab_0x401bef;\n        } else {\n            char * v33 = dcgettext(NULL, \"invalid width\", 5); // 0x401ab4\n            int64_t v34 = function_405780(v11, (int32_t)\"invalid width\" ^ (int32_t)\"invalid width\", 0x100000000 * v31 >> 32, (int64_t *)&g10, (int64_t)v33, 0); // 0x401acc\n            g53 = v34;\n            goto lab_0x401ad7;\n        }\n    }\n  lab_0x401b04:;\n    // 0x401b04\n    int64_t v35; // 0x4017e0\n    int64_t v36 = v35;\n    g26 = &g27;\n    int64_t v37 = v36; // 0x401b15\n    uint64_t v38; // 0x4017e0\n    if (v38 <= (int64_t)&g27) {\n        // break -> 0x401ba5\n        goto lab_0x401ba5;\n    }\n    goto lab_0x401b1b;\n  lab_0x401b80:;\n    // 0x401b80\n    int64_t v57; // 0x4017e0\n    int64_t format = v57;\n    int32_t * v56; // 0x4017e0\n    int32_t * v59 = v56;\n    int32_t err_num = *v59; // 0x401b80\n    error(0, err_num, (char *)format);\n    v35 = 0;\n    goto lab_0x401b04;\n  lab_0x401bef:;\n    int32_t v60 = 187 * v26; // 0x401bef\n    g53 = (0x100000000 * (int64_t)(v60 >> 31) | (int64_t)v60) / 200;\n    goto lab_0x401ad7;\n  lab_0x401ad7:;\n    uint32_t v61 = *(int32_t *)0x60b25c; // 0x401ad7\n    if (v61 == (int32_t)v3) {\n        // 0x401b93\n        function_402850(g30);\n        // 0x401ba5\n        return 0;\n    }\n    // 0x401ae5\n    if (v3 <= (int64_t)v61) {\n        // 0x401ba5\n        return 0;\n    }\n    // 0x401b1b\n    while (true) {\n      lab_0x401b1b:;\n        // 0x401b1b\n        char v39; // 0x4017e0\n        unsigned char v40; // 0x401b2c\n        bool v41; // 0x4017e0\n        while (true) {\n            int64_t v42; // 0x4017e0\n            int64_t v43 = v42;\n            int64_t v44; // 0x4017e0\n            int64_t v45 = v44;\n            v40 = *(char *)v43;\n            char v46 = *(char *)v45; // 0x401b2c\n            v39 = v46;\n            v41 = false;\n            if (v40 != v46) {\n                // break -> \n                break;\n            }\n            int64_t v47; // 0x4017e0\n            int64_t v48 = v47;\n            int64_t v49 = v48 - 1; // 0x401b2c\n            int64_t v50; // 0x401b2c\n            v44 = v45 + v50;\n            v42 = v43 + v50;\n            v47 = v49;\n            v39 = v40;\n            v41 = true;\n            if (v49 == 0) {\n                // break -> \n                break;\n            }\n        }\n        bool v51 = v41;\n        unsigned char v52 = v39;\n        int64_t v53; // 0x4017e0\n        if ((v40 >= v52 && !v51) == v40 < v52) {\n            int64_t v54 = g30; // 0x401af8\n            function_402850(v54);\n            v35 = v53;\n            goto lab_0x401b04;\n        } else {\n            // 0x401b37\n            int64_t file_path; // 0x401b25\n            struct _IO_FILE * file = fopen((char *)file_path, \"r\"); // 0x401b3f\n            if (file == NULL) {\n                // 0x401bb9\n                function_404c10(4, file_path);\n                char * v55 = dcgettext(NULL, \"cannot open %s for reading\", 5); // 0x401bd5\n                v56 = __errno_location();\n                v57 = (int64_t)v55;\n                goto lab_0x401b80;\n            } else {\n                int64_t v58 = (int64_t)file; // 0x401b3f\n                function_402850(v58);\n                v35 = v53;\n                if ((int32_t)function_405bf0(v58, (int64_t)\"r\") != -1) {\n                    goto lab_0x401b04;\n                } else {\n                    // 0x401b61\n                    function_404ce0(0, 3, file_path);\n                    v56 = __errno_location();\n                    v57 = (int64_t)\"%s\";\n                    goto lab_0x401b80;\n                }\n            }\n        }\n    }\n  lab_0x401ba5:;\n    uint64_t v62 = v37;\n    return v62 % 256 ^ 1;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401c90",
            "funcEndAddr": "401cbb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401c90\n    int64_t v1; // 0x401c90\n    __libc_start_main(0x4017e0, (int32_t)a4, (char **)&v1, (void (*)())0x407190, (void (*)())0x4071f0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401cbb",
            "funcStartAddr": "401cbb",
            "funcEndAddr": "401cda",
            "decompiledFuncCode": "int64_t function_401cbb(void) {\n    // 0x401cbb\n    return &g28;\n}\n"
        },
        {
            "funcName": "function_401cda",
            "funcStartAddr": "401cda",
            "funcEndAddr": "401d11",
            "decompiledFuncCode": "int64_t function_401cda(void) {\n    // 0x401cda\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401d11",
            "funcStartAddr": "401d11",
            "funcEndAddr": "401d68",
            "decompiledFuncCode": "int64_t function_401d11(void) {\n    // 0x401d11\n    if (g33 != 0) {\n        // 0x401d67\n        int64_t result; // 0x401d11\n        return result;\n    }\n    int64_t v1 = g34; // 0x401d44\n    int64_t result2; // 0x401d56\n    if (g34 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401d56\n        result2 = function_401cbb();\n        g33 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x401d46\n        v1++;\n    }\n    // 0x401d3a\n    g34 = v1;\n    // 0x401d56\n    result2 = function_401cbb();\n    g33 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401d68",
            "funcStartAddr": "401d68",
            "funcEndAddr": "401d6d",
            "decompiledFuncCode": "int64_t function_401d68(void) {\n    // 0x401d68\n    return function_401cda();\n}\n"
        },
        {
            "funcName": "function_401d70",
            "funcStartAddr": "401d70",
            "funcEndAddr": "401f73",
            "decompiledFuncCode": "int64_t function_401d70(void) {\n    int64_t v1 = g42 - 40; // 0x401d84\n    int32_t * v2 = (int32_t *)(g42 + 8); // 0x401d8c\n    uint32_t result = *v2; // 0x401d8c\n    *(int64_t *)(g42 + 24) = 0;\n    *v2 = g58;\n    if (v1 < (int64_t)&g43) {\n        // 0x401ef4\n        *v2 = result;\n        return result;\n    }\n    uint32_t v3 = *(int32_t *)(v1 + 8); // 0x401df4\n    int64_t v4 = v3; // 0x401df4\n    int64_t * v5 = (int64_t *)(v1 + 32);\n    int32_t * v6 = (int32_t *)(v1 + 20);\n    int64_t v7 = 0x7fffffffffffffff; // 0x401dfb\n    int32_t v8 = (v1 == (int64_t)&g43 ? g39 : g38) + v3; // 0x401dfb\n    uint32_t v9 = v8;\n    int64_t v10 = v1;\n    int64_t v11 = v10 + 40; // 0x401e27\n    if (g42 != v11) {\n        // 0x401e30\n        if (g42 != *(int64_t *)(v10 + 72)) {\n            // branch -> 0x401e62\n        }\n    }\n    // 0x401e62\n    if (g35 >= 1 && v1 == (int64_t)&g43) {\n        // branch -> 0x401e00\n    }\n    // 0x401e00\n    if (v7 < v7) {\n        // 0x401e05\n        *v5 = v11;\n        *v6 = v9;\n    }\n    int64_t v12 = v7;\n    int64_t v13; // 0x401d70\n    int64_t v14; // 0x401d70\n    int64_t v15; // 0x401d70\n    int64_t v16; // 0x401d70\n    int64_t v17; // 0x401d70\n    int64_t v18; // 0x401d70\n    int64_t v19; // 0x401d70\n    int64_t v20; // 0x401e62\n    int64_t v21; // 0x401e3b\n    int64_t v22; // 0x401e81\n    int64_t v23; // 0x401e58\n    int32_t v24; // 0x401e1c\n    while (g42 != v11) {\n        // 0x401e19\n        v24 = *(int32_t *)(v10 + 12);\n        v8 = *(int32_t *)(v10 + 48) + v9 + v24;\n        v19 = v11;\n        v7 = v12;\n        if (g58 <= v8) {\n            // break -> 0x401ea0\n            break;\n        }\n        v9 = v8;\n        v10 = v19;\n        v14 = v9;\n        v11 = v10 + 40;\n        v17 = 0;\n        if (g42 != v11) {\n            // 0x401e30\n            v21 = 0xa00000000 * ((int64_t)g53 - v14) >> 32;\n            v13 = v21 * v21;\n            v17 = v13;\n            if (g42 != *(int64_t *)(v10 + 72)) {\n                // 0x401e47\n                v23 = (int64_t)(10 * (v9 - *(int32_t *)(v10 + 60)));\n                v17 = v23 * v23 / 2 + v13;\n            }\n        }\n        // 0x401e62\n        v20 = *(int64_t *)(v10 + 64) + v17;\n        v15 = v20;\n        if (g35 >= 1 && v1 == (int64_t)&g43) {\n            // 0x401e74\n            v22 = 0xa00000000 * (v14 - (int64_t)g35) >> 32;\n            v15 = v20 + v22 * v22 / 2;\n        }\n        // 0x401e00\n        v16 = v15;\n        v18 = v7;\n        if (v16 < v7) {\n            // 0x401e05\n            *v5 = v11;\n            *v6 = v9;\n            v18 = v16;\n        }\n        // 0x401e10\n        v12 = v18;\n    }\n    int64_t v25 = 0x1324; // 0x401ead\n    unsigned char v26; // 0x401eaf\n    int64_t v27; // 0x401eaf\n    if (v1 > (int64_t)&g43) {\n        // 0x401eaf\n        v26 = *(char *)(v1 - 24);\n        v27 = v26;\n        if ((v26 & 2) == 0) {\n            // 0x401f30\n            v25 = 3300;\n            if ((v27 & 4) == 0) {\n                // 0x401f3a\n                v25 = 0x1324;\n                if (v1 > (int64_t)&g45) {\n                    // 0x401f49\n                    v25 = 0x1324;\n                    if ((*(char *)(v1 - 64) & 8) != 0) {\n                        // 0x401f53\n                        v25 = 0x9c40 / (int64_t)(*(int32_t *)(v1 - 32) + 2) + 0x1324;\n                    }\n                }\n            }\n        } else {\n            // 0x401eb7\n            v25 = (v27 & 8) == 0 ? 0x59164 : 2400;\n        }\n    }\n    int64_t v28 = v25;\n    unsigned char v29 = *(char *)(v1 + 16); // 0x401ecd\n    int64_t v30; // 0x401d70\n    if (v29 % 2 == 0) {\n        // 0x401f10\n        v30 = v28;\n        if ((v29 & 8) != 0) {\n            // 0x401f14\n            v30 = 0x57e4 / (0x100000000 * v4 + 0x200000000 >> 32) + v28;\n        }\n    } else {\n        // 0x401ed5\n        v30 = v28 - 1600;\n    }\n    int64_t v31 = v1 - 40; // 0x401edf\n    *(int64_t *)(v1 + 24) = v30 + v12;\n    while (v31 >= (int64_t)&g43) {\n        uint64_t v32 = v31;\n        v3 = *(int32_t *)(v32 + 8);\n        v4 = v3;\n        v5 = (int64_t *)(v32 + 32);\n        v6 = (int32_t *)(v32 + 20);\n        v7 = 0x7fffffffffffffff;\n        v8 = (v32 == (int64_t)&g43 ? g39 : g38) + v3;\n        v9 = v8;\n        v10 = v32;\n        v14 = v9;\n        v11 = v10 + 40;\n        v17 = 0;\n        if (g42 != v11) {\n            // 0x401e30\n            v21 = 0xa00000000 * ((int64_t)g53 - v14) >> 32;\n            v13 = v21 * v21;\n            v17 = v13;\n            if (g42 != *(int64_t *)(v10 + 72)) {\n                // 0x401e47\n                v23 = (int64_t)(10 * (v9 - *(int32_t *)(v10 + 60)));\n                v17 = v23 * v23 / 2 + v13;\n            }\n        }\n        // 0x401e62\n        v20 = *(int64_t *)(v10 + 64) + v17;\n        v15 = v20;\n        if (g35 >= 1 && v32 == (int64_t)&g43) {\n            // 0x401e74\n            v22 = 0xa00000000 * (v14 - (int64_t)g35) >> 32;\n            v15 = v20 + v22 * v22 / 2;\n        }\n        // 0x401e00\n        v16 = v15;\n        v18 = v7;\n        if (v16 < v7) {\n            // 0x401e05\n            *v5 = v11;\n            *v6 = v9;\n            v18 = v16;\n        }\n        // 0x401e10\n        v12 = v18;\n        while (g42 != v11) {\n            // 0x401e19\n            v24 = *(int32_t *)(v10 + 12);\n            v8 = *(int32_t *)(v10 + 48) + v9 + v24;\n            v19 = v11;\n            v7 = v12;\n            if (g58 <= v8) {\n                // break -> 0x401ea0\n                break;\n            }\n            v9 = v8;\n            v10 = v19;\n            v14 = v9;\n            v11 = v10 + 40;\n            v17 = 0;\n            if (g42 != v11) {\n                // 0x401e30\n                v21 = 0xa00000000 * ((int64_t)g53 - v14) >> 32;\n                v13 = v21 * v21;\n                v17 = v13;\n                if (g42 != *(int64_t *)(v10 + 72)) {\n                    // 0x401e47\n                    v23 = (int64_t)(10 * (v9 - *(int32_t *)(v10 + 60)));\n                    v17 = v23 * v23 / 2 + v13;\n                }\n            }\n            // 0x401e62\n            v20 = *(int64_t *)(v10 + 64) + v17;\n            v15 = v20;\n            if (g35 >= 1 && v32 == (int64_t)&g43) {\n                // 0x401e74\n                v22 = 0xa00000000 * (v14 - (int64_t)g35) >> 32;\n                v15 = v20 + v22 * v22 / 2;\n            }\n            // 0x401e00\n            v16 = v15;\n            v18 = v7;\n            if (v16 < v7) {\n                // 0x401e05\n                *v5 = v11;\n                *v6 = v9;\n                v18 = v16;\n            }\n            // 0x401e10\n            v12 = v18;\n        }\n        // 0x401ea0\n        v25 = 0x1324;\n        if (v32 > (int64_t)&g43) {\n            // 0x401eaf\n            v26 = *(char *)(v32 - 24);\n            v27 = v26;\n            if ((v26 & 2) == 0) {\n                // 0x401f30\n                v25 = 3300;\n                if ((v27 & 4) == 0) {\n                    // 0x401f3a\n                    v25 = 0x1324;\n                    if (v32 > (int64_t)&g45) {\n                        // 0x401f49\n                        v25 = 0x1324;\n                        if ((*(char *)(v32 - 64) & 8) != 0) {\n                            // 0x401f53\n                            v25 = 0x9c40 / (int64_t)(*(int32_t *)(v32 - 32) + 2) + 0x1324;\n                        }\n                    }\n                }\n            } else {\n                // 0x401eb7\n                v25 = (v27 & 8) == 0 ? 0x59164 : 2400;\n            }\n        }\n        // 0x401ecd\n        v28 = v25;\n        v29 = *(char *)(v32 + 16);\n        if (v29 % 2 == 0) {\n            // 0x401f10\n            v30 = v28;\n            if ((v29 & 8) != 0) {\n                // 0x401f14\n                v30 = 0x57e4 / (0x100000000 * v4 + 0x200000000 >> 32) + v28;\n            }\n        } else {\n            // 0x401ed5\n            v30 = v28 - 1600;\n        }\n        // 0x401edc\n        v31 = v32 - 40;\n        *(int64_t *)(v32 + 24) = v30 + v12;\n    }\n    // 0x401ef4\n    *v2 = result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_401f80",
            "funcStartAddr": "401f80",
            "funcEndAddr": "401ff2",
            "decompiledFuncCode": "int64_t function_401f80(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 8);\n    int64_t * v2 = (int64_t *)(a1 + 16);\n    struct _IO_FILE * v3 = (struct _IO_FILE *)a1;\n    int64_t v4 = a2 & 0xffffffff; // 0x401f86\n    int64_t v5; // 0x401f80\n    int64_t result; // 0x401f80\n    while (true) {\n      lab_0x401fcf_2:\n        // 0x401fcf\n        result = v4;\n        int32_t v6 = result; // 0x401fcf\n        if (v6 != 32) {\n            if (v6 != 9) {\n                // break -> 0x401ff0\n                break;\n            }\n            int32_t v7 = g50; // 0x401f95\n            g41 = 1;\n            int32_t v8 = v7 >= 0 ? v7 + 8 & -8 : (int32_t)(8 * (int64_t)((int32_t)&g54 >> 3) + 8); // 0x401fad\n            g50 = v8;\n            uint64_t v9 = *v1; // 0x401fba\n            v5 = v9;\n            if (v9 >= *v2) {\n                // 0x401fcf\n                v4 = __uflow(v3);\n                goto lab_0x401fcf_2;\n            } else {\n                goto lab_0x401fc4;\n            }\n        } else {\n            // 0x401fd4\n            g50 = &g51;\n            uint64_t v10 = *v1; // 0x401fdb\n            v5 = v10;\n            if (v10 < *v2) {\n                goto lab_0x401fc4;\n            } else {\n                // 0x401fcf\n                v4 = __uflow(v3);\n                goto lab_0x401fcf_2;\n            }\n        }\n    }\n    // 0x401ff0\n    return result;\n  lab_0x401fc4:\n    // 0x401fc4\n    *v1 = v5 + 1;\n    // 0x401fcf\n    v4 = (int64_t)*(char *)v5;\n    goto lab_0x401fcf_2;\n}\n"
        },
        {
            "funcName": "function_402000",
            "funcStartAddr": "402000",
            "funcEndAddr": "4020ec",
            "decompiledFuncCode": "int64_t function_402000(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x402009\n    uint64_t v2 = *v1; // 0x402009\n    g50 = 0;\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x402017\n    int64_t v4; // 0x402000\n    if (v2 >= *v3) {\n        // 0x4020e0\n        v4 = __uflow((struct _IO_FILE *)a1);\n    } else {\n        // 0x402021\n        *v1 = v2 + 1;\n        v4 = (int64_t)*(char *)v2;\n    }\n    int64_t result = function_401f80(a1, v4); // 0x40202f\n    if (g55 == 0) {\n        int32_t v5 = g56; // 0x40203e\n        int32_t v6 = g50; // 0x402044\n        int32_t v7 = v6 - v5; // 0x402044\n        g36 = v7 == 0 | v7 < 0 != ((v7 ^ v6) & (v6 ^ v5)) < 0 ? v6 : v5;\n        // 0x402057\n        return result;\n    }\n    unsigned char v8 = *g59; // 0x40206d\n    g36 = g50;\n    if (v8 == 0) {\n        // 0x4020d0\n        return function_401f80(a1, result & 0xffffffff);\n    }\n    // 0x40207b\n    if ((int32_t)result != (int32_t)v8) {\n        // 0x402057\n        return result;\n    }\n    int64_t v9 = (int64_t)g59;\n    uint64_t v10 = *v1; // 0x4020ac\n    g50 = &g51;\n    int64_t v11; // 0x402000\n    int64_t v12; // 0x402000\n    char v13; // 0x402000\n    int64_t v14; // 0x40208c\n    char v15; // 0x402094\n    int64_t v16; // 0x4020bf\n    int64_t v17; // 0x4020c3\n    char v18; // 0x4020c8\n    if (v10 < *v3) {\n        // 0x402088\n        v14 = v9 + 1;\n        *v1 = v10 + 1;\n        v15 = *(char *)v14;\n        v11 = (int64_t)*(char *)v10;\n        v13 = v15;\n        v12 = v14;\n        if (v15 == 0) {\n            // break -> 0x4020d0\n            break;\n        }\n    } else {\n        // 0x4020bc\n        v16 = v9 + 1;\n        v17 = __uflow((struct _IO_FILE *)a1);\n        v18 = *(char *)v16;\n        v11 = v17;\n        v13 = v18;\n        v12 = v16;\n        if (v18 == 0) {\n            // break -> 0x4020d0\n            break;\n        }\n    }\n    int64_t result2 = v11; // 0x4020a1\n    while ((int32_t)v13 == (int32_t)v11) {\n        // 0x4020a9\n        v9 = v12;\n        v10 = *v1;\n        g50 = &g51;\n        if (v10 < *v3) {\n            // 0x402088\n            v14 = v9 + 1;\n            *v1 = v10 + 1;\n            v15 = *(char *)v14;\n            v11 = (int64_t)*(char *)v10;\n            v13 = v15;\n            v12 = v14;\n            if (v15 == 0) {\n                // break -> 0x4020d0\n                break;\n            }\n        } else {\n            // 0x4020bc\n            v16 = v9 + 1;\n            v17 = __uflow((struct _IO_FILE *)a1);\n            v18 = *(char *)v16;\n            v11 = v17;\n            v13 = v18;\n            v12 = v16;\n            if (v18 == 0) {\n                // break -> 0x4020d0\n                break;\n            }\n        }\n        // 0x40209f\n        result2 = v11;\n    }\n    // 0x402057\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4020f0",
            "funcStartAddr": "4020f0",
            "funcEndAddr": "4021cf",
            "decompiledFuncCode": "int64_t function_4020f0(int32_t a1) {\n    uint32_t v1 = g48; // 0x4020f6\n    int64_t v2 = v1; // 0x4020f6\n    int32_t v3 = v1 + a1; // 0x402103\n    int64_t v4 = v2; // 0x402106\n    int64_t result; // 0x4020f0\n    if (g41 != 0) {\n        int32_t v5 = v3 >= 0 ? v3 : v3 + 7; // 0x402110\n        uint32_t v6 = v5 & -8; // 0x402116\n        int64_t v7 = v6; // 0x402116\n        result = v7;\n        v4 = v2;\n        if (v1 < v6 == v7 > (int64_t)&g49) {\n            int64_t v8 = (int64_t)g29; // 0x402128\n            int64_t * v9 = (int64_t *)(v8 + 40); // 0x40212f\n            uint64_t v10 = *v9; // 0x40212f\n            if (v10 >= *(int64_t *)(v8 + 48)) {\n                // 0x4021c0\n                __overflow(g29, 9);\n            } else {\n                // 0x40213d\n                *v9 = v10 + 1;\n                *(char *)v10 = 9;\n            }\n            int32_t v11 = g48; // 0x402148\n            int64_t v12 = v11 >= 0 ? (int64_t)((v11 >> 3) + 1) : (int64_t)(((int32_t)&g52 >> 3) + 1); // 0x402159\n            int64_t v13 = 8 * v12; // 0x40215c\n            g48 = v13;\n            while (v12 < (int64_t)(v5 >> 3)) {\n                // 0x402128\n                v8 = (int64_t)g29;\n                v9 = (int64_t *)(v8 + 40);\n                v10 = *v9;\n                if (v10 >= *(int64_t *)(v8 + 48)) {\n                    // 0x4021c0\n                    __overflow(g29, 9);\n                } else {\n                    // 0x40213d\n                    *v9 = v10 + 1;\n                    *(char *)v10 = 9;\n                }\n                // 0x402148\n                v11 = g48;\n                v12 = v11 >= 0 ? (int64_t)((v11 >> 3) + 1) : (int64_t)(((int32_t)&g52 >> 3) + 1);\n                v13 = 8 * v12;\n                g48 = v13;\n            }\n            // 0x40216d\n            result = v12;\n            v4 = v13 & 0xfffffff8;\n        }\n    }\n    uint64_t v14 = (int64_t)v3; // 0x402103\n    if (v4 >= v14) {\n        // 0x4021a7\n        return result;\n    }\n    int64_t v15 = (int64_t)g29; // 0x402178\n    int64_t * v16 = (int64_t *)(v15 + 40); // 0x40217f\n    uint64_t v17 = *v16; // 0x40217f\n    if (v17 >= *(int64_t *)(v15 + 48)) {\n        // 0x4021b0\n        __overflow(g29, 32);\n    } else {\n        // 0x402189\n        *v16 = v17 + 1;\n        *(char *)v17 = 32;\n    }\n    // 0x402194\n    g48 = &g49;\n    while (v14 > (int64_t)&g49) {\n        // 0x402178\n        v15 = (int64_t)g29;\n        v16 = (int64_t *)(v15 + 40);\n        v17 = *v16;\n        if (v17 >= *(int64_t *)(v15 + 48)) {\n            // 0x4021b0\n            __overflow(g29, 32);\n        } else {\n            // 0x402189\n            *v16 = v17 + 1;\n            *(char *)v17 = 32;\n        }\n        // 0x402194\n        g48 = &g49;\n    }\n    // 0x4021a7\n    return &g49;\n}\n"
        },
        {
            "funcName": "function_4021d0",
            "funcStartAddr": "4021d0",
            "funcEndAddr": "402257",
            "decompiledFuncCode": "int64_t function_4021d0(int64_t a1) {\n    // 0x4021d0\n    if (g61 != 0) {\n        // 0x4021d9\n        g38 = g39;\n        return g39;\n    }\n    // 0x4021f0\n    if (g63 != 0) {\n        int32_t result = (char)a1 == 0 ? g39 : g50; // 0x402202\n        g38 = result;\n        return result;\n    }\n    int64_t result2 = g39; // 0x402217\n    if (g62 == 0) {\n        // 0x402238\n        g38 = g39;\n        // 0x40223e\n        return result2;\n    }\n    if ((char)a1 != 0) {\n        // 0x402224\n        if (g50 != g39) {\n            // 0x40222e\n            g38 = g50;\n            return result2;\n        }\n    }\n    // 0x402240\n    if (g38 != g39) {\n        // 0x40223e\n        return result2;\n    }\n    int64_t result3 = g39 == 0 ? 3 : 0; // 0x40224d\n    g38 = result3;\n    return result3;\n}\n"
        },
        {
            "funcName": "function_402260",
            "funcStartAddr": "402260",
            "funcEndAddr": "4022d7",
            "decompiledFuncCode": "int64_t function_402260(int64_t a1, int64_t a2) {\n    int64_t v1 = a2;\n    if ((int32_t)a2 == 0) {\n        // 0x4022d0\n        return 0;\n    }\n    int64_t v2 = a1; // 0x402278\n    int64_t v3 = (int64_t)g29; // 0x402280\n    unsigned char v4 = *(char *)v2; // 0x40228b\n    v1 = v4;\n    int64_t * v5 = (int64_t *)(v3 + 40); // 0x40228f\n    uint64_t v6 = *v5; // 0x40228f\n    if (v6 >= *(int64_t *)(v3 + 48)) {\n        // 0x4022c0\n        __overflow(g29, (int32_t)v4);\n    } else {\n        // 0x402299\n        *v5 = v6 + 1;\n        *(char *)v6 = (char)v1;\n    }\n    // 0x4022a4\n    v2++;\n    while (v2 != a1 + 1 + (a2 + 0xffffffff & 0xffffffff)) {\n        // 0x402280\n        v3 = (int64_t)g29;\n        v4 = *(char *)v2;\n        v1 = v4;\n        v5 = (int64_t *)(v3 + 40);\n        v6 = *v5;\n        if (v6 >= *(int64_t *)(v3 + 48)) {\n            // 0x4022c0\n            __overflow(g29, (int32_t)v4);\n        } else {\n            // 0x402299\n            *v5 = v6 + 1;\n            *(char *)v6 = (char)v1;\n        }\n        // 0x4022a4\n        v2++;\n    }\n    uint32_t result = *(int32_t *)&v1; // 0x4022a9\n    g48 += result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4022e0",
            "funcStartAddr": "4022e0",
            "funcEndAddr": "4023cc",
            "decompiledFuncCode": "int64_t function_4022e0(int64_t * a1, int32_t a2) {\n    int64_t v1 = (int64_t)a1;\n    g48 = 0;\n    function_4020f0(g40);\n    fputs_unlocked(g59, g29);\n    int32_t v2 = g48 + g55; // 0x40231d\n    g48 = v2;\n    function_4020f0(a2 - v2);\n    int64_t v3 = *(int64_t *)(v1 + 32); // 0x402332\n    int64_t v4 = v3 - 40; // 0x402336\n    int64_t v5 = v1; // 0x40233e\n    if (v4 != v1) {\n        int64_t v6 = v1;\n        int64_t v7 = v6 + 40; // 0x40234f\n        function_402260(*(int64_t *)v6, v6 + 8);\n        function_4020f0(*(int32_t *)(v6 + 12));\n        while (v4 != v7) {\n            // 0x402348\n            v6 = v7;\n            v7 = v6 + 40;\n            function_402260(*(int64_t *)v6, v6 + 8);\n            function_4020f0(*(int32_t *)(v6 + 12));\n        }\n        // 0x402365\n        v5 = v1 + 40 + (-80 - v1 + v3 & -8);\n    }\n    int64_t v8 = v5;\n    function_402260(*(int64_t *)v8, v8 + 8);\n    int64_t v9 = (int64_t)g29; // 0x402388\n    g35 = g48;\n    int64_t * v10 = (int64_t *)(v9 + 40); // 0x402395\n    uint64_t result = *v10; // 0x402395\n    if (result >= *(int64_t *)(v9 + 48)) {\n        // 0x4023b8\n        return __overflow(g29, 10);\n    }\n    // 0x40239f\n    *v10 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4023d0",
            "funcStartAddr": "4023d0",
            "funcEndAddr": "402416",
            "decompiledFuncCode": "int64_t function_4023d0(int64_t a1) {\n    int64_t result = function_4022e0(&g43, g39); // 0x4023e4\n    if (g44 == a1) {\n        // 0x40240f\n        return result;\n    }\n    int64_t v1 = g44; // 0x4023f3\n    int64_t result2 = function_4022e0((int64_t *)v1, g38); // 0x402401\n    v1 += 32;\n    while (v1 != a1) {\n        // 0x4023f8\n        result2 = function_4022e0((int64_t *)v1, g38);\n        v1 += 32;\n    }\n    // 0x40240f\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402420",
            "funcStartAddr": "402420",
            "funcEndAddr": "402598",
            "decompiledFuncCode": "int64_t function_402420(void) {\n    int64_t v1 = g42; // 0x402426\n    if (v1 == 0x60b2e0) {\n        int32_t result = fwrite_unlocked(&g47, 1, (int32_t)(int64_t)g46 - 0x614f40, g29); // 0x40256f\n        g46 = (char *)&g47;\n        return result;\n    }\n    // 0x40243a\n    function_401d70();\n    int64_t v2 = v1; // 0x402449\n    if (v1 != g44) {\n        int64_t v3 = v1; // 0x40246a\n        int64_t v4 = 0x7fffffffffffffff;\n        int64_t v5 = *(int64_t *)(g44 + 32); // 0x402470\n        int64_t v6 = *(int64_t *)(v5 + 24); // 0x402474\n        int64_t v7 = *(int64_t *)(g44 + 24) - v6; // 0x402478\n        int64_t v8 = v7 < v4 ? v7 : v4;\n        v3 = v7 < v4 ? g44 : v3;\n        int64_t v9 = v8 - 0x7ffffffffffffff6; // 0x40248a\n        int64_t v10 = v9 == 0 | v9 < 0 != (0x7ffffffffffffff5 - v8 & v8) < 0 ? v8 + 9 : v8; // 0x402490\n        v2 = v3;\n        while (v1 != v5) {\n            int64_t v11 = v6;\n            int64_t v12 = v5;\n            v4 = v10;\n            v5 = *(int64_t *)(v12 + 32);\n            v6 = *(int64_t *)(v5 + 24);\n            v7 = v11 - v6;\n            v8 = v7 < v4 ? v7 : v4;\n            v3 = v7 < v4 ? v12 : v3;\n            v9 = v8 - 0x7ffffffffffffff6;\n            v10 = v9 == 0 | v9 < 0 != (0x7ffffffffffffff5 - v8 & v8) < 0 ? v8 + 9 : v8;\n            v2 = v3;\n        }\n    }\n    // 0x40249c\n    function_4023d0(v2);\n    int64_t v13 = (int64_t)g46; // 0x4024a4\n    int64_t * v14 = (int64_t *)v2;\n    int64_t v15 = *v14; // 0x4024ab\n    __memmove_chk(&g47, (int64_t *)v15, (int32_t)(v13 - v15), 0x1388);\n    int64_t v16 = *v14; // 0x4024c3\n    int64_t v17 = 0x100000000 * (v16 - (int64_t)(int32_t)&g47) >> 32; // 0x4024d0\n    g46 = (char *)(v13 - v17);\n    uint64_t v18 = g42; // 0x4024e0\n    int64_t * v19; // 0x402534\n    if (v18 < v2) {\n        // 0x40250b\n        v19 = __memmove_chk(&g43, v14, (int32_t)(v18 - v2) + 40 & -8, 0x9c40);\n        g42 = (int64_t)&g43 - v2 + v18;\n        return (int64_t)v19;\n    }\n    int64_t v20 = v2 + 40; // 0x4024fe\n    *v14 = v16 - v17;\n    int64_t v21 = v20; // 0x402509\n    if (v20 > v18) {\n        // 0x40250b\n        v19 = __memmove_chk(&g43, v14, (int32_t)(v18 - v2) + 40 & -8, 0x9c40);\n        g42 = (int64_t)&g43 - v2 + v18;\n        return (int64_t)v19;\n    }\n    int64_t * v22 = (int64_t *)v21;\n    v21 += 40;\n    *v22 = *v22 - v17;\n    while (v21 <= v18) {\n        // 0x4024f8\n        v22 = (int64_t *)v21;\n        v21 += 40;\n        *v22 = *v22 - v17;\n    }\n    // 0x40250b\n    v19 = __memmove_chk(&g43, v14, (int32_t)(v18 - v2) + 40 & -8, 0x9c40);\n    g42 = (int64_t)&g43 - v2 + v18;\n    return (int64_t)v19;\n}\n"
        },
        {
            "funcName": "function_4025a0",
            "funcStartAddr": "4025a0",
            "funcEndAddr": "40284e",
            "decompiledFuncCode": "int64_t function_4025a0(int64_t a1, int64_t a2) {\n    int16_t ** v1 = __ctype_b_loc(); // 0x4025b4\n    int64_t * v2 = (int64_t *)(a1 + 8);\n    int64_t v3 = g42; // 0x4025c3\n    int64_t v4 = a2; // 0x4025c3\n    int64_t v5; // 0x4025a0\n    char c3; // 0x4025a0\n    int32_t v6; // 0x40266c\n    char * v7; // 0x4026a4\n    while (true) {\n      lab_0x4025c8_2:;\n        int64_t v8 = (int64_t)g46; // 0x4025c8\n        *(int64_t *)v3 = v8;\n        int64_t v9 = v8; // 0x4025d2\n        int64_t v10 = v4 & 0xffffffff; // 0x4025d2\n        int64_t v11; // 0x4025a0\n        int64_t v12; // 0x4025a0\n        int64_t v13; // 0x402638\n        int64_t v14; // 0x4025a0\n        while (true) {\n            int64_t v15 = v9; // 0x402614\n            if (v9 == (int64_t)&g48) {\n                // 0x402616\n                function_4021d0(1);\n                function_402420();\n                v15 = (int64_t)g46;\n            }\n            int64_t v16 = v15 + 1; // 0x4025d8\n            *(char *)v15 = (char)v10;\n            uint64_t v17 = *v2; // 0x4025df\n            g46 = (char *)v16;\n            int64_t v18; // 0x4025a0\n            int64_t v19; // 0x4025a0\n            if (v17 >= *(int64_t *)(a1 + 16)) {\n                uint32_t v20 = __uflow((struct _IO_FILE *)a1); // 0x402633\n                v13 = v20;\n                v14 = (int64_t)g46;\n                v19 = v14;\n                v18 = v13;\n                if (v20 == -1) {\n                    // break -> 0x402648\n                    break;\n                }\n            } else {\n                // 0x4025f0\n                *v2 = v17 + 1;\n                v19 = v16;\n                v18 = (int64_t)*(char *)v17;\n            }\n            // 0x4025ff\n            v10 = v18;\n            v9 = v19;\n            int64_t v21 = (int64_t)*v1;\n            v12 = v9;\n            v11 = v21;\n            v5 = v10;\n            if ((*(char *)(v21 + 1 + (0x100000000 * v10 >> 31)) & 32) != 0) {\n                goto lab_0x40264c;\n            }\n        }\n        // 0x402648\n        v12 = v14;\n        v11 = (int64_t)*v1;\n        v5 = v13;\n      lab_0x40264c:;\n        uint64_t v22 = *(int64_t *)g42; // 0x40265e\n        int64_t v23 = v12 - v22; // 0x402666\n        int32_t v24 = v23; // 0x402669\n        *(int32_t *)(g42 + 8) = v24;\n        v6 = g50 + v24;\n        char * c = (char *)v22;\n        int64_t v25 = v22 - 1 + (0x100000000 * v23 >> 32); // 0x402678\n        g50 = v6;\n        char * v26 = (char *)v25; // 0x402688\n        char * found_char_pos = strchr(\"(['`\\\"\", (int32_t)*c); // 0x40268d\n        v7 = (char *)(g42 + 16);\n        char v27 = *(char *)(2 * (int64_t)*v26 + v11); // 0x4026ac\n        *v7 = *v7 & -6 | (char)(found_char_pos != NULL) | v27 & 4;\n        int64_t v28 = v25; // 0x4026c1\n        if (v22 < v25) {\n            int64_t v29 = v28;\n            char c2 = *(char *)v29; // 0x4026e0\n            char * found_char_pos2 = strchr(\")]'\\\"\", (int32_t)c2); // 0x4026ed\n            c3 = c2;\n            while (found_char_pos2 != NULL) {\n                int64_t v30 = v29 - 1; // 0x4026d0\n                v28 = v30;\n                if (v22 == v30) {\n                    // 0x402800\n                    c3 = *c;\n                    goto lab_0x4026f7;\n                }\n                v29 = v28;\n                c2 = *(char *)v29;\n                found_char_pos2 = strchr(\")]'\\\"\", (int32_t)c2);\n                c3 = c2;\n            }\n        } else {\n            // 0x402844\n            c3 = *v26;\n        }\n        goto lab_0x4026f7;\n    }\n  lab_0x4027e6:\n    // 0x4027e6\n    return function_402000(a1);\n  lab_0x4026f7:\n    // 0x4026f7\n    *v7 = 2 * (char)(strchr(\".?!\", (int32_t)c3) != NULL) | *v7 & -3;\n    v4 = function_401f80(a1, v5 & 0xffffffff);\n    int32_t v31 = g50 - v6; // 0x402733\n    int64_t v32 = g42; // 0x40273a\n    int32_t * v33 = (int32_t *)(v32 + 12); // 0x402741\n    *v33 = v31;\n    int32_t v34 = v4; // 0x402744\n    char * v35 = (char *)(v32 + 16);\n    char v36 = *v35;\n    char v37; // 0x4025a0\n    char v38; // 0x4025a0\n    char v39; // 0x4025a0\n    if (v34 == -1) {\n        char v40 = v36 | 8; // 0x4027b0\n        *v35 = v40;\n        v38 = v40;\n        goto lab_0x4027b4;\n    } else {\n        // 0x40274a\n        v39 = 0;\n        if ((v36 & 2) == 0) {\n            goto lab_0x40276c;\n        } else {\n            // 0x402758\n            v39 = 8;\n            if (v31 < 2 == (v34 != 10)) {\n                char v41 = v36 & -9; // 0x402838\n                *v35 = v41;\n                v37 = v41;\n                goto lab_0x402785;\n            } else {\n                goto lab_0x40276c;\n            }\n        }\n    }\n  lab_0x4027b4:\n    // 0x4027b4\n    *v33 = (v38 & 8) != 0 ? 2 : 1;\n    int64_t v42 = v32; // 0x4027c9\n    if (v32 == 0x614ed0) {\n        goto lab_0x402820;\n    } else {\n        goto lab_0x4027cb;\n    }\n  lab_0x40276c:;\n    char v43 = v39 | v36 & -9; // 0x40277a\n    *v35 = v43;\n    v37 = v43;\n    v38 = v43;\n    if (v34 == 10) {\n        goto lab_0x4027b4;\n    } else {\n        goto lab_0x402785;\n    }\n  lab_0x402820:\n    // 0x402820\n    function_4021d0(1);\n    function_402420();\n    v42 = g42;\n    goto lab_0x4027cb;\n  lab_0x4027cb:;\n    int64_t v44 = v42 + 40; // 0x4027cb\n    g42 = v44;\n    v3 = v44;\n    if (v34 != 10 != v34 != -1) {\n        // break -> 0x4027e6\n        goto lab_0x4027e6;\n    }\n    goto lab_0x4025c8;\n  lab_0x402785:\n    // 0x402785\n    v38 = v37;\n    if (g60 != 0) {\n        goto lab_0x4027b4;\n    } else {\n        if (v32 == 0x614ed0) {\n            goto lab_0x402820;\n        } else {\n            int64_t v45 = v32 + 40; // 0x40279a\n            g42 = v45;\n            v3 = v45;\n            goto lab_0x4025c8;\n        }\n    }\n  lab_0x4025c8:\n    // 0x4025c8\n    goto lab_0x4025c8_2;\n}\n"
        },
        {
            "funcName": "function_402850",
            "funcStartAddr": "402850",
            "funcEndAddr": "402dc0",
            "decompiledFuncCode": "int64_t function_402850(int64_t a1) {\n    // 0x402850\n    int64_t v1; // 0x402850\n    function_403210(a1, 2, v1);\n    g41 = 0;\n    g38 = 0;\n    int64_t v2 = function_402000(a1); // 0x40287b\n    g37 = v2;\n    int64_t * v3 = (int64_t *)(a1 + 8);\n    int64_t * v4 = (int64_t *)(a1 + 16);\n    int64_t v5 = v2 & 0xffffffff; // 0x402888\n    int64_t v6; // 0x402850\n    int64_t v7; // 0x402850\n    int64_t v8; // 0x402850\n    int64_t v9; // 0x402850\n    int32_t v10; // 0x402850\n    while (true) {\n      lab_0x402890:\n        // 0x402890\n        g35 = 0;\n        v7 = v5;\n        while (true) {\n          lab_0x4028a0:\n            // 0x4028a0\n            v8 = v7;\n            v10 = v8;\n            switch (v10) {\n                case 10: {\n                    goto lab_0x402a78;\n                }\n                case -1: {\n                    goto lab_0x402a78;\n                }\n                default: {\n                    // 0x4028be\n                    if ((int64_t)g36 >= (int64_t)g56) {\n                        // 0x4028c6\n                        if (g50 >= g57 + g36) {\n                            // break -> 0x402af0\n                            break;\n                        }\n                    }\n                    // 0x4028d6\n                    g48 = 0;\n                    v6 = 1;\n                    if (g50 > g36) {\n                        goto lab_0x4028ee;\n                    } else {\n                        goto lab_0x402aa8;\n                    }\n                }\n            }\n        }\n        // 0x402af0\n        uint32_t v11; // 0x4028a0\n        g40 = v11;\n        uint32_t v12; // 0x4028a6\n        g39 = v12;\n        g46 = (char *)&g47;\n        g42 = &g43;\n        int64_t v13 = function_4025a0(a1, v8 & 0xffffffff); // 0x402b17\n        int32_t v14 = g36; // 0x402b1c\n        int32_t v15 = g40; // 0x402b22\n        int64_t v16 = 0; // 0x402b30\n        if (v14 == v15) {\n            int32_t v17 = g57; // 0x402bc0\n            uint32_t v18 = g50; // 0x402bc8\n            v16 = 0;\n            if (v17 + v14 <= v18) {\n                int32_t v19 = v13; // 0x402bd4\n                v16 = !((v19 == 10 | v19 == -1));\n            }\n        }\n        int64_t v20 = v13 & 0xffffffff; // 0x402b2b\n        int64_t v21 = v16;\n        function_4021d0(v21);\n        char v22 = g61; // 0x402b3b\n        v9 = v20;\n        if (v22 != 0) {\n            goto lab_0x402b60;\n        } else {\n            char v23 = g63; // 0x402b44\n            if (v23 == 0) {\n                char v24 = g62; // 0x402bf0\n                if (v24 == 0) {\n                    // 0x402c90\n                    v9 = v20;\n                    if (v14 != v15) {\n                        goto lab_0x402b60;\n                    } else {\n                        uint32_t v25 = g50; // 0x402c99\n                        int32_t v26 = g57; // 0x402c9f\n                        v9 = v20;\n                        if (v26 + v14 > v25) {\n                            goto lab_0x402b60;\n                        } else {\n                            // 0x402cad\n                            v9 = v20;\n                            v9 = v20;\n                            switch ((int32_t)v13) {\n                                case -1: {\n                                    goto lab_0x402b60;\n                                }\n                                case 10: {\n                                    goto lab_0x402b60;\n                                }\n                                default: {\n                                    int32_t v27 = g38; // 0x402cbf\n                                    v9 = v20;\n                                    if (v27 == v25) {\n                                        int64_t v28 = function_4025a0(a1, v20); // 0x402d05\n                                        int64_t v29 = v28 & 0xffffffff; // 0x402d0a\n                                        int32_t v30 = g36; // 0x402d0c\n                                        int32_t v31 = g40; // 0x402d12\n                                        v9 = v29;\n                                        int32_t v32 = v30; // 0x402d18\n                                        int64_t v33 = v29; // 0x402d18\n                                        int64_t v34 = v28; // 0x402d18\n                                        if (v30 == v31) {\n                                            while (true) {\n                                              lab_0x402d1e:;\n                                                int64_t v35 = v33;\n                                                int32_t v36 = v32;\n                                                uint32_t v37 = g50; // 0x402cd0\n                                                int32_t v38 = g57; // 0x402cd6\n                                                v9 = v35;\n                                                if (v38 + v36 > v37) {\n                                                    // break -> 0x402b60\n                                                    break;\n                                                }\n                                                int64_t v39 = v34;\n                                                v9 = v35;\n                                                v9 = v35;\n                                                switch ((int32_t)v39) {\n                                                    case 10: {\n                                                        goto lab_0x402b60;\n                                                    }\n                                                    case -1: {\n                                                        goto lab_0x402b60;\n                                                    }\n                                                    default: {\n                                                        int32_t v40 = g38; // 0x402cf6\n                                                        v9 = v35;\n                                                        if (v40 != v37) {\n                                                            // break -> 0x402b60\n                                                            break;\n                                                        }\n                                                        int64_t v41 = function_4025a0(a1, v35); // 0x402d05\n                                                        int64_t v42 = v41 & 0xffffffff; // 0x402d0a\n                                                        int32_t v43 = g36; // 0x402d0c\n                                                        int32_t v44 = g40; // 0x402d12\n                                                        v9 = v42;\n                                                        v32 = v43;\n                                                        v33 = v42;\n                                                        v34 = v41;\n                                                        if (v43 != v44) {\n                                                            // break -> 0x402b60\n                                                            break;\n                                                        }\n                                                        goto lab_0x402d1e;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    goto lab_0x402b60;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    // 0x402bfd\n                    v9 = v20;\n                    if (v14 != v15) {\n                        goto lab_0x402b60;\n                    } else {\n                        uint32_t v45 = g50; // 0x402c06\n                        int32_t v46 = g57; // 0x402c0c\n                        v9 = v20;\n                        if (v46 + v14 > v45) {\n                            goto lab_0x402b60;\n                        } else {\n                            // 0x402c1a\n                            v9 = v20;\n                            v9 = v20;\n                            switch ((int32_t)v13) {\n                                case 10: {\n                                    goto lab_0x402b60;\n                                }\n                                case -1: {\n                                    goto lab_0x402b60;\n                                }\n                                default: {\n                                    int32_t v47 = g39; // 0x402c2c\n                                    v9 = v20;\n                                    if (v47 != v45) {\n                                        int64_t v48 = function_4025a0(a1, v20); // 0x402c75\n                                        int64_t v49 = v48 & 0xffffffff; // 0x402c7a\n                                        int32_t v50 = g36; // 0x402c7c\n                                        int32_t v51 = g40; // 0x402c82\n                                        v9 = v49;\n                                        int32_t v52 = v50; // 0x402c88\n                                        int64_t v53 = v49; // 0x402c88\n                                        int64_t v54 = v48; // 0x402c88\n                                        if (v50 == v51) {\n                                            while (true) {\n                                              lab_0x402c8e:;\n                                                int64_t v55 = v53;\n                                                int32_t v56 = v52;\n                                                uint32_t v57 = g50; // 0x402c40\n                                                int32_t v58 = g57; // 0x402c46\n                                                v9 = v55;\n                                                if (v58 + v56 > v57) {\n                                                    // break -> 0x402b60\n                                                    break;\n                                                }\n                                                int64_t v59 = v54;\n                                                v9 = v55;\n                                                v9 = v55;\n                                                switch ((int32_t)v59) {\n                                                    case 10: {\n                                                        goto lab_0x402b60;\n                                                    }\n                                                    case -1: {\n                                                        goto lab_0x402b60;\n                                                    }\n                                                    default: {\n                                                        int32_t v60 = g38; // 0x402c66\n                                                        v9 = v55;\n                                                        if (v60 != v57) {\n                                                            // break -> 0x402b60\n                                                            break;\n                                                        }\n                                                        int64_t v61 = function_4025a0(a1, v55); // 0x402c75\n                                                        int64_t v62 = v61 & 0xffffffff; // 0x402c7a\n                                                        int32_t v63 = g36; // 0x402c7c\n                                                        int32_t v64 = g40; // 0x402c82\n                                                        v9 = v62;\n                                                        v52 = v63;\n                                                        v53 = v62;\n                                                        v54 = v61;\n                                                        if (v63 != v64) {\n                                                            // break -> 0x402b60\n                                                            break;\n                                                        }\n                                                        goto lab_0x402c8e;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    goto lab_0x402b60;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 0x402b51\n                v9 = v20;\n                if (v14 == v15) {\n                    int32_t v65 = g57; // 0x402d20\n                    uint32_t v66 = g50; // 0x402d26\n                    v9 = v20;\n                    if (v65 + v14 <= v66) {\n                        int32_t v67 = v13; // 0x402d32\n                        v9 = v20;\n                        if (v67 != 10 == (v67 != -1)) {\n                            int64_t v68 = function_4025a0(a1, v20); // 0x402d7d\n                            int64_t v69 = v68 & 0xffffffff; // 0x402d82\n                            int32_t v70 = g36; // 0x402d84\n                            int32_t v71 = g40; // 0x402d8a\n                            v9 = v69;\n                            int32_t v72 = v70; // 0x402d90\n                            int64_t v73 = v69; // 0x402d90\n                            int64_t v74 = v68; // 0x402d90\n                            if (v70 == v71) {\n                                while (true) {\n                                  lab_0x402d96:;\n                                    int64_t v75 = v73;\n                                    int32_t v76 = v72;\n                                    uint32_t v77 = g50; // 0x402d48\n                                    int32_t v78 = g57; // 0x402d4e\n                                    v9 = v75;\n                                    if (v78 + v76 > v77) {\n                                        // break -> 0x402b60\n                                        break;\n                                    }\n                                    int64_t v79 = v74;\n                                    v9 = v75;\n                                    v9 = v75;\n                                    switch ((int32_t)v79) {\n                                        case 10: {\n                                            goto lab_0x402b60;\n                                        }\n                                        case -1: {\n                                            goto lab_0x402b60;\n                                        }\n                                        default: {\n                                            int32_t v80 = g38; // 0x402d6e\n                                            v9 = v75;\n                                            if (v80 != v77) {\n                                                // break -> 0x402b60\n                                                break;\n                                            }\n                                            int64_t v81 = function_4025a0(a1, v75); // 0x402d7d\n                                            int64_t v82 = v81 & 0xffffffff; // 0x402d82\n                                            int32_t v83 = g36; // 0x402d84\n                                            int32_t v84 = g40; // 0x402d8a\n                                            v9 = v82;\n                                            v72 = v83;\n                                            v73 = v82;\n                                            v74 = v81;\n                                            if (v83 != v84) {\n                                                // break -> 0x402b60\n                                                break;\n                                            }\n                                            goto lab_0x402d96;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                goto lab_0x402b60;\n            }\n        }\n    }\n  lab_0x402a24_2:\n    // 0x402a24\n    g37 = -1;\n    int64_t result; // 0x402850\n    return result;\n  lab_0x4029e5:;\n    int64_t v85 = (int64_t)g29; // 0x4029e5\n    int64_t * v86 = (int64_t *)(v85 + 40); // 0x4029ec\n    uint64_t v87 = *v86; // 0x4029ec\n    if (v87 >= *(int64_t *)(v85 + 48)) {\n        // 0x402a68\n        __overflow(g29, 10);\n    } else {\n        // 0x4029f6\n        *v86 = v87 + 1;\n        *(char *)v87 = 10;\n    }\n    // 0x402a01\n    v7 = function_402000(a1) & 0xffffffff;\n    goto lab_0x4028a0;\n  lab_0x402b60:;\n    uint64_t v88 = g42; // 0x402b60\n    if (v88 < (int64_t)&g43 || v88 == 0x60b2e0) {\n        // 0x402d98\n        __assert_fail(\"word < word_limit\", \"src/fmt.c\", 606, \"get_paragraph\");\n        return &g80;\n    }\n    char * v89 = (char *)(v88 - 24); // 0x402b74\n    *v89 = *v89 | 10;\n    g37 = v9;\n    function_401d70();\n    function_4023d0(v88);\n    v5 = g37;\n    goto lab_0x402890;\n  lab_0x402a78:\n    // 0x402a78\n    g48 = 0;\n    v6 = !((v10 == -1 | v10 == 10));\n    int64_t v90; // 0x402850\n    int64_t v91; // 0x402850\n    if (g50 > g36) {\n        goto lab_0x4028ee;\n    } else {\n        // 0x402a9a\n        v90 = g50;\n        v91 = v8;\n        if (v10 == -1 || v10 == 10) {\n            goto lab_0x4029e0_2;\n        } else {\n            goto lab_0x402aa8;\n        }\n    }\n  lab_0x4028ee:\n    // 0x4028ee\n    function_4020f0(g36);\n    int64_t v92 = g48; // 0x4028f3\n    int64_t v93 = g50; // 0x4028f9\n    int64_t v94 = v92; // 0x402908\n    int64_t v95 = v93; // 0x402908\n    int64_t v96 = v6; // 0x402908\n    int64_t v97 = (int64_t)g59; // 0x402908\n    int64_t v98 = v92; // 0x402908\n    int64_t v99 = v93; // 0x402908\n    int64_t v100 = v6; // 0x402908\n    if (g50 != g48) {\n        goto lab_0x40292e;\n    } else {\n        goto lab_0x402960;\n    }\n  lab_0x402aa8:\n    // 0x402aa8\n    function_4020f0(g36);\n    uint32_t v101 = g48; // 0x402aad\n    int64_t v102; // 0x402850\n    int64_t v103; // 0x402850\n    int64_t v104; // 0x402850\n    int64_t v105; // 0x402850\n    int64_t v106; // 0x402850\n    char v107; // 0x402850\n    if (v101 == g50) {\n        // 0x402ae4\n        function_4020f0((int32_t)0);\n        goto lab_0x402969;\n    } else {\n        int64_t v108 = g50; // 0x402ab3\n        char v109 = *g59; // 0x402ac8\n        v106 = v108;\n        v107 = v109;\n        v102 = 1;\n        v103 = (int64_t)g59;\n        v104 = v101;\n        v105 = v108;\n        if (v109 != 0) {\n            goto lab_0x402938;\n        } else {\n            goto lab_0x402ae0;\n        }\n    }\n  lab_0x40292e:;\n    char v110 = *(char *)v97; // 0x40292e\n    v106 = v95;\n    v107 = v110;\n    v102 = v96;\n    v103 = v97;\n    v98 = v94;\n    v99 = v95;\n    v100 = v96;\n    if (v110 == 0) {\n        goto lab_0x402960;\n    } else {\n        goto lab_0x402938;\n    }\n  lab_0x402960:\n    // 0x402960\n    v104 = v98;\n    v105 = v99;\n    if ((char)v100 != 0) {\n        goto lab_0x402ae0;\n    } else {\n        goto lab_0x402969;\n    }\n  lab_0x4029e0_2:\n    // 0x4029e0\n    result = v90;\n    if ((int32_t)v91 == -1) {\n        // break (via goto) -> 0x402a24\n        goto lab_0x402a24_2;\n    }\n    goto lab_0x4029e5;\n  lab_0x402938:;\n    unsigned char v111 = v107;\n    int64_t v112 = (int64_t)g29; // 0x402938\n    int64_t * v113 = (int64_t *)(v112 + 40); // 0x402943\n    uint64_t v114 = *v113; // 0x402943\n    int64_t v115; // 0x402850\n    if (v114 < *(int64_t *)(v112 + 48)) {\n        // 0x402910\n        *v113 = v114 + 1;\n        *(char *)v114 = v111;\n        v115 = v106;\n    } else {\n        // 0x40294d\n        __overflow(g29, (int32_t)v111);\n        v115 = g50;\n    }\n    // 0x40291b\n    g48 = &g49;\n    v94 = &g49;\n    v95 = v115;\n    v96 = v102;\n    v97 = v103 + 1;\n    v98 = &g49;\n    v99 = v115;\n    v100 = v102;\n    if ((int32_t)v115 == (int32_t)&g49) {\n        goto lab_0x402960;\n    } else {\n        goto lab_0x40292e;\n    }\n  lab_0x402ae0:\n    // 0x402ae4\n    function_4020f0((int32_t)(v105 - v104 & 0xffffffff));\n    goto lab_0x402969;\n  lab_0x402969:\n    if (v10 == -1) {\n        int32_t v116 = g36 + g55; // 0x402a16\n        result = v116;\n        if (v116 > g50) {\n            goto lab_0x402a24_2;\n        } else {\n            int64_t v117 = (int64_t)g29; // 0x402a40\n            int64_t * v118 = (int64_t *)(v117 + 40); // 0x402a47\n            uint64_t v119 = *v118; // 0x402a47\n            if (v119 >= *(int64_t *)(v117 + 48)) {\n                // 0x402bb0\n                result = __overflow(g29, 10);\n                goto lab_0x402a24_2;\n            } else {\n                // 0x402a55\n                *v118 = v119 + 1;\n                *(char *)v119 = 10;\n                result = v119;\n                goto lab_0x402a24_2;\n            }\n        }\n    }\n    int32_t v120 = v10; // 0x40299a\n    int64_t v121 = v8; // 0x40299a\n    if (v8 == 10) {\n        goto lab_0x4029e5;\n    } else {\n        int32_t v122; // 0x4029cb\n        int64_t v123; // 0x4029d0\n        while (true) {\n            int32_t v124 = v120; // 0x402850\n            int64_t v125 = v121; // 0x402850\n            int64_t v126; // 0x402850\n            while (true) {\n                int64_t v127 = (int64_t)g29; // 0x4029a1\n                int64_t * v128 = (int64_t *)(v127 + 40); // 0x4029a8\n                uint64_t v129 = *v128; // 0x4029a8\n                if (v129 < *(int64_t *)(v127 + 48)) {\n                    // 0x402978\n                    *v128 = v129 + 1;\n                    *(char *)v129 = (char)v125;\n                    uint64_t v130 = *v3; // 0x402982\n                    v126 = v130;\n                    if (v130 < *v4) {\n                        // break -> 0x40298c\n                        break;\n                    }\n                } else {\n                    // 0x4029b2\n                    __overflow(g29, v124 % 256);\n                    uint64_t v131 = *v3; // 0x4029ba\n                    v126 = v131;\n                    if (v131 < *v4) {\n                        // break -> 0x40298c\n                        break;\n                    }\n                }\n                // 0x4029c8\n                v122 = __uflow((struct _IO_FILE *)a1);\n                v123 = v122;\n                if (v122 == 10) {\n                    // break (via goto) -> 0x4029e0\n                    goto lab_0x4029e0;\n                }\n                // 0x40299c\n                v124 = v122;\n                v125 = v123;\n                result = -1;\n                if (v122 == -1) {\n                    // break (via goto) -> 0x402a24\n                    goto lab_0x402a24_2;\n                }\n            }\n            // 0x40298c\n            *v3 = v126 + 1;\n            unsigned char v132 = *(char *)v126; // 0x402994\n            if (v132 == 10) {\n                goto lab_0x4029e5;\n            }\n            // 0x40299c\n            v120 = v132;\n            v121 = v132;\n        }\n      lab_0x4029e0:\n        // 0x4029e0\n        v90 = v122;\n        v91 = v123;\n        goto lab_0x4029e0_2;\n    }\n}\n"
        },
        {
            "funcName": "function_402dc0",
            "funcStartAddr": "402dc0",
            "funcEndAddr": "40313d",
            "decompiledFuncCode": "int64_t function_402dc0(int64_t a1) {\n    int32_t status = a1; // 0x402dd6\n    if (status != 0) {\n        // 0x402dda\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x402dff\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402e06\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [-WIDTH] [OPTION]... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Reformat each paragraph in the FILE(s), writing to standard output.\\nThe option -WIDTH is an abbreviated form of --width=DIGITS.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -c, --crown-margin        preserve indentation of first two lines\\n  -p, --prefix=STRING       reformat only lines beginning with STRING,\\n                              reattaching the prefix to reformatted lines\\n  -s, --split-only          split long lines, but do not refill\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"  -t, --tagged-paragraph    indentation of first line different from second\\n  -u, --uniform-spacing     one space between words, two after sentences\\n  -w, --width=WIDTH         maximum line width (default of 75 columns)\\n  -g, --goal=WIDTH          goal width (default of 93% of width)\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g29);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g29);\n    int64_t v1 = &g2; // bp-136, 0x402f19\n    bool v2; // 0x402dc0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402fa0\n    int64_t v6 = *(int64_t *)v5; // 0x402fa4\n    int64_t v7 = 4; // 0x402faa\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"fmt\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402fb6\n        char v11 = *(char *)v9; // 0x402fb6\n        char v12 = v11; // 0x402fb6\n        bool v13 = false; // 0x402fb6\n        while (v10 == v11) {\n            // 0x402fac\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402fb6\n            int64_t v15 = v8 + v3; // 0x402fb6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402fc2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 4;\n    }\n    // 0x402fc2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4030d4;\n        } else {\n            // 0x4030be\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403113\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403024;\n            } else {\n                goto lab_0x4030d4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x403024;\n        } else {\n            // 0x40300a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x403113\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x403024;\n            } else {\n                goto lab_0x403024;\n            }\n        }\n    }\n  lab_0x4030d4:\n    // 0x4030d4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x403064\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402dff\n    exit(status);\n    // UNREACHABLE\n  lab_0x403024:\n    // 0x403024\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x403064\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402dff\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403140",
            "funcStartAddr": "403140",
            "funcEndAddr": "403148",
            "decompiledFuncCode": "int64_t function_403140(int64_t a1) {\n    // 0x403140\n    g65 = a1;\n    int64_t result; // 0x403140\n    return result;\n}\n"
        },
        {
            "funcName": "function_403150",
            "funcStartAddr": "403150",
            "funcEndAddr": "403158",
            "decompiledFuncCode": "int64_t function_403150(int64_t a1) {\n    // 0x403150\n    g64 = a1;\n    int64_t result; // 0x403150\n    return result;\n}\n"
        },
        {
            "funcName": "function_403160",
            "funcStartAddr": "403160",
            "funcEndAddr": "4031fe",
            "decompiledFuncCode": "int64_t function_403160(void) {\n    // 0x403160\n    int32_t * err_num; // 0x403176\n    if ((int32_t)function_406b60((int64_t)g29) == 0) {\n        goto lab_0x40318c;\n    } else {\n        // 0x403176\n        err_num = __errno_location();\n        if (g64 == 0) {\n            goto lab_0x4031a3;\n        } else {\n            // 0x403187\n            if (*err_num != 32) {\n                goto lab_0x4031a3;\n            } else {\n                goto lab_0x40318c;\n            }\n        }\n    }\n  lab_0x40318c:;\n    int64_t result = function_406b60((int64_t)g32); // 0x403193\n    if ((int32_t)result == 0) {\n        // 0x40319c\n        return result;\n    }\n    // 0x4031de\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x4031a3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4031af\n    if (g65 == 0) {\n        // 0x4031e9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4031c3\n        error(0, *err_num, \"%s: %s\", (char *)function_404cb0((int64_t)g65), v1);\n    }\n    // 0x4031de\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403200",
            "funcStartAddr": "403200",
            "funcEndAddr": "403205",
            "decompiledFuncCode": "int64_t function_403200(void) {\n    // 0x403200\n    int64_t fd; // 0x403200\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_403210",
            "funcStartAddr": "403210",
            "funcEndAddr": "403231",
            "decompiledFuncCode": "int64_t function_403210(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x403210\n    if (stream == 0) {\n        // 0x403230\n        int64_t result; // 0x403210\n        return result;\n    }\n    // 0x403215\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_403240",
            "funcStartAddr": "403240",
            "funcEndAddr": "4032d9",
            "decompiledFuncCode": "int64_t function_403240(int64_t str) {\n    // 0x403240\n    if (str == 0) {\n        // 0x4032b9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g32);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40324e\n    int64_t result = (int64_t)found_char_pos; // 0x40324e\n    if (found_char_pos == NULL) {\n        // 0x4032a9\n        g66 = str;\n        g31 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403258\n    if (v1 - str < 7) {\n        // 0x4032a9\n        g66 = str;\n        g31 = str;\n        return result;\n    }\n    // 0x403268\n    bool v2; // 0x403240\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403240\n    int64_t v5 = result - 6; // 0x403240\n    int64_t v6 = 7; // 0x403276\n    unsigned char v7 = *(char *)v5; // 0x403276\n    char v8 = *(char *)v4; // 0x403276\n    char v9 = v8; // 0x403276\n    bool v10 = false; // 0x403276\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403280\n    int64_t v13 = v1; // 0x403280\n    int64_t v14 = 3; // 0x403280\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4032a9\n        g66 = str;\n        g31 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403292\n    char v16 = *(char *)v12; // 0x403292\n    char v17 = v16; // 0x403292\n    bool v18 = false; // 0x403292\n    while (v15 == v16) {\n        // 0x403282\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40329c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40329e\n        v20 = result + 4;\n        g28 = v20;\n    }\n    // 0x4032a9\n    g66 = v20;\n    g31 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4032e0",
            "funcStartAddr": "4032e0",
            "funcEndAddr": "4033d2",
            "decompiledFuncCode": "int64_t function_4032e0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4032f4\n    int64_t result = (int64_t)v1; // 0x4032f4\n    if (result != a1) {\n        // 0x403301\n        return result;\n    }\n    int64_t v2 = function_406c20(); // 0x403310\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4033c6\n    if (v3 == 85) {\n        // 0x403320\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4033b8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g1;\n            return result2;\n        }\n        char v4 = *v1; // 0x40334e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x40335b\n        // 0x403301\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4033b8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g1;\n        return result2;\n    }\n    char v5 = *v1; // 0x40339d\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x4033aa\n    // 0x403301\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4033e0",
            "funcStartAddr": "4033e0",
            "funcEndAddr": "403437",
            "decompiledFuncCode": "int64_t function_4033e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4033e0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403428\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403437",
            "funcStartAddr": "403437",
            "funcEndAddr": "404601",
            "decompiledFuncCode": "int64_t function_403437(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403481\n    int64_t v3 = 0; // 0x403481\n    int64_t v4; // 0x403437\n    int64_t v5; // 0x403437\n    int64_t v6; // 0x403437\n    int64_t v7; // 0x403437\n    int64_t v8; // 0x403437\n    int64_t v9; // 0x403437\n    int64_t v10; // 0x403437\n    int64_t v11; // 0x403437\n    int64_t v12; // 0x403437\n    int64_t v13; // 0x403437\n    int64_t v14; // 0x403437\n    int64_t v15; // 0x403437\n    int64_t v16; // 0x403437\n    int64_t v17; // 0x403437\n    int64_t v18; // 0x403437\n    int64_t result; // 0x403437\n    int64_t v19; // 0x403437\n    int32_t wc; // bp+132, 0x403437\n    int64_t ps; // bp+136, 0x403437\n    char v20; // 0x4039f0\n    int64_t v21; // 0x4039f0\n    int64_t v22; // 0x403d98\n    int64_t v23; // 0x403437\n    int64_t v24; // 0x403db7\n    int32_t v25; // 0x403437\n    while (true) {\n      lab_0x403488_2:\n        // 0x403488\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403437\n        int64_t v27; // 0x4034bc\n        while (true) {\n          lab_0x403488:\n            // 0x403488\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403493\n            if (v15 == -1) {\n                // 0x403495\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4034a3\n            if (v28) {\n                // break (via goto) -> 0x403c08\n                goto lab_0x403c08;\n            }\n            // 0x4034ac\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g79 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x403a9b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4035e1;\n                    }\n                    // 0x403ebd\n                    v26 = v5 + 1;\n                    goto lab_0x403488;\n                }\n                case 7: {\n                    goto lab_0x4035e1;\n                }\n                case 8: {\n                    goto lab_0x4035e1;\n                }\n                case 9: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4035e1;\n                }\n                case 12: {\n                    goto lab_0x4035e1;\n                }\n                case 13: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x4035ad;\n                }\n                case 36: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4035e1;\n                }\n                case 38: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4035e1;\n                }\n                case 44: {\n                    goto lab_0x4035e1;\n                }\n                case 45: {\n                    goto lab_0x4035e1;\n                }\n                case 46: {\n                    goto lab_0x4035e1;\n                }\n                case 47: {\n                    goto lab_0x4035e1;\n                }\n                case 48: {\n                    goto lab_0x4035e1;\n                }\n                case 49: {\n                    goto lab_0x4035e1;\n                }\n                case 50: {\n                    goto lab_0x4035e1;\n                }\n                case 51: {\n                    goto lab_0x4035e1;\n                }\n                case 52: {\n                    goto lab_0x4035e1;\n                }\n                case 53: {\n                    goto lab_0x4035e1;\n                }\n                case 54: {\n                    goto lab_0x4035e1;\n                }\n                case 55: {\n                    goto lab_0x4035e1;\n                }\n                case 56: {\n                    goto lab_0x4035e1;\n                }\n                case 57: {\n                    goto lab_0x4035e1;\n                }\n                case 58: {\n                    goto lab_0x4035e1;\n                }\n                case 59: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4035e1;\n                }\n                case 66: {\n                    goto lab_0x4035e1;\n                }\n                case 67: {\n                    goto lab_0x4035e1;\n                }\n                case 68: {\n                    goto lab_0x4035e1;\n                }\n                case 69: {\n                    goto lab_0x4035e1;\n                }\n                case 70: {\n                    goto lab_0x4035e1;\n                }\n                case 71: {\n                    goto lab_0x4035e1;\n                }\n                case 72: {\n                    goto lab_0x4035e1;\n                }\n                case 73: {\n                    goto lab_0x4035e1;\n                }\n                case 74: {\n                    goto lab_0x4035e1;\n                }\n                case 75: {\n                    goto lab_0x4035e1;\n                }\n                case 76: {\n                    goto lab_0x4035e1;\n                }\n                case 77: {\n                    goto lab_0x4035e1;\n                }\n                case 78: {\n                    goto lab_0x4035e1;\n                }\n                case 79: {\n                    goto lab_0x4035e1;\n                }\n                case 80: {\n                    goto lab_0x4035e1;\n                }\n                case 81: {\n                    goto lab_0x4035e1;\n                }\n                case 82: {\n                    goto lab_0x4035e1;\n                }\n                case 83: {\n                    goto lab_0x4035e1;\n                }\n                case 84: {\n                    goto lab_0x4035e1;\n                }\n                case 85: {\n                    goto lab_0x4035e1;\n                }\n                case 86: {\n                    goto lab_0x4035e1;\n                }\n                case 87: {\n                    goto lab_0x4035e1;\n                }\n                case 88: {\n                    goto lab_0x4035e1;\n                }\n                case 89: {\n                    goto lab_0x4035e1;\n                }\n                case 90: {\n                    goto lab_0x4035e1;\n                }\n                case 91: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4035e1;\n                }\n                case 94: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4035e1;\n                }\n                case 96: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4035e1;\n                }\n                case 98: {\n                    goto lab_0x4035e1;\n                }\n                case 99: {\n                    goto lab_0x4035e1;\n                }\n                case 100: {\n                    goto lab_0x4035e1;\n                }\n                case 101: {\n                    goto lab_0x4035e1;\n                }\n                case 102: {\n                    goto lab_0x4035e1;\n                }\n                case 103: {\n                    goto lab_0x4035e1;\n                }\n                case 104: {\n                    goto lab_0x4035e1;\n                }\n                case 105: {\n                    goto lab_0x4035e1;\n                }\n                case 106: {\n                    goto lab_0x4035e1;\n                }\n                case 107: {\n                    goto lab_0x4035e1;\n                }\n                case 108: {\n                    goto lab_0x4035e1;\n                }\n                case 109: {\n                    goto lab_0x4035e1;\n                }\n                case 110: {\n                    goto lab_0x4035e1;\n                }\n                case 111: {\n                    goto lab_0x4035e1;\n                }\n                case 112: {\n                    goto lab_0x4035e1;\n                }\n                case 113: {\n                    goto lab_0x4035e1;\n                }\n                case 114: {\n                    goto lab_0x4035e1;\n                }\n                case 115: {\n                    goto lab_0x4035e1;\n                }\n                case 116: {\n                    goto lab_0x4035e1;\n                }\n                case 117: {\n                    goto lab_0x4035e1;\n                }\n                case 118: {\n                    goto lab_0x4035e1;\n                }\n                case 119: {\n                    goto lab_0x4035e1;\n                }\n                case 120: {\n                    goto lab_0x4035e1;\n                }\n                case 121: {\n                    goto lab_0x4035e1;\n                }\n                case 122: {\n                    goto lab_0x4035e1;\n                }\n                case 123: {\n                    goto lab_0x403585;\n                }\n                case 124: {\n                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403585;\n                }\n                case 126: {\n                    goto lab_0x4035ad;\n                }\n                default: {\n                    goto lab_0x403985;\n                }\n            }\n        }\n      lab_0x403985:\n        if (v23 != 1) {\n            // 0x403cf0\n            ps = 0;\n            int64_t len = v15; // 0x403d00\n            if (v15 == -1) {\n                // 0x403d02\n                len = strlen((char *)str);\n            }\n            // 0x403d2e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x403d8f:\n                // 0x403d8f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403d94\n                int64_t v30 = v29 + str;\n                v24 = function_406ae0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40430a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40430a_2;\n                    }\n                    case -2: {\n                        // 0x4043ed\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404427\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40442a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404437\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404430\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40430a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40430a_2;\n                    }\n                    case 1: {\n                        goto lab_0x403d60;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x403e0c\n                        char v34 = *(char *)v33; // 0x403e1d\n                        unsigned char v35; // 0x403437\n                        if (v34 < 125) {\n                            // 0x403e28\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x403e3f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403e10\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x403e1d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403e28\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x403e3f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403e10\n                            v33++;\n                        }\n                        goto lab_0x403d60;\n                    }\n                }\n            }\n            goto lab_0x40430a_2;\n        } else {\n            // 0x4039d4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4035e1;\n        }\n    }\n  lab_0x403c08:\n    // 0x403c08\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40450a\n        if (v8 > result) {\n            // 0x404513\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403837\n        return result;\n    }\n    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4035e1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4035f0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4037fa_2;\n        }\n    }\n    int64_t v39 = result; // 0x4036f1\n    char v40 = v20; // 0x4036f1\n    int64_t v41 = v38; // 0x4036f1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4036f1\n    int64_t v43 = v36; // 0x4036f1\n    goto lab_0x40366d;\n  lab_0x4037fa_2:\n    // 0x403837\n    return function_4033e0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40430a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4035e1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x403ede\n        int64_t v50 = v5 + 1; // 0x403fc1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403fc8\n        char v52 = v20; // 0x403fc8\n        int64_t v53 = result; // 0x403fc8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403f91\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403f95\n            int64_t v56 = v54 + 1; // 0x403f9a\n            int64_t v57 = v51 + 1; // 0x403fc1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x403f8c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403f91\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403f95\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40366d;\n    }\n  lab_0x403d60:\n    // 0x403d60\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x403d7f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403d82\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40430a\n        goto lab_0x40430a_2;\n    }\n    goto lab_0x403d8f;\n  lab_0x4035ad:\n    // 0x4035ad\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4037fa_2;\n    }\n    goto lab_0x4035e1;\n  lab_0x403585:;\n    bool v60 = v15 == 1; // 0x403590\n    if (v15 == -1) {\n        // 0x403592\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40359e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4035e1;\n    } else {\n        goto lab_0x4035ad;\n    }\n  lab_0x40366d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403672\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403676\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403488_2;\n}\n"
        },
        {
            "funcName": "function_404610",
            "funcStartAddr": "404610",
            "funcEndAddr": "4047ae",
            "decompiledFuncCode": "int64_t function_404610(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x404612\n    int32_t * v3 = __errno_location(); // 0x40462c\n    int64_t v4 = (int64_t)g20; // 0x404631\n    int32_t v5 = *v3; // 0x40463b\n    int64_t v6 = v4; // 0x404651\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4047a9\n            function_405670(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x404660\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x404667\n        int64_t v9; // 0x404610\n        if (g20 == &g21) {\n            int64_t v10 = function_405480(0, v8); // 0x40478a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x40478f\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_405480(v4, v8); // 0x40467b\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x40468a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x40468a\n        int32_t v14 = v7; // 0x404691\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4046c1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4046cb\n    int64_t * v17 = (int64_t *)v15; // 0x4046ce\n    uint64_t v18 = *v17; // 0x4046ce\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4046d1\n    int64_t result = *v19; // 0x4046d1\n    int64_t v20; // 0x404610\n    uint64_t v21 = function_4033e0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4046f4\n    if (v18 > v21) {\n        // 0x40476b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x404707\n    *v17 = v22;\n    if (result != (int64_t)&g67) {\n        // 0x404717\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_405420(v22); // 0x404731\n    *v19 = result2;\n    int64_t v23; // 0x404610\n    function_4033e0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40476b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4047b0",
            "funcStartAddr": "4047b0",
            "funcEndAddr": "4047e4",
            "decompiledFuncCode": "int64_t function_4047b0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4047b7\n    int64_t result = function_405620(a1 == 0 ? (int64_t)&g68 : a1, 56); // 0x4047d6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4047f0",
            "funcStartAddr": "4047f0",
            "funcEndAddr": "4047ff",
            "decompiledFuncCode": "int64_t function_4047f0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g68 : a1); // 0x4047fc\n    return result;\n}\n"
        },
        {
            "funcName": "function_404800",
            "funcStartAddr": "404800",
            "funcEndAddr": "40480f",
            "decompiledFuncCode": "int64_t function_404800(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g68 : a1; // 0x404808\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g68;\n}\n"
        },
        {
            "funcName": "function_404810",
            "funcStartAddr": "404810",
            "funcEndAddr": "404843",
            "decompiledFuncCode": "int64_t function_404810(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g68 + 8 : a1 + 8; // 0x404829\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40482e\n    uint32_t v3 = *v2; // 0x40482e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404832\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404850",
            "funcStartAddr": "404850",
            "funcEndAddr": "404863",
            "decompiledFuncCode": "int64_t function_404850(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g68 + 4 : a1 + 4); // 0x40485c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404870",
            "funcStartAddr": "404870",
            "funcEndAddr": "40489b",
            "decompiledFuncCode": "int64_t function_404870(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g68 : a1; // 0x404878\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404895\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40488c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g68;\n}\n"
        },
        {
            "funcName": "function_4048a0",
            "funcStartAddr": "4048a0",
            "funcEndAddr": "404912",
            "decompiledFuncCode": "int64_t function_4048a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g68 : a5; // 0x4048c2\n    int32_t * v2 = __errno_location(); // 0x4048cb\n    uint32_t v3 = *(int32_t *)v1; // 0x4048eb\n    int64_t result = function_4033e0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4048fa\n    return result;\n}\n"
        },
        {
            "funcName": "function_404920",
            "funcStartAddr": "404920",
            "funcEndAddr": "404a01",
            "decompiledFuncCode": "int64_t function_404920(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g68 : a4; // 0x404942\n    int32_t * v2 = __errno_location(); // 0x404948\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404967\n    int32_t * v4 = (int32_t *)v1; // 0x40496a\n    int64_t v5 = function_4033e0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404985\n    int64_t v6 = v5 + 1; // 0x40498a\n    int64_t result = function_405420(v6); // 0x40499f\n    function_4033e0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4049e4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4049ed\n    return result;\n}\n"
        },
        {
            "funcName": "function_404a10",
            "funcStartAddr": "404a10",
            "funcEndAddr": "404a1a",
            "decompiledFuncCode": "int64_t function_404a10(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404a10\n    return function_404920(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404a20",
            "funcStartAddr": "404a20",
            "funcEndAddr": "404ab5",
            "decompiledFuncCode": "int64_t function_404a20(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x404a20\n    int64_t v2 = v1; // 0x404a20\n    int64_t v3 = v2; // 0x404a34\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x404a53\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g80;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404a50\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g80;\n        }\n    }\n    int64_t v6 = v3; // 0x404a6d\n    if (g21 != 0x616320) {\n        // 0x404a6f\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g67;\n        v6 = &g80;\n    }\n    int64_t result = v6; // 0x404a91\n    if (g20 != &g21) {\n        // 0x404a93\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g80;\n    }\n    // 0x404aa6\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404ac0",
            "funcStartAddr": "404ac0",
            "funcEndAddr": "404ad1",
            "decompiledFuncCode": "int64_t function_404ac0(void) {\n    // 0x404ac0\n    int64_t v1; // 0x404ac0\n    return function_404610(v1, v1, -1, (int64_t *)&g68);\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "404aea",
            "decompiledFuncCode": "int64_t function_404ae0(void) {\n    // 0x404ae0\n    int64_t v1; // 0x404ae0\n    return function_404610(v1, v1, v1, (int64_t *)&g68);\n}\n"
        },
        {
            "funcName": "function_404af0",
            "funcStartAddr": "404af0",
            "funcEndAddr": "404b06",
            "decompiledFuncCode": "int64_t function_404af0(int64_t a1) {\n    // 0x404af0\n    return function_404610(0, a1, -1, (int64_t *)&g68);\n}\n"
        },
        {
            "funcName": "function_404b10",
            "funcStartAddr": "404b10",
            "funcEndAddr": "404b22",
            "decompiledFuncCode": "int64_t function_404b10(int64_t a1, int64_t a2) {\n    // 0x404b10\n    return function_404610(0, a1, a2, (int64_t *)&g68);\n}\n"
        },
        {
            "funcName": "function_404b30",
            "funcStartAddr": "404b30",
            "funcEndAddr": "404b98",
            "decompiledFuncCode": "int64_t function_404b30(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404b40\n    return function_404610((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404ba0",
            "funcStartAddr": "404ba0",
            "funcEndAddr": "404c04",
            "decompiledFuncCode": "int64_t function_404ba0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404bb0\n    return function_404610((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404c10",
            "funcStartAddr": "404c10",
            "funcEndAddr": "404c1c",
            "decompiledFuncCode": "int64_t function_404c10(int64_t a1, int64_t a2) {\n    // 0x404c10\n    return function_404b30(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404c20",
            "funcStartAddr": "404c20",
            "funcEndAddr": "404c2f",
            "decompiledFuncCode": "int64_t function_404c20(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404c20\n    return function_404ba0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404c30",
            "funcStartAddr": "404c30",
            "funcEndAddr": "404ca0",
            "decompiledFuncCode": "int64_t function_404c30(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g68); // 0x404c3d\n    int128_t v2 = __asm_movdqa(g69); // 0x404c45\n    int128_t v3 = __asm_movdqa(g70); // 0x404c4d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404c62\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404c78\n    uint32_t v6 = *v5; // 0x404c78\n    uint32_t v7 = (int32_t)a3 % 32; // 0x404c7d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_404610(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404ca0",
            "funcStartAddr": "404ca0",
            "funcEndAddr": "404cad",
            "decompiledFuncCode": "int64_t function_404ca0(int64_t a1, int64_t a2) {\n    // 0x404ca0\n    return function_404c30(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404cb0",
            "funcStartAddr": "404cb0",
            "funcEndAddr": "404cc1",
            "decompiledFuncCode": "int64_t function_404cb0(int64_t a1) {\n    // 0x404cb0\n    return function_404c30(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404cd0",
            "funcStartAddr": "404cd0",
            "funcEndAddr": "404cda",
            "decompiledFuncCode": "int64_t function_404cd0(void) {\n    // 0x404cd0\n    int64_t v1; // 0x404cd0\n    return function_404c30(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404ce0",
            "funcStartAddr": "404ce0",
            "funcEndAddr": "404d4e",
            "decompiledFuncCode": "int64_t function_404ce0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404cfa\n    return function_404610((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404d50",
            "funcStartAddr": "404d50",
            "funcEndAddr": "404dbc",
            "decompiledFuncCode": "int64_t function_404d50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g68); // 0x404d57\n    int128_t v2 = __asm_movdqa(g69); // 0x404d5f\n    int128_t v3 = __asm_movdqa(g70); // 0x404d67\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404d89\n    if (a2 == 0 || a3 == 0) {\n        // 0x404db7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404d9a\n    return function_404610(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404dc0",
            "funcStartAddr": "404dc0",
            "funcEndAddr": "404dc9",
            "decompiledFuncCode": "int64_t function_404dc0(void) {\n    // 0x404dc0\n    int64_t v1; // 0x404dc0\n    return function_404d50(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404dd0",
            "funcStartAddr": "404dd0",
            "funcEndAddr": "404de7",
            "decompiledFuncCode": "int64_t function_404dd0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404dd0\n    return function_404d50(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404df0",
            "funcStartAddr": "404df0",
            "funcEndAddr": "404e03",
            "decompiledFuncCode": "int64_t function_404df0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404df0\n    return function_404d50(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404e10",
            "funcStartAddr": "404e10",
            "funcEndAddr": "404e1a",
            "decompiledFuncCode": "int64_t function_404e10(void) {\n    // 0x404e10\n    int64_t v1; // 0x404e10\n    return function_404610(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_404e20",
            "funcStartAddr": "404e20",
            "funcEndAddr": "404e32",
            "decompiledFuncCode": "int64_t function_404e20(int64_t a1, int64_t a2) {\n    // 0x404e20\n    return function_404610(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_404e40",
            "funcStartAddr": "404e40",
            "funcEndAddr": "404e51",
            "decompiledFuncCode": "int64_t function_404e40(void) {\n    // 0x404e40\n    int64_t v1; // 0x404e40\n    return function_404610(v1, v1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_404e60",
            "funcStartAddr": "404e60",
            "funcEndAddr": "404e76",
            "decompiledFuncCode": "int64_t function_404e60(int64_t a1) {\n    // 0x404e60\n    return function_404610(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_404e80",
            "funcStartAddr": "404e80",
            "funcEndAddr": "40525d",
            "decompiledFuncCode": "int64_t function_404e80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404f18\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x404e9c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404eb6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x404efb\n    if (a6 < 10) {\n        // 0x404f0a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x405002\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405260",
            "funcStartAddr": "405260",
            "funcEndAddr": "405280",
            "decompiledFuncCode": "int64_t function_405260(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405260\n    if (a5 == 0) {\n        // 0x40527b\n        return function_404e80(a1, a2, a3, a4, a5, 0, (int64_t)&g80);\n    }\n    int64_t v1 = 0; // 0x405267\n    v1++;\n    int64_t v2 = v1; // 0x405279\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405270\n        v1++;\n        v2 = v1;\n    }\n    // 0x40527b\n    return function_404e80(a1, a2, a3, a4, a5, v2, (int64_t)&g80);\n}\n"
        },
        {
            "funcName": "function_405280",
            "funcStartAddr": "405280",
            "funcEndAddr": "4052e0",
            "decompiledFuncCode": "int64_t function_405280(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405280\n    int64_t v3 = &v2; // 0x405280\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4052b3\n    int64_t v6; // 0x40529d\n    int64_t * v7; // 0x4052bb\n    int64_t v8; // 0x4052bb\n    int64_t v9; // 0x4052c7\n    if (v5 < 48) {\n        // 0x405290\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4052d3\n            break;\n        }\n    } else {\n        // 0x4052bb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4052d3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4052b1\n    while (v4 != 9) {\n        // 0x4052a9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405290\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4052d3\n                break;\n            }\n        } else {\n            // 0x4052bb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4052d3\n                break;\n            }\n        }\n        // 0x4052a9\n        v10 = 10;\n    }\n    // 0x4052d3\n    return function_404e80(a1, a2, a3, a4, v3, v10, (int64_t)&g80);\n}\n"
        },
        {
            "funcName": "function_4052e0",
            "funcStartAddr": "4052e0",
            "funcEndAddr": "40539c",
            "decompiledFuncCode": "int64_t function_4052e0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x4052e0\n    int64_t v1; // bp-168, 0x4052e0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4052e0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4052e0\n    int64_t v8; // 0x4052e0\n    int64_t v9; // bp-56, 0x4052e0\n    int64_t v10; // 0x405345\n    int64_t v11; // 0x405369\n    if ((int32_t)v6 < 48) {\n        // 0x405330\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405380\n            break;\n        }\n    } else {\n        // 0x405362\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405380\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40535a\n    int64_t v13 = 10; // 0x40535a\n    while (v5 != 9) {\n        // 0x40535c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405330\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405380\n                break;\n            }\n        } else {\n            // 0x405362\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405380\n                break;\n            }\n        }\n        // 0x405352\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405380\n    int64_t v14; // bp-136, 0x4052e0\n    int64_t result = function_404e80(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g80); // 0x40538f\n    return result;\n}\n"
        },
        {
            "funcName": "function_4053a0",
            "funcStartAddr": "4053a0",
            "funcEndAddr": "405414",
            "decompiledFuncCode": "int64_t function_4053a0(int64_t a1) {\n    // 0x4053a0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x405403\n    return fputs_unlocked(v1, g29);\n}\n"
        },
        {
            "funcName": "function_405420",
            "funcStartAddr": "405420",
            "funcEndAddr": "40543a",
            "decompiledFuncCode": "int64_t function_405420(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x405424\n    if (size != 0 != (mem == NULL)) {\n        // 0x405433\n        return (int64_t)mem;\n    }\n    // 0x405435\n    function_405670(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405440",
            "funcStartAddr": "405440",
            "funcEndAddr": "405461",
            "decompiledFuncCode": "int64_t function_405440(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405443\n    int64_t v2 = v1; // 0x405443\n    if (v2 < 0) {\n        // 0x40545b\n        function_405670(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405459\n        return function_405420(v2);\n    }\n    // 0x40545b\n    function_405670(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405470",
            "funcStartAddr": "405470",
            "funcEndAddr": "405472",
            "decompiledFuncCode": "int64_t function_405470(void) {\n    // 0x405470\n    int64_t v1; // 0x405470\n    return function_405420(v1);\n}\n"
        },
        {
            "funcName": "function_405480",
            "funcStartAddr": "405480",
            "funcEndAddr": "4054b6",
            "decompiledFuncCode": "int64_t function_405480(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4054a8\n        free(v1);\n        return (int32_t)&g80 ^ (int32_t)&g80;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405491\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4054a0\n        return (int64_t)mem;\n    }\n    // 0x4054b1\n    function_405670(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4054c0",
            "funcStartAddr": "4054c0",
            "funcEndAddr": "4054e1",
            "decompiledFuncCode": "int64_t function_4054c0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4054c3\n    int64_t v2 = v1; // 0x4054c3\n    if (v2 < 0) {\n        // 0x4054db\n        function_405670(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4054d9\n        return function_405480(a1, v2);\n    }\n    // 0x4054db\n    function_405670(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4054f0",
            "funcStartAddr": "4054f0",
            "funcEndAddr": "405576",
            "decompiledFuncCode": "int64_t function_4054f0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40554b\n            function_405670(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405480(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405533\n    if (a2 == 0) {\n        // 0x405558\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405538\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40554b\n        function_405670(a1);\n        // UNREACHABLE\n    }\n    // 0x40551a\n    *(int64_t *)a2 = v2;\n    return function_405480(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405580",
            "funcStartAddr": "405580",
            "funcEndAddr": "4055d0",
            "decompiledFuncCode": "int64_t function_405580(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405580\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4055ca\n            function_405670(a1);\n            // UNREACHABLE\n        }\n        // 0x4055a2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405480(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4055b5\n        *(int64_t *)a2 = 128;\n        return function_405480(0, 128);\n    }\n    // 0x4055c8\n    if (a2 < 0) {\n        // 0x4055ca\n        function_405670(a1);\n        // UNREACHABLE\n    }\n    // 0x4055a2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405480(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4055d0",
            "funcStartAddr": "4055d0",
            "funcEndAddr": "4055e7",
            "decompiledFuncCode": "int64_t function_4055d0(int64_t a1, int64_t a2) {\n    // 0x4055d0\n    return (int64_t)memset((int64_t *)function_405420(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4055f0",
            "funcStartAddr": "4055f0",
            "funcEndAddr": "40561e",
            "decompiledFuncCode": "int64_t function_4055f0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4055f7\n    if ((int64_t)v1 < 0) {\n        // 0x405619\n        function_405670(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x405619\n        function_405670(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40560a\n    if (mem != NULL) {\n        // 0x405614\n        return (int64_t)mem;\n    }\n    // 0x405619\n    function_405670(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405620",
            "funcStartAddr": "405620",
            "funcEndAddr": "405648",
            "decompiledFuncCode": "int64_t function_405620(int64_t a1, int64_t a2) {\n    int64_t v1 = function_405420(a2); // 0x40562f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405650",
            "funcStartAddr": "405650",
            "funcEndAddr": "405663",
            "decompiledFuncCode": "int64_t function_405650(int64_t str) {\n    // 0x405650\n    return function_405620(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405670",
            "funcStartAddr": "405670",
            "funcEndAddr": "4056a1",
            "decompiledFuncCode": "int64_t function_405670(int64_t a1) {\n    // 0x405670\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4056b0",
            "funcStartAddr": "4056b0",
            "funcEndAddr": "405780",
            "decompiledFuncCode": "int64_t function_4056b0(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, int64_t a5, int64_t a6, int32_t a7) {\n    // 0x4056b0\n    int64_t result2; // bp-64, 0x4056b0\n    int32_t v1 = function_4057b0(a1, 0, a2 & 0xffffffff, &result2, a5, a6); // 0x4056dc\n    int32_t * v2; // 0x4056b0\n    if (v1 != 0) {\n        int32_t * v3 = __errno_location(); // 0x40575a\n        if (v1 == 1) {\n            // 0x405778\n            *v3 = 75;\n            v2 = v3;\n        } else {\n            // 0x405767\n            v2 = v3;\n            if (v1 == 3) {\n                // 0x40576c\n                *v3 = 0;\n                v2 = v3;\n            }\n        }\n    } else {\n        uint64_t result = result2; // 0x4056e0\n        if (result >= a3 && result <= a4) {\n            // 0x405742\n            return result;\n        }\n        int32_t * v4 = __errno_location(); // 0x4056ef\n        *v4 = result < 0x40000000 ? 34 : 75;\n        v2 = v4;\n    }\n    int64_t v5 = function_404e60(a1); // 0x40570c\n    int32_t v6 = *v2; // 0x405711\n    int32_t err_num = v6 == 22 ? 0 : v6; // 0x405727\n    error(a7 == 0 ? 1 : a7, err_num, \"%s: %s\", (char *)a6, (char *)v5);\n    // 0x405742\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405780",
            "funcStartAddr": "405780",
            "funcEndAddr": "4057a1",
            "decompiledFuncCode": "int64_t function_405780(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t a5, int32_t a6) {\n    // 0x405780\n    int64_t result; // 0x405780\n    return result;\n}\n"
        },
        {
            "funcName": "function_4057b0",
            "funcStartAddr": "4057b0",
            "funcEndAddr": "405bf0",
            "decompiledFuncCode": "int64_t function_4057b0(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x4057be\n    if (v1 >= 37) {\n        // 0x405bcb\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g80;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x4057e2\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x405812\n    int64_t v4 = a1; // 0x405817\n    char v5 = c; // 0x405817\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x40580c\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x405808\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x405819\n    if (v5 == 45) {\n        // 0x405855\n        return 4;\n    }\n    // 0x40581e\n    int64_t v7; // bp-64, 0x4057b0\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x4057de\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x405826\n    int64_t * v10 = (int64_t *)v8; // 0x40582b\n    int64_t v11 = *v10; // 0x40582b\n    char v12; // 0x4057b0\n    int64_t v13; // 0x4057b0\n    int64_t v14; // 0x4057b0\n    int64_t v15; // 0x4057b0\n    int64_t v16; // 0x4057b0\n    int64_t v17; // 0x4057b0\n    int64_t v18; // 0x4057b0\n    if (v11 == a1) {\n        // 0x405888\n        if (c == 0 || str == 0) {\n            // 0x405855\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x4058a9\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x405855\n            return 4;\n        }\n        goto lab_0x4058b7;\n    } else {\n        int32_t v19 = *v2; // 0x405836\n        int64_t v20 = 0; // 0x40583c\n        if (v19 != 0) {\n            // 0x405870\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x405855\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x405826\n        v16 = v21;\n        v13 = v20;\n        if (str == 0) {\n            goto lab_0x405852;\n        } else {\n            char c2 = *(char *)v11; // 0x405845\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x4059b3\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x4058b7;\n                } else {\n                    goto lab_0x4059c5;\n                }\n            } else {\n                goto lab_0x405852;\n            }\n        }\n    }\n  lab_0x4058b7:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x4058bf\n    int64_t v24 = 1; // 0x4058bf\n    int64_t v25; // 0x4057b0\n    int64_t v26; // 0x4057b0\n    int64_t v27; // 0x4057b0\n    int64_t v28; // 0x4057b0\n    int64_t v29; // 0x4057b0\n    int64_t v30; // 0x4057b0\n    int64_t v31; // 0x4057b0\n    int64_t v32; // 0x4057b0\n    int64_t v33; // 0x4057b0\n    int64_t v34; // 0x4057b0\n    int64_t v35; // 0x4057b0\n    int64_t v36; // 0x4057b0\n    int64_t v37; // 0x4057b0\n    int64_t v38; // 0x4057b0\n    int64_t v39; // 0x4057b0\n    int64_t v40; // 0x4057b0\n    int64_t v41; // 0x4057b0\n    int64_t v42; // 0x4057b0\n    int64_t v43; // 0x4057b0\n    int64_t v44; // 0x4057b0\n    if (v22 < 48) {\n        // 0x4058c1\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x40592a;\n        } else {\n            // 0x4058d4\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x40592a;\n            } else {\n                // 0x4058f0\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x40592a;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x405b59\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x40592a;\n                    }\n                    default: {\n                        // 0x405905\n                        g77 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x405acb;\n                            }\n                            case 70: {\n                                goto lab_0x4059c5;\n                            }\n                            case 71: {\n                                goto lab_0x405b03;\n                            }\n                            case 72: {\n                                goto lab_0x4059c5;\n                            }\n                            case 73: {\n                                goto lab_0x4059c5;\n                            }\n                            case 74: {\n                                goto lab_0x4059c5;\n                            }\n                            case 75: {\n                                goto lab_0x40598c;\n                            }\n                            case 76: {\n                                goto lab_0x4059c5;\n                            }\n                            case 77: {\n                                goto lab_0x40594e;\n                            }\n                            case 78: {\n                                goto lab_0x4059c5;\n                            }\n                            case 79: {\n                                goto lab_0x4059c5;\n                            }\n                            case 80: {\n                                goto lab_0x405a98;\n                            }\n                            case 81: {\n                                goto lab_0x4059c5;\n                            }\n                            case 82: {\n                                goto lab_0x4059c5;\n                            }\n                            case 83: {\n                                goto lab_0x4059c5;\n                            }\n                            case 84: {\n                                goto lab_0x405a68;\n                            }\n                            case 85: {\n                                goto lab_0x4059c5;\n                            }\n                            case 86: {\n                                goto lab_0x4059c5;\n                            }\n                            case 87: {\n                                goto lab_0x4059c5;\n                            }\n                            case 88: {\n                                goto lab_0x4059c5;\n                            }\n                            case 89: {\n                                goto lab_0x405a36;\n                            }\n                            case 90: {\n                                goto lab_0x4059fb;\n                            }\n                            case 91: {\n                                goto lab_0x4059c5;\n                            }\n                            case 92: {\n                                goto lab_0x4059c5;\n                            }\n                            case 93: {\n                                goto lab_0x4059c5;\n                            }\n                            case 94: {\n                                goto lab_0x4059c5;\n                            }\n                            case 95: {\n                                goto lab_0x4059c5;\n                            }\n                            case 96: {\n                                goto lab_0x4059c5;\n                            }\n                            case 97: {\n                                goto lab_0x4059c5;\n                            }\n                            case 98: {\n                                goto lab_0x4059df;\n                            }\n                            case 99: {\n                                goto lab_0x405968;\n                            }\n                            case 100: {\n                                goto lab_0x4059c5;\n                            }\n                            case 101: {\n                                goto lab_0x4059c5;\n                            }\n                            case 102: {\n                                goto lab_0x4059c5;\n                            }\n                            case 103: {\n                                goto lab_0x405b03;\n                            }\n                            case 104: {\n                                goto lab_0x4059c5;\n                            }\n                            case 105: {\n                                goto lab_0x4059c5;\n                            }\n                            case 106: {\n                                goto lab_0x4059c5;\n                            }\n                            case 107: {\n                                goto lab_0x40598c;\n                            }\n                            case 108: {\n                                goto lab_0x4059c5;\n                            }\n                            case 109: {\n                                goto lab_0x40594e;\n                            }\n                            case 110: {\n                                goto lab_0x4059c5;\n                            }\n                            case 111: {\n                                goto lab_0x4059c5;\n                            }\n                            case 112: {\n                                goto lab_0x4059c5;\n                            }\n                            case 113: {\n                                goto lab_0x4059c5;\n                            }\n                            case 114: {\n                                goto lab_0x4059c5;\n                            }\n                            case 115: {\n                                goto lab_0x4059c5;\n                            }\n                            case 116: {\n                                goto lab_0x405a68;\n                            }\n                            default: {\n                                goto lab_0x40592a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40592a;\n    }\n  lab_0x405852:\n    // 0x405852\n    *a4 = v16;\n    // 0x405855\n    return v13 & 0xffffffff;\n  lab_0x40592a:\n    // 0x40592a\n    g78 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x4057b0\n    switch (v12) {\n        case 66: {\n            // 0x405b24\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x405997;\n            } else {\n                // 0x405b31\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x405968;\n            }\n        }\n        case 69: {\n            goto lab_0x405acb;\n        }\n        case 71: {\n            goto lab_0x405b03;\n        }\n        case 75: {\n            goto lab_0x40598c;\n        }\n        case 77: {\n            goto lab_0x40594e;\n        }\n        case 80: {\n            goto lab_0x405a98;\n        }\n        case 84: {\n            goto lab_0x405a68;\n        }\n        case 89: {\n            goto lab_0x405a36;\n        }\n        case 90: {\n            goto lab_0x4059fb;\n        }\n        case 98: {\n            goto lab_0x4059df;\n        }\n        case 99: {\n            goto lab_0x405968;\n        }\n        case 103: {\n            goto lab_0x405b03;\n        }\n        case 107: {\n            goto lab_0x40598c;\n        }\n        case 109: {\n            goto lab_0x40594e;\n        }\n        case 116: {\n            goto lab_0x405a68;\n        }\n        case 119: {\n            // 0x4059d0\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x405997;\n            } else {\n                // 0x4059d5\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x405968;\n            }\n        }\n        default: {\n            goto lab_0x4059c5;\n        }\n    }\n  lab_0x405acb:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x405ae3\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x405aef\n    int64_t v51 = v48; // 0x405af2\n    int64_t v52 = v37; // 0x405af2\n    int64_t v53 = v49; // 0x405af2\n    int32_t v54 = v50; // 0x405af2\n    int64_t v55 = v49; // 0x405af2\n    while (v50 != 0) {\n        // 0x405ae0\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x405a24;\n  lab_0x405b03:\n    // 0x405b03\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x405b0e\n        int128_t v56; // 0x405b09\n        uint128_t v57; // 0x405b09\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x405b0e\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x4057b0\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x405b13\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x405b18\n                v26 = v60;\n                int64_t v61; // 0x4057b0\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x405968;\n  lab_0x40598c:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x40598f\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x405968;\n    } else {\n        goto lab_0x405997;\n    }\n  lab_0x40594e:;\n    int128_t v65 = v27; // 0x405954\n    uint128_t v66 = v65 * (int128_t)v17; // 0x405954\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x405997;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x405959\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x405997;\n        } else {\n            // 0x40595e\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x405968;\n        }\n    }\n  lab_0x405a98:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x405aab\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x405ab7\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x405aba\n    int64_t v73 = v70; // 0x405aba\n    while (v71 != 0) {\n        // 0x405aa8\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x405a24;\n  lab_0x405a68:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x405a7b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x405a87\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x405a8a\n    int64_t v79 = v76; // 0x405a8a\n    while (v77 != 0) {\n        // 0x405a78\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x405a24;\n  lab_0x405a36:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x405a4b\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x405a57\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x405a5a\n    int64_t v85 = v82; // 0x405a5a\n    while (v83 != 0) {\n        // 0x405a48\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x405a24;\n  lab_0x4059fb:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x405a13\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x405a1f\n    int32_t v90 = v89; // 0x405a22\n    int64_t v91 = v88; // 0x405a22\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x405a10\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x405a24;\n  lab_0x4059df:\n    // 0x4059df\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x405997;\n    } else {\n        // 0x4059e8\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x405968;\n    }\n  lab_0x405968:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x40596d\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x405852;\n  lab_0x4059c5:\n    // 0x4059c5\n    *a4 = v18;\n    // 0x405855\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x405997:\n    // 0x405997\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x405968;\n  lab_0x405a24:\n    // 0x405a24\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x405968;\n}\n"
        },
        {
            "funcName": "function_405bf0",
            "funcStartAddr": "405bf0",
            "funcEndAddr": "405c6b",
            "decompiledFuncCode": "int64_t function_405bf0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405bf7\n    if (fileno(stream) < 0) {\n        // 0x405c57\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x405c0a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x405c3b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405c57\n            return fclose(stream);\n        }\n    }\n    // 0x405c0c\n    if ((int32_t)function_405c70(a1, v1) == 0) {\n        // 0x405c57\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405c18\n    int32_t v3 = *v2; // 0x405c20\n    int64_t result = fclose(stream); // 0x405c2e\n    if (v3 != 0) {\n        // 0x405c60\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405c30\n    return result;\n}\n"
        },
        {
            "funcName": "function_405c70",
            "funcStartAddr": "405c70",
            "funcEndAddr": "405cb0",
            "decompiledFuncCode": "int64_t function_405c70(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x405c8a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x405c8a\n        return fflush(stream);\n    }\n    // 0x405c98\n    function_405cb0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405cb0",
            "funcStartAddr": "405cb0",
            "funcEndAddr": "405d07",
            "decompiledFuncCode": "int64_t function_405cb0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405cb0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x405cba\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x405ceb\n    int64_t result = -1; // 0x405cf4\n    if (v1 != -1) {\n        // 0x405cf6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405d02\n    return result;\n}\n"
        },
        {
            "funcName": "function_405d10",
            "funcStartAddr": "405d10",
            "funcEndAddr": "405def",
            "decompiledFuncCode": "int64_t function_405d10(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x405d1c\n    uint32_t v2 = *v1; // 0x405d1c\n    int64_t v3 = a2 & 0xffffffff; // 0x405d21\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x405d24\n    uint64_t v5 = (int64_t)*v4; // 0x405d24\n    int64_t v6; // 0x405d92\n    if (v3 <= v5) {\n      lab_0x405d8c_2:\n        // 0x405d8c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x405d12\n    int64_t v8 = v2; // 0x405d10\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x405d8c\n        goto lab_0x405d8c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x405d48\n    int64_t v17; // 0x405d56\n    int64_t * v18; // 0x405d70\n    int64_t * v19; // 0x405d73\n    int64_t v20; // 0x405d7e\n    int64_t v21; // 0x405d56\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x405d53\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x405d70\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x405d87\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x405d8c\n            goto lab_0x405d8c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x405d8c\n            goto lab_0x405d8c_2;\n        }\n        // 0x405d42\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x405dcb\n    int64_t * v23 = (int64_t *)v22; // 0x405dd0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x405dd3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x405dd0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x405de7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x405d3d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x405d8c\n            goto lab_0x405d8c_2;\n        }\n        // 0x405d42\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x405d53\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x405d70\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x405d87\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x405d8c\n                goto lab_0x405d8c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x405d8c\n                goto lab_0x405d8c_2;\n            }\n            // 0x405d42\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x405db0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x405dd0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x405de7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x405d8c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405df0",
            "funcStartAddr": "405df0",
            "funcEndAddr": "40640c",
            "decompiledFuncCode": "int64_t function_405df0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x405e0f\n    int64_t v2 = *v1; // 0x405e0f\n    char * str2 = (char *)v2; // 0x405e1c\n    char c = *str2; // 0x405e1c\n    int64_t v3 = v2; // 0x405e48\n    int64_t v4 = 0; // 0x405df0\n    int32_t v5; // 0x405df0\n    int64_t v6; // 0x405df0\n    int64_t v7; // 0x405df0\n    int64_t v8; // 0x405df0\n    int64_t v9; // 0x405df0\n    int64_t v10; // 0x405df0\n    int64_t v11; // 0x405df0\n    int64_t v12; // 0x405df0\n    int64_t v13; // 0x405df0\n    int64_t str3; // 0x405df0\n    int64_t v14; // 0x405df0\n    int64_t v15; // 0x405df0\n    int64_t v16; // 0x405df0\n    int64_t v17; // 0x405df0\n    int32_t v18; // 0x405df0\n    int32_t v19; // 0x405df0\n    int32_t v20; // 0x405df0\n    int32_t v21; // 0x405df0\n    int32_t v22; // 0x405df0\n    int32_t v23; // 0x405df0\n    int32_t v24; // 0x405df0\n    int32_t v25; // 0x405df0\n    int32_t v26; // 0x405df0\n    int32_t v27; // 0x405df0\n    int32_t v28; // 0x405df0\n    int32_t v29; // 0x405df0\n    int64_t nmemb; // 0x405df0\n    int64_t v30; // 0x405df0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x405e4c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405e48\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405e58\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x405e5e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405e28\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x405e8c\n                int64_t v34; // 0x405df0\n                int64_t v35; // 0x405df0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x405e95\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x406010;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x405ea6\n                int64_t v37 = *(int64_t *)v36; // 0x405eaa\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x405e80\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x405e95\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x406010;\n                        }\n                    }\n                    // 0x405ea6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405ef6:\n                    // 0x405ef6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405f50;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4060c0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405f50;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x406070\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x405f1a;\n                                } else {\n                                    // 0x40607c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x405f1a;\n                                    } else {\n                                        // 0x40608a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x405f1a;\n                                        } else {\n                                            goto lab_0x405f50;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x405f1a;\n                            }\n                        }\n                    }\n                }\n              lab_0x405f61:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x406136\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4062e2\n                            flockfile(g32);\n                            int64_t v41 = *v1; // 0x406302\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40634f\n                            int64_t v43 = (int64_t)g32;\n                            int64_t v44 = v43; // 0x406369\n                            int64_t v45; // 0x40636b\n                            if (*(char *)v42 != 0) {\n                                // 0x40636b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g32;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x406363\n                            while (v17 + nmemb != v42) {\n                                // 0x406365\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40636b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g32;\n                                }\n                                // 0x406358\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x406390\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g32);\n                            v40 = *v1;\n                        } else {\n                            // 0x406144\n                            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40629f\n                        free((int64_t *)v17);\n                    }\n                    // 0x406199\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x4061b0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40605e\n                    return 63;\n                }\n                // 0x405f80\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x406004\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x406010:;\n                    int32_t * v49 = (int32_t *)a7; // 0x406020\n                    uint32_t v50 = *v49; // 0x406020\n                    int64_t v51 = v50; // 0x406020\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40602a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x406033\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40625f\n                                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40620a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40605e\n                            return 63;\n                        }\n                        // 0x4060a8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4063bf\n                                    __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x4062bd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4062d0\n                                // 0x40605e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4061ce\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4061e2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40604b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40604e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x406052\n                    int64_t result = v59; // 0x406058\n                    if (v58 != 0) {\n                        // 0x40605a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40605e\n                    return result;\n                }\n            } else {\n                // 0x405e5e\n                v5 = v32;\n            }\n            // break -> 0x405f85\n            break;\n        }\n    }\n    // 0x405f85\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x405f9d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x405fa7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40605e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4060e9\n        __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x405fd6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405fe6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405f50:\n    // 0x405f50\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405f50\n    int64_t v63 = *(int64_t *)v62; // 0x405f54\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405f61\n        goto lab_0x405f61;\n    }\n    goto lab_0x405ef6;\n  lab_0x405f1a:\n    // 0x405f1a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405df0\n    int32_t v65; // 0x405df0\n    int32_t v66; // 0x405df0\n    if (v27 != 0) {\n        goto lab_0x405f50;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4060d0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405f50;\n            } else {\n                goto lab_0x405f41;\n            }\n        } else {\n            // 0x405f35\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40622c\n                int64_t v67 = (int64_t)mem; // 0x40622c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405f50;\n                } else {\n                    // 0x40623f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405f41;\n                }\n            } else {\n                goto lab_0x405f41;\n            }\n        }\n    }\n  lab_0x405f41:\n    // 0x405f41\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405f50;\n}\n"
        },
        {
            "funcName": "function_406410",
            "funcStartAddr": "406410",
            "funcEndAddr": "4069d6",
            "decompiledFuncCode": "int64_t function_406410(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x406431\n    if (v3 < 1) {\n        // 0x4065ee\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40642d\n    int32_t v5 = *(int32_t *)a7; // 0x406439\n    uint64_t v6 = a1 & 0xffffffff; // 0x40643b\n    int64_t v7 = v2; // 0x406440\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x406443\n    *v8 = 0;\n    int64_t v9; // 0x406410\n    int64_t v10; // 0x406410\n    int64_t v11; // 0x406410\n    int64_t v12; // 0x406410\n    int64_t str; // 0x406410\n    int64_t v13; // 0x406410\n    int64_t v14; // 0x406410\n    int64_t v15; // 0x406410\n    int64_t v16; // 0x406410\n    int64_t v17; // 0x406410\n    int32_t v18; // 0x406410\n    char v19; // 0x406410\n    if (v5 == 0) {\n        // 0x406628\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40645a;\n    } else {\n        // 0x406453\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x4064a0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x4064a3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x406568;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4064b6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4064c6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40657c;\n                } else {\n                    goto lab_0x4064d8;\n                }\n            }\n        } else {\n            goto lab_0x40645a;\n        }\n    }\n  lab_0x40645a:\n    // 0x40645a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x406460\n    *v24 = 0;\n    int64_t v25; // 0x406410\n    int64_t v26; // 0x406410\n    int64_t v27; // 0x406410\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x406550\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40655d;\n        }\n        case 43: {\n            // 0x406860\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40655d;\n        }\n        default: {\n            // 0x40647c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4067df\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4068f8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40655d;\n                } else {\n                    // 0x4067ed\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40648a;\n                }\n            } else {\n                goto lab_0x40648a;\n            }\n        }\n    }\n  lab_0x406568:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40656f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4064d8;\n    } else {\n        goto lab_0x40657c;\n    }\n  lab_0x40648a:\n    // 0x40648a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40655d;\n  lab_0x40655d:\n    // 0x40655d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x406568;\n  lab_0x4064d8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4064d8\n    int64_t v31 = v30; // 0x4064d8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4064da\n    if ((int64_t)*v32 > v31) {\n        // 0x4064df\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4064e2\n    if (*v33 > v30) {\n        // 0x4064e7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4064ea\n    int64_t v35 = v31; // 0x4064ee\n    int64_t v36 = v15; // 0x4064ee\n    int64_t v37; // 0x406410\n    int64_t v38; // 0x406410\n    int64_t v39; // 0x406410\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406658\n        int64_t v41 = v40; // 0x406658\n        v2 = v41;\n        int64_t v42; // 0x406410\n        if (*v33 == v40) {\n            // 0x406840\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406848\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x406664\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406668\n                function_405d10(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x406678\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x406681\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40668a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x4066a1\n            int64_t v47 = v45 & 0xffffffff; // 0x4066a5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x4066ae\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4066b4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4066b6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x406690\n            int64_t v49 = v48 & 0xffffffff; // 0x406690\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x4066a1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x4066ae\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4066b4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4066b6;\n                    }\n                }\n                // 0x406690\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x406858\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4066b6;\n    } else {\n        goto lab_0x4064f4;\n    }\n  lab_0x40657c:\n    // 0x40657c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40657f\n    int64_t v51 = v12; // 0x40657f\n    int64_t v52 = v14; // 0x40657f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4064d8;\n    } else {\n        goto lab_0x406585;\n    }\n  lab_0x4064f4:;\n    int32_t v53 = v35; // 0x4064f4\n    int64_t v54; // 0x406410\n    int64_t v55; // 0x406410\n    int64_t v56; // 0x406410\n    int64_t v57; // 0x406410\n    int64_t v58; // 0x406410\n    int64_t v59; // 0x406410\n    char * v60; // 0x406410\n    int64_t v61; // 0x406410\n    int64_t v62; // 0x406509\n    int64_t v63; // 0x406410\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x406643\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x406646;\n    } else {\n        // 0x4064fc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x406410\n        int64_t v66 = v65 ? -1 : 1; // 0x406510\n        int64_t v67 = (int64_t)\"--\"; // 0x406410\n        int64_t v68 = v62; // 0x406410\n        int64_t v69 = 3; // 0x406510\n        unsigned char v70 = *(char *)v68; // 0x406510\n        char v71 = *(char *)v67; // 0x406510\n        char v72 = v71; // 0x406510\n        bool v73 = false; // 0x406510\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x406600\n            if (*(char *)v62 == 45) {\n                // 0x4066c0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4066c0\n                if (c == 0) {\n                    goto lab_0x40660a;\n                } else {\n                    // 0x4066cd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406750;\n                    } else {\n                        if (c == 45) {\n                            // 0x406933\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4067a5;\n                        } else {\n                            // 0x4066de\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406750;\n                            } else {\n                                // 0x4066e3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x406704;\n                                } else {\n                                    // 0x4066ea\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406750;\n                                    } else {\n                                        goto lab_0x406704;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40660a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x406520\n            v2 = v75;\n            int32_t v76 = *v32; // 0x406523\n            int64_t v77 = v35 + 1; // 0x406526\n            int32_t v78 = v77; // 0x406529\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x406890\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x406537\n                    function_405d10(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x406545\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x406646;\n        }\n    }\n  lab_0x406585:;\n    // 0x406585\n    int64_t v79; // bp-104, 0x406410\n    int64_t v80 = &v79; // 0x40641a\n    int64_t v81 = v50 + 1; // 0x406585\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40658c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x406591\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x406595\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x406599\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x4065a1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x4065a6\n    int32_t c2 = v84; // 0x4065a6\n    char * found_char_pos = strchr(str2, c2); // 0x4065a6\n    int64_t v87 = *v82; // 0x4065ab\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4065b5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4065c0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4068b0\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40687d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4065ee\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x4065a6\n    char v91 = *(char *)(v90 + 1); // 0x4065db\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x406595\n        if (v91 != 58) {\n            // 0x4065ee\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x406804\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x406908\n                *v8 = 0;\n            } else {\n                // 0x4068ec\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40682e\n            *v83 = 0;\n            // 0x4065ee\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40680e\n        if (v93 != 0) {\n            // 0x4068a0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40682e\n            *v83 = 0;\n            // 0x4065ee\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x406821\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40682e\n            *v83 = 0;\n            // 0x4065ee\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40696a\n            __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40691a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x406921\n        // 0x40682e\n        *v83 = 0;\n        // 0x4065ee\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x406779\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40677b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4069a0\n                __fprintf_chk(g32, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x406951\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x406958\n            // 0x4065ee\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x406786\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40678a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4067a5;\n  lab_0x4066b6:\n    // 0x4066b6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4064f4;\n  lab_0x4067a5:;\n    int64_t v99 = function_405df0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4067c3\n    // 0x4065ee\n    return v99 & 0xffffffff;\n  lab_0x406646:;\n    int32_t v100 = v55; // 0x406646\n    if (v100 != (int32_t)v59) {\n        // 0x40664a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4065ee\n    return 0xffffffff;\n  lab_0x40660a:\n    // 0x40660a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x406611\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4065ee\n    return v99 & 0xffffffff;\n  lab_0x406750:\n    // 0x406750\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x406585;\n  lab_0x406704:\n    // 0x406704\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405df0(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)&g9); // 0x40672a\n    if ((int32_t)v101 != -1) {\n        // 0x4065ee\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40673f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406750;\n}\n"
        },
        {
            "funcName": "function_4069e0",
            "funcStartAddr": "4069e0",
            "funcEndAddr": "406a36",
            "decompiledFuncCode": "int64_t function_4069e0(int64_t a1) {\n    // 0x4069e0\n    *(int32_t *)&g71 = g26;\n    *(int32_t *)&g72 = g25;\n    int64_t v1; // 0x4069e0\n    int64_t result = function_406410(v1, v1, v1, v1, v1, v1, &g71, a1 & 0xffffffff); // 0x406a06\n    g26 = *(int32_t *)&g71;\n    g76 = (char *)g74;\n    *(int32_t *)&g24 = g73;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406a40",
            "funcStartAddr": "406a40",
            "funcEndAddr": "406a58",
            "decompiledFuncCode": "int64_t function_406a40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406a40\n    return function_4069e0(1);\n}\n"
        },
        {
            "funcName": "function_406a60",
            "funcStartAddr": "406a60",
            "funcEndAddr": "406a73",
            "decompiledFuncCode": "int64_t function_406a60(int64_t a1, int64_t a2, char * a3, char (**a4)[13], int32_t a5, int64_t a6) {\n    // 0x406a60\n    return function_4069e0(0);\n}\n"
        },
        {
            "funcName": "function_406a80",
            "funcStartAddr": "406a80",
            "funcEndAddr": "406a95",
            "decompiledFuncCode": "int64_t function_406a80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406a80\n    return function_406410(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406aa0",
            "funcStartAddr": "406aa0",
            "funcEndAddr": "406ab6",
            "decompiledFuncCode": "int64_t function_406aa0(void) {\n    // 0x406aa0\n    return function_4069e0(0);\n}\n"
        },
        {
            "funcName": "function_406ac0",
            "funcStartAddr": "406ac0",
            "funcEndAddr": "406ad8",
            "decompiledFuncCode": "int64_t function_406ac0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406ac0\n    return function_406410(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406ae0",
            "funcStartAddr": "406ae0",
            "funcEndAddr": "406b5a",
            "decompiledFuncCode": "int64_t function_406ae0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x406aeb\n    int64_t v2 = (int64_t)&g10; // 0x406aeb\n    int32_t * pwc; // 0x406ae0\n    int64_t v3; // 0x406ae0\n    int64_t n; // 0x406ae0\n    if (a2 == 0) {\n        goto lab_0x406b32;\n    } else {\n        // 0x406aed\n        if (a3 == 0) {\n            // 0x406b18\n            return -2;\n        }\n        // 0x406af9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x406b32;\n        } else {\n            goto lab_0x406b04;\n        }\n    }\n  lab_0x406b32:\n    // 0x406b32\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x406ae0\n    pwc = (int32_t *)&v4;\n    goto lab_0x406b04;\n  lab_0x406b04:;\n    char * wstr = (char *)v3; // 0x406b0a\n    int64_t ps; // 0x406ae0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x406b0a\n    int64_t result = v5; // 0x406b0a\n    if (v5 < 0xfffffffe) {\n        // 0x406b18\n        return result;\n    }\n    int64_t result2 = result; // 0x406b49\n    if ((char)function_406bc0(0, v3) == 0) {\n        // 0x406b4b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x406b18\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406b60",
            "funcStartAddr": "406b60",
            "funcEndAddr": "406bbd",
            "decompiledFuncCode": "int64_t function_406b60(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x406b67\n    int64_t v2; // 0x406b60\n    int64_t result = function_405bf0(a1, v2); // 0x406b78\n    if ((v2 & 32) != 0) {\n        // 0x406ba0\n        if ((int32_t)result == 0) {\n            // 0x406ba4\n            *__errno_location() = 0;\n        }\n        // 0x406b9a\n        return 0xffffffff;\n    }\n    // 0x406b81\n    if ((int32_t)result == 0) {\n        // 0x406b9a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406b88\n    if (v1 == 0) {\n        // 0x406b8a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x406b9a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406bc0",
            "funcStartAddr": "406bc0",
            "funcEndAddr": "406c1e",
            "decompiledFuncCode": "int64_t function_406bc0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x406bc6\n    if (locale == NULL) {\n        // 0x406bf3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x406bc6\n    bool v2; // 0x406bc0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x406bc0\n    int64_t v5 = v1; // 0x406bc0\n    int64_t v6 = 2; // 0x406be5\n    unsigned char v7 = *(char *)v5; // 0x406be5\n    char v8 = *(char *)v4; // 0x406be5\n    char v9 = v8; // 0x406be5\n    bool v10 = false; // 0x406be5\n    while (v7 == v8) {\n        // 0x406bd8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x406bf1\n    int64_t v13 = v1; // 0x406bf1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x406bf3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x406bf1\n    unsigned char v15 = *(char *)v13; // 0x406c0d\n    char v16 = *(char *)v12; // 0x406c0d\n    char v17 = v16; // 0x406c0d\n    bool v18 = false; // 0x406c0d\n    while (v15 == v16) {\n        // 0x406c00\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_406c20",
            "funcStartAddr": "406c20",
            "funcEndAddr": "407182",
            "decompiledFuncCode": "int64_t function_406c20(void) {\n    char * v1 = nl_langinfo(14); // 0x406c36\n    char * v2 = g75; // 0x406c3b\n    char * v3; // 0x406c20\n    int64_t v4; // 0x406c20\n    int64_t v5; // 0x406c20\n    int64_t v6; // 0x406c20\n    int64_t v7; // 0x406c20\n    int32_t size; // 0x406c20\n    int32_t size2; // 0x406c20\n    int32_t len; // 0x406cf2\n    int64_t v8; // 0x406cf2\n    char * env_val; // 0x406cdd\n    if (v2 == NULL) {\n        // 0x406cd8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406d45;\n        } else {\n            // 0x406cea\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406d45;\n            } else {\n                // 0x406cef\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x406cdd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x407175\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406d45;\n                    } else {\n                        // 0x4070e9\n                        size2 = len + 14;\n                        goto lab_0x406d0b;\n                    }\n                } else {\n                    goto lab_0x406d0b;\n                }\n            }\n        }\n    } else {\n        // 0x406c20\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x406c5a;\n    }\n  lab_0x406f8c:;\n    // 0x406f8c\n    struct _IO_FILE * stream; // 0x406dcb\n    int32_t v10 = __uflow(stream); // 0x406f8f\n    int64_t v11; // 0x406c20\n    int64_t v12 = v11; // 0x406f99\n    int64_t v13; // 0x406c20\n    int64_t v14 = v13; // 0x406f99\n    int32_t v15 = v10; // 0x406f99\n    int64_t v16; // 0x406c20\n    int64_t v17 = v16; // 0x406f99\n    int64_t v18 = v11; // 0x406f99\n    int64_t v19 = v13; // 0x406f99\n    int64_t v20 = v16; // 0x406f99\n    if (v10 == -1) {\n        // break -> 0x406f9f\n        goto lab_0x406f9f;\n    }\n    goto lab_0x406e19;\n  lab_0x406e0e:;\n    // 0x406e0e\n    int64_t v90; // 0x406c20\n    int64_t * v32; // 0x406e00\n    *v32 = v90 + 1;\n    int64_t v89; // 0x406c20\n    v12 = v89;\n    int64_t v91; // 0x406c20\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x406c20\n    v17 = v92;\n    goto lab_0x406e19;\n  lab_0x406e19:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x406c20\n    int32_t v25; // bp-120, 0x406c20\n    int32_t v26; // bp-184, 0x406c20\n    int64_t v27; // 0x406dcb\n    int64_t v28; // 0x406de8\n    int64_t v29; // 0x406ded\n    int64_t * v30; // 0x406e04\n    switch (c) {\n        case 32: {\n            goto lab_0x406e00;\n        }\n        case 10: {\n            goto lab_0x406e00;\n        }\n        case 9: {\n            goto lab_0x406e00;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x406ff1\n            int32_t v33; // 0x406c20\n            char v34; // 0x406c20\n            int32_t v35; // 0x406ffe\n            if (v31 < *v30) {\n                // 0x406fd0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x406ffb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x406ff1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x406fd0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x406ffb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x406fe0\n                v36 = v33;\n            }\n            // 0x4070cf\n            if (v36 == -1) {\n                // break -> 0x406f9f\n                break;\n            }\n            goto lab_0x406e00;\n        }\n        default: {\n            // 0x406e2f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x406f9f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x406e58\n            int64_t v39 = v37 + 4; // 0x406e5a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x406e66\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x406e68\n            while (v41 == 0) {\n                // 0x406e58\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x406e86\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x406e92\n            int64_t v45 = v43 + 4; // 0x406e94\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x406ea0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x406ea2\n            while (v47 == 0) {\n                // 0x406e92\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x406e8f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x406eb8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x406ec8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x406ecc\n            int64_t v52 = v51 + v48; // 0x406ed5\n            int64_t * mem; // 0x406c20\n            int64_t v53; // 0x406c20\n            int64_t v54; // 0x406c20\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40700b\n                int64_t v56 = v55 + 3; // 0x407017\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x406ef1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x406f00\n            if (mem == NULL) {\n                // 0x40712c\n                free((int64_t *)v21);\n                function_405bf0(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x406da4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x406f18\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x406f22\n            uint32_t v62 = (int32_t)v59; // 0x406f25\n            int64_t v63; // 0x406c20\n            if (v62 >= 8) {\n                // 0x407034\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40704e\n                int64_t v66 = v61 - v65; // 0x407052\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40705d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40706e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40706e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40706b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4070ff\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x406f37\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x406f3b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x406f4b\n            int64_t v74 = v60 - 1; // 0x406f4f\n            uint32_t v75 = (int32_t)v73; // 0x406f54\n            int64_t v76; // 0x406c20\n            if (v75 >= 8) {\n                // 0x407082\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40708c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40709c\n                int64_t v80 = v74 - v79; // 0x4070a0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4070ab\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4070bb\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4070b9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x407116\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40711e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x406f66\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x406f6a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x407163\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x406f7e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x406e0e;\n            } else {\n                goto lab_0x406f8c;\n            }\n        }\n    }\n  lab_0x406e00:;\n    int64_t v93 = v23; // 0x406c20\n    int64_t v94 = v22; // 0x406c20\n    int64_t v95 = v21; // 0x406c20\n    goto lab_0x406e00_2;\n  lab_0x406d45:;\n    int64_t * mem3 = malloc(size); // 0x406d45\n    int64_t v97 = (int64_t)&g10; // 0x406d50\n    int64_t v98; // 0x406c20\n    int64_t path; // 0x406c20\n    if (mem3 == NULL) {\n        goto lab_0x406d22;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406d45\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406d66;\n    }\n  lab_0x406c5a:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x406c4d\n    char v100 = *v3; // 0x406c5a\n    int64_t v101; // 0x406c20\n    if (v100 == 0) {\n        // 0x406cb4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x406c20\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x406c20\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x406ca0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x406ca7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406c70\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x406c7d\n        char v107 = *(char *)v106; // 0x406c82\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x406cb4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x406c8b\n    v104 = v103 + 1;\n  lab_0x406ca7:\n    // 0x406cb4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406d22:;\n    char * v108 = (char *)v97;\n    g75 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x406c5a;\n  lab_0x406d66:;\n    int64_t v109 = v98 + path; // 0x406d66\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x406d92\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x406dc1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4070f2\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x406de5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x406e00_2:;\n                uint64_t v96 = *v32; // 0x406e00\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x406f8c;\n                } else {\n                    goto lab_0x406e0e;\n                }\n            }\n          lab_0x406f9f:\n            // 0x406f9f\n            function_405bf0(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x406fbe\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x406da4;\n  lab_0x406d0b:;\n    int64_t * mem4 = malloc(size2); // 0x406d0b\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x406db1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406d66;\n    } else {\n        goto lab_0x406d22;\n    }\n  lab_0x406da4:\n    // 0x406da4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406d22;\n}\n"
        },
        {
            "funcName": "function_407190",
            "funcStartAddr": "407190",
            "funcEndAddr": "4071ed",
            "decompiledFuncCode": "int64_t function_407190(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407190\n    return function_401408();\n}\n"
        },
        {
            "funcName": "function_4071f0",
            "funcStartAddr": "4071f0",
            "funcEndAddr": "4071f1",
            "decompiledFuncCode": "int64_t function_4071f0(void) {\n    // 0x4071f0\n    int64_t result; // 0x4071f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_407200",
            "funcStartAddr": "407200",
            "funcEndAddr": "407218",
            "decompiledFuncCode": "int64_t function_407200(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407200\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_407218",
            "funcStartAddr": "407218",
            "funcEndAddr": "407238",
            "decompiledFuncCode": "int64_t function_407218(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x407222\n    while (*(int64_t *)v1 != -1) {\n        // 0x407223\n        v1 -= 8;\n    }\n    // 0x407234\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_fmt.elf"
}