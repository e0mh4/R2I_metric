{
    "funcInfo": [
        {
            "funcName": "function_401920",
            "funcStartAddr": "401920",
            "funcEndAddr": "401925",
            "decompiledFuncCode": "int64_t function_401920(void) {\n    // 0x401920\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401925",
            "funcStartAddr": "401925",
            "funcEndAddr": "40192a",
            "decompiledFuncCode": "int64_t function_401925(void) {\n    // 0x401925\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40192a",
            "funcStartAddr": "40192a",
            "funcEndAddr": "40192f",
            "decompiledFuncCode": "int64_t function_40192a(void) {\n    // 0x40192a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40192f",
            "funcStartAddr": "40192f",
            "funcEndAddr": "401934",
            "decompiledFuncCode": "int64_t function_40192f(void) {\n    // 0x40192f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401934",
            "funcStartAddr": "401934",
            "funcEndAddr": "401939",
            "decompiledFuncCode": "int64_t function_401934(void) {\n    // 0x401934\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401939",
            "funcStartAddr": "401939",
            "funcEndAddr": "40193e",
            "decompiledFuncCode": "int64_t function_401939(void) {\n    // 0x401939\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401940",
            "funcStartAddr": "401940",
            "funcEndAddr": "40239c",
            "decompiledFuncCode": "int64_t function_401940(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401947\n    char * env_val = getenv(\"POSIXLY_CORRECT\"); // 0x40195c\n    int64_t v2 = env_val != NULL; // 0x401979\n    function_403410(a2);\n    setlocale(LC_ALL, (char *)&g15);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    g49 = function_403190(3, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    int64_t v3; // 0x401940\n    function_407660(0x402eb0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v3);\n    g47 = 0;\n    g48 = 0;\n    g46 = -1;\n    *(char *)&g43 = 1;\n    *(char *)&g44 = 1;\n    *(char *)&g42 = 0;\n    g45 = 1;\n    g40 = 0;\n    int32_t v4 = 0; // bp-184, 0x401a1d\n    int64_t v5 = (int64_t)&v4 + 48;\n    int32_t v6 = 10; // 0x401a29\n    int64_t v7 = 0; // 0x401a29\n    int64_t v8 = 0; // 0x401a29\n    int64_t v9 = 0; // 0x401a29\n    int32_t v10; // 0x401940\n    int32_t v11; // 0x401940\n    int64_t v12; // 0x401940\n    int64_t v13; // 0x401940\n    int64_t v14; // 0x401940\n    int64_t v15; // 0x401940\n    int64_t v16; // 0x401940\n    int64_t v17; // 0x401940\n    int64_t v18; // 0x401940\n    int64_t v19; // 0x401940\n    int64_t v20; // 0x401940\n    int64_t v21; // 0x401940\n    int64_t v22; // 0x401940\n    int64_t v23; // 0x401940\n    int64_t v24; // 0x401940\n    int64_t v25; // 0x401940\n    int64_t v26; // 0x401940\n    int64_t v27; // 0x401940\n    int64_t v28; // 0x401940\n    int64_t v29; // 0x401940\n    int64_t v30; // 0x401940\n    int64_t v31; // 0x401940\n    int64_t v32; // 0x401940\n    int32_t v33; // 0x401940\n    int32_t v34; // 0x401940\n    int32_t v35; // 0x401940\n    int32_t v36; // 0x401940\n    int64_t v37; // bp-88, 0x401940\n    int64_t v38; // 0x401a83\n    while (true) {\n      lab_0x401a62_2:;\n        int64_t v39 = v9;\n        int64_t v40 = v17;\n        int64_t v41 = v8;\n        int64_t v42 = v7;\n        int64_t v43 = v29;\n        int32_t v44 = v6;\n        v33 = v44;\n        v28 = v43;\n        v23 = v42;\n        v22 = v41;\n        v16 = v40;\n        v12 = v39;\n        if ((int32_t)v41 != -1) {\n            int32_t v45 = v42; // 0x401a67\n            v33 = v44;\n            v28 = v43;\n            v23 = v42;\n            v22 = v41;\n            v16 = v40;\n            v12 = v39;\n            v10 = v45;\n            v13 = v39;\n            v18 = v40;\n            v24 = v42;\n            v34 = v44;\n            if (env_val != NULL != v45 != 0) {\n                while (true) {\n                  lab_0x401a70_2:\n                    // 0x401a70\n                    v35 = v34;\n                    v25 = v24;\n                    v19 = v18;\n                    v14 = v13;\n                    v38 = function_406d40(v1, a2, \"-0123456789Dcdf:is:uw:z\", &g3, 0, v19);\n                    int32_t v46 = v38;\n                    switch (v46) {\n                        case -1: {\n                            goto lab_0x401a70;\n                        }\n                        case 100: {\n                            // 0x402045\n                            *(char *)&g44 = 0;\n                            v36 = v35;\n                            v30 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                            v26 = v25;\n                            v20 = v19;\n                            v15 = 1;\n                            goto lab_0x401a67_2;\n                        }\n                        default: {\n                            if (v46 > 100) {\n                                if (v46 == 117) {\n                                    // 0x402033\n                                    *(char *)&g43 = 0;\n                                    v36 = v35;\n                                    v30 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                                    v26 = v25;\n                                    v20 = v19;\n                                    v15 = 1;\n                                } else {\n                                    if (v46 > 117) {\n                                        // 0x401b48\n                                        v36 = 0;\n                                        v30 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                                        v26 = v25;\n                                        v20 = v19;\n                                        v15 = v14;\n                                        if (v46 != 122) {\n                                            if (v46 != 128) {\n                                                if (v46 != 119) {\n                                                    // 0x401b39\n                                                    function_4026b0(1);\n                                                    // UNREACHABLE\n                                                }\n                                                // 0x401c49\n                                                g46 = function_402500((int64_t)g62, \"invalid number of bytes to compare\");\n                                                v36 = v35;\n                                                v30 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                                                v26 = v25;\n                                                v20 = v19;\n                                                v15 = v14;\n                                            } else {\n                                                // 0x401b5c\n                                                if (g62 == NULL) {\n                                                    // 0x402181\n                                                    g39 = 3;\n                                                    v36 = v35;\n                                                    v30 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                                                    v26 = v25;\n                                                    v20 = v19;\n                                                    v15 = v14;\n                                                } else {\n                                                    int64_t v47 = function_402dd0(\"--group\", (int64_t)g62, g5, (int64_t *)&g4, 4, g22); // 0x401b88\n                                                    g39 = *(int32_t *)(4 * v47 + (int64_t)&g4);\n                                                    v36 = v35;\n                                                    v30 = (int64_t)&g5;\n                                                    v26 = v25;\n                                                    v20 = g22;\n                                                    v15 = v14;\n                                                }\n                                            }\n                                        }\n                                    } else {\n                                        if (v46 == 105) {\n                                            // 0x402027\n                                            g41 = 1;\n                                            v36 = v35;\n                                            v30 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                                            v26 = v25;\n                                            v20 = v19;\n                                            v15 = v14;\n                                        } else {\n                                            if (v46 != 115) {\n                                                if (v46 != 102) {\n                                                    // 0x401b39\n                                                    function_4026b0(1);\n                                                    // UNREACHABLE\n                                                }\n                                                // 0x401fc7\n                                                v4 = 2;\n                                                g48 = function_402500((int64_t)g62, \"invalid number of fields to skip\");\n                                                v36 = v35;\n                                                v30 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                                                v26 = v25;\n                                                v20 = v19;\n                                                v15 = v14;\n                                            } else {\n                                                // 0x401ab7\n                                                g47 = function_402500((int64_t)g62, \"invalid number of bytes to skip\");\n                                                v36 = v35;\n                                                v30 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                                                v26 = v25;\n                                                v20 = v19;\n                                                v15 = v14;\n                                            }\n                                        }\n                                    }\n                                }\n                                goto lab_0x401a67_2;\n                            } else {\n                                if (v46 > 57) {\n                                    if (v46 != 68) {\n                                        if (v46 != 99) {\n                                            // 0x401b39\n                                            function_4026b0(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x401c79\n                                        g45 = 0;\n                                        v36 = v35;\n                                        v30 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                                        v26 = v25;\n                                        v20 = v19;\n                                        v15 = 1;\n                                    } else {\n                                        // 0x401be9\n                                        *(char *)&g44 = 0;\n                                        *(char *)&g42 = 1;\n                                        if (g62 == NULL) {\n                                            // 0x40216c\n                                            g40 = 0;\n                                            v36 = v35;\n                                            v30 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                                            v26 = v25;\n                                            v20 = v19;\n                                            v15 = 1;\n                                        } else {\n                                            int64_t v48 = function_402dd0(\"--all-repeated\", (int64_t)g62, g7, (int64_t *)&g6, 4, g22); // 0x401c29\n                                            g40 = *(int32_t *)(4 * v48 + (int64_t)&g6);\n                                            v36 = v35;\n                                            v30 = (int64_t)&g7;\n                                            v26 = v25;\n                                            v20 = g22;\n                                            v15 = 1;\n                                        }\n                                    }\n                                    goto lab_0x401a67_2;\n                                } else {\n                                    if (v46 > 47) {\n                                        // 0x401feb\n                                        if (v4 == 2) {\n                                            // 0x40227b\n                                            v21 = 0x100000000 * v38 - 0x3000000000 >> 32;\n                                            v32 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                                            goto lab_0x402014;\n                                        } else {\n                                            int64_t v49 = g48; // 0x401ff5\n                                            if (v49 < 0x199999999999999a) {\n                                                int64_t v50 = 10 * v49 + (0x100000000 * v38 - 0x3000000000 >> 32); // 0x4021ed\n                                                v21 = v50;\n                                                v32 = v49;\n                                                if (v50 < v49) {\n                                                    // 0x40200f\n                                                    v21 = -1;\n                                                    v32 = v49;\n                                                    goto lab_0x402014;\n                                                } else {\n                                                    goto lab_0x402014;\n                                                }\n                                            } else {\n                                                // 0x40200f\n                                                v21 = -1;\n                                                v32 = v49;\n                                                goto lab_0x402014;\n                                            }\n                                        }\n                                    }\n                                    if (v46 == -130) {\n                                        // 0x40234b\n                                        function_4026b0(0);\n                                        // UNREACHABLE\n                                    }\n                                    if (v46 != 1) {\n                                        if (v46 == -131) {\n                                            // 0x401ba7\n                                            function_4054b0((int64_t)g33, \"uniq\", \"GNU coreutils\", (int64_t)g21, \"Richard M. Stallman\", \"David MacKenzie\");\n                                            exit(0);\n                                            // UNREACHABLE\n                                        }\n                                        goto lab_0x401b39;\n                                    }\n                                    // 0x401afe\n                                    v11 = v10;\n                                    v31 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                                    v27 = (int64_t)g62;\n                                    if (*g62 == 43) {\n                                        int64_t v51 = function_403390(); // 0x402190\n                                        int64_t v52 = (int64_t)g62; // 0x402195\n                                        v31 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                                        v27 = v52;\n                                        if ((int32_t)v51 < 0x31069) {\n                                            goto lab_0x401b0e;\n                                        } else {\n                                            int64_t v53 = function_405a00(v52, 0, 10, &v37, (int64_t *)&g15, v19); // 0x4021be\n                                            v31 = 10;\n                                            v27 = (int64_t)g62;\n                                            if ((int32_t)v53 != 0) {\n                                                goto lab_0x401b0e;\n                                            } else {\n                                                // 0x4021d2\n                                                g47 = v37;\n                                                v36 = v35;\n                                                v30 = 10;\n                                                v26 = v25;\n                                                v20 = v19;\n                                                v15 = v14;\n                                                goto lab_0x401a67_2;\n                                            }\n                                        }\n                                    } else {\n                                        goto lab_0x401b0e;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n              lab_0x401a70:\n                // 0x401a70\n                v33 = v35;\n                v28 = (int64_t)\"-0123456789Dcdf:is:uw:z\";\n                v23 = v25;\n                v22 = v38 & 0xffffffff;\n                v16 = v19;\n                v12 = v14;\n            }\n        }\n        goto lab_0x401a30;\n    }\n  lab_0x401c9a:;\n    // 0x401c9a\n    int64_t v54; // 0x401940\n    int64_t v55; // 0x401940\n    if (g39 != 0) {\n        // 0x401edf\n        if ((char)v54 != 0) {\n            // 0x401eff\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"--group is mutually exclusive with -c/-d/-D/-u\", 5));\n          lab_0x401b39:\n            // 0x401b39\n            function_4026b0(1);\n            // UNREACHABLE\n        }\n        // 0x401ee8\n        v55 = 5;\n        if (g45 != 1) {\n            // 0x401eff\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"grouping and printing repeat counts is meaningless\", 5));\n            // 0x401b39\n            function_4026b0(1);\n            // UNREACHABLE\n        }\n    } else {\n        // 0x401ca7\n        v55 = v28;\n        if (g45 == 0) {\n            // 0x401cb0\n            v55 = 5;\n            if (*(char *)&g42 != 0) {\n                // 0x401eff\n                int64_t v56; // 0x401940\n                int64_t v57 = v56;\n                error(0, 0, dcgettext(NULL, (char *)v57, 5));\n                // 0x401b39\n                function_4026b0(1);\n                // UNREACHABLE\n            }\n        }\n    }\n    // 0x401cc7\n    int32_t v58; // 0x401940\n    uint32_t v59 = 0x1000000 * v58 >> 24; // 0x401cd6\n    int64_t v60 = v55; // 0x401cee\n    int64_t v61; // 0x401940\n    int64_t v62; // 0x401940\n    int64_t v63; // 0x401940\n    int64_t v64; // 0x401940\n    int64_t v65; // 0x401940\n    int64_t v66; // 0x401940\n    if (strcmp(\"-\", \"-\") != 0) {\n        int64_t v67 = (int64_t)g34; // 0x4021fe\n        int64_t v68 = function_402fe0((int64_t)\"-\", (int64_t *)\"r\", v67); // 0x40220f\n        v60 = v67;\n        if (v68 != 0) {\n            goto lab_0x401cf4;\n        } else {\n            int64_t v69 = function_404eb0(0, 3, (int64_t)\"-\"); // 0x402229\n            error(1, *__errno_location(), \"%s\", (char *)v69);\n            v66 = v69;\n            v65 = v64;\n            v61 = v2;\n            v62 = v54;\n            v63 = v1;\n            goto lab_0x40224c;\n        }\n    } else {\n        goto lab_0x401cf4;\n    }\n  lab_0x401a67_2:;\n    int64_t v70 = v15;\n    int64_t v71 = v20;\n    int64_t v72 = v26;\n    int32_t v73 = v36;\n    int32_t v74 = v72; // 0x401a67\n    v10 = v74;\n    v13 = v70;\n    v18 = v71;\n    v24 = v72;\n    v34 = v73;\n    if (env_val != NULL == (v74 != 0)) {\n        // 0x401a67\n        v33 = v73;\n        v28 = v30;\n        v23 = v72;\n        v22 = v38 & 0xffffffff;\n        v16 = v71;\n        v12 = v70;\n        goto lab_0x401a30;\n    }\n    goto lab_0x401a70_2;\n  lab_0x401b0e:;\n    int64_t v75 = v27; // 0x401b11\n    if (v11 == 2) {\n      lab_0x402309:\n        // 0x402309\n        function_405030(v75);\n        error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n        function_4026b0(1);\n        // UNREACHABLE\n    }\n    // 0x401b17\n    *(int64_t *)((8 * v25 & 0x7fffffff8) + v5) = v27;\n    v36 = v35;\n    v30 = v31;\n    v26 = v25 + 1 & 0xffffffff;\n    v20 = v19;\n    v15 = v14;\n    goto lab_0x401a67_2;\n  lab_0x401e8d_2:;\n    // 0x401e8d\n    int64_t v76; // 0x401940\n    int64_t v77; // 0x401940\n    function_402560(v77, 0, v76);\n    int32_t v78; // 0x401940\n    int32_t v79 = v78; // 0x401e95\n    int64_t v80; // 0x401940\n    int64_t v81 = v80; // 0x401e95\n    int64_t v82 = 0; // 0x401e95\n    int64_t v83 = v76; // 0x401e95\n    goto lab_0x401e9a;\n  lab_0x401f20:;\n    // 0x401f20\n    int64_t v196; // 0x401940\n    int64_t v197 = v196;\n    int32_t v169; // 0x401940\n    int32_t v178 = v169; // 0x401f22\n    int64_t v179 = v197; // 0x401f22\n    int64_t v160; // 0x401940\n    int64_t v180 = v160; // 0x401f22\n    int64_t v181 = v197; // 0x401f22\n    uint64_t v175; // 0x401e14\n    if ((char)v175 == 0) {\n        // break -> 0x401f28\n        goto lab_0x401f28_2;\n    }\n    goto lab_0x401e5b;\n  lab_0x401e5b:;\n    // 0x401e5b\n    int64_t v167; // 0x401940\n    int64_t v176; // 0x401e1e\n    function_402560(v167, v176, v179);\n    int64_t v174; // 0x401e0b\n    v4 = v174;\n    int64_t v173; // 0x401df7\n    int64_t v161 = v173; // 0x401e87\n    int32_t v162 = v178; // 0x401e87\n    int64_t v163 = v167; // 0x401e87\n    char * v164 = g34; // 0x401e87\n    int64_t v165 = 0; // 0x401e87\n    int64_t v168; // 0x401940\n    int64_t v166 = v168; // 0x401e87\n    v80 = v160;\n    v78 = v178;\n    v76 = 0;\n    v77 = v168;\n    if ((*g34 & 16) != 0) {\n        goto lab_0x401e8d_2;\n    }\n    goto lab_0x401dd0;\n  lab_0x401f28_2:;\n    int64_t v198 = v181;\n    int64_t v170; // 0x401940\n    int64_t v199 = v170; // 0x401f2f\n    int64_t v200 = v168; // 0x401f2f\n    int64_t v201 = v167; // 0x401f2f\n    if (*(char *)&g42 != 0) {\n        // 0x401f35\n        function_402560(v167, v176, v198);\n        v4 = v174;\n        v199 = v173;\n        v200 = v167;\n        v201 = v168;\n    }\n    int64_t v153 = v201; // 0x401dca\n    int64_t v154 = v198; // 0x401dca\n    int64_t v155 = v200; // 0x401dca\n    int64_t v156 = v180; // 0x401dca\n    int32_t v157 = v169; // 0x401dca\n    int64_t v158 = v199; // 0x401dca\n    v80 = v180;\n    v78 = v169;\n    v76 = v198;\n    v77 = v201;\n    if ((*g34 & 16) != 0) {\n        goto lab_0x401e8d_2;\n    }\n    goto lab_0x401dd0_2;\n  lab_0x401a30:\n    // 0x401a30\n    v54 = v12;\n    v64 = v22;\n    v58 = v33;\n    uint32_t v202 = *(int32_t *)0x60c29c; // 0x401a30\n    uint64_t v203 = (int64_t)v202; // 0x401a30\n    if (v1 <= v203) {\n        // break -> 0x401c9a\n        goto lab_0x401c9a;\n    }\n    int64_t v204 = *(int64_t *)(0x100000000 * v203 / 0x20000000 + a2); // 0x401a42\n    v75 = v204;\n    if ((int32_t)v23 == 2) {\n        goto lab_0x402309;\n    }\n    // 0x401a4f\n    g31 = v202 + 1;\n    *(int64_t *)((8 * v23 & 0x7fffffff8) + v5) = v204;\n    int32_t v135 = v58; // 0x401a5d\n    int64_t v136 = v202; // 0x401a5d\n    int64_t v137 = v23 + 1 & 0xffffffff; // 0x401a5d\n    int64_t v138 = v64; // 0x401a5d\n    int64_t v139 = v16; // 0x401a5d\n    int64_t v140 = v54; // 0x401a5d\n    goto lab_0x401a62;\n  lab_0x401a62:\n    // 0x401a62\n    v6 = v135;\n    v29 = v136;\n    v7 = v137;\n    v8 = v138;\n    v17 = v139;\n    v9 = v140;\n    goto lab_0x401a62_2;\n  lab_0x401cf4:;\n    int64_t v141 = v60; // 0x401d03\n    if (strcmp(\"-\", \"-\") != 0) {\n        int64_t v142 = (int64_t)g33; // 0x401d05\n        int64_t v143 = function_402fe0((int64_t)\"-\", &g2, v142); // 0x401d14\n        v141 = v142;\n        if (v143 == 0) {\n            // 0x402352\n            error(1, *__errno_location(), \"%s\", (char *)function_404eb0(0, 3, (int64_t)\"-\"));\n            // 0x401eff\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"--group is mutually exclusive with -c/-d/-D/-u\", 5));\n            // 0x401b39\n            function_4026b0(1);\n            // UNREACHABLE\n        }\n    }\n    // 0x401d22\n    function_402f60((int64_t)g34, 2, v141);\n    int64_t v104; // bp-120, 0x401940\n    function_4031f0(&v104);\n    function_4031f0(&v37);\n    int64_t v98 = v2; // 0x401d4e\n    int64_t v92; // 0x401940\n    if (*(char *)&g44 == 0) {\n        goto lab_0x401d61;\n    } else {\n        unsigned char v144 = *(char *)&g43; // 0x401d50\n        int64_t v145 = v144; // 0x401d50\n        v98 = v145;\n        v92 = v145;\n        if (v144 != 0) {\n            goto lab_0x40209e;\n        } else {\n            goto lab_0x401d61;\n        }\n    }\n  lab_0x401d61:;\n    // 0x401d61\n    int64_t v97; // 0x401940\n    int64_t v146 = v97;\n    int64_t v147 = (int64_t)g34; // 0x401d65\n    int64_t v148 = function_403200(&v37, v147, v59); // 0x401d71\n    int32_t v96; // 0x401940\n    v79 = v96;\n    v81 = v146;\n    v82 = v147;\n    v83 = v98;\n    int64_t v89; // 0x401940\n    int64_t v88; // 0x401940\n    int32_t v87; // 0x401940\n    int64_t v149; // 0x401e24\n    char v150; // 0x401940\n    if (v148 == 0) {\n        goto lab_0x401e9a;\n    } else {\n        int64_t v151 = &v37; // 0x401d8c\n        int64_t v152 = function_4025e0(v3, v3); // 0x401d9b\n        v4 = 2 * v3 + (v152 ^ 0xffffffff);\n        v80 = v146;\n        v78 = 1;\n        v76 = 0;\n        v77 = v151;\n        if ((*g34 & 16) != 0) {\n            goto lab_0x401e8d_2;\n        } else {\n            // 0x401dd0\n            v150 = v58;\n            v153 = v151;\n            v154 = 0;\n            v155 = &v104;\n            v156 = v146;\n            v157 = 1;\n            v158 = v152;\n            int64_t v159; // 0x401940\n            while (true) {\n              lab_0x401dd0_2:\n                // 0x401dd0\n                v160 = v156;\n                v161 = v158;\n                v162 = v157;\n                v163 = v155;\n                v164 = g34;\n                v165 = v154;\n                v166 = v153;\n                while (true) {\n                  lab_0x401dd0:\n                    // 0x401dd0\n                    v167 = v166;\n                    v159 = v165;\n                    v168 = v163;\n                    v169 = v162;\n                    if (function_403200((int64_t *)v168, (int64_t)v164, v59) == 0) {\n                        // break (via goto) -> 0x402057\n                        goto lab_0x402057;\n                    }\n                    // 0x401de5\n                    v170 = v161;\n                    int64_t v171 = *(int64_t *)(v168 + 8); // 0x401de5\n                    int64_t v172 = *(int64_t *)(v168 + 16); // 0x401de9\n                    v173 = function_4025e0(v171, v172);\n                    v174 = v172 + v171 + -1 - v173;\n                    v175 = function_402480(v173, v170, v174, (int64_t)v4);\n                    v176 = v175 % 256 ^ 1;\n                    v149 = v176 + v159;\n                    int32_t v177 = g40;\n                    if (v149 == -1) {\n                        // 0x401f60\n                        if (v177 == 0) {\n                            goto lab_0x401f20;\n                        } else {\n                            // 0x401f6a\n                            v178 = 0;\n                            v179 = -2;\n                            v180 = v160;\n                            v181 = -2;\n                            if ((char)v175 == 0) {\n                                // break -> 0x401f28\n                                break;\n                            }\n                            goto lab_0x401e5b;\n                        }\n                    } else {\n                        // 0x401e31\n                        if (v177 == 0) {\n                            goto lab_0x401f20;\n                        } else {\n                            if ((char)v175 == 0) {\n                                // 0x401f86\n                                v180 = v160;\n                                v181 = v149;\n                                if (v149 != 1) {\n                                    goto lab_0x401f28_2;\n                                } else {\n                                    if (v177 == 1) {\n                                        goto lab_0x401f9d;\n                                    } else {\n                                        // 0x401f91\n                                        v180 = v160;\n                                        v181 = v149;\n                                        if (v177 != 2) {\n                                            goto lab_0x401f28_2;\n                                        } else {\n                                            // 0x401f96\n                                            v180 = v160;\n                                            v181 = v149;\n                                            if ((char)v169 != 0) {\n                                                goto lab_0x401f28_2;\n                                            } else {\n                                                goto lab_0x401f9d;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            // 0x401e47\n                            v178 = v149 != 0 ? 0 : 0x1000000 * v169 >> 24;\n                            v179 = v149;\n                            goto lab_0x401e5b;\n                        }\n                    }\n                }\n                goto lab_0x401f28_2;\n            }\n          lab_0x402057:\n            // 0x402057\n            v80 = v160;\n            v78 = v169;\n            v76 = v159;\n            v77 = v167;\n            v87 = v169;\n            v88 = v160;\n            v89 = v159;\n            if ((*g34 & 32) == 0) {\n                goto lab_0x401e8d_2;\n            } else {\n                goto lab_0x402067;\n            }\n        }\n    }\n  lab_0x40224c:;\n    int64_t v182 = v63;\n    int64_t v183 = v62;\n    int64_t v184 = v61;\n    int64_t v185 = v65;\n    int64_t v186 = v66;\n    int64_t v131; // 0x401940\n    int64_t v187 = v131;\n    int32_t v130; // 0x401940\n    int32_t v188 = v130;\n    int64_t v189 = function_402480(v183, 0x100000000000000 * (int64_t)v188 >> 56, v186, v187); // 0x40225c\n    int64_t v114 = v186; // 0x402263\n    int64_t v112 = v185; // 0x402263\n    int64_t v110 = v184; // 0x402263\n    int64_t v108 = v183; // 0x402263\n    int64_t v106 = v182; // 0x402263\n    int64_t v102; // 0x401940\n    int64_t v118; // 0x401940\n    int64_t v119; // 0x401940\n    int64_t v103; // 0x401940\n    int64_t v120; // 0x401940\n    int64_t v101; // 0x401940\n    int64_t v117; // 0x401940\n    int64_t v116; // 0x401940\n    int64_t v100; // 0x401940\n    int32_t v99; // 0x401940\n    if ((char)v189 != 0) {\n        goto lab_0x402109;\n    } else {\n        // 0x402269\n        v99 = v188;\n        v100 = v187;\n        v101 = v185;\n        v102 = v184;\n        v103 = v182;\n        v116 = v186;\n        v117 = v185;\n        v118 = v184;\n        v119 = v183;\n        v120 = v182;\n        if (g39 != 0) {\n            goto lab_0x402137;\n        } else {\n            goto lab_0x4020b9;\n        }\n    }\n  lab_0x401e9a:;\n    int64_t v84 = v83;\n    int64_t v85 = v81;\n    int32_t v86 = v79;\n    v87 = v86;\n    v88 = v85;\n    v89 = v84;\n    if ((*g34 & 32) == 0) {\n        // 0x401eaa\n        v87 = v86;\n        v88 = v85;\n        v89 = v84;\n        if ((int32_t)function_405e30((int64_t)g34, v82) == 0) {\n            // 0x401eb7\n            free((int64_t *)v3);\n            free((int64_t *)v3);\n            return (int32_t)&g66 ^ (int32_t)&g66;\n        }\n    }\n    goto lab_0x402067;\n  lab_0x40209e:;\n    int64_t v93 = v92;\n    int64_t v91; // 0x401940\n    int64_t v94 = v91;\n    int32_t v90; // 0x401940\n    int32_t v95 = v90;\n    v96 = v95;\n    v97 = v94;\n    v98 = v93;\n    if (g45 != 1) {\n        goto lab_0x401d61;\n    } else {\n        // 0x4020ab\n        v4 = 0;\n        v99 = v95;\n        v100 = v94;\n        v101 = &v37;\n        v102 = v93;\n        v103 = &v104;\n        goto lab_0x4020b9;\n    }\n  lab_0x402109:;\n    int64_t v105 = v106;\n    int64_t v107 = v108;\n    int64_t v109 = v110;\n    int64_t v111 = v112;\n    int64_t v113 = v114;\n    int32_t v115 = g39; // 0x402109\n    v116 = v113;\n    v117 = v111;\n    v118 = v109;\n    v119 = v107;\n    v120 = v105;\n    switch (v115) {\n        case 0: {\n            goto lab_0x402137;\n        }\n        case 1: {\n            goto lab_0x402285;\n        }\n        case 4: {\n            goto lab_0x402285;\n        }\n        default: {\n            // 0x402125\n            v116 = v113;\n            v117 = v111;\n            v118 = v109;\n            v119 = v107;\n            v120 = v105;\n            if ((v115 || 1) == 3 == ((char)v4 != 0)) {\n                goto lab_0x402285;\n            } else {\n                goto lab_0x402137;\n            }\n        }\n    }\n  lab_0x402067:\n    // 0x402067\n    function_404de0(4, (int64_t)\"-\");\n    error(1, (int32_t)\"error reading %s\" ^ (int32_t)\"error reading %s\", dcgettext(NULL, \"error reading %s\", 5));\n    v90 = v87;\n    v91 = v88;\n    v92 = v89;\n    goto lab_0x40209e;\n  lab_0x402137:;\n    int64_t n = *(int64_t *)(v120 + 8); // 0x402137\n    int64_t data = *(int64_t *)(v120 + 16); // 0x40213b\n    fwrite_unlocked((int64_t *)data, 1, (int32_t)n, g33);\n    v4 = 0x1000000 * (int32_t)v118 >> 24;\n    v99 = 0x1000000 * (int32_t)v119 >> 24;\n    v100 = v116;\n    v101 = v120;\n    v102 = v118;\n    v103 = v117;\n    goto lab_0x4020b9;\n  lab_0x402285:;\n    int64_t v193 = (int64_t)g33; // 0x402285\n    int64_t * v194 = (int64_t *)(v193 + 40); // 0x40228c\n    uint64_t v195 = *v194; // 0x40228c\n    if (v195 >= *(int64_t *)(v193 + 48)) {\n        // 0x40233d\n        __overflow(g33, v59);\n        v116 = v113;\n        v117 = v111;\n        v118 = v109;\n        v119 = v107;\n        v120 = v105;\n    } else {\n        // 0x40229a\n        *v194 = v195 + 1;\n        *(char *)v195 = (char)v58;\n        v116 = v113;\n        v117 = v111;\n        v118 = v109;\n        v119 = v107;\n        v120 = v105;\n    }\n    goto lab_0x402137;\n  lab_0x4020b9:;\n    int64_t v121 = v102;\n    int64_t v122 = v100;\n    int32_t v123 = v99;\n    int64_t v124 = (int64_t)g34; // 0x4020b9\n    if ((*g34 & 16) != 0) {\n        goto lab_0x4022ae;\n    } else {\n        int64_t v125 = v103;\n        if (function_403200((int64_t *)v125, v124, v59) == 0) {\n            goto lab_0x4022ae;\n        } else {\n            int64_t v126 = *(int64_t *)(v125 + 8); // 0x4020de\n            int64_t v127 = *(int64_t *)(v125 + 16); // 0x4020e2\n            int64_t v128 = function_4025e0(v126, v127); // 0x4020f0\n            int64_t v129 = v127 + v126 + -1 - v128; // 0x4020fb\n            v114 = v129;\n            v112 = v101;\n            v110 = v121;\n            v108 = v128;\n            v106 = v125;\n            v130 = v123;\n            v131 = v122;\n            v66 = v129;\n            v65 = v101;\n            v61 = v121;\n            v62 = v128;\n            v63 = v125;\n            if (*(int64_t *)(v101 + 8) != 0) {\n                goto lab_0x40224c;\n            } else {\n                goto lab_0x402109;\n            }\n        }\n    }\n  lab_0x4022ae:\n    // 0x4022ae\n    v79 = v123;\n    v81 = v122;\n    v82 = v124;\n    v83 = v121;\n    if ((g39 - 2 & -3) == 0) {\n        // 0x4022c0\n        v79 = v123;\n        v81 = v122;\n        v82 = v124;\n        v83 = v121;\n        if ((char)v4 != 0) {\n            int64_t v132 = (int64_t)g33; // 0x4022ca\n            int64_t * v133 = (int64_t *)(v132 + 40); // 0x4022d1\n            uint64_t v134 = *v133; // 0x4022d1\n            if (v134 >= *(int64_t *)(v132 + 48)) {\n                // 0x40238e\n                __overflow(g33, v59);\n                v79 = v123;\n                v81 = v122;\n                v82 = v59;\n                v83 = v121;\n            } else {\n                // 0x4022df\n                *v133 = v134 + 1;\n                *(char *)v134 = (char)v58;\n                v79 = v123;\n                v81 = v122;\n                v82 = v124;\n                v83 = v121;\n            }\n        }\n    }\n    goto lab_0x401e9a;\n  lab_0x402014:\n    // 0x402014\n    g48 = v21;\n    v4 = 1;\n    v135 = v35;\n    v136 = v32;\n    v137 = v25;\n    v138 = v38 & 0xffffffff;\n    v139 = v19;\n    v140 = v14;\n    goto lab_0x401a62;\n  lab_0x401f9d:;\n    int64_t v190 = (int64_t)g33; // 0x401f9d\n    int64_t * v191 = (int64_t *)(v190 + 40); // 0x401fa4\n    uint64_t v192 = *v191; // 0x401fa4\n    if (v192 >= *(int64_t *)(v190 + 48)) {\n        // 0x4022f3\n        __overflow(g33, v59);\n        v180 = v176;\n        v181 = v149;\n        goto lab_0x401f28_2;\n    } else {\n        // 0x401fb2\n        *v191 = v192 + 1;\n        *(char *)v192 = v150;\n        v180 = v160;\n        v181 = v149;\n        goto lab_0x401f28_2;\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4023a0",
            "funcEndAddr": "4023cb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4023a0\n    int64_t v1; // 0x4023a0\n    __libc_start_main(0x401940, (int32_t)a4, (char **)&v1, (void (*)())0x4075f0, (void (*)())0x407650, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023cb",
            "funcStartAddr": "4023cb",
            "funcEndAddr": "4023ea",
            "decompiledFuncCode": "int64_t function_4023cb(void) {\n    // 0x4023cb\n    return &g32;\n}\n"
        },
        {
            "funcName": "function_4023ea",
            "funcStartAddr": "4023ea",
            "funcEndAddr": "402421",
            "decompiledFuncCode": "int64_t function_4023ea(void) {\n    // 0x4023ea\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402421",
            "funcStartAddr": "402421",
            "funcEndAddr": "402478",
            "decompiledFuncCode": "int64_t function_402421(void) {\n    // 0x402421\n    if (g37 != 0) {\n        // 0x402477\n        int64_t result; // 0x402421\n        return result;\n    }\n    int64_t v1 = g38; // 0x402454\n    int64_t result2; // 0x402466\n    if (g38 >= ((int64_t)&g18 - (int64_t)&g17 >> 3) - 1) {\n        // 0x402466\n        result2 = function_4023cb();\n        g37 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g18 - (int64_t)&g17 >> 3) - 1) {\n        // 0x402456\n        v1++;\n    }\n    // 0x40244a\n    g38 = v1;\n    // 0x402466\n    result2 = function_4023cb();\n    g37 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402478",
            "funcStartAddr": "402478",
            "funcEndAddr": "40247d",
            "decompiledFuncCode": "int64_t function_402478(void) {\n    // 0x402478\n    return function_4023ea();\n}\n"
        },
        {
            "funcName": "function_402480",
            "funcStartAddr": "402480",
            "funcEndAddr": "4024fc",
            "decompiledFuncCode": "int64_t function_402480(int64_t str, int64_t str2, uint64_t a3, uint64_t a4) {\n    uint64_t v1 = g46; // 0x402484\n    int64_t n = v1 > a3 ? a3 : v1; // 0x40248e\n    int64_t v2 = v1 > a4 ? a4 : v1; // 0x402495\n    if (g41 != 0) {\n        // 0x4024e8\n        if (n != v2) {\n            // 0x4024e0\n            return g41;\n        }\n        int64_t v3 = function_403340(str, str2, n, v2); // 0x4024ed\n        return v3 & -256 | (int64_t)((int32_t)v3 != 0);\n    }\n    // 0x4024a7\n    if (g49 != 0) {\n        int64_t v4 = function_405940(str, n, str2, v2); // 0x4024d6\n        // 0x4024e0\n        return v4 & -256 | (int64_t)((int32_t)v4 != 0);\n    }\n    // 0x4024b0\n    if (n != v2) {\n        // 0x4024e0\n        return 1;\n    }\n    int32_t memcmp_rc = memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n); // 0x4024ba\n    return (int64_t)(memcmp_rc != 0) | (int64_t)(memcmp_rc & -256);\n}\n"
        },
        {
            "funcName": "function_402500",
            "funcStartAddr": "402500",
            "funcEndAddr": "402560",
            "decompiledFuncCode": "int64_t function_402500(int64_t a1, char * a2) {\n    // 0x402500\n    int64_t result; // bp-32, 0x402500\n    int64_t v1; // 0x402500\n    int64_t v2 = function_405a00(a1, 0, 10, &result, (int64_t *)&g15, v1); // 0x40251e\n    if ((int32_t)v2 < 2) {\n        // 0x402528\n        return result;\n    }\n    // 0x402534\n    error(1, 0, \"%s: %s\", (char *)a1, dcgettext(NULL, a2, 5));\n    return &g66;\n}\n"
        },
        {
            "funcName": "function_402560",
            "funcStartAddr": "402560",
            "funcEndAddr": "4025dc",
            "decompiledFuncCode": "int64_t function_402560(int64_t a1, int64_t a2, int64_t a3) {\n    char * v1 = (char *)&g44; // 0x402563\n    if (a3 != 0) {\n        // 0x4025b8\n        v1 = (char *)&g42;\n        if ((char)a2 != 0) {\n            goto lab_0x40256f;\n        } else {\n            char result = *(char *)&g43 ^ 1;\n            if (result != 0) {\n                // 0x4025cb\n                return result;\n            }\n            goto lab_0x402573;\n        }\n    } else {\n        goto lab_0x40256f;\n    }\n  lab_0x40256f:;\n    char result2 = *v1 ^ 1;\n    if (result2 != 0) {\n        // 0x4025cb\n        return result2;\n    }\n    goto lab_0x402573;\n  lab_0x402573:\n    // 0x402573\n    if (g45 == 0) {\n        // 0x4025a0\n        __printf_chk(1, \"%7lu \", (int32_t)a3 + 1);\n    }\n    int64_t n = *(int64_t *)(a1 + 8); // 0x402581\n    int64_t data = *(int64_t *)(a1 + 16); // 0x402585\n    return fwrite_unlocked((int64_t *)data, 1, (int32_t)n, g33);\n}\n"
        },
        {
            "funcName": "function_4025e0",
            "funcStartAddr": "4025e0",
            "funcEndAddr": "4026ab",
            "decompiledFuncCode": "int64_t function_4025e0(int64_t a1, int64_t a2) {\n    uint64_t v1 = (int64_t)g48; // 0x4025e2\n    uint64_t v2 = a1 - 1; // 0x4025ee\n    uint64_t v3; // 0x4025e0\n    uint64_t v4; // 0x4025e0\n    if (a1 == 1 || v1 == 0) {\n        // 0x402653\n        v3 = v2;\n        v4 = g47;\n        return a2 + (v4 > v3 ? v3 : v4);\n    }\n    uint64_t v5 = (int64_t)*__ctype_b_loc();\n    int64_t v6 = v5 % 256; // 0x40260f\n    int64_t v7 = 0; // 0x40261c\n    int64_t v8 = 0; // 0x402670\n    int64_t v9 = (int64_t)*(int16_t *)(2 * v6 + v5); // 0x4025e0\n    int64_t v10 = v6; // 0x402679\n    int64_t v11; // 0x4025e0\n    int64_t v12; // 0x4025e0\n    while (true) {\n        // 0x402620\n        v11 = v8;\n        if (v10 != 10) {\n            // 0x402625\n            if (v9 % 2 == 0) {\n                // break -> 0x40262a\n                break;\n            }\n        }\n        // 0x402670\n        v8 = v11 + 1;\n        v12 = v8;\n        if (v2 <= v8) {\n            // break (via goto) -> 0x402650\n            goto lab_0x402650_2;\n        }\n        // 0x402679\n        v10 = (int64_t)*(char *)(v8 + a2);\n        v9 = (int64_t)*(int16_t *)(2 * v10 + v5);\n    }\n    // 0x40262a\n    v12 = v11;\n    while (v2 > v11) {\n        int64_t v13 = v11 + 1; // 0x402690\n        v12 = v13;\n        if (v2 <= v13) {\n            // break (via goto) -> 0x402650\n            goto lab_0x402650_2;\n        }\n        unsigned char v14 = *(char *)(v13 + a2); // 0x402699\n        int64_t v15 = v14; // 0x402699\n        int64_t v16 = (int64_t)*(int16_t *)(2 * v15 + v5); // 0x4026a1\n        int64_t v17 = v13; // 0x402632\n        while (v14 != 10 == v16 % 2 == 0) {\n            // 0x402690\n            v13 = v17 + 1;\n            v12 = v13;\n            if (v2 <= v13) {\n                // break (via goto) -> 0x402650\n                goto lab_0x402650_2;\n            }\n            // 0x402699\n            v14 = *(char *)(v13 + a2);\n            v15 = v14;\n            v16 = (int64_t)*(int16_t *)(2 * v15 + v5);\n            v17 = v13;\n        }\n        // 0x402639\n        v7++;\n        v12 = v13;\n        if (v7 >= v1) {\n            // break -> 0x402650\n            break;\n        }\n        v8 = v13;\n        v9 = v16;\n        v10 = v15;\n        while (true) {\n            // 0x402620\n            v11 = v8;\n            if (v10 != 10) {\n                // 0x402625\n                if (v9 % 2 == 0) {\n                    // break -> 0x40262a\n                    break;\n                }\n            }\n            // 0x402670\n            v8 = v11 + 1;\n            v12 = v8;\n            if (v2 <= v8) {\n                // break (via goto) -> 0x402650\n                goto lab_0x402650_2;\n            }\n            // 0x402679\n            v10 = (int64_t)*(char *)(v8 + a2);\n            v9 = (int64_t)*(int16_t *)(2 * v10 + v5);\n        }\n        // 0x40262a\n        v12 = v11;\n    }\n  lab_0x402650_2:\n    // 0x402653\n    v3 = v2 - v12;\n    v4 = g47;\n    return v12 + a2 + (v4 > v3 ? v3 : v4);\n}\n"
        },
        {
            "funcName": "function_4026b0",
            "funcStartAddr": "4026b0",
            "funcEndAddr": "402afd",
            "decompiledFuncCode": "int64_t function_4026b0(int64_t a1) {\n    int32_t status = a1; // 0x4026c6\n    if (status != 0) {\n        // 0x4026ca\n        __fprintf_chk(g36, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x4026ef\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x4026f6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [INPUT [OUTPUT]]\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Filter adjacent matching lines from INPUT (or standard input),\\nwriting to OUTPUT (or standard output).\\n\\nWith no options, matching lines are merged to the first occurrence.\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"  -c, --count           prefix lines by the number of occurrences\\n  -d, --repeated        only print duplicate lines, one for each group\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"  -D                    print all duplicate lines\\n      --all-repeated[=METHOD]  like -D, but allow separating groups\\n                                 with an empty line;\\n                                 METHOD={none(default),prepend,separate}\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"  -f, --skip-fields=N   avoid comparing the first N fields\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"      --group[=METHOD]  show all items, separating groups with an empty line;\\n                          METHOD={separate(default),prepend,append,both}\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"  -i, --ignore-case     ignore differences in case when comparing\\n  -s, --skip-chars=N    avoid comparing the first N characters\\n  -u, --unique          only print unique lines\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"  -z, --zero-terminated     line delimiter is NUL, not newline\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"  -w, --check-chars=N   compare no more than N characters in lines\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"\\nA field is a run of blanks (usually spaces and/or TABs), then non-blank\\ncharacters.  Fields are skipped before chars.\\n\", 5), g33);\n    fputs_unlocked(dcgettext(NULL, \"\\nNote: 'uniq' does not detect repeated lines unless they are adjacent.\\nYou may want to sort the input first, or use 'sort -u' without 'uniq'.\\nAlso, comparisons honor the rules specified by 'LC_COLLATE'.\\n\", 5), g33);\n    int64_t v1 = &g1; // bp-136, 0x4028db\n    bool v2; // 0x4026b0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402960\n    int64_t v6 = *(int64_t *)v5; // 0x402964\n    int64_t v7 = 5; // 0x40296a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"uniq\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402976\n        char v11 = *(char *)v9; // 0x402976\n        char v12 = v11; // 0x402976\n        bool v13 = false; // 0x402976\n        while (v10 == v11) {\n            // 0x40296c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402976\n            int64_t v15 = v8 + v3; // 0x402976\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402982\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x402982\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402a94;\n        } else {\n            // 0x402a7e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402ad3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4029e4;\n            } else {\n                goto lab_0x402a94;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x4029e4;\n        } else {\n            // 0x4029ca\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402ad3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x4029e4;\n            } else {\n                goto lab_0x4029e4;\n            }\n        }\n    }\n  lab_0x402a94:\n    // 0x402a94\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402a24\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4026ef\n    exit(status);\n    // UNREACHABLE\n  lab_0x4029e4:\n    // 0x4029e4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402a24\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x4026ef\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402b00",
            "funcStartAddr": "402b00",
            "funcEndAddr": "402b0a",
            "decompiledFuncCode": "int64_t function_402b00(void) {\n    // 0x402b00\n    return function_4026b0(1);\n}\n"
        },
        {
            "funcName": "function_402b10",
            "funcStartAddr": "402b10",
            "funcEndAddr": "402c26",
            "decompiledFuncCode": "int64_t function_402b10(int64_t a1, int64_t a2, int64_t a3, int64_t n) {\n    char * str = (char *)a1; // 0x402b31\n    int32_t len = strlen(str); // 0x402b31\n    if (a2 == 0) {\n        // 0x402bfd\n        return -1;\n    }\n    int64_t v1 = -1;\n    int64_t * str3 = (int64_t *)(v1 * n + a3);\n    int32_t v2 = 0;\n    int64_t v3 = 0; // 0x402b97\n    int64_t v4 = a3; // 0x402b10\n    int64_t v5 = a2; // 0x402b9e\n    int64_t str4; // 0x402b10\n    int64_t v6; // 0x402b10\n    int32_t v7; // 0x402b10\n    int32_t v8; // 0x402b10\n    int32_t v9; // 0x402b10\n    int64_t v10; // 0x402b10\n    int64_t result; // 0x402b10\n    int32_t v11; // 0x402b93\n    char * str2; // 0x402bb2\n    while (true) {\n        // 0x402ba7\n        str4 = v4;\n        v6 = v3;\n        v8 = v2;\n        str2 = (char *)v5;\n        v7 = v8;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x402bbb\n            result = v6;\n            if (len == strlen(str2)) {\n                // 0x402bfd\n                return result;\n            }\n            if (v1 == -1) {\n                // break -> 0x402bcf\n                break;\n            }\n            // 0x402b60\n            v7 = 1;\n            if (a3 != 0) {\n                // 0x402b6e\n                v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                v7 = v11;\n            }\n        }\n        // 0x402b97\n        v2 = v7;\n        v3 = v6 + 1;\n        v5 = *(int64_t *)(8 * v3 + a2);\n        v4 = str4 + n;\n        v10 = v1;\n        v9 = v2;\n        if (v5 == 0) {\n            return (char)v9 == 0 ? v10 : -2;\n        }\n    }\n    int64_t v12 = v6 + 1; // 0x402bd3\n    int64_t v13 = *(int64_t *)(8 * v12 + a2); // 0x402bda\n    v10 = v6;\n    v9 = v8;\n    while (v13 != 0) {\n        // 0x402ba7\n        v1 = v6;\n        str3 = (int64_t *)(v1 * n + a3);\n        v2 = v8;\n        v3 = v12;\n        v4 = str4 + n;\n        v5 = v13;\n        while (true) {\n            // 0x402ba7\n            str4 = v4;\n            v6 = v3;\n            v8 = v2;\n            str2 = (char *)v5;\n            v7 = v8;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x402bbb\n                result = v6;\n                if (len == strlen(str2)) {\n                    // 0x402bfd\n                    return result;\n                }\n                if (v1 == -1) {\n                    // break -> 0x402bcf\n                    break;\n                }\n                // 0x402b60\n                v7 = 1;\n                if (a3 != 0) {\n                    // 0x402b6e\n                    v11 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v8 >> 24;\n                    v7 = v11;\n                }\n            }\n            // 0x402b97\n            v2 = v7;\n            v3 = v6 + 1;\n            v5 = *(int64_t *)(8 * v3 + a2);\n            v4 = str4 + n;\n            v10 = v1;\n            v9 = v2;\n            if (v5 == 0) {\n                return (char)v9 == 0 ? v10 : -2;\n            }\n        }\n        // 0x402bcf\n        v12 = v6 + 1;\n        v13 = *(int64_t *)(8 * v12 + a2);\n        v10 = v6;\n        v9 = v8;\n    }\n  lab_0x402be8:\n    // 0x402bfd\n    return (char)v9 == 0 ? v10 : -2;\n}\n"
        },
        {
            "funcName": "function_402c30",
            "funcStartAddr": "402c30",
            "funcEndAddr": "402ca1",
            "decompiledFuncCode": "int64_t function_402c30(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x402c30\n    if (a3 == -1) {\n        // 0x402c90\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x402c45\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x402c54\n    function_405010(1, a1);\n    function_404d00(0, 8, a2);\n    error(0, 0, format);\n    return &g66;\n}\n"
        },
        {
            "funcName": "function_402cb0",
            "funcStartAddr": "402cb0",
            "funcEndAddr": "402dc8",
            "decompiledFuncCode": "int64_t function_402cb0(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x402cdd\n    fputs_unlocked(v1, g36);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x402d50\n        int64_t v5; // 0x402d57\n        int64_t v6; // 0x402d77\n        while (v3 != 0) {\n            // 0x402d3b\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x402d00\n                break;\n            }\n            // 0x402d4d\n            v4 = v3 + 1;\n            v5 = function_405030(v2);\n            __fprintf_chk(g36, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x402d80\n                goto lab_0x402d80;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x402d03\n        int64_t v8 = function_405030(v2); // 0x402d0d\n        __fprintf_chk(g36, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x402d2d\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x402d3b\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x402d00\n                    break;\n                }\n                // 0x402d4d\n                v4 = v3 + 1;\n                v5 = function_405030(v2);\n                __fprintf_chk(g36, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x402d80\n                    goto lab_0x402d80;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x402d00\n            v7 = v3 + 1;\n            v8 = function_405030(v2);\n            __fprintf_chk(g36, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x402d80:;\n    int64_t v10 = (int64_t)g36; // 0x402d80\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x402d87\n    uint64_t result = *v11; // 0x402d87\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x402db0\n        return __overflow(g36, 10);\n    }\n    // 0x402d91\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402dd0",
            "funcStartAddr": "402dd0",
            "funcEndAddr": "402e40",
            "decompiledFuncCode": "int64_t function_402dd0(char * a1, int64_t a2, char ** a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a4;\n    int64_t v2 = (int64_t)a3;\n    int64_t v3 = function_402b10(a2, v2, v1, a5); // 0x402dfc\n    int64_t result = v3; // 0x402e04\n    if (v3 < 0) {\n        // 0x402e18\n        function_402c30((int64_t)a1, a2, v3);\n        function_402cb0(v2, v1, a5);\n        result = -1;\n    }\n    // 0x402e06\n    return result;\n}\n"
        },
        {
            "funcName": "function_402e40",
            "funcStartAddr": "402e40",
            "funcEndAddr": "402e8d",
            "decompiledFuncCode": "int64_t function_402e40(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x402e40\n    if (result == 0) {\n        // 0x402e81\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x402e78\n    int32_t n = a4; // 0x402e78\n    int64_t v1 = result; // 0x402e7f\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x402e81\n        return result;\n    }\n    int64_t str3 = str2; // 0x402e7f\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x402e60\n    int64_t result2 = 0; // 0x402e6d\n    while (v2 != 0) {\n        // 0x402e6f\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x402e81\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x402e81\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402e90",
            "funcStartAddr": "402e90",
            "funcEndAddr": "402e98",
            "decompiledFuncCode": "int64_t function_402e90(int64_t a1) {\n    // 0x402e90\n    g51 = a1;\n    int64_t result; // 0x402e90\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ea0",
            "funcStartAddr": "402ea0",
            "funcEndAddr": "402ea8",
            "decompiledFuncCode": "int64_t function_402ea0(int64_t a1) {\n    // 0x402ea0\n    g50 = a1;\n    int64_t result; // 0x402ea0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402eb0",
            "funcStartAddr": "402eb0",
            "funcEndAddr": "402f4e",
            "decompiledFuncCode": "int64_t function_402eb0(void) {\n    // 0x402eb0\n    int32_t * err_num; // 0x402ec6\n    if ((int32_t)function_406e40((int64_t)g33) == 0) {\n        goto lab_0x402edc;\n    } else {\n        // 0x402ec6\n        err_num = __errno_location();\n        if (g50 == 0) {\n            goto lab_0x402ef3;\n        } else {\n            // 0x402ed7\n            if (*err_num != 32) {\n                goto lab_0x402ef3;\n            } else {\n                goto lab_0x402edc;\n            }\n        }\n    }\n  lab_0x402edc:;\n    int64_t result = function_406e40((int64_t)g36); // 0x402ee3\n    if ((int32_t)result == 0) {\n        // 0x402eec\n        return result;\n    }\n    // 0x402f2e\n    _exit(g23);\n    // UNREACHABLE\n  lab_0x402ef3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x402eff\n    if (g51 == 0) {\n        // 0x402f39\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402f13\n        error(0, *err_num, \"%s: %s\", (char *)function_404e80((int64_t)g51), v1);\n    }\n    // 0x402f2e\n    _exit(g23);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f50",
            "funcStartAddr": "402f50",
            "funcEndAddr": "402f55",
            "decompiledFuncCode": "int64_t function_402f50(void) {\n    // 0x402f50\n    int64_t fd; // 0x402f50\n    return posix_fadvise((int32_t)fd, (int32_t)fd, (int32_t)fd, (int32_t)fd);\n}\n"
        },
        {
            "funcName": "function_402f60",
            "funcStartAddr": "402f60",
            "funcEndAddr": "402f81",
            "decompiledFuncCode": "int64_t function_402f60(int64_t stream, int64_t advice, int64_t a3) {\n    // 0x402f60\n    if (stream == 0) {\n        // 0x402f80\n        int64_t result; // 0x402f60\n        return result;\n    }\n    // 0x402f65\n    return posix_fadvise(fileno((struct _IO_FILE *)stream), 0, 0, (int32_t)advice);\n}\n"
        },
        {
            "funcName": "function_402f90",
            "funcStartAddr": "402f90",
            "funcEndAddr": "402fdb",
            "decompiledFuncCode": "int64_t function_402f90(int32_t a1, int64_t a2) {\n    int32_t fd = open(\"/dev/null\", O_RDONLY); // 0x402fa6\n    if (fd == a1) {\n        // 0x402fb5\n        return 1;\n    }\n    // 0x402faf\n    if (fd < 0) {\n        // 0x402fb5\n        return 0;\n    }\n    // 0x402fc0\n    close(fd);\n    *__errno_location() = 9;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_402fe0",
            "funcStartAddr": "402fe0",
            "funcEndAddr": "40318f",
            "decompiledFuncCode": "int64_t function_402fe0(int64_t a1, int64_t * a2, int64_t stream) {\n    int32_t v1 = fileno((struct _IO_FILE *)stream); // 0x402ffc\n    int32_t * v2 = __errno_location(); // 0x403003\n    int64_t v3 = 0; // 0x402fe0\n    int64_t v4 = 0; // 0x402fe0\n    int64_t v5 = 0; // 0x402fe0\n    int64_t v6 = 0; // 0x402fe0\n    int64_t v7 = 0; // 0x402fe0\n    switch (v1) {\n        case 1: {\n            goto lab_0x403050;\n        }\n        case 2: {\n            goto lab_0x40303a;\n        }\n        case 0: {\n            goto lab_0x40308c;\n        }\n        default: {\n            // 0x403025\n            v3 = dup2(2, 2) != 2;\n            goto lab_0x40303a;\n        }\n    }\n  lab_0x403050:;\n    // 0x403050\n    int64_t v8; // 0x402fe0\n    int64_t v9; // 0x402fe0\n    int64_t v10; // 0x402fe0\n    int64_t v11; // 0x402fe0\n    int64_t v12; // 0x402fe0\n    int64_t v13; // 0x402fe0\n    int64_t v14; // 0x403064\n    if (dup2(0, 0) == 0) {\n        // 0x4030d0\n        v10 = 0;\n        v8 = 0;\n        v14 = 0;\n        if (v4 == 0) {\n            goto lab_0x403074;\n        } else {\n            goto lab_0x4030d8;\n        }\n    } else {\n        int64_t v15 = function_402f90(0, 0); // 0x40305f\n        v12 = v3;\n        v11 = v4;\n        v9 = 1;\n        v13 = 0;\n        if ((char)v15 == 0) {\n            goto lab_0x40309f;\n        } else {\n            // 0x40306f\n            v14 = v15 & 0xffffffff;\n            v10 = v4;\n            v8 = v14;\n            if (v4 != 0) {\n                goto lab_0x4030d8;\n            } else {\n                goto lab_0x403074;\n            }\n        }\n    }\n  lab_0x40303a:\n    // 0x40303a\n    v4 = dup2(1, 1) != 1;\n    goto lab_0x403050;\n  lab_0x40308c:\n    // 0x40308c\n    v12 = v5;\n    v11 = v6;\n    v9 = v7;\n    v13 = function_405ef0(a1, (int64_t)a2);\n    goto lab_0x40309f;\n  lab_0x40309f:;\n    int64_t v16 = (int64_t)*v2; // 0x40309f\n    int64_t v17 = v11; // 0x4030a4\n    int64_t v18 = v13; // 0x4030a4\n    int64_t v19 = v9; // 0x4030a4\n    int64_t v20 = v16; // 0x4030a4\n    int64_t v21 = v11; // 0x4030a4\n    int64_t v22 = v13; // 0x4030a4\n    int64_t v23 = v9; // 0x4030a4\n    int64_t v24 = v16; // 0x4030a4\n    if ((char)v12 != 0) {\n        goto lab_0x403146;\n    } else {\n        goto lab_0x4030aa;\n    }\n  lab_0x403074:\n    // 0x403074\n    v5 = v3;\n    v6 = v10;\n    v7 = v8;\n    if ((char)v3 == 0) {\n        goto lab_0x40308c;\n    } else {\n        int64_t v25 = function_402f90(2, 0); // 0x40307d\n        v5 = v25 & 0xffffffff;\n        v6 = v10;\n        v7 = v8;\n        if ((char)v25 == 0) {\n            // 0x403140\n            v21 = v10;\n            v22 = 0;\n            v23 = v8;\n            v24 = (int64_t)*v2;\n            goto lab_0x403146;\n        } else {\n            goto lab_0x40308c;\n        }\n    }\n  lab_0x4030d8:;\n    int64_t v26 = function_402f90(1, 0); // 0x4030dd\n    v10 = v26 & 0xffffffff;\n    v8 = v14;\n    int64_t v27; // 0x402fe0\n    int64_t v28; // 0x402fe0\n    int64_t v29; // 0x402fe0\n    if ((char)v26 != 0) {\n        goto lab_0x403074;\n    } else {\n        int64_t v30 = (int64_t)*v2; // 0x4030e8\n        v27 = 0;\n        v28 = v14;\n        v29 = v30;\n        if ((char)v3 != 0) {\n            // 0x403180\n            close(2);\n            v27 = 0;\n            v28 = v14;\n            v29 = v30;\n        }\n        goto lab_0x403100;\n    }\n  lab_0x403146:\n    // 0x403146\n    close(2);\n    v17 = v21;\n    v18 = v22;\n    v19 = v23;\n    v20 = v24;\n    goto lab_0x4030aa;\n  lab_0x4030aa:\n    // 0x4030aa\n    v27 = v18;\n    v28 = v19;\n    v29 = v20;\n    int64_t result; // 0x402fe0\n    int64_t v31; // 0x402fe0\n    int64_t v32; // 0x402fe0\n    int64_t v33; // 0x402fe0\n    if ((char)v17 != 0) {\n        goto lab_0x403100;\n    } else {\n        // 0x4030af\n        result = v18;\n        v32 = v20;\n        v31 = v18;\n        v33 = v20;\n        if ((char)v19 != 0) {\n            goto lab_0x40310f;\n        } else {\n            goto lab_0x4030b4;\n        }\n    }\n  lab_0x403100:\n    // 0x403100\n    close(1);\n    result = v27;\n    v32 = v29;\n    v31 = v27;\n    v33 = v29;\n    if ((char)v28 == 0) {\n        goto lab_0x4030b4;\n    } else {\n        goto lab_0x40310f;\n    }\n  lab_0x4030b4:;\n    int64_t result2 = 0; // 0x4030b7\n    int64_t v34 = v32; // 0x4030b7\n    if (result != 0) {\n        // 0x4030b9\n        return result;\n    }\n    goto lab_0x40311b;\n  lab_0x40310f:\n    // 0x40310f\n    close(0);\n    result2 = v31;\n    v34 = v33;\n    if (v31 != 0) {\n        // 0x4030b9\n        int64_t v35; // 0x402fe0\n        int64_t result3 = v35;\n        return result3;\n    }\n    goto lab_0x40311b;\n  lab_0x40311b:\n    // 0x40311b\n    *v2 = (int32_t)v34;\n    // 0x4030b9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403190",
            "funcStartAddr": "403190",
            "funcEndAddr": "4031ee",
            "decompiledFuncCode": "int64_t function_403190(int64_t locale_category, int64_t a2) {\n    char * locale = setlocale((int32_t)locale_category, NULL); // 0x403196\n    if (locale == NULL) {\n        // 0x4031c3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x403196\n    bool v2; // 0x403190\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g8; // 0x403190\n    int64_t v5 = v1; // 0x403190\n    int64_t v6 = 2; // 0x4031b5\n    unsigned char v7 = *(char *)v5; // 0x4031b5\n    char v8 = *(char *)v4; // 0x4031b5\n    char v9 = v8; // 0x4031b5\n    bool v10 = false; // 0x4031b5\n    while (v7 == v8) {\n        // 0x4031a8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4031c1\n    int64_t v13 = v1; // 0x4031c1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4031c3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4031c1\n    unsigned char v15 = *(char *)v13; // 0x4031dd\n    char v16 = *(char *)v12; // 0x4031dd\n    char v17 = v16; // 0x4031dd\n    bool v18 = false; // 0x4031dd\n    while (v15 == v16) {\n        // 0x4031d0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4031f0",
            "funcStartAddr": "4031f0",
            "funcEndAddr": "403200",
            "decompiledFuncCode": "int64_t function_4031f0(int64_t * a1) {\n    // 0x4031f0\n    int128_t v1; // 0x4031f0\n    int128_t v2 = v1;\n    int128_t v3 = __asm_pxor(v2, v2); // 0x4031f0\n    *(int64_t *)((int64_t)a1 + 16) = 0;\n    int64_t v4; // 0x4031f0\n    __asm_movups(*(int128_t *)&v4, v3);\n    int64_t result; // 0x4031f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_403200",
            "funcStartAddr": "403200",
            "funcEndAddr": "40331b",
            "decompiledFuncCode": "int64_t function_403200(int64_t * a1, int64_t a2, uint32_t a3) {\n    int64_t result = (int64_t)a1;\n    int64_t * v1 = (int64_t *)(result + 16); // 0x403218\n    int64_t v2 = *v1; // 0x403218\n    int64_t v3 = v2 + result; // 0x403228\n    if ((v3 & 16) != 0) {\n        // 0x4032d8\n        return 0;\n    }\n    int64_t v4 = 0x100000000000000 * (int64_t)a3 >> 56; // 0x403206\n    uint32_t v5 = 0x1000000 * a3 / 0x1000000; // 0x403223\n    int64_t * v6 = (int64_t *)(a2 + 8); // 0x403264\n    int64_t v7 = v3; // 0x403200\n    int64_t v8 = v2;\n    int64_t v9 = v2; // 0x403255\n    int64_t v10; // 0x403200\n    int64_t v11; // 0x403200\n    int64_t v12; // 0x403200\n    int64_t v13; // 0x403200\n    int64_t v14; // 0x403200\n    int64_t v15; // 0x403200\n    int64_t v16; // 0x403200\n    while (true) {\n      lab_0x403264:\n        // 0x403264\n        v11 = v9;\n        v10 = v8;\n        int64_t v17 = v7;\n        uint64_t v18 = *v6; // 0x403264\n        if (v18 < *(int64_t *)(a2 + 16)) {\n            // 0x403240\n            *v6 = v18 + 1;\n            v16 = v17;\n            v13 = (int64_t)*(char *)v18;\n            goto lab_0x40324b;\n        } else {\n            uint32_t v19 = __uflow((struct _IO_FILE *)a2); // 0x403275\n            int64_t v20 = 0x100000000 * v17 >> 32; // 0x40327a\n            v16 = v20;\n            v13 = v19;\n            if (v19 != -1) {\n                goto lab_0x40324b;\n            } else {\n                if (v10 == v11) {\n                    // break -> 0x4032d8\n                    break;\n                }\n                if ((v17 & 32) != 0) {\n                    // break -> 0x4032d8\n                    break;\n                }\n                // 0x40328f\n                v12 = v11;\n                if (*(char *)(v11 - 1) == (char)v5) {\n                  lab_0x4032fc:\n                    // 0x4032fc\n                    *(int64_t *)(result + 8) = v12 - v10;\n                    return result;\n                }\n                // 0x40329a\n                v15 = v5 % 256;\n                v14 = v4 & 0xffffffff;\n                if (v11 != v20) {\n                    // 0x4032f0\n                    *(char *)v11 = (char)a3;\n                    v12 = v11 + 1;\n                    goto lab_0x4032fc;\n                }\n                goto lab_0x4032a7;\n            }\n        }\n    }\n    // 0x4032d8\n    return 0;\n  lab_0x40324b:\n    // 0x40324b\n    v7 = v16;\n    int64_t v21 = v11; // 0x403250\n    int64_t v22 = v13; // 0x403250\n    int64_t v23 = v13; // 0x403250\n    int64_t v24 = v10; // 0x403250\n    v15 = v13;\n    v14 = v13;\n    if (v11 == v16) {\n        goto lab_0x4032a7;\n    } else {\n        goto lab_0x403255;\n    }\n  lab_0x4032a7:;\n    int64_t v25 = function_405750(v10, result); // 0x4032b4\n    int64_t v26 = v25 + v10; // 0x4032c4\n    *v1 = v25;\n    v7 = v26;\n    v21 = v26;\n    v22 = v15 % 256;\n    v23 = v14;\n    v24 = v25;\n    goto lab_0x403255;\n  lab_0x403255:\n    // 0x403255\n    v8 = v24;\n    v9 = v21 + 1;\n    *(char *)v21 = (char)v22;\n    v12 = v9;\n    int64_t v27 = v8; // 0x40325e\n    if ((int32_t)v23 == (int32_t)v4) {\n        // 0x4032fc\n        *(int64_t *)(result + 8) = v12 - v27;\n        return result;\n    }\n    goto lab_0x403264;\n}\n"
        },
        {
            "funcName": "function_403320",
            "funcStartAddr": "403320",
            "funcEndAddr": "40332a",
            "decompiledFuncCode": "int64_t function_403320(void) {\n    // 0x403320\n    int64_t v1; // 0x403320\n    return function_403200((int64_t *)v1, v1, 10);\n}\n"
        },
        {
            "funcName": "function_403330",
            "funcStartAddr": "403330",
            "funcEndAddr": "403339",
            "decompiledFuncCode": "int64_t function_403330(int64_t a1) {\n    // 0x403330\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    return &g66;\n}\n"
        },
        {
            "funcName": "function_403340",
            "funcStartAddr": "403340",
            "funcEndAddr": "403385",
            "decompiledFuncCode": "int64_t function_403340(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403340\n    if (a3 == 0) {\n        // 0x40337d\n        return 0;\n    }\n    int64_t v1 = (int64_t)*__ctype_toupper_loc(); // 0x403359\n    int64_t v2 = 0; // 0x40335c\n    int32_t v3 = *(int32_t *)(4 * (int64_t)*(char *)(v2 + a2) + v1); // 0x403377\n    uint32_t result = *(int32_t *)(4 * (int64_t)*(char *)(v2 + a1) + v1) - v3; // 0x403377\n    while (result == 0) {\n        // 0x403360\n        v2++;\n        if (v2 == a3) {\n            // 0x40337d\n            return 0;\n        }\n        v3 = *(int32_t *)(4 * (int64_t)*(char *)(v2 + a2) + v1);\n        result = *(int32_t *)(4 * (int64_t)*(char *)(v2 + a1) + v1) - v3;\n    }\n    // 0x40337d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403390",
            "funcStartAddr": "403390",
            "funcEndAddr": "403402",
            "decompiledFuncCode": "int64_t function_403390(void) {\n    char * env_val = getenv(\"_POSIX2_VERSION\"); // 0x40339f\n    if (env_val == NULL || *env_val == 0) {\n        // 0x4033ae\n        return 0x31069;\n    }\n    // 0x4033c0\n    char * endptr; // bp-16, 0x403390\n    int32_t str_as_l = strtol(env_val, &endptr, 10); // 0x4033cd\n    if (*endptr != 0) {\n        // 0x4033ae\n        return 0x31069;\n    }\n    int64_t v1 = str_as_l; // 0x4033cd\n    int64_t v2 = v1 - 0x7fffffff; // 0x4033e4\n    return v2 == 0 | v2 < 0 != (0x7ffffffe - v1 & v1) < 0 ? v1 & 0xffffffff : 0x7fffffff;\n}\n"
        },
        {
            "funcName": "function_403410",
            "funcStartAddr": "403410",
            "funcEndAddr": "4034a9",
            "decompiledFuncCode": "int64_t function_403410(int64_t str) {\n    // 0x403410\n    if (str == 0) {\n        // 0x403489\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g36);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40341e\n    int64_t result = (int64_t)found_char_pos; // 0x40341e\n    if (found_char_pos == NULL) {\n        // 0x403479\n        g52 = str;\n        g35 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403428\n    if (v1 - str < 7) {\n        // 0x403479\n        g52 = str;\n        g35 = str;\n        return result;\n    }\n    // 0x403438\n    bool v2; // 0x403410\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403410\n    int64_t v5 = result - 6; // 0x403410\n    int64_t v6 = 7; // 0x403446\n    unsigned char v7 = *(char *)v5; // 0x403446\n    char v8 = *(char *)v4; // 0x403446\n    char v9 = v8; // 0x403446\n    bool v10 = false; // 0x403446\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x403450\n    int64_t v13 = v1; // 0x403450\n    int64_t v14 = 3; // 0x403450\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x403479\n        g52 = str;\n        g35 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x403462\n    char v16 = *(char *)v12; // 0x403462\n    char v17 = v16; // 0x403462\n    bool v18 = false; // 0x403462\n    while (v15 == v16) {\n        // 0x403452\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40346c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40346e\n        v20 = result + 4;\n        g32 = v20;\n    }\n    // 0x403479\n    g52 = v20;\n    g35 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4034b0",
            "funcStartAddr": "4034b0",
            "funcEndAddr": "4035a2",
            "decompiledFuncCode": "int64_t function_4034b0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4034c4\n    int64_t result = (int64_t)v1; // 0x4034c4\n    if (result != a1) {\n        // 0x4034d1\n        return result;\n    }\n    int64_t v2 = function_406ea0(); // 0x4034e0\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x403596\n    if (v3 == 85) {\n        // 0x4034f0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x403588\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g14 : (int64_t)&g9;\n            return result2;\n        }\n        char v4 = *v1; // 0x40351e\n        int64_t result3 = v4 != 96 ? (int64_t)&g10 : (int64_t)&g13; // 0x40352b\n        // 0x4034d1\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x403588\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g14 : (int64_t)&g9;\n        return result2;\n    }\n    char v5 = *v1; // 0x40356d\n    int64_t result4 = v5 != 96 ? (int64_t)&g11 : (int64_t)&g12; // 0x40357a\n    // 0x4034d1\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4035b0",
            "funcStartAddr": "4035b0",
            "funcEndAddr": "403607",
            "decompiledFuncCode": "int64_t function_4035b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4035b0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x4035f8\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403607",
            "funcStartAddr": "403607",
            "funcEndAddr": "4047d1",
            "decompiledFuncCode": "int64_t function_403607(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x403651\n    int64_t v3 = 0; // 0x403651\n    int64_t v4; // 0x403607\n    int64_t v5; // 0x403607\n    int64_t v6; // 0x403607\n    int64_t v7; // 0x403607\n    int64_t v8; // 0x403607\n    int64_t v9; // 0x403607\n    int64_t v10; // 0x403607\n    int64_t v11; // 0x403607\n    int64_t v12; // 0x403607\n    int64_t v13; // 0x403607\n    int64_t v14; // 0x403607\n    int64_t v15; // 0x403607\n    int64_t v16; // 0x403607\n    int64_t v17; // 0x403607\n    int64_t v18; // 0x403607\n    int64_t result; // 0x403607\n    int64_t v19; // 0x403607\n    int32_t wc; // bp+132, 0x403607\n    int64_t ps; // bp+136, 0x403607\n    char v20; // 0x403bc0\n    int64_t v21; // 0x403bc0\n    int64_t v22; // 0x403f68\n    int64_t v23; // 0x403607\n    int64_t v24; // 0x403f87\n    int32_t v25; // 0x403607\n    while (true) {\n      lab_0x403658_2:\n        // 0x403658\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403607\n        int64_t v27; // 0x40368c\n        while (true) {\n          lab_0x403658:\n            // 0x403658\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x403663\n            if (v15 == -1) {\n                // 0x403665\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x403673\n            if (v28) {\n                // break (via goto) -> 0x403dd8\n                goto lab_0x403dd8;\n            }\n            // 0x40367c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g65 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x403c6b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4037b1;\n                    }\n                    // 0x40408d\n                    v26 = v5 + 1;\n                    goto lab_0x403658;\n                }\n                case 7: {\n                    goto lab_0x4037b1;\n                }\n                case 8: {\n                    goto lab_0x4037b1;\n                }\n                case 9: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4037b1;\n                }\n                case 12: {\n                    goto lab_0x4037b1;\n                }\n                case 13: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40377d;\n                }\n                case 36: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4037b1;\n                }\n                case 38: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4037b1;\n                }\n                case 44: {\n                    goto lab_0x4037b1;\n                }\n                case 45: {\n                    goto lab_0x4037b1;\n                }\n                case 46: {\n                    goto lab_0x4037b1;\n                }\n                case 47: {\n                    goto lab_0x4037b1;\n                }\n                case 48: {\n                    goto lab_0x4037b1;\n                }\n                case 49: {\n                    goto lab_0x4037b1;\n                }\n                case 50: {\n                    goto lab_0x4037b1;\n                }\n                case 51: {\n                    goto lab_0x4037b1;\n                }\n                case 52: {\n                    goto lab_0x4037b1;\n                }\n                case 53: {\n                    goto lab_0x4037b1;\n                }\n                case 54: {\n                    goto lab_0x4037b1;\n                }\n                case 55: {\n                    goto lab_0x4037b1;\n                }\n                case 56: {\n                    goto lab_0x4037b1;\n                }\n                case 57: {\n                    goto lab_0x4037b1;\n                }\n                case 58: {\n                    goto lab_0x4037b1;\n                }\n                case 59: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4037b1;\n                }\n                case 66: {\n                    goto lab_0x4037b1;\n                }\n                case 67: {\n                    goto lab_0x4037b1;\n                }\n                case 68: {\n                    goto lab_0x4037b1;\n                }\n                case 69: {\n                    goto lab_0x4037b1;\n                }\n                case 70: {\n                    goto lab_0x4037b1;\n                }\n                case 71: {\n                    goto lab_0x4037b1;\n                }\n                case 72: {\n                    goto lab_0x4037b1;\n                }\n                case 73: {\n                    goto lab_0x4037b1;\n                }\n                case 74: {\n                    goto lab_0x4037b1;\n                }\n                case 75: {\n                    goto lab_0x4037b1;\n                }\n                case 76: {\n                    goto lab_0x4037b1;\n                }\n                case 77: {\n                    goto lab_0x4037b1;\n                }\n                case 78: {\n                    goto lab_0x4037b1;\n                }\n                case 79: {\n                    goto lab_0x4037b1;\n                }\n                case 80: {\n                    goto lab_0x4037b1;\n                }\n                case 81: {\n                    goto lab_0x4037b1;\n                }\n                case 82: {\n                    goto lab_0x4037b1;\n                }\n                case 83: {\n                    goto lab_0x4037b1;\n                }\n                case 84: {\n                    goto lab_0x4037b1;\n                }\n                case 85: {\n                    goto lab_0x4037b1;\n                }\n                case 86: {\n                    goto lab_0x4037b1;\n                }\n                case 87: {\n                    goto lab_0x4037b1;\n                }\n                case 88: {\n                    goto lab_0x4037b1;\n                }\n                case 89: {\n                    goto lab_0x4037b1;\n                }\n                case 90: {\n                    goto lab_0x4037b1;\n                }\n                case 91: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4037b1;\n                }\n                case 94: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4037b1;\n                }\n                case 96: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4037b1;\n                }\n                case 98: {\n                    goto lab_0x4037b1;\n                }\n                case 99: {\n                    goto lab_0x4037b1;\n                }\n                case 100: {\n                    goto lab_0x4037b1;\n                }\n                case 101: {\n                    goto lab_0x4037b1;\n                }\n                case 102: {\n                    goto lab_0x4037b1;\n                }\n                case 103: {\n                    goto lab_0x4037b1;\n                }\n                case 104: {\n                    goto lab_0x4037b1;\n                }\n                case 105: {\n                    goto lab_0x4037b1;\n                }\n                case 106: {\n                    goto lab_0x4037b1;\n                }\n                case 107: {\n                    goto lab_0x4037b1;\n                }\n                case 108: {\n                    goto lab_0x4037b1;\n                }\n                case 109: {\n                    goto lab_0x4037b1;\n                }\n                case 110: {\n                    goto lab_0x4037b1;\n                }\n                case 111: {\n                    goto lab_0x4037b1;\n                }\n                case 112: {\n                    goto lab_0x4037b1;\n                }\n                case 113: {\n                    goto lab_0x4037b1;\n                }\n                case 114: {\n                    goto lab_0x4037b1;\n                }\n                case 115: {\n                    goto lab_0x4037b1;\n                }\n                case 116: {\n                    goto lab_0x4037b1;\n                }\n                case 117: {\n                    goto lab_0x4037b1;\n                }\n                case 118: {\n                    goto lab_0x4037b1;\n                }\n                case 119: {\n                    goto lab_0x4037b1;\n                }\n                case 120: {\n                    goto lab_0x4037b1;\n                }\n                case 121: {\n                    goto lab_0x4037b1;\n                }\n                case 122: {\n                    goto lab_0x4037b1;\n                }\n                case 123: {\n                    goto lab_0x403755;\n                }\n                case 124: {\n                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x403755;\n                }\n                case 126: {\n                    goto lab_0x40377d;\n                }\n                default: {\n                    goto lab_0x403b55;\n                }\n            }\n        }\n      lab_0x403b55:\n        if (v23 != 1) {\n            // 0x403ec0\n            ps = 0;\n            int64_t len = v15; // 0x403ed0\n            if (v15 == -1) {\n                // 0x403ed2\n                len = strlen((char *)str);\n            }\n            // 0x403efe\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x403f5f:\n                // 0x403f5f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403f64\n                int64_t v30 = v29 + str;\n                v24 = function_406dc0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x4044da_2;\n                    }\n                    case -1: {\n                        goto lab_0x4044da_2;\n                    }\n                    case -2: {\n                        // 0x4045bd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4045f7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4045fa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404607\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404600\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x4044da\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x4044da_2;\n                    }\n                    case 1: {\n                        goto lab_0x403f30;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x403fdc\n                        char v34 = *(char *)v33; // 0x403fed\n                        unsigned char v35; // 0x403607\n                        if (v34 < 125) {\n                            // 0x403ff8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x40400f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403fe0\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x403fed\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403ff8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x40400f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403fe0\n                            v33++;\n                        }\n                        goto lab_0x403f30;\n                    }\n                }\n            }\n            goto lab_0x4044da_2;\n        } else {\n            // 0x403ba4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4037b1;\n        }\n    }\n  lab_0x403dd8:\n    // 0x403dd8\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x4046da\n        if (v8 > result) {\n            // 0x4046e3\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403a07\n        return result;\n    }\n    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4037b1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4037c0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4039ca_2;\n        }\n    }\n    int64_t v39 = result; // 0x4038c1\n    char v40 = v20; // 0x4038c1\n    int64_t v41 = v38; // 0x4038c1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4038c1\n    int64_t v43 = v36; // 0x4038c1\n    goto lab_0x40383d;\n  lab_0x4039ca_2:\n    // 0x403a07\n    return function_4035b0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4044da_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4037b1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x4040ae\n        int64_t v50 = v5 + 1; // 0x404191\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x404198\n        char v52 = v20; // 0x404198\n        int64_t v53 = result; // 0x404198\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x404161\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x404165\n            int64_t v56 = v54 + 1; // 0x40416a\n            int64_t v57 = v51 + 1; // 0x404191\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x40415c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x404161\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x404165\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40383d;\n    }\n  lab_0x403f30:\n    // 0x403f30\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x403f4f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403f52\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x4044da\n        goto lab_0x4044da_2;\n    }\n    goto lab_0x403f5f;\n  lab_0x40377d:\n    // 0x40377d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4039ca_2;\n    }\n    goto lab_0x4037b1;\n  lab_0x403755:;\n    bool v60 = v15 == 1; // 0x403760\n    if (v15 == -1) {\n        // 0x403762\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40376e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4037b1;\n    } else {\n        goto lab_0x40377d;\n    }\n  lab_0x40383d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x403842\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x403846\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x403658_2;\n}\n"
        },
        {
            "funcName": "function_4047e0",
            "funcStartAddr": "4047e0",
            "funcEndAddr": "40497e",
            "decompiledFuncCode": "int64_t function_4047e0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x4047e2\n    int32_t * v3 = __errno_location(); // 0x4047fc\n    int64_t v4 = (int64_t)g25; // 0x404801\n    int32_t v5 = *v3; // 0x40480b\n    int64_t v6 = v4; // 0x404821\n    if (v2 >= (int64_t)*(int32_t *)&g28) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x404979\n            function_405840(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x404830\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x404837\n        int64_t v9; // 0x4047e0\n        if (g25 == &g26) {\n            int64_t v10 = function_405650(0, v8); // 0x40495a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g26); // 0x40495f\n            *(int64_t *)&g25 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_405650(v4, v8); // 0x40484b\n            *(int64_t *)&g25 = v12;\n            v9 = v12;\n        }\n        // 0x40485a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g28; // 0x40485a\n        int32_t v14 = v7; // 0x404861\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g28 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x404891\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40489b\n    int64_t * v17 = (int64_t *)v15; // 0x40489e\n    uint64_t v18 = *v17; // 0x40489e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4048a1\n    int64_t result = *v19; // 0x4048a1\n    int64_t v20; // 0x4047e0\n    uint64_t v21 = function_4035b0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4048c4\n    if (v18 > v21) {\n        // 0x40493b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x4048d7\n    *v17 = v22;\n    if (result != (int64_t)&g53) {\n        // 0x4048e7\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_4055f0(v22); // 0x404901\n    *v19 = result2;\n    int64_t v23; // 0x4047e0\n    function_4035b0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40493b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404980",
            "funcStartAddr": "404980",
            "funcEndAddr": "4049b4",
            "decompiledFuncCode": "int64_t function_404980(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x404987\n    int64_t result = function_4057f0(a1 == 0 ? (int64_t)&g54 : a1, 56); // 0x4049a6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4049c0",
            "funcStartAddr": "4049c0",
            "funcEndAddr": "4049cf",
            "decompiledFuncCode": "int64_t function_4049c0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g54 : a1); // 0x4049cc\n    return result;\n}\n"
        },
        {
            "funcName": "function_4049d0",
            "funcStartAddr": "4049d0",
            "funcEndAddr": "4049df",
            "decompiledFuncCode": "int64_t function_4049d0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g54 : a1; // 0x4049d8\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g54;\n}\n"
        },
        {
            "funcName": "function_4049e0",
            "funcStartAddr": "4049e0",
            "funcEndAddr": "404a13",
            "decompiledFuncCode": "int64_t function_4049e0(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g54 + 8 : a1 + 8; // 0x4049f9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4049fe\n    uint32_t v3 = *v2; // 0x4049fe\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404a02\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404a20",
            "funcStartAddr": "404a20",
            "funcEndAddr": "404a33",
            "decompiledFuncCode": "int64_t function_404a20(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g54 + 4 : a1 + 4); // 0x404a2c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_404a40",
            "funcStartAddr": "404a40",
            "funcEndAddr": "404a6b",
            "decompiledFuncCode": "int64_t function_404a40(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g54 : a1; // 0x404a48\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x404a65\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404a5c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g54;\n}\n"
        },
        {
            "funcName": "function_404a70",
            "funcStartAddr": "404a70",
            "funcEndAddr": "404ae2",
            "decompiledFuncCode": "int64_t function_404a70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g54 : a5; // 0x404a92\n    int32_t * v2 = __errno_location(); // 0x404a9b\n    uint32_t v3 = *(int32_t *)v1; // 0x404abb\n    int64_t result = function_4035b0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x404aca\n    return result;\n}\n"
        },
        {
            "funcName": "function_404af0",
            "funcStartAddr": "404af0",
            "funcEndAddr": "404bd1",
            "decompiledFuncCode": "int64_t function_404af0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g54 : a4; // 0x404b12\n    int32_t * v2 = __errno_location(); // 0x404b18\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404b37\n    int32_t * v4 = (int32_t *)v1; // 0x404b3a\n    int64_t v5 = function_4035b0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x404b55\n    int64_t v6 = v5 + 1; // 0x404b5a\n    int64_t result = function_4055f0(v6); // 0x404b6f\n    function_4035b0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404bb4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x404bbd\n    return result;\n}\n"
        },
        {
            "funcName": "function_404be0",
            "funcStartAddr": "404be0",
            "funcEndAddr": "404bea",
            "decompiledFuncCode": "int64_t function_404be0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404be0\n    return function_404af0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404bf0",
            "funcStartAddr": "404bf0",
            "funcEndAddr": "404c85",
            "decompiledFuncCode": "int64_t function_404bf0(void) {\n    uint32_t v1 = *(int32_t *)&g28; // 0x404bf0\n    int64_t v2 = v1; // 0x404bf0\n    int64_t v3 = v2; // 0x404c04\n    if (v1 >= 2) {\n        int64_t v4 = &g28;\n        int64_t v5 = v4 + 16; // 0x404c23\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g66;\n        while (v5 != (int64_t)g25 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404c20\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g66;\n        }\n    }\n    int64_t v6 = v3; // 0x404c3d\n    if (g26 != 0x60c320) {\n        // 0x404c3f\n        free((int64_t *)g26);\n        g26 = 256;\n        *(int64_t *)&g27 = (int64_t)&g53;\n        v6 = &g66;\n    }\n    int64_t result = v6; // 0x404c61\n    if (g25 != &g26) {\n        // 0x404c63\n        free(g25);\n        *(int64_t *)&g25 = (int64_t)&g26;\n        result = &g66;\n    }\n    // 0x404c76\n    *(int32_t *)&g28 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_404c90",
            "funcStartAddr": "404c90",
            "funcEndAddr": "404ca1",
            "decompiledFuncCode": "int64_t function_404c90(void) {\n    // 0x404c90\n    int64_t v1; // 0x404c90\n    return function_4047e0(v1, v1, -1, (int64_t *)&g54);\n}\n"
        },
        {
            "funcName": "function_404cb0",
            "funcStartAddr": "404cb0",
            "funcEndAddr": "404cba",
            "decompiledFuncCode": "int64_t function_404cb0(void) {\n    // 0x404cb0\n    int64_t v1; // 0x404cb0\n    return function_4047e0(v1, v1, v1, (int64_t *)&g54);\n}\n"
        },
        {
            "funcName": "function_404cc0",
            "funcStartAddr": "404cc0",
            "funcEndAddr": "404cd6",
            "decompiledFuncCode": "int64_t function_404cc0(int64_t a1) {\n    // 0x404cc0\n    return function_4047e0(0, a1, -1, (int64_t *)&g54);\n}\n"
        },
        {
            "funcName": "function_404ce0",
            "funcStartAddr": "404ce0",
            "funcEndAddr": "404cf2",
            "decompiledFuncCode": "int64_t function_404ce0(int64_t a1, int64_t a2) {\n    // 0x404ce0\n    return function_4047e0(0, a1, a2, (int64_t *)&g54);\n}\n"
        },
        {
            "funcName": "function_404d00",
            "funcStartAddr": "404d00",
            "funcEndAddr": "404d68",
            "decompiledFuncCode": "int64_t function_404d00(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404d10\n    return function_4047e0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404d70",
            "funcStartAddr": "404d70",
            "funcEndAddr": "404dd4",
            "decompiledFuncCode": "int64_t function_404d70(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404d80\n    return function_4047e0((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404de0",
            "funcStartAddr": "404de0",
            "funcEndAddr": "404dec",
            "decompiledFuncCode": "int64_t function_404de0(int64_t a1, int64_t a2) {\n    // 0x404de0\n    return function_404d00(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404df0",
            "funcStartAddr": "404df0",
            "funcEndAddr": "404dff",
            "decompiledFuncCode": "int64_t function_404df0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404df0\n    return function_404d70(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404e00",
            "funcStartAddr": "404e00",
            "funcEndAddr": "404e70",
            "decompiledFuncCode": "int64_t function_404e00(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g54); // 0x404e0d\n    int128_t v2 = __asm_movdqa(g55); // 0x404e15\n    int128_t v3 = __asm_movdqa(g56); // 0x404e1d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404e32\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404e48\n    uint32_t v6 = *v5; // 0x404e48\n    uint32_t v7 = (int32_t)a3 % 32; // 0x404e4d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_4047e0(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404e70",
            "funcStartAddr": "404e70",
            "funcEndAddr": "404e7d",
            "decompiledFuncCode": "int64_t function_404e70(int64_t a1, int64_t a2) {\n    // 0x404e70\n    return function_404e00(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404e80",
            "funcStartAddr": "404e80",
            "funcEndAddr": "404e91",
            "decompiledFuncCode": "int64_t function_404e80(int64_t a1) {\n    // 0x404e80\n    return function_404e00(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404ea0",
            "funcStartAddr": "404ea0",
            "funcEndAddr": "404eaa",
            "decompiledFuncCode": "int64_t function_404ea0(void) {\n    // 0x404ea0\n    int64_t v1; // 0x404ea0\n    return function_404e00(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404eb0",
            "funcStartAddr": "404eb0",
            "funcEndAddr": "404f1e",
            "decompiledFuncCode": "int64_t function_404eb0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404eca\n    return function_4047e0((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404f20",
            "funcStartAddr": "404f20",
            "funcEndAddr": "404f8c",
            "decompiledFuncCode": "int64_t function_404f20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g54); // 0x404f27\n    int128_t v2 = __asm_movdqa(g55); // 0x404f2f\n    int128_t v3 = __asm_movdqa(g56); // 0x404f37\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404f59\n    if (a2 == 0 || a3 == 0) {\n        // 0x404f87\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404f6a\n    return function_4047e0(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404f90",
            "funcStartAddr": "404f90",
            "funcEndAddr": "404f99",
            "decompiledFuncCode": "int64_t function_404f90(void) {\n    // 0x404f90\n    int64_t v1; // 0x404f90\n    return function_404f20(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404fa0",
            "funcStartAddr": "404fa0",
            "funcEndAddr": "404fb7",
            "decompiledFuncCode": "int64_t function_404fa0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404fa0\n    return function_404f20(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404fc0",
            "funcStartAddr": "404fc0",
            "funcEndAddr": "404fd3",
            "decompiledFuncCode": "int64_t function_404fc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404fc0\n    return function_404f20(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404fe0",
            "funcStartAddr": "404fe0",
            "funcEndAddr": "404fea",
            "decompiledFuncCode": "int64_t function_404fe0(void) {\n    // 0x404fe0\n    int64_t v1; // 0x404fe0\n    return function_4047e0(v1, v1, v1, &g24);\n}\n"
        },
        {
            "funcName": "function_404ff0",
            "funcStartAddr": "404ff0",
            "funcEndAddr": "405002",
            "decompiledFuncCode": "int64_t function_404ff0(int64_t a1, int64_t a2) {\n    // 0x404ff0\n    return function_4047e0(0, a1, a2, &g24);\n}\n"
        },
        {
            "funcName": "function_405010",
            "funcStartAddr": "405010",
            "funcEndAddr": "405021",
            "decompiledFuncCode": "int64_t function_405010(int64_t a1, int64_t a2) {\n    // 0x405010\n    return function_4047e0(a1, a2, -1, &g24);\n}\n"
        },
        {
            "funcName": "function_405030",
            "funcStartAddr": "405030",
            "funcEndAddr": "405046",
            "decompiledFuncCode": "int64_t function_405030(int64_t a1) {\n    // 0x405030\n    return function_4047e0(0, a1, -1, &g24);\n}\n"
        },
        {
            "funcName": "function_405050",
            "funcStartAddr": "405050",
            "funcEndAddr": "40542d",
            "decompiledFuncCode": "int64_t function_405050(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x4050e8\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40506c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405086\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x4050cb\n    if (a6 < 10) {\n        // 0x4050da\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x4051d2\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405430",
            "funcStartAddr": "405430",
            "funcEndAddr": "405450",
            "decompiledFuncCode": "int64_t function_405430(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405430\n    if (a5 == 0) {\n        // 0x40544b\n        return function_405050(a1, a2, a3, a4, a5, 0, (int64_t)&g66);\n    }\n    int64_t v1 = 0; // 0x405437\n    v1++;\n    int64_t v2 = v1; // 0x405449\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405440\n        v1++;\n        v2 = v1;\n    }\n    // 0x40544b\n    return function_405050(a1, a2, a3, a4, a5, v2, (int64_t)&g66);\n}\n"
        },
        {
            "funcName": "function_405450",
            "funcStartAddr": "405450",
            "funcEndAddr": "4054b0",
            "decompiledFuncCode": "int64_t function_405450(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x405450\n    int64_t v3 = &v2; // 0x405450\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x405483\n    int64_t v6; // 0x40546d\n    int64_t * v7; // 0x40548b\n    int64_t v8; // 0x40548b\n    int64_t v9; // 0x405497\n    if (v5 < 48) {\n        // 0x405460\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4054a3\n            break;\n        }\n    } else {\n        // 0x40548b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4054a3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x405481\n    while (v4 != 9) {\n        // 0x405479\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x405460\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4054a3\n                break;\n            }\n        } else {\n            // 0x40548b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4054a3\n                break;\n            }\n        }\n        // 0x405479\n        v10 = 10;\n    }\n    // 0x4054a3\n    return function_405050(a1, a2, a3, a4, v3, v10, (int64_t)&g66);\n}\n"
        },
        {
            "funcName": "function_4054b0",
            "funcStartAddr": "4054b0",
            "funcEndAddr": "40556c",
            "decompiledFuncCode": "int64_t function_4054b0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x4054b0\n    int64_t v1; // bp-168, 0x4054b0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4054b0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4054b0\n    int64_t v8; // 0x4054b0\n    int64_t v9; // bp-56, 0x4054b0\n    int64_t v10; // 0x405515\n    int64_t v11; // 0x405539\n    if ((int32_t)v6 < 48) {\n        // 0x405500\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x405550\n            break;\n        }\n    } else {\n        // 0x405532\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x405550\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40552a\n    int64_t v13 = 10; // 0x40552a\n    while (v5 != 9) {\n        // 0x40552c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405500\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x405550\n                break;\n            }\n        } else {\n            // 0x405532\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x405550\n                break;\n            }\n        }\n        // 0x405522\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x405550\n    int64_t v14; // bp-136, 0x4054b0\n    int64_t result = function_405050(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g66); // 0x40555f\n    return result;\n}\n"
        },
        {
            "funcName": "function_405570",
            "funcStartAddr": "405570",
            "funcEndAddr": "4055e4",
            "decompiledFuncCode": "int64_t function_405570(int64_t a1) {\n    // 0x405570\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x4055d3\n    return fputs_unlocked(v1, g33);\n}\n"
        },
        {
            "funcName": "function_4055f0",
            "funcStartAddr": "4055f0",
            "funcEndAddr": "40560a",
            "decompiledFuncCode": "int64_t function_4055f0(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x4055f4\n    if (size != 0 != (mem == NULL)) {\n        // 0x405603\n        return (int64_t)mem;\n    }\n    // 0x405605\n    function_405840(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405610",
            "funcStartAddr": "405610",
            "funcEndAddr": "405631",
            "decompiledFuncCode": "int64_t function_405610(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405613\n    int64_t v2 = v1; // 0x405613\n    if (v2 < 0) {\n        // 0x40562b\n        function_405840(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405629\n        return function_4055f0(v2);\n    }\n    // 0x40562b\n    function_405840(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405640",
            "funcStartAddr": "405640",
            "funcEndAddr": "405642",
            "decompiledFuncCode": "int64_t function_405640(void) {\n    // 0x405640\n    int64_t v1; // 0x405640\n    return function_4055f0(v1);\n}\n"
        },
        {
            "funcName": "function_405650",
            "funcStartAddr": "405650",
            "funcEndAddr": "405686",
            "decompiledFuncCode": "int64_t function_405650(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x405678\n        free(v1);\n        return (int32_t)&g66 ^ (int32_t)&g66;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x405661\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x405670\n        return (int64_t)mem;\n    }\n    // 0x405681\n    function_405840(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405690",
            "funcStartAddr": "405690",
            "funcEndAddr": "4056b1",
            "decompiledFuncCode": "int64_t function_405690(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x405693\n    int64_t v2 = v1; // 0x405693\n    if (v2 < 0) {\n        // 0x4056ab\n        function_405840(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4056a9\n        return function_405650(a1, v2);\n    }\n    // 0x4056ab\n    function_405840(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4056c0",
            "funcStartAddr": "4056c0",
            "funcEndAddr": "405746",
            "decompiledFuncCode": "int64_t function_4056c0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40571b\n            function_405840(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405650(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405703\n    if (a2 == 0) {\n        // 0x405728\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405708\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40571b\n        function_405840(a1);\n        // UNREACHABLE\n    }\n    // 0x4056ea\n    *(int64_t *)a2 = v2;\n    return function_405650(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_405750",
            "funcStartAddr": "405750",
            "funcEndAddr": "4057a0",
            "decompiledFuncCode": "int64_t function_405750(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x405750\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40579a\n            function_405840(a1);\n            // UNREACHABLE\n        }\n        // 0x405772\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_405650(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x405785\n        *(int64_t *)a2 = 128;\n        return function_405650(0, 128);\n    }\n    // 0x405798\n    if (a2 < 0) {\n        // 0x40579a\n        function_405840(a1);\n        // UNREACHABLE\n    }\n    // 0x405772\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_405650(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4057a0",
            "funcStartAddr": "4057a0",
            "funcEndAddr": "4057b7",
            "decompiledFuncCode": "int64_t function_4057a0(int64_t a1, int64_t a2) {\n    // 0x4057a0\n    return (int64_t)memset((int64_t *)function_4055f0(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4057c0",
            "funcStartAddr": "4057c0",
            "funcEndAddr": "4057ee",
            "decompiledFuncCode": "int64_t function_4057c0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4057c7\n    if ((int64_t)v1 < 0) {\n        // 0x4057e9\n        function_405840(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x4057e9\n        function_405840(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x4057da\n    if (mem != NULL) {\n        // 0x4057e4\n        return (int64_t)mem;\n    }\n    // 0x4057e9\n    function_405840(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4057f0",
            "funcStartAddr": "4057f0",
            "funcEndAddr": "405818",
            "decompiledFuncCode": "int64_t function_4057f0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_4055f0(a2); // 0x4057ff\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405820",
            "funcStartAddr": "405820",
            "funcEndAddr": "405833",
            "decompiledFuncCode": "int64_t function_405820(int64_t str) {\n    // 0x405820\n    return function_4057f0(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405840",
            "funcStartAddr": "405840",
            "funcEndAddr": "405871",
            "decompiledFuncCode": "int64_t function_405840(int64_t a1) {\n    // 0x405840\n    error(g23, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405880",
            "funcStartAddr": "405880",
            "funcEndAddr": "405934",
            "decompiledFuncCode": "int64_t function_405880(int64_t err_num, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x405880\n    error(0, (int32_t)err_num, dcgettext(NULL, \"string comparison failed\", 5));\n    error(0, (int32_t)\"Set LC_ALL='C' to work around the problem.\" ^ (int32_t)\"Set LC_ALL='C' to work around the problem.\", dcgettext(NULL, \"Set LC_ALL='C' to work around the problem.\", 5));\n    function_404d70(1, 8, a4, a5);\n    function_404d70(0, 8, a2, a3);\n    error(g23, (int32_t)\"The strings compared were %s and %s.\" ^ (int32_t)\"The strings compared were %s and %s.\", dcgettext(NULL, \"The strings compared were %s and %s.\", 5));\n    return &g66;\n}\n"
        },
        {
            "funcName": "function_405940",
            "funcStartAddr": "405940",
            "funcEndAddr": "405995",
            "decompiledFuncCode": "int64_t function_405940(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = function_4074d0(a1, a2, a3, a4); // 0x405954\n    __errno_location();\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4059a0",
            "funcStartAddr": "4059a0",
            "funcEndAddr": "4059f7",
            "decompiledFuncCode": "int64_t function_4059a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = function_407580(a1, a2, a3, a4); // 0x4059b4\n    __errno_location();\n    return v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405a00",
            "funcStartAddr": "405a00",
            "funcEndAddr": "405e30",
            "decompiledFuncCode": "int64_t function_405a00(int64_t str, int32_t a2, int64_t a3, int64_t * a4, int64_t * str2, int64_t a6) {\n    uint32_t base = (int32_t)a3; // 0x405a0e\n    if (base >= 37) {\n        // 0x405e0b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoul\");\n        return &g66;\n    }\n    char c = str;\n    int32_t * v1 = __errno_location(); // 0x405a32\n    *v1 = 0;\n    int64_t v2 = (int64_t)*__ctype_b_loc() + 1; // 0x405a62\n    int64_t v3 = str; // 0x405a67\n    char v4 = c; // 0x405a67\n    if ((*(char *)(v2 + (2 * str & 510)) & 32) != 0) {\n        v3++;\n        unsigned char v5 = *(char *)v3; // 0x405a5c\n        v4 = v5;\n        while ((*(char *)(2 * (int64_t)v5 + v2) & 32) != 0) {\n            // 0x405a58\n            v3++;\n            v5 = *(char *)v3;\n            v4 = v5;\n        }\n    }\n    // 0x405a69\n    if (v4 == 45) {\n        // 0x405aa3\n        return 4;\n    }\n    // 0x405a6e\n    int64_t v6; // bp-64, 0x405a00\n    int64_t endptr = a2 == 0 ? (int64_t)&v6 : (int64_t)a2; // 0x405a2e\n    int32_t str_as_ul = strtoul((char *)str, (char **)endptr, base); // 0x405a74\n    int64_t * v7 = (int64_t *)endptr; // 0x405a79\n    int64_t v8 = *v7; // 0x405a79\n    char v9; // 0x405a00\n    int64_t v10; // 0x405a00\n    int64_t v11; // 0x405a00\n    int64_t v12; // 0x405a00\n    int64_t v13; // 0x405a00\n    int64_t v14; // 0x405a00\n    int64_t v15; // 0x405a00\n    if (v8 == str) {\n        // 0x405ad0\n        if (c == 0 || str2 == NULL) {\n            // 0x405aa3\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str2, (int32_t)c); // 0x405af1\n        v14 = 1;\n        v11 = 0;\n        v9 = c;\n        if (found_char_pos == NULL) {\n            // 0x405aa3\n            return 4;\n        }\n        goto lab_0x405aff;\n    } else {\n        int32_t v16 = *v1; // 0x405a84\n        int64_t v17 = 0; // 0x405a8a\n        if (v16 != 0) {\n            // 0x405ab8\n            v17 = 1;\n            if (v16 != 34) {\n                // 0x405aa3\n                return 4;\n            }\n        }\n        int64_t v18 = str_as_ul; // 0x405a74\n        v13 = v18;\n        v10 = v17;\n        if (str2 == NULL) {\n            goto lab_0x405aa0;\n        } else {\n            char c2 = *(char *)v8; // 0x405a93\n            v13 = v18;\n            v10 = v17;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str2, (int32_t)c2); // 0x405bf3\n                v14 = v18;\n                v11 = v17;\n                v9 = c2;\n                v15 = v18;\n                v12 = v17;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x405aff;\n                } else {\n                    goto lab_0x405c05;\n                }\n            } else {\n                goto lab_0x405aa0;\n            }\n        }\n    }\n  lab_0x405aff:;\n    unsigned char v19 = v9 - 69;\n    int64_t v20 = 1024; // 0x405b07\n    int64_t v21 = 1; // 0x405b07\n    int64_t v22; // 0x405a00\n    int64_t v23; // 0x405a00\n    int64_t v24; // 0x405a00\n    int64_t v25; // 0x405a00\n    int64_t v26; // 0x405a00\n    int64_t v27; // 0x405a00\n    int64_t v28; // 0x405a00\n    int64_t v29; // 0x405a00\n    int64_t v30; // 0x405a00\n    int64_t v31; // 0x405a00\n    int64_t v32; // 0x405a00\n    int64_t v33; // 0x405a00\n    int64_t v34; // 0x405a00\n    int64_t v35; // 0x405a00\n    int64_t v36; // 0x405a00\n    int64_t v37; // 0x405a00\n    int64_t v38; // 0x405a00\n    int64_t v39; // 0x405a00\n    int64_t v40; // 0x405a00\n    int64_t v41; // 0x405a00\n    if (v19 < 48) {\n        // 0x405b09\n        v20 = 1024;\n        v21 = 1;\n        if ((1 << (int64_t)((v9 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x405b6a;\n        } else {\n            // 0x405b1c\n            v20 = 1024;\n            v21 = 1;\n            if (strchr((char *)str2, 48) == NULL) {\n                goto lab_0x405b6a;\n            } else {\n                // 0x405b38\n                v20 = 1000;\n                v21 = 2;\n                switch (*(char *)(v8 + 1)) {\n                    case 68: {\n                        goto lab_0x405b6a;\n                    }\n                    case 105: {\n                        char v42 = *(char *)(v8 + 2); // 0x405d99\n                        v20 = 1024;\n                        v21 = (v42 == 66 ? 2 : 1) + (int64_t)(v42 == 66);\n                        goto lab_0x405b6a;\n                    }\n                    default: {\n                        // 0x405b4d\n                        g63 = v19;\n                        v20 = 1000;\n                        v21 = 2;\n                        v24 = 1024;\n                        v36 = 1;\n                        v23 = v14;\n                        v22 = v11;\n                        v37 = 1;\n                        v25 = 1024;\n                        v38 = 1;\n                        v15 = v14;\n                        v12 = v11;\n                        v39 = 1;\n                        v26 = 1024;\n                        v40 = 1;\n                        v27 = 1024;\n                        v41 = 1;\n                        v28 = 1024;\n                        v32 = 1;\n                        v29 = 1024;\n                        v33 = 1;\n                        v30 = 1024;\n                        v34 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        switch (v9) {\n                            case 69: {\n                                goto lab_0x405d0b;\n                            }\n                            case 70: {\n                                goto lab_0x405c05;\n                            }\n                            case 71: {\n                                goto lab_0x405d43;\n                            }\n                            case 72: {\n                                goto lab_0x405c05;\n                            }\n                            case 73: {\n                                goto lab_0x405c05;\n                            }\n                            case 74: {\n                                goto lab_0x405c05;\n                            }\n                            case 75: {\n                                goto lab_0x405bcc;\n                            }\n                            case 76: {\n                                goto lab_0x405c05;\n                            }\n                            case 77: {\n                                goto lab_0x405b8e;\n                            }\n                            case 78: {\n                                goto lab_0x405c05;\n                            }\n                            case 79: {\n                                goto lab_0x405c05;\n                            }\n                            case 80: {\n                                goto lab_0x405cd8;\n                            }\n                            case 81: {\n                                goto lab_0x405c05;\n                            }\n                            case 82: {\n                                goto lab_0x405c05;\n                            }\n                            case 83: {\n                                goto lab_0x405c05;\n                            }\n                            case 84: {\n                                goto lab_0x405ca8;\n                            }\n                            case 85: {\n                                goto lab_0x405c05;\n                            }\n                            case 86: {\n                                goto lab_0x405c05;\n                            }\n                            case 87: {\n                                goto lab_0x405c05;\n                            }\n                            case 88: {\n                                goto lab_0x405c05;\n                            }\n                            case 89: {\n                                goto lab_0x405c76;\n                            }\n                            case 90: {\n                                goto lab_0x405c3b;\n                            }\n                            case 91: {\n                                goto lab_0x405c05;\n                            }\n                            case 92: {\n                                goto lab_0x405c05;\n                            }\n                            case 93: {\n                                goto lab_0x405c05;\n                            }\n                            case 94: {\n                                goto lab_0x405c05;\n                            }\n                            case 95: {\n                                goto lab_0x405c05;\n                            }\n                            case 96: {\n                                goto lab_0x405c05;\n                            }\n                            case 97: {\n                                goto lab_0x405c05;\n                            }\n                            case 98: {\n                                goto lab_0x405c1f;\n                            }\n                            case 99: {\n                                goto lab_0x405ba8;\n                            }\n                            case 100: {\n                                goto lab_0x405c05;\n                            }\n                            case 101: {\n                                goto lab_0x405c05;\n                            }\n                            case 102: {\n                                goto lab_0x405c05;\n                            }\n                            case 103: {\n                                goto lab_0x405d43;\n                            }\n                            case 104: {\n                                goto lab_0x405c05;\n                            }\n                            case 105: {\n                                goto lab_0x405c05;\n                            }\n                            case 106: {\n                                goto lab_0x405c05;\n                            }\n                            case 107: {\n                                goto lab_0x405bcc;\n                            }\n                            case 108: {\n                                goto lab_0x405c05;\n                            }\n                            case 109: {\n                                goto lab_0x405b8e;\n                            }\n                            case 110: {\n                                goto lab_0x405c05;\n                            }\n                            case 111: {\n                                goto lab_0x405c05;\n                            }\n                            case 112: {\n                                goto lab_0x405c05;\n                            }\n                            case 113: {\n                                goto lab_0x405c05;\n                            }\n                            case 114: {\n                                goto lab_0x405c05;\n                            }\n                            case 115: {\n                                goto lab_0x405c05;\n                            }\n                            case 116: {\n                                goto lab_0x405ca8;\n                            }\n                            default: {\n                                goto lab_0x405b6a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x405b6a;\n    }\n  lab_0x405aa0:\n    // 0x405aa0\n    *a4 = v13;\n    // 0x405aa3\n    return v10 & 0xffffffff;\n  lab_0x405b6a:\n    // 0x405b6a\n    g64 = v9 - 66;\n    v24 = v20;\n    v36 = v21;\n    v23 = v14;\n    v22 = v11;\n    v37 = v21;\n    v25 = v20;\n    v38 = v21;\n    v15 = v14;\n    v12 = v11;\n    v39 = v21;\n    v26 = v20;\n    v40 = v21;\n    v27 = v20;\n    v41 = v21;\n    v28 = v20;\n    v32 = v21;\n    v29 = v20;\n    v33 = v21;\n    v30 = v20;\n    v34 = v21;\n    v31 = v20;\n    v35 = v21;\n    int64_t v43; // 0x405a00\n    switch (v9) {\n        case 66: {\n            // 0x405d64\n            v43 = v21;\n            if (v14 >= 0x40000000000000) {\n                goto lab_0x405bd7;\n            } else {\n                // 0x405d71\n                v23 = 1024 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x405ba8;\n            }\n        }\n        case 69: {\n            goto lab_0x405d0b;\n        }\n        case 71: {\n            goto lab_0x405d43;\n        }\n        case 75: {\n            goto lab_0x405bcc;\n        }\n        case 77: {\n            goto lab_0x405b8e;\n        }\n        case 80: {\n            goto lab_0x405cd8;\n        }\n        case 84: {\n            goto lab_0x405ca8;\n        }\n        case 89: {\n            goto lab_0x405c76;\n        }\n        case 90: {\n            goto lab_0x405c3b;\n        }\n        case 98: {\n            goto lab_0x405c1f;\n        }\n        case 99: {\n            goto lab_0x405ba8;\n        }\n        case 103: {\n            goto lab_0x405d43;\n        }\n        case 107: {\n            goto lab_0x405bcc;\n        }\n        case 109: {\n            goto lab_0x405b8e;\n        }\n        case 116: {\n            goto lab_0x405ca8;\n        }\n        case 119: {\n            // 0x405c10\n            v43 = v21;\n            if (v14 < 0) {\n                goto lab_0x405bd7;\n            } else {\n                // 0x405c15\n                v23 = 2 * v14;\n                v22 = v11;\n                v37 = v21;\n                goto lab_0x405ba8;\n            }\n        }\n        default: {\n            goto lab_0x405c05;\n        }\n    }\n  lab_0x405d0b:;\n    uint128_t v44 = (int128_t)v14 * (int128_t)v30; // 0x405d23\n    int64_t v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n    int64_t v46 = v44 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v47 = 5; // 0x405d2f\n    int64_t v48 = v45; // 0x405d32\n    int64_t v49 = v34; // 0x405d32\n    int64_t v50 = v46; // 0x405d32\n    int32_t v51 = v47; // 0x405d32\n    int64_t v52 = v46; // 0x405d32\n    while (v47 != 0) {\n        // 0x405d20\n        v44 = (int128_t)v45 * (int128_t)v30;\n        v45 = (int64_t)(v44 < 0xffffffffffffffff ? v44 : 0xffffffffffffffff);\n        v46 = v44 > 0xffffffffffffffff ? 1 : v52;\n        v47 = v51 - 1;\n        v48 = v45;\n        v49 = v34;\n        v50 = v46;\n        v51 = v47;\n        v52 = v46;\n    }\n    goto lab_0x405c64;\n  lab_0x405d43:\n    // 0x405d43\n    v23 = -1;\n    v22 = 1;\n    v37 = v35;\n    if ((int128_t)v31 * (int128_t)v14 <= 0xffffffffffffffff) {\n        // 0x405d4e\n        int128_t v53; // 0x405d49\n        uint128_t v54; // 0x405d49\n        uint128_t v55 = (v54 & 0xffffffffffffffff) * v53; // 0x405d4e\n        v23 = -1;\n        v22 = 1;\n        int64_t v56; // 0x405a00\n        v37 = v56;\n        if (v55 <= 0xffffffffffffffff) {\n            uint128_t v57 = (v55 & 0xffffffffffffffff) * v53; // 0x405d53\n            v23 = -1;\n            v22 = 1;\n            v37 = v56;\n            if (v57 <= 0xffffffffffffffff) {\n                // 0x405d58\n                v23 = v57;\n                int64_t v58; // 0x405a00\n                v22 = v58 & 0xffffffff;\n                v37 = v56;\n            }\n        }\n    }\n    goto lab_0x405ba8;\n  lab_0x405bcc:;\n    uint128_t v61 = (int128_t)v25 * (int128_t)v14; // 0x405bcf\n    v23 = v61;\n    v22 = v11;\n    v37 = v38;\n    v43 = v38;\n    if (v61 <= 0xffffffffffffffff) {\n        goto lab_0x405ba8;\n    } else {\n        goto lab_0x405bd7;\n    }\n  lab_0x405b8e:;\n    int128_t v62 = v24; // 0x405b94\n    uint128_t v63 = v62 * (int128_t)v14; // 0x405b94\n    v43 = v36;\n    if (v63 > 0xffffffffffffffff) {\n        goto lab_0x405bd7;\n    } else {\n        uint128_t v64 = (v63 & 0xffffffffffffffff) * v62; // 0x405b99\n        v43 = v36;\n        if (v64 > 0xffffffffffffffff) {\n            goto lab_0x405bd7;\n        } else {\n            // 0x405b9e\n            v23 = v64;\n            v22 = v11;\n            v37 = v36;\n            goto lab_0x405ba8;\n        }\n    }\n  lab_0x405cd8:;\n    uint128_t v65 = (int128_t)v14 * (int128_t)v29; // 0x405ceb\n    int64_t v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n    int64_t v67 = v65 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v68 = 4; // 0x405cf7\n    v48 = v66;\n    v49 = v33;\n    v50 = v67;\n    int32_t v69 = v68; // 0x405cfa\n    int64_t v70 = v67; // 0x405cfa\n    while (v68 != 0) {\n        // 0x405ce8\n        v65 = (int128_t)v66 * (int128_t)v29;\n        v66 = (int64_t)(v65 < 0xffffffffffffffff ? v65 : 0xffffffffffffffff);\n        v67 = v65 > 0xffffffffffffffff ? 1 : v70;\n        v68 = v69 - 1;\n        v48 = v66;\n        v49 = v33;\n        v50 = v67;\n        v69 = v68;\n        v70 = v67;\n    }\n    goto lab_0x405c64;\n  lab_0x405ca8:;\n    uint128_t v71 = (int128_t)v14 * (int128_t)v28; // 0x405cbb\n    int64_t v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n    int64_t v73 = v71 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v74 = 3; // 0x405cc7\n    v48 = v72;\n    v49 = v32;\n    v50 = v73;\n    int32_t v75 = v74; // 0x405cca\n    int64_t v76 = v73; // 0x405cca\n    while (v74 != 0) {\n        // 0x405cb8\n        v71 = (int128_t)v72 * (int128_t)v28;\n        v72 = (int64_t)(v71 < 0xffffffffffffffff ? v71 : 0xffffffffffffffff);\n        v73 = v71 > 0xffffffffffffffff ? 1 : v76;\n        v74 = v75 - 1;\n        v48 = v72;\n        v49 = v32;\n        v50 = v73;\n        v75 = v74;\n        v76 = v73;\n    }\n    goto lab_0x405c64;\n  lab_0x405c76:;\n    uint128_t v77 = (int128_t)v14 * (int128_t)v27; // 0x405c8b\n    int64_t v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n    int64_t v79 = v77 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v80 = 7; // 0x405c97\n    v48 = v78;\n    v49 = v41;\n    v50 = v79;\n    int32_t v81 = v80; // 0x405c9a\n    int64_t v82 = v79; // 0x405c9a\n    while (v80 != 0) {\n        // 0x405c88\n        v77 = (int128_t)v78 * (int128_t)v27;\n        v78 = (int64_t)(v77 < 0xffffffffffffffff ? v77 : 0xffffffffffffffff);\n        v79 = v77 > 0xffffffffffffffff ? 1 : v82;\n        v80 = v81 - 1;\n        v48 = v78;\n        v49 = v41;\n        v50 = v79;\n        v81 = v80;\n        v82 = v79;\n    }\n    goto lab_0x405c64;\n  lab_0x405c3b:;\n    uint128_t v83 = (int128_t)v14 * (int128_t)v26; // 0x405c53\n    int64_t v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n    int64_t v85 = v83 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v86 = 6; // 0x405c5f\n    int32_t v87 = v86; // 0x405c62\n    int64_t v88 = v85; // 0x405c62\n    v48 = v84;\n    v49 = v40;\n    v50 = v85;\n    while (v86 != 0) {\n        // 0x405c50\n        v83 = (int128_t)v84 * (int128_t)v26;\n        v84 = (int64_t)(v83 < 0xffffffffffffffff ? v83 : 0xffffffffffffffff);\n        v85 = v83 > 0xffffffffffffffff ? 1 : v88;\n        v86 = v87 - 1;\n        v87 = v86;\n        v88 = v85;\n        v48 = v84;\n        v49 = v40;\n        v50 = v85;\n    }\n    goto lab_0x405c64;\n  lab_0x405c1f:\n    // 0x405c1f\n    v43 = v39;\n    if (v14 >= 0x80000000000000) {\n        goto lab_0x405bd7;\n    } else {\n        // 0x405c28\n        v23 = 512 * v14;\n        v22 = v11;\n        v37 = v39;\n        goto lab_0x405ba8;\n    }\n  lab_0x405ba8:;\n    int64_t v59 = v22;\n    int64_t v60 = (0x100000000 * v37 >> 32) + v8; // 0x405bad\n    *v7 = v60;\n    v13 = v23;\n    v10 = (*(char *)v60 != 0 ? v59 | 2 : v59) & 0xffffffff;\n    goto lab_0x405aa0;\n  lab_0x405c05:\n    // 0x405c05\n    *a4 = v15;\n    // 0x405aa3\n    return (v12 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x405bd7:\n    // 0x405bd7\n    v23 = -1;\n    v22 = 1;\n    v37 = v43;\n    goto lab_0x405ba8;\n  lab_0x405c64:\n    // 0x405c64\n    v23 = v48;\n    v22 = (v50 | v11) & 0xffffffff;\n    v37 = v49;\n    goto lab_0x405ba8;\n}\n"
        },
        {
            "funcName": "function_405e30",
            "funcStartAddr": "405e30",
            "funcEndAddr": "405eab",
            "decompiledFuncCode": "int64_t function_405e30(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405e37\n    if (fileno(stream) < 0) {\n        // 0x405e97\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x405e4a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x405e7b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405e97\n            return fclose(stream);\n        }\n    }\n    // 0x405e4c\n    if ((int32_t)function_405eb0(a1, v1) == 0) {\n        // 0x405e97\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405e58\n    int32_t v3 = *v2; // 0x405e60\n    int64_t result = fclose(stream); // 0x405e6e\n    if (v3 != 0) {\n        // 0x405ea0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405e70\n    return result;\n}\n"
        },
        {
            "funcName": "function_405eb0",
            "funcStartAddr": "405eb0",
            "funcEndAddr": "405ef0",
            "decompiledFuncCode": "int64_t function_405eb0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x405eca\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x405eca\n        return fflush(stream);\n    }\n    // 0x405ed8\n    function_405f90(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405ef0",
            "funcStartAddr": "405ef0",
            "funcEndAddr": "405f8e",
            "decompiledFuncCode": "int64_t function_405ef0(int64_t a1, int64_t a2) {\n    char * file_path = (char *)a1; // 0x405efe\n    char * mode = (char *)a2; // 0x405efe\n    int64_t stream; // 0x405ef0\n    struct _IO_FILE * file = freopen(file_path, mode, (struct _IO_FILE *)stream); // 0x405efe\n    if (a1 == 0 || file == NULL) {\n        // 0x405f28\n        return (int64_t)file;\n    }\n    int32_t fd2 = fileno(file); // 0x405f13\n    if (dup2(fd2, fd2) >= 0 || *__errno_location() != 9) {\n        // 0x405f28\n        return (int64_t)file;\n    }\n    int32_t fd = open(\"/dev/null\", O_CLOEXEC); // 0x405f4e\n    if (fd == fd2) {\n        // 0x405f71\n        return (int64_t)freopen(file_path, mode, file);\n    }\n    int32_t v1 = dup2(fd, fd2); // 0x405f60\n    close(fd);\n    if (v1 < 0) {\n        // 0x405f28\n        return (int64_t)file;\n    }\n    // 0x405f71\n    return (int64_t)freopen(file_path, mode, file);\n}\n"
        },
        {
            "funcName": "function_405f90",
            "funcStartAddr": "405f90",
            "funcEndAddr": "405fe7",
            "decompiledFuncCode": "int64_t function_405f90(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405f90\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x405f9a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x405fcb\n    int64_t result = -1; // 0x405fd4\n    if (v1 != -1) {\n        // 0x405fd6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405fe2\n    return result;\n}\n"
        },
        {
            "funcName": "function_405ff0",
            "funcStartAddr": "405ff0",
            "funcEndAddr": "4060cf",
            "decompiledFuncCode": "int64_t function_405ff0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x405ffc\n    uint32_t v2 = *v1; // 0x405ffc\n    int64_t v3 = a2 & 0xffffffff; // 0x406001\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x406004\n    uint64_t v5 = (int64_t)*v4; // 0x406004\n    int64_t v6; // 0x406072\n    if (v3 <= v5) {\n      lab_0x40606c_2:\n        // 0x40606c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x405ff2\n    int64_t v8 = v2; // 0x405ff0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40606c\n        goto lab_0x40606c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x406028\n    int64_t v17; // 0x406036\n    int64_t * v18; // 0x406050\n    int64_t * v19; // 0x406053\n    int64_t v20; // 0x40605e\n    int64_t v21; // 0x406036\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x406033\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x406050\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x406067\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40606c\n            goto lab_0x40606c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40606c\n            goto lab_0x40606c_2;\n        }\n        // 0x406022\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4060ab\n    int64_t * v23 = (int64_t *)v22; // 0x4060b0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4060b3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4060b0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x4060c7\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40601d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40606c\n            goto lab_0x40606c_2;\n        }\n        // 0x406022\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x406033\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x406050\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x406067\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40606c\n                goto lab_0x40606c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40606c\n                goto lab_0x40606c_2;\n            }\n            // 0x406022\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x406090\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4060b0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x4060c7\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40606c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4060d0",
            "funcStartAddr": "4060d0",
            "funcEndAddr": "4066ec",
            "decompiledFuncCode": "int64_t function_4060d0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4060ef\n    int64_t v2 = *v1; // 0x4060ef\n    char * str2 = (char *)v2; // 0x4060fc\n    char c = *str2; // 0x4060fc\n    int64_t v3 = v2; // 0x406128\n    int64_t v4 = 0; // 0x4060d0\n    int32_t v5; // 0x4060d0\n    int64_t v6; // 0x4060d0\n    int64_t v7; // 0x4060d0\n    int64_t v8; // 0x4060d0\n    int64_t v9; // 0x4060d0\n    int64_t v10; // 0x4060d0\n    int64_t v11; // 0x4060d0\n    int64_t v12; // 0x4060d0\n    int64_t v13; // 0x4060d0\n    int64_t str3; // 0x4060d0\n    int64_t v14; // 0x4060d0\n    int64_t v15; // 0x4060d0\n    int64_t v16; // 0x4060d0\n    int64_t v17; // 0x4060d0\n    int32_t v18; // 0x4060d0\n    int32_t v19; // 0x4060d0\n    int32_t v20; // 0x4060d0\n    int32_t v21; // 0x4060d0\n    int32_t v22; // 0x4060d0\n    int32_t v23; // 0x4060d0\n    int32_t v24; // 0x4060d0\n    int32_t v25; // 0x4060d0\n    int32_t v26; // 0x4060d0\n    int32_t v27; // 0x4060d0\n    int32_t v28; // 0x4060d0\n    int32_t v29; // 0x4060d0\n    int64_t nmemb; // 0x4060d0\n    int64_t v30; // 0x4060d0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40612c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x406128\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x406138\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40613e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x406108\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40616c\n                int64_t v34; // 0x4060d0\n                int64_t v35; // 0x4060d0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x406175\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4062f0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x406186\n                int64_t v37 = *(int64_t *)v36; // 0x40618a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x406160\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x406175\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4062f0;\n                        }\n                    }\n                    // 0x406186\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x4061d6:\n                    // 0x4061d6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x406230;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4063a0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x406230;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x406350\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4061fa;\n                                } else {\n                                    // 0x40635c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4061fa;\n                                    } else {\n                                        // 0x40636a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4061fa;\n                                        } else {\n                                            goto lab_0x406230;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4061fa;\n                            }\n                        }\n                    }\n                }\n              lab_0x406241:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x406416\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x4065c2\n                            flockfile(g36);\n                            int64_t v41 = *v1; // 0x4065e2\n                            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40662f\n                            int64_t v43 = (int64_t)g36;\n                            int64_t v44 = v43; // 0x406649\n                            int64_t v45; // 0x40664b\n                            if (*(char *)v42 != 0) {\n                                // 0x40664b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g36;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x406643\n                            while (v17 + nmemb != v42) {\n                                // 0x406645\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40664b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g36;\n                                }\n                                // 0x406638\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x406670\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g36);\n                            v40 = *v1;\n                        } else {\n                            // 0x406424\n                            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40657f\n                        free((int64_t *)v17);\n                    }\n                    // 0x406479\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x406490\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40633e\n                    return 63;\n                }\n                // 0x406260\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4062e4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4062f0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x406300\n                    uint32_t v50 = *v49; // 0x406300\n                    int64_t v51 = v50; // 0x406300\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40630a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x406313\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40653f\n                                __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4064ea\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40633e\n                            return 63;\n                        }\n                        // 0x406388\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40669f\n                                    __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40659d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x4065b0\n                                // 0x40633e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x4064ae\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x4064c2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40632b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40632e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x406332\n                    int64_t result = v59; // 0x406338\n                    if (v58 != 0) {\n                        // 0x40633a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40633e\n                    return result;\n                }\n            } else {\n                // 0x40613e\n                v5 = v32;\n            }\n            // break -> 0x406265\n            break;\n        }\n    }\n    // 0x406265\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40627d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x406287\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40633e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x4063c9\n        __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4062b6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x4062c6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x406230:\n    // 0x406230\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x406230\n    int64_t v63 = *(int64_t *)v62; // 0x406234\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x406241\n        goto lab_0x406241;\n    }\n    goto lab_0x4061d6;\n  lab_0x4061fa:\n    // 0x4061fa\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x4060d0\n    int32_t v65; // 0x4060d0\n    int32_t v66; // 0x4060d0\n    if (v27 != 0) {\n        goto lab_0x406230;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4063b0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x406230;\n            } else {\n                goto lab_0x406221;\n            }\n        } else {\n            // 0x406215\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40650c\n                int64_t v67 = (int64_t)mem; // 0x40650c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x406230;\n                } else {\n                    // 0x40651f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x406221;\n                }\n            } else {\n                goto lab_0x406221;\n            }\n        }\n    }\n  lab_0x406221:\n    // 0x406221\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x406230;\n}\n"
        },
        {
            "funcName": "function_4066f0",
            "funcStartAddr": "4066f0",
            "funcEndAddr": "406cb6",
            "decompiledFuncCode": "int64_t function_4066f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x406711\n    if (v3 < 1) {\n        // 0x4068ce\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40670d\n    int32_t v5 = *(int32_t *)a7; // 0x406719\n    uint64_t v6 = a1 & 0xffffffff; // 0x40671b\n    int64_t v7 = v2; // 0x406720\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x406723\n    *v8 = 0;\n    int64_t v9; // 0x4066f0\n    int64_t v10; // 0x4066f0\n    int64_t v11; // 0x4066f0\n    int64_t v12; // 0x4066f0\n    int64_t str; // 0x4066f0\n    int64_t v13; // 0x4066f0\n    int64_t v14; // 0x4066f0\n    int64_t v15; // 0x4066f0\n    int64_t v16; // 0x4066f0\n    int64_t v17; // 0x4066f0\n    int32_t v18; // 0x4066f0\n    char v19; // 0x4066f0\n    if (v5 == 0) {\n        // 0x406908\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40673a;\n    } else {\n        // 0x406733\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x406780\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x406783\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x406848;\n            } else {\n                int64_t v22 = v7 + 1; // 0x406796\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4067a6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40685c;\n                } else {\n                    goto lab_0x4067b8;\n                }\n            }\n        } else {\n            goto lab_0x40673a;\n        }\n    }\n  lab_0x40673a:\n    // 0x40673a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x406740\n    *v24 = 0;\n    int64_t v25; // 0x4066f0\n    int64_t v26; // 0x4066f0\n    int64_t v27; // 0x4066f0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x406830\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40683d;\n        }\n        case 43: {\n            // 0x406b40\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40683d;\n        }\n        default: {\n            // 0x40675c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x406abf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x406bd8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40683d;\n                } else {\n                    // 0x406acd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40676a;\n                }\n            } else {\n                goto lab_0x40676a;\n            }\n        }\n    }\n  lab_0x406848:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40684f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4067b8;\n    } else {\n        goto lab_0x40685c;\n    }\n  lab_0x40676a:\n    // 0x40676a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40683d;\n  lab_0x40683d:\n    // 0x40683d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x406848;\n  lab_0x4067b8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4067b8\n    int64_t v31 = v30; // 0x4067b8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4067ba\n    if ((int64_t)*v32 > v31) {\n        // 0x4067bf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4067c2\n    if (*v33 > v30) {\n        // 0x4067c7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4067ca\n    int64_t v35 = v31; // 0x4067ce\n    int64_t v36 = v15; // 0x4067ce\n    int64_t v37; // 0x4066f0\n    int64_t v38; // 0x4066f0\n    int64_t v39; // 0x4066f0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406938\n        int64_t v41 = v40; // 0x406938\n        v2 = v41;\n        int64_t v42; // 0x4066f0\n        if (*v33 == v40) {\n            // 0x406b20\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406b28\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x406944\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406948\n                function_405ff0(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x406958\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x406961\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40696a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x406981\n            int64_t v47 = v45 & 0xffffffff; // 0x406985\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40698e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x406994\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x406996;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x406970\n            int64_t v49 = v48 & 0xffffffff; // 0x406970\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x406981\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40698e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x406994\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x406996;\n                    }\n                }\n                // 0x406970\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x406b38\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x406996;\n    } else {\n        goto lab_0x4067d4;\n    }\n  lab_0x40685c:\n    // 0x40685c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40685f\n    int64_t v51 = v12; // 0x40685f\n    int64_t v52 = v14; // 0x40685f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4067b8;\n    } else {\n        goto lab_0x406865;\n    }\n  lab_0x4067d4:;\n    int32_t v53 = v35; // 0x4067d4\n    int64_t v54; // 0x4066f0\n    int64_t v55; // 0x4066f0\n    int64_t v56; // 0x4066f0\n    int64_t v57; // 0x4066f0\n    int64_t v58; // 0x4066f0\n    int64_t v59; // 0x4066f0\n    char * v60; // 0x4066f0\n    int64_t v61; // 0x4066f0\n    int64_t v62; // 0x4067e9\n    int64_t v63; // 0x4066f0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x406923\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x406926;\n    } else {\n        // 0x4067dc\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x4066f0\n        int64_t v66 = v65 ? -1 : 1; // 0x4067f0\n        int64_t v67 = (int64_t)\"--\"; // 0x4066f0\n        int64_t v68 = v62; // 0x4066f0\n        int64_t v69 = 3; // 0x4067f0\n        unsigned char v70 = *(char *)v68; // 0x4067f0\n        char v71 = *(char *)v67; // 0x4067f0\n        char v72 = v71; // 0x4067f0\n        bool v73 = false; // 0x4067f0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4068e0\n            if (*(char *)v62 == 45) {\n                // 0x4069a0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4069a0\n                if (c == 0) {\n                    goto lab_0x4068ea;\n                } else {\n                    // 0x4069ad\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406a30;\n                    } else {\n                        if (c == 45) {\n                            // 0x406c13\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x406a85;\n                        } else {\n                            // 0x4069be\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406a30;\n                            } else {\n                                // 0x4069c3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4069e4;\n                                } else {\n                                    // 0x4069ca\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406a30;\n                                    } else {\n                                        goto lab_0x4069e4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4068ea;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x406800\n            v2 = v75;\n            int32_t v76 = *v32; // 0x406803\n            int64_t v77 = v35 + 1; // 0x406806\n            int32_t v78 = v77; // 0x406809\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x406b70\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x406817\n                    function_405ff0(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x406825\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x406926;\n        }\n    }\n  lab_0x406865:;\n    // 0x406865\n    int64_t v79; // bp-104, 0x4066f0\n    int64_t v80 = &v79; // 0x4066fa\n    int64_t v81 = v50 + 1; // 0x406865\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40686c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x406871\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x406875\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x406879\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x406881\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x406886\n    int32_t c2 = v84; // 0x406886\n    char * found_char_pos = strchr(str2, c2); // 0x406886\n    int64_t v87 = *v82; // 0x40688b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x406895\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4068a0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x406b90\n            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x406b5d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4068ce\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x406886\n    char v91 = *(char *)(v90 + 1); // 0x4068bb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x406875\n        if (v91 != 58) {\n            // 0x4068ce\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x406ae4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x406be8\n                *v8 = 0;\n            } else {\n                // 0x406bcc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x406b0e\n            *v83 = 0;\n            // 0x4068ce\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x406aee\n        if (v93 != 0) {\n            // 0x406b80\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x406b0e\n            *v83 = 0;\n            // 0x4068ce\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x406b01\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x406b0e\n            *v83 = 0;\n            // 0x4068ce\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x406c4a\n            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x406bfa\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x406c01\n        // 0x406b0e\n        *v83 = 0;\n        // 0x4068ce\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x406a59\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x406a5b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x406c80\n                __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x406c31\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x406c38\n            // 0x4068ce\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x406a66\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x406a6a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x406a85;\n  lab_0x406996:\n    // 0x406996\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4067d4;\n  lab_0x406a85:;\n    int64_t v99 = function_4060d0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x406aa3\n    // 0x4068ce\n    return v99 & 0xffffffff;\n  lab_0x406926:;\n    int32_t v100 = v55; // 0x406926\n    if (v100 != (int32_t)v59) {\n        // 0x40692a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4068ce\n    return 0xffffffff;\n  lab_0x4068ea:\n    // 0x4068ea\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x4068f1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4068ce\n    return v99 & 0xffffffff;\n  lab_0x406a30:\n    // 0x406a30\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x406865;\n  lab_0x4069e4:\n    // 0x4069e4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_4060d0(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x406a0a\n    if ((int32_t)v101 != -1) {\n        // 0x4068ce\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x406a1f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406a30;\n}\n"
        },
        {
            "funcName": "function_406cc0",
            "funcStartAddr": "406cc0",
            "funcEndAddr": "406d16",
            "decompiledFuncCode": "int64_t function_406cc0(int64_t a1) {\n    // 0x406cc0\n    *(int32_t *)&g57 = g31;\n    *(int32_t *)&g58 = g30;\n    int64_t v1; // 0x406cc0\n    int64_t result = function_4066f0(v1, v1, v1, v1, v1, v1, &g57, a1 & 0xffffffff); // 0x406ce6\n    g31 = *(int32_t *)&g57;\n    g62 = (char *)g60;\n    *(int32_t *)&g29 = g59;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406d20",
            "funcStartAddr": "406d20",
            "funcEndAddr": "406d38",
            "decompiledFuncCode": "int64_t function_406d20(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406d20\n    return function_406cc0(1);\n}\n"
        },
        {
            "funcName": "function_406d40",
            "funcStartAddr": "406d40",
            "funcEndAddr": "406d53",
            "decompiledFuncCode": "int64_t function_406d40(int64_t a1, int64_t a2, char * a3, char (**a4)[6], int32_t a5, int64_t a6) {\n    // 0x406d40\n    return function_406cc0(0);\n}\n"
        },
        {
            "funcName": "function_406d60",
            "funcStartAddr": "406d60",
            "funcEndAddr": "406d75",
            "decompiledFuncCode": "int64_t function_406d60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406d60\n    return function_4066f0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406d80",
            "funcStartAddr": "406d80",
            "funcEndAddr": "406d96",
            "decompiledFuncCode": "int64_t function_406d80(void) {\n    // 0x406d80\n    return function_406cc0(0);\n}\n"
        },
        {
            "funcName": "function_406da0",
            "funcStartAddr": "406da0",
            "funcEndAddr": "406db8",
            "decompiledFuncCode": "int64_t function_406da0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406da0\n    return function_4066f0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406dc0",
            "funcStartAddr": "406dc0",
            "funcEndAddr": "406e3a",
            "decompiledFuncCode": "int64_t function_406dc0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x406dcb\n    int64_t v2 = (int64_t)&g15; // 0x406dcb\n    int32_t * pwc; // 0x406dc0\n    int64_t v3; // 0x406dc0\n    int64_t n; // 0x406dc0\n    if (a2 == 0) {\n        goto lab_0x406e12;\n    } else {\n        // 0x406dcd\n        if (a3 == 0) {\n            // 0x406df8\n            return -2;\n        }\n        // 0x406dd9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x406e12;\n        } else {\n            goto lab_0x406de4;\n        }\n    }\n  lab_0x406e12:\n    // 0x406e12\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x406dc0\n    pwc = (int32_t *)&v4;\n    goto lab_0x406de4;\n  lab_0x406de4:;\n    char * wstr = (char *)v3; // 0x406dea\n    int64_t ps; // 0x406dc0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x406dea\n    int64_t result = v5; // 0x406dea\n    if (v5 < 0xfffffffe) {\n        // 0x406df8\n        return result;\n    }\n    int64_t result2 = result; // 0x406e29\n    if ((char)function_403190(0, v3) == 0) {\n        // 0x406e2b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x406df8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406e40",
            "funcStartAddr": "406e40",
            "funcEndAddr": "406e9d",
            "decompiledFuncCode": "int64_t function_406e40(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x406e47\n    int64_t v2; // 0x406e40\n    int64_t result = function_405e30(a1, v2); // 0x406e58\n    if ((v2 & 32) != 0) {\n        // 0x406e80\n        if ((int32_t)result == 0) {\n            // 0x406e84\n            *__errno_location() = 0;\n        }\n        // 0x406e7a\n        return 0xffffffff;\n    }\n    // 0x406e61\n    if ((int32_t)result == 0) {\n        // 0x406e7a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x406e68\n    if (v1 == 0) {\n        // 0x406e6a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x406e7a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406ea0",
            "funcStartAddr": "406ea0",
            "funcEndAddr": "407402",
            "decompiledFuncCode": "int64_t function_406ea0(void) {\n    char * v1 = nl_langinfo(14); // 0x406eb6\n    char * v2 = g61; // 0x406ebb\n    char * v3; // 0x406ea0\n    int64_t v4; // 0x406ea0\n    int64_t v5; // 0x406ea0\n    int64_t v6; // 0x406ea0\n    int64_t v7; // 0x406ea0\n    int32_t size; // 0x406ea0\n    int32_t size2; // 0x406ea0\n    int32_t len; // 0x406f72\n    int64_t v8; // 0x406f72\n    char * env_val; // 0x406f5d\n    if (v2 == NULL) {\n        // 0x406f58\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x406fc5;\n        } else {\n            // 0x406f6a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x406fc5;\n            } else {\n                // 0x406f6f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x406f5d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4073f5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x406fc5;\n                    } else {\n                        // 0x407369\n                        size2 = len + 14;\n                        goto lab_0x406f8b;\n                    }\n                } else {\n                    goto lab_0x406f8b;\n                }\n            }\n        }\n    } else {\n        // 0x406ea0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x406eda;\n    }\n  lab_0x40720c:;\n    // 0x40720c\n    struct _IO_FILE * stream; // 0x40704b\n    int32_t v10 = __uflow(stream); // 0x40720f\n    int64_t v11; // 0x406ea0\n    int64_t v12 = v11; // 0x407219\n    int64_t v13; // 0x406ea0\n    int64_t v14 = v13; // 0x407219\n    int32_t v15 = v10; // 0x407219\n    int64_t v16; // 0x406ea0\n    int64_t v17 = v16; // 0x407219\n    int64_t v18 = v11; // 0x407219\n    int64_t v19 = v13; // 0x407219\n    int64_t v20 = v16; // 0x407219\n    if (v10 == -1) {\n        // break -> 0x40721f\n        goto lab_0x40721f;\n    }\n    goto lab_0x407099;\n  lab_0x40708e:;\n    // 0x40708e\n    int64_t v90; // 0x406ea0\n    int64_t * v32; // 0x407080\n    *v32 = v90 + 1;\n    int64_t v89; // 0x406ea0\n    v12 = v89;\n    int64_t v91; // 0x406ea0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x406ea0\n    v17 = v92;\n    goto lab_0x407099;\n  lab_0x407099:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x406ea0\n    int32_t v25; // bp-120, 0x406ea0\n    int32_t v26; // bp-184, 0x406ea0\n    int64_t v27; // 0x40704b\n    int64_t v28; // 0x407068\n    int64_t v29; // 0x40706d\n    int64_t * v30; // 0x407084\n    switch (c) {\n        case 32: {\n            goto lab_0x407080;\n        }\n        case 10: {\n            goto lab_0x407080;\n        }\n        case 9: {\n            goto lab_0x407080;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x407271\n            int32_t v33; // 0x406ea0\n            char v34; // 0x406ea0\n            int32_t v35; // 0x40727e\n            if (v31 < *v30) {\n                // 0x407250\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40727b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x407271\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x407250\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40727b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x407260\n                v36 = v33;\n            }\n            // 0x40734f\n            if (v36 == -1) {\n                // break -> 0x40721f\n                break;\n            }\n            goto lab_0x407080;\n        }\n        default: {\n            // 0x4070af\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40721f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x4070d8\n            int64_t v39 = v37 + 4; // 0x4070da\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x4070e6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x4070e8\n            while (v41 == 0) {\n                // 0x4070d8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x407106\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x407112\n            int64_t v45 = v43 + 4; // 0x407114\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x407120\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x407122\n            while (v47 == 0) {\n                // 0x407112\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40710f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x407138\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x407148\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40714c\n            int64_t v52 = v51 + v48; // 0x407155\n            int64_t * mem; // 0x406ea0\n            int64_t v53; // 0x406ea0\n            int64_t v54; // 0x406ea0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40728b\n                int64_t v56 = v55 + 3; // 0x407297\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x407171\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x407180\n            if (mem == NULL) {\n                // 0x4073ac\n                free((int64_t *)v21);\n                function_405e30(v27, v53);\n                v24 = (int64_t)&g15;\n                goto lab_0x407024;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x407198\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x4071a2\n            uint32_t v62 = (int32_t)v59; // 0x4071a5\n            int64_t v63; // 0x406ea0\n            if (v62 >= 8) {\n                // 0x4072b4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x4072ce\n                int64_t v66 = v61 - v65; // 0x4072d2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x4072dd\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4072ee\n                    int64_t v70 = v69 & 0xffffffff; // 0x4072ee\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4072eb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40737f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x4071b7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x4071bb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x4071cb\n            int64_t v74 = v60 - 1; // 0x4071cf\n            uint32_t v75 = (int32_t)v73; // 0x4071d4\n            int64_t v76; // 0x406ea0\n            if (v75 >= 8) {\n                // 0x407302\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40730c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40731c\n                int64_t v80 = v74 - v79; // 0x407320\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40732b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40733b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x407339\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x407396\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40739e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4071e6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4071ea\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4073e3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4071fe\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40708e;\n            } else {\n                goto lab_0x40720c;\n            }\n        }\n    }\n  lab_0x407080:;\n    int64_t v93 = v23; // 0x406ea0\n    int64_t v94 = v22; // 0x406ea0\n    int64_t v95 = v21; // 0x406ea0\n    goto lab_0x407080_2;\n  lab_0x406fc5:;\n    int64_t * mem3 = malloc(size); // 0x406fc5\n    int64_t v97 = (int64_t)&g15; // 0x406fd0\n    int64_t v98; // 0x406ea0\n    int64_t path; // 0x406ea0\n    if (mem3 == NULL) {\n        goto lab_0x406fa2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x406fc5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x406fe6;\n    }\n  lab_0x406eda:;\n    int64_t str = v1 == NULL ? (int64_t)&g15 : (int64_t)v1; // 0x406ecd\n    char v100 = *v3; // 0x406eda\n    int64_t v101; // 0x406ea0\n    if (v100 == 0) {\n        // 0x406f34\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x406ea0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x406ea0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x406f20\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x406f27;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x406ef0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x406efd\n        char v107 = *(char *)v106; // 0x406f02\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x406f34\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x406f0b\n    v104 = v103 + 1;\n  lab_0x406f27:\n    // 0x406f34\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x406fa2:;\n    char * v108 = (char *)v97;\n    g61 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x406eda;\n  lab_0x406fe6:;\n    int64_t v109 = v98 + path; // 0x406fe6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x407012\n    v24 = (int64_t)&g15;\n    if (fd >= 0) {\n        // 0x407041\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x407372\n            close(fd);\n            v24 = (int64_t)&g15;\n        } else {\n            // 0x407065\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x407080_2:;\n                uint64_t v96 = *v32; // 0x407080\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40720c;\n                } else {\n                    goto lab_0x40708e;\n                }\n            }\n          lab_0x40721f:\n            // 0x40721f\n            function_405e30(v27, v19);\n            v24 = (int64_t)&g15;\n            if (v18 != 0) {\n                // 0x40723e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x407024;\n  lab_0x406f8b:;\n    int64_t * mem4 = malloc(size2); // 0x406f8b\n    v97 = (int64_t)&g15;\n    if (mem4 != NULL) {\n        // 0x407031\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x406fe6;\n    } else {\n        goto lab_0x406fa2;\n    }\n  lab_0x407024:\n    // 0x407024\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x406fa2;\n}\n"
        },
        {
            "funcName": "function_407410",
            "funcStartAddr": "407410",
            "funcEndAddr": "4074c4",
            "decompiledFuncCode": "int64_t function_407410(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int32_t * v1 = __errno_location(); // 0x40742a\n    int64_t v2 = a3; // 0x407432\n    int64_t v3 = a1; // 0x407432\n    int64_t v4 = a4; // 0x407432\n    int64_t v5 = a2; // 0x407432\n    *v1 = 0;\n    char * str = (char *)v3; // 0x407470\n    char * str2 = (char *)v2; // 0x407470\n    int32_t strcoll_rc = strcoll(str, str2); // 0x407470\n    while (strcoll_rc == 0) {\n        int64_t v6 = (int64_t)strlen(str) + 1; // 0x407443\n        int64_t v7 = (int64_t)strlen(str2) + 1; // 0x40744f\n        v4 -= v7;\n        v5 -= v6;\n        if (v5 == 0) {\n            // 0x407490\n            return v4 != 0 ? 0xffffffff : 0;\n        }\n        // 0x40745e\n        v2 += v7;\n        v3 += v6;\n        if (v4 == 0) {\n            // 0x4074b0\n            return 1;\n        }\n        *v1 = 0;\n        str = (char *)v3;\n        str2 = (char *)v2;\n        strcoll_rc = strcoll(str, str2);\n    }\n    // 0x407479\n    return strcoll_rc;\n}\n"
        },
        {
            "funcName": "function_4074d0",
            "funcStartAddr": "4074d0",
            "funcEndAddr": "407571",
            "decompiledFuncCode": "int64_t function_4074d0(int64_t str, int64_t n, int64_t str2, int64_t a4) {\n    if (n == a4) {\n        // 0x4074ef\n        if (memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) == 0) {\n            // 0x407560\n            *__errno_location() = 0;\n            // 0x40754c\n            return 0;\n        }\n    }\n    char * v1 = (char *)(n + str); // 0x407511\n    char * v2 = (char *)(a4 + str2); // 0x407515\n    *v1 = 0;\n    *v2 = 0;\n    int64_t v3 = function_407410(str, n + 1, str2, a4 + 1); // 0x407533\n    // 0x40754c\n    return v3 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_407580",
            "funcStartAddr": "407580",
            "funcEndAddr": "4075e3",
            "decompiledFuncCode": "int64_t function_407580(int64_t str, int64_t n, int64_t str2, int64_t a4) {\n    if (n != a4 || memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) != 0) {\n        // 0x4075c8\n        return function_407410(str, n, str2, a4);\n    }\n    // 0x4075aa\n    *__errno_location() = 0;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4075f0",
            "funcStartAddr": "4075f0",
            "funcEndAddr": "40764d",
            "decompiledFuncCode": "int64_t function_4075f0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4075f0\n    return function_401530();\n}\n"
        },
        {
            "funcName": "function_407650",
            "funcStartAddr": "407650",
            "funcEndAddr": "407651",
            "decompiledFuncCode": "int64_t function_407650(void) {\n    // 0x407650\n    int64_t result; // 0x407650\n    return result;\n}\n"
        },
        {
            "funcName": "function_407660",
            "funcStartAddr": "407660",
            "funcEndAddr": "407678",
            "decompiledFuncCode": "int64_t function_407660(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407660\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g20);\n}\n"
        },
        {
            "funcName": "function_407678",
            "funcStartAddr": "407678",
            "funcEndAddr": "407698",
            "decompiledFuncCode": "int64_t function_407678(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g16; // 0x407682\n    while (*(int64_t *)v1 != -1) {\n        // 0x407683\n        v1 -= 8;\n    }\n    // 0x407694\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_uniq.elf"
}