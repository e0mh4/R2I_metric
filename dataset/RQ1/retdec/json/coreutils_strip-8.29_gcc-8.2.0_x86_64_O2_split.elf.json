{
    "funcInfo": [
        {
            "funcName": "function_401e80",
            "funcStartAddr": "401e80",
            "funcEndAddr": "401e85",
            "decompiledFuncCode": "int64_t function_401e80(void) {\n    // 0x401e80\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e85",
            "funcStartAddr": "401e85",
            "funcEndAddr": "401e8a",
            "decompiledFuncCode": "int64_t function_401e85(void) {\n    // 0x401e85\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e8a",
            "funcStartAddr": "401e8a",
            "funcEndAddr": "401e8f",
            "decompiledFuncCode": "int64_t function_401e8a(void) {\n    // 0x401e8a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e8f",
            "funcStartAddr": "401e8f",
            "funcEndAddr": "401e94",
            "decompiledFuncCode": "int64_t function_401e8f(void) {\n    // 0x401e8f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e94",
            "funcStartAddr": "401e94",
            "funcEndAddr": "401e99",
            "decompiledFuncCode": "int64_t function_401e94(void) {\n    // 0x401e94\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401e99",
            "funcStartAddr": "401e99",
            "funcEndAddr": "401e9e",
            "decompiledFuncCode": "int64_t function_401e99(void) {\n    // 0x401e99\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ea0",
            "funcStartAddr": "401ea0",
            "funcEndAddr": "403bd4",
            "decompiledFuncCode": "int64_t function_401ea0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401eb5\n    int32_t v2 = getpagesize(); // 0x401ec2\n    int128_t v3 = v2; // 0x401ecc\n    function_4053a0(a2);\n    setlocale(LC_ALL, (char *)&g11);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v4; // 0x401ea0\n    function_409900(0x4050e0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v4);\n    g53 = \"-\";\n    g59 = (char *)&g3;\n    bool v5; // 0x401ea0\n    int64_t v6 = v5 ? -1 : 1;\n    int64_t v7 = -1 - v2;\n    int128_t v8 = 0; // 0x401f39\n    int64_t v9 = 0; // 0x401f39\n    int32_t v10 = 0; // 0x401f39\n    int64_t v11 = 0; // 0x401f39\n    int64_t v12 = 0; // 0x401f39\n    int64_t v13; // 0x401ea0\n    int64_t v14; // 0x401ea0\n    int64_t v15; // 0x401ea0\n    int64_t v16; // 0x401ea0\n    int64_t v17; // 0x401ea0\n    int64_t v18; // 0x401ea0\n    int64_t v19; // 0x401ea0\n    int64_t v20; // 0x401ea0\n    int64_t v21; // 0x401ea0\n    int64_t v22; // 0x401ea0\n    int64_t v23; // 0x401ea0\n    int64_t v24; // 0x401ea0\n    int32_t v25; // 0x401ea0\n    int32_t v26; // 0x401ea0\n    int32_t v27; // 0x401ea0\n    int32_t v28; // 0x401ea0\n    int32_t v29; // 0x401ea0\n    int32_t v30; // 0x401ea0\n    int64_t * v31; // 0x401ea0\n    int64_t * v32; // 0x401ea0\n    int64_t * v33; // 0x401ea0\n    int64_t * v34; // 0x401ea0\n    int128_t v35; // 0x401ea0\n    int64_t v36; // 0x401ea0\n    int64_t v37; // 0x401ea0\n    int64_t v38; // 0x401ea0\n    int64_t v39; // 0x401f60\n    int64_t v40; // 0x401f65\n    int32_t v41; // 0x401ea0\n    int64_t v42; // 0x401f59\n    int64_t v43; // 0x401ea0\n    while (true) {\n      lab_0x401f40_2:\n        // 0x401f40\n        v17 = v12;\n        v13 = v11;\n        v21 = v20;\n        v29 = v28;\n        v33 = v32;\n        v25 = v10;\n        v24 = v9;\n        v35 = v8;\n        int32_t v44 = g31; // 0x401f4f\n        v39 = function_408cd0(v1, a2, \"0123456789C:a:b:del:n:t:ux\", &g4, 0, v21);\n        v40 = v39 & 0xffffffff;\n        v41 = v39;\n        switch (v41) {\n            case -1: {\n                goto lab_0x4024ca;\n            }\n            case 101: {\n                // 0x402488\n                g46 = 1;\n                v8 = v35;\n                v9 = v24;\n                v10 = v25;\n                v31 = v33;\n                v27 = v29;\n                v19 = v21;\n                v11 = v13;\n                v12 = v17;\n                goto lab_0x401f40;\n            }\n            default: {\n                if (v41 > 101) {\n                    // 0x401f80\n                    v38 = (int64_t)\"0123456789abcdef\";\n                    if (v41 == 120) {\n                        goto lab_0x40219e;\n                    } else {\n                        if (v41 > 120) {\n                            if (v41 == 129) {\n                                // 0x402320\n                                *(int64_t *)&g66 = (int64_t)g80;\n                                v8 = v35;\n                                v9 = v24;\n                                v10 = v25;\n                                v31 = v33;\n                                v27 = v29;\n                                v19 = v21;\n                                v11 = v13;\n                                v12 = v17;\n                            } else {\n                                if (v41 > 129) {\n                                    if (v41 != 130) {\n                                        if (v41 != 131) {\n                                            // 0x403795\n                                            function_404cf0(1);\n                                            // UNREACHABLE\n                                        }\n                                        int64_t v45 = (int64_t)g80;\n                                        int64_t v46 = function_405180(v45, a2); // 0x40214d\n                                        v15 = v45;\n                                        if (v46 != v45) {\n                                            goto lab_0x403956;\n                                        }\n                                        // 0x40215b\n                                        g54 = g80;\n                                        v8 = v35;\n                                        v9 = v24;\n                                        v10 = v25;\n                                        v31 = v33;\n                                        v27 = v29;\n                                        v19 = v21;\n                                        v11 = v13;\n                                        v12 = v17;\n                                    } else {\n                                        char * v47 = dcgettext(NULL, \"invalid IO block size\", 5); // 0x402088\n                                        v8 = v35;\n                                        v9 = v24;\n                                        v10 = function_4079f0((int64_t)g80, 1, v7, (int64_t *)\"bEGKkMmPTYZ0\", (int64_t)v47, 0);\n                                        v31 = v33;\n                                        v27 = v29;\n                                        v19 = 0;\n                                        v11 = v13;\n                                        v12 = v17;\n                                    }\n                                } else {\n                                    if (v41 != 128) {\n                                        // 0x403795\n                                        function_404cf0(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x40217b\n                                    g47 = 1;\n                                    v8 = v35;\n                                    v9 = v24;\n                                    v10 = v25;\n                                    v31 = v33;\n                                    v27 = v29;\n                                    v19 = v21;\n                                    v11 = v13;\n                                    v12 = v17;\n                                }\n                            }\n                        } else {\n                            if (v41 == 110) {\n                                // 0x402380\n                                if ((int32_t)v13 != 0) {\n                                    // 0x403780\n                                    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"cannot split in more than one way\", 5));\n                                    // 0x403795\n                                    function_404cf0(1);\n                                    // UNREACHABLE\n                                }\n                                int16_t * v48 = *__ctype_b_loc(); // 0x40238e\n                                int64_t v49 = (int64_t)g80; // 0x402391\n                                int64_t v50 = (int64_t)v48 + 1; // 0x4023b2\n                                int64_t v51 = v49; // 0x4023b7\n                                int64_t v52 = v49; // 0x4023b7\n                                char * v53 = g80; // 0x4023b7\n                                if ((*(char *)(2 * (int64_t)*g80 + v50) & 32) != 0) {\n                                    int64_t v54 = v51 + 1;\n                                    char * v55 = (char *)v54;\n                                    g80 = v55;\n                                    v51 = v54;\n                                    v52 = v54;\n                                    v53 = v55;\n                                    while ((*(char *)(2 * (int64_t)*v55 + v50) & 32) != 0) {\n                                        // 0x4023a0\n                                        v54 = v51 + 1;\n                                        v55 = (char *)v54;\n                                        g80 = v55;\n                                        v51 = v54;\n                                        v52 = v54;\n                                        v53 = v55;\n                                    }\n                                }\n                                char * str = v53;\n                                int64_t v56 = v52;\n                                int64_t v57 = 2; // 0x4023c6\n                                int64_t v58 = v56;\n                                int64_t v59 = (int64_t)\"r/\";\n                                unsigned char v60 = *(char *)v58; // 0x4023c6\n                                char v61 = *(char *)v59; // 0x4023c6\n                                char v62 = v61; // 0x4023c6\n                                bool v63 = false; // 0x4023c6\n                                while (v60 == v61) {\n                                    // 0x4023b9\n                                    v57--;\n                                    int64_t v64 = v59 + v6; // 0x4023c6\n                                    int64_t v65 = v58 + v6; // 0x4023c6\n                                    v62 = v60;\n                                    v63 = true;\n                                    if (v57 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v58 = v65;\n                                    v59 = v64;\n                                    v60 = *(char *)v58;\n                                    v61 = *(char *)v59;\n                                    v62 = v61;\n                                    v63 = false;\n                                }\n                                unsigned char v66 = v62;\n                                char * str2; // 0x401ea0\n                                int64_t v67; // 0x401ea0\n                                if ((v60 >= v66 && !v63) != v60 < v66) {\n                                    // 0x402494\n                                    if (strncmp(str, \"l/\", 2) != 0) {\n                                        // 0x402494\n                                        str2 = g80;\n                                        v67 = 5;\n                                    } else {\n                                        char * v68 = (char *)(v56 + 2); // 0x4024be\n                                        g80 = v68;\n                                        str2 = v68;\n                                        v67 = 6;\n                                    }\n                                } else {\n                                    char * v69 = (char *)(v56 + 2); // 0x4023df\n                                    g80 = v69;\n                                    str2 = v69;\n                                    v67 = 7;\n                                }\n                                int64_t v70 = v67;\n                                char * found_char_pos = strchr(str2, 47); // 0x4023f2\n                                int64_t v71 = (int64_t)dcgettext(NULL, \"invalid number of chunks\", 5);\n                                if (found_char_pos == NULL) {\n                                    int64_t v72 = function_4079f0((int64_t)g80, 1, -1, (int64_t *)&g11, v71, 0); // 0x402710\n                                    v8 = v72;\n                                    v9 = v24;\n                                    v10 = v25;\n                                    v31 = v33;\n                                    v27 = v29;\n                                    v19 = 0;\n                                    v11 = v70;\n                                    v12 = v17;\n                                } else {\n                                    int64_t v73 = function_4079f0((int64_t)found_char_pos + 1, 1, -1, (int64_t *)&g11, v71, 0); // 0x40242c\n                                    int128_t v74 = v73; // 0x402438\n                                    v8 = v74;\n                                    v9 = v24;\n                                    v10 = v25;\n                                    v31 = v33;\n                                    v27 = v29;\n                                    v19 = 0;\n                                    v11 = v70;\n                                    v12 = v17;\n                                    if (found_char_pos != g80) {\n                                        // 0x402443\n                                        *found_char_pos = 0;\n                                        char * v75 = dcgettext(NULL, \"invalid chunk number\", 5); // 0x402453\n                                        int64_t v76 = function_4079f0((int64_t)g80, 1, v73, (int64_t *)&g11, (int64_t)v75, 0); // 0x402474\n                                        v8 = v74;\n                                        v9 = v76;\n                                        v10 = v25;\n                                        v31 = v33;\n                                        v27 = v29;\n                                        v19 = 0;\n                                        v11 = v70;\n                                        v12 = v17;\n                                    }\n                                }\n                            } else {\n                                if (v41 > 110) {\n                                    if (v41 != 116) {\n                                        if (v41 != 117) {\n                                          lab_0x403795:\n                                            // 0x403795\n                                            function_404cf0(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x401ff9\n                                        g45 = 1;\n                                        v8 = v35;\n                                        v9 = v24;\n                                        v10 = v25;\n                                        v31 = v33;\n                                        v27 = v29;\n                                        v19 = v21;\n                                        v11 = v13;\n                                        v12 = v17;\n                                    } else {\n                                        char * str3 = g80; // 0x401f9f\n                                        char v77 = *str3; // 0x401fa6\n                                        v43 = (int64_t)str3;\n                                        if (v77 == 0) {\n                                            // 0x403b12\n                                            error(1, (int32_t)\"empty record separator\" ^ (int32_t)\"empty record separator\", dcgettext(NULL, \"empty record separator\", 5));\n                                            v37 = v35;\n                                            v26 = v25;\n                                            v34 = v33;\n                                            v30 = v29;\n                                            v22 = v1;\n                                            v14 = v13;\n                                            v16 = v43;\n                                            v18 = v17;\n                                            goto lab_0x403b34;\n                                        }\n                                        int32_t v78 = v77; // 0x401fb7\n                                        if (*(char *)(v43 + 1) != 0) {\n                                            // 0x401fb9\n                                            v78 = 0;\n                                            if (strcmp(str3, \"\\\\0\") != 0) {\n                                                goto lab_0x403926;\n                                            }\n                                        }\n                                        int32_t v79 = v78;\n                                        int32_t v80 = g18; // 0x401fd0\n                                        if (v80 > -1 == (v80 != v79)) {\n                                            // 0x403904\n                                            error(1, (int32_t)\"multiple separator characters specified\" ^ (int32_t)\"multiple separator characters specified\", dcgettext(NULL, \"multiple separator characters specified\", 5));\n                                            goto lab_0x403926;\n                                        }\n                                        // 0x401fe2\n                                        g18 = v79;\n                                        v8 = v35;\n                                        v9 = v24;\n                                        v10 = v25;\n                                        v31 = v33;\n                                        v27 = v29;\n                                        v19 = v21;\n                                        v11 = v13;\n                                        v12 = v17;\n                                    }\n                                } else {\n                                    if (v41 != 108) {\n                                        // 0x403795\n                                        function_404cf0(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x402011\n                                    if ((int32_t)v13 != 0) {\n                                        // 0x403780\n                                        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"cannot split in more than one way\", 5));\n                                        // 0x403795\n                                        function_404cf0(1);\n                                        // UNREACHABLE\n                                    }\n                                    char * v81 = dcgettext(NULL, \"invalid number of lines\", 5); // 0x40202c\n                                    int64_t v82 = function_4079f0((int64_t)g80, 1, -1, (int64_t *)&g11, (int64_t)v81, 0); // 0x40204f\n                                    v8 = v82;\n                                    v9 = v24;\n                                    v10 = v25;\n                                    v31 = v33;\n                                    v27 = v29;\n                                    v19 = 0;\n                                    v11 = 3;\n                                    v12 = v17;\n                                }\n                            }\n                        }\n                        goto lab_0x401f40;\n                    }\n                } else {\n                    if (v41 < 58) {\n                        if (v41 <= 47) {\n                            if (v41 == -131) {\n                                // 0x402294\n                                function_407550((int64_t)g36, \"split\", \"GNU coreutils\", (int64_t)g22, \"Torbjorn Granlund\", \"Richard M. Stallman\");\n                                exit(0);\n                                // UNREACHABLE\n                            }\n                            if (v41 == -130) {\n                                // 0x4022d7\n                                function_404cf0(0);\n                                // UNREACHABLE\n                            }\n                            goto lab_0x403795;\n                        }\n                        uint32_t v83 = v44 == 0 ? 1 : v44; // 0x401f59\n                        v42 = v83;\n                        int32_t v84 = v13; // 0x4022e0\n                        if (v84 == 0) {\n                            goto lab_0x402301;\n                        } else {\n                            // 0x4022e5\n                            if (v84 != 4) {\n                                int64_t v85 = v23;\n                                error(0, 0, dcgettext(NULL, (char *)v85, 5));\n                                // 0x403795\n                                function_404cf0(1);\n                                // UNREACHABLE\n                            }\n                            int32_t v86 = v17; // 0x4022ef\n                            if (v86 == 0 || v83 == v86) {\n                                int64_t v87 = v35;\n                                v36 = v87;\n                                if (v87 >= 0x199999999999999a) {\n                                    goto lab_0x40380e_2;\n                                }\n                                int64_t v88 = (0x100000000 * v39 - 0x3000000000 >> 32) + 10 * v87; // 0x402756\n                                v36 = v87;\n                                if (v88 < v87) {\n                                    goto lab_0x40380e_2;\n                                }\n                                // 0x402762\n                                v8 = v88;\n                                v9 = v24;\n                                v10 = v25;\n                                v31 = v33;\n                                v27 = v29;\n                                v19 = v21;\n                                v11 = v13;\n                                v12 = v42;\n                                goto lab_0x401f40;\n                            } else {\n                                goto lab_0x402301;\n                            }\n                        }\n                    } else {\n                        if (v41 == 97) {\n                            char * v89 = dcgettext(NULL, \"invalid suffix length\", 5); // 0x402344\n                            int64_t v90 = function_4079f0((int64_t)g80, (int64_t)((int32_t)\"invalid suffix length\" ^ (int32_t)\"invalid suffix length\"), 0x1fffffffffffffff, (int64_t *)&g11, (int64_t)v89, 0); // 0x402367\n                            g56 = v90;\n                            v8 = v35;\n                            v9 = v24;\n                            v10 = v25;\n                            v31 = v33;\n                            v27 = v29;\n                            v19 = 0;\n                            v11 = v13;\n                            v12 = v17;\n                            goto lab_0x401f40;\n                        } else {\n                            if (v41 > 97) {\n                                if (v41 != 98) {\n                                    // 0x402190\n                                    v38 = (int64_t)\"0123456789\";\n                                    if (v41 != 100) {\n                                        // 0x403795\n                                        function_404cf0(1);\n                                        // UNREACHABLE\n                                    }\n                                    goto lab_0x40219e;\n                                } else {\n                                    // 0x4020e1\n                                    if ((int32_t)v13 != 0) {\n                                        // 0x403780\n                                        error(0, 0, dcgettext(NULL, (char *)(int64_t)\"cannot split in more than one way\", 5));\n                                        // 0x403795\n                                        function_404cf0(1);\n                                        // UNREACHABLE\n                                    }\n                                    char * v91 = dcgettext(NULL, \"invalid number of bytes\", 5); // 0x4020fc\n                                    v8 = function_4079f0((int64_t)g80, 1, 0x7fffffffffffffff, (int64_t *)\"bEGKkMmPTYZ0\", (int64_t)v91, 0);\n                                    v9 = v24;\n                                    v10 = v25;\n                                    v31 = v33;\n                                    v27 = v29;\n                                    v19 = 0;\n                                    v11 = 1;\n                                    v12 = v17;\n                                    goto lab_0x401f40;\n                                }\n                            } else {\n                                if (v41 != 67) {\n                                    // 0x403795\n                                    function_404cf0(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x402231\n                                if ((int32_t)v13 != 0) {\n                                    // 0x403780\n                                    error(0, 0, dcgettext(NULL, (char *)(int64_t)\"cannot split in more than one way\", 5));\n                                    // 0x403795\n                                    function_404cf0(1);\n                                    // UNREACHABLE\n                                }\n                                char * v92 = dcgettext(NULL, \"invalid number of bytes\", 5); // 0x40224c\n                                v8 = function_4079f0((int64_t)g80, 1, 0x7fffffffffffffff, (int64_t *)\"bEGKkMmPTYZ0\", (int64_t)v92, 0);\n                                v9 = v24;\n                                v10 = v25;\n                                v31 = v33;\n                                v27 = v29;\n                                v19 = 0;\n                                v11 = 2;\n                                v12 = v17;\n                                goto lab_0x401f40;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x4024ca:\n    if (v24 != 0) {\n        // 0x4024d2\n        v23 = (int64_t)\"--filter does not process a chunk extracted to stdout\";\n        if (g66 != NULL) {\n          lab_0x403780:\n            // 0x403780\n            error(0, 0, dcgettext(NULL, (char *)v23, 5));\n            // 0x403795\n            function_404cf0(1);\n            // UNREACHABLE\n        }\n    }\n    int128_t v93 = 1000; // 0x4024e3\n    int64_t v94 = 3; // 0x4024e3\n    if ((int32_t)v13 != 0) {\n        // 0x4024e9\n        v93 = v35;\n        v94 = v13;\n        if ((int64_t)v35 == 0) {\n            int64_t v95 = function_406fc0((int64_t)&g2); // 0x403ad9\n            char * v96 = dcgettext((char *)((int32_t)&g2 ^ (int32_t)&g2), \"invalid number of lines\", 5); // 0x403aed\n            error((int32_t)&g2 ^ (int32_t)&g2 ^ (int32_t)&g2 ^ (int32_t)&g2, (int32_t)\"invalid number of lines\" ^ (int32_t)\"invalid number of lines\", \"%s: %s\", v96, (char *)v95);\n            function_404cf0(1);\n            // UNREACHABLE\n        }\n    }\n    uint128_t v97 = v93;\n    if (g18 < 0) {\n        // 0x4024fe\n        g18 = 10;\n    }\n    int64_t v98 = v94 + 0xfffffffb; // 0x40250f\n    int64_t v99 = v98 & 0xffffffff; // 0x40250f\n    int64_t v100; // 0x401ea0\n    int64_t v101; // 0x401ea0\n    int64_t v102; // 0x401ea0\n    int64_t v103; // 0x401ea0\n    int64_t v104; // 0x401ea0\n    int64_t v105; // 0x401ea0\n    int64_t v106; // 0x401ea0\n    int64_t v107; // 0x401ea0\n    int64_t v108; // 0x401ea0\n    int64_t v109; // 0x401ea0\n    int64_t v110; // 0x401ea0\n    int64_t v111; // 0x401ea0\n    int64_t v112; // 0x401ea0\n    int64_t v113; // 0x401ea0\n    int64_t oact; // bp-216, 0x401ea0\n    int32_t v114; // 0x401ea0\n    int32_t v115; // 0x401ea0\n    int32_t v116; // 0x401ea0\n    int32_t v117; // 0x401ea0\n    int64_t * v118; // 0x401ea0\n    int64_t * v119; // 0x401ea0\n    int128_t v120; // 0x401ea0\n    int128_t v121; // 0x401ea0\n    if (g55 == NULL) {\n        int64_t v122 = v97; // 0x40276f\n        v107 = v122;\n        v121 = v3;\n        v115 = v25;\n        v119 = v33;\n        v117 = v29;\n        v112 = a2;\n        v110 = v1;\n        v108 = v122;\n        v101 = v99;\n        v103 = v94;\n        v105 = v17;\n        if ((int32_t)v98 < 3) {\n            goto lab_0x40277e;\n        } else {\n            goto lab_0x40252d;\n        }\n    } else {\n        // 0x40251c\n        g21 = 0;\n        v107 = v21;\n        if ((int32_t)v98 < 3) {\n            int64_t v123 = function_407a20((int64_t)g55, 0, 10, &oact, (int64_t *)&g11, v21); // 0x402812\n            int64_t v124 = v97; // 0x402817\n            v121 = v3;\n            v115 = v25;\n            v119 = v33;\n            v117 = v29;\n            v112 = a2;\n            v110 = v1;\n            v108 = v124;\n            v101 = v99;\n            v103 = v94;\n            v105 = v17;\n            if ((int32_t)v123 != 0) {\n                goto lab_0x40277e;\n            } else {\n                uint64_t v125 = oact; // 0x40282a\n                v121 = v3;\n                v115 = v25;\n                v119 = v33;\n                v117 = v29;\n                v112 = a2;\n                v110 = v1;\n                v108 = v124;\n                v101 = v99;\n                v103 = v94;\n                v105 = v17;\n                v120 = v3;\n                v114 = v25;\n                v118 = v33;\n                v116 = v29;\n                v111 = a2;\n                v109 = v1;\n                v113 = v124;\n                v106 = v125;\n                v100 = v99;\n                v102 = v94;\n                v104 = v17;\n                if (v125 <= -1 - v124 == v125 < v124) {\n                    goto lab_0x40376e;\n                } else {\n                    goto lab_0x40277e;\n                }\n            }\n        } else {\n            goto lab_0x40252d;\n        }\n    }\n  lab_0x40380e_2:\n    // 0x40380e\n    function_405350(v36, &oact);\n    error(1, (int32_t)\"line count option -%s%c... is too large\" ^ (int32_t)\"line count option -%s%c... is too large\", dcgettext(NULL, \"line count option -%s%c... is too large\", 5));\n    v23 = (int64_t)\"cannot split in more than one way\";\n    goto lab_0x403780;\n  lab_0x4035fe:;\n    int64_t v126 = function_406e40(0, 3, (int64_t)g53); // 0x40360c\n    error(1, *__errno_location(), dcgettext(NULL, \"%s: cannot determine file size\", 5));\n    int128_t v127; // 0x401ea0\n    int128_t v128 = v127; // 0x40363c\n    int32_t v129; // 0x401ea0\n    int32_t v130 = v129; // 0x40363c\n    int64_t v131; // 0x401ea0\n    int64_t v132 = v131; // 0x40363c\n    int64_t v133; // 0x401ea0\n    int64_t v134 = v133; // 0x40363c\n    int64_t v135 = v126; // 0x40363c\n    int64_t v136; // 0x401ea0\n    int64_t v137 = v136; // 0x40363c\n    int64_t v138; // 0x401ea0\n    int64_t v139 = v138; // 0x40363c\n    goto lab_0x403641;\n  lab_0x403b34:;\n    int64_t v1027 = function_406e40(0, 3, (int64_t)g53); // 0x403b42\n    error(1, *__errno_location(), \"%s\", (char *)v1027);\n    int64_t v775 = v37; // 0x403b60\n    int32_t v776 = v26; // 0x403b60\n    int64_t * v777 = v34; // 0x403b60\n    int32_t v778 = v30; // 0x403b60\n    int64_t v650; // 0x401ea0\n    int64_t v779 = v650; // 0x403b60\n    int64_t v780 = v22; // 0x403b60\n    int64_t v781 = v14; // 0x403b60\n    int64_t v782 = v16; // 0x403b60\n    int64_t v783 = v18; // 0x403b60\n    goto lab_0x403b65;\n  lab_0x4030a0_2:;\n    // 0x4030a0\n    int64_t v1029; // 0x401ea0\n    int64_t v1030 = function_406e40(0, 3, *(int64_t *)v1029); // 0x4030aa\n    int32_t * err_num4; // 0x401ea0\n    error(1, *err_num4, \"%s\", (char *)v1030);\n    int64_t v755; // 0x401ea0\n    int64_t v259 = v755; // 0x4030ca\n    int64_t v798; // 0x402e40\n    char v260 = v798; // 0x4030ca\n    int64_t v747; // 0x401ea0\n    int64_t v261 = v747; // 0x4030ca\n    int32_t v620; // 0x401ea0\n    int32_t v262 = v620; // 0x4030ca\n    int64_t * v811; // 0x401ea0\n    int64_t * v263 = v811; // 0x4030ca\n    int64_t v617; // 0x401ea0\n    int64_t v264 = v617; // 0x4030ca\n    int32_t * v265 = err_num4; // 0x4030ca\n    int64_t v1031; // 0x401ea0\n    int64_t v267 = v1031; // 0x4030ca\n    int64_t size; // 0x401ea0\n    int64_t v268 = size; // 0x4030ca\n    int64_t v269 = 1; // 0x4030ca\n    int64_t v730; // 0x401ea0\n    int64_t v270 = v730; // 0x4030ca\n    int64_t v807; // 0x401ea0\n    int64_t v271 = v807; // 0x4030ca\n    int64_t v272 = v1029; // 0x4030ca\n    int64_t data; // 0x401ea0\n    int64_t v273 = data; // 0x4030ca\n    goto lab_0x4030d0;\n  lab_0x402e61:;\n    // 0x402e61\n    int64_t v815; // 0x401ea0\n    int64_t v850 = v815; // 0x402e64\n    int64_t v849 = v807; // 0x402e64\n    char v808; // 0x401ea0\n    char v848 = v808; // 0x402e64\n    char v809; // 0x401ea0\n    char v847 = v809; // 0x402e64\n    int32_t * v816; // 0x401ea0\n    int32_t * v846 = v816; // 0x402e64\n    int32_t v810; // 0x401ea0\n    int32_t v845 = v810; // 0x402e64\n    int64_t * v844 = v811; // 0x402e64\n    int64_t v813; // 0x402e98\n    if (v813 == 0) {\n        // break -> 0x402e17\n        goto lab_0x402e17_3;\n    }\n    int64_t * v1032 = v811; // 0x402e76\n    int32_t v1033 = v810; // 0x402e76\n    int32_t * v1034 = v816; // 0x402e76\n    char v1035 = v809; // 0x402e76\n    char v1036 = v808; // 0x402e76\n    int64_t v814; // 0x401ea0\n    int64_t v1037 = v814; // 0x402e76\n    int64_t v1038 = v807 != v747 ? v807 + 1 : 1; // 0x402e76\n    int64_t v1039 = v815; // 0x402e76\n    goto lab_0x402e7a;\n  lab_0x402e7a:\n    // 0x402e7a\n    v850 = v1039;\n    v849 = v1038;\n    v848 = v1036;\n    v847 = v1035;\n    v846 = v1034;\n    v845 = v1033;\n    v844 = v1032;\n    int64_t * v799 = v1032; // 0x402e82\n    int32_t v800 = v1033; // 0x402e82\n    int32_t * v801 = v1034; // 0x402e82\n    char v802 = v1035; // 0x402e82\n    char v803 = v1036; // 0x402e82\n    int64_t v804 = v1038; // 0x402e82\n    int64_t v805 = v1039; // 0x402e82\n    int64_t v806 = v1037; // 0x402e82\n    if (v1037 == v798) {\n        // break -> 0x402e17\n        goto lab_0x402e17_3;\n    }\n    goto lab_0x402e84;\n  lab_0x403250:;\n    // 0x403250\n    int32_t * v818; // 0x401ea0\n    int32_t * v839 = v818; // 0x403263\n    char v819; // 0x401ea0\n    char v840 = v819; // 0x403263\n    int64_t v821; // 0x401ea0\n    int64_t v841 = v821; // 0x403263\n    int64_t v822; // 0x401ea0\n    int64_t v842 = v822; // 0x403263\n    int64_t v820; // 0x401ea0\n    bool v843 = *(int32_t *)v820 == 32 == (g66 != NULL); // 0x403263\n    goto lab_0x402f31;\n  lab_0x403088:;\n    // 0x403088\n    int64_t v827; // 0x401ea0\n    v1029 = v827;\n    int64_t v826; // 0x401ea0\n    v1031 = v826;\n    int32_t * v824; // 0x401ea0\n    err_num4 = v824;\n    if (*err_num4 != 32) {\n        goto lab_0x4030a0_2;\n    }\n    int32_t v834 = v810; // 0x40309a\n    int32_t * v835 = err_num4; // 0x40309a\n    char v825; // 0x401ea0\n    char v836 = v825; // 0x40309a\n    int64_t v837 = v1031; // 0x40309a\n    int64_t v838 = v1029; // 0x40309a\n    if (g66 == NULL) {\n        goto lab_0x4030a0_2;\n    }\n    goto lab_0x402f44;\n  lab_0x402f31:;\n    int32_t v1040 = !v843 ? 1 : 0x1000000 * v810 >> 24; // 0x402f40\n    v834 = v1040;\n    v835 = v839;\n    v836 = v840;\n    v837 = v841;\n    v838 = v842;\n    goto lab_0x402f44;\n  lab_0x4031a8:;\n    // 0x4031a8\n    int64_t v831; // 0x402edb\n    int64_t v1057 = function_406e40(0, 3, *(int64_t *)v831); // 0x4031b2\n    int32_t * v833; // 0x402ee4\n    uint32_t err_num6 = *v833; // 0x4031c9\n    error(1, err_num6, \"%s\", (char *)v1057);\n    goto lab_0x4031d8;\n  lab_0x402f44:;\n    int32_t v1041 = v834; // 0x402f49\n    int32_t * v1042 = v835; // 0x402f49\n    char v1043 = v836; // 0x402f49\n    int64_t v1044 = v837; // 0x402f49\n    int64_t v1045 = v838; // 0x402f49\n    if (v836 != 0) {\n        goto lab_0x4031d8;\n    } else {\n        goto lab_0x402f4f;\n    }\n  lab_0x4031d8:;\n    int64_t v1046 = v831;\n    int32_t * err_num5 = v833;\n    int64_t * v1047 = (int64_t *)(v1046 + 16); // 0x4031d8\n    if ((int32_t)function_407e60(*v1047, (int64_t)err_num6) != 0) {\n        int64_t v1048 = function_406e40(0, 3, *(int64_t *)v1046); // 0x4037ee\n        error(1, *err_num5, \"%s\", (char *)v1048);\n        v36 = v747;\n        goto lab_0x40380e_2;\n    }\n    // 0x4031e9\n    *v1047 = 0;\n    *(int32_t *)(v1046 + 8) = -2;\n    v1041 = v810;\n    v1042 = err_num5;\n    char v832; // 0x402ee0\n    v1043 = v832;\n    int64_t v828; // 0x401ea0\n    v1044 = v828;\n    v1045 = v1046;\n    goto lab_0x402f4f;\n  lab_0x402f4f:;\n    int64_t v1049 = v1045;\n    int64_t v1050 = v1044;\n    char v1051 = v1043;\n    int32_t * v1052 = v1042;\n    int32_t v1053 = v1041;\n    v1032 = v811;\n    v1033 = v1053;\n    v1034 = v1052;\n    v1035 = v1051;\n    v1036 = v808;\n    v1037 = v1050;\n    v1038 = v807;\n    v1039 = v1049;\n    int64_t v787; // 0x401ea0\n    int64_t v788; // 0x401ea0\n    int32_t v786; // 0x401ea0\n    int64_t * v785; // 0x401ea0\n    int64_t v789; // 0x401ea0\n    if (v813 != 0) {\n        int32_t v1054 = (int32_t)(int64_t)v811 + 1; // 0x402f58\n        int64_t * v1055 = (int64_t *)(int64_t)v1054;\n        v1032 = v1055;\n        v1033 = v1053;\n        v1034 = v1052;\n        v1035 = v1051;\n        v1036 = v808;\n        v1037 = v1050;\n        v1038 = v807;\n        v1039 = v1049;\n        if (v747 == (int64_t)v1054) {\n            char v1056 = v1053; // 0x402f6e\n            v1032 = NULL;\n            v1033 = 0;\n            v1034 = v1052;\n            v1035 = v1051;\n            v1036 = v1056;\n            v1037 = v1050;\n            v1038 = v807;\n            v1039 = v1049;\n            v785 = v1055;\n            v786 = v1053;\n            v787 = v1049;\n            v788 = data;\n            v789 = v747;\n            if (v1056 == 0) {\n                goto lab_0x40335c;\n            }\n        }\n    }\n    goto lab_0x402e7a;\n  lab_0x403b65:;\n    int64_t v1028 = function_406e40(0, 3, (int64_t)g53); // 0x403b73\n    error(1, *__errno_location(), \"%s\", (char *)v1028);\n    int64_t v585 = v775; // 0x403b91\n    int32_t v587 = v776; // 0x403b91\n    int64_t * v589 = v777; // 0x403b91\n    int32_t v591 = v778; // 0x403b91\n    int64_t v593 = v779; // 0x403b91\n    int64_t v596 = v780; // 0x403b91\n    int64_t v598 = v781; // 0x403b91\n    int64_t v600 = v782; // 0x403b91\n    int64_t v602 = v783; // 0x403b91\n    goto lab_0x403b96;\n  lab_0x40379f:;\n    // 0x40379f\n    int128_t v186; // 0x401ea0\n    int128_t v150 = v186; // 0x4037a6\n    int32_t v345; // 0x401ea0\n    int32_t v151 = v345; // 0x4037a6\n    int64_t * v344; // 0x401ea0\n    int64_t * v152 = v344; // 0x4037a6\n    int32_t v343; // 0x401ea0\n    int32_t v153 = 0x1000000 * (v343 % 256) / 0x1000000; // 0x4037a6\n    int64_t v342; // 0x401ea0\n    int64_t v154 = v342; // 0x4037a6\n    char v155 = 0; // 0x4037a6\n    int64_t v187; // 0x401ea0\n    int64_t v156 = v187; // 0x4037a6\n    int64_t v157 = -1; // 0x4037a6\n    int64_t v158 = v342; // 0x4037a6\n    int64_t v347; // 0x402c30\n    int64_t v159 = v347 + v342; // 0x4037a6\n    int64_t v337; // 0x401ea0\n    int64_t v160 = v337; // 0x4037a6\n    int64_t v188; // 0x401ea0\n    int64_t v161 = v188; // 0x4037a6\n    int64_t v340; // 0x401ea0\n    int64_t v162 = v340; // 0x4037a6\n    int64_t v339; // 0x401ea0\n    int64_t v163 = v339; // 0x4037a6\n    int64_t v338; // 0x401ea0\n    int64_t v164 = v338; // 0x4037a6\n    goto lab_0x402bee;\n  lab_0x402fc5_3:\n    // 0x402fc5\n    if (close(0) == 0) {\n        // 0x402fd4\n        function_4046f0(0, g19, g65, (int64_t)g58);\n        return 0;\n    }\n    int64_t v525 = function_406e40(0, 3, (int64_t)g53); // 0x403a09\n    error(1, *__errno_location(), \"%s\", (char *)v525);\n    int64_t v420; // 0x401ea0\n    int64_t v526 = v420; // 0x403a27\n    int32_t v422; // 0x401ea0\n    int32_t v527 = v422; // 0x403a27\n    int64_t * v423; // 0x401ea0\n    int64_t * v528 = v423; // 0x403a27\n    int32_t v425; // 0x401ea0\n    int32_t v529 = v425; // 0x403a27\n    int64_t v427; // 0x401ea0\n    int64_t v530 = v427; // 0x403a27\n    int64_t v531 = v525; // 0x403a27\n    int64_t v429; // 0x401ea0\n    int64_t v532 = v429; // 0x403a27\n    int64_t v431; // 0x401ea0\n    int64_t v533 = v431; // 0x403a27\n    int64_t v432; // 0x401ea0\n    int64_t v534 = v432; // 0x403a27\n    int64_t v433; // 0x401ea0\n    int64_t v535 = v433; // 0x403a27\n    int64_t v434; // 0x401ea0\n    int64_t v536 = v434; // 0x403a27\n    goto lab_0x403a2c;\n  lab_0x403528:;\n    // 0x403528\n    int64_t v457; // 0x401ea0\n    int64_t v463; // 0x4034d7\n    int64_t v628 = v463 + v457; // 0x403528\n    int64_t v421; // 0x401ea0\n    v420 = v421;\n    int32_t v417; // 0x401ea0\n    v422 = v417;\n    int64_t * v424; // 0x401ea0\n    v423 = v424;\n    int32_t v426; // 0x401ea0\n    v425 = v426;\n    int64_t v428; // 0x401ea0\n    v427 = v428;\n    v429 = v463;\n    v431 = -1;\n    int64_t v464; // 0x401ea0\n    v432 = v464;\n    int64_t v418; // 0x40349d\n    v433 = v418;\n    v434 = v428;\n    int64_t v435 = v464; // 0x4034b1\n    int64_t v436 = v463; // 0x4034b1\n    int64_t v437 = v628; // 0x4034b1\n    int64_t v438 = -1; // 0x4034b1\n    if (v628 >= v418) {\n        goto lab_0x402fc5_3;\n    }\n    goto lab_0x4034b7;\n  lab_0x4034fc:;\n    // 0x4034fc\n    int32_t * err_num3; // 0x4034e8\n    error(1, *err_num3, \"%s\", (char *)function_406e40(0, 3, (int64_t)\"-\"));\n    v464 = (int64_t)err_num3;\n    goto lab_0x403528;\n  lab_0x403956:\n    // 0x403956\n    function_406fc0(v15);\n    int64_t v629 = (int64_t)\"invalid suffix %s, contains directory separator\"; // 0x40396b\n    goto lab_0x403883;\n  lab_0x403926:\n    // 0x403926\n    function_406fc0(v43);\n    error(1, (int32_t)\"multi-character separator %s\" ^ (int32_t)\"multi-character separator %s\", dcgettext(NULL, \"multi-character separator %s\", 5));\n    v15 = v43;\n    goto lab_0x403956;\n  lab_0x401f40:\n    // 0x401f40\n    v32 = v31;\n    v28 = v27;\n    v20 = v19;\n    goto lab_0x401f40_2;\n  lab_0x40219e:;\n    int64_t accept = v38;\n    char * str4 = g80; // 0x40219e\n    int64_t v852 = (int64_t)str4;\n    int64_t * v853 = (int64_t *)v40; // 0x4021a5\n    *(int64_t *)&g20 = accept;\n    v8 = v35;\n    v9 = v24;\n    v10 = v25;\n    v31 = v853;\n    v27 = v29;\n    v19 = v21;\n    v11 = v13;\n    v12 = v17;\n    int64_t v854 = v852; // 0x4021b4\n    int32_t v204; // 0x401ea0\n    if (str4 != NULL) {\n        int64_t v855 = -1; // 0x4021c3\n        int64_t v856 = 0; // 0x4021c3\n        while (v855 != 0) {\n            int64_t v857 = v854;\n            v855--;\n            v854 = v857 + v6;\n            v856 = v855;\n            if (*(char *)v857 == 0) {\n                // break -> \n                break;\n            }\n            v856 = 0;\n        }\n        int64_t v858 = -2 - v856; // 0x4021cb\n        if (v858 != (int64_t)strspn(str4, (char *)accept)) {\n            // 0x40385e\n            function_406fc0(v852);\n            v629 = (int64_t)\"%s: invalid start value for hexadecimal suffix\";\n            v204 = 5;\n            if (v41 == 100) {\n                goto lab_0x4038ec;\n            } else {\n                goto lab_0x403883;\n            }\n        }\n        int64_t v859 = v852; // 0x4021ed\n        if (*str4 == 48) {\n            int64_t v860 = v852 + 1; // 0x4021ef\n            int64_t v861 = v860; // 0x4021f8\n            v859 = v852;\n            if (*(char *)v860 != 0) {\n                int64_t v862 = v861;\n                char * v863 = (char *)v862; // 0x402209\n                g80 = v863;\n                v859 = v862;\n                while (*v863 == 48) {\n                    int64_t v864 = v862 + 1; // 0x402200\n                    v861 = v864;\n                    v859 = v862;\n                    if (*(char *)v864 == 0) {\n                        // break -> 0x402218\n                        break;\n                    }\n                    v862 = v861;\n                    v863 = (char *)v862;\n                    g80 = v863;\n                    v859 = v862;\n                }\n            }\n        }\n        // 0x402218\n        g55 = (char *)v859;\n        v8 = v35;\n        v9 = v24;\n        v10 = v25;\n        v31 = v853;\n        v27 = v858;\n        v19 = v21;\n        v11 = v13;\n        v12 = v17;\n    }\n    goto lab_0x401f40;\n  lab_0x402301:\n    // 0x402301\n    v8 = 0x100000000 * v39 - 0x3000000000 >> 32;\n    v9 = v24;\n    v10 = v25;\n    v31 = v33;\n    v27 = v29;\n    v19 = v21;\n    v11 = 4;\n    v12 = v42;\n    goto lab_0x401f40;\n  lab_0x40277e:;\n    int64_t v865 = v105;\n    int64_t v866 = v103;\n    int64_t v867 = v101;\n    int64_t v868; // 0x401ea0\n    int64_t v869 = v868;\n    int64_t v870; // 0x401ea0\n    int64_t v871 = v870;\n    int64_t v872 = v108;\n    int64_t v873 = v110;\n    int64_t v874 = v112;\n    int64_t v875; // 0x401ea0\n    int64_t v876 = v875;\n    char v877; // 0x401ea0\n    char v878 = v877;\n    int32_t * v879; // 0x401ea0\n    int32_t * v880 = v879;\n    int64_t v881; // 0x401ea0\n    int64_t v882 = v881;\n    int32_t v883 = v117;\n    int64_t * v884 = v119;\n    int32_t v885 = v115;\n    int128_t v886 = v121;\n    int64_t v887 = g20; // 0x40278d\n    int64_t v888 = -1;\n    int64_t v889 = 0; // 0x40278d\n    while (v888 != 0) {\n        int64_t v890 = v887;\n        int64_t v891 = v888 - 1; // 0x40278d\n        int64_t v892 = v891; // 0x40278d\n        v887 = v890 + v6;\n        v889 = v891;\n        if (*(char *)v890 == 0) {\n            // break -> \n            break;\n        }\n        v888 = v892;\n        v889 = 0;\n    }\n    uint64_t v893 = -2 - v889; // 0x402795\n    int64_t v894 = v872; // 0x4027ae\n    int64_t v895 = 0; // 0x4027ae\n    if (v893 <= v872) {\n        uint64_t v896 = v894 / v893;\n        int64_t v897 = 1; // 0x4027c0\n        v894 = v896;\n        int64_t v898 = v897; // 0x4027ca\n        v895 = v897;\n        while (v893 <= v896) {\n            // 0x4027bb\n            v896 = v894 / v893;\n            v897 = v898 + 1;\n            v894 = v896;\n            v898 = v897;\n            v895 = v897;\n        }\n    }\n    int64_t v899 = v872 % v893 != 0; // 0x4027a5\n    int32_t v900 = g56; // 0x4027cc\n    g21 = 0;\n    int64_t v901 = v895 + v899; // 0x4027de\n    int128_t v902 = v886; // 0x4027e5\n    int32_t v903 = v885; // 0x4027e5\n    int64_t * v904 = v884; // 0x4027e5\n    int32_t v905 = v883; // 0x4027e5\n    int64_t v906 = v882; // 0x4027e5\n    int32_t * v907 = v880; // 0x4027e5\n    char v908 = v878; // 0x4027e5\n    int64_t v909 = v876; // 0x4027e5\n    int64_t v910 = v873; // 0x4027e5\n    int64_t v911 = v899; // 0x4027e5\n    int64_t v912 = v872; // 0x4027e5\n    int64_t v913 = v871; // 0x4027e5\n    int64_t v914 = v869; // 0x4027e5\n    int64_t v915 = v867; // 0x4027e5\n    int64_t v916 = v866; // 0x4027e5\n    int64_t v917 = v901; // 0x4027e5\n    int64_t v918 = v865; // 0x4027e5\n    int32_t v919; // 0x401ea0\n    int64_t v920; // 0x401ea0\n    int64_t v921; // 0x401ea0\n    int64_t v922; // 0x401ea0\n    int64_t v923; // 0x401ea0\n    int64_t v924; // 0x401ea0\n    int64_t v925; // 0x401ea0\n    int64_t v926; // 0x401ea0\n    int64_t v927; // 0x401ea0\n    int64_t v928; // 0x401ea0\n    int64_t v929; // 0x401ea0\n    char v930; // 0x401ea0\n    int64_t v931; // 0x401ea0\n    int64_t v932; // 0x401ea0\n    int32_t * v933; // 0x401ea0\n    int32_t v934; // 0x401ea0\n    int32_t v935; // 0x401ea0\n    int64_t * v936; // 0x401ea0\n    int128_t v937; // 0x401ea0\n    if (v900 == 0) {\n        goto lab_0x40253e;\n    } else {\n        // 0x4027eb\n        v919 = v900;\n        v937 = v886;\n        v934 = v885;\n        v936 = v884;\n        v935 = v883;\n        v931 = v882;\n        v933 = v880;\n        v930 = v878;\n        v932 = v876;\n        v928 = v873;\n        v926 = v899;\n        v927 = v872;\n        v920 = v871;\n        v921 = v869;\n        v922 = v867;\n        v923 = v866;\n        v924 = v901;\n        v925 = v865;\n        if (v901 > (int64_t)v900) {\n            // 0x403a93\n            error(1, (int32_t)\"the suffix length needs to be at least %lu\" ^ (int32_t)\"the suffix length needs to be at least %lu\", dcgettext(NULL, \"the suffix length needs to be at least %lu\", 5));\n            v929 = (int32_t)\"the suffix length needs to be at least %lu\" ^ (int32_t)\"the suffix length needs to be at least %lu\";\n            goto lab_0x403ab8;\n        } else {\n            goto lab_0x4027f4;\n        }\n    }\n  lab_0x40252d:\n    // 0x40252d\n    v902 = v3;\n    v903 = v25;\n    v904 = v33;\n    v905 = v29;\n    v910 = v1;\n    v911 = v40;\n    v912 = v107;\n    v915 = v99;\n    v916 = v94;\n    v917 = 0;\n    v918 = v17;\n    v919 = g56;\n    v937 = v3;\n    v934 = v25;\n    v936 = v33;\n    v935 = v29;\n    v928 = v1;\n    v926 = v40;\n    v927 = v107;\n    v922 = v99;\n    v923 = v94;\n    v924 = 0;\n    v925 = v17;\n    if (g56 != 0) {\n        goto lab_0x4027f4;\n    } else {\n        goto lab_0x40253e;\n    }\n  lab_0x40253e:;\n    int64_t v938 = v917;\n    int32_t v939 = v938 >= 2 ? (int32_t)v938 : 2; // 0x40254b\n    g56 = v939;\n    int32_t v940 = v939; // 0x40254b\n    int128_t v941 = v902; // 0x40254b\n    int32_t v942 = v903; // 0x40254b\n    int64_t * v943 = v904; // 0x40254b\n    int32_t v944 = v905; // 0x40254b\n    int64_t v945 = v906; // 0x40254b\n    int32_t * v946 = v907; // 0x40254b\n    char v947 = v908; // 0x40254b\n    int64_t v948 = v909; // 0x40254b\n    int64_t v949 = v910; // 0x40254b\n    int64_t v950 = v911; // 0x40254b\n    int64_t v951 = v912; // 0x40254b\n    int64_t v952 = v913; // 0x40254b\n    int64_t v953 = v914; // 0x40254b\n    int64_t v954 = v915; // 0x40254b\n    int64_t v955 = v916; // 0x40254b\n    int64_t v956 = v938; // 0x40254b\n    int64_t v957 = v918; // 0x40254b\n    goto lab_0x402552;\n  lab_0x4027f4:\n    // 0x4027f4\n    g21 = 0;\n    v940 = v919;\n    v941 = v937;\n    v942 = v934;\n    v943 = v936;\n    v944 = v935;\n    v945 = v931;\n    v946 = v933;\n    v947 = v930;\n    v948 = v932;\n    v949 = v928;\n    v950 = v926;\n    v951 = v927;\n    v952 = v920;\n    v953 = v921;\n    v954 = v922;\n    v955 = v923;\n    v956 = v924;\n    v957 = v925;\n    goto lab_0x402552;\n  lab_0x402552:;\n    int64_t v958 = v957;\n    int64_t v959 = v956;\n    int64_t v960 = v955;\n    int64_t v961 = v954;\n    int64_t v962 = v953;\n    int64_t v642 = v952;\n    int64_t v641 = v951;\n    int64_t v963 = v950;\n    int64_t v640 = v948;\n    char v964 = v947;\n    int32_t * v965 = v946;\n    int64_t v635 = v945;\n    int32_t v966 = v944;\n    int64_t * v967 = v943;\n    int32_t v633 = v942;\n    int128_t v631 = v941;\n    int32_t v968 = v940; // 0x4025c4\n    if (v949 > (int64_t)g31) {\n        // 0x40255c\n        int64_t v969; // 0x401ea0\n        int64_t v970 = v969;\n        int64_t v971; // 0x402552\n        int64_t v972 = 0x100000000 * v971 >> 29; // 0x402562\n        int64_t v973 = v972 + v970;\n        int64_t v974 = *(int64_t *)v973; // 0x40256a\n        g31 = &g32;\n        g53 = (char *)v974;\n        int64_t v975; // 0x401ea0\n        if (v975 > (int64_t)&g32) {\n            int64_t v976 = *(int64_t *)(v973 + 8); // 0x40257f\n            g31 = &g33;\n            g59 = (char *)v976;\n            v929 = v972;\n            if (v975 > (int64_t)&g33) {\n                goto lab_0x403ab8;\n            } else {\n                goto lab_0x40259c;\n            }\n        } else {\n            goto lab_0x40259c;\n        }\n    } else {\n        goto lab_0x40259c;\n    }\n  lab_0x40376e:\n    // 0x40376e\n    v121 = v120;\n    v115 = v114;\n    v119 = v118;\n    v117 = v116;\n    int64_t v331; // 0x401ea0\n    v881 = v331;\n    int32_t * v332; // 0x401ea0\n    v879 = v332;\n    char v333; // 0x401ea0\n    v877 = v333;\n    int64_t v334; // 0x401ea0\n    v875 = v334;\n    v112 = v111;\n    v110 = v109;\n    v108 = v106 + v113;\n    int64_t v335; // 0x401ea0\n    v870 = v335;\n    int64_t v336; // 0x401ea0\n    v868 = v336;\n    v101 = v100;\n    v103 = v102;\n    v105 = v104;\n    goto lab_0x40277e;\n  lab_0x40259c:\n    // 0x40259c\n    if (g55 != NULL) {\n        int64_t v977 = (int64_t)g55; // 0x4025b8\n        int64_t v978 = -1; // 0x4025b8\n        int64_t v979 = 0; // 0x4025b8\n        while (v978 != 0) {\n            int64_t v980 = v977;\n            v978--;\n            v977 = v980 + v6;\n            v979 = v978;\n            if (*(char *)v980 == 0) {\n                // break -> \n                break;\n            }\n            v979 = 0;\n        }\n        if (-2 - v979 > (int64_t)v968) {\n            // 0x403780\n            error(0, 0, dcgettext(NULL, (char *)(int64_t)\"numerical suffix start value is too large for the suffix length\", 5));\n            // 0x403795\n            function_404cf0(1);\n            // UNREACHABLE\n        }\n    }\n    // 0x4025d1\n    if (strcmp(g53, \"-\") == 0) {\n        goto lab_0x4025ff;\n    } else {\n        // 0x4025e9\n        if ((int32_t)function_405260(0, (int64_t)g53, 0, 0) < 0) {\n            goto lab_0x4039a1;\n        } else {\n            goto lab_0x4025ff;\n        }\n    }\n  lab_0x403ab8:\n    // 0x403ab8\n    function_406fc0(*(int64_t *)(v874 + 16 + v929));\n    v629 = (int64_t)\"extra operand %s\";\n    goto lab_0x403883;\n  lab_0x4025ff:;\n    // 0x4025ff\n    int64_t v484; // 0x401ea0\n    int64_t v691; // 0x401ea0\n    int64_t v507; // 0x401ea0\n    int64_t v486; // 0x401ea0\n    int64_t v692; // 0x401ea0\n    int64_t v508; // 0x401ea0\n    int64_t v693; // 0x401ea0\n    int64_t v509; // 0x401ea0\n    int64_t v488; // 0x401ea0\n    int64_t v694; // 0x401ea0\n    int64_t v510; // 0x401ea0\n    int64_t v695; // 0x401ea0\n    int64_t v511; // 0x401ea0\n    int64_t v489; // 0x401ea0\n    int64_t v696; // 0x401ea0\n    int64_t v512; // 0x401ea0\n    int64_t v480; // 0x401ea0\n    int64_t v689; // 0x401ea0\n    int64_t v505; // 0x401ea0\n    int64_t v482; // 0x401ea0\n    int64_t v690; // 0x401ea0\n    int64_t v506; // 0x401ea0\n    int64_t v477; // 0x401ea0\n    int64_t v687; // 0x401ea0\n    int64_t v478; // 0x401ea0\n    int64_t v686; // 0x401ea0\n    int64_t v503; // 0x401ea0\n    int64_t v479; // 0x401ea0\n    int64_t v688; // 0x401ea0\n    int64_t v504; // 0x401ea0\n    char v473; // 0x401ea0\n    char v684; // 0x401ea0\n    char v501; // 0x401ea0\n    int64_t v470; // 0x401ea0\n    int64_t v634; // 0x401ea0\n    int64_t v682; // 0x401ea0\n    int64_t v499; // 0x401ea0\n    int64_t v475; // 0x401ea0\n    int64_t v685; // 0x401ea0\n    int64_t v502; // 0x401ea0\n    int32_t * v471; // 0x401ea0\n    int32_t * v683; // 0x401ea0\n    int32_t * v500; // 0x401ea0\n    int32_t v467; // 0x401ea0\n    int32_t v632; // 0x401ea0\n    int32_t v679; // 0x401ea0\n    int32_t v496; // 0x401ea0\n    int32_t v469; // 0x401ea0\n    int32_t v681; // 0x401ea0\n    int32_t v498; // 0x401ea0\n    int64_t * v468; // 0x401ea0\n    int64_t * v680; // 0x401ea0\n    int64_t * v497; // 0x401ea0\n    int128_t v466; // 0x401ea0\n    int128_t v678; // 0x401ea0\n    int128_t v630; // 0x401ea0\n    int128_t v495; // 0x401ea0\n    if (__fxstat(1, 0, (struct stat *)&g48) != 0) {\n        int64_t v981 = function_406e40(0, 3, (int64_t)g53); // 0x40397e\n        error(1, *__errno_location(), \"%s\", (char *)v981);\n        goto lab_0x4039a1;\n    } else {\n        // 0x402618\n        if (v633 == 0) {\n            // branch -> 0x402649\n        }\n        int32_t v982 = v633;\n        int64_t v983 = v631;\n        uint64_t v984 = (int64_t)v982; // 0x40264e\n        int64_t v985 = v984 + v983; // 0x402657\n        uint64_t v986 = v983 - 1 + function_407690(v985); // 0x402661\n        int64_t v987 = v986 - v986 % v983; // 0x40267b\n        v678 = 0x7fffffffffffffff;\n        v679 = v982;\n        v680 = v967;\n        v681 = v966;\n        v682 = v987;\n        v683 = v965;\n        v684 = v964;\n        v685 = v640;\n        v686 = v983;\n        v687 = -1;\n        v688 = v985;\n        v689 = v963;\n        v690 = v641;\n        v691 = v642;\n        v692 = v962;\n        v693 = v961;\n        v694 = v960;\n        v695 = v959;\n        v696 = v958;\n        if ((int32_t)v961 < 2) {\n            int32_t v988 = lseek(0, 0, SEEK_CUR); // 0x402856\n            int64_t v989 = v988; // 0x402856\n            v630 = 0x7fffffffffffffff;\n            v632 = v982;\n            v634 = v987;\n            if (v988 < 0) {\n                goto lab_0x4039e2;\n            } else {\n                int64_t v990 = 0;\n                int64_t v991 = function_406fe0(0, v990 + v987, v984 - v990); // 0x402898\n                v495 = 0x7fffffffffffffff;\n                v496 = v982;\n                v497 = v967;\n                v498 = v966;\n                v499 = v987;\n                v500 = v965;\n                v501 = v964;\n                v502 = v640;\n                v503 = v989;\n                v504 = 0;\n                v505 = v963;\n                v506 = v641;\n                v507 = v642;\n                v508 = v962;\n                v509 = v990;\n                v510 = v960;\n                v511 = v987;\n                v512 = v958;\n                while (v991 != 0) {\n                    // 0x402873\n                    v127 = 0x7fffffffffffffff;\n                    v129 = v982;\n                    v131 = v987;\n                    v133 = v640;\n                    v136 = v641;\n                    v138 = v642;\n                    if (v991 == -1) {\n                        goto lab_0x4035fe;\n                    }\n                    int64_t v992 = v991 + v990; // 0x40287d\n                    int64_t v993 = v992; // 0x402886\n                    v466 = 0x7fffffffffffffff;\n                    v467 = v982;\n                    v468 = v967;\n                    v469 = v966;\n                    v470 = v987;\n                    v471 = v965;\n                    v473 = v964;\n                    v475 = v640;\n                    v477 = v992;\n                    v478 = v989;\n                    v479 = 0;\n                    v480 = v963;\n                    v482 = v641;\n                    v484 = v642;\n                    v486 = v962;\n                    v488 = v960;\n                    v489 = v958;\n                    if (v992 >= v984) {\n                        goto lab_0x40357b;\n                    }\n                    v990 = v993;\n                    v991 = function_406fe0(0, v990 + v987, v984 - v990);\n                    v495 = 0x7fffffffffffffff;\n                    v496 = v982;\n                    v497 = v967;\n                    v498 = v966;\n                    v499 = v987;\n                    v500 = v965;\n                    v501 = v964;\n                    v502 = v640;\n                    v503 = v989;\n                    v504 = 0;\n                    v505 = v963;\n                    v506 = v641;\n                    v507 = v642;\n                    v508 = v962;\n                    v509 = v990;\n                    v510 = v960;\n                    v511 = v987;\n                    v512 = v958;\n                }\n                goto lab_0x4028a2;\n            }\n        } else {\n            goto lab_0x40268d;\n        }\n    }\n  lab_0x403883:\n    // 0x40388a\n    error(0, 0, dcgettext(NULL, (char *)v629, 5));\n    function_404cf0(1);\n    // UNREACHABLE\n  lab_0x4039a1:\n    // 0x4039a1\n    function_406d70(4, (int64_t)g53);\n    error(1, *__errno_location(), dcgettext(NULL, \"cannot open %s for reading\", 5));\n    v630 = v631;\n    v632 = v633;\n    v634 = v635;\n    goto lab_0x4039e2;\n  lab_0x40268d:;\n    int64_t v608 = v696;\n    int64_t v610 = v695;\n    int64_t v614 = v693;\n    int64_t v727 = v692;\n    int64_t v728 = v691;\n    int64_t v729 = v690;\n    v730 = v689;\n    int64_t v616 = v687;\n    int64_t v624 = v686;\n    int64_t v731 = v685;\n    char v732 = v684;\n    int32_t * v733 = v683;\n    v617 = v682;\n    int32_t v618 = v681;\n    int64_t * v619 = v680;\n    v620 = v679;\n    int128_t v622 = v678;\n    int64_t v734 = v688; // 0x402695\n    if (g66 != NULL) {\n        // 0x402697\n        sigemptyset((struct _TYPEDEF_sigset_t *)&g60);\n        sigaction(SIGPIPE, NULL, (struct sigaction *)&oact);\n        if (oact != 1) {\n            // 0x4026ba\n            sigaddset((struct _TYPEDEF_sigset_t *)&g60, SIGPIPE);\n        }\n        // 0x4026c9\n        sigprocmask(SIG_BLOCK, (struct _TYPEDEF_sigset_t *)&g60, (struct _TYPEDEF_sigset_t *)&g61);\n        v734 = 0;\n    }\n    int64_t v735 = v694 + 0xfffffffe; // 0x4026da\n    int64_t v612 = v735 & 0xffffffff; // 0x4026da\n    g81 = v612;\n    int64_t v399; // 0x401ea0\n    int64_t v147; // 0x401ea0\n    int64_t v401; // 0x401ea0\n    int64_t v148; // 0x401ea0\n    int64_t v723; // 0x401ea0\n    int64_t v544; // 0x401ea0\n    int64_t v303; // 0x401ea0\n    int64_t v304; // 0x401ea0\n    int64_t v149; // 0x401ea0\n    int64_t v724; // 0x401ea0\n    int64_t v545; // 0x401ea0\n    int64_t v725; // 0x401ea0\n    int64_t v546; // 0x401ea0\n    int64_t v305; // 0x401ea0\n    int64_t v726; // 0x401ea0\n    int64_t v547; // 0x401ea0\n    int64_t v306; // 0x401ea0\n    int64_t v397; // 0x401ea0\n    int64_t v398; // 0x401ea0\n    int64_t v146; // 0x401ea0\n    int64_t v145; // 0x401ea0\n    int64_t v722; // 0x401ea0\n    int64_t v543; // 0x401ea0\n    int64_t v542; // 0x401ea0\n    int64_t v736; // 0x401ea0\n    char v394; // 0x401ea0\n    int64_t v143; // 0x401ea0\n    int64_t v721; // 0x401ea0\n    int64_t v541; // 0x401ea0\n    int64_t v302; // 0x401ea0\n    int64_t v395; // 0x401ea0\n    int64_t v144; // 0x401ea0\n    int32_t * v393; // 0x401ea0\n    int32_t v141; // 0x401ea0\n    int32_t v718; // 0x401ea0\n    int32_t v538; // 0x401ea0\n    int32_t v299; // 0x401ea0\n    int32_t v720; // 0x401ea0\n    int32_t v540; // 0x401ea0\n    int32_t v301; // 0x401ea0\n    int64_t * v142; // 0x401ea0\n    int64_t * v719; // 0x401ea0\n    int64_t * v539; // 0x401ea0\n    int64_t * v300; // 0x401ea0\n    int128_t v140; // 0x401ea0\n    char v297; // 0x401ea0\n    int64_t v717; // 0x401ea0\n    int64_t v537; // 0x401ea0\n    int64_t v298; // 0x401ea0\n    switch ((int32_t)v735) {\n        case 0: {\n            // 0x40298a\n            v297 = 0;\n            v298 = v97;\n            v299 = v620;\n            v300 = NULL;\n            v301 = 0;\n            v302 = v617;\n            v303 = 0;\n            v304 = 0;\n            v305 = v610;\n            v306 = v608;\n            goto lab_0x4029b0;\n        }\n        case 1: {\n            goto lab_0x4028dc;\n        }\n        case 2: {\n            goto lab_0x4028dc;\n        }\n        case 3: {\n            if (v24 != 0) {\n                // 0x402f95\n                v393 = v733;\n                v394 = v732;\n                v395 = v731;\n                v397 = v730;\n                v398 = v729;\n                v399 = v728;\n                v401 = v727;\n                goto lab_0x403434;\n            } else {\n                int64_t v737 = v97;\n                function_404ab0((int64_t)v622 / v737, v617, (int64_t)v620, v616);\n                v420 = v737;\n                v422 = v620;\n                v423 = v619;\n                v425 = v618;\n                v427 = v617;\n                v429 = v616;\n                v431 = v614;\n                v432 = v612;\n                v433 = v610;\n                v434 = v608;\n                goto lab_0x402fc5_3;\n            }\n        }\n        case 4: {\n            uint64_t v738 = (int64_t)v97;\n            uint64_t v739 = (int64_t)v622;\n            v537 = v738;\n            v538 = v620;\n            v539 = v619;\n            v540 = v618;\n            v541 = v617;\n            v542 = v624;\n            v543 = v616;\n            v544 = v614;\n            v545 = v612;\n            v546 = v610;\n            v547 = v608;\n            if (v24 > v738 || v738 > v739) {\n                goto lab_0x403a45;\n            } else {\n                int64_t v740 = v739 / v738;\n                v128 = v622;\n                v130 = v620;\n                v132 = v617;\n                v134 = v731;\n                v135 = v616;\n                v137 = v729;\n                v139 = v740;\n                if (v24 < 2) {\n                    goto lab_0x403641;\n                } else {\n                    int64_t v741 = v24 - 1; // 0x402b89\n                    int64_t v742 = v740 * v741 - 1; // 0x402b99\n                    if (v616 > v742) {\n                        int64_t v743 = v616 - v742; // 0x402bae\n                        memmove((int64_t *)v617, (int64_t *)(v742 + v617), (int32_t)v743);\n                        v140 = v622;\n                        v141 = v620;\n                        v142 = (int64_t *)(v742 & 0xffffffff);\n                        v143 = v617;\n                        v144 = v731;\n                        v145 = v743;\n                        v146 = v729;\n                        v147 = 0x100000000 * v740 >> 32;\n                        v148 = v741;\n                        v149 = v742;\n                        goto lab_0x402bc7;\n                    } else {\n                        int32_t v744 = lseek(0, (int32_t)(v742 - v616), SEEK_CUR); // 0x40366a\n                        int64_t * v745 = (int64_t *)(v742 & 0xffffffff); // 0x40366f\n                        v140 = v622;\n                        v141 = v620;\n                        v142 = v745;\n                        v143 = v617;\n                        v144 = v731;\n                        v145 = -1;\n                        v146 = v729;\n                        v147 = 0x100000000 * v740 >> 32;\n                        v148 = v741;\n                        v149 = v742;\n                        if (v744 >= 0) {\n                            goto lab_0x402bc7;\n                        } else {\n                            int64_t v746 = function_406e40(0, 3, (int64_t)g53); // 0x403690\n                            error(1, *__errno_location(), \"%s\", (char *)v746);\n                            v717 = v738;\n                            v718 = v620;\n                            v719 = v745;\n                            v720 = v740;\n                            v721 = v617;\n                            v722 = -1;\n                            v723 = v741;\n                            v724 = v742;\n                            v725 = v610;\n                            v726 = v608;\n                            goto lab_0x4036b3;\n                        }\n                    }\n                }\n            }\n        }\n        case 5: {\n            // 0x402d7b\n            v747 = v97;\n            int64_t v748 = v731; // 0x402d81\n            int64_t v749 = v616; // 0x402d81\n            if (v24 == 0) {\n                // 0x402d83\n                v736 = v734;\n                if (v97 % 0x400000000000001 != 0) {\n                    // 0x4037ab\n                    function_4078e0(v736);\n                    // UNREACHABLE\n                }\n                // 0x402da2\n                v736 = v734;\n                if (v97 % 0xf800000000000001 != 0) {\n                    // 0x4037ab\n                    function_4078e0(v736);\n                    // UNREACHABLE\n                }\n                int64_t v750 = function_407690(32 * v747); // 0x402db4\n                int64_t v751 = v750; // 0x402dbe\n                int64_t v752 = 0; // 0x402dbe\n                function_403cc0();\n                v752++;\n                int64_t v753 = function_4078c0((int64_t)g58); // 0x402dd5\n                *(int32_t *)(v751 + 8) = -1;\n                *(int64_t *)v751 = v753;\n                *(int64_t *)(v751 + 16) = 0;\n                *(int32_t *)(v751 + 24) = 0;\n                v751 += 32;\n                v748 = v750;\n                v749 = v752;\n                while (v752 != v747) {\n                    // 0x402dc1\n                    function_403cc0();\n                    v752++;\n                    v753 = function_4078c0((int64_t)g58);\n                    *(int32_t *)(v751 + 8) = -1;\n                    *(int64_t *)v751 = v753;\n                    *(int64_t *)(v751 + 16) = 0;\n                    *(int32_t *)(v751 + 24) = 0;\n                    v751 += 32;\n                    v748 = v750;\n                    v749 = v752;\n                }\n            }\n            int64_t v754 = v748;\n            v755 = v620;\n            int64_t * v756 = NULL; // 0x402e12\n            int32_t v757 = 0; // 0x402e12\n            int32_t * v758 = v733; // 0x402e12\n            char v759 = 0; // 0x402e12\n            char v760 = 0; // 0x402e12\n            int64_t v761 = v749; // 0x402e12\n            int64_t v762 = 1; // 0x402e12\n            int64_t v763 = v612; // 0x402e12\n            int64_t v764 = v610; // 0x402e12\n            int64_t v765 = v608; // 0x402e12\n            while (true) {\n              lab_0x402e17:;\n                int64_t v766 = v765;\n                int64_t v767 = v764;\n                int64_t v768 = v763;\n                int64_t v769 = v762;\n                int64_t v770 = v761;\n                char v771 = v760;\n                int32_t v772 = v757;\n                int64_t * v773 = v756;\n                int64_t v774 = function_406fe0(0, v617, v755); // 0x402e23\n                v775 = v747;\n                v776 = v620;\n                v777 = v773;\n                v778 = v772;\n                v779 = v617;\n                v780 = v770;\n                v781 = v768;\n                v782 = v767;\n                v783 = v766;\n                switch (v774) {\n                    case -1: {\n                        goto lab_0x403b65;\n                    }\n                    case 0: {\n                        // 0x403344\n                        v420 = v747;\n                        v422 = v620;\n                        v423 = v773;\n                        v425 = v772;\n                        v427 = v617;\n                        v429 = v770;\n                        v431 = v769;\n                        v432 = v768;\n                        v433 = v767;\n                        v434 = v766;\n                        if (v24 == 0) {\n                            int64_t v784 = v771 != 0 ? v747 : (int64_t)v773;\n                            v785 = v773;\n                            v786 = v772;\n                            v787 = v767;\n                            v788 = v766;\n                            v789 = v784;\n                          lab_0x40335c:;\n                            int64_t v790 = 0; // 0x403369\n                            int64_t v791 = v754;\n                            uint64_t v792; // 0x401ea0\n                            if (0x100000000 * v789 >> 32 <= v790) {\n                                // 0x40339f\n                                if (g46 == 0) {\n                                    // 0x4033a8\n                                    function_404500(v754, v792, v747);\n                                }\n                            }\n                            int32_t * v793 = (int32_t *)(v791 + 8); // 0x40336b\n                            uint32_t v794 = *v793; // 0x40336b\n                            int64_t v795; // 0x403375\n                            int64_t v796; // 0x403379\n                            if (v794 >= 0) {\n                                // 0x403372\n                                v795 = *(int64_t *)(v791 + 16);\n                                v796 = *(int64_t *)v791;\n                                function_4046f0((int32_t)v795, v794, *(int32_t *)(v791 + 24), v796);\n                            }\n                            // 0x403382\n                            v790++;\n                            *v793 = -2;\n                            int64_t v797 = v791 + 32; // 0x40338d\n                            v420 = v747;\n                            v422 = v620;\n                            v423 = v785;\n                            v425 = v786;\n                            v427 = v617;\n                            v429 = v797;\n                            v431 = v747;\n                            v432 = v747;\n                            v433 = v787;\n                            v434 = v788;\n                            while (v790 != v747) {\n                                // 0x40339a\n                                v791 = v797;\n                                if (0x100000000 * v789 >> 32 <= v790) {\n                                    // 0x40339f\n                                    if (g46 == 0) {\n                                        // 0x4033a8\n                                        function_404500(v754, v792, v747);\n                                    }\n                                }\n                                // 0x40336b\n                                v793 = (int32_t *)(v791 + 8);\n                                v794 = *v793;\n                                if (v794 >= 0) {\n                                    // 0x403372\n                                    v795 = *(int64_t *)(v791 + 16);\n                                    v796 = *(int64_t *)v791;\n                                    function_4046f0((int32_t)v795, v794, *(int32_t *)(v791 + 24), v796);\n                                }\n                                // 0x403382\n                                v790++;\n                                *v793 = -2;\n                                v797 = v791 + 32;\n                                v420 = v747;\n                                v422 = v620;\n                                v423 = v785;\n                                v425 = v786;\n                                v427 = v617;\n                                v429 = v797;\n                                v431 = v747;\n                                v432 = v747;\n                                v433 = v787;\n                                v434 = v788;\n                            }\n                        }\n                        goto lab_0x402fc5_3;\n                    }\n                    default: {\n                        // 0x402e3b\n                        v798 = v774 + v617;\n                        v799 = v773;\n                        v800 = v772;\n                        v801 = v758;\n                        v802 = v759;\n                        v803 = v771;\n                        v804 = v769;\n                        v805 = v767;\n                        v806 = v617;\n                        while (true) {\n                          lab_0x402e84:\n                            // 0x402e84\n                            data = v806;\n                            v807 = v804;\n                            v808 = v803;\n                            v809 = v802;\n                            v810 = v800;\n                            v811 = v799;\n                            int64_t v812 = v798 - data; // 0x402e92\n                            v813 = function_408dd0(data, (int64_t)g18, v812);\n                            v814 = v813 + 1;\n                            size = v813 == 0 ? v812 : v814 - data;\n                            if (v24 != 0) {\n                                // 0x402e58\n                                v815 = v805;\n                                v816 = v801;\n                                if (v24 == v807) {\n                                    // 0x403018\n                                    if (g45 != 0) {\n                                        // 0x403200\n                                        if (size == function_4052d0(1, data, size)) {\n                                            goto lab_0x402e61;\n                                        } else {\n                                            char * v817 = dcgettext(NULL, \"write error\", 5); // 0x403225\n                                            error(1, *__errno_location(), \"%s\", v817);\n                                            v818 = v816;\n                                            v819 = v809;\n                                            v820 = &g85;\n                                            v821 = (int64_t)v817;\n                                            v822 = v815;\n                                            goto lab_0x403250;\n                                        }\n                                    } else {\n                                        // 0x403025\n                                        if (fwrite_unlocked((int64_t *)data, (int32_t)size, 1, g36) == 1) {\n                                            goto lab_0x402e61;\n                                        } else {\n                                            // 0x403046\n                                            clearerr_unlocked(g36);\n                                            char * v823 = dcgettext(NULL, \"write error\", 5); // 0x40305e\n                                            error(1, *__errno_location(), \"%s\", v823);\n                                            v824 = v816;\n                                            v825 = v809;\n                                            v826 = (int64_t)v823;\n                                            v827 = v815;\n                                            goto lab_0x403088;\n                                        }\n                                    }\n                                } else {\n                                    goto lab_0x402e61;\n                                }\n                            } else {\n                                // 0x402ec0\n                                v828 = v813 == 0 ? v798 : v814;\n                                int64_t v829 = 0x100000000 * (int64_t)v811;\n                                int64_t v830 = function_404500(v754, v829 >> 32, v747); // 0x402ed6\n                                v831 = (v829 >> 27) + v754;\n                                v832 = v809 | (char)v830;\n                                v833 = __errno_location();\n                                if (g45 != 0) {\n                                    // 0x403178\n                                    v818 = v833;\n                                    v819 = v832;\n                                    v820 = (int64_t)v833;\n                                    v821 = v828;\n                                    v822 = v831;\n                                    if (size == function_4052d0(*(int32_t *)(v831 + 8), data, size)) {\n                                        goto lab_0x403250;\n                                    } else {\n                                        // 0x403195\n                                        if (*v833 != 32) {\n                                            goto lab_0x4031a8;\n                                        } else {\n                                            // 0x40319a\n                                            v834 = v810;\n                                            v835 = v833;\n                                            v836 = v832;\n                                            v837 = v828;\n                                            v838 = v831;\n                                            if (g66 != NULL) {\n                                                goto lab_0x402f44;\n                                            } else {\n                                                goto lab_0x4031a8;\n                                            }\n                                        }\n                                    }\n                                } else {\n                                    int64_t stream = *(int64_t *)(v831 + 16); // 0x402efb\n                                    v824 = v833;\n                                    v825 = v832;\n                                    v826 = v828;\n                                    v827 = v831;\n                                    if (fwrite_unlocked((int64_t *)data, (int32_t)size, 1, (struct _IO_FILE *)stream) != 1) {\n                                        goto lab_0x403088;\n                                    } else {\n                                        // 0x402f19\n                                        v839 = v833;\n                                        v840 = v832;\n                                        v841 = v828;\n                                        v842 = v831;\n                                        v843 = g66 != NULL == *v833 == 32;\n                                        goto lab_0x402f31;\n                                    }\n                                }\n                            }\n                        }\n                      lab_0x402e17_3:\n                        // 0x402e17\n                        v756 = v844;\n                        v757 = v845;\n                        v758 = v846;\n                        v759 = v847;\n                        v760 = v848;\n                        v761 = size;\n                        v762 = v849;\n                        v763 = v813 != 0;\n                        v764 = v850;\n                        v765 = v798;\n                        goto lab_0x402e17;\n                    }\n                }\n            }\n            goto lab_0x403b65;\n        }\n        default: {\n            int64_t v851 = v97; // 0x4032d3\n            function_404ab0(v851, v617, (int64_t)v620, -1);\n            v420 = v851;\n            v422 = v620;\n            v423 = v619;\n            v425 = v618;\n            v427 = v617;\n            v429 = v616;\n            v431 = v614;\n            v432 = v612;\n            v433 = v610;\n            v434 = v608;\n            goto lab_0x402fc5_3;\n        }\n    }\n  lab_0x4039e2:;\n    int64_t v636 = v634;\n    int32_t v637 = v632;\n    int128_t v638 = v630;\n    int32_t * v639 = __errno_location(); // 0x4039e2\n    v127 = v638;\n    v129 = v637;\n    v131 = v636;\n    v133 = v640;\n    v136 = v641;\n    v138 = v642;\n    if (*v639 == 29) {\n        // 0x4039f0\n        *v639 = 0;\n        v127 = v638;\n        v129 = v637;\n        v131 = v636;\n        v133 = v640;\n        v136 = v641;\n        v138 = v642;\n    }\n    goto lab_0x4035fe;\n  lab_0x4028dc:;\n    int64_t v643 = v97; // 0x4028dc\n    int64_t v644 = v620; // 0x4028f0\n    int64_t v645 = function_406fe0(0, v617, v644); // 0x4028fc\n    int64_t v646 = v645; // 0x40290a\n    int64_t v647 = 0; // 0x40290a\n    int64_t v648 = 1; // 0x40290a\n    int64_t v649 = v643; // 0x40290a\n    v37 = v643;\n    v26 = v620;\n    v34 = v619;\n    v30 = v618;\n    v650 = v617;\n    v22 = v616;\n    v14 = v612;\n    v16 = 0;\n    v18 = v643;\n    if (v645 == -1) {\n        goto lab_0x403b34;\n    } else {\n        int64_t v651; // 0x401ea0\n        int64_t v652; // 0x401ea0\n        int64_t v653; // 0x401ea0\n        int64_t v654; // 0x401ea0\n        int64_t v655; // 0x401ea0\n        while (true) {\n            int64_t v656 = v646 + v617; // 0x402920\n            *(char *)v656 = (char)g18;\n            int64_t v657 = v649; // 0x40292c\n            int64_t v658 = v617; // 0x40292c\n            int64_t v659 = v648; // 0x40292c\n            int64_t v660 = v647; // 0x40292c\n            uint64_t v661; // 0x401ea0\n            while (true) {\n                // 0x402930\n                v661 = v659;\n                v654 = v658;\n                v655 = v657;\n                v653 = g18;\n                v652 = v660;\n                int64_t v662 = v654;\n                int64_t v663 = function_408dd0(v662, v653, v656 + 1 - v662); // 0x40293f\n                if (v656 == v663) {\n                    // break (via goto) -> 0x403270\n                    goto lab_0x403270;\n                }\n                int64_t v664 = v652 + 1; // 0x40294d\n                int64_t v665 = v663 + 1; // 0x402951\n                while (v664 < v643) {\n                    // 0x402930\n                    v652 = v664;\n                    v662 = v665;\n                    v663 = function_408dd0(v662, v653, v656 + 1 - v662);\n                    if (v656 == v663) {\n                        // break (via goto) -> 0x403270\n                        goto lab_0x403270;\n                    }\n                    // 0x40294d\n                    v664 = v652 + 1;\n                    v665 = v663 + 1;\n                }\n                // 0x40295a\n                function_4049a0(v661 % 256, v654, v665 - v654);\n                v657 = v665;\n                v658 = v665;\n                v659 = 1;\n                v660 = 0;\n            }\n          lab_0x403270:;\n            int64_t v666 = v661; // 0x403273\n            if (v656 != v654) {\n                // 0x403275\n                function_4049a0(v661 % 256, v654, v656 - v654);\n                v666 = 0;\n            }\n            // 0x40328a\n            v651 = v666;\n            if (v646 == 0) {\n                // break -> 0x402fc5\n                break;\n            }\n            int64_t v667 = function_406fe0(0, v617, v644); // 0x4028fc\n            v646 = v667;\n            v647 = v652;\n            v648 = v651;\n            v649 = v655;\n            v37 = v655;\n            v26 = v620;\n            v34 = v619;\n            v30 = v618;\n            v650 = v617;\n            v22 = v653;\n            v14 = v654;\n            v16 = v652;\n            v18 = v643;\n            if (v667 == -1) {\n                goto lab_0x403b34;\n            }\n        }\n        // 0x402fc5\n        v420 = v655;\n        v422 = v620;\n        v423 = v619;\n        v425 = v618;\n        v427 = v617;\n        v429 = v653;\n        v431 = v651;\n        v432 = v654;\n        v433 = v652;\n        v434 = v643;\n        goto lab_0x402fc5_3;\n    }\n  lab_0x4028a2:;\n    uint64_t v668 = v509;\n    int64_t v669 = v507;\n    int64_t v670 = v506;\n    int64_t v671 = v502;\n    int64_t v672 = v499;\n    int32_t v673 = v496;\n    v127 = v495;\n    v129 = v673;\n    v131 = v672;\n    v133 = v671;\n    v136 = v670;\n    v138 = v669;\n    if (v668 < 0) {\n        goto lab_0x4035fe;\n    } else {\n        int64_t v674 = v97; // 0x4028ba\n        if (v674 < 0) {\n            int64_t v675 = function_405350(v674, &oact); // 0x4038af\n            error(1, EOVERFLOW, \"%s: %s\", dcgettext(NULL, \"invalid number of chunks\", 5), (char *)function_406fc0(v675));\n            v204 = (int32_t)\"%s: %s\";\n            goto lab_0x4038ec;\n        } else {\n            uint64_t v676 = (int64_t)v673; // 0x4028ab\n            int64_t v677 = v668 < v674 ? v674 : v668; // 0x4028ce\n            v678 = v677;\n            v679 = v673;\n            v680 = v497;\n            v681 = v498;\n            v682 = v672;\n            v683 = v500;\n            v684 = v501;\n            v685 = v671;\n            v686 = v503;\n            v687 = v668 > v676 ? v676 : v668;\n            v688 = v504;\n            v689 = v505;\n            v690 = v670;\n            v691 = v669;\n            v692 = v508;\n            v693 = v677;\n            v694 = v510;\n            v695 = v511;\n            v696 = v512;\n            goto lab_0x40268d;\n        }\n    }\n  lab_0x4029b0:;\n    int64_t v697 = v306;\n    int64_t v698 = v305;\n    int64_t v699 = v304;\n    int64_t v700 = v303;\n    int64_t v701 = v302;\n    int32_t v702 = v301;\n    int64_t * v703 = v300;\n    int32_t v704 = v299;\n    int64_t v705 = v298;\n    int64_t v706 = function_406fe0(0, v701, (int64_t)v704); // 0x4029bc\n    char v307 = v297; // 0x401ea0\n    int64_t v308 = v705; // 0x401ea0\n    int32_t v309 = v704; // 0x401ea0\n    int64_t * v310 = v703; // 0x401ea0\n    int32_t v311 = v702; // 0x401ea0\n    int64_t v312 = v701; // 0x401ea0\n    int64_t v313 = v701; // 0x401ea0\n    int64_t v314 = v706; // 0x401ea0\n    int64_t v315 = v700; // 0x401ea0\n    int64_t v316 = v699; // 0x401ea0\n    v585 = v705;\n    v587 = v704;\n    v589 = v703;\n    v591 = v702;\n    v593 = v701;\n    v596 = -1;\n    v598 = v699;\n    v600 = v698;\n    v602 = v697;\n    int64_t v707; // 0x401ea0\n    int64_t v708; // 0x401ea0\n    int64_t v709; // 0x401ea0\n    int64_t v710; // 0x401ea0\n    int64_t v711; // 0x401ea0\n    int64_t v712; // 0x401ea0\n    int32_t v713; // 0x401ea0\n    int32_t v714; // 0x401ea0\n    int64_t * v715; // 0x401ea0\n    int64_t v716; // 0x401ea0\n    switch (v706) {\n        case -1: {\n            goto lab_0x403b96;\n        }\n        case 0: {\n            // 0x4032ef\n            v716 = v705;\n            v713 = v704;\n            v715 = v703;\n            v714 = v702;\n            v712 = v701;\n            v711 = 0;\n            v707 = v700;\n            v708 = v699;\n            v709 = v698;\n            v710 = v697;\n            v717 = v705;\n            v718 = v704;\n            v719 = v703;\n            v720 = v702;\n            v721 = v701;\n            v722 = 0;\n            v723 = v700;\n            v724 = v699;\n            v725 = v698;\n            v726 = v697;\n            if (v700 != 0) {\n                goto lab_0x4036b3;\n            } else {\n                goto lab_0x4032f8;\n            }\n        }\n        default: {\n            goto lab_0x402a4f;\n        }\n    }\n  lab_0x403a45:\n    // 0x403a45\n    __assert_fail(\"n && k <= n && n <= file_size\", \"src/split.c\", 865, \"lines_chunk_split\");\n    int64_t v548 = v537; // 0x403a59\n    int32_t v549 = v538; // 0x403a59\n    int64_t * v550 = v539; // 0x403a59\n    int32_t v551 = v540; // 0x403a59\n    int64_t v552 = v541; // 0x403a59\n    int64_t v553 = v542; // 0x403a59\n    int64_t v554 = v543; // 0x403a59\n    int64_t v555 = (int64_t)\"n && k <= n && n <= file_size\"; // 0x403a59\n    int64_t v556 = v544; // 0x403a59\n    int64_t v557 = v545; // 0x403a59\n    int64_t v558 = v546; // 0x403a59\n    int64_t v559 = v547; // 0x403a59\n    goto lab_0x403a5e;\n  lab_0x403641:\n    // 0x403641\n    v140 = v128;\n    v141 = v130;\n    v142 = NULL;\n    v143 = v132;\n    v144 = v134;\n    v145 = v135;\n    v146 = v137;\n    v147 = v139;\n    v148 = 1;\n    v149 = v139 - 1;\n    goto lab_0x402bc7;\n  lab_0x403a2c:\n    // 0x403a2c\n    __assert_fail(\"k && n && k <= n && n <= file_size\", \"src/split.c\", 991, \"bytes_chunk_extract\");\n    v537 = v526;\n    v538 = v527;\n    v539 = v528;\n    v540 = v529;\n    v541 = v530;\n    v542 = v531;\n    v543 = v532;\n    v544 = v533;\n    v545 = v534;\n    v546 = v535;\n    v547 = v536;\n    goto lab_0x403a45;\n  lab_0x403b96:;\n    int64_t v583 = function_406e40(0, 3, (int64_t)g53); // 0x403ba4\n    error(1, *__errno_location(), \"%s\", (char *)v583);\n    int64_t v584 = v585; // 0x403bc2\n    int32_t v586 = v587; // 0x403bc2\n    int64_t * v588 = v589; // 0x403bc2\n    int32_t v590 = v591; // 0x403bc2\n    int64_t v592 = v593; // 0x403bc2\n    int64_t v594 = v583; // 0x403bc2\n    int64_t v595 = v596; // 0x403bc2\n    int64_t v597 = v598; // 0x403bc2\n    int64_t v599 = v600; // 0x403bc2\n    int64_t v601 = v602; // 0x403bc2\n    goto lab_0x403bc7;\n  lab_0x402a4f:;\n    int64_t v250 = v316;\n    int64_t v258 = v315;\n    int64_t v257 = v314;\n    int64_t v249 = v313;\n    int64_t v256 = v312;\n    int32_t v255 = v311;\n    int64_t * v254 = v310;\n    int32_t v253 = v309;\n    int64_t v252 = v308;\n    char v251 = v307;\n    int64_t v266 = v250 + v258; // 0x402a54\n    int64_t v603 = v252 - v266; // 0x402a63\n    int64_t v225; // 0x401ea0\n    int64_t v227; // 0x401ea0\n    int64_t v245; // 0x401ea0\n    int64_t v229; // 0x401ea0\n    int64_t v243; // 0x401ea0\n    int64_t v247; // 0x401ea0\n    int64_t v238; // 0x401ea0\n    int64_t v220; // 0x401ea0\n    int64_t v218; // 0x401ea0\n    int64_t v222; // 0x401ea0\n    int64_t v216; // 0x401ea0\n    int32_t v210; // 0x401ea0\n    int32_t v214; // 0x401ea0\n    int64_t * v212; // 0x401ea0\n    char v206; // 0x401ea0\n    int64_t v208; // 0x401ea0\n    if (v257 >= v603) {\n        int64_t v604 = v249 - 1 + v603; // 0x4029e6\n        int64_t v605 = (int64_t)memrchr((int64_t *)v249, g18, (int32_t)v603); // 0x4029eb\n        v247 = v605;\n        v245 = v604;\n        v243 = v603;\n        v206 = v251;\n        v208 = v252;\n        v210 = v253;\n        v212 = v254;\n        v214 = v255;\n        v216 = v256;\n        v218 = v249;\n        v220 = v257;\n        v222 = v249;\n        v238 = v605;\n        v225 = v250;\n        v227 = v604;\n        v229 = v603;\n        if (v258 == 0) {\n            goto lab_0x402a8c;\n        } else {\n            goto lab_0x4029fc;\n        }\n    } else {\n        int64_t v606 = (int64_t)memrchr((int64_t *)v249, g18, (int32_t)v257); // 0x402a7b\n        v247 = v606;\n        v245 = 0;\n        v243 = 0;\n        v206 = v251;\n        v208 = v252;\n        v210 = v253;\n        v212 = v254;\n        v214 = v255;\n        v216 = v256;\n        v218 = v249;\n        v220 = v257;\n        v222 = v249;\n        v238 = v606;\n        v225 = v250;\n        v227 = 0;\n        v229 = 0;\n        if (v258 != 0) {\n            goto lab_0x4029fc;\n        } else {\n            goto lab_0x402a8c;\n        }\n    }\n  lab_0x403434:;\n    int64_t v607 = v608;\n    int64_t v609 = v610;\n    int64_t v611 = v612;\n    int64_t v613 = v614;\n    int64_t v615 = v616;\n    v428 = v617;\n    v426 = v618;\n    v424 = v619;\n    v417 = v620;\n    int128_t v621 = v622;\n    v421 = v97;\n    uint64_t v623 = (int64_t)v621;\n    v526 = v421;\n    v527 = v417;\n    v528 = v424;\n    v529 = v426;\n    v530 = v428;\n    v531 = v624;\n    v532 = v615;\n    v533 = v613;\n    v534 = v611;\n    v535 = v609;\n    v536 = v607;\n    int64_t v485; // 0x401ea0\n    int64_t v198; // 0x401ea0\n    int64_t v487; // 0x401ea0\n    int64_t v199; // 0x401ea0\n    int64_t v200; // 0x401ea0\n    int64_t v201; // 0x401ea0\n    int64_t v202; // 0x401ea0\n    int64_t v203; // 0x401ea0\n    int64_t v481; // 0x401ea0\n    int64_t v483; // 0x401ea0\n    int64_t v197; // 0x401ea0\n    int64_t v430; // 0x401ea0\n    int64_t v196; // 0x401ea0\n    char v194; // 0x401ea0\n    char v474; // 0x401ea0\n    int64_t v193; // 0x401ea0\n    int64_t v476; // 0x401ea0\n    int64_t v195; // 0x401ea0\n    int32_t * v472; // 0x401ea0\n    int32_t v190; // 0x401ea0\n    int32_t v192; // 0x401ea0\n    int64_t * v191; // 0x401ea0\n    int128_t v419; // 0x401ea0\n    int128_t v189; // 0x401ea0\n    int64_t offset2; // 0x403467\n    if (v24 > v421 || v421 > v623) {\n        goto lab_0x403a2c;\n    } else {\n        // 0x40344f\n        v487 = v401;\n        v485 = v399;\n        v483 = v398;\n        v481 = v397;\n        v476 = v395;\n        v474 = v394;\n        v472 = v393;\n        uint64_t v625 = v623 / v421;\n        offset2 = v625 * (v24 - 1);\n        v419 = v24 == v421 ? v621 : (int128_t)(v625 * v24);\n        if (v615 > offset2) {\n            int64_t v626 = v615 - offset2; // 0x40348a\n            memmove((int64_t *)v428, (int64_t *)(offset2 + v428), (int32_t)v626);\n            v430 = v626;\n            goto lab_0x403498;\n        } else {\n            // 0x4036ce\n            v430 = -1;\n            if (lseek(0, (int32_t)offset2, SEEK_CUR) >= 0) {\n                goto lab_0x403498;\n            } else {\n                int64_t v627 = function_406e40(0, 3, (int64_t)g53); // 0x4036f5\n                error(1, *__errno_location(), \"%s\", (char *)v627);\n                v189 = v419;\n                v190 = v417;\n                v191 = v424;\n                v192 = v426;\n                v193 = v428;\n                v194 = v474;\n                v195 = v476;\n                v196 = -1;\n                v197 = v483;\n                v198 = v485;\n                v199 = v487;\n                v200 = v613;\n                v201 = v611;\n                v202 = v609;\n                v203 = v607;\n                goto lab_0x403718;\n            }\n        }\n    }\n  lab_0x403a5e:;\n    int64_t v560 = v558;\n    int64_t v561 = v557;\n    int64_t v562 = v556;\n    int64_t v563 = v555;\n    int64_t v564 = v554;\n    int64_t v565 = v553;\n    int64_t v566 = v552;\n    int32_t v567 = v551;\n    int64_t * v568 = v550;\n    int32_t v569 = v549;\n    int64_t v570 = v548;\n    int64_t v571 = v570; // 0x403a61\n    int32_t v572 = v569; // 0x403a61\n    int64_t * v573 = v568; // 0x403a61\n    int32_t v574 = v567; // 0x403a61\n    int64_t v575 = v566; // 0x403a61\n    int64_t v576 = v565; // 0x403a61\n    int64_t v577 = v564; // 0x403a61\n    int64_t v578 = v563; // 0x403a61\n    int64_t v579 = v562; // 0x403a61\n    int64_t v580 = v561; // 0x403a61\n    int64_t v581 = v560; // 0x403a61\n    int64_t v582 = v559; // 0x403a61\n    if (v560 != 0 == (v559 != 0)) {\n        goto lab_0x402ad3;\n    } else {\n        // 0x403a6c\n        v571 = v570;\n        v572 = v569;\n        v573 = v568;\n        v574 = v567;\n        v575 = v566;\n        v576 = v565;\n        v577 = v564;\n        v578 = v563;\n        v579 = v562;\n        v580 = v561;\n        v581 = v560;\n        v582 = v564;\n        if (v564 == 0 || v560 != 0) {\n            goto lab_0x402b2e;\n        } else {\n            goto lab_0x402ad3;\n        }\n    }\n  lab_0x402bc7:\n    // 0x402bc7\n    v150 = v140;\n    v151 = v141;\n    v152 = v142;\n    v153 = 1;\n    v154 = v143;\n    v155 = 0;\n    v156 = v144;\n    v157 = v145;\n    v158 = v145;\n    v159 = v146;\n    v160 = v147;\n    v161 = (int64_t)v140 - 1;\n    v162 = v148;\n    v163 = v149;\n    v164 = v24;\n    goto lab_0x402bee;\n  lab_0x4036b3:\n    // 0x4036b3\n    function_4049a0((int64_t)(v724 == 0), 0x100000000 * (int64_t)v719 >> 32, v723);\n    v716 = v717;\n    v713 = v718;\n    v715 = v719;\n    v714 = v720;\n    v712 = v721;\n    v711 = v722;\n    v707 = v723;\n    v708 = v724;\n    v709 = v725;\n    v710 = v726;\n    goto lab_0x4032f8;\n  lab_0x4032f8:\n    // 0x4032f8\n    free(v715);\n    v420 = v716;\n    v422 = v713;\n    v423 = v715;\n    v425 = v714;\n    v427 = v712;\n    v429 = v711;\n    v431 = v707;\n    v432 = v708;\n    v433 = v709;\n    v434 = v710;\n    goto lab_0x402fc5_3;\n  lab_0x402ad3:;\n    int64_t * v1020 = v573;\n    int32_t v1021 = v572;\n    uint64_t v1022 = (int64_t)v574; // 0x402ad3\n    int64_t * v1023 = v1020; // 0x402ae1\n    int32_t v1024 = v574; // 0x402ae1\n    if (v1022 - v579 < v582) {\n        int64_t v1025 = v1021; // 0x402ae3\n        v736 = v578;\n        if (v1022 > -1 - v1025) {\n            // 0x4037ab\n            function_4078e0(v736);\n            // UNREACHABLE\n        }\n        int64_t v1026 = v1022 + v1025; // 0x402af7\n        v1023 = (int64_t *)(function_4076f0((int32_t)(int64_t)v1020, v1026) & 0xffffffff);\n        v1024 = v1026;\n    }\n    // 0x402b11\n    memcpy((int64_t *)((0x100000000 * (int64_t)v1023 >> 32) + v579), (int64_t *)v576, (int32_t)v582);\n    int64_t v276 = v571; // 0x402b29\n    int32_t v278 = v1021; // 0x402b29\n    int64_t * v280 = v1023; // 0x402b29\n    int32_t v282 = v1024; // 0x402b29\n    int64_t v284 = v575; // 0x402b29\n    int64_t v286 = v582 + v576; // 0x402b29\n    int64_t v288 = v577 - v582; // 0x402b29\n    int64_t v290 = v582 + v579; // 0x402b29\n    int64_t v293 = v580; // 0x402b29\n    int64_t v292 = v581; // 0x402b29\n    int64_t v296 = v582; // 0x402b29\n    goto lab_0x402b2e;\n  lab_0x403bc7:\n    // 0x403bc7\n    v276 = v584;\n    v278 = v586;\n    v280 = v588;\n    v282 = v590;\n    v284 = v592;\n    v286 = v594;\n    v288 = v595;\n    v290 = 0;\n    v293 = v597;\n    v292 = v599;\n    v296 = v601;\n    goto lab_0x402b2e;\n  lab_0x402bee:;\n    int32_t v165 = v151; // 0x402bf8\n    int64_t * v166 = v152; // 0x402bf8\n    int32_t v167 = v153; // 0x402bf8\n    int64_t v168 = v154; // 0x402bf8\n    char v169 = v155; // 0x402bf8\n    int64_t v170 = v158; // 0x402bf8\n    int64_t v171 = v162; // 0x402bf8\n    int64_t v172 = v163; // 0x402bf8\n    int64_t v173 = v164; // 0x402bf8\n    int64_t v174 = v160; // 0x402bf8\n    int64_t v175; // 0x401ea0\n    int64_t v176; // 0x401ea0\n    int64_t v177; // 0x401ea0\n    int64_t v178; // 0x401ea0\n    int64_t v179; // 0x401ea0\n    int64_t v180; // 0x401ea0\n    char v181; // 0x401ea0\n    int64_t v182; // 0x401ea0\n    int32_t v183; // 0x401ea0\n    int32_t v184; // 0x401ea0\n    int64_t * v185; // 0x401ea0\n    if (0x100000000 * (int64_t)v152 >> 32 < (int64_t)v150) {\n        // 0x402bfe\n        v186 = v150;\n        v183 = v151;\n        v185 = v152;\n        v184 = v153;\n        v182 = v154;\n        v181 = v155;\n        v187 = v156;\n        v179 = v157;\n        v180 = v158;\n        v188 = v161;\n        v175 = v162;\n        v176 = v163;\n        v177 = v164;\n        v178 = v160;\n        v189 = v150;\n        v190 = v151;\n        v191 = v152;\n        v192 = v153;\n        v193 = v154;\n        v194 = v155;\n        v195 = v156;\n        v196 = v158;\n        v197 = v159;\n        v198 = v160;\n        v199 = v161;\n        v200 = v162;\n        v201 = v163;\n        v202 = v164;\n        v203 = v160;\n        if (v157 == -1) {\n            goto lab_0x403718;\n        } else {\n            goto lab_0x402c08;\n        }\n    } else {\n        goto lab_0x4037b0;\n    }\n  lab_0x4038ec:\n    // 0x40388a\n    error(0, 0, dcgettext(NULL, \"%s: invalid start value for numerical suffix\", v204));\n    function_404cf0(1);\n    // UNREACHABLE\n  lab_0x402a8c:;\n    char v205 = v206; // 0x402a8f\n    int64_t v207 = v208; // 0x402a8f\n    int32_t v209 = v210; // 0x402a8f\n    int64_t * v211 = v212; // 0x402a8f\n    int32_t v213 = v214; // 0x402a8f\n    int64_t v215 = v216; // 0x402a8f\n    int64_t v217 = v218; // 0x402a8f\n    int64_t v219 = v220; // 0x402a8f\n    int64_t v221 = v222; // 0x402a8f\n    int64_t v223 = 0; // 0x402a8f\n    int64_t v224 = v225; // 0x402a8f\n    int64_t v226 = v227; // 0x402a8f\n    int64_t v228 = v229; // 0x402a8f\n    int64_t v230 = v208; // 0x402a8f\n    int32_t v231 = v210; // 0x402a8f\n    int64_t * v232 = v212; // 0x402a8f\n    int32_t v233 = v214; // 0x402a8f\n    int64_t v234 = v216; // 0x402a8f\n    int64_t v235 = v218; // 0x402a8f\n    int64_t v236 = v220; // 0x402a8f\n    int64_t v237 = v238; // 0x402a8f\n    int64_t v239 = v225; // 0x402a8f\n    int64_t v240 = v227; // 0x402a8f\n    int64_t v241 = v229; // 0x402a8f\n    if (v238 == 0) {\n        goto lab_0x402a15;\n    } else {\n        goto lab_0x402a95;\n    }\n  lab_0x4029fc:;\n    int64_t v242 = v243;\n    int64_t v244 = v245;\n    int64_t v246 = v247;\n    int64_t v248 = v249 & -256 | (int64_t)(v250 == 0); // 0x4029ff\n    v205 = v251;\n    v207 = v252;\n    v209 = v253;\n    v211 = v254;\n    v213 = v255;\n    v215 = v256;\n    v217 = v249;\n    v219 = v257;\n    v221 = v248;\n    v223 = v258;\n    v224 = v250;\n    v226 = v244;\n    v228 = v242;\n    if (v250 != 0 == v246 == 0) {\n        goto lab_0x402a15;\n    } else {\n        // 0x4029fc\n        v259 = v253;\n        v260 = v251;\n        v261 = v252;\n        v262 = v253;\n        v263 = v254;\n        v264 = v256;\n        v265 = (int32_t *)v266;\n        v267 = v249;\n        v268 = v257;\n        v269 = v248;\n        v270 = v246;\n        v271 = v258;\n        v272 = v244;\n        v273 = v242;\n        goto lab_0x4030d0;\n    }\n  lab_0x402b2e:;\n    char v274 = 0; // 0x402b4b\n    int64_t v275 = v276; // 0x402b4b\n    int32_t v277 = v278; // 0x402b4b\n    int64_t * v279 = v280; // 0x402b4b\n    int32_t v281 = v282; // 0x402b4b\n    int64_t v283 = v284; // 0x402b4b\n    int64_t v285 = v286; // 0x402b4b\n    int64_t v287 = v288; // 0x402b4b\n    int64_t v289 = v290; // 0x402b4b\n    int64_t v291 = v292 != 0 ? 0 : v293; // 0x402b4b\n    int64_t v294 = v292; // 0x402b4b\n    int64_t v295 = v296; // 0x402b4b\n    goto lab_0x402a46;\n  lab_0x4037b0:;\n    int64_t v513 = v174;\n    int64_t v514 = v173;\n    int64_t v515 = v172;\n    int64_t v516 = v170;\n    int64_t v517 = v168;\n    int32_t v518 = v167;\n    int64_t * v519 = v166;\n    int32_t v520 = v165;\n    int64_t v521 = v171 + (int64_t)(v169 != 0); // 0x4037b5\n    int64_t v522 = v97;\n    v420 = v522;\n    v422 = v520;\n    v423 = v519;\n    v425 = v518;\n    v427 = v517;\n    v429 = v516;\n    v431 = v521;\n    v432 = v515;\n    v433 = v514;\n    v434 = v513;\n    int64_t v523 = v521; // 0x4037bf\n    if (v521 <= v522 && v24 == 0) {\n        int64_t v524 = v523 + 1; // 0x4037cf\n        function_4049a0(1, 0, 0);\n        v420 = v522;\n        v422 = v520;\n        v423 = v519;\n        v425 = v518;\n        v427 = v517;\n        v429 = v516;\n        v431 = v524;\n        v432 = v515;\n        v433 = v514;\n        v434 = v513;\n        v523 = v524;\n        while (v524 <= v522) {\n            // 0x4037c6\n            v524 = v523 + 1;\n            function_4049a0(1, 0, 0);\n            v420 = v522;\n            v422 = v520;\n            v423 = v519;\n            v425 = v518;\n            v427 = v517;\n            v429 = v516;\n            v431 = v524;\n            v432 = v515;\n            v433 = v514;\n            v434 = v513;\n            v523 = v524;\n        }\n    }\n    goto lab_0x402fc5_3;\n  lab_0x402a15:;\n    int64_t v994 = v228;\n    int64_t v995 = v226;\n    int64_t v996 = v224;\n    int64_t v997 = v223;\n    int64_t v998 = v219;\n    int64_t v999 = v217;\n    int64_t v1000 = v215;\n    int32_t v1001 = v213;\n    int64_t * v1002 = v211;\n    int32_t v1003 = v209;\n    int64_t v1004 = v207;\n    char v1005 = v205;\n    v548 = v1004;\n    v549 = v1003;\n    v550 = v1002;\n    v551 = v1001;\n    v552 = v1000;\n    v553 = v999;\n    v554 = v998;\n    v555 = v221;\n    v556 = v997;\n    v557 = v996;\n    v558 = v995;\n    v559 = v994;\n    if (v1005 != 0) {\n        goto lab_0x403a5e;\n    } else {\n        int64_t v1006 = v996 == 0; // 0x402a25\n        if (v995 == 0) {\n            // 0x403160\n            function_4049a0(v1006, v999, v998);\n            v297 = v1005;\n            v298 = v1004;\n            v299 = v1003;\n            v300 = v1002;\n            v301 = v1001;\n            v302 = v1000;\n            v303 = v997;\n            v304 = v996 + v998;\n            v305 = 0;\n            v306 = v994;\n            goto lab_0x4029b0;\n        } else {\n            // 0x402a32\n            function_4049a0(v1006, v999, v994);\n            v274 = v1005;\n            v275 = v1004;\n            v277 = v1003;\n            v279 = v1002;\n            v281 = v1001;\n            v283 = v1000;\n            v285 = v994 + v999;\n            v287 = v998 - v994;\n            v289 = v997;\n            v291 = 0;\n            v294 = v995;\n            v295 = v994;\n            goto lab_0x402a46;\n        }\n    }\n  lab_0x402a95:;\n    int64_t v1007 = v241;\n    int64_t v1008 = v240;\n    int64_t v1009 = v234;\n    int32_t v1010 = v233;\n    int64_t * v1011 = v232;\n    int32_t v1012 = v231;\n    int64_t v1013 = v230;\n    int64_t v1014 = v237 - v235 + 1; // 0x402aa0\n    int64_t v1015 = v239 == 0; // 0x402aa4\n    int64_t v1016 = v1014 + v239; // 0x402aab\n    int64_t v1017 = v236 - v1014; // 0x402aae\n    int64_t v1018 = v237 + 1; // 0x402ab1\n    function_4049a0(v1015, v235, v1014);\n    if (v1008 == 0) {\n        // 0x403140\n        v274 = 1;\n        v275 = v1013;\n        v277 = v1012;\n        v279 = v1011;\n        v281 = v1010;\n        v283 = v1009;\n        v285 = v1018;\n        v287 = 0;\n        v289 = 0;\n        v291 = v1016;\n        v294 = 0;\n        v295 = v1007;\n        v571 = v1013;\n        v572 = v1012;\n        v573 = v1011;\n        v574 = v1010;\n        v575 = v1009;\n        v576 = v1018;\n        v577 = v1017;\n        v578 = v1015;\n        v579 = 0;\n        v580 = v1016;\n        v581 = 0;\n        v582 = v1017;\n        if (v1017 == 0) {\n            goto lab_0x402a46;\n        } else {\n            goto lab_0x402ad3;\n        }\n    } else {\n        int64_t v1019 = v1007 - v1014; // 0x402ac2\n        v571 = v1013;\n        v572 = v1012;\n        v573 = v1011;\n        v574 = v1010;\n        v575 = v1009;\n        v576 = v1018;\n        v577 = v1017;\n        v578 = v1015;\n        v579 = 0;\n        v580 = v1016;\n        v581 = v1008;\n        v582 = v1019;\n        v584 = v1013;\n        v586 = v1012;\n        v588 = v1011;\n        v590 = v1010;\n        v592 = v1009;\n        v594 = v1018;\n        v595 = v1017;\n        v597 = v1016;\n        v599 = v1008;\n        v601 = 0;\n        if (v1019 == 0) {\n            goto lab_0x403bc7;\n        } else {\n            goto lab_0x402ad3;\n        }\n    }\n  lab_0x402a46:\n    // 0x402a46\n    v297 = v274;\n    v298 = v275;\n    v299 = v277;\n    v300 = v279;\n    v301 = v281;\n    v302 = v283;\n    v303 = v289;\n    v304 = v291;\n    v305 = v294;\n    v306 = v295;\n    v307 = v274;\n    v308 = v275;\n    v309 = v277;\n    v310 = v279;\n    v311 = v281;\n    v312 = v283;\n    v313 = v285;\n    v314 = v287;\n    v315 = v289;\n    v316 = v291;\n    if (v287 == 0) {\n        goto lab_0x4029b0;\n    } else {\n        goto lab_0x402a4f;\n    }\n  lab_0x403718:;\n    int64_t v317 = v203;\n    int64_t v318 = v201;\n    int64_t v319 = v200;\n    int64_t v320 = v199;\n    int64_t v321 = v196;\n    int64_t v322 = v195;\n    char v323 = v194;\n    int64_t v324 = v193;\n    int32_t v325 = v192;\n    int64_t * v326 = v191;\n    int32_t v327 = v190;\n    int128_t v328 = v189;\n    int64_t v329 = function_406fe0(0, v324, (int64_t)v327); // 0x403729\n    v186 = v328;\n    v183 = v327;\n    v185 = v326;\n    v184 = v325;\n    v182 = v324;\n    v181 = v323;\n    v187 = v322;\n    v179 = v329;\n    v180 = v321;\n    v188 = v320;\n    v175 = v319;\n    v176 = v318;\n    v177 = v202;\n    v178 = v317;\n    if (v329 != -1) {\n        goto lab_0x402c08;\n    } else {\n        int64_t v330 = function_406e40(0, 3, (int64_t)g53); // 0x40374b\n        uint32_t err_num = *__errno_location(); // 0x403765\n        error(1, err_num, \"%s\", (char *)v330);\n        v120 = v328;\n        v114 = v327;\n        v118 = v326;\n        v116 = v325;\n        v331 = v324;\n        v332 = (int32_t *)v320;\n        v333 = v323;\n        v334 = v322;\n        v111 = v330;\n        v109 = v321;\n        v113 = err_num;\n        v106 = v197;\n        v335 = v198;\n        v336 = v320;\n        v100 = v319;\n        v102 = v318;\n        v104 = v317;\n        goto lab_0x40376e;\n    }\n  lab_0x402c08:\n    // 0x402c08\n    v337 = v178;\n    v338 = v177;\n    v339 = v176;\n    v340 = v175;\n    uint64_t v341 = v179;\n    v342 = v182;\n    v343 = v184;\n    v344 = v185;\n    v345 = v183;\n    v165 = v345;\n    v166 = v344;\n    v167 = v343;\n    v168 = v342;\n    v169 = v181;\n    v170 = v180;\n    v171 = v340;\n    v172 = v339;\n    v173 = v338;\n    v174 = v337;\n    if (v341 == 0) {\n        goto lab_0x4037b0;\n    } else {\n        uint64_t v346 = (int64_t)v186 - (0x100000000 * (int64_t)v344 >> 32); // 0x402c16\n        v347 = v346 > v341 ? v341 : v346;\n        if (v347 == 0) {\n            goto lab_0x40379f;\n        } else {\n            // 0x402c54\n            int64_t v348; // 0x401ea0\n            char v349; // 0x401ea0\n            int64_t v350; // 0x402c41\n            while (true) {\n                // 0x402c54\n                int64_t * v351; // 0x401ea0\n                int64_t * v352 = v351;\n                char v353; // 0x401ea0\n                v349 = v353;\n                int64_t v354; // 0x401ea0\n                uint64_t v355 = v354;\n                int64_t v356; // 0x401ea0\n                int64_t v357 = v356;\n                int64_t v358; // 0x401ea0\n                int64_t v359 = v358;\n                int64_t v360; // 0x401ea0\n                int64_t v361 = v360;\n                int64_t v362 = 0x100000000 * (int64_t)v352 >> 32; // 0x402c5c\n                int64_t v363 = v361 - v362; // 0x402c5c\n                uint64_t v364 = v363 > 0 ? v363 : 0; // 0x402c66\n                uint32_t v365 = g18; // 0x402c6a\n                int64_t v366 = v364 > v355 ? v355 : v364; // 0x402c82\n                int64_t v367 = function_408dd0(v366 + v357, (int64_t)v365, v355 - v366); // 0x402c91\n                v348 = v367 == 0 ? v350 : v367 + 1;\n                int64_t v368 = v348 - v357; // 0x402cba\n                int32_t v369; // 0x401ea0\n                int64_t v370; // 0x401ea0\n                int64_t v371; // 0x401ea0\n                if (v359 == v338) {\n                    // 0x4033c1\n                    v370 = v337;\n                    if (v368 != function_4052d0(1, v357, v368)) {\n                        // break -> 0x403405\n                        break;\n                    }\n                } else {\n                    int64_t v372 = v371;\n                    v370 = v372;\n                    if (v338 == 0) {\n                        uint32_t v373 = v369;\n                        function_4049a0((int64_t)v373, v357, 0x100000000 * v368 >> 32);\n                        v370 = v337;\n                    }\n                }\n                int32_t v374 = v367 != 0;\n                int64_t v375 = v370;\n                int64_t v376 = 0x100000000 * v368 >> 32; // 0x402cd9\n                int64_t v377 = v376 + v362; // 0x402cd9\n                int64_t * v378 = (int64_t *)(v377 & 0xffffffff);\n                char v379 = v350 == v348;\n                int64_t v380 = v375; // 0x402ce8\n                int64_t v381 = v367 != 0; // 0x402ce8\n                int64_t v382; // 0x401ea0\n                char v383; // 0x402cf5\n                char v384; // 0x401ea0\n                while (true) {\n                  lab_0x402cf0_2:;\n                    int64_t v385 = v381;\n                    v382 = v380;\n                    int64_t v386 = v385; // 0x401ea0\n                    int64_t v387; // 0x401ea0\n                    while (true) {\n                        // 0x402cf0\n                        v387 = v386;\n                        v383 = v387;\n                        v384 = (v383 ^ 1) & v379;\n                    }\n                  lab_0x402d40:\n                    // 0x402d40\n                    function_4049a0(1, 0, 0);\n                    v380 = v337;\n                    v381 = v387;\n                    goto lab_0x402cf0_2;\n                }\n              lab_0x4032a7:;\n                // 0x4032a7\n                int64_t v388; // 0x401ea0\n                char v389 = v383 == 0 == v377 <= v388 ? v349 : v384;\n                v360 = v388;\n                int64_t v390; // 0x401ea0\n                v358 = v390;\n                v356 = v348;\n                v369 = v374;\n                v371 = v382;\n                v354 = v355 - v376;\n                v353 = v389;\n                v351 = v378;\n                if (v350 == v348) {\n                    goto lab_0x40379f;\n                }\n            }\n            char * v391 = dcgettext(NULL, \"write error\", 5); // 0x403411\n            int32_t * v392 = __errno_location(); // 0x403419\n            int32_t err_num2 = *v392; // 0x40342b\n            error(1, err_num2, \"%s\", v391);\n            v393 = (int32_t *)v348;\n            v394 = v349;\n            v395 = v337;\n            int64_t v396; // 0x401ea0\n            v397 = v396;\n            v398 = v350;\n            v399 = v337;\n            int64_t v400; // 0x401ea0\n            v401 = v400;\n            goto lab_0x403434;\n        }\n    }\n  lab_0x4030d0:;\n    int64_t v402 = v273;\n    int64_t v403 = v272;\n    int64_t v404 = v270;\n    int64_t v405 = v268;\n    int64_t v406 = v267;\n    int64_t v407 = v264;\n    int32_t v408 = v262;\n    int64_t v409 = v261;\n    char v410 = v260;\n    uint64_t v411 = v259;\n    int64_t v412 = 0x100000000 * (int64_t)v263 >> 32; // 0x4030d0\n    int64_t v413 = v269 % 256; // 0x4030d5\n    function_4049a0(v413, v412, v271);\n    int64_t v414 = (int64_t)v265; // 0x4030eb\n    v206 = v410;\n    v208 = v409;\n    v210 = v408;\n    v212 = v263;\n    v214 = v408;\n    v216 = v407;\n    v218 = v406;\n    v220 = v405;\n    v222 = v413;\n    v238 = v404;\n    v225 = v414;\n    v227 = v403;\n    v229 = v402;\n    if (v271 > v411) {\n        int64_t * v415 = (int64_t *)(function_4076f0((int32_t)v412, v411) & 0xffffffff); // 0x403122\n        v205 = v410;\n        v207 = v409;\n        v209 = v408;\n        v211 = v415;\n        v213 = v408;\n        v215 = v407;\n        v217 = v406;\n        v219 = v405;\n        v221 = v412;\n        v223 = 0;\n        v224 = v414;\n        v226 = v403;\n        v228 = v402;\n        v230 = v409;\n        v231 = v408;\n        v232 = v415;\n        v233 = v408;\n        v234 = v407;\n        v235 = v406;\n        v236 = v405;\n        v237 = v404;\n        v239 = v414;\n        v240 = v403;\n        v241 = v402;\n        if (v404 != 0) {\n            goto lab_0x402a95;\n        } else {\n            goto lab_0x402a15;\n        }\n    } else {\n        goto lab_0x402a8c;\n    }\n  lab_0x403498:;\n    int64_t v416 = v417; // 0x403498\n    v418 = v419;\n    v420 = v421;\n    v422 = v417;\n    v423 = v424;\n    v425 = v426;\n    v427 = v428;\n    v429 = v430;\n    v431 = -1;\n    v432 = v416;\n    v433 = v418;\n    v434 = v428;\n    v435 = v416;\n    v436 = v430;\n    v437 = offset2;\n    v438 = v430;\n    int64_t v439; // 0x401ea0\n    int64_t v440; // 0x401ea0\n    int64_t v441; // 0x401ea0\n    int64_t v442; // 0x401ea0\n    int64_t v443; // 0x401ea0\n    int64_t v444; // 0x401ea0\n    int64_t v445; // 0x401ea0\n    int64_t v446; // 0x401ea0\n    int64_t v447; // 0x401ea0\n    char v448; // 0x401ea0\n    int64_t v449; // 0x401ea0\n    int64_t v450; // 0x401ea0\n    int32_t * v451; // 0x401ea0\n    int32_t v452; // 0x401ea0\n    int32_t v453; // 0x401ea0\n    int64_t * v454; // 0x401ea0\n    int128_t v455; // 0x401ea0\n    int64_t offset; // 0x40358a\n    if (offset2 < v418) {\n        int64_t v456; // 0x401ea0\n        while (true) {\n          lab_0x4034b7:\n            // 0x4034b7\n            v457 = v437;\n            int64_t v458 = v436;\n            v456 = v435;\n            int64_t v459 = v438; // 0x4034bb\n            if (v438 == -1) {\n                int64_t v460 = function_406fe0(0, v428, v456); // 0x40353b\n                v459 = v460;\n                if (v460 == -1) {\n                    // break -> 0x40354a\n                    break;\n                }\n            }\n            uint64_t v461 = v459;\n            v420 = v421;\n            v422 = v417;\n            v423 = v424;\n            v425 = v426;\n            v427 = v428;\n            v429 = v458;\n            v431 = -1;\n            v432 = v456;\n            v433 = v418;\n            v434 = v428;\n            if (v461 == 0) {\n                goto lab_0x402fc5_3;\n            }\n            uint64_t v462 = v418 - v457; // 0x4034d1\n            v463 = v462 > v461 ? v461 : v462;\n            v464 = v456;\n            if (v463 == function_4052d0(1, v428, v463)) {\n                goto lab_0x403528;\n            } else {\n                // 0x4034e8\n                err_num3 = __errno_location();\n                if (g66 == NULL) {\n                    goto lab_0x4034fc;\n                } else {\n                    // 0x4034f7\n                    if (*err_num3 == 32) {\n                        goto lab_0x403528;\n                    } else {\n                        goto lab_0x4034fc;\n                    }\n                }\n            }\n        }\n        int64_t v465 = function_406e40(0, 3, (int64_t)g53); // 0x403558\n        error(1, *__errno_location(), \"%s\", (char *)v465);\n        v466 = v419;\n        v467 = v417;\n        v468 = v424;\n        v469 = v426;\n        v470 = v428;\n        v471 = v472;\n        v473 = v474;\n        v475 = v476;\n        v477 = &g85;\n        v478 = v465;\n        v479 = 1;\n        v480 = v481;\n        v482 = v483;\n        v484 = v485;\n        v486 = v487;\n        v488 = v456;\n        v489 = v428;\n      lab_0x40357b:\n        // 0x40357b\n        v439 = v484;\n        v445 = v482;\n        v450 = v475;\n        v449 = v470;\n        v452 = v467;\n        v455 = v466;\n        if (g51 == 0) {\n            goto lab_0x4035f3;\n        } else {\n            // 0x40358a\n            v443 = v489;\n            v441 = v488;\n            v440 = v486;\n            v444 = v480;\n            v446 = v477;\n            v448 = v473;\n            v451 = v471;\n            v453 = v469;\n            v454 = v468;\n            offset = v478 + v446;\n            v447 = v479;\n            v442 = g51;\n            if (g51 < offset || (g50 & 0xd000) != 0x8000) {\n                int32_t v490 = lseek(0, 0, SEEK_END); // 0x4035ad\n                v127 = v455;\n                v129 = v452;\n                v131 = v449;\n                v133 = v450;\n                v136 = v445;\n                v138 = v439;\n                if (v490 < 0) {\n                    goto lab_0x4035fe;\n                } else {\n                    int64_t v491 = v490; // 0x4035ad\n                    v447 = 0;\n                    v442 = offset;\n                    if (offset == v491) {\n                        goto lab_0x4035d7;\n                    } else {\n                        // 0x4035bf\n                        v127 = v455;\n                        v129 = v452;\n                        v131 = v449;\n                        v133 = v450;\n                        v136 = v445;\n                        v138 = v439;\n                        if (lseek(0, (int32_t)offset, SEEK_SET) < 0) {\n                            goto lab_0x4035fe;\n                        } else {\n                            int64_t v492 = v491 - offset; // 0x4035d0\n                            v447 = 0;\n                            v442 = v492 < 0 == ((v492 ^ v491) & (offset ^ v491)) < 0 ? v491 : offset;\n                            goto lab_0x4035d7;\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4035d7;\n            }\n        }\n    } else {\n        goto lab_0x402fc5_3;\n    }\n  lab_0x4035f3:\n    // 0x4035f3\n    *__errno_location() = 75;\n    v127 = v455;\n    v129 = v452;\n    v131 = v449;\n    v133 = v450;\n    v136 = v445;\n    v138 = v439;\n    goto lab_0x4035fe;\n  lab_0x4035d7:;\n    int64_t v493 = v442 - offset; // 0x4035e1\n    int64_t v494 = v493 + v446; // 0x4035e7\n    v495 = v455;\n    v496 = v452;\n    v497 = v454;\n    v498 = v453;\n    v499 = v449;\n    v500 = v451;\n    v501 = v448;\n    v502 = v450;\n    v503 = offset;\n    v504 = v447;\n    v505 = v444;\n    v506 = v445;\n    v507 = v439;\n    v508 = v440;\n    v509 = v494;\n    v510 = v441;\n    v511 = v493;\n    v512 = v443;\n    if (v494 != 0x7fffffffffffffff) {\n        goto lab_0x4028a2;\n    } else {\n        goto lab_0x4035f3;\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "403be0",
            "funcEndAddr": "403c0b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403be0\n    int64_t v1; // 0x403be0\n    __libc_start_main(0x401ea0, (int32_t)a4, (char **)&v1, (void (*)())0x409890, (void (*)())0x4098f0, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403c0b",
            "funcStartAddr": "403c0b",
            "funcEndAddr": "403c2a",
            "decompiledFuncCode": "int64_t function_403c0b(void) {\n    // 0x403c0b\n    return 0x60e4c8;\n}\n"
        },
        {
            "funcName": "function_403c2a",
            "funcStartAddr": "403c2a",
            "funcEndAddr": "403c61",
            "decompiledFuncCode": "int64_t function_403c2a(void) {\n    // 0x403c2a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_403c61",
            "funcStartAddr": "403c61",
            "funcEndAddr": "403cb8",
            "decompiledFuncCode": "int64_t function_403c61(void) {\n    // 0x403c61\n    if (g39 != 0) {\n        // 0x403cb7\n        int64_t result; // 0x403c61\n        return result;\n    }\n    int64_t v1 = g40; // 0x403c94\n    int64_t result2; // 0x403ca6\n    if (g40 >= ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x403ca6\n        result2 = function_403c0b();\n        g39 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g15 - (int64_t)&g14 >> 3) - 1) {\n        // 0x403c96\n        v1++;\n    }\n    // 0x403c8a\n    g40 = v1;\n    // 0x403ca6\n    result2 = function_403c0b();\n    g39 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403cb8",
            "funcStartAddr": "403cb8",
            "funcEndAddr": "403cbd",
            "decompiledFuncCode": "int64_t function_403cb8(void) {\n    // 0x403cb8\n    return function_403c2a();\n}\n"
        },
        {
            "funcName": "function_403cc0",
            "funcStartAddr": "403cc0",
            "funcEndAddr": "404500",
            "decompiledFuncCode": "int64_t function_403cc0(void) {\n    int32_t fds[2]; // 0x40401f\n    int32_t v1 = g58; // 0x403cca\n    int32_t v2 = g56; // 0x403cd1\n    int64_t v3 = v2; // 0x403cd1\n    int64_t dest_mem; // 0x403cc0\n    if (v1 == 0) {\n        goto lab_0x403d80;\n    } else {\n        char * format; // 0x403f8a\n        if (v2 == 0) {\n            // 0x403f7e\n            format = dcgettext(NULL, \"output file suffixes exhausted\", 5);\n            error(1, (int32_t)\"output file suffixes exhausted\" ^ (int32_t)\"output file suffixes exhausted\", format);\n            goto lab_0x403fa0;\n        } else {\n            int64_t v4 = v3; // 0x403d10\n            int64_t v5 = 8 * v3 - 8 + g41; // 0x403d10\n            v4--;\n            int64_t * v6 = (int64_t *)v5;\n            int64_t v7 = *v6 + 1; // 0x403d45\n            *v6 = v7;\n            while (g21 == 0 || v4 != 0) {\n                char v8 = *(char *)(v7 + (int64_t)g20); // 0x403d18\n                char * v9 = (char *)(v4 + (int64_t)g57); // 0x403d1c\n                *v9 = v8;\n                if (v8 != 0) {\n                    // 0x403d6e\n                    return dest_mem;\n                }\n                // 0x403d23\n                *v6 = 0;\n                *v9 = *(char *)&g20;\n                v5 -= 8;\n                if (v4 == 0) {\n                    // 0x403f7e\n                    format = dcgettext(NULL, \"output file suffixes exhausted\", 5);\n                    error(1, (int32_t)\"output file suffixes exhausted\" ^ (int32_t)\"output file suffixes exhausted\", format);\n                    goto lab_0x403fa0;\n                }\n                v4--;\n                v6 = (int64_t *)v5;\n                v7 = *v6 + 1;\n                *v6 = v7;\n            }\n        }\n    }\n  lab_0x4040d4:;\n    // 0x4040d4\n    int32_t fd; // 0x403cc0\n    uint32_t v10 = close(fd); // 0x4040d8\n    int64_t v11 = v10; // 0x4040dd\n    int32_t * err_num = __errno_location(); // 0x4040e0\n    int32_t * err_num3 = err_num; // 0x4040eb\n    int64_t v12 = v11; // 0x4040eb\n    int64_t v13; // 0x403cc0\n    int32_t * err_num2; // 0x403cc0\n    int64_t v14; // 0x403cc0\n    int32_t fd2; // bp-208, 0x403cc0\n    if (v10 != 0) {\n        goto lab_0x40441f;\n    } else {\n        // 0x4040f1\n        if (fd2 == 0) {\n            goto lab_0x404117;\n        } else {\n            // 0x4040f8\n            err_num2 = err_num;\n            if (dup2(fd2, 0) != 0) {\n                goto lab_0x4044a8;\n            } else {\n                // 0x404107\n                if (close(fd2) != 0) {\n                    // 0x404280\n                    error(1, *err_num, dcgettext(NULL, \"closing input pipe\", 5));\n                    v14 = 1;\n                    v13 = v11;\n                    goto lab_0x4042a8;\n                } else {\n                    goto lab_0x404117;\n                }\n            }\n        }\n    }\n  lab_0x403d80:;\n    int64_t v15 = g44; // 0x403d80\n    int64_t v16; // 0x403cc0\n    int64_t v17; // 0x403cc0\n    int64_t v18; // 0x403cc0\n    if (v15 != 0) {\n        uint64_t v19 = v15 + 3; // 0x403e21\n        g44 = v15 + 2;\n        g56 = v2 + 1;\n        if (v19 < (int64_t)g43) {\n            // 0x403f6d\n            int64_t v20; // 0x403cc0\n            function_4078e0(v20);\n            // UNREACHABLE\n        }\n        int64_t v21 = function_4076f0(v1, v19); // 0x403e44\n        int64_t v22 = g43; // 0x403e50\n        g58 = v21;\n        int64_t v23 = v22 + 1; // 0x403e6c\n        g43 = v23;\n        char v24 = *(char *)(*(int64_t *)g41 + (int64_t)g20); // 0x403e77\n        *(char *)(v21 + v22) = v24;\n        v18 = v23;\n        v17 = v21;\n        v16 = g41;\n    } else {\n        int32_t len = strlen(g59); // 0x403d97\n        g43 = len;\n        int64_t len2 = 0; // 0x403db2\n        if (g54 != NULL) {\n            // 0x403db4\n            len2 = strlen(g54);\n        }\n        uint64_t v25 = (int64_t)len; // 0x403d97\n        g42 = len2;\n        int64_t v26 = v25 + v3 + len2; // 0x403dc3\n        uint64_t v27 = v26 + 1; // 0x403dc6\n        g44 = v26;\n        if (v27 < v25) {\n            // 0x403f6d\n            function_4078e0((int64_t)g54);\n            // UNREACHABLE\n        }\n        int64_t v28 = function_4076f0(v1, v27); // 0x403ddd\n        g58 = v28;\n        memcpy((int64_t *)v28, (int64_t *)g59, g43);\n        v18 = g43;\n        v17 = v28;\n        v16 = g41;\n    }\n    int64_t v29 = v17 + v18; // 0x403e7f\n    int64_t v30 = g56; // 0x403e84\n    g57 = (char *)v29;\n    int64_t * set_mem = memset((int64_t *)v29, (int32_t)*(char *)&g20, g56); // 0x403e9b\n    if (g54 != NULL) {\n        // 0x403eac\n        memcpy((int64_t *)((int64_t)set_mem + v30), (int64_t *)g54, g42);\n    }\n    // 0x403ebc\n    *(char *)(g44 + v17) = 0;\n    free((int64_t *)v16);\n    int64_t result = function_407860(v30, 8); // 0x403ed8\n    g41 = result;\n    if (g55 == NULL) {\n        // 0x403d6e\n        return result;\n    }\n    if (v15 == 0) {\n        int32_t len3 = strlen(g55); // 0x403f03\n        int64_t v31 = len3; // 0x403f03\n        int64_t v32 = (int64_t)g56 - v31; // 0x403f1f\n        dest_mem = (int64_t)memcpy((int64_t *)(v32 + (int64_t)g57), (int64_t *)g55, len3);\n        if (len3 == 0) {\n            // 0x403d6e\n            return dest_mem;\n        }\n        int64_t result2 = 8 * v32 + result; // 0x403f42\n        int64_t v33 = v31; // 0x403f45\n        v33--;\n        *(int64_t *)(8 * v33 + result2) = (int64_t)*(char *)(v33 + (int64_t)g55) - 48;\n        while (v33 != 0) {\n            // 0x403f48\n            v33--;\n            *(int64_t *)(8 * v33 + result2) = (int64_t)*(char *)(v33 + (int64_t)g55) - 48;\n        }\n        // 0x403d6e\n        return result2;\n    }\n    goto lab_0x403fa0;\n  lab_0x403fa0:\n    // 0x403fa0\n    __assert_fail(\"! widen\", \"src/split.c\", 408, \"next_file_name\");\n    int64_t v34 = (int64_t)\"! widen\"; // 0x403fd6\n    int64_t v35 = (int64_t)\"! widen\"; // 0x403fd6\n    int64_t v36; // 0x403cc0\n    int64_t v37; // 0x403cc0\n    int64_t v38; // 0x403cc0\n    int64_t v39; // 0x403cc0\n    if (g66 == NULL) {\n        goto lab_0x404180;\n    } else {\n        char * env_val = getenv(\"SHELL\"); // 0x403fe1\n        if (setenv(\"FILE\", \"! widen\", 1) != 0) {\n            // 0x4044ca\n            error(1, *__errno_location(), dcgettext(NULL, \"failed to set FILE environment variable\", 5));\n            return &g85;\n        }\n        int64_t v40 = env_val == NULL ? (int64_t)\"/bin/sh\" : (int64_t)env_val; // 0x403ffe\n        v38 = v40;\n        v36 = (int64_t)\"! widen\";\n        v39 = v40;\n        v37 = (int64_t)\"! widen\";\n        if (g47 != 0) {\n            goto lab_0x404238;\n        } else {\n            goto lab_0x40401c;\n        }\n    }\n  lab_0x404180:;\n    int64_t v41 = v35; // 0x404187\n    v14 = v34;\n    v13 = v35;\n    if (g47 != 0) {\n        goto lab_0x4042a8;\n    } else {\n        goto lab_0x40418d;\n    }\n  lab_0x4042a8:\n    // 0x4042a8\n    function_406d70(4, v14);\n    __fprintf_chk(g36, 1, dcgettext(NULL, \"creating file %s\\n\", 5));\n    v41 = v13;\n    goto lab_0x40418d;\n  lab_0x40418d:;\n    int64_t v42 = v41;\n    int64_t v43 = function_405210(v42, 65, 438); // 0x40419c\n    int64_t v44 = v43 & 0xffffffff; // 0x4041a1\n    int32_t fd3 = v43; // 0x4041a3\n    dest_mem = v44;\n    if (fd3 < 0) {\n        // 0x403d6e\n        return dest_mem;\n    }\n    int32_t v45 = __fxstat(1, fd3, (struct stat *)&fd2); // 0x4041b5\n    int64_t v46 = v42; // 0x4041bc\n    int64_t v47; // 0x403cc0\n    if (v45 != 0) {\n        goto lab_0x40446b;\n    } else {\n        // 0x4041c2\n        int64_t v48; // 0x403cc0\n        if (g49 != v48) {\n            goto lab_0x4041e1;\n        } else {\n            // 0x4041d0\n            v47 = v42;\n            if ((int64_t)g48 == (int64_t)fd2) {\n                goto lab_0x4043c0;\n            } else {\n                goto lab_0x4041e1;\n            }\n        }\n    }\n  lab_0x404238:\n    // 0x404238\n    function_406e40(0, 3, v37);\n    __fprintf_chk(g36, 1, dcgettext(NULL, \"executing with FILE=%s\\n\", 5));\n    v38 = v39;\n    v36 = v37;\n    goto lab_0x40401c;\n  lab_0x40401c:;\n    int64_t v49 = v36;\n    fds[0] = &fd2;\n    int64_t v50 = v49; // 0x404026\n    int64_t v51; // 0x403cc0\n    int64_t path; // 0x403cc0\n    if (pipe(fds) != 0) {\n        goto lab_0x404441;\n    } else {\n        int32_t v52 = fork(); // 0x40402c\n        v51 = v49;\n        switch (v52) {\n            case 0: {\n                // 0x4040a0\n                path = v38;\n                if (g62 == 0) {\n                    goto lab_0x4040d4;\n                } else {\n                    int64_t v53; // 0x403cc0\n                    while (close(*(int32_t *)(4 * v53 + (int64_t)g64)) == 0) {\n                        // 0x4040c7\n                        int64_t v54; // 0x403cc0\n                        int64_t v55 = v54 + 1; // 0x4040c7\n                        int32_t v56 = g62; // 0x4040cb\n                        v53 = v55;\n                        if (v55 >= (int64_t)v56) {\n                            goto lab_0x4040d4;\n                        }\n                        v54 = v53;\n                        int32_t * v57 = g64; // 0x4040b0\n                        int32_t v58 = *(int32_t *)(4 * v54 + (int64_t)v57); // 0x4040b7\n                    }\n                    // 0x40436c\n                    error(1, *__errno_location(), dcgettext(NULL, \"closing prior pipe\", 5));\n                    goto lab_0x404396;\n                }\n            }\n            case -1: {\n                goto lab_0x4043f5;\n            }\n            default: {\n                // 0x404040\n                if (close(fd2) == 0) {\n                    int32_t v59 = g62; // 0x404050\n                    int64_t v60 = v59; // 0x404050\n                    int64_t v61 = g63; // 0x404057\n                    g65 = v52;\n                    int32_t * v62 = g64; // 0x404064\n                    int64_t v63 = (int64_t)v62; // 0x404064\n                    int64_t v64 = v60; // 0x40406e\n                    if (v61 == v60) {\n                        int64_t v65; // 0x403cc0\n                        int64_t v66; // 0x403cc0\n                        uint32_t v67; // 0x404040\n                        if (v62 == NULL) {\n                            // 0x404339\n                            v65 = 32;\n                            v66 = 128;\n                            if (v59 != 0) {\n                                // 0x40433e\n                                v65 = v60;\n                                v66 = 4 * v60;\n                                if (v59 > -1 != v59 > -1) {\n                                    // 0x404358\n                                    function_4078e0((int64_t)v67);\n                                    // UNREACHABLE\n                                }\n                            }\n                        } else {\n                            if (v59 <= 0xffffffff) {\n                                // 0x404358\n                                function_4078e0((int64_t)v67);\n                                // UNREACHABLE\n                            }\n                            int64_t v68 = v60 + 1 + v60 / 2; // 0x40430a\n                            v65 = v68;\n                            v66 = 4 * v68;\n                        }\n                        int64_t v69 = v66;\n                        int64_t v70 = v65;\n                        g63 = v70;\n                        int64_t v71 = function_4076f0((int32_t)v63, v69); // 0x404321\n                        int32_t v72 = g62; // 0x404326\n                        g64 = (int32_t *)v71;\n                        v64 = v72;\n                    }\n                    int64_t v73 = v64;\n                    g62 = (int32_t)v73 + 1;\n                    uint32_t v74; // 0x403cc0\n                    dest_mem = v74;\n                    int64_t result3 = dest_mem;\n                    return result3;\n                }\n                goto lab_0x404396;\n            }\n        }\n    }\n  lab_0x40446b:\n    // 0x40446b\n    function_406d70(4, v46);\n    char * format2 = dcgettext(NULL, \"failed to stat %s\", 5); // 0x404487\n    error(1, *__errno_location(), format2);\n    err_num2 = (int32_t *)format2;\n    goto lab_0x4044a8;\n  lab_0x404441:\n    // 0x404441\n    error(1, *__errno_location(), dcgettext(NULL, \"failed to create pipe\", 5));\n    v46 = v50;\n    goto lab_0x40446b;\n  lab_0x4044a8:\n    // 0x4044a8\n    error(1, *err_num2, dcgettext(NULL, \"moving input pipe\", 5));\n    // 0x4044ca\n    error(1, *__errno_location(), dcgettext(NULL, \"failed to set FILE environment variable\", 5));\n    return &g85;\n  lab_0x4041e1:\n    // 0x4041e1\n    dest_mem = v44;\n    if (ftruncate(fd3, 0) == 0) {\n        // 0x403d6e\n        return dest_mem;\n    }\n    int64_t v75 = function_406e40(0, 3, v42); // 0x4041fc\n    error(1, *__errno_location(), dcgettext(NULL, \"%s: error truncating\", 5));\n    v39 = v75;\n    v37 = v42;\n    goto lab_0x404238;\n  lab_0x4043f5:;\n    char * format3 = dcgettext(NULL, \"fork system call failed\", 5); // 0x404401\n    error(1, *__errno_location(), format3);\n    err_num3 = (int32_t *)format3;\n    v12 = v51;\n    goto lab_0x40441f;\n  lab_0x4043c0:\n    // 0x4043c0\n    function_406d70(4, v47);\n    error(1, (int32_t)\"%s would overwrite input; aborting\" ^ (int32_t)\"%s would overwrite input; aborting\", dcgettext(NULL, \"%s would overwrite input; aborting\", 5));\n    v51 = v47;\n    goto lab_0x4043f5;\n  lab_0x404396:\n    // 0x404396\n    error(1, *__errno_location(), dcgettext(NULL, \"failed to close input pipe\", 5));\n    v47 = v49;\n    goto lab_0x4043c0;\n  lab_0x40441f:\n    // 0x40441f\n    error(1, *err_num3, dcgettext(NULL, \"closing output pipe\", 5));\n    v50 = v12;\n    goto lab_0x404441;\n  lab_0x404117:\n    // 0x404117\n    sigprocmask(SIG_SETMASK, (struct _TYPEDEF_sigset_t *)&g61, NULL);\n    int64_t exec_arg = function_405180(path, (int64_t)&g61); // 0x404132\n    execl((char *)path, (char *)exec_arg);\n    error(1, *err_num, dcgettext(NULL, \"failed to run command: \\\"%s -c %s\\\"\", 5));\n    v34 = 1;\n    v35 = (int64_t)g66;\n    goto lab_0x404180;\n}\n"
        },
        {
            "funcName": "function_404500",
            "funcStartAddr": "404500",
            "funcEndAddr": "4046f0",
            "decompiledFuncCode": "int64_t function_404500(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 32 * a2 + a1; // 0x404510\n    int32_t * v2 = (int32_t *)(v1 + 8); // 0x40451a\n    uint32_t v3 = *v2; // 0x40451a\n    if (v3 >= 0) {\n        // 0x404522\n        return 0;\n    }\n    int64_t v4 = a3 - 1; // 0x404537\n    int64_t v5 = a2 == 0 ? v4 : a2 - 1; // 0x404544\n    int32_t v6 = -1; // 0x40454f\n    int64_t v7 = v5; // 0x40454f\n    int64_t v8 = 0; // 0x40454f\n    int64_t v9 = a2; // 0x40454f\n    if (v3 == -1) {\n        goto lab_0x4045eb;\n    } else {\n        goto lab_0x404558;\n    }\n  lab_0x4045eb:;\n    int64_t v10 = v7; // 0x4045f2\n    int64_t v11 = v8; // 0x4045f2\n    int64_t v12 = v9; // 0x4045f2\n    int32_t fd = v6; // 0x4045f2\n    int64_t v13 = v8; // 0x4045f2\n    if (v6 < 0) {\n        goto lab_0x40456c;\n    } else {\n        goto lab_0x4045f8;\n    }\n  lab_0x404558:;\n    int64_t v14 = 0;\n    int32_t v15 = function_405210(*(int64_t *)v1, 3073, a3);\n    v10 = v5;\n    v11 = v14;\n    v12 = 3073;\n    fd = v15;\n    v13 = v14;\n    if (v15 >= 0) {\n        goto lab_0x4045f8;\n    } else {\n        goto lab_0x40456c;\n    }\n  lab_0x40456c:\n    // 0x40456c\n    v9 = v12;\n    int32_t * err_num = __errno_location(); // 0x40456c\n    int64_t * v16; // 0x404500\n    int64_t v17; // 0x404500\n    int64_t v18; // 0x404500\n    if (*err_num < 25) {\n        v7 = v10;\n        int64_t v19 = 32 * v7 + a1; // 0x4045a6\n        int32_t * v20 = (int32_t *)(v19 + 8);\n        while (*v20 < 0) {\n            int64_t v21 = v7 == 0 ? v4 : v7 - 1; // 0x40458f\n            if (v21 == a2) {\n                int64_t * v22 = (int64_t *)v1;\n                error(1, *err_num, \"%s\", (char *)function_406e40(0, 3, *v22));\n                v16 = v22;\n                v17 = v19;\n                goto lab_0x40465f;\n            }\n            v7 = v21;\n            v19 = 32 * v7 + a1;\n            v20 = (int32_t *)(v19 + 8);\n        }\n        int64_t * v23 = (int64_t *)(v19 + 16); // 0x4045b0\n        v18 = v19;\n        if ((int32_t)function_407e60(*v23, v9) != 0) {\n            goto lab_0x404690;\n        } else {\n            // 0x4045c6\n            *v20 = -2;\n            v6 = *v2;\n            *v23 = 0;\n            v8 = 1;\n            if (v6 != -1) {\n                goto lab_0x404558;\n            } else {\n                goto lab_0x4045eb;\n            }\n        }\n    } else {\n        // 0x40456c\n        v16 = (int64_t *)v1;\n        v17 = v11;\n        goto lab_0x40465f;\n    }\n  lab_0x4045f8:\n    // 0x4045f8\n    *v2 = fd;\n    struct _IO_FILE * v24 = fdopen(fd, \"a\"); // 0x404603\n    *(int64_t *)(v1 + 16) = (int64_t)v24;\n    if (v24 != NULL) {\n        int32_t v25 = g65; // 0x404615\n        g65 = 0;\n        *(int32_t *)(v1 + 24) = v25;\n        // 0x404522\n        return v13 & 0xffffffff;\n    }\n    goto lab_0x4046bc;\n  lab_0x4046bc:\n    // 0x4046bc\n    error(1, *__errno_location(), \"%s\", (char *)function_406e40(0, 3, *(int64_t *)v1));\n    return &g85;\n  lab_0x404690:\n    // 0x404690\n    error(1, *err_num, \"%s\", (char *)function_406e40(0, 3, *(int64_t *)v18));\n    goto lab_0x4046bc;\n  lab_0x40465f:\n    // 0x40465f\n    error(1, *err_num, \"%s\", (char *)function_406e40(0, 3, *v16));\n    v18 = v17;\n    goto lab_0x404690;\n}\n"
        },
        {
            "funcName": "function_4046f0",
            "funcStartAddr": "4046f0",
            "funcEndAddr": "4049a0",
            "decompiledFuncCode": "int64_t function_4046f0(int32_t a1, int32_t fd, int32_t pid, int64_t a4) {\n    int64_t v1; // 0x4046f0\n    int64_t v2; // 0x4046f0\n    int64_t v3; // 0x4046f0\n    int32_t * err_num2; // 0x404714\n    if (a1 == 0) {\n        if (fd < 0) {\n            goto lab_0x4047a0;\n        } else {\n            int32_t v4 = close(fd); // 0x4047b6\n            v2 = v4;\n            if (v4 >= 0) {\n                goto lab_0x40475c;\n            } else {\n                int64_t v5 = function_406e40(0, 3, a4); // 0x4047c9\n                error(1, *__errno_location(), \"%s\", (char *)v5);\n                v3 = v5;\n                goto lab_0x4047f0;\n            }\n        }\n    } else {\n        int64_t v6 = function_407e60((int64_t)a1, (int64_t)fd); // 0x40470b\n        v1 = v6;\n        if ((int32_t)v6 == 0) {\n            goto lab_0x404758;\n        } else {\n            // 0x404714\n            err_num2 = __errno_location();\n            if (g66 == NULL) {\n                goto lab_0x40472b;\n            } else {\n                // 0x404726\n                if (*err_num2 == 32) {\n                    goto lab_0x404758;\n                } else {\n                    goto lab_0x40472b;\n                }\n            }\n        }\n    }\n  lab_0x4047a0:\n    // 0x4047a0\n    v3 = a4;\n    int64_t result; // 0x4046f0\n    if (pid >= 0 != pid != 0) {\n        // 0x4047a5\n        return result;\n    }\n    goto lab_0x4047f0;\n  lab_0x404758:\n    // 0x404758\n    v2 = v1;\n    result = v1;\n    if (fd < 0) {\n        goto lab_0x4047a0;\n    } else {\n        goto lab_0x40475c;\n    }\n  lab_0x4047f0:;\n    int64_t v7 = v3;\n    int32_t stat_loc = 0; // bp-76, 0x4047fa\n    int64_t v8; // 0x4046f0\n    if (waitpid(pid, &stat_loc, 0) == -1) {\n        int32_t * err_num = __errno_location(); // 0x404918\n        if (*err_num == 10) {\n            goto lab_0x404810;\n        } else {\n            // 0x404929\n            error(1, *err_num, dcgettext(NULL, \"waiting for child process\", 5));\n            v8 = (int64_t)err_num;\n            goto lab_0x404950;\n        }\n    } else {\n        goto lab_0x404810;\n    }\n  lab_0x40475c:\n    // 0x40475c\n    result = v2;\n    if (g62 != 0) {\n        int64_t v9 = (int64_t)g64; // 0x404768\n        int64_t v10 = (int64_t)g62 - 1;\n        int64_t v11 = 0; // 0x404771\n        int64_t v12 = v9; // 0x404771\n        int32_t * v13 = g64; // 0x404771\n        if (*g64 == fd) {\n          lab_0x4048a0:;\n            uint32_t v14 = *(int32_t *)(4 * v10 + v9); // 0x4048a0\n            g62 = v10;\n            *v13 = v14;\n            result = v14;\n        } else {\n            result = v11;\n            while (v10 != v11) {\n                int64_t v15 = v12 + 4;\n                int32_t * v16 = (int32_t *)v15;\n                v11++;\n                v12 = v15;\n                v13 = v16;\n                if (*v16 == fd) {\n                    goto lab_0x4048a0;\n                }\n                result = v11;\n            }\n        }\n    }\n    goto lab_0x4047a0;\n  lab_0x40472b:\n    // 0x40472b\n    error(1, *err_num2, \"%s\", (char *)function_406e40(0, 3, a4));\n    v1 = &g85;\n    goto lab_0x404758;\n  lab_0x404810:;\n    uint32_t v17 = stat_loc % 128; // 0x404816\n    uint32_t v18 = v17 + 1; // 0x404819\n    int64_t result2 = v18; // 0x404819\n    if ((char)v18 < 2) {\n        if (v17 != 0) {\n            // 0x404973\n            error(1, (int32_t)\"unknown status from command (0x%X)\" ^ (int32_t)\"unknown status from command (0x%X)\", dcgettext(NULL, \"unknown status from command (0x%X)\", 5));\n            return &g85;\n        }\n        uint32_t status = stat_loc / 256 % 256;\n        if (status == 0) {\n            // 0x4047a5\n            return result2;\n        }\n        // 0x4048cb\n        function_406e40(0, 3, v7);\n        error(status, (int32_t)\"with FILE=%s, exit %d from command: %s\" ^ (int32_t)\"with FILE=%s, exit %d from command: %s\", dcgettext(NULL, \"with FILE=%s, exit %d from command: %s\", 5));\n        // 0x4047a5\n        return &g85;\n    }\n    // 0x404824\n    if (v17 == 13) {\n        // 0x4047a5\n        return result2;\n    }\n    int64_t v19 = v17; // 0x404816\n    int64_t v20; // bp-72, 0x4046f0\n    int64_t v21 = function_409040(v19, &v20, 0); // 0x404834\n    v8 = v19;\n    char * format; // 0x404866\n    if ((int32_t)v21 == 0) {\n        // 0x404841\n        function_406e40(0, 3, v7);\n        format = dcgettext(NULL, \"with FILE=%s, signal %s from command: %s\", 5);\n        error((int32_t)v19 + 128, (int32_t)\"with FILE=%s, signal %s from command: %s\" ^ (int32_t)\"with FILE=%s, signal %s from command: %s\", format);\n        return &g85;\n    }\n    goto lab_0x404950;\n  lab_0x404950:\n    // 0x404950\n    __sprintf_chk((char *)&v20, 1, 19, \"%d\", v8 & 0xffffffff);\n    // 0x404841\n    function_406e40(0, 3, v7);\n    format = dcgettext(NULL, \"with FILE=%s, signal %s from command: %s\", 5);\n    error((int32_t)v8 + 128, (int32_t)\"with FILE=%s, signal %s from command: %s\" ^ (int32_t)\"with FILE=%s, signal %s from command: %s\", format);\n    return &g85;\n}\n"
        },
        {
            "funcName": "function_4049a0",
            "funcStartAddr": "4049a0",
            "funcEndAddr": "404ab0",
            "decompiledFuncCode": "int64_t function_4049a0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1; // 0x4049a0\n    if ((char)a1 == 0) {\n        // 0x404a68\n        v1 = (uint32_t)g19;\n    } else {\n        if ((a3 || a2) == 0) {\n            // 0x4049bd\n            if (g46 != 0) {\n                // 0x404a5d\n                return 1;\n            }\n        }\n        // 0x4049ca\n        function_4046f0(0, g19, g65, (int64_t)g58);\n        int64_t v2 = function_403cc0(); // 0x4049e4\n        int32_t v3 = v2; // 0x4049f7\n        g19 = v3;\n        v1 = v2 & 0xffffffff;\n        if (v3 < 0) {\n            int64_t v4 = function_406e40(0, 3, (int64_t)g58); // 0x404a7e\n            error(1, *__errno_location(), \"%s\", (char *)v4);\n            return &g85;\n        }\n    }\n    // 0x404a01\n    if (function_4052d0((int32_t)v1, a2, a3) == a3) {\n        // 0x404a5d\n        return 1;\n    }\n    int32_t * err_num = __errno_location(); // 0x404a11\n    if (g66 != NULL) {\n        // 0x404a23\n        if (*err_num == 32) {\n            // 0x404a5d\n            return 0;\n        }\n    }\n    // 0x404a2a\n    error(1, *err_num, \"%s\", (char *)function_406e40(0, 3, (int64_t)g58));\n    // 0x404a5d\n    return 1;\n}\n"
        },
        {
            "funcName": "function_404ab0",
            "funcStartAddr": "404ab0",
            "funcEndAddr": "404cf0",
            "decompiledFuncCode": "int64_t function_404ab0(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4) {\n    // 0x404ab0\n    int64_t v1; // 0x404ab0\n    uint64_t v2 = v1;\n    int64_t v3 = 1; // 0x404adf\n    int64_t v4 = 1; // 0x404adf\n    int64_t v5 = a1; // 0x404adf\n    int64_t v6 = 0; // 0x404adf\n    int64_t v7; // 0x404ab0\n    int64_t v8; // 0x404ab0\n    int64_t v9; // 0x404ab0\n    int64_t v10; // 0x404ab0\n    int64_t v11; // 0x404ab0\n    int64_t v12; // 0x404ab0\n    int64_t v13; // 0x404ab0\n    int64_t v14; // 0x404ab0\n    int64_t v15; // 0x404ab0\n    int64_t v16; // 0x404ab0\n    char v17; // 0x404ab0\n    char v18; // 0x404ab0\n    if (a4 == -1) {\n        goto lab_0x404b84;\n    } else {\n        char v19 = a4 < a3; // 0x404aeb\n        v17 = v19;\n        v15 = 1;\n        v13 = 1;\n        v7 = a1;\n        v9 = a4;\n        v11 = 0;\n        v18 = v19;\n        v16 = 1;\n        v14 = 1;\n        v8 = a1;\n        v10 = a4;\n        v12 = 0;\n        if (a4 < a1) {\n            goto lab_0x404bc6;\n        } else {\n            goto lab_0x404af9;\n        }\n    }\n  lab_0x404b84:;\n    int64_t offset = v5;\n    int64_t v20 = v3;\n    int64_t v21 = v20; // 0x404b87\n    int64_t v22 = offset; // 0x404b87\n    if ((char)v4 == 0) {\n        int32_t v23 = lseek(0, (int32_t)offset, SEEK_CUR); // 0x404c4f\n        v21 = v23 != -1 ? 1 : v20 & 0xffffffff;\n        v22 = v23 != -1 ? a1 : offset;\n    }\n    int64_t v24 = function_406fe0(0, a2, a3); // 0x404b9e\n    if (v24 == -1) {\n        int64_t v25 = function_406e40(0, 3, (int64_t)g53); // 0x404cc1\n        error(1, *__errno_location(), \"%s\", (char *)v25);\n        return &g85;\n    }\n    char v26 = v24 == 0; // 0x404bb8\n    v17 = v26;\n    int64_t v27 = v24; // 0x404bc0\n    v15 = v21;\n    v13 = v4;\n    v7 = v22;\n    v9 = v24;\n    v11 = v6;\n    v18 = v26;\n    int64_t v28 = v24; // 0x404bc0\n    v16 = v21;\n    v14 = v4;\n    v8 = v22;\n    v10 = v24;\n    v12 = v6;\n    if (v24 >= v22) {\n        goto lab_0x404af9;\n    } else {\n        goto lab_0x404bc6;\n    }\n  lab_0x404af9:;\n    int64_t v29 = v9; // 0x404b05\n    int64_t v30 = v7;\n    int64_t v31 = v2 == 0;\n    int64_t v32 = a2;\n    uint64_t v33 = v15 % 256;\n    int64_t v34 = v27; // 0x404b3b\n    int64_t v35 = v33 | v13; // 0x404b3b\n    int64_t v36 = v31; // 0x404b3b\n    if ((char)(v13 || v15) != 0) {\n        // 0x404b3d\n        v34 = function_4049a0(v33, v32, v30);\n        v35 = v34 & 0xffffffff;\n        v36 = v31 % 256;\n    }\n    int64_t v37 = v35;\n    int64_t result = v34;\n    int64_t v38 = v11 + v33; // 0x404b13\n    unsigned char v39 = (char)v36 | (char)(v38 < v2); // 0x404b1c\n    int64_t v40; // 0x404ab0\n    int64_t v41; // 0x404ab0\n    int64_t v42; // 0x404ab0\n    int64_t v43; // 0x404ab0\n    int64_t v44; // 0x404ab0\n    int64_t result3; // 0x404ab0\n    int64_t v45; // 0x404ab0\n    char v46; // 0x404ab0\n    char v47; // 0x404ab0\n    while ((v39 || (char)v37) != 0) {\n        int64_t v48 = v39; // 0x404b1c\n        int64_t v49 = v29 - v30; // 0x404b2a\n        int64_t v50 = v30 + v32; // 0x404b2d\n        int64_t v51 = result; // 0x404b36\n        int64_t v52 = v48; // 0x404b36\n        int64_t v53 = v37; // 0x404b36\n        int64_t v54 = v50; // 0x404b36\n        int64_t v55 = v36; // 0x404b36\n        v29 = v49;\n        int64_t v56 = v38; // 0x404b36\n        if (v49 < a1) {\n            // 0x404b70\n            v46 = v17;\n            result3 = result;\n            v3 = v48;\n            v4 = v37;\n            v5 = a1;\n            v42 = v38;\n            v47 = v17;\n            v45 = v48;\n            v44 = v50;\n            v40 = a1;\n            v41 = v49;\n            v43 = v38;\n            if (v49 != 0) {\n                goto lab_0x404c00;\n            } else {\n                goto lab_0x404b79;\n            }\n        }\n        v30 = a1;\n        v31 = v55;\n        v32 = v54;\n        v33 = v52 % 256;\n        v34 = v51;\n        v35 = v33 | v53;\n        v36 = v31;\n        if ((char)(v53 || v52) != 0) {\n            // 0x404b3d\n            v34 = function_4049a0(v33, v32, v30);\n            v35 = v34 & 0xffffffff;\n            v36 = v31 % 256;\n        }\n        // 0x404b10\n        v37 = v35;\n        result = v34;\n        v38 = v56 + v33;\n        v39 = (char)v36 | (char)(v38 < v2);\n    }\n    // 0x404be8\n    return result;\n  lab_0x404bc6:;\n    int64_t v57 = v12;\n    int64_t v58 = v10;\n    int64_t v59 = v8;\n    int64_t v60 = v14;\n    int64_t v61 = v16;\n    char v62 = v18;\n    v46 = v62;\n    result3 = v28;\n    v3 = v61;\n    v4 = v60;\n    v5 = v59;\n    v42 = v57;\n    int64_t v63; // 0x404ab0\n    int64_t v64; // 0x404ab0\n    int64_t v65; // 0x404ab0\n    int64_t result2; // 0x404ab0\n    int64_t v66; // 0x404ab0\n    int64_t v67; // 0x404ab0\n    int64_t v68; // 0x404ab0\n    char v69; // 0x404ab0\n    if (v58 == 0) {\n        goto lab_0x404b79;\n    } else {\n        uint64_t v70 = v60 | v61;\n        v47 = v62;\n        v45 = v61;\n        v44 = a2;\n        v40 = v59;\n        v41 = v58;\n        v43 = v57;\n        if ((char)v70 != 0) {\n            goto lab_0x404c00;\n        } else {\n            int64_t v71 = v70 % 256; // 0x404bcd\n            int64_t v72 = v57 + v71; // 0x404bdb\n            result2 = v71;\n            v69 = v62;\n            v66 = v71;\n            v68 = 0;\n            v67 = 0;\n            v63 = v59;\n            v64 = v58;\n            v65 = v72;\n            if (v2 == v72) {\n                // 0x404be8\n                return result2;\n            }\n            goto lab_0x404c31;\n        }\n    }\n  lab_0x404b79:\n    // 0x404b79\n    v6 = v42;\n    if (v46 != 0) {\n        // 0x404c6e\n        if (v6 >= v2) {\n            // 0x404be8\n            return result3;\n        }\n        int64_t v73 = v6 + 1;\n        function_4049a0(1, 0, 0);\n        int64_t result4 = v73 + 1; // 0x404c9b\n        while (v2 != v73) {\n            // 0x404c83\n            v73 = result4;\n            function_4049a0(1, 0, 0);\n            result4 = v73 + 1;\n        }\n        // 0x404be8\n        return result4;\n    }\n    goto lab_0x404b84;\n  lab_0x404c00:;\n    int64_t v74 = v45 % 256; // 0x404c00\n    int64_t v75 = function_4049a0(v74, v44, v41); // 0x404c0e\n    int64_t v76 = v43 + v74; // 0x404c24\n    unsigned char v77 = ((char)v75 ^ 1) & (char)(v2 == v76); // 0x404c2d\n    result2 = v74;\n    v69 = v47;\n    v66 = v74;\n    v68 = v77;\n    v67 = v75 & 0xffffffff;\n    v63 = v40;\n    v64 = v41;\n    v65 = v76;\n    if (v77 != 0) {\n        // 0x404be8\n        return result2;\n    }\n    goto lab_0x404c31;\n  lab_0x404c31:\n    // 0x404c31\n    v46 = v69;\n    result3 = v66;\n    v3 = v68;\n    v4 = v67;\n    v5 = v63 - v64;\n    v42 = v65;\n    goto lab_0x404b79;\n}\n"
        },
        {
            "funcName": "function_404cf0",
            "funcStartAddr": "404cf0",
            "funcEndAddr": "4050bd",
            "decompiledFuncCode": "int64_t function_404cf0(int32_t status) {\n    // 0x404cf0\n    if (status != 0) {\n        // 0x404d0a\n        __fprintf_chk(g38, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x404d2f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x404d36\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE [PREFIX]]\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Output pieces of FILE to PREFIXaa, PREFIXab, ...;\\ndefault size is 1000 lines, and default PREFIX is 'x'.\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g36);\n    __fprintf_chk(g36, 1, dcgettext(NULL, \"  -a, --suffix-length=N   generate suffixes of length N (default %d)\\n      --additional-suffix=SUFFIX  append an additional SUFFIX to file names\\n  -b, --bytes=SIZE        put SIZE bytes per output file\\n  -C, --line-bytes=SIZE   put at most SIZE bytes of records per output file\\n  -d                      use numeric suffixes starting at 0, not alphabetic\\n      --numeric-suffixes[=FROM]  same as -d, but allow setting the start value\\n  -x                      use hex suffixes starting at 0, not alphabetic\\n      --hex-suffixes[=FROM]  same as -x, but allow setting the start value\\n  -e, --elide-empty-files  do not generate empty output files with '-n'\\n      --filter=COMMAND    write to shell COMMAND; file name is $FILE\\n  -l, --lines=NUMBER      put NUMBER lines/records per output file\\n  -n, --number=CHUNKS     generate CHUNKS output files; see explanation below\\n  -t, --separator=SEP     use SEP instead of newline as the record separator;\\n                            '\\\\0' (zero) specifies the NUL character\\n  -u, --unbuffered        immediately copy input to output with '-n r/...'\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"      --verbose           print a diagnostic just before each\\n                            output file is opened\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\\nUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\\n\", 5), g36);\n    fputs_unlocked(dcgettext(NULL, \"\\nCHUNKS may be:\\n  N       split into N files based on size of input\\n  K/N     output Kth of N to stdout\\n  l/N     split into N files without splitting lines/records\\n  l/K/N   output Kth of N to stdout without splitting lines/records\\n  r/N     like 'l' but use round robin distribution\\n  r/K/N   likewise but only output Kth of N to stdout\\n\", 5), g36);\n    int64_t v1 = &g1; // bp-136, 0x404e98\n    bool v2; // 0x404cf0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x404f20\n    int64_t v6 = *(int64_t *)v5; // 0x404f24\n    int64_t v7 = 6; // 0x404f2a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"split\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x404f36\n        char v11 = *(char *)v9; // 0x404f36\n        char v12 = v11; // 0x404f36\n        bool v13 = false; // 0x404f36\n        while (v10 == v11) {\n            // 0x404f2c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x404f36\n            int64_t v15 = v8 + v3; // 0x404f36\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x404f42\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x404f42\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x405054;\n        } else {\n            // 0x40503e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x405093\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x404fa4;\n            } else {\n                goto lab_0x405054;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x404fa4;\n        } else {\n            // 0x404f8a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x405093\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x404fa4;\n            } else {\n                goto lab_0x404fa4;\n            }\n        }\n    }\n  lab_0x405054:\n    // 0x405054\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x404fe4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x404d2f\n    exit(status);\n    // UNREACHABLE\n  lab_0x404fa4:\n    // 0x404fa4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x404fe4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x404d2f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4050c0",
            "funcStartAddr": "4050c0",
            "funcEndAddr": "4050c8",
            "decompiledFuncCode": "int64_t function_4050c0(int64_t a1) {\n    // 0x4050c0\n    g68 = a1;\n    int64_t result; // 0x4050c0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4050d0",
            "funcStartAddr": "4050d0",
            "funcEndAddr": "4050d8",
            "decompiledFuncCode": "int64_t function_4050d0(int64_t a1) {\n    // 0x4050d0\n    g67 = a1;\n    int64_t result; // 0x4050d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4050e0",
            "funcStartAddr": "4050e0",
            "funcEndAddr": "40517e",
            "decompiledFuncCode": "int64_t function_4050e0(void) {\n    // 0x4050e0\n    int32_t * err_num; // 0x4050f6\n    if ((int32_t)function_409110((int64_t)g36) == 0) {\n        goto lab_0x40510c;\n    } else {\n        // 0x4050f6\n        err_num = __errno_location();\n        if (g67 == 0) {\n            goto lab_0x405123;\n        } else {\n            // 0x405107\n            if (*err_num != 32) {\n                goto lab_0x405123;\n            } else {\n                goto lab_0x40510c;\n            }\n        }\n    }\n  lab_0x40510c:;\n    int64_t result = function_409110((int64_t)g38); // 0x405113\n    if ((int32_t)result == 0) {\n        // 0x40511c\n        return result;\n    }\n    // 0x40515e\n    _exit(g23);\n    // UNREACHABLE\n  lab_0x405123:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40512f\n    if (g68 == 0) {\n        // 0x405169\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x405143\n        error(0, *err_num, \"%s: %s\", (char *)function_406e10((int64_t)g68), v1);\n    }\n    // 0x40515e\n    _exit(g23);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405180",
            "funcStartAddr": "405180",
            "funcEndAddr": "4051db",
            "decompiledFuncCode": "int64_t function_405180(int64_t a1, int64_t a2) {\n    // 0x405180\n    int64_t v1; // 0x405180\n    char v2 = v1;\n    int64_t v3 = a1; // 0x405189\n    int64_t v4 = a1; // 0x405189\n    char v5 = v2; // 0x405189\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x405194\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x405190\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x40519e\n    if (v5 == 0) {\n      lab_0x4051da:\n        // 0x4051da\n        return result;\n    }\n    int64_t v7 = v4; // 0x4051c8\n    int64_t v8 = 0; // 0x4051c8\n    int64_t v9; // 0x405180\n    int64_t v10; // 0x4051ca\n    char v11; // 0x4051ce\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x4051c5\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x4051ca\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x4051c5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x4051ba\n    char v14 = *(char *)v13; // 0x4051be\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x4051c5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x4051ca\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x4051c5\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x4051b0\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x4051da\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4051e0",
            "funcStartAddr": "4051e0",
            "funcEndAddr": "40520b",
            "decompiledFuncCode": "int64_t function_4051e0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x4051e4\n    int64_t result = len; // 0x4051e4\n    if (len < 2) {\n        // 0x4051fa\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x4051f8\n    while (*(char *)(v1 + str) == 47) {\n        // 0x405200\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x4051fa\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x4051fa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405210",
            "funcStartAddr": "405210",
            "funcEndAddr": "40525a",
            "decompiledFuncCode": "int64_t function_405210(int64_t path, int64_t oflag, int64_t a3) {\n    uint32_t fd = open((char *)path, (int32_t)oflag); // 0x405223\n    return function_4070a0((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_405260",
            "funcStartAddr": "405260",
            "funcEndAddr": "4052ca",
            "decompiledFuncCode": "int64_t function_405260(int32_t fd2, int64_t path, int32_t oflag, int32_t a4) {\n    int32_t fd = open((char *)path, oflag); // 0x405275\n    if (fd != fd2 != fd >= 0) {\n        // 0x405284\n        return fd;\n    }\n    uint32_t result = dup2(fd, fd2); // 0x40529c\n    int32_t * v1 = __errno_location(); // 0x4052a4\n    close(fd);\n    return result;\n}\n"
        },
        {
            "funcName": "function_4052d0",
            "funcStartAddr": "4052d0",
            "funcEndAddr": "405346",
            "decompiledFuncCode": "int64_t function_4052d0(uint32_t a1, int64_t a2, int64_t a3) {\n    // 0x4052d0\n    if (a3 == 0) {\n        // 0x405314\n        return 0;\n    }\n    int64_t v1 = a3; // 0x4052eb\n    int64_t v2 = a2; // 0x4052eb\n    int64_t result = 0;\n    int64_t v3 = function_407040((int64_t)a1, v2, v1); // 0x405309\n    int64_t result2 = result; // 0x405312\n    while (v3 != -1) {\n        if (v3 == 0) {\n            // 0x405328\n            *__errno_location() = 28;\n            return result;\n        }\n        int64_t v4 = v3 + result; // 0x4052f5\n        v1 -= v3;\n        v2 += v3;\n        result2 = v4;\n        if (v1 == 0) {\n            // break -> 0x405314\n            break;\n        }\n        result = v4;\n        v3 = function_407040((int64_t)a1, v2, v1);\n        result2 = result;\n    }\n    // 0x405314\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405350",
            "funcStartAddr": "405350",
            "funcEndAddr": "405398",
            "decompiledFuncCode": "int64_t function_405350(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x405350\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x405362\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x40536b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x405394\n    return result;\n}\n"
        },
        {
            "funcName": "function_4053a0",
            "funcStartAddr": "4053a0",
            "funcEndAddr": "405439",
            "decompiledFuncCode": "int64_t function_4053a0(int64_t str) {\n    // 0x4053a0\n    if (str == 0) {\n        // 0x405419\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g38);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4053ae\n    int64_t result = (int64_t)found_char_pos; // 0x4053ae\n    if (found_char_pos == NULL) {\n        // 0x405409\n        g69 = str;\n        g37 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4053b8\n    if (v1 - str < 7) {\n        // 0x405409\n        g69 = str;\n        g37 = str;\n        return result;\n    }\n    // 0x4053c8\n    bool v2; // 0x4053a0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4053a0\n    int64_t v5 = result - 6; // 0x4053a0\n    int64_t v6 = 7; // 0x4053d6\n    unsigned char v7 = *(char *)v5; // 0x4053d6\n    char v8 = *(char *)v4; // 0x4053d6\n    char v9 = v8; // 0x4053d6\n    bool v10 = false; // 0x4053d6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4053e0\n    int64_t v13 = v1; // 0x4053e0\n    int64_t v14 = 3; // 0x4053e0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x405409\n        g69 = str;\n        g37 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4053f2\n    char v16 = *(char *)v12; // 0x4053f2\n    char v17 = v16; // 0x4053f2\n    bool v18 = false; // 0x4053f2\n    while (v15 == v16) {\n        // 0x4053e2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4053fc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4053fe\n        v20 = result + 4;\n        g35 = v20;\n    }\n    // 0x405409\n    g69 = v20;\n    g37 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405440",
            "funcStartAddr": "405440",
            "funcEndAddr": "405532",
            "decompiledFuncCode": "int64_t function_405440(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x405454\n    int64_t result = (int64_t)v1; // 0x405454\n    if (result != a1) {\n        // 0x405461\n        return result;\n    }\n    int64_t v2 = function_4091d0(); // 0x405470\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x405526\n    if (v3 == 85) {\n        // 0x405480\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x405518\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x4054ae\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x4054bb\n        // 0x405461\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x405518\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x4054fd\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x40550a\n    // 0x405461\n    return result4;\n}\n"
        },
        {
            "funcName": "function_405540",
            "funcStartAddr": "405540",
            "funcEndAddr": "405597",
            "decompiledFuncCode": "int64_t function_405540(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x405540\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x405588\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405597",
            "funcStartAddr": "405597",
            "funcEndAddr": "406761",
            "decompiledFuncCode": "int64_t function_405597(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4055e1\n    int64_t v3 = 0; // 0x4055e1\n    int64_t v4; // 0x405597\n    int64_t v5; // 0x405597\n    int64_t v6; // 0x405597\n    int64_t v7; // 0x405597\n    int64_t v8; // 0x405597\n    int64_t v9; // 0x405597\n    int64_t v10; // 0x405597\n    int64_t v11; // 0x405597\n    int64_t v12; // 0x405597\n    int64_t v13; // 0x405597\n    int64_t v14; // 0x405597\n    int64_t v15; // 0x405597\n    int64_t v16; // 0x405597\n    int64_t v17; // 0x405597\n    int64_t v18; // 0x405597\n    int64_t result; // 0x405597\n    int64_t v19; // 0x405597\n    int32_t wc; // bp+132, 0x405597\n    int64_t ps; // bp+136, 0x405597\n    char v20; // 0x405b50\n    int64_t v21; // 0x405b50\n    int64_t v22; // 0x405ef8\n    int64_t v23; // 0x405597\n    int64_t v24; // 0x405f17\n    int32_t v25; // 0x405597\n    while (true) {\n      lab_0x4055e8_2:\n        // 0x4055e8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x405597\n        int64_t v27; // 0x40561c\n        while (true) {\n          lab_0x4055e8:\n            // 0x4055e8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4055f3\n            if (v15 == -1) {\n                // 0x4055f5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x405603\n            if (v28) {\n                // break (via goto) -> 0x405d68\n                goto lab_0x405d68;\n            }\n            // 0x40560c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g84 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x405bfb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x405741;\n                    }\n                    // 0x40601d\n                    v26 = v5 + 1;\n                    goto lab_0x4055e8;\n                }\n                case 7: {\n                    goto lab_0x405741;\n                }\n                case 8: {\n                    goto lab_0x405741;\n                }\n                case 9: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x405741;\n                }\n                case 12: {\n                    goto lab_0x405741;\n                }\n                case 13: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x40570d;\n                }\n                case 36: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x405741;\n                }\n                case 38: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x405741;\n                }\n                case 44: {\n                    goto lab_0x405741;\n                }\n                case 45: {\n                    goto lab_0x405741;\n                }\n                case 46: {\n                    goto lab_0x405741;\n                }\n                case 47: {\n                    goto lab_0x405741;\n                }\n                case 48: {\n                    goto lab_0x405741;\n                }\n                case 49: {\n                    goto lab_0x405741;\n                }\n                case 50: {\n                    goto lab_0x405741;\n                }\n                case 51: {\n                    goto lab_0x405741;\n                }\n                case 52: {\n                    goto lab_0x405741;\n                }\n                case 53: {\n                    goto lab_0x405741;\n                }\n                case 54: {\n                    goto lab_0x405741;\n                }\n                case 55: {\n                    goto lab_0x405741;\n                }\n                case 56: {\n                    goto lab_0x405741;\n                }\n                case 57: {\n                    goto lab_0x405741;\n                }\n                case 58: {\n                    goto lab_0x405741;\n                }\n                case 59: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x405741;\n                }\n                case 66: {\n                    goto lab_0x405741;\n                }\n                case 67: {\n                    goto lab_0x405741;\n                }\n                case 68: {\n                    goto lab_0x405741;\n                }\n                case 69: {\n                    goto lab_0x405741;\n                }\n                case 70: {\n                    goto lab_0x405741;\n                }\n                case 71: {\n                    goto lab_0x405741;\n                }\n                case 72: {\n                    goto lab_0x405741;\n                }\n                case 73: {\n                    goto lab_0x405741;\n                }\n                case 74: {\n                    goto lab_0x405741;\n                }\n                case 75: {\n                    goto lab_0x405741;\n                }\n                case 76: {\n                    goto lab_0x405741;\n                }\n                case 77: {\n                    goto lab_0x405741;\n                }\n                case 78: {\n                    goto lab_0x405741;\n                }\n                case 79: {\n                    goto lab_0x405741;\n                }\n                case 80: {\n                    goto lab_0x405741;\n                }\n                case 81: {\n                    goto lab_0x405741;\n                }\n                case 82: {\n                    goto lab_0x405741;\n                }\n                case 83: {\n                    goto lab_0x405741;\n                }\n                case 84: {\n                    goto lab_0x405741;\n                }\n                case 85: {\n                    goto lab_0x405741;\n                }\n                case 86: {\n                    goto lab_0x405741;\n                }\n                case 87: {\n                    goto lab_0x405741;\n                }\n                case 88: {\n                    goto lab_0x405741;\n                }\n                case 89: {\n                    goto lab_0x405741;\n                }\n                case 90: {\n                    goto lab_0x405741;\n                }\n                case 91: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x405741;\n                }\n                case 94: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x405741;\n                }\n                case 96: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x405741;\n                }\n                case 98: {\n                    goto lab_0x405741;\n                }\n                case 99: {\n                    goto lab_0x405741;\n                }\n                case 100: {\n                    goto lab_0x405741;\n                }\n                case 101: {\n                    goto lab_0x405741;\n                }\n                case 102: {\n                    goto lab_0x405741;\n                }\n                case 103: {\n                    goto lab_0x405741;\n                }\n                case 104: {\n                    goto lab_0x405741;\n                }\n                case 105: {\n                    goto lab_0x405741;\n                }\n                case 106: {\n                    goto lab_0x405741;\n                }\n                case 107: {\n                    goto lab_0x405741;\n                }\n                case 108: {\n                    goto lab_0x405741;\n                }\n                case 109: {\n                    goto lab_0x405741;\n                }\n                case 110: {\n                    goto lab_0x405741;\n                }\n                case 111: {\n                    goto lab_0x405741;\n                }\n                case 112: {\n                    goto lab_0x405741;\n                }\n                case 113: {\n                    goto lab_0x405741;\n                }\n                case 114: {\n                    goto lab_0x405741;\n                }\n                case 115: {\n                    goto lab_0x405741;\n                }\n                case 116: {\n                    goto lab_0x405741;\n                }\n                case 117: {\n                    goto lab_0x405741;\n                }\n                case 118: {\n                    goto lab_0x405741;\n                }\n                case 119: {\n                    goto lab_0x405741;\n                }\n                case 120: {\n                    goto lab_0x405741;\n                }\n                case 121: {\n                    goto lab_0x405741;\n                }\n                case 122: {\n                    goto lab_0x405741;\n                }\n                case 123: {\n                    goto lab_0x4056e5;\n                }\n                case 124: {\n                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4056e5;\n                }\n                case 126: {\n                    goto lab_0x40570d;\n                }\n                default: {\n                    goto lab_0x405ae5;\n                }\n            }\n        }\n      lab_0x405ae5:\n        if (v23 != 1) {\n            // 0x405e50\n            ps = 0;\n            int64_t len = v15; // 0x405e60\n            if (v15 == -1) {\n                // 0x405e62\n                len = strlen((char *)str);\n            }\n            // 0x405e8e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x405eef:\n                // 0x405eef\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x405ef4\n                int64_t v30 = v29 + str;\n                v24 = function_408d50(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40646a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40646a_2;\n                    }\n                    case -2: {\n                        // 0x40654d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x406587\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40658a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x406597\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x406590\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40646a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40646a_2;\n                    }\n                    case 1: {\n                        goto lab_0x405ec0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x405f6c\n                        char v34 = *(char *)v33; // 0x405f7d\n                        unsigned char v35; // 0x405597\n                        if (v34 < 125) {\n                            // 0x405f88\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x405f9f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x405f70\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x405f7d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x405f88\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x405f9f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x405f70\n                            v33++;\n                        }\n                        goto lab_0x405ec0;\n                    }\n                }\n            }\n            goto lab_0x40646a_2;\n        } else {\n            // 0x405b34\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x405741;\n        }\n    }\n  lab_0x405d68:\n    // 0x405d68\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40666a\n        if (v8 > result) {\n            // 0x406673\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x405997\n        return result;\n    }\n    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x405741:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x405750\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40595a_2;\n        }\n    }\n    int64_t v39 = result; // 0x405851\n    char v40 = v20; // 0x405851\n    int64_t v41 = v38; // 0x405851\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x405851\n    int64_t v43 = v36; // 0x405851\n    goto lab_0x4057cd;\n  lab_0x40595a_2:\n    // 0x405997\n    return function_405540(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40646a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x405741;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x40603e\n        int64_t v50 = v5 + 1; // 0x406121\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x406128\n        char v52 = v20; // 0x406128\n        int64_t v53 = result; // 0x406128\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x4060f1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x4060f5\n            int64_t v56 = v54 + 1; // 0x4060fa\n            int64_t v57 = v51 + 1; // 0x406121\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x4060ec\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x4060f1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x4060f5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x4057cd;\n    }\n  lab_0x405ec0:\n    // 0x405ec0\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x405edf\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x405ee2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40646a\n        goto lab_0x40646a_2;\n    }\n    goto lab_0x405eef;\n  lab_0x40570d:\n    // 0x40570d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40595a_2;\n    }\n    goto lab_0x405741;\n  lab_0x4056e5:;\n    bool v60 = v15 == 1; // 0x4056f0\n    if (v15 == -1) {\n        // 0x4056f2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4056fe\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x405741;\n    } else {\n        goto lab_0x40570d;\n    }\n  lab_0x4057cd:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4057d2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4057d6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4055e8_2;\n}\n"
        },
        {
            "funcName": "function_406770",
            "funcStartAddr": "406770",
            "funcEndAddr": "40690e",
            "decompiledFuncCode": "int64_t function_406770(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x406772\n    int32_t * v3 = __errno_location(); // 0x40678c\n    int64_t v4 = (int64_t)g25; // 0x406791\n    int32_t v5 = *v3; // 0x40679b\n    int64_t v6 = v4; // 0x4067b1\n    if (v2 >= (int64_t)*(int32_t *)&g28) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x406909\n            function_4078e0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4067c0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4067c7\n        int64_t v9; // 0x406770\n        if (g25 == &g26) {\n            int64_t v10 = function_4076f0(0, v8); // 0x4068ea\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g26); // 0x4068ef\n            *(int64_t *)&g25 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4076f0((int32_t)v4, v8); // 0x4067db\n            *(int64_t *)&g25 = v12;\n            v9 = v12;\n        }\n        // 0x4067ea\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g28; // 0x4067ea\n        int32_t v14 = v7; // 0x4067f1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g28 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x406821\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40682b\n    int64_t * v17 = (int64_t *)v15; // 0x40682e\n    uint64_t v18 = *v17; // 0x40682e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x406831\n    int64_t result = *v19; // 0x406831\n    int64_t v20; // 0x406770\n    uint64_t v21 = function_405540(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x406854\n    if (v18 > v21) {\n        // 0x4068cb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x406867\n    *v17 = v22;\n    if (result != (int64_t)&g70) {\n        // 0x406877\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_407690(v22); // 0x406891\n    *v19 = result2;\n    int64_t v23; // 0x406770\n    function_405540(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x4068cb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406910",
            "funcStartAddr": "406910",
            "funcEndAddr": "406944",
            "decompiledFuncCode": "int64_t function_406910(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x406917\n    int64_t result = function_407890(a1 == 0 ? (int64_t)&g71 : a1, 56); // 0x406936\n    return result;\n}\n"
        },
        {
            "funcName": "function_406950",
            "funcStartAddr": "406950",
            "funcEndAddr": "40695f",
            "decompiledFuncCode": "int64_t function_406950(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g71 : a1); // 0x40695c\n    return result;\n}\n"
        },
        {
            "funcName": "function_406960",
            "funcStartAddr": "406960",
            "funcEndAddr": "40696f",
            "decompiledFuncCode": "int64_t function_406960(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g71 : a1; // 0x406968\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g71;\n}\n"
        },
        {
            "funcName": "function_406970",
            "funcStartAddr": "406970",
            "funcEndAddr": "4069a3",
            "decompiledFuncCode": "int64_t function_406970(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g71 + 8 : a1 + 8; // 0x406989\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40698e\n    uint32_t v3 = *v2; // 0x40698e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x406992\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4069b0",
            "funcStartAddr": "4069b0",
            "funcEndAddr": "4069c3",
            "decompiledFuncCode": "int64_t function_4069b0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g71 + 4 : a1 + 4); // 0x4069bc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4069d0",
            "funcStartAddr": "4069d0",
            "funcEndAddr": "4069fb",
            "decompiledFuncCode": "int64_t function_4069d0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g71 : a1; // 0x4069d8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4069f5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4069ec\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g71;\n}\n"
        },
        {
            "funcName": "function_406a00",
            "funcStartAddr": "406a00",
            "funcEndAddr": "406a72",
            "decompiledFuncCode": "int64_t function_406a00(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g71 : a5; // 0x406a22\n    int32_t * v2 = __errno_location(); // 0x406a2b\n    uint32_t v3 = *(int32_t *)v1; // 0x406a4b\n    int64_t result = function_405540(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x406a5a\n    return result;\n}\n"
        },
        {
            "funcName": "function_406a80",
            "funcStartAddr": "406a80",
            "funcEndAddr": "406b61",
            "decompiledFuncCode": "int64_t function_406a80(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g71 : a4; // 0x406aa2\n    int32_t * v2 = __errno_location(); // 0x406aa8\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x406ac7\n    int32_t * v4 = (int32_t *)v1; // 0x406aca\n    int64_t v5 = function_405540(0, 0, a1, a2, (int64_t)*v4, v3); // 0x406ae5\n    int64_t v6 = v5 + 1; // 0x406aea\n    int64_t result = function_407690(v6); // 0x406aff\n    function_405540(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x406b44\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x406b4d\n    return result;\n}\n"
        },
        {
            "funcName": "function_406b70",
            "funcStartAddr": "406b70",
            "funcEndAddr": "406b7a",
            "decompiledFuncCode": "int64_t function_406b70(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406b70\n    return function_406a80(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_406b80",
            "funcStartAddr": "406b80",
            "funcEndAddr": "406c15",
            "decompiledFuncCode": "int64_t function_406b80(void) {\n    uint32_t v1 = *(int32_t *)&g28; // 0x406b80\n    int64_t v2 = v1; // 0x406b80\n    int64_t v3 = v2; // 0x406b94\n    if (v1 >= 2) {\n        int64_t v4 = &g28;\n        int64_t v5 = v4 + 16; // 0x406bb3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g85;\n        while (v5 != (int64_t)g25 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x406bb0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g85;\n        }\n    }\n    int64_t v6 = v3; // 0x406bcd\n    if (g26 != 0x60e780) {\n        // 0x406bcf\n        free((int64_t *)g26);\n        g26 = 256;\n        *(int64_t *)&g27 = (int64_t)&g70;\n        v6 = &g85;\n    }\n    int64_t result = v6; // 0x406bf1\n    if (g25 != &g26) {\n        // 0x406bf3\n        free(g25);\n        *(int64_t *)&g25 = (int64_t)&g26;\n        result = &g85;\n    }\n    // 0x406c06\n    *(int32_t *)&g28 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406c20",
            "funcStartAddr": "406c20",
            "funcEndAddr": "406c31",
            "decompiledFuncCode": "int64_t function_406c20(void) {\n    // 0x406c20\n    int64_t v1; // 0x406c20\n    return function_406770(v1, v1, -1, (int64_t *)&g71);\n}\n"
        },
        {
            "funcName": "function_406c40",
            "funcStartAddr": "406c40",
            "funcEndAddr": "406c4a",
            "decompiledFuncCode": "int64_t function_406c40(void) {\n    // 0x406c40\n    int64_t v1; // 0x406c40\n    return function_406770(v1, v1, v1, (int64_t *)&g71);\n}\n"
        },
        {
            "funcName": "function_406c50",
            "funcStartAddr": "406c50",
            "funcEndAddr": "406c66",
            "decompiledFuncCode": "int64_t function_406c50(int64_t a1) {\n    // 0x406c50\n    return function_406770(0, a1, -1, (int64_t *)&g71);\n}\n"
        },
        {
            "funcName": "function_406c70",
            "funcStartAddr": "406c70",
            "funcEndAddr": "406c82",
            "decompiledFuncCode": "int64_t function_406c70(int64_t a1, int64_t a2) {\n    // 0x406c70\n    return function_406770(0, a1, a2, (int64_t *)&g71);\n}\n"
        },
        {
            "funcName": "function_406c90",
            "funcStartAddr": "406c90",
            "funcEndAddr": "406cf8",
            "decompiledFuncCode": "int64_t function_406c90(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x406ca0\n    return function_406770((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_406d00",
            "funcStartAddr": "406d00",
            "funcEndAddr": "406d64",
            "decompiledFuncCode": "int64_t function_406d00(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x406d10\n    return function_406770((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_406d70",
            "funcStartAddr": "406d70",
            "funcEndAddr": "406d7c",
            "decompiledFuncCode": "int64_t function_406d70(int64_t a1, int64_t a2) {\n    // 0x406d70\n    return function_406c90(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_406d80",
            "funcStartAddr": "406d80",
            "funcEndAddr": "406d8f",
            "decompiledFuncCode": "int64_t function_406d80(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406d80\n    return function_406d00(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_406d90",
            "funcStartAddr": "406d90",
            "funcEndAddr": "406e00",
            "decompiledFuncCode": "int64_t function_406d90(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g71); // 0x406d9d\n    int128_t v2 = __asm_movdqa(g72); // 0x406da5\n    int128_t v3 = __asm_movdqa(g73); // 0x406dad\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x406dc2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x406dd8\n    uint32_t v6 = *v5; // 0x406dd8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x406ddd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_406770(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_406e00",
            "funcStartAddr": "406e00",
            "funcEndAddr": "406e0d",
            "decompiledFuncCode": "int64_t function_406e00(int64_t a1, int64_t a2) {\n    // 0x406e00\n    return function_406d90(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_406e10",
            "funcStartAddr": "406e10",
            "funcEndAddr": "406e21",
            "decompiledFuncCode": "int64_t function_406e10(int64_t a1) {\n    // 0x406e10\n    return function_406d90(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_406e30",
            "funcStartAddr": "406e30",
            "funcEndAddr": "406e3a",
            "decompiledFuncCode": "int64_t function_406e30(void) {\n    // 0x406e30\n    int64_t v1; // 0x406e30\n    return function_406d90(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_406e40",
            "funcStartAddr": "406e40",
            "funcEndAddr": "406eae",
            "decompiledFuncCode": "int64_t function_406e40(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x406e5a\n    return function_406770((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_406eb0",
            "funcStartAddr": "406eb0",
            "funcEndAddr": "406f1c",
            "decompiledFuncCode": "int64_t function_406eb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g71); // 0x406eb7\n    int128_t v2 = __asm_movdqa(g72); // 0x406ebf\n    int128_t v3 = __asm_movdqa(g73); // 0x406ec7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x406ee9\n    if (a2 == 0 || a3 == 0) {\n        // 0x406f17\n        abort();\n        // UNREACHABLE\n    }\n    // 0x406efa\n    return function_406770(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_406f20",
            "funcStartAddr": "406f20",
            "funcEndAddr": "406f29",
            "decompiledFuncCode": "int64_t function_406f20(void) {\n    // 0x406f20\n    int64_t v1; // 0x406f20\n    return function_406eb0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_406f30",
            "funcStartAddr": "406f30",
            "funcEndAddr": "406f47",
            "decompiledFuncCode": "int64_t function_406f30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406f30\n    return function_406eb0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_406f50",
            "funcStartAddr": "406f50",
            "funcEndAddr": "406f63",
            "decompiledFuncCode": "int64_t function_406f50(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x406f50\n    return function_406eb0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_406f70",
            "funcStartAddr": "406f70",
            "funcEndAddr": "406f7a",
            "decompiledFuncCode": "int64_t function_406f70(void) {\n    // 0x406f70\n    int64_t v1; // 0x406f70\n    return function_406770(v1, v1, v1, &g24);\n}\n"
        },
        {
            "funcName": "function_406f80",
            "funcStartAddr": "406f80",
            "funcEndAddr": "406f92",
            "decompiledFuncCode": "int64_t function_406f80(int64_t a1, int64_t a2) {\n    // 0x406f80\n    return function_406770(0, a1, a2, &g24);\n}\n"
        },
        {
            "funcName": "function_406fa0",
            "funcStartAddr": "406fa0",
            "funcEndAddr": "406fb1",
            "decompiledFuncCode": "int64_t function_406fa0(void) {\n    // 0x406fa0\n    int64_t v1; // 0x406fa0\n    return function_406770(v1, v1, -1, &g24);\n}\n"
        },
        {
            "funcName": "function_406fc0",
            "funcStartAddr": "406fc0",
            "funcEndAddr": "406fd6",
            "decompiledFuncCode": "int64_t function_406fc0(int64_t a1) {\n    // 0x406fc0\n    return function_406770(0, a1, -1, &g24);\n}\n"
        },
        {
            "funcName": "function_406fe0",
            "funcStartAddr": "406fe0",
            "funcEndAddr": "40703e",
            "decompiledFuncCode": "int64_t function_406fe0(int32_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = read(fd, (int64_t *)buf, (int32_t)nbyte); // 0x407001\n    while (result < 0) {\n        // 0x40700e\n        if (*__errno_location() != 4) {\n            // break -> 0x40701a\n            break;\n        }\n        result = read(fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_407040",
            "funcStartAddr": "407040",
            "funcEndAddr": "40709e",
            "decompiledFuncCode": "int64_t function_407040(int64_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte); // 0x407061\n    while (result < 0) {\n        // 0x40706e\n        if (*__errno_location() != 4) {\n            // break -> 0x40707a\n            break;\n        }\n        result = write((int32_t)fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_4070a0",
            "funcStartAddr": "4070a0",
            "funcEndAddr": "4070ee",
            "decompiledFuncCode": "int64_t function_4070a0(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x4070ac\n    if (fd >= 3) {\n        // 0x4070b1\n        return a1 & 0xffffffff;\n    }\n    // 0x4070c0\n    int64_t v1; // 0x4070a0\n    int64_t v2 = function_409740(a1, v1); // 0x4070c0\n    int32_t * v3 = __errno_location(); // 0x4070c8\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4070f0",
            "funcStartAddr": "4070f0",
            "funcEndAddr": "4074cd",
            "decompiledFuncCode": "int64_t function_4070f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x407188\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x40710c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x407126\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40716b\n    if (a6 < 10) {\n        // 0x40717a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x407272\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_4074d0",
            "funcStartAddr": "4074d0",
            "funcEndAddr": "4074f0",
            "decompiledFuncCode": "int64_t function_4074d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4074d0\n    if (a5 == 0) {\n        // 0x4074eb\n        return function_4070f0(a1, a2, a3, a4, a5, 0, (int64_t)&g85);\n    }\n    int64_t v1 = 0; // 0x4074d7\n    v1++;\n    int64_t v2 = v1; // 0x4074e9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x4074e0\n        v1++;\n        v2 = v1;\n    }\n    // 0x4074eb\n    return function_4070f0(a1, a2, a3, a4, a5, v2, (int64_t)&g85);\n}\n"
        },
        {
            "funcName": "function_4074f0",
            "funcStartAddr": "4074f0",
            "funcEndAddr": "407550",
            "decompiledFuncCode": "int64_t function_4074f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4074f0\n    int64_t v3 = &v2; // 0x4074f0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x407523\n    int64_t v6; // 0x40750d\n    int64_t * v7; // 0x40752b\n    int64_t v8; // 0x40752b\n    int64_t v9; // 0x407537\n    if (v5 < 48) {\n        // 0x407500\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x407543\n            break;\n        }\n    } else {\n        // 0x40752b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x407543\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x407521\n    while (v4 != 9) {\n        // 0x407519\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x407500\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x407543\n                break;\n            }\n        } else {\n            // 0x40752b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x407543\n                break;\n            }\n        }\n        // 0x407519\n        v10 = 10;\n    }\n    // 0x407543\n    return function_4070f0(a1, a2, a3, a4, v3, v10, (int64_t)&g85);\n}\n"
        },
        {
            "funcName": "function_407550",
            "funcStartAddr": "407550",
            "funcEndAddr": "40760c",
            "decompiledFuncCode": "int64_t function_407550(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x407550\n    int64_t v1; // bp-168, 0x407550\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x407550\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x407550\n    int64_t v8; // 0x407550\n    int64_t v9; // bp-56, 0x407550\n    int64_t v10; // 0x4075b5\n    int64_t v11; // 0x4075d9\n    if ((int32_t)v6 < 48) {\n        // 0x4075a0\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4075f0\n            break;\n        }\n    } else {\n        // 0x4075d2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4075f0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4075ca\n    int64_t v13 = 10; // 0x4075ca\n    while (v5 != 9) {\n        // 0x4075cc\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x4075a0\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4075f0\n                break;\n            }\n        } else {\n            // 0x4075d2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4075f0\n                break;\n            }\n        }\n        // 0x4075c2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4075f0\n    int64_t v14; // bp-136, 0x407550\n    int64_t result = function_4070f0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g85); // 0x4075ff\n    return result;\n}\n"
        },
        {
            "funcName": "function_407610",
            "funcStartAddr": "407610",
            "funcEndAddr": "407684",
            "decompiledFuncCode": "int64_t function_407610(int64_t a1) {\n    // 0x407610\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x407673\n    return fputs_unlocked(v1, g36);\n}\n"
        },
        {
            "funcName": "function_407690",
            "funcStartAddr": "407690",
            "funcEndAddr": "4076aa",
            "decompiledFuncCode": "int64_t function_407690(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x407694\n    if (size != 0 != (mem == NULL)) {\n        // 0x4076a3\n        return (int64_t)mem;\n    }\n    // 0x4076a5\n    function_4078e0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4076b0",
            "funcStartAddr": "4076b0",
            "funcEndAddr": "4076d1",
            "decompiledFuncCode": "int64_t function_4076b0(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x4076b3\n    int64_t v2 = v1; // 0x4076b3\n    if (v2 < 0) {\n        // 0x4076cb\n        function_4078e0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4076c9\n        return function_407690(v2);\n    }\n    // 0x4076cb\n    function_4078e0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4076e0",
            "funcStartAddr": "4076e0",
            "funcEndAddr": "4076e2",
            "decompiledFuncCode": "int64_t function_4076e0(void) {\n    // 0x4076e0\n    int64_t v1; // 0x4076e0\n    return function_407690(v1);\n}\n"
        },
        {
            "funcName": "function_4076f0",
            "funcStartAddr": "4076f0",
            "funcEndAddr": "407726",
            "decompiledFuncCode": "int64_t function_4076f0(int32_t a1, int64_t a2) {\n    int64_t v1 = a1;\n    int64_t * v2 = (int64_t *)v1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x407718\n        free(v2);\n        return (int32_t)&g85 ^ (int32_t)&g85;\n    }\n    int64_t * mem = realloc(v2, (int32_t)a2); // 0x407701\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x407710\n        return (int64_t)mem;\n    }\n    // 0x407721\n    function_4078e0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407730",
            "funcStartAddr": "407730",
            "funcEndAddr": "407751",
            "decompiledFuncCode": "int64_t function_407730(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x407733\n    int64_t v2 = v1; // 0x407733\n    if (v2 < 0) {\n        // 0x40774b\n        function_4078e0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x407749\n        return function_4076f0((int32_t)a1, v2);\n    }\n    // 0x40774b\n    function_4078e0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407760",
            "funcStartAddr": "407760",
            "funcEndAddr": "4077e6",
            "decompiledFuncCode": "int64_t function_407760(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x4077bb\n            function_4078e0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4076f0((int32_t)a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x4077a3\n    if (a2 == 0) {\n        // 0x4077c8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x4077a8\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x4077bb\n        function_4078e0(a1);\n        // UNREACHABLE\n    }\n    // 0x40778a\n    *(int64_t *)a2 = v2;\n    return function_4076f0((int32_t)a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4077f0",
            "funcStartAddr": "4077f0",
            "funcEndAddr": "407840",
            "decompiledFuncCode": "int64_t function_4077f0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4077f0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40783a\n            function_4078e0(a1);\n            // UNREACHABLE\n        }\n        // 0x407812\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4076f0((int32_t)a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x407825\n        *(int64_t *)a2 = 128;\n        return function_4076f0(0, 128);\n    }\n    // 0x407838\n    if (a2 < 0) {\n        // 0x40783a\n        function_4078e0(a1);\n        // UNREACHABLE\n    }\n    // 0x407812\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4076f0((int32_t)a1, v1);\n}\n"
        },
        {
            "funcName": "function_407840",
            "funcStartAddr": "407840",
            "funcEndAddr": "407857",
            "decompiledFuncCode": "int64_t function_407840(int64_t a1, int64_t a2) {\n    // 0x407840\n    return (int64_t)memset((int64_t *)function_407690(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_407860",
            "funcStartAddr": "407860",
            "funcEndAddr": "40788e",
            "decompiledFuncCode": "int64_t function_407860(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x407867\n    if ((int64_t)v1 < 0) {\n        // 0x407889\n        function_4078e0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x407889\n        function_4078e0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40787a\n    if (mem != NULL) {\n        // 0x407884\n        return (int64_t)mem;\n    }\n    // 0x407889\n    function_4078e0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407890",
            "funcStartAddr": "407890",
            "funcEndAddr": "4078b8",
            "decompiledFuncCode": "int64_t function_407890(int64_t a1, int64_t a2) {\n    int64_t v1 = function_407690(a2); // 0x40789f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4078c0",
            "funcStartAddr": "4078c0",
            "funcEndAddr": "4078d3",
            "decompiledFuncCode": "int64_t function_4078c0(int64_t str) {\n    // 0x4078c0\n    return function_407890(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4078e0",
            "funcStartAddr": "4078e0",
            "funcEndAddr": "407911",
            "decompiledFuncCode": "int64_t function_4078e0(int64_t a1) {\n    // 0x4078e0\n    error(g23, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_407920",
            "funcStartAddr": "407920",
            "funcEndAddr": "4079f0",
            "decompiledFuncCode": "int64_t function_407920(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, int64_t a5, int64_t a6, int32_t a7) {\n    // 0x407920\n    int64_t result2; // bp-64, 0x407920\n    int64_t v1 = function_407a20(a1, 0, a2 & 0xffffffff, &result2, (int64_t *)a5, a6); // 0x407947\n    int32_t v2 = v1; // 0x40794c\n    int32_t * v3; // 0x407920\n    if (v2 != 0) {\n        int32_t * v4 = __errno_location(); // 0x4079ca\n        if (v2 == 1) {\n            // 0x4079e8\n            *v4 = 75;\n            v3 = v4;\n        } else {\n            // 0x4079d7\n            v3 = v4;\n            if (v2 == 3) {\n                // 0x4079dc\n                *v4 = 0;\n                v3 = v4;\n            }\n        }\n    } else {\n        uint64_t result = result2; // 0x407950\n        if (result >= a3 && result <= a4) {\n            // 0x4079b2\n            return result;\n        }\n        int32_t * v5 = __errno_location(); // 0x40795f\n        *v5 = result < 0x40000000 ? 34 : 75;\n        v3 = v5;\n    }\n    int64_t v6 = function_406fc0(a1); // 0x40797c\n    int32_t v7 = *v3; // 0x407981\n    int32_t err_num = v7 == 22 ? 0 : v7; // 0x407997\n    error(a7 == 0 ? 1 : a7, err_num, \"%s: %s\", (char *)a6, (char *)v6);\n    // 0x4079b2\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4079f0",
            "funcStartAddr": "4079f0",
            "funcEndAddr": "407a11",
            "decompiledFuncCode": "int64_t function_4079f0(int64_t a1, int64_t a2, int64_t a3, int64_t * a4, int64_t a5, int32_t a6) {\n    // 0x4079f0\n    int64_t result; // 0x4079f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_407a20",
            "funcStartAddr": "407a20",
            "funcEndAddr": "407e60",
            "decompiledFuncCode": "int64_t function_407a20(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t * str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x407a2e\n    if (v1 >= 37) {\n        // 0x407e3b\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g85;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x407a52\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x407a82\n    int64_t v4 = a1; // 0x407a87\n    char v5 = c; // 0x407a87\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x407a7c\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x407a78\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x407a89\n    if (v5 == 45) {\n        // 0x407ac5\n        return 4;\n    }\n    // 0x407a8e\n    int64_t v7; // bp-64, 0x407a20\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x407a4e\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x407a96\n    int64_t * v10 = (int64_t *)v8; // 0x407a9b\n    int64_t v11 = *v10; // 0x407a9b\n    char v12; // 0x407a20\n    int64_t v13; // 0x407a20\n    int64_t v14; // 0x407a20\n    int64_t v15; // 0x407a20\n    int64_t v16; // 0x407a20\n    int64_t v17; // 0x407a20\n    int64_t v18; // 0x407a20\n    if (v11 == a1) {\n        // 0x407af8\n        if (c == 0 || str == NULL) {\n            // 0x407ac5\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x407b19\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x407ac5\n            return 4;\n        }\n        goto lab_0x407b27;\n    } else {\n        int32_t v19 = *v2; // 0x407aa6\n        int64_t v20 = 0; // 0x407aac\n        if (v19 != 0) {\n            // 0x407ae0\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x407ac5\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x407a96\n        v16 = v21;\n        v13 = v20;\n        if (str == NULL) {\n            goto lab_0x407ac2;\n        } else {\n            char c2 = *(char *)v11; // 0x407ab5\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x407c23\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x407b27;\n                } else {\n                    goto lab_0x407c35;\n                }\n            } else {\n                goto lab_0x407ac2;\n            }\n        }\n    }\n  lab_0x407b27:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x407b2f\n    int64_t v24 = 1; // 0x407b2f\n    int64_t v25; // 0x407a20\n    int64_t v26; // 0x407a20\n    int64_t v27; // 0x407a20\n    int64_t v28; // 0x407a20\n    int64_t v29; // 0x407a20\n    int64_t v30; // 0x407a20\n    int64_t v31; // 0x407a20\n    int64_t v32; // 0x407a20\n    int64_t v33; // 0x407a20\n    int64_t v34; // 0x407a20\n    int64_t v35; // 0x407a20\n    int64_t v36; // 0x407a20\n    int64_t v37; // 0x407a20\n    int64_t v38; // 0x407a20\n    int64_t v39; // 0x407a20\n    int64_t v40; // 0x407a20\n    int64_t v41; // 0x407a20\n    int64_t v42; // 0x407a20\n    int64_t v43; // 0x407a20\n    int64_t v44; // 0x407a20\n    if (v22 < 48) {\n        // 0x407b31\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x407b9a;\n        } else {\n            // 0x407b44\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x407b9a;\n            } else {\n                // 0x407b60\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x407b9a;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x407dc9\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x407b9a;\n                    }\n                    default: {\n                        // 0x407b75\n                        g82 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x407d3b;\n                            }\n                            case 70: {\n                                goto lab_0x407c35;\n                            }\n                            case 71: {\n                                goto lab_0x407d73;\n                            }\n                            case 72: {\n                                goto lab_0x407c35;\n                            }\n                            case 73: {\n                                goto lab_0x407c35;\n                            }\n                            case 74: {\n                                goto lab_0x407c35;\n                            }\n                            case 75: {\n                                goto lab_0x407bfc;\n                            }\n                            case 76: {\n                                goto lab_0x407c35;\n                            }\n                            case 77: {\n                                goto lab_0x407bbe;\n                            }\n                            case 78: {\n                                goto lab_0x407c35;\n                            }\n                            case 79: {\n                                goto lab_0x407c35;\n                            }\n                            case 80: {\n                                goto lab_0x407d08;\n                            }\n                            case 81: {\n                                goto lab_0x407c35;\n                            }\n                            case 82: {\n                                goto lab_0x407c35;\n                            }\n                            case 83: {\n                                goto lab_0x407c35;\n                            }\n                            case 84: {\n                                goto lab_0x407cd8;\n                            }\n                            case 85: {\n                                goto lab_0x407c35;\n                            }\n                            case 86: {\n                                goto lab_0x407c35;\n                            }\n                            case 87: {\n                                goto lab_0x407c35;\n                            }\n                            case 88: {\n                                goto lab_0x407c35;\n                            }\n                            case 89: {\n                                goto lab_0x407ca6;\n                            }\n                            case 90: {\n                                goto lab_0x407c6b;\n                            }\n                            case 91: {\n                                goto lab_0x407c35;\n                            }\n                            case 92: {\n                                goto lab_0x407c35;\n                            }\n                            case 93: {\n                                goto lab_0x407c35;\n                            }\n                            case 94: {\n                                goto lab_0x407c35;\n                            }\n                            case 95: {\n                                goto lab_0x407c35;\n                            }\n                            case 96: {\n                                goto lab_0x407c35;\n                            }\n                            case 97: {\n                                goto lab_0x407c35;\n                            }\n                            case 98: {\n                                goto lab_0x407c4f;\n                            }\n                            case 99: {\n                                goto lab_0x407bd8;\n                            }\n                            case 100: {\n                                goto lab_0x407c35;\n                            }\n                            case 101: {\n                                goto lab_0x407c35;\n                            }\n                            case 102: {\n                                goto lab_0x407c35;\n                            }\n                            case 103: {\n                                goto lab_0x407d73;\n                            }\n                            case 104: {\n                                goto lab_0x407c35;\n                            }\n                            case 105: {\n                                goto lab_0x407c35;\n                            }\n                            case 106: {\n                                goto lab_0x407c35;\n                            }\n                            case 107: {\n                                goto lab_0x407bfc;\n                            }\n                            case 108: {\n                                goto lab_0x407c35;\n                            }\n                            case 109: {\n                                goto lab_0x407bbe;\n                            }\n                            case 110: {\n                                goto lab_0x407c35;\n                            }\n                            case 111: {\n                                goto lab_0x407c35;\n                            }\n                            case 112: {\n                                goto lab_0x407c35;\n                            }\n                            case 113: {\n                                goto lab_0x407c35;\n                            }\n                            case 114: {\n                                goto lab_0x407c35;\n                            }\n                            case 115: {\n                                goto lab_0x407c35;\n                            }\n                            case 116: {\n                                goto lab_0x407cd8;\n                            }\n                            default: {\n                                goto lab_0x407b9a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x407b9a;\n    }\n  lab_0x407ac2:\n    // 0x407ac2\n    *a4 = v16;\n    // 0x407ac5\n    return v13 & 0xffffffff;\n  lab_0x407b9a:\n    // 0x407b9a\n    g83 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x407a20\n    switch (v12) {\n        case 66: {\n            // 0x407d94\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x407c07;\n            } else {\n                // 0x407da1\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x407bd8;\n            }\n        }\n        case 69: {\n            goto lab_0x407d3b;\n        }\n        case 71: {\n            goto lab_0x407d73;\n        }\n        case 75: {\n            goto lab_0x407bfc;\n        }\n        case 77: {\n            goto lab_0x407bbe;\n        }\n        case 80: {\n            goto lab_0x407d08;\n        }\n        case 84: {\n            goto lab_0x407cd8;\n        }\n        case 89: {\n            goto lab_0x407ca6;\n        }\n        case 90: {\n            goto lab_0x407c6b;\n        }\n        case 98: {\n            goto lab_0x407c4f;\n        }\n        case 99: {\n            goto lab_0x407bd8;\n        }\n        case 103: {\n            goto lab_0x407d73;\n        }\n        case 107: {\n            goto lab_0x407bfc;\n        }\n        case 109: {\n            goto lab_0x407bbe;\n        }\n        case 116: {\n            goto lab_0x407cd8;\n        }\n        case 119: {\n            // 0x407c40\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x407c07;\n            } else {\n                // 0x407c45\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x407bd8;\n            }\n        }\n        default: {\n            goto lab_0x407c35;\n        }\n    }\n  lab_0x407d3b:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x407d53\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x407d5f\n    int64_t v51 = v48; // 0x407d62\n    int64_t v52 = v37; // 0x407d62\n    int64_t v53 = v49; // 0x407d62\n    int32_t v54 = v50; // 0x407d62\n    int64_t v55 = v49; // 0x407d62\n    while (v50 != 0) {\n        // 0x407d50\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x407c94;\n  lab_0x407d73:\n    // 0x407d73\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x407d7e\n        int128_t v56; // 0x407d79\n        uint128_t v57; // 0x407d79\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x407d7e\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x407a20\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x407d83\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x407d88\n                v26 = v60;\n                int64_t v61; // 0x407a20\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x407bd8;\n  lab_0x407bfc:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x407bff\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x407bd8;\n    } else {\n        goto lab_0x407c07;\n    }\n  lab_0x407bbe:;\n    int128_t v65 = v27; // 0x407bc4\n    uint128_t v66 = v65 * (int128_t)v17; // 0x407bc4\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x407c07;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x407bc9\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x407c07;\n        } else {\n            // 0x407bce\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x407bd8;\n        }\n    }\n  lab_0x407d08:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x407d1b\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x407d27\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x407d2a\n    int64_t v73 = v70; // 0x407d2a\n    while (v71 != 0) {\n        // 0x407d18\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x407c94;\n  lab_0x407cd8:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x407ceb\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x407cf7\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x407cfa\n    int64_t v79 = v76; // 0x407cfa\n    while (v77 != 0) {\n        // 0x407ce8\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x407c94;\n  lab_0x407ca6:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x407cbb\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x407cc7\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x407cca\n    int64_t v85 = v82; // 0x407cca\n    while (v83 != 0) {\n        // 0x407cb8\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x407c94;\n  lab_0x407c6b:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x407c83\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x407c8f\n    int32_t v90 = v89; // 0x407c92\n    int64_t v91 = v88; // 0x407c92\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x407c80\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x407c94;\n  lab_0x407c4f:\n    // 0x407c4f\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x407c07;\n    } else {\n        // 0x407c58\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x407bd8;\n    }\n  lab_0x407bd8:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x407bdd\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x407ac2;\n  lab_0x407c35:\n    // 0x407c35\n    *a4 = v18;\n    // 0x407ac5\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x407c07:\n    // 0x407c07\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x407bd8;\n  lab_0x407c94:\n    // 0x407c94\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x407bd8;\n}\n"
        },
        {
            "funcName": "function_407e60",
            "funcStartAddr": "407e60",
            "funcEndAddr": "407edb",
            "decompiledFuncCode": "int64_t function_407e60(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x407e67\n    if (fileno(stream) < 0) {\n        // 0x407ec7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x407e7a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x407eab\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x407ec7\n            return fclose(stream);\n        }\n    }\n    // 0x407e7c\n    if ((int32_t)function_407ee0(a1, v1) == 0) {\n        // 0x407ec7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x407e88\n    int32_t v3 = *v2; // 0x407e90\n    int64_t result = fclose(stream); // 0x407e9e\n    if (v3 != 0) {\n        // 0x407ed0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x407ea0\n    return result;\n}\n"
        },
        {
            "funcName": "function_407ee0",
            "funcStartAddr": "407ee0",
            "funcEndAddr": "407f20",
            "decompiledFuncCode": "int64_t function_407ee0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x407efa\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x407efa\n        return fflush(stream);\n    }\n    // 0x407f08\n    function_407f20(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_407f20",
            "funcStartAddr": "407f20",
            "funcEndAddr": "407f77",
            "decompiledFuncCode": "int64_t function_407f20(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x407f20\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x407f2a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x407f5b\n    int64_t result = -1; // 0x407f64\n    if (v1 != -1) {\n        // 0x407f66\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x407f72\n    return result;\n}\n"
        },
        {
            "funcName": "function_407f80",
            "funcStartAddr": "407f80",
            "funcEndAddr": "40805f",
            "decompiledFuncCode": "int64_t function_407f80(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x407f8c\n    uint32_t v2 = *v1; // 0x407f8c\n    int64_t v3 = a2 & 0xffffffff; // 0x407f91\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x407f94\n    uint64_t v5 = (int64_t)*v4; // 0x407f94\n    int64_t v6; // 0x408002\n    if (v3 <= v5) {\n      lab_0x407ffc_2:\n        // 0x407ffc\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x407f82\n    int64_t v8 = v2; // 0x407f80\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x407ffc\n        goto lab_0x407ffc_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x407fb8\n    int64_t v17; // 0x407fc6\n    int64_t * v18; // 0x407fe0\n    int64_t * v19; // 0x407fe3\n    int64_t v20; // 0x407fee\n    int64_t v21; // 0x407fc6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x407fc3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x407fe0\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x407ff7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x407ffc\n            goto lab_0x407ffc_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x407ffc\n            goto lab_0x407ffc_2;\n        }\n        // 0x407fb2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40803b\n    int64_t * v23 = (int64_t *)v22; // 0x408040\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x408043\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x408040\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x408057\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x407fad\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x407ffc\n            goto lab_0x407ffc_2;\n        }\n        // 0x407fb2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x407fc3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x407fe0\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x407ff7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x407ffc\n                goto lab_0x407ffc_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x407ffc\n                goto lab_0x407ffc_2;\n            }\n            // 0x407fb2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x408020\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x408040\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x408057\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x407ffc\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408060",
            "funcStartAddr": "408060",
            "funcEndAddr": "40867c",
            "decompiledFuncCode": "int64_t function_408060(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40807f\n    int64_t v2 = *v1; // 0x40807f\n    char * str2 = (char *)v2; // 0x40808c\n    char c = *str2; // 0x40808c\n    int64_t v3 = v2; // 0x4080b8\n    int64_t v4 = 0; // 0x408060\n    int32_t v5; // 0x408060\n    int64_t v6; // 0x408060\n    int64_t v7; // 0x408060\n    int64_t v8; // 0x408060\n    int64_t v9; // 0x408060\n    int64_t v10; // 0x408060\n    int64_t v11; // 0x408060\n    int64_t v12; // 0x408060\n    int64_t v13; // 0x408060\n    int64_t str3; // 0x408060\n    int64_t v14; // 0x408060\n    int64_t v15; // 0x408060\n    int64_t v16; // 0x408060\n    int64_t v17; // 0x408060\n    int32_t v18; // 0x408060\n    int32_t v19; // 0x408060\n    int32_t v20; // 0x408060\n    int32_t v21; // 0x408060\n    int32_t v22; // 0x408060\n    int32_t v23; // 0x408060\n    int32_t v24; // 0x408060\n    int32_t v25; // 0x408060\n    int32_t v26; // 0x408060\n    int32_t v27; // 0x408060\n    int32_t v28; // 0x408060\n    int32_t v29; // 0x408060\n    int64_t nmemb; // 0x408060\n    int64_t v30; // 0x408060\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x4080bc\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x4080b8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4080c8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4080ce\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x408098\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4080fc\n                int64_t v34; // 0x408060\n                int64_t v35; // 0x408060\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x408105\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x408280;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x408116\n                int64_t v37 = *(int64_t *)v36; // 0x40811a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4080f0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x408105\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x408280;\n                        }\n                    }\n                    // 0x408116\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x408166:\n                    // 0x408166\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4081c0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x408330\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4081c0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x4082e0\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40818a;\n                                } else {\n                                    // 0x4082ec\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40818a;\n                                    } else {\n                                        // 0x4082fa\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40818a;\n                                        } else {\n                                            goto lab_0x4081c0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40818a;\n                            }\n                        }\n                    }\n                }\n              lab_0x4081d1:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x4083a6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x408552\n                            flockfile(g38);\n                            int64_t v41 = *v1; // 0x408572\n                            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x4085bf\n                            int64_t v43 = (int64_t)g38;\n                            int64_t v44 = v43; // 0x4085d9\n                            int64_t v45; // 0x4085db\n                            if (*(char *)v42 != 0) {\n                                // 0x4085db\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g38;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x4085d3\n                            while (v17 + nmemb != v42) {\n                                // 0x4085d5\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x4085db\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g38;\n                                }\n                                // 0x4085c8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x408600\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g38);\n                            v40 = *v1;\n                        } else {\n                            // 0x4083b4\n                            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40850f\n                        free((int64_t *)v17);\n                    }\n                    // 0x408409\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x408420\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4082ce\n                    return 63;\n                }\n                // 0x4081f0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x408274\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x408280:;\n                    int32_t * v49 = (int32_t *)a7; // 0x408290\n                    uint32_t v50 = *v49; // 0x408290\n                    int64_t v51 = v50; // 0x408290\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40829a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x4082a3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4084cf\n                                __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40847a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4082ce\n                            return 63;\n                        }\n                        // 0x408318\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40862f\n                                    __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40852d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x408540\n                                // 0x4082ce\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40843e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x408452\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x4082bb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x4082be\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4082c2\n                    int64_t result = v59; // 0x4082c8\n                    if (v58 != 0) {\n                        // 0x4082ca\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4082ce\n                    return result;\n                }\n            } else {\n                // 0x4080ce\n                v5 = v32;\n            }\n            // break -> 0x4081f5\n            break;\n        }\n    }\n    // 0x4081f5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40820d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x408217\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4082ce\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x408359\n        __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x408246\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x408256\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4081c0:\n    // 0x4081c0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4081c0\n    int64_t v63 = *(int64_t *)v62; // 0x4081c4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x4081d1\n        goto lab_0x4081d1;\n    }\n    goto lab_0x408166;\n  lab_0x40818a:\n    // 0x40818a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x408060\n    int32_t v65; // 0x408060\n    int32_t v66; // 0x408060\n    if (v27 != 0) {\n        goto lab_0x4081c0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x408340\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4081c0;\n            } else {\n                goto lab_0x4081b1;\n            }\n        } else {\n            // 0x4081a5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40849c\n                int64_t v67 = (int64_t)mem; // 0x40849c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4081c0;\n                } else {\n                    // 0x4084af\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x4081b1;\n                }\n            } else {\n                goto lab_0x4081b1;\n            }\n        }\n    }\n  lab_0x4081b1:\n    // 0x4081b1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4081c0;\n}\n"
        },
        {
            "funcName": "function_408680",
            "funcStartAddr": "408680",
            "funcEndAddr": "408c46",
            "decompiledFuncCode": "int64_t function_408680(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x4086a1\n    if (v3 < 1) {\n        // 0x40885e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40869d\n    int32_t v5 = *(int32_t *)a7; // 0x4086a9\n    uint64_t v6 = a1 & 0xffffffff; // 0x4086ab\n    int64_t v7 = v2; // 0x4086b0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x4086b3\n    *v8 = 0;\n    int64_t v9; // 0x408680\n    int64_t v10; // 0x408680\n    int64_t v11; // 0x408680\n    int64_t v12; // 0x408680\n    int64_t str; // 0x408680\n    int64_t v13; // 0x408680\n    int64_t v14; // 0x408680\n    int64_t v15; // 0x408680\n    int64_t v16; // 0x408680\n    int64_t v17; // 0x408680\n    int32_t v18; // 0x408680\n    char v19; // 0x408680\n    if (v5 == 0) {\n        // 0x408898\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x4086ca;\n    } else {\n        // 0x4086c3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x408710\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x408713\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x4087d8;\n            } else {\n                int64_t v22 = v7 + 1; // 0x408726\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x408736\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x4087ec;\n                } else {\n                    goto lab_0x408748;\n                }\n            }\n        } else {\n            goto lab_0x4086ca;\n        }\n    }\n  lab_0x4086ca:\n    // 0x4086ca\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x4086d0\n    *v24 = 0;\n    int64_t v25; // 0x408680\n    int64_t v26; // 0x408680\n    int64_t v27; // 0x408680\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x4087c0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4087cd;\n        }\n        case 43: {\n            // 0x408ad0\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x4087cd;\n        }\n        default: {\n            // 0x4086ec\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x408a4f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x408b68\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x4087cd;\n                } else {\n                    // 0x408a5d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x4086fa;\n                }\n            } else {\n                goto lab_0x4086fa;\n            }\n        }\n    }\n  lab_0x4087d8:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x4087df\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x408748;\n    } else {\n        goto lab_0x4087ec;\n    }\n  lab_0x4086fa:\n    // 0x4086fa\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x4087cd;\n  lab_0x4087cd:\n    // 0x4087cd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x4087d8;\n  lab_0x408748:;\n    uint32_t v30 = *(int32_t *)a7; // 0x408748\n    int64_t v31 = v30; // 0x408748\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40874a\n    if ((int64_t)*v32 > v31) {\n        // 0x40874f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x408752\n    if (*v33 > v30) {\n        // 0x408757\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40875a\n    int64_t v35 = v31; // 0x40875e\n    int64_t v36 = v15; // 0x40875e\n    int64_t v37; // 0x408680\n    int64_t v38; // 0x408680\n    int64_t v39; // 0x408680\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x4088c8\n        int64_t v41 = v40; // 0x4088c8\n        v2 = v41;\n        int64_t v42; // 0x408680\n        if (*v33 == v40) {\n            // 0x408ab0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x408ab8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x4088d4\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x4088d8\n                function_407f80(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x4088e8\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x4088f1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x4088fa\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x408911\n            int64_t v47 = v45 & 0xffffffff; // 0x408915\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40891e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x408924\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x408926;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x408900\n            int64_t v49 = v48 & 0xffffffff; // 0x408900\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x408911\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40891e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x408924\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x408926;\n                    }\n                }\n                // 0x408900\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x408ac8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x408926;\n    } else {\n        goto lab_0x408764;\n    }\n  lab_0x4087ec:\n    // 0x4087ec\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x4087ef\n    int64_t v51 = v12; // 0x4087ef\n    int64_t v52 = v14; // 0x4087ef\n    if (*(char *)v10 == 0) {\n        goto lab_0x408748;\n    } else {\n        goto lab_0x4087f5;\n    }\n  lab_0x408764:;\n    int32_t v53 = v35; // 0x408764\n    int64_t v54; // 0x408680\n    int64_t v55; // 0x408680\n    int64_t v56; // 0x408680\n    int64_t v57; // 0x408680\n    int64_t v58; // 0x408680\n    int64_t v59; // 0x408680\n    char * v60; // 0x408680\n    int64_t v61; // 0x408680\n    int64_t v62; // 0x408779\n    int64_t v63; // 0x408680\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x4088b3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x4088b6;\n    } else {\n        // 0x40876c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x408680\n        int64_t v66 = v65 ? -1 : 1; // 0x408780\n        int64_t v67 = (int64_t)\"--\"; // 0x408680\n        int64_t v68 = v62; // 0x408680\n        int64_t v69 = 3; // 0x408780\n        unsigned char v70 = *(char *)v68; // 0x408780\n        char v71 = *(char *)v67; // 0x408780\n        char v72 = v71; // 0x408780\n        bool v73 = false; // 0x408780\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x408870\n            if (*(char *)v62 == 45) {\n                // 0x408930\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x408930\n                if (c == 0) {\n                    goto lab_0x40887a;\n                } else {\n                    // 0x40893d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x4089c0;\n                    } else {\n                        if (c == 45) {\n                            // 0x408ba3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x408a15;\n                        } else {\n                            // 0x40894e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x4089c0;\n                            } else {\n                                // 0x408953\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x408974;\n                                } else {\n                                    // 0x40895a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x4089c0;\n                                    } else {\n                                        goto lab_0x408974;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40887a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x408790\n            v2 = v75;\n            int32_t v76 = *v32; // 0x408793\n            int64_t v77 = v35 + 1; // 0x408796\n            int32_t v78 = v77; // 0x408799\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x408b00\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x4087a7\n                    function_407f80(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x4087b5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x4088b6;\n        }\n    }\n  lab_0x4087f5:;\n    // 0x4087f5\n    int64_t v79; // bp-104, 0x408680\n    int64_t v80 = &v79; // 0x40868a\n    int64_t v81 = v50 + 1; // 0x4087f5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x4087fc\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x408801\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x408805\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x408809\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x408811\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x408816\n    int32_t c2 = v84; // 0x408816\n    char * found_char_pos = strchr(str2, c2); // 0x408816\n    int64_t v87 = *v82; // 0x40881b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x408825\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x408830\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x408b20\n            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x408aed\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40885e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x408816\n    char v91 = *(char *)(v90 + 1); // 0x40884b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x408805\n        if (v91 != 58) {\n            // 0x40885e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x408a74\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x408b78\n                *v8 = 0;\n            } else {\n                // 0x408b5c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x408a9e\n            *v83 = 0;\n            // 0x40885e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x408a7e\n        if (v93 != 0) {\n            // 0x408b10\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x408a9e\n            *v83 = 0;\n            // 0x40885e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x408a91\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x408a9e\n            *v83 = 0;\n            // 0x40885e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x408bda\n            __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x408b8a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x408b91\n        // 0x408a9e\n        *v83 = 0;\n        // 0x40885e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x4089e9\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x4089eb\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x408c10\n                __fprintf_chk(g38, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x408bc1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x408bc8\n            // 0x40885e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4089f6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4089fa\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x408a15;\n  lab_0x408926:\n    // 0x408926\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x408764;\n  lab_0x408a15:;\n    int64_t v99 = function_408060(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x408a33\n    // 0x40885e\n    return v99 & 0xffffffff;\n  lab_0x4088b6:;\n    int32_t v100 = v55; // 0x4088b6\n    if (v100 != (int32_t)v59) {\n        // 0x4088ba\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40885e\n    return 0xffffffff;\n  lab_0x40887a:\n    // 0x40887a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x408881\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40885e\n    return v99 & 0xffffffff;\n  lab_0x4089c0:\n    // 0x4089c0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x4087f5;\n  lab_0x408974:\n    // 0x408974\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_408060(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40899a\n    if ((int32_t)v101 != -1) {\n        // 0x40885e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x4089af\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x4089c0;\n}\n"
        },
        {
            "funcName": "function_408c50",
            "funcStartAddr": "408c50",
            "funcEndAddr": "408ca6",
            "decompiledFuncCode": "int64_t function_408c50(int64_t a1) {\n    // 0x408c50\n    *(int32_t *)&g74 = g31;\n    *(int32_t *)&g75 = g30;\n    int64_t v1; // 0x408c50\n    int64_t result = function_408680(v1, v1, v1, v1, v1, v1, &g74, a1 & 0xffffffff); // 0x408c76\n    g31 = *(int32_t *)&g74;\n    g80 = (char *)g77;\n    *(int32_t *)&g29 = g76;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408cb0",
            "funcStartAddr": "408cb0",
            "funcEndAddr": "408cc8",
            "decompiledFuncCode": "int64_t function_408cb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408cb0\n    return function_408c50(1);\n}\n"
        },
        {
            "funcName": "function_408cd0",
            "funcStartAddr": "408cd0",
            "funcEndAddr": "408ce3",
            "decompiledFuncCode": "int64_t function_408cd0(int64_t a1, int64_t a2, char * a3, char (**a4)[6], int32_t a5, int64_t a6) {\n    // 0x408cd0\n    return function_408c50(0);\n}\n"
        },
        {
            "funcName": "function_408cf0",
            "funcStartAddr": "408cf0",
            "funcEndAddr": "408d05",
            "decompiledFuncCode": "int64_t function_408cf0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408cf0\n    return function_408680(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_408d10",
            "funcStartAddr": "408d10",
            "funcEndAddr": "408d26",
            "decompiledFuncCode": "int64_t function_408d10(void) {\n    // 0x408d10\n    return function_408c50(0);\n}\n"
        },
        {
            "funcName": "function_408d30",
            "funcStartAddr": "408d30",
            "funcEndAddr": "408d48",
            "decompiledFuncCode": "int64_t function_408d30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x408d30\n    return function_408680(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_408d50",
            "funcStartAddr": "408d50",
            "funcEndAddr": "408dca",
            "decompiledFuncCode": "int64_t function_408d50(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x408d5b\n    int64_t v2 = (int64_t)&g11; // 0x408d5b\n    int32_t * pwc; // 0x408d50\n    int64_t v3; // 0x408d50\n    int64_t n; // 0x408d50\n    if (a2 == 0) {\n        goto lab_0x408da2;\n    } else {\n        // 0x408d5d\n        if (a3 == 0) {\n            // 0x408d88\n            return -2;\n        }\n        // 0x408d69\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x408da2;\n        } else {\n            goto lab_0x408d74;\n        }\n    }\n  lab_0x408da2:\n    // 0x408da2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x408d50\n    pwc = (int32_t *)&v4;\n    goto lab_0x408d74;\n  lab_0x408d74:;\n    char * wstr = (char *)v3; // 0x408d7a\n    int64_t ps; // 0x408d50\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x408d7a\n    int64_t result = v5; // 0x408d7a\n    if (v5 < 0xfffffffe) {\n        // 0x408d88\n        return result;\n    }\n    int64_t result2 = result; // 0x408db9\n    if ((char)function_409170(0, v3) == 0) {\n        // 0x408dbb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x408d88\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408dd0",
            "funcStartAddr": "408dd0",
            "funcEndAddr": "408ed4",
            "decompiledFuncCode": "int64_t function_408dd0(int64_t result, uint64_t a2, int64_t a3) {\n    // 0x408dd0\n    if (a3 == 0) {\n        // 0x408e09\n        return 0;\n    }\n    int64_t v1 = result; // 0x408ddc\n    int64_t v2 = a3; // 0x408ddc\n    int64_t result2; // 0x408dd0\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x408dde\n        int64_t v4 = result; // 0x408de1\n        if ((char)result == v3) {\n            // 0x408e09\n            return result;\n        }\n        int64_t v5 = a3; // 0x408de1\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x408df0\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x408e10;\n            }\n            // 0x408df6\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x408e09\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x408e09\n        return result2;\n    }\n  lab_0x408e10:;\n    int64_t result3 = v1; // 0x408e3d\n    int64_t v6 = v2; // 0x408e3d\n    if (v2 >= 8) {\n        int64_t v7 = 256 * a2 & 0xff00 | a2 % 256; // 0x408e1f\n        int64_t v8 = 0x10000 * v7 | v7; // 0x408e2c\n        int64_t v9 = 0x100000000 * v8 | v8; // 0x408e36\n        int64_t v10 = *(int64_t *)v1 ^ v9; // 0x408e56\n        result3 = v1;\n        v6 = v2;\n        if (((v10 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v10 - 0x101010101010101) == 0) {\n            int64_t v11 = v2 - 8; // 0x408e85\n            int64_t v12 = v1 + 8; // 0x408e89\n            while (v11 >= 8) {\n                int64_t v13 = *(int64_t *)v12 ^ v9; // 0x408e73\n                result3 = v12;\n                v6 = v11;\n                if (((v13 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v13 - 0x101010101010101) != 0) {\n                    goto lab_0x408e9c;\n                }\n                v11 -= 8;\n                v12 += 8;\n            }\n            // 0x408e93\n            result3 = v12;\n            v6 = v11;\n            if (v11 == 0) {\n                // 0x408e09\n                return 0;\n            }\n        }\n    }\n  lab_0x408e9c:;\n    char v14 = a2; // 0x408e9c\n    if (*(char *)result3 == v14) {\n        // 0x408e09\n        return result3;\n    }\n    int64_t v15 = result3 + 1;\n    result2 = 0;\n    while (v15 != v6 + result3) {\n        // 0x408eb0\n        result2 = v15;\n        if (*(char *)v15 == v14) {\n            // break -> 0x408e09\n            break;\n        }\n        v15++;\n        result2 = 0;\n    }\n    // 0x408e09\n    return result2;\n}\n"
        },
        {
            "funcName": "function_408ee0",
            "funcStartAddr": "408ee0",
            "funcEndAddr": "40903a",
            "decompiledFuncCode": "int64_t function_408ee0(int64_t a1, int64_t a2) {\n    char v1 = a1;\n    char * str2 = (char *)a1;\n    int64_t str = (int64_t)\"HUP\"; // 0x408f01\n    int64_t v2; // 0x408ee0\n    int64_t v3; // 0x408ee0\n    int64_t v4; // 0x408ee0\n    int32_t v5; // 0x408f70\n    int64_t v6; // 0x408f75\n    int32_t v7; // 0x408f78\n    int64_t v8; // 0x408f7d\n    int64_t v9; // 0x408f91\n    bool v10; // 0x408ee0\n    if (v1 != 57 && (int32_t)v1 >= 57) {\n        int64_t v11 = 0;\n        while (strcmp((char *)str, str2) != 0) {\n            int64_t v12 = v11 + 1; // 0x408f08\n            str += 12;\n            if ((int32_t)v12 == 35) {\n                // 0x408f70\n                v5 = __libc_current_sigrtmin();\n                v6 = v5;\n                v7 = __libc_current_sigrtmax();\n                v8 = v7;\n                if (v5 < 1) {\n                    goto lab_0x408f9c;\n                } else {\n                    // 0x408f84\n                    v9 = v10 ? -1 : 1;\n                    v2 = (int64_t)\"RTMIN\";\n                    v4 = a1;\n                    v3 = 5;\n                    goto lab_dec_label_pc_unknown;\n                }\n            }\n            v11 = v12 & 0xffffffff;\n        }\n        int32_t v13 = *(int32_t *)(12 * v11 + (int64_t)&g34);\n        *(int32_t *)a2 = v13;\n        // 0x408f34\n        return v13 >> 31;\n    }\n    // 0x408f40\n    char * endptr; // bp-48, 0x408ee0\n    int32_t str_as_l = strtol(str2, &endptr, 10); // 0x408f4a\n    int32_t v14 = str_as_l; // 0x408f57\n    if (str_as_l < 65 == *endptr == 0) {\n      lab_0x408f2e:\n        // 0x408f2e\n        *(int32_t *)a2 = v14;\n        // 0x408f34\n        return v14 >> 31;\n    }\n  lab_0x408f60:\n    // 0x408f60\n    *(int32_t *)a2 = -1;\n    // 0x408f34\n    return 0xffffffff;\n  lab_0x408f9c:;\n    int64_t v15; // 0x408ee0\n    int64_t v16; // 0x408ee0\n    int64_t v17; // 0x408ee0\n    int64_t v18; // 0x408fad\n    if (v7 < 1) {\n        goto lab_0x408f60;\n    } else {\n        // 0x408fa0\n        v18 = v10 ? -1 : 1;\n        v15 = (int64_t)\"RTMAX\";\n        v17 = a1;\n        v16 = 5;\n        goto lab_dec_label_pc_unknown_2;\n    }\n  lab_dec_label_pc_unknown:;\n    unsigned char v19 = *(char *)v4; // 0x408f91\n    char v20 = *(char *)v2; // 0x408f91\n    char v21 = v20; // 0x408f91\n    bool v22 = false; // 0x408f91\n    if (v19 == v20) {\n        int64_t v23 = v3 - 1; // 0x408f91\n        v2 += v9;\n        v4 += v9;\n        v3 = v23;\n        v21 = v19;\n        v22 = true;\n        if (v23 == 0) {\n            goto lab_dec_label_pc_unknown_4;\n        } else {\n            goto lab_dec_label_pc_unknown;\n        }\n    } else {\n        goto lab_dec_label_pc_unknown_4;\n    }\n  lab_dec_label_pc_unknown_2:;\n    unsigned char v24 = *(char *)v17; // 0x408fad\n    char v25 = *(char *)v15; // 0x408fad\n    char v26 = v25; // 0x408fad\n    bool v27 = false; // 0x408fad\n    if (v24 == v25) {\n        int64_t v28 = v16 - 1; // 0x408fad\n        v15 += v18;\n        v17 += v18;\n        v16 = v28;\n        v26 = v24;\n        v27 = true;\n        if (v28 == 0) {\n            goto lab_dec_label_pc_unknown_6;\n        } else {\n            goto lab_dec_label_pc_unknown_2;\n        }\n    } else {\n        goto lab_dec_label_pc_unknown_6;\n    }\n  lab_dec_label_pc_unknown_4:;\n    unsigned char v29 = v21;\n    if ((v19 >= v29 && !v22) == v19 < v29) {\n        int32_t str_as_l2 = strtol((char *)(a1 + 5), &endptr, 10); // 0x409007\n        if (str_as_l2 < 0 | *endptr != 0) {\n            goto lab_0x408f60;\n        } else {\n            if (0x100000000 * (v8 - v6) >> 32 < (int64_t)str_as_l2) {\n                goto lab_0x408f60;\n            } else {\n                // 0x409032\n                v14 = str_as_l2 + v5;\n                goto lab_0x408f2e;\n            }\n        }\n    } else {\n        goto lab_0x408f9c;\n    }\n  lab_dec_label_pc_unknown_6:;\n    unsigned char v30 = v26;\n    if ((v24 >= v30 && !v27) != v24 < v30) {\n        goto lab_0x408f60;\n    } else {\n        int32_t str_as_l3 = strtol((char *)(a1 + 5), &endptr, 10); // 0x408fc7\n        if (*endptr != 0) {\n            goto lab_0x408f60;\n        } else {\n            if (0x100000000 * (v6 - v8) >> 32 > (int64_t)str_as_l3) {\n                goto lab_0x408f60;\n            } else {\n                if (str_as_l3 >= 0 == (str_as_l3 != 0)) {\n                    goto lab_0x408f60;\n                } else {\n                    // 0x408fee\n                    v14 = str_as_l3 + v7;\n                    goto lab_0x408f2e;\n                }\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_409040",
            "funcStartAddr": "409040",
            "funcEndAddr": "40910c",
            "decompiledFuncCode": "int64_t function_409040(int64_t a1, int64_t * str, int64_t a3) {\n    int64_t v1 = (int64_t)str;\n    uint64_t v2 = a1 & 0xffffffff; // 0x40904e\n    int32_t v3 = a1;\n    int64_t v4 = (int64_t)&g34; // 0x409050\n    int64_t v5 = 0;\n    int32_t v6; // 0x409040\n    int64_t result; // 0x409040\n    while (*(int32_t *)v4 != v3) {\n        int64_t v7 = v5 + 1; // 0x409058\n        v4 += 12;\n        if ((int32_t)v7 == 35) {\n            int32_t v8 = __libc_current_sigrtmin(); // 0x409088\n            int32_t v9 = __libc_current_sigrtmax(); // 0x409090\n            result = 0xffffffff;\n            if (v2 < (int64_t)v8 || v2 > (int64_t)v9) {\n                return result;\n            } else {\n                if (v2 > (int64_t)((v9 - v8 >> 1) + v8)) {\n                    // 0x4090ac\n                    *(int32_t *)str = 0x414d5452;\n                    *(int16_t *)(v1 + 4) = 88;\n                    v6 = v9;\n                    goto lab_0x4090bf;\n                } else {\n                    // 0x4090f0\n                    *(int32_t *)str = 0x494d5452;\n                    *(int16_t *)(v1 + 4) = 78;\n                    v6 = v8;\n                    goto lab_0x4090bf;\n                }\n            }\n        }\n        v5 = v7 & 0xffffffff;\n    }\n    // 0x409068\n    strcpy((char *)str, (char *)(12 * v5 + (int64_t)\"HUP\"));\n    result = 0;\n  lab_0x40907e:\n    // 0x40907e\n    return result;\n  lab_0x4090bf:;\n    uint32_t v10 = v3 - v6; // 0x4090c1\n    result = 0;\n    if (v10 != 0) {\n        // 0x4090c6\n        __sprintf_chk((char *)(v1 + 5), 1, -1, \"%+d\", (int64_t)v10);\n        return 0;\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_409110",
            "funcStartAddr": "409110",
            "funcEndAddr": "40916d",
            "decompiledFuncCode": "int64_t function_409110(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x409117\n    int64_t v2; // 0x409110\n    int64_t result = function_407e60(a1, v2); // 0x409128\n    if ((v2 & 32) != 0) {\n        // 0x409150\n        if ((int32_t)result == 0) {\n            // 0x409154\n            *__errno_location() = 0;\n        }\n        // 0x40914a\n        return 0xffffffff;\n    }\n    // 0x409131\n    if ((int32_t)result == 0) {\n        // 0x40914a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x409138\n    if (v1 == 0) {\n        // 0x40913a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40914a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409170",
            "funcStartAddr": "409170",
            "funcEndAddr": "4091ce",
            "decompiledFuncCode": "int64_t function_409170(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x409176\n    if (locale == NULL) {\n        // 0x4091a3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x409176\n    bool v2; // 0x409170\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g12; // 0x409170\n    int64_t v5 = v1; // 0x409170\n    int64_t v6 = 2; // 0x409195\n    unsigned char v7 = *(char *)v5; // 0x409195\n    char v8 = *(char *)v4; // 0x409195\n    char v9 = v8; // 0x409195\n    bool v10 = false; // 0x409195\n    while (v7 == v8) {\n        // 0x409188\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4091a1\n    int64_t v13 = v1; // 0x4091a1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4091a3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4091a1\n    unsigned char v15 = *(char *)v13; // 0x4091bd\n    char v16 = *(char *)v12; // 0x4091bd\n    char v17 = v16; // 0x4091bd\n    bool v18 = false; // 0x4091bd\n    while (v15 == v16) {\n        // 0x4091b0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_4091d0",
            "funcStartAddr": "4091d0",
            "funcEndAddr": "409732",
            "decompiledFuncCode": "int64_t function_4091d0(void) {\n    char * v1 = nl_langinfo(14); // 0x4091e6\n    char * v2 = g78; // 0x4091eb\n    char * v3; // 0x4091d0\n    int64_t v4; // 0x4091d0\n    int64_t v5; // 0x4091d0\n    int64_t v6; // 0x4091d0\n    int64_t v7; // 0x4091d0\n    int32_t size; // 0x4091d0\n    int32_t size2; // 0x4091d0\n    int32_t len; // 0x4092a2\n    int64_t v8; // 0x4092a2\n    char * env_val; // 0x40928d\n    if (v2 == NULL) {\n        // 0x409288\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x4092f5;\n        } else {\n            // 0x40929a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x4092f5;\n            } else {\n                // 0x40929f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40928d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x409725\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x4092f5;\n                    } else {\n                        // 0x409699\n                        size2 = len + 14;\n                        goto lab_0x4092bb;\n                    }\n                } else {\n                    goto lab_0x4092bb;\n                }\n            }\n        }\n    } else {\n        // 0x4091d0\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40920a;\n    }\n  lab_0x40953c:;\n    // 0x40953c\n    struct _IO_FILE * stream; // 0x40937b\n    int32_t v10 = __uflow(stream); // 0x40953f\n    int64_t v11; // 0x4091d0\n    int64_t v12 = v11; // 0x409549\n    int64_t v13; // 0x4091d0\n    int64_t v14 = v13; // 0x409549\n    int32_t v15 = v10; // 0x409549\n    int64_t v16; // 0x4091d0\n    int64_t v17 = v16; // 0x409549\n    int64_t v18 = v11; // 0x409549\n    int64_t v19 = v13; // 0x409549\n    int64_t v20 = v16; // 0x409549\n    if (v10 == -1) {\n        // break -> 0x40954f\n        goto lab_0x40954f;\n    }\n    goto lab_0x4093c9;\n  lab_0x4093be:;\n    // 0x4093be\n    int64_t v90; // 0x4091d0\n    int64_t * v32; // 0x4093b0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x4091d0\n    v12 = v89;\n    int64_t v91; // 0x4091d0\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x4091d0\n    v17 = v92;\n    goto lab_0x4093c9;\n  lab_0x4093c9:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x4091d0\n    int32_t v25; // bp-120, 0x4091d0\n    int32_t v26; // bp-184, 0x4091d0\n    int64_t v27; // 0x40937b\n    int64_t v28; // 0x409398\n    int64_t v29; // 0x40939d\n    int64_t * v30; // 0x4093b4\n    switch (c) {\n        case 32: {\n            goto lab_0x4093b0;\n        }\n        case 10: {\n            goto lab_0x4093b0;\n        }\n        case 9: {\n            goto lab_0x4093b0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x4095a1\n            int32_t v33; // 0x4091d0\n            char v34; // 0x4091d0\n            int32_t v35; // 0x4095ae\n            if (v31 < *v30) {\n                // 0x409580\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x4095ab\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x4095a1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x409580\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x4095ab\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x409590\n                v36 = v33;\n            }\n            // 0x40967f\n            if (v36 == -1) {\n                // break -> 0x40954f\n                break;\n            }\n            goto lab_0x4093b0;\n        }\n        default: {\n            // 0x4093df\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40954f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x409408\n            int64_t v39 = v37 + 4; // 0x40940a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x409416\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x409418\n            while (v41 == 0) {\n                // 0x409408\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x409436\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x409442\n            int64_t v45 = v43 + 4; // 0x409444\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x409450\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x409452\n            while (v47 == 0) {\n                // 0x409442\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40943f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x409468\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x409478\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40947c\n            int64_t v52 = v51 + v48; // 0x409485\n            int64_t * mem; // 0x4091d0\n            int64_t v53; // 0x4091d0\n            int64_t v54; // 0x4091d0\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x4095bb\n                int64_t v56 = v55 + 3; // 0x4095c7\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x4094a1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x4094b0\n            if (mem == NULL) {\n                // 0x4096dc\n                free((int64_t *)v21);\n                function_407e60(v27, v53);\n                v24 = (int64_t)&g11;\n                goto lab_0x409354;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x4094c8\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x4094d2\n            uint32_t v62 = (int32_t)v59; // 0x4094d5\n            int64_t v63; // 0x4091d0\n            if (v62 >= 8) {\n                // 0x4095e4\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x4095fe\n                int64_t v66 = v61 - v65; // 0x409602\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40960d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40961e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40961e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40961b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x4096af\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x4094e7\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x4094eb\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x4094fb\n            int64_t v74 = v60 - 1; // 0x4094ff\n            uint32_t v75 = (int32_t)v73; // 0x409504\n            int64_t v76; // 0x4091d0\n            if (v75 >= 8) {\n                // 0x409632\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40963c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40964c\n                int64_t v80 = v74 - v79; // 0x409650\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40965b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40966b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x409669\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x4096c6\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x4096ce\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x409516\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40951a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x409713\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40952e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x4093be;\n            } else {\n                goto lab_0x40953c;\n            }\n        }\n    }\n  lab_0x4093b0:;\n    int64_t v93 = v23; // 0x4091d0\n    int64_t v94 = v22; // 0x4091d0\n    int64_t v95 = v21; // 0x4091d0\n    goto lab_0x4093b0_2;\n  lab_0x4092f5:;\n    int64_t * mem3 = malloc(size); // 0x4092f5\n    int64_t v97 = (int64_t)&g11; // 0x409300\n    int64_t v98; // 0x4091d0\n    int64_t path; // 0x4091d0\n    if (mem3 == NULL) {\n        goto lab_0x4092d2;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x4092f5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x409316;\n    }\n  lab_0x40920a:;\n    int64_t str = v1 == NULL ? (int64_t)&g11 : (int64_t)v1; // 0x4091fd\n    char v100 = *v3; // 0x40920a\n    int64_t v101; // 0x4091d0\n    if (v100 == 0) {\n        // 0x409264\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x4091d0\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x4091d0\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x409250\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x409257;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x409220\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40922d\n        char v107 = *(char *)v106; // 0x409232\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x409264\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40923b\n    v104 = v103 + 1;\n  lab_0x409257:\n    // 0x409264\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x4092d2:;\n    char * v108 = (char *)v97;\n    g78 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40920a;\n  lab_0x409316:;\n    int64_t v109 = v98 + path; // 0x409316\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x409342\n    v24 = (int64_t)&g11;\n    if (fd >= 0) {\n        // 0x409371\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x4096a2\n            close(fd);\n            v24 = (int64_t)&g11;\n        } else {\n            // 0x409395\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x4093b0_2:;\n                uint64_t v96 = *v32; // 0x4093b0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40953c;\n                } else {\n                    goto lab_0x4093be;\n                }\n            }\n          lab_0x40954f:\n            // 0x40954f\n            function_407e60(v27, v19);\n            v24 = (int64_t)&g11;\n            if (v18 != 0) {\n                // 0x40956e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x409354;\n  lab_0x4092bb:;\n    int64_t * mem4 = malloc(size2); // 0x4092bb\n    v97 = (int64_t)&g11;\n    if (mem4 != NULL) {\n        // 0x409361\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x409316;\n    } else {\n        goto lab_0x4092d2;\n    }\n  lab_0x409354:\n    // 0x409354\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x4092d2;\n}\n"
        },
        {
            "funcName": "function_409740",
            "funcStartAddr": "409740",
            "funcEndAddr": "40974e",
            "decompiledFuncCode": "int64_t function_409740(int64_t a1, int64_t a2) {\n    // 0x409740\n    int64_t v1; // 0x409740\n    return function_409750(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_409750",
            "funcStartAddr": "409750",
            "funcEndAddr": "409885",
            "decompiledFuncCode": "int64_t function_409750(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x409830\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40978c\n    int64_t v2; // 0x409750\n    if (g79 < 0) {\n        int64_t v3 = function_409750(fd, 0, v1, a4); // 0x4097d4\n        int64_t v4 = v3 & 0xffffffff; // 0x4097d9\n        if ((int32_t)v3 < 0) {\n            // 0x4097c0\n            return v4 & 0xffffffff;\n        }\n        // 0x4097df\n        v2 = v4;\n        if (g79 != -1) {\n            // 0x4097c0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x4097a7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x4097b6\n            g79 = 1;\n            // 0x4097c0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_409750(fd & 0xffffffff, 0, v1, a4); // 0x409867\n        int64_t v7 = v6 & 0xffffffff; // 0x40986c\n        if ((int32_t)v6 < 0) {\n            // 0x4097c0\n            return v7 & 0xffffffff;\n        }\n        // 0x409876\n        g79 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x4097ef\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x4097fa\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x4097c0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x409812\n    close(fd2);\n    // 0x4097c0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_409890",
            "funcStartAddr": "409890",
            "funcEndAddr": "4098ed",
            "decompiledFuncCode": "int64_t function_409890(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409890\n    return function_401970();\n}\n"
        },
        {
            "funcName": "function_4098f0",
            "funcStartAddr": "4098f0",
            "funcEndAddr": "4098f1",
            "decompiledFuncCode": "int64_t function_4098f0(void) {\n    // 0x4098f0\n    int64_t result; // 0x4098f0\n    return result;\n}\n"
        },
        {
            "funcName": "function_409900",
            "funcStartAddr": "409900",
            "funcEndAddr": "409918",
            "decompiledFuncCode": "int64_t function_409900(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409900\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g17);\n}\n"
        },
        {
            "funcName": "function_409918",
            "funcStartAddr": "409918",
            "funcEndAddr": "409938",
            "decompiledFuncCode": "int64_t function_409918(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g13; // 0x409922\n    while (*(int64_t *)v1 != -1) {\n        // 0x409923\n        v1 -= 8;\n    }\n    // 0x409934\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_split.elf"
}