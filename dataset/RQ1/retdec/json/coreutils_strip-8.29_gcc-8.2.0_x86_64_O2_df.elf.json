{
    "funcInfo": [
        {
            "funcName": "function_4023a0",
            "funcStartAddr": "4023a0",
            "funcEndAddr": "4023a5",
            "decompiledFuncCode": "int64_t function_4023a0(void) {\n    // 0x4023a0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023a5",
            "funcStartAddr": "4023a5",
            "funcEndAddr": "4023aa",
            "decompiledFuncCode": "int64_t function_4023a5(void) {\n    // 0x4023a5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023aa",
            "funcStartAddr": "4023aa",
            "funcEndAddr": "4023af",
            "decompiledFuncCode": "int64_t function_4023aa(void) {\n    // 0x4023aa\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023af",
            "funcStartAddr": "4023af",
            "funcEndAddr": "4023b4",
            "decompiledFuncCode": "int64_t function_4023af(void) {\n    // 0x4023af\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023b4",
            "funcStartAddr": "4023b4",
            "funcEndAddr": "4023b9",
            "decompiledFuncCode": "int64_t function_4023b4(void) {\n    // 0x4023b4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023b9",
            "funcStartAddr": "4023b9",
            "funcEndAddr": "4023be",
            "decompiledFuncCode": "int64_t function_4023b9(void) {\n    // 0x4023b9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023be",
            "funcStartAddr": "4023be",
            "funcEndAddr": "4023c3",
            "decompiledFuncCode": "int64_t function_4023be(void) {\n    // 0x4023be\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023c3",
            "funcStartAddr": "4023c3",
            "funcEndAddr": "4023c8",
            "decompiledFuncCode": "int64_t function_4023c3(void) {\n    // 0x4023c3\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023c8",
            "funcStartAddr": "4023c8",
            "funcEndAddr": "4023cd",
            "decompiledFuncCode": "int64_t function_4023c8(void) {\n    // 0x4023c8\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023cd",
            "funcStartAddr": "4023cd",
            "funcEndAddr": "4023d2",
            "decompiledFuncCode": "int64_t function_4023cd(void) {\n    // 0x4023cd\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023d2",
            "funcStartAddr": "4023d2",
            "funcEndAddr": "4023d7",
            "decompiledFuncCode": "int64_t function_4023d2(void) {\n    // 0x4023d2\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023d7",
            "funcStartAddr": "4023d7",
            "funcEndAddr": "4023dc",
            "decompiledFuncCode": "int64_t function_4023d7(void) {\n    // 0x4023d7\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4023e0",
            "funcStartAddr": "4023e0",
            "funcEndAddr": "403907",
            "decompiledFuncCode": "int64_t function_4023e0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 & 0xffffffff; // 0x4023f2\n    int64_t str7; // bp-344, 0x4023e0\n    int64_t v2 = &str7; // 0x4023f4\n    str7 = a2;\n    function_4081c0(a2);\n    setlocale(LC_ALL, (char *)&g14);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v3; // 0x4023e0\n    function_410f70(0x4058f0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v3);\n    g59 = 0;\n    g58 = 0;\n    g67 = 0;\n    g65 = 0;\n    *(int32_t *)&g64 = -1;\n    g56 = 0;\n    g62 = 0;\n    g60 = 0;\n    g55 = 0;\n    g48 = 1;\n    char * format2 = dcgettext(NULL, \"options %s and %s are mutually exclusive\", 5); // 0x40249d\n    int64_t format = (int64_t)format2; // 0x40249d\n    int64_t v4 = 0; // 0x4024a5\n    int64_t v5; // 0x4023e0\n    int32_t v6; // bp-200, 0x4023e0\n    while (true) {\n      lab_0x4024a8_2:\n        // 0x4024a8\n        v5 = v4;\n        v6 = -1;\n        int64_t v7 = function_40c380(v1, str7, \"aB:iF:hHklmPTt:vx:\", &g3, (int64_t *)&v6, v3); // 0x4024c7\n        int32_t v8 = v7;\n        switch (v8) {\n            case -1: {\n                goto lab_0x40280a;\n            }\n            case 105: {\n                // 0x4027b0\n                if (g47 == 4) {\n                    goto lab_0x4038b4;\n                }\n                // 0x4027bd\n                g47 = 1;\n                // 0x4024a8\n                v4 = v5;\n                goto lab_0x4024a8_2;\n            }\n            default: {\n                int64_t v9; // 0x4023e0\n                if (v8 > 105) {\n                    // 0x4024e0\n                    v9 = v5;\n                    if (v8 == 118) {\n                        // 0x4024a8\n                        v4 = v9;\n                        goto lab_0x4024a8_2;\n                    } else {\n                        if (v8 > 118) {\n                            if (v8 == 129) {\n                                // 0x4027d0\n                                g61 = 1;\n                            } else {\n                                if (v8 > 129) {\n                                    if (v8 != 130) {\n                                        if (v8 != 131) {\n                                            // 0x402741\n                                            function_404930(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x4026e7\n                                        if (g47 == 1) {\n                                          lab_0x4038b4:\n                                            // 0x4038b4\n                                            error(0, 0, (char *)format);\n                                            // 0x402741\n                                            function_404930(1);\n                                            // UNREACHABLE\n                                        }\n                                        if (v5 != 0 == g47 == 0) {\n                                            // 0x4038c7\n                                            error(0, 0, format2);\n                                            function_404930(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x402703\n                                        if (g56 != 0) {\n                                            // 0x4038b4\n                                            error(0, 0, (char *)format);\n                                            // 0x402741\n                                            function_404930(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x402710\n                                        g47 = 4;\n                                        if (g82 != 0) {\n                                            // 0x40272a\n                                            function_404d60();\n                                        }\n                                    } else {\n                                        // 0x4025c3\n                                        g55 = 1;\n                                    }\n                                } else {\n                                    if (v8 != 120) {\n                                        if (v8 != 128) {\n                                            // 0x402741\n                                            function_404930(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x402573\n                                        g61 = 0;\n                                    } else {\n                                        int64_t v10 = function_40a560(16); // 0x40250d\n                                        *(int64_t *)v10 = (int64_t)g82;\n                                        *(int64_t *)(v10 + 8) = g58;\n                                        g58 = v10;\n                                    }\n                                }\n                            }\n                            // 0x4024a8\n                            v4 = v5;\n                            goto lab_0x4024a8_2;\n                        } else {\n                            if (v8 == 108) {\n                                // 0x4027e0\n                                *(char *)&g66 = 1;\n                                // 0x4024a8\n                                v4 = v5;\n                                goto lab_0x4024a8_2;\n                            } else {\n                                if (v8 > 108) {\n                                    if (v8 != 109) {\n                                        if (v8 != 116) {\n                                            // 0x402741\n                                            function_404930(1);\n                                            // UNREACHABLE\n                                        }\n                                        goto lab_0x402629;\n                                    } else {\n                                        // 0x402598\n                                        *(int32_t *)&g64 = 0;\n                                        g63 = 0x100000;\n                                        // 0x4024a8\n                                        v4 = v5;\n                                        goto lab_0x4024a8_2;\n                                    }\n                                } else {\n                                    if (v8 != 107) {\n                                        // 0x402741\n                                        function_404930(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x402661\n                                    *(int32_t *)&g64 = 0;\n                                    g63 = 1024;\n                                    // 0x4024a8\n                                    v4 = v5;\n                                    goto lab_0x4024a8_2;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    if (v8 == 72) {\n                        // 0x4027f0\n                        *(int32_t *)&g64 = 144;\n                        g63 = 1;\n                        // 0x4024a8\n                        v4 = v5;\n                        goto lab_0x4024a8_2;\n                    } else {\n                        if (v8 > 72) {\n                            if (v8 == 84) {\n                                // 0x402790\n                                if (g47 == 4) {\n                                    // 0x4038b4\n                                    error(0, 0, (char *)format);\n                                    // 0x402741\n                                    function_404930(1);\n                                    // UNREACHABLE\n                                }\n                                // 0x40279d\n                                g56 = 1;\n                                v9 = v5;\n                            } else {\n                                if (v8 > 84) {\n                                    if (v8 != 97) {\n                                        if (v8 != 104) {\n                                            // 0x402741\n                                            function_404930(1);\n                                            // UNREACHABLE\n                                        }\n                                        // 0x402601\n                                        *(int32_t *)&g64 = 176;\n                                        g63 = 1;\n                                        v9 = v5;\n                                    } else {\n                                        // 0x402557\n                                        g67 = 1;\n                                        v9 = v5;\n                                    }\n                                } else {\n                                    if (v8 != 80) {\n                                        // 0x402741\n                                        function_404930(1);\n                                        // UNREACHABLE\n                                    }\n                                    // 0x4025d9\n                                    v9 = 1;\n                                    if (g47 == 4) {\n                                        // 0x4038b4\n                                        error(0, 0, (char *)format);\n                                        // 0x402741\n                                        function_404930(1);\n                                        // UNREACHABLE\n                                    }\n                                }\n                            }\n                            // 0x4024a8\n                            v4 = v9;\n                            goto lab_0x4024a8_2;\n                        } else {\n                            if (v8 == -130) {\n                                // 0x403889\n                                function_404930(0);\n                                // UNREACHABLE\n                            }\n                            if (v8 <= 0xffffff7e) {\n                                if (v8 == -131) {\n                                    // 0x402757\n                                    function_40a420((int64_t)g38, \"df\", \"GNU coreutils\", (int64_t)g25, \"Torbjorn Granlund\", \"David MacKenzie\");\n                                    exit(0);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x402741;\n                            }\n                            if (v8 != 66) {\n                                if (v8 != 70) {\n                                  lab_0x402741:\n                                    // 0x402741\n                                    function_404930(1);\n                                    // UNREACHABLE\n                                }\n                                goto lab_0x402629;\n                            } else {\n                                int64_t v11 = function_407980((int64_t)g82, &g64, &g63); // 0x4026ab\n                                if ((int32_t)v11 != 0) {\n                                    int32_t v12 = g82; // 0x4026b8\n                                    uint32_t v13 = v6; // 0x4026bf\n                                    function_40a820(v11 & 0xffffffff, (int64_t)v13, 66, &g3, (int64_t)v12);\n                                    // UNREACHABLE\n                                }\n                                // 0x4024a8\n                                v4 = v5;\n                                goto lab_0x4024a8_2;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40280a:\n    // 0x40280a\n    if (*(int32_t *)&g64 == -1) {\n        if (v5 == 0) {\n            char * env_val = getenv(\"DF_BLOCK_SIZE\"); // 0x402b31\n            function_407980((int64_t)env_val, &g64, &g63);\n        } else {\n            // 0x402940\n            *(int32_t *)&g64 = 0;\n            g63 = getenv(\"POSIXLY_CORRECT\") == NULL ? 1024 : 512;\n        }\n    }\n    // 0x402817\n    int64_t v14; // 0x4023e0\n    switch (g47) {\n        default: {\n            // 0x402827\n            if ((*(char *)&g64 & 16) == 0) {\n                if (v5 != 0) {\n                    // 0x40297b\n                    g47 = 3;\n                }\n            } else {\n                // 0x402834\n                g47 = 2;\n            }\n        }\n        case 1: {\n        }\n        case 4: {\n            int64_t v15 = g59; // 0x40284b\n            int64_t v16 = 0; // 0x40284b\n            v14 = 0;\n            if (g59 != 0) {\n                int64_t v17; // 0x4023e0\n                while (true) {\n                    int64_t v18 = v16;\n                    int64_t v19 = v15;\n                    int64_t v20 = v18; // 0x40285a\n                    if (g58 != 0) {\n                        int64_t str = *(int64_t *)v19; // 0x40285c\n                        int64_t v21 = g58;\n                        int64_t str2 = *(int64_t *)v21; // 0x402871\n                        while (strcmp((char *)str, (char *)str2) != 0) {\n                            int64_t v22 = *(int64_t *)(v21 + 8); // 0x402868\n                            v20 = v18;\n                            if (v22 == 0) {\n                                goto lab_0x4028b4;\n                            }\n                            v21 = v22;\n                            str2 = *(int64_t *)v21;\n                        }\n                        // 0x402881\n                        function_409de0(str);\n                        error(0, (int32_t)\"file system type %s both selected and excluded\" ^ (int32_t)\"file system type %s both selected and excluded\", dcgettext(NULL, \"file system type %s both selected and excluded\", 5));\n                        v20 = 1;\n                    }\n                  lab_0x4028b4:\n                    // 0x4028b4\n                    v17 = v20;\n                    int64_t v23 = *(int64_t *)(v19 + 8); // 0x4028b4\n                    v15 = v23;\n                    v16 = v17;\n                    if (v23 == 0) {\n                        // break -> 0x4028be\n                        break;\n                    }\n                }\n                // 0x4028be\n                v14 = v17;\n                if ((char)v17 != 0) {\n                    // 0x402925\n                    return 1;\n                }\n            }\n            // break -> 0x4028c3\n            break;\n        }\n    }\n    uint64_t v24 = (int64_t)g35; // 0x4028c3\n    int64_t v25 = v14; // 0x4028cb\n    if (v1 > v24) {\n        int64_t v26 = function_40a560(144 * 0x100000000 * (a1 - v24) / 0x100000000); // 0x4029a2\n        int64_t v27 = g35; // 0x4029a7\n        int64_t v28 = str7; // 0x4029ae\n        v25 = v28;\n        if (v1 > v27) {\n            int64_t v29 = v27; // 0x4029f9\n            int32_t v30 = v29; // 0x402a09\n            int64_t * path = (int64_t *)(8 * v29 + v28); // 0x402a12\n            int64_t v31 = *path; // 0x402a12\n            int32_t v32; // 0x4029cc\n            uint32_t fd; // 0x4029e9\n            if (__xstat(1, (char *)v31, (struct stat *)(144 * (int64_t)(v30 - g35) + v26)) == 0) {\n                // 0x4029bc\n                v32 = *(int32_t *)(v26 + 24 + 144 * (int64_t)(v30 - g35));\n                if ((v32 & 0xf000) != 0x1000) {\n                    // 0x4029dd\n                    fd = open((char *)*path, O_NOCTTY);\n                    if (fd >= 0) {\n                        // 0x4029f2\n                        close(fd);\n                    }\n                }\n            } else {\n                // 0x402a32\n                error(0, *__errno_location(), \"%s\", (char *)function_409c60(0, 3, *path));\n                g60 = 1;\n                *path = 0;\n            }\n            // 0x4029f9\n            v29++;\n            v25 = v28;\n            while (v29 != v1) {\n                // 0x4029f9\n                v30 = v29;\n                path = (int64_t *)(8 * v29 + v28);\n                v31 = *path;\n                if (__xstat(1, (char *)v31, (struct stat *)(144 * (int64_t)(v30 - g35) + v26)) == 0) {\n                    // 0x4029bc\n                    v32 = *(int32_t *)(v26 + 24 + 144 * (int64_t)(v30 - g35));\n                    if ((v32 & 0xf000) != 0x1000) {\n                        // 0x4029dd\n                        fd = open((char *)*path, O_NOCTTY);\n                        if (fd >= 0) {\n                            // 0x4029f2\n                            close(fd);\n                        }\n                    }\n                } else {\n                    // 0x402a32\n                    error(0, *__errno_location(), \"%s\", (char *)function_409c60(0, 3, *path));\n                    g60 = 1;\n                    *path = 0;\n                }\n                // 0x4029f9\n                v29++;\n                v25 = v28;\n            }\n        }\n    }\n    char v33 = 1; // 0x4028de\n    if (g59 == 0) {\n        // 0x402af8\n        v33 = 1;\n        if (g58 == 0) {\n            // 0x402b06\n            v33 = 1;\n            if (g56 == 0) {\n                // 0x402b13\n                v33 = g24 != 0 ? 1 : *(char *)&g66;\n            }\n        }\n    }\n    int64_t v34 = function_40c670(v33); // 0x4028e4\n    g57 = v34;\n    int64_t format3 = v25; // 0x4028f3\n    if (v34 == 0) {\n        int32_t status = 1; // 0x402a79\n        int64_t v35 = (int64_t)&g14; // 0x402a79\n        if (v1 > (int64_t)g35) {\n            // 0x402a7b\n            status = 1;\n            v35 = (int64_t)&g14;\n            if (g67 == 0) {\n                // 0x402a84\n                status = 1;\n                v35 = (int64_t)&g14;\n                if (*(char *)&g66 == 0) {\n                    // 0x402a8d\n                    status = 1;\n                    v35 = (int64_t)&g14;\n                    if (g59 == 0) {\n                        // 0x402a97\n                        status = 1;\n                        v35 = (int64_t)&g14;\n                        if (g58 == 0) {\n                            // 0x402aa1\n                            status = 0;\n                            v35 = (int64_t)dcgettext(NULL, \"Warning: \", 5);\n                        }\n                    }\n                }\n            }\n        }\n        char * v36 = dcgettext(NULL, \"cannot read table of mounted file systems\", 5); // 0x402ad0\n        error(status, *__errno_location(), \"%s%s\", (char *)v35, v36);\n        format3 = (int64_t)v36;\n    }\n    // 0x4028f9\n    if (g61 != 0) {\n        // 0x40298a\n        sync();\n    }\n    // 0x402913\n    g84 = g47;\n    int32_t v37; // 0x4023e0\n    switch (g47) {\n        case 0: {\n            // 0x402f29\n            function_403e20(0, 0);\n            if (g56 != 0) {\n                // 0x403878\n                function_403e20(1, 0);\n            }\n            // 0x402f3f\n            function_403e20(2, 0);\n            function_403e20(3, 0);\n            function_403e20(4, 0);\n            v37 = 0;\n            goto lab_0x402b8c;\n        }\n        case 1: {\n            // 0x402eb5\n            function_403e20(0, 0);\n            if (g56 != 0) {\n                // 0x403867\n                function_403e20(1, 0);\n            }\n            // 0x402ecb\n            function_403e20(6, 0);\n            function_403e20(7, 0);\n            function_403e20(8, 0);\n            function_403e20(9, 0);\n            function_403e20(10, 0);\n            goto lab_0x402ba2;\n        }\n        case 2: {\n            // 0x402e6e\n            function_403e20(0, 0);\n            if (g56 != 0) {\n                // 0x403856\n                function_403e20(1, 0);\n            }\n            // 0x402e84\n            function_403e20(2, (int32_t)\"Size\");\n            function_403e20(3, (int32_t)\"Size\" ^ (int32_t)\"Size\");\n            function_403e20(4, (int32_t)\"Avail\");\n            v37 = (int32_t)\"Avail\" ^ (int32_t)\"Avail\";\n            goto lab_0x402b8c;\n        }\n        case 3: {\n            // 0x402b4d\n            function_403e20(0, 0);\n            if (g56 != 0) {\n                // 0x403845\n                function_403e20(1, 0);\n            }\n            // 0x402b63\n            function_403e20(2, 0);\n            function_403e20(3, 0);\n            function_403e20(4, 0);\n            v37 = (int32_t)\"Capacity\";\n            goto lab_0x402b8c;\n        }\n        case 4: {\n            // 0x402f0c\n            if (g45 == 0) {\n                // 0x402f1a\n                function_404d60();\n            }\n            goto lab_0x402ba2;\n        }\n        default: {\n            // 0x403890\n            __assert_fail(\"!\\\"invalid header_mode\\\"\", \"src/df.c\", 496, \"get_field_list\");\n            // 0x4038b4\n            error(0, 0, (char *)format3);\n            // 0x402741\n            function_404930(1);\n            // UNREACHABLE\n        }\n    }\n  lab_0x4035d6:;\n    int64_t v38; // 0x4023e0\n    int64_t v39; // 0x4023e0\n    unsigned char v40; // 0x4035c5\n    if (v40 % 2 == 0) {\n        goto lab_0x4035ec;\n    } else {\n        // 0x4035da\n        v38 = v39;\n        if ((g65 || g67) == 0) {\n            goto lab_0x403570;\n        } else {\n            goto lab_0x4035ec;\n        }\n    }\n  lab_0x4035ec:;\n    // 0x4035ec\n    int64_t v41; // 0x4023e0\n    int64_t v42 = *(int64_t *)(v41 + 24); // 0x4035ec\n    v38 = v39;\n    int64_t v43; // 0x4023e0\n    int64_t v44; // 0x4023e0\n    int64_t v45; // 0x4023e0\n    int64_t v46; // 0x4023e0\n    int64_t v47; // 0x4024b8\n    int64_t v48; // 0x4023e0\n    char * v49; // 0x4035c5\n    int64_t * v50; // 0x403613\n    int64_t * v51; // 0x403665\n    int64_t str3; // 0x403665\n    int64_t str4; // 0x4036b9\n    if ((char)function_403a10(v42) == 0) {\n        goto lab_0x403570;\n    } else {\n        char v52 = function_403a60(v42); // 0x40360b\n        v38 = v39;\n        if (v52 != 0) {\n            goto lab_0x403570;\n        } else {\n            // 0x403613\n            v50 = (int64_t *)(v41 + 8);\n            int32_t v53 = __xstat(1, (char *)*v50, (struct stat *)&v6); // 0x403624\n            v38 = v47;\n            if (v53 == -1) {\n                goto lab_0x403570;\n            } else {\n                int64_t v54 = g68; // 0x403632\n                v43 = v44;\n                v46 = v47;\n                if (v54 == 0) {\n                    goto lab_0x40357c;\n                } else {\n                    int64_t v55 = v6; // bp-232, 0x40364f\n                    int64_t v56 = function_4061f0(v54, &v55); // 0x403654\n                    v43 = v44;\n                    v46 = v47;\n                    if (v56 == 0) {\n                        goto lab_0x40357c;\n                    } else {\n                        // 0x403665\n                        v51 = (int64_t *)(v56 + 8);\n                        str3 = *v51;\n                        int64_t v57 = *(int64_t *)(str3 + 16); // 0x403669\n                        int64_t v58 = v44; // 0x403670\n                        int64_t v59 = 0; // 0x403670\n                        if (v57 != 0) {\n                            int64_t v60 = *(int64_t *)(v41 + 16); // 0x403676\n                            int64_t v61 = v57; // 0x40367d\n                            v58 = v44;\n                            v59 = 0;\n                            if (v60 != 0) {\n                                int64_t v62 = -1; // 0x40368a\n                                int64_t v63 = 0; // 0x40368a\n                                while (v62 != 0) {\n                                    int64_t v64 = v61;\n                                    v62--;\n                                    v61 = v64 + v48;\n                                    v63 = v62;\n                                    if (*(char *)v64 == v52) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v63 = 0;\n                                }\n                                int64_t v65 = v60; // 0x40369a\n                                int64_t v66 = -1; // 0x40369a\n                                int64_t v67 = 0; // 0x40369a\n                                while (v66 != 0) {\n                                    int64_t v68 = v65;\n                                    v66--;\n                                    v65 = v68 + v48;\n                                    v67 = v66;\n                                    if (*(char *)v68 == v52) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v67 = 0;\n                                }\n                                v58 = v67;\n                                v59 = -2 - v63 < -2 - v67;\n                            }\n                        }\n                        // 0x4036b2\n                        v45 = v58;\n                        str7 = v59;\n                        str4 = *(int64_t *)v41;\n                        if (g55 != 0) {\n                            goto lab_0x4036df;\n                        } else {\n                            // 0x4036bf\n                            if ((*v49 & 2) == 0) {\n                                goto lab_0x4036df;\n                            } else {\n                                // 0x4036c5\n                                if ((*(char *)(str3 + 40) & 2) == 0) {\n                                    goto lab_0x4036df;\n                                } else {\n                                    // 0x4036cc\n                                    v43 = v45;\n                                    v46 = v47;\n                                    if (strcmp((char *)*(int64_t *)str3, (char *)str4) != 0) {\n                                        goto lab_0x40357c;\n                                    } else {\n                                        goto lab_0x4036df;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x403570:\n    // 0x403570\n    v6 = (int32_t)*(int64_t *)(v41 + 32);\n    v43 = v44;\n    v46 = v38;\n    goto lab_0x40357c;\n  lab_0x40357c:;\n    int64_t v69 = function_40a560(24); // 0x403581\n    *(int64_t *)(v69 + 8) = v41;\n    int64_t v70; // 0x4023e0\n    *(int64_t *)(v69 + 16) = v70;\n    *(int64_t *)v69 = (int64_t)v6;\n    int64_t v71 = function_406c00(g68, v69); // 0x4035a7\n    int64_t v72 = g68; // 0x4035af\n    if (v71 == 0) {\n        // break -> 0x4038e8\n        goto lab_0x4038e8;\n    }\n    int64_t v73 = v43; // 0x4035b9\n    int64_t v74 = v46; // 0x4035b9\n    int64_t v75 = v69; // 0x4035b9\n    int64_t v76 = *(int64_t *)(v41 + 48); // 0x4035b9\n    int64_t v77; // 0x4023e0\n    int64_t v78 = v77; // 0x4035b9\n    goto lab_0x4035bc;\n  lab_0x4035bc:;\n    int64_t v79 = v73; // 0x4035bf\n    int64_t v80 = v74; // 0x4035bf\n    int64_t v81 = v75; // 0x4035bf\n    int64_t v82 = v78; // 0x4035bf\n    int64_t v83 = v73; // 0x4035bf\n    int64_t v84 = v74; // 0x4035bf\n    int64_t v85 = v75; // 0x4035bf\n    int64_t v86 = v76; // 0x4035bf\n    int64_t v87 = v78; // 0x4035bf\n    if (v76 == 0) {\n        goto lab_0x4030fe;\n    }\n    goto lab_0x4035c5;\n  lab_0x4036df:;\n    char * str5 = (char *)str4; // 0x4036e7\n    int64_t v88; // 0x4023e0\n    int64_t v89; // 0x4023e0\n    if (strchr(str5, 47) == NULL) {\n        goto lab_0x403703;\n    } else {\n        // 0x4036f1\n        v89 = v45;\n        v88 = v77;\n        if (strchr((char *)*(int64_t *)str3, 47) == NULL) {\n            goto lab_0x403743;\n        } else {\n            goto lab_0x403703;\n        }\n    }\n  lab_0x403703:;\n    int64_t v90 = *(int64_t *)(str3 + 8); // 0x403703\n    int64_t str6 = *v50; // 0x40370d\n    int64_t v91 = v90; // 0x403714\n    int64_t v92 = -1;\n    int64_t v93 = 0; // 0x403714\n    while (v92 != 0) {\n        int64_t v94 = v91;\n        int64_t v95 = v92 - 1; // 0x403714\n        int64_t v96 = v95; // 0x403714\n        v91 = v94 + v48;\n        v93 = v95;\n        if (*(char *)v94 == 0) {\n            // break -> \n            break;\n        }\n        v92 = v96;\n        v93 = 0;\n    }\n    int64_t v97 = str6; // 0x403724\n    int64_t v98 = -1;\n    int64_t v99 = 0; // 0x403724\n    while (v98 != 0) {\n        int64_t v100 = v97;\n        int64_t v101 = v98 - 1; // 0x403724\n        int64_t v102 = v101; // 0x403724\n        v97 = v100 + v48;\n        v99 = v101;\n        if (*(char *)v100 == 0) {\n            // break -> \n            break;\n        }\n        v98 = v102;\n        v99 = 0;\n    }\n    int64_t v103 = v99;\n    if (-2 - v93 > -2 - v103) {\n        // 0x403739\n        v89 = v103;\n        v88 = v90;\n        if ((int32_t)str7 != 0) {\n            goto lab_0x4037fa;\n        } else {\n            goto lab_0x403743;\n        }\n    } else {\n        goto lab_0x4037fa;\n    }\n  lab_0x4037fa:\n    // 0x4037fa\n    str7 = v90;\n    int64_t v104 = v103; // 0x403810\n    int64_t v105 = v90; // 0x403810\n    int64_t v106 = v41; // 0x403810\n    if (strcmp((char *)*(int64_t *)str3, str5) == 0) {\n        goto lab_0x403747;\n    } else {\n        int32_t strcmp_rc = strcmp((char *)str6, (char *)str7); // 0x403821\n        v89 = v103;\n        v88 = str7;\n        v104 = v103;\n        v105 = str7;\n        v106 = v41;\n        if (strcmp_rc == 0) {\n            goto lab_0x403743;\n        } else {\n            goto lab_0x403747;\n        }\n    }\n  lab_0x403743:\n    // 0x403743\n    *v51 = v41;\n    v104 = v89;\n    v105 = v88;\n    v106 = str3;\n    goto lab_0x403747;\n  lab_0x403747:;\n    int64_t v107 = v105;\n    int64_t v108 = v104;\n    int64_t v109 = *(int64_t *)(v41 + 48); // 0x403747\n    v73 = v108;\n    v74 = v47;\n    v75 = v70;\n    v76 = v109;\n    v78 = v107;\n    if (g67 == 0) {\n        // 0x403754\n        function_40c620(v106);\n        v73 = v108;\n        v74 = v47;\n        v75 = v70;\n        v76 = v109;\n        v78 = v107;\n    }\n    goto lab_0x4035bc;\n  lab_0x402de8:;\n    // 0x402de8\n    int64_t v110; // 0x4023e0\n    int64_t v111 = v110;\n    int64_t v112; // 0x4023e0\n    int64_t v113 = v112;\n    int64_t v114; // 0x4023e0\n    int64_t v115 = v114;\n    int64_t v116; // 0x4023e0\n    int64_t v117 = *(int64_t *)(v116 + 48); // 0x402de8\n    int64_t v118 = v115; // 0x402def\n    int64_t v119 = v117; // 0x402def\n    int64_t v120 = v113; // 0x402def\n    int64_t v121 = v111; // 0x402def\n    if (v117 == 0) {\n        // break -> 0x40308f\n        goto lab_0x40308f_2;\n    }\n    goto lab_0x402df5;\n  lab_0x402e35:;\n    // 0x402e35\n    int64_t v131; // 0x4023e0\n    struct stat * v129; // 0x4023e0\n    int64_t * v134; // 0x4023e0\n    int64_t * v123; // 0x402df5\n    if (__xstat(1, (char *)*(int64_t *)(v116 + 8), v129) != 0) {\n        goto lab_0x402e61;\n    } else {\n        // 0x402e4f\n        v114 = v131;\n        v112 = 1;\n        v110 = v116;\n        if (*v134 == *v123) {\n            goto lab_0x402de8;\n        } else {\n            goto lab_0x402e61;\n        }\n    }\n  lab_0x402e61:\n    // 0x402e61\n    *v123 = -2;\n    v114 = v131;\n    v112 = 1;\n    int64_t v122; // 0x4023e0\n    v110 = v122;\n    goto lab_0x402de8;\n  lab_0x4033e0:;\n    // 0x4033e0\n    int64_t v147; // 0x4023e0\n    int64_t v148 = v147;\n    int64_t v149; // 0x4023e0\n    int64_t v150 = v149;\n    int64_t v151; // 0x4023e0\n    int64_t v152 = v151;\n    int64_t v153; // 0x4023e0\n    int64_t v154 = *(int64_t *)(v153 + 48); // 0x4033e0\n    int64_t v155 = v152; // 0x4033e7\n    int64_t v156 = v154; // 0x4033e7\n    int64_t v157 = v150; // 0x4033e7\n    int64_t v158 = v148; // 0x4033e7\n    int64_t v159; // 0x4023e0\n    int64_t v160 = v159; // 0x4033e7\n    if (v154 == 0) {\n        // break -> 0x4033e9\n        goto lab_0x4033e9;\n    }\n    goto lab_0x403370;\n  lab_0x40339c:;\n    int64_t str8 = *(int64_t *)(v153 + 8); // 0x40339c\n    int64_t v176 = str8; // 0x4033aa\n    int64_t v177 = -1;\n    int64_t v178 = 0; // 0x4033aa\n    int64_t v173; // 0x4023e0\n    while (v177 != 0) {\n        int64_t v179 = v176;\n        int64_t v180 = v177 - 1; // 0x4033aa\n        int64_t v181 = v180; // 0x4033aa\n        v176 = v179 + v173;\n        v178 = v180;\n        if (*(char *)v179 == 0) {\n            // break -> \n            break;\n        }\n        v177 = v181;\n        v178 = 0;\n    }\n    int64_t v182 = v178;\n    int64_t n = -2 - v182; // 0x4033af\n    int64_t v164; // 0x4023e0\n    v151 = v164;\n    v149 = n;\n    int64_t v162; // 0x4023e0\n    v147 = v162;\n    int64_t v161; // 0x4023e0\n    v159 = v161;\n    uint64_t v183; // 0x403356\n    int64_t v184; // 0x4023e0\n    if (n < v161 || v183 < n) {\n        goto lab_0x4033e0;\n    } else {\n        // 0x4033bd\n        v151 = v164;\n        v149 = 1;\n        v147 = v153;\n        v159 = 1;\n        if (n == 1) {\n            goto lab_0x4033e0;\n        } else {\n            if (v183 == n) {\n                goto lab_0x4034dd;\n            } else {\n                // 0x4033d0\n                v151 = v164;\n                v149 = n;\n                v147 = v162;\n                v159 = v161;\n                if (*(char *)(v184 + -1 - v182) == 47) {\n                    goto lab_0x4034dd;\n                } else {\n                    goto lab_0x4033e0;\n                }\n            }\n        }\n    }\n  lab_0x4034dd:;\n    // 0x4034dd\n    int64_t * v185; // 0x4023e0\n    *v185 = n;\n    char * str9; // 0x402dad\n    int32_t strncmp_rc = strncmp((char *)str8, str9, (int32_t)n); // 0x4034eb\n    int64_t v186 = *v185; // 0x4034f0\n    v151 = n;\n    v149 = v186;\n    v147 = strncmp_rc == 0 ? v153 : v162;\n    v159 = strncmp_rc == 0 ? v186 : v161;\n    goto lab_0x4033e0;\n  lab_0x402d74:;\n    // 0x402d74\n    int64_t v187; // 0x4023e0\n    int64_t v188 = v187;\n    int64_t v189; // 0x4023e0\n    int64_t v190 = v189;\n    char * v191; // 0x402c77\n    free((int64_t *)v191);\n    int64_t v192; // 0x4023e0\n    int64_t v193 = *(int64_t *)(v192 + 48); // 0x402d7c\n    int64_t v194 = v190; // 0x402d83\n    int64_t v195 = v193; // 0x402d83\n    int64_t v196 = v188; // 0x402d83\n    if (v193 == 0) {\n        // break -> 0x402d89\n        goto lab_0x402d89_2;\n    }\n    goto lab_0x402c70;\n  lab_0x402d36:;\n    // 0x402d36\n    int64_t v203; // 0x4023e0\n    int64_t * v210; // 0x4023e0\n    *v210 = v203;\n    int64_t v204; // 0x4023e0\n    char * str14 = (char *)v204; // 0x402d3e\n    uint64_t len = (int64_t)strlen(str14); // 0x402d3e\n    int64_t v211 = *v210; // 0x402d49\n    char * v212; // 0x402c68\n    char v213 = *v212 ^ 1;\n    int64_t * v214; // 0x402c5f\n    char v215 = *v214 > len; // 0x402d5e\n    char v216 = v213 | v215; // 0x402d5e\n    int64_t v217; // 0x4023e0\n    char v218; // 0x4023e0\n    char v219; // 0x4023e0\n    int64_t v220; // 0x4023e0\n    int64_t v197; // 0x4023e0\n    int64_t v221; // 0x4023e0\n    int64_t * v222; // 0x4023e0\n    char * v223; // 0x4023e0\n    struct stat * v224; // 0x4023e0\n    int64_t v225; // 0x40301a\n    int64_t v226; // 0x40301f\n    if (v216 != 0) {\n        // 0x402ff6\n        *v222 = v211;\n        *v223 = v215;\n        *v210 = len;\n        int32_t v227 = __xstat(1, str14, v224); // 0x403015\n        v225 = *v210;\n        v226 = *v222;\n        v218 = v216;\n        if (v227 == 0) {\n            goto lab_0x403043;\n        } else {\n            if (v213 == 0) {\n                // 0x40333a\n                v219 = *v212;\n                goto lab_0x403057;\n            } else {\n                // 0x403031\n                v218 = 0;\n                if (*v223 == 0) {\n                    // 0x40333a\n                    v219 = *v212;\n                    goto lab_0x403057;\n                } else {\n                    goto lab_0x403043;\n                }\n            }\n        }\n    } else {\n        // 0x402d67\n        *v212 = 1;\n        v220 = v211;\n        v221 = v197;\n        v217 = v216;\n        goto lab_0x402d6c;\n    }\n  lab_0x403043:;\n    int64_t * v228; // 0x4023e0\n    int64_t * v229; // 0x4023e0\n    int64_t v230; // 0x4023e0\n    int64_t * v231; // 0x402c53\n    int64_t * v198; // 0x4023e0\n    int64_t * v202; // 0x4023e0\n    if (v225 == 1) {\n        // 0x403434\n        free((int64_t *)v226);\n        free((int64_t *)v191);\n        free((int64_t *)*(int64_t *)(v2 + 104));\n        *v231 = v192;\n        v229 = v198;\n        v228 = v202;\n        v230 = v192;\n        goto lab_0x403453;\n    }\n    // 0x40304d\n    *v214 = v225;\n    *v231 = v192;\n    v219 = v218;\n    goto lab_0x403057;\n  lab_0x402d6c:\n    // 0x402d6c\n    free((int64_t *)v220);\n    v189 = v221;\n    v187 = v217;\n    goto lab_0x402d74;\n  lab_0x402cf9:;\n    // 0x402cf9\n    char * v209; // 0x402ce7\n    free((int64_t *)v209);\n    int64_t * v208; // 0x402ce4\n    int64_t v233 = function_40a790(*v208); // 0x402d04\n    int64_t str15 = v233; // 0x402d0f\n    if (v233 == 0) {\n        // 0x402feb\n        v203 = 0;\n        v204 = *v202;\n        goto lab_0x402d36;\n    } else {\n        goto lab_0x402d15;\n    }\n  lab_0x403057:\n    // 0x403057\n    *v212 = v219;\n    v220 = v226;\n    int64_t v232; // 0x4023e0\n    v221 = v232;\n    v217 = 0;\n    goto lab_0x402d6c;\n  lab_0x402d15:\n    // 0x402d15\n    *v210 = str15;\n    char * str11; // 0x4023e0\n    int32_t strcmp_rc2 = strcmp((char *)str15, str11); // 0x402d20\n    int64_t v234 = *v210; // 0x402d25\n    v220 = v234;\n    v221 = v197;\n    v217 = 1;\n    if (strcmp_rc2 != 0) {\n        goto lab_0x402d6c;\n    } else {\n        // 0x402d32\n        v203 = v234;\n        v204 = *v202;\n        goto lab_0x402d36;\n    }\n  lab_0x402629:;\n    int64_t v235 = function_40a560(16); // 0x402635\n    *(int64_t *)v235 = (int64_t)g82;\n    *(int64_t *)(v235 + 8) = g59;\n    g59 = v235;\n    // 0x4024a8\n    v4 = v5;\n    goto lab_0x4024a8_2;\n  lab_0x402b8c:\n    // 0x402b8c\n    function_403e20(5, v37);\n    function_403e20(10, 0);\n    goto lab_0x402ba2;\n  lab_0x402ba2:\n    // 0x402ba2\n    function_403ba0();\n    uint64_t v236 = (int64_t)g35; // 0x402ba7\n    int64_t v237; // 0x4023e0\n    int64_t v238; // 0x4023e0\n    int64_t v239; // 0x4023e0\n    int64_t v240; // 0x4023e0\n    bool v241; // 0x4023e0\n    if (v1 > v236) {\n        // 0x402bb5\n        g65 = 1;\n        v238 = g35;\n        v239 = ((v236 ^ 0xffffffff) + a1 & 0xffffffff) + (int64_t)&g36;\n        goto lab_0x402bd8;\n    } else {\n        int64_t v242 = g57; // 0x403524\n        int64_t v243 = 0; // 0x403524\n        int64_t v244 = g57; // 0x403524\n        if (g57 != 0) {\n            int64_t v245 = 1; // 0x40351e\n            int64_t v246 = *(int64_t *)(v242 + 48);\n            v242 = v246;\n            int64_t v247 = v245; // 0x403524\n            v243 = v245;\n            v244 = v246;\n            while (v246 != 0) {\n                // 0x40351a\n                v245 = v247 + 1 & 0xffffffff;\n                v246 = *(int64_t *)(v242 + 48);\n                v242 = v246;\n                v247 = v245;\n                v243 = v245;\n                v244 = v246;\n            }\n        }\n        int64_t v248 = 0x100000000 * v243 >> 32; // 0x403526\n        int64_t v249 = function_406460(v248, 0, 0x4039f0, 0x403a00, 0x403ac0); // 0x40353b\n        g68 = v249;\n        if (v249 == 0) {\n            // 0x4038e8\n            function_40a7b0(v248);\n            // UNREACHABLE\n        }\n        int64_t v250 = g57; // 0x403550\n        v79 = 0x403a00;\n        v80 = 0x4039f0;\n        v81 = 0;\n        if (v250 != 0) {\n            // 0x4035c5\n            v47 = &v6;\n            v48 = v241 ? -1 : 1;\n            v83 = 0x403a00;\n            v84 = 0x4039f0;\n            v85 = 0;\n            v86 = v250;\n            while (true) {\n              lab_0x4035c5:\n                // 0x4035c5\n                v77 = v87;\n                v41 = v86;\n                v70 = v85;\n                v39 = v84;\n                v44 = v83;\n                v49 = (char *)(v41 + 40);\n                v40 = *v49;\n                if ((v40 & 2) == 0) {\n                    goto lab_0x4035d6;\n                } else {\n                    // 0x4035cd\n                    v38 = v39;\n                    if (*(char *)&g66 != 0) {\n                        goto lab_0x403570;\n                    } else {\n                        goto lab_0x4035d6;\n                    }\n                }\n            }\n          lab_0x4038e8:\n            // 0x4038e8\n            function_40a7b0(v72);\n            // UNREACHABLE\n        }\n      lab_0x4030fe:\n        // 0x4030fe\n        if (g67 == 0) {\n            // 0x403103\n            g57 = 0;\n            if (v81 != 0) {\n                int64_t v251 = *(int64_t *)(v81 + 8); // 0x403110\n                int64_t v252 = *(int64_t *)(v81 + 16); // 0x403114\n                *(int64_t *)(v251 + 48) = v244;\n                int64_t v253 = v251; // 0x403128\n                int64_t v254 = v252; // 0x403128\n                while (v252 != 0) {\n                    // 0x403110\n                    v251 = *(int64_t *)(v254 + 8);\n                    v252 = *(int64_t *)(v254 + 16);\n                    *(int64_t *)(v251 + 48) = v253;\n                    v253 = v251;\n                    v254 = v252;\n                }\n                // 0x40312f\n                g57 = v251;\n            }\n            // 0x403136\n            function_4066a0(g68);\n            g68 = 0;\n        }\n        // 0x40314d\n        v240 = v80;\n        v237 = v82;\n        if (g57 != 0) {\n            int64_t v255 = g57;\n            unsigned char v256 = *(char *)(v255 + 40); // 0x403156\n            int64_t v257 = *(int64_t *)(v255 + 24); // 0x40315b\n            int64_t v258 = *(int64_t *)(v255 + 8); // 0x403161\n            *(int64_t *)(v2 - 8) = v79;\n            *(int64_t *)(v2 - 16) = 1;\n            int64_t v259 = *(int64_t *)v255; // 0x40316d\n            *(int64_t *)(v2 - 24) = 0;\n            *(int64_t *)(v2 - 32) = (int64_t)(v256 / 2 % 2);\n            function_403f10((int32_t)v259, v258, 0, 0, (int32_t)v257, (int32_t)(v256 % 2), (int64_t)&g83, (int64_t)&g83, (int64_t)&g83);\n            v255 += 48;\n            v240 = 0;\n            v237 = v82;\n            while (v255 != 0) {\n                // 0x403156\n                v256 = *(char *)(v255 + 40);\n                v257 = *(int64_t *)(v255 + 24);\n                v258 = *(int64_t *)(v255 + 8);\n                *(int64_t *)(v2 - 8) = 0;\n                *(int64_t *)(v2 - 16) = 1;\n                v259 = *(int64_t *)v255;\n                *(int64_t *)(v2 - 24) = 0;\n                *(int64_t *)(v2 - 32) = (int64_t)(v256 / 2 % 2);\n                function_403f10((int32_t)v259, v258, 0, 0, (int32_t)v257, (int32_t)(v256 % 2), (int64_t)&g83, (int64_t)&g83, (int64_t)&g83);\n                v255 += 48;\n                v240 = 0;\n                v237 = v82;\n            }\n        }\n        goto lab_0x40318e;\n    }\n  lab_0x402bd8:;\n    // 0x402bd8\n    int64_t v260; // 0x4023e0\n    int64_t v261 = v260;\n    int64_t v262 = v239;\n    int64_t v263 = v238;\n    int64_t v264 = *(int64_t *)(str7 + 8 * v263); // 0x402bdc\n    int64_t * v265 = (int64_t *)(v2 + 32);\n    *v265 = v264;\n    int64_t v266 = v262; // 0x402beb\n    int64_t v267 = v261; // 0x402beb\n    int64_t * v268; // 0x4023e0\n    int64_t v269; // 0x4023e0\n    int64_t v270; // 0x4023e0\n    int64_t v271; // 0x4023e0\n    int64_t v272; // 0x4023e0\n    int64_t v273; // 0x4023e0\n    int64_t v274; // 0x4023e0\n    int64_t v275; // 0x4023e0\n    if (v264 == 0) {\n        goto lab_0x402fb8;\n    } else {\n        int64_t v276 = *(int64_t *)(v2 + 96); // 0x402c00\n        int64_t v277 = 144 * (int64_t)((int32_t)v263 - g35) + v276; // 0x402c00\n        *(int64_t *)(v2 + 64) = v277;\n        int32_t v278 = *(int32_t *)(v277 + 24); // 0x402c0a\n        int64_t v279 = v2 + 8;\n        *(int32_t *)v279 = v278;\n        v275 = v262;\n        v272 = v261;\n        if ((v278 & 0xb000) != 0x2000) {\n            goto lab_0x402da8;\n        } else {\n            char * v280 = canonicalize_file_name((char *)v264); // 0x402c24\n            int64_t v281 = (int64_t)v280; // 0x402c24\n            *(int64_t *)(v2 + 104) = v281;\n            v269 = v279;\n            v268 = v265;\n            v273 = v262;\n            v270 = v261;\n            if (v280 == NULL) {\n                goto lab_0x4034bf;\n            } else {\n                // 0x402c37\n                *(int64_t *)v279 = *v280 != 47 ? v264 : v281;\n                v274 = v262;\n                v271 = v261;\n                goto lab_0x402c43;\n            }\n        }\n    }\n  lab_0x40318e:\n    // 0x40318e\n    if (g62 != 0) {\n        // 0x40319b\n        if (g55 != 0) {\n            char v282 = *(char *)&g23; // 0x4031a4\n            *(int64_t *)(v2 - 8) = v240;\n            *(int64_t *)(v2 - 16) = 0;\n            int64_t v283 = v282 == 0 ? (int64_t)\"total\" : (int64_t)\"-\"; // 0x4031b8\n            *(int64_t *)(v2 - 24) = (int64_t)&g48;\n            *(int64_t *)(v2 - 32) = 0;\n            function_403f10((int32_t)\"total\", v283, 0, 0, 0, 0, (int64_t)&g83, (int64_t)&g83, (int64_t)&g83);\n        }\n        // 0x4031d9\n        if (g43 == 0) {\n            // 0x402925\n            return g60;\n        }\n        int64_t v284 = v2 + 144;\n        int64_t v285 = 0;\n        int64_t v286; // 0x403207\n        int64_t v287; // 0x40323b\n        int64_t v288; // 0x403246\n        int32_t v289; // 0x403259\n        int64_t v290; // 0x40325c\n        int64_t v291; // 0x4032db\n        int64_t v292; // 0x40327b\n        int64_t v293; // 0x40329b\n        int64_t v294; // 0x4032a9\n        int64_t * v295; // 0x4032b0\n        uint64_t v296; // 0x4032b0\n        if (g45 != 0) {\n            // 0x403200\n            v286 = 8 * v285;\n            v292 = 0;\n            v293 = *(int64_t *)*(int64_t *)(g44 + v286);\n            v287 = 8 * v292;\n            v288 = *(int64_t *)(g46 + v287);\n            *(int64_t *)v284 = *(int64_t *)(v288 + 32);\n            v289 = *(int32_t *)(v288 + 40);\n            v290 = function_407f30(v293, v284, v289, 8 * (int32_t)(v292 == g45 - 1));\n            v291 = v290;\n            if (v290 == 0) {\n                // 0x4032d0\n                v291 = *(int64_t *)(*(int64_t *)(g44 + v286) + v287);\n            }\n            // 0x403273\n            fputs_unlocked((char *)v291, g38);\n            v292++;\n            free((int64_t *)v290);\n            while (v292 < g45) {\n                // 0x403290\n                v293 = *(int64_t *)(v287 + 8 + *(int64_t *)(g44 + v286));\n                if (v292 != 0) {\n                    // 0x4032a9\n                    v294 = (int64_t)g38;\n                    v295 = (int64_t *)(v294 + 40);\n                    v296 = *v295;\n                    if (v296 >= *(int64_t *)(v294 + 48)) {\n                        // 0x403324\n                        __overflow(g38, 32);\n                    } else {\n                        // 0x4032ba\n                        *v295 = v296 + 1;\n                        *(char *)v296 = 32;\n                    }\n                }\n                // 0x403220\n                v287 = 8 * v292;\n                v288 = *(int64_t *)(g46 + v287);\n                *(int64_t *)v284 = *(int64_t *)(v288 + 32);\n                v289 = *(int32_t *)(v288 + 40);\n                v290 = function_407f30(v293, v284, v289, 8 * (int32_t)(v292 == g45 - 1));\n                v291 = v290;\n                if (v290 == 0) {\n                    // 0x4032d0\n                    v291 = *(int64_t *)(*(int64_t *)(g44 + v286) + v287);\n                }\n                // 0x403273\n                fputs_unlocked((char *)v291, g38);\n                v292++;\n                free((int64_t *)v290);\n            }\n        }\n        int64_t v297 = (int64_t)g38; // 0x4032e8\n        int64_t * v298 = (int64_t *)(v297 + 40); // 0x4032ef\n        uint64_t v299 = *v298; // 0x4032ef\n        if (v299 >= *(int64_t *)(v297 + 48)) {\n            // 0x4034ce\n            __overflow(g38, 10);\n        } else {\n            // 0x4032fd\n            *v298 = v299 + 1;\n            *(char *)v299 = 10;\n        }\n        int64_t v300 = v285 + 1; // 0x403308\n        while (v300 < g43) {\n            // 0x4031f0\n            v285 = v300;\n            if (g45 != 0) {\n                // 0x403200\n                v286 = 8 * v285;\n                v292 = 0;\n                v293 = *(int64_t *)*(int64_t *)(g44 + v286);\n                v287 = 8 * v292;\n                v288 = *(int64_t *)(g46 + v287);\n                *(int64_t *)v284 = *(int64_t *)(v288 + 32);\n                v289 = *(int32_t *)(v288 + 40);\n                v290 = function_407f30(v293, v284, v289, 8 * (int32_t)(v292 == g45 - 1));\n                v291 = v290;\n                if (v290 == 0) {\n                    // 0x4032d0\n                    v291 = *(int64_t *)(*(int64_t *)(g44 + v286) + v287);\n                }\n                // 0x403273\n                fputs_unlocked((char *)v291, g38);\n                v292++;\n                free((int64_t *)v290);\n                while (v292 < g45) {\n                    // 0x403290\n                    v293 = *(int64_t *)(v287 + 8 + *(int64_t *)(g44 + v286));\n                    if (v292 != 0) {\n                        // 0x4032a9\n                        v294 = (int64_t)g38;\n                        v295 = (int64_t *)(v294 + 40);\n                        v296 = *v295;\n                        if (v296 >= *(int64_t *)(v294 + 48)) {\n                            // 0x403324\n                            __overflow(g38, 32);\n                        } else {\n                            // 0x4032ba\n                            *v295 = v296 + 1;\n                            *(char *)v296 = 32;\n                        }\n                    }\n                    // 0x403220\n                    v287 = 8 * v292;\n                    v288 = *(int64_t *)(g46 + v287);\n                    *(int64_t *)v284 = *(int64_t *)(v288 + 32);\n                    v289 = *(int32_t *)(v288 + 40);\n                    v290 = function_407f30(v293, v284, v289, 8 * (int32_t)(v292 == g45 - 1));\n                    v291 = v290;\n                    if (v290 == 0) {\n                        // 0x4032d0\n                        v291 = *(int64_t *)(*(int64_t *)(g44 + v286) + v287);\n                    }\n                    // 0x403273\n                    fputs_unlocked((char *)v291, g38);\n                    v292++;\n                    free((int64_t *)v290);\n                }\n            }\n            // 0x4032e8\n            v297 = (int64_t)g38;\n            v298 = (int64_t *)(v297 + 40);\n            v299 = *v298;\n            if (v299 >= *(int64_t *)(v297 + 48)) {\n                // 0x4034ce\n                __overflow(g38, 10);\n            } else {\n                // 0x4032fd\n                *v298 = v299 + 1;\n                *(char *)v299 = 10;\n            }\n            // 0x403308\n            v300 = v285 + 1;\n        }\n        // 0x402925\n        return g60;\n    }\n    // 0x403490\n    if (g60 != 0) {\n        // 0x402925\n        return g60;\n    }\n    char * format4 = dcgettext(NULL, \"no file systems processed\", 5); // 0x4034a9\n    error(1, (int32_t)\"no file systems processed\" ^ (int32_t)\"no file systems processed\", format4);\n    v269 = v2 + 8;\n    v268 = (int64_t *)(v2 + 32);\n    v273 = (int64_t)format4;\n    v270 = v237;\n    goto lab_0x4034bf;\n  lab_0x402fb8:;\n    int64_t v318 = v267;\n    int64_t v319 = v266;\n    int64_t * v320 = (int64_t *)(v2 + 48); // 0x402fb8\n    int64_t v321 = *v320; // 0x402fb8\n    v240 = v319;\n    v237 = v318;\n    if (*(int64_t *)(v2 + 56) == v321) {\n        goto lab_0x40318e;\n    } else {\n        // 0x402fcb\n        *v320 = v321 + 1;\n        v238 = v321;\n        v239 = v319;\n        v260 = v318;\n        goto lab_0x402bd8;\n    }\n  lab_0x4034bf:\n    // 0x4034bf\n    *(int64_t *)v269 = *v268;\n    v274 = v273;\n    v271 = v270;\n    goto lab_0x402c43;\n  lab_0x402da8:;\n    int64_t v307 = v272;\n    int64_t v305 = v275;\n    int64_t * v315 = (int64_t *)(v2 + 32); // 0x402da8\n    str9 = canonicalize_file_name((char *)*v315);\n    int64_t v311 = (int64_t)str9; // 0x402dad\n    int64_t v308; // 0x4023e0\n    int64_t * v323; // 0x4023e0\n    int64_t v312; // 0x4023e0\n    int64_t v306; // 0x4023e0\n    int64_t v325; // 0x4023e0\n    int64_t v326; // 0x4023e0\n    int64_t v310; // 0x4023e0\n    int64_t v324; // 0x4023e0\n    int64_t v304; // 0x4023e0\n    int64_t v309; // 0x4023e0\n    if (str9 == NULL) {\n        goto lab_0x402dca;\n    } else {\n        // 0x402dc1\n        if (*str9 == 47) {\n            // 0x403345\n            v173 = v241 ? -1 : 1;\n            int64_t v337 = v311; // 0x4023e0\n            int64_t v338 = -1; // 0x40334e\n            int64_t v339 = 0; // 0x40334e\n            while (v338 != 0) {\n                int64_t v340 = v337;\n                v338--;\n                v337 = v340 + v173;\n                v339 = v338;\n                if (*(char *)v340 == 0) {\n                    // break -> \n                    break;\n                }\n                v339 = 0;\n            }\n            if (g57 == 0) {\n                // 0x402f6a\n                free((int64_t *)str9);\n                v304 = v305;\n                v306 = v307;\n                goto lab_0x402f72;\n            } else {\n                // 0x403363\n                v183 = -2 - v339;\n                v184 = v311 - 1;\n                v185 = (int64_t *)(v2 + 8);\n                v155 = v305;\n                v156 = g57;\n                v157 = v307;\n                v158 = 0;\n                v160 = 0;\n                while (true) {\n                  lab_0x403370:\n                    // 0x403370\n                    v161 = v160;\n                    v162 = v158;\n                    int64_t v163 = v157;\n                    v153 = v156;\n                    v164 = v155;\n                    int64_t v165 = 5; // 0x40337e\n                    int64_t v166 = *(int64_t *)(v153 + 24);\n                    int64_t v167 = (int64_t)\"lofs\";\n                    unsigned char v168 = *(char *)v166; // 0x40337e\n                    char v169 = *(char *)v167; // 0x40337e\n                    char v170 = v169; // 0x40337e\n                    bool v171 = false; // 0x40337e\n                    while (v168 == v169) {\n                        v165--;\n                        int64_t v172 = v167 + v173; // 0x40337e\n                        int64_t v174 = v166 + v173; // 0x40337e\n                        v170 = v168;\n                        v171 = true;\n                        if (v165 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v166 = v174;\n                        v167 = v172;\n                        v168 = *(char *)v166;\n                        v169 = *(char *)v167;\n                        v170 = v169;\n                        v171 = false;\n                    }\n                    unsigned char v175 = v170;\n                    v151 = v164;\n                    v149 = v163;\n                    v147 = v162;\n                    v159 = v161;\n                    if ((v168 >= v175 && !v171) == v168 < v175) {\n                        goto lab_0x4033e0;\n                    } else {\n                        if (v162 == 0) {\n                            goto lab_0x40339c;\n                        } else {\n                            // 0x40338e\n                            if (*(char *)(v162 + 40) % 2 != 0) {\n                                goto lab_0x40339c;\n                            } else {\n                                // 0x403396\n                                v151 = v164;\n                                v149 = v163;\n                                v147 = v162;\n                                v159 = v161;\n                                if (*(char *)(v153 + 40) % 2 != 0) {\n                                    goto lab_0x4033e0;\n                                } else {\n                                    goto lab_0x40339c;\n                                }\n                            }\n                        }\n                    }\n                }\n              lab_0x4033e9:\n                // 0x4033e9\n                free((int64_t *)str9);\n                v308 = v173;\n                v309 = v152;\n                v310 = v311;\n                v312 = v150;\n                if (v148 == 0) {\n                    goto lab_0x402ddb;\n                } else {\n                    int64_t * v341 = (int64_t *)(v148 + 8);\n                    int64_t v342 = v2 + 144; // 0x4033ff\n                    int32_t v343 = __xstat(1, (char *)*v341, (struct stat *)v342); // 0x40340c\n                    v308 = v173;\n                    v309 = v342;\n                    v310 = 1;\n                    v312 = v150;\n                    if (v343 != 0) {\n                        goto lab_0x402ddb;\n                    } else {\n                        // 0x403419\n                        v308 = v173;\n                        v309 = v342;\n                        v310 = 1;\n                        v312 = v150;\n                        v323 = v341;\n                        v324 = 1;\n                        v325 = v150;\n                        v326 = v148;\n                        if (*(int64_t *)v342 != *(int64_t *)*(int64_t *)(v2 + 64)) {\n                            goto lab_0x402ddb;\n                        } else {\n                            goto lab_0x403098;\n                        }\n                    }\n                }\n            }\n        } else {\n            goto lab_0x402dca;\n        }\n    }\n  lab_0x402c43:;\n    int64_t v301 = v271;\n    int64_t v302 = v274;\n    if (g57 == 0) {\n        // 0x403836\n        free((int64_t *)*(int64_t *)(v2 + 104));\n        v275 = v302;\n        v272 = v301;\n        goto lab_0x402da8;\n    } else {\n        // 0x402c53\n        v231 = (int64_t *)(v2 + 80);\n        *v231 = 0;\n        v214 = (int64_t *)(v2 + 40);\n        *v214 = -1;\n        v212 = (char *)(v2 + 16);\n        *v212 = 0;\n        int64_t * str10 = (int64_t *)(v2 + 8);\n        v210 = (int64_t *)(v2 + 24);\n        v232 = v2 + 144;\n        v222 = (int64_t *)(v2 + 72);\n        v223 = (char *)(v2 + 95);\n        v224 = (struct stat *)v232;\n        v194 = v302;\n        v195 = g57;\n        v196 = 0;\n        while (true) {\n          lab_0x402c70:\n            // 0x402c70\n            v192 = v195;\n            v197 = v194;\n            v198 = (int64_t *)v192;\n            int64_t v199 = *v198; // 0x402c70\n            char * v200 = (char *)v199;\n            v191 = canonicalize_file_name(v200);\n            char * v201 = v200; // 0x402c82\n            if (v191 != NULL) {\n                // 0x402c84\n                v201 = (char *)(*v191 == 47 ? (int64_t)v191 : v199);\n            }\n            // 0x402c8b\n            str11 = v201;\n            v189 = v197;\n            v187 = v196;\n            if (strcmp((char *)*str10, str11) != 0) {\n                goto lab_0x402d74;\n            } else {\n                // 0x402ca0\n                v202 = (int64_t *)(v192 + 8);\n                int64_t str13 = *v202; // 0x402ca7\n                v203 = 0;\n                v204 = str13;\n                if (g57 == 0) {\n                    goto lab_0x402d36;\n                } else {\n                    int64_t v205 = g57; // 0x402cd2\n                    int64_t str12 = *(int64_t *)(v205 + 8); // 0x402cc0\n                    int64_t v206 = strcmp((char *)str12, (char *)str13) == 0 ? v205 : 0; // 0x402cce\n                    v205 += 48;\n                    int64_t v207 = v206; // 0x402cd9\n                    while (v205 != 0) {\n                        // 0x402cc0\n                        str12 = *(int64_t *)(v205 + 8);\n                        v206 = strcmp((char *)str12, (char *)str13) == 0 ? v205 : v207;\n                        v205 += 48;\n                        v207 = v206;\n                    }\n                    // 0x402cdb\n                    v203 = 0;\n                    v204 = str13;\n                    if (v206 == 0) {\n                        goto lab_0x402d36;\n                    } else {\n                        // 0x402ce4\n                        v208 = (int64_t *)v206;\n                        v209 = canonicalize_file_name((char *)*v208);\n                        if (v209 == NULL) {\n                            goto lab_0x402cf9;\n                        } else {\n                            // 0x402cf4\n                            str15 = (int64_t)v209;\n                            if (*v209 == 47) {\n                                goto lab_0x402d15;\n                            } else {\n                                goto lab_0x402cf9;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n      lab_0x402d89_2:\n        // 0x402d89\n        free((int64_t *)*(int64_t *)(v2 + 104));\n        int64_t v303 = *v231; // 0x402d93\n        if (v303 != 0) {\n            // 0x402d89\n            v229 = (int64_t *)v303;\n            v228 = (int64_t *)(v303 + 8);\n            v230 = v303;\n            goto lab_0x403453;\n        } else {\n            // 0x402d9f\n            v275 = v190;\n            v272 = v301;\n            if ((char)v188 != 0) {\n                // 0x4037ab\n                function_409b90(4, *(int64_t *)(v2 + 32));\n                char * format5 = dcgettext(NULL, \"cannot access %s: over-mounted by another device\", 5); // 0x4037c9\n                error(0, (int32_t)\"cannot access %s: over-mounted by another device\" ^ (int32_t)\"cannot access %s: over-mounted by another device\", format5);\n                g60 = 1;\n                v266 = (int64_t)format5;\n                v267 = v301;\n                goto lab_0x402fb8;\n            } else {\n                goto lab_0x402da8;\n            }\n        }\n    }\n  lab_0x402dca:\n    // 0x402dca\n    free((int64_t *)str9);\n    v304 = v305;\n    v306 = v307;\n    if (g57 == 0) {\n        goto lab_0x402f72;\n    } else {\n        // 0x402dca\n        v308 = v241 ? -1 : 1;\n        v309 = v305;\n        v310 = v311;\n        v312 = v307;\n        goto lab_0x402ddb;\n    }\n  lab_0x402f72:;\n    int64_t v313 = v306;\n    int64_t v314 = *v315; // 0x402f72\n    int64_t v316 = *(int64_t *)(v2 + 64); // 0x402f77\n    int64_t v317 = function_404ed0(v314, v316); // 0x402f7f\n    v266 = v304;\n    v267 = v313;\n    if (v317 != 0) {\n        // 0x402f8c\n        *(int64_t *)(v2 - 8) = v316;\n        *(int64_t *)(v2 - 16) = 0;\n        *(int64_t *)(v2 - 24) = 0;\n        *(int64_t *)(v2 - 32) = 0;\n        function_403f10(0, v317, v314, 0, 0, 0, (int64_t)&g83, (int64_t)&g83, (int64_t)&g83);\n        free((int64_t *)v317);\n        v266 = v314;\n        v267 = v313;\n    }\n    goto lab_0x402fb8;\n  lab_0x402ddb:;\n    int64_t v322 = v312;\n    int64_t v142 = v308;\n    v131 = v2 + 144;\n    v129 = (struct stat *)v131;\n    v134 = (int64_t *)v131;\n    v118 = v309;\n    v119 = g57;\n    v120 = v310;\n    v121 = 0;\n    while (true) {\n      lab_0x402df5:\n        // 0x402df5\n        v122 = v121;\n        v116 = v119;\n        v123 = (int64_t *)(v116 + 32);\n        int64_t v124 = *v123; // 0x402df5\n        int64_t v125 = v124; // 0x402dfd\n        int64_t v126 = v118; // 0x402dfd\n        int64_t v127 = v120; // 0x402dfd\n        if (v124 == -1) {\n            int64_t * v128 = (int64_t *)(v116 + 8); // 0x403064\n            if (__xstat(1, (char *)*v128, v129) != 0) {\n                int32_t * err_num = __errno_location(); // 0x4030d4\n                int64_t v130 = v131; // 0x4030df\n                int64_t v132 = 1; // 0x4030df\n                if (*err_num == 5) {\n                    // 0x403777\n                    error(0, *err_num, \"%s\", (char *)function_409c60(0, 3, *v128));\n                    g60 = 1;\n                    v130 = (int64_t)\"%s\";\n                    v132 = 0;\n                }\n                // 0x4030e5\n                *v123 = -2;\n                v125 = -2;\n                v126 = v130;\n                v127 = v132;\n            } else {\n                int64_t v133 = *v134; // 0x40307e\n                *v123 = v133;\n                v125 = v133;\n                v126 = v131;\n                v127 = 1;\n            }\n        }\n        int64_t v135 = v126;\n        v114 = v135;\n        v112 = v127;\n        v110 = v122;\n        if (*(int64_t *)*(int64_t *)(v2 + 64) != v125) {\n            goto lab_0x402de8;\n        } else {\n            int64_t v136 = (int64_t)\"lofs\"; // 0x4023e0\n            int64_t v137 = 5; // 0x402e17\n            int64_t v138 = *(int64_t *)(v116 + 24);\n            unsigned char v139 = *(char *)v138; // 0x402e17\n            char v140 = *(char *)v136; // 0x402e17\n            int64_t v141 = v136 + v142; // 0x402e17\n            char v143 = v140; // 0x402e17\n            bool v144 = false; // 0x402e17\n            while (v139 == v140) {\n                v137--;\n                v136 = v141;\n                int64_t v145 = v138 + v142; // 0x402e17\n                v143 = v139;\n                v144 = true;\n                if (v137 == 0) {\n                    // break -> \n                    break;\n                }\n                v138 = v145;\n                v139 = *(char *)v138;\n                v140 = *(char *)v136;\n                v141 = v136 + v142;\n                v143 = v140;\n                v144 = false;\n            }\n            unsigned char v146 = v143;\n            v114 = v135;\n            v112 = v141;\n            v110 = v122;\n            if ((v139 >= v146 && !v144) == v139 < v146) {\n                goto lab_0x402de8;\n            } else {\n                if (v122 == 0) {\n                    goto lab_0x402e35;\n                } else {\n                    // 0x402e27\n                    if (*(char *)(v122 + 40) % 2 != 0) {\n                        goto lab_0x402e35;\n                    } else {\n                        // 0x402e2f\n                        v114 = v135;\n                        v112 = v141;\n                        v110 = v122;\n                        if (*(char *)(v116 + 40) % 2 != 0) {\n                            goto lab_0x402de8;\n                        } else {\n                            goto lab_0x402e35;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40308f_2:\n    // 0x40308f\n    v304 = v115;\n    v306 = v322;\n    if (v111 == 0) {\n        goto lab_0x402f72;\n    } else {\n        // 0x40308f\n        v323 = (int64_t *)(v111 + 8);\n        v324 = v113;\n        v325 = v322;\n        v326 = v111;\n        goto lab_0x403098;\n    }\n  lab_0x403453:;\n    unsigned char v327 = *(char *)(v230 + 40); // 0x40345a\n    int64_t v328 = *(int64_t *)(v230 + 24); // 0x40345f\n    int64_t v329 = *v228; // 0x403463\n    *(int64_t *)(v2 - 8) = v301;\n    *(int64_t *)(v2 - 16) = 0;\n    int64_t v330 = *v229; // 0x40346e\n    *(int64_t *)(v2 - 24) = 0;\n    *(int64_t *)(v2 - 32) = (int64_t)(v327 / 2 % 2);\n    int64_t v331 = *(int64_t *)(v2 + 32); // 0x40347d\n    function_403f10((int32_t)v330, v329, v331, 0, (int32_t)v328, (int32_t)(v327 % 2), (int64_t)&g83, (int64_t)&g83, (int64_t)&g83);\n    v266 = v331;\n    v267 = v301;\n    goto lab_0x402fb8;\n  lab_0x403098:;\n    unsigned char v332 = *(char *)(v326 + 40); // 0x403098\n    int64_t v333 = *(int64_t *)(v326 + 24); // 0x40309e\n    int64_t v334 = *v323; // 0x4030a3\n    *(int64_t *)(v2 - 8) = v324;\n    *(int64_t *)(v2 - 16) = 0;\n    int64_t v335 = *(int64_t *)v326; // 0x4030ae\n    *(int64_t *)(v2 - 24) = 0;\n    *(int64_t *)(v2 - 32) = (int64_t)(v332 / 2 % 2);\n    int64_t v336 = *v315; // 0x4030be\n    function_403f10((int32_t)v335, v334, v336, (int32_t)v336, (int32_t)v333, (int32_t)(v332 % 2), (int64_t)&g83, (int64_t)&g83, (int64_t)&g83);\n    v266 = v336;\n    v267 = v325;\n    goto lab_0x402fb8;\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "403910",
            "funcEndAddr": "40393b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403910\n    int64_t v1; // 0x403910\n    __libc_start_main(0x4023e0, (int32_t)a4, (char **)&v1, (void (*)())0x410f00, (void (*)())0x410f60, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40393b",
            "funcStartAddr": "40393b",
            "funcEndAddr": "40395a",
            "decompiledFuncCode": "int64_t function_40393b(void) {\n    // 0x40393b\n    return 0x6175f0;\n}\n"
        },
        {
            "funcName": "function_40395a",
            "funcStartAddr": "40395a",
            "funcEndAddr": "403991",
            "decompiledFuncCode": "int64_t function_40395a(void) {\n    // 0x40395a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_403991",
            "funcStartAddr": "403991",
            "funcEndAddr": "4039e8",
            "decompiledFuncCode": "int64_t function_403991(void) {\n    // 0x403991\n    if (g41 != 0) {\n        // 0x4039e7\n        int64_t result; // 0x403991\n        return result;\n    }\n    int64_t v1 = g42; // 0x4039c4\n    int64_t result2; // 0x4039d6\n    if (g42 >= ((int64_t)&g18 - (int64_t)&g17 >> 3) - 1) {\n        // 0x4039d6\n        result2 = function_40393b();\n        g41 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g18 - (int64_t)&g17 >> 3) - 1) {\n        // 0x4039c6\n        v1++;\n    }\n    // 0x4039ba\n    g42 = v1;\n    // 0x4039d6\n    result2 = function_40393b();\n    g41 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4039e8",
            "funcStartAddr": "4039e8",
            "funcEndAddr": "4039ed",
            "decompiledFuncCode": "int64_t function_4039e8(void) {\n    // 0x4039e8\n    return function_40395a();\n}\n"
        },
        {
            "funcName": "function_4039f0",
            "funcStartAddr": "4039f0",
            "funcEndAddr": "4039fc",
            "decompiledFuncCode": "int64_t function_4039f0(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x4039f0\n    return a1 % a2;\n}\n"
        },
        {
            "funcName": "function_403a00",
            "funcStartAddr": "403a00",
            "funcEndAddr": "403a0a",
            "decompiledFuncCode": "int64_t function_403a00(int64_t a1, int64_t a2) {\n    // 0x403a00\n    return a2 & -256 | (int64_t)(bool)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_403a10",
            "funcStartAddr": "403a10",
            "funcEndAddr": "403a5e",
            "decompiledFuncCode": "int64_t function_403a10(int64_t str) {\n    bool v1 = str == 0 | g59 == 0;\n    int64_t v2; // 0x403a10\n    int64_t result = v2 & 0xffffff00 | (int64_t)v1; // 0x403a28\n    if (v1) {\n        // 0x403a48\n        return result;\n    }\n    int64_t str2 = g59; // 0x403a3f\n    int64_t result2 = 1; // 0x403a3d\n    while (strcmp((char *)str, (char *)*(int64_t *)str2) != 0) {\n        // 0x403a3f\n        str2 += 8;\n        result2 = result;\n        if (str2 == 0) {\n            // break -> 0x403a48\n            break;\n        }\n        result2 = 1;\n    }\n    // 0x403a48\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403a60",
            "funcStartAddr": "403a60",
            "funcEndAddr": "403abe",
            "decompiledFuncCode": "int64_t function_403a60(int64_t str) {\n    bool v1 = str == 0 | g58 == 0;\n    if (v1) {\n        // 0x403a98\n        return 0;\n    }\n    int64_t str2 = g58; // 0x403a8f\n    int64_t result = 1; // 0x403a8d\n    while (strcmp((char *)str, (char *)*(int64_t *)str2) != 0) {\n        // 0x403a8f\n        str2 += 8;\n        int64_t v2; // 0x403a60\n        result = v2 & 0xffffff00 | (int64_t)v1;\n        if (str2 == 0) {\n            // break -> 0x403a98\n            break;\n        }\n        result = 1;\n    }\n    // 0x403a98\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ac0",
            "funcStartAddr": "403ac0",
            "funcEndAddr": "403ac5",
            "decompiledFuncCode": "int64_t function_403ac0(void) {\n    // 0x403ac0\n    int64_t v1; // 0x403ac0\n    free((int64_t *)v1);\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_403ad0",
            "funcStartAddr": "403ad0",
            "funcEndAddr": "403b48",
            "decompiledFuncCode": "int64_t function_403ad0(void) {\n    int64_t v1 = g44; // 0x403ad7\n    int64_t v2 = g43 + 1; // 0x403adf\n    g43 = v2;\n    int64_t v3 = 8 * v2; // 0x403af4\n    if (v3 < 0 || v2 >= 0x2000000000000000) {\n        // 0x403b43\n        function_40a7b0(v1);\n        // UNREACHABLE\n    }\n    int64_t v4 = function_40a5c0(v1, v3); // 0x403b02\n    g44 = v4;\n    int64_t v5 = 8 * g45; // 0x403b2b\n    if (v5 < 0 || g45 >= 0x2000000000000000) {\n        // 0x403b43\n        function_40a7b0(v5);\n        // UNREACHABLE\n    }\n    int64_t result = function_40a560(v5); // 0x403b39\n    *(int64_t *)(v4 - 8 + 8 * g43) = result;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403b50",
            "funcStartAddr": "403b50",
            "funcEndAddr": "403b91",
            "decompiledFuncCode": "int64_t function_403b50(int64_t result) {\n    // 0x403b50\n    int64_t v1; // 0x403b50\n    char v2 = v1;\n    if (v2 == 0) {\n        // 0x403b87\n        return result;\n    }\n    int16_t ** v3 = __ctype_b_loc(); // 0x403b60\n    if ((*(char *)(2 * (int64_t)v2 + (int64_t)*v3) & 2) != 0) {\n        // 0x403b79\n        *(char *)result = 63;\n    }\n    int64_t v4 = result + 1; // 0x403b7c\n    char v5 = *(char *)v4; // 0x403b80\n    while (v5 != 0) {\n        int64_t v6 = v4;\n        if ((*(char *)(2 * (int64_t)v5 + (int64_t)*v3) & 2) != 0) {\n            // 0x403b79\n            *(char *)v6 = 63;\n        }\n        // 0x403b7c\n        v4 = v6 + 1;\n        v5 = *(char *)v4;\n    }\n    // 0x403b87\n    return result;\n}\n"
        },
        {
            "funcName": "function_403ba0",
            "funcStartAddr": "403ba0",
            "funcEndAddr": "403e20",
            "decompiledFuncCode": "int64_t function_403ba0(void) {\n    int64_t result = function_403ad0(); // 0x403baf\n    if (g45 == 0) {\n        // 0x403df0\n        return result;\n    }\n    int64_t v1 = 0; // 0x403bd5\n    int64_t v2; // 0x403ba0\n    char * v3; // 0x403ba0\n    int64_t v4; // 0x403ba0\n    int64_t v5; // 0x403ba0\n    int64_t v6; // 0x403ba0\n    int64_t v7; // bp-696, 0x403ba0\n    int32_t v8; // bp-704, 0x403ba0\n    int64_t v9; // 0x403c9e\n    int64_t v10; // 0x403c5f\n    char * str; // 0x403c83\n    while (true) {\n      lab_0x403c5f:\n        // 0x403c5f\n        v5 = v4;\n        v10 = 8 * v1;\n        v8 = 0;\n        int64_t * v11 = (int64_t *)(v10 + g46); // 0x403c7b\n        str = dcgettext(NULL, (char *)*(int64_t *)(*v11 + 24), 5);\n        if (*(int32_t *)*v11 != 2) {\n            goto lab_0x403be0;\n        } else {\n            uint32_t v12 = *(int32_t *)&g64; // 0x403c9e\n            v9 = v12;\n            switch (g47) {\n                case 0: {\n                    goto lab_0x403d48;\n                }\n                case 4: {\n                    if ((v12 & 16) != 0) {\n                        goto lab_0x403be0;\n                    } else {\n                        goto lab_0x403d48;\n                    }\n                }\n                default: {\n                    if (g47 != 3) {\n                        goto lab_0x403be0;\n                    } else {\n                        int64_t v13 = function_407b40(g63, &v7); // 0x403cc7\n                        v6 = v5;\n                        v2 = v13;\n                        v3 = str;\n                        goto lab_0x403ccf;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x403e13:\n    // 0x403e13\n    function_40a7b0(0);\n    // UNREACHABLE\n  lab_0x403be0:;\n    int64_t v14 = (int64_t)strdup(str); // 0x403be3\n    v8 = v14;\n    int64_t v15 = v5; // 0x403bed\n    int64_t v16 = v14; // 0x403bed\n    goto lab_0x403bf0;\n  lab_0x403bf0:\n    // 0x403bf0\n    if (v16 == 0) {\n        // break -> 0x403e13\n        goto lab_0x403e13;\n    }\n    // 0x403bf9\n    function_403b50(v16);\n    int64_t v17 = v8; // 0x403c0e\n    *(int64_t *)(*(int64_t *)(g44 - 8 + 8 * g43) + v10) = v17;\n    int64_t v18 = *(int64_t *)(g46 + v10); // 0x403c23\n    int64_t * v19; // 0x403ba0\n    int64_t v20; // 0x403ba0\n    if (*(int64_t *)(v18 + 32) > 0x100000000 * function_408190(v17, 0) >> 32) {\n        int64_t * v21 = (int64_t *)(*(int64_t *)(g46 + v10) + 32);\n        v19 = v21;\n        v20 = *v21;\n    } else {\n        int64_t v22 = function_408190((int64_t)v8, 0); // 0x403d17\n        v19 = (int64_t *)(*(int64_t *)(g46 + v10) + 32);\n        v20 = 0x100000000 * v22 >> 32;\n    }\n    // 0x403c4a\n    v1++;\n    *v19 = v20;\n    v4 = v15;\n    int64_t result2 = v20; // 0x403c59\n    if (g45 <= v1) {\n        // 0x403df0\n        return result2;\n    }\n    goto lab_0x403c5f;\n  lab_0x403d48:;\n    int64_t v23 = g63; // 0x403d5f\n    uint64_t v24 = v23 % 1024; // 0x403d74\n    v23 /= 1024;\n    while ((g63 || v24) == 0) {\n        // 0x403d60\n        v24 = v23 % 1024;\n        v23 /= 1024;\n    }\n    int64_t v25; // 0x403ba0\n    int64_t v26; // 0x403ba0\n    if ((g63 == 0) >= (v24 == 0)) {\n        if ((g63 == 0) > (v24 == 0)) {\n            // 0x403e0e\n            v25 = v9 & 260 | 152 | 256;\n            goto lab_0x403db7;\n        } else {\n            // 0x403e18\n            v26 = v9 & 292 | 152;\n            goto lab_0x403db2;\n        }\n    } else {\n        // 0x403dac\n        v26 = v9 & 260 | 184;\n        goto lab_0x403db2;\n    }\n  lab_0x403ccf:;\n    char * v27 = dcgettext(NULL, \"%s-%s\", 5); // 0x403cdb\n    int64_t v28 = function_40acf0((int64_t *)&v8, (int64_t)v27, v2, (int64_t)v3, v6, v9); // 0x403cf0\n    int32_t v29; // 0x403ba0\n    if ((int32_t)v28 != -1) {\n        // 0x403ccf\n        v29 = v8;\n    } else {\n        // 0x403cfa\n        v8 = 0;\n        v29 = 0;\n    }\n    // 0x403d03\n    v15 = v6;\n    v16 = v29;\n    goto lab_0x403bf0;\n  lab_0x403db2:\n    // 0x403db2\n    v25 = v26;\n    int64_t v30 = v26; // 0x403db5\n    if ((v26 & 32) == 0) {\n        // 0x403e0e\n        v25 = v30 | 256;\n        goto lab_0x403db7;\n    } else {\n        goto lab_0x403db7;\n    }\n  lab_0x403db7:;\n    int64_t v31 = function_406fb0(g63, &v7, v25, 1, 1, v9); // 0x403dc7\n    v6 = 1;\n    v2 = v31;\n    v3 = dcgettext(NULL, \"blocks\", 5);\n    goto lab_0x403ccf;\n}\n"
        },
        {
            "funcName": "function_403e20",
            "funcStartAddr": "403e20",
            "funcEndAddr": "403f0f",
            "decompiledFuncCode": "int64_t function_403e20(uint32_t a1, int32_t a2) {\n    int64_t v1 = g46; // 0x403e32\n    int64_t v2 = g45 + 1; // 0x403e39\n    g45 = v2;\n    int64_t v3 = 8 * v2; // 0x403e4e\n    if (v3 < 0) {\n        // 0x403eae\n        function_40a7b0(v1);\n        // UNREACHABLE\n    }\n    if (v2 >= 0x2000000000000000) {\n        // 0x403eae\n        function_40a7b0(v1);\n        // UNREACHABLE\n    }\n    int64_t v4 = function_40a5c0(v1, v3); // 0x403e5c\n    int64_t v5 = a1; // 0x403e61\n    g46 = v4;\n    int64_t v6 = 16 * ((0x100000000 * (int64_t)a1 >> 31) + v5); // 0x403e76\n    *(int64_t *)(v4 - 8 + 8 * g45) = v6 + (int64_t)&g21;\n    if (a2 != 0) {\n        // 0x403e8b\n        *(int64_t *)(v6 + (int64_t)&g21 + 24) = (int64_t)a2;\n    }\n    int64_t v7 = 48 * v5; // 0x403e93\n    char * v8 = (char *)(v7 + (int64_t)&g21 + 44); // 0x403e9d\n    if (*v8 == 0) {\n        // 0x403ea3\n        *v8 = 1;\n        return v7 + (int64_t)&g21;\n    }\n    // 0x403eb3\n    __assert_fail(\"!\\\"field used\\\"\", \"src/df.c\", 356, \"alloc_field\");\n    int64_t v9 = (int64_t)*(int32_t *)&g64; // 0x403eda\n    int64_t v10; // 0x403e20\n    if (((char)\"!\\\"field used\\\"\" & (char)\"!\\\"field used\\\"\") == 0) {\n        // 0x403ee8\n        return function_406fb0((int64_t)\"src/df.c\", (int64_t *)((int64_t)(char)\"!\\\"field used\\\"\" + 356), v9, (int64_t)\"alloc_field\", v10, (int64_t)(char)\"!\\\"field used\\\"\");\n    }\n    int64_t result = function_406fb0(-(int64_t)\"src/df.c\", (int64_t *)((int64_t)(char)\"!\\\"field used\\\"\" + 356), v9, (int64_t)\"alloc_field\", v10, (int64_t)(char)\"!\\\"field used\\\"\") - 1; // 0x403f02\n    *(char *)result = 45;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403f10",
            "funcStartAddr": "403f10",
            "funcEndAddr": "40492c",
            "decompiledFuncCode": "int64_t function_403f10(int32_t a1, int64_t a2, int64_t a3, int32_t a4, int32_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    int64_t result = a9 & 0xffffffff; // 0x403f30\n    if ((char)a7 != 0) {\n        // 0x403f46\n        if (*(char *)&g66 != 0) {\n            // 0x404260\n            return result;\n        }\n    }\n    if ((char)a6 != 0) {\n        // 0x403f58\n        if ((g65 || g67) == 0) {\n            // 0x404260\n            return result;\n        }\n    }\n    int64_t v1 = a5;\n    int64_t result2 = function_403a10(v1); // 0x403f73\n    if ((char)result2 == 0) {\n        // 0x404260\n        return result2;\n    }\n    int64_t result3 = function_403a60(v1); // 0x403f83\n    if ((char)result3 != 0) {\n        // 0x404260\n        return result3;\n    }\n    int64_t v2 = a4;\n    int64_t str2 = a1;\n    int64_t v3 = 0x100000000 * a9 >> 32; // 0x403f3e\n    int64_t v4; // 0x403f10\n    int64_t v5; // 0x403f10\n    int64_t v6; // 0x403f10\n    char v7; // 0x403f10\n    int64_t v8; // 0x403f10\n    int64_t v9; // 0x403f10\n    int64_t v10; // 0x403f10\n    int64_t v11; // bp-904, 0x403f10\n    int128_t v12; // 0x403f10\n    if (a2 == 0 || a8 != 0) {\n        // 0x4041f0\n        v4 = a4 == 0 ? a2 == 0 ? str2 : a2 : v2;\n        if (a8 == 0) {\n            goto lab_0x403fc5;\n        } else {\n            int128_t v13 = __asm_movdqa(*(int128_t *)a8); // 0x404210\n            int128_t v14 = __asm_movdqa(*(int128_t *)(a8 + 16)); // 0x404214\n            v11 = __asm_movaps(v13);\n            int128_t v15 = __asm_movdqa(*(int128_t *)(a8 + 32)); // 0x40421e\n            int64_t result4 = *(int64_t *)(a8 + 48); // 0x404223\n            int64_t v16 = v12; // 0x404227\n            int64_t v17 = __asm_movaps(v14); // 0x40422d\n            __asm_movaps(v15);\n            char v18 = __asm_movaps(v15); // 0x404236\n            int64_t v19 = v12;\n            v10 = v16;\n            v6 = result4;\n            v8 = v19;\n            v9 = v17;\n            v7 = v18;\n            v5 = v1;\n            if (v16 == 0) {\n                // 0x404246\n                v10 = v16;\n                v6 = result4;\n                v8 = v19;\n                v9 = v17;\n                v7 = v18;\n                v5 = v1;\n                if (g67 == 0) {\n                    // 0x404253\n                    v10 = v16;\n                    v6 = result4;\n                    v8 = v19;\n                    v9 = v17;\n                    v7 = v18;\n                    v5 = v1;\n                    if (g65 == 0) {\n                        // 0x404260\n                        return result4;\n                    }\n                }\n            }\n            goto lab_0x40401c;\n        }\n    } else {\n        // 0x403fb4\n        int64_t v20; // 0x403f10\n        if ((char)v20 != 47) {\n            // 0x404260\n            return 1;\n        }\n        // 0x403fbe\n        v4 = a4 == 0 ? a2 : v2;\n        goto lab_0x403fc5;\n    }\n  lab_0x4041e6:;\n    // 0x4041e6\n    int64_t v21; // 0x403f10\n    int64_t v22 = v21;\n    int64_t v23; // 0x4041b8\n    uint32_t v24 = *(int32_t *)v23; // 0x4041e6\n    int64_t v25 = v24; // 0x4041e6\n    g85 = v25;\n    int64_t v26 = a2; // 0x4041e8\n    int64_t v27; // 0x403f10\n    int64_t v28 = v27; // 0x4041e8\n    int64_t v29; // 0x403f10\n    int64_t v30; // 0x403f10\n    int64_t v31; // 0x403f10\n    int64_t v32; // bp-912, 0x403f10\n    int64_t v33; // 0x403f10\n    switch (v24) {\n        case 0: {\n            int64_t v34 = function_40a790(v33); // 0x4043e4\n            v32 = v34;\n            v31 = v34;\n            v30 = v27;\n            goto lab_0x404288;\n        }\n        case 1: {\n            int64_t v35 = function_40a790(v29 == 0 ? (int64_t)\"-\" : v29); // 0x4043cb\n            v32 = v35;\n            v31 = v35;\n            v30 = v27;\n            goto lab_0x404288;\n        }\n        case 2: {\n            goto lab_0x404390;\n        }\n        case 3: {\n            goto lab_0x404380;\n        }\n        case 4: {\n            goto lab_0x404340;\n        }\n        case 5: {\n            goto lab_0x404310;\n        }\n        case 6: {\n            goto lab_0x404390;\n        }\n        case 7: {\n            goto lab_0x404380;\n        }\n        case 8: {\n            goto lab_0x404340;\n        }\n        case 9: {\n            goto lab_0x404310;\n        }\n        case 10: {\n            goto lab_0x40427b;\n        }\n        case 11: {\n            // 0x404400\n            v26 = a3 == 0 ? (int64_t)\"-\" : a3;\n            v28 = v27;\n            goto lab_0x40427b;\n        }\n        default: {\n            goto lab_0x4048d4;\n        }\n    }\n  lab_0x404390:\n    // 0x404390\n    v26 = (int64_t)\"-\";\n    v28 = v27;\n    if (*(int64_t *)(v22 + 16) < 0xfffffffffffffffe) {\n        // 0x4043a3\n        v26 = v25;\n        v28 = *(int64_t *)(v22 + 8);\n    }\n    goto lab_0x40427b;\n  lab_0x404380:;\n    int64_t v187 = v22 + 56; // 0x40438c\n    if (*(int64_t *)(v22 + 48) < 0xfffffffffffffffe) {\n        goto lab_0x40435b;\n    } else {\n        goto lab_0x40434e;\n    }\n  lab_0x404340:\n    // 0x404340\n    v187 = v22 + 32;\n    if (*(int64_t *)(v22 + 24) < 0xfffffffffffffffe) {\n        goto lab_0x40435b;\n    } else {\n        goto lab_0x40434e;\n    }\n  lab_0x404310:;\n    // 0x404310\n    int64_t v99; // 0x403f10\n    int64_t v102; // 0x403f10\n    int64_t v86; // 0x403f10\n    int64_t v63; // 0x403f10\n    int64_t v103; // 0x403f10\n    int64_t v85; // 0x403f10\n    int64_t v64; // 0x403f10\n    int128_t v128; // 0x403f10\n    uint64_t v101; // 0x404310\n    uint64_t v111; // 0x404450\n    char v110; // 0x404462\n    int128_t v38; // 0x403f10\n    int128_t v100; // 0x403f10\n    int128_t v89; // 0x403f10\n    int128_t v40; // 0x403f10\n    int128_t v88; // 0x403f10\n    int128_t v42; // 0x403f10\n    int128_t v87; // 0x403f10\n    if (*(int64_t *)(v22 + 48) < 0xfffffffffffffffe) {\n        // 0x404450\n        if (*(int64_t *)(v22 + 24) < 0xfffffffffffffffe) {\n            char v189 = *(char *)(v22 + 56); // 0x40445e\n            v110 = *(char *)(v22 + 32);\n            if (v189 != 0) {\n                int64_t v190 = -v101; // 0x404580\n                int64_t v191; // 0x403f10\n                int128_t v192; // 0x403f10\n                if (v190 < 0) {\n                    int64_t v193 = v190 % 2; // 0x4045bf\n                    __asm_pxor(v38, v38);\n                    int128_t v194 = __asm_cvtsi2sd(v190 / 2 | v193); // 0x4045cc\n                    v191 = v193;\n                    v192 = __asm_addsd(v194, v194);\n                } else {\n                    // 0x404588\n                    __asm_pxor(v38, v38);\n                    int128_t v195 = __asm_cvtsi2sd(v190); // 0x40458c\n                    v191 = v190;\n                    v192 = v195;\n                }\n                int128_t v196 = v192;\n                int64_t v197 = v191;\n                v100 = __asm_xorpd(v196, v128);\n                v102 = v22;\n                v103 = v197;\n                goto lab_0x4044a1;\n            } else {\n                if (v101 < 0x28f5c28f5c28f5d) {\n                    int64_t v198 = v111 + v101; // 0x404480\n                    v99 = v198;\n                    if (v198 != 0) {\n                        // 0x404613\n                        v99 = v198;\n                        if (v110 != (char)(v198 < v101)) {\n                            goto lab_0x404498;\n                        } else {\n                            uint64_t v199 = 100 * v101; // 0x404626\n                            uint64_t v200 = (int64_t)(v199 % v198 != 0); // 0x404633\n                            int64_t v201 = v199 / v198 + v200; // 0x404636\n                            v63 = v198;\n                            v64 = v201;\n                            if (v201 < 0) {\n                                goto lab_0x4048b2;\n                            } else {\n                                // 0x404519\n                                __asm_pxor(v38, v38);\n                                int128_t v202 = __asm_pxor(v42, v42); // 0x404643\n                                int128_t v203 = __asm_cvtsi2sd(v201); // 0x404647\n                                __asm_comisd(v203, v202);\n                                v85 = v201;\n                                v86 = v198;\n                                v87 = v202;\n                                v88 = v40;\n                                v89 = v203;\n                                if (v201 < v200) {\n                                    goto lab_0x40431e;\n                                } else {\n                                    goto lab_0x404523;\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x404498;\n                    }\n                } else {\n                    // 0x40448f\n                    v99 = v22;\n                    if (v101 < 0) {\n                        int64_t v204 = v101 % 2; // 0x4045da\n                        __asm_pxor(v38, v38);\n                        int128_t v205 = __asm_cvtsi2sd(v101 / 2 | v204); // 0x4045e7\n                        v100 = __asm_addsd(v205, v205);\n                        v102 = v22;\n                        v103 = v204;\n                        goto lab_0x4044a1;\n                    } else {\n                        goto lab_0x404498;\n                    }\n                }\n            }\n        } else {\n            goto lab_0x40431e;\n        }\n    } else {\n        goto lab_0x40431e;\n    }\n  lab_0x40427b:;\n    int64_t v36 = function_40a790(v26); // 0x40427b\n    v32 = v36;\n    v31 = v36;\n    v30 = v28;\n    goto lab_0x404288;\n  lab_0x404288:;\n    int128_t v37 = v38; // 0x40428b\n    int128_t v39 = v40; // 0x40428b\n    int128_t v41 = v42; // 0x40428b\n    int64_t v43 = v31; // 0x40428b\n    int64_t v44 = v30; // 0x40428b\n    int64_t v45 = v30; // 0x40428b\n    if (v31 == 0) {\n        goto lab_0x4048ed;\n    }\n    goto lab_0x404291;\n  lab_0x40435b:\n    // 0x40435b\n    v26 = v25;\n    v28 = *(int64_t *)(v22 + 8);\n    goto lab_0x40427b;\n  lab_0x40434e:\n    // 0x40434e\n    v26 = (int64_t)\"-\";\n    v28 = v27;\n    if (*(char *)v187 == 0) {\n        goto lab_0x40427b;\n    } else {\n        goto lab_0x40435b;\n    }\n  lab_0x40431e:;\n    int64_t v188 = (int64_t)strdup(\"-\"); // 0x404323\n    v32 = v188;\n    int128_t v65 = v38; // 0x40432d\n    int128_t v66 = v40; // 0x40432d\n    int128_t v67 = v42; // 0x40432d\n    int64_t v68 = v188; // 0x40432d\n    goto lab_0x404330;\n  lab_0x404291:\n    // 0x404291\n    function_403b50(v43);\n    int64_t v46; // 0x4041b8\n    uint64_t v47 = *(int64_t *)(*(int64_t *)(g46 + v46) + 32); // 0x4042a8\n    int64_t * v48; // 0x403f10\n    int64_t v49; // 0x403f10\n    if (v47 > 0x100000000 * function_408190(v32, 0) >> 32) {\n        int64_t * v50 = (int64_t *)(*(int64_t *)(g46 + v46) + 32);\n        v48 = v50;\n        v49 = *v50;\n    } else {\n        int64_t v51 = function_408190(v32, 0); // 0x404437\n        v48 = (int64_t *)(*(int64_t *)(g46 + v46) + 32);\n        v49 = 0x100000000 * v51 >> 32;\n    }\n    // 0x4042cb\n    *v48 = v49;\n    int64_t v52; // 0x403f10\n    int64_t v53 = v52 + 1; // 0x4042d6\n    int64_t v54 = *(int64_t *)(g44 - 8 + 8 * g43); // 0x4042e8\n    *(int64_t *)(v54 + v46) = v32;\n    int128_t v55 = v37; // 0x4042f6\n    int128_t v56 = v39; // 0x4042f6\n    int128_t v57 = v41; // 0x4042f6\n    int64_t v58 = v53; // 0x4042f6\n    int64_t v59 = v44; // 0x4042f6\n    if (g45 <= v53) {\n        // 0x4042fc\n        free((int64_t *)v33);\n        // 0x404260\n        return &g83;\n    }\n    goto lab_0x4041b8;\n  lab_0x404330:\n    // 0x404330\n    v37 = v65;\n    v39 = v66;\n    v41 = v67;\n    v43 = v68;\n    v44 = v27;\n    int64_t v69 = v68; // 0x404333\n    if (v68 == 0) {\n      lab_0x404559:\n        // 0x404559\n        function_40a7b0(v69);\n        // UNREACHABLE\n    }\n    goto lab_0x404291;\n  lab_0x4048b2:;\n    uint64_t v70 = v64;\n    int64_t v71 = v63;\n    __asm_pxor(v38, v38);\n    int128_t v72 = __asm_pxor(v42, v42); // 0x4048b9\n    int64_t v73 = v70 % 2; // 0x4048bd\n    int128_t v74 = __asm_cvtsi2sd(v70 / 2 | v73); // 0x4048c6\n    int128_t v75 = __asm_addsd(v74, v74); // 0x4048cf\n    int128_t v76 = v40; // 0x4048cf\n    int128_t v77 = v72; // 0x4048cf\n    int64_t v78 = v71; // 0x4048cf\n    int64_t v79 = v73; // 0x4048cf\n    goto lab_0x404519;\n  lab_0x404519:;\n    int64_t v80 = v79;\n    int64_t v81 = v78;\n    int128_t v82 = v77;\n    int128_t v83 = v76;\n    int128_t v84 = v75;\n    __asm_comisd(v84, v82);\n    v85 = v80;\n    v86 = v81;\n    v87 = v82;\n    v88 = v83;\n    v89 = v84;\n    goto lab_0x404523;\n  lab_0x4044a1:;\n    int64_t v104 = v103;\n    int64_t v105 = v102;\n    int128_t v106 = v100;\n    char v107; // 0x403f10\n    int128_t v108; // 0x403f10\n    int64_t v109; // 0x403f10\n    if (v110 == 0) {\n        if (v111 < 0) {\n            // 0x4045f5\n            __asm_pxor(v40, v40);\n            int64_t v112 = v111 / 2 | v111 % 2; // 0x404602\n            char v113 = llvm_ctpop_i8((char)v112); // 0x404602\n            int128_t v114 = __asm_cvtsi2sd(v112); // 0x404605\n            v107 = v113;\n            v109 = v112;\n            v108 = __asm_addsd(v114, v114);\n        } else {\n            char v115 = llvm_ctpop_i8((char)v111); // 0x404560\n            __asm_pxor(v40, v40);\n            int128_t v116 = __asm_cvtsi2sd(v111); // 0x40456d\n            v107 = v115;\n            v109 = v111;\n            v108 = v116;\n        }\n    } else {\n        uint64_t v117 = -v111; // 0x4044aa\n        char v118; // 0x403f10\n        int128_t v119; // 0x403f10\n        int64_t v120; // 0x403f10\n        if (v117 < 0) {\n            // 0x40459e\n            __asm_pxor(v40, v40);\n            int64_t v121 = v117 / 2 | v117 % 2; // 0x4045ab\n            char v122 = llvm_ctpop_i8((char)v121); // 0x4045ab\n            int128_t v123 = __asm_cvtsi2sd(v121); // 0x4045ae\n            v118 = v122;\n            v120 = v121;\n            v119 = __asm_addsd(v123, v123);\n        } else {\n            char v124 = llvm_ctpop_i8((char)v117); // 0x4044ad\n            __asm_pxor(v40, v40);\n            v118 = v124;\n            v120 = v111;\n            v119 = __asm_cvtsi2sd(v117);\n        }\n        int128_t v125 = v119;\n        int64_t v126 = v120;\n        char v127 = v118;\n        v107 = v127;\n        v109 = v126;\n        v108 = __asm_xorpd(v125, v128);\n    }\n    int128_t v129 = v108;\n    int64_t v130 = v109;\n    unsigned char v131 = v107;\n    int128_t v132 = __asm_addsd(v129, v106); // 0x4044c7\n    int128_t v133 = __asm_pxor(v42, v42); // 0x4044cb\n    __asm_ucomisd(v132, v133);\n    if (v131 % 2 == 0 || v130 != 0) {\n        int128_t v134 = __asm_mulsd(v106, 0x4059000000000000); // 0x4044db\n        int128_t v135 = __asm_movsd(0x3ff0000000000000); // 0x4044e3\n        int128_t v136 = __asm_divsd(v134, v132); // 0x4044eb\n        __asm_pxor(v132, v132);\n        int128_t v137 = __asm_cvtsi2sd(__asm_cvttsd2si(v136)); // 0x4044f8\n        int128_t v138 = __asm_movapd(v137); // 0x4044fd\n        __asm_comisd(v136, __asm_subsd(v138, v135));\n        v75 = v136;\n        v76 = v137;\n        v77 = v133;\n        v78 = v105;\n        v79 = v104;\n        if (v130 != 0) {\n            int128_t v139 = __asm_addsd(v135, v137); // 0x40450b\n            __asm_comisd(v139, v136);\n            __asm_comisd(v136, v137);\n            v75 = __asm_movapd(v139);\n            v76 = v137;\n            v77 = v133;\n            v78 = v105;\n            v79 = v104;\n        }\n        goto lab_0x404519;\n    } else {\n        goto lab_0x40431e;\n    }\n  lab_0x404523:;\n    int64_t v90 = v86;\n    int64_t v91 = v85;\n    int64_t v92; // 0x404117\n    int64_t v93 = function_40acf0(&v32, (int64_t)\"%.0f%%\", v91, v90, v27, v92); // 0x404532\n    if ((int32_t)v93 == -1) {\n        // 0x404550\n        v32 = 0;\n        v69 = &v32;\n        goto lab_0x404559;\n    }\n    int128_t v94 = v89;\n    int128_t v95 = v88;\n    int128_t v96 = v87;\n    int64_t v97 = v32; // 0x40453c\n    v65 = v94;\n    v66 = v95;\n    v67 = v96;\n    v68 = v97;\n    goto lab_0x404330;\n  lab_0x404498:;\n    int64_t v98 = v99;\n    __asm_pxor(v38, v38);\n    v100 = __asm_cvtsi2sd(v101);\n    v102 = v98;\n    v103 = v101;\n    goto lab_0x4044a1;\n  lab_0x403fc5:;\n    int64_t v140 = function_40b070(v4, str2, &v11); // 0x403fd0\n    int64_t v141; // 0x403f10\n    int64_t v142; // 0x403f10\n    int64_t v143; // 0x403f10\n    int64_t v144; // 0x403f10\n    int64_t result5; // 0x403f10\n    int64_t v145; // 0x403f10\n    int64_t v61; // bp-776, 0x403f10\n    int64_t v146; // 0x403f10\n    int64_t v147; // 0x403f10\n    char v148; // 0x403f10\n    int64_t v149; // 0x403f10\n    int64_t v150; // 0x403f10\n    int64_t v151; // 0x403f10\n    int32_t * err_num; // 0x404668\n    uint32_t result6; // 0x404677\n    if ((int32_t)v140 != 0) {\n        // 0x404668\n        err_num = __errno_location();\n        if ((char)v3 == 0) {\n            goto lab_0x40468b;\n        } else {\n            // 0x404677\n            result6 = *err_num;\n            switch (result6) {\n                case 13: {\n                    goto lab_0x404857;\n                }\n                case 2: {\n                    goto lab_0x404857;\n                }\n                default: {\n                    goto lab_0x40468b;\n                }\n            }\n        }\n    } else {\n        // 0x403fdd\n        v141 = v12;\n        v142 = v12;\n        v143 = v12;\n        v145 = v140;\n        if ((char)v3 == 0) {\n            goto lab_0x404839;\n        } else {\n            // 0x403fe8\n            if (g67 != 0) {\n                // 0x40479c\n                int64_t v152; // bp-712, 0x403f10\n                int32_t v153 = __xstat(1, (char *)v4, (struct stat *)&v152); // 0x4047ac\n                v145 = v153;\n                if (v153 != 0) {\n                    goto lab_0x404839;\n                } else {\n                    // 0x4047b9\n                    v145 = v152;\n                    if (g68 == 0) {\n                        goto lab_0x404839;\n                    } else {\n                        // 0x4047cd\n                        v61 = v152;\n                        int64_t v154 = function_4061f0(g68, &v61); // 0x4047dd\n                        v145 = 0;\n                        if (v154 == 0) {\n                            goto lab_0x404839;\n                        } else {\n                            int64_t str = *(int64_t *)(v154 + 8); // 0x4047e7\n                            v145 = v154;\n                            if (str == 0) {\n                                goto lab_0x404839;\n                            } else {\n                                int32_t strcmp_rc = strcmp((char *)*(int64_t *)str, (char *)str2); // 0x4047f7\n                                v145 = 0;\n                                if (strcmp_rc == 0) {\n                                    goto lab_0x404839;\n                                } else {\n                                    // 0x404800\n                                    v145 = strcmp_rc;\n                                    if ((char)a7 != 0 == ((*(char *)(str + 40) & 2) != 0)) {\n                                        goto lab_0x404839;\n                                    } else {\n                                        // 0x404839\n                                        v11 = -1;\n                                        v151 = -1;\n                                        v146 = -1;\n                                        v147 = -1;\n                                        v149 = -1;\n                                        v150 = -1;\n                                        v148 = 0;\n                                        v144 = (int64_t)\"-\";\n                                        goto lab_0x404015;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 0x403ff5\n                result5 = v140;\n                v151 = v141;\n                v149 = v142;\n                v150 = v143;\n                v144 = v1;\n                if (v141 != 0) {\n                    goto lab_0x404015;\n                } else {\n                    goto lab_0x403ffd;\n                }\n            }\n        }\n    }\n  lab_0x40401c:\n    // 0x40401c\n    v29 = v5;\n    function_403ad0();\n    int64_t str3 = function_40a790(a1 == 0 ? (int64_t)\"-\" : str2); // 0x404037\n    int64_t v155 = str3; // 0x404048\n    if ((char)v3 != 0) {\n        int32_t len = strlen((char *)str3); // 0x40404d\n        v155 = str3;\n        if (len >= 37) {\n            int32_t ini_seg_bytes = strspn((char *)(str3 - 36 + (int64_t)len), \"-0123456789abcdefABCDEF\"); // 0x404062\n            v155 = str3;\n            if (ini_seg_bytes == 36) {\n                int64_t v156 = function_405250(str3, 0); // 0x4046c2\n                v155 = str3;\n                if (v156 != 0) {\n                    // 0x4046d3\n                    free((int64_t *)str3);\n                    v155 = v156;\n                }\n            }\n        }\n    }\n    // 0x404078\n    v33 = v155;\n    v61 = 1;\n    int64_t v62 = v11; // bp-840, 0x40413e\n    int64_t v157 = v8; // 0x40418e\n    int64_t v158; // 0x403f10\n    int64_t v159; // 0x403f10\n    int64_t v160; // 0x403f10\n    int64_t v161; // 0x403f10\n    int64_t v162; // 0x403f10\n    int64_t v163; // 0x403f10\n    int64_t v164; // 0x403f10\n    if (a8 == 0 == (g55 != 0)) {\n        if (v158 < 0xfffffffffffffffe) {\n            // 0x4046fa\n            g53 += v158;\n        }\n        if (v6 < 0xfffffffffffffffe) {\n            // 0x404707\n            g54 += v6;\n        }\n        if (v10 < 0xfffffffffffffffe) {\n            // 0x404714\n            g49 += v11 * v10;\n        }\n        if (v9 < 0xfffffffffffffffe) {\n            // 0x404725\n            g50 += v11 * v9;\n        }\n        // 0x404730\n        v157 = v8;\n        if (v8 < 0xfffffffffffffffe) {\n            unsigned char v165 = v7 & (char)(v8 < 0xfffffffffffffffe); // 0x40413a\n            unsigned char v166 = *(char *)&g52; // 0x40473a\n            int64_t v167 = v11 * v8; // 0x404741\n            int64_t v168 = g51; // 0x404745\n            if (v166 == v165) {\n                int64_t v169 = v168 + v167; // 0x40491d\n                g51 = v169;\n                v157 = v169;\n                goto lab_0x40419b;\n            } else {\n                int64_t v170 = v166 == 0 ? v168 : -v168; // 0x40475c\n                int64_t v171 = v165 != 0 ? -v167 : v167; // 0x404768\n                v161 = v165;\n                v163 = v170;\n                v160 = v171;\n                if (v170 > v171) {\n                    // 0x404775\n                    v162 = v166;\n                    v159 = v171;\n                    v164 = v170 - v171;\n                    goto lab_0x40477f;\n                } else {\n                    goto lab_0x404906;\n                }\n            }\n        } else {\n            goto lab_0x40419b;\n        }\n    } else {\n        goto lab_0x40419b;\n    }\n  lab_0x40468b:\n    // 0x40468b\n    error(0, *err_num, \"%s\", (char *)function_409c60(0, 3, v4));\n    g60 = 1;\n    // 0x404260\n    return &g83;\n  lab_0x404839:\n    // 0x404839\n    v151 = v141;\n    v149 = v142;\n    v150 = v143;\n    v144 = v1;\n    if (v141 != 0) {\n        goto lab_0x404015;\n    } else {\n        // 0x404845\n        result5 = v145;\n        if (g67 != 0) {\n            goto lab_0x404015;\n        } else {\n            goto lab_0x403ffd;\n        }\n    }\n  lab_0x40419b:\n    // 0x40419b\n    if (g45 == 0) {\n        // 0x4042fc\n        free((int64_t *)v33);\n        // 0x404260\n        return &g83;\n    }\n    // 0x4041b8\n    int128_t v172; // 0x403f10\n    v55 = v172;\n    int128_t v173; // 0x403f10\n    v56 = v173;\n    int128_t v174; // 0x403f10\n    v57 = v174;\n    v58 = 0;\n    v59 = v157;\n    while (true) {\n      lab_0x4041b8:\n        // 0x4041b8\n        v27 = v59;\n        v52 = v58;\n        v42 = v57;\n        v40 = v56;\n        v38 = v55;\n        v46 = 8 * v52;\n        v23 = *(int64_t *)(v46 + g46);\n        int32_t v60 = *(int32_t *)(v23 + 16); // 0x4041c4\n        v21 = &v61;\n        if (v60 == 1) {\n            goto lab_0x4041e6;\n        } else {\n            // 0x4041d0\n            v21 = &v62;\n            if (v60 != 0) {\n                // 0x404410\n                v21 = 0;\n                if (v60 != 2) {\n                    // 0x404899\n                    __assert_fail(\"!\\\"bad field_type\\\"\", \"src/df.c\", 1077, \"get_dev\");\n                    v63 = (int64_t)\"get_dev\";\n                    v64 = 1077;\n                    goto lab_0x4048b2;\n                } else {\n                    goto lab_0x4041e6;\n                }\n            } else {\n                goto lab_0x4041e6;\n            }\n        }\n    }\n  lab_0x4048d4:\n    // 0x4048d4\n    __assert_fail(\"!\\\"unhandled field\\\"\", \"src/df.c\", 1179, \"get_dev\");\n    v45 = v27;\n  lab_0x4048ed:\n    // 0x4048ed\n    __assert_fail(\"!\\\"empty cell\\\"\", \"src/df.c\", 1183, \"get_dev\");\n    int128_t v175 = v38; // 0x404901\n    int128_t v176 = v40; // 0x404901\n    int128_t v177 = v42; // 0x404901\n    v161 = &g83;\n    v163 = 1183;\n    v160 = v45;\n    goto lab_0x404906;\n  lab_0x404857:\n    // 0x404857\n    if (g67 == 0) {\n        // 0x404260\n        return result6;\n    }\n    // 0x404864\n    v11 = -1;\n    v151 = -1;\n    v146 = -1;\n    v147 = -1;\n    v149 = -1;\n    v150 = -1;\n    v148 = 0;\n    v144 = (int64_t)\"-\";\n    goto lab_0x404015;\n  lab_0x404015:\n    // 0x404015\n    g62 = 1;\n    v10 = v151;\n    v6 = v146;\n    v158 = v147;\n    v8 = v149;\n    v9 = v150;\n    v7 = v148;\n    v5 = v144;\n    goto lab_0x40401c;\n  lab_0x404906:;\n    int64_t v178 = v160 - v163; // 0x404906\n    *(char *)&g52 = (char)v161;\n    int128_t v179 = v175; // 0x404918\n    int128_t v180 = v176; // 0x404918\n    int128_t v181 = v177; // 0x404918\n    v162 = v161 & 0xffffffff;\n    v159 = v178;\n    v164 = v178;\n    goto lab_0x40477f;\n  lab_0x403ffd:\n    // 0x403ffd\n    v151 = v141;\n    v149 = v142;\n    v150 = v143;\n    v144 = v1;\n    if (g65 == 0) {\n        // 0x404260\n        return result5;\n    }\n    goto lab_0x404015;\n  lab_0x40477f:;\n    int64_t v182 = v164;\n    int64_t v183 = v159;\n    int128_t v184 = v181;\n    int128_t v185 = v180;\n    int128_t v186 = v179;\n    g51 = v182;\n    v172 = v186;\n    v173 = v185;\n    v174 = v184;\n    v157 = v183;\n    if ((char)v162 != 0) {\n        // 0x404787\n        g51 = -v182;\n        v172 = v186;\n        v173 = v185;\n        v174 = v184;\n        v157 = v183;\n    }\n    goto lab_0x40419b;\n}\n"
        },
        {
            "funcName": "function_404930",
            "funcStartAddr": "404930",
            "funcEndAddr": "404d5d",
            "decompiledFuncCode": "int64_t function_404930(int64_t a1) {\n    int32_t status = a1; // 0x404946\n    if (status != 0) {\n        // 0x40494a\n        __fprintf_chk(g40, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40496f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x404976\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Show information about the file system on which each FILE resides,\\nor all file systems by default.\\n\", 5), g38);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g38);\n    fputs_unlocked(dcgettext(NULL, \"  -a, --all             include pseudo, duplicate, inaccessible file systems\\n  -B, --block-size=SIZE  scale sizes by SIZE before printing them; e.g.,\\n                           '-BM' prints sizes in units of 1,048,576 bytes;\\n                           see SIZE format below\\n  -h, --human-readable  print sizes in powers of 1024 (e.g., 1023M)\\n  -H, --si              print sizes in powers of 1000 (e.g., 1.1G)\\n\", 5), g38);\n    fputs_unlocked(dcgettext(NULL, \"  -i, --inodes          list inode information instead of block usage\\n  -k                    like --block-size=1K\\n  -l, --local           limit listing to local file systems\\n      --no-sync         do not invoke sync before getting usage info (default)\\n\", 5), g38);\n    fputs_unlocked(dcgettext(NULL, \"      --output[=FIELD_LIST]  use the output format defined by FIELD_LIST,\\n                               or print all fields if FIELD_LIST is omitted.\\n  -P, --portability     use the POSIX output format\\n      --sync            invoke sync before getting usage info\\n\", 5), g38);\n    fputs_unlocked(dcgettext(NULL, \"      --total           elide all entries insignificant to available space,\\n                          and produce a grand total\\n\", 5), g38);\n    fputs_unlocked(dcgettext(NULL, \"  -t, --type=TYPE       limit listing to file systems of type TYPE\\n  -T, --print-type      print file system type\\n  -x, --exclude-type=TYPE   limit listing to file systems not of type TYPE\\n  -v                    (ignored)\\n\", 5), g38);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g38);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g38);\n    __printf_chk(1, dcgettext(NULL, \"\\nDisplay values are in units of the first available SIZE from --block-size,\\nand the %s_BLOCK_SIZE, BLOCK_SIZE and BLOCKSIZE environment variables.\\nOtherwise, units default to 1024 bytes (or 512 if POSIXLY_CORRECT is set).\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"\\nThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\\nUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\\n\", 5), g38);\n    fputs_unlocked(dcgettext(NULL, \"\\nFIELD_LIST is a comma-separated list of columns to be included.  Valid\\nfield names are: 'source', 'fstype', 'itotal', 'iused', 'iavail', 'ipcent',\\n'size', 'used', 'avail', 'pcent', 'file' and 'target' (see info page).\\n\", 5), g38);\n    int64_t v1 = &g2; // bp-136, 0x404b3a\n    bool v2; // 0x404930\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x404bc0\n    int64_t v6 = *(int64_t *)v5; // 0x404bc4\n    int64_t v7 = 3; // 0x404bca\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"df\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x404bd6\n        char v11 = *(char *)v9; // 0x404bd6\n        char v12 = v11; // 0x404bd6\n        bool v13 = false; // 0x404bd6\n        while (v10 == v11) {\n            // 0x404bcc\n            v7--;\n            int64_t v14 = v9 + v3; // 0x404bd6\n            int64_t v15 = v8 + v3; // 0x404bd6\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x404be2\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 3;\n    }\n    // 0x404be2\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x404cf4;\n        } else {\n            // 0x404cde\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x404d33\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x404c44;\n            } else {\n                goto lab_0x404cf4;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x404c44;\n        } else {\n            // 0x404c2a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x404d33\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x404c44;\n            } else {\n                goto lab_0x404c44;\n            }\n        }\n    }\n  lab_0x404cf4:\n    // 0x404cf4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x404c84\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40496f\n    exit(status);\n    // UNREACHABLE\n  lab_0x404c44:\n    // 0x404c44\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x404c84\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40496f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404d60",
            "funcStartAddr": "404d60",
            "funcEndAddr": "404ec1",
            "decompiledFuncCode": "int64_t function_404d60(void) {\n    // 0x404d60\n    int64_t v1; // 0x404d60\n    int64_t v2 = function_40a790(v1); // 0x404d6e\n    char * str = (char *)v2; // 0x404d8b\n    char * found_char_pos = strchr(str, 44); // 0x404d8b\n    int64_t v3 = 0; // 0x404d93\n    if (found_char_pos != NULL) {\n        // 0x404d95\n        *found_char_pos = 0;\n        v3 = (int64_t)found_char_pos + 1;\n    }\n    uint64_t v4 = 0;\n    int64_t str2 = *(int64_t *)(48 * v4 + (int64_t)&g22); // 0x404dae\n    int64_t v5; // 0x404d60\n    while (strcmp((char *)str2, str) != 0) {\n        // 0x404dc1\n        if (v4 == 11) {\n            // 0x404dcb\n            function_409de0(v2);\n            v5 = (int64_t)\"option --output: field %s unknown\";\n            goto lab_0x404de0;\n        }\n        v4++;\n        str2 = *(int64_t *)(48 * v4 + (int64_t)&g22);\n    }\n    char v6 = *(char *)(48 * (v4 & 0xffffffff) + (int64_t)&g23); // 0x404e12\n    while (v6 == 0) {\n        uint64_t v7 = v4 % 64; // 0x404e27\n        if ((1 << v7 & 4075) != 0) {\n            // 0x404e70\n            function_403e20((int32_t)v4, 0);\n        } else {\n            if (v7 == 4) {\n                // 0x404e80\n                function_403e20((int32_t)v4, (int32_t)\"Avail\");\n            } else {\n                if (v7 != 2) {\n                    // 0x404e8e\n                    __assert_fail(\"!\\\"invalid field\\\"\", \"src/df.c\", 427, \"decode_output_arg\");\n                    goto lab_0x404ea7;\n                }\n                // 0x404e39\n                function_403e20((int32_t)v4, (int32_t)\"Size\");\n            }\n        }\n        // 0x404e45\n        if (v3 == 0) {\n            // 0x404e51\n            free((int64_t *)v2);\n            return &g83;\n        }\n        int64_t v8 = v3;\n        str = (char *)v8;\n        found_char_pos = strchr(str, 44);\n        v3 = 0;\n        if (found_char_pos != NULL) {\n            // 0x404d95\n            *found_char_pos = 0;\n            v3 = (int64_t)found_char_pos + 1;\n        }\n        // 0x404d9c\n        v4 = 0;\n        str2 = *(int64_t *)(48 * v4 + (int64_t)&g22);\n        while (strcmp((char *)str2, str) != 0) {\n            // 0x404dc1\n            if (v4 == 11) {\n                // 0x404dcb\n                function_409de0(v8);\n                v5 = (int64_t)\"option --output: field %s unknown\";\n                goto lab_0x404de0;\n            }\n            v4++;\n            str2 = *(int64_t *)(48 * v4 + (int64_t)&g22);\n        }\n        // 0x404e08\n        v6 = *(char *)(48 * (v4 & 0xffffffff) + (int64_t)&g23);\n    }\n    goto lab_0x404ea7;\n  lab_0x404ea7:\n    // 0x404ea7\n    function_409de0(str2);\n    v5 = (int64_t)\"option --output: field %s used more than once\";\n  lab_0x404de0:\n    // 0x404de0\n    error(0, 0, dcgettext(NULL, (char *)v5, 5));\n    function_404930(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404ed0",
            "funcStartAddr": "404ed0",
            "funcEndAddr": "405250",
            "decompiledFuncCode": "int64_t function_404ed0(int64_t path, int64_t a2) {\n    // 0x404ed0\n    int64_t v1; // bp-344, 0x404ed0\n    int64_t v2 = function_409f30(&v1); // 0x404eef\n    int32_t * err_num = __errno_location(); // 0x404ef7\n    if ((int32_t)v2 != 0) {\n        // 0x4051f8\n        error(0, *err_num, dcgettext(NULL, \"cannot get current directory\", 5));\n        // 0x405100\n        return 0;\n    }\n    // 0x404f08\n    int64_t v3; // 0x404ed0\n    int64_t result; // 0x404ed0\n    int64_t v4; // 0x404ed0\n    int64_t v5; // bp-328, 0x404ed0\n    if ((*(int32_t *)(a2 + 24) & 0xf000) == 0x4000) {\n        int128_t v6 = __asm_movdqu(*(int128_t *)&v4); // 0x405110\n        int128_t v7 = __asm_movdqu(*(int128_t *)(a2 + 16)); // 0x405114\n        int128_t v8 = __asm_movdqu(*(int128_t *)(a2 + 32)); // 0x40511c\n        int128_t v9 = __asm_movdqu(*(int128_t *)(a2 + 48)); // 0x405121\n        v5 = __asm_movaps(v6);\n        int128_t v10 = __asm_movdqu(*(int128_t *)(a2 + 64)); // 0x40512d\n        int128_t v11 = __asm_movdqu(*(int128_t *)(a2 + 80)); // 0x405132\n        __asm_movaps(v7);\n        int128_t v12 = __asm_movdqu(*(int128_t *)(a2 + 96)); // 0x40513e\n        int128_t v13 = __asm_movdqu(*(int128_t *)(a2 + 112)); // 0x405143\n        int128_t v14 = __asm_movdqu(*(int128_t *)(a2 + 128)); // 0x405148\n        __asm_movaps(v8);\n        __asm_movaps(v9);\n        __asm_movaps(v10);\n        __asm_movaps(v11);\n        __asm_movaps(v12);\n        __asm_movaps(v13);\n        __asm_movaps(v14);\n        int32_t v15 = chdir((char *)path); // 0x405181\n        v4 = path;\n        v3 = path;\n        if (v15 >= 0) {\n            goto lab_0x405077_2;\n        } else {\n            goto lab_0x405191;\n        }\n    } else {\n        int64_t str = function_405990(); // 0x404f1e\n        int32_t len = strlen((char *)str); // 0x404f29\n        int64_t * v16 = (int64_t *)str; // 0x404f49\n        int64_t * dest_mem = memcpy((int64_t *)((int64_t)&v1 + 15 - ((int64_t)len + 24 & -16) & -16), v16, len + 1); // 0x404f49\n        int64_t v17 = (int64_t)dest_mem; // 0x404f49\n        free(v16);\n        if (chdir((char *)dest_mem) < 0) {\n            // 0x405220\n            v4 = v17;\n            v3 = v17;\n            goto lab_0x405191;\n        } else {\n            // 0x404f69\n            if (__xstat(1, \".\", (struct stat *)&v5) >= 0) {\n                goto lab_0x405077_2;\n            } else {\n                // 0x404f87\n                function_409b90(4, v17);\n                error(0, *err_num, dcgettext(NULL, \"cannot stat current directory (now %s)\", 5));\n                result = 0;\n                goto lab_0x4050d8;\n            }\n        }\n    }\n  lab_0x405077_2:\n    // 0x405077\n    v4 = (int64_t)\"..\";\n    int128_t v18; // bp-184, 0x404ed0\n    int64_t v19; // 0x404ed0\n    if (__xstat(1, \"..\", (struct stat *)&v18) >= 0) {\n        while (false && v5 == (int64_t)v18) {\n            // 0x404ff0\n            if (chdir(\"..\") < 0) {\n                // 0x4051d0\n                v4 = (int64_t)\"..\";\n                function_409b90(4, (int64_t)\"..\");\n                v19 = (int64_t)\"cannot change to directory %s\";\n                goto lab_0x4050b1;\n            }\n            int128_t v20 = __asm_movdqa(0); // 0x405002\n            int128_t v21; // 0x404ed0\n            int128_t v22 = __asm_movdqa(v21); // 0x40500a\n            int128_t v23 = __asm_movdqa(v21); // 0x405012\n            int128_t v24 = __asm_movdqa(v21); // 0x40501a\n            v5 = __asm_movaps(v20);\n            int128_t v25 = __asm_movdqa(v21); // 0x405026\n            int128_t v26 = __asm_movdqa(v21); // 0x40502b\n            int128_t v27 = __asm_movdqa(v21); // 0x405030\n            int128_t v28 = __asm_movdqa(v21); // 0x405035\n            __asm_movaps(v22);\n            int128_t v29 = __asm_movdqa(v21); // 0x405041\n            __asm_movaps(v23);\n            __asm_movaps(v24);\n            __asm_movaps(v25);\n            __asm_movaps(v26);\n            __asm_movaps(v27);\n            __asm_movaps(v28);\n            __asm_movaps(v29);\n            if (__xstat(1, \"..\", (struct stat *)&v18) < 0) {\n                // 0x405077\n                v4 = (int64_t)\"..\";\n                // 0x405095\n                function_409b90(4, (int64_t)\"..\");\n                v19 = (int64_t)\"cannot stat %s\";\n                goto lab_0x4050b1;\n            }\n        }\n        // 0x4050d0\n        v4 = (int64_t)\"..\";\n        result = function_40a7f0(1, (int64_t)\"..\");\n        goto lab_0x4050d8;\n    } else {\n        // 0x405095\n        function_409b90(4, (int64_t)\"..\");\n        v19 = (int64_t)\"cannot stat %s\";\n        goto lab_0x4050b1;\n    }\n  lab_0x405191:\n    // 0x405191\n    function_409b90(4, v3);\n    error(0, *err_num, dcgettext(NULL, \"cannot change to directory %s\", 5));\n    // 0x405100\n    return 0;\n  lab_0x4050d8:\n    // 0x4050d8\n    if ((int32_t)function_409f80(&v1) != 0) {\n        // 0x405228\n        error(1, *err_num, dcgettext(NULL, \"failed to return to initial working directory\", 5));\n        return &g83;\n    }\n    // 0x4050f0\n    function_409fa0(&v1);\n    // 0x405100\n    return result;\n  lab_0x4050b1:\n    // 0x4050b1\n    v4 = v19;\n    error(0, *err_num, dcgettext(NULL, (char *)v19, 5));\n    result = 0;\n    goto lab_0x4050d8;\n}\n"
        },
        {
            "funcName": "function_405250",
            "funcStartAddr": "405250",
            "funcEndAddr": "4058c3",
            "decompiledFuncCode": "int64_t function_405250(int64_t a1, uint32_t a2) {\n    int64_t v1 = a1;\n    uint32_t v2 = a2 % 4; // 0x405256\n    if (a1 == 0 || (a2 + 3 & v2) != 0) {\n        // 0x405700\n        *__errno_location() = 22;\n        // 0x40554e\n        return 0;\n    }\n    int64_t v3; // 0x405250\n    int64_t v4; // 0x405250\n    int64_t v5; // 0x405250\n    switch ((char)a1) {\n        case 0: {\n            // 0x4057c1\n            *__errno_location() = 2;\n            // 0x40554e\n            return 0;\n        }\n        case 47: {\n            int64_t v6 = function_40a560(0x1000); // 0x405415\n            *(char *)v6 = 47;\n            v5 = v6 + 1;\n            v4 = v6 + 0x1000;\n            v3 = v6;\n            // break -> 0x4052c5\n            break;\n        }\n        default: {\n            int64_t str = function_40a7f0(a1, (int64_t)a2); // 0x405297\n            if (str == 0) {\n                // 0x40554e\n                return 0;\n            }\n            int32_t len = strlen((char *)str); // 0x4052ab\n            int64_t v7 = len; // 0x4052ab\n            if (len < 0x1000) {\n                int64_t v8 = function_40a5c0(str, 0x1000); // 0x4057dc\n                v5 = v8 + v7;\n                v4 = v8 + 0x1000;\n                v3 = v8;\n            } else {\n                int64_t v9 = str + v7; // 0x4052bf\n                v5 = v9;\n                v4 = v9;\n                v3 = str;\n            }\n            // break -> 0x4052c5\n            break;\n        }\n    }\n    int64_t v10 = a1; // 0x4052f2\n    int64_t v11 = 0; // 0x4052f2\n    int64_t v12 = 0; // 0x4052f2\n    int64_t v13 = 0; // 0x4052f2\n    char * v14 = (char *)&v1; // 0x4052f2\n    int64_t v15 = v5; // 0x4052f2\n    int64_t v16 = v4; // 0x4052f2\n    int64_t v17 = v3; // 0x4052f2\n    int64_t v18 = a1; // 0x4052f2\n    int64_t v19; // 0x405250\n    int64_t v20; // 0x405250\n    int64_t v21; // 0x405250\n    int64_t v22; // 0x405250\n    char * v23; // 0x405250\n    int64_t v24; // 0x405250\n    int64_t v25; // 0x405250\n    int64_t v26; // 0x405250\n    int64_t v27; // 0x405250\n    int64_t v28; // 0x405250\n    int64_t v29; // 0x405250\n    int64_t v30; // 0x405250\n    int64_t v31; // 0x405250\n    int64_t v32; // 0x405250\n    int32_t * v33; // 0x405250\n    int32_t * v34; // 0x405250\n    int32_t v35; // 0x405250\n    int32_t v36; // 0x405250\n    int32_t v37; // 0x405250\n    int64_t v38; // 0x405250\n    int64_t v39; // 0x405250\n    int64_t v40; // 0x405250\n    int64_t v41; // 0x405250\n    int64_t v42; // 0x405250\n    int64_t v43; // 0x405250\n    int64_t v44; // 0x405250\n    uint64_t v45; // 0x405250\n    int64_t v46; // 0x405333\n    char * str3; // 0x405250\n    int64_t v47; // 0x405333\n    char * v48; // 0x405250\n    int64_t v49; // 0x4055c4\n    char * str2; // 0x4055d8\n    int32_t len2; // 0x4055d8\n    int64_t v50; // 0x4055d8\n    int32_t len3; // 0x4055e3\n    while (true) {\n      lab_0x4052f8_4:\n        // 0x4052f8\n        v36 = v35;\n        v39 = v13;\n        int64_t v51 = v12;\n        int64_t v52 = v10;\n        int16_t v53 = (int16_t)v36 & -0x1000;\n        v41 = v11;\n        v23 = v14;\n        v26 = v15;\n        v21 = v18;\n        int32_t v54; // 0x405250\n        while (true) {\n          lab_0x4052f8_3:\n            // 0x4052f8\n            v20 = v17;\n            v25 = v16;\n            v42 = v41;\n            v45 = v20 + 1;\n            v24 = (int64_t)*v23;\n            v28 = v26;\n            v22 = v21;\n            int64_t v55; // 0x405250\n            int64_t v56; // 0x405350\n            while (true) {\n              lab_0x4052f8_2:\n                // 0x4052f8\n                v29 = v28;\n                if (v24 == 0) {\n                    // break (via goto) -> 0x405500\n                    goto lab_0x405500_3;\n                }\n                int64_t v57 = v22; // 0x405304\n                int64_t v58 = v24; // 0x405304\n                int64_t v59 = v22; // 0x405304\n                int64_t v60; // 0x405310\n                unsigned char v61; // 0x405314\n                if (v24 == 47) {\n                    v60 = v57 + 1;\n                    v61 = *(char *)v60;\n                    v57 = v60;\n                    while (v61 == 47) {\n                        // 0x405310\n                        v60 = v57 + 1;\n                        v61 = *(char *)v60;\n                        v57 = v60;\n                    }\n                    // 0x40531d\n                    v58 = v61;\n                    v59 = v60;\n                    if (v61 == 0) {\n                        // break (via goto) -> 0x405500\n                        goto lab_0x405500_3;\n                    }\n                }\n                // 0x405325\n                v55 = v59;\n                int64_t v62 = v58;\n                v46 = v55 + 1;\n                str3 = (char *)v46;\n                unsigned char v63 = *str3; // 0x405333\n                int64_t v64 = v46; // 0x40533e\n                while (v63 != 0 == (v63 != 47)) {\n                    // 0x405333\n                    v46 = v64 + 1;\n                    str3 = (char *)v46;\n                    v63 = *str3;\n                    v64 = v46;\n                }\n                if (v46 == v55) {\n                    // break (via goto) -> 0x405500\n                    goto lab_0x405500_3;\n                }\n                // 0x40534d\n                v47 = v63;\n                v56 = v46 - v55;\n                while (v56 != 1) {\n                    if (v56 == 2 != ((char)v62 == 46)) {\n                        // break (via goto) -> 0x40536c\n                        goto lab_0x40536c_2;\n                    }\n                    // 0x4056c0\n                    if (*(char *)(v55 + 1) != 46) {\n                        // break (via goto) -> 0x40536c\n                        goto lab_0x40536c_2;\n                    }\n                    int64_t v65 = v47; // 0x4056d6\n                    int64_t v66 = v46; // 0x4056d6\n                    if (v29 > v45) {\n                        int64_t v67 = v29 - 1; // 0x4056dc\n                        v27 = v67;\n                        if (v20 >= v67) {\n                            goto lab_0x4052f8;\n                        } else {\n                            int64_t v68 = v29 - 2; // 0x4056e5\n                            v27 = v67;\n                            if (*(char *)v68 != 47) {\n                                // 0x405823\n                                v27 = v20;\n                                v30 = v68;\n                                if (v20 == v68) {\n                                    goto lab_0x4052f8;\n                                } else {\n                                    goto lab_0x405830;\n                                }\n                            } else {\n                                goto lab_0x4052f8;\n                            }\n                        }\n                    }\n                    if (v65 == 0) {\n                        // break (via goto) -> 0x405500\n                        goto lab_0x405500_3;\n                    }\n                    // 0x405300\n                    v57 = v66;\n                    v58 = v65;\n                    v59 = v66;\n                    if (v65 == 47) {\n                        v60 = v57 + 1;\n                        v61 = *(char *)v60;\n                        v57 = v60;\n                        while (v61 == 47) {\n                            // 0x405310\n                            v60 = v57 + 1;\n                            v61 = *(char *)v60;\n                            v57 = v60;\n                        }\n                        // 0x40531d\n                        v58 = v61;\n                        v59 = v60;\n                        if (v61 == 0) {\n                            // break (via goto) -> 0x405500\n                            goto lab_0x405500_3;\n                        }\n                    }\n                    // 0x405325\n                    v55 = v59;\n                    v62 = v58;\n                    v46 = v55 + 1;\n                    str3 = (char *)v46;\n                    v63 = *str3;\n                    v64 = v46;\n                    while (v63 != 0 == (v63 != 47)) {\n                        // 0x405333\n                        v46 = v64 + 1;\n                        str3 = (char *)v46;\n                        v63 = *str3;\n                        v64 = v46;\n                    }\n                    if (v46 == v55) {\n                        // break (via goto) -> 0x405500\n                        goto lab_0x405500_3;\n                    }\n                    // 0x40534d\n                    v47 = v63;\n                    v56 = v46 - v55;\n                }\n                // 0x4054e8\n                v27 = v29;\n                if ((char)v62 != 46) {\n                    // break -> 0x40536c\n                    break;\n                }\n                goto lab_0x4052f8;\n            }\n          lab_0x40536c_2:;\n            int64_t v69 = v29; // 0x405370\n            if (*(char *)(v29 - 1) != 47) {\n                // 0x405372\n                *(char *)v29 = 47;\n                v69 = v29 + 1;\n            }\n            int64_t v70 = v69;\n            int64_t v71 = v70 + v56;\n            int64_t v72 = v71; // 0x405380\n            int64_t v73 = v70; // 0x405380\n            v16 = v25;\n            int64_t v74 = v20; // 0x405380\n            if (v25 <= v71) {\n                int64_t v75 = v56 < 0x1000 == (4095 - v56 & v56) < 0 ? v56 + 1 : 0x1000;\n                int64_t v76 = v75 + v25 - v20; // 0x4053a3\n                v74 = function_40a5c0(v20, v76);\n                v73 = v74 + v70 - v20;\n                v72 = v73 + v56;\n                v16 = v74 + v76;\n            }\n            // 0x4053bd\n            v17 = v74;\n            v19 = v72;\n            memcpy((int64_t *)v73, (int64_t *)v55, (int32_t)v56);\n            *(char *)v19 = 0;\n            v54 = 0;\n            if ((a2 & 4) != 0 && v2 == 2) {\n                // break -> 0x4053f3\n                break;\n            }\n            // 0x405430\n            v1 = 1;\n            v48 = (char *)v17;\n            int64_t v77; // bp-200, 0x405250\n            int32_t v78; // 0x405250\n            if ((a2 & 4) == 0) {\n                // 0x405568\n                v78 = __lxstat(1, v48, (struct stat *)&v77);\n            } else {\n                // 0x405449\n                v78 = __xstat(1, v48, (struct stat *)&v77);\n            }\n            // 0x405453\n            if (v78 == 0) {\n                // 0x4054c0\n                v54 = v36;\n                v14 = str3;\n                v10 = v52;\n                v11 = v42;\n                v12 = v51;\n                v13 = v39;\n                v37 = v36;\n                v15 = v19;\n                v18 = v46;\n                switch (v53) {\n                    case -0x6000: {\n                        int64_t v79 = v42; // 0x405586\n                        if (v42 == 0) {\n                            // 0x405713\n                            v1 = 7;\n                            v79 = function_406460(7, 0, 0x406e20, 0x406e90, 0x406ed0);\n                            if (v79 == 0) {\n                                // 0x40573d\n                                function_40a7b0(7);\n                                // UNREACHABLE\n                            }\n                        }\n                        // 0x40558c\n                        v44 = v79;\n                        int64_t v80 = function_405b90(v44, v52, &v77); // 0x40559b\n                        if ((char)v80 != 0) {\n                            // 0x405659\n                            v43 = v44;\n                            if (v2 != 2) {\n                                // 0x405664\n                                v31 = 40;\n                                v33 = __errno_location();\n                                goto lab_0x405671_2;\n                            }\n                        } else {\n                            // 0x4055a8\n                            function_405b00(v44, v52, &v77);\n                            int64_t v81; // 0x405250\n                            v49 = function_40d6b0(v17, v81);\n                            if (v49 != 0) {\n                                // 0x4055d5\n                                str2 = (char *)v49;\n                                len2 = strlen(str2);\n                                v50 = len2;\n                                len3 = strlen(str3);\n                                uint64_t v82 = v50 + 1 + (int64_t)len3; // 0x4055f1\n                                if (v51 == 0) {\n                                    int64_t v83 = v82 >= 0x1000 ? v82 : 0x1000; // 0x4057a1\n                                    int64_t v84 = function_40a560(v83); // 0x4057ad\n                                    v38 = v83;\n                                    v40 = v84;\n                                    goto lab_0x405607;\n                                } else {\n                                    // 0x4055fc\n                                    v38 = v51;\n                                    v40 = v39;\n                                    if (v82 > v51) {\n                                        int64_t v85 = function_40a5c0(v39, v82); // 0x405862\n                                        v38 = v82;\n                                        v40 = v85;\n                                        goto lab_0x405607;\n                                    } else {\n                                        goto lab_0x405607;\n                                    }\n                                }\n                            }\n                            int32_t * v86 = __errno_location(); // 0x4057f3\n                            uint32_t v87 = *v86; // 0x405800\n                            v43 = v44;\n                            if (v2 == 2 != v87 != 12) {\n                                // 0x405671\n                                v31 = v87;\n                                v33 = v86;\n                                goto lab_0x405671_2;\n                            }\n                        }\n                        goto lab_0x4054a9;\n                    }\n                    case 0x4000: {\n                        goto lab_0x405404;\n                    }\n                    default: {\n                        goto lab_0x4053f3;\n                    }\n                }\n            } else {\n                int32_t * v88 = __errno_location(); // 0x405457\n                uint32_t v89 = *v88; // 0x40545f\n                if (v2 == 0) {\n                    // 0x405755\n                    v32 = v89;\n                    v34 = v88;\n                    goto lab_0x405755_3;\n                }\n                // 0x40546d\n                v54 = 0;\n                if (v2 != 1) {\n                    // break -> 0x4053f3\n                    break;\n                }\n                char v90 = *(char *)(v46 + (int64_t)strspn(str3, \"/\")); // 0x405495\n                v43 = v42;\n                if (v89 == 2 != (v90 == 0)) {\n                    // 0x405755\n                    v32 = v89;\n                    v34 = v88;\n                    goto lab_0x405755_3;\n                }\n                goto lab_0x4054a9;\n            }\n        }\n      lab_0x4053f3:\n        // 0x4053f3\n        v14 = str3;\n        v10 = v52;\n        v11 = v42;\n        v12 = v51;\n        v13 = v39;\n        v37 = v54;\n        v15 = v19;\n        v18 = v46;\n        if (v2 != 2 == (*str3 != 0)) {\n            // 0x405748\n            v32 = 20;\n            v34 = __errno_location();\n            goto lab_0x405755_3;\n        }\n        goto lab_0x405404;\n    }\n  lab_0x405500_3:;\n    char * v91; // 0x405250\n    int64_t v92; // 0x405250\n    int64_t v93; // 0x405250\n    if (v29 > v45) {\n        int64_t v94 = v29 - 1; // 0x40550a\n        char * v95 = (char *)v94;\n        v91 = v95;\n        v92 = v29;\n        v93 = v94;\n        if (*v95 == 47) {\n            goto lab_0x405518;\n        } else {\n            goto lab_0x405514;\n        }\n    } else {\n        goto lab_0x405514;\n    }\n  lab_0x4052f8:\n    // 0x4052f8\n    v24 = v47;\n    v28 = v27;\n    v22 = v46;\n    goto lab_0x4052f8_2;\n  lab_0x405404:\n    // 0x405404\n    v35 = v37;\n    goto lab_0x4052f8_4;\n  lab_0x4054a9:\n    // 0x4054a9\n    v41 = v43;\n    v23 = str3;\n    v26 = v19;\n    v21 = v46;\n    goto lab_0x4052f8_3;\n  lab_0x405514:\n    // 0x405514\n    v91 = (char *)v29;\n    v92 = v29 + 1;\n    v93 = v29;\n    goto lab_0x405518;\n  lab_0x405518:\n    // 0x405518\n    *v91 = 0;\n    int64_t v96 = v20; // 0x40551e\n    if (v25 != v92) {\n        // 0x405520\n        v96 = function_40a5c0(v20, 1 - v20 + v93);\n    }\n    // 0x405532\n    free((int64_t *)v39);\n    int64_t result = v96; // 0x405544\n    if (v42 != 0) {\n        // 0x405546\n        function_4066a0(v42);\n        result = v96;\n    }\n  lab_0x40554e:\n    // 0x40554e\n    return result;\n  lab_0x405830:;\n    int64_t v97 = v30 - 1; // 0x405830\n    v27 = v30;\n    if (*(char *)v97 == 47) {\n        goto lab_0x4052f8;\n    } else {\n        // 0x40583a\n        v27 = v97;\n        v30 = v97;\n        if (v20 != v97) {\n            goto lab_0x405830;\n        } else {\n            goto lab_0x4052f8;\n        }\n    }\n  lab_0x405755_3:\n    // 0x405755\n    free((int64_t *)v39);\n    free((int64_t *)v17);\n    int64_t v98 = v42; // 0x40577f\n    int64_t v99 = v32; // 0x40577f\n    int32_t * v100 = v34; // 0x40577f\n    if (v42 == 0) {\n        goto lab_0x4056b1;\n    } else {\n        goto lab_0x405695;\n    }\n  lab_0x4056b1:\n    // 0x4056b1\n    *v100 = (int32_t)(v99 & 0xffffffff);\n    result = 0;\n    goto lab_0x40554e;\n  lab_0x405695:\n    // 0x405695\n    function_4066a0(v98);\n    goto lab_0x4056b1;\n  lab_0x405671_2:\n    // 0x405671\n    free((int64_t *)v39);\n    free((int64_t *)v17);\n    v98 = v44;\n    v99 = v31;\n    v100 = v33;\n    goto lab_0x405695;\n  lab_0x405607:\n    // 0x405607\n    memmove((int64_t *)(v40 + v50), (int64_t *)v46, len3 + 1);\n    int64_t * v101 = (int64_t *)v49; // 0x405627\n    int64_t * dest_mem = memcpy((int64_t *)v40, v101, len2); // 0x405627\n    int64_t v102 = v17 + 1; // 0x405630\n    int64_t v103; // 0x405250\n    int64_t v104; // 0x405250\n    if (*str2 == 47) {\n        // 0x405816\n        *v48 = 47;\n        v103 = v102;\n        goto lab_0x40564c;\n    } else {\n        // 0x405643\n        v103 = v19;\n        if (v19 > v102) {\n            int64_t v105 = v19 - 1; // 0x40588c\n            v103 = v105;\n            if (v17 >= v105) {\n                goto lab_0x40564c;\n            } else {\n                // 0x405895\n                v103 = v105;\n                v104 = v105;\n                if (*(char *)(v19 - 2) == 47) {\n                    goto lab_0x40564c;\n                } else {\n                    goto lab_0x4058a2;\n                }\n            }\n        } else {\n            goto lab_0x40564c;\n        }\n    }\n  lab_0x40564c:;\n    int64_t v106 = (int64_t)dest_mem; // 0x405627\n    free(v101);\n    v14 = (char *)dest_mem;\n    v10 = v106;\n    v11 = v44;\n    v12 = v38;\n    v13 = v40;\n    v37 = v36;\n    v15 = v103;\n    v18 = v106;\n    goto lab_0x405404;\n  lab_0x4058a2:;\n    int64_t v107 = v104;\n    int64_t v108 = v107 - 1; // 0x4058a2\n    v103 = v17;\n    if (v17 == v108) {\n        goto lab_0x40564c;\n    } else {\n        // 0x4058af\n        v103 = v108;\n        v104 = v108;\n        if (*(char *)(v107 - 2) == 47) {\n            goto lab_0x40564c;\n        } else {\n            goto lab_0x4058a2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_4058d0",
            "funcStartAddr": "4058d0",
            "funcEndAddr": "4058d8",
            "decompiledFuncCode": "int64_t function_4058d0(int64_t a1) {\n    // 0x4058d0\n    g70 = a1;\n    int64_t result; // 0x4058d0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058e0",
            "funcStartAddr": "4058e0",
            "funcEndAddr": "4058e8",
            "decompiledFuncCode": "int64_t function_4058e0(int64_t a1) {\n    // 0x4058e0\n    g69 = a1;\n    int64_t result; // 0x4058e0\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058f0",
            "funcStartAddr": "4058f0",
            "funcEndAddr": "40598e",
            "decompiledFuncCode": "int64_t function_4058f0(void) {\n    // 0x4058f0\n    int32_t * err_num; // 0x405906\n    if ((int32_t)function_40db30((int64_t)g38) == 0) {\n        goto lab_0x40591c;\n    } else {\n        // 0x405906\n        err_num = __errno_location();\n        if (g69 == 0) {\n            goto lab_0x405933;\n        } else {\n            // 0x405917\n            if (*err_num != 32) {\n                goto lab_0x405933;\n            } else {\n                goto lab_0x40591c;\n            }\n        }\n    }\n  lab_0x40591c:;\n    int64_t result = function_40db30((int64_t)g40); // 0x405923\n    if ((int32_t)result == 0) {\n        // 0x40592c\n        return result;\n    }\n    // 0x40596e\n    _exit(g26);\n    // UNREACHABLE\n  lab_0x405933:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x40593f\n    if (g70 == 0) {\n        // 0x405979\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x405953\n        error(0, *err_num, \"%s: %s\", (char *)function_409c30((int64_t)g70), v1);\n    }\n    // 0x40596e\n    _exit(g26);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405990",
            "funcStartAddr": "405990",
            "funcEndAddr": "4059a8",
            "decompiledFuncCode": "int64_t function_405990(void) {\n    // 0x405990\n    int64_t v1; // 0x405990\n    int64_t result = function_405a10(v1); // 0x405994\n    if (result != 0) {\n        // 0x40599e\n        return result;\n    }\n    // 0x4059a3\n    function_40a7b0(v1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4059b0",
            "funcStartAddr": "4059b0",
            "funcEndAddr": "405a0d",
            "decompiledFuncCode": "int64_t function_4059b0(int64_t a1) {\n    // 0x4059b0\n    int64_t v1; // 0x4059b0\n    uint64_t v2 = (int64_t)((char)v1 == 47); // 0x4059be\n    int64_t v3 = function_405a70(a1, v1); // 0x4059c2\n    int64_t result = v3 - a1; // 0x4059ca\n    if (result <= v2 || *(char *)(v3 - 1) != 47) {\n        // 0x4059f3\n        return result;\n    }\n    int64_t result2 = result;\n    result2--;\n    while (result2 != v2) {\n        // 0x4059e0\n        if (*(char *)(a1 - 1 + result2) != 47) {\n            // break -> 0x4059f3\n            break;\n        }\n        result2--;\n    }\n    // 0x4059f3\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405a10",
            "funcStartAddr": "405a10",
            "funcEndAddr": "405a6a",
            "decompiledFuncCode": "int64_t function_405a10(int64_t a1) {\n    // 0x405a10\n    int64_t v1; // 0x405a10\n    int64_t v2 = v1;\n    int64_t * mem = malloc((int32_t)(v2 + 1 + (int64_t)(v2 == 0))); // 0x405a2f\n    if (mem == NULL) {\n        // 0x405a56\n        return (int64_t)mem;\n    }\n    int64_t * dest_mem = memcpy(mem, (int64_t *)a1, (int32_t)v2); // 0x405a45\n    int64_t v3; // 0x405a10\n    if (v2 == 0) {\n        // 0x405a60\n        *(char *)dest_mem = 46;\n        v3 = 1;\n    }\n    int64_t result = (int64_t)dest_mem; // 0x405a45\n    *(char *)(v3 + result) = 0;\n    // 0x405a56\n    return result;\n}\n"
        },
        {
            "funcName": "function_405a70",
            "funcStartAddr": "405a70",
            "funcEndAddr": "405acb",
            "decompiledFuncCode": "int64_t function_405a70(int64_t a1, int64_t a2) {\n    // 0x405a70\n    int64_t v1; // 0x405a70\n    char v2 = v1;\n    int64_t v3 = a1; // 0x405a79\n    int64_t v4 = a1; // 0x405a79\n    char v5 = v2; // 0x405a79\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x405a84\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x405a80\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x405a8e\n    if (v5 == 0) {\n      lab_0x405aca:\n        // 0x405aca\n        return result;\n    }\n    int64_t v7 = v4; // 0x405ab8\n    int64_t v8 = 0; // 0x405ab8\n    int64_t v9; // 0x405a70\n    int64_t v10; // 0x405aba\n    char v11; // 0x405abe\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x405ab5\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x405aba\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x405ab5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x405aaa\n    char v14 = *(char *)v13; // 0x405aae\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x405ab5\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x405aba\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x405ab5\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x405aa0\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x405aca\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405ad0",
            "funcStartAddr": "405ad0",
            "funcEndAddr": "405afb",
            "decompiledFuncCode": "int64_t function_405ad0(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x405ad4\n    int64_t result = len; // 0x405ad4\n    if (len < 2) {\n        // 0x405aea\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x405ae8\n    while (*(char *)(v1 + str) == 47) {\n        // 0x405af0\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x405aea\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x405aea\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405b00",
            "funcStartAddr": "405b00",
            "funcEndAddr": "405b86",
            "decompiledFuncCode": "int64_t function_405b00(int64_t a1, int64_t a2, int64_t * a3) {\n    if (a1 == 0) {\n        // 0x405b70\n        int64_t result; // 0x405b00\n        return result;\n    }\n    int64_t v1 = (int64_t)a3;\n    int64_t result2 = function_40a560(24); // 0x405b1d\n    *(int64_t *)result2 = function_40a790(a2);\n    *(int64_t *)(result2 + 8) = *(int64_t *)(v1 + 8);\n    *(int64_t *)(result2 + 16) = v1;\n    int64_t v2 = function_406c00(a1, result2); // 0x405b46\n    if (v2 == 0) {\n        // 0x405b81\n        function_40a7b0(a1);\n        // UNREACHABLE\n    }\n    // 0x405b50\n    if (result2 == v2) {\n        // 0x405b70\n        return result2;\n    }\n    // 0x405b55\n    return function_406ed0(result2);\n}\n"
        },
        {
            "funcName": "function_405b90",
            "funcStartAddr": "405b90",
            "funcEndAddr": "405bcb",
            "decompiledFuncCode": "int64_t function_405b90(int64_t a1, int64_t a2, int64_t * a3) {\n    if (a1 == 0) {\n        // 0x405bc8\n        return 0;\n    }\n    int64_t v1 = a2; // bp-40, 0x405b9d\n    int64_t v2 = function_4061f0(a1, &v1); // 0x405bb1\n    return v2 & -256 | (int64_t)(v2 != 0);\n}\n"
        },
        {
            "funcName": "function_405bd0",
            "funcStartAddr": "405bd0",
            "funcEndAddr": "405c63",
            "decompiledFuncCode": "int64_t function_405bd0(uint64_t a1) {\n    int64_t v1 = a1 >= 10 ? a1 | 1 : 11; // 0x405be7\n    if (v1 == -1) {\n        // 0x405c5f\n        return -1;\n    }\n    int64_t v2 = v1; // 0x405bef\n    int64_t v3; // 0x405bd0\n    while (true) {\n      lab_0x405bf8:\n        // 0x405bf8\n        v3 = v2;\n        if (v3 < 10) {\n            goto lab_0x405c50;\n        } else {\n            goto lab_0x405c55;\n        }\n    }\n  lab_0x405c5f_2:;\n    // 0x405c5f\n    int64_t result; // 0x405bd0\n    return result;\n  lab_0x405c55:;\n    int64_t v4 = v3 + 2; // 0x405c55\n    v2 = v4;\n    result = v4;\n    if (v3 == -3) {\n        // break -> 0x405c5f\n        goto lab_0x405c5f_2;\n    }\n    goto lab_0x405bf8;\n  lab_0x405c50:\n    // 0x405c50\n    result = v3;\n    goto lab_0x405c55;\n}\n"
        },
        {
            "funcName": "function_405c70",
            "funcStartAddr": "405c70",
            "funcEndAddr": "405c80",
            "decompiledFuncCode": "int64_t function_405c70(uint64_t a1, uint64_t a2, int64_t a3) {\n    // 0x405c70\n    return (a1 / 8 | 0x2000000000000000 * a1) % a2;\n}\n"
        },
        {
            "funcName": "function_405c80",
            "funcStartAddr": "405c80",
            "funcEndAddr": "405c87",
            "decompiledFuncCode": "int64_t function_405c80(int64_t a1, int64_t a2) {\n    // 0x405c80\n    int64_t v1; // 0x405c80\n    return v1 & -256 | (int64_t)(a1 == a2);\n}\n"
        },
        {
            "funcName": "function_405c90",
            "funcStartAddr": "405c90",
            "funcEndAddr": "405cb1",
            "decompiledFuncCode": "int64_t function_405c90(int64_t a1, int64_t a2) {\n    // 0x405c90\n    int64_t v1; // 0x405c90\n    uint64_t v2 = v1;\n    if (*(int64_t *)(a1 + 16) > v2) {\n        // 0x405ca8\n        return 16 * v2 + a2;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405cc0",
            "funcStartAddr": "405cc0",
            "funcEndAddr": "405dd9",
            "decompiledFuncCode": "int64_t function_405cc0(int64_t a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = function_405c90(a1, a2); // 0x405cd4\n    *a3 = v1;\n    int64_t * v2 = (int64_t *)v1; // 0x405cdc\n    int64_t result2 = *v2; // 0x405cdc\n    if (result2 == 0) {\n        // 0x405d6e\n        return 0;\n    }\n    if (result2 != a2) {\n        if ((char)v1 == 0) {\n            int64_t v3 = *(int64_t *)(v1 + 8); // 0x405d04\n            if (v3 == 0) {\n                // 0x405d6e\n                return 0;\n            }\n            int64_t v4 = *(int64_t *)v3; // 0x405d11\n            int64_t v5 = v3; // 0x405d17\n            int64_t v6 = v1; // 0x405d17\n            int64_t result = v4; // 0x405d17\n            if (v4 != a2 != ((char)v3 == 0)) {\n              lab_0x405d4c_2:\n                // 0x405d4c\n                if ((char)a4 != 0) {\n                    int64_t * v7 = (int64_t *)(v5 + 8); // 0x405d51\n                    *(int64_t *)(v6 + 8) = *v7;\n                    *(int64_t *)v5 = 0;\n                    int64_t * v8 = (int64_t *)(a1 + 72); // 0x405d60\n                    *v7 = *v8;\n                    *v8 = v5;\n                }\n                // 0x405d6e\n                return result;\n            }\n            int64_t v9 = v3;\n            int64_t v10 = *(int64_t *)(v9 + 8); // 0x405d24\n            while (v10 != 0) {\n                int64_t v11 = *(int64_t *)v10; // 0x405d31\n                v5 = v10;\n                v6 = v9;\n                result = a2;\n                if (v11 == a2) {\n                    goto lab_0x405d4c_2;\n                }\n                // 0x405d39\n                v5 = v10;\n                v6 = v9;\n                result = v11;\n                if ((char)v10 != 0) {\n                    goto lab_0x405d4c_2;\n                }\n                v9 = v10;\n                v10 = *(int64_t *)(v9 + 8);\n            }\n            // 0x405d6e\n            return 0;\n        }\n    }\n    // 0x405d83\n    if ((char)a4 == 0) {\n        // 0x405d6e\n        return result2;\n    }\n    int64_t v12 = *(int64_t *)(v1 + 8); // 0x405d88\n    if (v12 == 0) {\n        // 0x405dd0\n        *v2 = 0;\n        // 0x405d6e\n        return result2;\n    }\n    // 0x405d91\n    __asm_movups(*(int128_t *)v1, __asm_movdqu(*(int128_t *)v12));\n    *(int64_t *)v12 = 0;\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x405d9f\n    *(int64_t *)(v12 + 8) = *v13;\n    *v13 = v12;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405de0",
            "funcStartAddr": "405de0",
            "funcEndAddr": "405e5e",
            "decompiledFuncCode": "int64_t function_405de0(uint64_t a1) {\n    if (a1 == (int64_t)&g4) {\n        // 0x405e5d\n        return 1;\n    }\n    int128_t v1 = __asm_movss(*(int32_t *)(a1 + 8)); // 0x405deb\n    __asm_comiss(v1, 0x3dcccccd);\n    if (a1 <= (int64_t)&g4) {\n        // 0x405e4a\n        *(int64_t *)a1 = (int64_t)&g4;\n        return 0;\n    }\n    // 0x405df9\n    __asm_comiss_1(__asm_movss(0x3f666666), v1);\n    __asm_comiss(__asm_movss(*(int32_t *)(a1 + 12)), 0x3f8ccccd);\n    int128_t v2 = __asm_movss((int32_t)a1); // 0x405e14\n    __asm_comiss(v2, 0);\n    int128_t v3 = __asm_addss_2(v2, 0x3dcccccd); // 0x405e21\n    int128_t v4 = __asm_movss(*(int32_t *)(a1 + 4)); // 0x405e29\n    __asm_comiss_1(v4, v3);\n    __asm_comiss_1(__asm_movss(0x3f800000), v4);\n    __asm_comiss_1(v1, v3);\n    // 0x405e5d\n    return 1;\n}\n"
        },
        {
            "funcName": "function_405e60",
            "funcStartAddr": "405e60",
            "funcEndAddr": "405faa",
            "decompiledFuncCode": "int64_t function_405e60(int64_t * a1, uint64_t a2, int32_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x405e7a\n    uint64_t v2 = *v1; // 0x405e7a\n    if (v2 <= a2) {\n        // 0x405f64\n        return 1;\n    }\n    int64_t v3 = (int64_t)a1;\n    int64_t * v4 = (int64_t *)(v3 + 24);\n    int64_t * v5 = (int64_t *)(v3 + 72);\n    int64_t * v6 = (int64_t *)(a2 + 24);\n    int64_t v7 = v2; // 0x405e60\n    int64_t v8 = a2; // 0x405e60\n    int64_t v9; // 0x405e60\n    int64_t result; // 0x405e60\n    int64_t v10; // 0x405e60\n    while (true) {\n      lab_0x405e96_2:\n        // 0x405e96\n        v10 = v8;\n        int64_t * v11 = (int64_t *)v10; // 0x405e96\n        int64_t v12 = *v11; // 0x405e96\n        v9 = v7;\n        if (v12 == 0) {\n            goto lab_0x405e88;\n        } else {\n            int64_t * v13 = (int64_t *)(v10 + 8); // 0x405e9f\n            int64_t v14 = *v13; // 0x405e9f\n            int64_t v15 = v14; // 0x405ea7\n            int64_t v16 = v12; // 0x405ea7\n            if (v14 != 0) {\n                while (true) {\n                    int64_t v17 = v15;\n                    int64_t * v18 = (int64_t *)v17; // 0x405ec4\n                    int64_t v19 = *v18; // 0x405ec4\n                    int64_t v20 = function_405c90(v3, v19); // 0x405ecd\n                    int64_t * v21 = (int64_t *)(v17 + 8); // 0x405ed2\n                    int64_t v22 = *v21; // 0x405ed2\n                    int64_t * v23 = (int64_t *)v20; // 0x405ed6\n                    if (*v23 != 0) {\n                        int64_t * v24 = (int64_t *)(v20 + 8); // 0x405eb0\n                        *v21 = *v24;\n                        *v24 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x405eff\n                            break;\n                        }\n                    } else {\n                        // 0x405edc\n                        *v23 = v19;\n                        *v4 = *v4 + 1;\n                        *v18 = 0;\n                        *v21 = *v5;\n                        *v5 = v17;\n                        if (v22 == 0) {\n                            // break -> 0x405eff\n                            break;\n                        }\n                    }\n                    // 0x405ec4\n                    v15 = v22;\n                }\n                // 0x405eff\n                v16 = *v11;\n            }\n            int64_t v25 = v16;\n            *v13 = 0;\n            if ((char)a3 != 0) {\n                // 0x405f03\n                v9 = *v1;\n                goto lab_0x405e88;\n            } else {\n                int64_t v26 = function_405c90(v3, v25); // 0x405f1b\n                int64_t * v27 = (int64_t *)v26; // 0x405f20\n                if (*v27 == 0) {\n                    // 0x405f80\n                    *v27 = v25;\n                    *v4 = *v4 + 1;\n                } else {\n                    int64_t v28 = *v5; // 0x405f29\n                    int64_t * v29; // 0x405e60\n                    int64_t v30; // 0x405e60\n                    if (v28 == 0) {\n                        int64_t * mem = malloc(16); // 0x405f8f\n                        result = 0;\n                        if (mem == NULL) {\n                            // break -> 0x405f64\n                            break;\n                        }\n                        int64_t v31 = (int64_t)mem; // 0x405f8f\n                        v29 = (int64_t *)(v31 + 8);\n                        v30 = v31;\n                    } else {\n                        int64_t * v32 = (int64_t *)(v28 + 8);\n                        *v5 = *v32;\n                        v29 = v32;\n                        v30 = v28;\n                    }\n                    int64_t * v33 = (int64_t *)(v26 + 8); // 0x405f3a\n                    *(int64_t *)v30 = v25;\n                    *v29 = *v33;\n                    *v33 = v30;\n                }\n                // 0x405f49\n                *v11 = 0;\n                int64_t v34 = v10 + 16; // 0x405f51\n                *v6 = *v6 - 1;\n                uint64_t v35 = *v1; // 0x405f5a\n                v7 = v35;\n                v8 = v34;\n                result = 1;\n                if (v35 <= v34) {\n                    // break -> 0x405f64\n                    break;\n                }\n                goto lab_0x405e96_2;\n            }\n        }\n    }\n    // 0x405f64\n    return result;\n  lab_0x405e88:;\n    int64_t v36 = v10 + 16; // 0x405e88\n    v7 = v9;\n    v8 = v36;\n    result = 1;\n    if (v9 <= v36) {\n        return result;\n    }\n    goto lab_0x405e96_2;\n    // 0x405e96\n    goto lab_0x405e96_2;\n}\n"
        },
        {
            "funcName": "function_405fb0",
            "funcStartAddr": "405fb0",
            "funcEndAddr": "405fb5",
            "decompiledFuncCode": "int64_t function_405fb0(int64_t a1) {\n    // 0x405fb0\n    return *(int64_t *)(a1 + 16);\n}\n"
        },
        {
            "funcName": "function_405fc0",
            "funcStartAddr": "405fc0",
            "funcEndAddr": "405fc5",
            "decompiledFuncCode": "int64_t function_405fc0(int64_t a1) {\n    // 0x405fc0\n    return *(int64_t *)(a1 + 24);\n}\n"
        },
        {
            "funcName": "function_405fd0",
            "funcStartAddr": "405fd0",
            "funcEndAddr": "405fd5",
            "decompiledFuncCode": "int64_t function_405fd0(int64_t a1) {\n    // 0x405fd0\n    return *(int64_t *)(a1 + 32);\n}\n"
        },
        {
            "funcName": "function_405fe0",
            "funcStartAddr": "405fe0",
            "funcEndAddr": "40602f",
            "decompiledFuncCode": "int64_t function_405fe0(uint64_t a1) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x405fe3\n    int64_t result = 0; // 0x405fec\n    if (v1 <= a1) {\n      lab_0x40602d:\n        // 0x40602d\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = a1;\n    int64_t v4; // 0x405ff0\n    while (*(int64_t *)v3 == 0) {\n        // 0x405ff0\n        v4 = v3 + 16;\n        result = v2;\n        if (v4 >= v1) {\n            return result;\n        }\n        v3 = v4;\n    }\n    int64_t v5 = *(int64_t *)(v3 + 8); // 0x405fff\n    int64_t v6 = v5; // 0x40600b\n    int64_t v7 = 1; // 0x40600b\n    int64_t v8; // 0x405fe0\n    int64_t v9; // 0x406010\n    int64_t v10; // 0x406014\n    if (v5 != 0) {\n        v9 = *(int64_t *)(v6 + 8);\n        v10 = 2;\n        v8 = v10;\n        v6 = v9;\n        v7 = v10;\n        while (v9 != 0) {\n            // 0x406010\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = v8 + 1;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n        }\n    }\n    uint64_t v11 = v7;\n    int64_t result2 = v2 < v11 ? v11 : v2; // 0x406020\n    int64_t v12 = v3 + 16; // 0x406024\n    while (v12 < v1) {\n        // 0x405ff9\n        v2 = result2;\n        v3 = v12;\n        while (*(int64_t *)v3 == 0) {\n            // 0x405ff0\n            v4 = v3 + 16;\n            result = v2;\n            if (v4 >= v1) {\n                return result;\n            }\n            v3 = v4;\n        }\n        // 0x405fff\n        v5 = *(int64_t *)(v3 + 8);\n        v6 = v5;\n        v7 = 1;\n        if (v5 != 0) {\n            v9 = *(int64_t *)(v6 + 8);\n            v10 = 2;\n            v8 = v10;\n            v6 = v9;\n            v7 = v10;\n            while (v9 != 0) {\n                // 0x406010\n                v9 = *(int64_t *)(v6 + 8);\n                v10 = v8 + 1;\n                v8 = v10;\n                v6 = v9;\n                v7 = v10;\n            }\n        }\n        // 0x40601d\n        v11 = v7;\n        result2 = v2 < v11 ? v11 : v2;\n        v12 = v3 + 16;\n    }\n    // 0x40602d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406030",
            "funcStartAddr": "406030",
            "funcEndAddr": "406097",
            "decompiledFuncCode": "int64_t function_406030(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x406033\n    int64_t v2 = a1; // 0x40603f\n    int64_t v3 = 0; // 0x40603f\n    int64_t v4 = 0; // 0x40603f\n    int64_t v5 = 0; // 0x40603f\n    int64_t v6 = 0; // 0x40603f\n    int64_t v7; // 0x406030\n    int64_t v8; // 0x406030\n    int64_t v9; // 0x406030\n    if (v1 > a1) {\n        while (true) {\n          lab_0x406051_2:;\n            int64_t v10 = v4;\n            int64_t v11 = v3;\n            v8 = v2;\n            v9 = v11;\n            v7 = v10;\n            if (*(int64_t *)v8 == 0) {\n                goto lab_0x406048;\n            } else {\n                int64_t v12 = *(int64_t *)(v8 + 8); // 0x406057\n                int64_t v13 = v10 + 1; // 0x40605b\n                int64_t v14 = v11 + 1; // 0x40605f\n                v9 = v14;\n                v7 = v13;\n                int64_t v15 = v12; // 0x406066\n                int64_t v16 = v14; // 0x406066\n                if (v12 == 0) {\n                    goto lab_0x406048;\n                } else {\n                    int64_t v17 = *(int64_t *)(v15 + 8); // 0x406070\n                    int64_t v18 = v16 + 1; // 0x406074\n                    v15 = v17;\n                    v16 = v18;\n                    while (v17 != 0) {\n                        // 0x406070\n                        v17 = *(int64_t *)(v15 + 8);\n                        v18 = v16 + 1;\n                        v15 = v17;\n                        v16 = v18;\n                    }\n                    int64_t v19 = v8 + 16; // 0x40607d\n                    v2 = v19;\n                    v3 = v18;\n                    v4 = v13;\n                    v5 = v18;\n                    v6 = v13;\n                    if (v19 >= v1) {\n                        // break -> 0x406086\n                        break;\n                    }\n                    goto lab_0x406051_2;\n                }\n            }\n        }\n    }\n  lab_0x406086:\n    // 0x406086\n    if (*(int64_t *)(a1 + 24) == v6) {\n        // 0x40608f\n        return *(int64_t *)(a1 + 32) == v5;\n    }\n    // 0x40608e\n    return 0;\n  lab_0x406048:;\n    int64_t v20 = v8 + 16; // 0x406048\n    v2 = v20;\n    v3 = v9;\n    v4 = v7;\n    v5 = v9;\n    v6 = v7;\n    if (v20 >= v1) {\n        // break -> 0x406086\n        goto lab_0x406086;\n    }\n    goto lab_0x406051_2;\n    // 0x406051\n    goto lab_0x406051_2;\n}\n"
        },
        {
            "funcName": "function_4060a0",
            "funcStartAddr": "4060a0",
            "funcEndAddr": "4061e8",
            "decompiledFuncCode": "int64_t function_4060a0(uint64_t a1, int64_t a2) {\n    // 0x4060a0\n    int128_t v1; // 0x4060a0\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    uint64_t v4 = *(int64_t *)(a1 + 16); // 0x4060b3\n    uint64_t v5 = *(int64_t *)(a1 + 24); // 0x4060b7\n    uint64_t v6 = *(int64_t *)(a1 + 8); // 0x4060be\n    if (v6 > a1) {\n        while (true) {\n            int64_t v7 = a1; // 0x4060d0\n            while (*(int64_t *)v7 == 0) {\n                // 0x4060d0\n                v7 += 16;\n                if (v7 >= v6) {\n                    // break (via goto) -> 0x40610d\n                    goto lab_0x40610d;\n                }\n            }\n        }\n    }\n  lab_0x40610d:;\n    struct _IO_FILE * v8 = (struct _IO_FILE *)a2; // 0x40611c\n    __fprintf_chk(v8, 1, \"# entries:         %lu\\n\", (int32_t)*(int64_t *)(a1 + 32));\n    __fprintf_chk(v8, 1, \"# buckets:         %lu\\n\", (int32_t)v4);\n    __asm_pxor(v3, v3);\n    int128_t v9; // 0x4060a0\n    int128_t v10; // 0x4060a0\n    if (v5 < 0) {\n        int128_t v11 = __asm_cvtsi2sd(v5 / 2 | v5 % 2); // 0x4061b3\n        int128_t v12 = __asm_mulsd(__asm_addsd(v11, v11), 0x4059000000000000); // 0x4061bc\n        v9 = v12;\n        v10 = v12;\n        if (v4 >= 0) {\n            goto lab_0x406153;\n        } else {\n            goto lab_0x4061c9;\n        }\n    } else {\n        int128_t v13 = __asm_mulsd(__asm_cvtsi2sd(v5), 0x4059000000000000); // 0x406146\n        v9 = v13;\n        v10 = v13;\n        if (v4 < 0) {\n            goto lab_0x4061c9;\n        } else {\n            goto lab_0x406153;\n        }\n    }\n  lab_0x406153:\n    // 0x406153\n    __asm_pxor(v2, v2);\n    int128_t v14 = v9; // 0x406157\n    int128_t v15 = __asm_cvtsi2sd(v4); // 0x406157\n    goto lab_0x40615c;\n  lab_0x4061c9:\n    // 0x4061c9\n    __asm_pxor(v2, v2);\n    int128_t v16 = __asm_cvtsi2sd(v4 / 2 | v4 % 2); // 0x4061da\n    v14 = v10;\n    v15 = __asm_addsd(v16, v16);\n    goto lab_0x40615c;\n  lab_0x40615c:\n    // 0x40615c\n    __fprintf_chk(v8, 1, \"# buckets used:    %lu (%.2f%%)\\n\", (int32_t)v5, (float64_t)(int64_t)__asm_divsd(v14, v15));\n    return __fprintf_chk(v8, 1, \"max bucket length: %lu\\n\", (int32_t)0);\n}\n"
        },
        {
            "funcName": "function_4061f0",
            "funcStartAddr": "4061f0",
            "funcEndAddr": "406243",
            "decompiledFuncCode": "int64_t function_4061f0(int64_t a1, int64_t * a2) {\n    int64_t result = (int64_t)a2;\n    int64_t v1 = function_405c90(a1, result); // 0x4061fa\n    int64_t v2 = *(int64_t *)v1; // 0x4061ff\n    if (v2 == 0) {\n        // 0x40622d\n        return 0;\n    }\n    // 0x406213\n    if (v2 == result) {\n        // 0x40622d\n        return result;\n    }\n    int64_t v3 = v1; // 0x406224\n    int64_t result2 = v2; // 0x406222\n    while ((char)v1 == 0) {\n        // 0x406224\n        v3 += 8;\n        result2 = 0;\n        if (v3 == 0) {\n            // break -> 0x40622d\n            break;\n        }\n        // 0x406210\n        result2 = result;\n        if (*(int64_t *)v3 == result) {\n            // break -> 0x40622d\n            break;\n        }\n        result2 = v2;\n    }\n    // 0x40622d\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406250",
            "funcStartAddr": "406250",
            "funcEndAddr": "406298",
            "decompiledFuncCode": "int64_t function_406250(uint64_t a1) {\n    int64_t result = 0; // 0x406255\n    if (*(int64_t *)(a1 + 32) == 0) {\n        // 0x406267\n        return result;\n    }\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x40625e\n    if (v1 <= a1) {\n        // 0x406267\n        return result;\n    }\n    int64_t v2 = a1; // 0x406265\n    int64_t v3 = *(int64_t *)v2; // 0x406279\n    result = v3;\n    while (v3 == 0) {\n        // 0x406270\n        v2 += 16;\n        result = 0;\n        if (v2 >= v1) {\n            // break -> 0x406267\n            break;\n        }\n        v3 = *(int64_t *)v2;\n        result = v3;\n    }\n    // 0x406267\n    return result;\n}\n"
        },
        {
            "funcName": "function_4062a0",
            "funcStartAddr": "4062a0",
            "funcEndAddr": "40630a",
            "decompiledFuncCode": "int64_t function_4062a0(int64_t a1, int64_t a2) {\n    int64_t v1 = function_405c90(a1, a2); // 0x4062ac\n    int64_t v2 = v1;\n    int64_t v3 = *(int64_t *)(v2 + 8); // 0x4062c8\n    while (*(int64_t *)v2 != a2) {\n        // 0x4062c0\n        if (v3 == 0) {\n            goto lab_0x4062d6;\n        }\n        v2 = v3;\n        v3 = *(int64_t *)(v2 + 8);\n    }\n    if (v3 != 0) {\n        // 0x406300\n        return *(int64_t *)v3;\n    }\n  lab_0x4062d6:;\n    int64_t v4 = v1 + 16; // 0x4062e8\n    int64_t result = 0; // 0x4062ef\n    while (*(int64_t *)(a1 + 8) > v4) {\n        int64_t v5 = *(int64_t *)v4; // 0x4062e0\n        result = v5;\n        if (v5 != 0) {\n            // break -> 0x4062f3\n            break;\n        }\n        v4 += 16;\n        result = 0;\n    }\n    // 0x4062f3\n    return result;\n}\n"
        },
        {
            "funcName": "function_406310",
            "funcStartAddr": "406310",
            "funcEndAddr": "406374",
            "decompiledFuncCode": "int64_t function_406310(uint64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x406316\n    int64_t result = 0; // 0x40631a\n    if (*v1 <= a1) {\n      lab_0x406331:\n        // 0x406331\n        return result;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = *(int64_t *)a1; // 0x40631f\n    int64_t v4 = v2; // 0x406325\n    int64_t v5; // 0x406310\n    int64_t v6; // 0x406310\n    int64_t v7; // 0x406358\n    int64_t v8; // 0x406361\n    int64_t v9; // 0x406341\n    int64_t v10; // 0x406345\n    if (v3 != 0) {\n        // 0x406338\n        if (v2 >= a3) {\n            // break -> 0x406331\n            break;\n        }\n        // 0x40633d\n        *(int64_t *)(8 * v2 + a2) = v3;\n        v9 = *(int64_t *)(a1 + 8);\n        v10 = v2 + 1;\n        v4 = v10;\n        v6 = v10;\n        v5 = v9;\n        if (v9 != 0) {\n            result = a3;\n            if (v6 == a3) {\n                return result;\n            }\n            // 0x406355\n            v7 = v6 + 1;\n            *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n            v8 = *(int64_t *)(v5 + 8);\n            v4 = v7;\n            v6 = v7;\n            v5 = v8;\n            while (v8 != 0) {\n                // 0x406350\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x406355\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n            }\n        }\n    }\n    int64_t v11 = v4;\n    int64_t v12 = a1 + 16; // 0x406327\n    result = v11;\n    while (*v1 > v12) {\n        // 0x40631f\n        v2 = v11;\n        int64_t v13 = v12;\n        v3 = *(int64_t *)v13;\n        v4 = v2;\n        if (v3 != 0) {\n            // 0x406338\n            result = v2;\n            if (v2 >= a3) {\n                // break -> 0x406331\n                break;\n            }\n            // 0x40633d\n            *(int64_t *)(8 * v2 + a2) = v3;\n            v9 = *(int64_t *)(v13 + 8);\n            v10 = v2 + 1;\n            v4 = v10;\n            v6 = v10;\n            v5 = v9;\n            if (v9 != 0) {\n                result = a3;\n                if (v6 == a3) {\n                    return result;\n                }\n                // 0x406355\n                v7 = v6 + 1;\n                *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                v8 = *(int64_t *)(v5 + 8);\n                v4 = v7;\n                v6 = v7;\n                v5 = v8;\n                while (v8 != 0) {\n                    // 0x406350\n                    result = a3;\n                    if (v6 == a3) {\n                        return result;\n                    }\n                    // 0x406355\n                    v7 = v6 + 1;\n                    *(int64_t *)(a2 - 8 + 8 * v7) = *(int64_t *)v5;\n                    v8 = *(int64_t *)(v5 + 8);\n                    v4 = v7;\n                    v6 = v7;\n                    v5 = v8;\n                }\n            }\n        }\n        // 0x406327\n        v11 = v4;\n        v12 = v13 + 16;\n        result = v11;\n    }\n    // 0x406331\n    return result;\n}\n"
        },
        {
            "funcName": "function_406380",
            "funcStartAddr": "406380",
            "funcEndAddr": "4063f8",
            "decompiledFuncCode": "int64_t function_406380(uint64_t a1, int64_t a2, int64_t a3) {\n    uint64_t v1 = *(int64_t *)(a1 + 8); // 0x406391\n    int64_t result = 0; // 0x406395\n    if (v1 <= a1) {\n      lab_0x4063b4:\n        // 0x4063b4\n        return result;\n    }\n    int64_t v2 = a1; // 0x4063aa\n    int64_t v3 = 0;\n    int64_t v4 = v3; // 0x4063a8\n    int64_t v5 = v2; // 0x4063a8\n    int64_t v6 = v3; // 0x4063a8\n    int64_t v7; // 0x406380\n    int64_t v8; // 0x4063d8\n    int64_t v9; // 0x4063dc\n    if (*(int64_t *)v2 != 0) {\n        result = v3;\n        if ((char)v7 == 0) {\n            return result;\n        }\n        // 0x4063d8\n        v8 = *(int64_t *)(v5 + 8);\n        v9 = v6 + 1;\n        v4 = v9;\n        v5 = v8;\n        v6 = v9;\n        while (v8 != 0) {\n            // 0x4063e8\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x4063d8\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n        }\n    }\n    int64_t result2 = v4;\n    v2 += 16;\n    while (v1 > v2) {\n        // 0x4063a2\n        v3 = result2;\n        v4 = v3;\n        v5 = v2;\n        v6 = v3;\n        if (*(int64_t *)v2 != 0) {\n            result = v3;\n            if ((char)v7 == 0) {\n                return result;\n            }\n            // 0x4063d8\n            v8 = *(int64_t *)(v5 + 8);\n            v9 = v6 + 1;\n            v4 = v9;\n            v5 = v8;\n            v6 = v9;\n            while (v8 != 0) {\n                // 0x4063e8\n                result = v3;\n                if ((char)v7 == 0) {\n                    return result;\n                }\n                // 0x4063d8\n                v8 = *(int64_t *)(v5 + 8);\n                v9 = v6 + 1;\n                v4 = v9;\n                v5 = v8;\n                v6 = v9;\n            }\n        }\n        // 0x4063aa\n        result2 = v4;\n        v2 += 16;\n    }\n    // 0x4063b4\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406400",
            "funcStartAddr": "406400",
            "funcEndAddr": "406431",
            "decompiledFuncCode": "int64_t function_406400(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x406407\n    if (v1 == 0) {\n        // 0x40642d\n        return 0;\n    }\n    int64_t result = 0; // 0x406407\n    v2++;\n    char v3 = *(char *)v2; // 0x406423\n    result = (31 * result + (int64_t)v1) % a2;\n    while (v3 != 0) {\n        unsigned char v4 = v3;\n        v2++;\n        v3 = *(char *)v2;\n        result = (31 * result + (int64_t)v4) % a2;\n    }\n    // 0x40642d\n    return result;\n}\n"
        },
        {
            "funcName": "function_406440",
            "funcStartAddr": "406440",
            "funcEndAddr": "406460",
            "decompiledFuncCode": "int64_t function_406440(int64_t a1) {\n    // 0x406440\n    *(char *)(a1 + 16) = 0;\n    *(int64_t *)a1 = 0x3f80000000000000;\n    *(int64_t *)(a1 + 8) = 0x3fb4fdf43f4ccccd;\n    return 0x3fb4fdf43f4ccccd;\n}\n"
        },
        {
            "funcName": "function_406460",
            "funcStartAddr": "406460",
            "funcEndAddr": "4065ea",
            "decompiledFuncCode": "int64_t function_406460(uint64_t a1, int32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x406460\n    int128_t v1; // 0x406460\n    int128_t v2 = v1;\n    int64_t * mem = malloc(80); // 0x40649a\n    int64_t result = (int64_t)mem; // 0x40649a\n    if (mem == NULL) {\n        // 0x40654a\n        return result;\n    }\n    int64_t v3 = result + 40; // 0x4064ab\n    int64_t * v4 = (int64_t *)v3;\n    int128_t v5; // 0x406460\n    int128_t v6; // 0x406460\n    if (a2 == 0) {\n        // 0x406560\n        *v4 = (int64_t)&g4;\n        int64_t v7 = function_405de0(v3); // 0x406568\n        int128_t v8 = __asm_movss(0x3f4ccccd); // 0x40656d\n        if ((char)v7 == 0) {\n            // 0x406540\n            free(mem);\n            // 0x40654a\n            return 0;\n        }\n        // 0x406579\n        v5 = v8;\n        v6 = v8;\n        if (a1 < 0) {\n            goto lab_0x4065c3;\n        } else {\n            goto lab_0x40657e;\n        }\n    } else {\n        int64_t v9 = a2;\n        *v4 = v9;\n        if ((char)function_405de0(v3) == 0) {\n            // 0x406540\n            free(mem);\n            // 0x40654a\n            return 0;\n        }\n        // 0x4064c5\n        if (*(char *)(v9 + 16) != 0) {\n            uint64_t nmemb = function_405bd0(a1); // 0x4064d3\n            if (nmemb % 0x1000000000000001 != 0) {\n                // 0x406540\n                free(mem);\n            }\n            if (nmemb >= 0x2000000000000000) {\n                // 0x406540\n                free(mem);\n                // 0x40654a\n                return 0;\n            }\n            // 0x4064f1\n            *(int64_t *)(result + 16) = nmemb;\n            if (nmemb == 0) {\n                // 0x406540\n                free(mem);\n                // 0x40654a\n                return 0;\n            }\n            int64_t * mem2 = calloc((int32_t)nmemb, 16); // 0x406502\n            int64_t v10 = (int64_t)mem2; // 0x406502\n            *mem = v10;\n            if (mem2 == NULL) {\n                // 0x406540\n                free(mem);\n                // 0x40654a\n                return 0;\n            }\n            // 0x40650f\n            *(int64_t *)(result + 24) = 0;\n            *(int64_t *)(result + 32) = 0;\n            *(int64_t *)(result + 8) = 16 * nmemb + v10;\n            *(int64_t *)(result + 48) = a3 == 0 ? 0x405c70 : a3;\n            *(int64_t *)(result + 56) = a4 == 0 ? 0x405c80 : a4;\n            *(int64_t *)(result + 64) = a5;\n            *(int64_t *)(result + 72) = 0;\n            // 0x40654a\n            return result;\n        }\n        int128_t v11 = __asm_movss(*(int32_t *)(v9 + 8)); // 0x4065b8\n        v5 = v11;\n        v6 = v11;\n        if (a1 >= 0) {\n            goto lab_0x40657e;\n        } else {\n            goto lab_0x4065c3;\n        }\n    }\n  lab_0x4065c3:\n    // 0x4065c3\n    __asm_pxor(v2, v2);\n    int128_t v12 = __asm_cvtsi2ss(a1 / 2 | a1 % 2); // 0x4065d3\n    int128_t v13 = v6; // 0x4065dc\n    int128_t v14 = __asm_addss(v12, v12); // 0x4065dc\n    goto lab_0x406587;\n  lab_0x40657e:\n    // 0x40657e\n    __asm_pxor(v2, v2);\n    v13 = v5;\n    v14 = __asm_cvtsi2ss(a1);\n    goto lab_0x406587;\n  lab_0x406587:\n    // 0x406587\n    __asm_comiss(__asm_divss(v14, v13), 0x5f800000);\n    // 0x406540\n    free(mem);\n    // 0x40654a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4065f0",
            "funcStartAddr": "4065f0",
            "funcEndAddr": "406698",
            "decompiledFuncCode": "int64_t function_4065f0(uint64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x4065fa\n    uint64_t v2 = *v1; // 0x4065fa\n    int64_t result; // 0x4065f0\n    if (v2 <= a1) {\n      lab_0x406683:\n        // 0x406683\n        *(int64_t *)(a1 + 24) = 0;\n        *(int64_t *)(a1 + 32) = 0;\n        return result;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 64);\n    int64_t * v4 = (int64_t *)(a1 + 72);\n    int64_t v5 = a1;\n    int64_t * v6 = (int64_t *)v5;\n    int64_t v7; // 0x406608\n    while (*v6 == 0) {\n        // 0x406608\n        v7 = v5 + 16;\n        int64_t v8; // 0x4065f0\n        result = v8;\n        if (v2 <= v7) {\n            // break (via goto) -> 0x406683\n            goto lab_0x406683;\n        }\n        v5 = v7;\n        v6 = (int64_t *)v5;\n    }\n    int64_t * v9 = (int64_t *)(v5 + 8); // 0x406619\n    int64_t v10 = *v9; // 0x406619\n    int64_t v11 = *v3; // 0x40661e\n    int64_t v12 = v11; // 0x406625\n    int64_t v13 = v10; // 0x406625\n    int64_t result2 = v11; // 0x406625\n    int64_t * v14; // 0x40663e\n    int64_t v15; // 0x40663e\n    int64_t v16; // 0x40663a\n    if (v10 != 0) {\n        v16 = 0;\n        if (v12 != 0) {\n            // 0x406635\n            v16 = *v3;\n        }\n        // 0x40663e\n        v14 = (int64_t *)(v13 + 8);\n        v15 = *v14;\n        *(int64_t *)v13 = 0;\n        *v14 = *v4;\n        *v4 = v13;\n        v12 = v16;\n        v13 = v15;\n        result2 = v16;\n        while (v15 != 0) {\n            // 0x406630\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x406635\n                v16 = *v3;\n            }\n            // 0x40663e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n        }\n    }\n    // 0x40665d\n    *v6 = 0;\n    int64_t v17 = v5 + 16; // 0x406670\n    *v9 = 0;\n    uint64_t v18 = *v1; // 0x40667d\n    while (v18 > v17) {\n        int64_t v19 = result2;\n        uint64_t v20 = v18; // 0x40660c\n        v5 = v17;\n        v6 = (int64_t *)v5;\n        while (*v6 == 0) {\n            // 0x406608\n            v7 = v5 + 16;\n            result = v19;\n            if (v20 <= v7) {\n                // break (via goto) -> 0x406683\n                goto lab_0x406683;\n            }\n            v5 = v7;\n            v6 = (int64_t *)v5;\n        }\n        // 0x406619\n        v9 = (int64_t *)(v5 + 8);\n        v10 = *v9;\n        v11 = *v3;\n        v12 = v11;\n        v13 = v10;\n        result2 = v11;\n        if (v10 != 0) {\n            v16 = 0;\n            if (v12 != 0) {\n                // 0x406635\n                v16 = *v3;\n            }\n            // 0x40663e\n            v14 = (int64_t *)(v13 + 8);\n            v15 = *v14;\n            *(int64_t *)v13 = 0;\n            *v14 = *v4;\n            *v4 = v13;\n            v12 = v16;\n            v13 = v15;\n            result2 = v16;\n            while (v15 != 0) {\n                // 0x406630\n                v16 = 0;\n                if (v12 != 0) {\n                    // 0x406635\n                    v16 = *v3;\n                }\n                // 0x40663e\n                v14 = (int64_t *)(v13 + 8);\n                v15 = *v14;\n                *(int64_t *)v13 = 0;\n                *v14 = *v4;\n                *v4 = v13;\n                v12 = v16;\n                v13 = v15;\n                result2 = v16;\n            }\n        }\n        // 0x40665d\n        *v6 = 0;\n        v17 = v5 + 16;\n        *v9 = 0;\n        v18 = *v1;\n    }\n    // 0x406683\n    *(int64_t *)(a1 + 24) = 0;\n    *(int64_t *)(a1 + 32) = 0;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4066a0",
            "funcStartAddr": "4066a0",
            "funcEndAddr": "406776",
            "decompiledFuncCode": "int64_t function_4066a0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x4066af\n    uint64_t v2 = *v1; // 0x4066af\n    int64_t v3 = a1; // 0x4066b3\n    if (*(int64_t *)(a1 + 64) == 0) {\n        goto lab_0x406703;\n    } else {\n        // 0x4066b5\n        v3 = a1;\n        if (*(int64_t *)(a1 + 32) == 0) {\n            goto lab_0x406703;\n        } else {\n            // 0x4066bc\n            if (v2 > a1) {\n                int64_t v4 = a1;\n                int64_t v5 = *(int64_t *)v4; // 0x4066d1\n                int64_t v6; // 0x4066c8\n                while (v5 == 0) {\n                    // 0x4066c8\n                    v6 = v4 + 16;\n                    v3 = 0;\n                    if (v2 <= v6) {\n                        // break (via goto) -> 0x406703\n                        goto lab_0x406703;\n                    }\n                    v4 = v6;\n                    v5 = *(int64_t *)v4;\n                }\n                int64_t v7 = *(int64_t *)(v4 + 8); // 0x4066e8\n                int64_t v8 = v7; // 0x4066ef\n                int64_t v9 = v5; // 0x4066ef\n                int64_t v10; // 0x4066a0\n                int64_t v11; // 0x4066e8\n                if (v7 != 0) {\n                    v10 = v8;\n                    v11 = *(int64_t *)(v10 + 8);\n                    while (v11 != 0) {\n                        // 0x4066e0\n                        v10 = v11;\n                        v11 = *(int64_t *)(v10 + 8);\n                    }\n                    // 0x4066e3\n                    v9 = *(int64_t *)v10;\n                }\n                int64_t v12 = v4 + 16; // 0x4066f6\n                v3 = v9;\n                while (v2 > v12) {\n                    // 0x4066d1\n                    v4 = v12;\n                    v5 = *(int64_t *)v4;\n                    while (v5 == 0) {\n                        // 0x4066c8\n                        v6 = v4 + 16;\n                        v3 = 0;\n                        if (v2 <= v6) {\n                            // break (via goto) -> 0x406703\n                            goto lab_0x406703;\n                        }\n                        v4 = v6;\n                        v5 = *(int64_t *)v4;\n                    }\n                    // 0x4066e3\n                    v7 = *(int64_t *)(v4 + 8);\n                    v8 = v7;\n                    v9 = v5;\n                    if (v7 != 0) {\n                        v10 = v8;\n                        v11 = *(int64_t *)(v10 + 8);\n                        while (v11 != 0) {\n                            // 0x4066e0\n                            v10 = v11;\n                            v11 = *(int64_t *)(v10 + 8);\n                        }\n                        // 0x4066e3\n                        v9 = *(int64_t *)v10;\n                    }\n                    // 0x4066f1\n                    v12 = v4 + 16;\n                    v3 = v9;\n                }\n                goto lab_0x406703;\n            } else {\n                goto lab_0x40673c;\n            }\n        }\n    }\n  lab_0x406703:\n    // 0x406703\n    if (v3 < v2) {\n        int64_t v13 = *(int64_t *)(v3 + 8); // 0x406710\n        int64_t v14 = v13; // 0x406717\n        int64_t v15 = v2; // 0x406717\n        int64_t v16; // 0x406720\n        if (v13 != 0) {\n            v16 = *(int64_t *)(v14 + 8);\n            free((int64_t *)v14);\n            v14 = v16;\n            while (v16 != 0) {\n                // 0x406720\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n            }\n            // 0x406731\n            v15 = *v1;\n        }\n        int64_t v17 = v3 + 16; // 0x406731\n        int64_t v18 = v15; // 0x40673a\n        int64_t v19 = v17; // 0x40673a\n        while (v15 > v17) {\n            // 0x406710\n            v13 = *(int64_t *)(v19 + 8);\n            v14 = v13;\n            v15 = v18;\n            if (v13 != 0) {\n                v16 = *(int64_t *)(v14 + 8);\n                free((int64_t *)v14);\n                v14 = v16;\n                while (v16 != 0) {\n                    // 0x406720\n                    v16 = *(int64_t *)(v14 + 8);\n                    free((int64_t *)v14);\n                    v14 = v16;\n                }\n                // 0x406731\n                v15 = *v1;\n            }\n            // 0x406731\n            v17 = v19 + 16;\n            v18 = v15;\n            v19 = v17;\n        }\n    }\n    goto lab_0x40673c;\n  lab_0x40673c:;\n    int64_t v20 = *(int64_t *)(a1 + 72); // 0x40673c\n    if (v20 == 0) {\n        // 0x406761\n        free(NULL);\n        free((int64_t *)a1);\n        return &g83;\n    }\n    int64_t v21 = *(int64_t *)(v20 + 8); // 0x406750\n    free((int64_t *)v20);\n    int64_t v22 = v21; // 0x40675f\n    while (v21 != 0) {\n        // 0x406750\n        v21 = *(int64_t *)(v22 + 8);\n        free((int64_t *)v22);\n        v22 = v21;\n    }\n    // 0x406761\n    free((int64_t *)v21);\n    free((int64_t *)a1);\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_406780",
            "funcStartAddr": "406780",
            "funcEndAddr": "40697a",
            "decompiledFuncCode": "int64_t function_406780(int64_t a1, uint64_t a2) {\n    // 0x406780\n    int128_t v1; // 0x406780\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 40); // 0x40678b\n    if (*(char *)(v3 + 16) == 0) {\n        int128_t v4; // 0x406780\n        if (a2 < 0) {\n            // 0x406900\n            __asm_pxor(v2, v2);\n            int128_t v5 = __asm_cvtsi2ss(a2 / 2 | a2 % 2); // 0x406910\n            v4 = __asm_addss(v5, v5);\n        } else {\n            // 0x4067a0\n            __asm_pxor(v2, v2);\n            v4 = __asm_cvtsi2ss(a2);\n        }\n        // 0x4067a9\n        __asm_comiss(__asm_divss_5(v4, *(int32_t *)(v3 + 8)), 0x5f800000);\n        // 0x4068f2\n        return 0;\n    }\n    uint64_t nmemb = function_405bd0(a2); // 0x4067e3\n    if (nmemb == 0 || nmemb >= 0x2000000000000000 || nmemb % 0x1000000000000001 != 0) {\n        // 0x4068f2\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 16); // 0x40681b\n    if (*v6 == nmemb) {\n        // 0x4068f2\n        return 1;\n    }\n    int64_t * mem = calloc((int32_t)nmemb, 16); // 0x40682d\n    int64_t v7 = (int64_t)mem; // 0x40682d\n    int64_t v8 = v7; // bp-104, 0x406832\n    if (mem == NULL) {\n        // 0x4068f2\n        return 0;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 72); // 0x40688a\n    int64_t v10 = *v9; // 0x40688a\n    int64_t v11 = function_405e60(&v8, a1, 0); // 0x406893\n    int64_t result = v11 & 0xffffffff; // 0x406898\n    if ((char)v11 == 0) {\n        int64_t v12 = &v8; // 0x406854\n        *v9 = v10;\n        int64_t * v13 = (int64_t *)a1; // 0x4068b6\n        function_405e60(v13, v12, 1);\n        function_405e60(v13, v12, 0);\n        free((int64_t *)v8);\n        return result;\n    }\n    // 0x406940\n    free(&v8);\n    *(int64_t *)a1 = v8;\n    *(int64_t *)(a1 + 8) = 16 * nmemb + v7;\n    *v6 = nmemb;\n    *(int64_t *)(a1 + 24) = 0;\n    *v9 = v10;\n    // 0x4068f2\n    return result;\n}\n"
        },
        {
            "funcName": "function_406980",
            "funcStartAddr": "406980",
            "funcEndAddr": "406bf4",
            "decompiledFuncCode": "int64_t function_406980(int64_t a1, int64_t a2, int64_t * a3, int64_t a4) {\n    // 0x406980\n    int128_t v1; // 0x406980\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x406980\n    int64_t v5 = function_405cc0(a1, a2, &v4, 0); // 0x4069a1\n    if (v5 != 0) {\n        // 0x4069ae\n        if (a3 != NULL) {\n            // 0x4069b5\n            *a3 = v5;\n        }\n        // 0x4069b9\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 24); // 0x4069c8\n    uint64_t v7 = *v6; // 0x4069c8\n    int64_t v8; // 0x406980\n    int64_t v9; // 0x406980\n    int64_t v10; // 0x406980\n    int128_t v11; // 0x406980\n    int128_t v12; // 0x406980\n    int64_t v13; // 0x406980\n    if (v7 < 0) {\n        // 0x406a50\n        __asm_pxor(v2, v2);\n        int64_t v14 = *(int64_t *)(a1 + 16); // 0x406a60\n        int128_t v15 = __asm_cvtsi2ss(v7 / 2 | v7 % 2); // 0x406a64\n        int64_t v16 = *(int64_t *)(a1 + 40); // 0x406a69\n        int128_t v17 = __asm_addss(v15, v15); // 0x406a6d\n        v13 = v14;\n        v11 = v17;\n        v9 = v16;\n        v12 = v17;\n        v8 = v14;\n        v10 = v16;\n        if (v14 >= 0) {\n            goto lab_0x4069eb;\n        } else {\n            goto lab_0x406a7a;\n        }\n    } else {\n        // 0x4069d1\n        __asm_pxor(v2, v2);\n        int64_t v18 = *(int64_t *)(a1 + 40); // 0x4069d5\n        int128_t v19 = __asm_cvtsi2ss(v7); // 0x4069d9\n        int64_t v20 = *(int64_t *)(a1 + 16); // 0x4069de\n        v13 = v20;\n        v11 = v19;\n        v9 = v18;\n        v12 = v19;\n        v8 = v20;\n        v10 = v18;\n        if (v20 < 0) {\n            goto lab_0x406a7a;\n        } else {\n            goto lab_0x4069eb;\n        }\n    }\n  lab_0x4069eb:\n    // 0x4069eb\n    __asm_pxor(v3, v3);\n    int128_t v21 = __asm_mulss(__asm_cvtsi2ss(v13), *(int32_t *)(v9 + 8)); // 0x4069f4\n    __asm_comiss_1(v11, v21);\n    int128_t v22 = v21; // 0x4069fc\n    int128_t v23 = v11; // 0x4069fc\n    if (v13 == 0) {\n        goto lab_0x406a02;\n    } else {\n        goto lab_0x406aa1;\n    }\n  lab_0x406a7a:;\n    uint64_t v24 = v8;\n    __asm_pxor(v3, v3);\n    int64_t v25 = v24 / 2 | v24 % 2; // 0x406a87\n    int128_t v26 = __asm_cvtsi2ss(v25); // 0x406a8a\n    int128_t v27 = __asm_mulss(__asm_addss(v26, v26), *(int32_t *)(v10 + 8)); // 0x406a93\n    __asm_comiss_1(v12, v27);\n    v22 = v27;\n    v23 = v12;\n    if (v25 == 0) {\n        goto lab_0x406a02;\n    } else {\n        goto lab_0x406aa1;\n    }\n  lab_0x406a02:;\n    int64_t * v28 = (int64_t *)v4; // 0x406a07\n    if (*v28 == 0) {\n        // 0x406b18\n        *v28 = a2;\n        int64_t * v29 = (int64_t *)(a1 + 32); // 0x406b21\n        *v29 = *v29 + 1;\n        *v6 = *v6 + 1;\n        return 1;\n    }\n    int64_t * v30 = (int64_t *)(a1 + 72); // 0x406a12\n    int64_t v31 = *v30; // 0x406a12\n    int64_t * v32; // 0x406980\n    int64_t v33; // 0x406980\n    if (v31 == 0) {\n        int64_t * mem = malloc(16); // 0x406b3d\n        if (mem == NULL) {\n            // 0x4069b9\n            return 0xffffffff;\n        }\n        int64_t v34 = (int64_t)mem; // 0x406b3d\n        v32 = (int64_t *)(v34 + 8);\n        v33 = v34;\n    } else {\n        int64_t * v35 = (int64_t *)(v31 + 8);\n        *v30 = *v35;\n        v32 = v35;\n        v33 = v31;\n    }\n    int64_t * v36 = (int64_t *)(v4 + 8); // 0x406a27\n    *(int64_t *)v33 = a2;\n    *v32 = *v36;\n    *v36 = v33;\n    int64_t * v37 = (int64_t *)(a1 + 32); // 0x406a3d\n    *v37 = *v37 + 1;\n    return 1;\n  lab_0x406aa1:;\n    int128_t v38 = v23;\n    int128_t v39 = v22;\n    int64_t v40 = a1 + 40; // 0x406aa1\n    function_405de0(v40);\n    int64_t v41 = *(int64_t *)v40; // 0x406aaa\n    uint64_t v42 = *(int64_t *)(a1 + 16); // 0x406aae\n    int128_t v43 = __asm_movss(*(int32_t *)(v41 + 8)); // 0x406ab2\n    int128_t v44; // 0x406980\n    if (v42 < 0) {\n        // 0x406b70\n        __asm_pxor(v39, v39);\n        int128_t v45 = __asm_cvtsi2ss(v42 / 2 | v42 % 2); // 0x406b80\n        v44 = __asm_addss(v45, v45);\n    } else {\n        // 0x406ac0\n        __asm_pxor(v39, v39);\n        v44 = __asm_cvtsi2ss(v42);\n    }\n    uint64_t v46 = *v6; // 0x406ac9\n    int128_t v47; // 0x406980\n    int64_t v48; // 0x406980\n    if (v46 < 0) {\n        // 0x406b50\n        __asm_pxor(v38, v38);\n        int64_t v49 = v46 / 2 | v46 % 2; // 0x406b5d\n        int128_t v50 = __asm_cvtsi2ss(v49); // 0x406b60\n        v48 = v49;\n        v47 = __asm_addss(v50, v50);\n    } else {\n        // 0x406ad2\n        __asm_pxor(v38, v38);\n        int128_t v51 = __asm_cvtsi2ss(v46); // 0x406ad6\n        v48 = v46;\n        v47 = v51;\n    }\n    // 0x406adb\n    __asm_comiss_1(v47, __asm_mulss_4(__asm_movaps_3(v43), v44));\n    if (v48 != 0) {\n        int128_t v52 = __asm_mulss(v44, *(int32_t *)(v41 + 12)); // 0x406aeb\n        int128_t v53 = v52; // 0x406af4\n        if (*(char *)(v41 + 16) == 0) {\n            // 0x406b90\n            v53 = __asm_mulss_4(v52, v43);\n        }\n        // 0x406afa\n        __asm_comiss(v53, 0x5f800000);\n        // 0x4069b9\n        return 0xffffffff;\n    }\n    goto lab_0x406a02;\n}\n"
        },
        {
            "funcName": "function_406c00",
            "funcStartAddr": "406c00",
            "funcEndAddr": "406c3b",
            "decompiledFuncCode": "int64_t function_406c00(int64_t a1, int64_t a2) {\n    // 0x406c00\n    int64_t v1; // bp-16, 0x406c00\n    int64_t v2; // 0x406c00\n    int32_t v3 = function_406980(a1, a2, &v1, v2); // 0x406c12\n    if (v3 == -1) {\n        // 0x406c20\n        return 0;\n    }\n    // 0x406c17\n    return v3 != 0 ? a2 : v1;\n}\n"
        },
        {
            "funcName": "function_406c40",
            "funcStartAddr": "406c40",
            "funcEndAddr": "406e17",
            "decompiledFuncCode": "int64_t function_406c40(int64_t a1) {\n    // 0x406c40\n    int128_t v1; // 0x406c40\n    int128_t v2 = v1;\n    int128_t v3 = v1;\n    int64_t v4; // bp-32, 0x406c40\n    int64_t v5; // 0x406c40\n    int64_t result = function_405cc0(a1, v5, &v4, 1); // 0x406c55\n    if (result == 0) {\n        // 0x406c72\n        return result;\n    }\n    int64_t * v6 = (int64_t *)(a1 + 32); // 0x406c67\n    *v6 = *v6 - 1;\n    if (*(int64_t *)v4 != 0) {\n        // 0x406c72\n        return result;\n    }\n    int64_t * v7 = (int64_t *)(a1 + 24); // 0x406c80\n    uint64_t v8 = *v7 - 1; // 0x406c84\n    *v7 = v8;\n    int64_t v9; // 0x406c40\n    int64_t v10; // 0x406c40\n    int64_t v11; // 0x406c40\n    int128_t v12; // 0x406c40\n    int128_t v13; // 0x406c40\n    int64_t v14; // 0x406c40\n    if (v8 < 0) {\n        // 0x406d70\n        __asm_pxor(v3, v3);\n        int64_t v15 = *(int64_t *)(a1 + 16); // 0x406d80\n        int128_t v16 = __asm_cvtsi2ss(v8 / 2 | v8 % 2); // 0x406d84\n        int64_t v17 = *(int64_t *)(a1 + 40); // 0x406d89\n        int128_t v18 = __asm_addss(v16, v16); // 0x406d8d\n        v14 = v15;\n        v12 = v18;\n        v10 = v17;\n        v13 = v18;\n        v9 = v15;\n        v11 = v17;\n        if (v15 >= 0) {\n            goto lab_0x406cac;\n        } else {\n            goto lab_0x406d9a;\n        }\n    } else {\n        // 0x406c92\n        __asm_pxor(v3, v3);\n        int64_t v19 = *(int64_t *)(a1 + 40); // 0x406c96\n        int128_t v20 = __asm_cvtsi2ss(v8); // 0x406c9a\n        int64_t v21 = *(int64_t *)(a1 + 16); // 0x406c9f\n        v14 = v21;\n        v12 = v20;\n        v10 = v19;\n        v13 = v20;\n        v9 = v21;\n        v11 = v19;\n        if (v21 < 0) {\n            goto lab_0x406d9a;\n        } else {\n            goto lab_0x406cac;\n        }\n    }\n  lab_0x406cac:\n    // 0x406cac\n    __asm_pxor(v2, v2);\n    int128_t v22 = __asm_cvtsi2ss(v14); // 0x406cb0\n    int64_t v23 = v14; // 0x406cb0\n    int128_t v24 = v12; // 0x406cb0\n    int64_t v25 = v10; // 0x406cb0\n    int128_t v26 = v22; // 0x406cb0\n    goto lab_0x406cb5;\n  lab_0x406d9a:;\n    uint64_t v47 = v9;\n    __asm_pxor(v2, v2);\n    int64_t v48 = v47 / 2 | v47 % 2; // 0x406da7\n    int128_t v49 = __asm_cvtsi2ss(v48); // 0x406daa\n    v23 = v48;\n    v24 = v13;\n    v25 = v11;\n    v26 = __asm_addss(v49, v49);\n    goto lab_0x406cb5;\n  lab_0x406cb5:;\n    int128_t v27 = v24;\n    int128_t v28 = __asm_mulss(v26, *(int32_t *)v25); // 0x406cb5\n    __asm_comiss_1(v28, v27);\n    if (v23 == 0) {\n        // 0x406c72\n        return result;\n    }\n    int64_t v29 = a1 + 40; // 0x406cbe\n    function_405de0(v29);\n    uint64_t v30 = *(int64_t *)(a1 + 16); // 0x406cc7\n    int64_t v31 = *(int64_t *)v29; // 0x406ccb\n    int128_t v32; // 0x406c40\n    if (v30 < 0) {\n        // 0x406de0\n        __asm_pxor(v27, v27);\n        int128_t v33 = __asm_cvtsi2ss(v30 / 2 | v30 % 2); // 0x406df0\n        v32 = __asm_addss(v33, v33);\n    } else {\n        // 0x406cd8\n        __asm_pxor(v27, v27);\n        v32 = __asm_cvtsi2ss(v30);\n    }\n    uint64_t v34 = *v7; // 0x406ce1\n    int128_t v35; // 0x406c40\n    int64_t v36; // 0x406c40\n    if (v34 < 0) {\n        // 0x406dc0\n        __asm_pxor(v28, v28);\n        int64_t v37 = v34 / 2 | v34 % 2; // 0x406dcd\n        int128_t v38 = __asm_cvtsi2ss(v37); // 0x406dd0\n        v36 = v37;\n        v35 = __asm_addss(v38, v38);\n    } else {\n        // 0x406cee\n        __asm_pxor(v28, v28);\n        int128_t v39 = __asm_cvtsi2ss(v34); // 0x406cf2\n        v36 = v34;\n        v35 = v39;\n    }\n    // 0x406cf7\n    __asm_comiss_1(__asm_mulss_4(__asm_movss(*(int32_t *)v31), v32), v35);\n    if (v36 == 0) {\n        // 0x406c72\n        return result;\n    }\n    int128_t v40 = __asm_mulss(v32, *(int32_t *)(v31 + 4)); // 0x406d08\n    int128_t v41 = v40; // 0x406d11\n    if (*(char *)(v31 + 16) == 0) {\n        // 0x406d13\n        v41 = __asm_mulss(v40, *(int32_t *)(v31 + 8));\n    }\n    // 0x406d18\n    __asm_comiss(v41, 0x5f000000);\n    int64_t v42 = __asm_cvttss2si(__asm_subss(v41, 0x5f000000)); // 0x406e08\n    if ((char)function_406780(a1, v42 ^ -0x8000000000000000) != 0) {\n        // 0x406c72\n        return result;\n    }\n    int64_t * v43 = (int64_t *)(a1 + 72); // 0x406d3a\n    if (*v43 != 0) {\n        int64_t v44; // 0x406c40\n        free((int64_t *)v44);\n        while (*(int64_t *)(v44 + 8) != 0) {\n            int64_t v45 = v44;\n            int64_t v46 = *(int64_t *)(v45 + 8); // 0x406d48\n            free((int64_t *)v45);\n            v44 = v46;\n        }\n    }\n    // 0x406d59\n    *v43 = 0;\n    // 0x406c72\n    return result;\n}\n"
        },
        {
            "funcName": "function_406e20",
            "funcStartAddr": "406e20",
            "funcEndAddr": "406e47",
            "decompiledFuncCode": "int64_t function_406e20(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x406e20\n    return (*(int64_t *)(a1 + 8) ^ function_40dc40(a1, a2, a3)) % a2;\n}\n"
        },
        {
            "funcName": "function_406e50",
            "funcStartAddr": "406e50",
            "funcEndAddr": "406e5d",
            "decompiledFuncCode": "int64_t function_406e50(int64_t a1, uint64_t a2, int64_t a3) {\n    // 0x406e50\n    return *(int64_t *)(a1 + 8) % a2;\n}\n"
        },
        {
            "funcName": "function_406e60",
            "funcStartAddr": "406e60",
            "funcEndAddr": "406e85",
            "decompiledFuncCode": "int64_t function_406e60(int64_t a1, int64_t a2) {\n    // 0x406e60\n    if (*(int64_t *)(a1 + 8) != *(int64_t *)(a2 + 8) || *(int64_t *)(a1 + 16) != *(int64_t *)(a2 + 16)) {\n        // 0x406e6a\n        return 0;\n    }\n    // 0x406e7a\n    return function_409e00(a1, a2);\n}\n"
        },
        {
            "funcName": "function_406e90",
            "funcStartAddr": "406e90",
            "funcEndAddr": "406ec3",
            "decompiledFuncCode": "int64_t function_406e90(int64_t str, int64_t str2) {\n    // 0x406e90\n    if (*(int64_t *)(str + 8) != *(int64_t *)(str2 + 8) || *(int64_t *)(str + 16) != *(int64_t *)(str2 + 16)) {\n        // 0x406e9c\n        return 0;\n    }\n    int32_t strcmp_rc = strcmp((char *)str, (char *)str2); // 0x406eb4\n    return (int64_t)(strcmp_rc & -256) | (int64_t)(strcmp_rc == 0);\n}\n"
        },
        {
            "funcName": "function_406ed0",
            "funcStartAddr": "406ed0",
            "funcEndAddr": "406ee5",
            "decompiledFuncCode": "int64_t function_406ed0(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x406ed7\n    free(v1);\n    free(v1);\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_406ef0",
            "funcStartAddr": "406ef0",
            "funcEndAddr": "406fa7",
            "decompiledFuncCode": "int64_t function_406ef0(int32_t a1, float80_t a2) {\n    // 0x406ef0\n    int3_t v1; // 0x406ef0\n    int3_t v2 = v1 - 1; // 0x406ef0\n    __frontend_reg_store_fpr(v2, 9223372036854775808.0L);\n    int3_t v3 = v1 - 2;\n    __frontend_reg_store_fpr(v3, a2);\n    float80_t v4 = __frontend_reg_load_fpr(v3); // 0x406efa\n    float80_t v5 = __frontend_reg_load_fpr(v2); // 0x406efa\n    int64_t result; // 0x406ef0\n    if (v4 > v5 || v4 == v5) {\n        // 0x406f70\n        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v3) - __frontend_reg_load_fpr(v2));\n        float80_t v6 = __frontend_reg_load_fpr(v3); // 0x406f76\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v2));\n        __frontend_reg_store_fpr(v2, v6);\n        result = (int64_t)__frontend_reg_load_fpr(v3) ^ -0x8000000000000000;\n    } else {\n        // 0x406efe\n        __frontend_reg_store_fpr(v2, __frontend_reg_load_fpr(v3));\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v2));\n        result = __frontend_reg_load_fpr(v3);\n    }\n    // 0x406f24\n    __frontend_reg_store_fpr(v3, (float80_t)result);\n    if (result < 0) {\n        // 0x406f32\n        __frontend_reg_store_fpr(v3, __frontend_reg_load_fpr(v3) + 18446744073709551616.0L);\n    }\n    int3_t v7 = v3;\n    if (a1 != 0) {\n        // 0x406f68\n        __frontend_reg_store_fpr(v7 + 1, __frontend_reg_load_fpr(v7));\n        // 0x406f6a\n        return result;\n    }\n    int3_t v8 = v7 + 1; // 0x406f3c\n    float80_t v9 = __frontend_reg_load_fpr(v7); // 0x406f3c\n    __frontend_reg_store_fpr(v7, __frontend_reg_load_fpr(v8));\n    __frontend_reg_store_fpr(v8, v9);\n    float80_t v10 = __frontend_reg_load_fpr(v7); // 0x406f3e\n    float80_t v11 = __frontend_reg_load_fpr(v8); // 0x406f3e\n    if (v10 != v11 == v10 == v11) {\n        // 0x406f48\n        __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8));\n    } else {\n        // 0x406f42\n        if (v10 == v11) {\n            // 0x406f6a\n            return result;\n        }\n        // 0x406f44\n        __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8));\n    }\n    int64_t result2 = result + 1; // 0x406f50\n    __frontend_reg_store_fpr(v8, (float80_t)result2);\n    if (result2 >= 0) {\n        // 0x406f6a\n        return result2;\n    }\n    // 0x406fa0\n    __frontend_reg_store_fpr(v8, __frontend_reg_load_fpr(v8) + 18446744073709551616.0L);\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406fb0",
            "funcStartAddr": "406fb0",
            "funcEndAddr": "40797e",
            "decompiledFuncCode": "int64_t function_406fb0(int64_t a1, int64_t * str3, int64_t a3, uint64_t a4, uint64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)str3;\n    int64_t v2 = a3 & 32; // 0x406fb6\n    uint32_t v3 = (int32_t)a3 % 4; // 0x406fc0\n    int64_t v4; // bp-168, 0x406fb0\n    int64_t v5 = &v4; // 0x406fd0\n    int32_t v6 = v2; // 0x406fd7\n    uint32_t v7 = (v6 | 1024) - ((int32_t)(v2 == 0) | v6) & 2024; // 0x406fe5\n    int64_t v8 = 0x100000000 * a3 >> 32; // 0x406fea\n    struct lconv * locale_info = localeconv(); // 0x406ffb\n    int64_t str = *(int64_t *)locale_info; // 0x407000\n    int64_t len = strlen((char *)str); // 0x407009\n    int64_t v9 = len >= 17 ? (int64_t)\".\" : str; // 0x407023\n    int64_t str2 = *(int64_t *)((int64_t)locale_info + 8); // 0x40702c\n    int64_t v10 = len >= 17 ? 1 : len; // 0x407031\n    uint32_t len2 = strlen((char *)str2); // 0x407042\n    int64_t v11 = v1 + 647; // 0x407059\n    v4 = v11;\n    int64_t v12; // 0x406fb0\n    int64_t v13; // 0x406fb0\n    int64_t v14; // 0x406fb0\n    int64_t v15; // 0x406fb0\n    int64_t v16; // 0x406fb0\n    int64_t v17; // 0x406fb0\n    int64_t v18; // 0x406fb0\n    int64_t v19; // 0x406fb0\n    int64_t v20; // 0x406fb0\n    if (a5 > a4) {\n        if (a4 == 0) {\n            goto lab_0x407095;\n        } else {\n            if (a5 % a4 != 0) {\n                goto lab_0x407095;\n            } else {\n                uint64_t v21 = a5 / a4; // 0x407300\n                int64_t v22 = a1 / v21; // 0x407314\n                uint64_t v23 = 10 * (a1 % v21); // 0x407320\n                uint64_t v24 = 2 * (v23 % v21); // 0x407329\n                int64_t v25 = v23 / v21 & 0xffffffff; // 0x40732c\n                int64_t v26 = v21 > v24 ? (int64_t)(v24 != 0) : v21 < v24 ? 3 : 2;\n                uint32_t v27 = (int32_t)v8 & 16; // 0x407345\n                v15 = v27;\n                v19 = v22;\n                v17 = v26;\n                v12 = v25;\n                v16 = 0;\n                v14 = 0xffffffff;\n                v20 = v22;\n                v18 = v26;\n                v13 = v25;\n                if (v27 == 0) {\n                    goto lab_0x407361;\n                } else {\n                    goto lab_0x40734e;\n                }\n            }\n        }\n    } else {\n        if (a4 % a5 != 0) {\n            goto lab_0x407095;\n        } else {\n            uint64_t v28 = a4 / a5; // 0x407072\n            int64_t v29 = v28 * a1; // 0x407082\n            if (v29 / v28 == a1) {\n                uint32_t v30 = (int32_t)v8 & 16; // 0x407601\n                int64_t v31 = v30; // 0x407601\n                v15 = v31;\n                v19 = v29;\n                v17 = 0;\n                v12 = 0;\n                v16 = v31;\n                v14 = 0xffffffff;\n                v20 = v29;\n                v18 = 0;\n                v13 = 0;\n                if (v30 != 0) {\n                    goto lab_0x40734e;\n                } else {\n                    goto lab_0x407361;\n                }\n            } else {\n                goto lab_0x407095;\n            }\n        }\n    }\n  lab_0x407361:;\n    int64_t v32 = v16; // 0x40736a\n    int64_t v33 = v14; // 0x40736a\n    int64_t v34 = v20; // 0x40736a\n    int64_t v35 = v18; // 0x40736a\n    int64_t v36 = v13; // 0x40736a\n    int64_t v37 = v11; // 0x40736a\n    int64_t v38; // 0x406fb0\n    int64_t v39; // 0x406fb0\n    int64_t v40; // 0x406fb0\n    int64_t v41; // 0x406fb0\n    int64_t v42; // 0x406fb0\n    int64_t v43; // 0x406fb0\n    int64_t v44; // 0x406fb0\n    if (v3 == 1) {\n        // 0x4076a0\n        v42 = v16;\n        v40 = v14;\n        v43 = v20;\n        v38 = v11;\n        v41 = v14;\n        v44 = v20;\n        v39 = v11;\n        if ((int32_t)(v20 % 2 != -v18) + (int32_t)v13 < 6) {\n            goto lab_0x4073a0;\n        } else {\n            goto lab_0x407381;\n        }\n    } else {\n        goto lab_0x407370;\n    }\n  lab_0x407095:;\n    // 0x407095\n    int3_t v45; // 0x406fb0\n    int3_t v46 = v45 - 1;\n    __frontend_reg_store_fpr(v46, (float80_t)a4);\n    int3_t v47; // 0x406fb0\n    int3_t v48; // 0x406fb0\n    if (a4 < 0) {\n        // 0x4072e0\n        __frontend_reg_store_fpr(v46, __frontend_reg_load_fpr(v46) + 18446744073709551616.0L);\n        v47 = v46;\n    } else {\n        // 0x407095\n        v47 = v45 - 2;\n        v48 = v46;\n    }\n    int3_t v49 = v48;\n    __frontend_reg_store_fpr(v47, (float80_t)a5);\n    float80_t v50 = __frontend_reg_load_fpr(v47);\n    int3_t v51; // 0x406fb0\n    int3_t v52; // 0x406fb0\n    int3_t v53; // 0x406fb0\n    int3_t v54; // 0x406fb0\n    if (a5 < 0) {\n        // 0x4072c0\n        __frontend_reg_store_fpr(v47, v50 + 18446744073709551616.0L);\n        int3_t v55 = v49 + 1;\n        __frontend_reg_store_fpr(v55, __frontend_reg_load_fpr(v55) / __frontend_reg_load_fpr(v49));\n        __frontend_reg_store_fpr(v49, (float80_t)a1);\n        v51 = v55;\n        v53 = v49;\n        v52 = v55;\n        v54 = v49;\n        if (a1 >= 0) {\n            goto lab_0x4070d2;\n        } else {\n            goto lab_0x4072a8;\n        }\n    } else {\n        // 0x4070be\n        __frontend_reg_store_fpr(v49, __frontend_reg_load_fpr(v49) / v50);\n        __frontend_reg_store_fpr(v47, (float80_t)a1);\n        int3_t v56 = v47 + 1;\n        v51 = v56;\n        v53 = v47;\n        v52 = v56;\n        v54 = v47;\n        if (a1 < 0) {\n            goto lab_0x4072a8;\n        } else {\n            goto lab_0x4070d2;\n        }\n    }\n  lab_0x4070d2:;\n    int3_t v57 = v51;\n    float80_t v58 = __frontend_reg_load_fpr(v53); // 0x4070d2\n    __frontend_reg_store_fpr(v57, v58 * __frontend_reg_load_fpr(v57));\n    int3_t v59 = v57; // 0x4070d9\n    int3_t v60 = v57; // 0x4070d9\n    if ((a3 & 16) == 0) {\n        goto lab_0x4071f0;\n    } else {\n        goto lab_0x4070df;\n    }\n  lab_0x4072a8:;\n    int3_t v61 = v54;\n    __frontend_reg_store_fpr(v61, __frontend_reg_load_fpr(v61) + 18446744073709551616.0L);\n    int3_t v62 = v61 + 2; // 0x4072ae\n    __frontend_reg_store_fpr(v62, __frontend_reg_load_fpr(v52) * __frontend_reg_load_fpr(v62));\n    v59 = v62;\n    v60 = v62;\n    if ((a3 & 16) != 0) {\n        goto lab_0x4070df;\n    } else {\n        goto lab_0x4071f0;\n    }\n  lab_0x40734e:;\n    int64_t v63 = v15;\n    v16 = v63;\n    v14 = 0;\n    v20 = v19;\n    v18 = v17;\n    v13 = v12;\n    int64_t v64; // 0x406fb0\n    int64_t v65; // 0x406fb0\n    int64_t v66; // 0x406fb0\n    int64_t v67; // 0x406fb0\n    int64_t v68; // 0x406fb0\n    int64_t v69; // 0x406fb0\n    int64_t v70; // 0x407586\n    int64_t v71; // 0x40756a\n    if (v19 < (int64_t)v7) {\n        goto lab_0x407361;\n    } else {\n        int64_t v72; // 0x406fb0\n        int32_t v73 = v72; // 0x407584\n        int64_t v74; // 0x406fb0\n        uint64_t v75; // 0x406fb0\n        v70 = v74 / v75;\n        int64_t v76; // 0x406fb0\n        uint64_t v77 = 10 * (v74 % v75) + v76 & 0xffffffff; // 0x407597\n        int64_t v78 = v77 / v75; // 0x407597\n        uint32_t v79 = 2 * (int32_t)(v77 % v75) + (v73 >> 1); // 0x407599\n        uint32_t v80 = v79 + v73; // 0x4075a2\n        int64_t v81 = v79 < v7 ? (int64_t)(v80 != 0) : v7 < v80 ? 3 : 2;\n        int64_t v82; // 0x406fb0\n        v71 = v82 + 1 & 0xffffffff;\n        while (v70 >= v75) {\n            // 0x407576\n            v16 = v63;\n            v14 = v71;\n            v20 = v70;\n            v18 = v81;\n            v13 = v78;\n            v82 = v71;\n            v74 = v70;\n            v72 = v81;\n            v76 = v78;\n            int64_t v83; // 0x40756a\n            if ((int32_t)v83 == 8) {\n                goto lab_0x407361;\n            }\n            int64_t v84 = v76;\n            int64_t v85 = v72;\n            uint64_t v86 = v74;\n            int64_t v87 = v82;\n            v73 = v85;\n            v70 = v86 / v75;\n            v77 = 10 * (v86 % v75) + v84 & 0xffffffff;\n            v78 = v77 / v75;\n            v79 = 2 * (int32_t)(v77 % v75) + (v73 >> 1);\n            v80 = v79 + v73;\n            int64_t v88 = v7 < v80 ? 3 : 2;\n            v81 = v79 < v7 ? (int64_t)(v80 != 0) : v88;\n            v83 = v87 + 1;\n            v71 = v83 & 0xffffffff;\n        }\n        // 0x407750\n        v16 = v63;\n        v14 = v71;\n        v20 = v70;\n        v18 = v81;\n        v13 = v78;\n        if (v70 < 10) {\n            bool v89; // 0x406fb0\n            if (v3 == 1) {\n                int32_t v90 = (int32_t)(v81 + v78 % 2) - 2; // 0x407827\n                v89 = v90 >= 0 == (v90 != 0);\n            } else {\n                // 0x407765\n                v89 = v3 == 0 == (v81 != 0);\n            }\n            // 0x407777\n            if (v89) {\n                int64_t v91 = v78 + 1; // 0x407810\n                v65 = v91 & 0xffffffff;\n                if ((int32_t)v91 == 10) {\n                    // 0x407883\n                    v69 = v70 + 1;\n                    v66 = 0;\n                    v68 = 10;\n                    v67 = 0;\n                    v64 = v11;\n                    if (v70 == 9) {\n                        goto lab_0x4077d0;\n                    } else {\n                        goto lab_0x407787;\n                    }\n                } else {\n                    goto lab_0x407818;\n                }\n            } else {\n                // 0x40777f\n                v69 = v70;\n                v66 = v81;\n                v65 = v78;\n                if (v77 >= v75) {\n                    goto lab_0x407818;\n                } else {\n                    goto lab_0x407787;\n                }\n            }\n        } else {\n            goto lab_0x407361;\n        }\n    }\n  lab_0x4071f0:;\n    int3_t v92 = v60; // 0x4071f7\n    if (v3 != 1) {\n        int3_t v93 = v60 - 1; // 0x4071f9\n        __frontend_reg_store_fpr(v93, 1.84467e+19L);\n        float80_t v94 = __frontend_reg_load_fpr(v93); // 0x4071ff\n        float80_t v95 = __frontend_reg_load_fpr(v60); // 0x4071ff\n        v92 = v60;\n        if (v94 > v95) {\n            // 0x4075c0\n            function_406ef0(v3, __frontend_reg_load_fpr(v60));\n            v92 = v60 + 1;\n        }\n    }\n    // 0x407207\n    __frontend_reg_load_fpr(v92);\n    __sprintf_chk((char *)str3, 1, -1, \"%.0Lf\");\n    int64_t len3 = strlen((char *)str3); // 0x407236\n    int64_t v96 = len3; // 0x40723d\n    int64_t v97 = 0xffffffff; // 0x40723d\n    int64_t v98 = len3; // 0x40723d\n    goto lab_0x407240;\n  lab_0x4070df:;\n    int3_t v181 = v59;\n    int3_t v180 = v181 - 1; // 0x4070df\n    __frontend_reg_store_fpr(v180, (float80_t)v7);\n    int3_t v206 = v181 - 2; // 0x4070e5\n    __frontend_reg_store_fpr(v206, __frontend_reg_load_fpr(v180));\n    int3_t v207 = v181 - 3;\n    __frontend_reg_store_fpr(v207, __frontend_reg_load_fpr(v206));\n    int64_t v208 = 1; // 0x4070f6\n    int64_t v165 = v208 & 0xffffffff; // 0x4070f6\n    __frontend_reg_store_fpr(v207, __frontend_reg_load_fpr(v207) * __frontend_reg_load_fpr(v180));\n    float80_t v209 = __frontend_reg_load_fpr(v207); // 0x4070fb\n    __frontend_reg_store_fpr(v207, __frontend_reg_load_fpr(v181));\n    __frontend_reg_store_fpr(v181, v209);\n    while (__frontend_reg_load_fpr(v207) >= __frontend_reg_load_fpr(v181)) {\n        float80_t v210 = __frontend_reg_load_fpr(v207);\n        if ((int32_t)v208 == 8) {\n            // 0x407106\n            __frontend_reg_store_fpr(v180, v210);\n            __frontend_reg_store_fpr(v181, __frontend_reg_load_fpr(v206));\n            goto lab_0x407114;\n        }\n        // 0x4070f0\n        __frontend_reg_store_fpr(v206, v210);\n        float80_t v211 = __frontend_reg_load_fpr(v206); // 0x4070f2\n        __frontend_reg_store_fpr(v206, __frontend_reg_load_fpr(v181));\n        __frontend_reg_store_fpr(v181, v211);\n        __frontend_reg_store_fpr(v207, __frontend_reg_load_fpr(v206));\n        v208 = v165 + 1;\n        v165 = v208 & 0xffffffff;\n        __frontend_reg_store_fpr(v207, __frontend_reg_load_fpr(v207) * __frontend_reg_load_fpr(v180));\n        v209 = __frontend_reg_load_fpr(v207);\n        __frontend_reg_store_fpr(v207, __frontend_reg_load_fpr(v181));\n        __frontend_reg_store_fpr(v181, v209);\n    }\n    // 0x407110\n    __frontend_reg_store_fpr(v180, __frontend_reg_load_fpr(v207));\n    __frontend_reg_store_fpr(v181, __frontend_reg_load_fpr(v206));\n    goto lab_0x407114;\n  lab_0x407370:;\n    int64_t v212 = v37;\n    int64_t v213 = v34;\n    int64_t v214 = v33;\n    v41 = v214;\n    v44 = v213;\n    v39 = v212;\n    if (v3 != 0) {\n        goto lab_0x4073a0;\n    } else {\n        // 0x40737a\n        v42 = v32;\n        v40 = v214;\n        v43 = v213;\n        v38 = v212;\n        v41 = v214;\n        v44 = v213;\n        v39 = v212;\n        if ((int32_t)(v36 + v35) < 1) {\n            goto lab_0x4073a0;\n        } else {\n            goto lab_0x407381;\n        }\n    }\n  lab_0x407240:;\n    int64_t v99 = *(int64_t *)(v5 + 8); // 0x407244\n    int64_t v100 = v4 - v96; // 0x40724c\n    memmove((int64_t *)v100, (int64_t *)v99, (int32_t)v96);\n    int64_t v101 = v97; // 0x407255\n    int64_t v102 = v100 + v98; // 0x407255\n    int64_t v103 = v100; // 0x407255\n    goto lab_0x40725a;\n  lab_0x407114:;\n    float80_t v179 = __frontend_reg_load_fpr(v180); // 0x407122\n    __frontend_reg_store_fpr(v181, v179 / __frontend_reg_load_fpr(v181));\n    uint64_t v182 = v10 + (v6 == 0 ? 3 : 2); // 0x407129\n    int3_t v144; // 0x406fb0\n    int3_t v174; // 0x406fb0\n    int3_t v148; // 0x406fb0\n    int64_t v145; // 0x406fb0\n    int3_t v176; // 0x406fb0\n    if (v3 == 1) {\n        // 0x407650\n        __frontend_reg_store_fpr(v180, __frontend_reg_load_fpr(v181));\n        __frontend_reg_load_fpr(v180);\n        float80_t v183 = __frontend_reg_load_fpr(v181); // 0x407674\n        __sprintf_chk((char *)str3, 1, -1, \"%.1Lf\");\n        int64_t len6 = strlen((char *)str3); // 0x407680\n        __frontend_reg_store_fpr(v181, v183);\n        v144 = v181;\n        v145 = len6;\n        if (v182 < len6) {\n            // 0x407690\n            __frontend_reg_store_fpr(v180, 10.0L);\n            float80_t v184 = __frontend_reg_load_fpr(v181); // 0x407696\n            __frontend_reg_store_fpr(v181, v184 * __frontend_reg_load_fpr(v180));\n            v148 = v180;\n            goto lab_0x4071b6;\n        } else {\n            goto lab_0x407618;\n        }\n    } else {\n        // 0x407137\n        __frontend_reg_store_fpr(v180, 1.84467e+19L);\n        float80_t v185 = __frontend_reg_load_fpr(v180); // 0x40713d\n        float80_t v186 = __frontend_reg_load_fpr(v181); // 0x40713d\n        bool v187 = false; // 0x40713d\n        bool v188 = false; // 0x40713d\n        if (v185 <= v186) {\n            v187 = true;\n            v188 = false;\n            if (v185 >= v186) {\n                v187 = v185 != v186;\n                v188 = true;\n            }\n        }\n        __frontend_reg_store_fpr(v180, __frontend_reg_load_fpr(v181));\n        v174 = v180;\n        if (!v187 && !v188) {\n            // 0x4075d8\n            __frontend_reg_load_fpr(v180);\n            float80_t v189 = __frontend_reg_load_fpr(v181); // 0x4075e1\n            function_406ef0(v3, v189);\n            __frontend_reg_store_fpr(v181, v189);\n            v174 = v181;\n        }\n        float80_t v190 = __frontend_reg_load_fpr(v174); // 0x407147\n        v176 = v174 + 1;\n        __frontend_reg_load_fpr(v176);\n        __sprintf_chk((char *)str3, 1, -1, \"%.1Lf\");\n        int64_t len7 = strlen((char *)str3); // 0x407175\n        __frontend_reg_store_fpr(v176, v190);\n        v144 = v176;\n        v145 = len7;\n        if (v182 < len7) {\n            // 0x407189\n            __frontend_reg_store_fpr(v174, 10.0L);\n            __frontend_reg_store_fpr(v176, __frontend_reg_load_fpr(v176) * __frontend_reg_load_fpr(v174));\n            goto lab_0x407191;\n        } else {\n            goto lab_0x407618;\n        }\n    }\n  lab_0x4073a0:;\n    int64_t v191 = v39 - 1; // 0x4073b9\n    *(char *)v191 = (char)v44 + 48;\n    int64_t v192 = v191; // 0x4073db\n    while (v44 >= 10) {\n        // 0x4073b3\n        v191 = v192 - 1;\n        *(char *)v191 = (char)v44 + 48;\n        v192 = v191;\n    }\n    int64_t v104 = v41; // 0x4073e2\n    int64_t v105 = v191; // 0x4073e2\n    int64_t v106 = v41; // 0x4073e2\n    int64_t v107 = v39; // 0x4073e2\n    int64_t v108 = v191; // 0x4073e2\n    if ((a3 & 4) == 0) {\n        goto lab_0x407265;\n    } else {\n        goto lab_0x4073e8;\n    }\n  lab_0x407381:;\n    int64_t v193 = v38;\n    int64_t v194 = v40;\n    int64_t v195 = v43 + 1; // 0x407381\n    v41 = v194;\n    v44 = v195;\n    v39 = v193;\n    if ((int32_t)v194 == 8 || (int32_t)v42 == 0 || v195 != (int64_t)v7) {\n        goto lab_0x4073a0;\n    } else {\n        int64_t v196 = v193; // 0x40770e\n        if ((a3 & 8) == 0) {\n            // 0x407894\n            *(char *)(v193 - 1) = 48;\n            int64_t v197 = v193 + -1 - v10; // 0x40789f\n            int64_t v198 = v10 & 0xffffffff; // 0x4078a2\n            uint32_t v199 = (int32_t)v10; // 0x4078a5\n            if (v199 >= 8) {\n                int64_t v200 = v197 + 8 & -8; // 0x4078f0\n                *(int64_t *)v197 = *(int64_t *)v9;\n                *(int64_t *)(v197 + v198 - 8) = *(int64_t *)(v198 + v9 - 8);\n                int64_t v201 = v197 - v200; // 0x407907\n                uint32_t v202 = (int32_t)(v201 + v10); // 0x407913\n                v196 = v197;\n                if (v202 >= 8) {\n                    int64_t v203 = 0;\n                    int64_t v204 = v203 + 8; // 0x407923\n                    *(int64_t *)(v203 + v200) = *(int64_t *)(v9 - v201 + v203);\n                    v196 = v197;\n                    while ((v202 & -8) > (int32_t)v204) {\n                        // 0x407921\n                        v203 = v204 & 0xffffffff;\n                        v204 = v203 + 8;\n                        *(int64_t *)(v203 + v200) = *(int64_t *)(v9 - v201 + v203);\n                        v196 = v197;\n                    }\n                }\n            } else {\n                if ((v10 & 4) != 0) {\n                    // 0x40794c\n                    *(int32_t *)v197 = *(int32_t *)v9;\n                    *(int32_t *)(v197 + v198 - 4) = *(int32_t *)(v198 + v9 - 4);\n                    v196 = v197;\n                } else {\n                    // 0x4078b5\n                    v196 = v197;\n                    if (v199 != 0) {\n                        // 0x4078bd\n                        *(char *)v197 = *(char *)v9;\n                        v196 = v197;\n                        if ((v10 & 2) != 0) {\n                            // 0x4078cc\n                            *(int16_t *)(v197 + v198 - 2) = *(int16_t *)(v198 + v9 - 2);\n                            v196 = v197;\n                        }\n                    }\n                }\n            }\n        }\n        int64_t v205 = v196 - 1; // 0x407714\n        *(char *)v205 = 49;\n        v101 = v194 + 1 & 0xffffffff;\n        v102 = v196;\n        v103 = v205;\n        goto lab_0x40725a;\n    }\n  lab_0x40725a:\n    // 0x40725a\n    v104 = v101;\n    v105 = v103;\n    v106 = v101;\n    v107 = v102;\n    v108 = v103;\n    if ((*(char *)(v5 + 16) & 4) != 0) {\n        goto lab_0x4073e8;\n    } else {\n        goto lab_0x407265;\n    }\n  lab_0x407265:;\n    int64_t result = v105;\n    int64_t v109 = v5 + 16; // 0x407265\n    char v110 = *(char *)v109; // 0x407265\n    if (v110 > -1) {\n        // 0x407288\n        *(char *)v4 = 0;\n        return result;\n    }\n    int64_t v111 = v104; // 0x40726f\n    int64_t v112; // 0x406fb0\n    int64_t v113; // 0x406fb0\n    int64_t v114; // 0x406fb0\n    int64_t v115; // 0x406fb0\n    if ((int32_t)v104 == -1) {\n        uint64_t v116 = *(int64_t *)(v5 + 24); // 0x4074b0\n        v111 = 0;\n        if (v116 < 2) {\n            goto lab_0x407275;\n        } else {\n            int64_t v117 = 1; // 0x4074cd\n            int64_t v118 = 1;\n            v117 *= (int64_t)*(int32_t *)(v5 + 52);\n            int64_t v119 = v118; // 0x4074d7\n            while (v116 > v117) {\n                int64_t v120 = v118 + 1; // 0x4074d9\n                int64_t v121 = v120 & 0xffffffff; // 0x4074d9\n                v119 = v121;\n                if ((int32_t)v120 == 8) {\n                    // break -> 0x4074e1\n                    break;\n                }\n                v118 = v121;\n                v117 *= (int64_t)*(int32_t *)(v5 + 52);\n                v119 = v118;\n            }\n            int32_t v122 = *(int32_t *)v109; // 0x4074e1\n            int64_t v123 = v122 & 256; // 0x4074e7\n            v112 = v123;\n            v114 = v119;\n            v113 = v123;\n            v115 = v119;\n            if ((v122 & 64) == 0) {\n                goto lab_0x407510;\n            } else {\n                goto lab_0x4074f1;\n            }\n        }\n    } else {\n        goto lab_0x407275;\n    }\n  lab_0x4073e8:;\n    int64_t str4 = len2 >= 17 ? (int64_t)&g14 : str2; // 0x407055\n    int32_t len4 = strlen((char *)str4); // 0x4073f5\n    int64_t v124 = v107 - v108; // 0x4073fa\n    int64_t v125 = v5 + 64; // 0x407408\n    int64_t * v126 = (int64_t *)(v5 + 32); // 0x40740d\n    *v126 = (int64_t)len4;\n    int64_t * v127 = (int64_t *)v125; // 0x407412\n    __memcpy_chk(v127, (int64_t *)v108, (int32_t)v124, 41);\n    int32_t * v128 = (int32_t *)(v5 + 20); // 0x407417\n    *v128 = (int32_t)v106;\n    int64_t v129 = *v126; // 0x407429\n    int64_t * v130 = (int64_t *)str4;\n    int32_t v131 = v129;\n    int64_t v132 = *(int64_t *)(v5 + 56);\n    int64_t v133 = v107;\n    uint64_t v134 = v124;\n    unsigned char v135 = *(char *)v132; // 0x407430\n    int64_t v136 = -1; // 0x407436\n    int64_t v137 = v132; // 0x407436\n    if (v135 != 0) {\n        // 0x407438\n        v136 = v135 >= 127 ? v134 : (int64_t)v135;\n        v137 = v132 + 1;\n    }\n    int64_t v138 = v136;\n    while (v134 >= v138) {\n        int64_t v139 = v133 - v138; // 0x407470\n        int64_t v140 = v134 - v138; // 0x407473\n        memcpy((int64_t *)v139, (int64_t *)(v140 + v125), (int32_t)v138);\n        if (v140 == 0) {\n            // 0x407961\n            v104 = (int64_t)*v128;\n            v105 = v139;\n            goto lab_0x407265;\n        }\n        int64_t v141 = v139 - v129; // 0x407493\n        memcpy((int64_t *)v141, v130, v131);\n        v132 = v137;\n        v133 = v141;\n        v134 = v140;\n        v135 = *(char *)v132;\n        v136 = v138;\n        v137 = v132;\n        if (v135 != 0) {\n            // 0x407438\n            v136 = v135 >= 127 ? v134 : (int64_t)v135;\n            v137 = v132 + 1;\n        }\n        // 0x407449\n        v138 = v136;\n    }\n    int64_t v142 = v133 - v134; // 0x40745d\n    memcpy((int64_t *)v142, v127, (int32_t)v134);\n    v104 = (int64_t)*v128;\n    v105 = v142;\n    goto lab_0x407265;\n  lab_0x407618:;\n    int3_t v143 = v144;\n    if ((a3 & 8) == 0) {\n        // 0x407638\n        __frontend_reg_store_fpr(v143, __frontend_reg_load_fpr(v143));\n        goto lab_0x40763a;\n    } else {\n        // 0x40761f\n        if (*(char *)(v1 - 1 + v145) == 48) {\n            int3_t v146 = v143 - 1; // 0x4077f8\n            __frontend_reg_store_fpr(v146, 10.0L);\n            float80_t v147 = __frontend_reg_load_fpr(v143); // 0x407803\n            __frontend_reg_store_fpr(v143, v147 * __frontend_reg_load_fpr(v146));\n            v148 = v146;\n            if (v3 != 1) {\n                goto lab_0x407191;\n            } else {\n                goto lab_0x4071b6;\n            }\n        } else {\n            // 0x40762f\n            __frontend_reg_store_fpr(v143, __frontend_reg_load_fpr(v143));\n            goto lab_0x40763a;\n        }\n    }\n  lab_0x407275:;\n    uint32_t v149 = *(int32_t *)v109 & 256; // 0x407279\n    if ((v149 || (int32_t)v111) == 0) {\n        // 0x407288\n        *(char *)v4 = 0;\n        return result;\n    }\n    int64_t v150 = v149; // 0x407279\n    v112 = v150;\n    v114 = v111;\n    int64_t v151 = v150; // 0x4076e5\n    int64_t v152 = v111; // 0x4076e5\n    if ((v110 & 64) == 0) {\n        goto lab_0x407508;\n    } else {\n        goto lab_0x4074f1;\n    }\n  lab_0x407818:;\n    int64_t v153 = v70; // 0x40781b\n    int64_t v154 = v65 + 48 & 0xffffffff; // 0x40781b\n    goto lab_0x407797;\n  lab_0x407787:\n    // 0x407787\n    v153 = v69;\n    v154 = 48;\n    v68 = v69;\n    v67 = v66;\n    v64 = v11;\n    if ((a3 & 8) != 0) {\n        goto lab_0x4077d0;\n    } else {\n        goto lab_0x407797;\n    }\n  lab_0x4071b6:;\n    int3_t v172 = v148 + 1; // 0x4071b6\n    __frontend_reg_store_fpr(v172, __frontend_reg_load_fpr(v172) / __frontend_reg_load_fpr(v148));\n    __frontend_reg_load_fpr(v172);\n    __sprintf_chk((char *)str3, 1, -1, \"%.0Lf\");\n    int64_t len5 = strlen((char *)str3); // 0x4071e2\n    v96 = len5;\n    v97 = v165;\n    v98 = len5;\n    goto lab_0x407240;\n  lab_0x407191:;\n    int3_t v173 = v174 - 1; // 0x407191\n    __frontend_reg_store_fpr(v173, 1.84467e+19L);\n    float80_t v175 = __frontend_reg_load_fpr(v173); // 0x407197\n    v148 = v174;\n    if (v175 > __frontend_reg_load_fpr(v176)) {\n        float80_t v177 = __frontend_reg_load_fpr(v174); // 0x40719b\n        function_406ef0(v3, __frontend_reg_load_fpr(v176));\n        __frontend_reg_store_fpr(v176, v177);\n        v148 = v176;\n    }\n    goto lab_0x4071b6;\n  lab_0x407508:\n    // 0x407508\n    v113 = v151;\n    v115 = v152;\n    int64_t v168; // 0x406fb0\n    if ((int32_t)v152 == 0) {\n        // 0x40796d\n        v168 = v4;\n        if ((int32_t)v151 == 0) {\n            // 0x407288\n            *(char *)v4 = 0;\n            return result;\n        }\n        goto lab_0x40754d;\n    } else {\n        goto lab_0x407510;\n    }\n  lab_0x4074f1:;\n    int64_t v178 = *(int64_t *)(v5 + 8); // 0x4074f1\n    *(char *)(v178 + 647) = 32;\n    v4 = v178 + 648;\n    v151 = v112;\n    v152 = v114;\n    goto lab_0x407508;\n  lab_0x4077d0:\n    // 0x4077d0\n    v32 = v63;\n    v33 = v71;\n    v34 = v68;\n    v35 = v67;\n    v36 = 0;\n    v37 = v64;\n    v41 = v71;\n    v44 = v68;\n    v39 = v64;\n    if (v3 == 1) {\n        goto lab_0x4073a0;\n    } else {\n        goto lab_0x407370;\n    }\n  lab_0x407797:;\n    int64_t v155 = v1 + 646; // 0x40779c\n    *(char *)v155 = (char)v154;\n    int64_t v156 = v10 & 0xffffffff; // 0x4077a9\n    int64_t v157 = v155 - v10; // 0x4077ac\n    uint32_t v158 = (int32_t)v10; // 0x4077af\n    if (v158 >= 8) {\n        int64_t v159 = v157 + 8 & -8; // 0x40783c\n        *(int64_t *)v157 = *(int64_t *)v9;\n        *(int64_t *)(v156 + v157 - 8) = *(int64_t *)(v156 + v9 - 8);\n        int64_t v160 = v157 - v159; // 0x407853\n        uint32_t v161 = (int32_t)(v160 + v10); // 0x40785f\n        v68 = v153;\n        v67 = 0;\n        v64 = v157;\n        if (v161 >= 8) {\n            int64_t v162 = v9 - v160; // 0x407856\n            int64_t v163 = 0;\n            int64_t v164 = v163 + 8; // 0x40786f\n            *(int64_t *)(v163 + v159) = *(int64_t *)(v162 + v163);\n            v68 = v153;\n            v67 = 0;\n            v64 = v157;\n            while ((v161 & -8) > (int32_t)v164) {\n                // 0x40786d\n                v163 = v164 & 0xffffffff;\n                v164 = v163 + 8;\n                *(int64_t *)(v163 + v159) = *(int64_t *)(v162 + v163);\n                v68 = v153;\n                v67 = 0;\n                v64 = v157;\n            }\n        }\n    } else {\n        if ((v10 & 4) != 0) {\n            // 0x407937\n            *(int32_t *)v157 = *(int32_t *)v9;\n            *(int32_t *)(v156 + v157 - 4) = *(int32_t *)(v156 + v9 - 4);\n            v68 = v153;\n            v67 = 0;\n            v64 = v157;\n        } else {\n            // 0x4077bf\n            v68 = v153;\n            v67 = 0;\n            v64 = v157;\n            if (v158 != 0) {\n                // 0x4077c3\n                *(char *)v157 = *(char *)v9;\n                v68 = v153;\n                v67 = 0;\n                v64 = v157;\n                if ((v10 & 2) != 0) {\n                    // 0x4077e3\n                    *(int16_t *)(v156 + v157 - 2) = *(int16_t *)(v156 + v9 - 2);\n                    v68 = v153;\n                    v67 = 0;\n                    v64 = v157;\n                }\n            }\n        }\n    }\n    goto lab_0x4077d0;\n  lab_0x40763a:\n    // 0x40763a\n    v96 = v145;\n    v97 = v165;\n    v98 = v145 + -1 - v10;\n    goto lab_0x407240;\n  lab_0x407510:;\n    int32_t * v166 = (int32_t *)(v5 + 48); // 0x407510\n    if (*v166 == 0 == (int32_t)v115 == 1) {\n        int64_t v167 = v4 + 1; // 0x407734\n        *(char *)v4 = 107;\n        v168 = v167;\n        if ((int32_t)v113 == 0) {\n            // 0x407743\n            v4 = v167;\n            // 0x407288\n            *(char *)v4 = 0;\n            return result;\n        }\n    } else {\n        int64_t v169 = v4; // 0x407526\n        char v170 = *(char *)((0x100000000 * v115 >> 32) + (int64_t)&g7); // 0x40752a\n        int64_t v171 = v169 + 1; // 0x407531\n        *(char *)v169 = v170;\n        if ((int32_t)v113 == 0) {\n            // 0x407743\n            v4 = v171;\n            // 0x407288\n            *(char *)v4 = 0;\n            return result;\n        }\n        // 0x40753f\n        v168 = v171;\n        if (*v166 != 0) {\n            // 0x4076f0\n            *(char *)v171 = 105;\n            v168 = v169 + 2;\n        }\n    }\n    goto lab_0x40754d;\n  lab_0x40754d:\n    // 0x40754d\n    *(char *)v168 = 66;\n    v4 = v168 + 1;\n    // 0x407288\n    *(char *)v4 = 0;\n    return result;\n}\n"
        },
        {
            "funcName": "function_407980",
            "funcStartAddr": "407980",
            "funcEndAddr": "407b37",
            "decompiledFuncCode": "int64_t function_407980(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = a1; // 0x407996\n    if (a1 == 0) {\n        char * env_val = getenv(\"BLOCK_SIZE\"); // 0x407aa5\n        v1 = (int64_t)env_val;\n        if (env_val == NULL) {\n            char * env_val2 = getenv(\"BLOCKSIZE\"); // 0x407abb\n            v1 = (int64_t)env_val2;\n            if (env_val2 == NULL) {\n                // 0x407acc\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x407b22\n                    *a3 = 1024;\n                    *(int32_t *)a2 = 0;\n                } else {\n                    // 0x407adb\n                    *a3 = 512;\n                    *(int32_t *)a2 = 0;\n                }\n                // 0x4079de\n                return 0;\n            }\n        }\n    }\n    char v2 = *(char *)v1; // 0x40799e\n    int64_t v3 = v1 + (int64_t)(v2 == 39);\n    int64_t v4 = v2 != 39 ? 0 : 4;\n    int64_t v5 = function_40d7b0(v3, g6, (int64_t *)&g5, 4); // 0x4079be\n    if ((int32_t)v5 >= 0) {\n        // 0x4079c7\n        *a3 = 1;\n        int32_t v6 = *(int32_t *)((0x100000000 * v5 >> 30) + (int64_t)&g5); // 0x4079d1\n        *(int32_t *)a2 = v6 | (int32_t)v4;\n        // 0x4079de\n        return 0;\n    }\n    // 0x4079f0\n    int64_t v7; // bp-48, 0x407980\n    int64_t v8; // 0x407980\n    int64_t result = function_40a8b0(v3, &v7, 0, (int64_t)a3, \"eEgGkKmMpPtTyYzZ0\", v8); // 0x407a03\n    if ((int32_t)result != 0) {\n        // 0x407a64\n        *(int32_t *)a2 = 0;\n        // 0x407a6d\n        *a3 = getenv(\"POSIXLY_CORRECT\") == NULL ? 1024 : 512;\n        return 4;\n    }\n    int64_t v9 = (int64_t)*(char *)v3 + 0xffffffd0; // 0x407a0f\n    int64_t v10 = v9 & 0xffffffff; // 0x407a0f\n    int64_t v11 = v10; // 0x407a15\n    int64_t v12 = v4; // 0x407a15\n    int64_t v13; // 0x407980\n    if ((char)v9 < 10) {\n        goto lab_0x407a64;\n    } else {\n        // 0x407a17\n        v13 = v10;\n        if (v3 != v7) {\n            int64_t v14 = v3 + 1; // 0x407a39\n            int64_t v15 = (int64_t)*(char *)v14 + 0xffffffd0; // 0x407a40\n            while ((char)v15 >= 10) {\n                // 0x407a30\n                if (v14 == v7) {\n                    // 0x407af8\n                    v13 = v15 & 0xffffffff;\n                    goto lab_0x407af8_2;\n                }\n                v14++;\n                v15 = (int64_t)*(char *)v14 + 0xffffffd0;\n            }\n            // 0x407a64\n            v11 = v15 & 0xffffffff;\n            v12 = v4;\n            goto lab_0x407a64;\n        } else {\n            goto lab_0x407af8_2;\n        }\n    }\n  lab_0x407a64:\n    // 0x407a64\n    *(int32_t *)a2 = (int32_t)v12;\n    if (v11 == 0) {\n        // 0x407a6d\n        *a3 = getenv(\"POSIXLY_CORRECT\") == NULL ? 1024 : 512;\n        return 4;\n    }\n    // 0x4079de\n    return result;\n  lab_0x407af8_2:;\n    // 0x407af8\n    int64_t v16; // 0x407980\n    if (*(char *)(v7 - 1) == 66) {\n        int64_t v17 = v4 | 384; // 0x407b10\n        v11 = v13;\n        v12 = v17;\n        v16 = v17;\n        if (*(char *)(v7 - 2) != 105) {\n            goto lab_0x407a64;\n        } else {\n            goto lab_0x407b02;\n        }\n    } else {\n        // 0x407afe\n        v16 = v4 | 128;\n        goto lab_0x407b02;\n    }\n  lab_0x407b02:\n    // 0x407b02\n    v11 = v13;\n    v12 = v16 & 0xffffffdf | 32;\n    goto lab_0x407a64;\n}\n"
        },
        {
            "funcName": "function_407b40",
            "funcStartAddr": "407b40",
            "funcEndAddr": "407b88",
            "decompiledFuncCode": "int64_t function_407b40(uint64_t a1, int64_t * a2) {\n    int64_t v1 = (int64_t)a2 + 20; // 0x407b40\n    *(char *)v1 = 0;\n    int64_t result = v1; // 0x407b52\n    result--;\n    *(char *)result = (char)a1 + 48;\n    while (a1 >= 10) {\n        // 0x407b5b\n        result--;\n        *(char *)result = (char)a1 + 48;\n    }\n    // 0x407b84\n    return result;\n}\n"
        },
        {
            "funcName": "function_407b90",
            "funcStartAddr": "407b90",
            "funcEndAddr": "407f2b",
            "decompiledFuncCode": "int64_t function_407b90(int64_t a1, int64_t a2, int64_t a3, uint64_t a4, int32_t a5, uint32_t a6) {\n    uint64_t v1 = (int64_t)a6; // 0x407b9c\n    char * str = (char *)a1; // 0x407bb6\n    int32_t len = strlen(str); // 0x407bb6\n    int64_t v2 = len; // 0x407bb6\n    int32_t * v3 = NULL; // 0x407bc2\n    int64_t v4 = a1; // 0x407bc2\n    int64_t v5 = 0; // 0x407bc2\n    int64_t v6 = v2; // 0x407bc2\n    int64_t v7 = v2; // 0x407bc2\n    int64_t v8; // 0x407b90\n    int64_t result; // 0x407b90\n    int64_t v9; // 0x407b90\n    int64_t v10; // 0x407b90\n    int32_t * v11; // 0x407b90\n    int32_t v12; // 0x407b90\n    int64_t v13; // 0x407da0\n    int64_t * mem; // 0x407d74\n    if ((a6 & 2) == 0) {\n        // 0x407d10\n        v3 = NULL;\n        v4 = a1;\n        v5 = 0;\n        v6 = v2;\n        v7 = v2;\n        if (__ctype_get_mb_cur_max() < 2) {\n            goto lab_0x407bd6;\n        } else {\n            int32_t v14 = mbstowcs(NULL, str, 0); // 0x407d2b\n            if (v14 != -1) {\n                int32_t n = v14 + 1; // 0x407d60\n                int32_t size = 4 * n; // 0x407d6f\n                mem = malloc(size);\n                if (mem == NULL) {\n                    // 0x407e8a\n                    v3 = (int32_t *)mem;\n                    v4 = a1;\n                    v5 = 0;\n                    v6 = v2;\n                    v7 = v2;\n                    v11 = NULL;\n                    v8 = 0;\n                    result = -1;\n                    if (v1 % 2 != 0) {\n                        goto lab_0x407bd6;\n                    } else {\n                        goto lab_0x407cae;\n                    }\n                } else {\n                    int32_t v15 = mbstowcs((int32_t *)mem, str, n); // 0x407d92\n                    v3 = (int32_t *)mem;\n                    v4 = a1;\n                    v5 = 0;\n                    v6 = v2;\n                    v7 = v2;\n                    if (v15 == 0) {\n                        goto lab_0x407bd6;\n                    } else {\n                        // 0x407da0\n                        v13 = (int64_t)mem;\n                        *(int32_t *)((int64_t)size - 4 + v13) = 0;\n                        int32_t wc = *(int32_t *)mem; // 0x407db1\n                        if (wc == 0) {\n                            // 0x407e9f\n                            v10 = wcswidth((int32_t *)mem, n);\n                            goto lab_0x407eb0;\n                        } else {\n                            int32_t v16 = 0; // 0x407dd9\n                            if (iswprint(wc) == 0) {\n                                // 0x407ddb\n                                *(int32_t *)v13 = 0xfffd;\n                                v16 = 1;\n                            }\n                            int32_t v17 = v16;\n                            int64_t v18 = v13 + 4; // 0x407de6\n                            int32_t v19 = *(int32_t *)v18; // 0x407dea\n                            int32_t wc2 = v19; // 0x407dee\n                            while (v19 != 0) {\n                                int64_t v20 = v18;\n                                v16 = v17;\n                                if (iswprint(wc2) == 0) {\n                                    // 0x407ddb\n                                    *(int32_t *)v20 = 0xfffd;\n                                    v16 = 1;\n                                }\n                                // 0x407de6\n                                v17 = v16;\n                                v18 = v20 + 4;\n                                v19 = *(int32_t *)v18;\n                                wc2 = v19;\n                            }\n                            int64_t v21 = wcswidth((int32_t *)mem, n); // 0x407df7\n                            v10 = v21;\n                            if ((char)v17 == 0) {\n                                goto lab_0x407eb0;\n                            } else {\n                                // 0x407e0a\n                                v9 = v21;\n                                v12 = wcstombs(NULL, (int32_t *)mem, 0);\n                                goto lab_0x407e20;\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 0x407d36\n                v3 = NULL;\n                v4 = a1;\n                v5 = 0;\n                v6 = v2;\n                v7 = v2;\n                v11 = NULL;\n                v8 = 0;\n                result = -1;\n                if (v1 % 2 != 0) {\n                    goto lab_0x407bd6;\n                } else {\n                    goto lab_0x407cae;\n                }\n            }\n        }\n    } else {\n        goto lab_0x407bd6;\n    }\n  lab_0x407bd6:;\n    int32_t * v22 = v3; // 0x407bdd\n    int64_t v23 = v4; // 0x407bdd\n    int64_t v24 = a4; // 0x407bdd\n    int64_t v25 = v5; // 0x407bdd\n    int64_t v26 = a4; // 0x407bdd\n    int32_t * v27 = v3; // 0x407bdd\n    int64_t v28 = v4; // 0x407bdd\n    int64_t v29 = v5; // 0x407bdd\n    int64_t v30 = v6; // 0x407bdd\n    int64_t v31 = v7; // 0x407bdd\n    if (v7 <= a4) {\n        goto lab_0x407cdb;\n    } else {\n        goto lab_0x407be8;\n    }\n  lab_0x407cdb:\n    // 0x407cdb\n    v22 = v27;\n    v23 = v28;\n    v24 = v31;\n    v25 = v29;\n    v26 = v30;\n    int64_t v32; // 0x407b90\n    int64_t v33; // 0x407b90\n    int64_t v34; // 0x407b90\n    int64_t v35; // 0x407b90\n    int64_t v36; // 0x407b90\n    int64_t v37; // 0x407b90\n    int64_t v38; // 0x407b90\n    int32_t * v39; // 0x407b90\n    int32_t * v40; // 0x407b90\n    int64_t v41; // 0x407b90\n    int64_t v42; // 0x407b90\n    if (v31 >= a4) {\n        goto lab_0x407be8;\n    } else {\n        int64_t v43 = a4 - v31; // 0x407cee\n        *(int64_t *)a4 = v31;\n        v39 = v27;\n        v41 = v28;\n        v37 = v43;\n        v32 = v29;\n        v35 = v30;\n        v40 = v27;\n        v42 = v28;\n        v38 = 0;\n        v33 = v29;\n        v34 = v43;\n        v36 = v30;\n        if (a5 != 0) {\n            goto lab_0x407bf8;\n        } else {\n            goto lab_0x407c0c;\n        }\n    }\n  lab_0x407be8:\n    // 0x407be8\n    *(int64_t *)a4 = v24;\n    v39 = v22;\n    v41 = v23;\n    v37 = 0;\n    v32 = v25;\n    v35 = v26;\n    v40 = v22;\n    v42 = v23;\n    v38 = 0;\n    v33 = v25;\n    v34 = 0;\n    v36 = v26;\n    if (a5 == 0) {\n        goto lab_0x407c0c;\n    } else {\n        goto lab_0x407bf8;\n    }\n  lab_0x407c0c:;\n    uint64_t v44 = v36;\n    int64_t v45 = (v1 & 4) == 0 ? v38 : 0;\n    int64_t v46 = (v1 & 8) != 0 ? 0 : v34; // 0x407c28\n    if (a3 != 0) {\n        uint64_t v47 = a2 - 1 + a3; // 0x407c31\n        if (v47 > a2 == (v45 != 0)) {\n            int64_t v48 = -v45; // 0x407c5b\n            int64_t v49 = a2; // 0x407b90\n            int64_t v50 = v49;\n            int64_t v51 = v50 + 1; // 0x407c4d\n            *(char *)v50 = 32;\n            v49 = v51;\n            while (v47 > v51 == (a2 - v51 != v48)) {\n                // 0x407c4d\n                v50 = v49;\n                v51 = v50 + 1;\n                *(char *)v50 = 32;\n                v49 = v51;\n            }\n        }\n        // 0x407c60\n        *(char *)a2 = 0;\n        uint64_t v52 = v47 - a2; // 0x407c6b\n        int64_t v53 = v52 > v44 ? v44 : v52; // 0x407c71\n        int64_t v54 = (int64_t)mempcpy((int64_t *)a2, (int64_t *)v42, (int32_t)v53); // 0x407c75\n        int64_t v55 = v54; // 0x407c80\n        if (v46 != 0 == v47 > v54) {\n            int64_t v56 = v54 + 1; // 0x407c95\n            *(char *)v54 = 32;\n            v55 = v56;\n            while (v47 > v56 == (v46 - v56 != -v54)) {\n                int64_t v57 = v56;\n                v56 = v57 + 1;\n                *(char *)v57 = 32;\n                v55 = v56;\n            }\n        }\n        // 0x407ca8\n        *(char *)v55 = 0;\n    }\n    // 0x407cab\n    v11 = v40;\n    v8 = v33;\n    result = v44 + v45 + v46;\n    goto lab_0x407cae;\n  lab_0x407bf8:\n    // 0x407bf8\n    v40 = v39;\n    v42 = v41;\n    v38 = v37;\n    v33 = v32;\n    v34 = 0;\n    v36 = v35;\n    if (a5 != 1) {\n        int64_t v71 = v37 / 2; // 0x407c06\n        v40 = v39;\n        v42 = v41;\n        v38 = v37 % 2 + v71;\n        v33 = v32;\n        v34 = v71;\n        v36 = v35;\n    }\n    goto lab_0x407c0c;\n  lab_0x407cae:\n    // 0x407cae\n    free((int64_t *)v11);\n    free((int64_t *)v8);\n    return result;\n  lab_0x407eb0:\n    // 0x407eb0\n    v27 = (int32_t *)mem;\n    v28 = a1;\n    v29 = 0;\n    v30 = v2;\n    v31 = v10;\n    v9 = v10;\n    v12 = len;\n    if (v10 <= a4) {\n        goto lab_0x407cdb;\n    } else {\n        goto lab_0x407e20;\n    }\n  lab_0x407e20:;\n    int32_t size2 = v12 + 1;\n    int64_t * mem2 = malloc(size2); // 0x407e25\n    int64_t v58 = (int64_t)mem2; // 0x407e25\n    if (mem2 == NULL) {\n        // 0x407f00\n        v3 = (int32_t *)mem;\n        v4 = a1;\n        v5 = v58;\n        v6 = v2;\n        v7 = v9;\n        v11 = (int32_t *)mem;\n        v8 = v58;\n        result = -1;\n        if (v1 % 2 != 0) {\n            goto lab_0x407bd6;\n        } else {\n            goto lab_0x407cae;\n        }\n    } else {\n        int32_t v59 = *(int32_t *)mem; // 0x407e3e\n        int32_t * v60 = (int32_t *)mem; // 0x407e48\n        int64_t v61 = 0; // 0x407e48\n        if (v59 != 0) {\n            int64_t v62 = 0;\n            int64_t v63 = v13;\n            int32_t v64 = wcwidth(v59); // 0x407e72\n            int64_t v65; // 0x407b90\n            if (v64 != -1) {\n                // 0x407e58\n                v65 = v64;\n            } else {\n                // 0x407e7c\n                *(int32_t *)v63 = 0xfffd;\n                v65 = 1;\n            }\n            int64_t v66 = v65 + v62; // 0x407e5a\n            while (v66 <= a4) {\n                int64_t v67 = v63 + 4; // 0x407e64\n                int32_t * v68 = (int32_t *)v67;\n                int32_t v69 = *v68; // 0x407e68\n                v60 = v68;\n                v61 = v66;\n                if (v69 == 0) {\n                    goto lab_0x407ed8;\n                }\n                v62 = v66;\n                v63 = v67;\n                v64 = wcwidth(v69);\n                if (v64 != -1) {\n                    // 0x407e58\n                    v65 = v64;\n                } else {\n                    // 0x407e7c\n                    *(int32_t *)v63 = 0xfffd;\n                    v65 = 1;\n                }\n                // 0x407e5a\n                v66 = v65 + v62;\n            }\n            // 0x407ed8\n            v60 = (int32_t *)v63;\n            v61 = v62;\n        }\n      lab_0x407ed8:\n        // 0x407ed8\n        *v60 = 0;\n        int32_t v70 = wcstombs((char *)mem2, (int32_t *)mem, size2); // 0x407eeb\n        v3 = (int32_t *)mem;\n        v4 = v58;\n        v5 = v58;\n        v6 = v70;\n        v7 = v61;\n        goto lab_0x407bd6;\n    }\n}\n"
        },
        {
            "funcName": "function_407f30",
            "funcStartAddr": "407f30",
            "funcEndAddr": "407fcd",
            "decompiledFuncCode": "int64_t function_407f30(int64_t a1, int64_t a2, int32_t a3, int32_t a4) {\n    uint64_t v1 = a2 + 1; // 0x407f58\n    int64_t * v2 = (int64_t *)0;\n    int64_t * mem = realloc(v2, (int32_t)v1); // 0x407f62\n    while (mem != NULL) {\n        int64_t v3 = (int64_t)mem;\n        *(int64_t *)a2 = a2;\n        int64_t v4 = function_407b90(a1, v3, v1, a2, a3, a4); // 0x407f89\n        int64_t result; // 0x407f30\n        if (v4 == -1) {\n            // 0x407fc0\n            free(mem);\n            result = 0;\n            return result;\n        }\n        // 0x407f94\n        result = v3;\n        if (v1 > v4) {\n            // 0x407f9c\n            return result;\n        }\n        v1 = v4 + 1;\n        v2 = (int64_t *)v3;\n        mem = realloc(v2, (int32_t)v1);\n    }\n    // 0x407fb0\n    free(v2);\n    // 0x407f9c\n    return 0;\n}\n"
        },
        {
            "funcName": "function_407fd0",
            "funcStartAddr": "407fd0",
            "funcEndAddr": "408183",
            "decompiledFuncCode": "int64_t function_407fd0(uint64_t a1, int64_t a2, uint64_t a3) {\n    uint64_t v1 = a2 + a1; // 0x407fd9\n    int64_t v2; // 0x407fd0\n    int64_t v3; // 0x407fd0\n    int64_t v4; // 0x407fd0\n    int64_t v5; // 0x407fd0\n    int64_t v6; // 0x407fd0\n    if (__ctype_get_mb_cur_max() < 2) {\n        // 0x408110\n        if (v1 <= a1) {\n            // 0x4080f6\n            return 0;\n        }\n        int16_t * v7 = *__ctype_b_loc(); // 0x408124\n        v6 = a1;\n        v3 = 0;\n        while (true) {\n          lab_0x408130:\n            // 0x408130\n            v4 = v3;\n            unsigned char v8 = *(char *)v6; // 0x408134\n            int16_t v9 = *(int16_t *)(2 * (int64_t)v8 + (int64_t)v7); // 0x408138\n            if ((v9 & 0x4000) != 0) {\n                goto lab_0x40814a;\n            } else {\n                // 0x408141\n                v2 = 0xffffffff;\n                if ((a3 & 2) != 0) {\n                    // break -> 0x4080f6\n                    break;\n                }\n                // 0x408146\n                v5 = v4;\n                if ((v9 & 2) != 0) {\n                    goto lab_0x408157;\n                } else {\n                    goto lab_0x40814a;\n                }\n            }\n        }\n      lab_0x4080f6_7:\n        // 0x4080f6\n        return v2 & 0xffffffff;\n    }\n    // 0x407ff7\n    if (v1 <= a1) {\n        // 0x4080f6\n        return 0;\n    }\n    int64_t v10 = a1;\n    int64_t v11 = 0; // 0x407fd0\n    int64_t v12; // 0x407fd0\n    int64_t v13; // 0x407fd0\n    int64_t v14; // 0x407fd0\n    int64_t v15; // 0x407fd0\n    while (true) {\n      lab_0x40802c:\n        // 0x40802c\n        v13 = v11;\n        v15 = v10;\n        char v16 = *(char *)v15; // 0x40802c\n        if (v16 < 64) {\n            // 0x408010\n            v14 = v15;\n            v12 = v13;\n            if (v16 > 36 || (v16 & -4) == 32) {\n                goto lab_0x40801b;\n            } else {\n                goto lab_0x408042;\n            }\n        } else {\n            if (v16 == 64) {\n                goto lab_0x408042;\n            } else {\n                // 0x408037\n                v14 = v15;\n                v12 = v13;\n                if (v16 < 96 || v16 < 127) {\n                    goto lab_0x40801b;\n                } else {\n                    goto lab_0x408042;\n                }\n            }\n        }\n    }\n  lab_0x4080f6_7:\n    // 0x4080f6\n    return v2 & 0xffffffff;\n  lab_0x40814a:\n    // 0x40814a\n    v2 = v4;\n    if ((int32_t)v4 == 0x7fffffff) {\n        return v2 & 0xffffffff;\n    }\n    // 0x408153\n    v5 = v4 + 1 & 0xffffffff;\n    goto lab_0x408157;\n  lab_0x408157:;\n    int64_t v17 = v6 + 1; // 0x408130\n    v2 = v5;\n    v6 = v17;\n    v3 = v5;\n    if (v1 == v17) {\n        // break -> 0x4080f6\n        goto lab_0x4080f6_7;\n    }\n    goto lab_0x408130;\n  lab_0x40801b:;\n    int64_t v18 = v14 + 1; // 0x40801f\n    v11 = v12 + 1 & 0xffffffff;\n  lab_0x408023:\n    // 0x408023\n    v10 = v18;\n    if (v10 >= v1) {\n        // break -> 0x4080f6\n        goto lab_0x4080f6_7;\n    }\n    goto lab_0x40802c;\n  lab_0x408042:;\n    int64_t ps = 0; // bp-64, 0x408042\n    int64_t v19 = v15; // 0x40804b\n    int64_t v20 = v13; // 0x40804b\n    int64_t v21; // 0x407fd0\n    int64_t v22; // 0x407fd0\n    while (true) {\n      lab_0x408074:\n        // 0x408074\n        v21 = v20;\n        v22 = v19;\n        int32_t wc; // bp-68, 0x407fd0\n        int64_t v23 = function_40c400((int64_t *)&wc, v22, v1 - v22); // 0x408087\n        switch (v23) {\n            case -1: {\n                goto lab_0x4080e0;\n            }\n            case -2: {\n                // 0x408160\n                v2 = 0xffffffff;\n                if (a3 % 2 == 0) {\n                    // 0x408023\n                    v2 = v21 + 1 & 0xffffffff;\n                }\n                // 0x4080f6\n                return v2 & 0xffffffff;\n            }\n            default: {\n                int32_t v24 = wcwidth(wc); // 0x4080aa\n                int64_t v25; // 0x407fd0\n                if (v24 >= 0) {\n                    int64_t v26 = v24; // 0x4080aa\n                    v2 = 0x7fffffff;\n                    if ((0x7fffffff - v21 & 0xffffffff) < v26) {\n                        // break (via goto) -> 0x4080f6\n                        goto lab_0x4080f6_7;\n                    }\n                    // 0x408060\n                    v25 = v21 + v26 & 0xffffffff;\n                } else {\n                    // 0x4080b3\n                    v2 = 0xffffffff;\n                    if ((a3 & 2) != 0) {\n                        // break (via goto) -> 0x4080f6\n                        goto lab_0x4080f6_7;\n                    }\n                    // 0x4080b9\n                    v25 = v21;\n                    if (iswcntrl(wc) == 0) {\n                        // 0x4080c6\n                        v2 = 0x7fffffff;\n                        if ((int32_t)v21 == 0x7fffffff) {\n                            // break (via goto) -> 0x4080f6\n                            goto lab_0x4080f6_7;\n                        }\n                        // 0x4080d3\n                        v25 = v21 + 1 & 0xffffffff;\n                    }\n                }\n                int64_t v27 = (v23 == 0 ? 1 : v23) + v22; // 0x408068\n                int32_t v28 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x40806b\n                v18 = v27;\n                v11 = v25;\n                v19 = v27;\n                v20 = v25;\n                if (v28 != 0) {\n                    goto lab_0x408023;\n                }\n                goto lab_0x408074;\n            }\n        }\n    }\n  lab_0x4080e0:\n    // 0x4080e0\n    v14 = v22;\n    v12 = v21;\n    v2 = 0xffffffff;\n    if (a3 % 2 != 0) {\n        // break -> 0x4080f6\n        goto lab_0x4080f6_7;\n    }\n    goto lab_0x40801b;\n}\n"
        },
        {
            "funcName": "function_408190",
            "funcStartAddr": "408190",
            "funcEndAddr": "4081b3",
            "decompiledFuncCode": "int64_t function_408190(int64_t str, uint32_t a2) {\n    // 0x408190\n    return function_407fd0(str, (int64_t)strlen((char *)str), (int64_t)a2);\n}\n"
        },
        {
            "funcName": "function_4081c0",
            "funcStartAddr": "4081c0",
            "funcEndAddr": "408259",
            "decompiledFuncCode": "int64_t function_4081c0(int64_t str) {\n    // 0x4081c0\n    if (str == 0) {\n        // 0x408239\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g40);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x4081ce\n    int64_t result = (int64_t)found_char_pos; // 0x4081ce\n    if (found_char_pos == NULL) {\n        // 0x408229\n        g71 = str;\n        g39 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x4081d8\n    if (v1 - str < 7) {\n        // 0x408229\n        g71 = str;\n        g39 = str;\n        return result;\n    }\n    // 0x4081e8\n    bool v2; // 0x4081c0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x4081c0\n    int64_t v5 = result - 6; // 0x4081c0\n    int64_t v6 = 7; // 0x4081f6\n    unsigned char v7 = *(char *)v5; // 0x4081f6\n    char v8 = *(char *)v4; // 0x4081f6\n    char v9 = v8; // 0x4081f6\n    bool v10 = false; // 0x4081f6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x408200\n    int64_t v13 = v1; // 0x408200\n    int64_t v14 = 3; // 0x408200\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x408229\n        g71 = str;\n        g39 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x408212\n    char v16 = *(char *)v12; // 0x408212\n    char v17 = v16; // 0x408212\n    bool v18 = false; // 0x408212\n    while (v15 == v16) {\n        // 0x408202\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40821c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40821e\n        v20 = result + 4;\n        g37 = v20;\n    }\n    // 0x408229\n    g71 = v20;\n    g39 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408260",
            "funcStartAddr": "408260",
            "funcEndAddr": "408352",
            "decompiledFuncCode": "int64_t function_408260(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x408274\n    int64_t result = (int64_t)v1; // 0x408274\n    if (result != a1) {\n        // 0x408281\n        return result;\n    }\n    int64_t v2 = function_40dc80(); // 0x408290\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x408346\n    if (v3 == 85) {\n        // 0x4082a0\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x408338\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g13 : (int64_t)&g1;\n            return result2;\n        }\n        char v4 = *v1; // 0x4082ce\n        int64_t result3 = v4 != 96 ? (int64_t)&g8 : (int64_t)&g11; // 0x4082db\n        // 0x408281\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x408338\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g13 : (int64_t)&g1;\n        return result2;\n    }\n    char v5 = *v1; // 0x40831d\n    int64_t result4 = v5 != 96 ? (int64_t)&g9 : (int64_t)&g10; // 0x40832a\n    // 0x408281\n    return result4;\n}\n"
        },
        {
            "funcName": "function_408360",
            "funcStartAddr": "408360",
            "funcEndAddr": "4083b7",
            "decompiledFuncCode": "int64_t function_408360(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9) {\n    // 0x408360\n    __ctype_get_mb_cur_max();\n    return a5 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4083b7",
            "funcStartAddr": "4083b7",
            "funcEndAddr": "409581",
            "decompiledFuncCode": "int64_t function_4083b7(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x408401\n    int64_t v3 = 0; // 0x408401\n    int64_t v4; // 0x4083b7\n    int64_t v5; // 0x4083b7\n    int64_t v6; // 0x4083b7\n    int64_t v7; // 0x4083b7\n    int64_t v8; // 0x4083b7\n    int64_t v9; // 0x4083b7\n    int64_t v10; // 0x4083b7\n    int64_t v11; // 0x4083b7\n    int64_t v12; // 0x4083b7\n    int64_t v13; // 0x4083b7\n    int64_t v14; // 0x4083b7\n    int64_t v15; // 0x4083b7\n    int64_t v16; // 0x4083b7\n    int64_t v17; // 0x4083b7\n    int64_t v18; // 0x4083b7\n    int64_t result; // 0x4083b7\n    int64_t v19; // 0x4083b7\n    int32_t wc; // bp+132, 0x4083b7\n    int64_t ps; // bp+136, 0x4083b7\n    char v20; // 0x408970\n    int64_t v21; // 0x408970\n    int64_t v22; // 0x408d18\n    int64_t v23; // 0x4083b7\n    int64_t v24; // 0x408d37\n    int32_t v25; // 0x4083b7\n    while (true) {\n      lab_0x408408_2:\n        // 0x408408\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x4083b7\n        int64_t v27; // 0x40843c\n        while (true) {\n          lab_0x408408:\n            // 0x408408\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x408413\n            if (v15 == -1) {\n                // 0x408415\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x408423\n            if (v28) {\n                // break (via goto) -> 0x408b88\n                goto lab_0x408b88;\n            }\n            // 0x40842c\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g91 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x408a1b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x408561;\n                    }\n                    // 0x408e3d\n                    v26 = v5 + 1;\n                    goto lab_0x408408;\n                }\n                case 7: {\n                    goto lab_0x408561;\n                }\n                case 8: {\n                    goto lab_0x408561;\n                }\n                case 9: {\n                    goto lab_0x40877a_2;\n                }\n                case 10: {\n                    goto lab_0x40877a_2;\n                }\n                case 11: {\n                    goto lab_0x408561;\n                }\n                case 12: {\n                    goto lab_0x408561;\n                }\n                case 13: {\n                    goto lab_0x40877a_2;\n                }\n                case 32: {\n                    goto lab_0x40877a_2;\n                }\n                case 33: {\n                    goto lab_0x40877a_2;\n                }\n                case 34: {\n                    goto lab_0x40877a_2;\n                }\n                case 35: {\n                    goto lab_0x40852d;\n                }\n                case 36: {\n                    goto lab_0x40877a_2;\n                }\n                case 37: {\n                    goto lab_0x408561;\n                }\n                case 38: {\n                    goto lab_0x40877a_2;\n                }\n                case 39: {\n                    goto lab_0x40877a_2;\n                }\n                case 40: {\n                    goto lab_0x40877a_2;\n                }\n                case 41: {\n                    goto lab_0x40877a_2;\n                }\n                case 42: {\n                    goto lab_0x40877a_2;\n                }\n                case 43: {\n                    goto lab_0x408561;\n                }\n                case 44: {\n                    goto lab_0x408561;\n                }\n                case 45: {\n                    goto lab_0x408561;\n                }\n                case 46: {\n                    goto lab_0x408561;\n                }\n                case 47: {\n                    goto lab_0x408561;\n                }\n                case 48: {\n                    goto lab_0x408561;\n                }\n                case 49: {\n                    goto lab_0x408561;\n                }\n                case 50: {\n                    goto lab_0x408561;\n                }\n                case 51: {\n                    goto lab_0x408561;\n                }\n                case 52: {\n                    goto lab_0x408561;\n                }\n                case 53: {\n                    goto lab_0x408561;\n                }\n                case 54: {\n                    goto lab_0x408561;\n                }\n                case 55: {\n                    goto lab_0x408561;\n                }\n                case 56: {\n                    goto lab_0x408561;\n                }\n                case 57: {\n                    goto lab_0x408561;\n                }\n                case 58: {\n                    goto lab_0x408561;\n                }\n                case 59: {\n                    goto lab_0x40877a_2;\n                }\n                case 60: {\n                    goto lab_0x40877a_2;\n                }\n                case 61: {\n                    goto lab_0x40877a_2;\n                }\n                case 62: {\n                    goto lab_0x40877a_2;\n                }\n                case 63: {\n                    goto lab_0x40877a_2;\n                }\n                case 65: {\n                    goto lab_0x408561;\n                }\n                case 66: {\n                    goto lab_0x408561;\n                }\n                case 67: {\n                    goto lab_0x408561;\n                }\n                case 68: {\n                    goto lab_0x408561;\n                }\n                case 69: {\n                    goto lab_0x408561;\n                }\n                case 70: {\n                    goto lab_0x408561;\n                }\n                case 71: {\n                    goto lab_0x408561;\n                }\n                case 72: {\n                    goto lab_0x408561;\n                }\n                case 73: {\n                    goto lab_0x408561;\n                }\n                case 74: {\n                    goto lab_0x408561;\n                }\n                case 75: {\n                    goto lab_0x408561;\n                }\n                case 76: {\n                    goto lab_0x408561;\n                }\n                case 77: {\n                    goto lab_0x408561;\n                }\n                case 78: {\n                    goto lab_0x408561;\n                }\n                case 79: {\n                    goto lab_0x408561;\n                }\n                case 80: {\n                    goto lab_0x408561;\n                }\n                case 81: {\n                    goto lab_0x408561;\n                }\n                case 82: {\n                    goto lab_0x408561;\n                }\n                case 83: {\n                    goto lab_0x408561;\n                }\n                case 84: {\n                    goto lab_0x408561;\n                }\n                case 85: {\n                    goto lab_0x408561;\n                }\n                case 86: {\n                    goto lab_0x408561;\n                }\n                case 87: {\n                    goto lab_0x408561;\n                }\n                case 88: {\n                    goto lab_0x408561;\n                }\n                case 89: {\n                    goto lab_0x408561;\n                }\n                case 90: {\n                    goto lab_0x408561;\n                }\n                case 91: {\n                    goto lab_0x40877a_2;\n                }\n                case 92: {\n                    goto lab_0x40877a_2;\n                }\n                case 93: {\n                    goto lab_0x408561;\n                }\n                case 94: {\n                    goto lab_0x40877a_2;\n                }\n                case 95: {\n                    goto lab_0x408561;\n                }\n                case 96: {\n                    goto lab_0x40877a_2;\n                }\n                case 97: {\n                    goto lab_0x408561;\n                }\n                case 98: {\n                    goto lab_0x408561;\n                }\n                case 99: {\n                    goto lab_0x408561;\n                }\n                case 100: {\n                    goto lab_0x408561;\n                }\n                case 101: {\n                    goto lab_0x408561;\n                }\n                case 102: {\n                    goto lab_0x408561;\n                }\n                case 103: {\n                    goto lab_0x408561;\n                }\n                case 104: {\n                    goto lab_0x408561;\n                }\n                case 105: {\n                    goto lab_0x408561;\n                }\n                case 106: {\n                    goto lab_0x408561;\n                }\n                case 107: {\n                    goto lab_0x408561;\n                }\n                case 108: {\n                    goto lab_0x408561;\n                }\n                case 109: {\n                    goto lab_0x408561;\n                }\n                case 110: {\n                    goto lab_0x408561;\n                }\n                case 111: {\n                    goto lab_0x408561;\n                }\n                case 112: {\n                    goto lab_0x408561;\n                }\n                case 113: {\n                    goto lab_0x408561;\n                }\n                case 114: {\n                    goto lab_0x408561;\n                }\n                case 115: {\n                    goto lab_0x408561;\n                }\n                case 116: {\n                    goto lab_0x408561;\n                }\n                case 117: {\n                    goto lab_0x408561;\n                }\n                case 118: {\n                    goto lab_0x408561;\n                }\n                case 119: {\n                    goto lab_0x408561;\n                }\n                case 120: {\n                    goto lab_0x408561;\n                }\n                case 121: {\n                    goto lab_0x408561;\n                }\n                case 122: {\n                    goto lab_0x408561;\n                }\n                case 123: {\n                    goto lab_0x408505;\n                }\n                case 124: {\n                    goto lab_0x40877a_2;\n                }\n                case 125: {\n                    goto lab_0x408505;\n                }\n                case 126: {\n                    goto lab_0x40852d;\n                }\n                default: {\n                    goto lab_0x408905;\n                }\n            }\n        }\n      lab_0x408905:\n        if (v23 != 1) {\n            // 0x408c70\n            ps = 0;\n            int64_t len = v15; // 0x408c80\n            if (v15 == -1) {\n                // 0x408c82\n                len = strlen((char *)str);\n            }\n            // 0x408cae\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x408d0f:\n                // 0x408d0f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x408d14\n                int64_t v30 = v29 + str;\n                v24 = function_40c400((int64_t *)&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40928a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40928a_2;\n                    }\n                    case -2: {\n                        // 0x40936d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x4093a7\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x4093aa\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x4093b7\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x4093b0\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40928a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40928a_2;\n                    }\n                    case 1: {\n                        goto lab_0x408ce0;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x408d8c\n                        char v34 = *(char *)v33; // 0x408d9d\n                        unsigned char v35; // 0x4083b7\n                        if (v34 < 125) {\n                            // 0x408da8\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x408dbf\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                goto lab_0x40877a_2;\n                            }\n                        }\n                        // 0x408d90\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x408d9d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x408da8\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x408dbf\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    goto lab_0x40877a_2;\n                                }\n                            }\n                            // 0x408d90\n                            v33++;\n                        }\n                        goto lab_0x408ce0;\n                    }\n                }\n            }\n            goto lab_0x40928a_2;\n        } else {\n            // 0x408954\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x408561;\n        }\n    }\n  lab_0x408b88:\n    // 0x408b88\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40948a\n        if (v8 > result) {\n            // 0x409493\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x4087b7\n        return result;\n    }\n    goto lab_0x40877a_2;\n  lab_0x408561:;\n    int64_t v56 = v13;\n    int64_t v57 = v9;\n    int64_t v58 = v16;\n    if (v23 != 0) {\n        // 0x408570\n        v4 = v58;\n        v6 = v57;\n        v10 = v56;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40877a_2;\n        }\n    }\n    int64_t v42 = result; // 0x408671\n    char v43 = v20; // 0x408671\n    int64_t v44 = v58; // 0x408671\n    v3 = v5 + 1;\n    int64_t v45 = v57; // 0x408671\n    int64_t v46 = v56; // 0x408671\n    goto lab_0x4085ed;\n  lab_0x40877a_2:;\n    // 0x4087b7\n    char * v36; // 0x4083b7\n    return function_408360(v10, v6, str, v4, 2, v25 & -3, 0, (int64_t)v36, (int64_t)v36);\n  lab_0x40928a_2:;\n    uint64_t v37 = v19;\n    int64_t v38 = 0x100000000 * v8 >> 32;\n    int64_t v39 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v38;\n    v13 = v39;\n    if (v37 < 2) {\n        goto lab_0x408561;\n    } else {\n        uint64_t v40 = v37 + v5; // 0x408e5e\n        int64_t v41 = v5 + 1; // 0x408f41\n        v42 = result;\n        v43 = v20;\n        v44 = v22;\n        v3 = v41;\n        v45 = v38;\n        v46 = v39;\n        int64_t v47 = v41; // 0x408f48\n        char v48 = v20; // 0x408f48\n        int64_t v49 = result; // 0x408f48\n        if (v41 < v40) {\n            uint64_t v50 = v49;\n            if (v38 > v50) {\n                // 0x408f11\n                *(char *)(v50 + v39) = v48;\n            }\n            char v51 = *(char *)(v47 + str); // 0x408f15\n            int64_t v52 = v50 + 1; // 0x408f1a\n            int64_t v53 = v47 + 1; // 0x408f41\n            v42 = v52;\n            v43 = v51;\n            v44 = v22;\n            v3 = v53;\n            v45 = v38;\n            v46 = v39;\n            v47 = v53;\n            while (v53 < v40) {\n                // 0x408f0c\n                v50 = v52;\n                if (v38 > v50) {\n                    // 0x408f11\n                    *(char *)(v50 + v39) = v51;\n                }\n                // 0x408f15\n                v51 = *(char *)(v47 + str);\n                v52 = v50 + 1;\n                v53 = v47 + 1;\n                v42 = v52;\n                v43 = v51;\n                v44 = v22;\n                v3 = v53;\n                v45 = v38;\n                v46 = v39;\n                v47 = v53;\n            }\n        }\n        goto lab_0x4085ed;\n    }\n  lab_0x408ce0:\n    // 0x408ce0\n    iswprint(wc);\n    int64_t v54 = v24 + v18; // 0x408cff\n    int32_t v55 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x408d02\n    v17 = v54;\n    v19 = v54;\n    if (v55 != 0) {\n        // break -> 0x40928a\n        goto lab_0x40928a_2;\n    }\n    goto lab_0x408d0f;\n  lab_0x40852d:\n    // 0x40852d\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40877a_2;\n    }\n    goto lab_0x408561;\n  lab_0x408505:;\n    bool v61 = v15 == 1; // 0x408510\n    if (v15 == -1) {\n        // 0x408512\n        v61 = *(char *)v1 == 0;\n    }\n    // 0x40851e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v61) {\n        goto lab_0x408561;\n    } else {\n        goto lab_0x40852d;\n    }\n  lab_0x4085ed:;\n    int64_t v59 = v46;\n    uint64_t v60 = v42;\n    if (v60 < v45) {\n        // 0x4085f2\n        *(char *)(v59 + v60) = v43;\n    }\n    // 0x4085f6\n    v2 = v60 + 1;\n    v14 = v44;\n    v7 = v45;\n    v11 = v59;\n    goto lab_0x408408_2;\n}\n"
        },
        {
            "funcName": "function_409590",
            "funcStartAddr": "409590",
            "funcEndAddr": "40972e",
            "decompiledFuncCode": "int64_t function_409590(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x409592\n    int32_t * v3 = __errno_location(); // 0x4095ac\n    int64_t v4 = (int64_t)g28; // 0x4095b1\n    int32_t v5 = *v3; // 0x4095bb\n    int64_t v6 = v4; // 0x4095d1\n    if (v2 >= (int64_t)*(int32_t *)&g31) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x409729\n            function_40a7b0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4095e0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4095e7\n        int64_t v9; // 0x409590\n        if (g28 == &g29) {\n            int64_t v10 = function_40a5c0(0, v8); // 0x40970a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g29); // 0x40970f\n            *(int64_t *)&g28 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_40a5c0(v4, v8); // 0x4095fb\n            *(int64_t *)&g28 = v12;\n            v9 = v12;\n        }\n        // 0x40960a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g31; // 0x40960a\n        int32_t v14 = v7; // 0x409611\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g31 = v14;\n    }\n    int64_t v15 = (int64_t)a4;\n    int64_t v16 = v6 + (v1 >> 28); // 0x409641\n    int64_t v17 = v15 + 8; // 0x409644\n    int32_t v18 = *(int32_t *)(v15 + 4) | 1; // 0x40964b\n    int64_t * v19 = (int64_t *)v16; // 0x40964e\n    uint64_t v20 = *v19; // 0x40964e\n    int64_t * v21 = (int64_t *)(v16 + 8); // 0x409651\n    int64_t result = *v21; // 0x409651\n    int64_t * v22 = (int64_t *)(v15 + 48); // 0x40965c\n    int64_t * v23 = (int64_t *)(v15 + 40); // 0x409665\n    int64_t v24; // 0x409590\n    uint64_t v25 = function_408360(result, v20, a2, a3, v24 & 0xffffffff, v18, v17, *v23, *v22); // 0x409674\n    if (v20 > v25) {\n        // 0x4096eb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v26 = v25 + 1; // 0x409687\n    *v19 = v26;\n    if (result != (int64_t)&g72) {\n        // 0x409697\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_40a560(v26); // 0x4096b1\n    *v21 = result2;\n    int64_t v27 = *v22; // 0x4096cb\n    int64_t v28 = *v23; // 0x4096ce\n    int64_t v29; // 0x409590\n    function_408360(result2, v26, a2, a3, (int64_t)*(int32_t *)&v29, v18, v17, v28, v27);\n    // 0x4096eb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409730",
            "funcStartAddr": "409730",
            "funcEndAddr": "409764",
            "decompiledFuncCode": "int64_t function_409730(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x409737\n    int64_t result = function_40a760(a1 == 0 ? (int64_t)&g73 : a1, 56); // 0x409756\n    return result;\n}\n"
        },
        {
            "funcName": "function_409770",
            "funcStartAddr": "409770",
            "funcEndAddr": "40977f",
            "decompiledFuncCode": "int64_t function_409770(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g73 : a1); // 0x40977c\n    return result;\n}\n"
        },
        {
            "funcName": "function_409780",
            "funcStartAddr": "409780",
            "funcEndAddr": "40978f",
            "decompiledFuncCode": "int64_t function_409780(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g73 : a1; // 0x409788\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g73;\n}\n"
        },
        {
            "funcName": "function_409790",
            "funcStartAddr": "409790",
            "funcEndAddr": "4097c3",
            "decompiledFuncCode": "int64_t function_409790(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g73 + 8 : a1 + 8; // 0x4097a9\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x4097ae\n    uint32_t v3 = *v2; // 0x4097ae\n    uint32_t v4 = (int32_t)a2 % 32; // 0x4097b2\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4097d0",
            "funcStartAddr": "4097d0",
            "funcEndAddr": "4097e3",
            "decompiledFuncCode": "int64_t function_4097d0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g73 + 4 : a1 + 4); // 0x4097dc\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4097f0",
            "funcStartAddr": "4097f0",
            "funcEndAddr": "40981b",
            "decompiledFuncCode": "int64_t function_4097f0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g73 : a1; // 0x4097f8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x409815\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40980c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g73;\n}\n"
        },
        {
            "funcName": "function_409820",
            "funcStartAddr": "409820",
            "funcEndAddr": "409892",
            "decompiledFuncCode": "int64_t function_409820(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g73 : a5; // 0x409842\n    int32_t * v2 = __errno_location(); // 0x40984b\n    int32_t v3 = *(int32_t *)(v1 + 4); // 0x409864\n    int64_t v4 = *(int64_t *)(v1 + 48); // 0x409868\n    uint32_t v5 = *(int32_t *)v1; // 0x40986b\n    int64_t v6 = *(int64_t *)(v1 + 40); // 0x409871\n    int64_t result = function_408360(a1, a2, a3, a4, (int64_t)v5, v3, v1 + 8, v6, v4); // 0x40987a\n    return result;\n}\n"
        },
        {
            "funcName": "function_4098a0",
            "funcStartAddr": "4098a0",
            "funcEndAddr": "409981",
            "decompiledFuncCode": "int64_t function_4098a0(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g73 : a4; // 0x4098c2\n    int32_t * v2 = __errno_location(); // 0x4098c8\n    int64_t v3 = v1 + 8; // 0x4098df\n    int32_t v4 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4098e7\n    int32_t * v5 = (int32_t *)v1; // 0x4098ea\n    int64_t * v6 = (int64_t *)(v1 + 48); // 0x4098f8\n    int64_t * v7 = (int64_t *)(v1 + 40); // 0x4098fb\n    int64_t v8 = function_408360(0, 0, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6); // 0x409905\n    int64_t v9 = v8 + 1; // 0x40990a\n    int64_t result = function_40a560(v9); // 0x40991f\n    function_408360(result, v9, a1, a2, (int64_t)*v5, v4, v3, *v7, *v6);\n    if (a3 != 0) {\n        // 0x409964\n        *(int64_t *)(int64_t)a3 = v8;\n    }\n    // 0x40996d\n    return result;\n}\n"
        },
        {
            "funcName": "function_409990",
            "funcStartAddr": "409990",
            "funcEndAddr": "40999a",
            "decompiledFuncCode": "int64_t function_409990(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409990\n    return function_4098a0(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_4099a0",
            "funcStartAddr": "4099a0",
            "funcEndAddr": "409a35",
            "decompiledFuncCode": "int64_t function_4099a0(void) {\n    uint32_t v1 = *(int32_t *)&g31; // 0x4099a0\n    int64_t v2 = v1; // 0x4099a0\n    int64_t v3 = v2; // 0x4099b4\n    if (v1 >= 2) {\n        int64_t v4 = &g31;\n        int64_t v5 = v4 + 16; // 0x4099d3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g83;\n        while (v5 != (int64_t)g28 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4099d0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g83;\n        }\n    }\n    int64_t v6 = v3; // 0x4099ed\n    if (g29 != 0x617720) {\n        // 0x4099ef\n        free((int64_t *)g29);\n        g29 = 256;\n        *(int64_t *)&g30 = (int64_t)&g72;\n        v6 = &g83;\n    }\n    int64_t result = v6; // 0x409a11\n    if (g28 != &g29) {\n        // 0x409a13\n        free(g28);\n        *(int64_t *)&g28 = (int64_t)&g29;\n        result = &g83;\n    }\n    // 0x409a26\n    *(int32_t *)&g31 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_409a40",
            "funcStartAddr": "409a40",
            "funcEndAddr": "409a51",
            "decompiledFuncCode": "int64_t function_409a40(void) {\n    // 0x409a40\n    int64_t v1; // 0x409a40\n    return function_409590(v1, v1, -1, (int64_t *)&g73);\n}\n"
        },
        {
            "funcName": "function_409a60",
            "funcStartAddr": "409a60",
            "funcEndAddr": "409a6a",
            "decompiledFuncCode": "int64_t function_409a60(void) {\n    // 0x409a60\n    int64_t v1; // 0x409a60\n    return function_409590(v1, v1, v1, (int64_t *)&g73);\n}\n"
        },
        {
            "funcName": "function_409a70",
            "funcStartAddr": "409a70",
            "funcEndAddr": "409a86",
            "decompiledFuncCode": "int64_t function_409a70(int64_t a1) {\n    // 0x409a70\n    return function_409590(0, a1, -1, (int64_t *)&g73);\n}\n"
        },
        {
            "funcName": "function_409a90",
            "funcStartAddr": "409a90",
            "funcEndAddr": "409aa2",
            "decompiledFuncCode": "int64_t function_409a90(int64_t a1, int64_t a2) {\n    // 0x409a90\n    return function_409590(0, a1, a2, (int64_t *)&g73);\n}\n"
        },
        {
            "funcName": "function_409ab0",
            "funcStartAddr": "409ab0",
            "funcEndAddr": "409b18",
            "decompiledFuncCode": "int64_t function_409ab0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x409ac0\n    return function_409590((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_409b20",
            "funcStartAddr": "409b20",
            "funcEndAddr": "409b84",
            "decompiledFuncCode": "int64_t function_409b20(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x409b30\n    return function_409590((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_409b90",
            "funcStartAddr": "409b90",
            "funcEndAddr": "409b9c",
            "decompiledFuncCode": "int64_t function_409b90(int64_t a1, int64_t a2) {\n    // 0x409b90\n    return function_409ab0(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_409ba0",
            "funcStartAddr": "409ba0",
            "funcEndAddr": "409baf",
            "decompiledFuncCode": "int64_t function_409ba0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409ba0\n    return function_409b20(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_409bb0",
            "funcStartAddr": "409bb0",
            "funcEndAddr": "409c20",
            "decompiledFuncCode": "int64_t function_409bb0(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g73); // 0x409bbd\n    int128_t v2 = __asm_movdqa(g74); // 0x409bc5\n    int128_t v3 = __asm_movdqa(g75); // 0x409bcd\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x409be2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x409bf8\n    uint32_t v6 = *v5; // 0x409bf8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x409bfd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_409590(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_409c20",
            "funcStartAddr": "409c20",
            "funcEndAddr": "409c2d",
            "decompiledFuncCode": "int64_t function_409c20(int64_t a1, int64_t a2) {\n    // 0x409c20\n    return function_409bb0(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_409c30",
            "funcStartAddr": "409c30",
            "funcEndAddr": "409c41",
            "decompiledFuncCode": "int64_t function_409c30(int64_t a1) {\n    // 0x409c30\n    return function_409bb0(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_409c50",
            "funcStartAddr": "409c50",
            "funcEndAddr": "409c5a",
            "decompiledFuncCode": "int64_t function_409c50(void) {\n    // 0x409c50\n    int64_t v1; // 0x409c50\n    return function_409bb0(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_409c60",
            "funcStartAddr": "409c60",
            "funcEndAddr": "409cce",
            "decompiledFuncCode": "int64_t function_409c60(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x409c7a\n    return function_409590((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_409cd0",
            "funcStartAddr": "409cd0",
            "funcEndAddr": "409d3c",
            "decompiledFuncCode": "int64_t function_409cd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g73); // 0x409cd7\n    int128_t v2 = __asm_movdqa(g74); // 0x409cdf\n    int128_t v3 = __asm_movdqa(g75); // 0x409ce7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x409d09\n    if (a2 == 0 || a3 == 0) {\n        // 0x409d37\n        abort();\n        // UNREACHABLE\n    }\n    // 0x409d1a\n    return function_409590(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_409d40",
            "funcStartAddr": "409d40",
            "funcEndAddr": "409d49",
            "decompiledFuncCode": "int64_t function_409d40(void) {\n    // 0x409d40\n    int64_t v1; // 0x409d40\n    return function_409cd0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_409d50",
            "funcStartAddr": "409d50",
            "funcEndAddr": "409d67",
            "decompiledFuncCode": "int64_t function_409d50(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x409d50\n    return function_409cd0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_409d70",
            "funcStartAddr": "409d70",
            "funcEndAddr": "409d83",
            "decompiledFuncCode": "int64_t function_409d70(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x409d70\n    return function_409cd0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_409d90",
            "funcStartAddr": "409d90",
            "funcEndAddr": "409d9a",
            "decompiledFuncCode": "int64_t function_409d90(void) {\n    // 0x409d90\n    int64_t v1; // 0x409d90\n    return function_409590(v1, v1, v1, &g27);\n}\n"
        },
        {
            "funcName": "function_409da0",
            "funcStartAddr": "409da0",
            "funcEndAddr": "409db2",
            "decompiledFuncCode": "int64_t function_409da0(int64_t a1, int64_t a2) {\n    // 0x409da0\n    return function_409590(0, a1, a2, &g27);\n}\n"
        },
        {
            "funcName": "function_409dc0",
            "funcStartAddr": "409dc0",
            "funcEndAddr": "409dd1",
            "decompiledFuncCode": "int64_t function_409dc0(int64_t a1, int64_t a2) {\n    // 0x409dc0\n    return function_409590(a1, a2, -1, &g27);\n}\n"
        },
        {
            "funcName": "function_409de0",
            "funcStartAddr": "409de0",
            "funcEndAddr": "409df6",
            "decompiledFuncCode": "int64_t function_409de0(int64_t a1) {\n    // 0x409de0\n    return function_409590(0, a1, -1, &g27);\n}\n"
        },
        {
            "funcName": "function_409e00",
            "funcStartAddr": "409e00",
            "funcEndAddr": "409f30",
            "decompiledFuncCode": "int64_t function_409e00(int64_t a1, int64_t a2) {\n    int64_t str = function_405a70(a1, a2); // 0x409e19\n    int64_t str2 = function_405a70(a2, a2); // 0x409e24\n    int64_t n = function_405ad0(str); // 0x409e2f\n    if (n != function_405ad0(str2) || memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) != 0) {\n        // 0x409e44\n        return 0;\n    }\n    int64_t v1 = function_405990(); // 0x409e75\n    int64_t v2 = function_405990(); // 0x409e80\n    char * v3 = (char *)v1; // 0x409e93\n    int64_t v4; // bp-344, 0x409e00\n    if (__xstat(1, v3, (struct stat *)&v4) != 0) {\n        // 0x409f10\n        error(1, *__errno_location(), \"%s\", v3);\n    }\n    char * v5 = (char *)v2; // 0x409eac\n    int64_t v6; // bp-200, 0x409e00\n    if (__xstat(1, v5, (struct stat *)&v6) != 0) {\n        // 0x409ef0\n        error(1, *__errno_location(), \"%s\", v5);\n    }\n    int64_t v7 = 0; // 0x409ec4\n    // 0x409ec6\n    v7 = v4 == v6;\n    // 0x409ed5\n    free((int64_t *)v1);\n    free((int64_t *)v2);\n    // 0x409e44\n    return v7 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_409f30",
            "funcStartAddr": "409f30",
            "funcEndAddr": "409f7a",
            "decompiledFuncCode": "int64_t function_409f30(int64_t * a1) {\n    int64_t * v1 = (int64_t *)((int64_t)a1 + 8); // 0x409f3b\n    *v1 = 0;\n    int64_t v2; // 0x409f30\n    int32_t v3 = function_40db90((int64_t *)\".\", 0x80000, v2); // 0x409f4f\n    *(int32_t *)a1 = v3;\n    if (v3 >= 0) {\n        // 0x409f57\n        return 0;\n    }\n    int64_t v4 = function_40b160(0, 0); // 0x409f64\n    *v1 = v4;\n    return v4 == 0 ? 0xffffffff : 0;\n}\n"
        },
        {
            "funcName": "function_409f80",
            "funcStartAddr": "409f80",
            "funcEndAddr": "409f99",
            "decompiledFuncCode": "int64_t function_409f80(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int32_t fd = v1;\n    if (fd < 0) {\n        // 0x409f90\n        return function_40ae00(*(int64_t *)(v1 + 8));\n    }\n    // 0x409f86\n    return fchdir(fd);\n}\n"
        },
        {
            "funcName": "function_409fa0",
            "funcStartAddr": "409fa0",
            "funcEndAddr": "409fb9",
            "decompiledFuncCode": "int64_t function_409fa0(int64_t * a1) {\n    // 0x409fa0\n    int64_t v1; // 0x409fa0\n    uint32_t fd = (int32_t)v1;\n    if (fd >= 0) {\n        // 0x409faa\n        close(fd);\n    }\n    // 0x409faf\n    free((int64_t *)*(int64_t *)((int64_t)a1 + 8));\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_409fc0",
            "funcStartAddr": "409fc0",
            "funcEndAddr": "40a39d",
            "decompiledFuncCode": "int64_t function_409fc0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x40a058\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x409fdc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x409ff6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x40a03b\n    if (a6 < 10) {\n        // 0x40a04a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x40a142\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_40a3a0",
            "funcStartAddr": "40a3a0",
            "funcEndAddr": "40a3c0",
            "decompiledFuncCode": "int64_t function_40a3a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40a3a0\n    if (a5 == 0) {\n        // 0x40a3bb\n        return function_409fc0(a1, a2, a3, a4, a5, 0, (int64_t)&g83);\n    }\n    int64_t v1 = 0; // 0x40a3a7\n    v1++;\n    int64_t v2 = v1; // 0x40a3b9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x40a3b0\n        v1++;\n        v2 = v1;\n    }\n    // 0x40a3bb\n    return function_409fc0(a1, a2, a3, a4, a5, v2, (int64_t)&g83);\n}\n"
        },
        {
            "funcName": "function_40a3c0",
            "funcStartAddr": "40a3c0",
            "funcEndAddr": "40a420",
            "decompiledFuncCode": "int64_t function_40a3c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x40a3c0\n    int64_t v3 = &v2; // 0x40a3c0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x40a3f3\n    int64_t v6; // 0x40a3dd\n    int64_t * v7; // 0x40a3fb\n    int64_t v8; // 0x40a3fb\n    int64_t v9; // 0x40a407\n    if (v5 < 48) {\n        // 0x40a3d0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x40a413\n            break;\n        }\n    } else {\n        // 0x40a3fb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x40a413\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x40a3f1\n    while (v4 != 9) {\n        // 0x40a3e9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x40a3d0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x40a413\n                break;\n            }\n        } else {\n            // 0x40a3fb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x40a413\n                break;\n            }\n        }\n        // 0x40a3e9\n        v10 = 10;\n    }\n    // 0x40a413\n    return function_409fc0(a1, a2, a3, a4, v3, v10, (int64_t)&g83);\n}\n"
        },
        {
            "funcName": "function_40a420",
            "funcStartAddr": "40a420",
            "funcEndAddr": "40a4dc",
            "decompiledFuncCode": "int64_t function_40a420(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x40a420\n    int64_t v1; // bp-168, 0x40a420\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x40a420\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x40a420\n    int64_t v8; // 0x40a420\n    int64_t v9; // bp-56, 0x40a420\n    int64_t v10; // 0x40a485\n    int64_t v11; // 0x40a4a9\n    if ((int32_t)v6 < 48) {\n        // 0x40a470\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x40a4c0\n            break;\n        }\n    } else {\n        // 0x40a4a2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x40a4c0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40a49a\n    int64_t v13 = 10; // 0x40a49a\n    while (v5 != 9) {\n        // 0x40a49c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x40a470\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x40a4c0\n                break;\n            }\n        } else {\n            // 0x40a4a2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x40a4c0\n                break;\n            }\n        }\n        // 0x40a492\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x40a4c0\n    int64_t v14; // bp-136, 0x40a420\n    int64_t result = function_409fc0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g83); // 0x40a4cf\n    return result;\n}\n"
        },
        {
            "funcName": "function_40a4e0",
            "funcStartAddr": "40a4e0",
            "funcEndAddr": "40a554",
            "decompiledFuncCode": "int64_t function_40a4e0(int64_t a1) {\n    // 0x40a4e0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x40a543\n    return fputs_unlocked(v1, g38);\n}\n"
        },
        {
            "funcName": "function_40a560",
            "funcStartAddr": "40a560",
            "funcEndAddr": "40a57a",
            "decompiledFuncCode": "int64_t function_40a560(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x40a564\n    if (size != 0 != (mem == NULL)) {\n        // 0x40a573\n        return (int64_t)mem;\n    }\n    // 0x40a575\n    function_40a7b0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a580",
            "funcStartAddr": "40a580",
            "funcEndAddr": "40a5a1",
            "decompiledFuncCode": "int64_t function_40a580(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x40a583\n    int64_t v2 = v1; // 0x40a583\n    if (v2 < 0) {\n        // 0x40a59b\n        function_40a7b0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x40a599\n        return function_40a560(v2);\n    }\n    // 0x40a59b\n    function_40a7b0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a5b0",
            "funcStartAddr": "40a5b0",
            "funcEndAddr": "40a5b2",
            "decompiledFuncCode": "int64_t function_40a5b0(void) {\n    // 0x40a5b0\n    int64_t v1; // 0x40a5b0\n    return function_40a560(v1);\n}\n"
        },
        {
            "funcName": "function_40a5c0",
            "funcStartAddr": "40a5c0",
            "funcEndAddr": "40a5f6",
            "decompiledFuncCode": "int64_t function_40a5c0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x40a5e8\n        free(v1);\n        return (int32_t)&g83 ^ (int32_t)&g83;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x40a5d1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x40a5e0\n        return (int64_t)mem;\n    }\n    // 0x40a5f1\n    function_40a7b0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a600",
            "funcStartAddr": "40a600",
            "funcEndAddr": "40a621",
            "decompiledFuncCode": "int64_t function_40a600(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x40a603\n    int64_t v2 = v1; // 0x40a603\n    if (v2 < 0) {\n        // 0x40a61b\n        function_40a7b0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x40a619\n        return function_40a5c0(a1, v2);\n    }\n    // 0x40a61b\n    function_40a7b0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a630",
            "funcStartAddr": "40a630",
            "funcEndAddr": "40a6b6",
            "decompiledFuncCode": "int64_t function_40a630(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40a68b\n            function_40a7b0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_40a5c0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x40a673\n    if (a2 == 0) {\n        // 0x40a698\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x40a678\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40a68b\n        function_40a7b0(a1);\n        // UNREACHABLE\n    }\n    // 0x40a65a\n    *(int64_t *)a2 = v2;\n    return function_40a5c0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_40a6c0",
            "funcStartAddr": "40a6c0",
            "funcEndAddr": "40a710",
            "decompiledFuncCode": "int64_t function_40a6c0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x40a6c0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40a70a\n            function_40a7b0(a1);\n            // UNREACHABLE\n        }\n        // 0x40a6e2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_40a5c0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x40a6f5\n        *(int64_t *)a2 = 128;\n        return function_40a5c0(0, 128);\n    }\n    // 0x40a708\n    if (a2 < 0) {\n        // 0x40a70a\n        function_40a7b0(a1);\n        // UNREACHABLE\n    }\n    // 0x40a6e2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_40a5c0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_40a710",
            "funcStartAddr": "40a710",
            "funcEndAddr": "40a727",
            "decompiledFuncCode": "int64_t function_40a710(int64_t a1, int64_t a2) {\n    // 0x40a710\n    return (int64_t)memset((int64_t *)function_40a560(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_40a730",
            "funcStartAddr": "40a730",
            "funcEndAddr": "40a75e",
            "decompiledFuncCode": "int64_t function_40a730(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x40a737\n    if ((int64_t)v1 < 0) {\n        // 0x40a759\n        function_40a7b0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x40a759\n        function_40a7b0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40a74a\n    if (mem != NULL) {\n        // 0x40a754\n        return (int64_t)mem;\n    }\n    // 0x40a759\n    function_40a7b0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a760",
            "funcStartAddr": "40a760",
            "funcEndAddr": "40a788",
            "decompiledFuncCode": "int64_t function_40a760(int64_t a1, int64_t a2) {\n    int64_t v1 = function_40a560(a2); // 0x40a76f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_40a790",
            "funcStartAddr": "40a790",
            "funcEndAddr": "40a7a3",
            "decompiledFuncCode": "int64_t function_40a790(int64_t str) {\n    // 0x40a790\n    return function_40a760(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_40a7b0",
            "funcStartAddr": "40a7b0",
            "funcEndAddr": "40a7e1",
            "decompiledFuncCode": "int64_t function_40a7b0(int64_t a1) {\n    // 0x40a7b0\n    error(g26, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a7f0",
            "funcStartAddr": "40a7f0",
            "funcEndAddr": "40a81f",
            "decompiledFuncCode": "int64_t function_40a7f0(int64_t a1, int64_t a2) {\n    int64_t result = function_40b160(0, 0); // 0x40a7f5\n    if (result != 0 || *__errno_location() != 12) {\n        // 0x40a802\n        return result;\n    }\n    // 0x40a81a\n    function_40a7b0(0);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a820",
            "funcStartAddr": "40a820",
            "funcEndAddr": "40a8a1",
            "decompiledFuncCode": "int64_t function_40a820(int64_t a1, int64_t a2, int64_t a3, char (**a4)[4], int64_t a5) {\n    int64_t v1 = *(int64_t *)((8 * a1 + 0x7fffffff8 & 0x7fffffff8) + (int64_t)&g12); // 0x40a842\n    error(g26, 0, dcgettext(NULL, (char *)v1, 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40a8b0",
            "funcStartAddr": "40a8b0",
            "funcEndAddr": "40acf0",
            "decompiledFuncCode": "int64_t function_40a8b0(int64_t a1, int64_t * a2, uint32_t a3, int64_t a4, char * str, int64_t a6) {\n    if (a3 >= 37) {\n        // 0x40accb\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        return &g83;\n    }\n    char c = a1;\n    int32_t * v1 = __errno_location(); // 0x40a8e2\n    *v1 = 0;\n    int64_t v2 = (int64_t)*__ctype_b_loc() + 1; // 0x40a912\n    int64_t v3 = a1; // 0x40a917\n    char v4 = c; // 0x40a917\n    if ((*(char *)(v2 + (2 * a1 & 510)) & 32) != 0) {\n        v3++;\n        unsigned char v5 = *(char *)v3; // 0x40a90c\n        v4 = v5;\n        while ((*(char *)(2 * (int64_t)v5 + v2) & 32) != 0) {\n            // 0x40a908\n            v3++;\n            v5 = *(char *)v3;\n            v4 = v5;\n        }\n    }\n    // 0x40a919\n    if (v4 == 45) {\n        // 0x40a955\n        return 4;\n    }\n    // 0x40a91e\n    int64_t v6; // bp-64, 0x40a8b0\n    int64_t * v7 = a2 == NULL ? &v6 : a2;\n    int32_t v8 = __strtoul_internal((char *)a1, (char **)v7, a3, 0); // 0x40a926\n    int64_t v9 = *v7; // 0x40a92b\n    char v10; // 0x40a8b0\n    int64_t v11; // 0x40a8b0\n    int64_t v12; // 0x40a8b0\n    int64_t v13; // 0x40a8b0\n    int64_t v14; // 0x40a8b0\n    int64_t v15; // 0x40a8b0\n    int64_t v16; // 0x40a8b0\n    if (v9 == a1) {\n        // 0x40a988\n        if (c == 0 || str == NULL) {\n            // 0x40a955\n            return 4;\n        }\n        char * found_char_pos = strchr(str, (int32_t)c); // 0x40a9a9\n        v15 = 1;\n        v12 = 0;\n        v10 = c;\n        if (found_char_pos == NULL) {\n            // 0x40a955\n            return 4;\n        }\n        goto lab_0x40a9b7;\n    } else {\n        int32_t v17 = *v1; // 0x40a936\n        int64_t v18 = 0; // 0x40a93c\n        if (v17 != 0) {\n            // 0x40a970\n            v18 = 1;\n            if (v17 != 34) {\n                // 0x40a955\n                return 4;\n            }\n        }\n        int64_t v19 = v8; // 0x40a926\n        v14 = v19;\n        v11 = v18;\n        if (str == NULL) {\n            goto lab_0x40a952;\n        } else {\n            char c2 = *(char *)v9; // 0x40a945\n            v14 = v19;\n            v11 = v18;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr(str, (int32_t)c2); // 0x40aab3\n                v15 = v19;\n                v12 = v18;\n                v10 = c2;\n                v16 = v19;\n                v13 = v18;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x40a9b7;\n                } else {\n                    goto lab_0x40aac5;\n                }\n            } else {\n                goto lab_0x40a952;\n            }\n        }\n    }\n  lab_0x40a9b7:;\n    int64_t v20 = 0x100000000 * v9 >> 32;\n    unsigned char v21 = v10 - 69;\n    int64_t v22 = 1024; // 0x40a9bf\n    int64_t v23 = 1; // 0x40a9bf\n    int64_t v24; // 0x40a8b0\n    int64_t v25; // 0x40a8b0\n    int64_t v26; // 0x40a8b0\n    int64_t v27; // 0x40a8b0\n    int64_t v28; // 0x40a8b0\n    int64_t v29; // 0x40a8b0\n    int64_t v30; // 0x40a8b0\n    int64_t v31; // 0x40a8b0\n    int64_t v32; // 0x40a8b0\n    int64_t v33; // 0x40a8b0\n    int64_t v34; // 0x40a8b0\n    int64_t v35; // 0x40a8b0\n    int64_t v36; // 0x40a8b0\n    int64_t v37; // 0x40a8b0\n    int64_t v38; // 0x40a8b0\n    int64_t v39; // 0x40a8b0\n    int64_t v40; // 0x40a8b0\n    int64_t v41; // 0x40a8b0\n    int64_t v42; // 0x40a8b0\n    int64_t v43; // 0x40a8b0\n    if (v21 < 48) {\n        // 0x40a9c1\n        v22 = 1024;\n        v23 = 1;\n        if ((1 << (int64_t)((v10 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x40aa2a;\n        } else {\n            // 0x40a9d4\n            v22 = 1024;\n            v23 = 1;\n            if (strchr(str, 48) == NULL) {\n                goto lab_0x40aa2a;\n            } else {\n                // 0x40a9f0\n                v22 = 1000;\n                v23 = 2;\n                switch (*(char *)(v20 + 1)) {\n                    case 68: {\n                        goto lab_0x40aa2a;\n                    }\n                    case 105: {\n                        char v44 = *(char *)(v20 + 2); // 0x40ac59\n                        v22 = 1024;\n                        v23 = (v44 == 66 ? 2 : 1) + (int64_t)(v44 == 66);\n                        goto lab_0x40aa2a;\n                    }\n                    default: {\n                        // 0x40aa05\n                        g86 = v21;\n                        v22 = 1000;\n                        v23 = 2;\n                        v26 = 1024;\n                        v38 = 1;\n                        v25 = v15;\n                        v24 = v12;\n                        v39 = 1;\n                        v27 = 1024;\n                        v40 = 1;\n                        v16 = v15;\n                        v13 = v12;\n                        v41 = 1;\n                        v28 = 1024;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v34 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        switch (v10) {\n                            case 69: {\n                                goto lab_0x40abcb;\n                            }\n                            case 70: {\n                                goto lab_0x40aac5;\n                            }\n                            case 71: {\n                                goto lab_0x40ac03;\n                            }\n                            case 72: {\n                                goto lab_0x40aac5;\n                            }\n                            case 73: {\n                                goto lab_0x40aac5;\n                            }\n                            case 74: {\n                                goto lab_0x40aac5;\n                            }\n                            case 75: {\n                                goto lab_0x40aa8c;\n                            }\n                            case 76: {\n                                goto lab_0x40aac5;\n                            }\n                            case 77: {\n                                goto lab_0x40aa4e;\n                            }\n                            case 78: {\n                                goto lab_0x40aac5;\n                            }\n                            case 79: {\n                                goto lab_0x40aac5;\n                            }\n                            case 80: {\n                                goto lab_0x40ab98;\n                            }\n                            case 81: {\n                                goto lab_0x40aac5;\n                            }\n                            case 82: {\n                                goto lab_0x40aac5;\n                            }\n                            case 83: {\n                                goto lab_0x40aac5;\n                            }\n                            case 84: {\n                                goto lab_0x40ab68;\n                            }\n                            case 85: {\n                                goto lab_0x40aac5;\n                            }\n                            case 86: {\n                                goto lab_0x40aac5;\n                            }\n                            case 87: {\n                                goto lab_0x40aac5;\n                            }\n                            case 88: {\n                                goto lab_0x40aac5;\n                            }\n                            case 89: {\n                                goto lab_0x40ab36;\n                            }\n                            case 90: {\n                                goto lab_0x40aafb;\n                            }\n                            case 91: {\n                                goto lab_0x40aac5;\n                            }\n                            case 92: {\n                                goto lab_0x40aac5;\n                            }\n                            case 93: {\n                                goto lab_0x40aac5;\n                            }\n                            case 94: {\n                                goto lab_0x40aac5;\n                            }\n                            case 95: {\n                                goto lab_0x40aac5;\n                            }\n                            case 96: {\n                                goto lab_0x40aac5;\n                            }\n                            case 97: {\n                                goto lab_0x40aac5;\n                            }\n                            case 98: {\n                                goto lab_0x40aadf;\n                            }\n                            case 99: {\n                                goto lab_0x40aa68;\n                            }\n                            case 100: {\n                                goto lab_0x40aac5;\n                            }\n                            case 101: {\n                                goto lab_0x40aac5;\n                            }\n                            case 102: {\n                                goto lab_0x40aac5;\n                            }\n                            case 103: {\n                                goto lab_0x40ac03;\n                            }\n                            case 104: {\n                                goto lab_0x40aac5;\n                            }\n                            case 105: {\n                                goto lab_0x40aac5;\n                            }\n                            case 106: {\n                                goto lab_0x40aac5;\n                            }\n                            case 107: {\n                                goto lab_0x40aa8c;\n                            }\n                            case 108: {\n                                goto lab_0x40aac5;\n                            }\n                            case 109: {\n                                goto lab_0x40aa4e;\n                            }\n                            case 110: {\n                                goto lab_0x40aac5;\n                            }\n                            case 111: {\n                                goto lab_0x40aac5;\n                            }\n                            case 112: {\n                                goto lab_0x40aac5;\n                            }\n                            case 113: {\n                                goto lab_0x40aac5;\n                            }\n                            case 114: {\n                                goto lab_0x40aac5;\n                            }\n                            case 115: {\n                                goto lab_0x40aac5;\n                            }\n                            case 116: {\n                                goto lab_0x40ab68;\n                            }\n                            default: {\n                                goto lab_0x40aa2a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40aa2a;\n    }\n  lab_0x40a952:\n    // 0x40a952\n    *(int64_t *)a4 = v14;\n    // 0x40a955\n    return v11 & 0xffffffff;\n  lab_0x40aa2a:\n    // 0x40aa2a\n    g87 = v10 - 66;\n    v26 = v22;\n    v38 = v23;\n    v25 = v15;\n    v24 = v12;\n    v39 = v23;\n    v27 = v22;\n    v40 = v23;\n    v16 = v15;\n    v13 = v12;\n    v41 = v23;\n    v28 = v22;\n    v42 = v23;\n    v29 = v22;\n    v43 = v23;\n    v30 = v22;\n    v34 = v23;\n    v31 = v22;\n    v35 = v23;\n    v32 = v22;\n    v36 = v23;\n    v33 = v22;\n    v37 = v23;\n    int64_t v45; // 0x40a8b0\n    switch (v10) {\n        case 66: {\n            // 0x40ac24\n            v45 = v23;\n            if (v15 >= 0x40000000000000) {\n                goto lab_0x40aa97;\n            } else {\n                // 0x40ac31\n                v25 = 1024 * v15;\n                v24 = v12;\n                v39 = v23;\n                goto lab_0x40aa68;\n            }\n        }\n        case 69: {\n            goto lab_0x40abcb;\n        }\n        case 71: {\n            goto lab_0x40ac03;\n        }\n        case 75: {\n            goto lab_0x40aa8c;\n        }\n        case 77: {\n            goto lab_0x40aa4e;\n        }\n        case 80: {\n            goto lab_0x40ab98;\n        }\n        case 84: {\n            goto lab_0x40ab68;\n        }\n        case 89: {\n            goto lab_0x40ab36;\n        }\n        case 90: {\n            goto lab_0x40aafb;\n        }\n        case 98: {\n            goto lab_0x40aadf;\n        }\n        case 99: {\n            goto lab_0x40aa68;\n        }\n        case 103: {\n            goto lab_0x40ac03;\n        }\n        case 107: {\n            goto lab_0x40aa8c;\n        }\n        case 109: {\n            goto lab_0x40aa4e;\n        }\n        case 116: {\n            goto lab_0x40ab68;\n        }\n        case 119: {\n            // 0x40aad0\n            v45 = v23;\n            if (v15 < 0) {\n                goto lab_0x40aa97;\n            } else {\n                // 0x40aad5\n                v25 = 2 * v15;\n                v24 = v12;\n                v39 = v23;\n                goto lab_0x40aa68;\n            }\n        }\n        default: {\n            goto lab_0x40aac5;\n        }\n    }\n  lab_0x40abcb:;\n    uint128_t v46 = (int128_t)v15 * (int128_t)v32; // 0x40abe3\n    int64_t v47 = (int64_t)(v46 < 0xffffffffffffffff ? v46 : 0xffffffffffffffff);\n    int64_t v48 = v46 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v49 = 5; // 0x40abef\n    int64_t v50 = v47; // 0x40abf2\n    int64_t v51 = v36; // 0x40abf2\n    int64_t v52 = v48; // 0x40abf2\n    int32_t v53 = v49; // 0x40abf2\n    int64_t v54 = v48; // 0x40abf2\n    while (v49 != 0) {\n        // 0x40abe0\n        v46 = (int128_t)v47 * (int128_t)v32;\n        v47 = (int64_t)(v46 < 0xffffffffffffffff ? v46 : 0xffffffffffffffff);\n        v48 = v46 > 0xffffffffffffffff ? 1 : v54;\n        v49 = v53 - 1;\n        v50 = v47;\n        v51 = v36;\n        v52 = v48;\n        v53 = v49;\n        v54 = v48;\n    }\n    goto lab_0x40ab24;\n  lab_0x40ac03:\n    // 0x40ac03\n    v25 = -1;\n    v24 = 1;\n    v39 = v37;\n    if ((int128_t)v33 * (int128_t)v15 <= 0xffffffffffffffff) {\n        // 0x40ac0e\n        int128_t v55; // 0x40ac09\n        uint128_t v56; // 0x40ac09\n        uint128_t v57 = (v56 & 0xffffffffffffffff) * v55; // 0x40ac0e\n        v25 = -1;\n        v24 = 1;\n        int64_t v58; // 0x40a8b0\n        v39 = v58;\n        if (v57 <= 0xffffffffffffffff) {\n            uint128_t v59 = (v57 & 0xffffffffffffffff) * v55; // 0x40ac13\n            v25 = -1;\n            v24 = 1;\n            v39 = v58;\n            if (v59 <= 0xffffffffffffffff) {\n                // 0x40ac18\n                v25 = v59;\n                int64_t v60; // 0x40a8b0\n                v24 = v60 & 0xffffffff;\n                v39 = v58;\n            }\n        }\n    }\n    goto lab_0x40aa68;\n  lab_0x40aa8c:;\n    uint128_t v63 = (int128_t)v27 * (int128_t)v15; // 0x40aa8f\n    v25 = v63;\n    v24 = v12;\n    v39 = v40;\n    v45 = v40;\n    if (v63 <= 0xffffffffffffffff) {\n        goto lab_0x40aa68;\n    } else {\n        goto lab_0x40aa97;\n    }\n  lab_0x40aa4e:;\n    int128_t v64 = v26; // 0x40aa54\n    uint128_t v65 = v64 * (int128_t)v15; // 0x40aa54\n    v45 = v38;\n    if (v65 > 0xffffffffffffffff) {\n        goto lab_0x40aa97;\n    } else {\n        uint128_t v66 = (v65 & 0xffffffffffffffff) * v64; // 0x40aa59\n        v45 = v38;\n        if (v66 > 0xffffffffffffffff) {\n            goto lab_0x40aa97;\n        } else {\n            // 0x40aa5e\n            v25 = v66;\n            v24 = v12;\n            v39 = v38;\n            goto lab_0x40aa68;\n        }\n    }\n  lab_0x40ab98:;\n    uint128_t v67 = (int128_t)v15 * (int128_t)v31; // 0x40abab\n    int64_t v68 = (int64_t)(v67 < 0xffffffffffffffff ? v67 : 0xffffffffffffffff);\n    int64_t v69 = v67 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v70 = 4; // 0x40abb7\n    v50 = v68;\n    v51 = v35;\n    v52 = v69;\n    int32_t v71 = v70; // 0x40abba\n    int64_t v72 = v69; // 0x40abba\n    while (v70 != 0) {\n        // 0x40aba8\n        v67 = (int128_t)v68 * (int128_t)v31;\n        v68 = (int64_t)(v67 < 0xffffffffffffffff ? v67 : 0xffffffffffffffff);\n        v69 = v67 > 0xffffffffffffffff ? 1 : v72;\n        v70 = v71 - 1;\n        v50 = v68;\n        v51 = v35;\n        v52 = v69;\n        v71 = v70;\n        v72 = v69;\n    }\n    goto lab_0x40ab24;\n  lab_0x40ab68:;\n    uint128_t v73 = (int128_t)v15 * (int128_t)v30; // 0x40ab7b\n    int64_t v74 = (int64_t)(v73 < 0xffffffffffffffff ? v73 : 0xffffffffffffffff);\n    int64_t v75 = v73 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v76 = 3; // 0x40ab87\n    v50 = v74;\n    v51 = v34;\n    v52 = v75;\n    int32_t v77 = v76; // 0x40ab8a\n    int64_t v78 = v75; // 0x40ab8a\n    while (v76 != 0) {\n        // 0x40ab78\n        v73 = (int128_t)v74 * (int128_t)v30;\n        v74 = (int64_t)(v73 < 0xffffffffffffffff ? v73 : 0xffffffffffffffff);\n        v75 = v73 > 0xffffffffffffffff ? 1 : v78;\n        v76 = v77 - 1;\n        v50 = v74;\n        v51 = v34;\n        v52 = v75;\n        v77 = v76;\n        v78 = v75;\n    }\n    goto lab_0x40ab24;\n  lab_0x40ab36:;\n    uint128_t v79 = (int128_t)v15 * (int128_t)v29; // 0x40ab4b\n    int64_t v80 = (int64_t)(v79 < 0xffffffffffffffff ? v79 : 0xffffffffffffffff);\n    int64_t v81 = v79 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v82 = 7; // 0x40ab57\n    v50 = v80;\n    v51 = v43;\n    v52 = v81;\n    int32_t v83 = v82; // 0x40ab5a\n    int64_t v84 = v81; // 0x40ab5a\n    while (v82 != 0) {\n        // 0x40ab48\n        v79 = (int128_t)v80 * (int128_t)v29;\n        v80 = (int64_t)(v79 < 0xffffffffffffffff ? v79 : 0xffffffffffffffff);\n        v81 = v79 > 0xffffffffffffffff ? 1 : v84;\n        v82 = v83 - 1;\n        v50 = v80;\n        v51 = v43;\n        v52 = v81;\n        v83 = v82;\n        v84 = v81;\n    }\n    goto lab_0x40ab24;\n  lab_0x40aafb:;\n    uint128_t v85 = (int128_t)v15 * (int128_t)v28; // 0x40ab13\n    int64_t v86 = (int64_t)(v85 < 0xffffffffffffffff ? v85 : 0xffffffffffffffff);\n    int64_t v87 = v85 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v88 = 6; // 0x40ab1f\n    int32_t v89 = v88; // 0x40ab22\n    int64_t v90 = v87; // 0x40ab22\n    v50 = v86;\n    v51 = v42;\n    v52 = v87;\n    while (v88 != 0) {\n        // 0x40ab10\n        v85 = (int128_t)v86 * (int128_t)v28;\n        v86 = (int64_t)(v85 < 0xffffffffffffffff ? v85 : 0xffffffffffffffff);\n        v87 = v85 > 0xffffffffffffffff ? 1 : v90;\n        v88 = v89 - 1;\n        v89 = v88;\n        v90 = v87;\n        v50 = v86;\n        v51 = v42;\n        v52 = v87;\n    }\n    goto lab_0x40ab24;\n  lab_0x40aadf:\n    // 0x40aadf\n    v45 = v41;\n    if (v15 >= 0x80000000000000) {\n        goto lab_0x40aa97;\n    } else {\n        // 0x40aae8\n        v25 = 512 * v15;\n        v24 = v12;\n        v39 = v41;\n        goto lab_0x40aa68;\n    }\n  lab_0x40aa68:;\n    int64_t v61 = v24;\n    int64_t v62 = (0x100000000 * v39 >> 32) + v20; // 0x40aa6d\n    *v7 = v62;\n    v14 = v25;\n    v11 = (*(char *)v62 != 0 ? v61 | 2 : v61) & 0xffffffff;\n    goto lab_0x40a952;\n  lab_0x40aac5:\n    // 0x40aac5\n    *(int64_t *)a4 = v16;\n    // 0x40a955\n    return (v13 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x40aa97:\n    // 0x40aa97\n    v25 = -1;\n    v24 = 1;\n    v39 = v45;\n    goto lab_0x40aa68;\n  lab_0x40ab24:\n    // 0x40ab24\n    v25 = v50;\n    v24 = (v52 | v12) & 0xffffffff;\n    v39 = v51;\n    goto lab_0x40aa68;\n}\n"
        },
        {
            "funcName": "function_40acf0",
            "funcStartAddr": "40acf0",
            "funcEndAddr": "40ad7f",
            "decompiledFuncCode": "int64_t function_40acf0(int64_t * a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40acf0\n    int64_t v1; // 0x40acf0\n    if ((char)v1 != 0) {\n        // 0x40ad0f\n        int128_t v2; // 0x40acf0\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int64_t v3 = 16; // bp-208, 0x40ad53\n    return function_40d650((int64_t)a1, a2, &v3);\n}\n"
        },
        {
            "funcName": "function_40ad80",
            "funcStartAddr": "40ad80",
            "funcEndAddr": "40adc0",
            "decompiledFuncCode": "int64_t function_40ad80(int32_t fd) {\n    // 0x40ad80\n    if (fd < 0) {\n        // 0x40ad84\n        int64_t result; // 0x40ad80\n        return result;\n    }\n    int32_t result2 = close(fd); // 0x40ad8c\n    if (result2 == 0) {\n        // 0x40ad95\n        return result2;\n    }\n    // 0x40ad9a\n    __assert_fail(\"! close_fail\", \"lib/chdir-long.c\", 64, \"cdb_free\");\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_40adc0",
            "funcStartAddr": "40adc0",
            "funcEndAddr": "40adf7",
            "decompiledFuncCode": "int64_t function_40adc0(int32_t * a1) {\n    // 0x40adc0\n    int64_t path; // 0x40adc0\n    int32_t fd = path;\n    uint32_t v1 = openat(fd, (char *)path, O_NOCTTY | O_NONBLOCK | O_DIRECTORY); // 0x40add2\n    int64_t result = 0xffffffff; // 0x40add9\n    if (v1 >= 0) {\n        // 0x40addb\n        function_40ad80(fd);\n        *a1 = v1;\n        result = 0;\n    }\n    // 0x40ade8\n    return result;\n}\n"
        },
        {
            "funcName": "function_40ae00",
            "funcStartAddr": "40ae00",
            "funcEndAddr": "40b070",
            "decompiledFuncCode": "int64_t function_40ae00(int64_t a1) {\n    char * path = (char *)a1; // 0x40ae0f\n    uint32_t result = chdir(path); // 0x40ae0f\n    if (result == 0) {\n        // 0x40af46\n        return 0;\n    }\n    int32_t * v1 = __errno_location(); // 0x40ae1e\n    if (*v1 != 36) {\n        // 0x40af46\n        return result;\n    }\n    int32_t len = strlen(path); // 0x40ae32\n    int32_t fd = -100; // bp-44, 0x40ae37\n    if (len == 0) {\n        // 0x40b052\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g83;\n    }\n    if (len < 0x1000) {\n        // 0x40b039\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x40b052\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g83;\n    }\n    int64_t v2 = len; // 0x40ae32\n    int32_t ini_seg_bytes = strspn(path, \"/\"); // 0x40ae5f\n    int64_t v3; // 0x40ae00\n    if (ini_seg_bytes == 2) {\n        int64_t v4 = function_40c480(a1 + 3, 47, v2 - 3); // 0x40af85\n        if (v4 == 0) {\n            // 0x40af46\n            return 0xffffffff;\n        }\n        char * v5 = (char *)v4; // 0x40af92\n        *v5 = 0;\n        int64_t v6 = function_40adc0(&fd); // 0x40af9d\n        *v5 = 47;\n        if ((int32_t)v6 != 0) {\n            goto lab_0x40af30;\n        } else {\n            int64_t str = v4 + 1; // 0x40afa9\n            v3 = str + (int64_t)strspn((char *)str, \"/\");\n            goto lab_0x40ae7d;\n        }\n    } else {\n        // 0x40ae71\n        v3 = a1;\n        if (ini_seg_bytes != 0) {\n            // 0x40af58\n            if ((int32_t)function_40adc0(&fd) != 0) {\n                goto lab_0x40af30;\n            } else {\n                // 0x40af6b\n                v3 = (int64_t)ini_seg_bytes + a1;\n                goto lab_0x40ae7d;\n            }\n        } else {\n            goto lab_0x40ae7d;\n        }\n    }\n  lab_0x40af30:\n    // 0x40af30\n    function_40ad80(fd);\n    // 0x40af46\n    return 0xffffffff;\n  lab_0x40ae7d:\n    // 0x40ae7d\n    if (*(char *)v3 == 47) {\n      lab_0x40b007:\n        // 0x40b007\n        __assert_fail(\"*dir != '/'\", \"lib/chdir-long.c\", 162, \"chdir_long\");\n        // 0x40b020\n        __assert_fail(\"dir <= dir_end\", \"lib/chdir-long.c\", 163, \"chdir_long\");\n        // 0x40b039\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x40b052\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g83;\n    }\n    uint64_t v7 = v2 + a1; // 0x40ae87\n    if (v7 < v3) {\n        // 0x40b020\n        __assert_fail(\"dir <= dir_end\", \"lib/chdir-long.c\", 163, \"chdir_long\");\n        // 0x40b039\n        __assert_fail(\"4096 <= len\", \"lib/chdir-long.c\", 127, \"chdir_long\");\n        // 0x40b052\n        __assert_fail(\"0 < len\", \"lib/chdir-long.c\", 126, \"chdir_long\");\n        return &g83;\n    }\n    int64_t v8 = v3; // 0x40aefd\n    int64_t v9 = v3; // 0x40aefd\n    if (v7 - v3 > 4095) {\n        int64_t * v10 = memrchr((int64_t *)v8, 47, 0x1000); // 0x40aea5\n        while (v10 != NULL) {\n            int64_t v11 = (int64_t)v10; // 0x40aea5\n            *(char *)v10 = 0;\n            if (v11 - v8 > 4095) {\n                // 0x40afee\n                __assert_fail(\"slash - dir < 4096\", \"lib/chdir-long.c\", 179, \"chdir_long\");\n                goto lab_0x40b007;\n            }\n            int64_t v12 = function_40adc0(&fd); // 0x40aed0\n            *(char *)v10 = 47;\n            if ((int32_t)v12 != 0) {\n                goto lab_0x40af30;\n            }\n            int64_t str2 = v11 + 1; // 0x40aedc\n            int64_t v13 = str2 + (int64_t)strspn((char *)str2, \"/\"); // 0x40aeed\n            v8 = v13;\n            v9 = v13;\n            if (v7 - v13 <= 4095) {\n                goto lab_0x40aeff;\n            }\n            v10 = memrchr((int64_t *)v8, 47, 0x1000);\n        }\n        // 0x40afc8\n        *v1 = 36;\n        // 0x40af46\n        return 0xffffffff;\n    }\n  lab_0x40aeff:\n    // 0x40aeff\n    if (v7 > v9) {\n        // 0x40af04\n        if ((int32_t)function_40adc0(&fd) != 0) {\n            goto lab_0x40af30;\n        } else {\n            goto lab_0x40af15;\n        }\n    } else {\n        goto lab_0x40af15;\n    }\n  lab_0x40af15:\n    // 0x40af15\n    if (fchdir(fd) == 0) {\n        // 0x40afe0\n        function_40ad80(fd);\n        // 0x40af46\n        return 0;\n    }\n    goto lab_0x40af30;\n}\n"
        },
        {
            "funcName": "function_40b070",
            "funcStartAddr": "40b070",
            "funcEndAddr": "40b15b",
            "decompiledFuncCode": "int64_t function_40b070(int64_t path, int64_t a2, int64_t * a3) {\n    // 0x40b070\n    int64_t v1; // 0x40b070\n    int64_t v2 = v1;\n    int32_t v3 = g32; // 0x40b081\n    int64_t name; // bp-424, 0x40b070\n    if (v3 < 0) {\n        // 0x40b0c0\n        if (uname((struct utsname *)&name) == 0) {\n            // 0x40b130\n            int64_t v4; // bp-294, 0x40b070\n            if (strverscmp((char *)&v4, \"2.6.36\") < 0) {\n                // 0x40b0cc\n                g32 = 0;\n                goto lab_0x40b0d6;\n            } else {\n                // 0x40b145\n                g32 = 1;\n                goto lab_0x40b090;\n            }\n        } else {\n            // 0x40b0cc\n            g32 = 0;\n            goto lab_0x40b0d6;\n        }\n    } else {\n        if (v3 == 0) {\n            goto lab_0x40b0d6;\n        } else {\n            goto lab_0x40b090;\n        }\n    }\n  lab_0x40b0d6:\n    // 0x40b0d6\n    if (statfs((char *)path, (struct statfs *)&name) < 0) {\n        // 0x40b123\n        return 0xffffffff;\n    }\n    goto lab_0x40b0ea;\n  lab_0x40b090:\n    // 0x40b090\n    if (statvfs((char *)path, (struct statvfs *)&name) < 0) {\n        // 0x40b123\n        int64_t v8; // 0x40b070\n        int64_t result = v8;\n        return result;\n    }\n    int64_t v6 = v2 != 0 ? v2 : name; // 0x40b070\n    goto lab_0x40b0ea;\n  lab_0x40b0ea:;\n    int64_t v5 = (int64_t)a3;\n    *a3 = v6;\n    *(char *)(v5 + 32) = (char)(v1 >> 63);\n    int32_t v7; // 0x40b070\n    *(int64_t *)(v5 + 48) = (int64_t)v7;\n    // 0x40b123\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40b160",
            "funcStartAddr": "40b160",
            "funcEndAddr": "40b622",
            "decompiledFuncCode": "int64_t function_40b160(int32_t a1, int32_t a2) {\n    // 0x40b160\n    int32_t size; // 0x40b160\n    int32_t v1; // 0x40b160\n    int32_t v2; // 0x40b160\n    if (a2 != 0) {\n        // 0x40b1c0\n        size = a2;\n        v1 = a2;\n        v2 = a1;\n        if (a1 == 0) {\n            goto lab_0x40b192;\n        } else {\n            goto lab_0x40b1dc;\n        }\n    } else {\n        // 0x40b180\n        size = 0x1000;\n        if (a1 != 0) {\n            // 0x40b580\n            *__errno_location() = 22;\n            // 0x40b1a6\n            return 0;\n        }\n        goto lab_0x40b192;\n    }\n  lab_0x40b520:;\n    // 0x40b520\n    int32_t v3; // 0x40b51a\n    int64_t v4 = v3; // 0x40b522\n    int64_t v5; // 0x40b160\n    int64_t dirp2 = v5; // 0x40b522\n    int32_t * v6; // 0x40b266\n    if (v3 != 0) {\n        goto lab_0x40b531;\n    } else {\n        // 0x40b524\n        *v6 = 2;\n        v4 = 2;\n        dirp2 = v5;\n        goto lab_0x40b531;\n    }\n  lab_0x40b332:;\n    // 0x40b332\n    int64_t v7; // 0x40b160\n    int64_t v8 = v7;\n    int64_t v9; // 0x40b160\n    int64_t v10 = v9 + 19; // 0x40b332\n    char * str = (char *)v10;\n    int64_t v11; // bp-200, 0x40b160\n    int64_t v12; // 0x40b160\n    int32_t v13; // 0x40b160\n    int32_t fd; // 0x40b282\n    if ((v13 & 0xf000) == 0x4000 == __fxstatat(1, fd, str, (struct stat *)&v11, 256) == 0) {\n        // 0x40b365\n        if (v11 == v12) {\n            // break -> 0x40b380\n            goto lab_0x40b380;\n        }\n    }\n    int64_t v14 = v8; // 0x40b160\n    goto lab_0x40b2f0_2;\n  lab_0x40b5fe_2:\n    // 0x40b5fe\n    *v6 = 12;\n    v4 = 12;\n    dirp2 = v5;\n    goto lab_0x40b531;\n  lab_0x40b192:;\n    int64_t * mem = malloc(size); // 0x40b197\n    int32_t v41 = (int64_t)mem; // 0x40b19c\n    int32_t result = v41; // 0x40b1a4\n    v1 = size;\n    v2 = v41;\n    if (mem == NULL) {\n        // 0x40b1a6\n        return result;\n    }\n    goto lab_0x40b1dc;\n  lab_0x40b1dc:;\n    int32_t v42 = v2;\n    int64_t v43 = v42;\n    int64_t v44 = v1;\n    int64_t v45 = v43 + v44; // 0x40b1e1\n    int64_t v46 = v45 - 1; // 0x40b1f0\n    *(char *)v46 = 0;\n    int64_t v47; // 0x40b160\n    int64_t v48; // 0x40b160\n    int32_t * v49; // 0x40b160\n    int64_t v50; // 0x40b160\n    int64_t v33; // 0x40b160\n    int64_t v40; // 0x40b160\n    int64_t v51; // 0x40b160\n    int32_t v38; // 0x40b160\n    int32_t v52; // 0x40b160\n    int32_t v53; // 0x40b160\n    if (__lxstat(1, \".\", (struct stat *)&v11) < 0) {\n        goto lab_0x40b558;\n    } else {\n        // 0x40b206\n        if (__lxstat(1, \"/\", (struct stat *)&v11) < 0) {\n            goto lab_0x40b558;\n        } else {\n            // 0x40b231\n            v47 = v44;\n            v48 = v43;\n            v52 = v42;\n            v51 = v46;\n            v50 = v45;\n            if (true) {\n                goto lab_0x40b478;\n            } else {\n                // 0x40b266\n                v6 = __errno_location();\n                int32_t v54 = v1; // 0x40b273\n                int32_t v55 = v42; // 0x40b273\n                int64_t v56 = v11; // 0x40b273\n                int64_t v57 = v46; // 0x40b273\n                int64_t v58 = 0; // 0x40b273\n                int32_t fd2 = -100; // 0x40b273\n                int64_t dirp3; // 0x40b160\n                while (true) {\n                    // 0x40b276\n                    dirp3 = v58;\n                    v38 = v55;\n                    fd = openat(fd2, \"..\", O_RDONLY);\n                    if (fd < 0) {\n                        // break -> 0x40b5a7\n                        break;\n                    }\n                    // 0x40b292\n                    if (__fxstat(1, fd, (struct stat *)&v11) != 0) {\n                        int64_t v59 = (int64_t)*v6; // 0x40b5b8\n                        v40 = v59;\n                        if (dirp3 == 0) {\n                            goto lab_0x40b59d;\n                        } else {\n                            // 0x40b5c1\n                            closedir((struct __dirstream *)dirp3);\n                            v40 = v59;\n                            goto lab_0x40b59d;\n                        }\n                    }\n                    // 0x40b2ab\n                    v12 = v56;\n                    int32_t v60 = v54;\n                    if (dirp3 != 0) {\n                        // 0x40b2b0\n                        if (closedir((struct __dirstream *)dirp3) != 0) {\n                            // 0x40b599\n                            v40 = (int64_t)*v6;\n                            goto lab_0x40b59d;\n                        }\n                    }\n                    struct __dirstream * dirp = fdopendir(fd); // 0x40b2d7\n                    if (dirp == NULL) {\n                        // 0x40b599\n                        v40 = (int64_t)*v6;\n                        goto lab_0x40b59d;\n                    }\n                    // 0x40b2e8\n                    v5 = (int64_t)dirp;\n                    v14 = false;\n                    while (true) {\n                      lab_0x40b2f0_2:;\n                        int64_t v15 = v14; // 0x40b160\n                        int64_t v16; // 0x40b160\n                        int64_t v17; // 0x40b160\n                        while (true) {\n                            int64_t v18 = v15;\n                            *v6 = 0;\n                            struct dirent * v19 = readdir(dirp); // 0x40b2fb\n                            int64_t v20; // 0x40b160\n                            int64_t v21; // 0x40b160\n                            if (v19 == NULL) {\n                                int32_t v22 = *v6; // 0x40b4d0\n                                v3 = v22;\n                                if ((char)v18 == 0 || v22 != 0) {\n                                    goto lab_0x40b520;\n                                }\n                                // 0x40b4dd\n                                rewinddir(dirp);\n                                struct dirent * v23 = readdir(dirp); // 0x40b4e8\n                                if (v23 == NULL) {\n                                    // 0x40b51a\n                                    v3 = *v6;\n                                    goto lab_0x40b520;\n                                }\n                                int64_t v24 = (int64_t)v23;\n                                v9 = v24;\n                                v7 = 0;\n                                v21 = v24;\n                                v20 = 0;\n                                if (*(char *)(v24 + 19) != 46) {\n                                    goto lab_0x40b332;\n                                }\n                            } else {\n                                int64_t v25 = (int64_t)v19;\n                                v17 = v25;\n                                v16 = v18;\n                                v21 = v25;\n                                v20 = v18;\n                                if (*(char *)(v25 + 19) != 46) {\n                                    // break -> 0x40b313\n                                    break;\n                                }\n                            }\n                            int64_t v26 = v20;\n                            int64_t v27 = v21;\n                            int64_t v28 = v27 + 20; // 0x40b500\n                            if (*(char *)v28 != 0) {\n                                // 0x40b50a\n                                v17 = v27;\n                                v16 = v26;\n                                if (*(int16_t *)v28 != 46) {\n                                    // break -> 0x40b313\n                                    break;\n                                }\n                            }\n                            // 0x40b2f0\n                            v15 = v26;\n                        }\n                        int64_t v29 = v16;\n                        int64_t v30 = v17;\n                        v9 = v30;\n                        v7 = v29;\n                        if ((char)v29 == 0) {\n                            goto lab_0x40b332;\n                        } else {\n                            // 0x40b318\n                            v9 = v30;\n                            v7 = 1;\n                            int64_t v31 = v29; // 0x40b32d\n                            int64_t v32; // 0x40b160\n                            if (v11 == v12 && *(int64_t *)v30 != v32) {\n                                // 0x40b2f0\n                                v14 = v31;\n                                goto lab_0x40b2f0_2;\n                            } else {\n                                goto lab_0x40b332;\n                            }\n                        }\n                    }\n                  lab_0x40b380:;\n                    int64_t v61 = v38; // 0x40b388\n                    uint64_t v62 = v57 - v61; // 0x40b388\n                    int32_t len = strlen(str); // 0x40b38d\n                    uint64_t v63 = (int64_t)len; // 0x40b38d\n                    int32_t v64 = v60; // 0x40b398\n                    int32_t v65 = v38; // 0x40b398\n                    int64_t dest_mem = v57; // 0x40b398\n                    if (v62 <= v63) {\n                        if (a2 != 0) {\n                            // 0x40b610\n                            *v6 = 34;\n                            v4 = 34;\n                            dirp2 = v5;\n                            goto lab_0x40b531;\n                        }\n                        uint64_t v66 = (int64_t)v60; // 0x40b3a6\n                        int64_t v67 = len >= v60 ? v63 : v66; // 0x40b3b1\n                        uint64_t v68 = v67 + v66; // 0x40b3b5\n                        if (v68 < v66) {\n                            goto lab_0x40b5fe_2;\n                        }\n                        // 0x40b3c8\n                        v64 = v68;\n                        int64_t * mem2 = realloc((int64_t *)v61, v64); // 0x40b3d0\n                        if (mem2 == NULL) {\n                            goto lab_0x40b5fe_2;\n                        }\n                        int64_t v69 = (int64_t)mem2; // 0x40b3d0\n                        int64_t v70 = v62 + v69;\n                        v65 = v69;\n                        dest_mem = (int64_t)memcpy((int64_t *)(v70 + v67), (int64_t *)v70, v60 - (int32_t)v62);\n                    }\n                    int32_t v71 = v65;\n                    int32_t v72 = v64;\n                    int64_t v73 = (int64_t)memcpy((int64_t *)(dest_mem - v63), (int64_t *)v10, len) - 1; // 0x40b42d\n                    *(char *)v73 = 47;\n                    v54 = v72;\n                    v55 = v71;\n                    v56 = v11;\n                    v57 = v73;\n                    v58 = v5;\n                    fd2 = fd;\n                    // 0x40b45e\n                    v53 = v71;\n                    v49 = v6;\n                    if (closedir(dirp) != 0) {\n                        goto lab_0x40b560;\n                    } else {\n                        int64_t v74 = v71;\n                        int64_t v75 = v72;\n                        v47 = v75;\n                        v48 = v74;\n                        v52 = v71;\n                        v51 = v73;\n                        v50 = v74 + v75;\n                        goto lab_0x40b478;\n                    }\n                }\n                int64_t v76 = (int64_t)*v6; // 0x40b5a7\n                v4 = v76;\n                dirp2 = dirp3;\n                v33 = v76;\n                if (dirp3 == 0) {\n                    goto lab_0x40b539;\n                } else {\n                    goto lab_0x40b531;\n                }\n            }\n        }\n    }\n  lab_0x40b558:\n    // 0x40b558\n    v53 = v42;\n    v49 = __errno_location();\n    goto lab_0x40b560;\n  lab_0x40b560:;\n    int64_t v77 = (int64_t)*v49; // 0x40b566\n    int64_t v34 = v77; // 0x40b56a\n    int32_t * v35 = v49; // 0x40b56a\n    int32_t * v36 = v49; // 0x40b56a\n    int32_t v37 = v53; // 0x40b56a\n    int64_t v39 = v77; // 0x40b56a\n    if (a1 != 0) {\n        goto lab_0x40b541;\n    } else {\n        goto lab_0x40b56c;\n    }\n  lab_0x40b541:\n    // 0x40b541\n    *v35 = (int32_t)v34;\n    // 0x40b1a6\n    return 0;\n  lab_0x40b56c:\n    // 0x40b56c\n    free((int64_t *)(int64_t)v37);\n    v34 = v39;\n    v35 = v36;\n    goto lab_0x40b541;\n  lab_0x40b478:\n    // 0x40b478\n    if (v51 == v47 - 1 + v48) {\n        // 0x40b5e7\n        int64_t v78; // 0x40b160\n        int64_t v79 = v78 - 1; // 0x40b5ec\n        *(char *)v79 = 47;\n    }\n    int64_t * v80 = (int64_t *)v48; // 0x40b4a2\n    int32_t v81 = v50 - v51; // 0x40b4a2\n    memmove(v80, (int64_t *)v51, v81);\n    int32_t mem3 = a1; // 0x40b4ad\n    if (a2 == 0) {\n        // 0x40b5d0\n        mem3 = (int64_t)realloc(v80, v81);\n    }\n    int32_t v82 = mem3;\n    int32_t result2 = v82 == 0 ? v52 : v82;\n    // 0x40b1a6\n    return result2;\n  lab_0x40b539:\n    // 0x40b539\n    v34 = v33;\n    v35 = v6;\n    v36 = v6;\n    v37 = v38;\n    v39 = v33;\n    if (a1 == 0) {\n        goto lab_0x40b56c;\n    } else {\n        goto lab_0x40b541;\n    }\n  lab_0x40b531:\n    // 0x40b531\n    closedir((struct __dirstream *)dirp2);\n    v33 = v4;\n    goto lab_0x40b539;\n  lab_0x40b59d:\n    // 0x40b59d\n    close(fd);\n    v33 = v40;\n    goto lab_0x40b539;\n}\n"
        },
        {
            "funcName": "function_40b630",
            "funcStartAddr": "40b630",
            "funcEndAddr": "40b70f",
            "decompiledFuncCode": "int64_t function_40b630(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40b63c\n    uint32_t v2 = *v1; // 0x40b63c\n    int64_t v3 = a2 & 0xffffffff; // 0x40b641\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x40b644\n    uint64_t v5 = (int64_t)*v4; // 0x40b644\n    int64_t v6; // 0x40b6b2\n    if (v3 <= v5) {\n      lab_0x40b6ac_2:\n        // 0x40b6ac\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x40b632\n    int64_t v8 = v2; // 0x40b630\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40b6ac\n        goto lab_0x40b6ac_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x40b668\n    int64_t v17; // 0x40b676\n    int64_t * v18; // 0x40b690\n    int64_t * v19; // 0x40b693\n    int64_t v20; // 0x40b69e\n    int64_t v21; // 0x40b676\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x40b673\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x40b690\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x40b6a7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40b6ac\n            goto lab_0x40b6ac_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40b6ac\n            goto lab_0x40b6ac_2;\n        }\n        // 0x40b662\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40b6eb\n    int64_t * v23 = (int64_t *)v22; // 0x40b6f0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x40b6f3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x40b6f0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x40b707\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40b65d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40b6ac\n            goto lab_0x40b6ac_2;\n        }\n        // 0x40b662\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x40b673\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x40b690\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x40b6a7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40b6ac\n                goto lab_0x40b6ac_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40b6ac\n                goto lab_0x40b6ac_2;\n            }\n            // 0x40b662\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x40b6d0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x40b6f0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x40b707\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40b6ac\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40b710",
            "funcStartAddr": "40b710",
            "funcEndAddr": "40bd2c",
            "decompiledFuncCode": "int64_t function_40b710(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40b72f\n    int64_t v2 = *v1; // 0x40b72f\n    char * str2 = (char *)v2; // 0x40b73c\n    char c = *str2; // 0x40b73c\n    int64_t v3 = v2; // 0x40b768\n    int64_t v4 = 0; // 0x40b710\n    int32_t v5; // 0x40b710\n    int64_t v6; // 0x40b710\n    int64_t v7; // 0x40b710\n    int64_t v8; // 0x40b710\n    int64_t v9; // 0x40b710\n    int64_t v10; // 0x40b710\n    int64_t v11; // 0x40b710\n    int64_t v12; // 0x40b710\n    int64_t v13; // 0x40b710\n    int64_t str3; // 0x40b710\n    int64_t v14; // 0x40b710\n    int64_t v15; // 0x40b710\n    int64_t v16; // 0x40b710\n    int64_t v17; // 0x40b710\n    int32_t v18; // 0x40b710\n    int32_t v19; // 0x40b710\n    int32_t v20; // 0x40b710\n    int32_t v21; // 0x40b710\n    int32_t v22; // 0x40b710\n    int32_t v23; // 0x40b710\n    int32_t v24; // 0x40b710\n    int32_t v25; // 0x40b710\n    int32_t v26; // 0x40b710\n    int32_t v27; // 0x40b710\n    int32_t v28; // 0x40b710\n    int32_t v29; // 0x40b710\n    int64_t nmemb; // 0x40b710\n    int64_t v30; // 0x40b710\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40b76c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x40b768\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x40b778\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40b77e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x40b748\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40b7ac\n                int64_t v34; // 0x40b710\n                int64_t v35; // 0x40b710\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x40b7b5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x40b930;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x40b7c6\n                int64_t v37 = *(int64_t *)v36; // 0x40b7ca\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x40b7a0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x40b7b5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x40b930;\n                        }\n                    }\n                    // 0x40b7c6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x40b816:\n                    // 0x40b816\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x40b870;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x40b9e0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x40b870;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x40b990\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40b83a;\n                                } else {\n                                    // 0x40b99c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40b83a;\n                                    } else {\n                                        // 0x40b9aa\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40b83a;\n                                        } else {\n                                            goto lab_0x40b870;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40b83a;\n                            }\n                        }\n                    }\n                }\n              lab_0x40b881:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x40ba56\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x40bc02\n                            flockfile(g40);\n                            int64_t v41 = *v1; // 0x40bc22\n                            __fprintf_chk(g40, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40bc6f\n                            int64_t v43 = (int64_t)g40;\n                            int64_t v44 = v43; // 0x40bc89\n                            int64_t v45; // 0x40bc8b\n                            if (*(char *)v42 != 0) {\n                                // 0x40bc8b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g40;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x40bc83\n                            while (v17 + nmemb != v42) {\n                                // 0x40bc85\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40bc8b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g40;\n                                }\n                                // 0x40bc78\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x40bcb0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g40);\n                            v40 = *v1;\n                        } else {\n                            // 0x40ba64\n                            __fprintf_chk(g40, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x40bbbf\n                        free((int64_t *)v17);\n                    }\n                    // 0x40bab9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x40bad0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40b97e\n                    return 63;\n                }\n                // 0x40b8a0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x40b924\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x40b930:;\n                    int32_t * v49 = (int32_t *)a7; // 0x40b940\n                    uint32_t v50 = *v49; // 0x40b940\n                    int64_t v51 = v50; // 0x40b940\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40b94a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x40b953\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x40bb7f\n                                __fprintf_chk(g40, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x40bb2a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40b97e\n                            return 63;\n                        }\n                        // 0x40b9c8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x40bcdf\n                                    __fprintf_chk(g40, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x40bbdd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x40bbf0\n                                // 0x40b97e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40baee\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x40bb02\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40b96b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40b96e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x40b972\n                    int64_t result = v59; // 0x40b978\n                    if (v58 != 0) {\n                        // 0x40b97a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40b97e\n                    return result;\n                }\n            } else {\n                // 0x40b77e\n                v5 = v32;\n            }\n            // break -> 0x40b8a5\n            break;\n        }\n    }\n    // 0x40b8a5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40b8bd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x40b8c7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40b97e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x40ba09\n        __fprintf_chk(g40, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x40b8f6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x40b906\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x40b870:\n    // 0x40b870\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x40b870\n    int64_t v63 = *(int64_t *)v62; // 0x40b874\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x40b881\n        goto lab_0x40b881;\n    }\n    goto lab_0x40b816;\n  lab_0x40b83a:\n    // 0x40b83a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x40b710\n    int32_t v65; // 0x40b710\n    int32_t v66; // 0x40b710\n    if (v27 != 0) {\n        goto lab_0x40b870;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x40b9f0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x40b870;\n            } else {\n                goto lab_0x40b861;\n            }\n        } else {\n            // 0x40b855\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x40bb4c\n                int64_t v67 = (int64_t)mem; // 0x40bb4c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x40b870;\n                } else {\n                    // 0x40bb5f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x40b861;\n                }\n            } else {\n                goto lab_0x40b861;\n            }\n        }\n    }\n  lab_0x40b861:\n    // 0x40b861\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x40b870;\n}\n"
        },
        {
            "funcName": "function_40bd30",
            "funcStartAddr": "40bd30",
            "funcEndAddr": "40c2f6",
            "decompiledFuncCode": "int64_t function_40bd30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x40bd51\n    if (v3 < 1) {\n        // 0x40bf0e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40bd4d\n    int32_t v5 = *(int32_t *)a7; // 0x40bd59\n    uint64_t v6 = a1 & 0xffffffff; // 0x40bd5b\n    int64_t v7 = v2; // 0x40bd60\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x40bd63\n    *v8 = 0;\n    int64_t v9; // 0x40bd30\n    int64_t v10; // 0x40bd30\n    int64_t v11; // 0x40bd30\n    int64_t v12; // 0x40bd30\n    int64_t str; // 0x40bd30\n    int64_t v13; // 0x40bd30\n    int64_t v14; // 0x40bd30\n    int64_t v15; // 0x40bd30\n    int64_t v16; // 0x40bd30\n    int64_t v17; // 0x40bd30\n    int32_t v18; // 0x40bd30\n    char v19; // 0x40bd30\n    if (v5 == 0) {\n        // 0x40bf48\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40bd7a;\n    } else {\n        // 0x40bd73\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x40bdc0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x40bdc3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x40be88;\n            } else {\n                int64_t v22 = v7 + 1; // 0x40bdd6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x40bde6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40be9c;\n                } else {\n                    goto lab_0x40bdf8;\n                }\n            }\n        } else {\n            goto lab_0x40bd7a;\n        }\n    }\n  lab_0x40bd7a:\n    // 0x40bd7a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x40bd80\n    *v24 = 0;\n    int64_t v25; // 0x40bd30\n    int64_t v26; // 0x40bd30\n    int64_t v27; // 0x40bd30\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x40be70\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40be7d;\n        }\n        case 43: {\n            // 0x40c180\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40be7d;\n        }\n        default: {\n            // 0x40bd9c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x40c0ff\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x40c218\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40be7d;\n                } else {\n                    // 0x40c10d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40bdaa;\n                }\n            } else {\n                goto lab_0x40bdaa;\n            }\n        }\n    }\n  lab_0x40be88:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40be8f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x40bdf8;\n    } else {\n        goto lab_0x40be9c;\n    }\n  lab_0x40bdaa:\n    // 0x40bdaa\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40be7d;\n  lab_0x40be7d:\n    // 0x40be7d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x40be88;\n  lab_0x40bdf8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x40bdf8\n    int64_t v31 = v30; // 0x40bdf8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x40bdfa\n    if ((int64_t)*v32 > v31) {\n        // 0x40bdff\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x40be02\n    if (*v33 > v30) {\n        // 0x40be07\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x40be0a\n    int64_t v35 = v31; // 0x40be0e\n    int64_t v36 = v15; // 0x40be0e\n    int64_t v37; // 0x40bd30\n    int64_t v38; // 0x40bd30\n    int64_t v39; // 0x40bd30\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x40bf78\n        int64_t v41 = v40; // 0x40bf78\n        v2 = v41;\n        int64_t v42; // 0x40bd30\n        if (*v33 == v40) {\n            // 0x40c160\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40c168\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x40bf84\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x40bf88\n                function_40b630(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x40bf98\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x40bfa1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40bfaa\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x40bfc1\n            int64_t v47 = v45 & 0xffffffff; // 0x40bfc5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40bfce\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x40bfd4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x40bfd6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x40bfb0\n            int64_t v49 = v48 & 0xffffffff; // 0x40bfb0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x40bfc1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40bfce\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x40bfd4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x40bfd6;\n                    }\n                }\n                // 0x40bfb0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x40c178\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x40bfd6;\n    } else {\n        goto lab_0x40be14;\n    }\n  lab_0x40be9c:\n    // 0x40be9c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40be9f\n    int64_t v51 = v12; // 0x40be9f\n    int64_t v52 = v14; // 0x40be9f\n    if (*(char *)v10 == 0) {\n        goto lab_0x40bdf8;\n    } else {\n        goto lab_0x40bea5;\n    }\n  lab_0x40be14:;\n    int32_t v53 = v35; // 0x40be14\n    int64_t v54; // 0x40bd30\n    int64_t v55; // 0x40bd30\n    int64_t v56; // 0x40bd30\n    int64_t v57; // 0x40bd30\n    int64_t v58; // 0x40bd30\n    int64_t v59; // 0x40bd30\n    char * v60; // 0x40bd30\n    int64_t v61; // 0x40bd30\n    int64_t v62; // 0x40be29\n    int64_t v63; // 0x40bd30\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x40bf63\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x40bf66;\n    } else {\n        // 0x40be1c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x40bd30\n        int64_t v66 = v65 ? -1 : 1; // 0x40be30\n        int64_t v67 = (int64_t)\"--\"; // 0x40bd30\n        int64_t v68 = v62; // 0x40bd30\n        int64_t v69 = 3; // 0x40be30\n        unsigned char v70 = *(char *)v68; // 0x40be30\n        char v71 = *(char *)v67; // 0x40be30\n        char v72 = v71; // 0x40be30\n        bool v73 = false; // 0x40be30\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x40bf20\n            if (*(char *)v62 == 45) {\n                // 0x40bfe0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x40bfe0\n                if (c == 0) {\n                    goto lab_0x40bf2a;\n                } else {\n                    // 0x40bfed\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x40c070;\n                    } else {\n                        if (c == 45) {\n                            // 0x40c253\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x40c0c5;\n                        } else {\n                            // 0x40bffe\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x40c070;\n                            } else {\n                                // 0x40c003\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x40c024;\n                                } else {\n                                    // 0x40c00a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x40c070;\n                                    } else {\n                                        goto lab_0x40c024;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x40bf2a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x40be40\n            v2 = v75;\n            int32_t v76 = *v32; // 0x40be43\n            int64_t v77 = v35 + 1; // 0x40be46\n            int32_t v78 = v77; // 0x40be49\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x40c1b0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x40be57\n                    function_40b630(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x40be65\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x40bf66;\n        }\n    }\n  lab_0x40bea5:;\n    // 0x40bea5\n    int64_t v79; // bp-104, 0x40bd30\n    int64_t v80 = &v79; // 0x40bd3a\n    int64_t v81 = v50 + 1; // 0x40bea5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40beac\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x40beb1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x40beb5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x40beb9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x40bec1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x40bec6\n    int32_t c2 = v84; // 0x40bec6\n    char * found_char_pos = strchr(str2, c2); // 0x40bec6\n    int64_t v87 = *v82; // 0x40becb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x40bed5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x40bee0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x40c1d0\n            __fprintf_chk(g40, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40c19d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x40bf0e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x40bec6\n    char v91 = *(char *)(v90 + 1); // 0x40befb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x40beb5\n        if (v91 != 58) {\n            // 0x40bf0e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x40c124\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x40c228\n                *v8 = 0;\n            } else {\n                // 0x40c20c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40c14e\n            *v83 = 0;\n            // 0x40bf0e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40c12e\n        if (v93 != 0) {\n            // 0x40c1c0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40c14e\n            *v83 = 0;\n            // 0x40bf0e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x40c141\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40c14e\n            *v83 = 0;\n            // 0x40bf0e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40c28a\n            __fprintf_chk(g40, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40c23a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x40c241\n        // 0x40c14e\n        *v83 = 0;\n        // 0x40bf0e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x40c099\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40c09b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x40c2c0\n                __fprintf_chk(g40, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x40c271\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x40c278\n            // 0x40bf0e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x40c0a6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40c0aa\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x40c0c5;\n  lab_0x40bfd6:\n    // 0x40bfd6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x40be14;\n  lab_0x40c0c5:;\n    int64_t v99 = function_40b710(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x40c0e3\n    // 0x40bf0e\n    return v99 & 0xffffffff;\n  lab_0x40bf66:;\n    int32_t v100 = v55; // 0x40bf66\n    if (v100 != (int32_t)v59) {\n        // 0x40bf6a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x40bf0e\n    return 0xffffffff;\n  lab_0x40bf2a:\n    // 0x40bf2a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x40bf31\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x40bf0e\n    return v99 & 0xffffffff;\n  lab_0x40c070:\n    // 0x40c070\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x40bea5;\n  lab_0x40c024:\n    // 0x40c024\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_40b710(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40c04a\n    if ((int32_t)v101 != -1) {\n        // 0x40bf0e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40c05f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x40c070;\n}\n"
        },
        {
            "funcName": "function_40c300",
            "funcStartAddr": "40c300",
            "funcEndAddr": "40c356",
            "decompiledFuncCode": "int64_t function_40c300(int64_t a1) {\n    // 0x40c300\n    *(int32_t *)&g76 = g35;\n    *(int32_t *)&g77 = g34;\n    int64_t v1; // 0x40c300\n    int64_t result = function_40bd30(v1, v1, v1, v1, v1, v1, &g76, a1 & 0xffffffff); // 0x40c326\n    g35 = *(int32_t *)&g76;\n    g82 = g79;\n    *(int32_t *)&g33 = g78;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c360",
            "funcStartAddr": "40c360",
            "funcEndAddr": "40c378",
            "decompiledFuncCode": "int64_t function_40c360(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40c360\n    return function_40c300(1);\n}\n"
        },
        {
            "funcName": "function_40c380",
            "funcStartAddr": "40c380",
            "funcEndAddr": "40c393",
            "decompiledFuncCode": "int64_t function_40c380(int64_t a1, int64_t a2, char * a3, char (**a4)[4], int64_t * a5, int64_t a6) {\n    // 0x40c380\n    return function_40c300(0);\n}\n"
        },
        {
            "funcName": "function_40c3a0",
            "funcStartAddr": "40c3a0",
            "funcEndAddr": "40c3b5",
            "decompiledFuncCode": "int64_t function_40c3a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40c3a0\n    return function_40bd30(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40c3c0",
            "funcStartAddr": "40c3c0",
            "funcEndAddr": "40c3d6",
            "decompiledFuncCode": "int64_t function_40c3c0(void) {\n    // 0x40c3c0\n    return function_40c300(0);\n}\n"
        },
        {
            "funcName": "function_40c3e0",
            "funcStartAddr": "40c3e0",
            "funcEndAddr": "40c3f8",
            "decompiledFuncCode": "int64_t function_40c3e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x40c3e0\n    return function_40bd30(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_40c400",
            "funcStartAddr": "40c400",
            "funcEndAddr": "40c47a",
            "decompiledFuncCode": "int64_t function_40c400(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40c40b\n    int64_t v2 = (int64_t)&g14; // 0x40c40b\n    int64_t * pwc; // 0x40c400\n    int64_t v3; // 0x40c400\n    int64_t n; // 0x40c400\n    if (a2 == 0) {\n        goto lab_0x40c452;\n    } else {\n        // 0x40c40d\n        if (a3 == 0) {\n            // 0x40c438\n            return -2;\n        }\n        // 0x40c419\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x40c452;\n        } else {\n            goto lab_0x40c424;\n        }\n    }\n  lab_0x40c452:\n    // 0x40c452\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x40c400\n    pwc = &v4;\n    goto lab_0x40c424;\n  lab_0x40c424:;\n    char * wstr = (char *)v3; // 0x40c42a\n    int64_t ps; // 0x40c400\n    int32_t v5 = mbrtowc((int32_t *)pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40c42a\n    int64_t result = v5; // 0x40c42a\n    if (v5 < 0xfffffffe) {\n        // 0x40c438\n        return result;\n    }\n    int64_t result2 = result; // 0x40c469\n    if ((char)function_40dbe0(0, v3) == 0) {\n        // 0x40c46b\n        *(int32_t *)pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x40c438\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c480",
            "funcStartAddr": "40c480",
            "funcEndAddr": "40c584",
            "decompiledFuncCode": "int64_t function_40c480(int64_t result, uint64_t a2, int64_t a3) {\n    // 0x40c480\n    if (a3 == 0) {\n        // 0x40c4b9\n        return 0;\n    }\n    int64_t v1 = result; // 0x40c48c\n    int64_t v2 = a3; // 0x40c48c\n    int64_t result2; // 0x40c480\n    if (result % 8 != 0) {\n        char v3 = a2; // 0x40c48e\n        int64_t v4 = result; // 0x40c491\n        if ((char)result == v3) {\n            // 0x40c4b9\n            return result;\n        }\n        int64_t v5 = a3; // 0x40c491\n        v5--;\n        result2 = 0;\n        while (v5 != 0) {\n            // 0x40c4a0\n            v4++;\n            v1 = v4;\n            v2 = v5;\n            if (v4 % 8 == 0) {\n                goto lab_0x40c4c0;\n            }\n            // 0x40c4a6\n            result2 = v4;\n            if (*(char *)v4 == v3) {\n                // break -> 0x40c4b9\n                break;\n            }\n            v5--;\n            result2 = 0;\n        }\n        // 0x40c4b9\n        return result2;\n    }\n  lab_0x40c4c0:;\n    int64_t result3 = v1; // 0x40c4ed\n    int64_t v6 = v2; // 0x40c4ed\n    if (v2 >= 8) {\n        int64_t v7 = 256 * a2 & 0xff00 | a2 % 256; // 0x40c4cf\n        int64_t v8 = 0x10000 * v7 | v7; // 0x40c4dc\n        int64_t v9 = 0x100000000 * v8 | v8; // 0x40c4e6\n        int64_t v10 = *(int64_t *)v1 ^ v9; // 0x40c506\n        result3 = v1;\n        v6 = v2;\n        if (((v10 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v10 - 0x101010101010101) == 0) {\n            int64_t v11 = v2 - 8; // 0x40c535\n            int64_t v12 = v1 + 8; // 0x40c539\n            while (v11 >= 8) {\n                int64_t v13 = *(int64_t *)v12 ^ v9; // 0x40c523\n                result3 = v12;\n                v6 = v11;\n                if (((v13 & -0x7f7f7f7f7f7f7f80 ^ -0x7f7f7f7f7f7f7f80) & v13 - 0x101010101010101) != 0) {\n                    goto lab_0x40c54c;\n                }\n                v11 -= 8;\n                v12 += 8;\n            }\n            // 0x40c543\n            result3 = v12;\n            v6 = v11;\n            if (v11 == 0) {\n                // 0x40c4b9\n                return 0;\n            }\n        }\n    }\n  lab_0x40c54c:;\n    char v14 = a2; // 0x40c54c\n    if (*(char *)result3 == v14) {\n        // 0x40c4b9\n        return result3;\n    }\n    int64_t v15 = result3 + 1;\n    result2 = 0;\n    while (v15 != v6 + result3) {\n        // 0x40c560\n        result2 = v15;\n        if (*(char *)v15 == v14) {\n            // break -> 0x40c4b9\n            break;\n        }\n        v15++;\n        result2 = 0;\n    }\n    // 0x40c4b9\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40c590",
            "funcStartAddr": "40c590",
            "funcEndAddr": "40c61a",
            "decompiledFuncCode": "int64_t function_40c590(int64_t str, int64_t a2, int64_t a3) {\n    uint64_t result = (int64_t)strlen((char *)str) + 1; // 0x40c59e\n    int64_t v1 = str; // 0x40c5a2\n    int64_t v2 = 0; // 0x40c5a2\n    int64_t v3; // 0x40c590\n    char v4; // 0x40c5b7\n    int64_t v5; // 0x40c5bb\n    while (true) {\n      lab_0x40c5b7:;\n        int64_t v6 = v2;\n        v3 = v1;\n        int64_t v7 = v6 + str;\n        v4 = *(char *)v7;\n        v5 = v6 + 1;\n        if (v4 != 92) {\n            goto lab_0x40c5a8;\n        } else {\n            int64_t v8 = v6 + 4; // 0x40c5c5\n            if (v8 >= result) {\n                goto lab_0x40c5a8;\n            } else {\n                char v9 = *(char *)(v5 + str); // 0x40c5ce\n                if ((v9 & -4) == 48) {\n                    char v10 = *(char *)(v7 + 2); // 0x40c5dd\n                    if ((v10 & -8) == 48) {\n                        char v11 = *(char *)(v7 + 3); // 0x40c5ed\n                        if ((v11 & -8) == 48) {\n                            // 0x40c5fc\n                            *(char *)v3 = 8 * (v10 + 8 * v9) + 80 + v11;\n                            v2 = v8;\n                            goto lab_0x40c5b4;\n                        } else {\n                            goto lab_0x40c5a8;\n                        }\n                    } else {\n                        goto lab_0x40c5a8;\n                    }\n                } else {\n                    goto lab_0x40c5a8;\n                }\n            }\n        }\n    }\n    // 0x40c618\n    return result;\n  lab_0x40c5a8:\n    // 0x40c5a8\n    *(char *)v3 = v4;\n    v2 = v5;\n    if (result <= v5) {\n        return result;\n    }\n    goto lab_0x40c5b4;\n  lab_0x40c5b4:\n    // 0x40c5b4\n    v1 = v3 + 1;\n    goto lab_0x40c5b7;\n}\n"
        },
        {
            "funcName": "function_40c620",
            "funcStartAddr": "40c620",
            "funcEndAddr": "40c662",
            "decompiledFuncCode": "int64_t function_40c620(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x40c627\n    free(v1);\n    free((int64_t *)*(int64_t *)(a1 + 8));\n    free((int64_t *)*(int64_t *)(a1 + 16));\n    if ((*(char *)(a1 + 40) & 4) == 0) {\n        // 0x40c644\n        free(v1);\n        return &g83;\n    }\n    // 0x40c650\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    free(v1);\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_40c670",
            "funcStartAddr": "40c670",
            "funcEndAddr": "40ce2f",
            "decompiledFuncCode": "int64_t function_40c670(char a1) {\n    // 0x40c670\n    int64_t v1; // bp-152, 0x40c670\n    int64_t v2 = &v1; // 0x40c684\n    struct _IO_FILE * file = fopen(\"/proc/self/mountinfo\", \"r\"); // 0x40c688\n    bool v3; // 0x40c670\n    bool v4; // 0x40c670\n    int64_t * v5; // 0x40c670\n    int64_t v6; // 0x40c670\n    int64_t v7; // 0x40c670\n    int64_t v8; // 0x40c670\n    int64_t v9; // 0x40c670\n    int64_t v10; // 0x40c670\n    int64_t v11; // 0x40c670\n    int64_t v12; // 0x40c670\n    int64_t v13; // 0x40c670\n    int64_t v14; // 0x40c670\n    int32_t * v15; // 0x40c670\n    int32_t v16; // 0x40c670\n    struct mntent * v17; // 0x40c670\n    char v18; // 0x40c670\n    char v19; // 0x40c670\n    int64_t v20; // bp-80, 0x40c670\n    int32_t * v21; // 0x40c6d2\n    char * v22; // 0x40c854\n    unsigned char v23; // 0x40cd48\n    int64_t v24; // 0x40c8ba\n    unsigned char v25; // 0x40ca70\n    bool v26; // 0x40c670\n    int64_t * v27; // 0x40c670\n    int64_t v28; // 0x40c670\n    int64_t v29; // 0x40c670\n    struct _IO_FILE * v30; // 0x40caaa\n    int64_t v31; // 0x40caf5\n    char * v32; // 0x40cb31\n    int64_t v33; // 0x40cc94\n    char ** v34; // 0x40c6d2\n    int64_t v35; // 0x40c7e4\n    bool v36; // 0x40c670\n    bool v37; // 0x40c670\n    if (file == NULL) {\n        // 0x40caa0\n        v30 = setmntent(\"/etc/mtab\", \"r\");\n        if (v30 == NULL) {\n            // 0x40c92a\n            return 0;\n        }\n        int64_t v38 = &v20; // 0x40cabe\n        struct mntent * v39 = getmntent(v30); // 0x40caca\n        v12 = v38;\n        if (v39 != NULL) {\n            // 0x40cae0\n            v29 = v26 ? -1 : 1;\n            v17 = v39;\n            v10 = v38;\n            while (true) {\n              lab_0x40cae0:\n                // 0x40cae0\n                v11 = v10;\n                int64_t v40 = (int64_t)v17;\n                char * v41 = hasmntopt(v17, \"bind\"); // 0x40cae8\n                v31 = function_40a560(56);\n                int64_t v42 = function_40a790(*(int64_t *)v17); // 0x40cb01\n                int64_t * v43 = (int64_t *)v31; // 0x40cb0a\n                *v43 = v42;\n                int64_t v44 = function_40a790(*(int64_t *)(v40 + 8)); // 0x40cb0d\n                *(int64_t *)(v31 + 16) = 0;\n                *(int64_t *)(v31 + 8) = v44;\n                int64_t v45 = function_40a790(*(int64_t *)(v40 + 16)); // 0x40cb22\n                v32 = (char *)(v31 + 40);\n                *v32 = *v32 | 4;\n                *(int64_t *)(v31 + 24) = v45;\n                int64_t v46 = 7; // 0x40cb44\n                int64_t v47 = v45;\n                int64_t v48 = (int64_t)\"autofs\";\n                unsigned char v49 = *(char *)v47; // 0x40cb44\n                char v50 = *(char *)v48; // 0x40cb44\n                char v51 = v50; // 0x40cb44\n                bool v52 = false; // 0x40cb44\n                while (v49 == v50) {\n                    v46--;\n                    int64_t v53 = v48 + v29; // 0x40cb44\n                    int64_t v54 = v47 + v29; // 0x40cb44\n                    v51 = v49;\n                    v52 = true;\n                    if (v46 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v47 = v54;\n                    v48 = v53;\n                    v49 = *(char *)v47;\n                    v50 = *(char *)v48;\n                    v51 = v50;\n                    v52 = false;\n                }\n                unsigned char v55 = v51;\n                int64_t v56 = v45; // 0x40cb4d\n                int64_t v57 = 5; // 0x40cb4d\n                char v58 = 1; // 0x40cb4d\n                if ((v49 >= v55 && !v52) != v49 < v55) {\n                    int64_t v59 = v56;\n                    int64_t v60 = (int64_t)\"proc\";\n                    unsigned char v61 = *(char *)v59; // 0x40cb60\n                    char v62 = *(char *)v60; // 0x40cb60\n                    char v63 = v62; // 0x40cb60\n                    bool v64 = false; // 0x40cb60\n                    while (v61 == v62) {\n                        int64_t v65 = v57 - 1; // 0x40cb60\n                        int64_t v66 = v60 + v29; // 0x40cb60\n                        v56 = v59 + v29;\n                        v57 = v65;\n                        v63 = v61;\n                        v64 = true;\n                        if (v65 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v59 = v56;\n                        v60 = v66;\n                        v61 = *(char *)v59;\n                        v62 = *(char *)v60;\n                        v63 = v62;\n                        v64 = false;\n                    }\n                    unsigned char v67 = v63;\n                    int64_t v68 = v45; // 0x40cb69\n                    int64_t v69 = 6; // 0x40cb69\n                    v58 = 1;\n                    if ((v61 >= v67 && !v64) != v61 < v67) {\n                        int64_t v70 = v68;\n                        int64_t v71 = (int64_t)\"subfs\";\n                        unsigned char v72 = *(char *)v70; // 0x40cb7c\n                        char v73 = *(char *)v71; // 0x40cb7c\n                        char v74 = v73; // 0x40cb7c\n                        bool v75 = false; // 0x40cb7c\n                        while (v72 == v73) {\n                            int64_t v76 = v69 - 1; // 0x40cb7c\n                            int64_t v77 = v71 + v29; // 0x40cb7c\n                            v68 = v70 + v29;\n                            v69 = v76;\n                            v74 = v72;\n                            v75 = true;\n                            if (v76 == 0) {\n                                // break -> \n                                break;\n                            }\n                            v70 = v68;\n                            v71 = v77;\n                            v72 = *(char *)v70;\n                            v73 = *(char *)v71;\n                            v74 = v73;\n                            v75 = false;\n                        }\n                        unsigned char v78 = v74;\n                        int64_t v79 = v45; // 0x40cb85\n                        int64_t v80 = 8; // 0x40cb85\n                        v58 = 1;\n                        if ((v72 >= v78 && !v75) != v72 < v78) {\n                            int64_t v81 = v79;\n                            int64_t v82 = (int64_t)\"debugfs\";\n                            unsigned char v83 = *(char *)v81; // 0x40cb98\n                            char v84 = *(char *)v82; // 0x40cb98\n                            char v85 = v84; // 0x40cb98\n                            bool v86 = false; // 0x40cb98\n                            while (v83 == v84) {\n                                int64_t v87 = v80 - 1; // 0x40cb98\n                                int64_t v88 = v82 + v29; // 0x40cb98\n                                v79 = v81 + v29;\n                                v80 = v87;\n                                v85 = v83;\n                                v86 = true;\n                                if (v87 == 0) {\n                                    // break -> \n                                    break;\n                                }\n                                v81 = v79;\n                                v82 = v88;\n                                v83 = *(char *)v81;\n                                v84 = *(char *)v82;\n                                v85 = v84;\n                                v86 = false;\n                            }\n                            unsigned char v89 = v85;\n                            int64_t v90 = v45; // 0x40cba1\n                            int64_t v91 = 7; // 0x40cba1\n                            v58 = 1;\n                            if ((v83 >= v89 && !v86) != v83 < v89) {\n                                int64_t v92 = v90;\n                                int64_t v93 = (int64_t)\"devpts\";\n                                unsigned char v94 = *(char *)v92; // 0x40cbb4\n                                char v95 = *(char *)v93; // 0x40cbb4\n                                char v96 = v95; // 0x40cbb4\n                                bool v97 = false; // 0x40cbb4\n                                while (v94 == v95) {\n                                    int64_t v98 = v91 - 1; // 0x40cbb4\n                                    int64_t v99 = v93 + v29; // 0x40cbb4\n                                    v90 = v92 + v29;\n                                    v91 = v98;\n                                    v96 = v94;\n                                    v97 = true;\n                                    if (v98 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v92 = v90;\n                                    v93 = v99;\n                                    v94 = *(char *)v92;\n                                    v95 = *(char *)v93;\n                                    v96 = v95;\n                                    v97 = false;\n                                }\n                                unsigned char v100 = v96;\n                                int64_t v101 = v45; // 0x40cbbd\n                                int64_t v102 = 8; // 0x40cbbd\n                                v58 = 1;\n                                if ((v94 >= v100 && !v97) != v94 < v100) {\n                                    int64_t v103 = v101;\n                                    int64_t v104 = (int64_t)\"fusectl\";\n                                    unsigned char v105 = *(char *)v103; // 0x40cbd0\n                                    char v106 = *(char *)v104; // 0x40cbd0\n                                    char v107 = v106; // 0x40cbd0\n                                    bool v108 = false; // 0x40cbd0\n                                    while (v105 == v106) {\n                                        int64_t v109 = v102 - 1; // 0x40cbd0\n                                        int64_t v110 = v104 + v29; // 0x40cbd0\n                                        v101 = v103 + v29;\n                                        v102 = v109;\n                                        v107 = v105;\n                                        v108 = true;\n                                        if (v109 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v103 = v101;\n                                        v104 = v110;\n                                        v105 = *(char *)v103;\n                                        v106 = *(char *)v104;\n                                        v107 = v106;\n                                        v108 = false;\n                                    }\n                                    unsigned char v111 = v107;\n                                    int64_t v112 = v45; // 0x40cbd9\n                                    int64_t v113 = 7; // 0x40cbd9\n                                    v58 = 1;\n                                    if ((v105 >= v111 && !v108) != v105 < v111) {\n                                        int64_t v114 = v112;\n                                        int64_t v115 = (int64_t)\"mqueue\";\n                                        unsigned char v116 = *(char *)v114; // 0x40cbec\n                                        char v117 = *(char *)v115; // 0x40cbec\n                                        char v118 = v117; // 0x40cbec\n                                        bool v119 = false; // 0x40cbec\n                                        while (v116 == v117) {\n                                            int64_t v120 = v113 - 1; // 0x40cbec\n                                            int64_t v121 = v115 + v29; // 0x40cbec\n                                            v112 = v114 + v29;\n                                            v113 = v120;\n                                            v118 = v116;\n                                            v119 = true;\n                                            if (v120 == 0) {\n                                                // break -> \n                                                break;\n                                            }\n                                            v114 = v112;\n                                            v115 = v121;\n                                            v116 = *(char *)v114;\n                                            v117 = *(char *)v115;\n                                            v118 = v117;\n                                            v119 = false;\n                                        }\n                                        unsigned char v122 = v118;\n                                        int64_t v123 = v45; // 0x40cbf5\n                                        int64_t v124 = 11; // 0x40cbf5\n                                        v58 = 1;\n                                        if ((v116 >= v122 && !v119) != v116 < v122) {\n                                            int64_t v125 = v123;\n                                            int64_t v126 = (int64_t)\"rpc_pipefs\";\n                                            unsigned char v127 = *(char *)v125; // 0x40cc08\n                                            char v128 = *(char *)v126; // 0x40cc08\n                                            char v129 = v128; // 0x40cc08\n                                            bool v130 = false; // 0x40cc08\n                                            while (v127 == v128) {\n                                                int64_t v131 = v124 - 1; // 0x40cc08\n                                                int64_t v132 = v126 + v29; // 0x40cc08\n                                                v123 = v125 + v29;\n                                                v124 = v131;\n                                                v129 = v127;\n                                                v130 = true;\n                                                if (v131 == 0) {\n                                                    // break -> \n                                                    break;\n                                                }\n                                                v125 = v123;\n                                                v126 = v132;\n                                                v127 = *(char *)v125;\n                                                v128 = *(char *)v126;\n                                                v129 = v128;\n                                                v130 = false;\n                                            }\n                                            unsigned char v133 = v129;\n                                            int64_t v134 = v45; // 0x40cc11\n                                            int64_t v135 = 6; // 0x40cc11\n                                            v58 = 1;\n                                            if ((v127 >= v133 && !v130) != v127 < v133) {\n                                                int64_t v136 = v134;\n                                                int64_t v137 = (int64_t)\"sysfs\";\n                                                unsigned char v138 = *(char *)v136; // 0x40cc20\n                                                char v139 = *(char *)v137; // 0x40cc20\n                                                char v140 = v139; // 0x40cc20\n                                                bool v141 = false; // 0x40cc20\n                                                while (v138 == v139) {\n                                                    int64_t v142 = v135 - 1; // 0x40cc20\n                                                    int64_t v143 = v137 + v29; // 0x40cc20\n                                                    v134 = v136 + v29;\n                                                    v135 = v142;\n                                                    v140 = v138;\n                                                    v141 = true;\n                                                    if (v142 == 0) {\n                                                        // break -> \n                                                        break;\n                                                    }\n                                                    v136 = v134;\n                                                    v137 = v143;\n                                                    v138 = *(char *)v136;\n                                                    v139 = *(char *)v137;\n                                                    v140 = v139;\n                                                    v141 = false;\n                                                }\n                                                unsigned char v144 = v140;\n                                                int64_t v145 = v45; // 0x40cc29\n                                                int64_t v146 = 6; // 0x40cc29\n                                                v58 = 1;\n                                                if ((v138 >= v144 && !v141) != v138 < v144) {\n                                                    int64_t v147 = v145;\n                                                    int64_t v148 = (int64_t)\"devfs\";\n                                                    unsigned char v149 = *(char *)v147; // 0x40cc38\n                                                    char v150 = *(char *)v148; // 0x40cc38\n                                                    char v151 = v150; // 0x40cc38\n                                                    bool v152 = false; // 0x40cc38\n                                                    while (v149 == v150) {\n                                                        int64_t v153 = v146 - 1; // 0x40cc38\n                                                        int64_t v154 = v148 + v29; // 0x40cc38\n                                                        v145 = v147 + v29;\n                                                        v146 = v153;\n                                                        v151 = v149;\n                                                        v152 = true;\n                                                        if (v153 == 0) {\n                                                            // break -> \n                                                            break;\n                                                        }\n                                                        v147 = v145;\n                                                        v148 = v154;\n                                                        v149 = *(char *)v147;\n                                                        v150 = *(char *)v148;\n                                                        v151 = v150;\n                                                        v152 = false;\n                                                    }\n                                                    unsigned char v155 = v151;\n                                                    int64_t v156 = v45; // 0x40cc41\n                                                    int64_t v157 = 7; // 0x40cc41\n                                                    v58 = 1;\n                                                    if ((v149 >= v155 && !v152) != v149 < v155) {\n                                                        int64_t v158 = v156;\n                                                        int64_t v159 = (int64_t)\"kernfs\";\n                                                        unsigned char v160 = *(char *)v158; // 0x40cc50\n                                                        char v161 = *(char *)v159; // 0x40cc50\n                                                        char v162 = v161; // 0x40cc50\n                                                        bool v163 = false; // 0x40cc50\n                                                        while (v160 == v161) {\n                                                            int64_t v164 = v157 - 1; // 0x40cc50\n                                                            int64_t v165 = v159 + v29; // 0x40cc50\n                                                            v156 = v158 + v29;\n                                                            v157 = v164;\n                                                            v162 = v160;\n                                                            v163 = true;\n                                                            if (v164 == 0) {\n                                                                // break -> \n                                                                break;\n                                                            }\n                                                            v158 = v156;\n                                                            v159 = v165;\n                                                            v160 = *(char *)v158;\n                                                            v161 = *(char *)v159;\n                                                            v162 = v161;\n                                                            v163 = false;\n                                                        }\n                                                        unsigned char v166 = v162;\n                                                        v58 = 1;\n                                                        if ((v160 >= v166 && !v163) != v160 < v166) {\n                                                            char * str = (char *)v45; // 0x40cc67\n                                                            v58 = 1;\n                                                            if (strcmp(str, \"ignore\") != 0) {\n                                                                // 0x40cc75\n                                                                v58 = v41 == NULL == strcmp(str, \"none\") == 0;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                // 0x40cc90\n                v33 = *v43;\n                *v32 = *v32 & -2 | v58;\n                char * str2 = (char *)v33; // 0x40cca7\n                v19 = 1;\n                if (strchr(str2, 58) == NULL) {\n                    // 0x40cd48\n                    v23 = *str2;\n                    if (v23 == 47) {\n                        // 0x40cde0\n                        v3 = true;\n                        v37 = false;\n                        if (*(char *)(v33 + 1) != 47) {\n                            goto lab___crit_edge183;\n                        } else {\n                            int64_t v167; // 0x40c670\n                            unsigned char v168 = *(char *)v167; // 0x40cdf8\n                            int64_t v169; // 0x40c670\n                            char v170 = *(char *)v169; // 0x40cdf8\n                            while (v168 == v170) {\n                                // 0x40cdeb\n                                int64_t v171; // 0x40c670\n                                int64_t v172 = v171;\n                                int64_t v173 = v172 - 1; // 0x40cdf8\n                                int64_t v174; // 0x40c670\n                                v169 = v174 + v29;\n                                int64_t v175; // 0x40c670\n                                v167 = v175 + v29;\n                                v171 = v173;\n                                char v176 = v168; // 0x40cdf8\n                                bool v177 = true; // 0x40cdf8\n                                if (v173 == 0) {\n                                    // break -> \n                                    break;\n                                }\n                                v175 = v167;\n                                v174 = v169;\n                                v168 = *(char *)v175;\n                                v170 = *(char *)v174;\n                                v176 = v170;\n                                v177 = false;\n                            }\n                            unsigned char v178 = v170;\n                            v19 = 1;\n                            int64_t v179 = v45; // 0x40ce01\n                            int64_t v180 = 5; // 0x40ce01\n                            if ((v168 >= v178 && true) == v168 < v178) {\n                                goto lab_0x40ccba;\n                            } else {\n                                int64_t v181 = v179;\n                                int64_t v182 = (int64_t)\"cifs\";\n                                unsigned char v183 = *(char *)v181; // 0x40ce14\n                                char v184 = *(char *)v182; // 0x40ce14\n                                char v185 = v184; // 0x40ce14\n                                bool v186 = false; // 0x40ce14\n                                while (v183 == v184) {\n                                    int64_t v187 = v180 - 1; // 0x40ce14\n                                    int64_t v188 = v182 + v29; // 0x40ce14\n                                    v179 = v181 + v29;\n                                    v180 = v187;\n                                    v185 = v183;\n                                    v186 = true;\n                                    if (v187 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v181 = v179;\n                                    v182 = v188;\n                                    v183 = *(char *)v181;\n                                    v184 = *(char *)v182;\n                                    v185 = v184;\n                                    v186 = false;\n                                }\n                                unsigned char v189 = v185;\n                                v19 = 1;\n                                if ((v183 >= v189 && !v186) == v183 < v189) {\n                                    goto lab_0x40ccba;\n                                } else {\n                                    goto lab_0x40cd52;\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x40cd52;\n                    }\n                } else {\n                    goto lab_0x40ccba;\n                }\n            }\n        }\n      lab_0x40cce8:\n        // 0x40cce8\n        v9 = v12;\n        v13 = v12;\n        if (endmntent(v30) != 0) {\n            goto lab_0x40c91d;\n        } else {\n            goto lab_0x40ccf8;\n        }\n    } else {\n        int64_t v190 = &v20; // 0x40c6a2\n        int64_t v191 = v2 + 88; // 0x40c6c8\n        int64_t v192 = v2 + 80; // 0x40c6cd\n        v34 = (char **)v192;\n        v21 = (int32_t *)v191;\n        if (__getdelim(v34, v21, 10, file) == -1) {\n            // 0x40c696\n            v5 = (int64_t *)v192;\n            v8 = v190;\n        } else {\n            int64_t v193 = v2 + 31; // 0x40c6ea\n            int64_t * v194 = (int64_t *)(v2 - 16); // 0x40c6ef\n            int64_t v195 = v2 + 44; // 0x40c6f0\n            int64_t v196 = v2 + 40; // 0x40c6f6\n            v27 = (int64_t *)v192;\n            int64_t v197 = v2 + 64; // 0x40c708\n            int64_t v198 = v2 + 32; // 0x40c712\n            int32_t * v199 = (int32_t *)(v2 + 36);\n            int32_t * v200 = (int32_t *)(v2 + 68);\n            int32_t * v201 = (int32_t *)v195;\n            int64_t v202 = v2 + 60;\n            int64_t v203 = v2 + 56;\n            int64_t v204 = v2 + 52;\n            int64_t v205 = v2 + 48;\n            v28 = v26 ? -1 : 1;\n            int32_t * v206 = (int32_t *)v203;\n            int32_t * v207 = (int32_t *)v196;\n            int32_t * v208 = (int32_t *)v197;\n            v6 = v190;\n            while (true) {\n              lab_0x40c6e1:\n                // 0x40c6e1\n                v7 = v6;\n                int64_t str4; // 0x40c737\n                while (true) {\n                    // 0x40c6e1\n                    *v194 = v193;\n                    *(int64_t *)(v2 - 24) = v195;\n                    *(int64_t *)(v2 - 32) = v196;\n                    int64_t str3 = *v27; // 0x40c6fc\n                    if ((sscanf((char *)str3, \"%*u %*u %u:%u %n%*s%n %n%*s%n%c\", (int64_t *)v198, v199, (int64_t *)v197, v200) & -5) == 3) {\n                        // 0x40c728\n                        str4 = function_40d2b0(*v27 + (int64_t)*v201, \" - \");\n                        if (str4 != 0) {\n                            // 0x40c748\n                            *v194 = v193;\n                            if ((sscanf((char *)str4, \" - %n%*s%n %n%*s%n %c\", (int32_t **)v205, (int64_t *)v204, (char **)v203, (int32_t **)v202) & -5) == 1) {\n                                // break -> 0x40c77e\n                                break;\n                            }\n                        }\n                    }\n                    // 0x40c6c0\n                    v5 = v27;\n                    v8 = v7;\n                    if (__getdelim(v34, v21, 10, file) == -1) {\n                        // break (via goto) -> 0x40c8f8\n                        goto lab_0x40c8f8_2;\n                    }\n                }\n                // 0x40c77e\n                *(char *)(*v27 + (int64_t)*v200) = 0;\n                int64_t v209 = *v27; // 0x40c792\n                *(char *)(v209 + (int64_t)*v201) = 0;\n                *(char *)(str4 + (int64_t)*(int32_t *)v204) = 0;\n                *(char *)(str4 + (int64_t)*(int32_t *)v202) = 0;\n                function_40c590(str4 + (int64_t)*v206, (int64_t)\" - %n%*s%n %n%*s%n %c\", v209);\n                function_40c590(*v27 + (int64_t)*v207, (int64_t)\" - %n%*s%n %n%*s%n %c\", v209);\n                function_40c590(*v27 + (int64_t)*v208, (int64_t)\" - %n%*s%n %n%*s%n %c\", v209);\n                v35 = function_40a560(56);\n                int64_t v210 = function_40a790(str4 + (int64_t)*v206); // 0x40c7f4\n                int64_t * v211 = (int64_t *)v35; // 0x40c803\n                *v211 = v210;\n                *(int64_t *)(v35 + 8) = function_40a790(*v27 + (int64_t)*v207);\n                *(int64_t *)(v35 + 16) = function_40a790(*v27 + (int64_t)*v208);\n                int64_t v212 = function_40a790(str4 + (int64_t)*(int32_t *)v205); // 0x40c82a\n                uint32_t v213 = *(int32_t *)v198; // 0x40c82f\n                *(int64_t *)(v35 + 24) = v212;\n                uint32_t v214 = *v199; // 0x40c849\n                int64_t v215 = 0x100000000 * (int64_t)v213; // 0x40c850\n                v22 = (char *)(v35 + 40);\n                *v22 = *v22 | 4;\n                int64_t v216 = v213 < 0xfffff001 ? v215 : v215 + 0xfffffffffff; // 0x40c85c\n                int64_t v217 = v216 | (int64_t)(256 * v213 & 0xfff00) | (int64_t)(v214 % 256) | 0x1000 * (int64_t)v214 & 0xffffff00000; // 0x40c87d\n                int64_t v218 = 7; // 0x40c880\n                int64_t v219 = v212;\n                int64_t v220 = (int64_t)\"autofs\";\n                unsigned char v221 = *(char *)v219; // 0x40c880\n                char v222 = *(char *)v220; // 0x40c880\n                char v223 = v222; // 0x40c880\n                bool v224 = false; // 0x40c880\n                while (v221 == v222) {\n                    v218--;\n                    int64_t v225 = v220 + v28; // 0x40c880\n                    int64_t v226 = v219 + v28; // 0x40c880\n                    v223 = v221;\n                    v224 = true;\n                    if (v218 == 0) {\n                        // break -> \n                        break;\n                    }\n                    v219 = v226;\n                    v220 = v225;\n                    v221 = *(char *)v219;\n                    v222 = *(char *)v220;\n                    v223 = v222;\n                    v224 = false;\n                }\n                unsigned char v227 = v223;\n                *(int64_t *)(v35 + 32) = v217;\n                int64_t v228 = v212; // 0x40c88d\n                int64_t v229 = 5; // 0x40c88d\n                char v230 = 1; // 0x40c88d\n                if ((v221 >= v227 && !v224) != v221 < v227) {\n                    int64_t v231 = v228;\n                    int64_t v232 = (int64_t)\"proc\";\n                    unsigned char v233 = *(char *)v231; // 0x40c89c\n                    char v234 = *(char *)v232; // 0x40c89c\n                    char v235 = v234; // 0x40c89c\n                    bool v236 = false; // 0x40c89c\n                    while (v233 == v234) {\n                        int64_t v237 = v229 - 1; // 0x40c89c\n                        int64_t v238 = v232 + v28; // 0x40c89c\n                        v228 = v231 + v28;\n                        v229 = v237;\n                        v235 = v233;\n                        v236 = true;\n                        if (v237 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v231 = v228;\n                        v232 = v238;\n                        v233 = *(char *)v231;\n                        v234 = *(char *)v232;\n                        v235 = v234;\n                        v236 = false;\n                    }\n                    unsigned char v239 = v235;\n                    v230 = 1;\n                    int64_t v240 = v212; // 0x40c8a5\n                    int64_t v241 = 6; // 0x40c8a5\n                    if ((v233 >= v239 && !v236) != v233 < v239) {\n                        int64_t v242 = v240;\n                        int64_t v243 = (int64_t)\"subfs\";\n                        unsigned char v244 = *(char *)v242; // 0x40c94d\n                        char v245 = *(char *)v243; // 0x40c94d\n                        char v246 = v245; // 0x40c94d\n                        bool v247 = false; // 0x40c94d\n                        while (v244 == v245) {\n                            int64_t v248 = v241 - 1; // 0x40c94d\n                            int64_t v249 = v243 + v28; // 0x40c94d\n                            v240 = v242 + v28;\n                            v241 = v248;\n                            v246 = v244;\n                            v247 = true;\n                            if (v248 == 0) {\n                                // break -> \n                                break;\n                            }\n                            v242 = v240;\n                            v243 = v249;\n                            v244 = *(char *)v242;\n                            v245 = *(char *)v243;\n                            v246 = v245;\n                            v247 = false;\n                        }\n                        unsigned char v250 = v246;\n                        v230 = 1;\n                        int64_t v251 = v212; // 0x40c956\n                        int64_t v252 = 8; // 0x40c956\n                        if ((v244 >= v250 && !v247) != v244 < v250) {\n                            int64_t v253 = v251;\n                            int64_t v254 = (int64_t)\"debugfs\";\n                            unsigned char v255 = *(char *)v253; // 0x40c969\n                            char v256 = *(char *)v254; // 0x40c969\n                            char v257 = v256; // 0x40c969\n                            bool v258 = false; // 0x40c969\n                            while (v255 == v256) {\n                                int64_t v259 = v252 - 1; // 0x40c969\n                                int64_t v260 = v254 + v28; // 0x40c969\n                                v251 = v253 + v28;\n                                v252 = v259;\n                                v257 = v255;\n                                v258 = true;\n                                if (v259 == 0) {\n                                    // break -> \n                                    break;\n                                }\n                                v253 = v251;\n                                v254 = v260;\n                                v255 = *(char *)v253;\n                                v256 = *(char *)v254;\n                                v257 = v256;\n                                v258 = false;\n                            }\n                            unsigned char v261 = v257;\n                            v230 = 1;\n                            int64_t v262 = v212; // 0x40c972\n                            int64_t v263 = 7; // 0x40c972\n                            if ((v255 >= v261 && !v258) != v255 < v261) {\n                                int64_t v264 = v262;\n                                int64_t v265 = (int64_t)\"devpts\";\n                                unsigned char v266 = *(char *)v264; // 0x40c985\n                                char v267 = *(char *)v265; // 0x40c985\n                                char v268 = v267; // 0x40c985\n                                bool v269 = false; // 0x40c985\n                                while (v266 == v267) {\n                                    int64_t v270 = v263 - 1; // 0x40c985\n                                    int64_t v271 = v265 + v28; // 0x40c985\n                                    v262 = v264 + v28;\n                                    v263 = v270;\n                                    v268 = v266;\n                                    v269 = true;\n                                    if (v270 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v264 = v262;\n                                    v265 = v271;\n                                    v266 = *(char *)v264;\n                                    v267 = *(char *)v265;\n                                    v268 = v267;\n                                    v269 = false;\n                                }\n                                unsigned char v272 = v268;\n                                v230 = 1;\n                                int64_t v273 = v212; // 0x40c98e\n                                int64_t v274 = 8; // 0x40c98e\n                                if ((v266 >= v272 && !v269) != v266 < v272) {\n                                    int64_t v275 = v273;\n                                    int64_t v276 = (int64_t)\"fusectl\";\n                                    unsigned char v277 = *(char *)v275; // 0x40c9a1\n                                    char v278 = *(char *)v276; // 0x40c9a1\n                                    char v279 = v278; // 0x40c9a1\n                                    bool v280 = false; // 0x40c9a1\n                                    while (v277 == v278) {\n                                        int64_t v281 = v274 - 1; // 0x40c9a1\n                                        int64_t v282 = v276 + v28; // 0x40c9a1\n                                        v273 = v275 + v28;\n                                        v274 = v281;\n                                        v279 = v277;\n                                        v280 = true;\n                                        if (v281 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v275 = v273;\n                                        v276 = v282;\n                                        v277 = *(char *)v275;\n                                        v278 = *(char *)v276;\n                                        v279 = v278;\n                                        v280 = false;\n                                    }\n                                    unsigned char v283 = v279;\n                                    v230 = 1;\n                                    int64_t v284 = v212; // 0x40c9aa\n                                    int64_t v285 = 7; // 0x40c9aa\n                                    if ((v277 >= v283 && !v280) != v277 < v283) {\n                                        int64_t v286 = v284;\n                                        int64_t v287 = (int64_t)\"mqueue\";\n                                        unsigned char v288 = *(char *)v286; // 0x40c9bd\n                                        char v289 = *(char *)v287; // 0x40c9bd\n                                        char v290 = v289; // 0x40c9bd\n                                        bool v291 = false; // 0x40c9bd\n                                        while (v288 == v289) {\n                                            int64_t v292 = v285 - 1; // 0x40c9bd\n                                            int64_t v293 = v287 + v28; // 0x40c9bd\n                                            v284 = v286 + v28;\n                                            v285 = v292;\n                                            v290 = v288;\n                                            v291 = true;\n                                            if (v292 == 0) {\n                                                // break -> \n                                                break;\n                                            }\n                                            v286 = v284;\n                                            v287 = v293;\n                                            v288 = *(char *)v286;\n                                            v289 = *(char *)v287;\n                                            v290 = v289;\n                                            v291 = false;\n                                        }\n                                        unsigned char v294 = v290;\n                                        v230 = 1;\n                                        int64_t v295 = v212; // 0x40c9c6\n                                        int64_t v296 = 11; // 0x40c9c6\n                                        if ((v288 >= v294 && !v291) != v288 < v294) {\n                                            int64_t v297 = v295;\n                                            int64_t v298 = (int64_t)\"rpc_pipefs\";\n                                            unsigned char v299 = *(char *)v297; // 0x40c9d9\n                                            char v300 = *(char *)v298; // 0x40c9d9\n                                            char v301 = v300; // 0x40c9d9\n                                            bool v302 = false; // 0x40c9d9\n                                            while (v299 == v300) {\n                                                int64_t v303 = v296 - 1; // 0x40c9d9\n                                                int64_t v304 = v298 + v28; // 0x40c9d9\n                                                v295 = v297 + v28;\n                                                v296 = v303;\n                                                v301 = v299;\n                                                v302 = true;\n                                                if (v303 == 0) {\n                                                    // break -> \n                                                    break;\n                                                }\n                                                v297 = v295;\n                                                v298 = v304;\n                                                v299 = *(char *)v297;\n                                                v300 = *(char *)v298;\n                                                v301 = v300;\n                                                v302 = false;\n                                            }\n                                            unsigned char v305 = v301;\n                                            v230 = 1;\n                                            int64_t v306 = v212; // 0x40c9e2\n                                            int64_t v307 = 6; // 0x40c9e2\n                                            if ((v299 >= v305 && !v302) != v299 < v305) {\n                                                int64_t v308 = v306;\n                                                int64_t v309 = (int64_t)\"sysfs\";\n                                                unsigned char v310 = *(char *)v308; // 0x40c9f5\n                                                char v311 = *(char *)v309; // 0x40c9f5\n                                                char v312 = v311; // 0x40c9f5\n                                                bool v313 = false; // 0x40c9f5\n                                                while (v310 == v311) {\n                                                    int64_t v314 = v307 - 1; // 0x40c9f5\n                                                    int64_t v315 = v309 + v28; // 0x40c9f5\n                                                    v306 = v308 + v28;\n                                                    v307 = v314;\n                                                    v312 = v310;\n                                                    v313 = true;\n                                                    if (v314 == 0) {\n                                                        // break -> \n                                                        break;\n                                                    }\n                                                    v308 = v306;\n                                                    v309 = v315;\n                                                    v310 = *(char *)v308;\n                                                    v311 = *(char *)v309;\n                                                    v312 = v311;\n                                                    v313 = false;\n                                                }\n                                                unsigned char v316 = v312;\n                                                v230 = 1;\n                                                int64_t v317 = v212; // 0x40c9fe\n                                                int64_t v318 = 6; // 0x40c9fe\n                                                if ((v310 >= v316 && !v313) != v310 < v316) {\n                                                    int64_t v319 = v317;\n                                                    int64_t v320 = (int64_t)\"devfs\";\n                                                    unsigned char v321 = *(char *)v319; // 0x40ca11\n                                                    char v322 = *(char *)v320; // 0x40ca11\n                                                    char v323 = v322; // 0x40ca11\n                                                    bool v324 = false; // 0x40ca11\n                                                    while (v321 == v322) {\n                                                        int64_t v325 = v318 - 1; // 0x40ca11\n                                                        int64_t v326 = v320 + v28; // 0x40ca11\n                                                        v317 = v319 + v28;\n                                                        v318 = v325;\n                                                        v323 = v321;\n                                                        v324 = true;\n                                                        if (v325 == 0) {\n                                                            // break -> \n                                                            break;\n                                                        }\n                                                        v319 = v317;\n                                                        v320 = v326;\n                                                        v321 = *(char *)v319;\n                                                        v322 = *(char *)v320;\n                                                        v323 = v322;\n                                                        v324 = false;\n                                                    }\n                                                    unsigned char v327 = v323;\n                                                    v230 = 1;\n                                                    int64_t v328 = v212; // 0x40ca1a\n                                                    int64_t v329 = 7; // 0x40ca1a\n                                                    if ((v321 >= v327 && !v324) != v321 < v327) {\n                                                        int64_t v330 = v328;\n                                                        int64_t v331 = (int64_t)\"kernfs\";\n                                                        unsigned char v332 = *(char *)v330; // 0x40ca2d\n                                                        char v333 = *(char *)v331; // 0x40ca2d\n                                                        char v334 = v333; // 0x40ca2d\n                                                        bool v335 = false; // 0x40ca2d\n                                                        while (v332 == v333) {\n                                                            int64_t v336 = v329 - 1; // 0x40ca2d\n                                                            int64_t v337 = v331 + v28; // 0x40ca2d\n                                                            v328 = v330 + v28;\n                                                            v329 = v336;\n                                                            v334 = v332;\n                                                            v335 = true;\n                                                            if (v336 == 0) {\n                                                                // break -> \n                                                                break;\n                                                            }\n                                                            v330 = v328;\n                                                            v331 = v337;\n                                                            v332 = *(char *)v330;\n                                                            v333 = *(char *)v331;\n                                                            v334 = v333;\n                                                            v335 = false;\n                                                        }\n                                                        unsigned char v338 = v334;\n                                                        v230 = 1;\n                                                        if ((v332 >= v338 && !v335) != v332 < v338) {\n                                                            char * str5 = (char *)v212; // 0x40ca44\n                                                            v230 = 1;\n                                                            if (strcmp(str5, \"ignore\") != 0) {\n                                                                // 0x40ca51\n                                                                v230 = strcmp(str5, \"none\") == 0;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                // 0x40c8ab\n                v24 = *v211;\n                *v22 = *v22 & -2 | v230;\n                char * str6 = (char *)v24; // 0x40c8c3\n                v18 = 1;\n                if (strchr(str6, 58) == NULL) {\n                    // 0x40ca70\n                    v25 = *str6;\n                    if (v25 == 47) {\n                        // 0x40cd70\n                        v4 = true;\n                        v36 = false;\n                        if (*(char *)(v24 + 1) != 47) {\n                            goto lab___crit_edge191;\n                        } else {\n                            int64_t v339; // 0x40c670\n                            unsigned char v340 = *(char *)v339; // 0x40cd88\n                            int64_t v341; // 0x40c670\n                            char v342 = *(char *)v341; // 0x40cd88\n                            while (v340 == v342) {\n                                // 0x40cd7b\n                                int64_t v343; // 0x40c670\n                                int64_t v344 = v343;\n                                int64_t v345 = v344 - 1; // 0x40cd88\n                                int64_t v346; // 0x40c670\n                                v341 = v346 + v28;\n                                int64_t v347; // 0x40c670\n                                v339 = v347 + v28;\n                                v343 = v345;\n                                char v348 = v340; // 0x40cd88\n                                bool v349 = true; // 0x40cd88\n                                if (v345 == 0) {\n                                    // break -> \n                                    break;\n                                }\n                                v347 = v339;\n                                v346 = v341;\n                                v340 = *(char *)v347;\n                                v342 = *(char *)v346;\n                                v348 = v342;\n                                v349 = false;\n                            }\n                            unsigned char v350 = v342;\n                            v18 = 1;\n                            int64_t v351 = v212; // 0x40cd91\n                            int64_t v352 = 5; // 0x40cd91\n                            if ((v340 >= v350 && true) == v340 < v350) {\n                                goto lab_0x40c8d6;\n                            } else {\n                                int64_t v353 = v351;\n                                int64_t v354 = (int64_t)\"cifs\";\n                                unsigned char v355 = *(char *)v353; // 0x40cda4\n                                char v356 = *(char *)v354; // 0x40cda4\n                                char v357 = v356; // 0x40cda4\n                                bool v358 = false; // 0x40cda4\n                                while (v355 == v356) {\n                                    int64_t v359 = v352 - 1; // 0x40cda4\n                                    int64_t v360 = v354 + v28; // 0x40cda4\n                                    v351 = v353 + v28;\n                                    v352 = v359;\n                                    v357 = v355;\n                                    v358 = true;\n                                    if (v359 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                    v353 = v351;\n                                    v354 = v360;\n                                    v355 = *(char *)v353;\n                                    v356 = *(char *)v354;\n                                    v357 = v356;\n                                    v358 = false;\n                                }\n                                unsigned char v361 = v357;\n                                v18 = 1;\n                                if ((v355 >= v361 && !v358) == v355 < v361) {\n                                    goto lab_0x40c8d6;\n                                } else {\n                                    goto lab_0x40ca7b;\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x40ca7b;\n                    }\n                } else {\n                    goto lab_0x40c8d6;\n                }\n            }\n        }\n      lab_0x40c8f8_2:;\n        int64_t v362 = (int64_t)file; // 0x40c688\n        free((int64_t *)*v5);\n        if ((*(char *)file & 32) != 0) {\n            int32_t * v363 = __errno_location(); // 0x40cdc0\n            int32_t v364 = *v363; // 0x40cdc8\n            function_40e240(v362, v191);\n            *v363 = v364;\n            v14 = v8;\n            v15 = v363;\n            v16 = v364;\n            goto lab_0x40cd03;\n        } else {\n            // 0x40c90c\n            v9 = v8;\n            v13 = v8;\n            if ((int32_t)function_40e240(v362, v191) == -1) {\n                goto lab_0x40ccf8;\n            } else {\n                goto lab_0x40c91d;\n            }\n        }\n    }\n  lab_0x40c8d6:\n    // 0x40c8d6\n    *v22 = *v22 & -3 | 2 * v18;\n    *(int64_t *)v7 = v35;\n    int64_t v365 = v35 + 48; // 0x40c8e8\n    v6 = v365;\n    v5 = v27;\n    v8 = v365;\n    if (__getdelim(v34, v21, 10, file) == -1) {\n        // break -> 0x40c8f8\n        goto lab_0x40c8f8_2;\n    }\n    goto lab_0x40c6e1;\n  lab_0x40ca7b:;\n    bool v366 = v25 > 45; // 0x40ca88\n    int64_t v367 = (int64_t)\"-hosts\"; // 0x40ca88\n    int64_t v368 = v24; // 0x40ca88\n    v4 = v25 > 45;\n    v36 = false;\n    if (v25 == 45) {\n        int64_t v369 = 6; // 0x40c670\n        v4 = v366;\n        v36 = true;\n        while (v369 != 0) {\n            int64_t v370 = v368 + v28; // 0x40ca88\n            int64_t v371 = v367 + v28; // 0x40ca88\n            unsigned char v372 = *(char *)v370;\n            unsigned char v373 = *(char *)v371; // 0x40ca88\n            v369--;\n            v366 = v373 < v372;\n            v367 = v371;\n            v368 = v370;\n            v4 = v373 < v372;\n            v36 = false;\n            if (v373 != v372) {\n                // break -> ._crit_edge191\n                break;\n            }\n            v4 = v366;\n            v36 = true;\n        }\n    }\n    goto lab___crit_edge191;\n  lab___crit_edge191:;\n    bool v374 = v4;\n    v18 = !((v374 | v36)) == v374;\n    goto lab_0x40c8d6;\n  lab_0x40ccba:\n    // 0x40ccba\n    *(int64_t *)(v31 + 32) = -1;\n    *v32 = *v32 & -3 | 2 * v19;\n    *(int64_t *)v11 = v31;\n    int64_t v375 = v31 + 48; // 0x40ccd3\n    struct mntent * v376 = getmntent(v30); // 0x40ccd7\n    v17 = v376;\n    v10 = v375;\n    v12 = v375;\n    if (v376 == NULL) {\n        // break -> 0x40cce8\n        goto lab_0x40cce8;\n    }\n    goto lab_0x40cae0;\n  lab_0x40cd52:;\n    bool v377 = v23 > 45; // 0x40cd5f\n    int64_t v378 = (int64_t)\"-hosts\"; // 0x40cd5f\n    int64_t v379 = v33; // 0x40cd5f\n    v3 = v23 > 45;\n    v37 = false;\n    if (v23 == 45) {\n        int64_t v380 = 6; // 0x40c670\n        v3 = v377;\n        v37 = true;\n        while (v380 != 0) {\n            int64_t v381 = v379 + v29; // 0x40cd5f\n            int64_t v382 = v378 + v29; // 0x40cd5f\n            unsigned char v383 = *(char *)v381;\n            unsigned char v384 = *(char *)v382; // 0x40cd5f\n            v380--;\n            v377 = v384 < v383;\n            v378 = v382;\n            v379 = v381;\n            v3 = v384 < v383;\n            v37 = false;\n            if (v384 != v383) {\n                // break -> ._crit_edge183\n                break;\n            }\n            v3 = v377;\n            v37 = true;\n        }\n    }\n    goto lab___crit_edge183;\n  lab___crit_edge183:;\n    bool v385 = v3;\n    v19 = !((v385 | v37)) == v385;\n    goto lab_0x40ccba;\n  lab_0x40c91d:\n    // 0x40c91d\n    *(int64_t *)v9 = 0;\n    // 0x40c92a\n    return *(int64_t *)(v2 + 72);\n  lab_0x40ccf8:;\n    int32_t * v386 = __errno_location(); // 0x40ccf8\n    v14 = v13;\n    v15 = v386;\n    v16 = *v386;\n    goto lab_0x40cd03;\n  lab_0x40cd03:\n    // 0x40cd03\n    *(int64_t *)v14 = 0;\n    int64_t * v387 = (int64_t *)(v2 + 72); // 0x40cd0b\n    int64_t v388 = *v387; // 0x40cd0b\n    if (v388 == 0) {\n        // 0x40cd2e\n        *v15 = v16;\n        return 0;\n    }\n    int64_t v389 = *(int64_t *)(v388 + 48); // 0x40cd18\n    function_40c620(v388);\n    *v387 = v389;\n    int64_t v390 = v389; // 0x40cd2c\n    while (v389 != 0) {\n        // 0x40cd18\n        v389 = *(int64_t *)(v390 + 48);\n        function_40c620(v390);\n        *v387 = v389;\n        v390 = v389;\n    }\n    // 0x40cd2e\n    *v15 = v16;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40ce30",
            "funcStartAddr": "40ce30",
            "funcEndAddr": "40cf5e",
            "decompiledFuncCode": "int64_t function_40ce30(int64_t a1, uint64_t a2, int64_t * a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 1; // 0x40ce57\n    int64_t v2 = 0; // 0x40ce57\n    int64_t v3 = -1; // 0x40ce57\n    int64_t v4; // 0x40ce30\n    int64_t v5; // 0x40ce30\n    int64_t v6; // 0x40ce30\n    if (a2 <= 1) {\n        // 0x40ce83\n        *a3 = 1;\n        v5 = -1;\n        v4 = -1;\n        v6 = 1;\n    } else {\n        int64_t v7; // 0x40ce30\n        int64_t v8; // 0x40ce30\n        int64_t v9; // 0x40ce30\n        int64_t v10; // 0x40ce30\n        while (true) {\n            // 0x40ce59\n            v9 = v3;\n            int64_t v11 = v9 + a1; // 0x40ce59\n            char * v12 = (char *)(v11 + 1);\n            int64_t v13 = 1;\n            unsigned char v14 = *(char *)(v13 + v11); // 0x40ce5d\n            unsigned char v15 = *(char *)(v1 + a1); // 0x40ce62\n            int64_t v16 = v1; // 0x40ce65\n            int64_t v17 = v1; // 0x40ce65\n            int64_t v18 = v13; // 0x40ce65\n            int64_t v19 = v2; // 0x40ce65\n            int64_t v20 = 1; // 0x40ce65\n            char v21 = v14; // 0x40ce65\n            char v22 = v15; // 0x40ce65\n            unsigned char v23; // 0x40ce5d\n            unsigned char v24; // 0x40ce62\n            int64_t v25; // 0x40ce77\n            if (v15 < v14) {\n                v10 = v16;\n                v25 = v10 + 1;\n                if (v25 >= a2) {\n                    // break (via goto) -> 0x40ce83\n                    goto lab_0x40ce83;\n                }\n                // 0x40ce59\n                v23 = *v12;\n                v24 = *(char *)(v25 + a1);\n                while (v24 < v23) {\n                    // 0x40ce6b\n                    v10 = v25;\n                    v25 = v10 + 1;\n                    if (v25 >= a2) {\n                        // break (via goto) -> 0x40ce83\n                        goto lab_0x40ce83;\n                    }\n                    // 0x40ce59\n                    v23 = *v12;\n                    v24 = *(char *)(v25 + a1);\n                }\n                // 0x40cee8\n                v17 = v25;\n                v18 = 1;\n                v19 = v10;\n                v20 = v10 - v9;\n                v21 = v23;\n                v22 = v24;\n            }\n            // 0x40cee8\n            v3 = v19;\n            while (v22 == v21) {\n                int64_t v26 = v18;\n                v13 = v26 == v20 ? 1 : v26 + 1;\n                int64_t v27 = v26 == v20 ? v17 : v3;\n                int64_t v28 = v27 + v13; // 0x40ce50\n                v8 = v9;\n                v7 = v20;\n                if (v28 >= a2) {\n                    goto lab_0x40ce83_3;\n                }\n                v14 = *(char *)(v13 + v11);\n                v15 = *(char *)(v28 + a1);\n                v16 = v28;\n                v17 = v28;\n                v18 = v13;\n                v19 = v27;\n                v21 = v14;\n                v22 = v15;\n                if (v15 < v14) {\n                    v10 = v16;\n                    v25 = v10 + 1;\n                    if (v25 >= a2) {\n                        // break (via goto) -> 0x40ce83\n                        goto lab_0x40ce83;\n                    }\n                    // 0x40ce59\n                    v23 = *v12;\n                    v24 = *(char *)(v25 + a1);\n                    while (v24 < v23) {\n                        // 0x40ce6b\n                        v10 = v25;\n                        v25 = v10 + 1;\n                        if (v25 >= a2) {\n                            // break (via goto) -> 0x40ce83\n                            goto lab_0x40ce83;\n                        }\n                        // 0x40ce59\n                        v23 = *v12;\n                        v24 = *(char *)(v25 + a1);\n                    }\n                    // 0x40cee8\n                    v17 = v25;\n                    v18 = 1;\n                    v19 = v10;\n                    v20 = v10 - v9;\n                    v21 = v23;\n                    v22 = v24;\n                }\n                // 0x40cee8\n                v3 = v19;\n            }\n            // 0x40ceea\n            v1 = v3 + 2;\n            v2 = v3 + 1;\n            v8 = v3;\n            v7 = 1;\n            if (v1 >= a2) {\n                goto lab_0x40ce83_3;\n            }\n        }\n      lab_0x40ce83:\n        // 0x40ce83\n        v8 = v9;\n        v7 = v10 - v9;\n      lab_0x40ce83_3:\n        // 0x40ce83\n        *a3 = v7;\n        int64_t v29 = 1; // 0x40cea7\n        int64_t v30 = -1; // 0x40cea7\n        int64_t v31 = 0; // 0x40cea7\n        v5 = v8;\n        v4 = -1;\n        v6 = 1;\n        if (a2 > 1) {\n            int64_t v32; // 0x40ce30\n            int64_t v33; // 0x40ce30\n            while (true) {\n                // 0x40cea9\n                v32 = v30;\n                int64_t v34 = v32 + a1; // 0x40cea9\n                char * v35 = (char *)(v34 + 1);\n                int64_t v36 = 1;\n                unsigned char v37 = *(char *)(v36 + v34); // 0x40cead\n                unsigned char v38 = *(char *)(v29 + a1); // 0x40ceb2\n                int64_t v39 = v29; // 0x40ceb6\n                int64_t v40 = v29; // 0x40ceb6\n                int64_t v41 = 1; // 0x40ceb6\n                int64_t v42 = v36; // 0x40ceb6\n                int64_t v43 = v31; // 0x40ceb6\n                char v44 = v37; // 0x40ceb6\n                char v45 = v38; // 0x40ceb6\n                int64_t v46; // 0x40cec4\n                unsigned char v47; // 0x40cead\n                unsigned char v48; // 0x40ceb2\n                if (v38 > v37) {\n                    v33 = v39;\n                    v46 = v33 + 1;\n                    if (v46 >= a2) {\n                        // break (via goto) -> 0x40ced0\n                        goto lab_0x40ced0;\n                    }\n                    // 0x40cea9\n                    v47 = *v35;\n                    v48 = *(char *)(v46 + a1);\n                    while (v48 > v47) {\n                        // 0x40ceb8\n                        v33 = v46;\n                        v46 = v33 + 1;\n                        if (v46 >= a2) {\n                            // break (via goto) -> 0x40ced0\n                            goto lab_0x40ced0;\n                        }\n                        // 0x40cea9\n                        v47 = *v35;\n                        v48 = *(char *)(v46 + a1);\n                    }\n                    // 0x40cf08\n                    v40 = v46;\n                    v41 = v33 - v32;\n                    v42 = 1;\n                    v43 = v33;\n                    v44 = v47;\n                    v45 = v48;\n                }\n                int64_t v49 = v43;\n                while (v45 == v44) {\n                    int64_t v50 = v42;\n                    v36 = v50 == v41 ? 1 : v50 + 1;\n                    int64_t v51 = v50 == v41 ? v40 : v49;\n                    int64_t v52 = v51 + v36; // 0x40cea0\n                    v5 = v8;\n                    v4 = v32;\n                    v6 = v41;\n                    if (v52 >= a2) {\n                        goto lab_0x40ced0_3;\n                    }\n                    v37 = *(char *)(v36 + v34);\n                    v38 = *(char *)(v52 + a1);\n                    v39 = v52;\n                    v40 = v52;\n                    v42 = v36;\n                    v43 = v51;\n                    v44 = v37;\n                    v45 = v38;\n                    if (v38 > v37) {\n                        v33 = v39;\n                        v46 = v33 + 1;\n                        if (v46 >= a2) {\n                            // break (via goto) -> 0x40ced0\n                            goto lab_0x40ced0;\n                        }\n                        // 0x40cea9\n                        v47 = *v35;\n                        v48 = *(char *)(v46 + a1);\n                        while (v48 > v47) {\n                            // 0x40ceb8\n                            v33 = v46;\n                            v46 = v33 + 1;\n                            if (v46 >= a2) {\n                                // break (via goto) -> 0x40ced0\n                                goto lab_0x40ced0;\n                            }\n                            // 0x40cea9\n                            v47 = *v35;\n                            v48 = *(char *)(v46 + a1);\n                        }\n                        // 0x40cf08\n                        v40 = v46;\n                        v41 = v33 - v32;\n                        v42 = 1;\n                        v43 = v33;\n                        v44 = v47;\n                        v45 = v48;\n                    }\n                    // 0x40cf08\n                    v49 = v43;\n                }\n                int64_t v53 = v49 + 2; // 0x40cea0\n                v29 = v53;\n                v30 = v49;\n                v31 = v49 + 1;\n                v5 = v8;\n                v4 = v49;\n                v6 = 1;\n                if (v53 >= a2) {\n                    goto lab_0x40ced0_3;\n                }\n            }\n          lab_0x40ced0:\n            // 0x40ced0\n            v5 = v8;\n            v4 = v32;\n            v6 = v33 - v32;\n        }\n    }\n  lab_0x40ced0_3:;\n    int64_t v54 = v4 + 1; // 0x40ced0\n    int64_t v55 = v5 + 1; // 0x40ced4\n    int64_t result = v55; // 0x40cedb\n    if (v54 >= v55) {\n        // 0x40cedd\n        *a3 = v6;\n        result = v54;\n    }\n    // 0x40cee3\n    return result;\n}\n"
        },
        {
            "funcName": "function_40cf60",
            "funcStartAddr": "40cf60",
            "funcEndAddr": "40d2a9",
            "decompiledFuncCode": "int64_t function_40cf60(int64_t a1, int64_t a2, int64_t str, int64_t a4) {\n    // 0x40cf60\n    int64_t v1; // 0x40cf60\n    int64_t v2; // bp-2112, 0x40cf60\n    int64_t v3; // 0x40cf60\n    if (a4 < 3) {\n        // 0x40d280\n        v2 = 1;\n        v1 = a4 - 1;\n        v3 = 1;\n    } else {\n        // 0x40cf87\n        int64_t v4; // 0x40cf60\n        v1 = function_40ce30(str, a4, &v2, a4, v4, v4);\n        v3 = v2;\n    }\n    // 0x40cfa4\n    int64_t v5; // bp-2184, 0x40cf60\n    int64_t v6 = &v5; // 0x40cf76\n    int64_t n = v1;\n    int64_t v7; // bp-2104, 0x40cf60\n    int64_t v8 = &v7; // 0x40cfb1\n    *(int64_t *)v8 = a4;\n    v8 += 8;\n    int64_t v9; // bp-56, 0x40cf60\n    while (v8 != (int64_t)&v9) {\n        // 0x40cfb8\n        *(int64_t *)v8 = a4;\n        v8 += 8;\n    }\n    int64_t str2 = v3 + str; // 0x40cfc9\n    int64_t v10; // 0x40cf60\n    int64_t result; // 0x40cf60\n    if (a4 == 0) {\n        // 0x40d11a\n        v10 = -1;\n        if (memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) == 0) {\n            // 0x40d12f\n            return 0;\n        }\n    } else {\n        int64_t v11 = a4 - 1;\n        int64_t v12 = v6 + 80; // 0x40cff5\n        int64_t v13 = str + 1; // 0x40cff1\n        *(int64_t *)(8 * (int64_t)*(char *)str + v12) = v11 + str - str;\n        while (a4 + str != v13) {\n            int64_t v14 = v13;\n            unsigned char v15 = *(char *)v14; // 0x40cfe8\n            v13 = v14 + 1;\n            *(int64_t *)(8 * (int64_t)v15 + v12) = v11 + str - v14;\n        }\n        // 0x40cfff\n        v10 = v11;\n        if (memcmp((int64_t *)str, (int64_t *)str2, (int32_t)n) == 0) {\n            // 0x40d14b\n            if (function_40c480(a2 + a1, 0, a4 - a2) != 0) {\n                // 0x40d12f\n                return 0;\n            }\n            int64_t v16 = a4 - v3; // 0x40d162\n            int64_t v17 = 0;\n            int64_t v18 = 0; // 0x40cf60\n            int64_t v19 = a4;\n            while (v19 != 0) {\n                int64_t v20 = v17;\n                int64_t v21 = 0x100000000 * v18;\n                uint64_t v22 = *(int64_t *)(8 * (int64_t)*(char *)(a1 - 1 + v19) + v12); // 0x40d1e4\n                int64_t v23; // 0x40cf60\n                int64_t v24; // 0x40cf60\n                if (v22 != 0) {\n                    int64_t v25 = v22; // 0x40d185\n                    if (v22 < v3) {\n                        // 0x40d187\n                        v25 = v21 != 0 ? 0x100000000 * v16 >> 32 : v22;\n                    }\n                    // 0x40d190\n                    v23 = 0;\n                    v24 = v25 + v20;\n                } else {\n                    uint64_t v26 = v21 >> 32; // 0x40d1cb\n                    int64_t v27 = v26 >= n ? v26 : n; // 0x40d1f4\n                    if (v27 >= v11) {\n                        // 0x40d230\n                        if (v26 < n) {\n                            int64_t v28 = v20 + a1; // 0x40d23d\n                            char * v29; // 0x40cf60\n                            char v30 = *v29; // 0x40d241\n                            int64_t v31; // 0x40d14b\n                            char v32 = *(char *)(v28 + v31); // 0x40d246\n                            int64_t v33 = v31; // 0x40d24a\n                            if (v32 == v30) {\n                                int64_t v34 = v33;\n                                while (v26 != v34) {\n                                    int64_t v35 = v34 - 1;\n                                    char v36 = *(char *)(v35 + v28); // 0x40d250\n                                    char v37 = *(char *)(v35 + str); // 0x40d255\n                                    v33 = v35;\n                                    if (v37 != v36) {\n                                        // break -> 0x40d268\n                                        break;\n                                    }\n                                    v34 = v33;\n                                }\n                            }\n                        }\n                        // 0x40d268\n                        if (v26 + 1 > n) {\n                            // 0x40d2a0\n                            result = v20 + a1;\n                            return result;\n                        }\n                        // 0x40d271\n                        v23 = v16;\n                        v24 = v20 + v3;\n                    } else {\n                        int64_t v38 = v27;\n                        char v39 = *(char *)(v20 + a1 + v38); // 0x40d211\n                        while (*(char *)(v38 + str) == v39) {\n                            int64_t v40 = v38 + 1; // 0x40d208\n                            if (v40 == v11) {\n                                goto lab_0x40d230;\n                            }\n                            v38 = v40;\n                            v39 = *(char *)(v20 + a1 + v38);\n                        }\n                        // 0x40d21b\n                        v23 = 0;\n                        v24 = v38 + v20 + 1 - n;\n                    }\n                }\n                // 0x40d196\n                v17 = v24;\n                int64_t v41 = v17 + a4; // 0x40d199\n                v18 = v23;\n                if (function_40c480(v19 + a1, 0, v41 - v19) != 0) {\n                    // break -> 0x40d12f\n                    break;\n                }\n                v19 = v41;\n            }\n            // 0x40d12f\n            return 0;\n        }\n    }\n    uint64_t v42 = a4 - n; // 0x40d01e\n    int64_t v43 = (v42 < n ? n : v42) + 1; // 0x40d02b\n    v2 = v43;\n    int64_t v44 = function_40c480(a2 + a1, 0, a4 - a2); // 0x40d070\n    if (a4 == 0) {\n        // 0x40d12f\n        return 0;\n    }\n    int64_t v45 = n - 1;\n    int64_t v46 = v44; // 0x40cf60\n    int64_t v47 = a4; // 0x40d056\n    int64_t v48 = 0;\n    int64_t v49; // 0x40cf60\n    int64_t v50; // 0x40cf60\n    int64_t v51; // 0x40cf60\n    int64_t v52; // 0x40cf60\n    int64_t v53; // 0x40d086\n    int64_t v54; // 0x40d0a1\n    while (true) {\n      lab_0x40d083:\n        // 0x40d083\n        result = 0;\n        if (v46 != 0) {\n            // break -> 0x40d12f\n            break;\n        }\n        // 0x40d091\n        v49 = v47;\n        v53 = 0x100000000 * v48 >> 32;\n        unsigned char v55 = *(char *)(a1 - 1 + v49); // 0x40d091\n        int64_t v56 = *(int64_t *)(v6 + 80 + 8 * (int64_t)v55); // 0x40d097\n        v51 = v56;\n        v50 = v53;\n        if (v56 != 0) {\n            goto lab_0x40d050;\n        } else {\n            // 0x40d0a1\n            v54 = v53 + a1;\n            if (n >= v10) {\n                goto lab_0x40d0d3;\n            } else {\n                // 0x40d0aa\n                v52 = n;\n                if (*(char *)(v54 + n) == *(char *)(n + str)) {\n                    int64_t v57 = n + 1; // 0x40d0ca\n                    while (v57 < v10) {\n                        int64_t v58 = v57; // 0x40d0c8\n                        v52 = v57;\n                        if (*(char *)(v57 + str) != *(char *)(v57 + v54)) {\n                            goto lab_0x40d110;\n                        }\n                        v57 = v58 + 1;\n                    }\n                    goto lab_0x40d0d3;\n                } else {\n                    goto lab_0x40d110;\n                }\n            }\n        }\n    }\n  lab_0x40d12f_3:\n    // 0x40d12f\n    return result;\n  lab_0x40d110:\n    // 0x40d110\n    v51 = v52;\n    v50 = 1 - n + v53;\n    goto lab_0x40d050;\n  lab_0x40d050:;\n    int64_t v59 = v50 + v51; // 0x40d050\n    goto lab_0x40d053;\n  lab_0x40d053:\n    // 0x40d053\n    v48 = v59;\n    v47 = v48 + a4;\n    v46 = function_40c480(v49 + a1, 0, v47 - v49);\n    result = 0;\n    if (v47 == 0) {\n        // break -> 0x40d12f\n        goto lab_0x40d12f_3;\n    }\n    goto lab_0x40d083;\n  lab_0x40d0d3:\n    // 0x40d0d3\n    result = v54;\n    if (n == 0) {\n        // break -> 0x40d12f\n        goto lab_0x40d12f_3;\n    }\n    // 0x40d0dd\n    if (*(char *)(v54 + v45) == *(char *)(v45 + str)) {\n        result = v54;\n        if (v45 == 0) {\n            // break (via goto) -> 0x40d12f\n            goto lab_0x40d12f_3;\n        }\n        int64_t v60 = v45 - 1; // 0x40d0fa\n        int64_t v61 = v60; // 0x40d0f8\n        while (*(char *)(v60 + str) == *(char *)(v60 + v54)) {\n            // 0x40d0fa\n            result = v54;\n            if (v61 == 0) {\n                // break (via goto) -> 0x40d12f\n                goto lab_0x40d12f_3;\n            }\n            // 0x40d0f0\n            v60 = v61 - 1;\n            v61 = v60;\n        }\n    }\n    // 0x40d141\n    v59 = v53 + v43;\n    goto lab_0x40d053;\n}\n"
        },
        {
            "funcName": "function_40d2b0",
            "funcStartAddr": "40d2b0",
            "funcEndAddr": "40d644",
            "decompiledFuncCode": "int64_t function_40d2b0(int64_t result, char * str) {\n    int64_t v1 = (int64_t)str;\n    char v2 = result;\n    char c = v1;\n    if (v2 == 0) {\n        // 0x40d375\n        return c == 0 ? result : 0;\n    }\n    int64_t v3 = result; // 0x40d2d0\n    int64_t v4 = v1; // 0x40d2d0\n    if (c == 0) {\n        // 0x40d375\n        return result;\n    }\n    int64_t v5 = 1; // 0x40d2d0\n    v3++;\n    v4++;\n    unsigned char v6 = *(char *)v4; // 0x40d301\n    v5 &= (int64_t)(c == v2);\n    char v7 = *(char *)v3; // 0x40d307\n    while (v7 != 0) {\n        // 0x40d2f0\n        if (v6 == 0) {\n            goto lab_0x40d315;\n        }\n        char v8 = v6;\n        v3++;\n        v4++;\n        v6 = *(char *)v4;\n        v5 &= (int64_t)(v8 == v7);\n        v7 = *(char *)v3;\n    }\n    // 0x40d30e\n    if (v6 != 0) {\n        // 0x40d375\n        return 0;\n    }\n  lab_0x40d315:\n    // 0x40d315\n    if (v5 != 0) {\n        // 0x40d375\n        return result;\n    }\n    uint64_t v9 = v4 - v1; // 0x40d327\n    char * found_char_pos = strchr((char *)(result + 1), (int32_t)c); // 0x40d32e\n    int64_t result2 = (int64_t)found_char_pos; // 0x40d32e\n    if (v9 == 1 || found_char_pos == NULL) {\n        // 0x40d375\n        return result2;\n    }\n    uint64_t v10 = v9 + result; // 0x40d341\n    int64_t v11 = v10 < result2 ? 1 : v10 - result2; // 0x40d357\n    if (v9 >= 32) {\n        // 0x40d375\n        return function_40cf60(result2, v11, v1, v9);\n    }\n    int64_t v12; // 0x40d2b0\n    int64_t v13; // bp-64, 0x40d2b0\n    int64_t v14; // 0x40d2b0\n    if (v9 < 3) {\n        // 0x40d619\n        v13 = 1;\n        v12 = v9 - 1;\n        v14 = 1;\n    } else {\n        // 0x40d39a\n        v12 = function_40ce30(v1, v9, &v13, (int64_t)v6, v11, v1 % 256);\n        v14 = v13;\n    }\n    int64_t n = v12;\n    int64_t v15; // 0x40d2b0\n    int64_t v16; // 0x40d2b0\n    int64_t v17; // 0x40d2b0\n    int64_t v18; // 0x40d2b0\n    int64_t v19; // 0x40d2b0\n    int64_t v20; // 0x40d520\n    int64_t v21; // 0x40d2b0\n    int64_t v22; // 0x40d2b0\n    if (memcmp((int64_t *)str, (int64_t *)(v14 + v1), (int32_t)n) != 0) {\n        uint64_t v23 = v9 - n; // 0x40d513\n        v20 = (v23 < n ? n : v23) + 1;\n        v13 = v20;\n        if (v9 == 0 | function_40c480(v11 + result2, 0, v9 - v11) != 0) {\n            // 0x40d375\n            return 0;\n        }\n        // 0x40d568\n        v21 = n - 1;\n        int64_t v24 = 0x100000000 - 0x100000000 * n >> 32;\n        v15 = v9;\n        v17 = 0;\n        while (true) {\n          lab_0x40d568:\n            // 0x40d568\n            v18 = v17;\n            v16 = v15;\n            v22 = v18 + result2;\n            if (v9 > n) {\n                // 0x40d571\n                if (*(char *)(v22 + n) == *(char *)(n + v1)) {\n                    int64_t v25 = n + 1; // 0x40d59a\n                    while (v9 > v25) {\n                        int64_t v26 = v25; // 0x40d598\n                        int64_t v27 = v25; // 0x40d598\n                        if (*(char *)(v25 + v1) != *(char *)(v25 + v22)) {\n                            // 0x40d5e0\n                            v19 = v18 + v24 + v27;\n                            goto lab_0x40d5ed;\n                        }\n                        v25 = v26 + 1;\n                    }\n                    goto lab_0x40d5a3;\n                } else {\n                    // 0x40d5e0\n                    v19 = v18 + v24 + n;\n                    goto lab_0x40d5ed;\n                }\n            } else {\n                goto lab_0x40d5a3;\n            }\n        }\n      lab_0x40d375_3:\n        // 0x40d375\n        return 0;\n    }\n    // 0x40d3e7\n    if (v9 == 0 | function_40c480(v11 + result2, 0, v9 - v11) != 0) {\n        // 0x40d375\n        return 0;\n    }\n    int64_t v28 = n - 1; // 0x40d3e7\n    char * v29 = (char *)(v28 + v1);\n    int64_t v30 = 0x100000000 * (v9 - v14) / 0x100000000;\n    int64_t v31 = 0x100000000 - 0x100000000 * n >> 32;\n    int64_t v32 = v9; // 0x40d2b0\n    int64_t v33 = 0; // 0x40d2b0\n    int64_t v34 = 0; // 0x40d2b0\n    int64_t v35; // 0x40d2b0\n    uint64_t v36; // 0x40d2b0\n    int64_t v37; // 0x40d2b0\n    int64_t v38; // 0x40d2b0\n    while (true) {\n      lab_0x40d442:\n        // 0x40d442\n        v36 = v34;\n        v37 = v33;\n        v35 = v32;\n        int64_t v39 = n >= v36 ? n : v36; // 0x40d448\n        if (v9 > v39) {\n            // 0x40d451\n            v38 = v39;\n            if (*(char *)(v39 + v37 + result2) != *(char *)(v39 + v1)) {\n                goto lab_0x40d4f0;\n            } else {\n                int64_t v40; // 0x40d2b0\n                while (v9 != v40 + 1) {\n                    // 0x40d470\n                    int64_t v41; // 0x40d2b0\n                    int64_t v42; // 0x40d47a\n                    char v43 = *(char *)(v42 + v41); // 0x40d470\n                    char v44 = *(char *)(v42 + v1); // 0x40d474\n                    v40 = v42;\n                    v38 = v42;\n                    if (v44 != v43) {\n                        goto lab_0x40d4f0;\n                    }\n                    int64_t v45 = v40;\n                    v42 = v45 + 1;\n                }\n                goto lab_0x40d483;\n            }\n        } else {\n            goto lab_0x40d483;\n        }\n    }\n  lab_0x40d63c:\n    // 0x40d375\n    return v37 + result2;\n  lab_0x40d5a3:\n    // 0x40d5a3\n    if (n == 0) {\n        return 0;\n    }\n    // 0x40d5ad\n    int64_t result3; // 0x40d2b0\n    if (*(char *)(v22 + v21) == *(char *)(v21 + v1)) {\n        result3 = v22;\n        if (v21 == 0) {\n            return result3;\n        }\n        int64_t v46 = v21 - 1; // 0x40d5ca\n        int64_t v47 = v46; // 0x40d5c8\n        while (*(char *)(v46 + v1) == *(char *)(v46 + v22)) {\n            // 0x40d5ca\n            result3 = v22;\n            if (v47 == 0) {\n                return result3;\n            }\n            // 0x40d5c0\n            v46 = v47 - 1;\n            v47 = v46;\n        }\n    }\n    // 0x40d5f8\n    v19 = v18 + v20;\n    goto lab_0x40d5ed;\n  lab_0x40d5ed:;\n    int64_t v48 = v19 + v9; // 0x40d548\n    int64_t v49 = function_40c480(v16 + result2, 0, v48 - v16); // 0x40d559\n    v15 = v48;\n    v17 = v19;\n    if (v48 == 0 || v49 != 0) {\n        // break -> 0x40d375\n        goto lab_0x40d375_3;\n    }\n    goto lab_0x40d568;\n  lab_0x40d4f0:;\n    int64_t v50 = 0; // 0x40d500\n    int64_t v51 = v37 + v31 + v38; // 0x40d500\n    goto lab_0x40d4df;\n  lab_0x40d483:;\n    int64_t v54 = n; // 0x40d48b\n    if (n > v36) {\n        int64_t v55 = v37 + result2; // 0x40d496\n        v54 = n;\n        if (*v29 == *(char *)(v55 + v28)) {\n            int64_t v56 = v28;\n            v54 = v56;\n            while (v36 != v56) {\n                int64_t v57 = v56 - 1;\n                int64_t v58 = v57; // 0x40d4ba\n                v54 = v56;\n                if (*(char *)(v57 + v1) != *(char *)(v57 + v55)) {\n                    // break -> 0x40d4c8\n                    break;\n                }\n                v56 = v58;\n                v54 = v56;\n            }\n        }\n    }\n    // 0x40d4c8\n    if (v36 + 1 > v54) {\n        // break -> 0x40d63c\n        goto lab_0x40d63c;\n    }\n    // 0x40d4d5\n    v50 = v30;\n    v51 = v37 + v14;\n    goto lab_0x40d4df;\n  lab_0x40d4df:;\n    int64_t v52 = v51 + v9; // 0x40d410\n    int64_t v53 = function_40c480(v35 + result2, 0, v52 - v35); // 0x40d426\n    result3 = 0;\n    v32 = v52;\n    v33 = v51;\n    v34 = v50;\n    if (v52 == 0 || v53 != 0) {\n      lab_0x40d375_3:\n        // 0x40d375\n        return result3;\n    }\n    goto lab_0x40d442;\n}\n"
        },
        {
            "funcName": "function_40d650",
            "funcStartAddr": "40d650",
            "funcEndAddr": "40d6a9",
            "decompiledFuncCode": "int64_t function_40d650(int64_t a1, int64_t a2, int64_t * a3) {\n    // 0x40d650\n    int32_t v1; // bp-16, 0x40d650\n    int64_t v2; // 0x40d650\n    int64_t v3 = function_40e360(0, (int64_t *)&v1, a2, (int64_t)a3, v2, v2, v2, (int64_t)&g83); // 0x40d665\n    if (v3 == 0) {\n        // 0x40d682\n        return 0xffffffff;\n    }\n    // 0x40d66f\n    int64_t result; // 0x40d650\n    if (v1 > -1) {\n        // 0x40d67d\n        *(int64_t *)a1 = v3;\n        result = v1;\n    } else {\n        // 0x40d688\n        free((int64_t *)v3);\n        *__errno_location() = 75;\n        result = 0xffffffff;\n    }\n    // 0x40d682\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d6b0",
            "funcStartAddr": "40d6b0",
            "funcEndAddr": "40d79f",
            "decompiledFuncCode": "int64_t function_40d6b0(int64_t path, uint64_t a2) {\n    int64_t size = a2 >= 1025 ? 1025 : a2 + 1; // 0x40d6e9\n    int64_t * mem = malloc((int32_t)size); // 0x40d6f3\n    int64_t result = 0; // 0x40d6fe\n    while (mem != NULL) {\n        uint64_t buf_size = size;\n        int64_t * buf = mem;\n        int32_t v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size); // 0x40d709\n        if (v1 < 0) {\n            // 0x40d768\n            if (*__errno_location() != 34) {\n                // 0x40d772\n                free(buf);\n                result = 0;\n                return result;\n            }\n        }\n        uint64_t v2 = (int64_t)v1; // 0x40d709\n        int64_t v3; // 0x40d6b0\n        if (buf_size > v2) {\n            // 0x40d780\n            v3 = (int64_t)buf;\n            *(char *)(v2 + v3) = 0;\n            result = v3;\n            return result;\n        }\n        // 0x40d71b\n        free(buf);\n        while (buf_size <= 0x3fffffffffffffff) {\n            int64_t size2 = 2 * buf_size; // 0x40d728\n            int64_t * mem2 = malloc((int32_t)size2); // 0x40d72e\n            if (mem2 == NULL) {\n                // 0x40d73b\n                result = (int64_t)mem2;\n                return result;\n            }\n            buf_size = size2;\n            buf = mem2;\n            v1 = readlink((char *)path, (char *)buf, (int32_t)buf_size);\n            if (v1 < 0) {\n                // 0x40d768\n                if (*__errno_location() != 34) {\n                    // 0x40d772\n                    free(buf);\n                    result = 0;\n                    return result;\n                }\n            }\n            // 0x40d716\n            v2 = (int64_t)v1;\n            if (buf_size > v2) {\n                // 0x40d780\n                v3 = (int64_t)buf;\n                *(char *)(v2 + v3) = 0;\n                result = v3;\n                return result;\n            }\n            // 0x40d71b\n            free(buf);\n        }\n        // 0x40d750\n        size = 0x7fffffffffffffff;\n        if (buf_size > 0x7ffffffffffffffe) {\n            // 0x40d790\n            *__errno_location() = 12;\n            result = 0;\n            return result;\n        }\n        mem = malloc((int32_t)size);\n        result = 0;\n    }\n  lab_0x40d73b_2:\n    // 0x40d73b\n    return result;\n}\n"
        },
        {
            "funcName": "function_40d7a0",
            "funcStartAddr": "40d7a0",
            "funcEndAddr": "40d7aa",
            "decompiledFuncCode": "int64_t function_40d7a0(void) {\n    // 0x40d7a0\n    return function_404930(1);\n}\n"
        },
        {
            "funcName": "function_40d7b0",
            "funcStartAddr": "40d7b0",
            "funcEndAddr": "40d8c6",
            "decompiledFuncCode": "int64_t function_40d7b0(int64_t a1, char ** a2, int64_t * a3, int64_t n) {\n    char * str = (char *)a1; // 0x40d7d1\n    int32_t len = strlen(str); // 0x40d7d1\n    if (a2 == NULL) {\n        // 0x40d89d\n        return -1;\n    }\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = -1;\n    int64_t * str3 = (int64_t *)(v3 * n + v1);\n    int32_t v4 = 0;\n    int64_t v5 = 0; // 0x40d837\n    int64_t v6 = v1; // 0x40d7b0\n    int64_t v7 = v2; // 0x40d83e\n    int64_t str4; // 0x40d7b0\n    int64_t v8; // 0x40d7b0\n    int32_t v9; // 0x40d7b0\n    int32_t v10; // 0x40d7b0\n    int32_t v11; // 0x40d7b0\n    int64_t v12; // 0x40d7b0\n    int64_t result; // 0x40d7b0\n    int32_t v13; // 0x40d833\n    char * str2; // 0x40d852\n    while (true) {\n        // 0x40d847\n        str4 = v6;\n        v8 = v5;\n        v10 = v4;\n        str2 = (char *)v7;\n        v9 = v10;\n        if (strncmp(str2, str, len) == 0) {\n            // 0x40d85b\n            result = v8;\n            if (len == strlen(str2)) {\n                // 0x40d89d\n                return result;\n            }\n            if (v3 == -1) {\n                // break -> 0x40d86f\n                break;\n            }\n            // 0x40d800\n            v9 = 1;\n            if (a3 != NULL) {\n                // 0x40d80e\n                v13 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v10 >> 24;\n                v9 = v13;\n            }\n        }\n        // 0x40d837\n        v4 = v9;\n        v5 = v8 + 1;\n        v7 = *(int64_t *)(8 * v5 + v2);\n        v6 = str4 + n;\n        v12 = v3;\n        v11 = v4;\n        if (v7 == 0) {\n            return (char)v11 == 0 ? v12 : -2;\n        }\n    }\n    int64_t v14 = v8 + 1; // 0x40d873\n    int64_t v15 = *(int64_t *)(8 * v14 + v2); // 0x40d87a\n    v12 = v8;\n    v11 = v10;\n    while (v15 != 0) {\n        // 0x40d847\n        v3 = v8;\n        str3 = (int64_t *)(v3 * n + v1);\n        v4 = v10;\n        v5 = v14;\n        v6 = str4 + n;\n        v7 = v15;\n        while (true) {\n            // 0x40d847\n            str4 = v6;\n            v8 = v5;\n            v10 = v4;\n            str2 = (char *)v7;\n            v9 = v10;\n            if (strncmp(str2, str, len) == 0) {\n                // 0x40d85b\n                result = v8;\n                if (len == strlen(str2)) {\n                    // 0x40d89d\n                    return result;\n                }\n                if (v3 == -1) {\n                    // break -> 0x40d86f\n                    break;\n                }\n                // 0x40d800\n                v9 = 1;\n                if (a3 != NULL) {\n                    // 0x40d80e\n                    v13 = memcmp(str3, (int64_t *)str4, (int32_t)n) != 0 ? 1 : 0x1000000 * v10 >> 24;\n                    v9 = v13;\n                }\n            }\n            // 0x40d837\n            v4 = v9;\n            v5 = v8 + 1;\n            v7 = *(int64_t *)(8 * v5 + v2);\n            v6 = str4 + n;\n            v12 = v3;\n            v11 = v4;\n            if (v7 == 0) {\n                return (char)v11 == 0 ? v12 : -2;\n            }\n        }\n        // 0x40d86f\n        v14 = v8 + 1;\n        v15 = *(int64_t *)(8 * v14 + v2);\n        v12 = v8;\n        v11 = v10;\n    }\n  lab_0x40d888:\n    // 0x40d89d\n    return (char)v11 == 0 ? v12 : -2;\n}\n"
        },
        {
            "funcName": "function_40d8d0",
            "funcStartAddr": "40d8d0",
            "funcEndAddr": "40d941",
            "decompiledFuncCode": "int64_t function_40d8d0(int64_t a1, int64_t a2, int64_t a3) {\n    char * format; // 0x40d8d0\n    if (a3 == -1) {\n        // 0x40d930\n        format = dcgettext(NULL, \"invalid argument %s for %s\", 5);\n    } else {\n        // 0x40d8e5\n        format = dcgettext(NULL, \"ambiguous argument %s for %s\", 5);\n    }\n    // 0x40d8f4\n    function_409dc0(1, a1);\n    function_409ab0(0, 8, a2);\n    error(0, 0, format);\n    return &g83;\n}\n"
        },
        {
            "funcName": "function_40d950",
            "funcStartAddr": "40d950",
            "funcEndAddr": "40da68",
            "decompiledFuncCode": "int64_t function_40d950(int64_t a1, int64_t a2, int64_t n) {\n    char * v1 = dcgettext(NULL, \"Valid arguments are:\", 5); // 0x40d97d\n    fputs_unlocked(v1, g40);\n    if (v1 != NULL) {\n        int64_t v2 = (int64_t)v1;\n        int64_t str = a2;\n        int64_t v3 = 0;\n        int64_t v4; // 0x40d9f0\n        int64_t v5; // 0x40d9f7\n        int64_t v6; // 0x40da17\n        while (v3 != 0) {\n            // 0x40d9db\n            if (memcmp((int64_t *)0, (int64_t *)str, (int32_t)n) != 0) {\n                // break -> 0x40d9a0\n                break;\n            }\n            // 0x40d9ed\n            v4 = v3 + 1;\n            v5 = function_409de0(v2);\n            __fprintf_chk(g40, 1, \", %s\", (char *)v5);\n            v6 = *(int64_t *)(8 * v4 + a1);\n            if (v6 == 0) {\n                // break (via goto) -> 0x40da20\n                goto lab_0x40da20;\n            }\n            v2 = v6;\n            str += n;\n            v3 = v4;\n        }\n        int64_t v7 = v3 + 1; // 0x40d9a3\n        int64_t v8 = function_409de0(v2); // 0x40d9ad\n        __fprintf_chk(g40, 1, \"\\n  - %s\", (char *)v8);\n        int64_t v9 = *(int64_t *)(8 * v7 + a1); // 0x40d9cd\n        while (v9 != 0) {\n            int64_t * str2 = (int64_t *)str;\n            v2 = v9;\n            str += n;\n            v3 = v7;\n            while (v3 != 0) {\n                // 0x40d9db\n                if (memcmp(str2, (int64_t *)str, (int32_t)n) != 0) {\n                    // break -> 0x40d9a0\n                    break;\n                }\n                // 0x40d9ed\n                v4 = v3 + 1;\n                v5 = function_409de0(v2);\n                __fprintf_chk(g40, 1, \", %s\", (char *)v5);\n                v6 = *(int64_t *)(8 * v4 + a1);\n                if (v6 == 0) {\n                    // break (via goto) -> 0x40da20\n                    goto lab_0x40da20;\n                }\n                v2 = v6;\n                str += n;\n                v3 = v4;\n            }\n            // 0x40d9a0\n            v7 = v3 + 1;\n            v8 = function_409de0(v2);\n            __fprintf_chk(g40, 1, \"\\n  - %s\", (char *)v8);\n            v9 = *(int64_t *)(8 * v7 + a1);\n        }\n    }\n  lab_0x40da20:;\n    int64_t v10 = (int64_t)g40; // 0x40da20\n    int64_t * v11 = (int64_t *)(v10 + 40); // 0x40da27\n    uint64_t result = *v11; // 0x40da27\n    if (result >= *(int64_t *)(v10 + 48)) {\n        // 0x40da50\n        return __overflow(g40, 10);\n    }\n    // 0x40da31\n    *v11 = result + 1;\n    *(char *)result = 10;\n    return result;\n}\n"
        },
        {
            "funcName": "function_40da70",
            "funcStartAddr": "40da70",
            "funcEndAddr": "40dae0",
            "decompiledFuncCode": "int64_t function_40da70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = function_40d7b0(a2, (char **)a3, (int64_t *)a4, a5); // 0x40da9c\n    int64_t result = v1; // 0x40daa4\n    if (v1 < 0) {\n        // 0x40dab8\n        function_40d8d0(a1, a2, v1);\n        function_40d950(a3, a4, a5);\n        result = -1;\n    }\n    // 0x40daa6\n    return result;\n}\n"
        },
        {
            "funcName": "function_40dae0",
            "funcStartAddr": "40dae0",
            "funcEndAddr": "40db2d",
            "decompiledFuncCode": "int64_t function_40dae0(int64_t a1, int64_t result, int64_t str2, int64_t a4) {\n    // 0x40dae0\n    if (result == 0) {\n        // 0x40db21\n        return 0;\n    }\n    int64_t * str = (int64_t *)a1; // 0x40db18\n    int32_t n = a4; // 0x40db18\n    int64_t v1 = result; // 0x40db1f\n    if (memcmp(str, (int64_t *)str2, n) == 0) {\n        // 0x40db21\n        return result;\n    }\n    int64_t str3 = str2; // 0x40db1f\n    v1 += 8;\n    int64_t v2 = *(int64_t *)v1; // 0x40db00\n    int64_t result2 = 0; // 0x40db0d\n    while (v2 != 0) {\n        // 0x40db0f\n        str3 += a4;\n        result2 = v2;\n        if (memcmp(str, (int64_t *)str3, n) == 0) {\n            // break -> 0x40db21\n            break;\n        }\n        v1 += 8;\n        v2 = *(int64_t *)v1;\n        result2 = 0;\n    }\n    // 0x40db21\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40db30",
            "funcStartAddr": "40db30",
            "funcEndAddr": "40db8d",
            "decompiledFuncCode": "int64_t function_40db30(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x40db37\n    int64_t v2; // 0x40db30\n    int64_t result = function_40e240(a1, v2); // 0x40db48\n    if ((v2 & 32) != 0) {\n        // 0x40db70\n        if ((int32_t)result == 0) {\n            // 0x40db74\n            *__errno_location() = 0;\n        }\n        // 0x40db6a\n        return 0xffffffff;\n    }\n    // 0x40db51\n    if ((int32_t)result == 0) {\n        // 0x40db6a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x40db58\n    if (v1 == 0) {\n        // 0x40db5a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40db6a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40db90",
            "funcStartAddr": "40db90",
            "funcEndAddr": "40dbda",
            "decompiledFuncCode": "int64_t function_40db90(int64_t * path, int64_t oflag, int64_t a3) {\n    uint32_t fd = open((char *)path, (int32_t)oflag); // 0x40dba3\n    return function_40e1f0((int64_t)fd);\n}\n"
        },
        {
            "funcName": "function_40dbe0",
            "funcStartAddr": "40dbe0",
            "funcEndAddr": "40dc3e",
            "decompiledFuncCode": "int64_t function_40dbe0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x40dbe6\n    if (locale == NULL) {\n        // 0x40dc13\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x40dbe6\n    bool v2; // 0x40dbe0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g15; // 0x40dbe0\n    int64_t v5 = v1; // 0x40dbe0\n    int64_t v6 = 2; // 0x40dc05\n    unsigned char v7 = *(char *)v5; // 0x40dc05\n    char v8 = *(char *)v4; // 0x40dc05\n    char v9 = v8; // 0x40dc05\n    bool v10 = false; // 0x40dc05\n    while (v7 == v8) {\n        // 0x40dbf8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x40dc11\n    int64_t v13 = v1; // 0x40dc11\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x40dc13\n        return 0;\n    }\n    int64_t v14 = 6; // 0x40dc11\n    unsigned char v15 = *(char *)v13; // 0x40dc2d\n    char v16 = *(char *)v12; // 0x40dc2d\n    char v17 = v16; // 0x40dc2d\n    bool v18 = false; // 0x40dc2d\n    while (v15 == v16) {\n        // 0x40dc20\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_40dc40",
            "funcStartAddr": "40dc40",
            "funcEndAddr": "40dc76",
            "decompiledFuncCode": "int64_t function_40dc40(int64_t a1, uint64_t a2, int64_t a3) {\n    char v1 = a1;\n    int64_t v2 = a1; // 0x40dc46\n    if (v1 == 0) {\n        // 0x40dc70\n        return 0;\n    }\n    uint64_t v3 = 0;\n    v2++;\n    int64_t v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v1; // 0x40dc58\n    char v5 = *(char *)v2; // 0x40dc5b\n    while (v5 != 0) {\n        // 0x40dc50\n        v3 = v4;\n        v2++;\n        v4 = (v3 / 0x80000000000000 | 512 * v3) + (int64_t)v5;\n        v5 = *(char *)v2;\n    }\n    // 0x40dc63\n    return v4 % a2;\n}\n"
        },
        {
            "funcName": "function_40dc80",
            "funcStartAddr": "40dc80",
            "funcEndAddr": "40e1e2",
            "decompiledFuncCode": "int64_t function_40dc80(void) {\n    char * v1 = nl_langinfo(14); // 0x40dc96\n    char * v2 = g80; // 0x40dc9b\n    char * v3; // 0x40dc80\n    int64_t v4; // 0x40dc80\n    int64_t v5; // 0x40dc80\n    int64_t v6; // 0x40dc80\n    int64_t v7; // 0x40dc80\n    int32_t size; // 0x40dc80\n    int32_t size2; // 0x40dc80\n    int32_t len; // 0x40dd52\n    int64_t v8; // 0x40dd52\n    char * env_val; // 0x40dd3d\n    if (v2 == NULL) {\n        // 0x40dd38\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x40dda5;\n        } else {\n            // 0x40dd4a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x40dda5;\n            } else {\n                // 0x40dd4f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x40dd3d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x40e1d5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x40dda5;\n                    } else {\n                        // 0x40e149\n                        size2 = len + 14;\n                        goto lab_0x40dd6b;\n                    }\n                } else {\n                    goto lab_0x40dd6b;\n                }\n            }\n        }\n    } else {\n        // 0x40dc80\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40dcba;\n    }\n  lab_0x40dfec:;\n    // 0x40dfec\n    struct _IO_FILE * stream; // 0x40de2b\n    int32_t v10 = __uflow(stream); // 0x40dfef\n    int64_t v11; // 0x40dc80\n    int64_t v12 = v11; // 0x40dff9\n    int64_t v13; // 0x40dc80\n    int64_t v14 = v13; // 0x40dff9\n    int32_t v15 = v10; // 0x40dff9\n    int64_t v16; // 0x40dc80\n    int64_t v17 = v16; // 0x40dff9\n    int64_t v18 = v11; // 0x40dff9\n    int64_t v19 = v13; // 0x40dff9\n    int64_t v20 = v16; // 0x40dff9\n    if (v10 == -1) {\n        // break -> 0x40dfff\n        goto lab_0x40dfff;\n    }\n    goto lab_0x40de79;\n  lab_0x40de6e:;\n    // 0x40de6e\n    int64_t v90; // 0x40dc80\n    int64_t * v32; // 0x40de60\n    *v32 = v90 + 1;\n    int64_t v89; // 0x40dc80\n    v12 = v89;\n    int64_t v91; // 0x40dc80\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x40dc80\n    v17 = v92;\n    goto lab_0x40de79;\n  lab_0x40de79:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x40dc80\n    int32_t v25; // bp-120, 0x40dc80\n    int32_t v26; // bp-184, 0x40dc80\n    int64_t v27; // 0x40de2b\n    int64_t v28; // 0x40de48\n    int64_t v29; // 0x40de4d\n    int64_t * v30; // 0x40de64\n    switch (c) {\n        case 32: {\n            goto lab_0x40de60;\n        }\n        case 10: {\n            goto lab_0x40de60;\n        }\n        case 9: {\n            goto lab_0x40de60;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x40e051\n            int32_t v33; // 0x40dc80\n            char v34; // 0x40dc80\n            int32_t v35; // 0x40e05e\n            if (v31 < *v30) {\n                // 0x40e030\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40e05b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x40e051\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x40e030\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40e05b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x40e040\n                v36 = v33;\n            }\n            // 0x40e12f\n            if (v36 == -1) {\n                // break -> 0x40dfff\n                break;\n            }\n            goto lab_0x40de60;\n        }\n        default: {\n            // 0x40de8f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x40dfff\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x40deb8\n            int64_t v39 = v37 + 4; // 0x40deba\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x40dec6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x40dec8\n            while (v41 == 0) {\n                // 0x40deb8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x40dee6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x40def2\n            int64_t v45 = v43 + 4; // 0x40def4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x40df00\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x40df02\n            while (v47 == 0) {\n                // 0x40def2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x40deef\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x40df18\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x40df28\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x40df2c\n            int64_t v52 = v51 + v48; // 0x40df35\n            int64_t * mem; // 0x40dc80\n            int64_t v53; // 0x40dc80\n            int64_t v54; // 0x40dc80\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40e06b\n                int64_t v56 = v55 + 3; // 0x40e077\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x40df51\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x40df60\n            if (mem == NULL) {\n                // 0x40e18c\n                free((int64_t *)v21);\n                function_40e240(v27, v53);\n                v24 = (int64_t)&g14;\n                goto lab_0x40de04;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x40df78\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x40df82\n            uint32_t v62 = (int32_t)v59; // 0x40df85\n            int64_t v63; // 0x40dc80\n            if (v62 >= 8) {\n                // 0x40e094\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40e0ae\n                int64_t v66 = v61 - v65; // 0x40e0b2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40e0bd\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40e0ce\n                    int64_t v70 = v69 & 0xffffffff; // 0x40e0ce\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40e0cb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40e15f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x40df97\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40df9b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40dfab\n            int64_t v74 = v60 - 1; // 0x40dfaf\n            uint32_t v75 = (int32_t)v73; // 0x40dfb4\n            int64_t v76; // 0x40dc80\n            if (v75 >= 8) {\n                // 0x40e0e2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x40e0ec\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x40e0fc\n                int64_t v80 = v74 - v79; // 0x40e100\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x40e10b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40e11b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x40e119\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x40e176\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40e17e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x40dfc6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40dfca\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x40e1c3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40dfde\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40de6e;\n            } else {\n                goto lab_0x40dfec;\n            }\n        }\n    }\n  lab_0x40de60:;\n    int64_t v93 = v23; // 0x40dc80\n    int64_t v94 = v22; // 0x40dc80\n    int64_t v95 = v21; // 0x40dc80\n    goto lab_0x40de60_2;\n  lab_0x40dda5:;\n    int64_t * mem3 = malloc(size); // 0x40dda5\n    int64_t v97 = (int64_t)&g14; // 0x40ddb0\n    int64_t v98; // 0x40dc80\n    int64_t path; // 0x40dc80\n    if (mem3 == NULL) {\n        goto lab_0x40dd82;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x40dda5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x40ddc6;\n    }\n  lab_0x40dcba:;\n    int64_t str = v1 == NULL ? (int64_t)&g14 : (int64_t)v1; // 0x40dcad\n    char v100 = *v3; // 0x40dcba\n    int64_t v101; // 0x40dc80\n    if (v100 == 0) {\n        // 0x40dd14\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x40dc80\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x40dc80\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x40dd00\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x40dd07;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x40dcd0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40dcdd\n        char v107 = *(char *)v106; // 0x40dce2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x40dd14\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40dceb\n    v104 = v103 + 1;\n  lab_0x40dd07:\n    // 0x40dd14\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x40dd82:;\n    char * v108 = (char *)v97;\n    g80 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40dcba;\n  lab_0x40ddc6:;\n    int64_t v109 = v98 + path; // 0x40ddc6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x40ddf2\n    v24 = (int64_t)&g14;\n    if (fd >= 0) {\n        // 0x40de21\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x40e152\n            close(fd);\n            v24 = (int64_t)&g14;\n        } else {\n            // 0x40de45\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x40de60_2:;\n                uint64_t v96 = *v32; // 0x40de60\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x40dfec;\n                } else {\n                    goto lab_0x40de6e;\n                }\n            }\n          lab_0x40dfff:\n            // 0x40dfff\n            function_40e240(v27, v19);\n            v24 = (int64_t)&g14;\n            if (v18 != 0) {\n                // 0x40e01e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x40de04;\n  lab_0x40dd6b:;\n    int64_t * mem4 = malloc(size2); // 0x40dd6b\n    v97 = (int64_t)&g14;\n    if (mem4 != NULL) {\n        // 0x40de11\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x40ddc6;\n    } else {\n        goto lab_0x40dd82;\n    }\n  lab_0x40de04:\n    // 0x40de04\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x40dd82;\n}\n"
        },
        {
            "funcName": "function_40e1f0",
            "funcStartAddr": "40e1f0",
            "funcEndAddr": "40e23e",
            "decompiledFuncCode": "int64_t function_40e1f0(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x40e1fc\n    if (fd >= 3) {\n        // 0x40e201\n        return a1 & 0xffffffff;\n    }\n    // 0x40e210\n    int64_t v1; // 0x40e1f0\n    int64_t v2 = function_40fe80(a1, v1); // 0x40e210\n    int32_t * v3 = __errno_location(); // 0x40e218\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40e240",
            "funcStartAddr": "40e240",
            "funcEndAddr": "40e2bb",
            "decompiledFuncCode": "int64_t function_40e240(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x40e247\n    if (fileno(stream) < 0) {\n        // 0x40e2a7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x40e25a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40e28b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x40e2a7\n            return fclose(stream);\n        }\n    }\n    // 0x40e25c\n    if ((int32_t)function_40e2c0(a1, v1) == 0) {\n        // 0x40e2a7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x40e268\n    int32_t v3 = *v2; // 0x40e270\n    int64_t result = fclose(stream); // 0x40e27e\n    if (v3 != 0) {\n        // 0x40e2b0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x40e280\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e2c0",
            "funcStartAddr": "40e2c0",
            "funcEndAddr": "40e300",
            "decompiledFuncCode": "int64_t function_40e2c0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40e2da\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40e2da\n        return fflush(stream);\n    }\n    // 0x40e2e8\n    function_40e300(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_40e300",
            "funcStartAddr": "40e300",
            "funcEndAddr": "40e357",
            "decompiledFuncCode": "int64_t function_40e300(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x40e300\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x40e30a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x40e33b\n    int64_t result = -1; // 0x40e344\n    if (v1 != -1) {\n        // 0x40e346\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x40e352\n    return result;\n}\n"
        },
        {
            "funcName": "function_40e360",
            "funcStartAddr": "40e360",
            "funcEndAddr": "40fe79",
            "decompiledFuncCode": "int64_t function_40e360(int32_t a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x40e360\n    int64_t v1; // bp-1416, 0x40e360\n    int64_t v2; // bp-1656, 0x40e360\n    if ((int32_t)function_4101f0(a3, &v1, &v2) < 0) {\n        // 0x40e9d0\n        return 0;\n    }\n    int64_t v3 = &v2; // 0x40e36b\n    int64_t v4; // bp-1384, 0x40e360\n    int64_t v5; // bp-1640, 0x40e360\n    int64_t v6; // 0x40e360\n    if ((int32_t)function_40ffd0(a4, &v2, v3) < 0) {\n        if (v6 != (int64_t)&v4) {\n            // 0x40f2b7\n            free((int64_t *)v6);\n        }\n        if (v6 != (int64_t)&v5) {\n            // 0x40f2d3\n            free((int64_t *)v6);\n        }\n        // 0x40f2d8\n        *__errno_location() = 22;\n        // 0x40e9d0\n        return 0;\n    }\n    uint64_t v7 = v6 + 7; // 0x40e3cb\n    uint64_t v8 = v7 < 7 ? -1 : v7; // 0x40e3d3\n    uint64_t v9 = v8 + v6; // 0x40e3d7\n    int64_t v10; // 0x40e360\n    char * v11; // 0x40e360\n    int64_t v12; // 0x40e360\n    if (v9 < v8) {\n        // 0x40ea80\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x40e989;\n    } else {\n        if (v9 > 0xfffffffffffffff9) {\n            // 0x40ea80\n            v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n            goto lab_0x40e989;\n        } else {\n            uint64_t size = v9 + 6; // 0x40e3e7\n            if (size < 4000) {\n                // 0x40e530\n                v12 = 0;\n                int64_t v13; // bp-1784, 0x40e360\n                v11 = (char *)(15 - (v9 + 29 & -16) + (int64_t)&v13 & -16);\n                goto lab_0x40e424;\n            } else {\n                if (size == -1) {\n                    // 0x40ea80\n                    v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                    goto lab_0x40e989;\n                } else {\n                    int64_t * mem = malloc((int32_t)size); // 0x40e408\n                    if (mem == NULL) {\n                        // 0x40ea80\n                        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n                        goto lab_0x40e989;\n                    } else {\n                        // 0x40e41d\n                        v12 = (int64_t)mem;\n                        v11 = (char *)mem;\n                        goto lab_0x40e424;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40e950_2:;\n    // 0x40e950\n    int64_t v14; // 0x40e360\n    int64_t v15 = v14;\n    int64_t v16 = 0x100000000000000 * (int64_t)__errno_location() >> 56; // 0x40e958\n    int64_t v17 = v16; // 0x40e966\n    int64_t v18 = v16; // 0x40e966\n    int64_t v19 = v15; // 0x40e966\n    int64_t v20; // 0x40e448\n    if (v15 != v20 == (v15 != 0)) {\n        goto lab_0x40eb78;\n    } else {\n        goto lab_0x40e971;\n    }\n  lab_0x40e989:\n    // 0x40e989\n    if (v6 != (int64_t)&v4) {\n        // 0x40e9a0\n        free((int64_t *)v6);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40e9bc\n        free((int64_t *)v6);\n    }\n    // 0x40e9c1\n    *(int32_t *)v10 = 12;\n    // 0x40e9d0\n    return 0;\n  lab_0x40e424:;\n    int64_t v21 = a1 == 0 ? 0 : v3;\n    v20 = a1;\n    int64_t * v22 = (int64_t *)v6; // 0x40e45d\n    int64_t v23 = *v22; // 0x40e45d\n    int64_t v24 = 0; // 0x40e463\n    int64_t v25 = v20; // 0x40e463\n    int64_t v26 = v21; // 0x40e463\n    int64_t v27 = 0; // 0x40e463\n    int64_t v28; // 0x40e360\n    int64_t v29; // 0x40e360\n    int64_t v30; // 0x40e360\n    int64_t v31; // 0x40e360\n    int64_t v32; // 0x40e360\n    int64_t v33; // 0x40e360\n    int64_t v34; // 0x40e360\n    if (v23 == a3) {\n        goto lab_0x40ea73;\n    } else {\n        int64_t v35 = v23 - a3; // 0x40e469\n        v28 = v35;\n        v29 = v35;\n        v31 = 0;\n        v30 = v21;\n        v32 = a3;\n        v33 = v20;\n        v34 = 0;\n        goto lab_0x40e47b;\n    }\n  lab_0x40ea73:;\n    int64_t v36 = v24; // 0x40ea76\n    float80_t v37; // 0x40e360\n    float80_t v38 = v37; // 0x40ea76\n    float80_t v39; // 0x40e360\n    float80_t v40 = v39; // 0x40ea76\n    int64_t v41 = v25; // 0x40ea76\n    int64_t v42 = v26; // 0x40ea76\n    int64_t v43 = v27; // 0x40ea76\n    int64_t v44; // 0x40e360\n    int64_t v45 = v44; // 0x40ea76\n    goto lab_0x40e5d8;\n  lab_0x40e5d8:;\n    int64_t v46 = v43;\n    int64_t v47 = v42;\n    int64_t v48 = v41;\n    int64_t v49 = v36;\n    int64_t v50; // 0x40e360\n    int64_t v51; // 0x40e360\n    int64_t v52; // 0x40e360\n    int64_t v53; // 0x40e360\n    int64_t v54; // 0x40e360\n    int64_t v55; // 0x40e360\n    int64_t v56; // 0x40e360\n    int64_t v57; // 0x40e360\n    int64_t dest_mem2; // 0x40e360\n    int64_t dest_mem3; // 0x40e360\n    int64_t v58; // 0x40e360\n    float80_t v59; // 0x40e360\n    float80_t v60; // 0x40e360\n    float80_t v61; // 0x40e360\n    float80_t v62; // 0x40e360\n    float80_t v63; // 0x40e360\n    uint64_t v64; // 0x40f706\n    char * v65; // 0x40e5ec\n    char v66; // 0x40e5ec\n    int64_t v67; // 0x40e614\n    uint32_t v68; // 0x40e618\n    int64_t v69; // 0x40e9f5\n    char v70; // 0x40e360\n    if (v1 == v49) {\n        // 0x40f700\n        v64 = v46 + 1;\n        if (v46 == -1) {\n            // 0x40fe6a\n            v14 = v48;\n            dest_mem2 = v48;\n            v52 = -1;\n            if (v47 == -1) {\n                goto lab_0x40f762;\n            } else {\n                goto lab_0x40e950_2;\n            }\n        } else {\n            // 0x40f710\n            dest_mem2 = v48;\n            v52 = v47;\n            if (v47 >= v64) {\n                goto lab_0x40f762;\n            } else {\n                if (v47 != 0) {\n                    // 0x40fd2d\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x40e950_2;\n                    } else {\n                        int64_t v71 = 2 * v47; // 0x40fd33\n                        v51 = v71;\n                        if (v71 >= v64) {\n                            goto lab_0x40f72e;\n                        } else {\n                            goto lab_0x40fd3f;\n                        }\n                    }\n                } else {\n                    // 0x40f71e\n                    v51 = 12;\n                    if (v64 < 13) {\n                        goto lab_0x40f72e;\n                    } else {\n                        goto lab_0x40fd3f;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x40e5ec\n        v55 = v45;\n        v62 = v40;\n        v59 = v38;\n        v65 = (char *)(v55 + 72);\n        v66 = *v65;\n        int64_t v72 = *(int64_t *)(v55 + 80); // 0x40e5f1\n        if (v66 == 37) {\n            if (v72 != -1) {\n                // 0x40f08c\n                abort();\n                // UNREACHABLE\n            }\n            if (v46 == -1) {\n                // 0x40f1c0\n                v14 = v48;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = -1;\n                if (v47 != -1) {\n                    goto lab_0x40e950_2;\n                } else {\n                    goto lab_0x40ea52;\n                }\n            } else {\n                // 0x40ea02\n                v69 = v46 + 1;\n                dest_mem3 = v48;\n                v54 = v47;\n                v56 = v69;\n                if (v47 >= v69) {\n                    goto lab_0x40ea52;\n                } else {\n                    if (v47 != 0) {\n                        // 0x40f2f0\n                        v14 = v48;\n                        if (v47 < 0) {\n                            goto lab_0x40e950_2;\n                        } else {\n                            int64_t v73 = 2 * v47; // 0x40f2f6\n                            v53 = v73;\n                            if (v73 >= v69) {\n                                goto lab_0x40ea20;\n                            } else {\n                                goto lab_0x40f302;\n                            }\n                        }\n                    } else {\n                        // 0x40ea10\n                        v53 = 12;\n                        if (v69 < 13) {\n                            goto lab_0x40ea20;\n                        } else {\n                            goto lab_0x40f302;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (v72 == -1) {\n                // 0x40f08c\n                abort();\n                // UNREACHABLE\n            }\n            // 0x40e609\n            v67 = 32 * v72 + v6;\n            v68 = *(int32_t *)v67;\n            g88 = v68 - 18;\n            switch (v68) {\n                case 18: {\n                    // 0x40ef80\n                    *(char *)*(int64_t *)(v67 + 16) = (char)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x40ea57;\n                }\n                case 19: {\n                    // 0x40ef70\n                    *(int16_t *)*(int64_t *)(v67 + 16) = (int16_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x40ea57;\n                }\n                case 20: {\n                    // 0x40ef58\n                    *(int32_t *)*(int64_t *)(v67 + 16) = (int32_t)v46;\n                    v60 = v59;\n                    v63 = v62;\n                    v58 = v48;\n                    v50 = v47;\n                    v57 = v46;\n                    goto lab_0x40ea57;\n                }\n                case 21: {\n                    goto lab_0x40eb40;\n                }\n                case 22: {\n                    goto lab_0x40eb40;\n                }\n                default: {\n                    // 0x40e62a\n                    v70 = v66 & -33;\n                    if (v68 == 12 == (v70 > 71 != v70 != 65)) {\n                        float80_t v74 = *(float80_t *)(v67 + 16); // 0x40ead0\n                        v61 = v59;\n                        if (v74 != v74 || 0.0L != 0.0L) {\n                            goto lab_0x40eaed;\n                        } else {\n                            // 0x40ead7\n                            v61 = v62;\n                            if (v62 != v59) {\n                                goto lab_0x40e660;\n                            } else {\n                                goto lab_0x40eaed;\n                            }\n                        }\n                    } else {\n                        goto lab_0x40e660;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40e47b:;\n    int64_t v75 = v34;\n    float80_t v76; // 0x40e360\n    float80_t v77 = v76;\n    float80_t v78; // 0x40e360\n    float80_t v79 = v78;\n    int64_t v80 = v33;\n    int64_t v81 = v32;\n    int64_t v82 = v30;\n    int64_t v83; // 0x40e360\n    int64_t v84 = v83;\n    int64_t v85 = v31;\n    int64_t v86 = v29;\n    int64_t v87 = v28;\n    int64_t v88 = v86; // 0x40e47e\n    int64_t v89 = v85; // 0x40e47e\n    int64_t v90 = v84; // 0x40e47e\n    float80_t v91 = v79; // 0x40e47e\n    float80_t v92 = v77; // 0x40e47e\n    int64_t v93 = v75; // 0x40e47e\n    int64_t v94 = v80; // 0x40e47e\n    int64_t v95 = v81; // 0x40e47e\n    int64_t v96 = v82; // 0x40e47e\n    int64_t v97 = v87; // 0x40e47e\n    int64_t v98; // 0x40e360\n    int64_t v99; // 0x40e360\n    int64_t v100; // 0x40e360\n    int64_t v101; // 0x40e360\n    int64_t v102; // 0x40e360\n    if (v82 >= v87) {\n        goto lab_0x40e5c9;\n    } else {\n        if (v82 != 0) {\n            // 0x40e560\n            v14 = v80;\n            if (v82 < 0) {\n                goto lab_0x40e950_2;\n            } else {\n                int64_t v103 = 2 * v82; // 0x40e566\n                v99 = v103;\n                if (v103 >= v87) {\n                    goto lab_0x40e57b;\n                } else {\n                    goto lab_0x40e56e;\n                }\n            }\n        } else {\n            if (v87 < 13) {\n                int64_t v104 = v80 == v20; // 0x40e4a4\n                v101 = v104;\n                v98 = 12;\n                v102 = v104;\n                v100 = 12;\n                if (v80 != 0) {\n                    goto lab_0x40e58e;\n                } else {\n                    goto lab_0x40e4b0;\n                }\n            } else {\n                goto lab_0x40e56e;\n            }\n        }\n    }\n  lab_0x40e5c9:\n    // 0x40e5c9\n    memcpy((int64_t *)(v94 + v89), (int64_t *)v95, (int32_t)v88);\n    v36 = v93;\n    v38 = v92;\n    v40 = v91;\n    v41 = v94;\n    v42 = v96;\n    v43 = v97;\n    v45 = v90;\n    goto lab_0x40e5d8;\n  lab_0x40f762:\n    // 0x40f762\n    *(char *)(dest_mem2 + v46) = 0;\n    int64_t result = dest_mem2; // 0x40f76a\n    if (dest_mem2 != v20 && v52 > v64) {\n        int64_t * mem2 = realloc((int64_t *)dest_mem2, (int32_t)v64); // 0x40f77b\n        result = mem2 != NULL ? (int64_t)mem2 : dest_mem2;\n    }\n    // 0x40f787\n    if (v12 != 0) {\n        // 0x40f793\n        free((int64_t *)v12);\n    }\n    if (v6 != (int64_t)&v4) {\n        // 0x40f7b2\n        free(v22);\n    }\n    if (v6 != (int64_t)&v5) {\n        // 0x40f7ce\n        free((int64_t *)v6);\n    }\n    // 0x40f7d3\n    *a2 = v46;\n    // 0x40e9d0\n    return result;\n  lab_0x40eb40:\n    // 0x40eb40\n    *(int64_t *)*(int64_t *)(v67 + 16) = v46;\n    v60 = v59;\n    v63 = v62;\n    v58 = v48;\n    v50 = v47;\n    v57 = v46;\n    goto lab_0x40ea57;\n  lab_0x40e56e:\n    // 0x40e56e\n    v99 = v87;\n    v14 = v80;\n    if (v87 == -1) {\n        goto lab_0x40e950_2;\n    } else {\n        goto lab_0x40e57b;\n    }\n  lab_0x40eb78:\n    // 0x40eb78\n    free((int64_t *)v19);\n    v17 = v18;\n    goto lab_0x40e971;\n  lab_0x40e971:\n    if (v12 == 0) {\n        // 0x40ea80\n        v10 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n        goto lab_0x40e989;\n    } else {\n        // 0x40e981\n        free((int64_t *)v12);\n        v10 = v17;\n        goto lab_0x40e989;\n    }\n  lab_0x40ea52:\n    // 0x40ea52\n    *(char *)(dest_mem3 + v46) = 37;\n    v60 = v59;\n    v63 = v62;\n    v58 = dest_mem3;\n    v50 = v54;\n    v57 = v56;\n    goto lab_0x40ea57;\n  lab_0x40e660:;\n    int64_t v273 = (int64_t)v11; // 0x40e660\n    uint32_t v274 = *(int32_t *)(v55 + 16); // 0x40e667\n    int64_t v275 = v273 + 1; // 0x40e66b\n    *v11 = 37;\n    int64_t v276 = v275; // 0x40e674\n    if (v274 % 2 != 0) {\n        // 0x40e676\n        *(char *)v275 = 39;\n        v276 = v273 + 2;\n    }\n    int64_t v277 = v274; // 0x40e667\n    int64_t v278 = v276;\n    int64_t v279 = v278; // 0x40e687\n    if ((v277 & 2) != 0) {\n        // 0x40e689\n        *(char *)v278 = 45;\n        v279 = v278 + 1;\n    }\n    int64_t v280 = v279;\n    int64_t v281 = v280; // 0x40e693\n    if ((v277 & 4) != 0) {\n        // 0x40e695\n        *(char *)v280 = 43;\n        v281 = v280 + 1;\n    }\n    int64_t v282 = v281;\n    int64_t v283 = v282; // 0x40e69f\n    if ((v277 & 8) != 0) {\n        // 0x40e6a1\n        *(char *)v282 = 32;\n        v283 = v282 + 1;\n    }\n    int64_t v284 = v283;\n    int64_t v285 = v284; // 0x40e6ab\n    if ((v277 & 16) != 0) {\n        // 0x40e6ad\n        *(char *)v284 = 35;\n        v285 = v284 + 1;\n    }\n    int64_t v286 = v285;\n    int64_t v287 = v286; // 0x40e6b7\n    if ((v277 & 64) != 0) {\n        // 0x40e6b9\n        *(char *)v286 = 73;\n        v287 = v286 + 1;\n    }\n    int64_t v288 = v287;\n    int64_t v289 = v288; // 0x40e6c3\n    if ((v277 & 32) != 0) {\n        // 0x40e6c5\n        *(char *)v288 = 48;\n        v289 = v288 + 1;\n    }\n    int64_t v290 = v289;\n    int64_t v291 = *(int64_t *)(v55 + 24); // 0x40e6cd\n    int64_t v292 = *(int64_t *)(v55 + 32); // 0x40e6d1\n    int64_t v293 = v290; // 0x40e6d8\n    if (v292 != v291) {\n        int64_t v294 = v292 - v291; // 0x40e6e7\n        memcpy((int64_t *)v290, (int64_t *)v291, (int32_t)v294);\n        v293 = (0x100000000000000 * v294 >> 56) + v290;\n    }\n    int64_t v295 = v293;\n    int64_t v296 = *(int64_t *)(v55 + 48); // 0x40e70a\n    int64_t v297 = *(int64_t *)(v55 + 56); // 0x40e70e\n    int64_t v298 = v295; // 0x40e715\n    if (v297 != v296) {\n        int64_t v299 = v297 - v296; // 0x40e724\n        memcpy((int64_t *)v295, (int64_t *)v296, (int32_t)v299);\n        v298 = (0x100000000000000 * v299 >> 56) + v295;\n    }\n    uint64_t v166 = (int64_t)v68; // 0x40e61a\n    int64_t v300 = v298;\n    int64_t v158 = v300; // 0x40e750\n    int64_t v272; // 0x40e360\n    if (v68 < 17) {\n        uint64_t v301 = v166 % 64; // 0x40e759\n        int64_t v302 = 1 << v301;\n        v272 = v300;\n        if ((v302 & 0x14180) != 0) {\n            goto lab_0x40eb58;\n        } else {\n            if (v301 == 12) {\n                // 0x40f318\n                *(char *)v300 = 76;\n                v158 = v300 + 1;\n                goto lab_0x40e780;\n            } else {\n                // 0x40e770\n                v158 = v300;\n                if ((v302 & 1536) != 0) {\n                    // 0x40eb50\n                    *(char *)v300 = 108;\n                    v272 = v300 + 1;\n                    goto lab_0x40eb58;\n                } else {\n                    goto lab_0x40e780;\n                }\n            }\n        }\n    } else {\n        goto lab_0x40e780;\n    }\n  lab_0x40ea57:;\n    int64_t v105 = v57;\n    int64_t v106 = v50;\n    int64_t v107 = v58;\n    float80_t v108 = v63;\n    float80_t v109 = v60;\n    int64_t v110 = *(int64_t *)(v55 + 8); // 0x40ea57\n    int64_t v111 = v55 + 88; // 0x40ea5b\n    int64_t v112 = *(int64_t *)v111; // 0x40ea5f\n    int64_t v113 = v49 + 1; // 0x40ea62\n    v24 = v113;\n    v37 = v109;\n    v39 = v108;\n    v25 = v107;\n    v26 = v106;\n    v44 = v111;\n    v27 = v105;\n    if (v112 != v110) {\n        int64_t v114 = v112 - v110; // 0x40e469\n        int64_t v115 = v114 + v105; // 0x40e46f\n        v28 = v115;\n        v29 = v114;\n        v31 = v105;\n        v83 = v111;\n        v30 = v106;\n        v32 = v110;\n        v33 = v107;\n        v78 = v108;\n        v76 = v109;\n        v34 = v113;\n        if (v115 < v105) {\n            // 0x40ea98\n            v88 = v114;\n            v89 = v105;\n            v90 = v111;\n            v91 = v108;\n            v92 = v109;\n            v93 = v113;\n            v94 = v107;\n            v95 = v110;\n            v96 = v106;\n            v97 = -1;\n            v14 = v107;\n            if (v106 != -1) {\n                goto lab_0x40e950_2;\n            } else {\n                goto lab_0x40e5c9;\n            }\n        } else {\n            goto lab_0x40e47b;\n        }\n    } else {\n        goto lab_0x40ea73;\n    }\n  lab_0x40e57b:;\n    int64_t v116 = v80 == v20; // 0x40e582\n    v101 = v116;\n    v98 = v99;\n    v102 = v116;\n    v100 = v99;\n    if (v80 == 0) {\n        goto lab_0x40e4b0;\n    } else {\n        goto lab_0x40e58e;\n    }\n  lab_0x40e58e:;\n    int64_t v117 = v100;\n    v101 = v102;\n    v98 = v117;\n    int64_t v118; // 0x40e360\n    if (v102 != 0) {\n        goto lab_0x40e4b0;\n    } else {\n        int64_t * mem3 = realloc((int64_t *)v80, (int32_t)v117); // 0x40e5aa\n        v118 = v80;\n        if (mem3 == NULL) {\n            goto lab_0x40eb65;\n        } else {\n            // 0x40e5b8\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)mem3;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = v117;\n            v97 = v87;\n            goto lab_0x40e5c9;\n        }\n    }\n  lab_0x40e4b0:;\n    int64_t size2 = v98;\n    int64_t * mem4 = malloc((int32_t)size2); // 0x40e4c7\n    v14 = v80;\n    if (mem4 == NULL) {\n        goto lab_0x40e950_2;\n    } else {\n        // 0x40e4ed\n        v88 = v86;\n        v89 = v85;\n        v90 = v84;\n        v91 = v79;\n        v92 = v77;\n        v93 = v75;\n        v94 = (int64_t)mem4;\n        v95 = v81;\n        v96 = size2;\n        v97 = v87;\n        if (v85 != 0 && (char)v101 != 0) {\n            int64_t * dest_mem = memcpy(mem4, (int64_t *)v80, (int32_t)v85); // 0x40e515\n            v88 = v86;\n            v89 = v85;\n            v90 = v84;\n            v91 = v79;\n            v92 = v77;\n            v93 = v75;\n            v94 = (int64_t)dest_mem;\n            v95 = 0x100000000000000 * v81 >> 56;\n            v96 = size2;\n            v97 = v87;\n        }\n        goto lab_0x40e5c9;\n    }\n  lab_0x40f72e:;\n    int64_t size3 = v51;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem5 = malloc((int32_t)size3); // 0x40fcf4\n        v14 = v48;\n        if (mem5 == NULL) {\n            goto lab_0x40e950_2;\n        } else {\n            // 0x40fd05\n            dest_mem2 = (int64_t)mem5;\n            v52 = size3;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40fd1a\n                dest_mem2 = (int64_t)memcpy(mem5, (int64_t *)v48, (int32_t)v46);\n                v52 = size3;\n            }\n            goto lab_0x40f762;\n        }\n    } else {\n        int64_t * mem6 = realloc((int64_t *)v48, (int32_t)size3); // 0x40f751\n        v118 = v48;\n        if (mem6 == NULL) {\n            goto lab_0x40eb65;\n        } else {\n            // 0x40f75f\n            dest_mem2 = (int64_t)mem6;\n            v52 = size3;\n            goto lab_0x40f762;\n        }\n    }\n  lab_0x40fd3f:\n    // 0x40fd3f\n    v14 = v48;\n    v51 = v64;\n    if (v64 == -1) {\n        goto lab_0x40e950_2;\n    } else {\n        goto lab_0x40f72e;\n    }\n  lab_0x40eaed:;\n    float80_t v119 = v61;\n    int64_t v120 = *(int64_t *)(v55 + 24); // 0x40eaed\n    int64_t v121 = *(int64_t *)(v55 + 32); // 0x40eaf1\n    int64_t v122 = (int64_t)*(int32_t *)(v55 + 16); // 0x40eaf5\n    int64_t v123 = 0; // 0x40eafc\n    int64_t v124 = v122; // 0x40eafc\n    if (v120 != v121) {\n        int64_t v125 = *(int64_t *)(v55 + 40); // 0x40eb02\n        int64_t v126 = v120; // 0x40eb0a\n        if (v125 == -1) {\n            uint64_t v127 = 0;\n            int64_t v128 = v126 + 1; // 0x40fa91\n            uint64_t v129 = (int64_t)*(char *)v126 - 48; // 0x40faa9\n            int64_t v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1); // 0x40fabb\n            int64_t v131 = v128; // 0x40fac4\n            int64_t v132 = v130; // 0x40fac4\n            int64_t v133; // 0x40e360\n            int64_t v134; // 0x40fad6\n            if (v130 < v129) {\n                // 0x40fac6\n                if (v121 == v128) {\n                    // break -> 0x40e8e0\n                    break;\n                }\n                v133 = v128;\n                v134 = v133 + 1;\n                v131 = v134;\n                v132 = -1;\n                while (*(char *)v133 != 48) {\n                    // 0x40e8cb\n                    v123 = -1;\n                    v124 = v122;\n                    if (v121 == v134) {\n                        // break (via goto) -> 0x40e8e0\n                        goto lab_0x40e8e0;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                }\n            }\n            // 0x40fa88\n            v123 = v132;\n            v124 = v122;\n            v126 = v131;\n            while (v121 != v131) {\n                // 0x40fa91\n                v127 = v132;\n                v128 = v126 + 1;\n                v129 = (int64_t)*(char *)v126 - 48;\n                v130 = v129 + (v127 < 0x199999999999999a ? 10 * v127 : -1);\n                v131 = v128;\n                v132 = v130;\n                if (v130 < v129) {\n                    // 0x40fac6\n                    v123 = -1;\n                    v124 = v122;\n                    v134 = v128;\n                    if (v121 == v128) {\n                        // break -> 0x40e8e0\n                        break;\n                    }\n                    v133 = v134;\n                    v134 = v133 + 1;\n                    v131 = v134;\n                    v132 = -1;\n                    while (*(char *)v133 != 48) {\n                        // 0x40e8cb\n                        v123 = -1;\n                        v124 = v122;\n                        if (v121 == v134) {\n                            // break (via goto) -> 0x40e8e0\n                            goto lab_0x40e8e0;\n                        }\n                        v133 = v134;\n                        v134 = v133 + 1;\n                        v131 = v134;\n                        v132 = -1;\n                    }\n                }\n                // 0x40fa88\n                v123 = v132;\n                v124 = v122;\n                v126 = v131;\n            }\n        } else {\n            int64_t v135 = 32 * v125 + v6; // 0x40eb14\n            if (*(int32_t *)v135 != 5) {\n                // 0x40f08c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v136 = *(int32_t *)(v135 + 16); // 0x40eb20\n            int64_t v137 = v136; // 0x40eb20\n            v123 = v137;\n            v124 = v122;\n            if (v136 < 0) {\n                // 0x40eb2d\n                v123 = -v137;\n                v124 = v122 | 2;\n            }\n        }\n    }\n  lab_0x40e8e0:;\n    int64_t v138 = v124;\n    int64_t v139 = v123;\n    int64_t v140 = *(int64_t *)(v55 + 48); // 0x40e8e0\n    int64_t v141 = *(int64_t *)(v55 + 56); // 0x40e8e4\n    int64_t v142; // 0x40e360\n    int64_t v143; // 0x40e360\n    int64_t v144; // 0x40e360\n    if (v140 == v141) {\n        goto lab_0x40ef90;\n    } else {\n        int64_t v145 = *(int64_t *)(v55 + 64); // 0x40e8f1\n        if (v145 == -1) {\n            int64_t v146 = v140 + 1; // 0x40faf4\n            v142 = 12;\n            v143 = 0;\n            int64_t v147 = v146; // 0x40fafd\n            if (v141 == v146) {\n                goto lab_0x40efae;\n            } else {\n                uint64_t v148 = 0;\n                int64_t v149 = v147 + 1; // 0x40fb23\n                uint64_t v150 = (int64_t)*(char *)v147 - 48; // 0x40fb2a\n                int64_t v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1); // 0x40fb43\n                int64_t v152 = v151; // 0x40fb4c\n                int64_t v153 = v149; // 0x40fb4c\n                int64_t v154; // 0x40e360\n                int64_t v155; // 0x40fb57\n                if (v151 < v150) {\n                    // 0x40fb4e\n                    v14 = v48;\n                    if (v141 == v149) {\n                        goto lab_0x40e950_2;\n                    }\n                    v154 = v149;\n                    v155 = v154 + 1;\n                    v152 = -1;\n                    v153 = v155;\n                    while (*(char *)v154 != 48) {\n                        // 0x40fb6a\n                        v14 = v48;\n                        if (v141 == v155) {\n                            goto lab_0x40e950_2;\n                        }\n                        v154 = v155;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                    }\n                }\n                // 0x40fb10\n                v144 = v152;\n                v147 = v153;\n                while (v141 != v153) {\n                    // 0x40fb19\n                    v148 = v152;\n                    v149 = v147 + 1;\n                    v150 = (int64_t)*(char *)v147 - 48;\n                    v151 = v150 + (v148 < 0x199999999999999a ? 10 * v148 : -1);\n                    v152 = v151;\n                    v153 = v149;\n                    if (v151 < v150) {\n                        // 0x40fb4e\n                        v14 = v48;\n                        if (v141 == v149) {\n                            goto lab_0x40e950_2;\n                        }\n                        v154 = v149;\n                        v155 = v154 + 1;\n                        v152 = -1;\n                        v153 = v155;\n                        while (*(char *)v154 != 48) {\n                            // 0x40fb6a\n                            v14 = v48;\n                            if (v141 == v155) {\n                                goto lab_0x40e950_2;\n                            }\n                            v154 = v155;\n                            v155 = v154 + 1;\n                            v152 = -1;\n                            v153 = v155;\n                        }\n                    }\n                    // 0x40fb10\n                    v144 = v152;\n                    v147 = v153;\n                }\n                goto lab_0x40e91c;\n            }\n        } else {\n            int64_t v156 = 32 * v145 + v6; // 0x40e903\n            if (*(int32_t *)v156 != 5) {\n                // 0x40f08c\n                abort();\n                // UNREACHABLE\n            }\n            int32_t v157 = *(int32_t *)(v156 + 16); // 0x40e910\n            v144 = v157;\n            if (v157 < 0) {\n                goto lab_0x40ef90;\n            } else {\n                goto lab_0x40e91c;\n            }\n        }\n    }\n  lab_0x40e780:\n    // 0x40e780\n    *(char *)(v158 + 1) = 0;\n    *(char *)v158 = *v65;\n    int64_t v159 = *(int64_t *)(v55 + 40); // 0x40e78d\n    int64_t v160 = 0; // 0x40e795\n    if (v159 != -1) {\n        // 0x40e79b\n        v160 = 4;\n        if (*(int32_t *)(32 * v159 + v6) != 5) {\n            // 0x40f08c\n            abort();\n            // UNREACHABLE\n        }\n    }\n    int64_t v161 = *(int64_t *)(v55 + 64); // 0x40e7be\n    if (v161 != -1) {\n        int64_t v162 = 32 * v161 + v6; // 0x40e7cc\n        if (*(int32_t *)v162 != 5) {\n            // 0x40f08c\n            abort();\n            // UNREACHABLE\n        }\n        int32_t v163 = *(int32_t *)(v162 + 16); // 0x40e7df\n        int64_t v164; // bp-8, 0x40e360\n        *(int32_t *)(v160 | (int64_t)&v164 - 1656) = v163;\n    }\n    int64_t size6; // 0x40e360\n    uint64_t v165; // 0x40e7f6\n    if (v46 > 0xfffffffffffffffd) {\n        // 0x40f228\n        v14 = v48;\n        if (v47 == -1) {\n            // 0x40e854\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        goto lab_0x40e950_2;\n    } else {\n        // 0x40e800\n        v165 = v46 + 2;\n        if (v47 >= v165) {\n            // 0x40e854\n            *(char *)(v48 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n        if (v47 != 0) {\n            // 0x40ef30\n            v14 = v48;\n            if (v47 < 0) {\n                goto lab_0x40e950_2;\n            } else {\n                int64_t v167 = 2 * v47; // 0x40ef36\n                size6 = v167;\n                if (v167 >= v165) {\n                    goto lab_0x40e822;\n                } else {\n                    goto lab_0x40ef42;\n                }\n            }\n        } else {\n            // 0x40e812\n            size6 = 12;\n            if (v165 < 13) {\n                goto lab_0x40e822;\n            } else {\n                goto lab_0x40ef42;\n            }\n        }\n    }\n  lab_0x40ea20:;\n    int64_t size4 = v53;\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem7 = malloc((int32_t)size4); // 0x40f249\n        v14 = v48;\n        if (mem7 == NULL) {\n            goto lab_0x40e950_2;\n        } else {\n            // 0x40f261\n            dest_mem3 = (int64_t)mem7;\n            v54 = size4;\n            v56 = v69;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40f272\n                dest_mem3 = (int64_t)memcpy(mem7, (int64_t *)v48, (int32_t)v46);\n                v54 = size4;\n                v56 = v69;\n            }\n            goto lab_0x40ea52;\n        }\n    } else {\n        int64_t * mem8 = realloc((int64_t *)v48, (int32_t)size4); // 0x40ea41\n        v118 = v48;\n        if (mem8 == NULL) {\n            goto lab_0x40eb65;\n        } else {\n            // 0x40ea4f\n            dest_mem3 = (int64_t)mem8;\n            v54 = size4;\n            v56 = v69;\n            goto lab_0x40ea52;\n        }\n    }\n  lab_0x40f302:\n    // 0x40f302\n    v14 = v48;\n    v53 = v69;\n    if (v69 == -1) {\n        goto lab_0x40e950_2;\n    } else {\n        goto lab_0x40ea20;\n    }\n  lab_0x40ef90:\n    // 0x40ef90\n    v142 = v70 != 65 ? 18 : 12;\n    v143 = v70 != 65 ? 6 : 0;\n    goto lab_0x40efae;\n  lab_0x40eb58:\n    // 0x40eb58\n    *(char *)v272 = 108;\n    v158 = v272 + 1;\n    goto lab_0x40e780;\n  lab_0x40eb65:\n    // 0x40eb65\n    v18 = 0x100000000000000 * (int64_t)__errno_location() >> 56;\n    v19 = v118;\n    goto lab_0x40eb78;\n  lab_0x40efae:;\n    uint64_t v168 = v142;\n    int64_t v169 = v139 >= v168 ? v139 : v168; // 0x40efb4\n    v14 = v48;\n    int64_t v170; // 0x40e360\n    int64_t v171; // 0x40e360\n    int64_t * v172; // 0x40e360\n    int64_t v173; // 0x40e360\n    int64_t v174; // bp-760, 0x40e360\n    uint64_t size5; // 0x40efb8\n    if (v169 == -1) {\n        goto lab_0x40e950_2;\n    } else {\n        // 0x40efc9\n        v173 = v143;\n        size5 = v169 + 1;\n        v172 = &v174;\n        v170 = v139;\n        v171 = v138;\n        if (size5 < 701) {\n            goto lab_0x40f029;\n        } else {\n            // 0x40efd5\n            v14 = v48;\n            if (size5 == -1) {\n                goto lab_0x40e950_2;\n            } else {\n                int64_t * mem9 = malloc((int32_t)size5); // 0x40effd\n                v14 = v48;\n                v172 = mem9;\n                v170 = 0x100000000 * v139 >> 32;\n                v171 = v138 & 0xffffffff;\n                if (mem9 == NULL) {\n                    goto lab_0x40e950_2;\n                } else {\n                    goto lab_0x40f029;\n                }\n            }\n        }\n    }\n  lab_0x40e91c:;\n    int64_t v175 = v144;\n    v142 = 12;\n    v143 = 0;\n    if (v175 == 0) {\n        goto lab_0x40efae;\n    } else {\n        // 0x40e925\n        v14 = v48;\n        v142 = v175 + 12;\n        v143 = v175;\n        if (v175 <= 0xfffffffffffffff3) {\n            goto lab_0x40efae;\n        } else {\n            goto lab_0x40e950_2;\n        }\n    }\n  lab_0x40e822:\n    // 0x40e822\n    if (v48 == 0 || v48 == v20) {\n        int64_t * mem10 = malloc((int32_t)size6); // 0x40f1e9\n        v14 = v48;\n        if (mem10 != NULL) {\n            int64_t dest_mem4 = (int64_t)mem10; // 0x40f204\n            if (v48 == v20 && v46 != 0) {\n                // 0x40f212\n                dest_mem4 = (int64_t)memcpy(mem10, (int64_t *)v48, (int32_t)v46);\n            }\n            // 0x40e854\n            *(char *)(dest_mem4 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    } else {\n        int64_t * mem11 = realloc((int64_t *)v48, (int32_t)size6); // 0x40e843\n        v14 = v48;\n        if (mem11 != NULL) {\n            // 0x40e854\n            *(char *)((int64_t)mem11 + v46) = 0;\n            *(int32_t *)(0x100000000000000 * (int64_t)__errno_location() >> 56) = 0;\n            return v166 & 0xffffffff;\n        }\n    }\n    goto lab_0x40e950_2;\n  lab_0x40ef42:\n    // 0x40ef42\n    size6 = v165;\n    v14 = v48;\n    if (v165 == -1) {\n        goto lab_0x40e950_2;\n    } else {\n        goto lab_0x40e822;\n    }\n  lab_0x40f029:;\n    int64_t v176 = v171;\n    int64_t v177 = v170;\n    int64_t * v178 = v172;\n    int64_t v179 = (int64_t)v178;\n    int64_t v180; // 0x40e360\n    int64_t v181; // 0x40e360\n    int64_t v182; // 0x40e360\n    int64_t v183; // 0x40e360\n    int64_t v184; // 0x40e360\n    int64_t v185; // 0x40e360\n    int64_t v186; // 0x40e360\n    int64_t v187; // 0x40e360\n    int64_t v188; // 0x40e360\n    int64_t v189; // 0x40e360\n    int64_t v190; // 0x40e360\n    int64_t v191; // 0x40e360\n    int64_t v192; // 0x40e360\n    int64_t v193; // 0x40e360\n    float80_t v194; // 0x40e360\n    float80_t v195; // 0x40e360\n    if (v119 != v119 || 0.0L != 0.0L) {\n        int64_t v196 = v179 + 3; // 0x40fba2\n        char * v197 = (char *)(v179 + 2);\n        if (v66 < 91) {\n            // 0x40fbb0\n            *v197 = 78;\n            *(int16_t *)v178 = 0x414e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        } else {\n            // 0x40fcdd\n            *v197 = 110;\n            *(int16_t *)v178 = 0x616e;\n            v194 = v119;\n            v195 = v62;\n            v190 = v179;\n            v189 = v196;\n            v182 = v177;\n            v184 = v176;\n            v188 = 0;\n        }\n        goto lab_0x40f4e9;\n    } else {\n        // 0x40f031\n        int64_t v198; // 0x40e360\n        float80_t v199; // 0x40e360\n        if ((__asm_fxam(v119) & 512) == 0) {\n            if ((v176 & 4) == 0) {\n                // 0x40f7f1\n                v199 = v119;\n                v198 = v179;\n                if ((v176 & 8) != 0) {\n                    // 0x40f7fe\n                    *(char *)v178 = 32;\n                    v199 = v119;\n                    v198 = v179 + 1;\n                }\n            } else {\n                // 0x40f65a\n                *(char *)v178 = 43;\n                v199 = v119;\n                v198 = v179 + 1;\n            }\n        } else {\n            // 0x40f05f\n            *(char *)v178 = 45;\n            v199 = -v119;\n            v198 = v179 + 1;\n        }\n        // 0x40f068\n        v187 = v198;\n        if (v199 <= 0.0L) {\n            if (v62 != 0.0L) {\n                // 0x40f08c\n                abort();\n                // UNREACHABLE\n            }\n            char v200 = *v65 & -33;\n            if (v200 != 70) {\n                if (v200 != 69) {\n                    if (v200 != 71) {\n                        if (v200 != 65) {\n                            // 0x40f08c\n                            abort();\n                            // UNREACHABLE\n                        }\n                        // 0x40fbd6\n                        *(char *)v187 = 48;\n                        *(char *)(v187 + 2) = 48;\n                        *(char *)(v187 + 1) = *v65 + 23;\n                        if ((v176 & 16) != 0) {\n                            // 0x40fbd6\n                            v181 = v187 + 3;\n                            goto lab_0x40fd51;\n                        } else {\n                            int64_t v201 = v187 + 3;\n                            v191 = v179;\n                            v193 = v201;\n                            v186 = v176;\n                            v181 = v201;\n                            if (v173 != 0) {\n                                goto lab_0x40fd51;\n                            } else {\n                                goto lab_0x40fc12;\n                            }\n                        }\n                    } else {\n                        // 0x40f8e3\n                        *(char *)v187 = 48;\n                        if ((v176 & 16) == 0) {\n                            goto lab_0x40f4d7;\n                        } else {\n                            int64_t v202 = v187 + 2; // 0x40f8f1\n                            if (v173 == 0) {\n                                char v203 = *nl_langinfo(0x10000); // 0x40fe3a\n                                *(char *)(v187 + 1) = v203 == 0 ? 46 : v203;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v202;\n                                v182 = v177;\n                                v184 = 0x1000000 * (int32_t)v176 >> 24;\n                                v188 = v187;\n                            } else {\n                                char * v204 = nl_langinfo(0x10000); // 0x40f938\n                                int64_t v205 = 0x100000000000000 * v173 - 0x100000000000000;\n                                char v206 = *v204; // 0x40f94b\n                                int64_t v207 = v176 & 0xffffffff; // 0x40f94e\n                                int64_t v208 = 0x100000000 * v202 >> 32; // 0x40f95c\n                                int64_t v209 = v187 + 1; // 0x40f979\n                                *(char *)v209 = v206 == 0 ? 46 : v206;\n                                v194 = 0.0L;\n                                v195 = v62;\n                                v190 = v179;\n                                v189 = v208;\n                                v182 = v177;\n                                v184 = v207;\n                                v188 = v187;\n                                if (v205 != 0) {\n                                    int64_t v210 = v208 + 1; // 0x40f98e\n                                    *(char *)v208 = 48;\n                                    while (v210 != v209 + v173) {\n                                        int64_t v211 = v210;\n                                        v210 = v211 + 1;\n                                        *(char *)v211 = 48;\n                                    }\n                                    // 0x40f99b\n                                    v194 = 0.0L;\n                                    v195 = v62;\n                                    v190 = v179;\n                                    v189 = v208 + (v205 >> 56);\n                                    v182 = v177;\n                                    v184 = v207;\n                                    v188 = v187;\n                                }\n                            }\n                            goto lab_0x40f4e9;\n                        }\n                    }\n                } else {\n                    // 0x40f688\n                    *(char *)v187 = 48;\n                    if ((v176 & 16) != 0) {\n                        // 0x40f688\n                        v180 = v187 + 1;\n                        goto lab_0x40fc37;\n                    } else {\n                        int64_t v212 = v187 + 1;\n                        v192 = v212;\n                        v183 = v177;\n                        v185 = v176;\n                        v180 = v212;\n                        if (v173 != 0) {\n                            goto lab_0x40fc37;\n                        } else {\n                            goto lab_0x40f6a8;\n                        }\n                    }\n                }\n            } else {\n                // 0x40f4c0\n                *(char *)v187 = 48;\n                if ((v176 & 16 || v173) == 0) {\n                    goto lab_0x40f4d7;\n                } else {\n                    char * v213 = nl_langinfo(0x10000); // 0x40fa0c\n                    int64_t v214 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40fa1d\n                    char v215 = *v213; // 0x40fa24\n                    *(char *)(v187 + 1) = v215 == 0 ? 46 : v215;\n                    v194 = 0.0L;\n                    v195 = v62;\n                    v190 = v179;\n                    v189 = v214;\n                    v182 = 0x100000000 * v177 >> 32;\n                    v184 = v176 & 0xffffffff;\n                    v188 = v187;\n                    if (v173 != 0) {\n                        int64_t v216 = v214 + 1; // 0x40fa60\n                        *(char *)v214 = 48;\n                        while (v216 != v187 + 2 + v173) {\n                            int64_t v217 = v216;\n                            v216 = v217 + 1;\n                            *(char *)v217 = 48;\n                        }\n                        // 0x40fa6d\n                        v194 = 0.0L;\n                        v195 = v62;\n                        v190 = v179;\n                        v189 = v214 + v173;\n                        int64_t v218; // 0x40fa35\n                        v182 = v218;\n                        int64_t v219; // 0x40fa27\n                        v184 = v219;\n                        v188 = v187;\n                    }\n                    goto lab_0x40f4e9;\n                }\n            }\n        } else {\n            float80_t v220; // 0x40e360\n            if (v220 != 0.0L) {\n                // 0x40f08c\n                abort();\n                // UNREACHABLE\n            }\n            int64_t v221 = v187 + 3; // 0x40f6db\n            char * v222 = (char *)(v187 + 2);\n            if (*v65 < 91) {\n                // 0x40f6ea\n                *v222 = 70;\n                *(int16_t *)v187 = 0x4e49;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            } else {\n                // 0x40f9c3\n                *v222 = 102;\n                *(int16_t *)v187 = 0x6e69;\n                v194 = 0.0L;\n                v195 = 0.0L;\n                v190 = v179;\n                v189 = v221;\n                v182 = v177;\n                v184 = v176;\n                v188 = 0;\n            }\n            goto lab_0x40f4e9;\n        }\n    }\n  lab_0x40f4e9:;\n    uint64_t v223 = v182;\n    int64_t v224 = v189;\n    int64_t v225 = v190;\n    float80_t v226 = v195;\n    float80_t v227 = v194;\n    int64_t v228 = v224 - v225; // 0x40f4ec\n    int64_t v229 = v228; // 0x40f4f2\n    if (v223 > v228) {\n        int64_t v230 = v184;\n        int64_t v231 = v223 - v228; // 0x40f4f4\n        int64_t v232 = v231 + v224; // 0x40f4f7\n        int64_t v233 = v232 - v225; // 0x40f4fe\n        if ((v230 & 2) != 0) {\n            // 0x40f9a3\n            v229 = v233;\n            int64_t v234 = v224; // 0x40f9a6\n            if (v231 != 0) {\n                int64_t v235 = v234 + 1; // 0x40f9b0\n                *(char *)v234 = 32;\n                v229 = v233;\n                v234 = v235;\n                while (v232 != v235) {\n                    // 0x40f9b0\n                    v235 = v234 + 1;\n                    *(char *)v234 = 32;\n                    v229 = v233;\n                    v234 = v235;\n                }\n            }\n        } else {\n            int64_t v236 = v188;\n            if ((v230 & 32) == 0 || v236 == 0) {\n                int64_t v237 = v225 + -1 - v224; // 0x40f815\n                int64_t v238 = v224; // 0x40f81b\n                if (v224 > v225) {\n                    int64_t v239 = -1;\n                    *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                    int64_t v240 = v239 - 1; // 0x40f829\n                    v238 = v225;\n                    while (v237 != v240) {\n                        // 0x40f820\n                        v239 = v240;\n                        *(char *)(v239 + v232) = *(char *)(v239 + v224);\n                        v240 = v239 - 1;\n                        v238 = v225;\n                    }\n                }\n                // 0x40f835\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v241 = v238 + 1; // 0x40f848\n                    *(char *)v238 = 32;\n                    v229 = v233;\n                    while (v241 != v238 + v231) {\n                        int64_t v242 = v241;\n                        v241 = v242 + 1;\n                        *(char *)v242 = 32;\n                        v229 = v233;\n                    }\n                }\n            } else {\n                int64_t v243 = v224; // 0x40f521\n                if (v236 < v224) {\n                    int64_t v244 = -1;\n                    *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                    int64_t v245 = v244 - 1; // 0x40f541\n                    v243 = v236;\n                    while (v245 != v236 + -1 - v224) {\n                        // 0x40f538\n                        v244 = v245;\n                        *(char *)(v244 + v232) = *(char *)(v244 + v224);\n                        v245 = v244 - 1;\n                        v243 = v236;\n                    }\n                }\n                // 0x40f54a\n                v229 = v233;\n                if (v231 != 0) {\n                    int64_t v246 = v243 + 1; // 0x40f558\n                    *(char *)v243 = 48;\n                    v229 = v233;\n                    while (v246 != v243 + v231) {\n                        int64_t v247 = v246;\n                        v246 = v247 + 1;\n                        *(char *)v247 = 48;\n                        v229 = v233;\n                    }\n                }\n            }\n        }\n    }\n    int64_t v248 = v229;\n    if (size5 <= v248) {\n        // 0x40f08c\n        abort();\n        // UNREACHABLE\n    }\n    uint64_t v249 = v248 + v46; // 0x40f588\n    int64_t dest_mem5 = v48; // 0x40f595\n    int64_t v250 = v248; // 0x40f595\n    int64_t v251 = v47; // 0x40f595\n    int64_t v252; // 0x40e360\n    if (v47 - v46 > v248) {\n        goto lab_0x40f610;\n    } else {\n        if (v249 < v46) {\n            // 0x40f7e2\n            v14 = v48;\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 != -1) {\n                goto lab_0x40e950_2;\n            } else {\n                goto lab_0x40f610;\n            }\n        } else {\n            // 0x40f5a0\n            dest_mem5 = v48;\n            v250 = v248;\n            v251 = v47;\n            if (v47 >= v249) {\n                goto lab_0x40f610;\n            } else {\n                if (v47 != 0) {\n                    // 0x40fb78\n                    v14 = v48;\n                    if (v47 < 0) {\n                        goto lab_0x40e950_2;\n                    } else {\n                        int64_t v253 = 2 * v47; // 0x40fb7e\n                        v252 = v253;\n                        if (v253 >= v249) {\n                            goto lab_0x40f5be;\n                        } else {\n                            goto lab_0x40fb8a;\n                        }\n                    }\n                } else {\n                    // 0x40f5ae\n                    v252 = 12;\n                    if (v249 < 13) {\n                        goto lab_0x40f5be;\n                    } else {\n                        goto lab_0x40fb8a;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40f610:;\n    int64_t v254 = v251;\n    int64_t v255 = dest_mem5;\n    int64_t * v256 = (int64_t *)v225; // 0x40f621\n    memcpy((int64_t *)(v255 + v46), v256, (int32_t)v250);\n    v60 = v227;\n    v63 = v226;\n    v58 = v255;\n    v50 = v254;\n    v57 = v249;\n    if (v225 != (int64_t)&v174) {\n        // 0x40f63d\n        free(v256);\n        v60 = v227;\n        v63 = v226;\n        v58 = v255;\n        v50 = v254;\n        v57 = v249;\n    }\n    goto lab_0x40ea57;\n  lab_0x40f4d7:\n    // 0x40f4d7\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v187 + 1;\n    v182 = v177;\n    v184 = v176;\n    v188 = v187;\n    goto lab_0x40f4e9;\n  lab_0x40fc37:;\n    char * v257 = nl_langinfo(0x10000); // 0x40fc6a\n    int64_t v258 = 0x100000000000000 * v187 + 0x200000000000000 >> 56; // 0x40fc7b\n    char v259 = *v257; // 0x40fc82\n    int64_t v260 = v176 & 0xffffffff; // 0x40fc85\n    int64_t v261 = 0x100000000 * v177 >> 32; // 0x40fc93\n    *(char *)v180 = v259 == 0 ? 46 : v259;\n    v192 = v258;\n    v183 = v261;\n    v185 = v260;\n    if (v173 != 0) {\n        int64_t v262 = v258 + 1; // 0x40fcc0\n        *(char *)v258 = 48;\n        while (v262 != v187 + 2 + v173) {\n            int64_t v263 = v262;\n            v262 = v263 + 1;\n            *(char *)v263 = 48;\n        }\n        // 0x40fccd\n        v192 = v258 + v173;\n        v183 = v261;\n        v185 = v260;\n    }\n    goto lab_0x40f6a8;\n  lab_0x40f6a8:\n    // 0x40f6a8\n    *(char *)(v192 + 3) = 48;\n    *(char *)v192 = *v65;\n    *(int16_t *)(v192 + 1) = 0x302b;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v179;\n    v189 = v192 + 4;\n    v182 = v183;\n    v184 = v185;\n    v188 = v187;\n    goto lab_0x40f4e9;\n  lab_0x40f5be:\n    // 0x40f5be\n    if (v48 == 0 || v48 == v20) {\n        // 0x40f85b\n        int64_t size7; // 0x40e360\n        int64_t * mem12 = malloc((int32_t)size7); // 0x40f872\n        v14 = v48;\n        if (mem12 == NULL) {\n            goto lab_0x40e950_2;\n        } else {\n            int64_t v264 = 0x100000000000000 * v248 >> 56; // 0x40f87e\n            dest_mem5 = (int64_t)mem12;\n            v250 = v264;\n            v251 = size7;\n            if (v48 == v20 && v46 != 0) {\n                // 0x40f8a9\n                dest_mem5 = (int64_t)memcpy(mem12, (int64_t *)v48, (int32_t)v46);\n                v250 = v264;\n                v251 = size7;\n            }\n            goto lab_0x40f610;\n        }\n    } else {\n        int64_t * mem13 = realloc((int64_t *)v48, (int32_t)v252); // 0x40f5ed\n        v14 = v48;\n        if (mem13 == NULL) {\n            goto lab_0x40e950_2;\n        } else {\n            // 0x40f5fb\n            dest_mem5 = (int64_t)mem13;\n            v250 = 0x100000000000000 * v248 >> 56;\n            v251 = v252;\n            goto lab_0x40f610;\n        }\n    }\n  lab_0x40fb8a:\n    // 0x40fb8a\n    v14 = v48;\n    v252 = v249;\n    if (v249 == -1) {\n        goto lab_0x40e950_2;\n    } else {\n        goto lab_0x40f5be;\n    }\n  lab_0x40fd51:;\n    int64_t v265 = v187 + 4; // 0x40fd51\n    char v266 = *nl_langinfo(0x10000); // 0x40fd9c\n    int64_t v267 = v176 & 0xffffffff; // 0x40fd9f\n    int64_t v268 = 0x100000000 * v179 >> 32; // 0x40fda6\n    *(char *)v181 = v266 == 0 ? 46 : v266;\n    v191 = v268;\n    v193 = v265;\n    v186 = v267;\n    if (v173 != 0) {\n        int64_t v269 = v265 + v173; // 0x40fdcd\n        int64_t v270 = v265 + 1; // 0x40fdd5\n        *(char *)v265 = 48;\n        v191 = v268;\n        v193 = v269;\n        v186 = v267;\n        while (v270 != v269) {\n            int64_t v271 = v270;\n            v270 = v271 + 1;\n            *(char *)v271 = 48;\n            v191 = v268;\n            v193 = v269;\n            v186 = v267;\n        }\n    }\n    goto lab_0x40fc12;\n  lab_0x40fc12:\n    // 0x40fc12\n    *(int16_t *)(v193 + 1) = 0x302b;\n    *(char *)v193 = *v65 + 15;\n    v194 = 0.0L;\n    v195 = v62;\n    v190 = v191;\n    v189 = v193 + 3;\n    v182 = v177;\n    v184 = v186;\n    v188 = 0x100000000000000 * v187 + 0x200000000000000 >> 56;\n    goto lab_0x40f4e9;\n}\n"
        },
        {
            "funcName": "function_40fe80",
            "funcStartAddr": "40fe80",
            "funcEndAddr": "40fe8e",
            "decompiledFuncCode": "int64_t function_40fe80(int64_t a1, int64_t a2) {\n    // 0x40fe80\n    int64_t v1; // 0x40fe80\n    return function_40fe90(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_40fe90",
            "funcStartAddr": "40fe90",
            "funcEndAddr": "40ffc5",
            "decompiledFuncCode": "int64_t function_40fe90(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x40ff70\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x40fecc\n    int64_t v2; // 0x40fe90\n    if (g81 < 0) {\n        int64_t v3 = function_40fe90(fd, 0, v1, a4); // 0x40ff14\n        int64_t v4 = v3 & 0xffffffff; // 0x40ff19\n        if ((int32_t)v3 < 0) {\n            // 0x40ff00\n            return v4 & 0xffffffff;\n        }\n        // 0x40ff1f\n        v2 = v4;\n        if (g81 != -1) {\n            // 0x40ff00\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x40fee7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x40fef6\n            g81 = 1;\n            // 0x40ff00\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_40fe90(fd & 0xffffffff, 0, v1, a4); // 0x40ffa7\n        int64_t v7 = v6 & 0xffffffff; // 0x40ffac\n        if ((int32_t)v6 < 0) {\n            // 0x40ff00\n            return v7 & 0xffffffff;\n        }\n        // 0x40ffb6\n        g81 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x40ff2f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x40ff3a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x40ff00\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x40ff52\n    close(fd2);\n    // 0x40ff00\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_40ffd0",
            "funcStartAddr": "40ffd0",
            "funcEndAddr": "4101e9",
            "decompiledFuncCode": "int64_t function_40ffd0(int64_t a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = a1;\n    if (a2 == NULL) {\n        // 0x410033\n        return 0;\n    }\n    uint64_t v2 = (int64_t)a2;\n    int64_t v3 = 0; // 0x40ffe8\n    int64_t v4 = *(int64_t *)(v2 + 8);\n    uint32_t v5 = *(int32_t *)v4; // 0x40fff9\n    g89 = v5;\n    int64_t v6; // 0x40ffd0\n    int64_t v7; // 0x40ffd0\n    int64_t v8; // 0x40ffd0\n    int64_t v9; // 0x40ffd0\n    int64_t v10; // 0x40ffd0\n    int64_t v11; // 0x40ffd0\n    int64_t v12; // 0x40ffd0\n    uint32_t v13; // 0x4100f0\n    int64_t * v14; // 0x410120\n    int64_t v15; // 0x410128\n    uint32_t v16; // 0x410170\n    uint32_t v17; // 0x410140\n    int64_t * v18; // 0x4100d0\n    int64_t v19; // 0x4100d0\n    int64_t * v20; // 0x4100e0\n    int64_t v21; // 0x4100e0\n    int64_t * v22; // 0x4100b8\n    int64_t v23; // 0x4100b8\n    int64_t * v24; // 0x4100a0\n    int64_t v25; // 0x4100a0\n    int64_t * v26; // 0x4101c0\n    uint32_t v27; // 0x410080\n    int64_t v28; // 0x4101c0\n    int64_t * v29; // 0x4101b0\n    int64_t v30; // 0x4101b0\n    uint32_t v31; // 0x410060\n    int64_t * v32; // 0x4101d8\n    int64_t v33; // 0x4101d8\n    int64_t v34; // 0x410183\n    uint32_t v35; // 0x410040\n    int64_t v36; // 0x410157\n    uint32_t v37; // 0x410008\n    int32_t * v38; // 0x4100f0\n    switch (v5) {\n        case 1: {\n        }\n        case 2: {\n            // 0x410080\n            v27 = *(int32_t *)&v1;\n            if (v27 < 48) {\n                // 0x410087\n                *(int32_t *)v1 = v27 + 8;\n                v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n            } else {\n                // 0x4100d0\n                v18 = (int64_t *)(v1 + 8);\n                v19 = *v18;\n                *v18 = v19 + 8;\n                v9 = v19;\n            }\n            // 0x410093\n            *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n            // break -> 0x410026\n            break;\n        }\n        case 3: {\n        }\n        case 4: {\n            // 0x410060\n            v31 = *(int32_t *)&v1;\n            if (v31 < 48) {\n                // 0x410067\n                *(int32_t *)v1 = v31 + 8;\n                v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n            } else {\n                // 0x4100e0\n                v20 = (int64_t *)(v1 + 8);\n                v21 = *v20;\n                *v20 = v21 + 8;\n                v8 = v21;\n            }\n            // 0x410073\n            *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n            // break -> 0x410026\n            break;\n        }\n        case 5: {\n        }\n        case 6: {\n        }\n        case 13: {\n        }\n        case 14: {\n            // 0x410040\n            v35 = *(int32_t *)&v1;\n            if (v35 < 48) {\n                // 0x410047\n                *(int32_t *)v1 = v35 + 8;\n                v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n            } else {\n                // 0x4100b8\n                v22 = (int64_t *)(v1 + 8);\n                v23 = *v22;\n                *v22 = v23 + 8;\n                v7 = v23;\n            }\n            // 0x410053\n            *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n            // break -> 0x410026\n            break;\n        }\n        case 7: {\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 10: {\n        }\n        case 17: {\n        }\n        case 18: {\n        }\n        case 19: {\n        }\n        case 20: {\n        }\n        case 21: {\n        }\n        case 22: {\n            // 0x410008\n            v37 = *(int32_t *)&v1;\n            if (v37 < 48) {\n                // 0x410013\n                *(int32_t *)v1 = v37 + 8;\n                v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n            } else {\n                // 0x4100a0\n                v24 = (int64_t *)(v1 + 8);\n                v25 = *v24;\n                *v24 = v25 + 8;\n                v6 = v25;\n            }\n            // 0x41001f\n            *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n            // break -> 0x410026\n            break;\n        }\n        case 11: {\n            // 0x4100f0\n            v38 = (int32_t *)(v1 + 4);\n            v13 = *v38;\n            if (v13 < 176) {\n                // 0x4100ff\n                *v38 = v13 + 16;\n                v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n            } else {\n                // 0x4101c0\n                v26 = (int64_t *)(v1 + 8);\n                v28 = *v26;\n                *v26 = v28 + 8;\n                v10 = v28;\n            }\n            // 0x41010c\n            *(int64_t *)(v4 + 16) = __asm_movsd_6(__asm_movsd(*(int64_t *)v10));\n            // break -> 0x410026\n            break;\n        }\n        case 12: {\n            // 0x410120\n            v14 = (int64_t *)(v1 + 8);\n            v15 = *v14 + 15 & -16;\n            *v14 = v15 + 16;\n            *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n            // break -> 0x410026\n            break;\n        }\n        case 15: {\n            // 0x410170\n            v16 = *(int32_t *)&v1;\n            if (v16 < 48) {\n                // 0x410177\n                *(int32_t *)v1 = v16 + 8;\n                v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n            } else {\n                // 0x4101b0\n                v29 = (int64_t *)(v1 + 8);\n                v30 = *v29;\n                *v29 = v30 + 8;\n                v12 = v30;\n            }\n            // 0x410183\n            v34 = *(int64_t *)v12;\n            *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n            // break -> 0x410026\n            break;\n        }\n        case 16: {\n            // 0x410140\n            v17 = *(int32_t *)&v1;\n            if (v17 < 48) {\n                // 0x41014b\n                *(int32_t *)v1 = v17 + 8;\n                v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n            } else {\n                // 0x4101d8\n                v32 = (int64_t *)(v1 + 8);\n                v33 = *v32;\n                *v32 = v33 + 8;\n                v11 = v33;\n            }\n            // 0x410157\n            v36 = *(int64_t *)v11;\n            *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n            // break -> 0x410026\n            break;\n        }\n        default: {\n            // 0x410033\n            return 0xffffffff;\n        }\n    }\n    // 0x410026\n    v3++;\n    int64_t v39 = v4 + 32; // 0x410031\n    while (v3 < v2) {\n        // 0x40fff0\n        v4 = v39;\n        v5 = *(int32_t *)v4;\n        g89 = v5;\n        switch (v5) {\n            case 1: {\n            }\n            case 2: {\n                // 0x410080\n                v27 = *(int32_t *)&v1;\n                if (v27 < 48) {\n                    // 0x410087\n                    *(int32_t *)v1 = v27 + 8;\n                    v9 = *(int64_t *)(v1 + 16) + (int64_t)v27;\n                } else {\n                    // 0x4100d0\n                    v18 = (int64_t *)(v1 + 8);\n                    v19 = *v18;\n                    *v18 = v19 + 8;\n                    v9 = v19;\n                }\n                // 0x410093\n                *(char *)(v4 + 16) = (char)*(int32_t *)v9;\n                // break -> 0x410026\n                break;\n            }\n            case 3: {\n            }\n            case 4: {\n                // 0x410060\n                v31 = *(int32_t *)&v1;\n                if (v31 < 48) {\n                    // 0x410067\n                    *(int32_t *)v1 = v31 + 8;\n                    v8 = *(int64_t *)(v1 + 16) + (int64_t)v31;\n                } else {\n                    // 0x4100e0\n                    v20 = (int64_t *)(v1 + 8);\n                    v21 = *v20;\n                    *v20 = v21 + 8;\n                    v8 = v21;\n                }\n                // 0x410073\n                *(int16_t *)(v4 + 16) = (int16_t)*(int32_t *)v8;\n                // break -> 0x410026\n                break;\n            }\n            case 5: {\n            }\n            case 6: {\n            }\n            case 13: {\n            }\n            case 14: {\n                // 0x410040\n                v35 = *(int32_t *)&v1;\n                if (v35 < 48) {\n                    // 0x410047\n                    *(int32_t *)v1 = v35 + 8;\n                    v7 = *(int64_t *)(v1 + 16) + (int64_t)v35;\n                } else {\n                    // 0x4100b8\n                    v22 = (int64_t *)(v1 + 8);\n                    v23 = *v22;\n                    *v22 = v23 + 8;\n                    v7 = v23;\n                }\n                // 0x410053\n                *(int32_t *)(v4 + 16) = *(int32_t *)v7;\n                // break -> 0x410026\n                break;\n            }\n            case 7: {\n            }\n            case 8: {\n            }\n            case 9: {\n            }\n            case 10: {\n            }\n            case 17: {\n            }\n            case 18: {\n            }\n            case 19: {\n            }\n            case 20: {\n            }\n            case 21: {\n            }\n            case 22: {\n                // 0x410008\n                v37 = *(int32_t *)&v1;\n                if (v37 < 48) {\n                    // 0x410013\n                    *(int32_t *)v1 = v37 + 8;\n                    v6 = *(int64_t *)(v1 + 16) + (int64_t)v37;\n                } else {\n                    // 0x4100a0\n                    v24 = (int64_t *)(v1 + 8);\n                    v25 = *v24;\n                    *v24 = v25 + 8;\n                    v6 = v25;\n                }\n                // 0x41001f\n                *(int64_t *)(v4 + 16) = *(int64_t *)v6;\n                // break -> 0x410026\n                break;\n            }\n            case 11: {\n                // 0x4100f0\n                v38 = (int32_t *)(v1 + 4);\n                v13 = *v38;\n                if (v13 < 176) {\n                    // 0x4100ff\n                    *v38 = v13 + 16;\n                    v10 = *(int64_t *)(v1 + 16) + (int64_t)v13;\n                } else {\n                    // 0x4101c0\n                    v26 = (int64_t *)(v1 + 8);\n                    v28 = *v26;\n                    *v26 = v28 + 8;\n                    v10 = v28;\n                }\n                // 0x41010c\n                *(int64_t *)(v4 + 16) = __asm_movsd_6(__asm_movsd(*(int64_t *)v10));\n                // break -> 0x410026\n                break;\n            }\n            case 12: {\n                // 0x410120\n                v14 = (int64_t *)(v1 + 8);\n                v15 = *v14 + 15 & -16;\n                *v14 = v15 + 16;\n                *(float80_t *)(v4 + 16) = *(float80_t *)v15;\n                // break -> 0x410026\n                break;\n            }\n            case 15: {\n                // 0x410170\n                v16 = *(int32_t *)&v1;\n                if (v16 < 48) {\n                    // 0x410177\n                    *(int32_t *)v1 = v16 + 8;\n                    v12 = *(int64_t *)(v1 + 16) + (int64_t)v16;\n                } else {\n                    // 0x4101b0\n                    v29 = (int64_t *)(v1 + 8);\n                    v30 = *v29;\n                    *v29 = v30 + 8;\n                    v12 = v30;\n                }\n                // 0x410183\n                v34 = *(int64_t *)v12;\n                *(int64_t *)(v4 + 16) = v34 == 0 ? (int64_t)\"(NULL)\" : v34;\n                // break -> 0x410026\n                break;\n            }\n            case 16: {\n                // 0x410140\n                v17 = *(int32_t *)&v1;\n                if (v17 < 48) {\n                    // 0x41014b\n                    *(int32_t *)v1 = v17 + 8;\n                    v11 = *(int64_t *)(v1 + 16) + (int64_t)v17;\n                } else {\n                    // 0x4101d8\n                    v32 = (int64_t *)(v1 + 8);\n                    v33 = *v32;\n                    *v32 = v33 + 8;\n                    v11 = v33;\n                }\n                // 0x410157\n                v36 = *(int64_t *)v11;\n                *(int64_t *)(v4 + 16) = v36 == 0 ? (int64_t)L\"(NULL)\" : v36;\n                // break -> 0x410026\n                break;\n            }\n            default: {\n                // 0x410033\n                return 0xffffffff;\n            }\n        }\n        // 0x410026\n        v3++;\n        v39 = v4 + 32;\n    }\n    // 0x410033\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4101f0",
            "funcStartAddr": "4101f0",
            "funcEndAddr": "410ef9",
            "decompiledFuncCode": "int64_t function_4101f0(int64_t a1, int64_t * a2, int64_t * a3) {\n    int64_t v1 = (int64_t)a3;\n    int64_t v2 = (int64_t)a2;\n    int64_t v3 = v2 + 32; // 0x4101f2\n    int64_t v4 = v1 + 16; // 0x4101f6\n    *a2 = 0;\n    int64_t * v5 = (int64_t *)(v2 + 8); // 0x410229\n    *v5 = v3;\n    *a3 = 0;\n    int64_t * v6 = (int64_t *)(v1 + 8); // 0x41023e\n    *v6 = v4;\n    char v7 = *(char *)a1; // 0x41026b\n    int32_t v8 = 0; // 0x410270\n    int64_t v9 = 0; // 0x410270\n    int64_t v10 = v3; // 0x410270\n    int64_t v11 = a1; // 0x410270\n    int64_t v12 = 0; // 0x410270\n    char v13; // 0x4101f0\n    int64_t v14; // 0x4101f0\n    int64_t v15; // 0x4101f0\n    int64_t v16; // 0x4101f0\n    int64_t v17; // 0x4101f0\n    int64_t v18; // 0x4101f0\n    int64_t v19; // 0x4101f0\n    int64_t v20; // 0x4101f0\n    int64_t v21; // 0x4101f0\n    int64_t v22; // 0x4101f0\n    int64_t v23; // 0x4101f0\n    int64_t v24; // 0x4101f0\n    int64_t v25; // 0x4101f0\n    int64_t v26; // 0x4101f0\n    int64_t v27; // 0x4101f0\n    int64_t v28; // 0x4101f0\n    int64_t v29; // 0x4101f0\n    int64_t v30; // 0x4101f0\n    int32_t v31; // 0x4101f0\n    int64_t v32; // 0x4101f0\n    int64_t v33; // 0x410260\n    int64_t v34; // 0x4102b0\n    int64_t * v35; // 0x4102d3\n    int64_t v36; // 0x410336\n    if (v7 != 0) {\n        // 0x410260\n        v13 = v7;\n        v14 = 0;\n        int64_t v37 = 7; // 0x4101f0\n        int64_t v38 = 7; // 0x4101f0\n        v25 = a1;\n        v21 = v3;\n        int64_t v39 = 0; // 0x4101f0\n        v32 = 0;\n        v31 = 0;\n        while (true) {\n          lab_0x410260:\n            // 0x410260\n            v22 = v21;\n            int64_t v40 = v25;\n            v15 = v14;\n            v33 = v40 + 1;\n            if (v13 == 37) {\n                // 0x4102a3\n                v34 = v22 + 88 * v15;\n                *(int64_t *)v34 = v40;\n                int32_t * v41 = (int32_t *)(v34 + 16); // 0x4102b8\n                *v41 = 0;\n                *(int64_t *)(v34 + 24) = 0;\n                *(int64_t *)(v34 + 32) = 0;\n                *(int64_t *)(v34 + 40) = -1;\n                *(int64_t *)(v34 + 48) = 0;\n                *(int64_t *)(v34 + 56) = 0;\n                *(int64_t *)(v34 + 64) = -1;\n                *(int64_t *)(v34 + 80) = -1;\n                unsigned char v42 = *(char *)v33; // 0x4102f4\n                int64_t v43 = v42; // 0x4102f4\n                int64_t v44 = v43; // 0x4102fd\n                int64_t v45 = v33; // 0x4102fd\n                if (v42 < 58) {\n                    int64_t v46 = v33 + 1; // 0x410690\n                    char v47 = *(char *)v46; // 0x410694\n                    int64_t v48 = v46; // 0x41069d\n                    while (v47 < 58) {\n                        // 0x410690\n                        v46 = v48 + 1;\n                        v47 = *(char *)v46;\n                        v48 = v46;\n                    }\n                    // 0x41069f\n                    v44 = v43;\n                    v45 = v33;\n                    if (v47 == 36) {\n                        uint64_t v49 = 0;\n                        uint64_t v50 = (int64_t)((0x1000000 * (int32_t)v43 >> 24) - 48);\n                        int64_t v51 = v33 + 1; // 0x410d35\n                        char v52 = *(char *)v51; // 0x410d35\n                        int64_t v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50; // 0x410d39\n                        int64_t v54 = v33; // 0x410d4d\n                        int64_t v55 = v51; // 0x410d4d\n                        char v56 = v52; // 0x410d4d\n                        int64_t v57 = v53; // 0x410d4d\n                        bool v58 = v52 < 58; // 0x410d4d\n                        bool v59 = v52 < 58; // 0x410d4d\n                        char v60 = v52; // 0x410d4d\n                        int64_t v61 = v51; // 0x410d4d\n                        int64_t v62; // 0x410d62\n                        int64_t v63; // 0x410d35\n                        char v64; // 0x410d35\n                        int64_t v65; // 0x410d39\n                        if (v53 < v50) {\n                            if (!v59) {\n                                goto lab_0x4109b8_9;\n                            }\n                            // 0x410d33\n                            v62 = v60;\n                            v63 = v61 + 1;\n                            v64 = *(char *)v63;\n                            v65 = v62 - 49;\n                            v54 = v61;\n                            v55 = v63;\n                            v56 = v64;\n                            v57 = v65;\n                            v58 = v64 < 58;\n                            v61 = v63;\n                            while (v65 < v62 - 48) {\n                                // 0x410d4f\n                                if (v64 >= 58) {\n                                    goto lab_0x4109b8_9;\n                                }\n                                // 0x410d33\n                                v62 = v64;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                            }\n                        }\n                        int64_t v66 = v57;\n                        int64_t v67 = v55; // 0x410d08\n                        while (v58) {\n                            // 0x410d0e\n                            v49 = v66;\n                            v50 = (int64_t)((0x1000000 * (int32_t)(int64_t)v56 >> 24) - 48);\n                            v51 = v67 + 1;\n                            v52 = *(char *)v51;\n                            v53 = (v49 < 0x199999999999999a ? 10 * v49 : -1) + v50;\n                            v54 = v67;\n                            v55 = v51;\n                            v56 = v52;\n                            v57 = v53;\n                            v58 = v52 < 58;\n                            v59 = v52 < 58;\n                            v60 = v52;\n                            v61 = v51;\n                            if (v53 < v50) {\n                                if (!v59) {\n                                    goto lab_0x4109b8_9;\n                                }\n                                // 0x410d33\n                                v62 = v60;\n                                v63 = v61 + 1;\n                                v64 = *(char *)v63;\n                                v65 = v62 - 49;\n                                v54 = v61;\n                                v55 = v63;\n                                v56 = v64;\n                                v57 = v65;\n                                v58 = v64 < 58;\n                                v61 = v63;\n                                while (v65 < v62 - 48) {\n                                    // 0x410d4f\n                                    if (v64 >= 58) {\n                                        goto lab_0x4109b8_9;\n                                    }\n                                    // 0x410d33\n                                    v62 = v64;\n                                    v63 = v61 + 1;\n                                    v64 = *(char *)v63;\n                                    v65 = v62 - 49;\n                                    v54 = v61;\n                                    v55 = v63;\n                                    v56 = v64;\n                                    v57 = v65;\n                                    v58 = v64 < 58;\n                                    v61 = v63;\n                                }\n                            }\n                            // 0x410d04\n                            v66 = v57;\n                            v67 = v55;\n                        }\n                        // 0x410e0d\n                        if (v66 >= 0xffffffffffffffff) {\n                            goto lab_0x4109b8_9;\n                        }\n                        int64_t v68 = v54 + 2; // 0x410e1e\n                        v44 = (int64_t)*(char *)v68;\n                        v45 = v68;\n                    }\n                }\n                int64_t v69 = v44; // 0x4101f0\n                v36 = v45;\n                char v70; // 0x4101f0\n                while (true) {\n                    // 0x410336\n                    v36++;\n                    v70 = v69;\n                    if (v70 != 39) {\n                        switch (v70) {\n                            case 45: {\n                                // 0x410350\n                                *v41 = *v41 | 2;\n                                // break -> 0x410330\n                                break;\n                            }\n                            case 43: {\n                                // 0x410360\n                                *v41 = *v41 | 4;\n                                // break -> 0x410330\n                                break;\n                            }\n                            case 32: {\n                                // 0x410370\n                                *v41 = *v41 | 8;\n                                // break -> 0x410330\n                                break;\n                            }\n                            case 35: {\n                                // 0x410380\n                                *v41 = *v41 | 16;\n                                // break -> 0x410330\n                                break;\n                            }\n                            case 48: {\n                                // 0x410390\n                                *v41 = *v41 | 32;\n                                // break -> 0x410330\n                                break;\n                            }\n                            default: {\n                                if (v70 != 73) {\n                                    // break -> 0x410398\n                                    break;\n                                }\n                                // 0x410326\n                                *v41 = *v41 | 64;\n                                // break -> 0x410330\n                                break;\n                            }\n                        }\n                    } else {\n                        // 0x41033f\n                        *v41 = *v41 | 1;\n                    }\n                    // 0x410330\n                    v69 = (int64_t)*(char *)v36;\n                }\n                int64_t v71; // 0x4101f0\n                int64_t * v72; // 0x4102c1\n                int64_t * v73; // 0x4102ca\n                if (v70 == 42) {\n                    // 0x41040d\n                    *v72 = v71;\n                    *v73 = v36;\n                    char v74 = *(char *)v36; // 0x41042d\n                    int64_t v75 = v74; // 0x41042d\n                    int64_t v76 = v75 + 0xffffffd0; // 0x410431\n                    v26 = v76 & 0xffffffff;\n                    int64_t v77 = v36; // 0x410437\n                    if ((char)v76 < 10) {\n                        int64_t v78 = v77;\n                        int64_t v79 = v78 + 1; // 0x41080d\n                        char v80 = *(char *)v79; // 0x410811\n                        v77 = v79;\n                        while (v80 < 58) {\n                            // 0x41080d\n                            v78 = v77;\n                            v79 = v78 + 1;\n                            v80 = *(char *)v79;\n                            v77 = v79;\n                        }\n                        // 0x41081d\n                        v26 = v79;\n                        int64_t v81 = v75; // 0x410821\n                        int64_t v82 = v36; // 0x410821\n                        int64_t v83 = 0; // 0x410821\n                        if (v80 != 36) {\n                            goto lab_0x41043d;\n                        } else {\n                            uint64_t v84 = v83;\n                            int64_t v85 = v82;\n                            int64_t v86 = v81;\n                            int64_t v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                            int64_t v88 = v86; // 0x410852\n                            int64_t v89 = v85; // 0x410852\n                            int64_t v90 = v87; // 0x410852\n                            uint64_t v91 = v90;\n                            int64_t v92 = v89;\n                            int64_t v93 = v88;\n                            int64_t v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91; // 0x410857\n                            int64_t v95 = v92 + 1; // 0x41085a\n                            char v96 = *(char *)v95; // 0x41085a\n                            int64_t v97 = v96; // 0x41085a\n                            while (v94 < v91) {\n                                // 0x410871\n                                v88 = v97;\n                                v89 = v95;\n                                v90 = -1;\n                                if (v96 >= 58) {\n                                    goto lab_0x4109b8_9;\n                                }\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                            }\n                            // 0x41082b\n                            v81 = v97;\n                            v82 = v95;\n                            v83 = v94;\n                            while (v96 < 58) {\n                                // 0x410834\n                                v84 = v83;\n                                v85 = v82;\n                                v86 = v81;\n                                v87 = v84 < 0x199999999999999a ? 10 * v84 : -1;\n                                v88 = v86;\n                                v89 = v85;\n                                v90 = v87;\n                                v91 = v90;\n                                v92 = v89;\n                                v93 = v88;\n                                v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                v95 = v92 + 1;\n                                v96 = *(char *)v95;\n                                v97 = v96;\n                                while (v94 < v91) {\n                                    // 0x410871\n                                    v88 = v97;\n                                    v89 = v95;\n                                    v90 = -1;\n                                    if (v96 >= 58) {\n                                        goto lab_0x4109b8_9;\n                                    }\n                                    v91 = v90;\n                                    v92 = v89;\n                                    v93 = v88;\n                                    v94 = (0x100000000 * v93 - 0x3000000000 >> 32) + v91;\n                                    v95 = v92 + 1;\n                                    v96 = *(char *)v95;\n                                    v97 = v96;\n                                }\n                                // 0x41082b\n                                v81 = v97;\n                                v82 = v95;\n                                v83 = v94;\n                            }\n                            int64_t v98 = v94 - 1; // 0x410eab\n                            if (v98 >= 0xfffffffffffffffe) {\n                                goto lab_0x4109b8_9;\n                            }\n                            // 0x410eb9\n                            *v35 = v98;\n                            v30 = v28;\n                            v24 = v92 + 2;\n                            v27 = v94;\n                            v20 = v98;\n                            goto lab_0x41044c;\n                        }\n                    } else {\n                        goto lab_0x41043d;\n                    }\n                } else {\n                    // 0x41039d\n                    v29 = v28;\n                    v23 = v36;\n                    int64_t v99; // 0x4101f0\n                    v19 = v99;\n                    v18 = v71;\n                    v17 = v16;\n                    if (v70 < 58) {\n                        // 0x410abb\n                        *v72 = v71;\n                        char * v100 = (char *)v71;\n                        char v101 = *v100; // 0x410ac0\n                        int64_t v102 = v71; // 0x410ac9\n                        char * v103 = v100; // 0x410ac9\n                        int64_t v104 = v36; // 0x410ac9\n                        int64_t v105 = v71; // 0x410ac9\n                        if (v101 < 58) {\n                            int64_t v106 = v102;\n                            int64_t v107 = v106 + 1; // 0x410ad3\n                            char * v108 = (char *)v107;\n                            char v109 = *v108; // 0x410ad3\n                            v102 = v107;\n                            while (v109 < 58) {\n                                // 0x410ad3\n                                v106 = v102;\n                                v107 = v106 + 1;\n                                v108 = (char *)v107;\n                                v109 = *v108;\n                                v102 = v107;\n                            }\n                            // 0x410ae2\n                            v103 = v108;\n                            v104 = v106 + 2;\n                            v105 = v107;\n                        }\n                        int64_t v110 = v105;\n                        int64_t v111 = v104;\n                        char * v112 = v103;\n                        *v73 = v110;\n                        unsigned char v113 = *v112; // 0x410b05\n                        v29 = v28;\n                        v23 = v111;\n                        v19 = v113;\n                        v18 = v110;\n                        v17 = v16;\n                    }\n                    goto lab_0x4103a8;\n                }\n            } else {\n                goto lab_0x410268;\n            }\n        }\n    }\n  lab_0x410272:\n    // 0x410272\n    *(int64_t *)(88 * v12 + v10) = v11;\n    *(int64_t *)(v2 + 16) = v9;\n    *(int64_t *)(v2 + 24) = (int64_t)v8;\n    // 0x410294\n    return 0;\n  lab_0x4109b8_9:;\n    int64_t v114 = *v6;\n    if (v4 != v114) {\n        // 0x4109c3\n        free((int64_t *)v114);\n    }\n    int64_t v115 = *v5; // 0x4109d5\n    if (v3 != v115) {\n        // 0x4109e0\n        free((int64_t *)v115);\n    }\n    // 0x4109e5\n    *__errno_location() = 22;\n    // 0x410294\n    return 0xffffffff;\n  lab_0x410b90_5:;\n    // 0x410b90\n    int64_t v116; // 0x4101f0\n    int64_t v117 = v116;\n    int64_t v118 = v117; // 0x410b95\n    int64_t v119; // 0x4101f0\n    if (v4 == v117) {\n        goto lab_0x410ba9_3;\n    } else {\n        // 0x410b97\n        v119 = v118;\n        free((int64_t *)v119);\n        goto lab_0x410ba9_3;\n    }\n  lab_0x410ba9_3:;\n    int64_t v120 = *v5; // 0x410ba9\n    int32_t * v121; // 0x410bb9\n    if (v3 == v120) {\n        // 0x410bb9\n        v121 = __errno_location();\n        *v121 = 12;\n        return 0xffffffff;\n    }\n    // 0x410bb4\n    free((int64_t *)v120);\n    // 0x410bb9\n    v121 = __errno_location();\n    *v121 = 12;\n    return 0xffffffff;\n  lab_0x410268:;\n    int64_t v122 = v32;\n    int32_t v123 = v31;\n    char v124 = *(char *)v33; // 0x41026b\n    v13 = v124;\n    v14 = v15;\n    v25 = v33;\n    v21 = v22;\n    v32 = v122;\n    v31 = v123;\n    v8 = v123;\n    v9 = v122;\n    v10 = v22;\n    v11 = v33;\n    v12 = v15;\n    if (v124 == 0) {\n        // break -> 0x410272\n        goto lab_0x410272;\n    }\n    goto lab_0x410260;\n  lab_0x41043d:;\n    int64_t v125 = v26;\n    int64_t v126 = *v35; // 0x41043d\n    v30 = v28;\n    v24 = v36;\n    v27 = v125;\n    v20 = v126;\n    if (v126 == -1) {\n        // 0x4107e3\n        *v35 = v28;\n        if (v28 == -1) {\n            goto lab_0x4109b8_9;\n        }\n        // 0x4107fb\n        v30 = v28 + 1;\n        v24 = v36;\n        v27 = v125;\n        v20 = v28;\n    }\n    goto lab_0x41044c;\n  lab_0x4103a8:;\n    int64_t v337 = v17;\n    int64_t v338 = v18;\n    int64_t v339 = v19;\n    int64_t v340 = v29;\n    int64_t v149 = v340; // 0x4103ab\n    int64_t v147 = v339; // 0x4103ab\n    int64_t v145 = v338; // 0x4103ab\n    int64_t v143 = v337; // 0x4103ab\n    int64_t v186; // 0x4101f0\n    int64_t v190; // 0x4101f0\n    int64_t v189; // 0x4101f0\n    int64_t v188; // 0x4101f0\n    int64_t v187; // 0x4101f0\n    if ((char)v339 == 46) {\n        int64_t v341 = v23;\n        v186 = v338 + 1;\n        v187 = v340;\n        v188 = v341;\n        v189 = v338;\n        v190 = v337;\n        goto lab_0x4104b0;\n    } else {\n        goto lab_0x4103b1;\n    }\n  lab_0x41044c:;\n    uint64_t v127 = v20;\n    int64_t v128 = v27;\n    int64_t v129 = v24;\n    int64_t v130 = v30;\n    int64_t v131 = *v6; // 0x41044c\n    int64_t v132 = v128; // 0x410453\n    int64_t v133 = v16; // 0x410453\n    int64_t v134 = v131; // 0x410453\n    int64_t v135; // 0x4101f0\n    int64_t v136; // 0x4101f0\n    int64_t v137; // 0x4101f0\n    int64_t v138; // 0x4106ff\n    if (v16 > v127) {\n        goto lab_0x41045c;\n    } else {\n        uint64_t v139 = 2 * v16; // 0x4106f5\n        v138 = v139 > v127 ? v139 : v127 + 1;\n        v116 = v131;\n        if (v138 >= 0x800000000000000) {\n            goto lab_0x410b90_5;\n        }\n        int64_t size = 32 * v138; // 0x41071e\n        if (v4 == v131) {\n            int64_t * mem = malloc((int32_t)size); // 0x410c7c\n            if (mem == NULL) {\n                goto lab_0x410ba9_3;\n            }\n            // 0x410c9e\n            v135 = (int64_t)mem;\n            goto lab_0x410ca9;\n        } else {\n            int64_t * mem2 = realloc((int64_t *)v131, (int32_t)size); // 0x41073f\n            int64_t v140 = *v6; // 0x410744\n            v116 = v140;\n            if (mem2 == NULL) {\n                goto lab_0x410b90_5;\n            }\n            int64_t v141 = (int64_t)mem2; // 0x41073f\n            v137 = v128;\n            v136 = v141;\n            v135 = v141;\n            if (v4 == v140) {\n                goto lab_0x410ca9;\n            } else {\n                goto lab_0x41077d;\n            }\n        }\n    }\n  lab_0x4103b1:;\n    int64_t v142 = v143;\n    int64_t v144 = v145;\n    int64_t v146 = v147;\n    int64_t v148 = v149;\n    int64_t v150 = 0; // 0x4103b8\n    int64_t v151 = v146; // 0x4103b8\n    int64_t v152 = v144; // 0x4103b8\n    uint64_t v153; // 0x4101f0\n    int64_t v154; // 0x4101f0\n    int64_t v155; // 0x4103f7\n    while (true) {\n        int64_t v156 = v152;\n        v154 = v151;\n        v153 = v150;\n        v155 = v156 + 1;\n        char v157 = v154; // 0x4103fb\n        int64_t v158; // 0x4101f0\n        if (v157 != 104) {\n            switch (v157) {\n                case 76: {\n                    // 0x410560\n                    v158 = v153 & 0xfffffffb | 4;\n                    // break -> 0x4103f3\n                    break;\n                }\n                default: {\n                    if ((v154 & 223) != 90 == (v157 != 116)) {\n                        // break -> 0x410568\n                        break;\n                    }\n                }\n                case 108: {\n                }\n                case 106: {\n                    // 0x4103f0\n                    v158 = v153 + 8 & 0xffffffff;\n                    // break -> 0x4103f3\n                    break;\n                }\n            }\n        } else {\n            // 0x410400\n            v158 = v153 & 0xffffffff | (int64_t)(1 << (int32_t)v153 % 2);\n        }\n        int64_t v159 = v158;\n        unsigned char v160 = *(char *)v155; // 0x4103f3\n        v150 = v159;\n        v151 = v160;\n        v152 = v155;\n    }\n    uint64_t v161 = v154 + 0xffffffdb; // 0x410568\n    int64_t v162 = v161 % 256; // 0x410574\n    g90 = v162;\n    int64_t v163 = 17; // 0x410577\n    int64_t v164 = v154; // 0x410577\n    int64_t v165 = v154; // 0x410577\n    switch ((char)v161) {\n        case 0: {\n            goto lab_0x4105e1;\n        }\n        case 28: {\n            goto lab_0x410932;\n        }\n        case 30: {\n            // 0x41095e\n            v163 = 14;\n            v164 = 99;\n            goto lab_0x410589;\n        }\n        case 32: {\n            goto lab_0x410932;\n        }\n        case 33: {\n            goto lab_0x410932;\n        }\n        case 34: {\n            goto lab_0x410932;\n        }\n        case 46: {\n            // 0x41094f\n            v163 = 16;\n            v164 = 115;\n            goto lab_0x410589;\n        }\n        case 51: {\n            goto lab_0x41096d;\n        }\n        case 60: {\n            goto lab_0x410932;\n        }\n        case 62: {\n            int32_t v166 = v153; // 0x410889\n            int32_t v167 = v166 - 7; // 0x410889\n            int64_t v168 = v167 < 0 == (6 - v166 & v166) < 0 == (v167 != 0) ? 14 : 13; // 0x41088f\n            v163 = v168;\n            v164 = v154;\n            goto lab_0x410589;\n        }\n        case 63: {\n            goto lab_0x4108e0;\n        }\n        case 64: {\n            goto lab_0x410932;\n        }\n        case 65: {\n            goto lab_0x410932;\n        }\n        case 66: {\n            goto lab_0x410932;\n        }\n        case 68: {\n            goto lab_0x4108e0;\n        }\n        case 73: {\n            uint32_t v169 = (int32_t)v153; // 0x41089f\n            v163 = 22;\n            v164 = v154;\n            if (v169 <= 15) {\n                // 0x4108a5\n                v163 = 22;\n                v164 = v154;\n                if ((v153 & 4) == 0) {\n                    // 0x4108ad\n                    v163 = 21;\n                    v164 = v154;\n                    if (v169 <= 7) {\n                        // 0x4108bb\n                        v163 = 18;\n                        v164 = v154;\n                        if ((v153 & 2) == 0) {\n                            int64_t v170 = v153 % 2 == 0 ? 20 : 19; // 0x4108cf\n                            v163 = v170;\n                            v164 = v154;\n                        }\n                    }\n                }\n            }\n            goto lab_0x410589;\n        }\n        case 74: {\n            goto lab_0x41096d;\n        }\n        case 75: {\n            goto lab_0x410589;\n        }\n        case 78: {\n            int32_t v171 = v153; // 0x410580\n            int32_t v172 = v171 - 7; // 0x410580\n            int64_t v173 = v172 < 0 == (6 - v171 & v171) < 0 == (v172 != 0) ? 16 : 15; // 0x410586\n            v163 = v173;\n            v164 = v154;\n            goto lab_0x410589;\n        }\n        case 80: {\n            goto lab_0x41096d;\n        }\n        case 83: {\n            goto lab_0x41096d;\n        }\n        default: {\n            goto lab_0x4109b8_9;\n        }\n    }\n  lab_0x41045c:;\n    int64_t v174 = v134;\n    int64_t v175 = v133;\n    int64_t v176 = v132;\n    if (v176 <= v127) {\n        int64_t v177 = v174 - 32; // 0x410473\n        int64_t v178 = v176; // 0x4101f0\n        int64_t v179 = v178;\n        int64_t v180 = v179 + 1; // 0x410468\n        *(int32_t *)(v177 + 32 * v180) = 0;\n        v178 = v180;\n        while (v180 <= v127) {\n            // 0x410468\n            v179 = v178;\n            v180 = v179 + 1;\n            *(int32_t *)(v177 + 32 * v180) = 0;\n            v178 = v180;\n        }\n        // 0x410481\n        *a3 = v180;\n    }\n    int32_t * v181 = (int32_t *)(v174 + 32 * v127); // 0x41048d\n    int32_t v182 = *v181; // 0x41048d\n    if (v182 != 0) {\n        // 0x410b0e\n        if (v182 != 5) {\n            goto lab_0x4109b8_9;\n        }\n        unsigned char v183 = *(char *)v129; // 0x410b17\n        v29 = v130;\n        v23 = v129 + 1;\n        v19 = v183;\n        v18 = v129;\n        v17 = v175;\n        goto lab_0x4103a8;\n    } else {\n        // 0x410497\n        *v181 = 5;\n        unsigned char v184 = *(char *)v129; // 0x41049d\n        int64_t v185 = v129 + 1;\n        v149 = v130;\n        v147 = v184;\n        v145 = v129;\n        v143 = v175;\n        v186 = v185;\n        v187 = v130;\n        v188 = v185;\n        v189 = v129;\n        v190 = v175;\n        if (v184 != 46) {\n            goto lab_0x4103b1;\n        } else {\n            goto lab_0x4104b0;\n        }\n    }\n  lab_0x4104b0:;\n    int64_t v191 = v190;\n    int64_t v192 = v189;\n    int64_t v193 = v188;\n    int64_t v194 = v187;\n    int64_t v195 = v186;\n    char * v196 = (char *)v195; // 0x4104b0\n    char v197 = *v196; // 0x4104b0\n    int64_t * v198; // 0x4102d8\n    *v198 = v192;\n    int64_t v199; // 0x4101f0\n    int64_t v200; // 0x4101f0\n    int64_t v201; // 0x4101f0\n    int64_t v202; // 0x4101f0\n    int64_t v203; // 0x4101f0\n    int64_t * v204; // 0x4102e1\n    int64_t * v205; // 0x4102ea\n    int64_t v206; // 0x4104c9\n    if (v197 != 42) {\n        char v207 = *v196; // 0x4106b0\n        int64_t v208 = v193; // 0x4106b9\n        char * v209; // 0x4101f0\n        int64_t v210; // 0x4101f0\n        if (v207 < 58) {\n            int64_t v211 = v208;\n            int64_t v212 = v211 + 1; // 0x4106c0\n            char * v213 = (char *)v212;\n            char v214 = *v213; // 0x4106c4\n            v208 = v212;\n            while (v214 < 58) {\n                // 0x4106c0\n                v211 = v208;\n                v212 = v211 + 1;\n                v213 = (char *)v212;\n                v214 = *v213;\n                v208 = v212;\n            }\n            // 0x4106ce\n            v209 = v213;\n            v210 = v212;\n        } else {\n            // 0x4106b0\n            v209 = (char *)v193;\n            v210 = v193;\n        }\n        int64_t v215 = v210;\n        char * v216 = v209;\n        *v204 = v215;\n        unsigned char v217 = *v216; // 0x4106e1\n        v149 = v194;\n        v147 = v217;\n        v145 = v215;\n        v143 = v191;\n        goto lab_0x4103b1;\n    } else {\n        // 0x4104bf\n        v206 = v192 + 2;\n        *v204 = v206;\n        char v218 = *(char *)v206; // 0x4104df\n        int64_t v219 = v218; // 0x4104df\n        int64_t v220 = v219 + 0xffffffd0; // 0x4104e3\n        v201 = v220 & 0xffffffff;\n        int64_t v221 = v206; // 0x4104e9\n        if ((char)v220 < 10) {\n            int64_t v222 = v221;\n            int64_t v223 = v222 + 1; // 0x410d94\n            char v224 = *(char *)v223; // 0x410d98\n            v221 = v223;\n            while (v224 < 58) {\n                // 0x410d94\n                v222 = v221;\n                v223 = v222 + 1;\n                v224 = *(char *)v223;\n                v221 = v223;\n            }\n            // 0x410da4\n            v201 = v223;\n            int64_t v225 = v219; // 0x410da8\n            int64_t v226 = v206; // 0x410da8\n            int64_t v227 = 0; // 0x410da8\n            if (v224 != 36) {\n                goto lab_0x4104ef;\n            } else {\n                uint64_t v228 = v227;\n                int64_t v229 = v226;\n                int64_t v230 = v225;\n                int64_t v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                int64_t v232 = v230; // 0x410dd9\n                int64_t v233 = v229; // 0x410dd9\n                int64_t v234 = v231; // 0x410dd9\n                uint64_t v235 = v234;\n                int64_t v236 = v233;\n                int64_t v237 = v232;\n                int64_t v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235; // 0x410dde\n                int64_t v239 = v236 + 1; // 0x410de5\n                char v240 = *(char *)v239; // 0x410de9\n                int64_t v241 = v240; // 0x410de9\n                while (v238 < v235) {\n                    // 0x410df7\n                    v232 = v241;\n                    v233 = v239;\n                    v234 = -1;\n                    if (v240 >= 58) {\n                        goto lab_0x4109b8_9;\n                    }\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                }\n                // 0x410db2\n                v225 = v241;\n                v226 = v239;\n                v227 = v238;\n                while (v240 < 58) {\n                    // 0x410dbb\n                    v228 = v227;\n                    v229 = v226;\n                    v230 = v225;\n                    v231 = v228 < 0x199999999999999a ? 10 * v228 : -1;\n                    v232 = v230;\n                    v233 = v229;\n                    v234 = v231;\n                    v235 = v234;\n                    v236 = v233;\n                    v237 = v232;\n                    v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                    v239 = v236 + 1;\n                    v240 = *(char *)v239;\n                    v241 = v240;\n                    while (v238 < v235) {\n                        // 0x410df7\n                        v232 = v241;\n                        v233 = v239;\n                        v234 = -1;\n                        if (v240 >= 58) {\n                            goto lab_0x4109b8_9;\n                        }\n                        v235 = v234;\n                        v236 = v233;\n                        v237 = v232;\n                        v238 = (0x100000000 * v237 - 0x3000000000 >> 32) + v235;\n                        v239 = v236 + 1;\n                        v240 = *(char *)v239;\n                        v241 = v240;\n                    }\n                    // 0x410db2\n                    v225 = v241;\n                    v226 = v239;\n                    v227 = v238;\n                }\n                int64_t v242 = v238 - 1; // 0x410ec7\n                if (v242 >= 0xfffffffffffffffe) {\n                    goto lab_0x4109b8_9;\n                }\n                // 0x410ed5\n                *v205 = v242;\n                v203 = v194;\n                v200 = v236 + 2;\n                v202 = v238;\n                v199 = v242;\n                goto lab_0x4104fe;\n            }\n        } else {\n            goto lab_0x4104ef;\n        }\n    }\n  lab_0x4105e1:;\n    int64_t v243 = v165;\n    *(char *)(v34 + 72) = (char)v243;\n    int64_t v244 = *a2; // 0x4105e6\n    *(int64_t *)(v34 + 8) = v155;\n    int64_t v245 = v244 + 1; // 0x4105ee\n    *a2 = v245;\n    int64_t v246; // 0x4101f0\n    int64_t v247; // 0x4101f0\n    int64_t dest_mem; // 0x4101f0\n    int64_t v248; // 0x4101f0\n    int64_t v249; // 0x410ee3\n    if (v246 > v245) {\n        // 0x4105fa\n        goto lab_0x410268;\n    } else {\n        if (v246 < 0) {\n            // 0x410ee3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x410b90_5;\n        }\n        int64_t v250 = 2 * v246; // 0x410616\n        if (v250 >= 0x2e8ba2e8ba2e8bb) {\n            // 0x410ee3\n            v249 = *v6;\n            v116 = v249;\n            goto lab_0x410b90_5;\n        }\n        int64_t v251 = *v5; // 0x410627\n        int64_t size2 = 176 * v246; // 0x410639\n        if (v3 == v251) {\n            int64_t * mem3 = malloc((int32_t)size2); // 0x410789\n            v248 = (int64_t)mem3;\n            v247 = v245;\n            if (mem3 == NULL) {\n                int64_t v252 = *v6; // 0x410cec\n                v118 = v252;\n                if (v4 == v252) {\n                    // 0x410bb9\n                    v121 = __errno_location();\n                    *v121 = 12;\n                    return 0xffffffff;\n                }\n                // 0x410b97\n                v119 = v118;\n                free((int64_t *)v119);\n                goto lab_0x410ba9_3;\n            }\n            goto lab_0x4107a4;\n        } else {\n            int64_t * mem4 = realloc((int64_t *)v251, (int32_t)size2); // 0x41064b\n            if (mem4 == NULL) {\n                // 0x410ee3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x410b90_5;\n            }\n            int64_t v253 = (int64_t)mem4; // 0x41064b\n            int64_t v254 = *v5; // 0x41066d\n            int64_t v255 = *a2; // 0x410671\n            dest_mem = v253;\n            v248 = v253;\n            v247 = v255;\n            if (v3 == v254) {\n                goto lab_0x4107a4;\n            } else {\n                goto lab_0x41067f;\n            }\n        }\n    }\n  lab_0x410932:\n    // 0x410932\n    v163 = 12;\n    v164 = v154;\n    if ((int32_t)v153 <= 15) {\n        int64_t v256 = (v153 & 4) != 0 ? 12 : 11; // 0x410947\n        v163 = v256;\n        v164 = v154;\n    }\n    goto lab_0x410589;\n  lab_0x41096d:;\n    uint32_t v335 = (int32_t)v153; // 0x410975\n    v163 = 10;\n    v164 = v154;\n    if (v335 <= 15) {\n        // 0x41097b\n        v163 = 10;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x410983\n            v163 = 8;\n            v164 = v154;\n            if (v335 <= 7) {\n                // 0x410991\n                v163 = 2;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x41099e\n                    v163 = 2 * v153 & 2 ^ 6;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x410589;\n  lab_0x4108e0:;\n    uint32_t v336 = (int32_t)v153; // 0x4108e8\n    v163 = 9;\n    v164 = v154;\n    if (v336 <= 15) {\n        // 0x4108ee\n        v163 = 9;\n        v164 = v154;\n        if ((v153 & 4) == 0) {\n            // 0x4108f6\n            v163 = 7;\n            v164 = v154;\n            if (v336 <= 7) {\n                // 0x410904\n                v163 = 1;\n                v164 = v154;\n                if ((v153 & 2) == 0) {\n                    // 0x410911\n                    v163 = (2 * v153 & 2 ^ 2) + 3;\n                    v164 = v154;\n                }\n            }\n        }\n    }\n    goto lab_0x410589;\n  lab_0x410589:;\n    int64_t v257 = v164;\n    int64_t v258 = v163;\n    int64_t v259; // 0x4101f0\n    int64_t v260; // 0x4101f0\n    int64_t * v261; // 0x4102ef\n    if (v259 == -1) {\n        // 0x410a94\n        *v261 = v148;\n        if (v148 == -1) {\n            goto lab_0x4109b8_9;\n        }\n        // 0x410aac\n        v260 = v148;\n    } else {\n        // 0x410593\n        *v261 = v259;\n        v260 = v259;\n    }\n    uint64_t v262 = v260;\n    int64_t v263 = *v6; // 0x410598\n    int64_t v264 = v258; // 0x41059f\n    int64_t v265 = v162; // 0x41059f\n    int64_t v266 = v263; // 0x41059f\n    int64_t v267; // 0x4101f0\n    int64_t v268; // 0x4101f0\n    int64_t v269; // 0x4101f0\n    int64_t v270; // 0x4101f0\n    int64_t v271; // 0x4101f0\n    if (v142 > v262) {\n        goto lab_0x4105a5;\n    } else {\n        uint64_t v272 = 2 * v142; // 0x410a08\n        int64_t v273 = v272 > v262 ? v272 : v262 + 1; // 0x410a12\n        v116 = v263;\n        if (v273 >= 0x800000000000000) {\n            goto lab_0x410b90_5;\n        }\n        int64_t size3 = 32 * v273; // 0x410a31\n        int64_t v274 = 0x100000000 * v258 >> 32; // 0x410a44\n        if (v4 == v263) {\n            int64_t * mem5 = malloc((int32_t)size3); // 0x410b29\n            v268 = (int64_t)mem5;\n            v270 = v274 & 0xffffffff;\n            if (mem5 == NULL) {\n                goto lab_0x410ba9_3;\n            }\n            goto lab_0x410b46;\n        } else {\n            int64_t * mem6 = realloc((int64_t *)v263, (int32_t)size3); // 0x410a51\n            if (mem6 == NULL) {\n                // 0x410ee3\n                v249 = *v6;\n                v116 = v249;\n                goto lab_0x410b90_5;\n            }\n            int64_t v275 = (int64_t)mem6; // 0x410a51\n            int64_t v276 = v274 & 0xffffffff; // 0x410a56\n            int64_t v277 = *v6; // 0x410a81\n            v269 = v276;\n            v271 = v162;\n            v267 = v275;\n            v268 = v275;\n            v270 = v276;\n            if (v4 == v277) {\n                goto lab_0x410b46;\n            } else {\n                goto lab_0x410a8b;\n            }\n        }\n    }\n  lab_0x4105a5:;\n    int64_t v278 = v266;\n    int64_t v279 = v265;\n    int64_t v280 = v264;\n    if (v279 <= v262) {\n        int64_t v281 = v278 - 32; // 0x4105bb\n        int64_t v282 = v279; // 0x4101f0\n        int64_t v283 = v282;\n        int64_t v284 = v283 + 1; // 0x4105b0\n        *(int32_t *)(v281 + 32 * v284) = 0;\n        v282 = v284;\n        while (v284 <= v262) {\n            // 0x4105b0\n            v283 = v282;\n            v284 = v283 + 1;\n            *(int32_t *)(v281 + 32 * v284) = 0;\n            v282 = v284;\n        }\n        // 0x4105c9\n        *a3 = v284;\n    }\n    int32_t * v285 = (int32_t *)(v278 + 32 * v262); // 0x4105d5\n    int32_t v286 = *v285; // 0x4105d5\n    int32_t v287 = v280;\n    if (v286 != 0) {\n        // 0x4109fa\n        v165 = v257;\n        if (v286 != v287) {\n            goto lab_0x4109b8_9;\n        }\n    } else {\n        // 0x4105df\n        *v285 = v287;\n        v165 = v257;\n    }\n    goto lab_0x4105e1;\n  lab_0x410ca9:;\n    int64_t v288 = v135;\n    int64_t v289 = 32 * v128; // 0x410ca9\n    int64_t * v290; // 0x4101f0\n    memcpy((int64_t *)v288, v290, (int32_t)v289);\n    v137 = v289;\n    v136 = v288;\n    goto lab_0x41077d;\n  lab_0x41077d:;\n    int64_t v291 = v136;\n    int64_t v292 = v137;\n    *v6 = v291;\n    v132 = v292;\n    v133 = v138;\n    v134 = v291;\n    goto lab_0x41045c;\n  lab_0x4104ef:;\n    int64_t v293 = v201;\n    int64_t v294 = *v205; // 0x4104ef\n    v203 = v194;\n    v200 = v206;\n    v202 = v293;\n    v199 = v294;\n    if (v294 == -1) {\n        // 0x410d6a\n        *v205 = v194;\n        if (v194 == -1) {\n            goto lab_0x4109b8_9;\n        }\n        // 0x410d82\n        v203 = v194 + 1;\n        v200 = v206;\n        v202 = v293;\n        v199 = v194;\n    }\n    goto lab_0x4104fe;\n  lab_0x4104fe:;\n    uint64_t v295 = v199;\n    int64_t v296 = v202;\n    int64_t v297 = v200;\n    int64_t v298 = v203;\n    int64_t v299 = *v6; // 0x4104fe\n    int64_t v300 = v296; // 0x410505\n    int64_t v301 = v191; // 0x410505\n    int64_t v302 = v299; // 0x410505\n    int64_t v303; // 0x4101f0\n    int64_t v304; // 0x4101f0\n    int64_t v305; // 0x4101f0\n    int64_t v306; // 0x410be2\n    if (v191 > v295) {\n        goto lab_0x41050e;\n    } else {\n        uint64_t v307 = 2 * v191; // 0x410bd8\n        v306 = v307 > v295 ? v307 : v295 + 1;\n        v116 = v299;\n        if (v306 >= 0x800000000000000) {\n            goto lab_0x410b90_5;\n        }\n        int64_t size4 = 32 * v306; // 0x410bfd\n        if (v4 == v299) {\n            int64_t * mem7 = malloc((int32_t)size4); // 0x410e2e\n            if (mem7 == NULL) {\n                goto lab_0x410ba9_3;\n            }\n            // 0x410e50\n            v304 = (int64_t)mem7;\n            goto lab_0x410e5b;\n        } else {\n            int64_t * mem8 = realloc((int64_t *)v299, (int32_t)size4); // 0x410c1e\n            int64_t v308 = *v6; // 0x410c23\n            v116 = v308;\n            if (mem8 == NULL) {\n                goto lab_0x410b90_5;\n            }\n            int64_t v309 = (int64_t)mem8; // 0x410c1e\n            v305 = v296;\n            v303 = v309;\n            v304 = v309;\n            if (v4 == v308) {\n                goto lab_0x410e5b;\n            } else {\n                goto lab_0x410c5c;\n            }\n        }\n    }\n  lab_0x4107a4:;\n    int64_t v310 = v247;\n    int64_t v311 = v248;\n    int64_t * v312; // 0x4101f0\n    dest_mem = (int64_t)memcpy((int64_t *)v311, v312, 88 * (int32_t)v310);\n    goto lab_0x41067f;\n  lab_0x41067f:;\n    int64_t v313 = dest_mem;\n    *v5 = v313;\n    goto lab_0x410268;\n  lab_0x410b46:;\n    int64_t v314 = v270;\n    int64_t v315 = v268;\n    int64_t v316 = 32 * v162; // 0x410b5c\n    memcpy((int64_t *)v315, v290, (int32_t)v316);\n    v269 = v314;\n    v271 = v316;\n    v267 = v315;\n    goto lab_0x410a8b;\n  lab_0x410a8b:;\n    int64_t v317 = v267;\n    int64_t v318 = v271;\n    int64_t v319 = v269;\n    *v6 = v317;\n    v264 = v319;\n    v265 = v318;\n    v266 = v317;\n    goto lab_0x4105a5;\n  lab_0x41050e:;\n    int64_t v320 = v302;\n    int64_t v321 = v301;\n    int64_t v322 = v300;\n    if (v322 <= v295) {\n        int64_t v323 = v320 - 32; // 0x410523\n        int64_t v324 = v322; // 0x4101f0\n        int64_t v325 = v324;\n        int64_t v326 = v325 + 1; // 0x410518\n        *(int32_t *)(v323 + 32 * v326) = 0;\n        v324 = v326;\n        while (v326 <= v295) {\n            // 0x410518\n            v325 = v324;\n            v326 = v325 + 1;\n            *(int32_t *)(v323 + 32 * v326) = 0;\n            v324 = v326;\n        }\n        // 0x410531\n        *a3 = v326;\n    }\n    int32_t * v327 = (int32_t *)(v320 + 32 * v295); // 0x41053e\n    int32_t v328 = *v327; // 0x41053e\n    if (v328 != 0) {\n        // 0x410c65\n        if (v328 != 5) {\n            goto lab_0x4109b8_9;\n        }\n        unsigned char v329 = *(char *)v297; // 0x410c6e\n        v149 = v298;\n        v147 = v329;\n        v145 = v297;\n        v143 = v321;\n    } else {\n        // 0x410548\n        *v327 = 5;\n        unsigned char v330 = *(char *)v297; // 0x410551\n        v149 = v298;\n        v147 = v330;\n        v145 = v297;\n        v143 = v321;\n    }\n    goto lab_0x4103b1;\n  lab_0x410e5b:;\n    int64_t v331 = v304;\n    int64_t v332 = 32 * v296; // 0x410e5b\n    memcpy((int64_t *)v331, v290, (int32_t)v332);\n    v305 = v332;\n    v303 = v331;\n    goto lab_0x410c5c;\n  lab_0x410c5c:;\n    int64_t v333 = v303;\n    int64_t v334 = v305;\n    *v6 = v333;\n    v300 = v334;\n    v301 = v306;\n    v302 = v333;\n    goto lab_0x41050e;\n}\n"
        },
        {
            "funcName": "function_410f00",
            "funcStartAddr": "410f00",
            "funcEndAddr": "410f5d",
            "decompiledFuncCode": "int64_t function_410f00(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x410f00\n    return function_401da0();\n}\n"
        },
        {
            "funcName": "function_410f60",
            "funcStartAddr": "410f60",
            "funcEndAddr": "410f61",
            "decompiledFuncCode": "int64_t function_410f60(void) {\n    // 0x410f60\n    int64_t result; // 0x410f60\n    return result;\n}\n"
        },
        {
            "funcName": "function_410f70",
            "funcStartAddr": "410f70",
            "funcEndAddr": "410f88",
            "decompiledFuncCode": "int64_t function_410f70(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x410f70\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g20);\n}\n"
        },
        {
            "funcName": "function_410f88",
            "funcStartAddr": "410f88",
            "funcEndAddr": "410fa8",
            "decompiledFuncCode": "int64_t function_410f88(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g16; // 0x410f92\n    while (*(int64_t *)v1 != -1) {\n        // 0x410f93\n        v1 -= 8;\n    }\n    // 0x410fa4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_df.elf"
}