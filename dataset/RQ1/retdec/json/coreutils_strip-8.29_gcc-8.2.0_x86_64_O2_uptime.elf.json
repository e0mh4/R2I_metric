{
    "funcInfo": [
        {
            "funcName": "function_401ba0",
            "funcStartAddr": "401ba0",
            "funcEndAddr": "401ba5",
            "decompiledFuncCode": "int64_t function_401ba0(void) {\n    // 0x401ba0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ba5",
            "funcStartAddr": "401ba5",
            "funcEndAddr": "401baa",
            "decompiledFuncCode": "int64_t function_401ba5(void) {\n    // 0x401ba5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401baa",
            "funcStartAddr": "401baa",
            "funcEndAddr": "401baf",
            "decompiledFuncCode": "int64_t function_401baa(void) {\n    // 0x401baa\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401baf",
            "funcStartAddr": "401baf",
            "funcEndAddr": "401bb4",
            "decompiledFuncCode": "int64_t function_401baf(void) {\n    // 0x401baf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bb4",
            "funcStartAddr": "401bb4",
            "funcEndAddr": "401bb9",
            "decompiledFuncCode": "int64_t function_401bb4(void) {\n    // 0x401bb4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bb9",
            "funcStartAddr": "401bb9",
            "funcEndAddr": "401bbe",
            "decompiledFuncCode": "int64_t function_401bb9(void) {\n    // 0x401bb9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401bc0",
            "funcStartAddr": "401bc0",
            "funcEndAddr": "401cc8",
            "decompiledFuncCode": "int64_t function_401bc0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401bc5\n    function_404040(a2);\n    setlocale(LC_ALL, (char *)&g12);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x401bc0\n    function_408950(0x402490, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    function_403f30(v1, a2, \"uptime\", \"GNU coreutils\", (int64_t)g20, 0x402130);\n    int64_t v3 = function_407200(v1, a2, (int64_t *)&g12, &g2, 0, 0x402130); // 0x401c4f\n    if ((int32_t)v3 != -1) {\n        // 0x401cbe\n        function_402130(1);\n        // UNREACHABLE\n    }\n    int32_t v4 = *(int32_t *)0x60c2bc; // 0x401c59\n    int32_t v5 = (int32_t)a1 - v4; // 0x401c60\n    if (v5 == 0) {\n        // 0x401c7e\n        function_401db0((int64_t)\"/var/run/utmp\", 1, (int64_t)&g12, (int64_t)&g2, 0);\n        // 0x401c75\n        return 0;\n    }\n    int64_t v6 = 8 * (int64_t)v4 + a2;\n    if (v5 == 1) {\n        int64_t v7 = *(int64_t *)v6; // 0x401c69\n        function_401db0(v7, 0, (int64_t)&g12, (int64_t)&g2, 0);\n        // 0x401c75\n        return 0;\n    }\n    // 0x401c8f\n    function_405c60(*(int64_t *)(v6 + 8));\n    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n    // 0x401cbe\n    function_402130(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401cd0",
            "funcEndAddr": "401cfb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401cd0\n    int64_t v1; // 0x401cd0\n    __libc_start_main(0x401bc0, (int32_t)a4, (char **)&v1, (void (*)())0x4088e0, (void (*)())0x408940, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401cfb",
            "funcStartAddr": "401cfb",
            "funcEndAddr": "401d1a",
            "decompiledFuncCode": "int64_t function_401cfb(void) {\n    // 0x401cfb\n    return &g30;\n}\n"
        },
        {
            "funcName": "function_401d1a",
            "funcStartAddr": "401d1a",
            "funcEndAddr": "401d51",
            "decompiledFuncCode": "int64_t function_401d1a(void) {\n    // 0x401d1a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401d51",
            "funcStartAddr": "401d51",
            "funcEndAddr": "401da8",
            "decompiledFuncCode": "int64_t function_401d51(void) {\n    // 0x401d51\n    if (g34 != 0) {\n        // 0x401da7\n        int64_t result; // 0x401d51\n        return result;\n    }\n    int64_t v1 = g35; // 0x401d84\n    int64_t result2; // 0x401d96\n    if (g35 >= ((int64_t)&g17 - (int64_t)&g16 >> 3) - 1) {\n        // 0x401d96\n        result2 = function_401cfb();\n        g34 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g17 - (int64_t)&g16 >> 3) - 1) {\n        // 0x401d86\n        v1++;\n    }\n    // 0x401d7a\n    g35 = v1;\n    // 0x401d96\n    result2 = function_401cfb();\n    g34 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401da8",
            "funcStartAddr": "401da8",
            "funcEndAddr": "401dad",
            "decompiledFuncCode": "int64_t function_401da8(void) {\n    // 0x401da8\n    return function_401d1a();\n}\n"
        },
        {
            "funcName": "function_401db0",
            "funcStartAddr": "401db0",
            "funcEndAddr": "402130",
            "decompiledFuncCode": "int64_t function_401db0(int64_t a1, uint32_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    float64_t loadavg[1]; // 0x401f81\n    int16_t * v1 = NULL; // bp-104, 0x401dcd\n    int64_t v2; // bp-112, 0x401db0\n    int64_t v3 = function_407360(a1, &v2, (int64_t *)&v1, (int64_t)a2); // 0x401dd6\n    if ((int32_t)v3 != 0) {\n        // 0x4020ff\n        error(1, *__errno_location(), \"%s\", (char *)function_405ae0(0, 3, a1));\n        return &g53;\n    }\n    // 0x401de3\n    int64_t time_val; // bp-96, 0x401db0\n    if (v2 == 0) {\n        // 0x4020ba\n        time_val = time(NULL);\n    } else {\n        int64_t v4 = 0;\n        int64_t v5 = 0;\n        int64_t v6 = (int64_t)v1;\n        int64_t v7 = v2 - 1;\n        int16_t v8 = *(int16_t *)v6; // 0x401e21\n        int64_t v9; // 0x401db0\n        int64_t v10; // 0x401db0\n        int64_t v11; // 0x401e30\n        while (*(char *)(v6 + 44) != 0 && v8 == 7) {\n            // 0x401e2c\n            v11 = v5 + 1;\n            v10 = v4;\n            v9 = v11;\n            if (v7 == 0) {\n                // break (via goto) -> 0x401e40\n                goto lab_0x401e40;\n            }\n            v5 = v11;\n            v6 += 384;\n            v7--;\n            v8 = *(int16_t *)v6;\n        }\n        int64_t v12 = v4; // 0x401e04\n        if (v8 == 2) {\n            // 0x401e06\n            v12 = (int64_t)*(int32_t *)(v6 + 340);\n        }\n        int64_t v13 = v12;\n        v10 = v13;\n        v9 = v5;\n        while (v7 != 0) {\n            // 0x401e1d\n            v4 = v13;\n            v6 += 384;\n            v7--;\n            v8 = *(int16_t *)v6;\n            while (*(char *)(v6 + 44) != 0 && v8 == 7) {\n                // 0x401e2c\n                v11 = v5 + 1;\n                v10 = v4;\n                v9 = v11;\n                if (v7 == 0) {\n                    // break (via goto) -> 0x401e40\n                    goto lab_0x401e40;\n                }\n                v5 = v11;\n                v6 += 384;\n                v7--;\n                v8 = *(int16_t *)v6;\n            }\n            // 0x401e00\n            v12 = v4;\n            if (v8 == 2) {\n                // 0x401e06\n                v12 = (int64_t)*(int32_t *)(v6 + 340);\n            }\n            // 0x401e0d\n            v13 = v12;\n            v10 = v13;\n            v9 = v5;\n        }\n      lab_0x401e40:;\n        int64_t time_val2 = time(NULL); // 0x401e42\n        time_val = time_val2;\n        if (v10 != 0) {\n            struct tm * time_info = localtime((int32_t *)&time_val); // 0x401ed5\n            if (time_info == NULL) {\n                // 0x402075\n                __printf_chk(1, dcgettext(NULL, \" ??:????  \", 5));\n            } else {\n                // 0x401eeb\n                function_403f10((int64_t)g31, (int64_t)dcgettext(NULL, \" %H:%M:%S  \", 5), (int64_t)time_info, 0, 0);\n            }\n            int64_t v14 = time_val2 - v10; // 0x401e55\n            if (v14 == -1) {\n                // 0x402095\n                __printf_chk(1, dcgettext(NULL, \"up ???? days ??:??,  \", 5));\n            } else {\n                if (v14 > 0x1517f) {\n                    // 0x401fe0\n                    __printf_chk(1, dcngettext(NULL, \"up %ld day %2d:%02d,  \", \"up %ld days %2d:%02d,  \", 0, 5));\n                } else {\n                    // 0x401f25\n                    __printf_chk(1, dcgettext(NULL, \"up  %2d:%02d,  \", 5));\n                }\n            }\n            // 0x401f4b\n            __printf_chk(1, dcngettext(NULL, \"%lu user\", \"%lu users\", (int32_t)v9, 5));\n            int64_t v15; // bp-88, 0x401db0\n            loadavg[0] = (int64_t)&v15;\n            int32_t result = getloadavg(loadavg, 3); // 0x401f81\n            if (result != -1) {\n                if (result < 1) {\n                    // 0x401fd1\n                    return result;\n                }\n                int64_t v16 = __asm_movsd_3(__asm_movsd(v15)); // 0x401fa7\n                char * v17 = dcgettext(NULL, \",  load average: %.2f\", 5); // 0x401fad\n                __asm_movsd(v16);\n                __printf_chk(1, v17);\n                if (result != 1) {\n                    // 0x402017\n                    int64_t v18; // 0x401db0\n                    __printf_chk(1, \", %.2f\", (float64_t)(int64_t)__asm_movsd(v18));\n                    if (result != 2) {\n                        // 0x402036\n                        __printf_chk(1, \", %.2f\", (float64_t)(int64_t)__asm_movsd(v18));\n                    }\n                }\n            }\n            int64_t v19 = (int64_t)g31; // 0x402050\n            int64_t * v20 = (int64_t *)(v19 + 40); // 0x402057\n            uint64_t result2 = *v20; // 0x402057\n            if (result2 >= *(int64_t *)(v19 + 48)) {\n                // 0x401fd1\n                return __overflow((struct _IO_FILE *)v19, 10);\n            }\n            // 0x402065\n            *v20 = result2 + 1;\n            *(char *)result2 = 10;\n            // 0x401fd1\n            return result2;\n        }\n    }\n    // 0x4020c6\n    error(1, *__errno_location(), dcgettext(NULL, \"couldn't get boot time\", 5));\n    // 0x401fd1\n    return __overflow((struct _IO_FILE *)1, 10);\n}\n"
        },
        {
            "funcName": "function_402130",
            "funcStartAddr": "402130",
            "funcEndAddr": "402465",
            "decompiledFuncCode": "int64_t function_402130(int64_t a1) {\n    int32_t status = a1; // 0x402146\n    if (status != 0) {\n        // 0x40214a\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x40216f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402176\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"Print the current time, the length of time the system has been up,\\nthe number of users on the system, and the average number of jobs\\nin the run queue over the last 1, 5 and 15 minutes.\", 5));\n    __printf_chk(1, dcgettext(NULL, \"  Processes in\\nan uninterruptible sleep state also contribute to the load average.\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"If FILE is not specified, use %s.  %s as FILE is common.\\n\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g31);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g31);\n    int64_t v1 = &g1; // bp-136, 0x402244\n    bool v2; // 0x402130\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x4022c8\n    int64_t v6 = *(int64_t *)v5; // 0x4022cc\n    int64_t v7 = 7; // 0x4022d2\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"uptime\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x4022de\n        char v11 = *(char *)v9; // 0x4022de\n        char v12 = v11; // 0x4022de\n        bool v13 = false; // 0x4022de\n        while (v10 == v11) {\n            // 0x4022d4\n            v7--;\n            int64_t v14 = v9 + v3; // 0x4022de\n            int64_t v15 = v8 + v3; // 0x4022de\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x4022ea\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 7;\n    }\n    // 0x4022ea\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x4023fc;\n        } else {\n            // 0x4023e6\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40243b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40234c;\n            } else {\n                goto lab_0x4023fc;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x40234c;\n        } else {\n            // 0x402332\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x40243b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x40234c;\n            } else {\n                goto lab_0x40234c;\n            }\n        }\n    }\n  lab_0x4023fc:\n    // 0x4023fc\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40238c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40216f\n    exit(status);\n    // UNREACHABLE\n  lab_0x40234c:\n    // 0x40234c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x40238c\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x40216f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402470",
            "funcStartAddr": "402470",
            "funcEndAddr": "402478",
            "decompiledFuncCode": "int64_t function_402470(int64_t a1) {\n    // 0x402470\n    g37 = a1;\n    int64_t result; // 0x402470\n    return result;\n}\n"
        },
        {
            "funcName": "function_402480",
            "funcStartAddr": "402480",
            "funcEndAddr": "402488",
            "decompiledFuncCode": "int64_t function_402480(int64_t a1) {\n    // 0x402480\n    g36 = a1;\n    int64_t result; // 0x402480\n    return result;\n}\n"
        },
        {
            "funcName": "function_402490",
            "funcStartAddr": "402490",
            "funcEndAddr": "40252e",
            "decompiledFuncCode": "int64_t function_402490(void) {\n    // 0x402490\n    int32_t * err_num; // 0x4024a6\n    if ((int32_t)function_407ab0((int64_t)g31) == 0) {\n        goto lab_0x4024bc;\n    } else {\n        // 0x4024a6\n        err_num = __errno_location();\n        if (g36 == 0) {\n            goto lab_0x4024d3;\n        } else {\n            // 0x4024b7\n            if (*err_num != 32) {\n                goto lab_0x4024d3;\n            } else {\n                goto lab_0x4024bc;\n            }\n        }\n    }\n  lab_0x4024bc:;\n    int64_t result = function_407ab0((int64_t)g33); // 0x4024c3\n    if ((int32_t)result == 0) {\n        // 0x4024cc\n        return result;\n    }\n    // 0x40250e\n    _exit(g21);\n    // UNREACHABLE\n  lab_0x4024d3:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x4024df\n    if (g37 == 0) {\n        // 0x402519\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x4024f3\n        error(0, *err_num, \"%s: %s\", (char *)function_405ab0((int64_t)g37), v1);\n    }\n    // 0x40250e\n    _exit(g21);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402530",
            "funcStartAddr": "402530",
            "funcEndAddr": "402581",
            "decompiledFuncCode": "int64_t function_402530(int64_t stream, int64_t a2, int64_t a3) {\n    // 0x402530\n    if (a3 == 0) {\n        // 0x402580\n        int64_t result; // 0x402530\n        return result;\n    }\n    int32_t ** v1 = __ctype_tolower_loc(); // 0x40254b\n    int64_t v2 = a2; // 0x402553\n    unsigned char v3 = *(char *)v2; // 0x402558\n    v2++;\n    int32_t c = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x402566\n    int32_t fputc_rc = fputc(c, (struct _IO_FILE *)stream); // 0x402569\n    while (v2 != a3 + a2) {\n        // 0x402558\n        v3 = *(char *)v2;\n        v2++;\n        c = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        fputc_rc = fputc(c, (struct _IO_FILE *)stream);\n    }\n    // 0x402573\n    return fputc_rc;\n}\n"
        },
        {
            "funcName": "function_402590",
            "funcStartAddr": "402590",
            "funcEndAddr": "4025e1",
            "decompiledFuncCode": "int64_t function_402590(int64_t stream, int64_t a2, int64_t a3) {\n    // 0x402590\n    if (a3 == 0) {\n        // 0x4025e0\n        int64_t result; // 0x402590\n        return result;\n    }\n    int32_t ** v1 = __ctype_toupper_loc(); // 0x4025ab\n    int64_t v2 = a2; // 0x4025b3\n    unsigned char v3 = *(char *)v2; // 0x4025b8\n    v2++;\n    int32_t c = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1); // 0x4025c6\n    int32_t fputc_rc = fputc(c, (struct _IO_FILE *)stream); // 0x4025c9\n    while (v2 != a3 + a2) {\n        // 0x4025b8\n        v3 = *(char *)v2;\n        v2++;\n        c = *(int32_t *)(4 * (int64_t)v3 + (int64_t)*v1);\n        fputc_rc = fputc(c, (struct _IO_FILE *)stream);\n    }\n    // 0x4025d3\n    return fputc_rc;\n}\n"
        },
        {
            "funcName": "function_4025f0",
            "funcStartAddr": "4025f0",
            "funcEndAddr": "403f0e",
            "decompiledFuncCode": "int64_t function_4025f0(int32_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4025f0\n    int64_t v1; // 0x4025f0\n    char v2 = *(char *)&v1; // 0x402639\n    if (v2 == 0) {\n        // 0x402687\n        return 0;\n    }\n    int64_t v3 = a1;\n    int64_t v4; // bp-1240, 0x4025f0\n    int64_t v5 = &v4; // 0x402605\n    struct _IO_FILE * stream = (struct _IO_FILE *)v3;\n    int64_t v6 = v5 | 4;\n    char * v7 = (char *)v6;\n    int64_t * tm = (int64_t *)(v5 + 8);\n    int64_t v8 = v5 + 48;\n    int32_t * v9 = (int32_t *)v8;\n    int64_t * v10 = (int64_t *)(v5 + 24);\n    int64_t v11 = v5 + 80;\n    int32_t * v12 = (int32_t *)v11;\n    int64_t str2 = v5 + 160;\n    int64_t v13 = v5 + 72;\n    int32_t * v14 = (int32_t *)v13;\n    int64_t v15 = v5 + 151;\n    char * v16 = (char *)v13;\n    int32_t * v17 = (int32_t *)(v5 + 68);\n    int64_t * str = (int64_t *)(v5 + 40);\n    int64_t * v18 = (int64_t *)v8;\n    int64_t * v19 = (int64_t *)v13;\n    char * c3 = (char *)v11;\n    int64_t format = v5 + 128;\n    int16_t * v20 = (int16_t *)format;\n    int64_t * v21 = (int64_t *)(v5 + 16);\n    int32_t * v22 = (int32_t *)(v5 + 1248);\n    int32_t * v23 = (int32_t *)v6;\n    int64_t * v24 = (int64_t *)(v5 - 16);\n    int64_t * v25 = (int64_t *)(v5 + 32);\n    int64_t data2 = v5 + 161;\n    char * v26 = (char *)v8;\n    int64_t v27 = v5 + 88;\n    int64_t * v28 = (int64_t *)v27;\n    int64_t v29 = v5 + 96;\n    int64_t * v30 = (int64_t *)v29;\n    int64_t v31 = v5 + 104;\n    int32_t * v32 = (int32_t *)v31;\n    int64_t * v33 = (int64_t *)(v5 + 112);\n    int64_t * v34 = (int64_t *)v31;\n    int32_t * v35 = (int32_t *)v29;\n    int32_t * v36 = (int32_t *)v27;\n    int64_t * v37 = (int64_t *)v11;\n    int64_t * v38 = (int64_t *)(v5 + 120);\n    int64_t v39 = a3; // 0x4025f0\n    int64_t v40 = a2; // 0x40267a\n    char v41 = v2; // 0x40267a\n    int64_t v42 = 0;\n    char v43; // 0x4025f0\n    char v44; // 0x4025f0\n    char v45; // 0x4025f0\n    char v46; // 0x4025f0\n    char v47; // 0x4025f0\n    char v48; // 0x4025f0\n    char v49; // 0x4025f0\n    char v50; // 0x4025f0\n    char v51; // 0x4025f0\n    char v52; // 0x4025f0\n    int64_t v53; // 0x4025f0\n    int64_t v54; // 0x4025f0\n    int64_t v55; // 0x4025f0\n    int64_t v56; // 0x4025f0\n    int64_t v57; // 0x4025f0\n    int64_t result; // 0x4025f0\n    int64_t v58; // 0x4025f0\n    int64_t v59; // 0x4025f0\n    int64_t v60; // 0x4025f0\n    int64_t v61; // 0x4025f0\n    int64_t v62; // 0x4025f0\n    int64_t v63; // 0x4025f0\n    int64_t v64; // 0x4025f0\n    int64_t v65; // 0x4025f0\n    int64_t v66; // 0x4025f0\n    while (true) {\n      lab_0x40265a:\n        // 0x40265a\n        v56 = v42;\n        char c = v41;\n        int64_t v67 = v40;\n        v66 = v39;\n        char v68 = v44;\n        char v69 = v43;\n        if (c == 37) {\n            // 0x4026d0\n            *v7 = *(char *)(v5 + 67);\n            v48 = v69;\n            v50 = v68;\n            v64 = v67;\n            v61 = 0;\n            v54 = 0;\n            while (true) {\n              lab_0x4026e0_3:\n                // 0x4026e0\n                v55 = v54;\n                int64_t v70 = v64 + 1; // 0x4026e0\n                char v71 = *(char *)v70; // 0x4026e4\n                char v72 = v71; // 0x4026ed\n                int64_t v73 = v70; // 0x4026ed\n                int64_t v74 = v61; // 0x4026ed\n                char v75 = v50; // 0x4026ed\n                char v76 = v48; // 0x4026ed\n                v47 = v48;\n                v49 = v50;\n                v63 = v70;\n                v60 = v61;\n                v53 = 48;\n                if (v71 != 48) {\n                    v62 = v74;\n                    v65 = v73;\n                    v58 = v72;\n                    v52 = v75;\n                    v51 = v76;\n                    int64_t v77; // 0x4026f5\n                    char v78; // 0x4026f9\n                    int64_t v79; // 0x4026f9\n                    while (v51 <= v52) {\n                        if (v58 != 35) {\n                            // 0x402718\n                            v47 = v51;\n                            v49 = v52;\n                            v63 = v65;\n                            v60 = v62;\n                            v53 = v58;\n                            if ((char)v58 == 45) {\n                                goto lab_0x4026e0_2;\n                            } else {\n                                goto lab_0x40271c;\n                            }\n                        }\n                        // 0x4026f5\n                        v77 = v65 + 1;\n                        v78 = *(char *)v77;\n                        v79 = v78;\n                        v47 = v78;\n                        v49 = 48;\n                        v63 = v77;\n                        v60 = 1;\n                        v53 = v79;\n                        if (v78 == 48) {\n                            goto lab_0x4026e0_2;\n                        }\n                        v62 = 1;\n                        v65 = v77;\n                        v58 = v79;\n                        v52 = 48;\n                        v51 = v78;\n                    }\n                    char v80 = v58;\n                    while (v80 == 94) {\n                        // 0x402754\n                        *v7 = 1;\n                        int64_t v81 = v65 + 1; // 0x4026e0\n                        char v82 = *(char *)v81; // 0x4026e4\n                        v72 = v82;\n                        v73 = v81;\n                        v74 = v62;\n                        v75 = v52;\n                        v76 = v51;\n                        v47 = v51;\n                        v49 = v52;\n                        v63 = v81;\n                        v60 = v62;\n                        v53 = 48;\n                        if (v82 == 48) {\n                            goto lab_0x4026e0_2;\n                        }\n                        v62 = v74;\n                        v65 = v73;\n                        v58 = v72;\n                        v52 = v75;\n                        v51 = v76;\n                        while (v51 <= v52) {\n                            if (v58 != 35) {\n                                // 0x402718\n                                v47 = v51;\n                                v49 = v52;\n                                v63 = v65;\n                                v60 = v62;\n                                v53 = v58;\n                                if ((char)v58 == 45) {\n                                    goto lab_0x4026e0_2;\n                                } else {\n                                    goto lab_0x40271c;\n                                }\n                            }\n                            // 0x4026f5\n                            v77 = v65 + 1;\n                            v78 = *(char *)v77;\n                            v79 = v78;\n                            v47 = v78;\n                            v49 = 48;\n                            v63 = v77;\n                            v60 = 1;\n                            v53 = v79;\n                            if (v78 == 48) {\n                                goto lab_0x4026e0_2;\n                            }\n                            v62 = 1;\n                            v65 = v77;\n                            v58 = v79;\n                            v52 = 48;\n                            v51 = v78;\n                        }\n                        // 0x402750\n                        v80 = v58;\n                    }\n                    // 0x402760\n                    v47 = v51;\n                    v49 = v52;\n                    v63 = v65;\n                    v60 = v62;\n                    v53 = v58;\n                    if (v80 != 95) {\n                        // break -> 0x40271c\n                        break;\n                    }\n                }\n                goto lab_0x4026e0_2;\n            }\n            goto lab_0x40271c;\n        } else {\n            // 0x402660\n            result = 0;\n            if (v56 >= 0xfffffffffffffffe) {\n                // break -> 0x402687\n                break;\n            }\n            if (a1 != 0) {\n                // 0x40266b\n                fputc((int32_t)c, stream);\n            }\n            // 0x402673\n            v45 = v69;\n            v46 = v68;\n            v39 = v66;\n            v59 = v67;\n            v57 = v56 + 1;\n            goto lab_0x40267a;\n        }\n    }\n  lab_0x402687_12:\n    // 0x402687\n    return result;\n  lab_0x4026e0_2:\n    // 0x4026e0\n    v48 = v47;\n    v50 = v49;\n    v64 = v63;\n    v61 = v60;\n    v54 = v53 & 0xffffffff;\n    goto lab_0x4026e0_3;\n  lab_0x4027c6:;\n    // 0x4027c6\n    int64_t v83; // 0x402783\n    int64_t v84 = v83; // 0x4027c9\n    int64_t v85; // 0x40278b\n    int64_t v86 = v85; // 0x4027c9\n    int64_t v87; // 0x40278d\n    int64_t v88 = v87; // 0x4027c9\n    int64_t v89; // 0x402783\n    int64_t v90 = v89; // 0x4027c9\n    int64_t v91 = v85; // 0x4027c9\n    int64_t v92 = 0x7fffffff; // 0x4027c9\n    int64_t v93; // 0x40278d\n    if ((int32_t)v93 >= 10) {\n        // break -> 0x40272a\n        goto lab_0x40272a_2;\n    }\n    // 0x4027cf\n    int64_t v94; // 0x4025f0\n    int64_t v95 = v94 + 2; // 0x4027cf\n    int64_t v96 = (int64_t)*(char *)v95; // 0x4027cf\n    int64_t v97 = v96; // 0x4027e2\n    int64_t v98 = v96 & 0xffffffff; // 0x4027e2\n    int64_t v99 = v96 + 0xffffffd0 & 0xffffffff; // 0x4027e2\n    int64_t v100 = v95; // 0x4027e2\n    int64_t v101 = 0x7fffffff; // 0x4027e2\n    goto lab_0x4027aa;\n  lab_0x4027aa:;\n    int64_t v102 = v101;\n    int64_t v103 = v100;\n    int64_t v104 = v99;\n    int64_t v105 = v103; // 0x4027ad\n    int64_t v106 = v102; // 0x4027ad\n    if ((int32_t)v104 >= 10) {\n        // 0x4027af\n        v84 = v97;\n        v86 = v98;\n        v88 = v104;\n        v90 = v103;\n        v91 = v97 & 0xffffffff;\n        v92 = v102;\n        goto lab_0x40272a_2;\n    }\n    goto lab_0x402783;\n  lab_0x40271c:;\n    int64_t v111 = v58 & 0xffffffff;\n    v84 = v58;\n    v86 = v111;\n    v88 = v66;\n    v90 = v65;\n    v91 = v111;\n    v92 = 0xffffffff;\n    v105 = v65;\n    v106 = 0;\n    if ((int32_t)v58 < 58) {\n        while (true) {\n          lab_0x402783:;\n            int64_t v107 = v106;\n            v94 = v105;\n            v89 = v94 + 1;\n            v83 = (int64_t)*(char *)v89;\n            v85 = v83 & 0xffffffff;\n            v93 = v83 + 0xffffffd0;\n            v87 = v93 & 0xffffffff;\n            int32_t v108 = v107; // 0x402790\n            if (v108 > 0xccccccc) {\n                goto lab_0x4027c6;\n            } else {\n                char v109 = *(char *)v94; // 0x402799\n                int64_t v110 = v109; // 0x402799\n                v1 = v110;\n                if (v108 != 0xccccccc || v109 < 56) {\n                    // 0x40279e\n                    v97 = v83;\n                    v98 = v85;\n                    v99 = v87;\n                    v100 = v89;\n                    v101 = 10 * v107 + 0xffffffd0 + v110 & 0xffffffff;\n                    goto lab_0x4027aa;\n                } else {\n                    goto lab_0x4027c6;\n                }\n            }\n        }\n    }\n    goto lab_0x40272a_2;\n  lab_0x40267a:\n    // 0x40267a\n    v42 = v57;\n    v40 = v59 + 1;\n    v41 = *(char *)v40;\n    v43 = v45;\n    v44 = v46;\n    result = v42;\n    if (v41 == 0) {\n        // break -> 0x402687\n        goto lab_0x402687_12;\n    }\n    goto lab_0x40265a;\n  lab_0x40272a_2:;\n    int64_t v112 = v92;\n    int64_t v113 = v90;\n    int64_t v114 = v88;\n    int64_t v115 = v86; // 0x4025f0\n    int64_t v116 = v113; // 0x4025f0\n    int64_t v117 = v91; // 0x4025f0\n    int64_t v118 = 0; // 0x4025f0\n    int64_t v119; // 0x4025f0\n    switch ((char)v119) {\n        case 79: {\n        }\n        case 69: {\n            int64_t v120 = v113 + 1; // 0x402770\n            int64_t v121 = (int64_t)*(char *)v120; // 0x402770\n            v115 = v121 & 0xffffffff;\n            v116 = v120;\n            v117 = v121;\n            v118 = v84 & 0xffffffff;\n            // break -> 0x402740\n            break;\n        }\n    }\n    int64_t v122 = v118;\n    int64_t v123 = v116;\n    int64_t v124 = v115;\n    g51 = v124 % 256;\n    char v125 = v124;\n    int64_t v126 = v123; // 0x402743\n    int64_t v127 = v114; // 0x402743\n    int64_t v128 = v123; // 0x402743\n    int64_t v129 = 0; // 0x402743\n    char v130 = 1; // 0x402743\n    int64_t v131; // 0x4025f0\n    int64_t v132; // 0x4025f0\n    int64_t v133; // 0x4025f0\n    int64_t v134; // 0x4025f0\n    int32_t v135; // 0x4025f0\n    int64_t v136; // 0x4025f0\n    int64_t v137; // 0x4025f0\n    int64_t v138; // 0x4025f0\n    int64_t v139; // 0x4025f0\n    int64_t v140; // 0x4025f0\n    int64_t v141; // 0x4025f0\n    int64_t v142; // 0x4025f0\n    int64_t v143; // 0x4025f0\n    int64_t v144; // 0x4025f0\n    int64_t v145; // 0x4025f0\n    int64_t v146; // 0x4025f0\n    int64_t v147; // 0x4025f0\n    int64_t v148; // 0x4025f0\n    int64_t v149; // 0x4025f0\n    int64_t v150; // 0x4025f0\n    int64_t v151; // 0x4025f0\n    int64_t v152; // 0x4025f0\n    int64_t v153; // 0x4025f0\n    int64_t v154; // 0x4025f0\n    int64_t v155; // 0x4025f0\n    int64_t v156; // 0x4025f0\n    int64_t v157; // 0x4025f0\n    int64_t v158; // 0x4025f0\n    int64_t v159; // 0x4025f0\n    int64_t v160; // 0x4025f0\n    int64_t v161; // 0x4025f0\n    int64_t v162; // 0x4025f0\n    int64_t v163; // 0x4025f0\n    int64_t v164; // 0x4025f0\n    int64_t v165; // 0x4025f0\n    int64_t v166; // 0x4025f0\n    int64_t v167; // 0x4025f0\n    int64_t v168; // 0x4025f0\n    int64_t v169; // 0x4025f0\n    int64_t v170; // 0x4025f0\n    int64_t v171; // 0x4025f0\n    int64_t v172; // 0x4025f0\n    int64_t v173; // 0x4025f0\n    int64_t v174; // 0x4025f0\n    int64_t v175; // 0x4025f0\n    int64_t v176; // 0x4025f0\n    int32_t v177; // 0x4025f0\n    switch (v125) {\n        case 0: {\n            // 0x402b93\n            v171 = v123 - 1;\n            goto lab_0x402b9b;\n        }\n        case 37: {\n            int64_t c2 = v117;\n            int32_t v178 = v112; // 0x402c51\n            int64_t v179 = -1 - v56;\n            int64_t v180 = v178 >= 0 ? 0x100000000 * v112 >> 32 : 0; // 0x402c6c\n            int64_t v181 = v180 != 0 ? v180 : 1; // 0x402c71\n            v1 = v181;\n            *v18 = v181;\n            if (v122 != 0) {\n                goto lab_0x402bd3;\n            } else {\n                // 0x402c83\n                if (v1 >= v179) {\n                    // break -> 0x402687\n                    break;\n                }\n                // 0x402c8c\n                v176 = v179;\n                if (a1 != 0) {\n                    // 0x402c91\n                    if (v178 >= 2) {\n                        // 0x402c97\n                        int64_t v182; // 0x4025f0\n                        int64_t v183 = v182 - 1; // 0x402c9d\n                        int64_t v184 = 0; // 0x402ca5\n                        int64_t v185 = 0; // 0x402ca5\n                        if (v55 == 48) {\n                            int64_t v186 = v185;\n                            int64_t v187 = v186 + 1; // 0x403786\n                            fputc(48, stream);\n                            v185 = v187;\n                            while (v183 != v187) {\n                                // 0x40377e\n                                v186 = v185;\n                                v187 = v186 + 1;\n                                fputc(48, stream);\n                                v185 = v187;\n                            }\n                        } else {\n                            int64_t v188 = v184;\n                            int64_t v189 = v188 + 1; // 0x402cb3\n                            fputc(32, stream);\n                            v184 = v189;\n                            while (v183 != v189) {\n                                // 0x402cab\n                                v188 = v184;\n                                v189 = v188 + 1;\n                                fputc(32, stream);\n                                v184 = v189;\n                            }\n                        }\n                    }\n                    // 0x402cc4\n                    fputc((int32_t)c2, stream);\n                    v176 = v179;\n                }\n                goto lab_0x402ccc;\n            }\n        }\n        case 58: {\n            int64_t v190 = v123 + 1; // 0x40375c\n            char v191 = *(char *)v190; // 0x40375c\n            char v192 = v191; // 0x40376c\n            int64_t v193 = v190; // 0x40376c\n            int64_t v194 = 1; // 0x40376c\n            if (v191 == 58) {\n                int64_t v195 = 2; // 0x403799\n                int64_t v196 = v195 + v123; // 0x40379d\n                char v197 = *(char *)v196; // 0x40379d\n                v192 = v197;\n                v193 = v196;\n                v194 = v195;\n                int64_t v198 = v195; // 0x4037a8\n                while (v197 == 58) {\n                    // 0x403799\n                    v195 = v198 + 1;\n                    v196 = v195 + v123;\n                    v197 = *(char *)v196;\n                    v192 = v197;\n                    v193 = v196;\n                    v194 = v195;\n                    v198 = v195;\n                }\n            }\n            // 0x40376e\n            v126 = v123;\n            v127 = v193;\n            v128 = v193;\n            v129 = v194;\n            if (v192 != 122) {\n                goto lab_0x403110;\n            } else {\n                goto lab_0x403159;\n            }\n        }\n        case 65: {\n            goto lab_0x4027e8;\n        }\n        case 66: {\n            goto lab_0x4027e8;\n        }\n        case 67: {\n            // 0x4029c2\n            v169 = v123;\n            v157 = 0;\n            v141 = v112;\n            v147 = v55;\n            if (v122 == 69) {\n                goto lab_0x40297f;\n            } else {\n                int32_t v199 = *(int32_t *)(*tm + 20); // 0x4029dc\n                int32_t v200 = v199 / 100; // 0x4029ed\n                int32_t v201 = v200 + 19; // 0x4029f1\n                int32_t v202 = v199 + 1900; // 0x402a05\n                int64_t v203 = v201 - (int32_t)(-100 * v200 + v199 < 0 == v201 >= 0 == (v201 != 0)); // 0x402a0f\n                v1 = v203;\n                v132 = v203;\n                v168 = v123;\n                v162 = 0;\n                v172 = 0;\n                v154 = v202 < 0 != ((v202 ^ v199) & (v199 ^ -0x80000000)) < 0;\n                v156 = 2;\n                v140 = v112;\n                v146 = v55;\n                goto lab_0x40296c;\n            }\n        }\n        case 68: {\n            // 0x402a1a\n            v126 = v123;\n            if (v122 != 0) {\n                goto lab_0x403110;\n            } else {\n                // 0x402a23\n                *v18 = (int64_t)\"%m/%d/%y\";\n                goto lab_0x402a2c;\n            }\n        }\n        case 70: {\n            // 0x403405\n            v126 = v123;\n            if (v122 != 0) {\n                goto lab_0x403110;\n            } else {\n                // 0x40340e\n                *v18 = (int64_t)\"%Y-%m-%d\";\n                goto lab_0x402a2c;\n            }\n        }\n        case 71: {\n            goto lab_0x40341c;\n        }\n        case 72: {\n            // 0x402942\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                int64_t v204 = (int64_t)*(int32_t *)(*tm + 8); // 0x402957\n                v1 = v204;\n                v131 = v204;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                goto lab_0x402960;\n            }\n        }\n        case 73: {\n            // 0x4029ac\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                int64_t v205 = (int64_t)*v17; // 0x4029b6\n                v1 = v205;\n                v131 = v205;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                goto lab_0x402960;\n            }\n        }\n        case 77: {\n            // 0x402cd9\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                int64_t v206 = (int64_t)*(int32_t *)(*tm + 4); // 0x402cee\n                v1 = v206;\n                v131 = v206;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                goto lab_0x402960;\n            }\n        }\n        case 78: {\n            // 0x403718\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                uint32_t v207 = (int32_t)v112; // 0x403722\n                if (v207 != -1) {\n                    int64_t v208 = (int64_t)*v22;\n                    v1 = v208;\n                    int64_t v209 = v208; // 0x403c68\n                    int64_t v210 = v112; // 0x403c68\n                    int64_t v211 = v208; // 0x403c68\n                    if (v207 <= 8) {\n                        int64_t v212 = v209;\n                        int64_t v213 = (v210 & 0xffffffff) + 1; // 0x403c85\n                        int64_t v214 = ((int32_t)(0x66666667 * (0x100000000 * v212 >> 32) / 0x100000000) >> 2) - ((int32_t)v212 >> 31); // 0x403c90\n                        v210 = v213;\n                        while ((int32_t)v213 != 9) {\n                            // 0x403c80\n                            v212 = v214;\n                            v213 = (v210 & 0xffffffff) + 1;\n                            v214 = ((int32_t)(0x66666667 * (0x100000000 * v212 >> 32) / 0x100000000) >> 2) - ((int32_t)v212 >> 31);\n                            v210 = v213;\n                        }\n                        // 0x403c97\n                        v1 = v214;\n                        v211 = v214;\n                    }\n                    // 0x403c97\n                    v131 = v211;\n                    v155 = v112 & 0xffffffff;\n                    v139 = v112;\n                    v145 = v55;\n                } else {\n                    int64_t v215 = (int64_t)*v22; // 0x40372c\n                    v1 = v215;\n                    v131 = v215;\n                    v155 = 9;\n                    v139 = 9;\n                    v145 = v55;\n                }\n                goto lab_0x402960;\n            }\n        }\n        case 80: {\n            goto lab_0x403586;\n        }\n        case 82: {\n            // 0x4035b0\n            *v18 = (int64_t)\"%H:%M\";\n            goto lab_0x402a2c;\n        }\n        case 83: {\n            // 0x402cf6\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                int64_t v216 = (int64_t)*(int32_t *)*tm; // 0x402d0b\n                v1 = v216;\n                v131 = v216;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                goto lab_0x402960;\n            }\n        }\n        case 84: {\n            // 0x403744\n            *v18 = (int64_t)\"%H:%M:%S\";\n            goto lab_0x402a2c;\n        }\n        case 85: {\n            // 0x402d12\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                int64_t v217 = *tm; // 0x402d1c\n                v177 = *(int32_t *)(v217 + 28) + 7 - *(int32_t *)(v217 + 24);\n                goto lab_0x402d33;\n            }\n        }\n        case 86: {\n            goto lab_0x40341c;\n        }\n        case 87: {\n            // 0x402d49\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                int64_t v218 = *tm; // 0x402d53\n                int32_t v219 = *(int32_t *)(v218 + 24); // 0x402d5d\n                int32_t v220 = v219 + 6; // 0x402d61\n                *v9 = v219;\n                int32_t v221 = *(int32_t *)(v218 + 28); // 0x402d84\n                v177 = 1 - v219 + v221 + 7 * ((v220 + (int32_t)(-0x6db6db6d * (int64_t)v220 / 0x100000000) >> 2) - (v220 >> 31));\n                goto lab_0x402d33;\n            }\n        }\n        case 88: {\n            goto lab_0x402910;\n        }\n        case 89: {\n            // 0x402d94\n            v169 = v123;\n            v157 = 0;\n            v141 = v112;\n            v147 = v55;\n            v126 = v123;\n            switch ((int32_t)v122) {\n                case 69: {\n                    goto lab_0x40297f;\n                }\n                case 79: {\n                    goto lab_0x403110;\n                }\n                default: {\n                    int32_t v222 = *(int32_t *)(*tm + 20); // 0x402db3\n                    int32_t v223 = v222 + 1900; // 0x402db6\n                    int64_t v224 = v223; // 0x402dc0\n                    v1 = v224;\n                    v133 = v224;\n                    v164 = v123;\n                    v160 = 0;\n                    v173 = 0;\n                    v152 = v223 < 0 != ((v223 ^ v222) & (v222 ^ -0x80000000)) < 0;\n                    v158 = 4;\n                    v142 = v112;\n                    v148 = v55;\n                    goto lab_0x402dd0;\n                }\n            }\n        }\n        case 90: {\n            char v225 = v62;\n            *v9 = (int32_t)v112;\n            *v14 = (int32_t)v55;\n            *v7 = v225 != 0 ? 0 : *v7;\n            int32_t len = strlen((char *)*str); // 0x403016\n            int64_t v226 = len; // 0x403016\n            int32_t v227 = *v9; // 0x40301b\n            int64_t v228 = v227; // 0x40301b\n            uint64_t v229 = v227 >= 0 ? v228 : 0; // 0x403031\n            int64_t v230 = v229 <= v226 ? v226 : v229; // 0x40303b\n            *v18 = v230;\n            if (v230 >= -1 - v56) {\n                // break -> 0x402687\n                break;\n            }\n            // 0x40304d\n            v176 = v230;\n            if (a1 != 0) {\n                char v231 = v225; // 0x40305e\n                if (v229 > v226) {\n                    int64_t v232 = v228 - v226; // 0x403063\n                    *v19 = v232;\n                    if (*v14 == 48) {\n                        // 0x403ec4\n                        v231 = v225;\n                        if (v232 != 0) {\n                            int64_t v233 = 1; // 0x403edd\n                            fputc(48, stream);\n                            v231 = v225;\n                            int64_t v234 = v233; // 0x403eeb\n                            while (*v19 != v233) {\n                                // 0x403ed5\n                                v233 = v234 + 1;\n                                fputc(48, stream);\n                                v231 = v225;\n                                v234 = v233;\n                            }\n                        }\n                    } else {\n                        // 0x403075\n                        v231 = v225;\n                        if (v232 != 0) {\n                            // 0x40307d\n                            *c3 = v225;\n                            int64_t v235 = 0; // 0x40308b\n                            v235++;\n                            fputc(32, stream);\n                            while (*v19 != v235) {\n                                // 0x403090\n                                v235++;\n                                fputc(32, stream);\n                            }\n                            // 0x4030a6\n                            v231 = *c3;\n                        }\n                    }\n                }\n                // 0x4030b1\n                if (v231 != 0) {\n                    // 0x403d8f\n                    function_402530(v3, *str, v226);\n                    v176 = v226;\n                } else {\n                    int64_t data = *str;\n                    if (*v7 == 0) {\n                        // 0x403d75\n                        fwrite((int64_t *)data, len, 1, stream);\n                        v176 = 1;\n                    } else {\n                        // 0x4030c5\n                        function_402590(v3, data, v226);\n                        v176 = v226;\n                    }\n                }\n            }\n            goto lab_0x402ccc;\n        }\n        case 97: {\n            goto lab_0x4027e8;\n        }\n        case 98: {\n            goto lab_0x4030f3;\n        }\n        case 99: {\n            goto lab_0x402910;\n        }\n        case 100: {\n            // 0x4036a2\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                int64_t v236 = (int64_t)*(int32_t *)(*tm + 12); // 0x4036b7\n                v1 = v236;\n                v131 = v236;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                goto lab_0x402960;\n            }\n        }\n        case 101: {\n            // 0x4036bf\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                int64_t v237 = (int64_t)*(int32_t *)(*tm + 12); // 0x4036ce\n                v1 = v237;\n                v134 = v237;\n                goto lab_0x402f90;\n            }\n        }\n        case 103: {\n            goto lab_0x40341c;\n        }\n        case 104: {\n            goto lab_0x4030f3;\n        }\n        case 106: {\n            // 0x4036d6\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                int32_t v238 = *(int32_t *)(*tm + 28); // 0x4036eb\n                int32_t v239 = v238 + 1; // 0x4036ee\n                int64_t v240 = v239; // 0x4036f5\n                v1 = v240;\n                v132 = v240;\n                v168 = v123;\n                v162 = 0;\n                v172 = 0;\n                v154 = v239 < 0 != (v239 & (v238 ^ -0x80000000)) < 0;\n                v156 = 3;\n                v140 = v112;\n                v146 = v55;\n                goto lab_0x40296c;\n            }\n        }\n        case 107: {\n            // 0x403701\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                int64_t v241 = (int64_t)*(int32_t *)(*tm + 8); // 0x403710\n                v1 = v241;\n                v134 = v241;\n                goto lab_0x402f90;\n            }\n        }\n        case 108: {\n            // 0x402f82\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                int64_t v242 = (int64_t)*v17; // 0x402f8c\n                v1 = v242;\n                v134 = v242;\n                goto lab_0x402f90;\n            }\n        }\n        case 109: {\n            // 0x403677\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                int32_t v243 = *(int32_t *)(*tm + 16); // 0x40368c\n                int32_t v244 = v243 + 1; // 0x40368f\n                int64_t v245 = v244; // 0x403696\n                v1 = v245;\n                v132 = v245;\n                v168 = v123;\n                v162 = 0;\n                v172 = 0;\n                v154 = v244 < 0 != (v244 & (v243 ^ -0x80000000)) < 0;\n                v156 = 2;\n                v140 = v112;\n                v146 = v55;\n                goto lab_0x40296c;\n            }\n        }\n        case 110: {\n            int32_t v246 = v112; // 0x4035be\n            int64_t v247 = 0x100000000 * v112 >> 32;\n            int64_t v248 = v246 >= 0 ? v247 : 0; // 0x4035cf\n            int64_t v249 = v248 == 0 ? 1 : v248; // 0x4035d5\n            if (v249 >= -1 - v56) {\n                // break -> 0x402687\n                break;\n            }\n            // 0x4035e8\n            v175 = v114;\n            v163 = v249;\n            if (a1 != 0) {\n                if (v246 >= 2) {\n                    int64_t v250 = v247 - 1; // 0x4035fd\n                    if (v55 == 48) {\n                        int64_t v251 = 1; // 0x403637\n                        fputc(48, stream);\n                        int64_t v252 = v251; // 0x403643\n                        while (v250 != v251) {\n                            // 0x40362f\n                            v251 = v252 + 1;\n                            fputc(48, stream);\n                            v252 = v251;\n                        }\n                    } else {\n                        int64_t v253 = 1; // 0x40360f\n                        fputc(32, stream);\n                        int64_t v254 = v253; // 0x40361b\n                        while (v250 != v253) {\n                            // 0x403607\n                            v253 = v254 + 1;\n                            fputc(32, stream);\n                            v254 = v253;\n                        }\n                    }\n                }\n                // 0x40361d\n                fputc(10, stream);\n                v175 = v114;\n                v163 = v249;\n            }\n            goto lab_0x402b06;\n        }\n        case 112: {\n            // 0x403752\n            v130 = 0;\n            goto lab_0x403586;\n        }\n        case 113: {\n            // 0x403647\n            v169 = v123;\n            v157 = 1;\n            v141 = v112;\n            v147 = v55;\n            if (v122 == 79) {\n                goto lab_0x40297f;\n            } else {\n                // 0x40365f\n                v1 = (int64_t)((11 * *(int32_t *)(*tm + 16) >> 5) + 1);\n                v165 = v123;\n                v161 = 0;\n                v174 = 0;\n                v153 = 0;\n                v159 = 1;\n                v136 = v112;\n                v149 = v55;\n                goto lab_0x402dd7;\n            }\n        }\n        case 114: {\n            // 0x40291a\n            *v16 = 0;\n            v170 = v124;\n            goto lab_0x40291f;\n        }\n        case 115: {\n            int64_t v255 = *tm; // 0x40320f\n            *v12 = (int32_t)v112;\n            *v14 = (int32_t)v55;\n            int128_t v256 = __asm_movdqu(*(int128_t *)(v255 + 32)); // 0x403233\n            int128_t v257 = __asm_movdqu(*(int128_t *)v255); // 0x403238\n            int128_t v258 = __asm_movdqu(*(int128_t *)(v255 + 16)); // 0x40323c\n            *(int128_t *)str2 = (int128_t)__asm_movaps(v257);\n            *(int128_t *)(v5 + 176) = (int128_t)__asm_movaps(v258);\n            *(int128_t *)v8 = (int128_t)__asm_movaps(v256);\n            *(int128_t *)(v5 + 192) = (int128_t)__asm_movaps(v256);\n            *(int64_t *)(v5 + 208) = *(int64_t *)(v255 + 48);\n            int64_t v259 = function_407970(*v10, str2, v114, v124); // 0x40326a\n            uint32_t v260 = *v12; // 0x403274\n            v1 = v259;\n            int64_t v261 = v259;\n            int64_t v262 = v261 >> 63; // 0x4032a0\n            char v263 = (v261 >> 63 & 246) + v261; // 0x4032b8\n            int64_t v264 = v15 - 1; // 0x4032c3\n            *(char *)v264 = (v259 < 0 ? -v263 : v263) + 48;\n            while (v262 != 0) {\n                // 0x403288\n                v261 = v262;\n                v262 = v261 >> 63;\n                v263 = (v261 >> 63 & 246) + v261;\n                v264--;\n                *(char *)v264 = (v1 < 0 ? -v263 : v263) + 48;\n            }\n            int64_t v265 = (int64_t)*v14; // 0x40326f\n            int64_t v266 = v260; // 0x403274\n            int32_t v267 = v260 >= 0 == (v260 != 0) ? v260 : 1; // 0x4032dd\n            *v9 = v267;\n            v135 = v267;\n            v166 = v123;\n            v137 = v266;\n            v143 = v265;\n            v151 = v264;\n            v167 = v123;\n            v138 = v266;\n            v144 = v265;\n            v150 = v264;\n            if (v1 < 0) {\n                goto lab_0x4037c0;\n            } else {\n                goto lab_0x4032eb;\n            }\n        }\n        case 116: {\n            int32_t v268 = v112; // 0x402b11\n            int64_t v269 = 0x100000000 * v112 >> 32;\n            int64_t v270 = v268 >= 0 ? v269 : 0; // 0x402b22\n            int64_t v271 = v270 == 0 ? 1 : v270; // 0x402b28\n            if (v271 >= -1 - v56) {\n                // break -> 0x402687\n                break;\n            }\n            // 0x402b3b\n            v175 = v114;\n            v163 = v271;\n            if (a1 != 0) {\n                if (v268 >= 2) {\n                    int64_t v272 = v269 - 1; // 0x402b4c\n                    if (v55 == 48) {\n                        int64_t v273 = 1; // 0x402b83\n                        fputc(48, stream);\n                        int64_t v274 = v273; // 0x402b8f\n                        while (v272 != v273) {\n                            // 0x402b7b\n                            v273 = v274 + 1;\n                            fputc(48, stream);\n                            v274 = v273;\n                        }\n                    } else {\n                        int64_t v275 = 1; // 0x402b5e\n                        fputc(32, stream);\n                        int64_t v276 = v275; // 0x402b6a\n                        while (v272 != v275) {\n                            // 0x402b56\n                            v275 = v276 + 1;\n                            fputc(32, stream);\n                            v276 = v275;\n                        }\n                    }\n                }\n                // 0x402b6c\n                fputc(9, stream);\n                v175 = v114;\n                v163 = v271;\n            }\n            goto lab_0x402b06;\n        }\n        case 117: {\n            int32_t v277 = *(int32_t *)(*tm + 24); // 0x402fc5\n            int32_t v278 = v277 + 6; // 0x402fc8\n            *v9 = v277;\n            int64_t v279 = v277 + 7 + -7 * ((v278 + (int32_t)(-0x6db6db6d * (int64_t)v278 / 0x100000000) >> 2) - (v278 >> 31)); // 0x402feb\n            v1 = v279;\n            v131 = v279;\n            v155 = 1;\n            v139 = v112;\n            v145 = v55;\n            goto lab_0x402960;\n        }\n        case 119: {\n            // 0x4030da\n            v126 = v123;\n            if (v122 == 69) {\n                goto lab_0x403110;\n            } else {\n                int64_t v280 = (int64_t)*(int32_t *)(*tm + 24); // 0x4030eb\n                v1 = v280;\n                v131 = v280;\n                v155 = 1;\n                v139 = v112;\n                v145 = v55;\n                goto lab_0x402960;\n            }\n        }\n        case 120: {\n            goto lab_0x402910;\n        }\n        case 121: {\n            // 0x4033b6\n            v169 = v123;\n            v157 = 0;\n            v141 = v112;\n            v147 = v55;\n            if (v122 == 69) {\n                goto lab_0x40297f;\n            } else {\n                int32_t v281 = *(int32_t *)(*tm + 20); // 0x4033d0\n                int32_t v282 = v281 % 100;\n                int64_t v283 = v282; // 0x4033e8\n                v1 = v283;\n                v131 = v283;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                if (v282 < 0) {\n                    int32_t v284 = v281 + 1901; // 0x4033f7\n                    int64_t v285 = v284 == 0 | v284 < 0 != ((v284 ^ v281) & (v281 ^ -0x80000000)) < 0 ? -v283 : v283 + 100; // 0x4033fd\n                    int64_t v286 = v285 & 0xffffffff; // 0x4033fd\n                    v1 = v286;\n                    v131 = v286;\n                    v155 = 2;\n                    v139 = v112;\n                    v145 = v55;\n                }\n                goto lab_0x402960;\n            }\n        }\n        case 122: {\n            goto lab_0x403159;\n        }\n        default: {\n            goto lab_0x403110;\n        }\n    }\n  lab_0x4027e8:\n    // 0x4027e8\n    v126 = v123;\n    if (v122 != 0) {\n        goto lab_0x403110;\n    } else {\n        char v287 = v62; // 0x4027f6\n        *v7 = v287 != 0 ? v287 : *v7;\n        goto lab_0x402800;\n    }\n  lab_0x40341c:\n    // 0x40341c\n    v126 = v123;\n    if (v122 == 69) {\n        goto lab_0x403110;\n    } else {\n        int64_t v288 = *tm; // 0x403426\n        int32_t v289 = *(int32_t *)(v288 + 20); // 0x40342b\n        uint32_t v290 = *(int32_t *)(v288 + 28); // 0x40342e\n        v1 = v290;\n        uint32_t v291 = *(int32_t *)(v288 + 24); // 0x403431\n        int32_t v292 = v290 - v291; // 0x403441\n        int32_t v293 = v292 + 382; // 0x403444\n        int32_t v294 = v289 - 100 + (v289 >> 31 & 400); // 0x40344f\n        int32_t v295 = v290 - 379 - v292 + 7 * ((v293 + (int32_t)(-0x6db6db6d * (int64_t)v293 / 0x100000000) >> 2) - (v293 >> 31)); // 0x403474\n        int32_t v296; // 0x4025f0\n        int32_t v297; // 0x403500\n        if (v295 < 0) {\n            int64_t v298 = 365; // 0x403be8\n            if ((v294 + 3) % 4 == 0) {\n                int32_t v299 = v294 - 1;\n                v298 = 366;\n                if (v299 % 100 - v299 == 1 - v294) {\n                    uint32_t v300 = v299 % 400;\n                    int64_t v301 = v300; // 0x403c17\n                    v298 = v301 + 366 + (v301 ^ 0xffffffff) + (int64_t)(v300 == 0) & 0xffffffff;\n                }\n            }\n            int64_t v302 = v298;\n            int64_t v303; // 0x40342e\n            int64_t v304 = v302 + v303; // 0x403c26\n            int64_t v305; // 0x403431\n            int64_t v306 = v304 - v305 + 382; // 0x403c38\n            v296 = (int32_t)(v304 - v306) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v306 >> 32) / 0x100000000 + v306) >> 2) - ((int32_t)v306 >> 31));\n        } else {\n            int64_t v307 = 365; // 0x40348b\n            if (v294 % 4 == 0) {\n                // 0x40348d\n                v307 = 366;\n                if (v294 % 100 == 0) {\n                    // 0x4034b5\n                    v307 = v294 == 0 ? 366 : 365;\n                }\n            }\n            int64_t v308 = v1 - v307; // 0x4034d2\n            int64_t v309 = v308 - (int64_t)v291 + 382; // 0x4034de\n            v297 = (int32_t)(v308 - v309) + 3 + 7 * (((int32_t)(-0x6db6db6d * (0x100000000 * v309 >> 32) / 0x100000000 + v309) >> 2) - ((int32_t)v309 >> 31));\n            v296 = v297 >= 0 ? v297 : v295;\n        }\n        int64_t v310 = (v297 >> 31) + 1;\n        if (v125 == 71) {\n            int64_t v311 = (int64_t)v289 + 1900 + v310 & 0xffffffff; // 0x403cca\n            v1 = v311;\n            int32_t v312 = -1900 - (int32_t)v310; // 0x403cd8\n            int32_t v313 = v289 - v312; // 0x403cdb\n            v132 = v311;\n            v168 = v123;\n            v162 = 0;\n            v172 = 0;\n            v154 = v313 < 0 != ((v313 ^ v289) & (v312 ^ v289)) < 0;\n            v156 = 4;\n            v140 = v112;\n            v146 = v55;\n            goto lab_0x40296c;\n        } else {\n            if (v125 != 103) {\n                int32_t v314 = v296;\n                int32_t v315 = v314 < 0 ? 2 : 1; // 0x403cba\n                int64_t v316 = v315 + (v314 + (int32_t)(-0x6db6db6d * (int64_t)v314 / 0x100000000) >> 2); // 0x403cbd\n                v1 = v316;\n                v131 = v316;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n            } else {\n                int32_t v317 = v310; // 0x403548\n                int32_t v318 = (v289 % 100 + v317) % 100;\n                int64_t v319 = v318; // 0x40355e\n                v1 = v319;\n                v131 = v319;\n                v155 = 2;\n                v139 = v112;\n                v145 = v55;\n                if (v318 < 0) {\n                    int32_t v320 = -1900 - v317; // 0x403572\n                    int32_t v321 = v289 - v320; // 0x403577\n                    int64_t v322 = v321 < 0 == ((v321 ^ v289) & (v320 ^ v289)) < 0 ? v319 + 100 : -v319; // 0x403579\n                    int64_t v323 = v322 & 0xffffffff; // 0x403579\n                    v1 = v323;\n                    v131 = v323;\n                    v155 = 2;\n                    v139 = v112;\n                    v145 = v55;\n                }\n            }\n            goto lab_0x402960;\n        }\n    }\n  lab_0x403586:\n    // 0x403586\n    *v16 = v130;\n    char v324 = v62; // 0x40358b\n    *v16 = v324 != 0 ? v324 : v130;\n    *v7 = v324 != 0 ? 0 : *v7;\n    v170 = 112;\n    goto lab_0x40291f;\n  lab_0x402910:\n    // 0x402910\n    v126 = v123;\n    if (v122 == 79) {\n        goto lab_0x403110;\n    } else {\n        // 0x40291a\n        *v16 = 0;\n        v170 = v124;\n        goto lab_0x40291f;\n    }\n  lab_0x4030f3:;\n    char v541 = v62; // 0x4030f8\n    *v7 = v541 != 0 ? v541 : *v7;\n    v126 = v123;\n    if (v122 == 0) {\n        goto lab_0x402800;\n    } else {\n        goto lab_0x403110;\n    }\n  lab_0x403159:;\n    int64_t v521 = v128;\n    int64_t v542 = *tm; // 0x403159\n    v45 = v51;\n    v46 = v52;\n    v39 = v127;\n    v59 = v521;\n    v57 = v56;\n    int64_t v522; // 0x4025f0\n    uint32_t v520; // 0x4031d6\n    uint32_t v524; // 0x4031da\n    if (*(int32_t *)(v542 + 32) < 0) {\n        goto lab_0x40267a;\n    } else {\n        int64_t v543 = *(int64_t *)(v542 + 40); // 0x403169\n        v1 = v543;\n        int32_t v544 = v543;\n        int64_t v545 = 1; // 0x403175\n        if (v544 >= 0) {\n            // 0x403177\n            v545 = 0;\n            if (v544 == 0) {\n                // 0x40317f\n                v545 = *(char *)*str == 45;\n            }\n        }\n        // 0x40318b\n        v522 = v545;\n        int64_t v546 = 0x100000000 * v543 >> 32; // 0x403199\n        int32_t v547 = v544 >> 31; // 0x40319b\n        *v9 = ((int32_t)(-0x6e5d4c3b * v546 / 0x100000000) + v544 >> 11) - v547;\n        int32_t v548 = ((int32_t)(v1 + -0x77777777 * v546 / 0x100000000) >> 5) - v547; // 0x4031b5\n        v520 = -60 * ((v548 + (int32_t)(-0x77777777 * (int64_t)v548 / 0x100000000) >> 5) - (v548 >> 31)) + v548;\n        v524 = -60 * v548 + (int32_t)v1;\n        v1 = v524;\n        v171 = v521;\n        switch (v129) {\n            case 1: {\n                goto lab_0x403d59;\n            }\n            case 0: {\n                int64_t v549 = (int64_t)(100 * *v9 + v520); // 0x403db6\n                v1 = v549;\n                v132 = v549;\n                v168 = v521;\n                v162 = 1;\n                v172 = 0;\n                v154 = v522;\n                v156 = 5;\n                v140 = v112;\n                v146 = v55;\n                goto lab_0x40296c;\n            }\n            case 2: {\n                goto lab_0x403d35;\n            }\n            case 3: {\n                if (v524 != 0) {\n                    goto lab_0x403d35;\n                } else {\n                    if (v520 != 0) {\n                        goto lab_0x403d59;\n                    } else {\n                        int64_t v550 = (int64_t)*v9; // 0x403dc9\n                        v1 = v550;\n                        v132 = v550;\n                        v168 = v521;\n                        v162 = 1;\n                        v172 = v520;\n                        v154 = v522;\n                        v156 = 3;\n                        v140 = v112;\n                        v146 = v55;\n                        goto lab_0x40296c;\n                    }\n                }\n            }\n            default: {\n                goto lab_0x402b9b;\n            }\n        }\n    }\n  lab_0x403110:;\n    int64_t v551 = v126;\n    int64_t v552 = v551 - 1;\n    while (*(char *)v552 != 37) {\n        // 0x403117\n        v551 = v552;\n        v552 = v551 - 1;\n    }\n    int64_t v553 = 0x100000000 * (v126 + 2 - v551) >> 32; // 0x403130\n    int64_t v554 = (int32_t)v112 >= 0 ? 0x100000000 * v112 >> 32 : 0; // 0x403140\n    int64_t v555 = v553 >= v554 ? v553 : v554; // 0x403148\n    *v18 = v555;\n    int64_t v556 = v555; // 0x403151\n    int64_t v557 = v554; // 0x403151\n    int64_t v558 = v126; // 0x403151\n    int64_t v559 = v553; // 0x403151\n    int64_t v560 = v552; // 0x403151\n    goto lab_0x402bd3;\n  lab_0x402bd3:;\n    int64_t v561 = -1 - v56;\n    result = 0;\n    if (v561 <= v556) {\n        // break -> 0x402687\n        goto lab_0x402687_12;\n    }\n    int64_t v562 = v558;\n    int64_t v407 = v561; // 0x402be1\n    int64_t v408 = v562; // 0x402be1\n    int64_t size3; // 0x4025f0\n    int64_t data4; // 0x4025f0\n    int64_t v526; // 0x4025f0\n    if (a1 == 0) {\n        goto lab_0x402900;\n    } else {\n        // 0x402be7\n        data4 = v560;\n        size3 = v559;\n        if (size3 >= v557) {\n            goto lab_0x402c33;\n        } else {\n            int64_t v563 = (0x100000000 * v112 >> 32) - size3; // 0x402bf2\n            if (v55 == 48) {\n                // 0x403b0b\n                v526 = v562;\n                if (v563 == 0) {\n                    goto lab_0x402c33;\n                } else {\n                    // 0x403b17\n                    *v19 = v562;\n                    int64_t v564; // 0x4025f0\n                    int64_t v565 = v564 + 1; // 0x403b30\n                    fputc(48, stream);\n                    v564 = v565;\n                    while (v563 != v565) {\n                        int64_t v566 = v564;\n                        v565 = v566 + 1;\n                        fputc(48, stream);\n                        v564 = v565;\n                    }\n                    // 0x402c2e\n                    v526 = *v19;\n                    goto lab_0x402c33;\n                }\n            } else {\n                // 0x402bff\n                v526 = v562;\n                if (v563 == 0) {\n                    goto lab_0x402c33;\n                } else {\n                    // 0x402c06\n                    *v19 = v562;\n                    int64_t v567 = 0; // 0x402c11\n                    v567++;\n                    fputc(32, stream);\n                    while (v563 != v567) {\n                        // 0x402c18\n                        v567++;\n                        fputc(32, stream);\n                    }\n                    // 0x402c2e\n                    v526 = *v19;\n                    goto lab_0x402c33;\n                }\n            }\n        }\n    }\n  lab_0x402b9b:;\n    int64_t v568 = v171;\n    v126 = v568;\n    if (*(char *)v568 != 37) {\n        goto lab_0x403110;\n    } else {\n        int64_t v569 = (int32_t)v112 >= 0 ? 0x100000000 * v112 >> 32 : 0; // 0x402bad\n        int64_t v570 = v569 != 0 ? v569 : 1; // 0x402bc4\n        *v18 = v570;\n        v556 = v570;\n        v557 = v569;\n        v558 = v568;\n        v559 = 1;\n        v560 = v568;\n        goto lab_0x402bd3;\n    }\n  lab_0x40297f:\n    // 0x40297f\n    *v16 = 0;\n    *v20 = 0x2520;\n    int64_t v326 = v124; // 0x402989\n    int64_t v327 = v169; // 0x402989\n    int64_t v328 = v157; // 0x402989\n    int64_t v329 = v141; // 0x402989\n    int64_t v330 = v147; // 0x402989\n    goto lab_0x402991;\n  lab_0x40291f:;\n    int64_t v325 = v170;\n    *v20 = 0x2520;\n    v326 = v325;\n    v327 = v123;\n    v328 = 0;\n    v329 = v112;\n    v330 = v55;\n    int64_t v331; // 0x4025f0\n    int64_t v332; // 0x4025f0\n    int64_t v333; // 0x4025f0\n    int64_t v334; // 0x4025f0\n    int64_t v335; // 0x4025f0\n    int64_t v336; // 0x4025f0\n    if (v122 != 0) {\n        goto lab_0x402991;\n    } else {\n        // 0x402935\n        v334 = *v21;\n        v336 = v325;\n        v335 = v123;\n        v331 = v112;\n        v332 = v55;\n        v333 = v122;\n        goto lab_0x402820;\n    }\n  lab_0x402a2c:;\n    unsigned char v337 = *v7; // 0x402a2c\n    *v14 = (int32_t)v112;\n    *v12 = (int32_t)v55;\n    *v23 = (int32_t)v337;\n    *v24 = (int64_t)*v22;\n    uint64_t v338 = function_4025f0(0, *v18, *tm, (int64_t)v337, *v25, *v10); // 0x402a63\n    int32_t v339 = *v14; // 0x402a6f\n    int64_t v340 = v339; // 0x402a6f\n    uint64_t v341 = v339 >= 0 ? v340 : 0; // 0x402a7d\n    int64_t v342 = v338 >= v341 ? v338 : v341; // 0x402a87\n    result = 0;\n    if (v342 >= -1 - v56) {\n        // break -> 0x402687\n        goto lab_0x402687_12;\n    }\n    // 0x402a94\n    v175 = v341;\n    v163 = v342;\n    if (a1 != 0) {\n        if (v338 < v341) {\n            int64_t v343 = v340 - v338; // 0x402aa6\n            if (*v12 == 48) {\n                // 0x403bab\n                if (v343 != 0) {\n                    int64_t v344 = 1; // 0x403bc8\n                    fputc(48, stream);\n                    int64_t v345 = v344; // 0x403bd4\n                    while (v343 != v344) {\n                        // 0x403bc0\n                        v344 = v345 + 1;\n                        fputc(48, stream);\n                        v345 = v344;\n                    }\n                }\n            } else {\n                // 0x402ab3\n                if (v343 != 0) {\n                    int64_t v346 = 1; // 0x402ac8\n                    fputc(32, stream);\n                    int64_t v347 = v346; // 0x402ad4\n                    while (v343 != v346) {\n                        // 0x402ac0\n                        v346 = v347 + 1;\n                        fputc(32, stream);\n                        v347 = v346;\n                    }\n                }\n            }\n        }\n        // 0x402ad6\n        *v24 = (int64_t)*v22;\n        int64_t v348 = *tm; // 0x402af3\n        function_4025f0(a1, *v18, v348, (int64_t)*v23, *v25, *v10);\n        v175 = v348;\n        v163 = v342;\n    }\n    goto lab_0x402b06;\n  lab_0x402ccc:\n    // 0x402ccc\n    v45 = v51;\n    v46 = v52;\n    v39 = v176;\n    v59 = v123;\n    v57 = *v18 + v56;\n    goto lab_0x40267a;\n  lab_0x402800:\n    // 0x402800\n    *v16 = 0;\n    *v20 = 0x2520;\n    v334 = *v21;\n    v336 = v124;\n    v335 = v123;\n    v331 = v112;\n    v332 = v55;\n    v333 = 0;\n    goto lab_0x402820;\n  lab_0x402b06:\n    // 0x402b06\n    v45 = v51;\n    v46 = v52;\n    v39 = v175;\n    v59 = v123;\n    v57 = v163 + v56;\n    goto lab_0x40267a;\n  lab_0x4037c0:;\n    int64_t v349 = v150;\n    int64_t v350 = v138;\n    int64_t v351 = v167;\n    *c3 = 45;\n    int64_t v352 = v351; // 0x4037c9\n    int64_t v353 = v350; // 0x4037c9\n    int64_t v354 = v144; // 0x4037c9\n    int64_t v355 = v349; // 0x4037c9\n    int32_t v356; // 0x4025f0\n    char v357; // 0x4025f0\n    int64_t v358; // 0x4025f0\n    int64_t v359; // 0x4025f0\n    int64_t v360; // 0x4025f0\n    if ((int32_t)v144 != 45) {\n        goto lab_0x402e73;\n    } else {\n        // 0x4037cf\n        *v16 = 45;\n        v356 = v350;\n        v357 = 45;\n        v360 = v351;\n        v358 = v350;\n        v359 = v349;\n        goto lab_0x4037d4;\n    }\n  lab_0x4032eb:;\n    int64_t v361 = v137;\n    int64_t v362 = v15 - v151; // 0x4032f6\n    int32_t v363; // 0x4025f0\n    int32_t v364; // 0x4025f0\n    int64_t v365; // 0x4025f0\n    int64_t v366; // 0x4025f0\n    int64_t v367; // 0x4025f0\n    int64_t v368; // 0x4025f0\n    int64_t v369; // 0x4025f0\n    int64_t v370; // 0x4025f0\n    int64_t v371; // 0x4025f0\n    int64_t v372; // 0x4025f0\n    int64_t v373; // 0x4025f0\n    if ((int32_t)v143 == 45) {\n        goto lab_0x403315;\n    } else {\n        int32_t v374 = v135 - (int32_t)v362; // 0x403306\n        *v14 = v374;\n        if (v374 >= 0 == (v374 != 0)) {\n            int64_t v375; // 0x4025f0\n            int64_t v376; // 0x4025f0\n            int64_t v377; // 0x4025f0\n            int32_t v378; // 0x4032fc\n            if (v378 == 95) {\n                // 0x4039d3\n                *c3 = 0;\n                int32_t v379 = *v14;\n                v364 = v379;\n                v371 = v377;\n                v373 = v376;\n                v365 = v361;\n                v368 = v375;\n                goto lab_0x4039d8;\n            } else {\n                int32_t v380 = *v9; // 0x4026a6\n                result = 0;\n                v363 = v374;\n                v372 = v376;\n                int64_t v381; // 0x4025f0\n                v366 = v381;\n                v367 = v56;\n                v369 = v375;\n                v370 = v362;\n                if (v377 <= (int64_t)v380) {\n                    // break -> 0x402687\n                    goto lab_0x402687_12;\n                }\n                goto lab_0x402f57;\n            }\n        } else {\n            goto lab_0x403315;\n        }\n    }\n  lab_0x402960:\n    // 0x402960\n    v132 = v131;\n    v168 = v123;\n    v162 = 0;\n    v172 = 0;\n    v154 = 0;\n    v156 = v155;\n    v140 = v139;\n    v146 = v145;\n    goto lab_0x40296c;\n  lab_0x402900:\n    // 0x402900\n    v45 = v51;\n    v46 = v52;\n    v39 = v407;\n    v59 = v408;\n    v57 = *v18 + v56;\n    goto lab_0x40267a;\n  lab_0x402991:\n    // 0x402991\n    *(char *)(v5 + 130) = (char)v122;\n    v334 = v5 + 131;\n    v336 = v326;\n    v335 = v327;\n    v331 = v329;\n    v332 = v330;\n    v333 = v328 & 0xffffffff;\n    goto lab_0x402820;\n  lab_0x40296c:;\n    int64_t v382 = v146;\n    int64_t v383 = v140;\n    int64_t v384 = v156;\n    int64_t v385 = v154;\n    int64_t v386 = v172;\n    int64_t v387 = v162;\n    int64_t v388 = v168;\n    int64_t v389 = v132;\n    v133 = v389;\n    v164 = v388;\n    v160 = v387;\n    v173 = v386;\n    v152 = v385;\n    v158 = v384;\n    v142 = v383;\n    v148 = v382;\n    int64_t v390; // 0x4025f0\n    int64_t v391; // 0x4025f0\n    int64_t v392; // 0x4025f0\n    int64_t v393; // 0x4025f0\n    int64_t v394; // 0x4025f0\n    int64_t v395; // 0x4025f0\n    int64_t v396; // 0x4025f0\n    int64_t v397; // 0x4025f0\n    if (v122 != 79) {\n        goto lab_0x402dd0;\n    } else {\n        // 0x402976\n        v169 = v388;\n        v157 = v384;\n        v141 = v383;\n        v147 = v382;\n        v390 = v389;\n        v396 = v388;\n        v395 = v387;\n        v397 = v386;\n        v393 = v385;\n        v394 = v384;\n        v391 = v383;\n        v392 = v382;\n        if ((char)v385 != 0) {\n            goto lab_0x402dd5;\n        } else {\n            goto lab_0x40297f;\n        }\n    }\n  lab_0x402d33:;\n    int32_t v398 = v177;\n    int64_t v399 = (v398 + (int32_t)(-0x6db6db6d * (int64_t)v398 / 0x100000000) >> 2) - (v398 >> 31); // 0x402d42\n    v1 = v399;\n    v131 = v399;\n    v155 = 2;\n    v139 = v112;\n    v145 = v55;\n    goto lab_0x402960;\n  lab_0x402dd0:\n    // 0x402dd0\n    v390 = v133;\n    v396 = v164;\n    v395 = v160;\n    v397 = v173;\n    v393 = v152;\n    v394 = v158;\n    v391 = v142;\n    v392 = v148;\n    v165 = v164;\n    v161 = v160;\n    v174 = v173;\n    v153 = v152;\n    v159 = v158;\n    v136 = v142;\n    v149 = v148;\n    if ((char)v152 == 0) {\n        goto lab_0x402dd7;\n    } else {\n        goto lab_0x402dd5;\n    }\n  lab_0x402820:;\n    int64_t v400 = v333;\n    int64_t v401 = v335;\n    *(char *)v334 = (char)v336;\n    *(char *)(v334 + 1) = 0;\n    *v9 = (int32_t)v331;\n    *v12 = (int32_t)v332;\n    int32_t copied_chars = strftime((char *)str2, 1024, (char *)format, (struct tm *)*tm); // 0x40284a\n    v45 = v51;\n    v46 = v52;\n    v39 = format;\n    v59 = v401;\n    v57 = v56;\n    if (copied_chars == 0) {\n        goto lab_0x40267a;\n    } else {\n        int32_t v402 = *v9; // 0x402858\n        int64_t v403 = v402; // 0x402858\n        int64_t size = (int64_t)copied_chars - 1; // 0x40285d\n        int64_t v404 = -1 - v56;\n        uint64_t v405 = v402 >= 0 ? v403 : 0; // 0x40286f\n        uint64_t v406 = size >= v405 ? size : v405; // 0x402879\n        *v18 = v406;\n        result = 0;\n        if (v406 >= v404) {\n            // break -> 0x402687\n            goto lab_0x402687_12;\n        }\n        // 0x40288b\n        v407 = v404;\n        v408 = v401;\n        if (a1 != 0) {\n            if ((int32_t)v400 == 0 == size < v405) {\n                int64_t v409 = v403 - size; // 0x4028a2\n                if (*v12 == 48) {\n                    // 0x4038c5\n                    if (v409 != 0) {\n                        int64_t v410 = 1; // 0x4038e0\n                        fputc(48, stream);\n                        int64_t v411 = v410; // 0x4038ec\n                        while (v409 != v410) {\n                            // 0x4038d8\n                            v410 = v411 + 1;\n                            fputc(48, stream);\n                            v411 = v410;\n                        }\n                    }\n                } else {\n                    // 0x4028af\n                    if (v409 != 0) {\n                        int64_t v412 = 1; // 0x4028c8\n                        fputc(32, stream);\n                        int64_t v413 = v412; // 0x4028d4\n                        while (v409 != v412) {\n                            // 0x4028c0\n                            v412 = v413 + 1;\n                            fputc(32, stream);\n                            v413 = v412;\n                        }\n                    }\n                }\n            }\n            // 0x4028d6\n            if (*v16 != 0) {\n                // 0x4038ad\n                function_402530(v3, data2, size);\n                v407 = size;\n                v408 = v401;\n            } else {\n                // 0x4028e1\n                if (*v7 == 0) {\n                    // 0x403890\n                    fwrite((int64_t *)data2, (int32_t)size, 1, stream);\n                    v407 = 1;\n                    v408 = v401;\n                } else {\n                    // 0x4028ec\n                    function_402590(v3, data2, size);\n                    v407 = size;\n                    v408 = v401;\n                }\n            }\n        }\n        goto lab_0x402900;\n    }\n  lab_0x402f90:;\n    int64_t v414 = v134;\n    v131 = v414;\n    v155 = 2;\n    v139 = v112;\n    v145 = v55;\n    switch ((int32_t)v55) {\n        case 48: {\n            goto lab_0x402960;\n        }\n        case 45: {\n            goto lab_0x402960;\n        }\n        default: {\n            // 0x402faa\n            v131 = v414;\n            v155 = 2;\n            v139 = v112;\n            v145 = 95;\n            goto lab_0x402960;\n        }\n    }\n  lab_0x402dd7:;\n    int64_t v415 = v149;\n    int64_t v416 = v136;\n    int64_t v417 = v159;\n    int64_t v418 = v161;\n    int64_t v419 = v165;\n    *v26 = (char)v153;\n    int64_t v420 = v15 - 1;\n    int64_t v421 = v420; // 0x402df8\n    if (v174 % 2 != 0) {\n        // 0x402dfa\n        *(char *)v420 = 58;\n        v421 = v15 - 2;\n    }\n    int64_t v422 = v421;\n    uint32_t v423 = (int32_t)v174 >> 1; // 0x402e0d\n    int64_t v424 = 0xcccccccd * (v1 & 0xffffffff) / 0x800000000; // 0x402e0f\n    *(char *)v422 = (char)v1 + 48 + -10 * (char)v424;\n    while (v423 == 0 != (int32_t)v1 < 10) {\n        // 0x402e32\n        v1 = v424;\n        int64_t v425 = v423; // 0x402e34\n        int64_t v426 = v422;\n        v420 = v426 - 1;\n        v421 = v420;\n        if (v425 % 2 != 0) {\n            // 0x402dfa\n            *(char *)v420 = 58;\n            v421 = v426 - 2;\n        }\n        // 0x402e08\n        v422 = v421;\n        v423 = (int32_t)v425 >> 1;\n        v424 = 0xcccccccd * (v1 & 0xffffffff) / 0x800000000;\n        *(char *)v422 = (char)v1 + 48 + -10 * (char)v424;\n    }\n    int32_t v427 = v417; // 0x402e40\n    int32_t v428 = v416;\n    int32_t v429 = v427 - v428; // 0x402e40\n    int64_t v430 = v429 < 0 == ((v429 ^ v427) & (int32_t)(v416 ^ v417)) < 0 ? v417 : v416;\n    int32_t v431 = v430; // 0x402e4d\n    *v9 = v431;\n    v167 = v419;\n    v138 = v416;\n    v144 = v415;\n    v150 = v422;\n    if (*v26 != 0) {\n        goto lab_0x4037c0;\n    } else {\n        // 0x402e5b\n        v135 = v431;\n        v166 = v419;\n        v137 = v416;\n        v143 = v415;\n        v151 = v422;\n        if ((char)v418 == 0) {\n            goto lab_0x4032eb;\n        } else {\n            if ((int32_t)v415 == 45) {\n                // 0x403b43\n                *v16 = 43;\n                v356 = v428;\n                v357 = 43;\n                v360 = v419;\n                v358 = v416;\n                v359 = v422;\n                goto lab_0x4037d4;\n            } else {\n                // 0x402e6e\n                *c3 = 43;\n                v352 = v419;\n                v353 = v416;\n                v354 = v415;\n                v355 = v422;\n                goto lab_0x402e73;\n            }\n        }\n    }\n  lab_0x402e73:;\n    int64_t v432 = v355;\n    int64_t v433 = v354;\n    int64_t v434 = v353;\n    int64_t v435 = v352;\n    int64_t v436 = v15 - v432; // 0x402e7f\n    int32_t v437 = *v9 + -1 - (int32_t)v436; // 0x402e85\n    *v14 = v437;\n    uint64_t v438 = -1 - v56;\n    int64_t v439; // 0x4025f0\n    int64_t v440; // 0x4025f0\n    int64_t v441; // 0x4025f0\n    int64_t v442; // 0x4025f0\n    int64_t v443; // 0x4025f0\n    int64_t v444; // 0x4025f0\n    if (v437 < 1) {\n        int32_t v445 = v434; // 0x4038f3\n        int64_t v446 = 0x100000000 * v434 >> 32;\n        int64_t v447 = v445 >= 0 ? v446 : 0; // 0x403904\n        int64_t v448 = v447 != 0 ? v447 : 1; // 0x40390a\n        *v19 = v448;\n        result = 0;\n        if (v448 >= v438) {\n            // break -> 0x402687\n            goto lab_0x402687_12;\n        }\n        int64_t v449 = v448; // 0x40391f\n        int64_t v450 = v447; // 0x40391f\n        int64_t v451 = v435; // 0x40391f\n        if (a1 != 0) {\n            int64_t v452 = v447; // 0x40392d\n            int64_t v453 = v435; // 0x40392d\n            int64_t v454 = v434; // 0x40392d\n            int64_t v455 = v433; // 0x40392d\n            if (!((v447 < 2 | *v9 != 0))) {\n                int64_t v456 = v446 - 1; // 0x403938\n                *v28 = v456;\n                int32_t v457 = v433; // 0x403941\n                if (v457 == 48) {\n                    // 0x403dee\n                    v452 = v447;\n                    v453 = v435;\n                    v454 = v434;\n                    v455 = v433;\n                    if (v456 != 0) {\n                        // 0x403dfa\n                        *v35 = 48;\n                        *v32 = v445;\n                        *v33 = v435;\n                        int64_t v458 = 0; // 0x403e0e\n                        v458++;\n                        fputc(48, stream);\n                        while (*v28 != v458) {\n                            // 0x403e11\n                            v458++;\n                            fputc(48, stream);\n                        }\n                        // 0x403e29\n                        v452 = v447;\n                        v453 = *v33;\n                        v454 = (int64_t)*v32;\n                        v455 = (int64_t)*v35;\n                    }\n                } else {\n                    // 0x40394b\n                    v452 = v447;\n                    v453 = v435;\n                    v454 = v434;\n                    v455 = v433;\n                    if (v456 != 0) {\n                        // 0x403952\n                        *v35 = v457;\n                        *v32 = v445;\n                        *v33 = v447;\n                        *v38 = v435;\n                        int64_t v459 = 0; // 0x403966\n                        v459++;\n                        fputc(32, stream);\n                        while (*v28 != v459) {\n                            // 0x40396b\n                            v459++;\n                            fputc(32, stream);\n                        }\n                        // 0x403981\n                        v452 = *v33;\n                        v453 = *v38;\n                        v454 = (int64_t)*v32;\n                        v455 = (int64_t)*v35;\n                    }\n                }\n            }\n            // 0x403995\n            *v34 = v452;\n            *v35 = (int32_t)v454;\n            *v36 = (int32_t)v455;\n            fputc((int32_t)*c3, stream);\n            v450 = *v34;\n            v449 = *v19;\n            v451 = v453;\n        }\n        int64_t v460 = v449 + v56; // 0x4039c0\n        v442 = -1 - v460;\n        v444 = v450;\n        v443 = v451;\n        v439 = v460;\n        v440 = v432;\n        v441 = v436;\n        goto lab_0x403327;\n    } else {\n        int32_t v461 = v433; // 0x402e9c\n        v364 = v437;\n        v371 = v438;\n        v373 = v435;\n        v365 = v434;\n        v368 = v432;\n        if (v461 == 95) {\n            goto lab_0x4039d8;\n        } else {\n            int64_t v462 = (int64_t)*v9; // 0x402ea6\n            v1 = v462;\n            result = 0;\n            if (v438 <= v462) {\n                // break -> 0x402687\n                goto lab_0x402687_12;\n            }\n            int64_t v463 = 0x100000000 * v434 >> 32;\n            uint64_t v464 = (int32_t)v434 >= 0 ? v463 : 0; // 0x402ec8\n            int64_t v465 = v464 != 0 ? v464 : 1; // 0x402ece\n            *v28 = v465;\n            result = 0;\n            if (v465 >= v438) {\n                // break -> 0x402687\n                goto lab_0x402687_12;\n            }\n            int64_t v466 = v465; // 0x402ee3\n            int64_t v467 = v435; // 0x402ee3\n            int64_t v468 = v433; // 0x402ee3\n            if (a1 != 0) {\n                int64_t v469 = v435; // 0x402ee7\n                int64_t v470 = v433; // 0x402ee7\n                if (v464 >= 2 && (int32_t)v1 == 0) {\n                    int64_t v471 = v463 - 1; // 0x402ef2\n                    *v30 = v471;\n                    if (v461 == 48) {\n                        // 0x403e40\n                        v469 = v435;\n                        v470 = v433;\n                        if (v471 != 0) {\n                            // 0x403e4c\n                            *v34 = v435;\n                            int64_t v472 = 0; // 0x403e56\n                            v472++;\n                            fputc(48, stream);\n                            while (*v30 != v472) {\n                                // 0x403e59\n                                v472++;\n                                fputc(48, stream);\n                            }\n                            // 0x403e71\n                            v469 = *v34;\n                            v470 = v433 & 0xffffffff;\n                        }\n                    } else {\n                        // 0x402f05\n                        v469 = v435;\n                        v470 = v433;\n                        if (v471 != 0) {\n                            // 0x402f0c\n                            *v32 = v461;\n                            *v33 = v435;\n                            int64_t v473 = 0; // 0x402f16\n                            v473++;\n                            fputc(32, stream);\n                            while (*v30 != v473) {\n                                // 0x402f1b\n                                v473++;\n                                fputc(32, stream);\n                            }\n                            // 0x402f31\n                            v469 = *v33;\n                            v470 = (int64_t)*v32;\n                        }\n                    }\n                }\n                // 0x402f3b\n                *v35 = (int32_t)v470;\n                fputc((int32_t)*c3, stream);\n                v466 = *v28;\n                v467 = v469;\n                v468 = (int64_t)*v35;\n            }\n            // 0x402f52\n            v363 = *v14;\n            v372 = v467;\n            v366 = v468;\n            v367 = v466 + v56;\n            v369 = v432;\n            v370 = v436;\n            goto lab_0x402f57;\n        }\n    }\n  lab_0x403315:\n    // 0x403315\n    v442 = -1 - v56;\n    v444 = (int32_t)v361 >= 0 ? 0x100000000 * v361 >> 32 : 0;\n    v443 = v166;\n    v439 = v56;\n    v440 = v151;\n    v441 = v362;\n    goto lab_0x403327;\n  lab_0x403d59:;\n    int64_t v519 = (int64_t)(100 * *v9 + v520); // 0x403d69\n    v1 = v519;\n    v132 = v519;\n    v168 = v521;\n    v162 = 1;\n    v172 = 4;\n    v154 = v522;\n    v156 = 6;\n    v140 = v112;\n    v146 = v55;\n    goto lab_0x40296c;\n  lab_0x403d35:;\n    int64_t v523 = (int64_t)(100 * v520 + v524 + 0x2710 * *v9); // 0x403d52\n    v1 = v523;\n    v132 = v523;\n    v168 = v521;\n    v162 = 1;\n    v172 = 20;\n    v154 = v522;\n    v156 = 9;\n    v140 = v112;\n    v146 = v55;\n    goto lab_0x40296c;\n  lab_0x402c33:;\n    int64_t v525 = v526;\n    if (*v7 == 0) {\n        // 0x403878\n        fwrite((int64_t *)data4, (int32_t)size3, 1, stream);\n        v407 = 1;\n        v408 = v525;\n    } else {\n        // 0x402c3e\n        function_402590(v3, data4, size3);\n        v407 = size3;\n        v408 = v525;\n    }\n    goto lab_0x402900;\n  lab_0x402dd5:\n    // 0x402dd5\n    v1 = -v390 & 0xffffffff;\n    v165 = v396;\n    v161 = v395;\n    v174 = v397;\n    v153 = v393;\n    v159 = v394;\n    v136 = v391;\n    v149 = v392;\n    goto lab_0x402dd7;\n  lab_0x4037d4:;\n    int32_t v527 = v356;\n    int64_t v528 = 0x100000000 * v358 >> 32;\n    int64_t v529 = v527 >= 0 ? v528 : 0; // 0x4037ec\n    uint64_t v530 = v529 != 0 ? v529 : 1; // 0x4037f2\n    result = 0;\n    if (v530 >= -1 - v56) {\n        // break -> 0x402687\n        goto lab_0x402687_12;\n    }\n    int64_t v531 = v360;\n    int64_t v532 = v529; // 0x403802\n    int64_t v533 = v531; // 0x403802\n    if (a1 != 0) {\n        char v534 = v357;\n        int32_t v535 = v527; // 0x40380c\n        char c5 = v534; // 0x40380c\n        int64_t v536 = v529; // 0x40380c\n        int64_t v537 = v531; // 0x40380c\n        if (!((v529 < 2 | *v9 != 0))) {\n            int64_t v538 = v528 - 1; // 0x403ced\n            v535 = v527;\n            c5 = v534;\n            v536 = v529;\n            v537 = v531;\n            if (v538 != 0) {\n                // 0x403cf7\n                *v12 = v527;\n                *v28 = v529;\n                *v30 = v531;\n                int64_t v539 = 0; // 0x403d08\n                v539++;\n                fputc(32, stream);\n                while (v538 != v539) {\n                    // 0x403d0b\n                    v539++;\n                    fputc(32, stream);\n                }\n                // 0x403d21\n                v535 = *v12;\n                c5 = *v16;\n                v536 = *v28;\n                v537 = *v30;\n            }\n        }\n        // 0x403818\n        *v28 = v536;\n        *v12 = v535;\n        fputc((int32_t)c5, stream);\n        v532 = *v28;\n        v533 = v537;\n    }\n    int64_t v540 = v530 + v56; // 0x403839\n    v442 = -1 - v540;\n    v444 = v532;\n    v443 = v533;\n    v439 = v540;\n    v440 = v359;\n    v441 = v15 - v359;\n    goto lab_0x403327;\n  lab_0x403327:;\n    uint64_t size2 = v441;\n    int64_t data3 = v440;\n    int64_t v474 = v443;\n    uint64_t v475 = v444;\n    uint64_t v476 = size2 >= v475 ? size2 : v475; // 0x40332d\n    *v19 = v476;\n    result = 0;\n    if (v476 >= v442) {\n        // break -> 0x402687\n        goto lab_0x402687_12;\n    }\n    int64_t v477 = v475; // 0x403342\n    int64_t v478 = v474; // 0x403342\n    if (a1 == 0) {\n        goto lab_0x4033ac;\n    } else {\n        // 0x403344\n        if (size2 < v475 == *v9 == 0) {\n            // 0x403351\n            int64_t v479; // 0x4025f0\n            int64_t v480 = (0x100000000 * v479 >> 32) - size2; // 0x403354\n            int64_t v481; // 0x4025f0\n            if ((int32_t)v481 == 48) {\n                // 0x403acd\n                if (v480 == 0) {\n                    goto lab_0x403393;\n                } else {\n                    // 0x403ad9\n                    *v18 = v474;\n                    int64_t v482 = 0; // 0x403ae3\n                    int64_t v483 = v482;\n                    int64_t v484 = v483 + 1; // 0x403af0\n                    fputc(48, stream);\n                    v482 = v484;\n                    while (v480 != v484) {\n                        // 0x403ae8\n                        v483 = v482;\n                        v484 = v483 + 1;\n                        fputc(48, stream);\n                        v482 = v484;\n                    }\n                    // 0x40338e\n                    goto lab_0x403393;\n                }\n            } else {\n                // 0x403361\n                if (v480 == 0) {\n                    goto lab_0x403393;\n                } else {\n                    // 0x403368\n                    *v18 = v474;\n                    int64_t v485 = 0; // 0x403373\n                    int64_t v486 = v485;\n                    int64_t v487 = v486 + 1; // 0x403380\n                    fputc(32, stream);\n                    v485 = v487;\n                    while (v480 != v487) {\n                        // 0x403378\n                        v486 = v485;\n                        v487 = v486 + 1;\n                        fputc(32, stream);\n                        v485 = v487;\n                    }\n                    // 0x40338e\n                    goto lab_0x403393;\n                }\n            }\n        } else {\n            goto lab_0x403393;\n        }\n    }\n  lab_0x4039d8:;\n    uint64_t v488 = (int64_t)v364; // 0x4039d8\n    result = 0;\n    if (v371 <= v488) {\n        // break -> 0x402687\n        goto lab_0x402687_12;\n    }\n    int64_t v489 = v368;\n    int64_t v490 = v365;\n    int64_t v491 = v373;\n    int32_t v492 = v364; // 0x4039e9\n    int64_t v493 = v490; // 0x4039e9\n    if (a1 != 0) {\n        // 0x403b71\n        *v36 = (int32_t)v490;\n        int64_t v494 = 0; // 0x403b82\n        v494++;\n        fputc(32, stream);\n        while (v494 < v488) {\n            // 0x403b88\n            v494++;\n            fputc(32, stream);\n        }\n        // 0x403b9e\n        v492 = *v14;\n        v493 = (int64_t)*v36;\n    }\n    int32_t v495 = v492; // 0x4039ef\n    int32_t v496 = v493; // 0x4039f3\n    int64_t v497 = v56 + v488; // 0x4039f6\n    int32_t v498 = v495 - v496; // 0x4039fb\n    int64_t v499 = v498 < 0 == ((v498 ^ v495) & (v495 ^ v496)) < 0 ? 0 : (int64_t)(v496 - v495); // 0x403a04\n    char v500 = *c3; // 0x403a0b\n    int64_t v501 = -1 - v497;\n    int64_t v502 = 0x100000000 * v499 >> 32;\n    if (v500 == 0) {\n        // 0x403b55\n        v442 = v501;\n        v444 = v502;\n        v443 = v491;\n        v439 = v497;\n        v440 = v489;\n        v441 = v15 - v489;\n    } else {\n        uint64_t v503 = v499 != 0 ? v502 : 1; // 0x403a24\n        result = 0;\n        if (v503 >= v501) {\n            // break -> 0x402687\n            goto lab_0x402687_12;\n        }\n        int64_t v504 = v502; // 0x403a34\n        int64_t v505 = v491; // 0x403a34\n        if (a1 != 0) {\n            char c4 = v500; // 0x403a3e\n            int64_t v506 = v491; // 0x403a3e\n            int64_t v507 = v499; // 0x403a3e\n            if (*v9 == 0) {\n                uint32_t v508 = (int32_t)v499; // 0x403a40\n                c4 = v500;\n                v506 = v491;\n                v507 = v499;\n                if (v508 >= 2) {\n                    // 0x403e7e\n                    *v36 = v508;\n                    *v19 = v502 - 1;\n                    *v30 = v491;\n                    int64_t v509 = 0; // 0x403e97\n                    v509++;\n                    fputc(32, stream);\n                    while (*v19 != v509) {\n                        // 0x403e9a\n                        v509++;\n                        fputc(32, stream);\n                    }\n                    // 0x403eb2\n                    c4 = *c3;\n                    v506 = *v30;\n                    v507 = (int64_t)*v36;\n                }\n            }\n            // 0x403a4a\n            *v28 = v502;\n            *v14 = (int32_t)v507;\n            fputc((int32_t)c4, stream);\n            v504 = *v28;\n            v505 = v506;\n        }\n        int64_t v510 = v503 + v497; // 0x403a6b\n        v442 = -1 - v510;\n        v444 = v504;\n        v443 = v505;\n        v439 = v510;\n        v440 = v489;\n        v441 = v15 - v489;\n    }\n    goto lab_0x403327;\n  lab_0x4033ac:\n    // 0x4033ac\n    v45 = v51;\n    v46 = v52;\n    v39 = v477;\n    v59 = v478;\n    v57 = *v19 + v439;\n    goto lab_0x40267a;\n  lab_0x402f57:;\n    int64_t v511 = v366;\n    int64_t v512 = v372;\n    int64_t v513 = v363; // 0x402f57\n    *v19 = v513;\n    int64_t v514 = v513; // 0x402f67\n    int64_t v515 = v512; // 0x402f67\n    if (a1 != 0) {\n        // 0x403a8d\n        *v36 = (int32_t)v511;\n        *v37 = v512;\n        int64_t v516 = 0; // 0x403aa1\n        v516++;\n        fputc(48, stream);\n        while (v516 < *v19) {\n            // 0x403aa8\n            v516++;\n            fputc(48, stream);\n        }\n        // 0x403abe\n        v514 = *v19;\n        v515 = *v37;\n    }\n    int64_t v517 = v514 + v367; // 0x402f6d\n    v442 = -1 - v517;\n    v444 = 0;\n    v443 = v515;\n    v439 = v517;\n    v440 = v369;\n    v441 = v370;\n    goto lab_0x403327;\n  lab_0x403393:;\n    int64_t v518 = v474;\n    if (*v7 == 0) {\n        // 0x403860\n        fwrite((int64_t *)data3, (int32_t)size2, 1, stream);\n        v477 = 1;\n        v478 = v518;\n    } else {\n        // 0x40339e\n        function_402590(v3, data3, size2);\n        v477 = size2;\n        v478 = v518;\n    }\n    goto lab_0x4033ac;\n}\n"
        },
        {
            "funcName": "function_403f10",
            "funcStartAddr": "403f10",
            "funcEndAddr": "403f2f",
            "decompiledFuncCode": "int64_t function_403f10(int64_t a1, int64_t a2, int64_t a3, int32_t a4, int32_t a5) {\n    char v1 = 0; // bp-9, 0x403f19\n    int64_t result = function_4025f0((int32_t)a1, a2, a3, 0, (int64_t)&v1, (int64_t)a4); // 0x403f25\n    return result;\n}\n"
        },
        {
            "funcName": "function_403f30",
            "funcStartAddr": "403f30",
            "funcEndAddr": "404032",
            "decompiledFuncCode": "int64_t function_403f30(int64_t a1, int64_t a2, char * a3, char * a4, int64_t a5, int64_t a6) {\n    // 0x403f30\n    int64_t v1; // 0x403f30\n    if ((char)v1 != 0) {\n        // 0x403f43\n        int128_t v2; // 0x403f30\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n        __asm_movaps(v2);\n    }\n    int32_t v3 = g28; // 0x403f7a\n    g28 = 0;\n    if ((int32_t)a1 != 2) {\n        // 0x403f8f\n        g28 = v3;\n        g29 = 0;\n        int64_t result; // 0x403f30\n        return result;\n    }\n    int64_t result2 = function_407200(a1, a2, &g3, (int64_t *)&g4, 0, a6); // 0x403fc9\n    int32_t v4 = result2; // 0x403fce\n    switch (v4) {\n        default: {\n            // 0x403fd8\n            if (v4 == 118) {\n                int64_t v5 = 48; // bp-240, 0x403ffa\n                function_406080((int64_t)g31, (int64_t)a3, (int64_t)a4, a5, &v5, a6);\n                exit(0);\n                // UNREACHABLE\n            }\n        }\n        case -1: {\n        }\n        case 104: {\n            // 0x403f8f\n            g28 = v3;\n            g29 = 0;\n            return result2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_404040",
            "funcStartAddr": "404040",
            "funcEndAddr": "4040d9",
            "decompiledFuncCode": "int64_t function_404040(int64_t str) {\n    // 0x404040\n    if (str == 0) {\n        // 0x4040b9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g33);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40404e\n    int64_t result = (int64_t)found_char_pos; // 0x40404e\n    if (found_char_pos == NULL) {\n        // 0x4040a9\n        g38 = str;\n        g32 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x404058\n    if (v1 - str < 7) {\n        // 0x4040a9\n        g38 = str;\n        g32 = str;\n        return result;\n    }\n    // 0x404068\n    bool v2; // 0x404040\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x404040\n    int64_t v5 = result - 6; // 0x404040\n    int64_t v6 = 7; // 0x404076\n    unsigned char v7 = *(char *)v5; // 0x404076\n    char v8 = *(char *)v4; // 0x404076\n    char v9 = v8; // 0x404076\n    bool v10 = false; // 0x404076\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x404080\n    int64_t v13 = v1; // 0x404080\n    int64_t v14 = 3; // 0x404080\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4040a9\n        g38 = str;\n        g32 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x404092\n    char v16 = *(char *)v12; // 0x404092\n    char v17 = v16; // 0x404092\n    bool v18 = false; // 0x404092\n    while (v15 == v16) {\n        // 0x404082\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x40409c\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x40409e\n        v20 = result + 4;\n        g30 = v20;\n    }\n    // 0x4040a9\n    g38 = v20;\n    g32 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4040e0",
            "funcStartAddr": "4040e0",
            "funcEndAddr": "4041d2",
            "decompiledFuncCode": "int64_t function_4040e0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x4040f4\n    int64_t result = (int64_t)v1; // 0x4040f4\n    if (result != a1) {\n        // 0x404101\n        return result;\n    }\n    int64_t v2 = function_407b70(); // 0x404110\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4041c6\n    if (v3 == 85) {\n        // 0x404120\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4041b8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x40414e\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x40415b\n        // 0x404101\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4041b8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x40419d\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x4041aa\n    // 0x404101\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4041e0",
            "funcStartAddr": "4041e0",
            "funcEndAddr": "404237",
            "decompiledFuncCode": "int64_t function_4041e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4041e0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x404228\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404237",
            "funcStartAddr": "404237",
            "funcEndAddr": "405401",
            "decompiledFuncCode": "int64_t function_404237(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x404281\n    int64_t v3 = 0; // 0x404281\n    int64_t v4; // 0x404237\n    int64_t v5; // 0x404237\n    int64_t v6; // 0x404237\n    int64_t v7; // 0x404237\n    int64_t v8; // 0x404237\n    int64_t v9; // 0x404237\n    int64_t v10; // 0x404237\n    int64_t v11; // 0x404237\n    int64_t v12; // 0x404237\n    int64_t v13; // 0x404237\n    int64_t v14; // 0x404237\n    int64_t v15; // 0x404237\n    int64_t v16; // 0x404237\n    int64_t v17; // 0x404237\n    int64_t v18; // 0x404237\n    int64_t result; // 0x404237\n    int64_t v19; // 0x404237\n    int32_t wc; // bp+132, 0x404237\n    int64_t ps; // bp+136, 0x404237\n    char v20; // 0x4047f0\n    int64_t v21; // 0x4047f0\n    int64_t v22; // 0x404b98\n    int64_t v23; // 0x404237\n    int64_t v24; // 0x404bb7\n    int32_t v25; // 0x404237\n    while (true) {\n      lab_0x404288_2:\n        // 0x404288\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x404237\n        int64_t v27; // 0x4042bc\n        while (true) {\n          lab_0x404288:\n            // 0x404288\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x404293\n            if (v15 == -1) {\n                // 0x404295\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4042a3\n            if (v28) {\n                // break (via goto) -> 0x404a08\n                goto lab_0x404a08;\n            }\n            // 0x4042ac\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g52 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x40489b\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4043e1;\n                    }\n                    // 0x404cbd\n                    v26 = v5 + 1;\n                    goto lab_0x404288;\n                }\n                case 7: {\n                    goto lab_0x4043e1;\n                }\n                case 8: {\n                    goto lab_0x4043e1;\n                }\n                case 9: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4043e1;\n                }\n                case 12: {\n                    goto lab_0x4043e1;\n                }\n                case 13: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x4043ad;\n                }\n                case 36: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4043e1;\n                }\n                case 38: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4043e1;\n                }\n                case 44: {\n                    goto lab_0x4043e1;\n                }\n                case 45: {\n                    goto lab_0x4043e1;\n                }\n                case 46: {\n                    goto lab_0x4043e1;\n                }\n                case 47: {\n                    goto lab_0x4043e1;\n                }\n                case 48: {\n                    goto lab_0x4043e1;\n                }\n                case 49: {\n                    goto lab_0x4043e1;\n                }\n                case 50: {\n                    goto lab_0x4043e1;\n                }\n                case 51: {\n                    goto lab_0x4043e1;\n                }\n                case 52: {\n                    goto lab_0x4043e1;\n                }\n                case 53: {\n                    goto lab_0x4043e1;\n                }\n                case 54: {\n                    goto lab_0x4043e1;\n                }\n                case 55: {\n                    goto lab_0x4043e1;\n                }\n                case 56: {\n                    goto lab_0x4043e1;\n                }\n                case 57: {\n                    goto lab_0x4043e1;\n                }\n                case 58: {\n                    goto lab_0x4043e1;\n                }\n                case 59: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4043e1;\n                }\n                case 66: {\n                    goto lab_0x4043e1;\n                }\n                case 67: {\n                    goto lab_0x4043e1;\n                }\n                case 68: {\n                    goto lab_0x4043e1;\n                }\n                case 69: {\n                    goto lab_0x4043e1;\n                }\n                case 70: {\n                    goto lab_0x4043e1;\n                }\n                case 71: {\n                    goto lab_0x4043e1;\n                }\n                case 72: {\n                    goto lab_0x4043e1;\n                }\n                case 73: {\n                    goto lab_0x4043e1;\n                }\n                case 74: {\n                    goto lab_0x4043e1;\n                }\n                case 75: {\n                    goto lab_0x4043e1;\n                }\n                case 76: {\n                    goto lab_0x4043e1;\n                }\n                case 77: {\n                    goto lab_0x4043e1;\n                }\n                case 78: {\n                    goto lab_0x4043e1;\n                }\n                case 79: {\n                    goto lab_0x4043e1;\n                }\n                case 80: {\n                    goto lab_0x4043e1;\n                }\n                case 81: {\n                    goto lab_0x4043e1;\n                }\n                case 82: {\n                    goto lab_0x4043e1;\n                }\n                case 83: {\n                    goto lab_0x4043e1;\n                }\n                case 84: {\n                    goto lab_0x4043e1;\n                }\n                case 85: {\n                    goto lab_0x4043e1;\n                }\n                case 86: {\n                    goto lab_0x4043e1;\n                }\n                case 87: {\n                    goto lab_0x4043e1;\n                }\n                case 88: {\n                    goto lab_0x4043e1;\n                }\n                case 89: {\n                    goto lab_0x4043e1;\n                }\n                case 90: {\n                    goto lab_0x4043e1;\n                }\n                case 91: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4043e1;\n                }\n                case 94: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4043e1;\n                }\n                case 96: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4043e1;\n                }\n                case 98: {\n                    goto lab_0x4043e1;\n                }\n                case 99: {\n                    goto lab_0x4043e1;\n                }\n                case 100: {\n                    goto lab_0x4043e1;\n                }\n                case 101: {\n                    goto lab_0x4043e1;\n                }\n                case 102: {\n                    goto lab_0x4043e1;\n                }\n                case 103: {\n                    goto lab_0x4043e1;\n                }\n                case 104: {\n                    goto lab_0x4043e1;\n                }\n                case 105: {\n                    goto lab_0x4043e1;\n                }\n                case 106: {\n                    goto lab_0x4043e1;\n                }\n                case 107: {\n                    goto lab_0x4043e1;\n                }\n                case 108: {\n                    goto lab_0x4043e1;\n                }\n                case 109: {\n                    goto lab_0x4043e1;\n                }\n                case 110: {\n                    goto lab_0x4043e1;\n                }\n                case 111: {\n                    goto lab_0x4043e1;\n                }\n                case 112: {\n                    goto lab_0x4043e1;\n                }\n                case 113: {\n                    goto lab_0x4043e1;\n                }\n                case 114: {\n                    goto lab_0x4043e1;\n                }\n                case 115: {\n                    goto lab_0x4043e1;\n                }\n                case 116: {\n                    goto lab_0x4043e1;\n                }\n                case 117: {\n                    goto lab_0x4043e1;\n                }\n                case 118: {\n                    goto lab_0x4043e1;\n                }\n                case 119: {\n                    goto lab_0x4043e1;\n                }\n                case 120: {\n                    goto lab_0x4043e1;\n                }\n                case 121: {\n                    goto lab_0x4043e1;\n                }\n                case 122: {\n                    goto lab_0x4043e1;\n                }\n                case 123: {\n                    goto lab_0x404385;\n                }\n                case 124: {\n                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x404385;\n                }\n                case 126: {\n                    goto lab_0x4043ad;\n                }\n                default: {\n                    goto lab_0x404785;\n                }\n            }\n        }\n      lab_0x404785:\n        if (v23 != 1) {\n            // 0x404af0\n            ps = 0;\n            int64_t len = v15; // 0x404b00\n            if (v15 == -1) {\n                // 0x404b02\n                len = strlen((char *)str);\n            }\n            // 0x404b2e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x404b8f:\n                // 0x404b8f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x404b94\n                int64_t v30 = v29 + str;\n                v24 = function_407280(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40510a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40510a_2;\n                    }\n                    case -2: {\n                        // 0x4051ed\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x405227\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40522a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x405237\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x405230\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40510a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40510a_2;\n                    }\n                    case 1: {\n                        goto lab_0x404b60;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x404c0c\n                        char v34 = *(char *)v33; // 0x404c1d\n                        unsigned char v35; // 0x404237\n                        if (v34 < 125) {\n                            // 0x404c28\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x404c3f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x404c10\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x404c1d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x404c28\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x404c3f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x404c10\n                            v33++;\n                        }\n                        goto lab_0x404b60;\n                    }\n                }\n            }\n            goto lab_0x40510a_2;\n        } else {\n            // 0x4047d4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4043e1;\n        }\n    }\n  lab_0x404a08:\n    // 0x404a08\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40530a\n        if (v8 > result) {\n            // 0x405313\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x404637\n        return result;\n    }\n    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4043e1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x4043f0\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x4045fa_2;\n        }\n    }\n    int64_t v39 = result; // 0x4044f1\n    char v40 = v20; // 0x4044f1\n    int64_t v41 = v38; // 0x4044f1\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x4044f1\n    int64_t v43 = v36; // 0x4044f1\n    goto lab_0x40446d;\n  lab_0x4045fa_2:\n    // 0x404637\n    return function_4041e0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40510a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4043e1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x404cde\n        int64_t v50 = v5 + 1; // 0x404dc1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x404dc8\n        char v52 = v20; // 0x404dc8\n        int64_t v53 = result; // 0x404dc8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x404d91\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x404d95\n            int64_t v56 = v54 + 1; // 0x404d9a\n            int64_t v57 = v51 + 1; // 0x404dc1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x404d8c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x404d91\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x404d95\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40446d;\n    }\n  lab_0x404b60:\n    // 0x404b60\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x404b7f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x404b82\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40510a\n        goto lab_0x40510a_2;\n    }\n    goto lab_0x404b8f;\n  lab_0x4043ad:\n    // 0x4043ad\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x4045fa_2;\n    }\n    goto lab_0x4043e1;\n  lab_0x404385:;\n    bool v60 = v15 == 1; // 0x404390\n    if (v15 == -1) {\n        // 0x404392\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x40439e\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4043e1;\n    } else {\n        goto lab_0x4043ad;\n    }\n  lab_0x40446d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x404472\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x404476\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x404288_2;\n}\n"
        },
        {
            "funcName": "function_405410",
            "funcStartAddr": "405410",
            "funcEndAddr": "4055ae",
            "decompiledFuncCode": "int64_t function_405410(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x405412\n    int32_t * v3 = __errno_location(); // 0x40542c\n    int64_t v4 = (int64_t)g23; // 0x405431\n    int32_t v5 = *v3; // 0x40543b\n    int64_t v6 = v4; // 0x405451\n    if (v2 >= (int64_t)*(int32_t *)&g26) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4055a9\n            function_406470(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x405460\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x405467\n        int64_t v9; // 0x405410\n        if (g23 == &g24) {\n            int64_t v10 = function_406280(0, v8); // 0x40558a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g24); // 0x40558f\n            *(int64_t *)&g23 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_406280(v4, v8); // 0x40547b\n            *(int64_t *)&g23 = v12;\n            v9 = v12;\n        }\n        // 0x40548a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g26; // 0x40548a\n        int32_t v14 = v7; // 0x405491\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g26 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4054c1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4054cb\n    int64_t * v17 = (int64_t *)v15; // 0x4054ce\n    uint64_t v18 = *v17; // 0x4054ce\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4054d1\n    int64_t result = *v19; // 0x4054d1\n    int64_t v20; // 0x405410\n    uint64_t v21 = function_4041e0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x4054f4\n    if (v18 > v21) {\n        // 0x40556b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x405507\n    *v17 = v22;\n    if (result != (int64_t)&g39) {\n        // 0x405517\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_406220(v22); // 0x405531\n    *v19 = result2;\n    int64_t v23; // 0x405410\n    function_4041e0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40556b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4055b0",
            "funcStartAddr": "4055b0",
            "funcEndAddr": "4055e4",
            "decompiledFuncCode": "int64_t function_4055b0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4055b7\n    int64_t result = function_406420(a1 == 0 ? (int64_t)&g40 : a1, 56); // 0x4055d6\n    return result;\n}\n"
        },
        {
            "funcName": "function_4055f0",
            "funcStartAddr": "4055f0",
            "funcEndAddr": "4055ff",
            "decompiledFuncCode": "int64_t function_4055f0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g40 : a1); // 0x4055fc\n    return result;\n}\n"
        },
        {
            "funcName": "function_405600",
            "funcStartAddr": "405600",
            "funcEndAddr": "40560f",
            "decompiledFuncCode": "int64_t function_405600(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 : a1; // 0x405608\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g40;\n}\n"
        },
        {
            "funcName": "function_405610",
            "funcStartAddr": "405610",
            "funcEndAddr": "405643",
            "decompiledFuncCode": "int64_t function_405610(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 + 8 : a1 + 8; // 0x405629\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40562e\n    uint32_t v3 = *v2; // 0x40562e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x405632\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_405650",
            "funcStartAddr": "405650",
            "funcEndAddr": "405663",
            "decompiledFuncCode": "int64_t function_405650(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g40 + 4 : a1 + 4); // 0x40565c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_405670",
            "funcStartAddr": "405670",
            "funcEndAddr": "40569b",
            "decompiledFuncCode": "int64_t function_405670(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g40 : a1; // 0x405678\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x405695\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40568c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g40;\n}\n"
        },
        {
            "funcName": "function_4056a0",
            "funcStartAddr": "4056a0",
            "funcEndAddr": "405712",
            "decompiledFuncCode": "int64_t function_4056a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g40 : a5; // 0x4056c2\n    int32_t * v2 = __errno_location(); // 0x4056cb\n    uint32_t v3 = *(int32_t *)v1; // 0x4056eb\n    int64_t result = function_4041e0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x4056fa\n    return result;\n}\n"
        },
        {
            "funcName": "function_405720",
            "funcStartAddr": "405720",
            "funcEndAddr": "405801",
            "decompiledFuncCode": "int64_t function_405720(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g40 : a4; // 0x405742\n    int32_t * v2 = __errno_location(); // 0x405748\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x405767\n    int32_t * v4 = (int32_t *)v1; // 0x40576a\n    int64_t v5 = function_4041e0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x405785\n    int64_t v6 = v5 + 1; // 0x40578a\n    int64_t result = function_406220(v6); // 0x40579f\n    function_4041e0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4057e4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4057ed\n    return result;\n}\n"
        },
        {
            "funcName": "function_405810",
            "funcStartAddr": "405810",
            "funcEndAddr": "40581a",
            "decompiledFuncCode": "int64_t function_405810(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405810\n    return function_405720(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_405820",
            "funcStartAddr": "405820",
            "funcEndAddr": "4058b5",
            "decompiledFuncCode": "int64_t function_405820(void) {\n    uint32_t v1 = *(int32_t *)&g26; // 0x405820\n    int64_t v2 = v1; // 0x405820\n    int64_t v3 = v2; // 0x405834\n    if (v1 >= 2) {\n        int64_t v4 = &g26;\n        int64_t v5 = v4 + 16; // 0x405853\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g53;\n        while (v5 != (int64_t)g23 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x405850\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g53;\n        }\n    }\n    int64_t v6 = v3; // 0x40586d\n    if (g24 != 0x60c320) {\n        // 0x40586f\n        free((int64_t *)g24);\n        g24 = 256;\n        *(int64_t *)&g25 = (int64_t)&g39;\n        v6 = &g53;\n    }\n    int64_t result = v6; // 0x405891\n    if (g23 != &g24) {\n        // 0x405893\n        free(g23);\n        *(int64_t *)&g23 = (int64_t)&g24;\n        result = &g53;\n    }\n    // 0x4058a6\n    *(int32_t *)&g26 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4058c0",
            "funcStartAddr": "4058c0",
            "funcEndAddr": "4058d1",
            "decompiledFuncCode": "int64_t function_4058c0(void) {\n    // 0x4058c0\n    int64_t v1; // 0x4058c0\n    return function_405410(v1, v1, -1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_4058e0",
            "funcStartAddr": "4058e0",
            "funcEndAddr": "4058ea",
            "decompiledFuncCode": "int64_t function_4058e0(void) {\n    // 0x4058e0\n    int64_t v1; // 0x4058e0\n    return function_405410(v1, v1, v1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_4058f0",
            "funcStartAddr": "4058f0",
            "funcEndAddr": "405906",
            "decompiledFuncCode": "int64_t function_4058f0(int64_t a1) {\n    // 0x4058f0\n    return function_405410(0, a1, -1, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_405910",
            "funcStartAddr": "405910",
            "funcEndAddr": "405922",
            "decompiledFuncCode": "int64_t function_405910(int64_t a1, int64_t a2) {\n    // 0x405910\n    return function_405410(0, a1, a2, (int64_t *)&g40);\n}\n"
        },
        {
            "funcName": "function_405930",
            "funcStartAddr": "405930",
            "funcEndAddr": "405998",
            "decompiledFuncCode": "int64_t function_405930(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405940\n    return function_405410((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4059a0",
            "funcStartAddr": "4059a0",
            "funcEndAddr": "405a04",
            "decompiledFuncCode": "int64_t function_4059a0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4059b0\n    return function_405410((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_405a10",
            "funcStartAddr": "405a10",
            "funcEndAddr": "405a1c",
            "decompiledFuncCode": "int64_t function_405a10(int64_t a1, int64_t a2) {\n    // 0x405a10\n    return function_405930(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_405a20",
            "funcStartAddr": "405a20",
            "funcEndAddr": "405a2f",
            "decompiledFuncCode": "int64_t function_405a20(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405a20\n    return function_4059a0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_405a30",
            "funcStartAddr": "405a30",
            "funcEndAddr": "405aa0",
            "decompiledFuncCode": "int64_t function_405a30(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g40); // 0x405a3d\n    int128_t v2 = __asm_movdqa(g41); // 0x405a45\n    int128_t v3 = __asm_movdqa(g42); // 0x405a4d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x405a62\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x405a78\n    uint32_t v6 = *v5; // 0x405a78\n    uint32_t v7 = (int32_t)a3 % 32; // 0x405a7d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_405410(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_405aa0",
            "funcStartAddr": "405aa0",
            "funcEndAddr": "405aad",
            "decompiledFuncCode": "int64_t function_405aa0(int64_t a1, int64_t a2) {\n    // 0x405aa0\n    return function_405a30(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_405ab0",
            "funcStartAddr": "405ab0",
            "funcEndAddr": "405ac1",
            "decompiledFuncCode": "int64_t function_405ab0(int64_t a1) {\n    // 0x405ab0\n    return function_405a30(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_405ad0",
            "funcStartAddr": "405ad0",
            "funcEndAddr": "405ada",
            "decompiledFuncCode": "int64_t function_405ad0(void) {\n    // 0x405ad0\n    int64_t v1; // 0x405ad0\n    return function_405a30(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_405ae0",
            "funcStartAddr": "405ae0",
            "funcEndAddr": "405b4e",
            "decompiledFuncCode": "int64_t function_405ae0(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x405afa\n    return function_405410((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_405b50",
            "funcStartAddr": "405b50",
            "funcEndAddr": "405bbc",
            "decompiledFuncCode": "int64_t function_405b50(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g40); // 0x405b57\n    int128_t v2 = __asm_movdqa(g41); // 0x405b5f\n    int128_t v3 = __asm_movdqa(g42); // 0x405b67\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x405b89\n    if (a2 == 0 || a3 == 0) {\n        // 0x405bb7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x405b9a\n    return function_405410(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_405bc0",
            "funcStartAddr": "405bc0",
            "funcEndAddr": "405bc9",
            "decompiledFuncCode": "int64_t function_405bc0(void) {\n    // 0x405bc0\n    int64_t v1; // 0x405bc0\n    return function_405b50(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_405bd0",
            "funcStartAddr": "405bd0",
            "funcEndAddr": "405be7",
            "decompiledFuncCode": "int64_t function_405bd0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405bd0\n    return function_405b50(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_405bf0",
            "funcStartAddr": "405bf0",
            "funcEndAddr": "405c03",
            "decompiledFuncCode": "int64_t function_405bf0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x405bf0\n    return function_405b50(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_405c10",
            "funcStartAddr": "405c10",
            "funcEndAddr": "405c1a",
            "decompiledFuncCode": "int64_t function_405c10(void) {\n    // 0x405c10\n    int64_t v1; // 0x405c10\n    return function_405410(v1, v1, v1, &g22);\n}\n"
        },
        {
            "funcName": "function_405c20",
            "funcStartAddr": "405c20",
            "funcEndAddr": "405c32",
            "decompiledFuncCode": "int64_t function_405c20(int64_t a1, int64_t a2) {\n    // 0x405c20\n    return function_405410(0, a1, a2, &g22);\n}\n"
        },
        {
            "funcName": "function_405c40",
            "funcStartAddr": "405c40",
            "funcEndAddr": "405c51",
            "decompiledFuncCode": "int64_t function_405c40(void) {\n    // 0x405c40\n    int64_t v1; // 0x405c40\n    return function_405410(v1, v1, -1, &g22);\n}\n"
        },
        {
            "funcName": "function_405c60",
            "funcStartAddr": "405c60",
            "funcEndAddr": "405c76",
            "decompiledFuncCode": "int64_t function_405c60(int64_t a1) {\n    // 0x405c60\n    return function_405410(0, a1, -1, &g22);\n}\n"
        },
        {
            "funcName": "function_405c80",
            "funcStartAddr": "405c80",
            "funcEndAddr": "40605d",
            "decompiledFuncCode": "int64_t function_405c80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x405d18\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x405c9c\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x405cb6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x405cfb\n    if (a6 < 10) {\n        // 0x405d0a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x405e02\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_406060",
            "funcStartAddr": "406060",
            "funcEndAddr": "406080",
            "decompiledFuncCode": "int64_t function_406060(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406060\n    if (a5 == 0) {\n        // 0x40607b\n        return function_405c80(a1, a2, a3, a4, a5, 0, (int64_t)&g53);\n    }\n    int64_t v1 = 0; // 0x406067\n    v1++;\n    int64_t v2 = v1; // 0x406079\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x406070\n        v1++;\n        v2 = v1;\n    }\n    // 0x40607b\n    return function_405c80(a1, a2, a3, a4, a5, v2, (int64_t)&g53);\n}\n"
        },
        {
            "funcName": "function_406080",
            "funcStartAddr": "406080",
            "funcEndAddr": "4060e0",
            "decompiledFuncCode": "int64_t function_406080(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = v1;\n    int64_t v3; // bp-88, 0x406080\n    int64_t v4 = &v3; // 0x406080\n    int64_t v5 = 0;\n    uint32_t v6 = (int32_t)v1; // 0x4060b3\n    int64_t v7; // 0x40609d\n    int64_t * v8; // 0x4060bb\n    int64_t v9; // 0x4060bb\n    int64_t v10; // 0x4060c7\n    if (v6 < 48) {\n        // 0x406090\n        *(int32_t *)v2 = v6 + 8;\n        v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n        *(int64_t *)(8 * v5 + v4) = v7;\n        if (v7 == 0) {\n            // break -> 0x4060d3\n            break;\n        }\n    } else {\n        // 0x4060bb\n        v8 = (int64_t *)(v2 + 8);\n        v9 = *v8;\n        *v8 = v9 + 8;\n        v10 = *(int64_t *)v9;\n        *(int64_t *)(8 * v5 + v4) = v10;\n        if (v10 == 0) {\n            // break -> 0x4060d3\n            break;\n        }\n    }\n    int64_t v11 = 10; // 0x4060b1\n    while (v5 != 9) {\n        // 0x4060a9\n        v5++;\n        v6 = *(int32_t *)&v2;\n        if (v6 < 48) {\n            // 0x406090\n            *(int32_t *)v2 = v6 + 8;\n            v7 = *(int64_t *)(*(int64_t *)(v2 + 16) + (int64_t)v6);\n            *(int64_t *)(8 * v5 + v4) = v7;\n            v11 = v5;\n            if (v7 == 0) {\n                // break -> 0x4060d3\n                break;\n            }\n        } else {\n            // 0x4060bb\n            v8 = (int64_t *)(v2 + 8);\n            v9 = *v8;\n            *v8 = v9 + 8;\n            v10 = *(int64_t *)v9;\n            *(int64_t *)(8 * v5 + v4) = v10;\n            v11 = v5;\n            if (v10 == 0) {\n                // break -> 0x4060d3\n                break;\n            }\n        }\n        // 0x4060a9\n        v11 = 10;\n    }\n    // 0x4060d3\n    return function_405c80(a1, a2, a3, a4, v4, v11, (int64_t)&g53);\n}\n"
        },
        {
            "funcName": "function_4060e0",
            "funcStartAddr": "4060e0",
            "funcEndAddr": "40619c",
            "decompiledFuncCode": "int64_t function_4060e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4060e0\n    int64_t v1; // bp-168, 0x4060e0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4060e0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4060e0\n    int64_t v8; // 0x4060e0\n    int64_t v9; // bp-56, 0x4060e0\n    int64_t v10; // 0x406145\n    int64_t v11; // 0x406169\n    if ((int32_t)v6 < 48) {\n        // 0x406130\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x406180\n            break;\n        }\n    } else {\n        // 0x406162\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x406180\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40615a\n    int64_t v13 = 10; // 0x40615a\n    while (v5 != 9) {\n        // 0x40615c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x406130\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x406180\n                break;\n            }\n        } else {\n            // 0x406162\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x406180\n                break;\n            }\n        }\n        // 0x406152\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x406180\n    int64_t v14; // bp-136, 0x4060e0\n    int64_t result = function_405c80(a1, a2, a3, a4, (int64_t)&v14, v13, (int64_t)&g53); // 0x40618f\n    return result;\n}\n"
        },
        {
            "funcName": "function_4061a0",
            "funcStartAddr": "4061a0",
            "funcEndAddr": "406214",
            "decompiledFuncCode": "int64_t function_4061a0(int64_t a1) {\n    // 0x4061a0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x406203\n    return fputs_unlocked(v1, g31);\n}\n"
        },
        {
            "funcName": "function_406220",
            "funcStartAddr": "406220",
            "funcEndAddr": "40623a",
            "decompiledFuncCode": "int64_t function_406220(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x406224\n    if (size != 0 != (mem == NULL)) {\n        // 0x406233\n        return (int64_t)mem;\n    }\n    // 0x406235\n    function_406470(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406240",
            "funcStartAddr": "406240",
            "funcEndAddr": "406261",
            "decompiledFuncCode": "int64_t function_406240(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x406243\n    int64_t v2 = v1; // 0x406243\n    if (v2 < 0) {\n        // 0x40625b\n        function_406470(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x406259\n        return function_406220(v2);\n    }\n    // 0x40625b\n    function_406470(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406270",
            "funcStartAddr": "406270",
            "funcEndAddr": "406272",
            "decompiledFuncCode": "int64_t function_406270(void) {\n    // 0x406270\n    int64_t v1; // 0x406270\n    return function_406220(v1);\n}\n"
        },
        {
            "funcName": "function_406280",
            "funcStartAddr": "406280",
            "funcEndAddr": "4062b6",
            "decompiledFuncCode": "int64_t function_406280(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4062a8\n        free(v1);\n        return (int32_t)&g53 ^ (int32_t)&g53;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x406291\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4062a0\n        return (int64_t)mem;\n    }\n    // 0x4062b1\n    function_406470(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4062c0",
            "funcStartAddr": "4062c0",
            "funcEndAddr": "4062e1",
            "decompiledFuncCode": "int64_t function_4062c0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4062c3\n    int64_t v2 = v1; // 0x4062c3\n    if (v2 < 0) {\n        // 0x4062db\n        function_406470(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4062d9\n        return function_406280(a1, v2);\n    }\n    // 0x4062db\n    function_406470(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4062f0",
            "funcStartAddr": "4062f0",
            "funcEndAddr": "406376",
            "decompiledFuncCode": "int64_t function_4062f0(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40634b\n            function_406470(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406280(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x406333\n    if (a2 == 0) {\n        // 0x406358\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x406338\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40634b\n        function_406470(a1);\n        // UNREACHABLE\n    }\n    // 0x40631a\n    *(int64_t *)a2 = v2;\n    return function_406280(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_406380",
            "funcStartAddr": "406380",
            "funcEndAddr": "4063d0",
            "decompiledFuncCode": "int64_t function_406380(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x406380\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4063ca\n            function_406470(a1);\n            // UNREACHABLE\n        }\n        // 0x4063a2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_406280(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4063b5\n        *(int64_t *)a2 = 128;\n        return function_406280(0, 128);\n    }\n    // 0x4063c8\n    if (a2 < 0) {\n        // 0x4063ca\n        function_406470(a1);\n        // UNREACHABLE\n    }\n    // 0x4063a2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_406280(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4063d0",
            "funcStartAddr": "4063d0",
            "funcEndAddr": "4063e7",
            "decompiledFuncCode": "int64_t function_4063d0(int64_t a1, int64_t a2) {\n    // 0x4063d0\n    return (int64_t)memset((int64_t *)function_406220(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_4063f0",
            "funcStartAddr": "4063f0",
            "funcEndAddr": "40641e",
            "decompiledFuncCode": "int64_t function_4063f0(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x4063f7\n    if ((int64_t)v1 < 0) {\n        // 0x406419\n        function_406470(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x406419\n        function_406470(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40640a\n    if (mem != NULL) {\n        // 0x406414\n        return (int64_t)mem;\n    }\n    // 0x406419\n    function_406470(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_406420",
            "funcStartAddr": "406420",
            "funcEndAddr": "406448",
            "decompiledFuncCode": "int64_t function_406420(int64_t a1, int64_t a2) {\n    int64_t v1 = function_406220(a2); // 0x40642f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_406450",
            "funcStartAddr": "406450",
            "funcEndAddr": "406463",
            "decompiledFuncCode": "int64_t function_406450(int64_t str) {\n    // 0x406450\n    return function_406420(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_406470",
            "funcStartAddr": "406470",
            "funcEndAddr": "4064a1",
            "decompiledFuncCode": "int64_t function_406470(int64_t a1) {\n    // 0x406470\n    error(g21, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4064b0",
            "funcStartAddr": "4064b0",
            "funcEndAddr": "40658f",
            "decompiledFuncCode": "int64_t function_4064b0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x4064bc\n    uint32_t v2 = *v1; // 0x4064bc\n    int64_t v3 = a2 & 0xffffffff; // 0x4064c1\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x4064c4\n    uint64_t v5 = (int64_t)*v4; // 0x4064c4\n    int64_t v6; // 0x406532\n    if (v3 <= v5) {\n      lab_0x40652c_2:\n        // 0x40652c\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x4064b2\n    int64_t v8 = v2; // 0x4064b0\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x40652c\n        goto lab_0x40652c_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x4064e8\n    int64_t v17; // 0x4064f6\n    int64_t * v18; // 0x406510\n    int64_t * v19; // 0x406513\n    int64_t v20; // 0x40651e\n    int64_t v21; // 0x4064f6\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x4064f3\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x406510\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x406527\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x40652c\n            goto lab_0x40652c_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40652c\n            goto lab_0x40652c_2;\n        }\n        // 0x4064e2\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x40656b\n    int64_t * v23 = (int64_t *)v22; // 0x406570\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x406573\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x406570\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x406587\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x4064dd\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x40652c\n            goto lab_0x40652c_2;\n        }\n        // 0x4064e2\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x4064f3\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x406510\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x406527\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x40652c\n                goto lab_0x40652c_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x40652c\n                goto lab_0x40652c_2;\n            }\n            // 0x4064e2\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x406550\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x406570\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x406587\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x40652c\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_406590",
            "funcStartAddr": "406590",
            "funcEndAddr": "406bac",
            "decompiledFuncCode": "int64_t function_406590(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x4065af\n    int64_t v2 = *v1; // 0x4065af\n    char * str2 = (char *)v2; // 0x4065bc\n    char c = *str2; // 0x4065bc\n    int64_t v3 = v2; // 0x4065e8\n    int64_t v4 = 0; // 0x406590\n    int32_t v5; // 0x406590\n    int64_t v6; // 0x406590\n    int64_t v7; // 0x406590\n    int64_t v8; // 0x406590\n    int64_t v9; // 0x406590\n    int64_t v10; // 0x406590\n    int64_t v11; // 0x406590\n    int64_t v12; // 0x406590\n    int64_t v13; // 0x406590\n    int64_t str3; // 0x406590\n    int64_t v14; // 0x406590\n    int64_t v15; // 0x406590\n    int64_t v16; // 0x406590\n    int64_t v17; // 0x406590\n    int32_t v18; // 0x406590\n    int32_t v19; // 0x406590\n    int32_t v20; // 0x406590\n    int32_t v21; // 0x406590\n    int32_t v22; // 0x406590\n    int32_t v23; // 0x406590\n    int32_t v24; // 0x406590\n    int32_t v25; // 0x406590\n    int32_t v26; // 0x406590\n    int32_t v27; // 0x406590\n    int32_t v28; // 0x406590\n    int32_t v29; // 0x406590\n    int64_t nmemb; // 0x406590\n    int64_t v30; // 0x406590\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x4065ec\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x4065e8\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x4065f8\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x4065fe\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x4065c8\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x40662c\n                int64_t v34; // 0x406590\n                int64_t v35; // 0x406590\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x406635\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x4067b0;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x406646\n                int64_t v37 = *(int64_t *)v36; // 0x40664a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x406620\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x406635\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x4067b0;\n                        }\n                    }\n                    // 0x406646\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x406696:\n                    // 0x406696\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x4066f0;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x406860\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x4066f0;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x406810\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x4066ba;\n                                } else {\n                                    // 0x40681c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x4066ba;\n                                    } else {\n                                        // 0x40682a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x4066ba;\n                                        } else {\n                                            goto lab_0x4066f0;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x4066ba;\n                            }\n                        }\n                    }\n                }\n              lab_0x406701:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x4068d6\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x406a82\n                            flockfile(g33);\n                            int64_t v41 = *v1; // 0x406aa2\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x406aef\n                            int64_t v43 = (int64_t)g33;\n                            int64_t v44 = v43; // 0x406b09\n                            int64_t v45; // 0x406b0b\n                            if (*(char *)v42 != 0) {\n                                // 0x406b0b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g33;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x406b03\n                            while (v17 + nmemb != v42) {\n                                // 0x406b05\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x406b0b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g33;\n                                }\n                                // 0x406af8\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x406b30\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g33);\n                            v40 = *v1;\n                        } else {\n                            // 0x4068e4\n                            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x406a3f\n                        free((int64_t *)v17);\n                    }\n                    // 0x406939\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x406950\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x4067fe\n                    return 63;\n                }\n                // 0x406720\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x4067a4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x4067b0:;\n                    int32_t * v49 = (int32_t *)a7; // 0x4067c0\n                    uint32_t v50 = *v49; // 0x4067c0\n                    int64_t v51 = v50; // 0x4067c0\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x4067ca\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x4067d3\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x4069ff\n                                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x4069aa\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x4067fe\n                            return 63;\n                        }\n                        // 0x406848\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x406b5f\n                                    __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x406a5d\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x406a70\n                                // 0x4067fe\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x40696e\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x406982\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x4067eb\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x4067ee\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x4067f2\n                    int64_t result = v59; // 0x4067f8\n                    if (v58 != 0) {\n                        // 0x4067fa\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x4067fe\n                    return result;\n                }\n            } else {\n                // 0x4065fe\n                v5 = v32;\n            }\n            // break -> 0x406725\n            break;\n        }\n    }\n    // 0x406725\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x40673d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x406747\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x4067fe\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x406889\n        __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x406776\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x406786\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x4066f0:\n    // 0x4066f0\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x4066f0\n    int64_t v63 = *(int64_t *)v62; // 0x4066f4\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x406701\n        goto lab_0x406701;\n    }\n    goto lab_0x406696;\n  lab_0x4066ba:\n    // 0x4066ba\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x406590\n    int32_t v65; // 0x406590\n    int32_t v66; // 0x406590\n    if (v27 != 0) {\n        goto lab_0x4066f0;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x406870\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x4066f0;\n            } else {\n                goto lab_0x4066e1;\n            }\n        } else {\n            // 0x4066d5\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x4069cc\n                int64_t v67 = (int64_t)mem; // 0x4069cc\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x4066f0;\n                } else {\n                    // 0x4069df\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x4066e1;\n                }\n            } else {\n                goto lab_0x4066e1;\n            }\n        }\n    }\n  lab_0x4066e1:\n    // 0x4066e1\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x4066f0;\n}\n"
        },
        {
            "funcName": "function_406bb0",
            "funcStartAddr": "406bb0",
            "funcEndAddr": "407176",
            "decompiledFuncCode": "int64_t function_406bb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x406bd1\n    if (v3 < 1) {\n        // 0x406d8e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x406bcd\n    int32_t v5 = *(int32_t *)a7; // 0x406bd9\n    uint64_t v6 = a1 & 0xffffffff; // 0x406bdb\n    int64_t v7 = v2; // 0x406be0\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x406be3\n    *v8 = 0;\n    int64_t v9; // 0x406bb0\n    int64_t v10; // 0x406bb0\n    int64_t v11; // 0x406bb0\n    int64_t v12; // 0x406bb0\n    int64_t str; // 0x406bb0\n    int64_t v13; // 0x406bb0\n    int64_t v14; // 0x406bb0\n    int64_t v15; // 0x406bb0\n    int64_t v16; // 0x406bb0\n    int64_t v17; // 0x406bb0\n    int32_t v18; // 0x406bb0\n    char v19; // 0x406bb0\n    if (v5 == 0) {\n        // 0x406dc8\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x406bfa;\n    } else {\n        // 0x406bf3\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x406c40\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x406c43\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x406d08;\n            } else {\n                int64_t v22 = v7 + 1; // 0x406c56\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x406c66\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x406d1c;\n                } else {\n                    goto lab_0x406c78;\n                }\n            }\n        } else {\n            goto lab_0x406bfa;\n        }\n    }\n  lab_0x406bfa:\n    // 0x406bfa\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x406c00\n    *v24 = 0;\n    int64_t v25; // 0x406bb0\n    int64_t v26; // 0x406bb0\n    int64_t v27; // 0x406bb0\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x406cf0\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x406cfd;\n        }\n        case 43: {\n            // 0x407000\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x406cfd;\n        }\n        default: {\n            // 0x406c1c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x406f7f\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x407098\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x406cfd;\n                } else {\n                    // 0x406f8d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x406c2a;\n                }\n            } else {\n                goto lab_0x406c2a;\n            }\n        }\n    }\n  lab_0x406d08:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x406d0f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x406c78;\n    } else {\n        goto lab_0x406d1c;\n    }\n  lab_0x406c2a:\n    // 0x406c2a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x406cfd;\n  lab_0x406cfd:\n    // 0x406cfd\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x406d08;\n  lab_0x406c78:;\n    uint32_t v30 = *(int32_t *)a7; // 0x406c78\n    int64_t v31 = v30; // 0x406c78\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x406c7a\n    if ((int64_t)*v32 > v31) {\n        // 0x406c7f\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x406c82\n    if (*v33 > v30) {\n        // 0x406c87\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x406c8a\n    int64_t v35 = v31; // 0x406c8e\n    int64_t v36 = v15; // 0x406c8e\n    int64_t v37; // 0x406bb0\n    int64_t v38; // 0x406bb0\n    int64_t v39; // 0x406bb0\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x406df8\n        int64_t v41 = v40; // 0x406df8\n        v2 = v41;\n        int64_t v42; // 0x406bb0\n        if (*v33 == v40) {\n            // 0x406fe0\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406fe8\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x406e04\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x406e18\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x406e21\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x406e2a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x406e41\n            int64_t v47 = v45 & 0xffffffff; // 0x406e45\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x406e4e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x406e54\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x406e56;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x406e30\n            int64_t v49 = v48 & 0xffffffff; // 0x406e30\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x406e41\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x406e4e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x406e54\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x406e56;\n                    }\n                }\n                // 0x406e30\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x406ff8\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x406e56;\n    } else {\n        goto lab_0x406c94;\n    }\n  lab_0x406d1c:\n    // 0x406d1c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x406d1f\n    int64_t v51 = v12; // 0x406d1f\n    int64_t v52 = v14; // 0x406d1f\n    if (*(char *)v10 == 0) {\n        goto lab_0x406c78;\n    } else {\n        goto lab_0x406d25;\n    }\n  lab_0x406c94:;\n    int32_t v53 = v35; // 0x406c94\n    int64_t v54; // 0x406bb0\n    int64_t v55; // 0x406bb0\n    int64_t v56; // 0x406bb0\n    int64_t v57; // 0x406bb0\n    int64_t v58; // 0x406bb0\n    int64_t v59; // 0x406bb0\n    char * v60; // 0x406bb0\n    int64_t v61; // 0x406bb0\n    int64_t v62; // 0x406ca9\n    int64_t v63; // 0x406bb0\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x406de3\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x406de6;\n    } else {\n        // 0x406c9c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x406bb0\n        int64_t v66 = v65 ? -1 : 1; // 0x406cb0\n        int64_t v67 = (int64_t)\"--\"; // 0x406bb0\n        int64_t v68 = v62; // 0x406bb0\n        int64_t v69 = 3; // 0x406cb0\n        unsigned char v70 = *(char *)v68; // 0x406cb0\n        char v71 = *(char *)v67; // 0x406cb0\n        char v72 = v71; // 0x406cb0\n        bool v73 = false; // 0x406cb0\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x406da0\n            if (*(char *)v62 == 45) {\n                // 0x406e60\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x406e60\n                if (c == 0) {\n                    goto lab_0x406daa;\n                } else {\n                    // 0x406e6d\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406ef0;\n                    } else {\n                        if (c == 45) {\n                            // 0x4070d3\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x406f45;\n                        } else {\n                            // 0x406e7e\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406ef0;\n                            } else {\n                                // 0x406e83\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x406ea4;\n                                } else {\n                                    // 0x406e8a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406ef0;\n                                    } else {\n                                        goto lab_0x406ea4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x406daa;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x406cc0\n            v2 = v75;\n            int32_t v76 = *v32; // 0x406cc3\n            int64_t v77 = v35 + 1; // 0x406cc6\n            int32_t v78 = v77; // 0x406cc9\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x407030\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x406cd7\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x406ce5\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x406de6;\n        }\n    }\n  lab_0x406d25:;\n    // 0x406d25\n    int64_t v79; // bp-104, 0x406bb0\n    int64_t v80 = &v79; // 0x406bba\n    int64_t v81 = v50 + 1; // 0x406d25\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x406d2c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x406d31\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x406d35\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x406d39\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x406d41\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x406d46\n    int32_t c2 = v84; // 0x406d46\n    char * found_char_pos = strchr(str2, c2); // 0x406d46\n    int64_t v87 = *v82; // 0x406d4b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x406d55\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x406d60\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x407050\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40701d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x406d8e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x406d46\n    char v91 = *(char *)(v90 + 1); // 0x406d7b\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x406d35\n        if (v91 != 58) {\n            // 0x406d8e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x406fa4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4070a8\n                *v8 = 0;\n            } else {\n                // 0x40708c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x406fce\n            *v83 = 0;\n            // 0x406d8e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x406fae\n        if (v93 != 0) {\n            // 0x407040\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x406fce\n            *v83 = 0;\n            // 0x406d8e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x406fc1\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x406fce\n            *v83 = 0;\n            // 0x406d8e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40710a\n            __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x4070ba\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x4070c1\n        // 0x406fce\n        *v83 = 0;\n        // 0x406d8e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x406f19\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x406f1b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x407140\n                __fprintf_chk(g33, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x4070f1\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x4070f8\n            // 0x406d8e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x406f26\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x406f2a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x406f45;\n  lab_0x406e56:\n    // 0x406e56\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x406c94;\n  lab_0x406f45:;\n    int64_t v99 = function_406590(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x406f63\n    // 0x406d8e\n    return v99 & 0xffffffff;\n  lab_0x406de6:;\n    int32_t v100 = v55; // 0x406de6\n    if (v100 != (int32_t)v59) {\n        // 0x406dea\n        *(int32_t *)a7 = v100;\n    }\n    // 0x406d8e\n    return 0xffffffff;\n  lab_0x406daa:\n    // 0x406daa\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x406db1\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x406d8e\n    return v99 & 0xffffffff;\n  lab_0x406ef0:\n    // 0x406ef0\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x406d25;\n  lab_0x406ea4:\n    // 0x406ea4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_406590(v6, a2, str, a4, a5, v57, v1, v11, &g11); // 0x406eca\n    if ((int32_t)v101 != -1) {\n        // 0x406d8e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x406edf\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406ef0;\n}\n"
        },
        {
            "funcName": "function_407180",
            "funcStartAddr": "407180",
            "funcEndAddr": "4071d6",
            "decompiledFuncCode": "int64_t function_407180(int64_t a1) {\n    // 0x407180\n    *(int32_t *)&g43 = g29;\n    *(int32_t *)&g44 = g28;\n    int64_t v1; // 0x407180\n    int64_t result = function_406bb0(v1, v1, v1, v1, v1, v1, &g43, a1 & 0xffffffff); // 0x4071a6\n    g29 = *(int32_t *)&g43;\n    g50 = g46;\n    *(int32_t *)&g27 = g45;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4071e0",
            "funcStartAddr": "4071e0",
            "funcEndAddr": "4071f8",
            "decompiledFuncCode": "int64_t function_4071e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4071e0\n    return function_407180(1);\n}\n"
        },
        {
            "funcName": "function_407200",
            "funcStartAddr": "407200",
            "funcEndAddr": "407213",
            "decompiledFuncCode": "int64_t function_407200(int64_t a1, int64_t a2, int64_t * a3, int64_t * a4, int32_t a5, int64_t a6) {\n    // 0x407200\n    return function_407180(0);\n}\n"
        },
        {
            "funcName": "function_407220",
            "funcStartAddr": "407220",
            "funcEndAddr": "407235",
            "decompiledFuncCode": "int64_t function_407220(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407220\n    return function_406bb0(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_407240",
            "funcStartAddr": "407240",
            "funcEndAddr": "407256",
            "decompiledFuncCode": "int64_t function_407240(void) {\n    // 0x407240\n    return function_407180(0);\n}\n"
        },
        {
            "funcName": "function_407260",
            "funcStartAddr": "407260",
            "funcEndAddr": "407278",
            "decompiledFuncCode": "int64_t function_407260(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x407260\n    return function_406bb0(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_407280",
            "funcStartAddr": "407280",
            "funcEndAddr": "4072fa",
            "decompiledFuncCode": "int64_t function_407280(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40728b\n    int64_t v2 = (int64_t)&g12; // 0x40728b\n    int32_t * pwc; // 0x407280\n    int64_t v3; // 0x407280\n    int64_t n; // 0x407280\n    if (a2 == 0) {\n        goto lab_0x4072d2;\n    } else {\n        // 0x40728d\n        if (a3 == 0) {\n            // 0x4072b8\n            return -2;\n        }\n        // 0x407299\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x4072d2;\n        } else {\n            goto lab_0x4072a4;\n        }\n    }\n  lab_0x4072d2:\n    // 0x4072d2\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x407280\n    pwc = (int32_t *)&v4;\n    goto lab_0x4072a4;\n  lab_0x4072a4:;\n    char * wstr = (char *)v3; // 0x4072aa\n    int64_t ps; // 0x407280\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4072aa\n    int64_t result = v5; // 0x4072aa\n    if (v5 < 0xfffffffe) {\n        // 0x4072b8\n        return result;\n    }\n    int64_t result2 = result; // 0x4072e9\n    if ((char)function_407b10(0, v3) == 0) {\n        // 0x4072eb\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x4072b8\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407300",
            "funcStartAddr": "407300",
            "funcEndAddr": "40735e",
            "decompiledFuncCode": "int64_t function_407300(int64_t a1) {\n    uint64_t result = function_406220(33); // 0x40730e\n    char * str = (char *)result; // 0x407322\n    strncpy(str, (char *)(a1 + 44), 32);\n    *(char *)(result + 32) = 0;\n    int64_t v1 = result + (int64_t)strlen(str); // 0x407333\n    if (result >= v1) {\n        // 0x407341\n        return result;\n    }\n    int64_t v2 = v1; // 0x407339\n    v2--;\n    char * v3 = (char *)v2; // 0x40733b\n    while (*v3 == 32) {\n        // 0x407350\n        *v3 = 0;\n        if (result == v2) {\n            // break -> 0x407341\n            break;\n        }\n        v2--;\n        v3 = (char *)v2;\n    }\n    // 0x407341\n    return result;\n}\n"
        },
        {
            "funcName": "function_407360",
            "funcStartAddr": "407360",
            "funcEndAddr": "407508",
            "decompiledFuncCode": "int64_t function_407360(int64_t a1, int64_t * a2, int64_t * a3, uint64_t a4) {\n    // 0x407360\n    utmpxname((char *)a1);\n    setutxent();\n    struct utmpx * v1 = getutxent(); // 0x407397\n    int64_t v2 = 0; // 0x4073a2\n    int64_t v3 = 0; // 0x4073a2\n    int64_t v4; // 0x407360\n    int64_t v5; // 0x407360\n    int64_t v6; // 0x407360\n    struct utmpx * v7; // 0x407360\n    struct utmpx * v8; // 0x407360\n    int64_t v9; // 0x407360\n    int64_t v10; // 0x407360\n    int64_t v11; // 0x407360\n    uint64_t v12; // 0x407360\n    int64_t v13; // 0x407360\n    int64_t v14; // 0x407360\n    int64_t v15; // 0x407360\n    int64_t v16; // 0x407360\n    int64_t v17; // 0x407360\n    if (v1 != NULL) {\n        struct utmpx * v18 = v1; // 0x407397\n        int64_t v19 = 0; // 0x407360\n        int64_t v20 = a1;\n        int64_t v21 = 0; // 0x407360\n        int64_t v22 = 0; // 0x407360\n        while (true) {\n            // 0x4073a4\n            v11 = v22;\n            v9 = v21;\n            v14 = v20;\n            v4 = v19;\n            v7 = v18;\n            while (true) {\n              lab_0x4073a4:\n                // 0x4073a4\n                v8 = v7;\n                v5 = v4;\n                v15 = v14;\n                v10 = v9;\n                v12 = v11;\n                v6 = (int64_t)v8;\n                if (*(char *)(v6 + 44) == 0) {\n                    goto lab_0x4073b6;\n                } else {\n                    // 0x4073ab\n                    if (v8->e0 == 7) {\n                        // 0x407440\n                        v16 = v15;\n                        if (a4 % 2 == 0) {\n                            goto lab_0x4073bb;\n                        } else {\n                            uint32_t pid = *(int32_t *)(v6 + 4); // 0x407449\n                            int64_t v23 = pid; // 0x407449\n                            v16 = v23;\n                            if (pid < 1) {\n                                goto lab_0x4073bb;\n                            } else {\n                                // 0x407455\n                                v16 = v23;\n                                if (kill(pid, 0) >= 0) {\n                                    goto lab_0x4073bb;\n                                } else {\n                                    int32_t v24 = *__errno_location(); // 0x407469\n                                    v13 = v23;\n                                    if (v24 == 3) {\n                                        // break -> 0x407397\n                                        break;\n                                    }\n                                    // 0x407472\n                                    v17 = v23;\n                                    if (v12 != v10) {\n                                        goto lab_0x4073c4;\n                                    } else {\n                                        goto lab_0x407480;\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x4073b6;\n                    }\n                }\n            }\n          lab_0x407397:\n            // 0x407397\n            v20 = v13;\n            v18 = getutxent();\n            v19 = v5;\n            v21 = v10;\n            v22 = v12;\n            v2 = v12;\n            v3 = v5;\n            if (v18 == NULL) {\n                // break -> 0x407415\n                break;\n            }\n        }\n    }\n  lab_0x407415:\n    // 0x407415\n    endutxent();\n    *a2 = v2;\n    *a3 = v3;\n    return 0;\n  lab_0x4073b6:\n    // 0x4073b6\n    v13 = v15;\n    v16 = v15;\n    if ((a4 & 2) != 0) {\n        // break -> 0x407397\n        goto lab_0x407397;\n    }\n    goto lab_0x4073bb;\n  lab_0x4073bb:\n    // 0x4073bb\n    v17 = v16;\n    if (v12 == v10) {\n        goto lab_0x407480;\n    } else {\n        goto lab_0x4073c4;\n    }\n  lab_0x407480:;\n    int64_t v25 = v17;\n    int64_t v26; // 0x407360\n    int64_t v27; // 0x407360\n    int64_t v28; // 0x407360\n    if (v5 == 0) {\n        // 0x4074c4\n        v27 = 1;\n        v26 = 1;\n        v28 = 384;\n        if (v12 != 0) {\n            uint128_t v29 = 384 * (int128_t)v12; // 0x4074d1\n            if ((int64_t)v29 < 0) {\n                // 0x407503\n                function_406470(v25);\n                // UNREACHABLE\n            }\n            if (v29 % 0x1ff0000000000000001 != 0) {\n                // 0x407503\n                function_406470(v25);\n                // UNREACHABLE\n            }\n            // 0x4074e4\n            v27 = v12 + 1;\n            v26 = v10;\n            v28 = 384 * v12;\n        }\n    } else {\n        if (v12 >= 0x38e38e38e38e38) {\n            // 0x407503\n            function_406470(v25);\n            // UNREACHABLE\n        }\n        int64_t v30 = v12 + 1; // 0x407497\n        int64_t v31 = v12 / 2 + v30; // 0x40749e\n        v27 = v30;\n        v26 = v31;\n        v28 = 384 * v31;\n    }\n    int64_t v32 = v27; // 0x4074bf\n    int64_t v33 = v26; // 0x4074bf\n    int64_t v34 = function_406280(v5, v28); // 0x4074bf\n    goto lab_0x4073c8;\n  lab_0x4073c4:\n    // 0x4073c4\n    v32 = v12 + 1;\n    v33 = v10;\n    v34 = v5;\n    goto lab_0x4073c8;\n  lab_0x4073c8:;\n    int64_t v35 = v34 + 384 * v12; // 0x4073d6\n    *(int64_t *)v35 = *(int64_t *)v8;\n    int64_t v36 = v35 + 8 & -8; // 0x4073e7\n    *(int64_t *)(v35 + 376) = *(int64_t *)(v6 + 376);\n    int64_t v37 = v35 - v36; // 0x4073f2\n    uint64_t v38 = (v37 + 384) / 8 % 0x20000000; // 0x407403\n    __asm_rep_movsq_memcpy((char *)v36, (char *)(v6 - v37), v38);\n    struct utmpx * v39 = getutxent(); // 0x407408\n    v11 = v32;\n    v9 = v33;\n    bool v40; // 0x407360\n    v14 = v38 * (v40 ? -8 : 8) + v36;\n    v4 = v34;\n    v7 = v39;\n    v2 = v32;\n    v3 = v34;\n    if (v39 == NULL) {\n        // break (via goto) -> 0x407415\n        goto lab_0x407415;\n    }\n    goto lab_0x4073a4;\n}\n"
        },
        {
            "funcName": "function_407510",
            "funcStartAddr": "407510",
            "funcEndAddr": "407555",
            "decompiledFuncCode": "int64_t function_407510(int64_t a1) {\n    // 0x407510\n    int32_t v1; // 0x407510\n    if (*(char *)(a1 + 8) != 0) {\n        // 0x407540\n        v1 = setenv(\"TZ\", (char *)(a1 + 9), 1);\n    } else {\n        // 0x40751a\n        v1 = unsetenv(\"TZ\");\n    }\n    int64_t result = 0; // 0x407528\n    if (v1 == 0) {\n        // 0x40752a\n        tzset();\n        result = 1;\n    }\n    // 0x407534\n    return result;\n}\n"
        },
        {
            "funcName": "function_407560",
            "funcStartAddr": "407560",
            "funcEndAddr": "407589",
            "decompiledFuncCode": "int64_t function_407560(int64_t a1) {\n    // 0x407560\n    if (a1 == 0) {\n        // 0x407580\n        int64_t result; // 0x407560\n        return result;\n    }\n    int64_t * v1 = (int64_t *)a1; // 0x407570\n    int64_t v2 = *v1; // 0x407570\n    free(v1);\n    while (v2 != 0) {\n        // 0x407570\n        v1 = (int64_t *)v2;\n        v2 = *v1;\n        free(v1);\n    }\n    // 0x407580\n    return &g53;\n}\n"
        },
        {
            "funcName": "function_407590",
            "funcStartAddr": "407590",
            "funcEndAddr": "4075d1",
            "decompiledFuncCode": "int64_t function_407590(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x40759d\n    function_407560(a1);\n    return (int64_t)v1 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_4075e0",
            "funcStartAddr": "4075e0",
            "funcEndAddr": "40766f",
            "decompiledFuncCode": "int64_t function_4075e0(int64_t str, int64_t a2, int64_t a3) {\n    int64_t result2; // 0x4075e0\n    if (str == 0) {\n        int64_t * mem = malloc(128); // 0x40764d\n        int64_t result = (int64_t)mem; // 0x40764d\n        result2 = result;\n        if (mem != NULL) {\n            // 0x40765a\n            *mem = 0;\n            *(int16_t *)(result + 8) = 0;\n            return result;\n        }\n    } else {\n        int32_t len = strlen((char *)str); // 0x4075ec\n        uint64_t v1 = (int64_t)len + 1; // 0x4075f6\n        int64_t * mem2 = malloc(v1 >= 118 ? len + 18 & -8 : 128); // 0x40760a\n        int64_t v2 = (int64_t)mem2; // 0x40760a\n        result2 = v2;\n        if (mem2 != NULL) {\n            // 0x407617\n            *mem2 = 0;\n            int64_t v3 = v2 + 9; // 0x407623\n            *(int16_t *)(v2 + 8) = 1;\n            memcpy((int64_t *)v3, (int64_t *)str, (int32_t)v1);\n            *(char *)(v3 + v1) = 0;\n            result2 = v2;\n        }\n    }\n    // 0x40763b\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407670",
            "funcStartAddr": "407670",
            "funcEndAddr": "4077e5",
            "decompiledFuncCode": "int64_t function_407670(int64_t a1, uint64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 48); // 0x40767e\n    uint64_t v2 = *v1; // 0x40767e\n    if (v2 == 0) {\n        // 0x407721\n        return 1;\n    }\n    int64_t v3; // 0x407670\n    if (v2 >= a2) {\n        int64_t v4 = a2 + 56; // 0x407696\n        v3 = v4;\n        if (v2 < v4) {\n            // 0x407721\n            return 1;\n        }\n    }\n    char * str2 = (char *)v2; // 0x4076a4\n    if (*str2 == 0) {\n        // 0x407718\n        *v1 = (int64_t)&g12;\n        // 0x407721\n        return 1;\n    }\n    int64_t str = a1 + 9; // 0x4076a9\n    if (strcmp((char *)str, str2) == 0) {\n        // 0x407718\n        *v1 = str;\n        // 0x407721\n        return 1;\n    }\n    int64_t v5 = a1;\n    int64_t v6 = str;\n    char * str3 = (char *)v6; // 0x4076c7\n    int64_t v7; // 0x407670\n    int64_t v8; // 0x407670\n    int64_t v9; // 0x407670\n    int64_t v10; // 0x4076cc\n    if (*str3 == 0) {\n        // 0x4076cc\n        v10 = v5 + 9;\n        if (v6 != v10) {\n            // break (via goto) -> 0x407758\n            goto lab_0x407758;\n        }\n        // 0x4076d9\n        if (*(char *)(v5 + 8) == 0) {\n            // 0x407788\n            v8 = 0;\n            v9 = v3;\n            v7 = (int64_t)strlen(str2) + 1;\n            goto lab_0x407796;\n        }\n    }\n    int64_t v11 = v6 + 1 + (int64_t)strlen(str3); // 0x4076eb\n    char * str5 = (char *)v11;\n    int64_t v12; // 0x407670\n    int64_t v13; // 0x4076f5\n    int64_t str4; // 0x4076fe\n    int32_t strcmp_rc; // 0x40770b\n    while (*str5 == 0) {\n        // 0x4076f5\n        v13 = *(int64_t *)v5;\n        if (v13 == 0) {\n            // break -> 0x4076b8\n            break;\n        }\n        // 0x4076fe\n        str4 = v13 + 9;\n        strcmp_rc = strcmp((char *)str4, str2);\n        v12 = str4;\n        if (strcmp_rc == 0) {\n            // 0x407718\n            *v1 = v12;\n            // 0x407721\n            return 1;\n        }\n        v5 = v13;\n        v6 = str4;\n        str3 = (char *)v6;\n        if (*str3 == 0) {\n            // 0x4076cc\n            v10 = v5 + 9;\n            if (v6 != v10) {\n                // break (via goto) -> 0x407758\n                goto lab_0x407758;\n            }\n            // 0x4076d9\n            if (*(char *)(v5 + 8) == 0) {\n                // 0x407788\n                v8 = 0;\n                v9 = v3;\n                v7 = (int64_t)strlen(str2) + 1;\n                goto lab_0x407796;\n            }\n        }\n        // 0x4076e3\n        v11 = v6 + 1 + (int64_t)strlen(str3);\n        str5 = (char *)v11;\n    }\n    // 0x407718\n    *v1 = v11;\n    while (strcmp(str5, str2) != 0) {\n        // 0x4076c7\n        v6 = v11;\n        str3 = (char *)v6;\n        if (*str3 == 0) {\n            // 0x4076cc\n            v10 = v5 + 9;\n            if (v6 != v10) {\n                // break (via goto) -> 0x407758\n                goto lab_0x407758;\n            }\n            // 0x4076d9\n            if (*(char *)(v5 + 8) == 0) {\n                // 0x407788\n                v8 = 0;\n                v9 = v3;\n                v7 = (int64_t)strlen(str2) + 1;\n                goto lab_0x407796;\n            }\n        }\n        // 0x4076e3\n        v11 = v6 + 1 + (int64_t)strlen(str3);\n        str5 = (char *)v11;\n        while (*str5 == 0) {\n            // 0x4076f5\n            v13 = *(int64_t *)v5;\n            if (v13 == 0) {\n                // break -> 0x4076b8\n                break;\n            }\n            // 0x4076fe\n            str4 = v13 + 9;\n            strcmp_rc = strcmp((char *)str4, str2);\n            v12 = str4;\n            if (strcmp_rc == 0) {\n                // 0x407718\n                *v1 = v12;\n                // 0x407721\n                return 1;\n            }\n            v5 = v13;\n            v6 = str4;\n            str3 = (char *)v6;\n            if (*str3 == 0) {\n                // 0x4076cc\n                v10 = v5 + 9;\n                if (v6 != v10) {\n                    // break (via goto) -> 0x407758\n                    goto lab_0x407758;\n                }\n                // 0x4076d9\n                if (*(char *)(v5 + 8) == 0) {\n                    // 0x407788\n                    v8 = 0;\n                    v9 = v3;\n                    v7 = (int64_t)strlen(str2) + 1;\n                    goto lab_0x407796;\n                }\n            }\n            // 0x4076e3\n            v11 = v6 + 1 + (int64_t)strlen(str3);\n            str5 = (char *)v11;\n        }\n        // 0x407718\n        *v1 = v11;\n    }\n    // 0x407721\n    return 1;\n  lab_0x407758:;\n    int64_t v14 = (int64_t)strlen(str2) + 1; // 0x407760\n    int64_t v15 = v6 - v10; // 0x407767\n    int64_t v16 = -1 - v15;\n    v8 = v15;\n    v9 = v16;\n    v7 = v14;\n    if (v14 > v16) {\n        // 0x407775\n        *__errno_location() = 12;\n        // 0x407721\n        return 0;\n    }\n    goto lab_0x407796;\n  lab_0x407796:\n    // 0x407796\n    if (v7 + v8 < 119) {\n        // 0x40779f\n        memcpy((int64_t *)v6, (int64_t *)v2, (int32_t)v7);\n        *(char *)(v7 + v6) = 0;\n        // 0x407718\n        *v1 = v6;\n        // 0x407721\n        return 1;\n    }\n    int64_t v17 = function_4075e0(v2, v2, v9); // 0x4077c3\n    *(int64_t *)v5 = v17;\n    if (v17 == 0) {\n        // 0x407721\n        return 0;\n    }\n    // 0x4077d1\n    *(char *)(v17 + 8) = 0;\n    // 0x407718\n    *v1 = v17 + 9;\n    // 0x407721\n    return 1;\n}\n"
        },
        {
            "funcName": "function_4077f0",
            "funcStartAddr": "4077f0",
            "funcEndAddr": "40789f",
            "decompiledFuncCode": "int64_t function_4077f0(int64_t a1) {\n    char * env_val = getenv(\"TZ\"); // 0x4077fc\n    int64_t v1 = (int64_t)env_val; // 0x4077fc\n    char v2 = *(char *)(a1 + 8);\n    int64_t v3; // 0x4077f0\n    if (env_val == NULL) {\n        // 0x407860\n        if (v2 == 0) {\n            // 0x40782d\n            return 1;\n        }\n    } else {\n        if (v2 != 0) {\n            // 0x407838\n            v3 = v1;\n            if (strcmp((char *)(a1 + 9), env_val) == 0) {\n                // 0x40782d\n                return 1;\n            }\n        }\n    }\n    // 0x407811\n    int64_t v4; // 0x4077f0\n    int64_t result = function_4075e0(v1, v3, v4); // 0x407814\n    if (result != 0 != ((char)result == 0)) {\n        // 0x40782d\n        return result;\n    }\n    int32_t * v5 = __errno_location(); // 0x407878\n    if (result != 1) {\n        // 0x407889\n        function_407560(result);\n    }\n    // 0x407891\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4078a0",
            "funcStartAddr": "4078a0",
            "funcEndAddr": "4078b1",
            "decompiledFuncCode": "int64_t function_4078a0(int64_t a1) {\n    // 0x4078a0\n    if (a1 == 1) {\n        // 0x4078b0\n        int64_t result; // 0x4078a0\n        return result;\n    }\n    // 0x4078a6\n    return function_407560(a1);\n}\n"
        },
        {
            "funcName": "function_4078c0",
            "funcStartAddr": "4078c0",
            "funcEndAddr": "407965",
            "decompiledFuncCode": "int64_t function_4078c0(int64_t a1, int64_t timep, int64_t time2) {\n    if (a1 == 0) {\n        // 0x407950\n        return (int64_t)gmtime_r((int32_t *)timep, (struct tm *)time2);\n    }\n    int64_t v1 = function_4077f0(a1); // 0x4078d8\n    if (v1 == 0) {\n        // 0x40790a\n        return 0;\n    }\n    // 0x4078e5\n    if (localtime_r((int32_t *)timep, (struct tm *)time2) != NULL) {\n        // 0x4078f5\n        if ((char)function_407670(a1, time2) != 0) {\n            // 0x407904\n            if (v1 == 1 || (char)function_407590(v1) != 0) {\n                // 0x40790a\n                return time2;\n            }\n            // 0x40790a\n            return 0;\n        }\n    }\n    if (v1 != 1) {\n        // 0x407926\n        function_407590(v1);\n    }\n    // 0x40790a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_407970",
            "funcStartAddr": "407970",
            "funcEndAddr": "407a8c",
            "decompiledFuncCode": "int64_t function_407970(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x407970\n    int32_t v1; // 0x407970\n    int32_t v2 = v1;\n    if (a1 == 0) {\n        // 0x407a68\n        return function_407a90(a2);\n    }\n    int64_t v3 = function_4077f0(a1); // 0x407987\n    if (v3 == 0) {\n        // 0x4079de\n        return -1;\n    }\n    int64_t v4 = function_4088c0(a2); // 0x40799b\n    int64_t timep = v4; // bp-96, 0x4079a0\n    if (v4 == -1) {\n        // 0x4079f0\n        int32_t time2; // bp-88, 0x407970\n        if (localtime_r((int32_t *)&timep, (struct tm *)&time2) == NULL) {\n            goto lab_0x4079c3;\n        } else {\n            int32_t v5 = *(int32_t *)(a2 + 32); // 0x407a04\n            if (v2 >= 0 == v5 > -1 == (v5 == 0 != (v2 == 0))) {\n                goto lab_0x4079c3;\n            } else {\n                int32_t v6 = *(int32_t *)(a2 + 16); // 0x407a23\n                int32_t v7 = *(int32_t *)(a2 + 20); // 0x407a26\n                int32_t v8 = *(int32_t *)(a2 + 12); // 0x407a33\n                int32_t v9 = *(int32_t *)(a2 + 8); // 0x407a3c\n                int32_t v10 = *(int32_t *)(a2 + 4); // 0x407a45\n                if ((v7 ^ v1 | v6 ^ v1 | v8 ^ v1 | v9 ^ v1 || v10 ^ v1 || time2 ^ (int32_t)(int64_t)&time2) == 0) {\n                    goto lab_0x4079ab;\n                } else {\n                    goto lab_0x4079c3;\n                }\n            }\n        }\n    } else {\n        goto lab_0x4079ab;\n    }\n  lab_0x4079ab:\n    // 0x4079ab\n    if ((char)function_407670(a1, a2) == 0) {\n        // 0x4079ba\n        timep = -1;\n    }\n    goto lab_0x4079c3;\n  lab_0x4079c3:\n    if (v3 != 1) {\n        // 0x4079c9\n        if ((char)function_407590(v3) == 0) {\n            // 0x4079de\n            return -1;\n        }\n    }\n    // 0x4079de\n    return timep;\n}\n"
        },
        {
            "funcName": "function_407a90",
            "funcStartAddr": "407a90",
            "funcEndAddr": "407aa6",
            "decompiledFuncCode": "int64_t function_407a90(int64_t a1) {\n    // 0x407a90\n    *(int32_t *)(a1 + 32) = 0;\n    return function_408480(a1, 0x401910, &g47);\n}\n"
        },
        {
            "funcName": "function_407ab0",
            "funcStartAddr": "407ab0",
            "funcEndAddr": "407b0d",
            "decompiledFuncCode": "int64_t function_407ab0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x407ab7\n    int64_t v2; // 0x407ab0\n    int64_t result = function_4080e0(a1, v2); // 0x407ac8\n    if ((v2 & 32) != 0) {\n        // 0x407af0\n        if ((int32_t)result == 0) {\n            // 0x407af4\n            *__errno_location() = 0;\n        }\n        // 0x407aea\n        return 0xffffffff;\n    }\n    // 0x407ad1\n    if ((int32_t)result == 0) {\n        // 0x407aea\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x407ad8\n    if (v1 == 0) {\n        // 0x407ada\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x407aea\n    return result2;\n}\n"
        },
        {
            "funcName": "function_407b10",
            "funcStartAddr": "407b10",
            "funcEndAddr": "407b6e",
            "decompiledFuncCode": "int64_t function_407b10(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x407b16\n    if (locale == NULL) {\n        // 0x407b43\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x407b16\n    bool v2; // 0x407b10\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g13; // 0x407b10\n    int64_t v5 = v1; // 0x407b10\n    int64_t v6 = 2; // 0x407b35\n    unsigned char v7 = *(char *)v5; // 0x407b35\n    char v8 = *(char *)v4; // 0x407b35\n    char v9 = v8; // 0x407b35\n    bool v10 = false; // 0x407b35\n    while (v7 == v8) {\n        // 0x407b28\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x407b41\n    int64_t v13 = v1; // 0x407b41\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x407b43\n        return 0;\n    }\n    int64_t v14 = 6; // 0x407b41\n    unsigned char v15 = *(char *)v13; // 0x407b5d\n    char v16 = *(char *)v12; // 0x407b5d\n    char v17 = v16; // 0x407b5d\n    bool v18 = false; // 0x407b5d\n    while (v15 == v16) {\n        // 0x407b50\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_407b70",
            "funcStartAddr": "407b70",
            "funcEndAddr": "4080d2",
            "decompiledFuncCode": "int64_t function_407b70(void) {\n    char * v1 = nl_langinfo(14); // 0x407b86\n    char * v2 = g48; // 0x407b8b\n    char * v3; // 0x407b70\n    int64_t v4; // 0x407b70\n    int64_t v5; // 0x407b70\n    int64_t v6; // 0x407b70\n    int64_t v7; // 0x407b70\n    int32_t size; // 0x407b70\n    int32_t size2; // 0x407b70\n    int32_t len; // 0x407c42\n    int64_t v8; // 0x407c42\n    char * env_val; // 0x407c2d\n    if (v2 == NULL) {\n        // 0x407c28\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x407c95;\n        } else {\n            // 0x407c3a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x407c95;\n            } else {\n                // 0x407c3f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x407c2d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4080c5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x407c95;\n                    } else {\n                        // 0x408039\n                        size2 = len + 14;\n                        goto lab_0x407c5b;\n                    }\n                } else {\n                    goto lab_0x407c5b;\n                }\n            }\n        }\n    } else {\n        // 0x407b70\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x407baa;\n    }\n  lab_0x407edc:;\n    // 0x407edc\n    struct _IO_FILE * stream; // 0x407d1b\n    int32_t v10 = __uflow(stream); // 0x407edf\n    int64_t v11; // 0x407b70\n    int64_t v12 = v11; // 0x407ee9\n    int64_t v13; // 0x407b70\n    int64_t v14 = v13; // 0x407ee9\n    int32_t v15 = v10; // 0x407ee9\n    int64_t v16; // 0x407b70\n    int64_t v17 = v16; // 0x407ee9\n    int64_t v18 = v11; // 0x407ee9\n    int64_t v19 = v13; // 0x407ee9\n    int64_t v20 = v16; // 0x407ee9\n    if (v10 == -1) {\n        // break -> 0x407eef\n        goto lab_0x407eef;\n    }\n    goto lab_0x407d69;\n  lab_0x407d5e:;\n    // 0x407d5e\n    int64_t v90; // 0x407b70\n    int64_t * v32; // 0x407d50\n    *v32 = v90 + 1;\n    int64_t v89; // 0x407b70\n    v12 = v89;\n    int64_t v91; // 0x407b70\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x407b70\n    v17 = v92;\n    goto lab_0x407d69;\n  lab_0x407d69:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x407b70\n    int32_t v25; // bp-120, 0x407b70\n    int32_t v26; // bp-184, 0x407b70\n    int64_t v27; // 0x407d1b\n    int64_t v28; // 0x407d38\n    int64_t v29; // 0x407d3d\n    int64_t * v30; // 0x407d54\n    switch (c) {\n        case 32: {\n            goto lab_0x407d50;\n        }\n        case 10: {\n            goto lab_0x407d50;\n        }\n        case 9: {\n            goto lab_0x407d50;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x407f41\n            int32_t v33; // 0x407b70\n            char v34; // 0x407b70\n            int32_t v35; // 0x407f4e\n            if (v31 < *v30) {\n                // 0x407f20\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x407f4b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x407f41\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x407f20\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x407f4b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x407f30\n                v36 = v33;\n            }\n            // 0x40801f\n            if (v36 == -1) {\n                // break -> 0x407eef\n                break;\n            }\n            goto lab_0x407d50;\n        }\n        default: {\n            // 0x407d7f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x407eef\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x407da8\n            int64_t v39 = v37 + 4; // 0x407daa\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x407db6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x407db8\n            while (v41 == 0) {\n                // 0x407da8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x407dd6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x407de2\n            int64_t v45 = v43 + 4; // 0x407de4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x407df0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x407df2\n            while (v47 == 0) {\n                // 0x407de2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x407ddf\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x407e08\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x407e18\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x407e1c\n            int64_t v52 = v51 + v48; // 0x407e25\n            int64_t * mem; // 0x407b70\n            int64_t v53; // 0x407b70\n            int64_t v54; // 0x407b70\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x407f5b\n                int64_t v56 = v55 + 3; // 0x407f67\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x407e41\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x407e50\n            if (mem == NULL) {\n                // 0x40807c\n                free((int64_t *)v21);\n                function_4080e0(v27, v53);\n                v24 = (int64_t)&g12;\n                goto lab_0x407cf4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x407e68\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x407e72\n            uint32_t v62 = (int32_t)v59; // 0x407e75\n            int64_t v63; // 0x407b70\n            if (v62 >= 8) {\n                // 0x407f84\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x407f9e\n                int64_t v66 = v61 - v65; // 0x407fa2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x407fad\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x407fbe\n                    int64_t v70 = v69 & 0xffffffff; // 0x407fbe\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x407fbb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x40804f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x407e87\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x407e8b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x407e9b\n            int64_t v74 = v60 - 1; // 0x407e9f\n            uint32_t v75 = (int32_t)v73; // 0x407ea4\n            int64_t v76; // 0x407b70\n            if (v75 >= 8) {\n                // 0x407fd2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x407fdc\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x407fec\n                int64_t v80 = v74 - v79; // 0x407ff0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x407ffb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x40800b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x408009\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x408066\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x40806e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x407eb6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x407eba\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4080b3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x407ece\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x407d5e;\n            } else {\n                goto lab_0x407edc;\n            }\n        }\n    }\n  lab_0x407d50:;\n    int64_t v93 = v23; // 0x407b70\n    int64_t v94 = v22; // 0x407b70\n    int64_t v95 = v21; // 0x407b70\n    goto lab_0x407d50_2;\n  lab_0x407c95:;\n    int64_t * mem3 = malloc(size); // 0x407c95\n    int64_t v97 = (int64_t)&g12; // 0x407ca0\n    int64_t v98; // 0x407b70\n    int64_t path; // 0x407b70\n    if (mem3 == NULL) {\n        goto lab_0x407c72;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x407c95\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x407cb6;\n    }\n  lab_0x407baa:;\n    int64_t str = v1 == NULL ? (int64_t)&g12 : (int64_t)v1; // 0x407b9d\n    char v100 = *v3; // 0x407baa\n    int64_t v101; // 0x407b70\n    if (v100 == 0) {\n        // 0x407c04\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x407b70\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x407b70\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x407bf0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x407bf7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x407bc0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x407bcd\n        char v107 = *(char *)v106; // 0x407bd2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x407c04\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x407bdb\n    v104 = v103 + 1;\n  lab_0x407bf7:\n    // 0x407c04\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x407c72:;\n    char * v108 = (char *)v97;\n    g48 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x407baa;\n  lab_0x407cb6:;\n    int64_t v109 = v98 + path; // 0x407cb6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x407ce2\n    v24 = (int64_t)&g12;\n    if (fd >= 0) {\n        // 0x407d11\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x408042\n            close(fd);\n            v24 = (int64_t)&g12;\n        } else {\n            // 0x407d35\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x407d50_2:;\n                uint64_t v96 = *v32; // 0x407d50\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x407edc;\n                } else {\n                    goto lab_0x407d5e;\n                }\n            }\n          lab_0x407eef:\n            // 0x407eef\n            function_4080e0(v27, v19);\n            v24 = (int64_t)&g12;\n            if (v18 != 0) {\n                // 0x407f0e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x407cf4;\n  lab_0x407c5b:;\n    int64_t * mem4 = malloc(size2); // 0x407c5b\n    v97 = (int64_t)&g12;\n    if (mem4 != NULL) {\n        // 0x407d01\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x407cb6;\n    } else {\n        goto lab_0x407c72;\n    }\n  lab_0x407cf4:\n    // 0x407cf4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x407c72;\n}\n"
        },
        {
            "funcName": "function_4080e0",
            "funcStartAddr": "4080e0",
            "funcEndAddr": "40815b",
            "decompiledFuncCode": "int64_t function_4080e0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x4080e7\n    if (fileno(stream) < 0) {\n        // 0x408147\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x4080fa\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x40812b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x408147\n            return fclose(stream);\n        }\n    }\n    // 0x4080fc\n    if ((int32_t)function_408160(a1, v1) == 0) {\n        // 0x408147\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x408108\n    int32_t v3 = *v2; // 0x408110\n    int64_t result = fclose(stream); // 0x40811e\n    if (v3 != 0) {\n        // 0x408150\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x408120\n    return result;\n}\n"
        },
        {
            "funcName": "function_408160",
            "funcStartAddr": "408160",
            "funcEndAddr": "4081a0",
            "decompiledFuncCode": "int64_t function_408160(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x40817a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x40817a\n        return fflush(stream);\n    }\n    // 0x408188\n    function_4081a0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_4081a0",
            "funcStartAddr": "4081a0",
            "funcEndAddr": "4081f7",
            "decompiledFuncCode": "int64_t function_4081a0(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x4081a0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4081aa\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x4081db\n    int64_t result = -1; // 0x4081e4\n    if (v1 != -1) {\n        // 0x4081e6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x4081f2\n    return result;\n}\n"
        },
        {
            "funcName": "function_408200",
            "funcStartAddr": "408200",
            "funcEndAddr": "408317",
            "decompiledFuncCode": "int64_t function_408200(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6, int64_t a7, int64_t a8, int64_t a9, int64_t a10) {\n    int64_t v1 = a1 / 4 + 475 + (int64_t)(a1 % 4 == 0); // 0x40822e\n    int32_t v2 = (a6 >> 2) + 475 + (int32_t)(a6 % 4 == 0); // 0x40824a\n    int32_t v3 = v1; // 0x408253\n    int32_t v4 = ((int32_t)(0x51eb851f * (0x100000000 * v1 >> 32) / 0x100000000) >> 3) - (v3 >> 31); // 0x408264\n    int32_t v5 = v4 - (int32_t)(-25 * v4 + v3 < 0); // 0x408274\n    int32_t v6 = v2 / 25; // 0x408288\n    int32_t v7 = v6 - (int32_t)(-25 * v6 + v2 < 0); // 0x408299\n    return (0x100000000 * a5 >> 32) - (0x100000000 * a10 >> 32) + 60 * ((0x100000000 * a4 >> 32) - (0x100000000 * a9 >> 32) + 60 * ((0x100000000 * a3 >> 32) - (0x100000000 * a8 >> 32) + 24 * (365 * (a1 - (int64_t)a6) + a2 - (0x100000000 * a7 >> 32) + (int64_t)(v3 - v2 - v5 + (v5 >> 2) + v7 - (v7 >> 2)))));\n}\n"
        },
        {
            "funcName": "function_408320",
            "funcStartAddr": "408320",
            "funcEndAddr": "4083b1",
            "decompiledFuncCode": "int64_t function_408320(int64_t a1, int64_t a2, int32_t a3, int32_t a4, int32_t a5, uint64_t a6, int64_t a7) {\n    if (a7 != 0) {\n        uint32_t v1 = *(int32_t *)a7; // 0x40832e\n        uint32_t v2 = *(int32_t *)(a7 + 4); // 0x408333\n        uint32_t v3 = *(int32_t *)(a7 + 8); // 0x408339\n        uint32_t v4 = *(int32_t *)(a7 + 28); // 0x40833f\n        int32_t v5 = *(int32_t *)(a7 + 20); // 0x408345\n        int64_t v6 = function_408200(a1, a2, (int64_t)a3, (int64_t)a4, (int64_t)a5, v5, (int64_t)v4, (int64_t)v3, (int64_t)v2, (int64_t)v1); // 0x408349\n        int64_t result = v6 + a6; // 0x408352\n        if (((result ^ v6) & (result ^ a6)) >= 0) {\n            // 0x408357\n            return result;\n        }\n    }\n    if (a6 >= 0) {\n        int64_t v7 = a6 - 0x7ffffffffffffffd; // 0x40837d\n        int64_t result2 = v7 < 0 == (0x7ffffffffffffffc - a6 & a6) < 0 == (v7 != 0) ? a6 - 1 : 0x7fffffffffffffff; // 0x408381\n        return result2;\n    }\n    // 0x408390\n    if (a6 > -0x7fffffffffffffff) {\n        // 0x408357\n        return -0x8000000000000000;\n    }\n    // 0x40839f\n    return a6 + 1;\n}\n"
        },
        {
            "funcName": "function_4083c0",
            "funcStartAddr": "4083c0",
            "funcEndAddr": "40847f",
            "decompiledFuncCode": "int64_t function_4083c0(int64_t a1, int64_t result, uint64_t a3) {\n    if (result == 0 != a3 != 0) {\n        // 0x4083ed\n        return result;\n    }\n    int64_t v1 = ((int64_t)a3 >> 1) + a3 % 2; // 0x40842b\n    if (v1 != 0 == (v1 != a3)) {\n        // 0x4083ed\n        return result;\n    }\n    int64_t v2 = v1; // 0x408431\n    while (v2 != 0) {\n        // 0x408438\n        v2 = (v2 >> 1) + v2 % 2;\n    }\n    // 0x4083ed\n    return result;\n}\n"
        },
        {
            "funcName": "function_408480",
            "funcStartAddr": "408480",
            "funcEndAddr": "4088ba",
            "decompiledFuncCode": "int64_t function_408480(int64_t a1, int64_t a2, int64_t * a3) {\n    int32_t v1 = *(int32_t *)(a1 + 12); // 0x40849b\n    uint32_t v2 = *(int32_t *)(a1 + 4); // 0x4084a3\n    uint32_t v3 = *(int32_t *)(a1 + 8); // 0x4084b4\n    int32_t v4 = *(int32_t *)(a1 + 16); // 0x4084b7\n    int32_t v5 = v4 / 12; // 0x4084d5\n    int32_t v6 = -12 * v5 + v4; // 0x4084df\n    int32_t v7 = *(int32_t *)(a1 + 20); // 0x4084ea\n    int64_t v8 = (int64_t)(v5 - (int32_t)(v6 < 0)) + (int64_t)v7; // 0x4084f1\n    int64_t v9 = 0; // 0x4084f7\n    if (v8 % 4 == 0) {\n        // 0x4084f9\n        v9 = 1;\n        if (v8 == (v8 >> 63 & 100)) {\n            // 0x408760\n            v9 = v8 < 0;\n        }\n    }\n    // 0x408535\n    int64_t v10; // 0x408480\n    int32_t v11 = v10;\n    int64_t v12 = v9;\n    uint16_t v13 = *(int16_t *)(2 * (v12 + (int64_t)((v6 >> 31 & 12) + v6) + 4 * v12) + (int64_t)&g14); // 0x408567\n    int32_t v14 = v11 - 59; // 0x408580\n    int64_t v15 = v14 == 0 | v14 < 0 != (58 - v11 & v11) < 0 ? v10 & 0xffffffff : 59; // 0x408583\n    int64_t v16 = (int32_t)v15 >= 0 ? v15 : 0; // 0x408597\n    int64_t v17 = function_408200(v8, (int64_t)v1 - 1 + (int64_t)v13, (int64_t)v3, (int64_t)v2, v16, 70, 0, 0, 0, -v12 & 0xffffffff); // 0x4085c0\n    int64_t v18; // bp-280, 0x408480\n    int64_t v19 = &v18; // 0x4085c5\n    int64_t * v20 = (int64_t *)(v19 + 16);\n    int64_t v21 = v19 + 96; // 0x408613\n    int64_t v22 = v19 + 80; // 0x408618\n    int64_t * v23 = (int64_t *)v22;\n    int64_t * v24 = (int64_t *)(v19 - 16);\n    int32_t * v25 = (int32_t *)(v19 + 28);\n    int32_t * v26 = (int32_t *)(v19 + 12);\n    int32_t * v27 = (int32_t *)(v19 + 24);\n    int64_t * v28 = (int64_t *)(v19 + 32);\n    int64_t v29 = v19 + 128;\n    int32_t * v30 = (int32_t *)v29;\n    int64_t v31 = v19 + 40;\n    int32_t * v32 = (int32_t *)v31;\n    int32_t v33 = 6; // 0x4085e3\n    int64_t v34 = v17; // 0x4085e3\n    int64_t v35 = v17;\n    uint64_t v36 = 0;\n    int64_t v37 = function_4083c0(*v20, v22, v21); // 0x40861d\n    int64_t v38 = *v23; // 0x408622\n    *v24 = v37;\n    int64_t v39 = function_408320(v8, *v28, *v27, *v26, *v25, v38, (int64_t)&g53); // 0x408644\n    while (v38 != v39) {\n        // 0x408654\n        if (v38 != v35 && v38 == v34) {\n            int32_t v40 = *v30; // 0x40865e\n            if (v40 < 0) {\n                goto lab_0x408687_3;\n            }\n            int32_t v41 = *v32; // 0x40866b\n            if (v41 < 0) {\n                if (v36 <= (int64_t)(v40 != 0)) {\n                    goto lab_0x408687_3;\n                }\n            } else {\n                if (v41 != 0 != v40 != 0) {\n                    goto lab_0x408687_3;\n                }\n            }\n        }\n        // 0x4085e8\n        v33--;\n        if (v33 == 0) {\n            // 0x408747\n            return -1;\n        }\n        // 0x4085f1\n        *v23 = v39;\n        v34 = v35;\n        v35 = v38;\n        v36 = (int64_t)(*v30 != 0);\n        v37 = function_4083c0(*v20, v22, v21);\n        v38 = *v23;\n        *v24 = v37;\n        v39 = function_408320(v8, *v28, *v27, *v26, *v25, v38, (int64_t)&g53);\n    }\n    int32_t v42 = *v32; // 0x408790\n    int32_t v43 = *v30; // 0x408794\n    int64_t v44 = *(int64_t *)(v19 + 72); // 0x40879b\n    *(char *)v31 = (char)(v42 == 0);\n    int64_t v45 = v38; // 0x4087b4\n    int64_t v46 = v44; // 0x4087b4\n    if (v43 >= 0 && v42 >= 0 && v42 == 0 != (v43 == 0)) {\n        int64_t * v47 = (int64_t *)v31; // 0x4087d0\n        *v47 = v8;\n        int64_t v48 = v19 + 88; // 0x40880b\n        int64_t * v49 = (int64_t *)v48;\n        int64_t v50 = v19 + 160;\n        int64_t v51 = v38; // 0x4087d5\n        int64_t v52 = 0x92c70; // 0x4087d5\n        while (true) {\n            int64_t v53 = -v52; // 0x408802\n            int64_t v54 = v53 & 0xffffffff; // 0x408802\n            int64_t v55 = 0x100000000 * v53 >> 32; // 0x408805\n            int64_t v56 = v55 + v51; // 0x408808\n            *v49 = v56;\n            int64_t v57 = v51; // 0x408810\n            int32_t v58 = 2; // 0x408810\n            int64_t v59 = v54; // 0x408810\n            int32_t v60 = 2; // 0x408810\n            int64_t v61 = v54; // 0x408810\n            if (((v56 ^ v55) & (v56 ^ v51)) >= 0) {\n              lab_0x40882e:\n                // 0x40882e\n                function_4083c0(*v20, v48, v50);\n                int32_t v62 = *(int32_t *)(v19 + 192); // 0x408845\n                if (v42 == 0 != (v62 == 0) != v62 >= 0) {\n                    // break -> 0x40885a\n                    break;\n                }\n                // 0x4088b0\n                v59 = v61;\n                v58 = v60;\n                v57 = *v23;\n            }\n            int64_t v63 = 2 * v52; // 0x4087f7\n            int64_t v64 = v57;\n            int32_t v65 = v58; // 0x408480\n            int64_t v66 = v59; // 0x408812\n            while (v65 != 1) {\n                int64_t v67 = v66 + v63; // 0x408812\n                v66 = v67 & 0xffffffff;\n                int64_t v68 = 0x100000000 * v67 >> 32; // 0x40881b\n                int64_t v69 = v68 + v64; // 0x408824\n                *v49 = v69;\n                v65 = 1;\n                v60 = 1;\n                v61 = v66;\n                if (((v69 ^ v68) & (v69 ^ v64)) >= 0) {\n                    goto lab_0x40882e;\n                }\n            }\n            int64_t v70 = v52 + 0x92c70; // 0x4087e0\n            v45 = v64;\n            v46 = v44;\n            v51 = v64;\n            v52 = v70 & 0xffffffff;\n            if ((int32_t)v70 == 0x100dc400) {\n                goto lab_0x408690;\n            }\n        }\n        // 0x40885a\n        *v24 = v50;\n        *v23 = function_408320(*v47, *v28, *v27, *v26, *v25, *v49, (int64_t)&g53);\n        function_4083c0(*v20, v22, v21);\n        v45 = *v23;\n        v46 = v44;\n    }\n    goto lab_0x408690;\n  lab_0x408687_3:\n    // 0x408687\n    v45 = v38;\n    v46 = *(int64_t *)(v19 + 72);\n    goto lab_0x408690;\n  lab_0x408690:;\n    int64_t v71 = *(int64_t *)(v19 + 56); // 0x408698\n    int32_t v72 = *(int32_t *)v21; // 0x4086a0\n    int32_t v73 = *(int32_t *)(v19 + 64); // 0x4086a4\n    int64_t v74 = *(int64_t *)(v19 + 48); // 0x4086ab\n    *(int64_t *)v74 = v45 - (int64_t)*(int32_t *)(v19 + 68) - v71;\n    int64_t result = v45; // 0x4086b5\n    if (v72 != v73) {\n        int32_t v75 = *v25; // 0x4086b9\n        int64_t v76 = (int64_t)(v72 == 60 == v73 < 1) - (int64_t)v75 + (int64_t)v73; // 0x4086d5\n        int64_t v77 = v76 + v45; // 0x4086d8\n        *v23 = v77;\n        if (((v77 ^ v45) & (v77 ^ v76)) < 0) {\n            // 0x408747\n            return -1;\n        }\n        // 0x4086e2\n        *(int64_t *)(v19 + 160) = v77;\n        if (*v20 == 0) {\n            // 0x408747\n            return -1;\n        }\n        // 0x408703\n        result = *v23;\n    }\n    int128_t v78 = __asm_movdqa(*(int128_t *)v21); // 0x408708\n    int128_t v79 = __asm_movdqa(*(int128_t *)(v19 + 112)); // 0x40870e\n    int128_t v80 = __asm_movdqa(*(int128_t *)v29); // 0x408714\n    __asm_movups(*(int128_t *)v46, v78);\n    __asm_movups(*(int128_t *)(v46 + 16), v79);\n    __asm_movups(*(int128_t *)(v46 + 32), v80);\n    *(int64_t *)(v46 + 48) = *(int64_t *)(v19 + 144);\n    // 0x408747\n    return result;\n}\n"
        },
        {
            "funcName": "function_4088c0",
            "funcStartAddr": "4088c0",
            "funcEndAddr": "4088dc",
            "decompiledFuncCode": "int64_t function_4088c0(int64_t a1) {\n    // 0x4088c0\n    tzset();\n    return function_408480(a1, 0x401810, &g49);\n}\n"
        },
        {
            "funcName": "function_4088e0",
            "funcStartAddr": "4088e0",
            "funcEndAddr": "40893d",
            "decompiledFuncCode": "int64_t function_4088e0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x4088e0\n    return function_401728();\n}\n"
        },
        {
            "funcName": "function_408940",
            "funcStartAddr": "408940",
            "funcEndAddr": "408941",
            "decompiledFuncCode": "int64_t function_408940(void) {\n    // 0x408940\n    int64_t result; // 0x408940\n    return result;\n}\n"
        },
        {
            "funcName": "function_408950",
            "funcStartAddr": "408950",
            "funcEndAddr": "408968",
            "decompiledFuncCode": "int64_t function_408950(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408950\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g19);\n}\n"
        },
        {
            "funcName": "function_408968",
            "funcStartAddr": "408968",
            "funcEndAddr": "408988",
            "decompiledFuncCode": "int64_t function_408968(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g15; // 0x408972\n    while (*(int64_t *)v1 != -1) {\n        // 0x408973\n        v1 -= 8;\n    }\n    // 0x408984\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_uptime.elf"
}