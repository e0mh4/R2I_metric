{
    "funcInfo": [
        {
            "funcName": "function_401cb0",
            "funcStartAddr": "401cb0",
            "funcEndAddr": "401cb5",
            "decompiledFuncCode": "int64_t function_401cb0(void) {\n    // 0x401cb0\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401cb5",
            "funcStartAddr": "401cb5",
            "funcEndAddr": "401cba",
            "decompiledFuncCode": "int64_t function_401cb5(void) {\n    // 0x401cb5\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401cba",
            "funcStartAddr": "401cba",
            "funcEndAddr": "401cbf",
            "decompiledFuncCode": "int64_t function_401cba(void) {\n    // 0x401cba\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401cbf",
            "funcStartAddr": "401cbf",
            "funcEndAddr": "401cc4",
            "decompiledFuncCode": "int64_t function_401cbf(void) {\n    // 0x401cbf\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401cc4",
            "funcStartAddr": "401cc4",
            "funcEndAddr": "401cc9",
            "decompiledFuncCode": "int64_t function_401cc4(void) {\n    // 0x401cc4\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401cc9",
            "funcStartAddr": "401cc9",
            "funcEndAddr": "401cce",
            "decompiledFuncCode": "int64_t function_401cc9(void) {\n    // 0x401cc9\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401cce",
            "funcStartAddr": "401cce",
            "funcEndAddr": "401cd3",
            "decompiledFuncCode": "int64_t function_401cce(void) {\n    // 0x401cce\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401cd3",
            "funcStartAddr": "401cd3",
            "funcEndAddr": "401cd8",
            "decompiledFuncCode": "int64_t function_401cd3(void) {\n    // 0x401cd3\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ce0",
            "funcStartAddr": "401ce0",
            "funcEndAddr": "402426",
            "decompiledFuncCode": "int64_t function_401ce0(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 & 0xffffffff; // 0x401ce9\n    function_403070(a2);\n    setlocale(LC_ALL, (char *)&g12);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x401ce0\n    function_414b70(0x402ef0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    g56 = 1;\n    g58 = &g11;\n    g55 = 1;\n    while (true) {\n      lab_0x401d4a_2:;\n        uint32_t v3 = (int32_t)function_406380(v1, a2, \"brs:\", &g4, 0, v2);\n        switch (v3) {\n            case -1: {\n                goto lab_0x401e0c;\n            }\n            case 98: {\n                // 0x401e00\n                g56 = 0;\n                goto lab_0x401d4a_2;\n            }\n            default: {\n                if (v3 <= 98) {\n                    if (v3 == -131) {\n                        // 0x401d97\n                        function_405200((int64_t)g34, \"tac\", \"GNU coreutils\", (int64_t)g23, \"Jay Lepreau\", \"David MacKenzie\");\n                        exit(0);\n                        // UNREACHABLE\n                    }\n                    if (v3 == -130) {\n                        // 0x401df7\n                        function_402b70(0);\n                        // UNREACHABLE\n                    }\n                    goto lab_0x4023cc;\n                }\n                if (v3 != 114) {\n                    if (v3 != 115) {\n                      lab_0x4023cc:\n                        // 0x4023cc\n                        function_402b70(1);\n                        // UNREACHABLE\n                    }\n                    // 0x401dd9\n                    g58 = g72;\n                } else {\n                    // 0x401d7a\n                    g55 = 0;\n                }\n                goto lab_0x401d4a_2;\n            }\n        }\n    }\n  lab_0x401e0c:;\n    char v4 = *(char *)g58; // 0x401e1b\n    int32_t v5; // 0x401ce0\n    int64_t v6; // 0x401ce0\n    int64_t v7; // 0x401ce0\n    bool v8; // 0x401ce0\n    if (g55 != 0) {\n        int64_t v9 = 1; // 0x401f49\n        int64_t v10 = v1; // 0x401f49\n        if (v4 != 0) {\n            int64_t v11 = -1; // 0x401f54\n            int64_t v12 = g58;\n            int64_t v13 = 0; // 0x401f54\n            int64_t v14 = v12; // 0x401f54\n            while (v11 != 0) {\n                int64_t v15 = v12 + (v8 ? -1 : 1); // 0x401f54\n                v11--;\n                v13 = v11;\n                v14 = v15;\n                if (*(char *)v12 == 0) {\n                    // break -> \n                    break;\n                }\n                v12 = v15;\n                v13 = 0;\n                v14 = v12;\n            }\n            v9 = -2 - v13;\n            v10 = v14;\n        }\n        int32_t v16 = v9; // 0x401f60\n        g55 = v16;\n        g54 = v9;\n        v5 = v16;\n        v7 = v10;\n        goto lab_0x401e84;\n    } else {\n        if (v4 == 0) {\n            // 0x4023e2\n            error(1, (int32_t)\"separator cannot be empty\" ^ (int32_t)\"separator cannot be empty\", dcgettext(NULL, \"separator cannot be empty\", 5));\n            v6 = &g81;\n            goto lab_0x402404;\n        } else {\n            // 0x401e2d\n            g47 = 0;\n            g48 = 0;\n            g49 = &g46;\n            g50 = 0;\n            int64_t v17 = -1; // 0x401e67\n            int64_t v18 = g58; // 0x401e67\n            int64_t v19 = 0; // 0x401e67\n            while (v17 != 0) {\n                int64_t v20 = v18;\n                v17--;\n                v18 = v20 + (v8 ? -1 : 1);\n                v19 = v17;\n                if (*(char *)v20 == 0) {\n                    // break -> \n                    break;\n                }\n                v19 = 0;\n            }\n            int64_t v21 = function_4137a0(g58, -2 - v19, (int64_t)&g47); // 0x401e76\n            v6 = v21;\n            if (v21 != 0) {\n                goto lab_0x402404;\n            } else {\n                // 0x401e84\n                v5 = g55;\n                v7 = g58;\n                goto lab_0x401e84;\n            }\n        }\n    }\n  lab_0x4020b2:;\n    // 0x4020b2\n    int32_t v22; // 0x401ce0\n    int64_t v23; // 0x401ce0\n    int64_t v24; // 0x401ce0\n    int64_t v25; // 0x401ce0\n    int64_t fd2; // 0x401ce0\n    int64_t v26; // 0x401ce0\n    int64_t v27; // 0x401ce0\n    int64_t v28; // 0x401ce0\n    char * v29; // 0x401ce0\n    char * v30; // 0x401ce0\n    int32_t v31; // 0x401ce0\n    int32_t v32; // 0x401ce0\n    int64_t v33; // 0x401ce0\n    int64_t v34; // 0x401ce0\n    int32_t v35; // 0x401fab\n    int64_t v36; // 0x401ce0\n    struct _IO_FILE * stream; // 0x402053\n    if (fflush_unlocked(stream) != 0) {\n        // 0x40221e\n        function_404b10(0, 3, v36);\n        v28 = (int64_t)\"%s: write error\";\n        goto lab_0x4021d7;\n    } else {\n        uint64_t v37 = v26;\n        v22 = v35;\n        v34 = v33;\n        v30 = v29;\n        v32 = v31;\n        v27 = 0;\n        fd2 = v25;\n        v24 = v23;\n        if (v37 >= 0) {\n            uint32_t v38 = fileno(stream); // 0x4020ce\n            v22 = v35;\n            v34 = v33;\n            v30 = v29;\n            v32 = v31;\n            v27 = function_4025f0((int64_t)v38, v36, v37) & 0xffffffff;\n            fd2 = v25;\n            v24 = v23;\n        }\n        goto lab_0x4020e4;\n    }\n  lab_0x401e84:;\n    uint64_t v39 = (int64_t)v5; // 0x401e84\n    g52 = 0x2000;\n    int64_t v40 = 0x2000; // 0x401ea7\n    int32_t v41 = 50; // 0x401ea7\n    int64_t v42 = 0x2000; // 0x401ea7\n    if (v5 >= 0x1000) {\n        int64_t v43 = 2 * v40; // 0x401eb9\n        while ((v40 & 0x7ffffffffffffffe) <= v39) {\n            int32_t v44 = v41 - 1; // 0x401eb0\n            v40 = v43;\n            v41 = v44;\n            if (v44 == 0) {\n                // 0x4023d6\n                g52 = v43;\n                function_405590(v7);\n                // UNREACHABLE\n            }\n            v43 = 2 * v40;\n        }\n        // 0x401ec7\n        g52 = v43;\n        v42 = v43;\n    }\n    uint64_t v45 = v42;\n    uint64_t v46 = (v45 | 1) + v39; // 0x401ece\n    int64_t v47 = 2 * v46; // 0x401ed6\n    g51 = v47;\n    if (v46 <= v45 || v45 + v39 >= v47) {\n        // 0x402421\n        function_405590(v47);\n        // UNREACHABLE\n    }\n    int64_t v48 = function_405340(v47); // 0x401ef2\n    int32_t v49 = g55; // 0x401ef7\n    g53 = v48;\n    int64_t v50; // 0x401ce0\n    if (v49 != 0) {\n        // 0x4022fa\n        v50 = (int64_t)memcpy((int64_t *)v48, (int64_t *)g58, v49 + 1) + (int64_t)v49;\n    } else {\n        // 0x401f11\n        v50 = v48 + 1;\n    }\n    // 0x401f1c\n    g53 = v50;\n    int64_t v51 = (int64_t)*(int32_t *)0x61b2dc; // 0x401f1c\n    int64_t v52 = (int64_t)\"-\"; // 0x401f25\n    int64_t v53 = (int64_t)&g3; // 0x401f25\n    int32_t v54; // 0x401ce0\n    if (v1 > v51) {\n        int64_t v55 = 8 * v51 + a2; // 0x401f27\n        int64_t v56 = *(int64_t *)v55; // 0x401f2b\n        v52 = v56;\n        v53 = v55;\n        v54 = 1;\n        if (v56 == 0) {\n            goto lab_0x402107;\n        } else {\n            goto lab_0x401f88;\n        }\n    } else {\n        goto lab_0x401f88;\n    }\n  lab_0x401f88:;\n    int64_t v57 = v53; // 0x401f95\n    char * v58 = \"-\"; // 0x401f95\n    int32_t v59 = 1; // 0x401f95\n    int64_t v60 = v52; // 0x401f95\n    goto lab_0x401f98;\n  lab_0x402404:\n    // 0x402404\n    error(1, 0, \"%s\", (char *)v6);\n    v22 = v2;\n    v27 = 0;\n    fd2 = v1;\n    goto lab_0x4020e4;\n  lab_0x402107:\n    // 0x402107\n    function_402510(0, 0);\n    int32_t v95 = v54; // 0x402117\n    if (g57 == 0) {\n        // 0x40211d\n        return v95 % 256 ^ 1;\n    }\n    // 0x4022cc\n    v95 = v54;\n    if (close(0) < 0) {\n        // 0x4022db\n        error(0, *__errno_location(), \"-\");\n        v95 = 0;\n    }\n    // 0x40211d\n    return v95 % 256 ^ 1;\n  lab_0x401f98:;\n    int64_t path = v60;\n    v31 = v59;\n    v29 = v58;\n    v33 = v57 + 8;\n    int64_t v61 = v8 ? -1 : 1; // 0x401fa5\n    int64_t v62 = (int64_t)v29; // 0x401ce0\n    int64_t v63 = path; // 0x401ce0\n    int64_t v64 = 2; // 0x401ce0\n    unsigned char v65 = *(char *)v63; // 0x401fa5\n    char v66; // 0x401ce0\n    while (v65 == *(char *)v62) {\n        int64_t v67 = v64 - 1; // 0x401fa5\n        v62 += v61;\n        v63 += v61;\n        v64 = v67;\n        v66 = v65;\n        if (v67 == 0) {\n            // break -> \n            break;\n        }\n        v65 = *(char *)v63;\n    }\n    unsigned char v68 = v66;\n    v35 = (int32_t)!((v65 < v68 | true)) - (int32_t)(v65 < v68);\n    int64_t v69; // 0x401ce0\n    int64_t v70; // 0x401ce0\n    char * v71; // 0x401ce0\n    int32_t v72; // 0x401ce0\n    int64_t v73; // 0x401ce0\n    int64_t v74; // 0x401ce0\n    if (v35 != 0) {\n        int32_t fd = open((char *)path, O_RDONLY); // 0x40213e\n        v70 = fd;\n        v69 = path;\n        if (fd >= 0) {\n            goto lab_0x401fd9;\n        } else {\n            // 0x40214d\n            function_404a40(4, path);\n            v73 = v33;\n            v71 = v29;\n            v72 = v31;\n            v74 = (int64_t)\"failed to open %s for reading\";\n            goto lab_0x402167;\n        }\n    } else {\n        // 0x401fbc\n        g57 = 1;\n        v70 = 0;\n        v69 = (int64_t)dcgettext(NULL, \"standard input\", 5);\n        goto lab_0x401fd9;\n    }\n  lab_0x4020e4:;\n    int64_t v75 = v27;\n    int32_t v76 = v32;\n    char * v77 = v30;\n    int64_t v78 = v34;\n    int64_t v79 = v78; // 0x4020e7\n    char * v80 = v77; // 0x4020e7\n    int32_t v81 = v76; // 0x4020e7\n    int64_t v82 = v75; // 0x4020e7\n    if (v22 != 0) {\n        // 0x40218e\n        v79 = v78;\n        v80 = v77;\n        v81 = v76;\n        v82 = v75;\n        if (close((int32_t)fd2) == 0) {\n            goto lab_0x4020ed;\n        } else {\n            // 0x40219d\n            function_404b10(0, 3, v24);\n            v73 = v78;\n            v71 = v77;\n            v72 = v76;\n            v74 = (int64_t)\"%s: read error\";\n            goto lab_0x402167;\n        }\n    } else {\n        goto lab_0x4020ed;\n    }\n  lab_0x4020ed:;\n    int32_t v83 = 0x1000000 * (v81 & (int32_t)v82) >> 24; // 0x4020f6\n    int64_t v84 = *(int64_t *)v79; // 0x4020fa\n    v57 = v79;\n    v58 = v80;\n    v59 = v83;\n    v60 = v84;\n    v54 = v83;\n    if (v84 != 0) {\n        goto lab_0x401f98;\n    } else {\n        goto lab_0x402107;\n    }\n  lab_0x401fd9:\n    // 0x401fd9\n    v23 = v69;\n    v25 = v70;\n    int32_t fd3 = v25; // 0x401fe0\n    int32_t v85 = lseek(fd3, 0, SEEK_END); // 0x401fe2\n    if (v85 < 0) {\n        goto lab_0x401ffe;\n    } else {\n        // 0x401fef\n        if (isatty(fd3) == 0) {\n            // 0x4022a7\n            v22 = v35;\n            v34 = v33;\n            v30 = v29;\n            v32 = v31;\n            v27 = function_4025f0(v25, v23, (int64_t)v85) & 0xffffffff;\n            fd2 = v25;\n            v24 = v23;\n            goto lab_0x4020e4;\n        } else {\n            goto lab_0x401ffe;\n        }\n    }\n  lab_0x401ffe:\n    // 0x401ffe\n    if (g42 == NULL) {\n        char * env_val = getenv(\"TMPDIR\"); // 0x402243\n        int64_t v86 = env_val == NULL ? (int64_t)\"/tmp\" : (int64_t)env_val;\n        g42 = (char *)function_402f90(v86, \"tacXXXXXX\", 0);\n        int32_t fd4 = function_404d10(); // 0x402271\n        if (fd4 < 0) {\n            // 0x402320\n            function_404a40(4, v86);\n            error(0, *__errno_location(), dcgettext(NULL, \"failed to create temporary file in %s\", 5));\n            goto lab_0x40235a;\n        } else {\n            struct _IO_FILE * v87 = fdopen(fd4, \"w+\"); // 0x402281\n            g41 = v87;\n            if (v87 == NULL) {\n                // 0x402378\n                char * v88; // 0x402286\n                function_404a40(4, (int64_t)v88);\n                char * format = dcgettext(NULL, \"failed to open %s for writing\", 5); // 0x402394\n                int32_t * v89 = __errno_location(); // 0x40239e\n                int32_t err_num = *v89; // 0x4023ad\n                error(0, err_num, format);\n                close(fd4);\n                char * path2 = g42; // 0x4023be\n                unlink(path2);\n                goto lab_0x40235a;\n            } else {\n                // 0x40229d\n                unlink(g42);\n                goto lab_0x40204c;\n            }\n        }\n    } else {\n        // 0x40200c\n        clearerr_unlocked(g41);\n        if ((int32_t)function_4055d0((int64_t)g41, 0, 0) < 0) {\n            goto lab_0x4021fe;\n        } else {\n            // 0x40202f\n            if (ftruncate(fileno(g41), 0) < 0) {\n                goto lab_0x4021fe;\n            } else {\n                goto lab_0x40204c;\n            }\n        }\n    }\n  lab_0x402167:\n    // 0x402167\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v74, 5));\n    v79 = v73;\n    v80 = v71;\n    v81 = v72;\n    v82 = 0;\n    goto lab_0x4020ed;\n  lab_0x4021fe:\n    // 0x4021fe\n    function_404a40(4, (int64_t)g42);\n    v28 = (int64_t)\"failed to rewind stream for %s\";\n    goto lab_0x4021d7;\n  lab_0x40235a:\n    // 0x40235a\n    free((int64_t *)g42);\n    g42 = NULL;\n    v22 = v35;\n    v34 = v33;\n    v30 = v29;\n    v32 = v31;\n    v27 = 0;\n    fd2 = v25;\n    v24 = v23;\n    goto lab_0x4020e4;\n  lab_0x4021d7:\n    // 0x4021d7\n    error(0, *__errno_location(), dcgettext(NULL, (char *)v28, 5));\n    v22 = v35;\n    v34 = v33;\n    v30 = v29;\n    v32 = v31;\n    v27 = 0;\n    fd2 = v25;\n    v24 = v23;\n    goto lab_0x4020e4;\n  lab_0x40204c:\n    // 0x40204c\n    v36 = (int64_t)g42;\n    stream = g41;\n    int64_t v90 = function_404cb0(v25, g53, (int64_t)g52); // 0x4020a5\n    int64_t v91 = v90; // 0x4020b0\n    int64_t v92 = 0; // 0x4020b0\n    v26 = 0;\n    if (v90 != 0) {\n        int64_t n = v91;\n        while (n != -1) {\n            // 0x402072\n            if (n != (int64_t)fwrite_unlocked((int64_t *)g53, 1, (int32_t)n, stream)) {\n                // 0x40221e\n                function_404b10(0, 3, v36);\n                v28 = (int64_t)\"%s: write error\";\n                goto lab_0x4021d7;\n            }\n            int64_t v93 = v92 + n; // 0x402092\n            int64_t v94 = function_404cb0(v25, g53, (int64_t)g52); // 0x4020a5\n            v91 = v94;\n            v92 = v93;\n            v26 = v93;\n            if (v94 == 0) {\n                goto lab_0x4020b2;\n            }\n            n = v91;\n        }\n        // 0x4021bb\n        function_404b10(0, 3, v23);\n        v28 = (int64_t)\"%s: read error\";\n        goto lab_0x4021d7;\n    } else {\n        goto lab_0x4020b2;\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "402430",
            "funcEndAddr": "40245b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x402430\n    int64_t v1; // 0x402430\n    __libc_start_main(0x401ce0, (int32_t)a4, (char **)&v1, (void (*)())0x414b00, (void (*)())0x414b60, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40245b",
            "funcStartAddr": "40245b",
            "funcEndAddr": "40247a",
            "decompiledFuncCode": "int64_t function_40245b(void) {\n    // 0x40245b\n    return &g33;\n}\n"
        },
        {
            "funcName": "function_40247a",
            "funcStartAddr": "40247a",
            "funcEndAddr": "4024b1",
            "decompiledFuncCode": "int64_t function_40247a(void) {\n    // 0x40247a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4024b1",
            "funcStartAddr": "4024b1",
            "funcEndAddr": "402508",
            "decompiledFuncCode": "int64_t function_4024b1(void) {\n    // 0x4024b1\n    if (g37 != 0) {\n        // 0x402507\n        int64_t result; // 0x4024b1\n        return result;\n    }\n    int64_t v1 = g38; // 0x4024e4\n    int64_t result2; // 0x4024f6\n    if (g38 >= ((int64_t)&g20 - (int64_t)&g19 >> 3) - 1) {\n        // 0x4024f6\n        result2 = function_40245b();\n        g37 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g20 - (int64_t)&g19 >> 3) - 1) {\n        // 0x4024e6\n        v1++;\n    }\n    // 0x4024da\n    g38 = v1;\n    // 0x4024f6\n    result2 = function_40245b();\n    g37 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_402508",
            "funcStartAddr": "402508",
            "funcEndAddr": "40250d",
            "decompiledFuncCode": "int64_t function_402508(void) {\n    // 0x402508\n    return function_40247a();\n}\n"
        },
        {
            "funcName": "function_402510",
            "funcStartAddr": "402510",
            "funcEndAddr": "4025ed",
            "decompiledFuncCode": "int64_t function_402510(int32_t a1, int32_t a2) {\n    int32_t n = g40; // 0x402510\n    if (a1 == 0) {\n        int32_t result = fwrite_unlocked(&g39, 1, n, g34); // 0x4025c1\n        g40 = 0;\n        return result;\n    }\n    int64_t v1 = a1;\n    int64_t v2 = n; // 0x402510\n    int64_t v3 = (int64_t)a2 - v1; // 0x402519\n    int64_t v4 = 0x2000 - v2; // 0x402523\n    int64_t v5; // 0x402510\n    int64_t v6; // 0x402510\n    int64_t v7; // 0x402510\n    if (v3 < v4) {\n        // 0x4025e0\n        v7 = v3 + v2;\n        v6 = v3;\n        v5 = v1;\n    } else {\n        int64_t v8 = v2 + (int64_t)&g39; // 0x402510\n        int64_t v9 = v3; // 0x40254d\n        int64_t v10 = v1; // 0x402561\n        v9 -= v4;\n        memcpy((int64_t *)v8, (int64_t *)v10, (int32_t)v4);\n        v10 += v4;\n        fwrite_unlocked(&g39, 1, 0x2000, g34);\n        g40 = 0;\n        v8 = &g39;\n        int64_t v11 = 0x2000; // 0x40258c\n        v7 = v9;\n        v6 = v9;\n        v5 = v10;\n        while (v9 >= 0x2000) {\n            // 0x402540\n            v9 -= v11;\n            memcpy((int64_t *)v8, (int64_t *)v10, (int32_t)v11);\n            v10 += v11;\n            fwrite_unlocked(&g39, 1, 0x2000, g34);\n            g40 = 0;\n            v8 = &g39;\n            v11 = 0x2000;\n            v7 = v9;\n            v6 = v9;\n            v5 = v10;\n        }\n    }\n    int64_t * dest_mem = memcpy(&g39, (int64_t *)v5, (int32_t)v6); // 0x40259c\n    g40 = v7;\n    return (int64_t)dest_mem;\n}\n"
        },
        {
            "funcName": "function_4025f0",
            "funcStartAddr": "4025f0",
            "funcEndAddr": "402b70",
            "decompiledFuncCode": "int64_t function_4025f0(int64_t fd, int64_t a2, uint64_t a3) {\n    int64_t v1 = g52;\n    char v2 = *(char *)g58; // 0x402617\n    uint64_t v3 = a3 % v1;\n    int64_t v4 = v1; // 0x40263e\n    int64_t v5 = a3; // 0x40263e\n    if (v3 != 0) {\n        int64_t offset = a3 - v3; // 0x402abf\n        int32_t v6 = lseek((int32_t)fd, (int32_t)offset, SEEK_SET); // 0x402ac7\n        v4 = v1;\n        v5 = offset;\n        if (v6 < 0) {\n            // 0x402ad5\n            function_404b10(0, 3, a2);\n            error(0, *__errno_location(), dcgettext(NULL, \"%s: seek failed\", 5));\n            v4 = g52;\n            v5 = offset;\n        }\n    }\n    int64_t fd2 = 0x100000000 * fd >> 32; // 0x40260f\n    int64_t v7 = fd2 & 0xffffffff; // 0x402652\n    int64_t v8 = function_404cb0(v7, g53, v4); // 0x402659\n    int128_t v9 = g52; // 0x40265e\n    int64_t v10 = v9; // 0x40265e\n    int64_t v11 = v5; // 0x402668\n    int64_t v12 = v8; // 0x402668\n    int64_t v13 = v10; // 0x402668\n    int64_t v14; // 0x4025f0\n    int64_t v15; // 0x4025f0\n    int64_t v16; // 0x4025f0\n    int64_t v17; // 0x4025f0\n    if (v8 != 0) {\n        goto lab_0x4026d6;\n    } else {\n        int32_t v18 = v9; // 0x4025f0\n        int64_t v19 = v5; // 0x402648\n        int64_t v20 = v10;\n        while (v19 != 0) {\n            int64_t v21 = v20; // 0x40268a\n            if (lseek((int32_t)fd2, -v18, SEEK_CUR) < 0) {\n                // 0x40268c\n                function_404b10(0, 3, a2);\n                error(0, *__errno_location(), dcgettext(NULL, \"%s: seek failed\", 5));\n                v21 = g52;\n            }\n            // 0x402648\n            v19 -= v21;\n            int64_t v22 = function_404cb0(v7, g53, v21); // 0x402659\n            int64_t v23 = g52;\n            v18 = g52;\n            v11 = v19;\n            v12 = v22;\n            v13 = v23;\n            if (v22 != 0) {\n                goto lab_0x4026d6;\n            }\n            v20 = v23;\n        }\n        // 0x402a90\n        v17 = 0;\n        v15 = 0;\n        v16 = 0;\n        v14 = 0;\n        if (v20 == 0) {\n            goto lab_0x402965;\n        } else {\n            goto lab_0x4026ec;\n        }\n    }\n  lab_0x4026d6:;\n    int64_t v24 = v12; // 0x4026d9\n    int64_t v25 = v11; // 0x4026d9\n    v16 = v12;\n    v14 = v11;\n    if (v12 == v13) {\n        goto lab_0x402965;\n    } else {\n        goto lab_0x4026e2;\n    }\n  lab_0x4026ec:;\n    char * str2 = (char *)(g58 + 1); // 0x402620\n    int64_t n = g54 - 1; // 0x40262f\n    int64_t v26 = g53 + v17; // 0x4026ff\n    int32_t v27 = 1; // 0x402713\n    int64_t v28 = v26; // 0x402713\n    int64_t v29 = g53; // 0x402713\n    int64_t v30 = v15; // 0x402713\n    int64_t v31 = (g55 == 0 ? 0 : 1 - g54) + v26; // 0x402713\n    int64_t v32; // 0x4025f0\n    int64_t v33; // 0x4025f0\n    int64_t v34; // 0x4025f0\n    int64_t v35; // 0x4025f0\n    int64_t v36; // 0x4025f0\n    int64_t v37; // 0x4025f0\n    int64_t v38; // 0x4025f0\n    int64_t v39; // 0x4025f0\n    int32_t v40; // 0x4025f0\n    int32_t v41; // 0x4025f0\n    while (true) {\n      lab_0x402718:\n        // 0x402718\n        v40 = v27;\n        v38 = v31;\n        v36 = v28;\n        v32 = v29;\n        v34 = v30;\n        v41 = v27;\n        v39 = v31;\n        v37 = v28;\n        v33 = v29;\n        v35 = v30;\n        if (g55 != 0) {\n            goto lab_0x4028b3;\n        } else {\n            goto lab_0x402721;\n        }\n    }\n  lab_0x402b1f:\n    // 0x402b1f\n    error(1, (int32_t)\"record too large\" ^ (int32_t)\"record too large\", dcgettext(NULL, \"record too large\", 5));\n    // 0x402b41\n    function_405590(1);\n    // UNREACHABLE\n  lab_0x4028b3:;\n    int64_t v42 = v39 - 1; // 0x4028b3\n    int32_t v43 = v41; // 0x4028ba\n    int64_t v44 = v37; // 0x4028ba\n    int64_t v45 = v33; // 0x4028ba\n    int64_t v46 = v35; // 0x4028ba\n    int64_t v47 = v42; // 0x4028ba\n    int32_t v48 = v41; // 0x4028ba\n    int64_t str = v39; // 0x4028ba\n    int64_t v49 = v37; // 0x4028ba\n    int64_t v50 = v33; // 0x4028ba\n    int64_t v51 = v35; // 0x4028ba\n    int64_t v52 = v42; // 0x4028ba\n    if (*(char *)v42 != v2) {\n        goto lab_0x4028b0;\n    } else {\n        goto lab_0x4028bc;\n    }\n  lab_0x402721:;\n    int64_t v53 = v32;\n    int64_t v54 = v38 - v53; // 0x40272a\n    int64_t v55 = 1 - v54; // 0x40272d\n    if (v55 > 1) {\n        // break -> 0x402b1f\n        goto lab_0x402b1f;\n    }\n    int64_t v56 = v34;\n    int64_t v57 = v36;\n    int32_t v58 = v40;\n    int64_t v59 = v53; // 0x40273a\n    int64_t v60; // 0x4025f0\n    int64_t v61; // 0x4025f0\n    int64_t v62; // 0x4025f0\n    int64_t v63; // 0x4025f0\n    int32_t v64; // 0x4025f0\n    if (v54 == 0) {\n        goto lab_0x40298f;\n    } else {\n        int64_t v65 = function_414120(&g47, v53, v54, v54 - 1, v55, &g43); // 0x402752\n        switch (v65) {\n            case -1: {\n                // 0x402988\n                v59 = g53;\n                goto lab_0x40298f;\n            }\n            case -2: {\n                // 0x402b46\n                error(1, (int32_t)\"error in regular expression search\" ^ (int32_t)\"error in regular expression search\", dcgettext(NULL, \"error in regular expression search\", 5));\n                return &g81;\n            }\n            default: {\n                int64_t v66 = *(int64_t *)g44; // 0x402779\n                g54 = *(int64_t *)g45 - v66;\n                v64 = v58;\n                v63 = v57;\n                v60 = g53;\n                v61 = v56;\n                v62 = v66 + g53;\n                goto lab_0x402794;\n            }\n        }\n    }\n  lab_0x4028b0:\n    // 0x4028b0\n    v41 = v43;\n    v39 = v47;\n    v37 = v44;\n    v33 = v45;\n    v35 = v46;\n    goto lab_0x4028b3;\n  lab_0x4028bc:;\n    int64_t v67 = v52;\n    int64_t v68 = v51;\n    int64_t v69 = v50;\n    int64_t v70 = v49;\n    int32_t v71 = v48;\n    v64 = v71;\n    v63 = v70;\n    v60 = v69;\n    v61 = v68;\n    v62 = v67;\n    int64_t v72; // 0x4025f0\n    int64_t v73; // 0x4025f0\n    int64_t v74; // 0x4025f0\n    int64_t v75; // 0x4025f0\n    int64_t v76; // 0x4025f0\n    int64_t v77; // 0x4025f0\n    int64_t v78; // 0x4025f0\n    int32_t v79; // 0x4025f0\n    int32_t v80; // 0x4025f0\n    if (n == 0) {\n        goto lab_0x402794;\n    } else {\n        // 0x4028c5\n        v43 = v71;\n        v44 = v70;\n        v45 = v69;\n        v46 = v68;\n        v47 = v67;\n        if (strncmp((char *)str, str2, (int32_t)n) != 0) {\n            goto lab_0x4028b0;\n        } else {\n            // 0x4028d9\n            v79 = v71;\n            v78 = v70;\n            v72 = v69;\n            v75 = v68;\n            v80 = v71;\n            v77 = v70;\n            v73 = v69;\n            v74 = v68;\n            v76 = v67;\n            if (v67 < v69) {\n                goto lab_0x40279d;\n            } else {\n                goto lab_0x4028e8;\n            }\n        }\n    }\n  lab_0x40298f:\n    // 0x40298f\n    v64 = v58;\n    v63 = v57;\n    v60 = v59;\n    v61 = v56;\n    v62 = v59 - 1;\n    goto lab_0x402794;\n  lab_0x402794:\n    // 0x402794\n    v79 = v64;\n    v78 = v63;\n    v72 = v60;\n    v75 = v61;\n    v80 = v64;\n    v77 = v63;\n    v73 = v60;\n    v74 = v61;\n    v76 = v62;\n    if (v62 >= v60) {\n        goto lab_0x4028e8;\n    } else {\n        goto lab_0x40279d;\n    }\n  lab_0x4028e8:;\n    int64_t v81 = v76;\n    int64_t v82 = v74;\n    int64_t v83 = v77;\n    int32_t v84 = v80;\n    int64_t v85; // 0x4025f0\n    int64_t v86; // 0x4025f0\n    int32_t v87; // 0x4025f0\n    if (g56 == 0) {\n        // 0x4029b0\n        function_402510((int32_t)v81, (int32_t)v83);\n        v87 = v84;\n        v86 = v81;\n        v85 = g53;\n    } else {\n        int64_t v88 = g54 + v81; // 0x402901\n        char v89 = (char)v84 ^ 1 | (char)(v83 != v88); // 0x40290d\n        if (v89 != 0) {\n            // 0x402a18\n            function_402510((int32_t)v88, (int32_t)v83);\n            v87 = 0;\n            v86 = v88;\n            v85 = g53;\n        } else {\n            // 0x402919\n            v87 = v89;\n            v86 = v88;\n            v85 = v73;\n        }\n    }\n    int64_t v90 = v85;\n    int64_t v91 = v86;\n    int32_t v92 = v87;\n    v40 = v92;\n    v38 = v81;\n    v36 = v91;\n    v32 = v90;\n    v34 = v82;\n    if (g55 == 0) {\n        goto lab_0x402721;\n    } else {\n        // 0x40292f\n        v27 = v92;\n        v28 = v91;\n        v29 = v90;\n        v30 = v82;\n        v31 = v81 + 1 - g54;\n        goto lab_0x402718;\n    }\n  lab_0x40279d:;\n    int64_t v93 = v75;\n    int64_t v94 = v72;\n    int64_t v95 = v78;\n    if (v93 == 0) {\n        // 0x402aa0\n        function_402510((int32_t)v94, (int32_t)v95);\n        return 1;\n    }\n    int32_t v96 = v79;\n    int64_t v97 = g52; // 0x4027a6\n    uint64_t v98 = v95 - v94; // 0x4027ad\n    int64_t v99 = v97; // 0x4027b3\n    if (v98 > v97) {\n        int64_t v100 = g55; // 0x4027b5\n        int64_t v101 = g51; // 0x4027c0\n        g52 = 2 * v97;\n        int64_t v102 = (4 * v97 | 2) + v100; // 0x4027d7\n        g51 = v102;\n        int64_t v103 = v101; // 0x4027ea\n        if (v102 < v101) {\n            // 0x402b41\n            function_405590(v103);\n            // UNREACHABLE\n        }\n        int64_t v104 = g55 != 0 ? v100 : 1; // 0x4027dc\n        g53 = function_4053a0(v94 - v104, v102) + v104;\n        v99 = g52;\n    }\n    uint64_t v105 = v99;\n    int64_t v106; // 0x4025f0\n    if (v93 < v105) {\n        // 0x4029a0\n        g52 = v93;\n        v106 = 0;\n    } else {\n        // 0x402815\n        v106 = v93 - v105;\n    }\n    int64_t offset2 = v106;\n    if (lseek((int32_t)fd2, (int32_t)offset2, SEEK_SET) < 0) {\n        // 0x4029d0\n        function_404b10(0, 3, a2);\n        error(0, *__errno_location(), dcgettext(NULL, \"%s: seek failed\", 5));\n    }\n    int64_t v107 = g52; // 0x402836\n    int64_t v108 = g53 + v107;\n    int64_t * dest_mem = memmove((int64_t *)v108, (int64_t *)g53, (int32_t)v98); // 0x402850\n    if (function_404cb0(v7, g53, v107) != (int64_t)g52) {\n        goto lab_0x402a41_2;\n    }\n    int64_t v109 = v108 + v98; // 0x40284d\n    int64_t v110 = g55 == 0 ? v109 : (int64_t)dest_mem; // 0x40286a\n    int64_t v111 = g53; // 0x402896\n    v40 = v96;\n    v38 = v110;\n    v36 = v109;\n    v32 = v111;\n    v34 = offset2;\n    if (g55 == 0) {\n        goto lab_0x402721;\n    } else {\n        int64_t v112 = v110 - 1; // 0x4028a6\n        v43 = v96;\n        v44 = v109;\n        v45 = v111;\n        v46 = offset2;\n        v47 = v112;\n        v48 = v96;\n        str = v110;\n        v49 = v109;\n        v50 = v111;\n        v51 = offset2;\n        v52 = v112;\n        if (*(char *)v112 == v2) {\n            goto lab_0x4028bc;\n        } else {\n            goto lab_0x4028b0;\n        }\n    }\n  lab_0x402965:;\n    int64_t v113 = v14; // 0x4025f0\n    int64_t v114 = function_404cb0(v7, g53, v16); // 0x402973\n    v24 = v16;\n    v25 = v113;\n    while (v114 != 0) {\n        if (v114 == -1) {\n            goto lab_0x402a41_2;\n        }\n        int64_t v115 = v114 + v113; // 0x402952\n        v17 = v114;\n        v15 = v115;\n        int64_t v116 = v114; // 0x40295f\n        v113 = v115;\n        if (v114 != (int64_t)g52) {\n            goto lab_0x4026ec;\n        }\n        v114 = function_404cb0(v7, g53, v116);\n        v24 = v116;\n        v25 = v113;\n    }\n    goto lab_0x4026e2;\n  lab_0x4026e2:\n    // 0x4026e2\n    v17 = v24;\n    v15 = v25;\n    if (v24 == -1) {\n      lab_0x402a41_2:\n        // 0x402a41\n        function_404b10(0, 3, a2);\n        error(0, *__errno_location(), dcgettext(NULL, \"%s: read error\", 5));\n        return (int32_t)&g81 ^ (int32_t)&g81;\n    }\n    goto lab_0x4026ec;\n}\n"
        },
        {
            "funcName": "function_402b70",
            "funcStartAddr": "402b70",
            "funcEndAddr": "402ecd",
            "decompiledFuncCode": "int64_t function_402b70(int32_t status) {\n    // 0x402b70\n    if (status != 0) {\n        // 0x402b8a\n        __fprintf_chk(g36, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x402baf\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x402bb6\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]... [FILE]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Write each FILE to standard output, last line first.\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"\\nWith no FILE, or when FILE is -, read standard input.\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"  -b, --before             attach the separator before instead of after\\n  -r, --regex              interpret the separator as a regular expression\\n  -s, --separator=STRING   use STRING as the separator instead of newline\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g34);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g34);\n    int64_t v1 = &g1; // bp-136, 0x402ca6\n    bool v2; // 0x402b70\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x402d30\n    int64_t v6 = *(int64_t *)v5; // 0x402d34\n    int64_t v7 = 4; // 0x402d3a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"tac\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x402d46\n        char v11 = *(char *)v9; // 0x402d46\n        char v12 = v11; // 0x402d46\n        bool v13 = false; // 0x402d46\n        while (v10 == v11) {\n            // 0x402d3c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x402d46\n            int64_t v15 = v8 + v3; // 0x402d46\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x402d52\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 4;\n    }\n    // 0x402d52\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x402e64;\n        } else {\n            // 0x402e4e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402ea3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402db4;\n            } else {\n                goto lab_0x402e64;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x402db4;\n        } else {\n            // 0x402d9a\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x402ea3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x402db4;\n            } else {\n                goto lab_0x402db4;\n            }\n        }\n    }\n  lab_0x402e64:\n    // 0x402e64\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402df4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402baf\n    exit(status);\n    // UNREACHABLE\n  lab_0x402db4:\n    // 0x402db4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x402df4\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x402baf\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402ed0",
            "funcStartAddr": "402ed0",
            "funcEndAddr": "402ed8",
            "decompiledFuncCode": "int64_t function_402ed0(int64_t a1) {\n    // 0x402ed0\n    g60 = a1;\n    int64_t result; // 0x402ed0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ee0",
            "funcStartAddr": "402ee0",
            "funcEndAddr": "402ee8",
            "decompiledFuncCode": "int64_t function_402ee0(int64_t a1) {\n    // 0x402ee0\n    g59 = a1;\n    int64_t result; // 0x402ee0\n    return result;\n}\n"
        },
        {
            "funcName": "function_402ef0",
            "funcStartAddr": "402ef0",
            "funcEndAddr": "402f8e",
            "decompiledFuncCode": "int64_t function_402ef0(void) {\n    // 0x402ef0\n    int32_t * err_num; // 0x402f06\n    if ((int32_t)function_4141c0((int64_t)g34) == 0) {\n        goto lab_0x402f1c;\n    } else {\n        // 0x402f06\n        err_num = __errno_location();\n        if (g59 == 0) {\n            goto lab_0x402f33;\n        } else {\n            // 0x402f17\n            if (*err_num != 32) {\n                goto lab_0x402f33;\n            } else {\n                goto lab_0x402f1c;\n            }\n        }\n    }\n  lab_0x402f1c:;\n    int64_t result = function_4141c0((int64_t)g36); // 0x402f23\n    if ((int32_t)result == 0) {\n        // 0x402f2c\n        return result;\n    }\n    // 0x402f6e\n    _exit(g24);\n    // UNREACHABLE\n  lab_0x402f33:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x402f3f\n    if (g60 == 0) {\n        // 0x402f79\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x402f53\n        error(0, *err_num, \"%s: %s\", (char *)function_404ae0((int64_t)g60), v1);\n    }\n    // 0x402f6e\n    _exit(g24);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402f90",
            "funcStartAddr": "402f90",
            "funcEndAddr": "403069",
            "decompiledFuncCode": "int64_t function_402f90(int64_t a1, char * a2, int32_t a3) {\n    int64_t v1 = (int64_t)a2;\n    int64_t v2 = function_414220(a1, v1); // 0x402fa8\n    int64_t v3 = function_414280(v2); // 0x402fb3\n    int64_t v4 = 0; // 0x402fc7\n    if (v3 != 0) {\n        // 0x402fc9\n        v4 = *(char *)(v2 - 1 + v3) != 47;\n    }\n    char * str = a2; // 0x402fe0\n    int64_t v5 = v1; // 0x402fe0\n    int64_t v6 = v1; // 0x402fe0\n    int64_t v7; // 0x402f90\n    if ((char)v7 == 47) {\n        v6++;\n        char * v8 = (char *)v6;\n        str = v8;\n        v5 = v6;\n        while (*v8 == 47) {\n            // 0x403058\n            v6++;\n            v8 = (char *)v6;\n            str = v8;\n            v5 = v6;\n        }\n    }\n    int64_t v9 = v2 - a1 + v3; // 0x402fc1\n    int32_t len = strlen(str); // 0x402fe5\n    int64_t * mem = malloc(len + (int32_t)(v9 + 1 + v4)); // 0x402ff5\n    if (mem == NULL) {\n        // 0x403041\n        return (int64_t)mem;\n    }\n    int64_t * v10 = mempcpy(mem, (int64_t *)a1, (int32_t)v9); // 0x40300b\n    *(char *)v10 = 47;\n    int64_t v11 = v4 + (int64_t)v10; // 0x403017\n    if (a3 != 0) {\n        // 0x403020\n        *(int64_t *)(int64_t)a3 = v11 - (int64_t)((char)v7 == 47);\n    }\n    // 0x403033\n    *(char *)mempcpy((int64_t *)v11, (int64_t *)v5, len) = 0;\n    // 0x403041\n    return (int64_t)mem;\n}\n"
        },
        {
            "funcName": "function_403070",
            "funcStartAddr": "403070",
            "funcEndAddr": "403109",
            "decompiledFuncCode": "int64_t function_403070(int64_t str) {\n    // 0x403070\n    if (str == 0) {\n        // 0x4030e9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g36);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40307e\n    int64_t result = (int64_t)found_char_pos; // 0x40307e\n    if (found_char_pos == NULL) {\n        // 0x4030d9\n        g61 = str;\n        g35 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x403088\n    if (v1 - str < 7) {\n        // 0x4030d9\n        g61 = str;\n        g35 = str;\n        return result;\n    }\n    // 0x403098\n    bool v2; // 0x403070\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x403070\n    int64_t v5 = result - 6; // 0x403070\n    int64_t v6 = 7; // 0x4030a6\n    unsigned char v7 = *(char *)v5; // 0x4030a6\n    char v8 = *(char *)v4; // 0x4030a6\n    char v9 = v8; // 0x4030a6\n    bool v10 = false; // 0x4030a6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x4030b0\n    int64_t v13 = v1; // 0x4030b0\n    int64_t v14 = 3; // 0x4030b0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4030d9\n        g61 = str;\n        g35 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4030c2\n    char v16 = *(char *)v12; // 0x4030c2\n    char v17 = v16; // 0x4030c2\n    bool v18 = false; // 0x4030c2\n    while (v15 == v16) {\n        // 0x4030b2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4030cc\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4030ce\n        v20 = result + 4;\n        g33 = v20;\n    }\n    // 0x4030d9\n    g61 = v20;\n    g35 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403110",
            "funcStartAddr": "403110",
            "funcEndAddr": "403202",
            "decompiledFuncCode": "int64_t function_403110(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x403124\n    int64_t result = (int64_t)v1; // 0x403124\n    if (result != a1) {\n        // 0x403131\n        return result;\n    }\n    int64_t v2 = function_414380(); // 0x403140\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4031f6\n    if (v3 == 85) {\n        // 0x403150\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4031e8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n            return result2;\n        }\n        char v4 = *v1; // 0x40317e\n        int64_t result3 = v4 != 96 ? (int64_t)&g6 : (int64_t)&g9; // 0x40318b\n        // 0x403131\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4031e8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g10 : (int64_t)&g5;\n        return result2;\n    }\n    char v5 = *v1; // 0x4031cd\n    int64_t result4 = v5 != 96 ? (int64_t)&g7 : (int64_t)&g8; // 0x4031da\n    // 0x403131\n    return result4;\n}\n"
        },
        {
            "funcName": "function_403210",
            "funcStartAddr": "403210",
            "funcEndAddr": "403267",
            "decompiledFuncCode": "int64_t function_403210(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x403210\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x403258\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_403267",
            "funcStartAddr": "403267",
            "funcEndAddr": "404431",
            "decompiledFuncCode": "int64_t function_403267(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x4032b1\n    int64_t v3 = 0; // 0x4032b1\n    int64_t v4; // 0x403267\n    int64_t v5; // 0x403267\n    int64_t v6; // 0x403267\n    int64_t v7; // 0x403267\n    int64_t v8; // 0x403267\n    int64_t v9; // 0x403267\n    int64_t v10; // 0x403267\n    int64_t v11; // 0x403267\n    int64_t v12; // 0x403267\n    int64_t v13; // 0x403267\n    int64_t v14; // 0x403267\n    int64_t v15; // 0x403267\n    int64_t v16; // 0x403267\n    int64_t v17; // 0x403267\n    int64_t v18; // 0x403267\n    int64_t result; // 0x403267\n    int64_t v19; // 0x403267\n    int32_t wc; // bp+132, 0x403267\n    int64_t ps; // bp+136, 0x403267\n    char v20; // 0x403820\n    int64_t v21; // 0x403820\n    int64_t v22; // 0x403bc8\n    int64_t v23; // 0x403267\n    int64_t v24; // 0x403be7\n    int32_t v25; // 0x403267\n    while (true) {\n      lab_0x4032b8_2:\n        // 0x4032b8\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x403267\n        int64_t v27; // 0x4032ec\n        while (true) {\n          lab_0x4032b8:\n            // 0x4032b8\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4032c3\n            if (v15 == -1) {\n                // 0x4032c5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4032d3\n            if (v28) {\n                // break (via goto) -> 0x403a38\n                goto lab_0x403a38;\n            }\n            // 0x4032dc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g79 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4038cb\n                    if (v25 % 2 == 0) {\n                        goto lab_0x403411;\n                    }\n                    // 0x403ced\n                    v26 = v5 + 1;\n                    goto lab_0x4032b8;\n                }\n                case 7: {\n                    goto lab_0x403411;\n                }\n                case 8: {\n                    goto lab_0x403411;\n                }\n                case 9: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x403411;\n                }\n                case 12: {\n                    goto lab_0x403411;\n                }\n                case 13: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x4033dd;\n                }\n                case 36: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x403411;\n                }\n                case 38: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x403411;\n                }\n                case 44: {\n                    goto lab_0x403411;\n                }\n                case 45: {\n                    goto lab_0x403411;\n                }\n                case 46: {\n                    goto lab_0x403411;\n                }\n                case 47: {\n                    goto lab_0x403411;\n                }\n                case 48: {\n                    goto lab_0x403411;\n                }\n                case 49: {\n                    goto lab_0x403411;\n                }\n                case 50: {\n                    goto lab_0x403411;\n                }\n                case 51: {\n                    goto lab_0x403411;\n                }\n                case 52: {\n                    goto lab_0x403411;\n                }\n                case 53: {\n                    goto lab_0x403411;\n                }\n                case 54: {\n                    goto lab_0x403411;\n                }\n                case 55: {\n                    goto lab_0x403411;\n                }\n                case 56: {\n                    goto lab_0x403411;\n                }\n                case 57: {\n                    goto lab_0x403411;\n                }\n                case 58: {\n                    goto lab_0x403411;\n                }\n                case 59: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x403411;\n                }\n                case 66: {\n                    goto lab_0x403411;\n                }\n                case 67: {\n                    goto lab_0x403411;\n                }\n                case 68: {\n                    goto lab_0x403411;\n                }\n                case 69: {\n                    goto lab_0x403411;\n                }\n                case 70: {\n                    goto lab_0x403411;\n                }\n                case 71: {\n                    goto lab_0x403411;\n                }\n                case 72: {\n                    goto lab_0x403411;\n                }\n                case 73: {\n                    goto lab_0x403411;\n                }\n                case 74: {\n                    goto lab_0x403411;\n                }\n                case 75: {\n                    goto lab_0x403411;\n                }\n                case 76: {\n                    goto lab_0x403411;\n                }\n                case 77: {\n                    goto lab_0x403411;\n                }\n                case 78: {\n                    goto lab_0x403411;\n                }\n                case 79: {\n                    goto lab_0x403411;\n                }\n                case 80: {\n                    goto lab_0x403411;\n                }\n                case 81: {\n                    goto lab_0x403411;\n                }\n                case 82: {\n                    goto lab_0x403411;\n                }\n                case 83: {\n                    goto lab_0x403411;\n                }\n                case 84: {\n                    goto lab_0x403411;\n                }\n                case 85: {\n                    goto lab_0x403411;\n                }\n                case 86: {\n                    goto lab_0x403411;\n                }\n                case 87: {\n                    goto lab_0x403411;\n                }\n                case 88: {\n                    goto lab_0x403411;\n                }\n                case 89: {\n                    goto lab_0x403411;\n                }\n                case 90: {\n                    goto lab_0x403411;\n                }\n                case 91: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x403411;\n                }\n                case 94: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x403411;\n                }\n                case 96: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x403411;\n                }\n                case 98: {\n                    goto lab_0x403411;\n                }\n                case 99: {\n                    goto lab_0x403411;\n                }\n                case 100: {\n                    goto lab_0x403411;\n                }\n                case 101: {\n                    goto lab_0x403411;\n                }\n                case 102: {\n                    goto lab_0x403411;\n                }\n                case 103: {\n                    goto lab_0x403411;\n                }\n                case 104: {\n                    goto lab_0x403411;\n                }\n                case 105: {\n                    goto lab_0x403411;\n                }\n                case 106: {\n                    goto lab_0x403411;\n                }\n                case 107: {\n                    goto lab_0x403411;\n                }\n                case 108: {\n                    goto lab_0x403411;\n                }\n                case 109: {\n                    goto lab_0x403411;\n                }\n                case 110: {\n                    goto lab_0x403411;\n                }\n                case 111: {\n                    goto lab_0x403411;\n                }\n                case 112: {\n                    goto lab_0x403411;\n                }\n                case 113: {\n                    goto lab_0x403411;\n                }\n                case 114: {\n                    goto lab_0x403411;\n                }\n                case 115: {\n                    goto lab_0x403411;\n                }\n                case 116: {\n                    goto lab_0x403411;\n                }\n                case 117: {\n                    goto lab_0x403411;\n                }\n                case 118: {\n                    goto lab_0x403411;\n                }\n                case 119: {\n                    goto lab_0x403411;\n                }\n                case 120: {\n                    goto lab_0x403411;\n                }\n                case 121: {\n                    goto lab_0x403411;\n                }\n                case 122: {\n                    goto lab_0x403411;\n                }\n                case 123: {\n                    goto lab_0x4033b5;\n                }\n                case 124: {\n                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x4033b5;\n                }\n                case 126: {\n                    goto lab_0x4033dd;\n                }\n                default: {\n                    goto lab_0x4037b5;\n                }\n            }\n        }\n      lab_0x4037b5:\n        if (v23 != 1) {\n            // 0x403b20\n            ps = 0;\n            int64_t len = v15; // 0x403b30\n            if (v15 == -1) {\n                // 0x403b32\n                len = strlen((char *)str);\n            }\n            // 0x403b5e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x403bbf:\n                // 0x403bbf\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x403bc4\n                int64_t v30 = v29 + str;\n                v24 = function_406400(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40413a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40413a_2;\n                    }\n                    case -2: {\n                        // 0x40421d\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x404257\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40425a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x404267\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x404260\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40413a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40413a_2;\n                    }\n                    case 1: {\n                        goto lab_0x403b90;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x403c3c\n                        char v34 = *(char *)v33; // 0x403c4d\n                        unsigned char v35; // 0x403267\n                        if (v34 < 125) {\n                            // 0x403c58\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x403c6f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x403c40\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x403c4d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x403c58\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x403c6f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x403c40\n                            v33++;\n                        }\n                        goto lab_0x403b90;\n                    }\n                }\n            }\n            goto lab_0x40413a_2;\n        } else {\n            // 0x403804\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x403411;\n        }\n    }\n  lab_0x403a38:\n    // 0x403a38\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40433a\n        if (v8 > result) {\n            // 0x404343\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x403667\n        return result;\n    }\n    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x403411:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x403420\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40362a_2;\n        }\n    }\n    int64_t v39 = result; // 0x403521\n    char v40 = v20; // 0x403521\n    int64_t v41 = v38; // 0x403521\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x403521\n    int64_t v43 = v36; // 0x403521\n    goto lab_0x40349d;\n  lab_0x40362a_2:\n    // 0x403667\n    return function_403210(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40413a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x403411;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x403d0e\n        int64_t v50 = v5 + 1; // 0x403df1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x403df8\n        char v52 = v20; // 0x403df8\n        int64_t v53 = result; // 0x403df8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x403dc1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x403dc5\n            int64_t v56 = v54 + 1; // 0x403dca\n            int64_t v57 = v51 + 1; // 0x403df1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x403dbc\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x403dc1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x403dc5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40349d;\n    }\n  lab_0x403b90:\n    // 0x403b90\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x403baf\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x403bb2\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40413a\n        goto lab_0x40413a_2;\n    }\n    goto lab_0x403bbf;\n  lab_0x4033dd:\n    // 0x4033dd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40362a_2;\n    }\n    goto lab_0x403411;\n  lab_0x4033b5:;\n    bool v60 = v15 == 1; // 0x4033c0\n    if (v15 == -1) {\n        // 0x4033c2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4033ce\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x403411;\n    } else {\n        goto lab_0x4033dd;\n    }\n  lab_0x40349d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x4034a2\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x4034a6\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x4032b8_2;\n}\n"
        },
        {
            "funcName": "function_404440",
            "funcStartAddr": "404440",
            "funcEndAddr": "4045de",
            "decompiledFuncCode": "int64_t function_404440(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x404442\n    int32_t * v3 = __errno_location(); // 0x40445c\n    int64_t v4 = (int64_t)g26; // 0x404461\n    int32_t v5 = *v3; // 0x40446b\n    int64_t v6 = v4; // 0x404481\n    if (v2 >= (int64_t)*(int32_t *)&g29) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4045d9\n            function_405590(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x404490\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x404497\n        int64_t v9; // 0x404440\n        if (g26 == &g27) {\n            int64_t v10 = function_4053a0(0, v8); // 0x4045ba\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g27); // 0x4045bf\n            *(int64_t *)&g26 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4053a0(v4, v8); // 0x4044ab\n            *(int64_t *)&g26 = v12;\n            v9 = v12;\n        }\n        // 0x4044ba\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g29; // 0x4044ba\n        int32_t v14 = v7; // 0x4044c1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g29 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4044f1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4044fb\n    int64_t * v17 = (int64_t *)v15; // 0x4044fe\n    uint64_t v18 = *v17; // 0x4044fe\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x404501\n    int64_t result = *v19; // 0x404501\n    int64_t v20; // 0x404440\n    uint64_t v21 = function_403210(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x404524\n    if (v18 > v21) {\n        // 0x40459b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x404537\n    *v17 = v22;\n    if (result != (int64_t)&g62) {\n        // 0x404547\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_405340(v22); // 0x404561\n    *v19 = result2;\n    int64_t v23; // 0x404440\n    function_403210(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40459b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4045e0",
            "funcStartAddr": "4045e0",
            "funcEndAddr": "404614",
            "decompiledFuncCode": "int64_t function_4045e0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4045e7\n    int64_t result = function_405540(a1 == 0 ? (int64_t)&g63 : a1, 56); // 0x404606\n    return result;\n}\n"
        },
        {
            "funcName": "function_404620",
            "funcStartAddr": "404620",
            "funcEndAddr": "40462f",
            "decompiledFuncCode": "int64_t function_404620(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g63 : a1); // 0x40462c\n    return result;\n}\n"
        },
        {
            "funcName": "function_404630",
            "funcStartAddr": "404630",
            "funcEndAddr": "40463f",
            "decompiledFuncCode": "int64_t function_404630(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g63 : a1; // 0x404638\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g63;\n}\n"
        },
        {
            "funcName": "function_404640",
            "funcStartAddr": "404640",
            "funcEndAddr": "404673",
            "decompiledFuncCode": "int64_t function_404640(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g63 + 8 : a1 + 8; // 0x404659\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40465e\n    uint32_t v3 = *v2; // 0x40465e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x404662\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_404680",
            "funcStartAddr": "404680",
            "funcEndAddr": "404693",
            "decompiledFuncCode": "int64_t function_404680(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g63 + 4 : a1 + 4); // 0x40468c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4046a0",
            "funcStartAddr": "4046a0",
            "funcEndAddr": "4046cb",
            "decompiledFuncCode": "int64_t function_4046a0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g63 : a1; // 0x4046a8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4046c5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4046bc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g63;\n}\n"
        },
        {
            "funcName": "function_4046d0",
            "funcStartAddr": "4046d0",
            "funcEndAddr": "404742",
            "decompiledFuncCode": "int64_t function_4046d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g63 : a5; // 0x4046f2\n    int32_t * v2 = __errno_location(); // 0x4046fb\n    uint32_t v3 = *(int32_t *)v1; // 0x40471b\n    int64_t result = function_403210(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40472a\n    return result;\n}\n"
        },
        {
            "funcName": "function_404750",
            "funcStartAddr": "404750",
            "funcEndAddr": "404831",
            "decompiledFuncCode": "int64_t function_404750(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g63 : a4; // 0x404772\n    int32_t * v2 = __errno_location(); // 0x404778\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x404797\n    int32_t * v4 = (int32_t *)v1; // 0x40479a\n    int64_t v5 = function_403210(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4047b5\n    int64_t v6 = v5 + 1; // 0x4047ba\n    int64_t result = function_405340(v6); // 0x4047cf\n    function_403210(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x404814\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40481d\n    return result;\n}\n"
        },
        {
            "funcName": "function_404840",
            "funcStartAddr": "404840",
            "funcEndAddr": "40484a",
            "decompiledFuncCode": "int64_t function_404840(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404840\n    return function_404750(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_404850",
            "funcStartAddr": "404850",
            "funcEndAddr": "4048e5",
            "decompiledFuncCode": "int64_t function_404850(void) {\n    uint32_t v1 = *(int32_t *)&g29; // 0x404850\n    int64_t v2 = v1; // 0x404850\n    int64_t v3 = v2; // 0x404864\n    if (v1 >= 2) {\n        int64_t v4 = &g29;\n        int64_t v5 = v4 + 16; // 0x404883\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g81;\n        while (v5 != (int64_t)g26 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x404880\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g81;\n        }\n    }\n    int64_t v6 = v3; // 0x40489d\n    if (g27 != 0x61d500) {\n        // 0x40489f\n        free((int64_t *)g27);\n        g27 = 256;\n        *(int64_t *)&g28 = (int64_t)&g62;\n        v6 = &g81;\n    }\n    int64_t result = v6; // 0x4048c1\n    if (g26 != &g27) {\n        // 0x4048c3\n        free(g26);\n        *(int64_t *)&g26 = (int64_t)&g27;\n        result = &g81;\n    }\n    // 0x4048d6\n    *(int32_t *)&g29 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4048f0",
            "funcStartAddr": "4048f0",
            "funcEndAddr": "404901",
            "decompiledFuncCode": "int64_t function_4048f0(void) {\n    // 0x4048f0\n    int64_t v1; // 0x4048f0\n    return function_404440(v1, v1, -1, (int64_t *)&g63);\n}\n"
        },
        {
            "funcName": "function_404910",
            "funcStartAddr": "404910",
            "funcEndAddr": "40491a",
            "decompiledFuncCode": "int64_t function_404910(void) {\n    // 0x404910\n    int64_t v1; // 0x404910\n    return function_404440(v1, v1, v1, (int64_t *)&g63);\n}\n"
        },
        {
            "funcName": "function_404920",
            "funcStartAddr": "404920",
            "funcEndAddr": "404936",
            "decompiledFuncCode": "int64_t function_404920(int64_t a1) {\n    // 0x404920\n    return function_404440(0, a1, -1, (int64_t *)&g63);\n}\n"
        },
        {
            "funcName": "function_404940",
            "funcStartAddr": "404940",
            "funcEndAddr": "404952",
            "decompiledFuncCode": "int64_t function_404940(int64_t a1, int64_t a2) {\n    // 0x404940\n    return function_404440(0, a1, a2, (int64_t *)&g63);\n}\n"
        },
        {
            "funcName": "function_404960",
            "funcStartAddr": "404960",
            "funcEndAddr": "4049c8",
            "decompiledFuncCode": "int64_t function_404960(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404970\n    return function_404440((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4049d0",
            "funcStartAddr": "4049d0",
            "funcEndAddr": "404a34",
            "decompiledFuncCode": "int64_t function_4049d0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4049e0\n    return function_404440((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_404a40",
            "funcStartAddr": "404a40",
            "funcEndAddr": "404a4c",
            "decompiledFuncCode": "int64_t function_404a40(int64_t a1, int64_t a2) {\n    // 0x404a40\n    return function_404960(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_404a50",
            "funcStartAddr": "404a50",
            "funcEndAddr": "404a5f",
            "decompiledFuncCode": "int64_t function_404a50(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404a50\n    return function_4049d0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_404a60",
            "funcStartAddr": "404a60",
            "funcEndAddr": "404ad0",
            "decompiledFuncCode": "int64_t function_404a60(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g63); // 0x404a6d\n    int128_t v2 = __asm_movdqa(g64); // 0x404a75\n    int128_t v3 = __asm_movdqa(g65); // 0x404a7d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x404a92\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x404aa8\n    uint32_t v6 = *v5; // 0x404aa8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x404aad\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_404440(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_404ad0",
            "funcStartAddr": "404ad0",
            "funcEndAddr": "404add",
            "decompiledFuncCode": "int64_t function_404ad0(int64_t a1, int64_t a2) {\n    // 0x404ad0\n    return function_404a60(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "404af1",
            "decompiledFuncCode": "int64_t function_404ae0(int64_t a1) {\n    // 0x404ae0\n    return function_404a60(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_404b00",
            "funcStartAddr": "404b00",
            "funcEndAddr": "404b0a",
            "decompiledFuncCode": "int64_t function_404b00(void) {\n    // 0x404b00\n    int64_t v1; // 0x404b00\n    return function_404a60(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_404b10",
            "funcStartAddr": "404b10",
            "funcEndAddr": "404b7e",
            "decompiledFuncCode": "int64_t function_404b10(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x404b2a\n    return function_404440((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_404b80",
            "funcStartAddr": "404b80",
            "funcEndAddr": "404bec",
            "decompiledFuncCode": "int64_t function_404b80(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g63); // 0x404b87\n    int128_t v2 = __asm_movdqa(g64); // 0x404b8f\n    int128_t v3 = __asm_movdqa(g65); // 0x404b97\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x404bb9\n    if (a2 == 0 || a3 == 0) {\n        // 0x404be7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x404bca\n    return function_404440(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_404bf0",
            "funcStartAddr": "404bf0",
            "funcEndAddr": "404bf9",
            "decompiledFuncCode": "int64_t function_404bf0(void) {\n    // 0x404bf0\n    int64_t v1; // 0x404bf0\n    return function_404b80(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_404c00",
            "funcStartAddr": "404c00",
            "funcEndAddr": "404c17",
            "decompiledFuncCode": "int64_t function_404c00(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404c00\n    return function_404b80(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_404c20",
            "funcStartAddr": "404c20",
            "funcEndAddr": "404c33",
            "decompiledFuncCode": "int64_t function_404c20(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x404c20\n    return function_404b80(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_404c40",
            "funcStartAddr": "404c40",
            "funcEndAddr": "404c4a",
            "decompiledFuncCode": "int64_t function_404c40(void) {\n    // 0x404c40\n    int64_t v1; // 0x404c40\n    return function_404440(v1, v1, v1, &g25);\n}\n"
        },
        {
            "funcName": "function_404c50",
            "funcStartAddr": "404c50",
            "funcEndAddr": "404c62",
            "decompiledFuncCode": "int64_t function_404c50(int64_t a1, int64_t a2) {\n    // 0x404c50\n    return function_404440(0, a1, a2, &g25);\n}\n"
        },
        {
            "funcName": "function_404c70",
            "funcStartAddr": "404c70",
            "funcEndAddr": "404c81",
            "decompiledFuncCode": "int64_t function_404c70(void) {\n    // 0x404c70\n    int64_t v1; // 0x404c70\n    return function_404440(v1, v1, -1, &g25);\n}\n"
        },
        {
            "funcName": "function_404c90",
            "funcStartAddr": "404c90",
            "funcEndAddr": "404ca6",
            "decompiledFuncCode": "int64_t function_404c90(int64_t a1) {\n    // 0x404c90\n    return function_404440(0, a1, -1, &g25);\n}\n"
        },
        {
            "funcName": "function_404cb0",
            "funcStartAddr": "404cb0",
            "funcEndAddr": "404d0e",
            "decompiledFuncCode": "int64_t function_404cb0(int64_t fd, int64_t buf, int64_t nbyte) {\n    int32_t result = read((int32_t)fd, (int64_t *)buf, (int32_t)nbyte); // 0x404cd1\n    while (result < 0) {\n        // 0x404cde\n        if (*__errno_location() != 4) {\n            // break -> 0x404cea\n            break;\n        }\n        result = read((int32_t)fd, (int64_t *)buf, (int32_t)nbyte);\n    }\n    return result;\n}\n"
        },
        {
            "funcName": "function_404d10",
            "funcStartAddr": "404d10",
            "funcEndAddr": "404d24",
            "decompiledFuncCode": "int64_t function_404d10(void) {\n    // 0x404d10\n    int64_t template; // 0x404d10\n    return function_404d50((int64_t)mkstemp((char *)template));\n}\n"
        },
        {
            "funcName": "function_404d30",
            "funcStartAddr": "404d30",
            "funcEndAddr": "404d42",
            "decompiledFuncCode": "int64_t function_404d30(int64_t a1, int64_t a2) {\n    uint32_t v1 = mkostemp((char *)a1, (int32_t)a2); // 0x404d33\n    return function_4142b0((int64_t)v1);\n}\n"
        },
        {
            "funcName": "function_404d50",
            "funcStartAddr": "404d50",
            "funcEndAddr": "404d9e",
            "decompiledFuncCode": "int64_t function_404d50(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x404d5c\n    if (fd >= 3) {\n        // 0x404d61\n        return a1 & 0xffffffff;\n    }\n    // 0x404d70\n    int64_t v1; // 0x404d50\n    int64_t v2 = function_4148f0(a1, v1); // 0x404d70\n    int32_t * v3 = __errno_location(); // 0x404d78\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_404da0",
            "funcStartAddr": "404da0",
            "funcEndAddr": "40517d",
            "decompiledFuncCode": "int64_t function_404da0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x404e38\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x404dbc\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x404dd6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x404e1b\n    if (a6 < 10) {\n        // 0x404e2a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x404f22\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_405180",
            "funcStartAddr": "405180",
            "funcEndAddr": "4051a0",
            "decompiledFuncCode": "int64_t function_405180(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405180\n    if (a5 == 0) {\n        // 0x40519b\n        return function_404da0(a1, a2, a3, a4, a5, 0, (int64_t)&g81);\n    }\n    int64_t v1 = 0; // 0x405187\n    v1++;\n    int64_t v2 = v1; // 0x405199\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x405190\n        v1++;\n        v2 = v1;\n    }\n    // 0x40519b\n    return function_404da0(a1, a2, a3, a4, a5, v2, (int64_t)&g81);\n}\n"
        },
        {
            "funcName": "function_4051a0",
            "funcStartAddr": "4051a0",
            "funcEndAddr": "405200",
            "decompiledFuncCode": "int64_t function_4051a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x4051a0\n    int64_t v3 = &v2; // 0x4051a0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4051d3\n    int64_t v6; // 0x4051bd\n    int64_t * v7; // 0x4051db\n    int64_t v8; // 0x4051db\n    int64_t v9; // 0x4051e7\n    if (v5 < 48) {\n        // 0x4051b0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4051f3\n            break;\n        }\n    } else {\n        // 0x4051db\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4051f3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4051d1\n    while (v4 != 9) {\n        // 0x4051c9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4051b0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4051f3\n                break;\n            }\n        } else {\n            // 0x4051db\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4051f3\n                break;\n            }\n        }\n        // 0x4051c9\n        v10 = 10;\n    }\n    // 0x4051f3\n    return function_404da0(a1, a2, a3, a4, v3, v10, (int64_t)&g81);\n}\n"
        },
        {
            "funcName": "function_405200",
            "funcStartAddr": "405200",
            "funcEndAddr": "4052bc",
            "decompiledFuncCode": "int64_t function_405200(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x405200\n    int64_t v1; // bp-168, 0x405200\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x405200\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x405200\n    int64_t v8; // 0x405200\n    int64_t v9; // bp-56, 0x405200\n    int64_t v10; // 0x405265\n    int64_t v11; // 0x405289\n    if ((int32_t)v6 < 48) {\n        // 0x405250\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4052a0\n            break;\n        }\n    } else {\n        // 0x405282\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4052a0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40527a\n    int64_t v13 = 10; // 0x40527a\n    while (v5 != 9) {\n        // 0x40527c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x405250\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4052a0\n                break;\n            }\n        } else {\n            // 0x405282\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4052a0\n                break;\n            }\n        }\n        // 0x405272\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4052a0\n    int64_t v14; // bp-136, 0x405200\n    int64_t result = function_404da0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g81); // 0x4052af\n    return result;\n}\n"
        },
        {
            "funcName": "function_4052c0",
            "funcStartAddr": "4052c0",
            "funcEndAddr": "405334",
            "decompiledFuncCode": "int64_t function_4052c0(int64_t a1) {\n    // 0x4052c0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x405323\n    return fputs_unlocked(v1, g34);\n}\n"
        },
        {
            "funcName": "function_405340",
            "funcStartAddr": "405340",
            "funcEndAddr": "40535a",
            "decompiledFuncCode": "int64_t function_405340(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x405344\n    if (size != 0 != (mem == NULL)) {\n        // 0x405353\n        return (int64_t)mem;\n    }\n    // 0x405355\n    function_405590(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405360",
            "funcStartAddr": "405360",
            "funcEndAddr": "405381",
            "decompiledFuncCode": "int64_t function_405360(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x405363\n    int64_t v2 = v1; // 0x405363\n    if (v2 < 0) {\n        // 0x40537b\n        function_405590(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x405379\n        return function_405340(v2);\n    }\n    // 0x40537b\n    function_405590(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405390",
            "funcStartAddr": "405390",
            "funcEndAddr": "405392",
            "decompiledFuncCode": "int64_t function_405390(void) {\n    // 0x405390\n    int64_t v1; // 0x405390\n    return function_405340(v1);\n}\n"
        },
        {
            "funcName": "function_4053a0",
            "funcStartAddr": "4053a0",
            "funcEndAddr": "4053d6",
            "decompiledFuncCode": "int64_t function_4053a0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4053c8\n        free(v1);\n        return (int32_t)&g81 ^ (int32_t)&g81;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4053b1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4053c0\n        return (int64_t)mem;\n    }\n    // 0x4053d1\n    function_405590(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4053e0",
            "funcStartAddr": "4053e0",
            "funcEndAddr": "405401",
            "decompiledFuncCode": "int64_t function_4053e0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4053e3\n    int64_t v2 = v1; // 0x4053e3\n    if (v2 < 0) {\n        // 0x4053fb\n        function_405590(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4053f9\n        return function_4053a0(a1, v2);\n    }\n    // 0x4053fb\n    function_405590(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405410",
            "funcStartAddr": "405410",
            "funcEndAddr": "405496",
            "decompiledFuncCode": "int64_t function_405410(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40546b\n            function_405590(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4053a0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x405453\n    if (a2 == 0) {\n        // 0x405478\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x405458\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40546b\n        function_405590(a1);\n        // UNREACHABLE\n    }\n    // 0x40543a\n    *(int64_t *)a2 = v2;\n    return function_4053a0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4054a0",
            "funcStartAddr": "4054a0",
            "funcEndAddr": "4054f0",
            "decompiledFuncCode": "int64_t function_4054a0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4054a0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4054ea\n            function_405590(a1);\n            // UNREACHABLE\n        }\n        // 0x4054c2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4053a0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4054d5\n        *(int64_t *)a2 = 128;\n        return function_4053a0(0, 128);\n    }\n    // 0x4054e8\n    if (a2 < 0) {\n        // 0x4054ea\n        function_405590(a1);\n        // UNREACHABLE\n    }\n    // 0x4054c2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4053a0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4054f0",
            "funcStartAddr": "4054f0",
            "funcEndAddr": "405507",
            "decompiledFuncCode": "int64_t function_4054f0(int64_t a1, int64_t a2) {\n    // 0x4054f0\n    return (int64_t)memset((int64_t *)function_405340(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_405510",
            "funcStartAddr": "405510",
            "funcEndAddr": "40553e",
            "decompiledFuncCode": "int64_t function_405510(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x405517\n    if ((int64_t)v1 < 0) {\n        // 0x405539\n        function_405590(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x405539\n        function_405590(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40552a\n    if (mem != NULL) {\n        // 0x405534\n        return (int64_t)mem;\n    }\n    // 0x405539\n    function_405590(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_405540",
            "funcStartAddr": "405540",
            "funcEndAddr": "405568",
            "decompiledFuncCode": "int64_t function_405540(int64_t a1, int64_t a2) {\n    int64_t v1 = function_405340(a2); // 0x40554f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_405570",
            "funcStartAddr": "405570",
            "funcEndAddr": "405583",
            "decompiledFuncCode": "int64_t function_405570(int64_t str) {\n    // 0x405570\n    return function_405540(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_405590",
            "funcStartAddr": "405590",
            "funcEndAddr": "4055c1",
            "decompiledFuncCode": "int64_t function_405590(int64_t a1) {\n    // 0x405590\n    error(g24, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4055d0",
            "funcStartAddr": "4055d0",
            "funcEndAddr": "405627",
            "decompiledFuncCode": "int64_t function_4055d0(int64_t stream, int32_t offset, int32_t whence) {\n    // 0x4055d0\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x4055da\n        return fseeko((struct _IO_FILE *)stream, offset, whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, whence); // 0x40560b\n    int64_t result = -1; // 0x405614\n    if (v1 != -1) {\n        // 0x405616\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405622\n    return result;\n}\n"
        },
        {
            "funcName": "function_405630",
            "funcStartAddr": "405630",
            "funcEndAddr": "40570f",
            "decompiledFuncCode": "int64_t function_405630(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a2 + 44); // 0x40563c\n    uint32_t v2 = *v1; // 0x40563c\n    int64_t v3 = a2 & 0xffffffff; // 0x405641\n    int32_t * v4 = (int32_t *)(a2 + 48); // 0x405644\n    uint64_t v5 = (int64_t)*v4; // 0x405644\n    int64_t v6; // 0x4056b2\n    if (v3 <= v5) {\n      lab_0x4056ac_2:\n        // 0x4056ac\n        *v4 = (int32_t)a2;\n        v6 = v3 - v5;\n        *v1 = v2 + (int32_t)v6;\n        return v6 & 0xffffffff;\n    }\n    int64_t v7 = a1 + 8; // 0x405632\n    int64_t v8 = v2; // 0x405630\n    int64_t v9 = v5 - v8;\n    uint64_t v10 = v9 & 0xffffffff;\n    int64_t v11 = 0x100000000 * v8;\n    int64_t v12 = v11 >> 32;\n    int64_t v13 = (v11 >> 29) + a1;\n    int64_t v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n    if (v8 >= v5) {\n        // break (via goto) -> 0x4056ac\n        goto lab_0x4056ac_2;\n    }\n    int64_t v15 = v3;\n    int64_t v16 = v15 - v5; // 0x405668\n    int64_t v17; // 0x405676\n    int64_t * v18; // 0x405690\n    int64_t * v19; // 0x405693\n    int64_t v20; // 0x40569e\n    int64_t v21; // 0x405676\n    while ((v16 & 0xffffffff) > v10) {\n        // 0x405673\n        v17 = v15 - v10;\n        v20 = v13;\n        v18 = (int64_t *)v20;\n        v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n        *v18 = *v19;\n        *v19 = *v18;\n        v20 += 8;\n        while (v14 != v20) {\n            // 0x405690\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n        }\n        // 0x4056a7\n        v21 = v17 & 0xffffffff;\n        if (v21 <= v5) {\n            // break (via goto) -> 0x4056ac\n            goto lab_0x4056ac_2;\n        }\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4056ac\n            goto lab_0x4056ac_2;\n        }\n        // 0x405662\n        v15 = v21;\n        v16 = v15 - v5;\n    }\n    int64_t v22 = v13; // 0x4056eb\n    int64_t * v23 = (int64_t *)v22; // 0x4056f0\n    int64_t * v24 = (int64_t *)(v22 + 8 * (v5 - v12)); // 0x4056f3\n    *v23 = *v24;\n    *v24 = *v23;\n    v22 += 8;\n    while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n        // 0x4056f0\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n    }\n    // 0x405707\n    v8 = v16 + v8 & 0xffffffff;\n    while (v15 > v5) {\n        // 0x40565d\n        v9 = v5 - v8;\n        v10 = v9 & 0xffffffff;\n        v11 = 0x100000000 * v8;\n        v12 = v11 >> 32;\n        v13 = (v11 >> 29) + a1;\n        v14 = 8 * ((v9 + 0xffffffff & 0xffffffff) + v12) + v7;\n        if (v8 >= v5) {\n            // break (via goto) -> 0x4056ac\n            goto lab_0x4056ac_2;\n        }\n        // 0x405662\n        v16 = v15 - v5;\n        while ((v16 & 0xffffffff) > v10) {\n            // 0x405673\n            v17 = v15 - v10;\n            v20 = v13;\n            v18 = (int64_t *)v20;\n            v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n            *v18 = *v19;\n            *v19 = *v18;\n            v20 += 8;\n            while (v14 != v20) {\n                // 0x405690\n                v18 = (int64_t *)v20;\n                v19 = (int64_t *)(v20 + 8 * ((0x100000000 * v17 >> 32) - v12));\n                *v18 = *v19;\n                *v19 = *v18;\n                v20 += 8;\n            }\n            // 0x4056a7\n            v21 = v17 & 0xffffffff;\n            if (v21 <= v5) {\n                // break (via goto) -> 0x4056ac\n                goto lab_0x4056ac_2;\n            }\n            if (v8 >= v5) {\n                // break (via goto) -> 0x4056ac\n                goto lab_0x4056ac_2;\n            }\n            // 0x405662\n            v15 = v21;\n            v16 = v15 - v5;\n        }\n        // 0x4056d0\n        v22 = v13;\n        v23 = (int64_t *)v22;\n        v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n        *v23 = *v24;\n        *v24 = *v23;\n        v22 += 8;\n        while (v22 != 8 * ((v16 + 0xffffffff & 0xffffffff) + v12) + v7) {\n            // 0x4056f0\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 8 * (v5 - v12));\n            *v23 = *v24;\n            *v24 = *v23;\n            v22 += 8;\n        }\n        // 0x405707\n        v8 = v16 + v8 & 0xffffffff;\n    }\n    // 0x4056ac\n    *v4 = (int32_t)a2;\n    v6 = v3 - v5;\n    *v1 = v2 + (int32_t)v6;\n    return v6 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_405710",
            "funcStartAddr": "405710",
            "funcEndAddr": "405d2c",
            "decompiledFuncCode": "int64_t function_405710(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x40572f\n    int64_t v2 = *v1; // 0x40572f\n    char * str2 = (char *)v2; // 0x40573c\n    char c = *str2; // 0x40573c\n    int64_t v3 = v2; // 0x405768\n    int64_t v4 = 0; // 0x405710\n    int32_t v5; // 0x405710\n    int64_t v6; // 0x405710\n    int64_t v7; // 0x405710\n    int64_t v8; // 0x405710\n    int64_t v9; // 0x405710\n    int64_t v10; // 0x405710\n    int64_t v11; // 0x405710\n    int64_t v12; // 0x405710\n    int64_t v13; // 0x405710\n    int64_t str3; // 0x405710\n    int64_t v14; // 0x405710\n    int64_t v15; // 0x405710\n    int64_t v16; // 0x405710\n    int64_t v17; // 0x405710\n    int32_t v18; // 0x405710\n    int32_t v19; // 0x405710\n    int32_t v20; // 0x405710\n    int32_t v21; // 0x405710\n    int32_t v22; // 0x405710\n    int32_t v23; // 0x405710\n    int32_t v24; // 0x405710\n    int32_t v25; // 0x405710\n    int32_t v26; // 0x405710\n    int32_t v27; // 0x405710\n    int32_t v28; // 0x405710\n    int32_t v29; // 0x405710\n    int64_t nmemb; // 0x405710\n    int64_t v30; // 0x405710\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x40576c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x405768\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x405778\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x40577e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x405748\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x4057ac\n                int64_t v34; // 0x405710\n                int64_t v35; // 0x405710\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x4057b5\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x405930;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x4057c6\n                int64_t v37 = *(int64_t *)v36; // 0x4057ca\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x4057a0\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x4057b5\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x405930;\n                        }\n                    }\n                    // 0x4057c6\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x405816:\n                    // 0x405816\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x405870;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x4059e0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x405870;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x405990\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x40583a;\n                                } else {\n                                    // 0x40599c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x40583a;\n                                    } else {\n                                        // 0x4059aa\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x40583a;\n                                        } else {\n                                            goto lab_0x405870;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x40583a;\n                            }\n                        }\n                    }\n                }\n              lab_0x405881:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x405a56\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x405c02\n                            flockfile(g36);\n                            int64_t v41 = *v1; // 0x405c22\n                            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x405c6f\n                            int64_t v43 = (int64_t)g36;\n                            int64_t v44 = v43; // 0x405c89\n                            int64_t v45; // 0x405c8b\n                            if (*(char *)v42 != 0) {\n                                // 0x405c8b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g36;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405c83\n                            while (v17 + nmemb != v42) {\n                                // 0x405c85\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x405c8b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g36;\n                                }\n                                // 0x405c78\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405cb0\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g36);\n                            v40 = *v1;\n                        } else {\n                            // 0x405a64\n                            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x405bbf\n                        free((int64_t *)v17);\n                    }\n                    // 0x405ab9\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x405ad0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x40597e\n                    return 63;\n                }\n                // 0x4058a0\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x405924\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x405930:;\n                    int32_t * v49 = (int32_t *)a7; // 0x405940\n                    uint32_t v50 = *v49; // 0x405940\n                    int64_t v51 = v50; // 0x405940\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x40594a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x405953\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x405b7f\n                                __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x405b2a\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x40597e\n                            return 63;\n                        }\n                        // 0x4059c8\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x405cdf\n                                    __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x405bdd\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x405bf0\n                                // 0x40597e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x405aee\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x405b02\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x40596b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x40596e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x405972\n                    int64_t result = v59; // 0x405978\n                    if (v58 != 0) {\n                        // 0x40597a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x40597e\n                    return result;\n                }\n            } else {\n                // 0x40577e\n                v5 = v32;\n            }\n            // break -> 0x4058a5\n            break;\n        }\n    }\n    // 0x4058a5\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x4058bd\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x4058c7\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x40597e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x405a09\n        __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x4058f6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x405906\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x405870:\n    // 0x405870\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x405870\n    int64_t v63 = *(int64_t *)v62; // 0x405874\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x405881\n        goto lab_0x405881;\n    }\n    goto lab_0x405816;\n  lab_0x40583a:\n    // 0x40583a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x405710\n    int32_t v65; // 0x405710\n    int32_t v66; // 0x405710\n    if (v27 != 0) {\n        goto lab_0x405870;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x4059f0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x405870;\n            } else {\n                goto lab_0x405861;\n            }\n        } else {\n            // 0x405855\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x405b4c\n                int64_t v67 = (int64_t)mem; // 0x405b4c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x405870;\n                } else {\n                    // 0x405b5f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x405861;\n                }\n            } else {\n                goto lab_0x405861;\n            }\n        }\n    }\n  lab_0x405861:\n    // 0x405861\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x405870;\n}\n"
        },
        {
            "funcName": "function_405d30",
            "funcStartAddr": "405d30",
            "funcEndAddr": "4062f6",
            "decompiledFuncCode": "int64_t function_405d30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405d51\n    if (v3 < 1) {\n        // 0x405f0e\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x405d4d\n    int32_t v5 = *(int32_t *)a7; // 0x405d59\n    uint64_t v6 = a1 & 0xffffffff; // 0x405d5b\n    int64_t v7 = v2; // 0x405d60\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405d63\n    *v8 = 0;\n    int64_t v9; // 0x405d30\n    int64_t v10; // 0x405d30\n    int64_t v11; // 0x405d30\n    int64_t v12; // 0x405d30\n    int64_t str; // 0x405d30\n    int64_t v13; // 0x405d30\n    int64_t v14; // 0x405d30\n    int64_t v15; // 0x405d30\n    int64_t v16; // 0x405d30\n    int64_t v17; // 0x405d30\n    int32_t v18; // 0x405d30\n    char v19; // 0x405d30\n    if (v5 == 0) {\n        // 0x405f48\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x405d7a;\n    } else {\n        // 0x405d73\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405dc0\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405dc3\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405e88;\n            } else {\n                int64_t v22 = v7 + 1; // 0x405dd6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x405de6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x405e9c;\n                } else {\n                    goto lab_0x405df8;\n                }\n            }\n        } else {\n            goto lab_0x405d7a;\n        }\n    }\n  lab_0x405d7a:\n    // 0x405d7a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405d80\n    *v24 = 0;\n    int64_t v25; // 0x405d30\n    int64_t v26; // 0x405d30\n    int64_t v27; // 0x405d30\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405e70\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405e7d;\n        }\n        case 43: {\n            // 0x406180\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x405e7d;\n        }\n        default: {\n            // 0x405d9c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4060ff\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x406218\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x405e7d;\n                } else {\n                    // 0x40610d\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x405daa;\n                }\n            } else {\n                goto lab_0x405daa;\n            }\n        }\n    }\n  lab_0x405e88:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x405e8f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x405df8;\n    } else {\n        goto lab_0x405e9c;\n    }\n  lab_0x405daa:\n    // 0x405daa\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x405e7d;\n  lab_0x405e7d:\n    // 0x405e7d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405e88;\n  lab_0x405df8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x405df8\n    int64_t v31 = v30; // 0x405df8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x405dfa\n    if ((int64_t)*v32 > v31) {\n        // 0x405dff\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x405e02\n    if (*v33 > v30) {\n        // 0x405e07\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x405e0a\n    int64_t v35 = v31; // 0x405e0e\n    int64_t v36 = v15; // 0x405e0e\n    int64_t v37; // 0x405d30\n    int64_t v38; // 0x405d30\n    int64_t v39; // 0x405d30\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405f78\n        int64_t v41 = v40; // 0x405f78\n        v2 = v41;\n        int64_t v42; // 0x405d30\n        if (*v33 == v40) {\n            // 0x406160\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x406168\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405f84\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405f88\n                function_405630(a2, v1);\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405f98\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405fa1\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x405faa\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405fc1\n            int64_t v47 = v45 & 0xffffffff; // 0x405fc5\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x405fce\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x405fd4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x405fd6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405fb0\n            int64_t v49 = v48 & 0xffffffff; // 0x405fb0\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405fc1\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x405fce\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x405fd4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x405fd6;\n                    }\n                }\n                // 0x405fb0\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x406178\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x405fd6;\n    } else {\n        goto lab_0x405e14;\n    }\n  lab_0x405e9c:\n    // 0x405e9c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x405e9f\n    int64_t v51 = v12; // 0x405e9f\n    int64_t v52 = v14; // 0x405e9f\n    if (*(char *)v10 == 0) {\n        goto lab_0x405df8;\n    } else {\n        goto lab_0x405ea5;\n    }\n  lab_0x405e14:;\n    int32_t v53 = v35; // 0x405e14\n    int64_t v54; // 0x405d30\n    int64_t v55; // 0x405d30\n    int64_t v56; // 0x405d30\n    int64_t v57; // 0x405d30\n    int64_t v58; // 0x405d30\n    int64_t v59; // 0x405d30\n    char * v60; // 0x405d30\n    int64_t v61; // 0x405d30\n    int64_t v62; // 0x405e29\n    int64_t v63; // 0x405d30\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405f63\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405f66;\n    } else {\n        // 0x405e1c\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405d30\n        int64_t v66 = v65 ? -1 : 1; // 0x405e30\n        int64_t v67 = (int64_t)\"--\"; // 0x405d30\n        int64_t v68 = v62; // 0x405d30\n        int64_t v69 = 3; // 0x405e30\n        unsigned char v70 = *(char *)v68; // 0x405e30\n        char v71 = *(char *)v67; // 0x405e30\n        char v72 = v71; // 0x405e30\n        bool v73 = false; // 0x405e30\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x405f20\n            if (*(char *)v62 == 45) {\n                // 0x405fe0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x405fe0\n                if (c == 0) {\n                    goto lab_0x405f2a;\n                } else {\n                    // 0x405fed\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x406070;\n                    } else {\n                        if (c == 45) {\n                            // 0x406253\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x4060c5;\n                        } else {\n                            // 0x405ffe\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x406070;\n                            } else {\n                                // 0x406003\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x406024;\n                                } else {\n                                    // 0x40600a\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x406070;\n                                    } else {\n                                        goto lab_0x406024;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x405f2a;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405e40\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405e43\n            int64_t v77 = v35 + 1; // 0x405e46\n            int32_t v78 = v77; // 0x405e49\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x4061b0\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405e57\n                    function_405630(a2, v1);\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405e65\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405f66;\n        }\n    }\n  lab_0x405ea5:;\n    // 0x405ea5\n    int64_t v79; // bp-104, 0x405d30\n    int64_t v80 = &v79; // 0x405d3a\n    int64_t v81 = v50 + 1; // 0x405ea5\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x405eac\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405eb1\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405eb5\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405eb9\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405ec1\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405ec6\n    int32_t c2 = v84; // 0x405ec6\n    char * found_char_pos = strchr(str2, c2); // 0x405ec6\n    int64_t v87 = *v82; // 0x405ecb\n    v2 = v87;\n    int64_t v88 = *v85; // 0x405ed5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x405ee0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4061d0\n            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40619d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x405f0e\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405ec6\n    char v91 = *(char *)(v90 + 1); // 0x405efb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405eb5\n        if (v91 != 58) {\n            // 0x405f0e\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x406124\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x406228\n                *v8 = 0;\n            } else {\n                // 0x40620c\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40614e\n            *v83 = 0;\n            // 0x405f0e\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x40612e\n        if (v93 != 0) {\n            // 0x4061c0\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40614e\n            *v83 = 0;\n            // 0x405f0e\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x406141\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40614e\n            *v83 = 0;\n            // 0x405f0e\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40628a\n            __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40623a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x406241\n        // 0x40614e\n        *v83 = 0;\n        // 0x405f0e\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x406099\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40609b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x4062c0\n                __fprintf_chk(g36, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x406271\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x406278\n            // 0x405f0e\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x4060a6\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x4060aa\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x4060c5;\n  lab_0x405fd6:\n    // 0x405fd6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x405e14;\n  lab_0x4060c5:;\n    int64_t v99 = function_405710(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4060e3\n    // 0x405f0e\n    return v99 & 0xffffffff;\n  lab_0x405f66:;\n    int32_t v100 = v55; // 0x405f66\n    if (v100 != (int32_t)v59) {\n        // 0x405f6a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x405f0e\n    return 0xffffffff;\n  lab_0x405f2a:\n    // 0x405f2a\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405f31\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x405f0e\n    return v99 & 0xffffffff;\n  lab_0x406070:\n    // 0x406070\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405ea5;\n  lab_0x406024:\n    // 0x406024\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_405710(v6, a2, str, a4, a5, v57, v1, v11, (int64_t *)\"-\"); // 0x40604a\n    if ((int32_t)v101 != -1) {\n        // 0x405f0e\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40605f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x406070;\n}\n"
        },
        {
            "funcName": "function_406300",
            "funcStartAddr": "406300",
            "funcEndAddr": "406356",
            "decompiledFuncCode": "int64_t function_406300(int64_t a1) {\n    // 0x406300\n    *(int32_t *)&g66 = g32;\n    *(int32_t *)&g67 = g31;\n    int64_t v1; // 0x406300\n    int64_t result = function_405d30(v1, v1, v1, v1, v1, v1, &g66, a1 & 0xffffffff); // 0x406326\n    g32 = *(int32_t *)&g66;\n    g72 = g69;\n    *(int32_t *)&g30 = g68;\n    return result;\n}\n"
        },
        {
            "funcName": "function_406360",
            "funcStartAddr": "406360",
            "funcEndAddr": "406378",
            "decompiledFuncCode": "int64_t function_406360(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x406360\n    return function_406300(1);\n}\n"
        },
        {
            "funcName": "function_406380",
            "funcStartAddr": "406380",
            "funcEndAddr": "406393",
            "decompiledFuncCode": "int64_t function_406380(int64_t a1, int64_t a2, char * a3, char (**a4)[7], int32_t a5, int64_t a6) {\n    // 0x406380\n    return function_406300(0);\n}\n"
        },
        {
            "funcName": "function_4063a0",
            "funcStartAddr": "4063a0",
            "funcEndAddr": "4063b5",
            "decompiledFuncCode": "int64_t function_4063a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4063a0\n    return function_405d30(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4063c0",
            "funcStartAddr": "4063c0",
            "funcEndAddr": "4063d6",
            "decompiledFuncCode": "int64_t function_4063c0(void) {\n    // 0x4063c0\n    return function_406300(0);\n}\n"
        },
        {
            "funcName": "function_4063e0",
            "funcStartAddr": "4063e0",
            "funcEndAddr": "4063f8",
            "decompiledFuncCode": "int64_t function_4063e0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4063e0\n    return function_405d30(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_406400",
            "funcStartAddr": "406400",
            "funcEndAddr": "40647a",
            "decompiledFuncCode": "int64_t function_406400(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40640b\n    int64_t v2 = (int64_t)&g12; // 0x40640b\n    int32_t * pwc; // 0x406400\n    int64_t v3; // 0x406400\n    int64_t n; // 0x406400\n    if (a2 == 0) {\n        goto lab_0x406452;\n    } else {\n        // 0x40640d\n        if (a3 == 0) {\n            // 0x406438\n            return -2;\n        }\n        // 0x406419\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x406452;\n        } else {\n            goto lab_0x406424;\n        }\n    }\n  lab_0x406452:\n    // 0x406452\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x406400\n    pwc = (int32_t *)&v4;\n    goto lab_0x406424;\n  lab_0x406424:;\n    char * wstr = (char *)v3; // 0x40642a\n    int64_t ps; // 0x406400\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40642a\n    int64_t result = v5; // 0x40642a\n    if (v5 < 0xfffffffe) {\n        // 0x406438\n        return result;\n    }\n    int64_t result2 = result; // 0x406469\n    if ((char)function_414320(0, v3) == 0) {\n        // 0x40646b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x406438\n    return result2;\n}\n"
        },
        {
            "funcName": "function_406480",
            "funcStartAddr": "406480",
            "funcEndAddr": "4064c3",
            "decompiledFuncCode": "int64_t function_406480(int64_t a1, int64_t a2, int64_t a3) {\n    bool v1 = a1 == 0 | a2 == 0;\n    if (v1) {\n        // 0x40649a\n        return 0;\n    }\n    // 0x406490\n    int64_t v2; // 0x406480\n    int64_t result = v2 & -256 | (int64_t)v1; // 0x40648c\n    int64_t v3 = *(int64_t *)(a1 + 8); // 0x406490\n    if (v3 != *(int64_t *)(a2 + 8)) {\n        // 0x40649a\n        return result;\n    }\n    int64_t v4 = v3; // 0x4064b2\n    v4--;\n    int64_t result2 = 1; // 0x4064b6\n    while (v4 >= 0) {\n        int64_t v5 = 8 * v4; // 0x4064a8\n        int64_t v6 = *(int64_t *)(*(int64_t *)(a1 + 16) + v5); // 0x4064ac\n        result2 = result;\n        if (v6 != *(int64_t *)(*(int64_t *)(a2 + 16) + v5)) {\n            // break -> 0x40649a\n            break;\n        }\n        v4--;\n        result2 = 1;\n    }\n    // 0x40649a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4064d0",
            "funcStartAddr": "4064d0",
            "funcEndAddr": "40653b",
            "decompiledFuncCode": "int64_t function_4064d0(int64_t a1, int64_t a2, int32_t a3) {\n    int64_t v1 = a1; // 0x4064dd\n    int64_t result; // 0x4064d0\n    while (true) {\n        int64_t v2 = v1;\n        int64_t v3 = *(int64_t *)(v2 + 8); // 0x4064e3\n        v1 = v3;\n        if (v3 == 0) {\n            int64_t v4 = *(int64_t *)(v2 + 16); // 0x4064ec\n            v1 = v4;\n            if (v4 == 0) {\n                // 0x4064f5\n                result = v4;\n                if ((int32_t)v4 != 0) {\n                    // break -> 0x406536\n                    break;\n                }\n                int64_t v5 = *(int64_t *)v2; // 0x406508\n                result = v4;\n                if (v5 == 0) {\n                    // break -> 0x406536\n                    break;\n                }\n                int64_t v6 = v2;\n                int64_t v7 = v5;\n                int64_t v8 = *(int64_t *)(v7 + 16); // 0x406510\n                v1 = v8;\n                while (v8 == 0 || v8 == v6) {\n                    // 0x406529\n                    result = v8;\n                    if ((int32_t)v8 != 0) {\n                        return result;\n                    }\n                    int64_t v9 = *(int64_t *)v7; // 0x406508\n                    result = v8;\n                    if (v9 == 0) {\n                        return result;\n                    }\n                    v6 = v7;\n                    v7 = v9;\n                    v8 = *(int64_t *)(v7 + 16);\n                    v1 = v8;\n                }\n            }\n        }\n    }\n  lab_0x406536_2:\n    // 0x406536\n    return result;\n}\n"
        },
        {
            "funcName": "function_406540",
            "funcStartAddr": "406540",
            "funcEndAddr": "40666f",
            "decompiledFuncCode": "int64_t function_406540(int64_t * a1, int64_t a2, uint64_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x406540\n    uint64_t v3 = *v2; // 0x406540\n    if (*(int64_t *)(a2 + 104) <= v3) {\n        // 0x4065d0\n        *(char *)(v1 + 8) = 2;\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x40654e\n    char v5 = *(char *)(v4 + v3); // 0x406559\n    *(char *)a1 = v5;\n    if (*(int32_t *)(a2 + 144) >= 2) {\n        // 0x406562\n        if (v3 != *(int64_t *)(a2 + 48)) {\n            // 0x406568\n            if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3) == -1) {\n                // 0x4065a7\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n        }\n    }\n    switch (v5) {\n        case 92: {\n            if (a3 % 2 == 0) {\n                // 0x4065a7\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n            int64_t v6 = v3 + 1;\n            if (v6 >= *(int64_t *)(a2 + 88)) {\n                // 0x4065a7\n                *(char *)(v1 + 8) = 1;\n                return 1;\n            }\n            // 0x406620\n            *v2 = v6;\n            *(char *)(v1 + 8) = 1;\n            *(char *)a1 = *(char *)(v4 + v6);\n            return 1;\n        }\n        case 91: {\n            uint64_t v7 = v3 + 1;\n            if (v7 >= *(int64_t *)(a2 + 88)) {\n                // 0x4065fe\n                *(char *)(v1 + 8) = 1;\n                *(char *)a1 = 91;\n                return 1;\n            }\n            char v8 = *(char *)(v4 + v7); // 0x4065ea\n            *(char *)a1 = v8;\n            switch (v8) {\n                case 58: {\n                    if ((a3 & 4) != 0) {\n                        // 0x406665\n                        *(char *)(v1 + 8) = 30;\n                        return 2;\n                    }\n                    // 0x4065fe\n                    *(char *)(v1 + 8) = 1;\n                    *(char *)a1 = 91;\n                    return 1;\n                }\n                case 61: {\n                    // 0x406650\n                    *(char *)(v1 + 8) = 28;\n                    return 2;\n                }\n                case 46: {\n                    // 0x406640\n                    *(char *)(v1 + 8) = 26;\n                    return 2;\n                }\n            }\n            // 0x4065fe\n            *(char *)(v1 + 8) = 1;\n            *(char *)a1 = 91;\n            return 1;\n        }\n        case 93: {\n            // 0x406610\n            *(char *)(v1 + 8) = 21;\n            return 1;\n        }\n    }\n    if (v5 == 94) {\n        // 0x40658b\n        *(char *)(v1 + 8) = 25;\n        return 1;\n    }\n    if (v5 == 45) {\n        // 0x4065bd\n        *(char *)(v1 + 8) = 22;\n        return 1;\n    }\n    // 0x4065a7\n    *(char *)(v1 + 8) = 1;\n    return 1;\n}\n"
        },
        {
            "funcName": "function_406670",
            "funcStartAddr": "406670",
            "funcEndAddr": "40668d",
            "decompiledFuncCode": "int64_t function_406670(int64_t a1, int64_t a2) {\n    // 0x406670\n    if (*(char *)(a2 + 48) != 17 || *(int64_t *)(a2 + 40) != a1) {\n        // 0x406676\n        return 0;\n    }\n    char * v1 = (char *)(a2 + 50); // 0x406686\n    *v1 = *v1 | 8;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_406690",
            "funcStartAddr": "406690",
            "funcEndAddr": "40689f",
            "decompiledFuncCode": "int64_t function_406690(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = *(int64_t *)(a1 + 152); // 0x4066a5\n    uint64_t v2 = 0x100000000 * a2 >> 32; // 0x4066b5\n    int64_t v3 = *(int64_t *)(v1 + 48) + 24 * a4; // 0x4066bd\n    int64_t * v4 = (int64_t *)(v3 + 8); // 0x4066c1\n    int64_t v5 = *v4; // 0x4066c1\n    if (v5 < 1) {\n        // 0x40686d\n        return (int32_t)v2 >> 1;\n    }\n    int64_t v6 = 1 << a3 % 64;\n    int32_t v7 = v2;\n    int64_t v8 = v5; // 0x40670e\n    int64_t v9 = 0; // 0x40670e\n    int64_t v10; // 0x406719\n    int64_t v11; // 0x406690\n    int64_t v12; // 0x406690\n    int64_t v13; // 0x406690\n    int64_t v14; // 0x406690\n    while (true) {\n      lab_0x406723_2:\n        // 0x406723\n        v13 = v9;\n        v10 = v8;\n        int64_t v15 = *(int64_t *)(*(int64_t *)(v3 + 16) + 8 * v13); // 0x406727\n        int64_t v16 = 16 * v15 + *(int64_t *)v1; // 0x406732\n        char v17 = *(char *)(v16 + 8); // 0x406735\n        if (v17 == 8) {\n            if (v7 % 2 != 0) {\n                // 0x406770\n                if (*(int64_t *)v16 == a3) {\n                    // 0x406750\n                    return 0xffffffff;\n                }\n            }\n            goto lab_0x406715;\n        } else {\n            if (v17 != 9) {\n                if (a5 == -1 || v17 != 4) {\n                    goto lab_0x406715;\n                } else {\n                    // 0x40679a\n                    v14 = 24 * v15 + 16;\n                    v11 = *(int64_t *)(a1 + 216) + 40 * a5;\n                    while (true) {\n                      lab_0x4067d0:\n                        // 0x4067d0\n                        v12 = v11;\n                        if (*(int64_t *)v12 != v15) {\n                            goto lab_0x406840;\n                        } else {\n                            if (a3 > 63) {\n                                goto lab_0x4067e9;\n                            } else {\n                                // 0x4067dc\n                                if ((v6 & (int64_t)*(int16_t *)(v12 + 34)) == 0) {\n                                    goto lab_0x406840;\n                                } else {\n                                    goto lab_0x4067e9;\n                                }\n                            }\n                        }\n                    }\n                  lab_0x40684c:;\n                    int64_t v18 = v13 + 1; // 0x40685f\n                    uint64_t v19 = *v4; // 0x406863\n                    v8 = v19;\n                    v9 = v18;\n                    if (v19 <= v18) {\n                        // break -> 0x40686d\n                        break;\n                    }\n                    goto lab_0x406723_2;\n                }\n            } else {\n                if ((v7 & 2) != 0) {\n                    // 0x40674b\n                    if (*(int64_t *)v16 == a3) {\n                        // 0x406750\n                        return 0;\n                    }\n                }\n                goto lab_0x406715;\n            }\n        }\n    }\n  lab_0x40686d:\n    // 0x40686d\n    return v7 >> 1;\n  lab_0x406840:\n    // 0x406840\n    v11 = v12 + 40;\n    if (*(char *)(v12 + 32) == 0) {\n        // break -> 0x40684c\n        goto lab_0x40684c;\n    }\n    goto lab_0x4067d0;\n  lab_0x4067e9:;\n    int64_t v20 = *(int64_t *)*(int64_t *)(v14 + *(int64_t *)(v1 + 40)); // 0x4067f2\n    if (v20 == a4) {\n        // 0x406888\n        return -((v2 % 2)) & 0xffffffff;\n    }\n    int32_t v21 = function_406690(a1, v2 & 0xffffffff, a3, v20, a5); // 0x406813\n    if (v21 == -1) {\n        // 0x406750\n        return 0xffffffff;\n    }\n    // 0x40681c\n    if ((v7 & 2) != 0 == v21 == 0) {\n        // 0x406750\n        return 0;\n    }\n    if (a3 <= 63) {\n        int16_t * v22 = (int16_t *)(v12 + 34); // 0x406837\n        *v22 = *v22 & -1 - (int16_t)v6;\n    }\n    goto lab_0x406840;\n  lab_0x406715:;\n    int64_t v23 = v13 + 1; // 0x406715\n    v8 = v10;\n    v9 = v23;\n    if (v10 <= v23) {\n        // break -> 0x40686d\n        goto lab_0x40686d;\n    }\n    goto lab_0x406723;\n  lab_0x406723:\n    // 0x406723\n    goto lab_0x406723_2;\n}\n"
        },
        {
            "funcName": "function_4068a0",
            "funcStartAddr": "4068a0",
            "funcEndAddr": "406906",
            "decompiledFuncCode": "int64_t function_4068a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = *(int64_t *)(a1 + 216) + 40 * a2; // 0x4068ab\n    int64_t v2 = *(int64_t *)(v1 + 16); // 0x4068af\n    if (v2 > a5) {\n        // 0x4068d6\n        return 0xffffffff;\n    }\n    int64_t v3 = *(int64_t *)(v1 + 24); // 0x4068b8\n    if (v3 < a5) {\n        // 0x4068d6\n        return 1;\n    }\n    if (v3 == a5) {\n        // 0x4068e3\n        return function_406690(a1, (int64_t)(v2 == a5) | 2, a3, a4, a6);\n    }\n    // 0x4068cf\n    if (v2 == a5) {\n        // 0x4068e3\n        return function_406690(a1, 1, a3, a4, a6);\n    }\n    // 0x4068d6\n    return 0;\n}\n"
        },
        {
            "funcName": "function_406910",
            "funcStartAddr": "406910",
            "funcEndAddr": "4069ac",
            "decompiledFuncCode": "int64_t function_406910(int64_t a1, uint64_t a2) {\n    // 0x406910\n    if (*(int32_t *)(a1 + 144) >= 2) {\n        if (a2 >= 0x2000000000000000) {\n            // 0x4069a0\n            return 12;\n        }\n        int64_t * v1 = (int64_t *)(a1 + 16); // 0x406934\n        int32_t v2 = a2;\n        int64_t * mem = realloc((int64_t *)*v1, 4 * v2); // 0x406940\n        if (mem == NULL) {\n            // 0x4069a0\n            return 12;\n        }\n        int64_t * v3 = (int64_t *)(a1 + 24); // 0x40694a\n        int64_t v4 = *v3; // 0x40694a\n        *v1 = (int64_t)mem;\n        if (v4 != 0) {\n            int64_t * mem2 = realloc((int64_t *)v4, 8 * v2); // 0x40695f\n            if (mem2 == NULL) {\n                // 0x4069a0\n                return 12;\n            }\n            // 0x406969\n            *v3 = (int64_t)mem2;\n        }\n    }\n    // 0x40696d\n    if (*(char *)(a1 + 139) == 0) {\n        // 0x406976\n        *(int64_t *)(a1 + 64) = a2;\n        return 0;\n    }\n    int64_t * v5 = (int64_t *)(a1 + 8); // 0x406988\n    int64_t * mem3 = realloc((int64_t *)*v5, (int32_t)a2); // 0x40698f\n    if (mem3 == NULL) {\n        // 0x4069a0\n        return 12;\n    }\n    // 0x406999\n    *v5 = (int64_t)mem3;\n    // 0x406976\n    *(int64_t *)(a1 + 64) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4069b0",
            "funcStartAddr": "4069b0",
            "funcEndAddr": "406a14",
            "decompiledFuncCode": "int64_t function_4069b0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x4069bc\n    int64_t v2 = *v1; // 0x4069bc\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x4069c0\n    int64_t v4 = *v3; // 0x4069c0\n    int64_t v5 = v4; // 0x4069c7\n    int64_t v6 = v2; // 0x4069c7\n    if (v2 == a1) {\n        int64_t v7 = a1 + 1; // 0x4069e8\n        *(int64_t *)a1 = 2 * v7;\n        int64_t * mem = realloc((int64_t *)v4, 16 * (int32_t)v7); // 0x4069fa\n        if (mem == NULL) {\n            // 0x4069da\n            return 0;\n        }\n        // 0x406a04\n        v5 = (int64_t)mem;\n        *v3 = v5;\n        v6 = *v1;\n    }\n    // 0x4069c9\n    *v1 = v6 + 1;\n    *(int64_t *)(8 * v6 + v5) = a2;\n    // 0x4069da\n    return 1;\n}\n"
        },
        {
            "funcName": "function_406a20",
            "funcStartAddr": "406a20",
            "funcEndAddr": "406b4c",
            "decompiledFuncCode": "int64_t function_406a20(int64_t a1, int64_t a2) {\n    if (a1 == 0) {\n        // 0x406a58\n        abort();\n        // UNREACHABLE\n    }\n    int64_t * v1 = (int64_t *)(a1 + 8); // 0x406a34\n    int64_t v2 = *v1; // 0x406a34\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x406a38\n    int64_t v4 = *v3; // 0x406a38\n    if (v2 == 0) {\n        // 0x406a41\n        *(int64_t *)v4 = a2;\n        *v1 = *v1 + 1;\n        // 0x406a4e\n        return 1;\n    }\n    int64_t v5 = v4; // 0x406a93\n    int64_t v6 = v2; // 0x406a93\n    if (v2 == a1) {\n        // 0x406b20\n        *(int64_t *)a1 = 2 * a1;\n        int64_t * mem = realloc((int64_t *)v4, 16 * (int32_t)a1); // 0x406b2e\n        if (mem == NULL) {\n            // 0x406a4e\n            return 0;\n        }\n        // 0x406b38\n        v5 = (int64_t)mem;\n        *v3 = v5;\n        v6 = *v1;\n    }\n    int64_t v7 = 8 * v6; // 0x406a99\n    int64_t v8; // 0x406a20\n    if (*(int64_t *)v5 > a2) {\n        // 0x406aa6\n        v8 = v7;\n        if (v6 >= 1) {\n            int64_t v9 = v7 + v5;\n            int64_t v10 = v9 - 8; // 0x406ab0\n            *(int64_t *)v9 = *(int64_t *)v10;\n            v8 = 0;\n            while (v10 != v5) {\n                // 0x406ab0\n                v9 = v10;\n                v10 = v9 - 8;\n                *(int64_t *)v9 = *(int64_t *)v10;\n                v8 = 0;\n            }\n        }\n    } else {\n        int64_t v11 = v5 - 8; // 0x406ae0\n        int64_t v12 = *(int64_t *)(v7 + v11); // 0x406ae0\n        v8 = v7;\n        if (v12 > a2) {\n            *(int64_t *)(v7 + v5) = v12;\n            int64_t v13 = v7 - 8; // 0x406af4\n            uint64_t v14 = *(int64_t *)(v13 + v11); // 0x406af8\n            v8 = v13;\n            int64_t v15 = v13; // 0x406b00\n            while (v14 > a2) {\n                // 0x406af0\n                *(int64_t *)(v15 + v5) = v14;\n                v13 = v15 - 8;\n                v14 = *(int64_t *)(v13 + v11);\n                v8 = v13;\n                v15 = v13;\n            }\n        }\n    }\n    // 0x406ac3\n    *(int64_t *)(v8 + v5) = a2;\n    *v1 = *v1 + 1;\n    // 0x406a4e\n    return 1;\n}\n"
        },
        {
            "funcName": "function_406b50",
            "funcStartAddr": "406b50",
            "funcEndAddr": "406c4b",
            "decompiledFuncCode": "int64_t function_406b50(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a2 + 32; // 0x406b5e\n    int64_t * v2 = (int64_t *)(a2 + 16); // 0x406b6b\n    int64_t v3 = *v2; // 0x406b6b\n    *(int64_t *)a2 = a3;\n    *(int64_t *)(a2 + 40) = 0;\n    *(int64_t *)v1 = v3;\n    int64_t size = 8 * v3; // 0x406b7e\n    int64_t * mem = malloc((int32_t)size); // 0x406b86\n    *(int64_t *)(a2 + 48) = (int64_t)mem;\n    if (mem == NULL) {\n        // 0x406bce\n        return 12;\n    }\n    if (v3 >= 0 == (v3 != 0)) {\n        int64_t v4 = 0; // 0x406ba0\n        int64_t v5 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v4); // 0x406bae\n        int64_t v6 = size; // 0x406bc0\n        int64_t v7; // 0x406bc5\n        if ((*(char *)(size + 8 + 16 * v5) & 8) == 0) {\n            // 0x406bc2\n            v7 = function_4069b0(v1, v5);\n            v6 = v1;\n            if ((char)v7 == 0) {\n                // 0x406bce\n                return 12;\n            }\n        }\n        // 0x406ba0\n        v4++;\n        int64_t v8 = v6; // 0x406ba8\n        while (*v2 > v4) {\n            // 0x406baa\n            v5 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v4);\n            v6 = v8;\n            if ((*(char *)(v8 + 8 + 16 * v5) & 8) == 0) {\n                // 0x406bc2\n                v7 = function_4069b0(v1, v5);\n                v6 = v1;\n                if ((char)v7 == 0) {\n                    // 0x406bce\n                    return 12;\n                }\n            }\n            // 0x406ba0\n            v4++;\n            v8 = v6;\n        }\n    }\n    int64_t v9 = 24 * (*(int64_t *)(a1 + 136) & a3) + *(int64_t *)(a1 + 64); // 0x406bf8\n    int64_t * v10 = (int64_t *)v9; // 0x406bfc\n    uint64_t v11 = *v10; // 0x406bfc\n    int64_t * v12 = (int64_t *)(v9 + 16); // 0x406bff\n    int64_t v13 = *v12; // 0x406bff\n    int64_t v14 = v11 + 1; // 0x406c03\n    int64_t * v15 = (int64_t *)(v9 + 8); // 0x406c07\n    int64_t v16 = v13; // 0x406c0b\n    int64_t v17 = v11; // 0x406c0b\n    int64_t v18 = v14; // 0x406c0b\n    if (*v15 <= v11) {\n        int64_t * mem2 = realloc((int64_t *)v13, 16 * (int32_t)v14); // 0x406c30\n        if (mem2 == NULL) {\n            // 0x406bce\n            return 12;\n        }\n        // 0x406c3a\n        v16 = (int64_t)mem2;\n        v17 = *v10;\n        *v12 = v16;\n        *v15 = 2 * v14;\n        v18 = v17 + 1;\n    }\n    // 0x406c0d\n    *v10 = v18;\n    *(int64_t *)(8 * v17 + v16) = a2;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_406c50",
            "funcStartAddr": "406c50",
            "funcEndAddr": "406c76",
            "decompiledFuncCode": "int64_t function_406c50(uint64_t a1, int64_t a2) {\n    uint64_t wc = a1 % 256; // 0x406c55\n    int32_t v1 = btowc((int32_t)wc); // 0x406c5f\n    int64_t v2 = v1; // 0x406c5f\n    int64_t result = v2; // 0x406c67\n    if (v1 == -1) {\n        // 0x406c69\n        result = (a2 == 0 ? wc : v2) & 0xffffffff;\n    }\n    // 0x406c6f\n    return result;\n}\n"
        },
        {
            "funcName": "function_406c80",
            "funcStartAddr": "406c80",
            "funcEndAddr": "406d00",
            "decompiledFuncCode": "int64_t function_406c80(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 88); // 0x406c82\n    int64_t v2 = *(int64_t *)(a1 + 64); // 0x406c87\n    int64_t v3 = v2 - v1; // 0x406c87\n    uint64_t v4 = v3 == 0 | v3 < 0 != ((v3 ^ v2) & (v2 ^ v1)) < 0 ? v2 : v1; // 0x406c8f\n    int64_t * v5 = (int64_t *)(a1 + 48); // 0x406c94\n    uint64_t v6 = *v5; // 0x406c94\n    if (v4 <= v6) {\n        // 0x406cf0\n        *(int64_t *)(a1 + 56) = v6;\n        int64_t result; // 0x406c80\n        return result;\n    }\n    int32_t ** v7 = __ctype_toupper_loc(); // 0x406c9d\n    int64_t v8 = v6; // 0x406ca2\n    int64_t v9 = *(int64_t *)(a1 + 120); // 0x406cac\n    int64_t v10 = (int64_t)*(char *)(v8 + a1 + *(int64_t *)(a1 + 40)); // 0x406cb7\n    int64_t v11 = v10; // 0x406cbd\n    if (v9 != 0) {\n        // 0x406ce8\n        v11 = (int64_t)*(char *)(v9 + v10);\n    }\n    int32_t v12 = *(int32_t *)(4 * v11 + (int64_t)*v7); // 0x406cc6\n    *(char *)(*(int64_t *)(a1 + 8) + v8) = (char)v12;\n    v8++;\n    while (v4 != v8) {\n        // 0x406ca8\n        v9 = *(int64_t *)(a1 + 120);\n        v10 = (int64_t)*(char *)(v8 + a1 + *(int64_t *)(a1 + 40));\n        v11 = v10;\n        if (v9 != 0) {\n            // 0x406ce8\n            v11 = (int64_t)*(char *)(v9 + v10);\n        }\n        // 0x406cbf\n        v12 = *(int32_t *)(4 * v11 + (int64_t)*v7);\n        *(char *)(*(int64_t *)(a1 + 8) + v8) = (char)v12;\n        v8++;\n    }\n    // 0x406cd5\n    *v5 = v4;\n    *(int64_t *)(a1 + 56) = v4;\n    return (int64_t)v7;\n}\n"
        },
        {
            "funcName": "function_406d00",
            "funcStartAddr": "406d00",
            "funcEndAddr": "406ea6",
            "decompiledFuncCode": "int64_t function_406d00(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 88); // 0x406d0f\n    int64_t v2 = *v1; // 0x406d0f\n    int64_t * v3 = (int64_t *)(a1 + 48); // 0x406d13\n    int64_t v4 = *v3; // 0x406d13\n    int64_t * v5 = (int64_t *)(a1 + 64); // 0x406d17\n    int64_t v6 = *v5; // 0x406d17\n    int64_t v7 = v6 - v2; // 0x406d17\n    uint64_t v8 = v7 == 0 | v7 < 0 != ((v7 ^ v6) & (v6 ^ v2)) < 0 ? v6 : v2; // 0x406d1b\n    int64_t result; // 0x406d00\n    if (v8 <= v4) {\n        // 0x406db8\n        *v3 = v4;\n        *(int64_t *)(a1 + 56) = v4;\n        return result;\n    }\n    int64_t * v9 = (int64_t *)(a1 + 120); // 0x406d30\n    int64_t * v10 = (int64_t *)(a1 + 32);\n    int64_t * v11 = (int64_t *)(a1 + 40);\n    int32_t * v12 = (int32_t *)(a1 + 144);\n    int64_t v13; // bp-104, 0x406d00\n    int64_t v14 = &v13;\n    int64_t v15 = v4; // 0x406d00\n    int64_t v16; // 0x406d00\n    int64_t v17; // 0x406d00\n    int64_t v18; // 0x406d00\n    int32_t v19; // bp-108, 0x406d00\n    int64_t v20; // 0x406d37\n    int64_t result2; // 0x406e78\n    while (true) {\n      lab_0x406d30:\n        // 0x406d30\n        v17 = v15;\n        int64_t v21 = *v9; // 0x406d30\n        v20 = *v10;\n        int64_t v22 = v8 - v17; // 0x406d3b\n        int64_t v23; // 0x406d00\n        if (v21 != 0) {\n            // 0x406e10\n            v23 = v14;\n            if (*v12 >= 1) {\n                // 0x406e1e\n                v23 = v14;\n                int64_t v24 = 0; // 0x406e28\n                int64_t v25 = v21; // 0x406e28\n                if (v22 >= 0 == (v22 != 0)) {\n                    int64_t v26 = v24 + v17;\n                    unsigned char v27 = *(char *)(v26 + v25 + *v11); // 0x406e4e\n                    char v28 = *(char *)(v25 + (int64_t)v27); // 0x406e51\n                    *(char *)(*(int64_t *)(a1 + 8) + v26) = v28;\n                    *(char *)(v24 + v14) = v28;\n                    int64_t v29 = v24 + 1; // 0x406e62\n                    v23 = v14;\n                    while (!((v22 == v29 | (v29 & 0xffffffff) >= (int64_t)*v12))) {\n                        // 0x406e3d\n                        v25 = *v9;\n                        v26 = v29 + v17;\n                        v27 = *(char *)(v26 + v25 + *v11);\n                        v28 = *(char *)(v25 + (int64_t)v27);\n                        *(char *)(*(int64_t *)(a1 + 8) + v26) = v28;\n                        *(char *)(v29 + v14) = v28;\n                        v29++;\n                        v23 = v14;\n                    }\n                }\n            }\n        } else {\n            // 0x406d47\n            v23 = v21 + v17 + *v11;\n        }\n        int64_t v30 = function_406400(&v19, v23, v22); // 0x406d59\n        if (v30 < 0xffffffffffffffff) {\n            // 0x406d68\n            v16 = v30;\n            v18 = v19;\n            if (v30 == -2) {\n                // 0x406e78\n                result2 = *v1;\n                if (*v5 < result2) {\n                    // break -> 0x406e86\n                    break;\n                }\n                goto lab_0x406dd0;\n            } else {\n                goto lab_0x406d76;\n            }\n        } else {\n            goto lab_0x406dd0;\n        }\n    }\n    // 0x406e86\n    *v10 = v20;\n    // 0x406db8\n    *v3 = v17;\n    *(int64_t *)(a1 + 56) = v17;\n    return result2;\n  lab_0x406dd0:;\n    int64_t v31 = *v9; // 0x406dd3\n    unsigned char v32 = *(char *)(v17 + (int64_t)&v19 + *v11); // 0x406dde\n    int64_t v33 = v32; // 0x406dde\n    v19 = v32;\n    int64_t v34 = v33; // 0x406de8\n    if (v31 != 0) {\n        unsigned char v35 = *(char *)(v31 + v33); // 0x406e8f\n        v19 = v35;\n        v34 = v35;\n    }\n    // 0x406dee\n    *v10 = v20;\n    v16 = 1;\n    v18 = v34;\n    goto lab_0x406d76;\n  lab_0x406d76:;\n    int64_t v36 = v16;\n    int64_t v37 = *(int64_t *)(a1 + 16); // 0x406d76\n    int64_t v38 = v17 + 1; // 0x406d7a\n    int64_t v39 = v37 + 4 * v17;\n    *(int32_t *)v39 = (int32_t)v18;\n    int64_t v40 = v36 + v17; // 0x406d89\n    int64_t v41; // 0x406d00\n    if (v38 < v40) {\n        int64_t v42 = v39 + 4; // 0x406d9a\n        *(int32_t *)v42 = -1;\n        v42 += 4;\n        while (v37 + 4 * v40 != v42) {\n            // 0x406da0\n            *(int32_t *)v42 = -1;\n            v42 += 4;\n        }\n        // 0x406daf\n        v15 = v40;\n        result = v36;\n        v41 = v40;\n        if (v40 >= v8) {\n            // 0x406db8\n            *v3 = v41;\n            *(int64_t *)(a1 + 56) = v41;\n            return result;\n        }\n    } else {\n        // 0x406e00\n        v15 = v38;\n        result = v36;\n        v41 = v38;\n        if (v38 >= v8) {\n            // 0x406db8\n            *v3 = v41;\n            *(int64_t *)(a1 + 56) = v41;\n            return result;\n        }\n    }\n    // 0x406d30\n    goto lab_0x406d30;\n}\n"
        },
        {
            "funcName": "function_406eb0",
            "funcStartAddr": "406eb0",
            "funcEndAddr": "4074ad",
            "decompiledFuncCode": "int64_t function_406eb0(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 88); // 0x406ec1\n    int64_t v2 = *v1; // 0x406ec1\n    int64_t * v3 = (int64_t *)(a1 + 64); // 0x406ec5\n    int64_t v4 = *v3; // 0x406ec5\n    int64_t v5 = v4 - v2; // 0x406ec5\n    int64_t v6 = v5 == 0 | v5 < 0 != ((v5 ^ v4) & (v4 ^ v2)) < 0 ? v4 : v2; // 0x406ec9\n    int64_t * v7 = (int64_t *)(a1 + 48); // 0x406ed5\n    int64_t v8 = *v7; // 0x406ed5\n    int64_t * v9; // 0x406eb0\n    int64_t * v10; // 0x406eb0\n    int64_t v11; // 0x406eb0\n    int64_t v12; // 0x406eb0\n    int64_t v13; // 0x406eb0\n    int64_t v14; // 0x406eb0\n    int64_t v15; // 0x406eb0\n    int64_t v16; // 0x406eb0\n    int64_t v17; // 0x406eb0\n    int64_t v18; // 0x406eb0\n    int64_t v19; // 0x406eb0\n    int64_t v20; // 0x406eb0\n    int64_t wstr; // bp-120, 0x406eb0\n    struct _TYPEDEF___mbstate_t * v21; // bp-132, 0x406eb0\n    int32_t * v22; // 0x406eb0\n    int64_t v23; // 0x406eb0\n    int64_t * v24; // 0x407070\n    int64_t * v25; // 0x406eb0\n    int64_t * v26; // 0x406eb0\n    int64_t * v27; // 0x406eb0\n    int64_t v28; // 0x40707a\n    int64_t v29; // 0x4070a7\n    if (*(char *)(a1 + 138) != 0) {\n        goto lab_0x406ee6;\n    } else {\n        int64_t * v30 = (int64_t *)(a1 + 120);\n        if (*v30 == 0) {\n            // 0x407050\n            if (*(char *)(a1 + 140) != 0) {\n                goto lab_0x406ee6;\n            } else {\n                // 0x40705d\n                v16 = v8;\n                if (v8 < v6) {\n                    while (true) {\n                      lab_0x407070:\n                        // 0x407070\n                        v14 = v13;\n                        v28 = v14 + v19 + *v24;\n                        unsigned char v31 = *(char *)v28; // 0x40707d\n                        if (v31 <= -1) {\n                            goto lab_0x407099;\n                        } else {\n                            // 0x407088\n                            struct _TYPEDEF___mbstate_t * ps; // 0x40706a\n                            if (mbsinit(ps) != 0) {\n                                int32_t v32 = *(int32_t *)(4 * (int64_t)v31 + (int64_t)*__ctype_toupper_loc()); // 0x4071a4\n                                *(char *)(*v25 + v14) = (char)v32;\n                                unsigned char v33 = *(char *)(*v25 + v14); // 0x4071b4\n                                *(int32_t *)(*v26 + 4 * v14) = (int32_t)v33;\n                                int64_t v34; // 0x406eb0\n                                v20 = v34;\n                                v15 = v14 + 1;\n                                goto lab_0x40715a;\n                            } else {\n                                goto lab_0x407099;\n                            }\n                        }\n                    }\n                  lab_0x407290:\n                    // 0x407290\n                    v10 = v30;\n                    v9 = v27;\n                    v22 = (int32_t *)&v21;\n                    v23 = v29;\n                    v17 = v6;\n                    v18 = &wstr;\n                    v11 = v14;\n                    v12 = v14;\n                    goto lab_0x406f10;\n                } else {\n                    goto lab_0x407163;\n                }\n            }\n        } else {\n            goto lab_0x406ee6;\n        }\n    }\n  lab_0x407163:\n    // 0x407163\n    *v7 = v16;\n    *(int64_t *)(a1 + 56) = v16;\n    // 0x40703a\n    return 0;\n  lab_0x406eea:;\n    // 0x406eea\n    int64_t v35; // 0x406eb0\n    int64_t v36 = v35;\n    int64_t v37; // 0x406eb0\n    int64_t v38 = v37;\n    int64_t v39; // 0x406eb0\n    int64_t v40 = v39;\n    int64_t v41 = v38; // 0x406eed\n    int64_t v42 = v36; // 0x406eed\n    int64_t v43; // 0x406eb0\n    if (v40 > v36) {\n        // 0x406ef3\n        v10 = (int64_t *)(a1 + 120);\n        v9 = (int64_t *)(a1 + 32);\n        v22 = (int32_t *)&v21;\n        v23 = v40 - v36;\n        v17 = v40;\n        v18 = v43;\n        v11 = v38;\n        v12 = v36;\n        goto lab_0x406f10;\n    } else {\n        goto lab_0x407030;\n    }\n  lab_0x407099:\n    // 0x407099\n    v29 = v6 - v14;\n    int32_t ps2 = (int32_t)*v27; // bp-128, 0x4070aa\n    uint64_t v44 = function_406400((int32_t *)&v21, v28, v29); // 0x4070c1\n    if (v44 < 0xfffffffffffffffe) {\n        int32_t wc = (int64_t)v21; // 0x4070d7\n        int32_t wc2 = towupper(wc); // 0x4070dd\n        int64_t v45; // 0x407117\n        if (wc2 == wc) {\n            int64_t v46 = *v25; // 0x407178\n            int64_t v47 = *v24; // 0x40717c\n            int64_t v48 = v46 + v14; // 0x407186\n            memcpy((int64_t *)v48, (int64_t *)(v47 + v14 + v48), (int32_t)v44);\n        } else {\n            int32_t v49 = wcrtomb((char *)&wstr, wc2, (struct _TYPEDEF___mbstate_t *)&ps2); // 0x4070fd\n            if (v44 != (int64_t)v49) {\n                // break -> 0x407290\n                goto lab_0x407290;\n            }\n            // 0x40710b\n            v45 = *v25 + v14;\n            memcpy((int64_t *)v45, &wstr, (int32_t)v44);\n        }\n        int64_t v50 = v45;\n        int64_t v51 = *v26; // 0x40711f\n        int64_t v52 = v14 + 1; // 0x40712b\n        int64_t v53 = v51 + 4 * v14;\n        *(int32_t *)v53 = wc2;\n        int64_t v54 = v44 + v14; // 0x407133\n        v20 = v50;\n        v15 = v52;\n        if (v52 < v54) {\n            int64_t v55 = v53 + 4; // 0x407144\n            *(int32_t *)v55 = -1;\n            v55 += 4;\n            v20 = v50;\n            v15 = v54;\n            while (v51 + 4 * v54 != v55) {\n                // 0x407148\n                *(int32_t *)v55 = -1;\n                v55 += 4;\n                v20 = v50;\n                v15 = v54;\n            }\n        }\n    } else {\n        int64_t v56; // 0x406eb0\n        if (v44 != -2) {\n            unsigned char v57 = *(char *)(v14 + v56 + *v24); // 0x40720f\n            *(char *)(*v25 + v14) = v57;\n            *(int32_t *)(*v26 + 4 * v14) = (int32_t)v57;\n            *v27 = (int64_t)ps2;\n            v20 = v56;\n            v15 = v14 + 1;\n        } else {\n            // 0x4071ce\n            if (*v3 < *v1) {\n                // 0x407447\n                *v27 = (int64_t)ps2;\n                v16 = v14;\n                goto lab_0x407163;\n            }\n            unsigned char v58 = *(char *)(v14 + v56 + *v24); // 0x4071ea\n            *(char *)(*v25 + v14) = v58;\n            *(int32_t *)(*v26 + 4 * v14) = (int32_t)v58;\n            v20 = v56;\n            v15 = v14 + 1;\n        }\n    }\n    goto lab_0x40715a;\n  lab_0x40715a:\n    // 0x40715a\n    v19 = v20;\n    v13 = v15;\n    v16 = v15;\n    if (v6 <= v15) {\n        goto lab_0x407163;\n    }\n    goto lab_0x407070;\n  lab_0x406ee6:\n    // 0x406ee6\n    v39 = v6;\n    v43 = a1;\n    v37 = *(int64_t *)(a1 + 56);\n    v35 = v8;\n    goto lab_0x406eea;\n  lab_0x407030:\n    // 0x407030\n    *v7 = v42;\n    *(int64_t *)(a1 + 56) = v41;\n    // 0x40703a\n    return 0;\n  lab_0x406f10:;\n    int64_t v59 = v12;\n    int64_t v60 = v11;\n    int64_t v61 = v17;\n    int64_t v62 = v23;\n    int64_t * v63 = v9;\n    int64_t * v64 = v10;\n    int64_t v65 = *v64; // 0x406f14\n    ps2 = (int32_t)*v63;\n    int64_t v66; // 0x406eb0\n    if (v65 != 0) {\n        int32_t v67 = *(int32_t *)(a1 + 144); // 0x40722f\n        if (v62 < 1 || v67 < 1) {\n            // 0x40722f\n            v66 = &wstr;\n        } else {\n            int64_t v68 = &wstr;\n            int64_t v69 = 2 * (*(int64_t *)(a1 + 40) + v60); // 0x40725c\n            int64_t v70 = 0;\n            char v71 = *(char *)(v65 + (int64_t)*(char *)(v70 + v69)); // 0x407270\n            *(char *)(v70 + v68) = v71;\n            v66 = v68;\n            while (v70 != (int64_t)(v67 - 1)) {\n                int64_t v72 = v70 + 1; // 0x407261\n                v66 = v68;\n                if (v62 == v72) {\n                    // break -> 0x406f35\n                    break;\n                }\n                v70 = v72;\n                v71 = *(char *)(v65 + (int64_t)*(char *)(v70 + v69));\n                *(char *)(v70 + v68) = v71;\n                v66 = v68;\n            }\n        }\n    } else {\n        // 0x406f26\n        v66 = v60 + v18 + *(int64_t *)(a1 + 40);\n    }\n    int64_t v73 = v66;\n    uint64_t v74 = function_406400(v22, v73, v62); // 0x406f48\n    int64_t v75; // 0x406eb0\n    int32_t wc4; // 0x406f63\n    if (v74 < 0xfffffffffffffffe) {\n        int32_t wc3 = (int64_t)v21; // 0x406f5e\n        wc4 = towupper(wc3);\n        if (wc4 == wc3) {\n            goto lab_0x407298;\n        } else {\n            int32_t v76 = wcrtomb((char *)&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps2); // 0x406f91\n            int64_t v77 = v76; // 0x406f91\n            if (v74 != v77) {\n                if (v76 == -1) {\n                    goto lab_0x407298;\n                } else {\n                    int64_t v78 = v59 + v77; // 0x40736b\n                    uint64_t v79 = *v3; // 0x407376\n                    if (v78 > v79) {\n                        goto lab_0x40701f;\n                    } else {\n                        int64_t * v80 = (int64_t *)(a1 + 24); // 0x407383\n                        int64_t v81 = *v80; // 0x407383\n                        int64_t v82 = v81; // 0x407388\n                        if (v81 == 0) {\n                            int64_t * mem = malloc(8 * (int32_t)v79); // 0x407467\n                            int64_t v83 = (int64_t)mem; // 0x407467\n                            *v80 = v83;\n                            v82 = v83;\n                            if (mem == NULL) {\n                                // 0x40703a\n                                return 12;\n                            }\n                        }\n                        char * v84 = (char *)(a1 + 140); // 0x40738e\n                        if (*v84 == 0) {\n                            int64_t v85 = v82; // 0x40739d\n                            if (v59 != 0) {\n                                int64_t v86 = 0;\n                                *(int64_t *)(8 * v86 + v85) = v86;\n                                int64_t v87 = v86 + 1; // 0x4073a7\n                                while (v59 != v87) {\n                                    // 0x4073a3\n                                    v86 = v87;\n                                    *(int64_t *)(8 * v86 + v85) = v86;\n                                    v87 = v86 + 1;\n                                }\n                            }\n                            // 0x4073b0\n                            *v84 = 1;\n                        }\n                        // 0x4073b8\n                        memcpy((int64_t *)(*(int64_t *)(a1 + 8) + v59), &wstr, v76);\n                        int64_t v88 = v74 - 1; // 0x4073d8\n                        int64_t v89 = *(int64_t *)(a1 + 16) + 4 * v59; // 0x4073dc\n                        *(int32_t *)v89 = wc4;\n                        int64_t v90 = *v80 + 8 * v59; // 0x4073e7\n                        *(int64_t *)v90 = v60;\n                        if (v76 >= 2) {\n                            uint64_t v91 = 1;\n                            int64_t v92 = v91 >= v74 ? v88 : v91; // 0x4073ff\n                            *(int64_t *)(8 * v91 + v90) = v92 + v60;\n                            *(int32_t *)(4 * v91 + v89) = -1;\n                            int64_t v93 = v91 + 1; // 0x407411\n                            while (v93 != v77) {\n                                // 0x4073f9\n                                v91 = v93;\n                                v92 = v91 >= v74 ? v88 : v91;\n                                *(int64_t *)(8 * v91 + v90) = v92 + v60;\n                                *(int32_t *)(4 * v91 + v89) = -1;\n                                v93 = v91 + 1;\n                            }\n                        }\n                        int64_t v94 = v77 - v74; // 0x40741e\n                        int64_t v95 = *v1 + v94; // 0x407421\n                        *v1 = v95;\n                        if (v60 < *(int64_t *)(a1 + 96)) {\n                            int64_t * v96 = (int64_t *)(a1 + 104); // 0x40742e\n                            *v96 = *v96 + v94;\n                        }\n                        int64_t v97 = *v3; // 0x407432\n                        int64_t v98 = v97 - v95; // 0x407432\n                        int64_t v99 = v98 == 0 | v98 < 0 != ((v98 ^ v97) & (v97 ^ v95)) < 0 ? v97 : v95; // 0x40743a\n                        v39 = v99;\n                        v43 = v88;\n                        v37 = v74 + v60;\n                        v35 = v78;\n                        goto lab_0x406eea;\n                    }\n                }\n            } else {\n                int64_t v100 = *(int64_t *)(a1 + 8) + v59; // 0x406fb9\n                memcpy((int64_t *)v100, &wstr, (int32_t)v74);\n                v75 = v100;\n                goto lab_0x406fc5;\n            }\n        }\n    } else {\n        if (v74 != -2) {\n            goto lab_0x4072cd;\n        } else {\n            // 0x4072bf\n            if (*v3 < *v1) {\n                goto lab_0x40701f;\n            } else {\n                goto lab_0x4072cd;\n            }\n        }\n    }\n  lab_0x407298:;\n    int64_t v101 = *(int64_t *)(a1 + 8) + v59; // 0x4072a8\n    memcpy((int64_t *)v101, (int64_t *)v73, (int32_t)v74);\n    v75 = v101;\n    goto lab_0x406fc5;\n  lab_0x4072cd:;\n    int64_t v114 = (int64_t)&v21; // 0x406f43\n    int64_t v115 = *v64; // 0x4072d0\n    int64_t v116 = (int64_t)*(char *)(v60 + v114 + *(int64_t *)(a1 + 40)); // 0x4072db\n    int64_t v117 = v116; // 0x4072e1\n    if (v115 != 0) {\n        // 0x4074a4\n        v117 = (int64_t)*(char *)(v115 + v116);\n    }\n    // 0x4072e7\n    *(char *)(*(int64_t *)(a1 + 8) + v59) = (char)v117;\n    if (*(char *)(a1 + 140) != 0) {\n        // 0x407497\n        *(int64_t *)(*(int64_t *)(a1 + 24) + 8 * v59) = v60;\n    }\n    int64_t v118 = *(int64_t *)(a1 + 16); // 0x407300\n    int64_t v119 = v60 + 1; // 0x407304\n    int64_t v120 = v59 + 1; // 0x407308\n    *(int32_t *)(v118 + 4 * v59) = (int32_t)v117;\n    v39 = v61;\n    v43 = v114;\n    v37 = v119;\n    v35 = v120;\n    if (v74 == -1) {\n        // 0x407319\n        *v63 = (int64_t)ps2;\n        v39 = v61;\n        v43 = v114;\n        v37 = v119;\n        v35 = v120;\n    }\n    goto lab_0x406eea;\n  lab_0x406fc5:;\n    int64_t v102 = v75;\n    int64_t v103; // 0x406eb0\n    if (*(char *)(a1 + 140) != 0) {\n        // 0x407330\n        v103 = v60;\n        if (v74 != 0) {\n            int64_t v104 = v74 + v60; // 0x407343\n            int64_t v105 = v59 - v60; // 0x407348\n            int64_t v106 = v60;\n            *(int64_t *)(8 * (v105 + v106) + *(int64_t *)(a1 + 24)) = v106;\n            int64_t v107 = v106 + 1; // 0x407353\n            v103 = v104;\n            while (v104 != v107) {\n                // 0x40734f\n                v106 = v107;\n                *(int64_t *)(8 * (v105 + v106) + *(int64_t *)(a1 + 24)) = v106;\n                v107 = v106 + 1;\n                v103 = v104;\n            }\n        }\n    } else {\n        // 0x406fd3\n        v103 = v74 + v60;\n    }\n    int64_t v108 = v103;\n    int64_t v109 = *(int64_t *)(a1 + 16); // 0x406fda\n    int64_t v110 = v59 + 1; // 0x406fde\n    int64_t v111 = v74 + v59; // 0x406fe2\n    int64_t v112 = v109 + 4 * v59;\n    *(int32_t *)v112 = wc4;\n    v39 = v61;\n    v43 = v102;\n    v37 = v108;\n    v35 = v110;\n    if (v110 < v111) {\n        int64_t v113 = v112 + 4; // 0x407004\n        while (true) {\n            // 0x407008\n            *(int32_t *)v113 = -1;\n            v113 += 4;\n            v39 = v61;\n            v43 = v102;\n            v37 = v108;\n            v35 = v111;\n            if (v109 + 4 * v111 == v113) {\n                goto lab_0x406eea;\n            }\n        }\n    }\n    goto lab_0x406eea;\n  lab_0x40701f:\n    // 0x40701f\n    *v63 = (int64_t)ps2;\n    v41 = v60;\n    v42 = v59;\n    goto lab_0x407030;\n}\n"
        },
        {
            "funcName": "function_4074b0",
            "funcStartAddr": "4074b0",
            "funcEndAddr": "4075fe",
            "decompiledFuncCode": "int64_t function_4074b0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a1 + 64); // 0x4074c0\n    uint64_t v2 = *v1; // 0x4074c0\n    if (v2 >= 0xfffffffffffffff) {\n        // 0x40755b\n        return 12;\n    }\n    int64_t * v3 = (int64_t *)(a1 + 88); // 0x4074cd\n    int64_t v4 = *v3; // 0x4074cd\n    int64_t v5 = 2 * v2; // 0x4074d1\n    int64_t v6 = 0x100000000 * a2 >> 32; // 0x4074d4\n    int64_t v7 = v5 - v4; // 0x4074da\n    int64_t v8 = v7 < 0 == ((v7 ^ v5) & (v4 ^ v5)) < 0 == (v7 != 0) ? v4 : v5; // 0x4074dd\n    int64_t v9 = v8 - v6; // 0x4074e1\n    int64_t v10 = function_406910(a1, v9 < 0 == ((v9 ^ v8) & (v8 ^ v6)) < 0 ? v8 : v6); // 0x4074e8\n    int64_t result = v10 & 0xffffffff; // 0x4074ed\n    if ((int32_t)v10 != 0) {\n        // 0x40755b\n        return result;\n    }\n    int64_t * v11 = (int64_t *)(a1 + 184); // 0x4074f3\n    int64_t v12 = *v11; // 0x4074f3\n    if (v12 != 0) {\n        int64_t * mem = realloc((int64_t *)v12, 8 * (int32_t)*v1 + 8); // 0x40750b\n        if (mem == NULL) {\n            // 0x40755b\n            return 12;\n        }\n        // 0x407519\n        *v11 = (int64_t)mem;\n    }\n    int32_t v13 = *(int32_t *)(a1 + 144); // 0x407527\n    if (*(char *)(a1 + 136) != 0) {\n        if (v13 >= 2) {\n            // 0x40753b\n            return function_406eb0(a1);\n        }\n        // 0x4075d8\n        function_406c80(a1);\n        return result;\n    }\n    if (v13 > 1) {\n        // 0x4075c0\n        function_406d00(a1);\n        return result;\n    }\n    int64_t * v14 = (int64_t *)(a1 + 120); // 0x40756d\n    int64_t v15 = *v14; // 0x40756d\n    if (v15 == 0) {\n        // 0x40755b\n        return result;\n    }\n    int64_t v16 = *v3; // 0x407576\n    int64_t * v17 = (int64_t *)(a1 + 48); // 0x40757a\n    uint64_t v18 = *v17; // 0x40757a\n    int64_t v19 = *v1; // 0x40757e\n    int64_t v20 = v19 - v16; // 0x40757e\n    uint64_t v21 = v20 == 0 | v20 < 0 != ((v20 ^ v19) & (v19 ^ v16)) < 0 ? v19 : v16; // 0x407582\n    if (v21 <= v18) {\n        // 0x40758c\n        *(int64_t *)(a1 + 56) = v18;\n        // 0x40755b\n        return result;\n    }\n    int64_t * v22 = (int64_t *)(a1 + 40); // 0x40759a\n    unsigned char v23 = *(char *)(v18 + v12 + *v22); // 0x40759e\n    int64_t * v24 = (int64_t *)(a1 + 8); // 0x4075a5\n    *(char *)(*v24 + v18) = *(char *)(v15 + (int64_t)v23);\n    int64_t v25 = v18 + 1; // 0x4075ac\n    int64_t v26 = v25; // 0x4075b3\n    if (v21 != v25) {\n        unsigned char v27 = *(char *)(v26 + v12 + *v22); // 0x40759e\n        *(char *)(*v24 + v26) = *(char *)(*v14 + (int64_t)v27);\n        v26++;\n        while (v21 != v26) {\n            // 0x407590\n            v27 = *(char *)(v26 + v12 + *v22);\n            *(char *)(*v24 + v26) = *(char *)(*v14 + (int64_t)v27);\n            v26++;\n        }\n    }\n    // 0x4075b5\n    *v17 = v21;\n    *(int64_t *)(a1 + 56) = v21;\n    // 0x40755b\n    return result;\n}\n"
        },
        {
            "funcName": "function_407600",
            "funcStartAddr": "407600",
            "funcEndAddr": "407686",
            "decompiledFuncCode": "int64_t function_407600(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a1 + 64); // 0x407607\n    int64_t * v2 = (int64_t *)(a1 + 192); // 0x40760e\n    int64_t v3 = *v2; // 0x40760e\n    if (v1 > a2) {\n        goto lab_0x407640;\n    } else {\n        // 0x40761a\n        if (v1 < *(int64_t *)(a1 + 88)) {\n            int64_t result = function_4074b0(a1, a2 + 1 & 0xffffffff); // 0x407626\n            if ((int32_t)result != 0) {\n                // 0x407636\n                return result;\n            }\n            goto lab_0x40762f;\n        } else {\n            goto lab_0x407640;\n        }\n    }\n  lab_0x407640:;\n    uint64_t v4 = *(int64_t *)(a1 + 48); // 0x407640\n    if (v4 <= a2) {\n        // 0x407649\n        if (v4 < *(int64_t *)(a1 + 88)) {\n            int64_t result2 = function_4074b0(a1, a2 + 1 & 0xffffffff); // 0x407655\n            if ((int32_t)result2 != 0) {\n                // 0x407636\n                return result2;\n            }\n        }\n    }\n    goto lab_0x40762f;\n  lab_0x40762f:\n    // 0x40762f\n    if (v3 < a2) {\n        int64_t v5 = *(int64_t *)(a1 + 184); // 0x407660\n        memset((int64_t *)(8 * v3 + 8 + v5), 0, 8 * (int32_t)(a2 - v3));\n        *v2 = a2;\n    }\n    // 0x407636\n    return 0;\n}\n"
        },
        {
            "funcName": "function_407690",
            "funcStartAddr": "407690",
            "funcEndAddr": "4076ae",
            "decompiledFuncCode": "int64_t function_407690(int64_t a1) {\n    int64_t * v1 = (int64_t *)a1; // 0x407697\n    free(v1);\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    free(v1);\n    return &g81;\n}\n"
        },
        {
            "funcName": "function_4076b0",
            "funcStartAddr": "4076b0",
            "funcEndAddr": "4076d8",
            "decompiledFuncCode": "int64_t function_4076b0(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 + 8) & 0x400ff; // 0x4076b3\n    switch (result) {\n        case 6: {\n            // 0x4076c8\n            return function_407690(a1);\n        }\n        case 3: {\n            // 0x4076d0\n            free((int64_t *)a1);\n            return &g81;\n        }\n    }\n    // 0x4076c2\n    return result;\n}\n"
        },
        {
            "funcName": "function_4076e0",
            "funcStartAddr": "4076e0",
            "funcEndAddr": "4076f4",
            "decompiledFuncCode": "int64_t function_4076e0(int64_t a1, int64_t a2) {\n    // 0x4076e0\n    function_4076b0(a2 + 40);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_407700",
            "funcStartAddr": "407700",
            "funcEndAddr": "4078ce",
            "decompiledFuncCode": "int64_t function_407700(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x407700\n    int128_t v1; // 0x407700\n    int128_t v2 = v1;\n    int64_t * v3 = (int64_t *)(a1 + 16); // 0x407714\n    uint64_t v4 = *v3; // 0x407714\n    int64_t * v5 = (int64_t *)(a1 + 8); // 0x407718\n    uint64_t v6 = *v5; // 0x407718\n    int64_t v7; // 0x407700\n    int64_t v8; // 0x407700\n    int64_t v9; // 0x407700\n    if (v4 >= v6) {\n        uint64_t v10 = 2 * v6; // 0x4077da\n        if (v10 >= 0xaaaaaaaaaaaaaab) {\n            // 0x4077b8\n            return -1;\n        }\n        int32_t v11 = v6;\n        int64_t * mem = realloc((int64_t *)v4, 32 * v11); // 0x4077f7\n        if (mem == NULL) {\n            // 0x4077b8\n            return -1;\n        }\n        // 0x407805\n        *(int64_t *)a1 = (int64_t)mem;\n        int64_t * v12 = (int64_t *)(a1 + 24); // 0x40780b\n        int32_t v13 = 16 * v11; // 0x40781d\n        int64_t * mem2 = realloc((int64_t *)*v12, v13); // 0x40781d\n        int64_t * v14 = (int64_t *)(a1 + 32); // 0x407822\n        int64_t * mem3 = realloc((int64_t *)*v14, v13); // 0x40782c\n        int64_t * v15 = (int64_t *)(a1 + 40); // 0x407831\n        int32_t v16 = 48 * v11; // 0x40783c\n        int64_t * mem4 = realloc((int64_t *)*v15, v16); // 0x40783c\n        int64_t * v17 = (int64_t *)(a1 + 48); // 0x407841\n        int64_t * mem5 = realloc((int64_t *)*v17, v16); // 0x40784b\n        if (mem2 == NULL | mem3 == NULL || mem4 == NULL || mem5 == NULL) {\n            // 0x407890\n            free(mem2);\n            free(mem3);\n            free(mem4);\n            free(mem5);\n            // 0x4077b8\n            return -1;\n        }\n        int64_t v18 = (int64_t)mem2; // 0x40781d\n        int64_t v19 = (int64_t)mem4; // 0x40783c\n        *v12 = v18;\n        *v14 = (int64_t)mem3;\n        *v15 = v19;\n        *v17 = (int64_t)mem5;\n        *v5 = v10;\n        v9 = *v3;\n        v7 = v18;\n        v8 = v19;\n    } else {\n        // 0x407725\n        v9 = v4;\n        v7 = *(int64_t *)(a1 + 24);\n        v8 = *(int64_t *)(a1 + 40);\n    }\n    int64_t v20 = 17 * v9; // 0x40773c\n    char v21 = a3; // 0x40773f\n    int64_t v22 = v20 + 8; // 0x407742\n    *(int64_t *)v22 = a3;\n    *(int64_t *)v20 = a2;\n    *(int32_t *)v22 = (int32_t)a3 & -0x3ff01;\n    bool v23 = v21 == 6; // 0x407752\n    if (v21 == 5) {\n        int32_t v24 = *(int32_t *)(a1 + 180); // 0x407754\n        int32_t v25 = v24 - 1; // 0x407754\n        v23 = v25 < 0 == (v24 & -v24) < 0 == (v25 != 0);\n    }\n    char * v26 = (char *)(v20 + 10); // 0x40775e\n    int128_t v27 = __asm_pxor(v2, v2); // 0x407765\n    *v26 = 16 * (char)v23 | *v26 & -17;\n    *(int64_t *)(v7 + 8 * v9) = -1;\n    int64_t v28 = 24 * *v3 + v8; // 0x407781\n    __asm_movups(*(int128_t *)v28, v27);\n    *(int64_t *)(v28 + 16) = 0;\n    int64_t v29 = *(int64_t *)(a1 + 48) + 24 * *v3; // 0x40779d\n    __asm_movups(*(int128_t *)v29, v27);\n    *(int64_t *)(v29 + 16) = 0;\n    int64_t result = *v3; // 0x4077ac\n    *v3 = result + 1;\n    // 0x4077b8\n    return result;\n}\n"
        },
        {
            "funcName": "function_4078d0",
            "funcStartAddr": "4078d0",
            "funcEndAddr": "40796f",
            "decompiledFuncCode": "int64_t function_4078d0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 16 * a2; // 0x4078d7\n    int64_t v2 = v1 + a1;\n    int64_t result = function_407700(a1, *(int64_t *)v2, *(int64_t *)(v2 + 8)); // 0x4078f6\n    if (result != -1) {\n        int64_t v3 = a3 & 0xffffffff; // 0x4078db\n        int64_t v4 = 16 * result + v3; // 0x407915\n        int32_t v5 = 256 * (int32_t)a3; // 0x407918\n        int32_t * v6 = (int32_t *)(v4 + 8); // 0x407923\n        int32_t v7 = *v6 & -0x3ff01; // 0x407926\n        *v6 = v7 | v5 & 0x3ff00;\n        uint32_t v8 = (*(int32_t *)((v1 | 8) + v3) | v5) & 0x3ff00 | v7; // 0x40794a\n        *v6 = v8;\n        *(char *)(v4 + 10) = (char)(v8 / 0x10000) | 4;\n        *(int64_t *)(*(int64_t *)(a1 + 32) + 8 * result) = a2;\n    }\n    // 0x407964\n    return result;\n}\n"
        },
        {
            "funcName": "function_407970",
            "funcStartAddr": "407970",
            "funcEndAddr": "407bf4",
            "decompiledFuncCode": "int64_t function_407970(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t * v1 = (int64_t *)(a1 + 40);\n    int64_t * v2 = (int64_t *)(a1 + 24);\n    int64_t v3 = a1; // 0x40798a\n    int64_t v4 = a2; // 0x40798a\n    int64_t v5 = a3; // 0x40798a\n    int64_t v6 = a5 & 0xffffffff;\n    int32_t v7 = v6;\n    int64_t v8; // 0x407970\n    int64_t v9; // 0x407970\n    int64_t v10; // 0x407970\n    int64_t v11; // 0x407970\n    int64_t result; // 0x407970\n    int64_t v12; // 0x407970\n    int64_t v13; // 0x407970\n    int64_t v14; // 0x407970\n    int64_t v15; // 0x407970\n    int64_t v16; // 0x407b24\n    int64_t v17; // 0x407b28\n    int64_t v18; // 0x407b28\n    int64_t v19; // 0x407b3f\n    int64_t v20; // 0x4079b1\n    int64_t v21; // 0x4079b5\n    int64_t v22; // 0x4079b9\n    int64_t v23; // 0x407b55\n    int64_t v24; // 0x407bc8\n    int64_t v25; // 0x4079cf\n    int64_t v26; // 0x4079d3\n    int64_t v27; // 0x4079eb\n    int64_t v28; // 0x4079ef\n    int64_t v29; // 0x4079f6\n    int64_t v30; // 0x4079fa\n    int64_t v31; // 0x407b79\n    int64_t v32; // 0x407970\n    int64_t v33; // 0x407bb3\n    int64_t v34; // 0x407a28\n    int64_t v35; // 0x407a2b\n    int64_t v36; // 0x407995\n    int64_t v37; // 0x4079a3\n    while (true) {\n        // 0x40798f\n        v8 = v5;\n        v10 = v4;\n        v13 = v3;\n        v36 = *v1;\n        v37 = v13 + 8 + 16 * v10;\n        if (*(char *)v37 == 4) {\n            // 0x407b10\n            v16 = 24 * v8;\n            v17 = 8 * v10;\n            v18 = *(int64_t *)(*v2 + v17);\n            *(int64_t *)(v36 + 8 + v16) = 0;\n            v19 = function_4078d0(a1, v18, v6);\n            if (v19 == -1) {\n                return 12;\n            }\n            // 0x407b55\n            v23 = *v2;\n            *(int64_t *)(v23 + 8 * v8) = *(int64_t *)(v23 + v17);\n            v15 = v18;\n            v12 = v16;\n            v9 = v19;\n            goto lab_0x407a8a;\n        } else {\n            // 0x4079ad\n            v20 = 24 * v10;\n            v21 = v36 + v20;\n            v22 = *(int64_t *)(v21 + 8);\n            if (v22 == 0) {\n                // 0x407bc8\n                v24 = *v2;\n                *(int64_t *)(v24 + 8 * v8) = *(int64_t *)(v24 + 8 * v10);\n                result = 0;\n                return result;\n            }\n            // 0x4079c6\n            v25 = 24 * v8;\n            v26 = v36 + v25;\n            v4 = *(int64_t *)*(int64_t *)(v21 + 16);\n            *(int64_t *)(v26 + 8) = 0;\n            if (v22 == 1) {\n                // break -> 0x407ac0\n                break;\n            }\n            // 0x4079eb\n            v27 = *(int64_t *)(a1 + 16);\n            v28 = v27 - 1;\n            v29 = 16 * v28;\n            v30 = v29 + v13;\n            if (!((v28 < 1 | (*(char *)(v30 + 10) & 4) == 0))) {\n                // 0x407a10\n                v32 = 16 * v27 - 32 - v29;\n                v14 = v28;\n                v11 = v30;\n                if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                    // 0x407a48\n                    if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                        // 0x407a59\n                        if ((char)function_406a20(v26, v14) == 0) {\n                            return 12;\n                        } else {\n                            goto lab_0x407a62;\n                        }\n                    }\n                }\n                // 0x407a28\n                v34 = v32 + v11;\n                v35 = v14 - 1;\n                while (!((v35 < 1 | (*(char *)(v34 + 10) & 4) == 0))) {\n                    // 0x407a42\n                    v14 = v35;\n                    v11 = v34;\n                    if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                        // 0x407a48\n                        if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                            // 0x407a59\n                            if ((char)function_406a20(v26, v14) == 0) {\n                                return 12;\n                            } else {\n                                goto lab_0x407a62;\n                            }\n                        }\n                    }\n                    // 0x407a28\n                    v34 = v32 + v11;\n                    v35 = v14 - 1;\n                }\n            }\n            // 0x407b70\n            v31 = function_4078d0(a1, v4, v6);\n            if (v31 == -1) {\n                return 12;\n            }\n            // 0x407b8b\n            if ((char)function_406a20(*v1 + v25, v31) == 0) {\n                return 12;\n            }\n            // 0x407ba2\n            v33 = function_407970(a1, v4, v31, a4, v6);\n            result = v33;\n            if ((int32_t)v33 != 0) {\n                // 0x407aaa\n                return result;\n            }\n            goto lab_0x407a62;\n        }\n    }\n    if (v10 == a4 == (v10 != v8)) {\n        // 0x407bdb\n        result = 0;\n        if ((char)function_406a20(v26, v4) != 0) {\n            return result;\n        } else {\n            return 12;\n        }\n    }\n    int64_t v38 = (int64_t)(*(int32_t *)v37 / 256 % 1024 | v7); // 0x407ae1\n    v5 = function_4078d0(a1, v4, v38);\n    while (v5 != -1) {\n        // 0x407af5\n        v3 = *v1 + v25;\n        if ((char)function_406a20(v3, v5) == 0) {\n            // break -> 0x407aa5\n            break;\n        }\n        v6 = v38;\n        v7 = v6;\n        while (true) {\n            // 0x40798f\n            v8 = v5;\n            v10 = v4;\n            v13 = v3;\n            v36 = *v1;\n            v37 = v13 + 8 + 16 * v10;\n            if (*(char *)v37 == 4) {\n                // 0x407b10\n                v16 = 24 * v8;\n                v17 = 8 * v10;\n                v18 = *(int64_t *)(*v2 + v17);\n                *(int64_t *)(v36 + 8 + v16) = 0;\n                v19 = function_4078d0(a1, v18, v6);\n                if (v19 == -1) {\n                    return 12;\n                }\n                // 0x407b55\n                v23 = *v2;\n                *(int64_t *)(v23 + 8 * v8) = *(int64_t *)(v23 + v17);\n                v15 = v18;\n                v12 = v16;\n                v9 = v19;\n                goto lab_0x407a8a;\n            } else {\n                // 0x4079ad\n                v20 = 24 * v10;\n                v21 = v36 + v20;\n                v22 = *(int64_t *)(v21 + 8);\n                if (v22 == 0) {\n                    // 0x407bc8\n                    v24 = *v2;\n                    *(int64_t *)(v24 + 8 * v8) = *(int64_t *)(v24 + 8 * v10);\n                    result = 0;\n                    return result;\n                }\n                // 0x4079c6\n                v25 = 24 * v8;\n                v26 = v36 + v25;\n                v4 = *(int64_t *)*(int64_t *)(v21 + 16);\n                *(int64_t *)(v26 + 8) = 0;\n                if (v22 == 1) {\n                    // break -> 0x407ac0\n                    break;\n                }\n                // 0x4079eb\n                v27 = *(int64_t *)(a1 + 16);\n                v28 = v27 - 1;\n                v29 = 16 * v28;\n                v30 = v29 + v13;\n                if (!((v28 < 1 | (*(char *)(v30 + 10) & 4) == 0))) {\n                    // 0x407a10\n                    v32 = 16 * v27 - 32 - v29;\n                    v14 = v28;\n                    v11 = v30;\n                    if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                        // 0x407a48\n                        if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                            // 0x407a59\n                            if ((char)function_406a20(v26, v14) == 0) {\n                                return 12;\n                            } else {\n                                goto lab_0x407a62;\n                            }\n                        }\n                    }\n                    // 0x407a28\n                    v34 = v32 + v11;\n                    v35 = v14 - 1;\n                    while (!((v35 < 1 | (*(char *)(v34 + 10) & 4) == 0))) {\n                        // 0x407a42\n                        v14 = v35;\n                        v11 = v34;\n                        if (*(int64_t *)(8 * v14 + *(int64_t *)(a1 + 32)) == v4) {\n                            // 0x407a48\n                            if (*(int32_t *)(v11 + 8) / 256 % 1024 == v7) {\n                                // 0x407a59\n                                if ((char)function_406a20(v26, v14) == 0) {\n                                    return 12;\n                                } else {\n                                    goto lab_0x407a62;\n                                }\n                            }\n                        }\n                        // 0x407a28\n                        v34 = v32 + v11;\n                        v35 = v14 - 1;\n                    }\n                }\n                // 0x407b70\n                v31 = function_4078d0(a1, v4, v6);\n                if (v31 == -1) {\n                    return 12;\n                }\n                // 0x407b8b\n                if ((char)function_406a20(*v1 + v25, v31) == 0) {\n                    return 12;\n                }\n                // 0x407ba2\n                v33 = function_407970(a1, v4, v31, a4, v6);\n                result = v33;\n                if ((int32_t)v33 != 0) {\n                    // 0x407aaa\n                    return result;\n                }\n                goto lab_0x407a62;\n            }\n        }\n        if (v10 == a4 == (v10 != v8)) {\n            // 0x407bdb\n            result = 0;\n            if ((char)function_406a20(v26, v4) != 0) {\n                return result;\n            } else {\n                return 12;\n            }\n        }\n        // 0x407ad0\n        v38 = (int64_t)(*(int32_t *)v37 / 256 % 1024 | v7);\n        v5 = function_4078d0(a1, v4, v38);\n    }\n  lab_0x407aa5_5:\n    // 0x407aaa\n    return 12;\n  lab_0x407a8a:;\n    int64_t v39 = *v1 + v12; // 0x407a91\n    if ((char)function_406a20(v39, v9) == 0) {\n        return 12;\n    }\n    goto lab_0x40798f;\n  lab_0x407a62:;\n    int64_t v40 = *(int64_t *)(*(int64_t *)(v20 + 16 + *v1) + 8); // 0x407a71\n    int64_t v41 = function_4078d0(a1, v40, v6); // 0x407a7c\n    v15 = v40;\n    v12 = v25;\n    v9 = v41;\n    if (v41 == -1) {\n        // break (via goto) -> 0x407aa5\n        goto lab_0x407aa5_5;\n    }\n    goto lab_0x407a8a;\n}\n"
        },
        {
            "funcName": "function_407c00",
            "funcStartAddr": "407c00",
            "funcEndAddr": "407c59",
            "decompiledFuncCode": "int64_t function_407c00(int64_t a1) {\n    // 0x407c00\n    free((int64_t *)*(int64_t *)(a1 + 48));\n    free((int64_t *)*(int64_t *)(a1 + 72));\n    int64_t * v1 = (int64_t *)(a1 + 80); // 0x407c16\n    int64_t v2 = *v1; // 0x407c16\n    if (v2 != a1 + 8) {\n        // 0x407c23\n        free((int64_t *)*(int64_t *)(v2 + 16));\n        free((int64_t *)*v1);\n    }\n    // 0x407c35\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    free((int64_t *)*(int64_t *)(a1 + 96));\n    free((int64_t *)*(int64_t *)(a1 + 88));\n    free((int64_t *)a1);\n    return &g81;\n}\n"
        },
        {
            "funcName": "function_407c60",
            "funcStartAddr": "407c60",
            "funcEndAddr": "407c92",
            "decompiledFuncCode": "int64_t function_407c60(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    free((int64_t *)*(int64_t *)(v1 + 16));\n    free((int64_t *)*(int64_t *)(v1 + 24));\n    if (*(char *)(v1 + 139) == 0) {\n        // 0x407c7f\n        return &g81;\n    }\n    // 0x407c88\n    free((int64_t *)*(int64_t *)(v1 + 8));\n    return &g81;\n}\n"
        },
        {
            "funcName": "function_407ca0",
            "funcStartAddr": "407ca0",
            "funcEndAddr": "407d58",
            "decompiledFuncCode": "int64_t function_407ca0(int64_t * a1) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(v1 + 232); // 0x407cab\n    if (*v2 < 1) {\n        // 0x407d39\n        *v2 = 0;\n        *(int64_t *)(v1 + 200) = 0;\n        int64_t result; // 0x407ca0\n        return result;\n    }\n    int64_t v3 = 0; // 0x407d27\n    int64_t v4 = *(int64_t *)(*(int64_t *)(v1 + 248) + 8 * v3); // 0x407cc7\n    int64_t * v5 = (int64_t *)(v4 + 32); // 0x407ccb\n    int64_t * v6 = (int64_t *)(v4 + 40);\n    int64_t v7 = 0; // 0x407cd1\n    int64_t v8; // 0x407cdd\n    int64_t v9; // 0x407ce1\n    if (*v5 >= 1) {\n        v8 = *(int64_t *)(*v6 + 8 * v7);\n        v9 = v7 + 1;\n        free((int64_t *)*(int64_t *)(v8 + 32));\n        free((int64_t *)v8);\n        v7 = v9;\n        while (*v5 > v9) {\n            // 0x407cd8\n            v8 = *(int64_t *)(*v6 + 8 * v7);\n            v9 = v7 + 1;\n            free((int64_t *)*(int64_t *)(v8 + 32));\n            free((int64_t *)v8);\n            v7 = v9;\n        }\n    }\n    // 0x407cfd\n    free((int64_t *)*v6);\n    int64_t * v10 = (int64_t *)(v4 + 16); // 0x407d07\n    int64_t v11 = *v10; // 0x407d07\n    if (v11 != 0) {\n        // 0x407d11\n        free((int64_t *)*(int64_t *)(v11 + 16));\n        free((int64_t *)*v10);\n    }\n    // 0x407d24\n    v3++;\n    free((int64_t *)v4);\n    while (*v2 > v3) {\n        // 0x407cc0\n        v4 = *(int64_t *)(*(int64_t *)(v1 + 248) + 8 * v3);\n        v5 = (int64_t *)(v4 + 32);\n        v6 = (int64_t *)(v4 + 40);\n        v7 = 0;\n        if (*v5 >= 1) {\n            v8 = *(int64_t *)(*v6 + 8 * v7);\n            v9 = v7 + 1;\n            free((int64_t *)*(int64_t *)(v8 + 32));\n            free((int64_t *)v8);\n            v7 = v9;\n            while (*v5 > v9) {\n                // 0x407cd8\n                v8 = *(int64_t *)(*v6 + 8 * v7);\n                v9 = v7 + 1;\n                free((int64_t *)*(int64_t *)(v8 + 32));\n                free((int64_t *)v8);\n                v7 = v9;\n            }\n        }\n        // 0x407cfd\n        free((int64_t *)*v6);\n        v10 = (int64_t *)(v4 + 16);\n        v11 = *v10;\n        if (v11 != 0) {\n            // 0x407d11\n            free((int64_t *)*(int64_t *)(v11 + 16));\n            free((int64_t *)*v10);\n        }\n        // 0x407d24\n        v3++;\n        free((int64_t *)v4);\n    }\n    // 0x407d39\n    *v2 = 0;\n    *(int64_t *)(v1 + 200) = 0;\n    return &g81;\n}\n"
        },
        {
            "funcName": "function_407d60",
            "funcStartAddr": "407d60",
            "funcEndAddr": "407fe0",
            "decompiledFuncCode": "int64_t function_407d60(int64_t a1, int64_t a2) {\n    unsigned char v1 = *(char *)(a2 + 48); // 0x407d64\n    int64_t v2 = v1; // 0x407d64\n    int64_t v3 = *(int64_t *)(a2 + 56); // 0x407d68\n    g80 = v2;\n    int64_t v4 = v3; // 0x407d73\n    switch (v1) {\n        case 2: {\n            // 0x407e38\n            if (*(int64_t *)(a2 + 32) == 0) {\n                // 0x407d9a\n                return 0;\n            }\n            // 0x407e43\n            __assert_fail(\"node->next == NULL\", \"lib/regcomp.c\", 1449, \"link_nfa_nodes\");\n            v4 = 1449;\n        }\n        case 4: {\n            // 0x407e60\n            *(int64_t *)(8 * v4 + 0x312d203e) = *(int64_t *)0x203e207466656c38;\n            // 0x407d9a\n            return 0;\n        }\n        case 8: {\n        }\n        case 9: {\n        }\n        case 12: {\n            int64_t v5 = *(int64_t *)(a1 + 40) + 24 * v3; // 0x407ed5\n            int64_t * v6 = (int64_t *)v5; // 0x407ed9\n            *v6 = 1;\n            int64_t * v7 = (int64_t *)(v5 + 8); // 0x407ee0\n            *v7 = 1;\n            int64_t * mem = malloc(8); // 0x407ee8\n            *(int64_t *)(v5 + 16) = (int64_t)mem;\n            if (mem != NULL) {\n                // 0x407ef6\n                *mem = *(int64_t *)(*(int64_t *)(a2 + 32) + 56);\n                return 0;\n            }\n            // 0x407f50\n            *v7 = 0;\n            *v6 = 0;\n            // 0x407d9a\n            return 12;\n        }\n        case 10: {\n        }\n        case 11: {\n            char * v8 = (char *)(a1 + 176); // 0x407da0\n            *v8 = *v8 | 1;\n            int64_t v9 = *(int64_t *)(a2 + 8); // 0x407da7\n            int64_t v10 = a2 + 32;\n            int64_t v11 = *(int64_t *)(*(int64_t *)(v9 == 0 ? v10 : v9 + 24) + 56);\n            if (v11 < 0) {\n                // 0x407fc6\n                __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n                return &g81;\n            }\n            int64_t v12 = *(int64_t *)(a2 + 16); // 0x407dbc\n            int64_t v13 = *(int64_t *)(*(int64_t *)(v12 == 0 ? v10 : v12 + 24) + 56);\n            if (v13 < 0) {\n                // 0x407fad\n                __assert_fail(\"right > -1\", \"lib/regcomp.c\", 1466, \"link_nfa_nodes\");\n                // 0x407fc6\n                __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n                return &g81;\n            }\n            int64_t v14 = *(int64_t *)(a1 + 40) + 24 * v3; // 0x407df0\n            *(int64_t *)v14 = 2;\n            int64_t * mem2 = malloc(16); // 0x407dfb\n            int64_t v15 = (int64_t)mem2; // 0x407dfb\n            *(int64_t *)(v14 + 16) = v15;\n            if (mem2 == NULL) {\n                // 0x407d9a\n                return 12;\n            }\n            int64_t * v16 = (int64_t *)(v14 + 8);\n            if (v11 == v13) {\n                // 0x407f00\n                *v16 = 1;\n                *mem2 = v11;\n                // 0x407d9a\n                return 0;\n            }\n            // 0x407e16\n            *v16 = 2;\n            if (v11 < v13) {\n                // 0x407e24\n                *mem2 = v11;\n                *(int64_t *)(v15 + 8) = v13;\n            } else {\n                // 0x407f38\n                *mem2 = v13;\n                *(int64_t *)(v15 + 8) = v11;\n            }\n            // 0x407d9a\n            return 0;\n        }\n        case 16: {\n            // 0x407d9a\n            return 0;\n        }\n        default: {\n            if ((v2 & 8) == 0) {\n                int64_t v17 = *(int64_t *)(*(int64_t *)(a2 + 32) + 56); // 0x407d8c\n                *(int64_t *)(*(int64_t *)(a1 + 24) + 8 * v3) = v17;\n                // 0x407d9a\n                return 0;\n            }\n            // 0x407f94\n            __assert_fail(\"!IS_EPSILON_NODE (node->token.type)\", \"lib/regcomp.c\", 1484, \"link_nfa_nodes\");\n            // 0x407fad\n            __assert_fail(\"right > -1\", \"lib/regcomp.c\", 1466, \"link_nfa_nodes\");\n            // 0x407fc6\n            __assert_fail(\"left > -1\", \"lib/regcomp.c\", 1465, \"link_nfa_nodes\");\n            return &g81;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_407fe0",
            "funcStartAddr": "407fe0",
            "funcEndAddr": "40802e",
            "decompiledFuncCode": "int64_t function_407fe0(int64_t a1, int64_t a2) {\n    uint64_t v1 = *(int64_t *)(a1 + 48); // 0x407fe0\n    uint64_t v2 = a2 + 1; // 0x407fe4\n    if (v2 >= v1) {\n        // 0x408022\n        return 1;\n    }\n    int64_t v3 = *(int64_t *)(a1 + 16) + 4 * v2;\n    if (*(int32_t *)v3 != -1) {\n        // 0x408022\n        return 1;\n    }\n    int64_t v4 = 2;\n    while (v4 != v1 - a2) {\n        int64_t v5 = v4 + 1; // 0x408010\n        if (*(int32_t *)(v3 - 8 + 4 * v5) != -1) {\n            // break -> 0x408022\n            break;\n        }\n        v4 = v5;\n    }\n    // 0x408022\n    return v4 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_408030",
            "funcStartAddr": "408030",
            "funcEndAddr": "408095",
            "decompiledFuncCode": "int64_t function_408030(int64_t a1, int64_t a2, uint64_t a3) {\n    if (a1 < 1) {\n        // 0x408075\n        return 0;\n    }\n    int64_t v1 = a1 - 1; // 0x40803a\n    int64_t v2 = 0; // 0x408043\n    if (v1 != 0) {\n        int64_t v3 = 0;\n        int64_t v4 = (v3 + v1) / 2; // 0x408049\n        int64_t v5 = v4; // 0x408050\n        int64_t v6 = v4; // 0x408050\n        int64_t v7 = v1; // 0x408050\n        int64_t v8; // 0x408030\n        int64_t v9; // 0x40805c\n        if (*(int64_t *)(8 * v4 + a2) >= a3) {\n            v2 = v3;\n            if (v3 >= v5) {\n                // break (via goto) -> 0x40806d\n                goto lab_0x40806d;\n            }\n            // 0x408058\n            v9 = (v5 + v3) / 2;\n            v6 = v9;\n            v7 = v5;\n            while (*(int64_t *)(8 * v9 + a2) >= a3) {\n                // 0x408068\n                v8 = v9;\n                v2 = v3;\n                if (v3 >= v8) {\n                    // break (via goto) -> 0x40806d\n                    goto lab_0x40806d;\n                }\n                // 0x408058\n                v9 = (v8 + v3) / 2;\n                v6 = v9;\n                v7 = v8;\n            }\n        }\n        int64_t v10 = v7;\n        int64_t v11 = v6 + 1; // 0x408080\n        v2 = v11;\n        while (v11 < v10) {\n            // 0x408045\n            v3 = v11;\n            v4 = (v3 + v10) / 2;\n            v5 = v4;\n            v6 = v4;\n            v7 = v10;\n            if (*(int64_t *)(8 * v4 + a2) >= a3) {\n                v2 = v3;\n                if (v3 >= v5) {\n                    // break (via goto) -> 0x40806d\n                    goto lab_0x40806d;\n                }\n                // 0x408058\n                v9 = (v5 + v3) / 2;\n                v6 = v9;\n                v7 = v5;\n                while (*(int64_t *)(8 * v9 + a2) >= a3) {\n                    // 0x408068\n                    v8 = v9;\n                    v2 = v3;\n                    if (v3 >= v8) {\n                        // break (via goto) -> 0x40806d\n                        goto lab_0x40806d;\n                    }\n                    // 0x408058\n                    v9 = (v8 + v3) / 2;\n                    v6 = v9;\n                    v7 = v8;\n                }\n            }\n            // 0x408080\n            v10 = v7;\n            v11 = v6 + 1;\n            v2 = v11;\n        }\n    }\n  lab_0x40806d:\n    // 0x40806d\n    if (*(int64_t *)(8 * v2 + a2) == a3) {\n        // 0x408090\n        return v2 + 1;\n    }\n    // 0x408075\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4080a0",
            "funcStartAddr": "4080a0",
            "funcEndAddr": "408199",
            "decompiledFuncCode": "int64_t function_4080a0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a2 + 16; // 0x4080a7\n    int64_t * v2 = (int64_t *)(a2 + 8); // 0x4080c1\n    int64_t v3 = *v2; // 0x4080c1\n    if (function_408030(v3, v1, a3) != 0) {\n      lab_0x408188:\n        // 0x408175\n        return 0;\n    }\n    int32_t v4 = a5;\n    int64_t * v5 = (int64_t *)(a1 + 40);\n    int64_t v6 = a3;\n    int64_t v7 = 16 * v6 + v3; // 0x4080e0\n    int64_t result; // 0x4080a0\n    if ((int32_t)*(char *)(v7 + 8) == v4) {\n        // 0x4080ed\n        if (*(int64_t *)v7 == a4) {\n            if (v4 != 9) {\n                return 0;\n            } else {\n                // 0x40815e\n                result = 12;\n                if ((char)function_406a20(a2, v6) != 0) {\n                    return 0;\n                } else {\n                    return result;\n                }\n            }\n        }\n    }\n    // 0x4080f2\n    result = 12;\n    while ((char)function_406a20(a2, v6) != 0) {\n        int64_t v8 = 24 * v6; // 0x40810a\n        int64_t v9 = *v5 + v8; // 0x40810e\n        int64_t v10 = *(int64_t *)(v9 + 8); // 0x408111\n        if (v10 == 0) {\n            // 0x408175\n            return 0;\n        }\n        int64_t v11 = *(int64_t *)(v9 + 16); // 0x40811a\n        int64_t v12 = v11; // 0x408122\n        if (v10 == 2) {\n            int64_t v13 = function_4080a0(a1, a2, *(int64_t *)(v11 + 8), a4, a5 & 0xffffffff); // 0x408140\n            result = v13;\n            if ((int32_t)v13 != 0) {\n                // break -> 0x408175\n                break;\n            }\n            // 0x408149\n            v12 = *(int64_t *)(v8 + 16 + *v5);\n        }\n        int64_t v14 = *(int64_t *)v12; // 0x408124\n        int64_t v15 = *v2; // 0x4080c1\n        if (function_408030(v15, v1, v14) != 0) {\n            // 0x408175\n            return 0;\n        }\n        v6 = v14;\n        v7 = 16 * v6 + v15;\n        if ((int32_t)*(char *)(v7 + 8) == v4) {\n            // 0x4080ed\n            if (*(int64_t *)v7 == a4) {\n                if (v4 != 9) {\n                    return 0;\n                } else {\n                    // 0x40815e\n                    result = 12;\n                    if ((char)function_406a20(a2, v6) != 0) {\n                        return 0;\n                    } else {\n                        return result;\n                    }\n                }\n            }\n        }\n        // 0x4080f2\n        result = 12;\n    }\n  lab_0x408175:\n    // 0x408175\n    return result;\n}\n"
        },
        {
            "funcName": "function_4081a0",
            "funcStartAddr": "4081a0",
            "funcEndAddr": "4081c3",
            "decompiledFuncCode": "int64_t function_4081a0(uint64_t a1, int64_t result2, uint64_t a3) {\n    // 0x4081a0\n    if (a3 >= a1) {\n        // 0x4081c2\n        int64_t result; // 0x4081a0\n        return result;\n    }\n    int64_t v1 = a3; // 0x4081a3\n    int64_t v2 = 8 * v1 + result2;\n    *(int64_t *)v2 = *(int64_t *)(v2 + 8);\n    v1++;\n    while (v1 != a1) {\n        // 0x4081b0\n        v2 = 8 * v1 + result2;\n        *(int64_t *)v2 = *(int64_t *)(v2 + 8);\n        v1++;\n    }\n    // 0x4081c2\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4081d0",
            "funcStartAddr": "4081d0",
            "funcEndAddr": "40825b",
            "decompiledFuncCode": "int64_t function_4081d0(int64_t a1, int64_t a2) {\n    // 0x4081d0\n    int64_t * v1; // 0x4081e0\n    int64_t v2; // 0x4081e0\n    switch (*(char *)(a2 + 48)) {\n        case 4: {\n            int64_t v3 = *(int64_t *)(a1 + 224); // 0x408230\n            if (v3 == 0) {\n                // 0x4081dc\n                return 0;\n            }\n            int64_t v4 = a2 + 40; // 0x40823c\n            int64_t v5 = *(int64_t *)(8 * (int64_t)*(int32_t *)v4 + v3); // 0x408240\n            *(int64_t *)v4 = v5;\n            int64_t * v6 = (int64_t *)(a1 + 160); // 0x408251\n            *v6 = *v6 | (int64_t)(1 << (int32_t)v5 % 32);\n            return 0;\n        }\n        case 17: {\n            // 0x4081e0\n            v1 = (int64_t *)(a2 + 8);\n            v2 = *v1;\n            if (v2 == 0 || *(char *)(v2 + 48) != 17) {\n                // 0x4081dc\n                return 0;\n            }\n            // break -> 0x4081ef\n            break;\n        }\n        default: {\n            // 0x4081dc\n            return 0;\n        }\n    }\n    uint64_t v7 = *(int64_t *)(v2 + 40); // 0x4081ef\n    int64_t v8 = *(int64_t *)(v2 + 8); // 0x4081f3\n    *v1 = v8;\n    if (v8 != 0) {\n        // 0x408200\n        *(int64_t *)v8 = a2;\n    }\n    int64_t v9 = *(int64_t *)(a1 + 224); // 0x408203\n    int64_t v10 = *(int64_t *)(8 * *(int64_t *)(a2 + 40) + v9); // 0x40820e\n    *(int64_t *)(v9 + 8 * v7) = v10;\n    if (v7 > 63) {\n        // 0x4081dc\n        return 0;\n    }\n    uint64_t v11 = v7 % 64; // 0x408223\n    int64_t v12 = -2; // 0x408223\n    if (v11 != 0) {\n        v12 = 0xfffffffffffffffe >> 64 - v11 | -2 << v11;\n    }\n    int64_t * v13 = (int64_t *)(a1 + 160); // 0x408226\n    *v13 = *v13 & v12;\n    // 0x4081dc\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408260",
            "funcStartAddr": "408260",
            "funcEndAddr": "4082b7",
            "decompiledFuncCode": "int64_t function_408260(int64_t a1, int64_t a2) {\n    int64_t v1 = *(int64_t *)(a2 + 8); // 0x408264\n    switch (*(char *)(a2 + 48)) {\n        case 11: {\n            // 0x408298\n            *(int64_t *)(v1 + 32) = a2;\n            return 0;\n        }\n        case 16: {\n            int64_t v2 = *(int64_t *)(a2 + 16); // 0x4082a0\n            *(int64_t *)(v1 + 32) = *(int64_t *)(v2 + 24);\n            *(int64_t *)(v2 + 32) = *(int64_t *)(a2 + 32);\n            return 0;\n        }\n    }\n    if (v1 != 0) {\n        // 0x408275\n        *(int64_t *)(v1 + 32) = *(int64_t *)(a2 + 32);\n    }\n    int64_t v3 = *(int64_t *)(a2 + 16); // 0x40827d\n    if (v3 != 0) {\n        // 0x408286\n        *(int64_t *)(v3 + 32) = *(int64_t *)(a2 + 32);\n    }\n    // 0x40828e\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4082c0",
            "funcStartAddr": "4082c0",
            "funcEndAddr": "40850e",
            "decompiledFuncCode": "int64_t function_4082c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, uint64_t a5, int64_t a6, uint64_t a7) {\n    int64_t v1 = *(int64_t *)(a1 + 200); // 0x4082d7\n    int64_t v2 = -1; // 0x4082f1\n    int64_t v3 = -1; // 0x4082f1\n    if (v1 > 0) {\n        int64_t v4 = *(int64_t *)(a1 + 216); // 0x4082f7\n        int64_t v5 = v4 + 8;\n        int64_t v6 = 0;\n        uint64_t v7 = v6 + v1; // 0x4082f3\n        int64_t v8 = (v7 / 0x8000000000000000 + v7) / 2; // 0x408308\n        int64_t v9 = v8; // 0x408314\n        int64_t v10 = v1; // 0x408314\n        int64_t v11 = v8; // 0x408314\n        int64_t v12; // 0x4082c0\n        int64_t v13; // 0x4082c0\n        uint64_t v14; // 0x408320\n        int64_t v15; // 0x40832e\n        if (*(int64_t *)(40 * v8 + v5) >= a5) {\n            v13 = v6;\n            if (v6 >= v9) {\n                // break (via goto) -> 0x40834b\n                goto lab_0x40834b;\n            }\n            // 0x408320\n            v14 = v9 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v9;\n            v11 = v15;\n            while (*(int64_t *)(40 * v15 + v5) >= a5) {\n                // 0x408346\n                v12 = v15;\n                v13 = v6;\n                if (v6 >= v12) {\n                    // break (via goto) -> 0x40834b\n                    goto lab_0x40834b;\n                }\n                // 0x408320\n                v14 = v12 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v12;\n                v11 = v15;\n            }\n        }\n        int64_t v16 = v10;\n        int64_t v17 = v11 + 1; // 0x4084b8\n        v13 = v17;\n        while (v17 < v16) {\n            // 0x4082f3\n            v6 = v17;\n            v7 = v6 + v16;\n            v8 = (v7 / 0x8000000000000000 + v7) / 2;\n            v9 = v8;\n            v10 = v16;\n            v11 = v8;\n            if (*(int64_t *)(40 * v8 + v5) >= a5) {\n                v13 = v6;\n                if (v6 >= v9) {\n                    // break (via goto) -> 0x40834b\n                    goto lab_0x40834b;\n                }\n                // 0x408320\n                v14 = v9 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v9;\n                v11 = v15;\n                while (*(int64_t *)(40 * v15 + v5) >= a5) {\n                    // 0x408346\n                    v12 = v15;\n                    v13 = v6;\n                    if (v6 >= v12) {\n                        // break (via goto) -> 0x40834b\n                        goto lab_0x40834b;\n                    }\n                    // 0x408320\n                    v14 = v12 + v6;\n                    v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                    v10 = v12;\n                    v11 = v15;\n                }\n            }\n            // 0x4084b8\n            v16 = v10;\n            v17 = v11 + 1;\n            v13 = v17;\n        }\n      lab_0x40834b:;\n        int64_t v18 = v13;\n        int64_t v19 = -1; // 0x40834e\n        if (v1 > v18) {\n            // 0x408354\n            v19 = *(int64_t *)(40 * v18 + 8 + v4) != a5 ? -1 : v18;\n        }\n        int64_t v20 = 0;\n        uint64_t v21 = v1 + v20; // 0x40837c\n        int64_t v22 = (v21 / 0x8000000000000000 + v21) / 2; // 0x408392\n        int64_t v23 = v22; // 0x40839e\n        int64_t v24 = v1; // 0x40839e\n        int64_t v25 = v22; // 0x40839e\n        int64_t v26; // 0x4082c0\n        int64_t v27; // 0x4082c0\n        uint64_t v28; // 0x4083a8\n        int64_t v29; // 0x4083b7\n        if (*(int64_t *)(40 * v22 + v5) >= a7) {\n            v27 = v20;\n            if (v20 >= v23) {\n                // break (via goto) -> 0x4083d4\n                goto lab_0x4083d4;\n            }\n            // 0x4083a8\n            v28 = v23 + v20;\n            v29 = (v28 / 0x8000000000000000 + v28) / 2;\n            v24 = v23;\n            v25 = v29;\n            while (*(int64_t *)(40 * v29 + v5) >= a7) {\n                // 0x4083cf\n                v26 = v29;\n                v27 = v20;\n                if (v20 >= v26) {\n                    // break (via goto) -> 0x4083d4\n                    goto lab_0x4083d4;\n                }\n                // 0x4083a8\n                v28 = v26 + v20;\n                v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                v24 = v26;\n                v25 = v29;\n            }\n        }\n        int64_t v30 = v24;\n        int64_t v31 = v25 + 1; // 0x4084d0\n        v27 = v31;\n        while (v31 < v30) {\n            // 0x40837c\n            v20 = v31;\n            v21 = v30 + v20;\n            v22 = (v21 / 0x8000000000000000 + v21) / 2;\n            v23 = v22;\n            v24 = v30;\n            v25 = v22;\n            if (*(int64_t *)(40 * v22 + v5) >= a7) {\n                v27 = v20;\n                if (v20 >= v23) {\n                    // break (via goto) -> 0x4083d4\n                    goto lab_0x4083d4;\n                }\n                // 0x4083a8\n                v28 = v23 + v20;\n                v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                v24 = v23;\n                v25 = v29;\n                while (*(int64_t *)(40 * v29 + v5) >= a7) {\n                    // 0x4083cf\n                    v26 = v29;\n                    v27 = v20;\n                    if (v20 >= v26) {\n                        // break (via goto) -> 0x4083d4\n                        goto lab_0x4083d4;\n                    }\n                    // 0x4083a8\n                    v28 = v26 + v20;\n                    v29 = (v28 / 0x8000000000000000 + v28) / 2;\n                    v24 = v26;\n                    v25 = v29;\n                }\n            }\n            // 0x4084d0\n            v30 = v24;\n            v31 = v25 + 1;\n            v27 = v31;\n        }\n      lab_0x4083d4:;\n        int64_t v32 = v27;\n        v2 = v19;\n        v3 = -1;\n        if (v1 > v32) {\n            // 0x4083dd\n            v2 = v19;\n            v3 = *(int64_t *)(40 * v32 + 8 + v4) != a7 ? -1 : v32;\n        }\n    }\n    // 0x4083fc\n    if (a2 < 1) {\n        // 0x40849e\n        return 0;\n    }\n    int64_t * v33 = (int64_t *)(a1 + 216); // 0x408434\n    int64_t * v34 = (int64_t *)*(int64_t *)(a1 + 152); // 0x408465\n    int64_t v35 = 0; // 0x4084e5\n    int64_t v36 = 8 * v35; // 0x408448\n    int64_t v37 = *(int64_t *)(v36 + a3); // 0x408448\n    int64_t v38 = *(int64_t *)(16 * *(int64_t *)(40 * v37 + *v33) + *v34); // 0x408468\n    int64_t v39 = function_4068a0(a1, v37, v38, a4, a5, v2); // 0x40846e\n    uint64_t v40 = *(int64_t *)(v38 + v36); // 0x40848c\n    int64_t result = 1; // 0x408497\n    while ((int32_t)v39 == (int32_t)function_4068a0(a1, v40, v38, a6, a7, v3)) {\n        // 0x4084e0\n        v35++;\n        result = 0;\n        if (v35 >= v40) {\n            // break -> 0x40849e\n            break;\n        }\n        v36 = 8 * v35;\n        v37 = *(int64_t *)(v36 + v38);\n        v38 = *(int64_t *)(16 * *(int64_t *)(40 * v37 + *v33) + *v34);\n        v39 = function_4068a0(a1, v37, v38, a4, a5, v2);\n        v40 = *(int64_t *)(v38 + v36);\n        result = 1;\n    }\n    // 0x40849e\n    return result;\n}\n"
        },
        {
            "funcName": "function_408510",
            "funcStartAddr": "408510",
            "funcEndAddr": "408561",
            "decompiledFuncCode": "int64_t function_408510(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x408510\n    int64_t result; // 0x408510\n    if ((int32_t)result != 0) {\n        // 0x40855c\n        return result;\n    }\n    int64_t v1 = a1; // 0x40852e\n    while (true) {\n        int64_t v2 = *(int64_t *)(v1 + 8); // 0x408530\n        int64_t v3 = v2; // 0x408539\n        int64_t v4 = 0; // 0x408539\n        int64_t v5 = v1; // 0x408539\n        if (v2 == 0) {\n            int64_t v6 = v5;\n            int64_t v7 = *(int64_t *)(v6 + 16); // 0x408543\n            v3 = v7;\n            while (v7 != v4 != v7 != 0) {\n                int64_t v8 = *(int64_t *)v6; // 0x408551\n                v4 = v6;\n                if (v8 == 0) {\n                    return result;\n                }\n                v6 = v8;\n                v7 = *(int64_t *)(v6 + 16);\n                v3 = v7;\n            }\n        }\n        // 0x408520\n        v1 = v3;\n    }\n}\n"
        },
        {
            "funcName": "function_408570",
            "funcStartAddr": "408570",
            "funcEndAddr": "408733",
            "decompiledFuncCode": "int64_t function_408570(int64_t * a1, int128_t * a2) {\n    // 0x408570\n    if (a2 == NULL) {\n        // 0x408674\n        return 0;\n    }\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x408579\n    int64_t v3 = *v2; // 0x408579\n    if (v3 == 0) {\n        // 0x408674\n        return 0;\n    }\n    int64_t v4 = (int64_t)a1;\n    int64_t * v5 = (int64_t *)(v4 + 8); // 0x40858d\n    int64_t v6 = *v5; // 0x40858d\n    int64_t v7 = v6 + 2 * v3;\n    int64_t v8; // 0x408570\n    int64_t * v9; // 0x408570\n    int64_t v10; // 0x408570\n    int64_t v11; // 0x408570\n    int64_t v12; // 0x408570\n    if (v7 > v4) {\n        int64_t v13 = v3 + v4; // 0x4086d0\n        int64_t * v14 = (int64_t *)(v4 + 16);\n        int64_t * mem = realloc((int64_t *)*v14, 16 * (int32_t)v13); // 0x4086e2\n        if (mem == NULL) {\n            // 0x408674\n            return 12;\n        }\n        int64_t v15 = *v5; // 0x4086ec\n        *v14 = (int64_t)mem;\n        *a1 = 2 * v13;\n        int64_t v16 = *v2; // 0x4086f7\n        v9 = v14;\n        v11 = v16;\n        if (v15 != 0) {\n            // 0x4086ec\n            v8 = 2 * v16 + v15;\n            v10 = v16;\n            v12 = v15;\n            goto lab_0x4085ad;\n        } else {\n            goto lab_0x408705;\n        }\n    } else {\n        // 0x4085a4\n        v8 = v7;\n        v10 = v3;\n        v12 = v6;\n        if (v6 == 0) {\n            // 0x4085a4\n            v9 = (int64_t *)(v4 + 16);\n            v11 = v3;\n            goto lab_0x408705;\n        } else {\n            goto lab_0x4085ad;\n        }\n    }\n  lab_0x408705:;\n    int64_t v17 = *v9; // 0x408705\n    int64_t v18 = *(int64_t *)(v1 + 16); // 0x408709\n    *v5 = v11;\n    memcpy((int64_t *)v17, (int64_t *)v18, 8 * (int32_t)*v2);\n    // 0x408674\n    return 0;\n  lab_0x4085ad:;\n    int64_t v19 = v10 - 1; // 0x4085b1\n    int64_t v20 = -v10; // 0x4085bc\n    int64_t v21 = v19; // 0x4085c3\n    int64_t v22 = v8; // 0x4085c3\n    if (v20 < 0) {\n        int64_t v23 = v12; // 0x408570\n        int64_t v24 = v20;\n        int64_t v25 = v8; // 0x408570\n        int64_t v26 = v19;\n        while (true) {\n            int64_t v27 = v23 - 1;\n            int64_t v28 = v24; // 0x4085f6\n            v21 = v26;\n            v22 = v25;\n            if (v27 < 0) {\n                // break (via goto) -> 0x408600\n                goto lab_0x408600_2;\n            }\n            int64_t v29 = v25;\n            int64_t v30 = v26;\n            int64_t v31 = *(int64_t *)(v4 + 16); // 0x4085cf\n            uint64_t v32 = *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v30); // 0x4085d3\n            uint64_t v33 = *(int64_t *)(v31 + 8 * v27); // 0x4085d7\n            int64_t v34; // 0x408570\n            int64_t v35; // 0x408570\n            while (v33 != v32) {\n                // 0x4085e1\n                v34 = v30;\n                v35 = v28;\n                if (v33 >= v32) {\n                    goto lab_0x4085c0;\n                }\n                int64_t v36 = v30 - 1; // 0x4085e7\n                int64_t v37 = v29 - 1; // 0x4085eb\n                *(int64_t *)(v31 + 8 * v37) = v32;\n                v28 = -v30;\n                v21 = v36;\n                v22 = v37;\n                if (v28 >= 0) {\n                    // break (via goto) -> 0x408600\n                    goto lab_0x408600_2;\n                }\n                v21 = v26;\n                v22 = v25;\n                if (v27 < 0) {\n                    // break (via goto) -> 0x408600\n                    goto lab_0x408600_2;\n                }\n                // 0x4085ca\n                v29 = v37;\n                v30 = v36;\n                v31 = *(int64_t *)(v4 + 16);\n                v32 = *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v30);\n                v33 = *(int64_t *)(v31 + 8 * v27);\n            }\n            // 0x4086a0\n            v34 = v30 - 1;\n            v35 = -v30;\n          lab_0x4085c0:\n            // 0x4085c0\n            v24 = v35;\n            v26 = v34;\n            v23 = v27;\n            v25 = v29;\n            v21 = v26;\n            v22 = v29;\n            if (v24 >= 0) {\n                // break -> 0x408600\n                break;\n            }\n        }\n    }\n  lab_0x408600_2:;\n    int64_t v38 = v22; // 0x408603\n    if (v21 >= 0) {\n        int64_t v39 = v21 + 1; // 0x408605\n        int64_t v40 = *(int64_t *)(v4 + 16); // 0x408609\n        int64_t v41 = *(int64_t *)(v1 + 16); // 0x40860d\n        int64_t v42 = v22 - v39; // 0x408612\n        memcpy((int64_t *)(v40 + 8 * v42), (int64_t *)v41, 8 * (int32_t)v39);\n        v38 = v42;\n    }\n    int64_t v43 = *v5; // 0x408626\n    int64_t v44 = v43 - 1; // 0x40862f\n    int64_t v45 = 2 * *v2 + v44; // 0x40862f\n    int64_t v46 = v45 - v38 + 1; // 0x40863a\n    if (v46 == 0) {\n      lab_0x408674:\n        // 0x408674\n        return 0;\n    }\n    int64_t v47 = *(int64_t *)(v4 + 16); // 0x408647\n    *v5 = v46 + v43;\n    int64_t v48 = v44; // 0x40864f\n    int64_t v49 = v46; // 0x40864f\n    int64_t v50 = v45; // 0x40864f\n    while (true) {\n        int64_t v51 = v50;\n        int64_t v52 = v49;\n        uint64_t v53 = *(int64_t *)(8 * v51 + v47); // 0x408650\n        uint64_t v54 = *(int64_t *)(8 * v48 + v47); // 0x408654\n        int64_t v55 = 8 * (v52 + v48) + v47; // 0x40865c\n        while (v53 > v54) {\n            // 0x408665\n            *(int64_t *)v55 = v53;\n            int64_t v56 = v52 - 1; // 0x40866c\n            if (v56 == 0) {\n                return 0;\n            }\n            v51--;\n            v52 = v56;\n            v53 = *(int64_t *)(8 * v51 + v47);\n            v54 = *(int64_t *)(8 * v48 + v47);\n            v55 = 8 * (v52 + v48) + v47;\n        }\n        // 0x408680\n        *(int64_t *)v55 = v54;\n        int64_t v57 = v48 - 1; // 0x408683\n        v48 = v57;\n        v49 = v52;\n        v50 = v51;\n        if (v57 < 0) {\n            // 0x408689\n            memcpy((int64_t *)v47, (int64_t *)(v47 + 8 * v38), 8 * (int32_t)v52);\n            return 0;\n        }\n    }\n    // 0x408674\n    int64_t v58; // 0x408570\n    int64_t result = v58;\n    return result;\n}\n"
        },
        {
            "funcName": "function_408740",
            "funcStartAddr": "408740",
            "funcEndAddr": "408994",
            "decompiledFuncCode": "int64_t function_408740(int128_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 24 * a3; // 0x408754\n    int64_t * v2 = (int64_t *)(a2 + 40); // 0x40875c\n    int64_t v3 = *v2 + v1; // 0x408764\n    int64_t * v4 = (int64_t *)(v3 + 8); // 0x40876b\n    int64_t v5 = *v4 + 1; // 0x408778\n    int128_t v6 = v5; // bp-120, 0x40877c\n    int64_t * mem = malloc(8 * (int32_t)v5); // 0x408785\n    if (mem == NULL) {\n        // 0x40886a\n        return 12;\n    }\n    int64_t v7 = (int64_t)mem; // 0x408785\n    int64_t * v8 = (int64_t *)(a2 + 48); // 0x408798\n    int64_t v9 = v1 + 8;\n    *(int64_t *)(*v8 + v9) = -1;\n    int64_t v10 = a2 + 8 + 16 * a3;\n    uint32_t v11 = *(int32_t *)v10; // 0x4087b3\n    int64_t v12 = v10; // 0x4087be\n    if ((v11 & 0x3ff00) != 0) {\n        // 0x4088e0\n        if (*v4 == 0) {\n            goto lab_0x408930;\n        } else {\n            int64_t v13 = *(int64_t *)*(int64_t *)(v3 + 16); // 0x4088eb\n            v12 = v10;\n            if ((*(char *)(a2 + 10 + 16 * v13) & 4) == 0) {\n                int64_t result = function_407970(a2, a3, a3, a3, (int64_t)(v11 / 256 % 1024)); // 0x408914\n                if ((int32_t)result != 0) {\n                    // 0x40886a\n                    return result;\n                }\n                // 0x408921\n                v12 = 17 * a3 + 8;\n            }\n            goto lab_0x4087c4;\n        }\n    } else {\n        goto lab_0x4087c4;\n    }\n  lab_0x4087c4:;\n    // 0x4087c4\n    int64_t v14; // 0x408740\n    int64_t v15; // 0x408740\n    if ((*(char *)v12 & 8) == 0) {\n        goto lab_0x408930;\n    } else {\n        int64_t v16 = *v2; // 0x4087ce\n        int64_t v17 = v16 + v1; // 0x4087d2\n        if (*(int64_t *)(v17 + 8) < 1) {\n            goto lab_0x408930;\n        } else {\n            int64_t v18 = 0;\n            int64_t v19 = *(int64_t *)(*(int64_t *)(v17 + 16) + 8 * v18); // 0x408837\n            int64_t v20 = *v8; // 0x40883b\n            int64_t v21 = 24 * v19; // 0x408843\n            int64_t v22 = v20 + v21; // 0x408847\n            int64_t v23 = *(int64_t *)(v22 + 8); // 0x40884a\n            int64_t v24 = 0; // 0x408852\n            int64_t v25 = v18; // 0x408852\n            int64_t v26 = v19; // 0x408852\n            int64_t v27 = v21; // 0x408852\n            int64_t v28 = v22; // 0x408852\n            int64_t v29 = v23; // 0x408852\n            int64_t v30; // 0x408740\n            int64_t v31; // 0x408898\n            int64_t v32; // 0x4088a2\n            int64_t v33; // 0x408837\n            int64_t v34; // 0x408843\n            int64_t v35; // 0x408847\n            int64_t v36; // 0x40884a\n            if (v23 == -1) {\n                // 0x408898\n                v31 = v16 + v1;\n                v32 = v18;\n                v32++;\n                v30 = 1;\n                if (*(int64_t *)(v31 + 8) <= v32) {\n                    // break (via goto) -> 0x4088ac\n                    goto lab_0x4088ac;\n                }\n                // 0x408833\n                v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                v34 = 24 * v33;\n                v35 = v34 + v20;\n                v36 = *(int64_t *)(v35 + 8);\n                v24 = 1;\n                v25 = v32;\n                v26 = v33;\n                v27 = v34;\n                v28 = v35;\n                v29 = v36;\n                while (v36 == -1) {\n                    // 0x408898\n                    v32++;\n                    v30 = 1;\n                    if (*(int64_t *)(v31 + 8) <= v32) {\n                        // break (via goto) -> 0x4088ac\n                        goto lab_0x4088ac;\n                    }\n                    // 0x408833\n                    v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                    v34 = 24 * v33;\n                    v35 = v34 + v20;\n                    v36 = *(int64_t *)(v35 + 8);\n                    v24 = 1;\n                    v25 = v32;\n                    v26 = v33;\n                    v27 = v34;\n                    v28 = v35;\n                    v29 = v36;\n                }\n            }\n            int64_t v37 = v29;\n            int64_t result2; // 0x408740\n            int64_t v38; // 0x408740\n            int128_t v39; // bp-88, 0x408740\n            int64_t v40; // 0x408861\n            if (v37 != 0) {\n                // 0x4087f0\n                v39 = __asm_movaps(__asm_movdqu(*(int128_t *)v28));\n                v38 = *(int64_t *)(v28 + 16);\n            } else {\n                // 0x408859\n                v40 = function_408740(&v39, a2, v26, v37);\n                int64_t v41; // 0x408740\n                v38 = v41;\n                result2 = v40;\n                if ((int32_t)v40 != 0) {\n                    // 0x40886a\n                    return result2;\n                }\n            }\n            int64_t v42 = function_408570((int64_t *)&v6, &v39); // 0x40880c\n            result2 = v42;\n            while ((int32_t)v42 == 0) {\n                int64_t v43 = v38;\n                int64_t v44 = v24; // 0x40881f\n                if (*(int64_t *)(v27 + 8 + *v8) == 0) {\n                    // 0x408880\n                    free((int64_t *)v43);\n                    v44 = 1;\n                }\n                int64_t v45 = *v2; // 0x408821\n                int64_t v46 = v25 + 1; // 0x408825\n                int64_t v47 = v45 + v1; // 0x408829\n                int64_t v48 = v45; // 0x408831\n                if (*(int64_t *)(v47 + 8) <= v46) {\n                    // break -> 0x4088ac\n                    break;\n                }\n                v18 = v46;\n                int64_t v49 = v43;\n                v19 = *(int64_t *)(*(int64_t *)(v47 + 16) + 8 * v18);\n                v20 = *v8;\n                v21 = 24 * v19;\n                v22 = v20 + v21;\n                v23 = *(int64_t *)(v22 + 8);\n                v24 = v44;\n                v25 = v18;\n                v26 = v19;\n                v27 = v21;\n                v28 = v22;\n                v29 = v23;\n                if (v23 == -1) {\n                    // 0x408898\n                    v31 = v48 + v1;\n                    v32 = v18;\n                    v32++;\n                    v30 = 1;\n                    if (*(int64_t *)(v31 + 8) <= v32) {\n                        // break (via goto) -> 0x4088ac\n                        goto lab_0x4088ac;\n                    }\n                    // 0x408833\n                    v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                    v34 = 24 * v33;\n                    v35 = v34 + v20;\n                    v36 = *(int64_t *)(v35 + 8);\n                    v24 = 1;\n                    v25 = v32;\n                    v26 = v33;\n                    v27 = v34;\n                    v28 = v35;\n                    v29 = v36;\n                    while (v36 == -1) {\n                        // 0x408898\n                        v32++;\n                        v30 = 1;\n                        if (*(int64_t *)(v31 + 8) <= v32) {\n                            // break (via goto) -> 0x4088ac\n                            goto lab_0x4088ac;\n                        }\n                        // 0x408833\n                        v33 = *(int64_t *)(*(int64_t *)(v31 + 16) + 8 * v32);\n                        v34 = 24 * v33;\n                        v35 = v34 + v20;\n                        v36 = *(int64_t *)(v35 + 8);\n                        v24 = 1;\n                        v25 = v32;\n                        v26 = v33;\n                        v27 = v34;\n                        v28 = v35;\n                        v29 = v36;\n                    }\n                }\n                // 0x408854\n                v37 = v29;\n                if (v37 != 0) {\n                    // 0x4087f0\n                    v39 = __asm_movaps(__asm_movdqu(*(int128_t *)v28));\n                    v38 = *(int64_t *)(v28 + 16);\n                } else {\n                    // 0x408859\n                    v40 = function_408740(&v39, a2, v26, v37);\n                    v38 = v49;\n                    result2 = v40;\n                    if ((int32_t)v40 != 0) {\n                        // 0x40886a\n                        return result2;\n                    }\n                }\n                // 0x408802\n                v42 = function_408570((int64_t *)&v6, &v39);\n                result2 = v42;\n            }\n            // 0x40886a\n            return result2;\n          lab_0x4088ac:\n            // 0x4088ac\n            if ((char)function_406a20((int64_t)&v6, a3) == 0) {\n                // 0x40886a\n                return 12;\n            }\n            int64_t v50 = *v8; // 0x4088c1\n            v15 = v50;\n            if ((char)a4 == 1 || (char)v30 == 0) {\n                goto lab_0x408945;\n            } else {\n                // 0x4088d5\n                *(int64_t *)(v50 + v9) = 0;\n                v14 = 0x100000000 * v7 >> 32;\n                goto lab_0x408959;\n            }\n        }\n    }\n  lab_0x408930:\n    // 0x408930\n    if ((char)function_406a20((int64_t)&v6, a3) == 0) {\n        // 0x40886a\n        return 12;\n    }\n    // 0x408941\n    v15 = *v8;\n    goto lab_0x408945;\n  lab_0x408945:;\n    int128_t v51 = __asm_movdqa(0); // 0x408945\n    int64_t v52 = v15 + v1;\n    __asm_movups(*(int128_t *)v52, v51);\n    int64_t v53 = 0x100000000 * v7 >> 32;\n    *(int64_t *)(v52 + 16) = v53;\n    v14 = v53;\n    goto lab_0x408959;\n  lab_0x408959:;\n    int128_t v54 = __asm_movdqa(0); // 0x408962\n    *(int64_t *)((int64_t)a1 + 16) = v14;\n    *a1 = (int128_t)__asm_movaps(v54);\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4089a0",
            "funcStartAddr": "4089a0",
            "funcEndAddr": "408adf",
            "decompiledFuncCode": "int64_t function_4089a0(int64_t a1, int64_t * a2, int64_t a3, uint32_t a4) {\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x4089b7\n    int64_t v3 = *v2; // 0x4089b7\n    int64_t size = 8 * v3; // 0x4089c4\n    int128_t v4 = v3; // bp-72, 0x4089cc\n    int64_t * mem = malloc((int32_t)size); // 0x4089d1\n    if (mem == NULL) {\n        // 0x408acd\n        return 12;\n    }\n    int64_t * v5 = (int64_t *)(v1 + 16);\n    if (v3 < 1) {\n      lab_0x408a6d:\n        // 0x408a6d\n        free((int64_t *)*v5);\n        int128_t v6 = __asm_movdqa(0); // 0x408a7b\n        *v5 = (int64_t)mem;\n        *(int128_t *)a2 = (int128_t)__asm_movaps(v6);\n        return 0;\n    }\n    int64_t v7 = &v4;\n    int64_t v8 = size; // 0x4089a0\n    int64_t v9 = 0; // 0x408a63\n    int64_t v10; // 0x4089a0\n    int64_t v11; // 0x4089a0\n    int64_t v12; // 0x408a00\n    while (true) {\n      lab_0x4089f0:;\n        int64_t v13 = *(int64_t *)(*v5 + 8 * v9); // 0x4089f4\n        v12 = *(int64_t *)(a1 + 48) + 24 * v13;\n        uint64_t v14 = *(int64_t *)(v12 + 8); // 0x408a04\n        if (v14 >= 1) {\n            int64_t v15 = 0;\n            int64_t v16 = *(int64_t *)(8 * v15 + *(int64_t *)(v12 + 16)); // 0x408a29\n            int64_t v17 = 16 * v16 + v8; // 0x408a34\n            int64_t v18; // 0x408a5a\n            if ((int32_t)*(char *)(v17 + 8) == a4) {\n                // 0x408a41\n                if (*(int64_t *)v17 == a3) {\n                    if (v16 == -1) {\n                        goto lab_0x408aa0;\n                    } else {\n                        // 0x408a4c\n                        v18 = function_4080a0(a1, v7, v13, a3, (int64_t)a4);\n                        v11 = a1;\n                        v10 = v18;\n                        if ((int32_t)v18 != 0) {\n                            goto lab_0x408aae_2;\n                        } else {\n                            goto lab_0x408a63;\n                        }\n                    }\n                }\n            }\n            int64_t v19 = v15 + 1; // 0x408a20\n            while (v14 != v19) {\n                // 0x408a29\n                v15 = v19;\n                v16 = *(int64_t *)(8 * v15 + *(int64_t *)(v12 + 16));\n                v17 = 16 * v16 + v8;\n                if ((int32_t)*(char *)(v17 + 8) == a4) {\n                    // 0x408a41\n                    if (*(int64_t *)v17 == a3) {\n                        if (v16 == -1) {\n                            goto lab_0x408aa0;\n                        } else {\n                            // 0x408a4c\n                            v18 = function_4080a0(a1, v7, v13, a3, (int64_t)a4);\n                            v11 = a1;\n                            v10 = v18;\n                            if ((int32_t)v18 != 0) {\n                                goto lab_0x408aae_2;\n                            } else {\n                                goto lab_0x408a63;\n                            }\n                        }\n                    }\n                }\n                // 0x408a20\n                v19 = v15 + 1;\n            }\n        }\n        goto lab_0x408aa0;\n    }\n  lab_0x408aae_2:\n    // 0x408aae\n    free(mem);\n    return v10 & 0xffffffff;\n  lab_0x408aa0:;\n    int64_t v20 = function_408570((int64_t *)&v4, (int128_t *)v12); // 0x408aa5\n    v11 = v7;\n    v10 = v20;\n    if ((int32_t)v20 != 0) {\n        // break -> 0x408aae\n        goto lab_0x408aae_2;\n    }\n    goto lab_0x408a63;\n  lab_0x408a63:\n    // 0x408a63\n    v9++;\n    v8 = v11;\n    if (*v2 <= v9) {\n        goto lab_0x408a6d;\n    }\n    goto lab_0x4089f0;\n}\n"
        },
        {
            "funcName": "function_408ae0",
            "funcStartAddr": "408ae0",
            "funcEndAddr": "408c92",
            "decompiledFuncCode": "int64_t function_408ae0(int128_t * a1, int64_t a2, int64_t a3) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x408ae0\n    int64_t v2 = *v1; // 0x408ae0\n    if (v2 == 0) {\n        // 0x408ba8\n        return 0;\n    }\n    int64_t * v3 = (int64_t *)(a3 + 8); // 0x408aef\n    int64_t v4 = *v3; // 0x408aef\n    if (v4 == 0) {\n        // 0x408ba8\n        return 0;\n    }\n    int64_t v5 = (int64_t)a1;\n    int64_t v6 = v4 + v2; // 0x408afe\n    int64_t * v7 = (int64_t *)(v5 + 8); // 0x408b13\n    int64_t v8 = *v7; // 0x408b13\n    int64_t * v9 = (int64_t *)(v5 + 16); // 0x408b1a\n    int64_t v10 = *v9; // 0x408b1a\n    int64_t v11 = v8; // 0x408b25\n    int64_t v12 = v10; // 0x408b25\n    int64_t v13 = v4; // 0x408b25\n    int64_t v14 = v2; // 0x408b25\n    if (v8 + v6 > v5) {\n        int64_t v15 = v6 + v5; // 0x408c5a\n        int64_t * mem = realloc((int64_t *)v10, 8 * (int32_t)v15); // 0x408c65\n        if (mem == NULL) {\n            // 0x408ba8\n            return 12;\n        }\n        // 0x408c72\n        v12 = (int64_t)mem;\n        v11 = *v7;\n        v14 = *v1;\n        *v9 = v12;\n        *(int64_t *)a1 = v15;\n        v13 = *v3;\n    }\n    int64_t v16 = *(int64_t *)(a2 + 16); // 0x408b2b\n    int64_t v17 = *(int64_t *)(a3 + 16); // 0x408b2f\n    int64_t v18 = v13 - 1; // 0x408b38\n    int64_t v19 = v18; // 0x408b4c\n    int64_t v20 = v11 - 1; // 0x408b4c\n    int64_t v21 = *(int64_t *)(v17 + 8 * v18); // 0x408b4c\n    int64_t v22 = v13 + v11 + v14; // 0x408b4c\n    int64_t v23 = v14 - 1; // 0x408b4c\n    int64_t v24; // 0x408ae0\n    int64_t v25; // 0x408ae0\n    int64_t v26; // 0x408ae0\n    int64_t v27; // 0x408ae0\n    int64_t v28; // 0x408ae0\n    int64_t v29; // 0x408ae0\n    int64_t v30; // 0x408ae0\n    int64_t v31; // 0x408ae0\n    int64_t v32; // 0x408ae0\n    int64_t v33; // 0x408ae0\n    int64_t v34; // 0x408ae0\n    int64_t v35; // 0x408ae0\n    int64_t v36; // 0x408ae0\n    int64_t v37; // 0x408ae0\n    while (true) {\n      lab_0x408b50:;\n        int64_t v38 = v21;\n        int64_t v39 = *(int64_t *)(8 * v23 + v16);\n        v26 = v24;\n        v27 = v25;\n        v32 = v19;\n        v34 = v20;\n        v21 = v38;\n        v36 = v22;\n        v30 = v39;\n        v28 = v23;\n        v33 = v19;\n        v35 = v20;\n        v37 = v22;\n        v31 = v38;\n        v29 = v23;\n        if (v39 == v38) {\n            goto lab_0x408b66;\n        } else {\n            goto lab_0x408b55;\n        }\n    }\n  lab_0x408bc0_4:;\n    int64_t v40 = *v7; // 0x408bc0\n    int64_t v41 = *v1 + v40 + *v3; // 0x408bcb\n    int64_t v42 = v40 - 1; // 0x408bd0\n    int64_t v43; // 0x408ae0\n    int64_t v44 = v41 - v43; // 0x408bd8\n    *v7 = v44 + v40;\n    int64_t v45; // 0x408ae0\n    int64_t v46; // 0x408ae0\n    if (v42 < 0 || v44 < 1) {\n        // 0x408c40\n        v46 = 8 * v44;\n        v45 = v12;\n    } else {\n        int64_t v47 = v42; // 0x408ae0\n        int64_t v48 = v44; // 0x408ae0\n        int64_t v49 = v41 - 1; // 0x408ae0\n        while (true) {\n            int64_t v50 = v47;\n            int64_t v51 = v49;\n            int64_t v52 = v48;\n            uint64_t v53 = *(int64_t *)(8 * v51 + v12); // 0x408bf0\n            uint64_t v54 = *(int64_t *)(8 * v50 + v12); // 0x408bf4\n            int64_t v55 = 8 * (v52 + v50) + v12; // 0x408bfc\n            while (v53 > v54) {\n                // 0x408c05\n                *(int64_t *)v55 = v53;\n                int64_t v56 = v52 - 1; // 0x408c0c\n                if (v56 == 0) {\n                    // break (via goto) -> 0x408c12\n                    goto lab_0x408c12;\n                }\n                v51--;\n                v52 = v56;\n                v53 = *(int64_t *)(8 * v51 + v12);\n                v54 = *(int64_t *)(8 * v50 + v12);\n                v55 = 8 * (v52 + v50) + v12;\n            }\n            // 0x408c20\n            *(int64_t *)v55 = v54;\n            v47 = v50 - 1;\n            v48 = v52;\n            v49 = v51;\n            if (v50 == 0) {\n                // 0x408c2d\n                v46 = 8 * v52;\n                v45 = *v9;\n                goto lab_0x408c44;\n            }\n        }\n      lab_0x408c12:\n        // 0x408c12\n        v46 = 0;\n        v45 = *v9;\n    }\n    goto lab_0x408c44;\n  lab_0x408b88:;\n    // 0x408b88\n    int64_t v58; // 0x408ae0\n    int64_t v59 = v58 - 1; // 0x408b88\n    uint64_t v60; // 0x408ae0\n    *(int64_t *)(8 * v59 + v12) = v60;\n    int64_t v61; // 0x408ae0\n    int64_t v62 = v61; // 0x408b8c\n    int64_t v63 = v59; // 0x408b8c\n    goto lab_0x408b90;\n  lab_0x408b66:\n    // 0x408b66\n    v60 = v31;\n    v58 = v37;\n    int64_t v72 = v35; // 0x408b69\n    v61 = v35;\n    if (v35 >= 0) {\n        int64_t v73 = v72;\n        uint64_t v74 = *(int64_t *)(8 * v73 + v12); // 0x408b7a\n        while (v74 > v60) {\n            // 0x408b70\n            v72 = v73 - 1;\n            v61 = -1;\n            if (v73 == 0) {\n                goto lab_0x408b88;\n            }\n            v73 = v72;\n            v74 = *(int64_t *)(8 * v73 + v12);\n        }\n        // 0x408b83\n        v61 = v73;\n        v62 = v73;\n        v63 = v58;\n        if (v74 == v60) {\n            goto lab_0x408b90;\n        } else {\n            goto lab_0x408b88;\n        }\n    } else {\n        goto lab_0x408b88;\n    }\n  lab_0x408b55:;\n    int64_t v75 = v28;\n    v22 = v36;\n    v20 = v34;\n    v19 = v32;\n    int64_t v76 = v27;\n    int64_t v77 = v26;\n    int64_t v70; // 0x408ae0\n    int64_t v69; // 0x408ae0\n    int64_t v66; // 0x408ae0\n    int64_t v67; // 0x408ae0\n    int64_t v68; // 0x408ae0\n    if (v77 < v76) {\n        int64_t v78 = v19 - 1; // 0x408b57\n        v66 = v78;\n        v67 = v20;\n        v68 = v22;\n        v69 = v30;\n        v70 = v75;\n        if (v78 < 0) {\n            // break -> 0x408bc0\n            goto lab_0x408bc0_4;\n        }\n        goto lab_0x408b5d;\n    } else {\n        // 0x408bb0\n        v23 = v75 - 1;\n        v24 = v77;\n        v25 = v76;\n        v43 = v22;\n        if (v23 < 0) {\n            // break -> 0x408bc0\n            goto lab_0x408bc0_4;\n        }\n        goto lab_0x408b50;\n    }\n  lab_0x408b90:;\n    int64_t v64 = v29 - 1; // 0x408b90\n    v43 = v63;\n    if (v64 < 0) {\n        // break -> 0x408bc0\n        goto lab_0x408bc0_4;\n    }\n    int64_t v65 = v33 - 1; // 0x408b96\n    v43 = v63;\n    if (v65 < 0) {\n        // break -> 0x408bc0\n        goto lab_0x408bc0_4;\n    }\n    // 0x408b9c\n    v66 = v65;\n    v67 = v62;\n    v68 = v63;\n    v69 = *(int64_t *)(8 * v64 + v16);\n    v70 = v64;\n    goto lab_0x408b5d;\n  lab_0x408b5d:;\n    int64_t v71 = *(int64_t *)(8 * v66 + v17); // 0x408b5d\n    v26 = v69;\n    v27 = v71;\n    v32 = v66;\n    v34 = v67;\n    v21 = v71;\n    v36 = v68;\n    v30 = v69;\n    v28 = v70;\n    v33 = v66;\n    v35 = v67;\n    v37 = v68;\n    v31 = v69;\n    v29 = v70;\n    if (v69 != v71) {\n        goto lab_0x408b55;\n    } else {\n        goto lab_0x408b66;\n    }\n  lab_0x408c44:;\n    int64_t v57 = v45;\n    memcpy((int64_t *)v57, (int64_t *)(v57 + 8 * v43), (int32_t)v46);\n    // 0x408ba8\n    return 0;\n}\n"
        },
        {
            "funcName": "function_408ca0",
            "funcStartAddr": "408ca0",
            "funcEndAddr": "408d77",
            "decompiledFuncCode": "int64_t function_408ca0(int64_t a1, int64_t a2, int32_t a3, int32_t a4, int64_t a5) {\n    int64_t v1 = a5;\n    int32_t v2 = a2;\n    int64_t v3; // 0x408ca0\n    int64_t v4; // 0x408ca0\n    int32_t v5; // 0x408ca0\n    int64_t v6; // 0x408ca0\n    if (v2 == 15) {\n        int64_t * mem = malloc(968); // 0x408d38\n        if (mem == NULL) {\n            // 0x408d19\n            return 0;\n        }\n        int64_t v7 = (int64_t)mem; // 0x408d38\n        *(int64_t *)a1 = v7;\n        *mem = 968;\n        v5 = 1;\n        v6 = 0;\n        v4 = 8;\n        v3 = v7;\n    } else {\n        int64_t v8 = 0x100000000 * a2;\n        int64_t v9 = v8 >> 26; // 0x408cb9\n        v5 = v2 + 1;\n        v6 = v9;\n        v4 = v9 | 8;\n        v3 = v8 >> 32;\n    }\n    int64_t v10 = a3;\n    int64_t v11 = a4;\n    *(int32_t *)a2 = v5;\n    int64_t result = v3 + v4; // 0x408cc6\n    int64_t v12 = v3 + v6;\n    *(int64_t *)(v12 + 8) = 0;\n    *(int64_t *)(v12 + 16) = v10;\n    *(int64_t *)(v12 + 24) = v11;\n    __asm_movups(*(int128_t *)(v12 + 48), __asm_movdqu(*(int128_t *)&v1));\n    char * v13 = (char *)(v12 + 58); // 0x408ceb\n    *v13 = *v13 & -13;\n    *(int64_t *)(v12 + 32) = 0;\n    *(int64_t *)(v12 + 40) = 0;\n    *(int64_t *)(v12 + 64) = -1;\n    if (a3 != 0) {\n        // 0x408d0e\n        *(int64_t *)v10 = result;\n    }\n    // 0x408d11\n    if (a4 != 0) {\n        // 0x408d16\n        *(int64_t *)v11 = result;\n    }\n    // 0x408d19\n    return result;\n}\n"
        },
        {
            "funcName": "function_408d80",
            "funcStartAddr": "408d80",
            "funcEndAddr": "408e29",
            "decompiledFuncCode": "int64_t function_408d80(int64_t a1, int64_t a2) {\n    int64_t v1 = a2 + 112; // 0x408d84\n    int64_t v2 = a2 + 128; // 0x408d8a\n    int64_t v3 = function_408ca0(v1, v2, 0, 0, a1 + 40); // 0x408dbd\n    int64_t v4 = v3; // bp-48, 0x408dc2\n    if (v3 == 0) {\n        // 0x408e0d\n        return 0;\n    }\n    *(int64_t *)v3 = a1;\n    int64_t v5 = *&v4; // 0x408dcd\n    char * v6 = (char *)(v5 + 50); // 0x408dd0\n    *v6 = *v6 | 4;\n    int64_t v7 = *(int64_t *)(a1 + 8); // 0x408dd4\n    int64_t v8; // 0x408d80\n    int64_t v9; // 0x408d80\n    int64_t result; // 0x408d80\n    int64_t v10; // 0x408d80\n    int64_t v11; // 0x408d80\n    int64_t v12; // 0x408d80\n    int64_t v13; // 0x408d80\n    int64_t v14; // 0x408d80\n    int64_t v15; // 0x408df9\n    int64_t v16; // 0x408dfc\n    int64_t v17; // 0x408deb\n    int64_t v18; // 0x408deb\n    if (v7 != 0) {\n        // 0x408da8\n        v13 = v7;\n        v10 = v5;\n        v9 = v5 + 8;\n    } else {\n        // 0x408deb\n        v18 = *(int64_t *)(a1 + 16);\n        v11 = v5;\n        v12 = v5;\n        v8 = v18;\n        if (v18 != 0 != v18 != 0) {\n            v14 = a1;\n            v15 = *(int64_t *)v14;\n            if (v15 == 0) {\n                // 0x408e08\n                result = v4;\n                return result;\n            }\n            // 0x408de8\n            v16 = *(int64_t *)v11;\n            v17 = *(int64_t *)(v15 + 16);\n            v11 = v16;\n            v12 = v16;\n            v8 = v17;\n            while (v17 != 0 != v17 != v14) {\n                // 0x408df9\n                v14 = v15;\n                v15 = *(int64_t *)v14;\n                if (v15 == 0) {\n                    // 0x408e08\n                    result = v4;\n                    return result;\n                }\n                // 0x408de8\n                v16 = *(int64_t *)v11;\n                v17 = *(int64_t *)(v15 + 16);\n                v11 = v16;\n                v12 = v16;\n                v8 = v17;\n            }\n        }\n        // 0x408e20\n        v13 = v8;\n        v10 = v12;\n        v9 = v12 + 16;\n    }\n    int64_t v19 = v13;\n    int64_t v20 = function_408ca0(v1, v2, 0, 0, v19 + 40); // 0x408dbd\n    int64_t * v21 = (int64_t *)v9; // 0x408dc2\n    *v21 = v20;\n    result = 0;\n    while (v20 != 0) {\n        int64_t v22 = v19;\n        *(int64_t *)v20 = v10;\n        v5 = *v21;\n        v6 = (char *)(v5 + 50);\n        *v6 = *v6 | 4;\n        v7 = *(int64_t *)(v22 + 8);\n        if (v7 != 0) {\n            // 0x408da8\n            v13 = v7;\n            v10 = v5;\n            v9 = v5 + 8;\n        } else {\n            // 0x408deb\n            v18 = *(int64_t *)(v22 + 16);\n            v11 = v5;\n            int64_t v23 = v22; // 0x408df2\n            v12 = v5;\n            v8 = v18;\n            if (v18 != 0 != v18 != 0) {\n                v14 = v23;\n                v15 = *(int64_t *)v14;\n                if (v15 == 0) {\n                    // 0x408e08\n                    result = v4;\n                    return result;\n                }\n                // 0x408de8\n                v16 = *(int64_t *)v11;\n                v17 = *(int64_t *)(v15 + 16);\n                v11 = v16;\n                v12 = v16;\n                v8 = v17;\n                while (v17 != 0 != v17 != v14) {\n                    // 0x408df9\n                    v14 = v15;\n                    v15 = *(int64_t *)v14;\n                    if (v15 == 0) {\n                        // 0x408e08\n                        result = v4;\n                        return result;\n                    }\n                    // 0x408de8\n                    v16 = *(int64_t *)v11;\n                    v17 = *(int64_t *)(v15 + 16);\n                    v11 = v16;\n                    v12 = v16;\n                    v8 = v17;\n                }\n            }\n            // 0x408e20\n            v13 = v8;\n            v10 = v12;\n            v9 = v12 + 16;\n        }\n        // 0x408daf\n        v19 = v13;\n        v20 = function_408ca0(v1, v2, 0, 0, v19 + 40);\n        v21 = (int64_t *)v9;\n        *v21 = v20;\n        result = 0;\n    }\n  lab_0x408e0d:\n    // 0x408e0d\n    return result;\n}\n"
        },
        {
            "funcName": "function_408e30",
            "funcStartAddr": "408e30",
            "funcEndAddr": "40904a",
            "decompiledFuncCode": "int64_t function_408e30(int32_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t result = *(int64_t *)(a3 + 8); // 0x408e44\n    int64_t v1; // 0x408e30\n    int64_t v2; // 0x408e30\n    int64_t v3; // 0x408e30\n    int64_t v4; // 0x408e30\n    int64_t v5; // 0x408e30\n    int64_t v6; // bp-72, 0x408e30\n    int64_t v7; // 0x408e30\n    int64_t v8; // 0x408e7f\n    int64_t v9; // 0x408e86\n    int64_t v10; // 0x408e30\n    int64_t v11; // 0x408ea9\n    int64_t v12; // 0x408ec3\n    if ((*(char *)(a2 + 56) & 16) == 0) {\n        int64_t v13 = a2 + 128; // 0x408fd8\n        int64_t v14 = a2 + 112; // 0x408fdf\n        int64_t v15 = &v6;\n        int64_t v16 = function_408ca0(v14, v13, 0, 0, v15); // 0x409002\n        int64_t v17 = function_408ca0(v14, v13, 0, 0, v15); // 0x40901c\n        v10 = v15;\n        v8 = v13;\n        v11 = v16;\n        v9 = v14;\n        v12 = v17;\n        v1 = v15;\n        v7 = v13;\n        v5 = v16;\n        v2 = v17;\n        v3 = v14;\n        v4 = v17;\n        if (result != 0) {\n            goto lab_0x408ecb;\n        } else {\n            goto lab_0x408ee9;\n        }\n    } else {\n        if (result == 0) {\n            int64_t v18 = a2 + 128; // 0x408f80\n            int64_t v19 = a2 + 112; // 0x408f87\n            int64_t v20 = &v6;\n            int64_t v21 = function_408ca0(v19, v18, 0, 0, v20); // 0x408faa\n            int64_t v22 = function_408ca0(v19, v18, 0, 0, v20); // 0x408fc4\n            v1 = v20;\n            v7 = v18;\n            v5 = v21;\n            v2 = v22;\n            v3 = v19;\n            v4 = v22;\n            goto lab_0x408ee9;\n        } else {\n            uint64_t v23 = *(int64_t *)(a3 + 40); // 0x408e60\n            if (v23 > 63 || (*(int64_t *)(a2 + 160) & 1 << v23 % 64) == 0) {\n                // 0x408f67\n                return result;\n            }\n            // 0x408e7f\n            v8 = a2 + 128;\n            v9 = a2 + 112;\n            v10 = &v6;\n            v11 = function_408ca0(v9, v8, 0, 0, v10);\n            v12 = function_408ca0(v9, v8, 0, 0, v10);\n            goto lab_0x408ecb;\n        }\n    }\n  lab_0x408ecb:;\n    int64_t v24 = function_408ca0(v9, v8, (int32_t)result, (int32_t)v12, v10); // 0x408ee1\n    v1 = v10;\n    v7 = v8;\n    v5 = v11;\n    v2 = v24;\n    v3 = v9;\n    v4 = v12;\n    goto lab_0x408ee9;\n  lab_0x408ee9:;\n    int64_t v25 = function_408ca0(v3, v7, (int32_t)v5, (int32_t)v2, v1); // 0x408f04\n    int64_t result2; // 0x408e30\n    if (v4 == 0 || v5 == 0 || v2 == 0 || v25 == 0) {\n        // 0x409038\n        *a1 = 12;\n        result2 = 0;\n    } else {\n        int64_t v26 = *(int64_t *)(a3 + 40); // 0x408f35\n        *(int64_t *)(v4 + 40) = v26;\n        *(int64_t *)(v5 + 40) = v26;\n        char * v27 = (char *)(v4 + 50); // 0x408f48\n        char v28 = *(char *)(a3 + 50) & 8;\n        *v27 = *v27 & -9 | v28;\n        char * v29 = (char *)(v5 + 50); // 0x408f5b\n        *v29 = *v29 & -9 | v28;\n        result2 = v25;\n    }\n    // 0x408f67\n    return result2;\n}\n"
        },
        {
            "funcName": "function_409050",
            "funcStartAddr": "409050",
            "funcEndAddr": "4090cb",
            "decompiledFuncCode": "int64_t function_409050(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 8); // 0x40905c\n    int64_t v2 = *v1; // 0x40905c\n    int32_t result = 0; // bp-28, 0x409060\n    int64_t v3; // 0x409050\n    if (v2 != 0) {\n        // 0x40906d\n        if (*(char *)(v2 + 48) == 17) {\n            int64_t v4 = function_408e30(&result, a1, v2, v3); // 0x409098\n            *v1 = v4;\n            if (v4 != 0) {\n                // 0x4090a6\n                *(int64_t *)v4 = a2;\n            }\n        }\n    }\n    int64_t * v5 = (int64_t *)(a2 + 16); // 0x409073\n    int64_t v6 = *v5; // 0x409073\n    if (v6 == 0 || *(char *)(v6 + 48) != 17) {\n        // 0x409082\n        return result;\n    }\n    int64_t v7 = function_408e30(&result, a1, v6, v3); // 0x4090b8\n    *v5 = v7;\n    if (v7 != 0) {\n        // 0x4090c6\n        *(int64_t *)v7 = a2;\n    }\n    // 0x409082\n    return result;\n}\n"
        },
        {
            "funcName": "function_4090d0",
            "funcStartAddr": "4090d0",
            "funcEndAddr": "40914f",
            "decompiledFuncCode": "int64_t function_4090d0(int64_t a1, int64_t a2) {\n    // 0x4090d0\n    int128_t v1; // 0x4090d0\n    int128_t v2 = v1;\n    int64_t v3 = a1;\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x4090d0\n    *(int64_t *)(a1 + 8) = v4;\n    if (v4 < 1) {\n        int128_t v5 = __asm_pxor(v2, v2); // 0x409120\n        *(int64_t *)(v3 + 16) = 0;\n        __asm_movups(*(int128_t *)&v3, v5);\n        return 0;\n    }\n    int64_t * v6 = (int64_t *)v3; // 0x4090ef\n    *v6 = v4;\n    int32_t size = 8 * (int32_t)v4; // 0x4090f5\n    int64_t * mem = malloc(size); // 0x4090f5\n    *(int64_t *)(v3 + 16) = (int64_t)mem;\n    int64_t result; // 0x4090d0\n    if (mem == NULL) {\n        // 0x409138\n        *(int64_t *)(v3 + 8) = 0;\n        *v6 = 0;\n        result = 12;\n    } else {\n        // 0x409103\n        memcpy(mem, (int64_t *)*(int64_t *)(a2 + 16), size);\n        result = 0;\n    }\n    // 0x409115\n    return result;\n}\n"
        },
        {
            "funcName": "function_409150",
            "funcStartAddr": "409150",
            "funcEndAddr": "4092d2",
            "decompiledFuncCode": "int64_t function_409150(int64_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x409150\n    int128_t v1; // 0x409150\n    int128_t v2 = v1;\n    int64_t v3 = (int64_t)a1;\n    if (a2 != 0) {\n        int64_t * v4 = (int64_t *)(a2 + 8); // 0x409167\n        int64_t v5 = *v4; // 0x409167\n        if (a3 != 0 && v5 >= 1) {\n            int64_t * v6 = (int64_t *)(a3 + 8); // 0x40917d\n            uint64_t v7 = *v6; // 0x40917d\n            if (v7 < 1) {\n                // 0x409253\n                return function_4090d0(v3, a2);\n            }\n            int64_t v8 = v7 + v5; // 0x40918d\n            *a1 = v8;\n            int64_t * mem = malloc(8 * (int32_t)v8); // 0x40919f\n            int64_t v9 = (int64_t)mem; // 0x40919f\n            *(int64_t *)(v3 + 16) = v9;\n            if (mem == NULL) {\n                // 0x40923a\n                return 12;\n            }\n            int64_t v10 = *(int64_t *)(a2 + 16); // 0x4091b4\n            int64_t v11 = 0;\n            int64_t v12 = 0;\n            int64_t v13 = v9;\n            int64_t v14 = *(int64_t *)(a3 + 16); // 0x4091f8\n            int64_t v15 = *(int64_t *)v10; // 0x4091fc\n            int64_t v16 = *(int64_t *)(v14 + 8 * v11); // 0x409203\n            int64_t v17; // 0x409150\n            int64_t v18; // 0x409150\n            if (v15 > v16) {\n                // 0x40920c\n                *(int64_t *)v13 = v16;\n                v17 = v11 + 1;\n                v18 = v12;\n            } else {\n                // 0x4091c8\n                *(int64_t *)v13 = v15;\n                v17 = v11 + (int64_t)(v15 == v16);\n                v18 = v12 + 1;\n            }\n            int64_t v19 = 1; // 0x4091ff\n            int64_t v20 = v18;\n            int64_t v21 = v17;\n            uint64_t v22 = *v4; // 0x4091da\n            int64_t v23; // 0x409150\n            while (v22 > v20) {\n                int64_t v24 = v13 + 8; // 0x4091de\n                int64_t v25 = 8 * v20 + v10; // 0x4091eb\n                if (v7 <= v21) {\n                    int64_t v26 = v22 - v20; // 0x4092b0\n                    memcpy((int64_t *)v24, (int64_t *)v25, 8 * (int32_t)v26);\n                    v23 = v26 + v19;\n                    goto lab_0x409279;\n                }\n                v11 = v21;\n                v12 = v20;\n                v13 = v24;\n                v14 = *(int64_t *)(a3 + 16);\n                v15 = *(int64_t *)v25;\n                v16 = *(int64_t *)(v14 + 8 * v11);\n                if (v15 > v16) {\n                    // 0x40920c\n                    *(int64_t *)v13 = v16;\n                    v17 = v11 + 1;\n                    v18 = v12;\n                } else {\n                    // 0x4091c8\n                    *(int64_t *)v13 = v15;\n                    v17 = v11 + (int64_t)(v15 == v16);\n                    v18 = v12 + 1;\n                }\n                // 0x4091da\n                v19++;\n                v20 = v18;\n                v21 = v17;\n                v22 = *v4;\n            }\n            int64_t v27 = *v6; // 0x409270\n            v23 = v19;\n            if (v27 > v21) {\n                int64_t v28 = v27 - v21; // 0x40929b\n                memcpy((int64_t *)(8 * v19 + v9), (int64_t *)(8 * v21 + v14), 8 * (int32_t)v28);\n                v23 = v28 + v19;\n            }\n          lab_0x409279:\n            // 0x409279\n            *(int64_t *)(v3 + 8) = v23;\n            return 0;\n        }\n        // 0x409218\n        if (v5 >= 0 == (v5 != 0)) {\n            // 0x409253\n            return function_4090d0(v3, a2);\n        }\n    }\n    if (a3 != 0) {\n        int64_t v29 = *(int64_t *)(a3 + 8); // 0x409222\n        if (v29 >= 0 == (v29 != 0)) {\n            // 0x409253\n            return function_4090d0(v3, a3);\n        }\n    }\n    // 0x409229\n    *(int64_t *)(v3 + 16) = 0;\n    *(int128_t *)a1 = (int128_t)__asm_movaps(__asm_pxor(v2, v2));\n    // 0x40923a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4092e0",
            "funcStartAddr": "4092e0",
            "funcEndAddr": "4095e0",
            "decompiledFuncCode": "int64_t function_4092e0(int128_t * a1, int64_t a2, int64_t * a3, int32_t a4) {\n    int64_t v1 = (int64_t)a3;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x4092ee\n    uint64_t v3 = *v2; // 0x4092ee\n    if (v3 == 0) {\n        // 0x4095b8\n        *(int32_t *)a1 = 0;\n        // 0x409387\n        return 0;\n    }\n    uint64_t v4 = (int64_t)a4;\n    int64_t v5 = v3 + (v4 & 0xffffffff); // 0x4092fe\n    int64_t v6 = v5; // 0x409302\n    if (v3 >= 1) {\n        int64_t v7 = *(int64_t *)(v1 + 16); // 0x409304\n        int64_t v8 = v7; // 0x40930c\n        int64_t v9 = v5; // 0x40930c\n        v9 += *(int64_t *)v8;\n        v8 += 8;\n        v6 = v9;\n        while (v7 + 8 * v3 != v8) {\n            // 0x409310\n            v9 += *(int64_t *)v8;\n            v8 += 8;\n            v6 = v9;\n        }\n    }\n    int64_t v10 = *(int64_t *)(a2 + 136) & v6; // 0x409331\n    int64_t v11 = 24 * v10 + *(int64_t *)(a2 + 64); // 0x40933c\n    uint64_t v12 = *(int64_t *)v11; // 0x409340\n    if (v12 >= 1) {\n        int64_t v13 = 0; // 0x409352\n        int64_t v14 = *(int64_t *)(8 * v13 + *(int64_t *)(v11 + 16)); // 0x409361\n        int64_t result; // 0x4092e0\n        if (*(int64_t *)v14 == v6) {\n            // 0x40936a\n            if ((int32_t)(*(char *)(v14 + 104) % 16) == a4) {\n                // 0x409377\n                result = v14;\n                if ((char)function_406480(*(int64_t *)(v14 + 80), v1, 3 * v10) != 0) {\n                    // 0x409387\n                    return result;\n                }\n            }\n        }\n        // 0x409358\n        v13++;\n        while (v13 != v12) {\n            // 0x409361\n            v14 = *(int64_t *)(8 * v13 + *(int64_t *)(v11 + 16));\n            if (*(int64_t *)v14 == v6) {\n                // 0x40936a\n                if ((int32_t)(*(char *)(v14 + 104) % 16) == a4) {\n                    // 0x409377\n                    result = v14;\n                    if ((char)function_406480(*(int64_t *)(v14 + 80), v1, 3 * v10) != 0) {\n                        // 0x409387\n                        return result;\n                    }\n                }\n            }\n            // 0x409358\n            v13++;\n        }\n    }\n    int64_t * mem = calloc(112, 1); // 0x4093aa\n    if (mem == NULL) {\n        // 0x409538\n        *(int32_t *)a1 = 12;\n        // 0x409387\n        return 0;\n    }\n    int64_t result2 = (int64_t)mem; // 0x4093aa\n    int64_t v15 = result2 + 8; // 0x4093bb\n    if ((int32_t)function_4090d0(v15, v1) != 0) {\n        // 0x4095d3\n        free(mem);\n        // 0x409538\n        *(int32_t *)a1 = 12;\n        // 0x409387\n        return 0;\n    }\n    char * v16 = (char *)(result2 + 104); // 0x4093d6\n    *v16 = *v16 & -16 | (char)a4 % 16;\n    int64_t * v17 = (int64_t *)(result2 + 80); // 0x4093f6\n    *v17 = v15;\n    int64_t v18; // 0x4092e0\n    int64_t v19; // 0x4092e0\n    int64_t v20; // 0x4092e0\n    int64_t v21; // 0x4092e0\n    int64_t v22; // 0x4092e0\n    int64_t v23; // 0x4092e0\n    int64_t v24; // 0x4092e0\n    int64_t v25; // 0x4092e0\n    int64_t v26; // 0x409400\n    int64_t v27; // 0x4092e0\n    int64_t * v28; // 0x4092e0\n    uint64_t v29; // 0x40943a\n    if (*v2 >= 1) {\n        // 0x409400\n        v26 = result2 + 24;\n        v27 = result2 + 16;\n        v28 = (int64_t *)v27;\n        v23 = v1;\n        v18 = 0;\n        v21 = 0;\n        while (true) {\n          lab_0x409420:\n            // 0x409420\n            v22 = v21;\n            int64_t v30 = v18;\n            int64_t v31 = 16 * *(int64_t *)(*(int64_t *)(v1 + 16) + 8 * v22) + v23; // 0x40942c\n            int64_t v32 = v31 + 8; // 0x409430\n            uint32_t v33 = *(int32_t *)v32; // 0x409430\n            unsigned char v34 = *(char *)v32; // 0x409433\n            v25 = 1;\n            v20 = v30;\n            if (v34 == 1 == (v33 & 0x3ff00) == 0) {\n                goto lab_0x4094fe;\n            } else {\n                char v35 = 2 * *(char *)(v31 + 10) & 32 | *v16;\n                *v16 = v35;\n                if (v34 == 2) {\n                    // 0x409550\n                    *v16 = v35 | 16;\n                } else {\n                    if (v34 == 4) {\n                        // 0x409484\n                        *v16 = v35 | 64;\n                    }\n                }\n                int64_t v36 = v34; // 0x409433\n                v25 = v36;\n                v20 = v30;\n                if ((v33 & 0x3ff00) == 0) {\n                    goto lab_0x4094fe;\n                } else {\n                    int64_t v37 = v36; // 0x409499\n                    int64_t v38 = v30; // 0x409499\n                    if (v15 == *v17) {\n                        int64_t * mem2 = malloc(24); // 0x409585\n                        int64_t v39 = (int64_t)mem2; // 0x409585\n                        *v17 = v39;\n                        if (mem2 == NULL) {\n                            // 0x4095c6\n                            function_407c00(result2);\n                            goto lab_0x409538;\n                        }\n                        // 0x409594\n                        if ((int32_t)function_4090d0(v39, v1) != 0) {\n                          lab_0x409538:\n                            // 0x409538\n                            *(int32_t *)a1 = 12;\n                            // 0x409387\n                            return 0;\n                        }\n                        // 0x4095a3\n                        *v16 = *v16 | -128;\n                        v37 = v1;\n                        v38 = 0;\n                    }\n                    // 0x40949f\n                    v29 = (int64_t)(v33 / 256 & 0xff03ff);\n                    v19 = v38;\n                    v24 = v37;\n                    if (v29 % 2 == 0) {\n                        if (v4 % 2 == 0 || (v29 & 2) == 0) {\n                            goto lab_0x4094b3;\n                        } else {\n                            goto lab_0x4094d0;\n                        }\n                    } else {\n                        if (v4 % 2 == 0) {\n                            goto lab_0x4094d0;\n                        } else {\n                            if ((v29 & 2) != 0) {\n                                goto lab_0x4094d0;\n                            } else {\n                                goto lab_0x4094b3;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x409514:\n    // 0x409514\n    if ((int32_t)function_406b50(a2, result2, v6) == 0) {\n        // 0x409387\n        return result2;\n    }\n    // 0x40952a\n    function_407c00(result2);\n    // 0x409538\n    *(int32_t *)a1 = 12;\n    // 0x409387\n    return 0;\n  lab_0x4094fe:;\n    int64_t v40 = v22 + 1; // 0x4094fe\n    v23 = v25;\n    v18 = v20;\n    v21 = v40;\n    if (v40 >= *v2) {\n        // break -> 0x409514\n        goto lab_0x409514;\n    }\n    goto lab_0x409420;\n  lab_0x4094b3:\n    if ((v4 & 2) == 0 == ((v29 & 16) != 0)) {\n        goto lab_0x4094d0;\n    } else {\n        // 0x4094be\n        v25 = v24;\n        v20 = v19;\n        if ((v4 & 4) != 0 || (v29 & 64) == 0) {\n            goto lab_0x4094fe;\n        } else {\n            goto lab_0x4094d0;\n        }\n    }\n  lab_0x4094d0:;\n    int64_t v41 = v22 - v19; // 0x4094d3\n    int64_t v42 = v24; // 0x4094d6\n    if (v41 >= 0) {\n        int64_t v43 = *v28; // 0x4094d8\n        v42 = v24;\n        if (v41 < v43) {\n            // 0x4094e2\n            *v28 = v43 - 1;\n            function_4081a0(v27, v26, v41);\n            v42 = v26;\n        }\n    }\n    // 0x4094fa\n    v25 = v42;\n    v20 = v19 + 1;\n    goto lab_0x4094fe;\n}\n"
        },
        {
            "funcName": "function_4095e0",
            "funcStartAddr": "4095e0",
            "funcEndAddr": "4097c8",
            "decompiledFuncCode": "int64_t function_4095e0(int32_t * a1, int64_t a2, int64_t * a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = (int64_t)a3;\n    int64_t * v2 = (int64_t *)(v1 + 8); // 0x4095ee\n    int64_t v3 = *v2; // 0x4095ee\n    if (v3 == 0) {\n        // 0x4097b4\n        *a1 = 0;\n        // 0x40975f\n        return 0;\n    }\n    int64_t v4 = v3; // 0x4095fb\n    if (v3 >= 1) {\n        int64_t v5 = *(int64_t *)(v1 + 16); // 0x4095fd\n        int64_t v6 = v5; // 0x409605\n        int64_t v7 = v3; // 0x409605\n        v7 += *(int64_t *)v6;\n        v6 += 8;\n        v4 = v7;\n        while (v5 + 8 * v3 != v6) {\n            // 0x409608\n            v7 += *(int64_t *)v6;\n            v6 += 8;\n            v4 = v7;\n        }\n    }\n    int64_t v8 = *(int64_t *)(a2 + 136) & v4; // 0x409624\n    int64_t v9 = 24 * v8 + *(int64_t *)(a2 + 64); // 0x40962f\n    uint64_t v10 = *(int64_t *)v9; // 0x409633\n    if (v10 >= 1) {\n        int64_t v11 = 0; // 0x409642\n        int64_t v12 = *(int64_t *)(8 * v11 + *(int64_t *)(v9 + 16)); // 0x409648\n        int64_t result; // 0x4095e0\n        int64_t v13; // 0x409658\n        if (*(int64_t *)v12 == v4) {\n            // 0x409651\n            v13 = function_406480(v12 + 8, v1, 3 * v8);\n            result = v12;\n            if ((char)v13 != 0) {\n                // 0x40975f\n                return result;\n            }\n        }\n        // 0x409665\n        v11++;\n        while (v10 != v11) {\n            // 0x409648\n            v12 = *(int64_t *)(8 * v11 + *(int64_t *)(v9 + 16));\n            if (*(int64_t *)v12 == v4) {\n                // 0x409651\n                v13 = function_406480(v12 + 8, v1, 3 * v8);\n                result = v12;\n                if ((char)v13 != 0) {\n                    // 0x40975f\n                    return result;\n                }\n            }\n            // 0x409665\n            v11++;\n        }\n    }\n    int64_t * mem = calloc(112, 1); // 0x409678\n    if (mem == NULL) {\n        // 0x4097a8\n        *a1 = 12;\n        // 0x40975f\n        return 0;\n    }\n    int64_t result2 = (int64_t)mem; // 0x409678\n    int64_t v14 = result2 + 8; // 0x409689\n    if ((int32_t)function_4090d0(v14, v1) != 0) {\n        // 0x4097a0\n        free(mem);\n        // 0x4097a8\n        *a1 = 12;\n        // 0x40975f\n        return 0;\n    }\n    uint64_t v15 = *v2; // 0x4096a0\n    *(int64_t *)(result2 + 80) = v14;\n    char v16; // 0x4095e0\n    int64_t v17; // 0x4095e0\n    int64_t v18; // 0x4095e0\n    int64_t v19; // 0x4096b9\n    char * v20; // 0x4095e0\n    if (v15 >= 1) {\n        int64_t v21 = *(int64_t *)(v1 + 16); // 0x4096b1\n        v19 = v21 + 8 * v15;\n        v20 = (char *)(result2 + 104);\n        v17 = v21;\n        while (true) {\n          lab_0x409704_2:\n            // 0x409704\n            v18 = v17;\n            int64_t v22 = 16 * *(int64_t *)v18 + v21; // 0x40970b\n            int64_t v23 = v22 + 8; // 0x40970e\n            char v24 = *(char *)v23; // 0x40970e\n            if (v24 != 1) {\n                char v25 = 2 * *(char *)(v22 + 10) & 32 | *v20;\n                *v20 = v25;\n                if (v24 == 2) {\n                    // 0x409778\n                    *v20 = v25 | 16;\n                    goto lab_0x4096fb;\n                } else {\n                    if (v24 != 4) {\n                        // 0x409788\n                        v16 = v25;\n                        if (v24 == 12) {\n                            goto lab_0x409740;\n                        } else {\n                            // 0x40978d\n                            v16 = v25;\n                            if ((*(int32_t *)v23 & 0x3ff00) == 0) {\n                                goto lab_0x4096fb;\n                            } else {\n                                goto lab_0x409740;\n                            }\n                        }\n                    } else {\n                        // 0x4096f5\n                        *v20 = v25 | 64;\n                        goto lab_0x4096fb;\n                    }\n                }\n            } else {\n                // 0x409717\n                if ((*(int32_t *)v23 & 0x3ff00) == 0) {\n                    goto lab_0x4096fb;\n                } else {\n                    char v26 = 2 * *(char *)(v22 + 10) & 32 | *v20;\n                    *v20 = v26;\n                    v16 = v26;\n                    goto lab_0x409740;\n                }\n            }\n        }\n    }\n  lab_0x40974d_2:\n    // 0x40974d\n    if ((int32_t)function_406b50(a2, result2, v4) == 0) {\n        // 0x40975f\n        return result2;\n    }\n    // 0x4097be\n    function_407c00(result2);\n    // 0x4097a8\n    *a1 = 12;\n    // 0x40975f\n    return 0;\n  lab_0x4096fb:;\n    int64_t v27 = v18 + 8; // 0x4096fb\n    if (v19 == v27) {\n        // break -> 0x40974d\n        goto lab_0x40974d_2;\n    }\n    // 0x409704\n    v17 = v27;\n    goto lab_0x409704_2;\n  lab_0x409740:;\n    int64_t v28 = v18 + 8; // 0x409740\n    *v20 = v16 | -128;\n    if (v19 == v28) {\n        // break -> 0x40974d\n        goto lab_0x40974d_2;\n    }\n    // 0x409704\n    v17 = v28;\n    goto lab_0x409704_2;\n}\n"
        },
        {
            "funcName": "function_4097d0",
            "funcStartAddr": "4097d0",
            "funcEndAddr": "409878",
            "decompiledFuncCode": "int64_t function_4097d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4097d0\n    if (a4 < 1) {\n        // 0x409868\n        return 0;\n    }\n    int64_t v1 = 0; // 0x4097d0\n    int64_t result; // 0x4097d0\n    while (true) {\n        int64_t v2 = v1;\n        int64_t v3 = 8 * v2; // 0x409849\n        int64_t * v4 = (int64_t *)(v3 + a2); // 0x409849\n        int64_t v5 = *v4; // 0x409849\n        int64_t v6 = *(int64_t *)(v3 + a3); // 0x40984e\n        if (v5 != 0) {\n            if (v6 != 0) {\n                // 0x4097fd\n                int64_t v7; // bp-72, 0x4097d0\n                int64_t v8 = function_409150(&v7, v5 + 8, v6 + 8, a4); // 0x40980a\n                int32_t v9 = v8; // 0x40980f\n                int32_t v10 = v9; // bp-76, 0x40980f\n                result = v8;\n                if (v9 != 0) {\n                    // break -> 0x409868\n                    break;\n                }\n                // 0x409817\n                int64_t v11; // 0x4097d0\n                *v4 = function_4095e0(&v10, a1, &v7, a4, v11, v11);\n                free((int64_t *)v11);\n                uint32_t v12 = v10; // 0x409838\n                if (v12 != 0) {\n                    // 0x409868\n                    result = v12;\n                    return result;\n                }\n            }\n            int64_t v13 = v2 + 1; // 0x409840\n            v1 = v13;\n            result = 0;\n            if (v13 == a4) {\n                // break -> 0x409868\n                break;\n            }\n        } else {\n            // 0x409858\n            *v4 = v6;\n            int64_t v14 = v2 + 1; // 0x40985d\n            v1 = v14;\n            result = 0;\n            if (v14 == a4) {\n                // break -> 0x409868\n                break;\n            }\n        }\n    }\n  lab_0x409868_2:\n    // 0x409868\n    return result;\n}\n"
        },
        {
            "funcName": "function_409880",
            "funcStartAddr": "409880",
            "funcEndAddr": "409c02",
            "decompiledFuncCode": "int64_t function_409880(int64_t a1, int128_t * a2, uint64_t a3, int64_t a4, int32_t a5) {\n    uint64_t v1 = *(int64_t *)(a1 + 200); // 0x409891\n    if (v1 <= 0) {\n        // 0x409b82\n        return 0;\n    }\n    int64_t v2 = (int64_t)a2;\n    int64_t * v3 = (int64_t *)(a1 + 216); // 0x4098a4\n    int64_t v4 = *v3; // 0x4098a4\n    int64_t v5 = v4 + 8; // 0x4098bc\n    int64_t v6 = 0;\n    uint64_t v7 = v6 + v1; // 0x4098a0\n    int64_t v8 = (v7 / 0x8000000000000000 + v7) / 2; // 0x4098b5\n    int64_t v9 = v8; // 0x4098c1\n    int64_t v10 = v8; // 0x4098c1\n    int64_t v11 = v1; // 0x4098c1\n    int64_t v12; // 0x409880\n    int64_t v13; // 0x409880\n    uint64_t v14; // 0x4098d0\n    int64_t v15; // 0x4098de\n    if (*(int64_t *)(40 * v8 + v5) >= a3) {\n        v12 = v6;\n        if (v9 <= v6) {\n            // break (via goto) -> 0x4098fb\n            goto lab_0x4098fb;\n        }\n        // 0x4098d0\n        v14 = v9 + v6;\n        v15 = (v14 / 0x8000000000000000 + v14) / 2;\n        v10 = v15;\n        v11 = v9;\n        while (*(int64_t *)(40 * v15 + v5) >= a3) {\n            // 0x4098f6\n            v13 = v15;\n            v12 = v6;\n            if (v13 <= v6) {\n                // break (via goto) -> 0x4098fb\n                goto lab_0x4098fb;\n            }\n            // 0x4098d0\n            v14 = v13 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v15;\n            v11 = v13;\n        }\n    }\n    int64_t v16 = v10 + 1; // 0x409b70\n    v12 = v16;\n    while (v16 < v11) {\n        // 0x4098a0\n        v6 = v16;\n        v7 = v6 + v11;\n        v8 = (v7 / 0x8000000000000000 + v7) / 2;\n        v9 = v8;\n        v10 = v8;\n        if (*(int64_t *)(40 * v8 + v5) >= a3) {\n            v12 = v6;\n            if (v9 <= v6) {\n                // break (via goto) -> 0x4098fb\n                goto lab_0x4098fb;\n            }\n            // 0x4098d0\n            v14 = v9 + v6;\n            v15 = (v14 / 0x8000000000000000 + v14) / 2;\n            v10 = v15;\n            v11 = v9;\n            while (*(int64_t *)(40 * v15 + v5) >= a3) {\n                // 0x4098f6\n                v13 = v15;\n                v12 = v6;\n                if (v13 <= v6) {\n                    // break (via goto) -> 0x4098fb\n                    goto lab_0x4098fb;\n                }\n                // 0x4098d0\n                v14 = v13 + v6;\n                v15 = (v14 / 0x8000000000000000 + v14) / 2;\n                v10 = v15;\n                v11 = v13;\n            }\n        }\n        // 0x409b70\n        v16 = v10 + 1;\n        v12 = v16;\n    }\n  lab_0x4098fb:\n    // 0x4098fb\n    if (v1 <= v12) {\n        // 0x409b82\n        return 0;\n    }\n    int64_t v17 = 40 * v12; // 0x40990f\n    if (v12 == -1 | *(int64_t *)(v17 + 8 + v4) != a3) {\n        // 0x409b82\n        return 0;\n    }\n    int64_t v18 = v2 + 16; // 0x409936\n    int64_t v19 = *(int64_t *)(a1 + 152); // 0x409945\n    int64_t * v20 = (int64_t *)(a1 + 184);\n    int64_t v21; // bp-88, 0x409880\n    int64_t v22 = &v21;\n    int64_t v23 = v4; // 0x40994f\n    int64_t * v24; // 0x409880\n    int64_t v25; // 0x409880\n    int64_t v26; // 0x409880\n    int64_t result; // 0x409880\n    int64_t v27; // 0x409880\n    int64_t v28; // 0x409880\n    int64_t v29; // 0x409880\n    int64_t v30; // 0x409880\n    int32_t v31; // bp-92, 0x409880\n    int64_t v32; // 0x409a58\n    int64_t v33; // 0x409973\n    int64_t v34; // 0x409977\n    int64_t v35; // 0x409987\n    while (true) {\n        // 0x409953\n        int64_t v36; // 0x409880\n        v29 = v36;\n        v25 = v23 + v17;\n        int64_t v37; // 0x409a82\n        while (true) {\n          lab_0x409a38:\n            // 0x409a38\n            v26 = v25;\n            v30 = v29;\n            int64_t v38 = *(int64_t *)v26; // 0x409a38\n            int64_t v39 = *(int64_t *)(v2 + 8); // 0x409a3b\n            v28 = v30;\n            if (function_408030(v39, v18, v38) == 0) {\n                goto lab_0x409a29;\n            } else {\n                // 0x409a54\n                v32 = *(int64_t *)(v26 + 24) + a3;\n                int64_t v40 = v32 - *(int64_t *)(v26 + 16); // 0x409a5e\n                if (v40 != a3) {\n                    // 0x409968\n                    v33 = *(int64_t *)(*(int64_t *)(v19 + 24) + 8 * v38);\n                    v34 = 8 * v40;\n                    int64_t * v41 = (int64_t *)(*v20 + v34);\n                    v35 = *v41;\n                    if (v35 == 0) {\n                        // 0x409b20\n                        v21 = 1;\n                        int64_t * mem = malloc(8); // 0x409b3c\n                        if (mem == NULL) {\n                            // 0x409bc2\n                            result = 12;\n                            return result;\n                        }\n                        // 0x409b4b\n                        v31 = 0;\n                        *mem = v33;\n                        v24 = v41;\n                        v27 = (int64_t)mem;\n                        goto lab_0x4099ee;\n                    } else {\n                        // 0x409998\n                        v28 = v30;\n                        if (function_408030(*(int64_t *)(v35 + 16), v35 + 24, v33) != 0) {\n                            goto lab_0x409a29;\n                        } else {\n                            // 0x4099ad\n                            v31 = function_4090d0(v22, v35 + 8);\n                            int64_t v42 = function_406a20(v22, v33); // 0x4099c9\n                            if (v31 != 0) {\n                                goto lab_0x409bb0_2;\n                            }\n                            if ((char)v42 != 1) {\n                                goto lab_0x409bb0_2;\n                            }\n                            // 0x4099e2\n                            v24 = (int64_t *)(*v20 + v34);\n                            v27 = v30;\n                            goto lab_0x4099ee;\n                        }\n                    }\n                } else {\n                    int64_t v43 = *(int64_t *)(v19 + 40); // 0x409a6b\n                    v37 = *(int64_t *)*(int64_t *)(24 * v38 + 16 + v43);\n                    v28 = v30;\n                    if (function_408030(v39, v18, v37) == 0) {\n                        // break -> 0x409a92\n                        break;\n                    }\n                    goto lab_0x409a29;\n                }\n            }\n        }\n        // 0x409a92\n        v21 = 1;\n        int64_t * mem2 = malloc(8); // 0x409aa9\n        int32_t v44; // 0x409880\n        if (mem2 == NULL) {\n            // 0x409be6\n            v21 = 0;\n            v44 = 12;\n        } else {\n            // 0x409abc\n            *mem2 = v37;\n            v44 = 0;\n        }\n        // 0x409ac1\n        v31 = v44;\n        int64_t v45 = function_4089a0(v19, &v21, a4, a5); // 0x409ad6\n        int64_t v46 = function_408570((int64_t *)a2, (int128_t *)&v21); // 0x409ae6\n        free(mem2);\n        uint32_t v47 = v31; // 0x409af8\n        if ((v47 || (int32_t)(v46 || v45)) != 0) {\n            // 0x409bd6\n            result = v47;\n            if (v47 != 0) {\n                return result;\n            } else {\n                // 0x409bda\n                result = ((int32_t)v45 != 0 ? v45 : v46) & 0xffffffff;\n                return result;\n            }\n        }\n        // 0x409b0a\n        v36 = (int64_t)mem2;\n        v23 = *v3;\n    }\n  lab_0x409b82:\n    // 0x409b82\n    return result;\n  lab_0x409bb0_2:\n    // 0x409bb0\n    free((int64_t *)v30);\n    result = v31;\n    if (v31 != 0) {\n        return result;\n    } else {\n        // 0x409bc2\n        result = 12;\n        return result;\n    }\n  lab_0x409a29:\n    // 0x409a29\n    v29 = v28;\n    v25 = v26 + 40;\n    result = 0;\n    if (*(char *)(v26 + 32) == 0) {\n        return result;\n    }\n    goto lab_0x409a38;\n  lab_0x4099ee:;\n    int64_t v48 = v27;\n    *v24 = function_4095e0(&v31, v19, &v21, v33, v32, v35);\n    free((int64_t *)v48);\n    v28 = v48;\n    if (*(int64_t *)(*v20 + v34) == 0) {\n        uint32_t v49 = v31; // 0x409b98\n        v28 = v48;\n        if (v49 != 0) {\n            // 0x409b82\n            result = v49;\n            goto lab_0x409b82;\n        }\n    }\n    goto lab_0x409a29;\n}\n"
        },
        {
            "funcName": "function_409c10",
            "funcStartAddr": "409c10",
            "funcEndAddr": "409d51",
            "decompiledFuncCode": "int64_t function_409c10(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = *(int64_t *)(a1 + 152); // 0x409c22\n    if (a2 < 1) {\n      lab_0x409cf2:\n        // 0x409cf2\n        return 0;\n    }\n    int64_t * v2 = (int64_t *)(a1 + 232);\n    int64_t * v3 = (int64_t *)(a1 + 248);\n    int64_t * v4 = (int64_t *)(a1 + 240);\n    int64_t v5 = 0; // 0x409c40\n    int64_t v6; // 0x409c10\n    int64_t v7; // 0x409c50\n    int64_t v8; // 0x409c5b\n    uint64_t v9; // 0x409c65\n    while (true) {\n        // 0x409c4d\n        v6 = v5;\n        v7 = *(int64_t *)(8 * v6 + *(int64_t *)a3);\n        v8 = 16 * v7 + *(int64_t *)v1;\n        if (*(char *)(v8 + 8) == 8) {\n            // 0x409c65\n            v9 = *(int64_t *)v8;\n            if (v9 <= 63) {\n                // 0x409c6e\n                if ((*(int64_t *)(v1 + 160) & 1 << v9 % 64) != 0) {\n                    // break -> 0x409c7c\n                    break;\n                }\n            }\n        }\n        // 0x409c40\n        v5 = v6 + 1;\n        if (v5 >= a2) {\n            return 0;\n        }\n    }\n    int64_t v10 = *v2; // 0x409c7c\n    int64_t v11 = *v3; // 0x409c83\n    int64_t v12 = v10; // 0x409c91\n    int64_t v13 = v11; // 0x409c91\n    int64_t * mem; // 0x409d20\n    if (v10 == *v4) {\n        // 0x409d08\n        mem = realloc((int64_t *)v11, 16 * (int32_t)v10);\n        if (mem == NULL) {\n            // break -> 0x409cf2\n            break;\n        }\n        // 0x409d32\n        v13 = (int64_t)mem;\n        *v3 = v13;\n        v12 = *v2;\n        *v4 = 2 * v10;\n    }\n    int64_t * mem2 = calloc(1, 48); // 0x409cac\n    int64_t v14 = (int64_t)mem2; // 0x409cac\n    *(int64_t *)(v13 + 8 * v12) = v14;\n    int64_t result = 12; // 0x409cc2\n    while (mem2 != NULL) {\n        // 0x409cc4\n        *mem2 = a4;\n        int64_t v15 = v6 + 1; // 0x409cd0\n        *(int64_t *)(v14 + 8) = v7;\n        *v2 = v12 + 1;\n        result = 0;\n        if (v15 >= 48) {\n            // break -> 0x409cf2\n            break;\n        }\n        v5 = v15;\n        while (true) {\n            // 0x409c4d\n            v6 = v5;\n            v7 = *(int64_t *)(8 * v6 + *(int64_t *)a3);\n            v8 = 16 * v7 + *(int64_t *)v1;\n            if (*(char *)(v8 + 8) == 8) {\n                // 0x409c65\n                v9 = *(int64_t *)v8;\n                if (v9 <= 63) {\n                    // 0x409c6e\n                    if ((*(int64_t *)(v1 + 160) & 1 << v9 % 64) != 0) {\n                        // break -> 0x409c7c\n                        break;\n                    }\n                }\n            }\n            // 0x409c40\n            v5 = v6 + 1;\n            if (v5 >= 48) {\n                return 0;\n            }\n        }\n        // 0x409c7c\n        v10 = *v2;\n        v11 = *v3;\n        v12 = v10;\n        v13 = v11;\n        if (v10 == *v4) {\n            // 0x409d08\n            mem = realloc((int64_t *)v11, 16 * (int32_t)v10);\n            result = 12;\n            if (mem == NULL) {\n                // break -> 0x409cf2\n                break;\n            }\n            // 0x409d32\n            v13 = (int64_t)mem;\n            *v3 = v13;\n            v12 = *v2;\n            *v4 = 2 * v10;\n        }\n        // 0x409c93\n        mem2 = calloc(1, 48);\n        v14 = (int64_t)mem2;\n        *(int64_t *)(v13 + 8 * v12) = v14;\n        result = 12;\n    }\n    // 0x409cf2\n    return result;\n}\n"
        },
        {
            "funcName": "function_409d60",
            "funcStartAddr": "409d60",
            "funcEndAddr": "409e4e",
            "decompiledFuncCode": "int64_t function_409d60(int64_t a1, int64_t a2, int32_t a3) {\n    if (a2 < 0) {\n        // 0x409e10\n        return (int64_t)*(int32_t *)(a1 + 112);\n    }\n    // 0x409d72\n    if (*(int64_t *)(a1 + 88) == a2) {\n        // 0x409db6\n        return a3 & 2 ^ 10;\n    }\n    // 0x409d7c\n    if (*(int32_t *)(a1 + 144) < 2) {\n        unsigned char v1 = *(char *)(*(int64_t *)(a1 + 8) + a2); // 0x409dcb\n        int64_t v2 = *(int64_t *)(*(int64_t *)(a1 + 128) + (int64_t)(8 * v1 / 64)); // 0x409dd6\n        if ((1 << (int64_t)(v1 % 64) & v2) != 0) {\n            // 0x409db6\n            return 1;\n        }\n        // 0x409dea\n        if (v1 != 10) {\n            // 0x409db6\n            return 0;\n        }\n        // 0x409df1\n        return 2 * (int64_t)(*(char *)(a1 + 141) != 0);\n    }\n    int64_t v3 = a2;\n    int32_t wc = *(int32_t *)(4 * v3 + *(int64_t *)(a1 + 16)); // 0x409d9a\n    while (wc == -1) {\n        // 0x409d90\n        if (v3 == 0) {\n            // 0x409e10\n            return (int64_t)*(int32_t *)(a1 + 112);\n        }\n        v3--;\n        wc = *(int32_t *)(4 * v3 + *(int64_t *)(a1 + 16));\n    }\n    // 0x409da2\n    if (*(char *)(a1 + 142) != 0) {\n        // 0x409e30\n        if (wc != 95 != (iswalnum(wc) == 0)) {\n            // 0x409db6\n            return 1;\n        }\n    }\n    // 0x409daf\n    if (wc != 10) {\n        // 0x409db6\n        return 0;\n    }\n    // 0x409df1\n    return 2 * (int64_t)(*(char *)(a1 + 141) != 0);\n}\n"
        },
        {
            "funcName": "function_409e50",
            "funcStartAddr": "409e50",
            "funcEndAddr": "409f7b",
            "decompiledFuncCode": "int64_t function_409e50(int64_t a1, int64_t a2, int64_t a3) {\n    unsigned char v1 = *(char *)(*(int64_t *)(a1 + 8) + a3); // 0x409e54\n    int64_t v2 = a2 + 8;\n    unsigned char v3 = *(char *)v2; // 0x409e58\n    if (v3 == 3) {\n        uint64_t v4 = (int64_t)v1; // 0x409e54\n        if ((*(int64_t *)((v4 / 8 & 24) + a2) & 1 << v4 % 64) == 0) {\n            // 0x409eff\n            return 0;\n        }\n    } else {\n        if (v3 < 4) {\n            // 0x409f08\n            if (v1 == (char)a2 != (v3 == 1)) {\n                // 0x409eff\n                return 0;\n            }\n        } else {\n            if (v3 != 5) {\n                // 0x409e6e\n                if (v1 < 0 || v3 != 7) {\n                    // 0x409eff\n                    return 0;\n                }\n            }\n            if (v1 == 10) {\n                // 0x409f60\n                if ((*(char *)(*(int64_t *)(a1 + 152) + 216) & 64) == 0) {\n                    // 0x409eff\n                    return 0;\n                }\n            } else {\n                if (v1 == 0) {\n                    // 0x409e90\n                    if (*(char *)(*(int64_t *)(a1 + 152) + 216) <= -1) {\n                        // 0x409eff\n                        return 0;\n                    }\n                }\n            }\n        }\n    }\n    uint32_t v5 = *(int32_t *)v2; // 0x409ea3\n    if ((v5 & 0x3ff00) == 0) {\n        // 0x409eff\n        return 1;\n    }\n    int64_t v6 = v5; // 0x409ea3\n    uint64_t v7 = function_409d60(a1, a3, *(int32_t *)(a1 + 160)); // 0x409ebf\n    if ((v6 & 1024) != 0) {\n        // 0x409f50\n        if ((v6 & 2048) == 0 != v7 % 2 != 0) {\n            // 0x409eff\n            return 0;\n        }\n    } else {\n        if ((v6 & 2048) != 0) {\n            // 0x409ed7\n            if (v7 % 2 != 0) {\n                // 0x409eff\n                return 0;\n            }\n        }\n    }\n    int64_t result = 0; // 0x409ee2\n    if ((v6 & 0x2000) != 0 != ((v7 & 2) == 0)) {\n        // 0x409eeb\n        result = (char)(v5 / 256) <= -1 ? v7 / 8 % 2 : 1;\n    }\n    // 0x409eff\n    return result;\n}\n"
        },
        {
            "funcName": "function_409f80",
            "funcStartAddr": "409f80",
            "funcEndAddr": "40a048",
            "decompiledFuncCode": "int64_t function_409f80(int64_t * a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = (int64_t)a1;\n    uint64_t v2 = function_409d60(v1, a4, *(int32_t *)(v1 + 160)); // 0x409f96\n    if (a2 < 1) {\n        // 0x40a01c\n        return 0;\n    }\n    int64_t v3 = *(int64_t *)(v1 + 152); // 0x409fa4\n    int64_t v4 = 0; // 0x409fc6\n    int64_t result; // 0x409f80\n    uint32_t v5; // 0x409fde\n    uint32_t v6; // 0x409fe1\n    int64_t v7; // 0x409fd0\n    while (true) {\n      lab_0x409fd0:\n        // 0x409fd0\n        v7 = *(int64_t *)(8 * v4 + v3);\n        int64_t v8 = *(int64_t *)v3 + 8 + 16 * v7; // 0x409fde\n        if (*(char *)v8 != 2) {\n            goto lab_0x40a038;\n        } else {\n            // 0x409ff1\n            v5 = *(int32_t *)v8;\n            result = v7;\n            if ((v5 & 0x3ff00) == 0) {\n                // break -> 0x40a01c\n                break;\n            }\n            // 0x409ff6\n            v6 = v5 / 256;\n            int64_t v9 = v6; // 0x409fe1\n            if ((v9 & 4) == 0) {\n                if (v2 % 2 == 0 || (v9 & 8) == 0) {\n                    goto lab_0x40a005;\n                } else {\n                    goto lab_0x40a038;\n                }\n            } else {\n                if (v2 % 2 == 0) {\n                    goto lab_0x40a038;\n                } else {\n                    if ((v9 & 8) != 0) {\n                        goto lab_0x40a038;\n                    } else {\n                        goto lab_0x40a005;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40a01c_2:\n    // 0x40a01c\n    return result;\n  lab_0x40a038:\n    // 0x40a038\n    v4++;\n    result = 0;\n    if (v4 == a2) {\n        return result;\n    }\n    goto lab_0x409fd0;\n  lab_0x40a005:\n    if ((v2 & 2) == 0 != (v5 & 0x2000) != 0) {\n        // 0x40a010\n        result = v7;\n        if ((v2 & 8) == 0 != (char)v6 < 0) {\n            // break -> 0x40a01c\n            goto lab_0x40a01c_2;\n        }\n    }\n    goto lab_0x40a038;\n}\n"
        },
        {
            "funcName": "function_40a050",
            "funcStartAddr": "40a050",
            "funcEndAddr": "40a837",
            "decompiledFuncCode": "int64_t function_40a050(int64_t * a1, int64_t a2, int32_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(v1 + 40); // 0x40a06a\n    int64_t v3 = *v2; // 0x40a06a\n    int64_t v4 = a2 - v3; // 0x40a074\n    int64_t * v5; // 0x40a050\n    char * v6; // 0x40a050\n    int64_t * v7; // 0x40a050\n    int32_t * v8; // 0x40a050\n    int64_t * v9; // 0x40a050\n    int64_t * v10; // 0x40a050\n    int64_t v11; // 0x40a050\n    if (v3 > a2) {\n        int32_t * v12 = (int32_t *)(v1 + 144);\n        if (*v12 >= 2) {\n            // 0x40a07f\n            *(int64_t *)(v1 + 32) = 0;\n        }\n        int64_t * v13 = (int64_t *)(v1 + 48);\n        *v13 = 0;\n        *v2 = 0;\n        int64_t * v14 = (int64_t *)(v1 + 88);\n        *v14 = *(int64_t *)(v1 + 80);\n        int64_t * v15 = (int64_t *)(v1 + 56);\n        *v15 = 0;\n        int64_t * v16 = (int64_t *)(v1 + 104);\n        *v16 = *(int64_t *)(v1 + 96);\n        char * v17 = (char *)(v1 + 140);\n        *v17 = 0;\n        *(int32_t *)(v1 + 112) = 2 * a3 & 2 ^ 6;\n        v4 = a2;\n        if (*(char *)(v1 + 139) == 0) {\n            // 0x40a1a0\n            *(int64_t *)(v1 + 8) = v1;\n            v7 = v13;\n            v6 = v17;\n            v5 = v15;\n            v11 = a2;\n            v10 = v16;\n            v9 = v14;\n            v8 = v12;\n            if (a2 != 0) {\n                goto lab_0x40a0e3;\n            } else {\n                goto lab_0x40a1b0;\n            }\n        } else {\n            goto lab_0x40a0da;\n        }\n    } else {\n        goto lab_0x40a0da;\n    }\n  lab_0x40a6d8:\n    // 0x40a6d8\n    *v7 = 0;\n    int64_t v18; // 0x40a4d7\n    int64_t v19 = v18; // 0x40a6e2\n    int64_t v20; // 0x40a4da\n    int64_t v21 = v20; // 0x40a6e2\n    int64_t v22 = 0; // 0x40a6e2\n    int64_t v23 = v1; // 0x40a6e2\n    goto lab_0x40a57f;\n  lab_0x40a2d1:;\n    // 0x40a2d1\n    int64_t v41; // 0x40a050\n    int64_t v38; // 0x40a050\n    int64_t v42 = v41 + v38; // 0x40a2d1\n    int64_t v43; // 0x40a050\n    int64_t v44; // 0x40a050\n    int64_t v39; // 0x40a050\n    int64_t v45; // 0x40a050\n    int64_t v46; // 0x40a050\n    int32_t v47; // bp-64, 0x40a050\n    if (v42 < a2) {\n        int64_t * v48 = (int64_t *)(v1 + 32); // 0x40a304\n        int64_t v49 = &v47;\n        int64_t v50 = *(int64_t *)(v1 + 80) - v42; // 0x40a30d\n        int64_t v51 = function_406400(&v47, v42 + v39, v50); // 0x40a320\n        int64_t v52 = v51; // 0x40a336\n        int64_t v53 = v47; // 0x40a336\n        int64_t v54; // 0x40a050\n        if (v51 >= 0xfffffffffffffffe) {\n            // 0x40a765\n            v54 = 0;\n            if (v50 != 0 && v51 != 0) {\n                // 0x40a76f\n                v54 = (int64_t)*(char *)(v42 + v49);\n            }\n            // 0x40a777\n            v52 = 1;\n            v53 = v54;\n        }\n        int64_t v55 = v52 + v42; // 0x40a33c\n        int64_t v56 = v49; // 0x40a342\n        while (v55 < a2) {\n            int64_t v57 = v55;\n            v50 = *(int64_t *)(v1 + 80) - v57;\n            v51 = function_406400(&v47, v57 + v56, v50);\n            v52 = v51;\n            v53 = v47;\n            if (v51 >= 0xfffffffffffffffe) {\n                // 0x40a765\n                v54 = 0;\n                if (v50 != 0 && v51 != 0) {\n                    // 0x40a76f\n                    v54 = (int64_t)*(char *)(v57 + v49);\n                }\n                // 0x40a777\n                v52 = 1;\n                v53 = v54;\n            }\n            // 0x40a33c\n            v55 = v52 + v57;\n            v56 = v49;\n        }\n        int64_t v58 = v55 - a2; // 0x40a344\n        *v7 = v58;\n        v46 = v53;\n        v45 = v49;\n        v43 = v58;\n        v44 = v58;\n        if ((int32_t)v53 == -1) {\n            goto lab_0x40a6f1;\n        } else {\n            goto lab_0x40a357;\n        }\n    } else {\n        int64_t v59 = v42 - a2; // 0x40a6e7\n        *v7 = v59;\n        v44 = v59;\n        goto lab_0x40a6f1;\n    }\n  lab_0x40a0da:\n    // 0x40a0da\n    if (v4 == 0) {\n        // 0x40a0da\n        v10 = (int64_t *)(v1 + 104);\n        v9 = (int64_t *)(v1 + 88);\n        v8 = (int32_t *)(v1 + 144);\n        goto lab_0x40a1b0;\n    } else {\n        // 0x40a0da\n        v7 = (int64_t *)(v1 + 48);\n        v6 = (char *)(v1 + 140);\n        v5 = (int64_t *)(v1 + 56);\n        v11 = v4;\n        goto lab_0x40a0e3;\n    }\n  lab_0x40a0e3:;\n    int64_t v60 = v11;\n    int64_t * v24 = v5;\n    int64_t v61 = *v24; // 0x40a0e3\n    char v62 = *v6; // 0x40a0e7\n    int64_t v63 = *v7; // 0x40a0ee\n    char * v64; // 0x40a050\n    int64_t v30; // 0x40a050\n    int64_t v65; // 0x40a050\n    int64_t v31; // 0x40a050\n    int64_t v66; // 0x40a050\n    int64_t v33; // 0x40a050\n    int64_t v67; // 0x40a050\n    char v68; // 0x40a050\n    int32_t v32; // 0x40a050\n    int64_t v40; // 0x40a5f9\n    int64_t * v69; // 0x40a398\n    int64_t v70; // 0x40a398\n    int64_t v71; // 0x40a3c5\n    uint64_t v72; // 0x40a3c8\n    if (v61 > v60) {\n        if (v62 != 0) {\n            // 0x40a398\n            v69 = (int64_t *)(v1 + 24);\n            v70 = *v69;\n            int64_t v73 = 0; // 0x40a3a1\n            uint64_t v74 = v73 + v63; // 0x40a3b7\n            v71 = (v74 / 0x8000000000000000 + v74) / 2;\n            v72 = *(int64_t *)(8 * v71 + v70);\n            int64_t v75 = v71; // 0x40a3d3\n            int64_t v76 = v73; // 0x40a3d3\n            if (v72 <= v60) {\n                if (v72 >= v60) {\n                    // 0x40a6c0\n                    goto lab_0x40a415;\n                }\n                // 0x40a3ae\n                v75 = v63;\n                v76 = v71 + 1;\n            }\n            // 0x40a3b2\n            v73 = v76;\n            int64_t v77 = v75;\n            while (v73 < v77) {\n                int64_t v78 = v77;\n                v74 = v73 + v78;\n                v71 = (v74 / 0x8000000000000000 + v74) / 2;\n                v72 = *(int64_t *)(8 * v71 + v70);\n                v75 = v71;\n                v76 = v73;\n                if (v72 <= v60) {\n                    if (v72 >= v60) {\n                        // 0x40a6c0\n                        goto lab_0x40a415;\n                    }\n                    // 0x40a3ae\n                    v75 = v78;\n                    v76 = v71 + 1;\n                }\n                // 0x40a3b2\n                v73 = v76;\n                v77 = v75;\n            }\n            // 0x40a408\n            goto lab_0x40a415;\n        } else {\n            // 0x40a103\n            *(int32_t *)(v1 + 112) = (int32_t)function_409d60(v1, v60 - 1, a3);\n            if (*(int32_t *)(v1 + 144) > 1) {\n                int64_t v79 = *(int64_t *)(v1 + 16); // 0x40a1c0\n                int64_t v80; // 0x40a10d\n                memmove((int64_t *)v79, (int64_t *)(v79 + 4 * v60), 4 * (int32_t)v80);\n            }\n            int64_t v81 = v63 - v60;\n            char * v82 = (char *)(v1 + 139); // 0x40a125\n            char v83 = *v82; // 0x40a125\n            char v84 = v83; // 0x40a12e\n            int64_t v85 = v1; // 0x40a12e\n            int64_t v86 = v81; // 0x40a12e\n            if (v83 != 0) {\n                // 0x40a3e0\n                v85 = *(int64_t *)(v1 + 8);\n                memmove((int64_t *)v85, (int64_t *)(v85 + v60), (int32_t)v81);\n                v84 = *v82;\n                v86 = *v7 - v60;\n            }\n            // 0x40a134\n            *v24 = *v24 - v60;\n            *v7 = v86;\n            v68 = v84;\n            v66 = v85;\n            goto lab_0x40a13c;\n        }\n    } else {\n        if (v62 != 0) {\n            // 0x40a73d\n            *v6 = 0;\n            int64_t v87 = v60 - a2;\n            *(int64_t *)(v1 + 88) = *(int64_t *)(v1 + 80) + v87;\n            *(int64_t *)(v1 + 104) = *(int64_t *)(v1 + 96) + v87;\n        }\n        int32_t v88 = *(int32_t *)(v1 + 144); // 0x40a2a8\n        int64_t v89 = *v2; // 0x40a2af\n        *v7 = 0;\n        if (v88 < 2) {\n            int64_t v90 = (int64_t)*(char *)(v60 - 1 + v1 + v89); // 0x40a1fe\n            int64_t v91 = *(int64_t *)(v1 + 120); // 0x40a204\n            *v24 = 0;\n            int64_t v92 = v90; // 0x40a213\n            if (v91 != 0) {\n                // 0x40a215\n                v92 = (int64_t)*(char *)(v91 + v90);\n            }\n            int64_t v93 = *(int64_t *)((v92 / 8 & 24) + *(int64_t *)(v1 + 128)); // 0x40a227\n            int32_t v94 = 1; // 0x40a235\n            if ((v93 & 1 << v92 % 64) == 0) {\n                // 0x40a237\n                v94 = 0;\n                if (v92 == 10) {\n                    // 0x40a23e\n                    v94 = 2 * (int32_t)(*(char *)(v1 + 141) != 0);\n                }\n            }\n            int64_t * v95 = (int64_t *)(v1 + 88); // 0x40a250\n            int64_t * v96 = (int64_t *)(v1 + 104); // 0x40a254\n            *(int32_t *)(v1 + 112) = v94;\n            int64_t v97 = *v95 - v60; // 0x40a25b\n            int64_t v98 = *v96 - v60; // 0x40a25e\n            char * v99 = (char *)(v1 + 139);\n            v30 = v97;\n            v31 = v98;\n            v32 = v88;\n            v33 = v1;\n            if (*v99 == 0) {\n                goto lab_0x40a154;\n            } else {\n                // 0x40a26e\n                *v2 = a2;\n                *v95 = v97;\n                *v96 = v98;\n                v64 = v99;\n                v65 = v97;\n                v67 = v1;\n                goto lab_0x40a280;\n            }\n        } else {\n            // 0x40a2c4\n            v38 = v61;\n            v39 = v1;\n            v41 = v89;\n            if (*(char *)(v1 + 137) != 0) {\n                int64_t v100 = v89 + v1; // 0x40a5a1\n                uint64_t v101 = v60 - (int64_t)v88 + v100; // 0x40a5a5\n                int64_t v102 = v60 - 1 + v100; // 0x40a5a8\n                uint64_t v103 = v101 > v1 ? v101 : v1; // 0x40a5b0\n                v38 = v61;\n                v39 = v1;\n                v41 = v89;\n                if (v103 > v102) {\n                    goto lab_0x40a2d1;\n                } else {\n                    int64_t v104 = v102;\n                    while ((*(char *)v104 & -64) == -128) {\n                        int64_t v105 = v104 - 1; // 0x40a5c0\n                        v38 = v61;\n                        v39 = v1;\n                        v41 = v89;\n                        if (v103 > v105) {\n                            goto lab_0x40a2d1;\n                        }\n                        v104 = v105;\n                    }\n                    int64_t v106 = *(int64_t *)(v1 + 120); // 0x40a5de\n                    int64_t v107 = *(int64_t *)(v1 + 88) + v100 - v104; // 0x40a5e8\n                    int64_t v108 = v104; // 0x40a5ee\n                    if (v106 != 0) {\n                        int64_t v109 = v107 - 6; // 0x40a802\n                        int32_t v110 = v109 == 0 | v109 < 0 != (5 - v107 & v107) < 0 ? (int32_t)v107 - 1 : 5; // 0x40a80f\n                        if (v110 >= 0) {\n                            int64_t v111 = v110; // 0x40a825\n                            char v112 = *(char *)(v106 + (int64_t)*(char *)(v111 + v104)); // 0x40a81c\n                            int64_t v113; // bp-120, 0x40a050\n                            *(char *)((int64_t)&v113 + 50 + v111) = v112;\n                            v111--;\n                            while ((int32_t)v111 >= 0) {\n                                // 0x40a817\n                                v112 = *(char *)(v106 + (int64_t)*(char *)(v111 + v104));\n                                *(char *)((int64_t)&v113 + 50 + v111) = v112;\n                                v111--;\n                            }\n                        }\n                        // 0x40a82d\n                        int64_t v114; // bp-70, 0x40a050\n                        v108 = &v114;\n                    }\n                    // 0x40a5f4\n                    int32_t v115; // bp-76, 0x40a050\n                    v40 = &v115;\n                    v47 = 0;\n                    uint64_t v116 = function_406400(&v115, v108, v107); // 0x40a60f\n                    uint64_t v117 = v100 + v60 - v104; // 0x40a61e\n                    if (v116 >= v117 == v116 < 0xfffffffffffffffe) {\n                        int64_t v118 = v116 - v117; // 0x40a708\n                        *(int64_t *)(v1 + 32) = 0;\n                        *v7 = v118;\n                        v46 = v115;\n                        v45 = v40;\n                        v43 = v118;\n                        if (v115 != -1) {\n                            goto lab_0x40a357;\n                        } else {\n                            goto lab_0x40a630;\n                        }\n                    } else {\n                        goto lab_0x40a630;\n                    }\n                }\n            } else {\n                goto lab_0x40a2d1;\n            }\n        }\n    }\n  lab_0x40a1b0:;\n    int64_t v34 = *v9; // 0x40a1be\n    int64_t v35 = *v10; // 0x40a1be\n    int32_t v36 = *v8; // 0x40a1be\n    int64_t v37 = v1; // 0x40a1be\n    goto lab_0x40a158;\n  lab_0x40a158:\n    // 0x40a158\n    *v2 = a2;\n    *(int64_t *)(v1 + 88) = v34;\n    *(int64_t *)(v1 + 104) = v35;\n    if (v36 >= 2) {\n        // 0x40a16d\n        if (*(char *)(v1 + 136) != 0) {\n            int64_t result = function_406eb0(v1); // 0x40a1e8\n            if ((int32_t)result != 0) {\n                // 0x40a188\n                return result;\n            }\n        } else {\n            // 0x40a179\n            function_406d00(v1);\n        }\n        // 0x40a17e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40a188\n        return 0;\n    }\n    // 0x40a158\n    v64 = (char *)(v1 + 139);\n    v65 = v34;\n    v67 = v37;\n    goto lab_0x40a280;\n  lab_0x40a280:;\n    int64_t v119 = v65;\n    if (*v64 == 0) {\n        // 0x40a28d\n        *(int64_t *)(v1 + 48) = v119;\n        // 0x40a17e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40a188\n        return 0;\n    }\n    // 0x40a650\n    if (*(char *)(v1 + 136) != 0) {\n        // 0x40a730\n        function_406c80(v1);\n        // 0x40a17e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40a188\n        return 0;\n    }\n    int64_t * v120 = (int64_t *)(v1 + 120); // 0x40a65d\n    int64_t v121 = *v120; // 0x40a65d\n    if (v121 == 0) {\n        // 0x40a17e\n        *(int64_t *)(v1 + 72) = 0;\n        // 0x40a188\n        return 0;\n    }\n    int64_t v122 = *(int64_t *)(v1 + 64); // 0x40a66a\n    int64_t v123 = v122 - v119; // 0x40a66a\n    int64_t * v124 = (int64_t *)(v1 + 48); // 0x40a66e\n    int64_t v125 = *v124; // 0x40a66e\n    int64_t v126 = v123 == 0 | v123 < 0 != ((v123 ^ v122) & (v122 ^ v119)) < 0 ? v122 : v119; // 0x40a672\n    int64_t v127 = v125; // 0x40a67a\n    if (v126 > v125) {\n        unsigned char v128 = *(char *)(v67 + a2 + v125); // 0x40a696\n        int64_t * v129 = (int64_t *)(v1 + 8); // 0x40a69f\n        *(char *)(*v129 + v125) = *(char *)(v121 + (int64_t)v128);\n        int64_t v130 = v125 + 1; // 0x40a6a7\n        v127 = v126;\n        if (v126 != v130) {\n            unsigned char v131 = *(char *)(v130 + v67 + *v2); // 0x40a696\n            *(char *)(*v129 + v130) = *(char *)(*v120 + (int64_t)v131);\n            int64_t v132 = v130 + 1; // 0x40a6a7\n            int64_t v133 = v132; // 0x40a6ae\n            v127 = v126;\n            while (v126 != v132) {\n                // 0x40a688\n                v131 = *(char *)(v133 + v67 + *v2);\n                *(char *)(*v129 + v133) = *(char *)(*v120 + (int64_t)v131);\n                v132 = v133 + 1;\n                v133 = v132;\n                v127 = v126;\n            }\n        }\n    }\n    // 0x40a6b0\n    *v124 = v127;\n    *(int64_t *)(v1 + 56) = v127;\n    // 0x40a17e\n    *(int64_t *)(v1 + 72) = 0;\n    // 0x40a188\n    return 0;\n  lab_0x40a415:;\n    int64_t v134 = v71 + (int64_t)(v72 < v60);\n    int64_t v135 = v71 + (int64_t)(v72 >= v60);\n    *(int32_t *)(v1 + 112) = (int32_t)function_409d60(v1, v135, a3);\n    int64_t v25; // 0x40a050\n    int64_t v26; // 0x40a050\n    int64_t v28; // 0x40a050\n    char v27; // 0x40a050\n    if (v63 > v60 == v60 == v134) {\n        int64_t v136 = 8 * v60;\n        if (*(int64_t *)(v70 + v136) != v60) {\n            goto lab_0x40a4c8;\n        } else {\n            int64_t v137 = *(int64_t *)(v1 + 16); // 0x40a440\n            memmove((int64_t *)v137, (int64_t *)(v137 + 4 * v60), 4 * (int32_t)(v63 - v60));\n            int64_t v138 = *(int64_t *)(v1 + 8); // 0x40a45b\n            int64_t v139 = *v7; // 0x40a45f\n            memmove((int64_t *)v138, (int64_t *)(v138 + v60), (int32_t)(v139 - v60));\n            *v24 = *v24 - v60;\n            uint64_t v140 = *v7 - v60; // 0x40a477\n            *v7 = v140;\n            if (v140 >= 1) {\n                for (int64_t i = 0; i < *v7; i++) {\n                    int64_t v141 = 8 * i + *v69;\n                    *(int64_t *)v141 = *(int64_t *)(v141 + v136) - v60;\n                }\n            }\n            // 0x40a4a5\n            v25 = *(int64_t *)(v1 + 88) - v60;\n            v26 = *(int64_t *)(v1 + 104) - v60;\n            v27 = *(char *)(v1 + 139);\n            v28 = v138;\n            goto lab_0x40a150;\n        }\n    } else {\n        goto lab_0x40a4c8;\n    }\n  lab_0x40a13c:\n    // 0x40a13c\n    v25 = *(int64_t *)(v1 + 88) - v60;\n    v26 = *(int64_t *)(v1 + 104) - v60;\n    v27 = v68;\n    v28 = v66;\n    goto lab_0x40a150;\n  lab_0x40a154:;\n    int64_t * v142 = (int64_t *)(v1 + 8); // 0x40a154\n    *v142 = *v142 + v60;\n    v34 = v30;\n    v35 = v31;\n    v36 = v32;\n    v37 = v33;\n    goto lab_0x40a158;\n  lab_0x40a4c8:\n    // 0x40a4c8\n    *v6 = 0;\n    v18 = *(int64_t *)(v1 + 80) - a2;\n    v20 = *(int64_t *)(v1 + 96) - a2;\n    int64_t * v143 = (int64_t *)(v1 + 88); // 0x40a4e1\n    *v143 = v18 + v60;\n    int64_t * v144 = (int64_t *)(v1 + 104); // 0x40a4e9\n    *v144 = v20 + v60;\n    int64_t v145 = v134; // 0x40a4f0\n    if (v134 >= 0 == (v134 != 0)) {\n        int64_t v146 = v134; // 0x40a4f8\n        v145 = v146;\n        while (*(int64_t *)(v70 - 8 + 8 * v146) == v60) {\n            // 0x40a4f8\n            v146--;\n            if (v146 == 0) {\n                // break -> 0x40a505\n                break;\n            }\n            v145 = v146;\n        }\n    }\n    // 0x40a505\n    int64_t v147; // 0x40a050\n    if (v145 < v63) {\n        int64_t v148 = v145; // 0x40a512\n        v147 = v148;\n        while (*(int32_t *)(4 * v148 + *(int64_t *)(v1 + 16)) == -1) {\n            // 0x40a518\n            v148++;\n            if (v148 == v63) {\n                goto lab_0x40a6d8;\n            }\n            v147 = v148;\n        }\n        goto lab_0x40a52c;\n    } else {\n        // 0x40a6cc\n        v147 = v145;\n        if (v145 != v63) {\n            goto lab_0x40a52c;\n        } else {\n            goto lab_0x40a6d8;\n        }\n    }\n  lab_0x40a150:;\n    int32_t v29 = *(int32_t *)(v1 + 144);\n    v30 = v25;\n    v31 = v26;\n    v32 = v29;\n    v33 = v28;\n    v34 = v25;\n    v35 = v26;\n    v36 = v29;\n    v37 = v28;\n    if (v27 != 0) {\n        goto lab_0x40a158;\n    } else {\n        goto lab_0x40a154;\n    }\n  lab_0x40a630:\n    // 0x40a630\n    v38 = *v24;\n    v39 = v40;\n    v41 = *v2;\n    goto lab_0x40a2d1;\n  lab_0x40a6f1:\n    // 0x40a6f1\n    *(int32_t *)(v1 + 112) = (int32_t)function_409d60(v1, v63 - 1, a3);\n    int64_t v149 = v1; // 0x40a703\n    int64_t v150 = v44; // 0x40a703\n    goto lab_0x40a37c;\n  lab_0x40a357:;\n    int64_t v164 = v46; // 0x40a35e\n    int64_t v163 = v45; // 0x40a35e\n    int32_t v161; // 0x40a050\n    int64_t v162; // 0x40a050\n    if (*(char *)(v1 + 142) != 0) {\n        int64_t v165 = v46 & 0xffffffff; // 0x40a7d4\n        int32_t wc = v46; // 0x40a7d6\n        v164 = v165;\n        v163 = v165;\n        v161 = 1;\n        v162 = v165;\n        if (wc != 95 == iswalnum(wc) == 0) {\n            goto lab_0x40a364;\n        } else {\n            goto lab_0x40a379;\n        }\n    } else {\n        goto lab_0x40a364;\n    }\n  lab_0x40a52c:;\n    uint64_t v166 = *(int64_t *)(8 * v147 + v70) - v60; // 0x40a531\n    *v7 = v166;\n    v19 = v18;\n    v21 = v20;\n    v22 = 0;\n    v23 = v1;\n    if (v166 != 0) {\n        if (v166 >= 1) {\n            int64_t v167 = *(int64_t *)(v1 + 16); // 0x40a53f\n            int64_t v168 = v167; // 0x40a547\n            *(int32_t *)v168 = -1;\n            v168 += 4;\n            while (v167 + 4 * v166 != v168) {\n                // 0x40a550\n                *(int32_t *)v168 = -1;\n                v168 += 4;\n            }\n        }\n        int64_t v169 = *(int64_t *)(v1 + 8); // 0x40a55f\n        memset((int64_t *)v169, 255, (int32_t)v166);\n        v19 = *v143 - v60;\n        v21 = *v144 - v60;\n        v22 = *v7;\n        v23 = v169;\n    }\n    goto lab_0x40a57f;\n  lab_0x40a37c:;\n    // 0x40a37c\n    char * v151; // 0x40a050\n    int64_t v152; // 0x40a050\n    int64_t v153; // 0x40a050\n    int64_t v154; // 0x40a050\n    int64_t v155; // 0x40a050\n    char v156; // 0x40a050\n    if (v150 != 0) {\n        if (v150 >= 1) {\n            int64_t v157 = *(int64_t *)(v1 + 16); // 0x40a78c\n            int64_t v158 = v157; // 0x40a794\n            *(int32_t *)v158 = -1;\n            v158 += 4;\n            while (v157 + 4 * v150 != v158) {\n                // 0x40a798\n                *(int32_t *)v158 = -1;\n                v158 += 4;\n            }\n        }\n        char * v159 = (char *)(v1 + 139);\n        v156 = 0;\n        v155 = v149;\n        v153 = v150;\n        if (*v159 == 0) {\n            goto lab_0x40a38c;\n        } else {\n            int64_t v160 = *(int64_t *)(v1 + 8); // 0x40a7b6\n            memset((int64_t *)v160, 255, (int32_t)v150);\n            v151 = v159;\n            v154 = v160;\n            v152 = *v7;\n            goto lab_0x40a385;\n        }\n    } else {\n        // 0x40a37c\n        v151 = (char *)(v1 + 139);\n        v154 = v149;\n        v152 = v150;\n        goto lab_0x40a385;\n    }\n  lab_0x40a364:\n    // 0x40a364\n    v161 = 0;\n    v162 = v163;\n    if ((int32_t)v164 == 10) {\n        // 0x40a36b\n        v161 = 2 * (int32_t)(*(char *)(v1 + 141) != 0);\n        v162 = v163;\n    }\n    goto lab_0x40a379;\n  lab_0x40a57f:\n    // 0x40a57f\n    *v24 = v22;\n    v25 = v19;\n    v26 = v21;\n    v27 = *(char *)(v1 + 139);\n    v28 = v23;\n    goto lab_0x40a150;\n  lab_0x40a379:\n    // 0x40a379\n    *(int32_t *)(v1 + 112) = v161;\n    v149 = v162;\n    v150 = v43;\n    goto lab_0x40a37c;\n  lab_0x40a38c:\n    // 0x40a38c\n    *v24 = v153;\n    v68 = v156;\n    v66 = v155;\n    goto lab_0x40a13c;\n  lab_0x40a385:\n    // 0x40a385\n    v156 = *v151;\n    v155 = v154;\n    v153 = v152;\n    goto lab_0x40a38c;\n}\n"
        },
        {
            "funcName": "function_40a840",
            "funcStartAddr": "40a840",
            "funcEndAddr": "40aa65",
            "decompiledFuncCode": "int64_t function_40a840(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x40a840\n    int128_t v1; // 0x40a840\n    int128_t v2 = v1;\n    int128_t v3 = __asm_pxor(v2, v2); // 0x40a842\n    int64_t * v4 = (int64_t *)(a1 + 56); // 0x40a859\n    int128_t v5 = __asm_movaps(v3); // bp-88, 0x40a85d\n    int64_t v6 = *v4 + 24 * a2; // 0x40a862\n    int64_t v7 = 0; // bp-72, 0x40a86b\n    int64_t * v8 = (int64_t *)(v6 + 8); // 0x40a874\n    int64_t v9 = *v8; // 0x40a874\n    if (v9 < 1) {\n        // 0x40aa21\n        free(NULL);\n        return (int32_t)&g81 ^ (int32_t)&g81;\n    }\n    int64_t v10 = v6 + 16; // 0x40a8e5\n    int64_t * v11 = (int64_t *)v10;\n    int64_t v12 = a3 + 8;\n    int64_t * v13 = (int64_t *)v12;\n    int64_t v14 = a3 + 16;\n    int64_t v15 = 0; // 0x40a8d8\n    int64_t v16 = a1; // 0x40a840\n    int64_t v17 = v9;\n    int64_t v18; // 0x40a840\n    int64_t v19; // 0x40a840\n    int64_t v20; // 0x40a840\n    int64_t v21; // 0x40a913\n    int64_t v22; // 0x40a91d\n    while (true) {\n      lab_0x40a8e5:\n        // 0x40a8e5\n        v19 = v17;\n        int64_t v23 = v16;\n        int64_t v24 = *(int64_t *)(*v11 + 8 * v15); // 0x40a8e9\n        v16 = v23;\n        v18 = v19;\n        if (v24 == a2) {\n            goto lab_0x40a8d8;\n        } else {\n            // 0x40a8f2\n            v16 = v23;\n            v18 = v19;\n            if ((*(char *)(v23 + 8 + 16 * v24) & 8) == 0) {\n                goto lab_0x40a8d8;\n            } else {\n                // 0x40a903\n                v21 = 24 * v24;\n                int64_t v25 = *(int64_t *)(a1 + 40) + v21; // 0x40a91a\n                v22 = *(int64_t *)(v25 + 16);\n                int64_t v26 = *(int64_t *)v22; // 0x40a926\n                int64_t v27 = function_408030(v19, v10, v26); // 0x40a931\n                if (*(int64_t *)(v25 + 8) > 1) {\n                    // 0x40a890\n                    v20 = v19;\n                    if (v27 != 0) {\n                        goto lab_0x40a970;\n                    } else {\n                        int64_t v28 = *v13; // 0x40a899\n                        int64_t v29 = function_408030(v28, v14, v26); // 0x40a8a4\n                        v20 = v28;\n                        if (v29 == 0) {\n                            goto lab_0x40a970;\n                        } else {\n                            goto lab_0x40a8b2;\n                        }\n                    }\n                } else {\n                    // 0x40a94b\n                    v16 = v19;\n                    v18 = v19;\n                    if (v27 != 0) {\n                        goto lab_0x40a8d8;\n                    } else {\n                        int64_t v30 = *v13; // 0x40a950\n                        int64_t v31 = function_408030(v30, v14, v26); // 0x40a95b\n                        v16 = v30;\n                        v18 = v19;\n                        if (v31 != 0) {\n                            goto lab_0x40a8b2;\n                        } else {\n                            goto lab_0x40a8d8;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40a9b0:\n    if (v17 < 1) {\n        // 0x40aa21\n        free((int64_t *)v7);\n        return (int32_t)&g81 ^ (int32_t)&g81;\n    }\n    int64_t v32 = 0; // 0x40a840\n    int64_t v33 = *(int64_t *)(*v11 + 8 * v32); // 0x40a9cc\n    int64_t v34; // 0x40a840\n    int64_t v35; // 0x40a9dd\n    int64_t v36; // 0x40a9f0\n    if (function_408030(v34, (int64_t)&v7, v33) == 0) {\n        // 0x40a9dd\n        v35 = *v13;\n        v36 = function_408030(v35, v14, v33) - 1;\n        if (v36 > -1 == v36 < v35) {\n            // 0x40a9fe\n            *v13 = v35 - 1;\n            function_4081a0(v12, v14, v36);\n        }\n    }\n    int64_t v37 = v32 + 1; // 0x40aa12\n    v32 = v37;\n    while (*v8 > v37) {\n        // 0x40a9c0\n        v33 = *(int64_t *)(*v11 + 8 * v32);\n        if (function_408030(v34, (int64_t)&v7, v33) == 0) {\n            // 0x40a9dd\n            v35 = *v13;\n            v36 = function_408030(v35, v14, v33) - 1;\n            if (v36 > -1 == v36 < v35) {\n                // 0x40a9fe\n                *v13 = v35 - 1;\n                function_4081a0(v12, v14, v36);\n            }\n        }\n        // 0x40aa12\n        v37 = v32 + 1;\n        v32 = v37;\n    }\n    // 0x40aa21\n    free((int64_t *)v7);\n    return (int32_t)&g81 ^ (int32_t)&g81;\n  lab_0x40a8d8:\n    // 0x40a8d8\n    v17 = v18;\n    v15++;\n    if (v17 <= v15) {\n        // break -> 0x40a9b0\n        goto lab_0x40a9b0;\n    }\n    goto lab_0x40a8e5;\n  lab_0x40a970:;\n    int64_t v38 = *(int64_t *)(v22 + 8); // 0x40a970\n    v16 = v20;\n    v18 = v19;\n    if (v38 < 1) {\n        goto lab_0x40a8d8;\n    } else {\n        int64_t v39 = function_408030(v19, v10, v38); // 0x40a986\n        v16 = v19;\n        v18 = v19;\n        if (v39 != 0) {\n            goto lab_0x40a8d8;\n        } else {\n            int64_t v40 = *v13; // 0x40a994\n            int64_t v41 = function_408030(v40, v14, v38); // 0x40a99c\n            v16 = v40;\n            v18 = v19;\n            if (v41 == 0) {\n                goto lab_0x40a8d8;\n            } else {\n                goto lab_0x40a8b2;\n            }\n        }\n    }\n  lab_0x40a8b2:;\n    int64_t v42 = function_408ae0(&v5, a4, *v4 + v21); // 0x40a8c4\n    if ((int32_t)v42 != 0) {\n        // 0x40aa40\n        free((int64_t *)v7);\n        return v42 & 0xffffffff;\n    }\n    // 0x40a8d1\n    v16 = &v5;\n    v18 = *v8;\n    goto lab_0x40a8d8;\n}\n"
        },
        {
            "funcName": "function_40aa70",
            "funcStartAddr": "40aa70",
            "funcEndAddr": "40b57d",
            "decompiledFuncCode": "int64_t function_40aa70(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40aa70\n    int128_t v1; // 0x40aa70\n    int128_t v2 = v1;\n    int64_t * mem = malloc(0x3800); // 0x40aa8e\n    if (mem == NULL) {\n        // 0x40ae32\n        return 0;\n    }\n    int128_t v3 = __asm_pxor(v2, v2); // 0x40aaab\n    int128_t v4 = __asm_movaps(v3); // bp-152, 0x40aaaf\n    int64_t v5 = __asm_movaps(v3); // 0x40aabf\n    int64_t * v6 = (int64_t *)(a2 + 88); // 0x40aac9\n    *v6 = 0;\n    int64_t * v7 = (int64_t *)(a2 + 96); // 0x40aad1\n    *v7 = 0;\n    int64_t v8; // 0x40aa70\n    int64_t v9; // 0x40aa70\n    int64_t v10; // 0x40aa70\n    int64_t v11; // 0x40aa70\n    int64_t v12; // 0x40aa70\n    int64_t v13; // 0x40aa70\n    int64_t v14; // 0x40aa70\n    int64_t v15; // 0x40aa70\n    int64_t v16; // 0x40aa70\n    int64_t v17; // 0x40aa70\n    int64_t v18; // 0x40aa70\n    int64_t v19; // 0x40aa70\n    int64_t v20; // 0x40aa70\n    int64_t v21; // 0x40aa70\n    int64_t v22; // 0x40aa70\n    int128_t v23; // 0x40aa70\n    int128_t v24; // 0x40aa70\n    int128_t v25; // 0x40aa70\n    int128_t v26; // 0x40aa70\n    int64_t v27; // 0x40aa70\n    int64_t v28; // 0x40aa70\n    int128_t v29; // bp-88, 0x40aa70\n    int64_t v30; // 0x40aa8e\n    int64_t v31; // 0x40aab4\n    int64_t v32; // 0x40aa70\n    int64_t v33; // 0x40aa70\n    int64_t v34; // 0x40b4b2\n    int64_t v35; // 0x40ad17\n    int128_t * v36; // 0x40aa70\n    int64_t v37; // 0x40aaf2\n    int64_t v38; // 0x40ab0b\n    uint32_t v39; // 0x40ab0e\n    char v40; // 0x40ab12\n    int64_t * mem2; // 0x40ab79\n    int32_t size2; // 0x40abb8\n    int64_t * mem3; // 0x40abbd\n    int64_t v41; // 0x40abbd\n    int64_t v42; // 0x40abea\n    int64_t v43; // 0x40abfa\n    int128_t v44; // 0x40aa70\n    int128_t v45; // 0x40aa70\n    int128_t v46; // 0x40aa70\n    int128_t v47; // 0x40aa70\n    int128_t v48; // 0x40aa70\n    if (*(int64_t *)(a2 + 16) < 1) {\n        // 0x40b452\n        free(mem);\n        goto lab_0x40b45c;\n    } else {\n        // 0x40aadf\n        v30 = (int64_t)mem;\n        v31 = v30 + 0x1800;\n        v32 = &v4;\n        v33 = &v29;\n        v36 = (int128_t *)(v32 + 16);\n        v23 = v5;\n        v28 = 0;\n        v44 = v3;\n        v14 = a1;\n        v18 = a2;\n        v10 = 0;\n        while (true) {\n          lab_0x40aaed:\n            // 0x40aaed\n            v11 = v10;\n            v19 = v18;\n            v15 = v14;\n            int128_t v49 = v44;\n            int128_t v50 = v23;\n            v37 = 8 * v28;\n            int64_t v51 = *(int64_t *)(*(int64_t *)(v19 + 24) + v37); // 0x40ab03\n            v38 = 16 * v51 + *(int64_t *)v15;\n            int64_t v52 = v38 + 8; // 0x40ab0e\n            v39 = *(int32_t *)v52;\n            v40 = *(char *)v52;\n            v24 = v50;\n            v45 = v49;\n            v16 = v15;\n            v20 = v19;\n            v12 = v11;\n            switch (v40) {\n                case 1: {\n                    unsigned char v53 = *(char *)v38; // 0x40ae48\n                    unsigned char v54 = v53 % 64;\n                    int64_t * v55 = (int64_t *)((int64_t)(v53 / 8 & 24) + v32); // 0x40ae63\n                    *v55 = (v54 == 0 ? 1 : 1 << (int64_t)v54) | *v55;\n                    v25 = v50;\n                    v47 = v49;\n                    goto lab_0x40ae67;\n                }\n                case 3: {\n                    int64_t v56 = 0;\n                    int64_t * v57 = (int64_t *)(v56 + v32); // 0x40b2d2\n                    *v57 = *(int64_t *)(v56 + *(int64_t *)v38) | *v57;\n                    v25 = v50;\n                    v47 = v49;\n                    int64_t v58 = v56 + 8; // 0x40b2e6\n                    while (v56 != 24) {\n                        // 0x40b2d2\n                        v56 = v58;\n                        v57 = (int64_t *)(v56 + v32);\n                        *v57 = *(int64_t *)(v56 + *(int64_t *)v38) | *v57;\n                        v25 = v50;\n                        v47 = v49;\n                        v58 = v56 + 8;\n                    }\n                    goto lab_0x40ae67;\n                }\n                case 5: {\n                    // 0x40b180\n                    if (*(int32_t *)(v15 + 180) < 2) {\n                        int128_t v59 = __asm_pcmpeqd(v49, v49); // 0x40b210\n                        v4 = __asm_movaps(v59);\n                        v26 = __asm_movaps(v59);\n                        v48 = v59;\n                    } else {\n                        int64_t v60 = 0;\n                        int64_t * v61 = (int64_t *)(v60 + v32); // 0x40b199\n                        *v61 = *(int64_t *)(v60 + *(int64_t *)(v15 + 120)) | *v61;\n                        int64_t v62 = v60 + 8; // 0x40b1ad\n                        v26 = v50;\n                        v48 = v49;\n                        while (v60 != 24) {\n                            // 0x40b199\n                            v60 = v62;\n                            v61 = (int64_t *)(v60 + v32);\n                            *v61 = *(int64_t *)(v60 + *(int64_t *)(v15 + 120)) | *v61;\n                            v62 = v60 + 8;\n                            v26 = v50;\n                            v48 = v49;\n                        }\n                    }\n                    goto lab_0x40b1af;\n                }\n                case 7: {\n                    int128_t v63 = __asm_pcmpeqd(v49, v49); // 0x40b2b0\n                    v4 = __asm_movaps(v63);\n                    v26 = v50;\n                    v48 = v63;\n                    goto lab_0x40b1af;\n                }\n                default: {\n                    goto lab_0x40ab42;\n                }\n            }\n        }\n      lab_0x40ab53:\n        if (v13 < 1) {\n            // 0x40b565\n            free(mem);\n            if (v13 != 0) {\n                // 0x40ae32\n                return 0;\n            }\n            goto lab_0x40b45c;\n        } else {\n            int64_t v64 = v13 + 1; // 0x40ab68\n            int128_t v65 = v64; // bp-120, 0x40ab6d\n            int64_t size = 8 * v64; // 0x40ab72\n            mem2 = malloc((int32_t)size);\n            if (mem2 == NULL) {\n                goto lab_0x40b327;\n            } else {\n                // 0x40ab92\n                v4 = 0;\n                if (v13 > 0xaaaaaaaaaaaa855) {\n                    goto lab_0x40b327;\n                } else {\n                    // 0x40abad\n                    size2 = 24 * (int32_t)v13;\n                    mem3 = malloc(size2);\n                    if (mem3 == NULL) {\n                        goto lab_0x40b327;\n                    } else {\n                        // 0x40abd0\n                        v41 = (int64_t)mem3;\n                        int64_t v66 = size - 8; // 0x40abd5\n                        int128_t v67 = __asm_pxor(v46, v46); // 0x40abd9\n                        v42 = v66 + v41;\n                        v43 = v42 + v66;\n                        v29 = __asm_movaps(v67);\n                        __asm_movaps(v67);\n                        int64_t * v68 = (int64_t *)(v17 + 48);\n                        int64_t v69 = 0; // 0x40ac16\n                        int64_t v70 = v30 + 8; // 0x40ac16\n                        int64_t v71 = v30; // 0x40ac16\n                        int64_t v72 = 0; // 0x40ac16\n                        while (true) {\n                            int64_t v73 = v70;\n                            int64_t v74 = v69;\n                            int64_t * v75 = (int64_t *)v73; // 0x40ac2a\n                            uint64_t v76 = *v75; // 0x40ac2a\n                            if (v76 >= 1) {\n                                int64_t v77 = v76; // 0x40ac74\n                                for (int64_t i = 0; i < v77; i++) {\n                                    int64_t v78 = *(int64_t *)(v73 + 8); // 0x40ac38\n                                    int64_t v79 = *(int64_t *)(v17 + 24); // 0x40ac40\n                                    int64_t v80 = *(int64_t *)(v79 + 8 * *(int64_t *)(v78 + 8 * i)); // 0x40ac45\n                                    int64_t v81 = v77; // 0x40ac4d\n                                    if (v80 != -1) {\n                                        int64_t v82 = function_408570((int64_t *)&v65, (int128_t *)(*v68 + 24 * v80)); // 0x40ac5f\n                                        int32_t v83 = v82; // 0x40ac64\n                                        v4 = v83;\n                                        if (v83 != 0) {\n                                            // 0x40b315\n                                            free(mem3);\n                                            goto lab_0x40b327;\n                                        }\n                                        // 0x40ac4f\n                                        v81 = *v75;\n                                    }\n                                    // 0x40ac70\n                                    v77 = v81;\n                                }\n                            }\n                            int64_t v84 = function_4092e0(&v4, v17, (int64_t *)&v65, 0); // 0x40ac87\n                            int64_t v85 = 8 * v72; // 0x40ac91\n                            int64_t * v86 = (int64_t *)(v85 + v41); // 0x40ac91\n                            *v86 = v84;\n                            if (v84 == 0) {\n                                // 0x40b3e8\n                                if ((int32_t)v4 != 0) {\n                                    // break -> 0x40b315\n                                    break;\n                                }\n                            }\n                            // 0x40ac9e\n                            int64_t v87; // 0x40aa70\n                            if (*(char *)(v84 + 104) < 0) {\n                                int64_t v88 = function_4092e0(&v4, v17, (int64_t *)&v65, 1); // 0x40b370\n                                *(int64_t *)(v85 + v42) = v88;\n                                if (v88 == 0) {\n                                    // 0x40b300\n                                    if ((int32_t)v4 != 0) {\n                                        // break -> 0x40b315\n                                        break;\n                                    }\n                                }\n                                int64_t v89 = v74; // 0x40b390\n                                if (v88 != *v86) {\n                                    int32_t v90 = *(int32_t *)(v17 + 180); // 0x40b39c\n                                    v89 = v90 < 2 == (1 - v90 & v90) < 0 ? 1 : 0x100000000000000 * v74 >> 56;\n                                }\n                                int64_t v91 = v89;\n                                int64_t v92 = function_4092e0(&v4, v17, (int64_t *)&v65, 2); // 0x40b3bd\n                                *(int64_t *)(v85 + v43) = v92;\n                                v87 = v91;\n                                if (v92 == 0) {\n                                    // 0x40b3d4\n                                    v87 = v91;\n                                    if ((int32_t)v4 != 0) {\n                                        // break -> 0x40b315\n                                        break;\n                                    }\n                                }\n                            } else {\n                                // 0x40aca8\n                                *(int64_t *)(v85 + v42) = v84;\n                                *(int64_t *)(v85 + v43) = v84;\n                                v87 = v74;\n                            }\n                            // 0x40acba\n                            v27 = v87;\n                            int64_t v93 = 0;\n                            int64_t * v94 = (int64_t *)(v93 + v33); // 0x40acc4\n                            *v94 = *(int64_t *)(v71 + 0x1800 + v93) | *v94;\n                            int64_t v95 = v93 + 8; // 0x40acdc\n                            while (v93 != 24) {\n                                // 0x40acc4\n                                v93 = v95;\n                                v94 = (int64_t *)(v93 + v33);\n                                *v94 = *(int64_t *)(v71 + 0x1800 + v93) | *v94;\n                                v95 = v93 + 8;\n                            }\n                            // 0x40acde\n                            v72++;\n                            v69 = v27;\n                            v70 = v73 + 24;\n                            v71 += 32;\n                            if (v72 == v13) {\n                                if ((char)v27 != 0) {\n                                    int64_t * mem4 = calloc(8, 512); // 0x40b4b2\n                                    v34 = (int64_t)mem4;\n                                    *v7 = v34;\n                                    if (mem4 == NULL) {\n                                        // 0x40b315\n                                        free(mem3);\n                                        goto lab_0x40b327;\n                                    } else {\n                                        // 0x40b4cc\n                                        v22 = v33;\n                                        v21 = v34;\n                                        v9 = v30 + 0x1820;\n                                        goto lab_0x40b4f2;\n                                    }\n                                } else {\n                                    int64_t * mem5 = calloc(8, 256); // 0x40ad17\n                                    v35 = (int64_t)mem5;\n                                    *v6 = v35;\n                                    if (mem5 == NULL) {\n                                        // 0x40b315\n                                        free(mem3);\n                                        goto lab_0x40b327;\n                                    } else {\n                                        // 0x40ad31\n                                        v8 = 0;\n                                        goto lab_0x40ad4f;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x40b315\n                        free(mem3);\n                        goto lab_0x40b327;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40b143:;\n    int64_t v96 = v30 + 16; // 0x40b148\n    int64_t v97; // 0x40aa70\n    int64_t v98 = v97 + v96; // 0x40b150\n    int64_t v99 = v96; // 0x40b154\n    goto lab_0x40b158;\n  lab_0x40af8d:;\n    // 0x40af8d\n    int64_t v145; // 0x40aa70\n    int64_t v146; // 0x40afa6\n    while (true) {\n        // 0x40af96\n        int64_t v147; // 0x40aa70\n        int64_t v148 = v147;\n        int64_t v149; // 0x40aa70\n        int64_t v150 = v149;\n        int64_t v151 = 8 * v150; // 0x40af96\n        int64_t v152 = *(int64_t *)(v151 + v32); // 0x40af96\n        int64_t v153 = *(int64_t *)(v151 + v145); // 0x40af9a\n        int64_t v154 = v153 & v152; // 0x40af9a\n        int64_t v155; // 0x40aa70\n        *(int64_t *)(v151 + v155) = v154;\n        int64_t v156 = v150 + 1; // 0x40afa2\n        v146 = v154 | v148;\n        v149 = v156;\n        v147 = v146;\n        if (v156 == 4) {\n            // break -> 0x40afaf\n            break;\n        }\n    }\n    int64_t v157 = 0; // 0x40afb2\n    int64_t v158 = 0; // 0x40afb2\n    int64_t v159 = 0; // 0x40afb2\n    int64_t v160; // 0x40aa70\n    int64_t v161; // 0x40aa70\n    int64_t v162; // 0x40aa70\n    if (v146 != 0) {\n        int64_t v163 = v159;\n        int64_t v164 = v158;\n        int64_t v165 = v157;\n        int64_t v166 = 8 * v165; // 0x40afc2\n        int64_t * v167 = (int64_t *)(v166 + v32); // 0x40afc2\n        int64_t v168 = *v167; // 0x40afc2\n        int64_t v169 = *(int64_t *)(v166 + v145); // 0x40afc6\n        int64_t v170 = v169 & -1 - v168; // 0x40afd0\n        int64_t v171 = v168 & -1 - v169; // 0x40afd6\n        *(int64_t *)(v166 + v33) = v170;\n        int64_t v172 = v170 | v163; // 0x40afdd\n        *v167 = v171;\n        int64_t v173 = v165 + 1; // 0x40afe4\n        int64_t v174 = v171 | v164; // 0x40afe8\n        v157 = v173;\n        v158 = v174;\n        v159 = v172;\n        while (v173 != 4) {\n            // 0x40afc2\n            v163 = v159;\n            v164 = v158;\n            v165 = v157;\n            v166 = 8 * v165;\n            v167 = (int64_t *)(v166 + v32);\n            v168 = *v167;\n            v169 = *(int64_t *)(v166 + v145);\n            v170 = v169 & -1 - v168;\n            v171 = v168 & -1 - v169;\n            *(int64_t *)(v166 + v33) = v170;\n            v172 = v170 | v163;\n            *v167 = v171;\n            v173 = v165 + 1;\n            v174 = v171 | v164;\n            v157 = v173;\n            v158 = v174;\n            v159 = v172;\n        }\n        // 0x40aff1\n        int64_t v175; // 0x40aa70\n        int64_t v176 = 24 * v175 + v30; // 0x40affb\n        int64_t v177 = v176; // 0x40b002\n        int64_t v178; // 0x40aa70\n        int64_t v179 = v178; // 0x40b002\n        if (v172 != 0) {\n            int128_t v180 = v29; // 0x40b004\n            int128_t v181 = __asm_movdqa(v180); // 0x40b004\n            int64_t v182 = 32 * v178 + v31; // 0x40b019\n            int128_t v183 = *(int128_t *)v182; // 0x40b01e\n            __asm_movups(v183, v181);\n            int128_t v184; // 0x40aa70\n            int128_t v185 = __asm_movdqa(v184); // 0x40b021\n            int128_t v186 = *(int128_t *)(v182 + 16); // 0x40b02a\n            __asm_movups(v186, v185);\n            int128_t v187 = __asm_movdqa(0); // 0x40b02e\n            int64_t v188 = 24 * v178;\n            int128_t v189 = *(int128_t *)v145; // 0x40b040\n            __asm_movups(v189, v187);\n            int128_t v190; // 0x40aa70\n            int128_t v191 = __asm_movdqa(v190); // 0x40b045\n            int128_t v192 = *(int128_t *)(v145 + 16); // 0x40b04e\n            __asm_movups(v192, v191);\n            if ((int32_t)function_4090d0(v188 + v30, v176) != 0) {\n                goto lab_0x40b143;\n            }\n            // 0x40b061\n            v177 = 0x100000000 * v176 >> 32;\n            v179 = v178 + 1;\n        }\n        int64_t v193 = v179;\n        int64_t v194 = v177;\n        int64_t * v195; // 0x40aa70\n        int64_t v196 = *v195; // 0x40b074\n        int64_t v197 = *(int64_t *)(v196 + v37); // 0x40b078\n        if ((char)function_406a20(v194, v197) == 0) {\n            // 0x40b06a\n            goto lab_0x40b143;\n        }\n        // 0x40b08c\n        int64_t v198; // 0x40aa70\n        v162 = v198;\n        v160 = v193;\n        v161 = v175;\n        if (v174 == 0) {\n            // break -> 0x40b0a5\n            goto lab_0x40b0a5_2;\n        }\n    }\n    goto lab_0x40af6e;\n  lab_0x40af6e:;\n    // 0x40af6e\n    int64_t v199; // 0x40aa70\n    int64_t v200 = v199;\n    int64_t v201; // 0x40aa70\n    int64_t v202 = v201 + 1; // 0x40af6e\n    v199 = v200;\n    int64_t v203; // 0x40aa70\n    v203 += 32;\n    v201 = v202;\n    v162 = 0x100000000000000 * v19 >> 56;\n    v160 = v200;\n    v161 = v202;\n    if (v202 >= v200) {\n        // break -> 0x40b0a5\n        goto lab_0x40b0a5_2;\n    }\n    goto lab_0x40af7f;\n  lab_0x40ab42:\n    // 0x40ab42\n    v13 = v12;\n    v17 = v16;\n    v46 = v45;\n    int64_t v206 = v28 + 1; // 0x40ab42\n    v23 = v24;\n    v28 = v206;\n    v44 = v46;\n    v14 = v17;\n    v18 = v20;\n    v10 = v13;\n    if (v206 >= *(int64_t *)(v20 + 16)) {\n        // break -> 0x40ab53\n        goto lab_0x40ab53;\n    }\n    goto lab_0x40aaed;\n  lab_0x40ae67:;\n    uint32_t v207 = v39 / 256; // 0x40ab17\n    uint32_t v208 = v207 & 0xff03ff;\n    int128_t v209 = v47;\n    int128_t v210 = v25;\n    int128_t v211 = v209; // 0x40ae6a\n    int64_t v212; // 0x40ab1a\n    int128_t v213; // 0x40aa70\n    if ((int16_t)v208 == 0) {\n        goto lab_0x40af20;\n    } else {\n        // 0x40ae70\n        v212 = v208;\n        v213 = v209;\n        if ((v212 & 32) != 0) {\n            int128_t v214 = v4; // 0x40b1e0\n            int128_t v215 = __asm_pxor(v209, v209); // 0x40b1e5\n            v4 = __asm_movaps(v215);\n            *v36 = (int128_t)__asm_movaps(v215);\n            v24 = v210;\n            v45 = v215;\n            v16 = v15;\n            v20 = v19;\n            v12 = v11;\n            if ((v214 & 1024) == 0) {\n                goto lab_0x40ab42;\n            } else {\n                // 0x40b1f9\n                v4 = 1024;\n                v213 = v215;\n                goto lab_0x40ae78;\n            }\n        } else {\n            goto lab_0x40ae78;\n        }\n    }\n  lab_0x40b1af:;\n    int128_t v216 = v48;\n    int128_t v217 = v26;\n    int64_t v218 = *(int64_t *)(v15 + 216); // 0x40b1af\n    if ((v218 & 64) == 0) {\n        // 0x40b1bb\n        v4 = (int64_t)v4 & -1025;\n    }\n    // 0x40b1c4\n    v25 = v217;\n    v47 = v216;\n    if ((char)v218 <= 255) {\n        // 0x40b1d0\n        v4 = (int64_t)v4 & -2;\n        v25 = v217;\n        v47 = v216;\n    }\n    goto lab_0x40ae67;\n  lab_0x40af20:;\n    int128_t v219 = v211;\n    v162 = v19;\n    v160 = v11;\n    v161 = 0;\n    if (v11 >= 1) {\n        // 0x40af31\n        v199 = v11;\n        v203 = v31;\n        v201 = 0;\n        while (true) {\n          lab_0x40af7f:\n            // 0x40af7f\n            if (v40 == 1) {\n                unsigned char v204 = *(char *)v38; // 0x40af50\n                int64_t v205 = *(int64_t *)(32 * v201 + v31 + (int64_t)(v204 / 8 & 24)); // 0x40af63\n                if ((1 << (int64_t)(v204 % 64) & v205) != 0) {\n                    goto lab_0x40af8d;\n                } else {\n                    goto lab_0x40af6e;\n                }\n            } else {\n                goto lab_0x40af8d;\n            }\n        }\n    }\n  lab_0x40b0a5_2:;\n    int64_t v220 = v160;\n    int64_t v221 = v162;\n    v24 = v210;\n    v45 = v219;\n    v16 = v15;\n    v20 = v221;\n    v12 = v220;\n    int64_t v222; // 0x40aa70\n    int64_t v223; // 0x40aa70\n    int64_t v224; // 0x40aa70\n    int64_t result; // 0x40aa70\n    int128_t v225; // 0x40aa70\n    if (v220 != v161) {\n        goto lab_0x40ab42;\n    } else {\n        int128_t v226 = __asm_movdqa(v4); // 0x40b0ae\n        int64_t v227 = 32 * v220 + v31; // 0x40b0c5\n        __asm_movups(*(int128_t *)v227, v226);\n        __asm_movups(*(int128_t *)(v227 + 16), __asm_movdqa(v210));\n        v97 = 24 * v220;\n        int64_t v228 = v97 + v30; // 0x40b0ed\n        int64_t * v229 = (int64_t *)v228;\n        *v229 = 1;\n        int64_t * v230 = (int64_t *)(v228 + 8);\n        *v230 = 1;\n        int64_t * mem6 = malloc(8); // 0x40b106\n        *(int64_t *)(v228 + 16) = (int64_t)mem6;\n        if (mem6 == NULL) {\n            // 0x40ae0b\n            *v230 = 0;\n            *v229 = 0;\n            if (v220 != 0) {\n                goto lab_0x40b143;\n            } else {\n                // 0x40ae24\n                free(mem);\n                result = 0;\n                goto lab_0x40ae32;\n            }\n        }\n        // 0x40b122\n        *mem6 = *(int64_t *)(*(int64_t *)(v221 + 24) + v37);\n        v225 = v219;\n        v223 = 0x100000000000000 * v15 >> 56;\n        v224 = v221;\n        v222 = v220 + 1;\n        goto lab_0x40b129;\n    }\n  lab_0x40ae78:;\n    int128_t v231 = v213;\n    v225 = v231;\n    v223 = v15;\n    v224 = v19;\n    v222 = v11;\n    if ((char)v207 <= -1) {\n        goto lab_0x40b129;\n    } else {\n        if ((v212 & 4) == 0) {\n            goto lab_0x40aed0;\n        } else {\n            if (v40 == 1) {\n                // 0x40b290\n                v225 = v231;\n                v223 = v15;\n                v224 = v19;\n                v222 = v11;\n                if ((*(char *)(v38 + 10) & 64) == 0) {\n                    goto lab_0x40b129;\n                } else {\n                    // 0x40b29b\n                    if (*(int32_t *)(v15 + 180) > 1) {\n                        goto lab_0x40ae9b;\n                    } else {\n                        goto lab_0x40b260;\n                    }\n                }\n            } else {\n                // 0x40ae8d\n                if (*(int32_t *)(v15 + 180) < 2) {\n                    goto lab_0x40b260;\n                } else {\n                    goto lab_0x40ae9b;\n                }\n            }\n        }\n    }\n  lab_0x40b129:;\n    int128_t v232 = v225;\n    int128_t v233 = __asm_pxor(v232, v232); // 0x40b129\n    v4 = __asm_movaps(v233);\n    *v36 = (int128_t)__asm_movaps(v233);\n    v24 = v210;\n    v45 = v233;\n    v16 = v223;\n    v20 = v224;\n    v12 = v222;\n    goto lab_0x40ab42;\n  lab_0x40aed0:\n    // 0x40aed0\n    v211 = v231;\n    if ((v212 & 8) == 0) {\n        goto lab_0x40af20;\n    } else {\n        if (v40 == 1) {\n            // 0x40b2f0\n            v225 = v231;\n            v223 = v15;\n            v224 = v19;\n            v222 = v11;\n            if ((*(char *)(v38 + 10) & 64) == 0) {\n                goto lab_0x40aedd;\n            } else {\n                goto lab_0x40b129;\n            }\n        } else {\n            goto lab_0x40aedd;\n        }\n    }\n  lab_0x40aedd:\n    // 0x40aedd\n    if (*(int32_t *)(v15 + 180) < 2) {\n        int64_t v234 = 0; // 0x40b23f\n        int64_t v235 = 8 * v234; // 0x40b22c\n        int64_t * v236 = (int64_t *)(v235 + v32); // 0x40b237\n        int64_t v237 = *v236 & -1 - *(int64_t *)(v15 + 184 + v235); // 0x40b237\n        *v236 = v237;\n        v234++;\n        int64_t v238 = v237; // 0x40b243\n        int64_t v239 = v238; // 0x40b24a\n        while (v234 != 4) {\n            // 0x40b22c\n            v235 = 8 * v234;\n            v236 = (int64_t *)(v235 + v32);\n            v237 = *v236 & -1 - *(int64_t *)(v15 + 184 + v235);\n            *v236 = v237;\n            v234++;\n            v238 = v237 | v239;\n            v239 = v238;\n        }\n        // 0x40b24c\n        v24 = v210;\n        v45 = v231;\n        v16 = v15;\n        v20 = v19;\n        v12 = v11;\n        v211 = v231;\n        if (v238 == 0) {\n            goto lab_0x40ab42;\n        } else {\n            goto lab_0x40af20;\n        }\n    } else {\n        int64_t v240 = 0; // 0x40aef1\n        int64_t v241 = 8 * v240; // 0x40aef3\n        int64_t v242 = *(int64_t *)(v241 + *(int64_t *)(v15 + 120)); // 0x40aefb\n        int64_t * v243 = (int64_t *)(v241 + v32); // 0x40af02\n        int64_t v244 = *v243 & -1 - (v242 & *(int64_t *)(v15 + 184 + v241)); // 0x40af02\n        *v243 = v244;\n        v240++;\n        int64_t v245 = v244; // 0x40af0e\n        int64_t v246 = v245; // 0x40af15\n        while (v240 != 4) {\n            // 0x40aef3\n            v241 = 8 * v240;\n            v242 = *(int64_t *)(v241 + *(int64_t *)(v15 + 120));\n            v243 = (int64_t *)(v241 + v32);\n            v244 = *v243 & -1 - (v242 & *(int64_t *)(v15 + 184 + v241));\n            *v243 = v244;\n            v240++;\n            v245 = v244 | v246;\n            v246 = v245;\n        }\n        // 0x40af17\n        v24 = v210;\n        v45 = v231;\n        v16 = v15;\n        v20 = v19;\n        v12 = v11;\n        v211 = v231;\n        if (v245 == 0) {\n            goto lab_0x40ab42;\n        } else {\n            goto lab_0x40af20;\n        }\n    }\n  lab_0x40b260:;\n    int64_t v247 = 0; // 0x40b262\n    int64_t v248 = 8 * v247; // 0x40b264\n    int64_t * v249 = (int64_t *)(v248 + v32); // 0x40b264\n    int64_t v250 = *(int64_t *)(v15 + 184 + v248) & *v249; // 0x40b268\n    *v249 = v250;\n    int64_t v251 = v247 + 1; // 0x40b274\n    int64_t v252 = v250; // 0x40b278\n    v247 = v251;\n    int64_t v253 = v252; // 0x40b27f\n    while (v251 != 4) {\n        // 0x40b264\n        v248 = 8 * v247;\n        v249 = (int64_t *)(v248 + v32);\n        v250 = *(int64_t *)(v15 + 184 + v248) & *v249;\n        *v249 = v250;\n        v251 = v247 + 1;\n        v252 = v250 | v253;\n        v247 = v251;\n        v253 = v252;\n    }\n    // 0x40b281\n    v24 = v210;\n    v45 = v231;\n    v16 = v15;\n    v20 = v19;\n    v12 = v11;\n    if (v252 != 0) {\n        goto lab_0x40aed0;\n    } else {\n        goto lab_0x40ab42;\n    }\n  lab_0x40ae9b:;\n    int64_t v254 = 0; // 0x40aea1\n    int64_t v255 = 8 * v254; // 0x40aea3\n    int64_t v256 = *(int64_t *)(v255 + *(int64_t *)(v15 + 120)); // 0x40aea3\n    int64_t * v257 = (int64_t *)(v255 + v32); // 0x40aeb2\n    int64_t v258 = (*(int64_t *)(v15 + 184 + v255) | -1 - v256) & *v257; // 0x40aeb2\n    *v257 = v258;\n    int64_t v259 = v254 + 1; // 0x40aeba\n    int64_t v260 = v258; // 0x40aebe\n    v254 = v259;\n    int64_t v261 = v260; // 0x40aec5\n    while (v259 != 4) {\n        // 0x40aea3\n        v255 = 8 * v254;\n        v256 = *(int64_t *)(v255 + *(int64_t *)(v15 + 120));\n        v257 = (int64_t *)(v255 + v32);\n        v258 = (*(int64_t *)(v15 + 184 + v255) | -1 - v256) & *v257;\n        *v257 = v258;\n        v259 = v254 + 1;\n        v260 = v258 | v261;\n        v254 = v259;\n        v261 = v260;\n    }\n    // 0x40aec7\n    v24 = v210;\n    v45 = v231;\n    v16 = v15;\n    v20 = v19;\n    v12 = v11;\n    if (v260 == 0) {\n        goto lab_0x40ab42;\n    } else {\n        goto lab_0x40aed0;\n    }\n  lab_0x40b45c:;\n    int64_t * mem7 = calloc(8, 256); // 0x40b466\n    int64_t v262 = (int64_t)mem7; // 0x40b466\n    *v6 = v262;\n    // 0x40ae32\n    return v262 & -256 | (int64_t)(mem7 != NULL);\n  lab_0x40b327:\n    // 0x40b327\n    free(mem2);\n    int64_t v263 = v30 + 16; // 0x40b334\n    int64_t v264 = v263 + 24; // 0x40b343\n    free((int64_t *)*(int64_t *)v263);\n    int64_t v265 = v264; // 0x40b34f\n    while (v264 != 24 * v13 + v263) {\n        // 0x40b340\n        v264 = v265 + 24;\n        free((int64_t *)*(int64_t *)v265);\n        v265 = v264;\n    }\n    // 0x40b351\n    free(mem);\n    result = 0;\n  lab_0x40ae32:\n    // 0x40ae32\n    return result;\n  lab_0x40b158:;\n    int64_t v100 = v99 + 24; // 0x40b15b\n    free((int64_t *)*(int64_t *)v99);\n    v99 = v100;\n    if (v98 != v100) {\n        goto lab_0x40b158;\n    } else {\n        // 0x40b169\n        free(mem);\n        result = 0;\n        goto lab_0x40ae32;\n    }\n  lab_0x40b4f2:;\n    int64_t v101 = v9;\n    int64_t v102 = v21;\n    int64_t v103 = *(int64_t *)v22; // 0x40b4f2\n    int64_t v104; // 0x40aa70\n    int64_t v105; // 0x40aa70\n    int64_t v106; // 0x40aa70\n    int64_t * v107; // 0x40aa70\n    if (v103 == 0) {\n        goto lab_0x40b512;\n    } else {\n        // 0x40b502\n        v107 = (int64_t *)(v101 - 32);\n        v105 = v103;\n        v106 = 1;\n        v104 = v102;\n        goto lab_0x40b502_2;\n    }\n  lab_0x40ad4f:;\n    int64_t v108 = v8;\n    int64_t v109 = *(int64_t *)(v108 + v33); // 0x40ad52\n    int64_t v110; // 0x40aa70\n    int64_t v111; // 0x40aa70\n    int64_t v112; // 0x40aa70\n    int64_t * v113; // 0x40aa70\n    int64_t v114; // 0x40aa70\n    int64_t * v115; // 0x40aa70\n    if (v109 == 0) {\n        goto lab_0x40ad84;\n    } else {\n        // 0x40ad70\n        v113 = (int64_t *)(v108 + v31);\n        v114 = v30 + 0x1820 + v108;\n        v115 = (int64_t *)(v17 + 184 + v108);\n        v110 = v109;\n        v111 = 1;\n        v112 = 64 * v108 + v35;\n        goto lab_0x40ad70_2;\n    }\n  lab_0x40b512:;\n    int64_t v116 = v22 + 8; // 0x40b512\n    int64_t v117 = v34; // 0x40b524\n    v22 = v116;\n    v21 = v102 + 512;\n    v9 = v101 + 8;\n    int64_t v118; // bp-56, 0x40aa70\n    if (v116 != (int64_t)&v118) {\n        goto lab_0x40b4f2;\n    } else {\n        goto lab_0x40ad8e;\n    }\n  lab_0x40ad84:\n    // 0x40ad84\n    v8 = v108 + 8;\n    v117 = v35;\n    if (v108 != 24) {\n        goto lab_0x40ad4f;\n    } else {\n        goto lab_0x40ad8e;\n    }\n  lab_0x40ad8e:;\n    int64_t v119; // 0x40aa70\n    char v120; // 0x40aa70\n    if ((v120 & 4) == 0) {\n        goto lab_0x40adbd;\n    } else {\n        // 0x40ad9f\n        v119 = 0;\n        goto lab_0x40ad9f_2;\n    }\n  lab_0x40b502_2:;\n    int64_t v121 = v104;\n    int64_t v122 = v106;\n    uint64_t v123 = v105;\n    int64_t v124; // 0x40aa70\n    int64_t v125; // 0x40aa70\n    int64_t v126; // 0x40aa70\n    if (v123 % 2 != 0) {\n        // 0x40b52b\n        v126 = 0;\n        v125 = v101;\n        v124 = 0;\n        if ((*v107 & v122) != 0) {\n            goto lab_0x40b54c;\n        } else {\n            goto lab_0x40b536;\n        }\n    } else {\n        goto lab_0x40b506;\n    }\n  lab_0x40ad70_2:;\n    int64_t v127 = v112;\n    int64_t v128 = v111;\n    uint64_t v129 = v110;\n    int64_t v130; // 0x40aa70\n    int64_t v131; // 0x40aa70\n    int64_t v132; // 0x40aa70\n    if (v129 % 2 != 0) {\n        // 0x40b400\n        v131 = v114;\n        v130 = 0;\n        v132 = 0;\n        if ((*v113 & v128) != 0) {\n            goto lab_0x40b42f;\n        } else {\n            goto lab_0x40b418;\n        }\n    } else {\n        goto lab_0x40ad78;\n    }\n  lab_0x40adbd:\n    // 0x40adbd\n    free(mem3);\n    free(mem2);\n    int64_t v133 = v30 + 16; // 0x40adde\n    int64_t v134 = v133; // 0x40ade5\n    goto lab_0x40ade8;\n  lab_0x40b506:\n    // 0x40b506\n    v105 = v123 / 2;\n    v106 = 2 * v122;\n    v104 = v121 + 8;\n    if (v123 >= 2) {\n        goto lab_0x40b502_2;\n    } else {\n        goto lab_0x40b512;\n    }\n  lab_0x40ad78:\n    // 0x40ad78\n    v110 = v129 / 2;\n    v111 = 2 * v128;\n    v112 = v127 + 8;\n    if (v129 >= 2) {\n        goto lab_0x40ad70_2;\n    } else {\n        goto lab_0x40ad84;\n    }\n  lab_0x40ade8:;\n    int64_t v135 = v134 + 24; // 0x40adec\n    free((int64_t *)*(int64_t *)v134);\n    v134 = v135;\n    if (v133 + (int64_t)size2 != v135) {\n        goto lab_0x40ade8;\n    } else {\n        // 0x40adfa\n        free(mem);\n        result = 1;\n        goto lab_0x40ae32;\n    }\n  lab_0x40ad9f_2:;\n    int64_t v136 = v119;\n    if ((*(char *)(v30 + 0x1801 + 32 * v136) & 4) != 0) {\n        int64_t v137 = *(int64_t *)(8 * v136 + v43); // 0x40b48e\n        *(int64_t *)(v117 + 80) = v137;\n        if ((char)v27 == 0) {\n            goto lab_0x40adbd;\n        } else {\n            // 0x40b49c\n            *(int64_t *)(v117 + 2128) = v137;\n            goto lab_0x40adbd;\n        }\n    } else {\n        int64_t v138 = v136 + 1; // 0x40adb4\n        v119 = v138;\n        if (v138 != v13) {\n            goto lab_0x40ad9f_2;\n        } else {\n            goto lab_0x40adbd;\n        }\n    }\n  lab_0x40b54c:;\n    int64_t v139 = 8 * v124; // 0x40b54c\n    *(int64_t *)v121 = *(int64_t *)(v139 + v41);\n    *(int64_t *)(v121 + 2048) = *(int64_t *)(v139 + v42);\n    goto lab_0x40b506;\n  lab_0x40b536:;\n    int64_t v140 = v125;\n    int64_t v141 = v126 + 1; // 0x40b539\n    v126 = v141;\n    v125 = v140 + 32;\n    v124 = v141;\n    if ((*(int64_t *)v140 & v122) == 0) {\n        goto lab_0x40b536;\n    } else {\n        goto lab_0x40b54c;\n    }\n  lab_0x40b42f:;\n    int64_t v142 = v132;\n    if ((*v115 & v128) == 0) {\n        // 0x40b445\n        *(int64_t *)v127 = *(int64_t *)(v142 + v41);\n        goto lab_0x40ad78;\n    } else {\n        // 0x40b439\n        *(int64_t *)v127 = *(int64_t *)(v142 + v42);\n        goto lab_0x40ad78;\n    }\n  lab_0x40b418:;\n    int64_t v143 = v131;\n    int64_t v144 = v130 + 1; // 0x40b41b\n    v131 = v143 + 32;\n    v130 = v144;\n    if ((*(int64_t *)v143 & v128) == 0) {\n        goto lab_0x40b418;\n    } else {\n        // 0x40b42b\n        v132 = 8 * v144;\n        goto lab_0x40b42f;\n    }\n}\n"
        },
        {
            "funcName": "function_40b580",
            "funcStartAddr": "40b580",
            "funcEndAddr": "40b607",
            "decompiledFuncCode": "int64_t function_40b580(int64_t a1, int64_t a2) {\n    int64_t v1 = a2 + 48; // 0x40b580\n    char * v2 = (char *)v1; // 0x40b580\n    if (*v2 == 16) {\n        int64_t v3 = *(int64_t *)(a2 + 8); // 0x40b586\n        *(int64_t *)(a2 + 24) = *(int64_t *)(v3 + 24);\n        *(int64_t *)(a2 + 56) = *(int64_t *)(v3 + 56);\n        return 0;\n    }\n    // 0x40b5a0\n    *(int64_t *)(a2 + 24) = a2;\n    int64_t v4 = a2 + 40; // 0x40b5b4\n    int64_t v5 = function_407700(a1, *(int64_t *)v4, *(int64_t *)v1); // 0x40b5b8\n    *(int64_t *)(a2 + 56) = v5;\n    if (v5 == -1) {\n        // 0x40b5f6\n        return 12;\n    }\n    // 0x40b5ca\n    if (*v2 == 12) {\n        int32_t * v6 = (int32_t *)(a1 + 8 + 16 * v5); // 0x40b5e8\n        *v6 = *v6 & -0x3ff01 | 256 * *(int32_t *)v4 & 0x3ff00;\n    }\n    // 0x40b5f6\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40b610",
            "funcStartAddr": "40b610",
            "funcEndAddr": "40b78c",
            "decompiledFuncCode": "int64_t function_40b610(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 16);\n    if (a1 != 0) {\n        int64_t v2 = 0; // 0x40b62b\n        if (*v1 != 0) {\n            int64_t v3 = v2 + 1; // 0x40b63f\n            int64_t v4 = a1 + 16 * v2; // 0x40b647\n            function_4076b0(v4);\n            v2 = v3;\n            int64_t v5 = v4; // 0x40b654\n            while (*v1 > v3) {\n                // 0x40b63c\n                v3 = v2 + 1;\n                v4 = v5 + 16 * v2;\n                function_4076b0(v4);\n                v2 = v3;\n                v5 = v4;\n            }\n        }\n    }\n    // 0x40b656\n    free((int64_t *)*(int64_t *)(a1 + 24));\n    int64_t * v6; // 0x40b610\n    int64_t * v7; // 0x40b610\n    int64_t * v8; // 0x40b610\n    if (*v1 == 0) {\n        // 0x40b656\n        v7 = (int64_t *)(a1 + 56);\n        v6 = (int64_t *)(a1 + 48);\n        v8 = (int64_t *)(a1 + 40);\n    } else {\n        int64_t * v9 = (int64_t *)(a1 + 48);\n        int64_t * v10 = (int64_t *)(a1 + 56);\n        int64_t * v11 = (int64_t *)(a1 + 40);\n        int64_t v12 = 0;\n        int64_t v13 = *v9; // 0x40b670\n        if (v13 != 0) {\n            // 0x40b67a\n            free((int64_t *)*(int64_t *)(v13 + 16 + 24 * v12));\n        }\n        int64_t v14 = *v10; // 0x40b688\n        if (v14 != 0) {\n            // 0x40b692\n            free((int64_t *)*(int64_t *)(24 * v12 + 16 + v14));\n        }\n        int64_t v15 = *v11; // 0x40b6a0\n        if (v15 != 0) {\n            // 0x40b6aa\n            free((int64_t *)*(int64_t *)(24 * v12 + 16 + v15));\n        }\n        int64_t v16 = v12 + 1; // 0x40b6b8\n        v7 = v10;\n        v6 = v9;\n        v8 = v11;\n        while (*v1 > v16) {\n            // 0x40b670\n            v12 = v16;\n            v13 = *v9;\n            if (v13 != 0) {\n                // 0x40b67a\n                free((int64_t *)*(int64_t *)(v13 + 16 + 24 * v12));\n            }\n            // 0x40b688\n            v14 = *v10;\n            if (v14 != 0) {\n                // 0x40b692\n                free((int64_t *)*(int64_t *)(24 * v12 + 16 + v14));\n            }\n            // 0x40b6a0\n            v15 = *v11;\n            if (v15 != 0) {\n                // 0x40b6aa\n                free((int64_t *)*(int64_t *)(24 * v12 + 16 + v15));\n            }\n            // 0x40b6b8\n            v16 = v12 + 1;\n            v7 = v10;\n            v6 = v9;\n            v8 = v11;\n        }\n    }\n    // 0x40b6c3\n    free((int64_t *)*v8);\n    free((int64_t *)*v6);\n    int64_t * v17 = (int64_t *)*v7; // 0x40b6df\n    free(v17);\n    free(v17);\n    int64_t * v18 = (int64_t *)(a1 + 64); // 0x40b6ed\n    int64_t v19 = *v18; // 0x40b6ed\n    int64_t * v20 = NULL; // 0x40b6f5\n    if (v19 != 0) {\n        int64_t v21 = 0; // 0x40b733\n        int64_t v22 = 24 * v21 + v19; // 0x40b707\n        int64_t * v23 = (int64_t *)v22; // 0x40b70b\n        int64_t * v24 = (int64_t *)(v22 + 16);\n        int64_t v25 = 0; // 0x40b710\n        int64_t v26; // 0x40b720\n        if (*v23 >= 1) {\n            v26 = v25 + 1;\n            function_407c00(*(int64_t *)(*v24 + 8 * v25));\n            v25 = v26;\n            while (v26 < *v23) {\n                // 0x40b718\n                v26 = v25 + 1;\n                function_407c00(*(int64_t *)(*v24 + 8 * v25));\n                v25 = v26;\n            }\n        }\n        // 0x40b72f\n        v21++;\n        free((int64_t *)*v24);\n        int64_t v27 = *v18;\n        while (*(int64_t *)(a1 + 136) >= v21) {\n            // 0x40b700\n            v22 = 24 * v21 + v27;\n            v23 = (int64_t *)v22;\n            v24 = (int64_t *)(v22 + 16);\n            v25 = 0;\n            if (*v23 >= 1) {\n                v26 = v25 + 1;\n                function_407c00(*(int64_t *)(*v24 + 8 * v25));\n                v25 = v26;\n                while (v26 < *v23) {\n                    // 0x40b718\n                    v26 = v25 + 1;\n                    function_407c00(*(int64_t *)(*v24 + 8 * v25));\n                    v25 = v26;\n                }\n            }\n            // 0x40b72f\n            v21++;\n            free((int64_t *)*v24);\n            v27 = *v18;\n        }\n        // 0x40b755\n        v20 = (int64_t *)v27;\n    }\n    // 0x40b755\n    free(v20);\n    int64_t v28 = *(int64_t *)(a1 + 120); // 0x40b75a\n    if (v28 != (int64_t)&g14) {\n        // 0x40b768\n        free((int64_t *)v28);\n    }\n    // 0x40b76d\n    free((int64_t *)*(int64_t *)(a1 + 224));\n    free((int64_t *)a1);\n    return &g81;\n}\n"
        },
        {
            "funcName": "function_40b790",
            "funcStartAddr": "40b790",
            "funcEndAddr": "40b7de",
            "decompiledFuncCode": "int64_t function_40b790(int64_t a1) {\n    int64_t * v1 = (int64_t *)(a1 + 16);\n    if (a1 < 1) {\n        // 0x40b7d0\n        free((int64_t *)*v1);\n        return &g81;\n    }\n    int64_t v2 = 0;\n    int64_t v3 = v2 + 1; // 0x40b7a9\n    int64_t v4 = 48 * v2; // 0x40b7ad\n    free((int64_t *)*(int64_t *)(*v1 + 40 + v4));\n    uint64_t v5 = *(int64_t *)(v4 + 16 + *v1); // 0x40b7c0\n    free((int64_t *)v5);\n    while (v3 < v5) {\n        // 0x40b7a0\n        v2 = v3;\n        v3 = v2 + 1;\n        v4 = 48 * v2;\n        free((int64_t *)*(int64_t *)(*v1 + 40 + v4));\n        v5 = *(int64_t *)(v4 + 16 + *v1);\n        free((int64_t *)v5);\n    }\n    // 0x40b7d0\n    free((int64_t *)*v1);\n    return &g81;\n}\n"
        },
        {
            "funcName": "function_40b7e0",
            "funcStartAddr": "40b7e0",
            "funcEndAddr": "40b870",
            "decompiledFuncCode": "int64_t function_40b7e0(int64_t a1, int64_t a2, int64_t * a3, int64_t a4, int64_t a5, int128_t * a6) {\n    int64_t v1 = a1 - 1; // 0x40b7e7\n    *(int64_t *)a1 = v1;\n    if (v1 < 0) {\n        // 0x40b852\n        __assert_fail(\"num >= 0\", \"lib/regexec.c\", 1359, \"pop_fail_stack\");\n        return &g81;\n    }\n    int64_t v2 = 48 * v1; // 0x40b7fe\n    int64_t v3 = v2 + a2; // 0x40b808\n    *a3 = *(int64_t *)v3;\n    int64_t v4 = *(int64_t *)(v3 + 16); // 0x40b811\n    memcpy((int64_t *)a5, (int64_t *)v4, 16 * (int32_t)a4);\n    int64_t * v5 = (int64_t *)((int64_t)a6 + 16); // 0x40b81d\n    free((int64_t *)*v5);\n    int64_t v6 = v4 + v2;\n    free((int64_t *)*(int64_t *)(v6 + 16));\n    *a6 = (int128_t)__asm_movaps(__asm_movdqu(*(int128_t *)(v6 + 24)));\n    *v5 = *(int64_t *)(v6 + 40);\n    return *(int64_t *)(v6 + 8);\n}\n"
        },
        {
            "funcName": "function_40b870",
            "funcStartAddr": "40b870",
            "funcEndAddr": "40b8bc",
            "decompiledFuncCode": "int64_t function_40b870(int64_t a1, int64_t str) {\n    // 0x40b870\n    int64_t v1; // 0x40b870\n    uint64_t v2 = v1;\n    int32_t len = strlen((char *)str); // 0x40b87f\n    if (len != 1) {\n        // 0x40b8b0\n        return 3;\n    }\n    int64_t * v3 = (int64_t *)((v2 / 8 & 24) + a1); // 0x40b89a\n    *v3 = *v3 | (int64_t)len << v2 % 64;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40b8c0",
            "funcStartAddr": "40b8c0",
            "funcEndAddr": "40c086",
            "decompiledFuncCode": "int64_t function_40b8c0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t * a5, int64_t a6, int64_t a7) {\n    int64_t v1 = (int64_t)a5;\n    int64_t v2 = a4; // 0x40b8e1\n    int64_t v3 = a6; // 0x40b8e1\n    int64_t v4; // 0x40b8c0\n    int64_t v5; // 0x40b8c0\n    int64_t v6; // 0x40b8c0\n    int64_t v7; // 0x40b8c0\n    int64_t v8; // 0x40b8c0\n    bool v9; // 0x40b8c0\n    if ((a7 & 0x400000) == 0) {\n        goto lab_0x40b905;\n    } else {\n        int64_t v10 = v9 ? -1 : 1;\n        int64_t v11 = (int64_t)\"upper\"; // 0x40b8c0\n        int64_t v12 = a6; // 0x40b8c0\n        unsigned char v13 = *(char *)v12; // 0x40b8f0\n        char v14 = *(char *)v11; // 0x40b8f0\n        v2 = 5;\n        char v15 = v14; // 0x40b8f0\n        bool v16 = false; // 0x40b8f0\n        while (v13 == v14) {\n            // 0x40b8e3\n            v11 += v10;\n            v12 += v10;\n            v15 = v13;\n            v16 = true;\n            if (v2 == 0) {\n                // break -> \n                break;\n            }\n            v13 = *(char *)v12;\n            v14 = *(char *)v11;\n            v2--;\n            v15 = v14;\n            v16 = false;\n        }\n        unsigned char v17 = v15;\n        v3 = (int64_t)\"alpha\";\n        int64_t v18 = (int64_t)\"lower\"; // 0x40b8f9\n        int64_t v19 = a6; // 0x40b8f9\n        if ((v13 >= v17 && !v16) != v13 < v17) {\n            unsigned char v20 = *(char *)v19; // 0x40ba03\n            char v21 = *(char *)v18; // 0x40ba03\n            int64_t v22 = 5; // 0x40ba03\n            char v23 = v21; // 0x40ba03\n            bool v24 = false; // 0x40ba03\n            while (v20 == v21) {\n                // 0x40b9f6\n                v18 += v10;\n                v19 += v10;\n                v23 = v20;\n                v24 = true;\n                if (v22 == 0) {\n                    // break -> \n                    break;\n                }\n                v20 = *(char *)v19;\n                v21 = *(char *)v18;\n                v22--;\n                v23 = v21;\n                v24 = false;\n            }\n            unsigned char v25 = v23;\n            int64_t v26 = !((v20 < v25 | v24)) == v20 < v25 ? (int64_t)\"alpha\" : a6; // 0x40ba15\n            v6 = a3;\n            v8 = v22;\n            v4 = v26;\n            v7 = v22;\n            v5 = v26;\n            if (v22 != v1) {\n                goto lab_0x40b915;\n            } else {\n                goto lab_0x40ba25;\n            }\n        } else {\n            goto lab_0x40b905;\n        }\n    }\n  lab_0x40b905:\n    // 0x40b905\n    v6 = a3;\n    v8 = v2;\n    v4 = v3;\n    v7 = v1;\n    v5 = v3;\n    if (v2 == v1) {\n        goto lab_0x40ba25;\n    } else {\n        goto lab_0x40b915;\n    }\n  lab_0x40ba25:;\n    int64_t v27 = 2 * v7 | 1; // 0x40ba25\n    int64_t * v28 = (int64_t *)a3; // 0x40ba3e\n    int64_t * mem = realloc(v28, 8 * (int32_t)v27); // 0x40ba3e\n    if (mem == NULL) {\n        // 0x40b9a6\n        return 12;\n    }\n    int64_t v29 = (int64_t)mem; // 0x40ba3e\n    *v28 = v29;\n    *a5 = v27;\n    v6 = v29;\n    v8 = v7;\n    v4 = v5;\n    goto lab_0x40b915;\n  lab_0x40b915:\n    // 0x40b915\n    *(int64_t *)a4 = v8 + 1;\n    char * name = (char *)v4; // 0x40b924\n    *(int64_t *)(8 * v8 + v6) = (int64_t)wctype(name);\n    int64_t v30 = v9 ? -1 : 1;\n    int64_t v31 = (int64_t)\"alnum\"; // 0x40b8c0\n    int64_t v32 = v4; // 0x40b8c0\n    int64_t v33 = 6; // 0x40b8c0\n    unsigned char v34 = *(char *)v32; // 0x40b93a\n    char v35 = *(char *)v31; // 0x40b93a\n    char v36 = v35; // 0x40b93a\n    bool v37 = false; // 0x40b93a\n    while (v34 == v35) {\n        int64_t v38 = v33 - 1; // 0x40b93a\n        v31 += v30;\n        v32 += v30;\n        v33 = v38;\n        v36 = v34;\n        v37 = true;\n        if (v38 == 0) {\n            // break -> \n            break;\n        }\n        v34 = *(char *)v32;\n        v35 = *(char *)v31;\n        v36 = v35;\n        v37 = false;\n    }\n    unsigned char v39 = v36;\n    int64_t v40 = (int64_t)\"cntrl\"; // 0x40b943\n    int64_t v41 = v4; // 0x40b943\n    int64_t v42 = 6; // 0x40b943\n    if ((v34 >= v39 && !v37) == v34 < v39) {\n        int64_t v43 = (int64_t)*__ctype_b_loc(); // 0x40b9c4\n        if (a1 != 0) {\n            int64_t v44 = 0;\n            unsigned char v45; // 0x40bbee\n            unsigned char v46; // 0x40b8c0\n            int64_t * v47; // 0x40bc03\n            if ((*(char *)(2 * v44 + v43) & 8) != 0) {\n                // 0x40bbee\n                v45 = *(char *)(v44 + a1);\n                v46 = v45 % 64;\n                v47 = (int64_t *)((int64_t)(v45 / 8 & 24) + a2);\n                *v47 = (v46 == 0 ? 1 : 1 << (int64_t)v46) | *v47;\n            }\n            int64_t v48 = v44 + 1; // 0x40bc11\n            while (v44 != 255) {\n                // 0x40bbe8\n                v44 = v48;\n                if ((*(char *)(2 * v44 + v43) & 8) != 0) {\n                    // 0x40bbee\n                    v45 = *(char *)(v44 + a1);\n                    v46 = v45 % 64;\n                    v47 = (int64_t *)((int64_t)(v45 / 8 & 24) + a2);\n                    *v47 = (v46 == 0 ? 1 : 1 << (int64_t)v46) | *v47;\n                }\n                // 0x40bc07\n                v48 = v44 + 1;\n            }\n        } else {\n            int64_t v49 = 0;\n            int64_t * v50; // 0x40b9e3\n            if ((*(char *)(2 * v49 + v43) & 8) != 0) {\n                // 0x40b9d6\n                v50 = (int64_t *)(8 * (v49 >> 6) + a2);\n                *v50 = *v50 | 1 << v49 % 64;\n            }\n            int64_t v51 = v49 + 1; // 0x40b9f2\n            while (v49 != 255) {\n                // 0x40b9d0\n                v49 = v51;\n                if ((*(char *)(2 * v49 + v43) & 8) != 0) {\n                    // 0x40b9d6\n                    v50 = (int64_t *)(8 * (v49 >> 6) + a2);\n                    *v50 = *v50 | 1 << v49 % 64;\n                }\n                // 0x40b9e7\n                v51 = v49 + 1;\n            }\n        }\n        // 0x40b9a6\n        return 0;\n    }\n    unsigned char v52 = *(char *)v41; // 0x40b952\n    char v53 = *(char *)v40; // 0x40b952\n    char v54 = v53; // 0x40b952\n    bool v55 = false; // 0x40b952\n    while (v52 == v53) {\n        int64_t v56 = v42 - 1; // 0x40b952\n        v40 += v30;\n        v41 += v30;\n        v42 = v56;\n        v54 = v52;\n        v55 = true;\n        if (v56 == 0) {\n            // break -> \n            break;\n        }\n        v52 = *(char *)v41;\n        v53 = *(char *)v40;\n        v54 = v53;\n        v55 = false;\n    }\n    unsigned char v57 = v54;\n    int64_t v58 = (int64_t)\"lower\"; // 0x40b95b\n    int64_t v59 = v4; // 0x40b95b\n    int64_t v60 = 6; // 0x40b95b\n    if ((v52 >= v57 && !v55) == v52 < v57) {\n        int64_t v61 = (int64_t)*__ctype_b_loc(); // 0x40b96d\n        if (a1 != 0) {\n            int64_t v62 = 0;\n            unsigned char v63; // 0x40bc26\n            unsigned char v64; // 0x40b8c0\n            int64_t * v65; // 0x40bc3b\n            if ((*(char *)(2 * v62 + v61) & 2) != 0) {\n                // 0x40bc26\n                v63 = *(char *)(v62 + a1);\n                v64 = v63 % 64;\n                v65 = (int64_t *)((int64_t)(v63 / 8 & 24) + a2);\n                *v65 = (v64 == 0 ? 1 : 1 << (int64_t)v64) | *v65;\n            }\n            int64_t v66 = v62 + 1; // 0x40bc49\n            while (v62 != 255) {\n                // 0x40bc20\n                v62 = v66;\n                if ((*(char *)(2 * v62 + v61) & 2) != 0) {\n                    // 0x40bc26\n                    v63 = *(char *)(v62 + a1);\n                    v64 = v63 % 64;\n                    v65 = (int64_t *)((int64_t)(v63 / 8 & 24) + a2);\n                    *v65 = (v64 == 0 ? 1 : 1 << (int64_t)v64) | *v65;\n                }\n                // 0x40bc3f\n                v66 = v62 + 1;\n            }\n        } else {\n            int64_t v67 = 0;\n            int64_t * v68; // 0x40b993\n            if ((*(char *)(2 * v67 + v61) & 2) != 0) {\n                // 0x40b986\n                v68 = (int64_t *)(8 * (v67 >> 6) + a2);\n                *v68 = *v68 | 1 << v67 % 64;\n            }\n            int64_t v69 = v67 + 1; // 0x40b9a2\n            while (v67 != 255) {\n                // 0x40b980\n                v67 = v69;\n                if ((*(char *)(2 * v67 + v61) & 2) != 0) {\n                    // 0x40b986\n                    v68 = (int64_t *)(8 * (v67 >> 6) + a2);\n                    *v68 = *v68 | 1 << v67 % 64;\n                }\n                // 0x40b997\n                v69 = v67 + 1;\n            }\n        }\n        // 0x40b9a6\n        return 0;\n    }\n    unsigned char v70 = *(char *)v59; // 0x40ba71\n    char v71 = *(char *)v58; // 0x40ba71\n    char v72 = v71; // 0x40ba71\n    bool v73 = false; // 0x40ba71\n    while (v70 == v71) {\n        int64_t v74 = v60 - 1; // 0x40ba71\n        v58 += v30;\n        v59 += v30;\n        v60 = v74;\n        v72 = v70;\n        v73 = true;\n        if (v74 == 0) {\n            // break -> \n            break;\n        }\n        v70 = *(char *)v59;\n        v71 = *(char *)v58;\n        v72 = v71;\n        v73 = false;\n    }\n    unsigned char v75 = v72;\n    int64_t v76 = (int64_t)\"space\"; // 0x40ba7a\n    int64_t v77 = v4; // 0x40ba7a\n    int64_t v78 = 6; // 0x40ba7a\n    if ((v70 >= v75 && !v73) == v70 < v75) {\n        int64_t v79 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v80 = 0;\n            unsigned char v81; // 0x40bc5f\n            unsigned char v82; // 0x40b8c0\n            int64_t * v83; // 0x40bc74\n            if ((*(char *)(2 * v80 + v79) & 2) != 0) {\n                // 0x40bc5f\n                v81 = *(char *)(v80 + a1);\n                v82 = v81 % 64;\n                v83 = (int64_t *)((int64_t)(v81 / 8 & 24) + a2);\n                *v83 = (v82 == 0 ? 1 : 1 << (int64_t)v82) | *v83;\n            }\n            int64_t v84 = v80 + 1; // 0x40bc82\n            while (v80 != 255) {\n                // 0x40bc58\n                v80 = v84;\n                if ((*(char *)(2 * v80 + v79) & 2) != 0) {\n                    // 0x40bc5f\n                    v81 = *(char *)(v80 + a1);\n                    v82 = v81 % 64;\n                    v83 = (int64_t *)((int64_t)(v81 / 8 & 24) + a2);\n                    *v83 = (v82 == 0 ? 1 : 1 << (int64_t)v82) | *v83;\n                }\n                // 0x40bc78\n                v84 = v80 + 1;\n            }\n        } else {\n            int64_t v85 = 0;\n            int64_t * v86; // 0x40bb0c\n            if ((*(char *)(2 * v85 + v79) & 2) != 0) {\n                // 0x40baff\n                v86 = (int64_t *)(8 * (v85 >> 6) + a2);\n                *v86 = *v86 | 1 << v85 % 64;\n            }\n            int64_t v87 = v85 + 1; // 0x40bb1b\n            while (v85 != 255) {\n                // 0x40baf8\n                v85 = v87;\n                if ((*(char *)(2 * v85 + v79) & 2) != 0) {\n                    // 0x40baff\n                    v86 = (int64_t *)(8 * (v85 >> 6) + a2);\n                    *v86 = *v86 | 1 << v85 % 64;\n                }\n                // 0x40bb10\n                v87 = v85 + 1;\n            }\n        }\n        // 0x40b9a6\n        return 0;\n    }\n    unsigned char v88 = *(char *)v77; // 0x40ba89\n    char v89 = *(char *)v76; // 0x40ba89\n    char v90 = v89; // 0x40ba89\n    bool v91 = false; // 0x40ba89\n    while (v88 == v89) {\n        // 0x40ba7c\n        v78--;\n        v76 += v30;\n        v77 += v30;\n        v90 = v88;\n        v91 = true;\n        if (v78 == 0) {\n            // break -> \n            break;\n        }\n        v88 = *(char *)v77;\n        v89 = *(char *)v76;\n        v90 = v89;\n        v91 = false;\n    }\n    unsigned char v92 = v90;\n    int64_t v93 = (int64_t)\"alpha\"; // 0x40ba92\n    int64_t v94 = v4; // 0x40ba92\n    int64_t v95 = 6; // 0x40ba92\n    if ((v88 >= v92 && !v91) == v88 < v92) {\n        int64_t v96 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v97 = 0;\n            unsigned char v98; // 0x40bde7\n            unsigned char v99; // 0x40b8c0\n            int64_t * v100; // 0x40bdfc\n            if ((*(char *)(2 * v97 + v96) & 32) != 0) {\n                // 0x40bde7\n                v98 = *(char *)(v97 + a1);\n                v99 = v98 % 64;\n                v100 = (int64_t *)((int64_t)(v98 / 8 & 24) + a2);\n                *v100 = (v99 == 0 ? 1 : 1 << (int64_t)v99) | *v100;\n            }\n            int64_t v101 = v97 + 1; // 0x40be0a\n            while (v97 != 255) {\n                // 0x40bde0\n                v97 = v101;\n                if ((*(char *)(2 * v97 + v96) & 32) != 0) {\n                    // 0x40bde7\n                    v98 = *(char *)(v97 + a1);\n                    v99 = v98 % 64;\n                    v100 = (int64_t *)((int64_t)(v98 / 8 & 24) + a2);\n                    *v100 = (v99 == 0 ? 1 : 1 << (int64_t)v99) | *v100;\n                }\n                // 0x40be00\n                v101 = v97 + 1;\n            }\n        } else {\n            int64_t v102 = 0;\n            int64_t * v103; // 0x40bac4\n            if ((*(char *)(2 * v102 + v96) & 32) != 0) {\n                // 0x40bab7\n                v103 = (int64_t *)(8 * (v102 >> 6) + a2);\n                *v103 = *v103 | 1 << v102 % 64;\n            }\n            int64_t v104 = v102 + 1; // 0x40bad3\n            while (v102 != 255) {\n                // 0x40bab0\n                v102 = v104;\n                if ((*(char *)(2 * v102 + v96) & 32) != 0) {\n                    // 0x40bab7\n                    v103 = (int64_t *)(8 * (v102 >> 6) + a2);\n                    *v103 = *v103 | 1 << v102 % 64;\n                }\n                // 0x40bac8\n                v104 = v102 + 1;\n            }\n        }\n        // 0x40b9a6\n        return 0;\n    }\n    unsigned char v105 = *(char *)v94; // 0x40bb2f\n    char v106 = *(char *)v93; // 0x40bb2f\n    char v107 = v106; // 0x40bb2f\n    bool v108 = false; // 0x40bb2f\n    while (v105 == v106) {\n        int64_t v109 = v95 - 1; // 0x40bb2f\n        v93 += v30;\n        v94 += v30;\n        v95 = v109;\n        v107 = v105;\n        v108 = true;\n        if (v109 == 0) {\n            // break -> \n            break;\n        }\n        v105 = *(char *)v94;\n        v106 = *(char *)v93;\n        v107 = v106;\n        v108 = false;\n    }\n    unsigned char v110 = v107;\n    int64_t v111 = (int64_t)\"digit\"; // 0x40bb38\n    int64_t v112 = v4; // 0x40bb38\n    int64_t v113 = 6; // 0x40bb38\n    if ((v105 >= v110 && !v108) == v105 < v110) {\n        int64_t v114 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v115 = 0;\n            unsigned char v116; // 0x40bdb4\n            unsigned char v117; // 0x40b8c0\n            int64_t * v118; // 0x40bdc9\n            if ((*(char *)(2 * v115 + v114) & 4) != 0) {\n                // 0x40bdb4\n                v116 = *(char *)(v115 + a1);\n                v117 = v116 % 64;\n                v118 = (int64_t *)((int64_t)(v116 / 8 & 24) + a2);\n                *v118 = (v117 == 0 ? 1 : 1 << (int64_t)v117) | *v118;\n            }\n            int64_t v119 = v115 + 1; // 0x40bdd7\n            while (v115 != 255) {\n                // 0x40bdad\n                v115 = v119;\n                if ((*(char *)(2 * v115 + v114) & 4) != 0) {\n                    // 0x40bdb4\n                    v116 = *(char *)(v115 + a1);\n                    v117 = v116 % 64;\n                    v118 = (int64_t *)((int64_t)(v116 / 8 & 24) + a2);\n                    *v118 = (v117 == 0 ? 1 : 1 << (int64_t)v117) | *v118;\n                }\n                // 0x40bdcd\n                v119 = v115 + 1;\n            }\n        } else {\n            int64_t v120 = 0;\n            int64_t * v121; // 0x40bbcc\n            if ((*(char *)(2 * v120 + v114) & 4) != 0) {\n                // 0x40bbbf\n                v121 = (int64_t *)(8 * (v120 >> 6) + a2);\n                *v121 = *v121 | 1 << v120 % 64;\n            }\n            int64_t v122 = v120 + 1; // 0x40bbdb\n            while (v120 != 255) {\n                // 0x40bbb8\n                v120 = v122;\n                if ((*(char *)(2 * v120 + v114) & 4) != 0) {\n                    // 0x40bbbf\n                    v121 = (int64_t *)(8 * (v120 >> 6) + a2);\n                    *v121 = *v121 | 1 << v120 % 64;\n                }\n                // 0x40bbd0\n                v122 = v120 + 1;\n            }\n        }\n        // 0x40b9a6\n        return 0;\n    }\n    unsigned char v123 = *(char *)v112; // 0x40bb47\n    char v124 = *(char *)v111; // 0x40bb47\n    char v125 = v124; // 0x40bb47\n    bool v126 = false; // 0x40bb47\n    while (v123 == v124) {\n        // 0x40bb3a\n        v113--;\n        v111 += v30;\n        v112 += v30;\n        v125 = v123;\n        v126 = true;\n        if (v113 == 0) {\n            // break -> \n            break;\n        }\n        v123 = *(char *)v112;\n        v124 = *(char *)v111;\n        v125 = v124;\n        v126 = false;\n    }\n    unsigned char v127 = v125;\n    int64_t v128 = (int64_t)\"print\"; // 0x40bb50\n    int64_t v129 = v4; // 0x40bb50\n    int64_t v130 = 6; // 0x40bb50\n    if ((v123 >= v127 && !v126) == v123 < v127) {\n        int64_t v131 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v132 = 0;\n            unsigned char v133; // 0x40be1a\n            unsigned char v134; // 0x40b8c0\n            int64_t * v135; // 0x40be2f\n            if ((*(char *)(2 * v132 + v131) & 8) != 0) {\n                // 0x40be1a\n                v133 = *(char *)(v132 + a1);\n                v134 = v133 % 64;\n                v135 = (int64_t *)((int64_t)(v133 / 8 & 24) + a2);\n                *v135 = (v134 == 0 ? 1 : 1 << (int64_t)v134) | *v135;\n            }\n            int64_t v136 = v132 + 1; // 0x40be3d\n            while (v132 != 255) {\n                // 0x40be13\n                v132 = v136;\n                if ((*(char *)(2 * v132 + v131) & 8) != 0) {\n                    // 0x40be1a\n                    v133 = *(char *)(v132 + a1);\n                    v134 = v133 % 64;\n                    v135 = (int64_t *)((int64_t)(v133 / 8 & 24) + a2);\n                    *v135 = (v134 == 0 ? 1 : 1 << (int64_t)v134) | *v135;\n                }\n                // 0x40be33\n                v136 = v132 + 1;\n            }\n        } else {\n            int64_t v137 = 0;\n            int64_t * v138; // 0x40bb84\n            if ((*(char *)(2 * v137 + v131) & 8) != 0) {\n                // 0x40bb77\n                v138 = (int64_t *)(8 * (v137 >> 6) + a2);\n                *v138 = *v138 | 1 << v137 % 64;\n            }\n            int64_t v139 = v137 + 1; // 0x40bb93\n            while (v137 != 255) {\n                // 0x40bb70\n                v137 = v139;\n                if ((*(char *)(2 * v137 + v131) & 8) != 0) {\n                    // 0x40bb77\n                    v138 = (int64_t *)(8 * (v137 >> 6) + a2);\n                    *v138 = *v138 | 1 << v137 % 64;\n                }\n                // 0x40bb88\n                v139 = v137 + 1;\n            }\n        }\n        // 0x40b9a6\n        return 0;\n    }\n    unsigned char v140 = *(char *)v129; // 0x40bc96\n    char v141 = *(char *)v128; // 0x40bc96\n    char v142 = v141; // 0x40bc96\n    bool v143 = false; // 0x40bc96\n    while (v140 == v141) {\n        int64_t v144 = v130 - 1; // 0x40bc96\n        v128 += v30;\n        v129 += v30;\n        v130 = v144;\n        v142 = v140;\n        v143 = true;\n        if (v144 == 0) {\n            // break -> \n            break;\n        }\n        v140 = *(char *)v129;\n        v141 = *(char *)v128;\n        v142 = v141;\n        v143 = false;\n    }\n    unsigned char v145 = v142;\n    int64_t v146 = (int64_t)\"upper\"; // 0x40bc9f\n    int64_t v147 = v4; // 0x40bc9f\n    int64_t v148 = 6; // 0x40bc9f\n    if ((v140 >= v145 && !v143) == v140 < v145) {\n        int64_t v149 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v150 = 0;\n            unsigned char v151; // 0x40bff1\n            unsigned char v152; // 0x40b8c0\n            int64_t * v153; // 0x40c006\n            if ((*(char *)(2 * v150 + v149) & 64) != 0) {\n                // 0x40bff1\n                v151 = *(char *)(v150 + a1);\n                v152 = v151 % 64;\n                v153 = (int64_t *)((int64_t)(v151 / 8 & 24) + a2);\n                *v153 = (v152 == 0 ? 1 : 1 << (int64_t)v152) | *v153;\n            }\n            int64_t v154 = v150 + 1; // 0x40c014\n            while (v150 != 255) {\n                // 0x40bfea\n                v150 = v154;\n                if ((*(char *)(2 * v150 + v149) & 64) != 0) {\n                    // 0x40bff1\n                    v151 = *(char *)(v150 + a1);\n                    v152 = v151 % 64;\n                    v153 = (int64_t *)((int64_t)(v151 / 8 & 24) + a2);\n                    *v153 = (v152 == 0 ? 1 : 1 << (int64_t)v152) | *v153;\n                }\n                // 0x40c00a\n                v154 = v150 + 1;\n            }\n        } else {\n            int64_t v155 = 0;\n            int64_t * v156; // 0x40bcd4\n            if ((*(char *)(2 * v155 + v149) & 64) != 0) {\n                // 0x40bcc7\n                v156 = (int64_t *)(8 * (v155 >> 6) + a2);\n                *v156 = *v156 | 1 << v155 % 64;\n            }\n            int64_t v157 = v155 + 1; // 0x40bce3\n            while (v155 != 255) {\n                // 0x40bcc0\n                v155 = v157;\n                if ((*(char *)(2 * v155 + v149) & 64) != 0) {\n                    // 0x40bcc7\n                    v156 = (int64_t *)(8 * (v155 >> 6) + a2);\n                    *v156 = *v156 | 1 << v155 % 64;\n                }\n                // 0x40bcd8\n                v157 = v155 + 1;\n            }\n        }\n        // 0x40b9a6\n        return 0;\n    }\n    unsigned char v158 = *(char *)v147; // 0x40bcf7\n    char v159 = *(char *)v146; // 0x40bcf7\n    char v160 = v159; // 0x40bcf7\n    bool v161 = false; // 0x40bcf7\n    while (v158 == v159) {\n        int64_t v162 = v148 - 1; // 0x40bcf7\n        v146 += v30;\n        v147 += v30;\n        v148 = v162;\n        v160 = v158;\n        v161 = true;\n        if (v162 == 0) {\n            // break -> \n            break;\n        }\n        v158 = *(char *)v147;\n        v159 = *(char *)v146;\n        v160 = v159;\n        v161 = false;\n    }\n    unsigned char v163 = v160;\n    int64_t v164 = (int64_t)\"blank\"; // 0x40bd00\n    int64_t v165 = v4; // 0x40bd00\n    int64_t v166 = 6; // 0x40bd00\n    if ((v158 >= v163 && !v161) == v158 < v163) {\n        int64_t v167 = (int64_t)*__ctype_b_loc() + 1;\n        if (a1 != 0) {\n            int64_t v168 = 0;\n            unsigned char v169; // 0x40c05b\n            unsigned char v170; // 0x40b8c0\n            int64_t * v171; // 0x40c070\n            if (*(char *)(2 * v168 + v167) % 2 != 0) {\n                // 0x40c05b\n                v169 = *(char *)(v168 + a1);\n                v170 = v169 % 64;\n                v171 = (int64_t *)((int64_t)(v169 / 8 & 24) + a2);\n                *v171 = (v170 == 0 ? 1 : 1 << (int64_t)v170) | *v171;\n            }\n            int64_t v172 = v168 + 1; // 0x40c07f\n            while (v168 != 255) {\n                // 0x40c054\n                v168 = v172;\n                if (*(char *)(2 * v168 + v167) % 2 != 0) {\n                    // 0x40c05b\n                    v169 = *(char *)(v168 + a1);\n                    v170 = v169 % 64;\n                    v171 = (int64_t *)((int64_t)(v169 / 8 & 24) + a2);\n                    *v171 = (v170 == 0 ? 1 : 1 << (int64_t)v170) | *v171;\n                }\n                // 0x40c074\n                v172 = v168 + 1;\n            }\n        } else {\n            int64_t v173 = 0;\n            int64_t * v174; // 0x40bd2e\n            if (*(char *)(2 * v173 + v167) % 2 != 0) {\n                // 0x40bd21\n                v174 = (int64_t *)(8 * (v173 >> 6) + a2);\n                *v174 = *v174 | 1 << v173 % 64;\n            }\n            int64_t v175 = v173 + 1; // 0x40bd3d\n            while (v173 != 255) {\n                // 0x40bd1a\n                v173 = v175;\n                if (*(char *)(2 * v173 + v167) % 2 != 0) {\n                    // 0x40bd21\n                    v174 = (int64_t *)(8 * (v173 >> 6) + a2);\n                    *v174 = *v174 | 1 << v173 % 64;\n                }\n                // 0x40bd32\n                v175 = v173 + 1;\n            }\n        }\n        // 0x40b9a6\n        return 0;\n    }\n    unsigned char v176 = *(char *)v165; // 0x40bd5b\n    char v177 = *(char *)v164; // 0x40bd5b\n    char v178 = v177; // 0x40bd5b\n    bool v179 = false; // 0x40bd5b\n    while (v176 == v177) {\n        int64_t v180 = v166 - 1; // 0x40bd5b\n        v164 += v30;\n        v165 += v30;\n        v166 = v180;\n        v178 = v176;\n        v179 = true;\n        if (v180 == 0) {\n            // break -> \n            break;\n        }\n        v176 = *(char *)v165;\n        v177 = *(char *)v164;\n        v178 = v177;\n        v179 = false;\n    }\n    unsigned char v181 = v178;\n    int64_t v182 = (int64_t)\"graph\"; // 0x40bd64\n    int64_t v183 = v4; // 0x40bd64\n    int64_t v184 = 6; // 0x40bd64\n    if ((v176 >= v181 && !v179) == v176 < v181) {\n        int64_t v185 = (int64_t)*__ctype_b_loc(); // 0x40bd76\n        if (a1 != 0) {\n            int64_t v186 = 0;\n            unsigned char v187; // 0x40c028\n            unsigned char v188; // 0x40b8c0\n            int64_t * v189; // 0x40c03d\n            if (*(char *)(2 * v186 + v185) % 2 != 0) {\n                // 0x40c028\n                v187 = *(char *)(v186 + a1);\n                v188 = v187 % 64;\n                v189 = (int64_t *)((int64_t)(v187 / 8 & 24) + a2);\n                *v189 = (v188 == 0 ? 1 : 1 << (int64_t)v188) | *v189;\n            }\n            int64_t v190 = v186 + 1; // 0x40c04b\n            while (v186 != 255) {\n                // 0x40c022\n                v186 = v190;\n                if (*(char *)(2 * v186 + v185) % 2 != 0) {\n                    // 0x40c028\n                    v187 = *(char *)(v186 + a1);\n                    v188 = v187 % 64;\n                    v189 = (int64_t *)((int64_t)(v187 / 8 & 24) + a2);\n                    *v189 = (v188 == 0 ? 1 : 1 << (int64_t)v188) | *v189;\n                }\n                // 0x40c041\n                v190 = v186 + 1;\n            }\n        } else {\n            int64_t v191 = 0;\n            int64_t * v192; // 0x40bd95\n            if (*(char *)(2 * v191 + v185) % 2 != 0) {\n                // 0x40bd88\n                v192 = (int64_t *)(8 * (v191 >> 6) + a2);\n                *v192 = *v192 | 1 << v191 % 64;\n            }\n            int64_t v193 = v191 + 1; // 0x40bda4\n            while (v191 != 255) {\n                // 0x40bd82\n                v191 = v193;\n                if (*(char *)(2 * v191 + v185) % 2 != 0) {\n                    // 0x40bd88\n                    v192 = (int64_t *)(8 * (v191 >> 6) + a2);\n                    *v192 = *v192 | 1 << v191 % 64;\n                }\n                // 0x40bd99\n                v193 = v191 + 1;\n            }\n        }\n        // 0x40b9a6\n        return 0;\n    }\n    unsigned char v194 = *(char *)v183; // 0x40be51\n    char v195 = *(char *)v182; // 0x40be51\n    char v196 = v195; // 0x40be51\n    bool v197 = false; // 0x40be51\n    while (v194 == v195) {\n        int64_t v198 = v184 - 1; // 0x40be51\n        v182 += v30;\n        v183 += v30;\n        v184 = v198;\n        v196 = v194;\n        v197 = true;\n        if (v198 == 0) {\n            // break -> \n            break;\n        }\n        v194 = *(char *)v183;\n        v195 = *(char *)v182;\n        v196 = v195;\n        v197 = false;\n    }\n    unsigned char v199 = v196;\n    if ((v194 >= v199 && !v197) == v194 < v199) {\n        int64_t v200 = (int64_t)*__ctype_b_loc(); // 0x40be68\n        if (a1 != 0) {\n            int64_t v201 = 0;\n            unsigned char v202; // 0x40bea8\n            unsigned char v203; // 0x40b8c0\n            int64_t * v204; // 0x40bebd\n            if (*(int16_t *)(2 * v201 + v200) < 0) {\n                // 0x40bea8\n                v202 = *(char *)(v201 + a1);\n                v203 = v202 % 64;\n                v204 = (int64_t *)((int64_t)(v202 / 8 & 24) + a2);\n                *v204 = (v203 == 0 ? 1 : 1 << (int64_t)v203) | *v204;\n            }\n            int64_t v205 = v201 + 1; // 0x40becb\n            while (v201 != 255) {\n                // 0x40bea1\n                v201 = v205;\n                if (*(int16_t *)(2 * v201 + v200) < 0) {\n                    // 0x40bea8\n                    v202 = *(char *)(v201 + a1);\n                    v203 = v202 % 64;\n                    v204 = (int64_t *)((int64_t)(v202 / 8 & 24) + a2);\n                    *v204 = (v203 == 0 ? 1 : 1 << (int64_t)v203) | *v204;\n                }\n                // 0x40bec1\n                v205 = v201 + 1;\n            }\n        } else {\n            int64_t v206 = 0;\n            int64_t * v207; // 0x40be84\n            if (*(int16_t *)(2 * v206 + v200) < 0) {\n                // 0x40be77\n                v207 = (int64_t *)(8 * (v206 >> 6) + a2);\n                *v207 = *v207 | 1 << v206 % 64;\n            }\n            int64_t v208 = v206 + 1; // 0x40be93\n            while (v206 != 255) {\n                // 0x40be70\n                v206 = v208;\n                if (*(int16_t *)(2 * v206 + v200) < 0) {\n                    // 0x40be77\n                    v207 = (int64_t *)(8 * (v206 >> 6) + a2);\n                    *v207 = *v207 | 1 << v206 % 64;\n                }\n                // 0x40be88\n                v208 = v206 + 1;\n            }\n        }\n        // 0x40b9a6\n        return 0;\n    }\n    // 0x40bed2\n    if (strcmp(name, \"punct\") == 0) {\n        int64_t v209 = (int64_t)*__ctype_b_loc(); // 0x40beef\n        if (a1 != 0) {\n            int64_t v210 = 0;\n            unsigned char v211; // 0x40bf2d\n            unsigned char v212; // 0x40b8c0\n            int64_t * v213; // 0x40bf42\n            if ((*(char *)(2 * v210 + v209) & 4) != 0) {\n                // 0x40bf2d\n                v211 = *(char *)(v210 + a1);\n                v212 = v211 % 64;\n                v213 = (int64_t *)((int64_t)(v211 / 8 & 24) + a2);\n                *v213 = (v212 == 0 ? 1 : 1 << (int64_t)v212) | *v213;\n            }\n            int64_t v214 = v210 + 1; // 0x40bf50\n            while (v210 != 255) {\n                // 0x40bf27\n                v210 = v214;\n                if ((*(char *)(2 * v210 + v209) & 4) != 0) {\n                    // 0x40bf2d\n                    v211 = *(char *)(v210 + a1);\n                    v212 = v211 % 64;\n                    v213 = (int64_t *)((int64_t)(v211 / 8 & 24) + a2);\n                    *v213 = (v212 == 0 ? 1 : 1 << (int64_t)v212) | *v213;\n                }\n                // 0x40bf46\n                v214 = v210 + 1;\n            }\n        } else {\n            int64_t v215 = 0;\n            int64_t * v216; // 0x40bf0a\n            if ((*(char *)(2 * v215 + v209) & 4) != 0) {\n                // 0x40befd\n                v216 = (int64_t *)(8 * (v215 >> 6) + a2);\n                *v216 = *v216 | 1 << v215 % 64;\n            }\n            int64_t v217 = v215 + 1; // 0x40bf19\n            while (v215 != 255) {\n                // 0x40bef7\n                v215 = v217;\n                if ((*(char *)(2 * v215 + v209) & 4) != 0) {\n                    // 0x40befd\n                    v216 = (int64_t *)(8 * (v215 >> 6) + a2);\n                    *v216 = *v216 | 1 << v215 % 64;\n                }\n                // 0x40bf0e\n                v217 = v215 + 1;\n            }\n        }\n        // 0x40b9a6\n        return 0;\n    }\n    // 0x40bf57\n    if (strcmp(name, \"xdigit\") != 0) {\n        // 0x40b9a6\n        return 4;\n    }\n    int64_t v218 = (int64_t)*__ctype_b_loc() + 1;\n    if (a1 == 0) {\n        int64_t v219 = 0;\n        int64_t * v220; // 0x40bf90\n        if ((*(char *)(2 * v219 + v218) & 16) != 0) {\n            // 0x40bf83\n            v220 = (int64_t *)(8 * (v219 >> 6) + a2);\n            *v220 = *v220 | 1 << v219 % 64;\n        }\n        int64_t v221 = v219 + 1; // 0x40bf9f\n        while (v219 != 255) {\n            // 0x40bf7c\n            v219 = v221;\n            if ((*(char *)(2 * v219 + v218) & 16) != 0) {\n                // 0x40bf83\n                v220 = (int64_t *)(8 * (v219 >> 6) + a2);\n                *v220 = *v220 | 1 << v219 % 64;\n            }\n            // 0x40bf94\n            v221 = v219 + 1;\n        }\n        // 0x40b9a6\n        return 0;\n    }\n    int64_t v222 = 0;\n    unsigned char v223; // 0x40bfb4\n    unsigned char v224; // 0x40b8c0\n    int64_t * v225; // 0x40bfc9\n    if ((*(char *)(2 * v222 + v218) & 16) != 0) {\n        // 0x40bfb4\n        v223 = *(char *)(v222 + a1);\n        v224 = v223 % 64;\n        v225 = (int64_t *)((int64_t)(v223 / 8 & 24) + a2);\n        *v225 = (v224 == 0 ? 1 : 1 << (int64_t)v224) | *v225;\n    }\n    int64_t v226 = v222 + 1; // 0x40bfd7\n    while (v222 != 255) {\n        // 0x40bfad\n        v222 = v226;\n        if ((*(char *)(2 * v222 + v218) & 16) != 0) {\n            // 0x40bfb4\n            v223 = *(char *)(v222 + a1);\n            v224 = v223 % 64;\n            v225 = (int64_t *)((int64_t)(v223 / 8 & 24) + a2);\n            *v225 = (v224 == 0 ? 1 : 1 << (int64_t)v224) | *v225;\n        }\n        // 0x40bfcd\n        v226 = v222 + 1;\n    }\n    // 0x40b9a6\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40c090",
            "funcStartAddr": "40c090",
            "funcEndAddr": "40c2c5",
            "decompiledFuncCode": "int64_t function_40c090(int64_t a1, int64_t a2, char * a3, int64_t * a4, int64_t a5, int64_t a6) {\n    int64_t v1 = 0; // bp-96, 0x40c0bd\n    int64_t * mem = calloc(32, 1); // 0x40c0c6\n    if (mem == NULL) {\n        // 0x40c260\n        *(int32_t *)a6 = 12;\n        // 0x40c239\n        return 0;\n    }\n    int64_t * mem2 = calloc(80, 1); // 0x40c0e1\n    if (mem2 == NULL) {\n        // 0x40c280\n        free(mem);\n        *(int32_t *)a6 = 12;\n        // 0x40c239\n        return 0;\n    }\n    int64_t v2 = (int64_t)mem; // 0x40c0c6\n    int64_t v3 = (int64_t)mem2; // 0x40c0e1\n    char * v4 = (char *)(v3 + 32); // 0x40c0f6\n    unsigned char v5 = (char)a5; // 0x40c0fa\n    *v4 = *v4 & -2 | v5 % 2;\n    int64_t v6 = function_40b8c0(a2, v2, v3 + 24, v3 + 72, &v1, (int64_t)a3, 0); // 0x40c123\n    int32_t v7 = v6; // 0x40c12a\n    if (v7 != 0) {\n        // 0x40c2a0\n        free(mem);\n        function_407690(v3);\n        *(int32_t *)a6 = v7;\n        // 0x40c239\n        return 0;\n    }\n    // 0x40c132\n    int64_t v8; // 0x40c090\n    char v9 = *(char *)&v8; // 0x40c132\n    int64_t v10 = v9; // 0x40c132\n    v8 = v10;\n    v8 = v10;\n    int64_t v11 = (int64_t)a4; // 0x40c13e\n    if (v9 != 0) {\n        int64_t v12 = v8;\n        v11++;\n        char v13 = *(char *)v11; // 0x40c16d\n        v8 = v13;\n        int64_t * v14 = (int64_t *)(8 * ((v12 >= 0 ? v12 : v12 + 63) >> 6) + v2); // 0x40c172\n        *v14 = *v14 | 1 << v12 % 64;\n        while (v13 != 0) {\n            v12 = v8;\n            v11++;\n            v13 = *(char *)v11;\n            v8 = v13;\n            v14 = (int64_t *)(8 * ((v12 >= 0 ? v12 : v12 + 63) >> 6) + v2);\n            *v14 = *v14 | 1 << v12 % 64;\n        }\n    }\n    if (v5 != 0) {\n        int64_t v15 = v2;\n        int64_t * v16 = (int64_t *)v15; // 0x40c186\n        *v16 = -1 - *v16;\n        int64_t v17 = v15 + 8; // 0x40c190\n        while (v2 + 24 != v15) {\n            // 0x40c186\n            v15 = v17;\n            v16 = (int64_t *)v15;\n            *v16 = -1 - *v16;\n            v17 = v15 + 8;\n        }\n    }\n    int32_t * v18 = (int32_t *)(a1 + 180); // 0x40c192\n    if (*v18 >= 2) {\n        int64_t v19 = *(int64_t *)(a1 + 120); // 0x40c19b\n        v8 = v19;\n        *mem = *mem & *(int64_t *)v19;\n        int64_t v20 = 0; // 0x40c1a9\n        v20 += 8;\n        int64_t * v21 = (int64_t *)(v20 + v2); // 0x40c1a5\n        *v21 = *v21 & *(int64_t *)(v20 + v19);\n        while (v20 != 24) {\n            // 0x40c1a1\n            v20 += 8;\n            v21 = (int64_t *)(v20 + v2);\n            *v21 = *v21 & *(int64_t *)(v20 + v8);\n        }\n    }\n    int64_t v22 = a1 + 112; // 0x40c1b3\n    int64_t v23 = a1 + 128; // 0x40c1b7\n    v8 = 0;\n    int64_t v24; // bp-88, 0x40c090\n    int64_t v25 = &v24; // 0x40c1c2\n    v24 = v2;\n    int64_t result = function_408ca0(v22, v23, 0, 0, v25); // 0x40c1d7\n    if (result != 0) {\n        // 0x40c1e4\n        if (*v18 < 2) {\n            // 0x40c270\n            function_407690(v3);\n            // 0x40c239\n            return result;\n        }\n        char * v26 = (char *)(a1 + 176); // 0x40c1f1\n        *v26 = *v26 | 2;\n        v24 = v3;\n        int64_t v27 = function_408ca0(v22, v23, 0, 0, v25); // 0x40c211\n        if (v27 != 0) {\n            // 0x40c21b\n            int64_t v28; // bp-72, 0x40c090\n            int64_t result2 = function_408ca0(v22, v23, (int32_t)result, (int32_t)v27, (int64_t)&v28); // 0x40c231\n            // 0x40c239\n            return result2;\n        }\n    }\n    // 0x40c250\n    free(mem);\n    function_407690(v3);\n    // 0x40c260\n    *(int32_t *)a6 = 12;\n    // 0x40c239\n    return 0;\n}\n"
        },
        {
            "funcName": "function_40c2d0",
            "funcStartAddr": "40c2d0",
            "funcEndAddr": "40c7a8",
            "decompiledFuncCode": "int64_t function_40c2d0(int64_t result, int64_t result2, int64_t a3, int64_t a4) {\n    int64_t v1 = a4;\n    int32_t * v2 = (int32_t *)(result + 180); // 0x40c2e7\n    int32_t v3 = 0; // 0x40c2f2\n    if (*v2 == 1) {\n        // 0x40c2f4\n        v3 = (int32_t)(*(int64_t *)(result + 24) / 0x400000) % 2;\n    }\n    // 0x40c303\n    if (result2 < 1) {\n        // 0x40c4c3\n        return result;\n    }\n    char * v4 = (char *)(result + 26);\n    int64_t * v5 = (int64_t *)(result + 16);\n    char wstr; // bp-312, 0x40c2d0\n    int64_t v6 = &wstr;\n    char ps; // bp-320, 0x40c2d0\n    int64_t v7 = &ps;\n    int64_t v8 = a3; // 0x40c321\n    int64_t v9 = 0; // 0x40c321\n    int64_t v10 = result; // 0x40c321\n    int64_t v11; // 0x40c2d0\n    int64_t v12; // 0x40c2d0\n    int64_t v13; // 0x40c2d0\n    int64_t v14; // 0x40c2d0\n    int64_t v15; // 0x40c2d0\n    int64_t v16; // 0x40c2d0\n    unsigned char v17; // 0x40c384\n    int64_t v18; // 0x40c4d9\n    while (true) {\n      lab_0x40c361_2:\n        // 0x40c361\n        v13 = v10;\n        v11 = v9;\n        int64_t v19 = *(int64_t *)(8 * v11 + v8); // 0x40c369\n        v1 = v13;\n        int64_t v20 = 16 * v19; // 0x40c377\n        v16 = v20 + v13;\n        v17 = *(char *)(v16 + 8);\n        if (v17 != 1) {\n            int64_t v21 = v17; // 0x40c384\n            char * v22 = NULL; // 0x40c2d0\n            int64_t v23 = v13; // 0x40c2d0\n            switch (v17) {\n                case 3: {\n                    int64_t v24 = (int64_t)v22; // 0x40c628\n                    int64_t v25 = *(int64_t *)(*(int64_t *)(v23 + v20) + v24); // 0x40c62d\n                    int64_t v26 = 0; // 0x40c639\n                    int64_t v27 = 8 * v24;\n                    int64_t v28 = v23;\n                    int64_t v29 = v28; // 0x40c644\n                    char * v30; // 0x40c2d0\n                    char * v31; // 0x40c2d0\n                    int64_t v32; // 0x40c654\n                    int32_t v33; // 0x40c66b\n                    if ((1 << v26 % 64 & v25) != 0) {\n                        // 0x40c646\n                        v31 = (char *)(v27 + a4);\n                        *v31 = 1;\n                        v29 = v28;\n                        if (v3 != 0) {\n                            // 0x40c654\n                            v32 = v27 + 128;\n                            v30 = v31;\n                            if ((int32_t)v32 < 384) {\n                                // 0x40c663\n                                v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                v30 = (char *)((int64_t)v33 + a4);\n                            }\n                            // 0x40c672\n                            *v30 = 1;\n                            v29 = v32 & 0xffffffff;\n                        }\n                    }\n                    int64_t v34 = v29;\n                    int64_t v35 = v27 + 1; // 0x40c679\n                    v26 = v26 + 1 & 0xffffffff;\n                    while (8 * (int32_t)v24 + 64 != (int32_t)v35) {\n                        // 0x40c640\n                        v27 = v35;\n                        v28 = v34;\n                        v29 = v28;\n                        if ((1 << v26 % 64 & v25) != 0) {\n                            // 0x40c646\n                            v31 = (char *)(v27 + a4);\n                            *v31 = 1;\n                            v29 = v28;\n                            if (v3 != 0) {\n                                // 0x40c654\n                                v32 = v27 + 128;\n                                v30 = v31;\n                                if ((int32_t)v32 < 384) {\n                                    // 0x40c663\n                                    v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                    v30 = (char *)((int64_t)v33 + a4);\n                                }\n                                // 0x40c672\n                                *v30 = 1;\n                                v29 = v32 & 0xffffffff;\n                            }\n                        }\n                        // 0x40c675\n                        v34 = v29;\n                        v35 = v27 + 1;\n                        v26 = v26 + 1 & 0xffffffff;\n                    }\n                    // 0x40c683\n                    v14 = v21;\n                    v15 = v16;\n                    v12 = v34;\n                    while (v22 != (char *)24) {\n                        // 0x40c698\n                        v1 = v34;\n                        v22 = (char *)(v24 + 8);\n                        v24 = (int64_t)v22;\n                        v25 = *(int64_t *)(*(int64_t *)(v34 + v20) + v24);\n                        v26 = 0;\n                        v27 = 8 * v24;\n                        v28 = v34;\n                        v29 = v28;\n                        if ((1 << v26 % 64 & v25) != 0) {\n                            // 0x40c646\n                            v31 = (char *)(v27 + a4);\n                            *v31 = 1;\n                            v29 = v28;\n                            if (v3 != 0) {\n                                // 0x40c654\n                                v32 = v27 + 128;\n                                v30 = v31;\n                                if ((int32_t)v32 < 384) {\n                                    // 0x40c663\n                                    v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                    v30 = (char *)((int64_t)v33 + a4);\n                                }\n                                // 0x40c672\n                                *v30 = 1;\n                                v29 = v32 & 0xffffffff;\n                            }\n                        }\n                        // 0x40c675\n                        v34 = v29;\n                        v35 = v27 + 1;\n                        v26 = v26 + 1 & 0xffffffff;\n                        while (8 * (int32_t)v24 + 64 != (int32_t)v35) {\n                            // 0x40c640\n                            v27 = v35;\n                            v28 = v34;\n                            v29 = v28;\n                            if ((1 << v26 % 64 & v25) != 0) {\n                                // 0x40c646\n                                v31 = (char *)(v27 + a4);\n                                *v31 = 1;\n                                v29 = v28;\n                                if (v3 != 0) {\n                                    // 0x40c654\n                                    v32 = v27 + 128;\n                                    v30 = v31;\n                                    if ((int32_t)v32 < 384) {\n                                        // 0x40c663\n                                        v33 = *(int32_t *)(4 * v27 + (int64_t)*__ctype_tolower_loc());\n                                        v30 = (char *)((int64_t)v33 + a4);\n                                    }\n                                    // 0x40c672\n                                    *v30 = 1;\n                                    v29 = v32 & 0xffffffff;\n                                }\n                            }\n                            // 0x40c675\n                            v34 = v29;\n                            v35 = v27 + 1;\n                            v26 = v26 + 1 & 0xffffffff;\n                        }\n                        // 0x40c683\n                        v14 = v21;\n                        v15 = v16;\n                        v12 = v34;\n                    }\n                    goto lab_0x40c34f;\n                }\n                case 6: {\n                    // 0x40c4d5\n                    v18 = *(int64_t *)v16;\n                    if (*v2 < 2) {\n                        goto lab_0x40c506;\n                    } else {\n                        // 0x40c4e5\n                        if (*(int64_t *)(v18 + 72) != 0) {\n                            goto lab_0x40c5cc;\n                        } else {\n                            // 0x40c4f0\n                            if (*(char *)(v18 + 32) % 2 != 0) {\n                                goto lab_0x40c5cc;\n                            } else {\n                                // 0x40c4fb\n                                if (*(int64_t *)(v18 + 64) != 0) {\n                                    goto lab_0x40c5cc;\n                                } else {\n                                    goto lab_0x40c506;\n                                }\n                            }\n                        }\n                    }\n                }\n                default: {\n                    int64_t v36 = v21 & 253; // 0x40c33a\n                    if (v36 == 5) {\n                        // break -> 0x40c6a4\n                        break;\n                    }\n                    // 0x40c346\n                    v14 = v36;\n                    v15 = v16;\n                    v12 = v13;\n                    if (v17 == 2) {\n                        int128_t v37 = __asm_movdqa(g16); // 0x40c720\n                        __asm_movups(*(int128_t *)&v1, v37);\n                        __asm_movups(*(int128_t *)(a4 + 16), v37);\n                        __asm_movups(*(int128_t *)(a4 + 32), v37);\n                        __asm_movups(*(int128_t *)(a4 + 48), v37);\n                        __asm_movups(*(int128_t *)(a4 + 64), v37);\n                        __asm_movups(*(int128_t *)(a4 + 80), v37);\n                        __asm_movups(*(int128_t *)(a4 + 96), v37);\n                        __asm_movups(*(int128_t *)(a4 + 112), v37);\n                        __asm_movups(*(int128_t *)(a4 + 128), v37);\n                        __asm_movups(*(int128_t *)(a4 + 144), v37);\n                        __asm_movups(*(int128_t *)(a4 + 160), v37);\n                        __asm_movups(*(int128_t *)(a4 + 176), v37);\n                        __asm_movups(*(int128_t *)(a4 + 192), v37);\n                        __asm_movups(*(int128_t *)(a4 + 208), v37);\n                        __asm_movups(*(int128_t *)(a4 + 224), v37);\n                        __asm_movups(*(int128_t *)(a4 + 240), v37);\n                        goto lab_0x40c78f;\n                    }\n                    goto lab_0x40c34f;\n                }\n            }\n        } else {\n            char * v38 = (char *)v16; // 0x40c38f\n            int64_t v39 = (int64_t)*v38; // 0x40c38f\n            *(char *)(v39 + a4) = 1;\n            if (v3 != 0) {\n                int32_t v40 = *(int32_t *)(4 * v39 + (int64_t)*__ctype_tolower_loc()); // 0x40c3ae\n                *(char *)((int64_t)v40 + a4) = 1;\n            }\n            // 0x40c3b7\n            v14 = v39;\n            v15 = v16;\n            v12 = v13;\n            if ((*v4 & 64) == 0) {\n                goto lab_0x40c34f;\n            } else {\n                // 0x40c3c2\n                v14 = v39;\n                v15 = v16;\n                v12 = v13;\n                if (*v2 < 2) {\n                    goto lab_0x40c34f;\n                } else {\n                    // 0x40c3cf\n                    v1 = v20;\n                    wstr = *v38;\n                    int64_t v41 = v19 + 1; // 0x40c3e2\n                    int64_t v42 = 1; // 0x40c3ea\n                    if (*v5 > v41) {\n                        // 0x40c3f0\n                        v42 = 1;\n                        if ((*(int32_t *)(v16 + 24) & 0x2000ff) == 0x200001) {\n                            int64_t v43 = v41; // 0x40c43e\n                            int64_t v44; // bp-311, 0x40c2d0\n                            int64_t v45 = &v44; // 0x40c2d0\n                            int64_t v46 = v45 + 1; // 0x40c43a\n                            v43++;\n                            *(char *)v45 = *(char *)(v16 + 16);\n                            while (*v5 > v43) {\n                                int64_t v47 = 16 * v43 + v13; // 0x40c423\n                                v45 = v46;\n                                if ((*(int32_t *)(v47 + 8) & 0x2000ff) != 0x200001) {\n                                    // break -> 0x40c44f\n                                    break;\n                                }\n                                v46 = v45 + 1;\n                                v43++;\n                                *(char *)v45 = *(char *)v47;\n                            }\n                            // 0x40c44f\n                            v42 = v46 - v6;\n                        }\n                    }\n                    // 0x40c45a\n                    ps = 0;\n                    int32_t wc; // bp-324, 0x40c2d0\n                    int64_t v48 = function_406400(&wc, v6, v42); // 0x40c475\n                    v14 = v42;\n                    v15 = v6;\n                    v12 = &wc;\n                    if (v48 != v42) {\n                        goto lab_0x40c34f;\n                    } else {\n                        uint32_t wc2 = towlower(wc); // 0x40c487\n                        int64_t v49 = wc2; // 0x40c496\n                        int32_t v50 = wcrtomb(&wstr, wc2, (struct _TYPEDEF___mbstate_t *)&ps); // 0x40c498\n                        v14 = v7;\n                        v15 = v49;\n                        v12 = v6;\n                        if (v50 == -1) {\n                            goto lab_0x40c34f;\n                        } else {\n                            int64_t v51 = v11 + 1; // 0x40c4ac\n                            *(char *)((int64_t)wstr + a4) = 1;\n                            v8 = v7;\n                            v9 = v51;\n                            v10 = v6;\n                            if (v51 >= v49) {\n                                // 0x40c4c3\n                                return result2;\n                            }\n                            goto lab_0x40c361_2;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (v17 != 2) {\n        // 0x40c4c3\n    }\n  lab_0x40c34f:;\n    int64_t v52 = v11 + 1; // 0x40c354\n    v8 = v14;\n    v9 = v52;\n    v10 = v12;\n    if (v52 >= v15) {\n        // 0x40c4c3\n        return result2;\n    }\n    goto lab_0x40c361_2;\n  lab_0x40c506:;\n    int64_t * v53 = (int64_t *)(v18 + 40); // 0x40c509\n    int64_t v54 = *v53; // 0x40c509\n    v14 = 6;\n    v15 = v16;\n    v12 = v13;\n    if (v54 >= 0 == (v54 != 0)) {\n        int64_t * v55 = (int64_t *)v18; // 0x40c52f\n        int64_t v56 = 0; // 0x40c518\n        ps = 0;\n        int64_t v57 = 4 * v56; // 0x40c53d\n        uint32_t wc3 = *(int32_t *)(*v55 + v57); // 0x40c545\n        int32_t v58 = wcrtomb(&wstr, wc3, (struct _TYPEDEF___mbstate_t *)&ps); // 0x40c549\n        int64_t v59 = v7; // 0x40c552\n        int32_t v60; // 0x40c575\n        int64_t v61; // 0x40c554\n        if (v58 != -1) {\n            // 0x40c554\n            v61 = wstr;\n            *(char *)(v61 + a4) = 1;\n            v59 = v61;\n            if (v3 != 0) {\n                // 0x40c568\n                v60 = *(int32_t *)(4 * v61 + (int64_t)*__ctype_tolower_loc());\n                *(char *)((int64_t)v60 + a4) = 1;\n                v59 = v61;\n            }\n        }\n        int64_t v62 = wc3; // 0x40c545\n        int64_t v63 = v59;\n        int64_t v64 = v63; // 0x40c587\n        int64_t v65 = v62; // 0x40c587\n        uint32_t wc4; // 0x40c59d\n        int64_t v66; // 0x40c5ac\n        int32_t v67; // 0x40c5ae\n        if ((*v4 & 64) != 0) {\n            // 0x40c589\n            v64 = v63;\n            v65 = v62;\n            if (*v2 >= 2) {\n                // 0x40c596\n                wc4 = towlower(*(int32_t *)(*v55 + v57));\n                v66 = wc4;\n                v67 = wcrtomb(&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps);\n                v64 = v7;\n                v65 = v66;\n                if (v67 != -1) {\n                    // 0x40c5bd\n                    *(char *)((int64_t)wstr + a4) = 1;\n                    v64 = v7;\n                    v65 = v66;\n                }\n            }\n        }\n        // 0x40c518\n        v56++;\n        v14 = v64;\n        v15 = v65;\n        v12 = v6;\n        while (v56 < *v53) {\n            // 0x40c526\n            ps = 0;\n            v57 = 4 * v56;\n            wc3 = *(int32_t *)(*v55 + v57);\n            v58 = wcrtomb(&wstr, wc3, (struct _TYPEDEF___mbstate_t *)&ps);\n            v59 = v7;\n            if (v58 != -1) {\n                // 0x40c554\n                v61 = wstr;\n                *(char *)(v61 + a4) = 1;\n                v59 = v61;\n                if (v3 != 0) {\n                    // 0x40c568\n                    v60 = *(int32_t *)(4 * v61 + (int64_t)*__ctype_tolower_loc());\n                    *(char *)((int64_t)v60 + a4) = 1;\n                    v59 = v61;\n                }\n            }\n            // 0x40c57e\n            v62 = wc3;\n            v63 = v59;\n            v64 = v63;\n            v65 = v62;\n            if ((*v4 & 64) != 0) {\n                // 0x40c589\n                v64 = v63;\n                v65 = v62;\n                if (*v2 >= 2) {\n                    // 0x40c596\n                    wc4 = towlower(*(int32_t *)(*v55 + v57));\n                    v66 = wc4;\n                    v67 = wcrtomb(&wstr, wc4, (struct _TYPEDEF___mbstate_t *)&ps);\n                    v64 = v7;\n                    v65 = v66;\n                    if (v67 != -1) {\n                        // 0x40c5bd\n                        *(char *)((int64_t)wstr + a4) = 1;\n                        v64 = v7;\n                        v65 = v66;\n                    }\n                }\n            }\n            // 0x40c518\n            v56++;\n            v14 = v64;\n            v15 = v65;\n            v12 = v6;\n        }\n    }\n    goto lab_0x40c34f;\n    // 0x40c361\n    goto lab_0x40c361_2;\n  lab_0x40c5cc:\n    // 0x40c5cc\n    ps = 0;\n    wstr = 0;\n    if (function_406400(NULL, v7, 1) == -2) {\n        // 0x40c5fd\n        *(char *)((int64_t)ps + a4) = 1;\n    }\n    char v68 = ps + 1; // 0x40c607\n    ps = v68;\n    v14 = 1;\n    v15 = v7;\n    v12 = 0;\n    while (v68 != 0) {\n        // 0x40c5d8\n        wstr = 0;\n        if (function_406400(NULL, v7, 1) == -2) {\n            // 0x40c5fd\n            *(char *)((int64_t)ps + a4) = 1;\n        }\n        // 0x40c607\n        v68 = ps + 1;\n        ps = v68;\n        v14 = 1;\n        v15 = v7;\n        v12 = 0;\n    }\n    goto lab_0x40c34f;\n  lab_0x40c78f:;\n    char * v69 = (char *)(result + 56); // 0x40c794\n    *v69 = *v69 | 1;\n    // 0x40c4c3\n    return result;\n}\n"
        },
        {
            "funcName": "function_40c7b0",
            "funcStartAddr": "40c7b0",
            "funcEndAddr": "40ca34",
            "decompiledFuncCode": "int64_t function_40c7b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = 16 * a3 + a1; // 0x40c7b8\n    char v2 = *(char *)(v1 + 8); // 0x40c7c2\n    if (v2 == 7) {\n        int64_t v3 = *(int64_t *)(a4 + 8); // 0x40c8d8\n        int64_t v4 = v3 + a5; // 0x40c8dc\n        unsigned char v5 = *(char *)v4; // 0x40c8dc\n        if (v5 < 194) {\n            // 0x40c800\n            return 0;\n        }\n        uint64_t v6 = *(int64_t *)(a4 + 88); // 0x40c8ea\n        uint64_t v7 = a5 + 1;\n        if (v7 >= v6) {\n            // 0x40c800\n            return 0;\n        }\n        int64_t v8 = v3 + v7;\n        unsigned char v9 = *(char *)v8; // 0x40c8fb\n        if (v5 < 224) {\n            // 0x40c9d3\n            if (v9 == -65 || (v9 ^ -128) < 63) {\n                // 0x40c800\n                return 2;\n            }\n            // 0x40c800\n            return 0;\n        }\n        int64_t v10; // 0x40c7b0\n        if (v5 < 240) {\n            // 0x40c913\n            v10 = 3;\n            if (v5 == -32 == v9 < 160) {\n                // 0x40c800\n                return 0;\n            }\n        } else {\n            if (v5 < 248) {\n                // 0x40c9b5\n                v10 = 4;\n                if (v5 == -16 == v9 < 144) {\n                    // 0x40c800\n                    return 0;\n                }\n            } else {\n                if (v5 < 252) {\n                    // 0x40c9ef\n                    v10 = 5;\n                    if (v5 == -8 == v9 < 136) {\n                        // 0x40c800\n                        return 0;\n                    }\n                } else {\n                    if (v5 >= 254) {\n                        // 0x40c800\n                        return 0;\n                    }\n                    // 0x40ca16\n                    v10 = 6;\n                    if (v5 == -4 == v9 < 132) {\n                        // 0x40c800\n                        return 0;\n                    }\n                }\n            }\n        }\n        // 0x40c92c\n        if (v6 < v10 + a5) {\n            // 0x40c800\n            return 0;\n        }\n        // 0x40c939\n        if (v9 != -65 && (v9 ^ -128) >= 63) {\n            // 0x40c800\n            return 0;\n        }\n        int64_t v11 = v8; // 0x40c95e\n        v11++;\n        while (v10 + v4 != v11) {\n            char v12 = *(char *)v11;\n            if (v12 != -65 && (v12 ^ -128) >= 63) {\n                // 0x40c800\n                return 0;\n            }\n            v11++;\n        }\n        // 0x40c800\n        return v10 & 0xffffffff;\n    }\n    // 0x40c7d1\n    if (*(int32_t *)(a4 + 144) == 1) {\n        // 0x40c800\n        return 0;\n    }\n    int64_t v13 = function_407fe0(a4, a5); // 0x40c7e6\n    int64_t v14 = v13 & 0xffffffff; // 0x40c7eb\n    if (v2 == 5) {\n        if ((int32_t)v13 < 2) {\n            // 0x40c800\n            return 0;\n        }\n        if ((a5 & 64) == 0) {\n            // 0x40c81c\n            if (*(char *)(*(int64_t *)(a4 + 8) + a5) == 10) {\n                // 0x40c800\n                return 0;\n            }\n        }\n        // 0x40c827\n        if ((char)a5 > -1) {\n            // 0x40c800\n            return v14 & 0xffffffff;\n        }\n        // 0x40c82b\n        if (*(char *)(*(int64_t *)(a4 + 8) + a5) == 0) {\n            // 0x40c800\n            return 0;\n        }\n        // 0x40c800\n        return v14 & 0xffffffff;\n    }\n    if (v2 == 6 != (int32_t)v13 > 1) {\n        // 0x40c800\n        return 0;\n    }\n    int64_t v15 = *(int64_t *)v1; // 0x40c840\n    int64_t * v16 = (int64_t *)(v15 + 64); // 0x40c843\n    int64_t v17 = *v16; // 0x40c843\n    int64_t v18 = *(int64_t *)(v15 + 40); // 0x40c847\n    if (v17 != 0) {\n        goto lab_0x40c85d;\n    } else {\n        // 0x40c850\n        if ((*(int64_t *)(v15 + 72) || v18) == 0) {\n            goto lab_0x40c99d;\n        } else {\n            goto lab_0x40c85d;\n        }\n    }\n  lab_0x40c8c2_2:\n    // 0x40c8c2\n    if (*(char *)(v15 + 32) % 2 == 0) {\n        // 0x40c800\n        return v14 & 0xffffffff;\n    }\n    // 0x40c800\n    return 0;\n  lab_0x40c85d:;\n    uint32_t wc = *(int32_t *)(*(int64_t *)(a4 + 16) + 4 * a5); // 0x40c861\n    if (v18 < 1) {\n        goto lab_0x40c88f;\n    } else {\n        int64_t v19 = *(int64_t *)v15; // 0x40c86a\n        if (*(int32_t *)v19 == wc) {\n            goto lab_0x40c8c2_2;\n        } else {\n            int64_t v20 = 1; // 0x40c886\n            while (v18 != v20) {\n                // 0x40c880\n                if (*(int32_t *)(4 * v20 + v19) == wc) {\n                    goto lab_0x40c8c2_2;\n                }\n                v20++;\n            }\n            goto lab_0x40c88f;\n        }\n    }\n  lab_0x40c88f:;\n    int64_t * v21 = (int64_t *)(v15 + 72); // 0x40c88f\n    int64_t v22 = v17; // 0x40c896\n    if (*v21 < 1) {\n        goto lab_0x40c96c;\n    } else {\n        int64_t v23 = 0; // 0x40c8a0\n        int64_t v24 = *(int64_t *)(v15 + 24); // 0x40c8ae\n        while (iswctype(wc, (int32_t)*(int64_t *)(v24 + 8 * v23)) == 0) {\n            // 0x40c8a0\n            v23++;\n            if (v23 >= *v21) {\n                // 0x40c968\n                v22 = *v16;\n                goto lab_0x40c96c;\n            }\n            v24 = *(int64_t *)(v15 + 24);\n        }\n        goto lab_0x40c8c2_2;\n    }\n  lab_0x40c99d:\n    // 0x40c99d\n    if (*(char *)(v15 + 32) % 2 != 0) {\n        // 0x40c800\n        return v14 & 0xffffffff;\n    }\n    // 0x40c800\n    return 0;\n  lab_0x40c96c:\n    // 0x40c96c\n    if (v22 >= 1) {\n        int64_t v25 = 0; // 0x40c977\n        int64_t v26 = 4 * v25; // 0x40c980\n        if (*(int32_t *)(v26 + *(int64_t *)(v15 + 8)) <= wc) {\n            // 0x40c986\n            if (*(int32_t *)(*(int64_t *)(v15 + 16) + v26) >= wc) {\n                goto lab_0x40c8c2_2;\n            }\n        }\n        // 0x40c994\n        v25++;\n        while (v25 != v22) {\n            // 0x40c980\n            v26 = 4 * v25;\n            if (*(int32_t *)(v26 + *(int64_t *)(v15 + 8)) <= wc) {\n                // 0x40c986\n                if (*(int32_t *)(*(int64_t *)(v15 + 16) + v26) >= wc) {\n                    goto lab_0x40c8c2_2;\n                }\n            }\n            // 0x40c994\n            v25++;\n        }\n    }\n    goto lab_0x40c99d;\n}\n"
        },
        {
            "funcName": "function_40ca40",
            "funcStartAddr": "40ca40",
            "funcEndAddr": "40d15f",
            "decompiledFuncCode": "int64_t function_40ca40(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    // 0x40ca40\n    int128_t v1; // 0x40ca40\n    int128_t v2 = v1;\n    int64_t v3 = *(int64_t *)(a1 + 152); // 0x40ca61\n    int64_t * v4 = (int64_t *)(a2 + 8); // 0x40ca68\n    int64_t v5 = *v4; // 0x40ca68\n    int64_t v6 = *(int64_t *)(*(int64_t *)v3 + 16 * a3); // 0x40ca79\n    int32_t * v7 = (int32_t *)(a1 + 224); // 0x40ca8b\n    int32_t result = 0; // bp-128, 0x40ca92\n    int64_t v8 = (int64_t)*v7 + a6; // 0x40ca9a\n    int64_t * v9; // 0x40ca40\n    int64_t v10; // 0x40ca40\n    if (v8 < v5) {\n        // 0x40ca40\n        v9 = (int64_t *)(a2 + 16);\n        v10 = a2;\n    } else {\n        int64_t v11 = v8 + 1; // 0x40d090\n        if (0x7fffffffffffffff - v5 < v11) {\n            // 0x40cf06\n            return 12;\n        }\n        uint64_t v12 = v11 + v5; // 0x40d0b0\n        if (v12 >= 0x2000000000000000) {\n            // 0x40cf06\n            return 12;\n        }\n        int64_t * v13 = (int64_t *)(a2 + 16);\n        int64_t * mem = realloc((int64_t *)*v13, 8 * (int32_t)v12); // 0x40d0ca\n        if (mem == NULL) {\n            // 0x40cf06\n            return 12;\n        }\n        int64_t v14 = (int64_t)mem; // 0x40d0ca\n        *v13 = v14;\n        *v4 = v12;\n        memset((int64_t *)(8 * v5 + v14), 0, 8 * (int32_t)v11);\n        v9 = v13;\n        v10 = 0;\n    }\n    int64_t * v15 = (int64_t *)(a1 + 184); // 0x40caa6\n    int64_t v16 = *v15; // 0x40caa6\n    int32_t * v17 = (int32_t *)(a1 + 160); // 0x40cab3\n    int32_t v18 = *v17; // 0x40cab3\n    int64_t v19 = *v9; // 0x40cabe\n    int64_t * v20 = (int64_t *)(a1 + 72); // 0x40cac7\n    int64_t v21 = *v20; // 0x40cac7\n    *v15 = v19;\n    int128_t v22; // bp-120, 0x40ca40\n    int32_t v23; // 0x40ca40\n    int64_t v24; // 0x40caff\n    if (v10 == 0) {\n        // 0x40d000\n        *v20 = a4;\n        v23 = function_409d60(a1, a4 - 1, v18);\n        goto lab_0x40d014;\n    } else {\n        // 0x40cae2\n        *v20 = v10;\n        v23 = function_409d60(a1, v10 - 1, v18);\n        if (v10 == a4) {\n            goto lab_0x40d014;\n        } else {\n            // 0x40caff\n            v24 = *(int64_t *)(v19 + 8 * v10);\n            if (v24 == 0) {\n                goto lab_0x40cb13;\n            } else {\n                // 0x40cb08\n                if ((*(char *)(v24 + 104) & 64) != 0) {\n                    int64_t v25 = function_4090d0((int64_t)&v22, v24 + 8); // 0x40cf2f\n                } else {\n                    goto lab_0x40cb13;\n                }\n            }\n        }\n    }\n  lab_0x40cee0_2:\n    // 0x40cee0\n    free(NULL);\n    result = 12;\n    int64_t v26; // 0x40ca40\n    int64_t v27 = v26; // 0x40ceed\n    goto lab_0x40cef5_2;\n  lab_0x40cd50_2:\n    // 0x40cd50\n    free(NULL);\n    int32_t v52; // bp-124, 0x40ca40\n    int32_t v53 = v52; // 0x40cd62\n    result = v53;\n    int128_t v54; // 0x40cbb2\n    int128_t v45 = v54; // 0x40cd6c\n    v27 = v26;\n    if (v53 != 0) {\n        goto lab_0x40cef5_2;\n    } else {\n        goto lab_0x40cddc;\n    }\n  lab_0x40ce4d_2:\n    // 0x40ce4d\n    free((int64_t *)v26);\n    int64_t v55 = *(int64_t *)(*v15 + 8 * a6); // 0x40ce67\n    int64_t result2; // 0x40ca40\n    int64_t v33; // 0x40ca40\n    if (v55 == 0) {\n        // 0x40d128\n        *(int64_t *)a2 = v33;\n        *v15 = v16;\n        *v20 = v21;\n        result2 = 1;\n    } else {\n        // 0x40ce74\n        *(int64_t *)a2 = v33;\n        *v15 = v16;\n        *v20 = v21;\n        result2 = function_408030(*(int64_t *)(v55 + 16), v55 + 24, a5) == 0;\n    }\n    // 0x40cf06\n    return result2;\n  lab_0x40cc00:;\n    // 0x40cc00\n    int64_t v56; // 0x40ca40\n    int64_t v57 = v56;\n    int64_t v58; // 0x40ca40\n    if ((char)function_409e50(a1, v57, v58) == 0) {\n        goto lab_0x40cc3f;\n    } else {\n        goto lab_0x40cc1d;\n    }\n  lab_0x40cc3f:;\n    // 0x40cc3f\n    int64_t v59; // 0x40ca40\n    int64_t v60 = v59 + 1; // 0x40cc3f\n    int64_t * v61; // 0x40cbb6\n    uint64_t v62 = *v61; // 0x40cc43\n    int64_t v63 = v60; // 0x40cc47\n    if (v60 >= v62) {\n        // break -> 0x40cfbd\n        goto lab_0x40cfbd;\n    }\n    goto lab_0x40cc4d;\n  lab_0x40cc1d:;\n    // 0x40cc1d\n    int64_t * v77; // 0x40ca40\n    int64_t v92 = *v77; // 0x40cc1d\n    int64_t v68; // 0x40cc55\n    int64_t v93 = *(int64_t *)(v92 + 8 * v68); // 0x40cc2e\n    int64_t v94; // 0x40ca40\n    if ((char)function_406a20(v94, v93) == 0) {\n        goto lab_0x40cee0_2;\n    }\n    goto lab_0x40cc3f;\n  lab_0x40cbb2:;\n    // 0x40cbb2\n    int128_t v40; // 0x40ca40\n    v54 = __asm_pxor(v40, v40);\n    v52 = 0;\n    int128_t v83 = __asm_movaps(v54); // bp-88, 0x40cbcb\n    int64_t v39; // 0x40ca40\n    if (*(int64_t *)(v39 + 40) >= 1) {\n        // 0x40cbe5\n        int64_t v88; // 0x40cbbb\n        int64_t v73 = v88 + 216; // 0x40cbe7\n        int64_t * v65 = (int64_t *)(v39 + 48); // 0x40cc4d\n        int64_t * v67 = (int64_t *)v88; // 0x40cc51\n        int32_t v95; // 0x40cb72\n        v58 = v95;\n        v77 = (int64_t *)(v88 + 24);\n        v63 = 0;\n        while (true) {\n          lab_0x40cc4d:\n            // 0x40cc4d\n            v59 = v63;\n            int64_t v64 = *v65; // 0x40cc4d\n            int64_t v66 = *v67; // 0x40cc51\n            v68 = *(int64_t *)(v64 + 8 * v59);\n            int64_t v69 = 16 * v68; // 0x40cc5c\n            int64_t v70 = v69 + v66; // 0x40cc60\n            char v71 = *(char *)(v70 + 10); // 0x40cc64\n            v56 = v70;\n            if ((v71 & 16) == 0) {\n                goto lab_0x40cc00;\n            } else {\n                int64_t v72 = function_40c7b0(v66, v73, v68, a1, v58); // 0x40cc79\n                int32_t v74 = v72; // 0x40cc81\n                if (v74 < 2) {\n                    if (v74 != 0) {\n                        goto lab_0x40cc1d;\n                    } else {\n                        int64_t v75 = *v67; // 0x40ceb8\n                        v56 = v75 + v69;\n                        goto lab_0x40cc00;\n                    }\n                } else {\n                    int64_t v76 = *v77; // 0x40cc95\n                    int64_t v78 = *v15; // 0x40cca2\n                    int64_t v79 = *(int64_t *)(v76 + 8 * v68); // 0x40ccaa\n                    int64_t v80 = 8 * ((0x100000000 * v72 >> 32) + v58); // 0x40ccae\n                    int64_t v81 = *(int64_t *)(v78 + v80); // 0x40ccb6\n                    if (v81 != 0) {\n                        int64_t v82 = function_408570((int64_t *)&v83, (int128_t *)(v81 + 8)); // 0x40ccdc\n                        int32_t v84 = v82; // 0x40cce6\n                        v52 = v84;\n                        if (v84 != 0) {\n                            goto lab_0x40cd50_2;\n                        }\n                    }\n                    // 0x40ccee\n                    int64_t v85; // 0x40ca40\n                    if ((char)function_406a20(v85, v79) == 0) {\n                        goto lab_0x40cee0_2;\n                    }\n                    int64_t v86 = *v15; // 0x40cd16\n                    int64_t v87 = function_4095e0(&v52, v88, (int64_t *)&v83, v58, v58, a6); // 0x40cd1e\n                    *(int64_t *)(v86 + v80) = v87;\n                    int64_t v89 = *v15; // 0x40cd27\n                    int64_t v90 = *(int64_t *)(v89 + v80); // 0x40cd2f\n                    int32_t v91 = v52; // 0x40cd3a\n                    if (v90 == 0 && v91 != 0) {\n                        goto lab_0x40cd50_2;\n                    }\n                    goto lab_0x40cc1d;\n                }\n            }\n        }\n    }\n  lab_0x40cfbd:\n    // 0x40cfbd\n    free(NULL);\n    result = 0;\n    v45 = v54;\n    goto lab_0x40cddc;\n  lab_0x40cddc:;\n    // 0x40cddc\n    int64_t v42; // 0x40ca40\n    int64_t v96 = function_409d60(a1, (int64_t)((int32_t)v42 - 1), *v17); // 0x40cdeb\n    int64_t v97 = function_4092e0((int128_t *)&result, v3, (int64_t *)&v22, (int32_t)v96); // 0x40ce04\n    int64_t v98; // 0x40ca40\n    int64_t v41; // 0x40ca40\n    int64_t v99; // 0x40ca40\n    int64_t v43; // 0x40cb62\n    if (v97 == 0) {\n        // 0x40cfd0\n        v27 = v26;\n        if (result != 0) {\n            // break -> 0x40cef5\n            goto lab_0x40cef5_2;\n        }\n        int64_t v100 = *v15; // 0x40cfdc\n        *(int64_t *)(v100 + v43) = 0;\n        v99 = v41 + 1;\n        v98 = v100;\n    } else {\n        int64_t v101 = *v15; // 0x40ce15\n        *(int64_t *)(v101 + v43) = v97;\n        v99 = 0;\n        v98 = v101;\n    }\n    // 0x40ce2f\n    v33 = v42;\n    if (v42 >= a6) {\n        goto lab_0x40ce4d_2;\n    }\n    int64_t v34 = v99; // 0x40ce47\n    int128_t v35 = v45; // 0x40ce47\n    int64_t v36 = v98; // 0x40ce47\n    int64_t v37 = v42; // 0x40ce47\n    int64_t v38 = v97; // 0x40ce47\n    v33 = v42;\n    if (v99 > (int64_t)*v7) {\n        goto lab_0x40ce4d_2;\n    }\n    goto lab_0x40cb5e;\n  lab_0x40d014:\n    // 0x40d014\n    v22 = 1;\n    int64_t * mem2 = malloc(8); // 0x40d031\n    if (mem2 == NULL) {\n        // 0x40cf06\n        return 12;\n    }\n    int64_t v102 = (int64_t)mem2; // 0x40d031\n    *mem2 = a3;\n    int32_t v103 = 0x100000000 * a7 >> 32;\n    result = 0;\n    int32_t v104 = function_4089a0(v3, (int64_t *)&v22, v6, v103); // 0x40d076\n    result = v104;\n    v27 = v102;\n    if (v104 == 0) {\n        goto lab_0x40cf52;\n    } else {\n        goto lab_0x40cef5_2;\n    }\n  lab_0x40cf52:;\n    int32_t v105 = function_409880(a1, &v22, a4, v6, v103); // 0x40cf6d\n    result = v105;\n    v27 = v102;\n    int64_t v51 = a4; // 0x40cf73\n    int64_t v50 = v102; // 0x40cf73\n    int32_t v49 = v23; // 0x40cf73\n    if (v105 != 0) {\n        goto lab_0x40cef5_2;\n    } else {\n        goto lab_0x40cf75;\n    }\n  lab_0x40cef5_2:\n    // 0x40cef5\n    free((int64_t *)v27);\n    // 0x40cf06\n    return result;\n  lab_0x40cb13:;\n    int128_t v28 = __asm_pxor(v2, v2); // 0x40cb1f\n    v22 = __asm_movaps(v28);\n    int64_t v29 = 0; // 0x40cb23\n    int128_t v30 = v28; // 0x40cb23\n    int64_t v31 = v10; // 0x40cb23\n    int64_t v32 = v24; // 0x40cb23\n    goto lab_0x40cb2b;\n  lab_0x40cf75:;\n    int64_t v48 = function_4092e0((int128_t *)&result, v3, (int64_t *)&v22, v49); // 0x40cf85\n    v27 = v50;\n    if (v48 != 0 || result == 0) {\n        // 0x40cf96\n        *(int64_t *)(*v15 + 8 * v51) = v48;\n        v29 = v50;\n        v31 = v51;\n        v32 = v48;\n        goto lab_0x40cb2b;\n    } else {\n        goto lab_0x40cef5_2;\n    }\n  lab_0x40cb2b:\n    // 0x40cb2b\n    v26 = v29;\n    v33 = v31;\n    if (v31 < a6) {\n        // 0x40cb36\n        v33 = v31;\n        if (*v7 < 0) {\n            goto lab_0x40ce4d_2;\n        } else {\n            // 0x40cb46\n            v34 = 0;\n            v35 = v30;\n            v36 = *v15;\n            v37 = v31;\n            v38 = v32;\n            while (true) {\n              lab_0x40cb5e:\n                // 0x40cb5e\n                v39 = v38;\n                v40 = v35;\n                v41 = v34;\n                v42 = v37 + 1;\n                v43 = 8 * v42;\n                int64_t v44 = *(int64_t *)(v43 + v36); // 0x40cb62\n                if (v44 == 0) {\n                    // 0x40cec8\n                    v45 = v40;\n                    if (v39 != 0) {\n                        goto lab_0x40cbb2;\n                    } else {\n                        goto lab_0x40cddc;\n                    }\n                } else {\n                    int64_t v46 = function_408570((int64_t *)&v22, (int128_t *)(v44 + 8)); // 0x40cb98\n                    int32_t v47 = v46; // 0x40cb9d\n                    result = v47;\n                    v27 = v26;\n                    if (v47 != 0) {\n                        // break -> 0x40cef5\n                        break;\n                    }\n                    // 0x40cba9\n                    v45 = v40;\n                    if (v39 == 0) {\n                        goto lab_0x40cddc;\n                    } else {\n                        goto lab_0x40cbb2;\n                    }\n                }\n            }\n            goto lab_0x40cef5_2;\n        }\n    } else {\n        goto lab_0x40ce4d_2;\n    }\n}\n"
        },
        {
            "funcName": "function_40d160",
            "funcStartAddr": "40d160",
            "funcEndAddr": "40da23",
            "decompiledFuncCode": "int64_t function_40d160(int64_t a1, int64_t * a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x40d160\n    int128_t v1; // 0x40d160\n    int128_t v2 = v1;\n    int64_t v3 = 0; // bp-88, 0x40d184\n    int64_t v4 = 0; // 0x40d1a6\n    if ((char)a5 != 0) {\n        int64_t * mem = malloc(96); // 0x40d1b5\n        v4 = &v3;\n        if (mem == NULL) {\n            // 0x40d4c9\n            return 12;\n        }\n    }\n    int128_t v5 = __asm_pxor(v2, v2); // 0x40d1d5\n    int64_t v6 = 0; // bp-104, 0x40d1d9\n    int128_t v7 = __asm_movaps(v5); // bp-120, 0x40d1e1\n    uint64_t v8 = 16 * a3; // 0x40d1f3\n    int32_t size = v8; // 0x40d1f7\n    int64_t result; // 0x40d160\n    int64_t v9; // 0x40d160\n    char v10; // 0x40d160\n    if (v8 < 4031) {\n        // 0x40d20a\n        v10 = 0;\n        int64_t v11; // bp-216, 0x40d160\n        v9 = (int64_t)&v11 + -1 - v8 & -16;\n    } else {\n        int64_t * mem2 = malloc(size); // 0x40d947\n        v10 = 1;\n        v9 = (int64_t)mem2;\n        if (mem2 == NULL) {\n            // 0x40d963\n            result = 12;\n            if (v4 != 0) {\n                // 0x40d973\n                function_40b790(v4);\n                result = 12;\n            }\n          lab_0x40d4c9:\n            // 0x40d4c9\n            return result;\n        }\n    }\n    int64_t * v12 = (int64_t *)v9; // 0x40d239\n    int64_t * v13 = (int64_t *)a4; // 0x40d239\n    memcpy(v12, v13, size);\n    int64_t v14 = a4; // bp-128, 0x40d24a\n    int64_t * v15 = (int64_t *)(a4 + 8); // 0x40d339\n    int64_t v16 = *v15; // 0x40d339\n    if (v16 < a4) {\n      lab_0x40d4a0_2:\n        // 0x40d4a0\n        free((int64_t *)v6);\n        if (v10 != 0) {\n            // 0x40d97d\n            free(v12);\n            if (v4 == 0) {\n                // 0x40d4c9\n                return 0;\n            }\n        } else {\n            // 0x40d4b6\n            if (v4 == 0) {\n                // 0x40d4c9\n                return 0;\n            }\n        }\n        // 0x40d4c2\n        function_40b790(v4);\n        // 0x40d4c9\n        return 0;\n    }\n    int64_t v17 = (int64_t)a2;\n    int64_t v18 = v4 + 16;\n    int64_t v19 = &v7;\n    int64_t * v20 = (int64_t *)(v17 + 184);\n    int64_t * v21 = (int64_t *)v4;\n    int64_t * v22 = (int64_t *)(v4 + 8);\n    int64_t * v23 = (int64_t *)v18;\n    int64_t v24 = v16; // 0x40d339\n    int64_t v25 = *(int64_t *)(a1 + 144); // 0x40d160\n    int64_t v26 = a4; // 0x40d335\n    int64_t v27; // 0x40d160\n    int64_t v28; // 0x40d160\n    int64_t v29; // 0x40d160\n    int64_t v30; // 0x40d160\n    int64_t v31; // 0x40d160\n    int64_t v32; // 0x40d160\n    int64_t v33; // 0x40d160\n    int64_t v34; // 0x40d160\n    int64_t v35; // 0x40d160\n    int64_t v36; // 0x40d353\n    int64_t v37; // 0x40d4f8\n    while (true) {\n        // 0x40d346\n        int64_t v38; // 0x40d160\n        v34 = v38;\n        v28 = v24;\n        v31 = v26;\n        v29 = v25;\n        while (true) {\n          lab_0x40d346:\n            // 0x40d346\n            v30 = v29;\n            v32 = v31;\n            int64_t v39 = v28;\n            v35 = v34;\n            v36 = 16 * v30;\n            int64_t v40 = v36 + a1; // 0x40d35a\n            char v41 = *(char *)(v40 + 8); // 0x40d35d\n            if (v41 != 8) {\n                // 0x40d260\n                v27 = v39;\n                if (v41 == 9) {\n                    int64_t v42 = *(int64_t *)v40 + 1; // 0x40d4e3\n                    v27 = v39;\n                    if (v42 < a3) {\n                        int64_t v43 = 16 * v42; // 0x40d4f4\n                        v37 = v43 + a4;\n                        if (*(int64_t *)v37 < v32) {\n                            // 0x40d870\n                            *(int64_t *)(v37 + 8) = v32;\n                            memcpy(v12, v13, size);\n                            v27 = *v15;\n                            goto lab_0x40d269;\n                        } else {\n                            // 0x40d506\n                            if ((*(char *)(v40 + 10) & 8) == 0) {\n                                goto lab_0x40d51e;\n                            } else {\n                                // 0x40d50c\n                                if (*(int64_t *)(v43 + v9) != -1) {\n                                    // 0x40d8b0\n                                    memcpy(v13, v12, size);\n                                    int64_t v44 = *v15; // 0x40d8cd\n                                    v27 = v44;\n                                    goto lab_0x40d269;\n                                } else {\n                                    goto lab_0x40d51e;\n                                }\n                            }\n                        }\n                    } else {\n                        goto lab_0x40d269;\n                    }\n                } else {\n                    goto lab_0x40d269;\n                }\n            } else {\n                int64_t v45 = *(int64_t *)v40 + 1; // 0x40d36d\n                v27 = v39;\n                if (v45 < a3) {\n                    int64_t v46 = 16 * v45 + a4; // 0x40d382\n                    *(int64_t *)(v46 + 8) = -1;\n                    *(int64_t *)v46 = v32;\n                    v27 = *v15;\n                }\n                goto lab_0x40d269;\n            }\n        }\n      lab_0x40d335_2:\n        // 0x40d335\n        v26 = v14;\n        v24 = *v15;\n        v38 = v33;\n        if (v24 < v26) {\n            goto lab_0x40d4a0_2;\n        }\n    }\n  lab_0x40d830_3:\n    // 0x40d830\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x40d9a0\n        free(v12);\n        goto lab_0x40d846;\n    } else {\n        goto lab_0x40d846;\n    }\n  lab_0x40d73a_3:\n    // 0x40d73a\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x40da12\n        free(v12);\n        // 0x40d750\n        function_40b790(v4);\n        result = 0;\n        return result;\n    } else {\n        // 0x40d750\n        function_40b790(v4);\n        result = 0;\n        return result;\n    }\n  lab_0x40d269:;\n    int64_t v47 = v30; // 0x40d26c\n    int64_t v48 = v36; // 0x40d26c\n    if (v32 == v27) {\n        // 0x40d26e\n        v47 = v30;\n        v48 = v36;\n        if (*(int64_t *)(v17 + 176) == v30) {\n            if (v4 == 0) {\n                // 0x40d9e9\n                free((int64_t *)v6);\n                result = 0;\n                if (v10 == 0) {\n                    return result;\n                } else {\n                    // 0x40d9ff\n                    free(v12);\n                    result = (int32_t)&g81 ^ (int32_t)&g81;\n                    return result;\n                }\n            }\n            int64_t v49 = a4; // 0x40d710\n            int64_t v50 = 0; // 0x40d710\n            if (a3 == 0) {\n                goto lab_0x40d73a_3;\n            }\n            int64_t v51; // 0x40d160\n            while (true) {\n                // 0x40d720\n                v51 = v50;\n                int64_t v52 = v49;\n                if (*(int64_t *)v52 >= 0) {\n                    // 0x40d726\n                    if (*(int64_t *)(v52 + 8) == -1) {\n                        // break -> 0x40d768\n                        break;\n                    }\n                }\n                // 0x40d72d\n                v50 = v51 + 1;\n                v49 = v52 + 16;\n                if (v50 == a3) {\n                    goto lab_0x40d73a_3;\n                }\n            }\n            if (v51 == a3) {\n                goto lab_0x40d73a_3;\n            }\n            int64_t v53 = function_40b7e0(v4, v18, &v14, a3, a4, &v7); // 0x40d78e\n            v47 = v53;\n            v48 = 16 * v53;\n        }\n    }\n    int64_t v54 = v48;\n    int64_t v55 = v47;\n    int64_t v56 = *(int64_t *)(v17 + 152); // 0x40d27c\n    int64_t * v57 = (int64_t *)v56; // 0x40d284\n    int64_t v58 = *v57; // 0x40d284\n    int64_t v59 = v58 + v54; // 0x40d287\n    char v60 = *(char *)(v59 + 8); // 0x40d28b\n    int64_t v61; // 0x40d160\n    int64_t v62; // 0x40d160\n    int64_t v63; // 0x40d160\n    int64_t v64; // 0x40d160\n    int64_t v65; // 0x40d160\n    int64_t v66; // 0x40d160\n    int64_t v67; // 0x40d160\n    int64_t v68; // 0x40d160\n    int64_t v69; // 0x40d160\n    int64_t v70; // 0x40d160\n    int64_t v71; // 0x40d160\n    int64_t v72; // 0x40d160\n    int64_t v73; // 0x40d62e\n    int64_t v74; // 0x40d410\n    if ((v60 & 8) != 0) {\n        int64_t v75 = *(int64_t *)(8 * v14 + *v20); // 0x40d3b3\n        if ((char)function_406a20(v19, v55) == 0) {\n            // break (via goto) -> 0x40d830\n            goto lab_0x40d830_3;\n        }\n        int64_t v76 = *(int64_t *)(v56 + 40) + 24 * v55; // 0x40d3c6\n        int64_t v77 = *(int64_t *)(v76 + 8); // 0x40d3de\n        v71 = v35;\n        if (v77 < 1) {\n            goto lab_0x40d45a;\n        } else {\n            // 0x40d3e7\n            v61 = -1;\n            int64_t v78 = 0;\n            v74 = *(int64_t *)(8 * v78 + *(int64_t *)(v76 + 16));\n            int64_t v79 = v61; // 0x40d425\n            int64_t v80; // 0x40d635\n            int64_t v81; // 0x40d160\n            int64_t * mem3; // 0x40d902\n            int64_t v82; // 0x40d902\n            int64_t v83; // 0x40d610\n            if (function_408030(*(int64_t *)(v75 + 16), v75 + 24, v74) != 0) {\n                // 0x40d427\n                v79 = v74;\n                if (v61 != -1) {\n                    // 0x40d5f8\n                    v83 = function_408030(v35, (int64_t)&v6, v61);\n                    v69 = v35;\n                    v63 = v83 != 0 ? v74 : v61;\n                    if (v4 == 0 || v83 != 0) {\n                        goto lab_0x40d32c;\n                    } else {\n                        // 0x40d62e\n                        v73 = *v21;\n                        v80 = v73 + 1;\n                        *v21 = v80;\n                        v81 = *v23;\n                        v62 = v81;\n                        if (v80 == *v22) {\n                            // 0x40d8e8\n                            mem3 = realloc((int64_t *)v81, 96 * (int32_t)v80);\n                            if (mem3 == NULL) {\n                                goto lab_0x40d6a0;\n                            } else {\n                                // 0x40d910\n                                v82 = (int64_t)mem3;\n                                *v22 = 2 * *v22;\n                                *v23 = v82;\n                                v62 = v82;\n                                goto lab_0x40d64a;\n                            }\n                        } else {\n                            goto lab_0x40d64a;\n                        }\n                    }\n                }\n            }\n            int64_t v84 = v79;\n            int64_t v85 = v78 + 1; // 0x40d434\n            while (v77 != v85) {\n                // 0x40d410\n                v61 = v84;\n                v78 = v85;\n                v74 = *(int64_t *)(8 * v78 + *(int64_t *)(v76 + 16));\n                v79 = v61;\n                if (function_408030(*(int64_t *)(v75 + 16), v75 + 24, v74) != 0) {\n                    // 0x40d427\n                    v79 = v74;\n                    if (v61 != -1) {\n                        // 0x40d5f8\n                        v83 = function_408030(v35, (int64_t)&v6, v61);\n                        v69 = v35;\n                        v63 = v83 != 0 ? v74 : v61;\n                        if (v4 == 0 || v83 != 0) {\n                            goto lab_0x40d32c;\n                        } else {\n                            // 0x40d62e\n                            v73 = *v21;\n                            v80 = v73 + 1;\n                            *v21 = v80;\n                            v81 = *v23;\n                            v62 = v81;\n                            if (v80 == *v22) {\n                                // 0x40d8e8\n                                mem3 = realloc((int64_t *)v81, 96 * (int32_t)v80);\n                                if (mem3 == NULL) {\n                                    goto lab_0x40d6a0;\n                                } else {\n                                    // 0x40d910\n                                    v82 = (int64_t)mem3;\n                                    *v22 = 2 * *v22;\n                                    *v23 = v82;\n                                    v62 = v82;\n                                    goto lab_0x40d64a;\n                                }\n                            } else {\n                                goto lab_0x40d64a;\n                            }\n                        }\n                    }\n                }\n                // 0x40d434\n                v84 = v79;\n                v85 = v78 + 1;\n            }\n            // 0x40d43d\n            v33 = v35;\n            v25 = v84;\n            v70 = v35;\n            v64 = v84;\n            if (v84 >= 0) {\n                // break -> 0x40d335\n                goto lab_0x40d335_2;\n            }\n            goto lab_0x40d450;\n        }\n    } else {\n        // 0x40d297\n        if ((*(char *)(v59 + 10) & 16) != 0) {\n            int64_t v86 = 0x100000000 * function_40c7b0(v58, v56 + 216, v55, v17, v14);\n            v67 = v86 >> 32;\n            if (v86 != 0) {\n                goto lab_0x40d6e9;\n            } else {\n                // 0x40d559\n                v65 = v14;\n                v68 = *v57 + v54;\n                goto lab_0x40d2ad;\n            }\n        } else {\n            if (v60 == 4) {\n                int64_t v87 = a4 + 16 + 16 * *(int64_t *)v59; // 0x40d57b\n                int64_t v88 = *(int64_t *)(v87 + 8); // 0x40d57e\n                int64_t v89 = *(int64_t *)v87; // 0x40d582\n                int64_t n = v88 - v89; // 0x40d588\n                if (v4 == 0) {\n                    // 0x40d6e0\n                    v67 = n;\n                    if (n == 0) {\n                        goto lab_0x40d7a8;\n                    } else {\n                        goto lab_0x40d6e9;\n                    }\n                } else {\n                    // 0x40d599\n                    v72 = v35;\n                    if (v88 == -1 || v89 == -1) {\n                        goto lab_0x40d468;\n                    } else {\n                        if (n == 0) {\n                            goto lab_0x40d7a8;\n                        } else {\n                            int64_t v90 = *(int64_t *)(v17 + 8); // 0x40d5b6\n                            int32_t memcmp_rc = memcmp((int64_t *)(v90 + v89), (int64_t *)(v14 + v90), (int32_t)n); // 0x40d5d0\n                            v72 = v35;\n                            v66 = n;\n                            if (memcmp_rc != 0) {\n                                goto lab_0x40d468;\n                            } else {\n                                goto lab_0x40d5e4;\n                            }\n                        }\n                    }\n                }\n            } else {\n                // 0x40d2a9\n                v65 = v14;\n                v68 = v59;\n                goto lab_0x40d2ad;\n            }\n        }\n    }\n  lab_0x40d45a:\n    // 0x40d45a\n    v72 = v71;\n    if (v4 == 0) {\n        // 0x40d9b1\n        free((int64_t *)v6);\n        result = 1;\n        if (v10 == 0) {\n            return result;\n        } else {\n            // 0x40d9cc\n            free(v12);\n            result = 1;\n            return result;\n        }\n    }\n    goto lab_0x40d468;\n  lab_0x40d51e:\n    // 0x40d51e\n    *(int64_t *)(v37 + 8) = v32;\n    v27 = *v15;\n    goto lab_0x40d269;\n  lab_0x40d468:;\n    int64_t v91 = function_40b7e0(v4, v18, &v14, a3, a4, &v7); // 0x40d485\n    int64_t v92 = *v15; // 0x40d491\n    v34 = v72;\n    v28 = v92;\n    v31 = v14;\n    v29 = v91;\n    if (v92 < v14) {\n        goto lab_0x40d4a0_2;\n    }\n    goto lab_0x40d346;\n  lab_0x40d450:\n    // 0x40d450\n    v71 = v70;\n    if (v64 == -2) {\n        // break (via goto) -> 0x40d830\n        goto lab_0x40d830_3;\n    }\n    goto lab_0x40d45a;\n  lab_0x40d6e9:\n    // 0x40d6e9\n    v66 = v67;\n    goto lab_0x40d5e4;\n  lab_0x40d5e4:;\n    int64_t v93 = v14 + v66; // 0x40d5f0\n    goto lab_0x40d2da;\n  lab_0x40d2ad:\n    // 0x40d2ad\n    if ((char)function_409e50(v17, v68, v65) == 0) {\n        goto lab_0x40d45a;\n    } else {\n        // 0x40d2ce\n        v93 = v65 + 1;\n        goto lab_0x40d2da;\n    }\n  lab_0x40d2da:;\n    int64_t v94 = v93;\n    int64_t v95 = *(int64_t *)(*(int64_t *)(v56 + 24) + 8 * v55);\n    v14 = v94;\n    v69 = 0;\n    v63 = v95;\n    if (v4 == 0) {\n        goto lab_0x40d32c;\n    } else {\n        // 0x40d2e8\n        v72 = v35;\n        if (v94 > *(int64_t *)(v17 + 168)) {\n            goto lab_0x40d468;\n        } else {\n            int64_t v96 = *(int64_t *)(*v20 + 8 * v94); // 0x40d2fe\n            v72 = v35;\n            if (v96 == 0) {\n                goto lab_0x40d468;\n            } else {\n                int64_t v97 = function_408030(*(int64_t *)(v96 + 16), v96 + 24, v95); // 0x40d316\n                v69 = 0;\n                v63 = v95;\n                v72 = v35;\n                if (v97 == 0) {\n                    goto lab_0x40d468;\n                } else {\n                    goto lab_0x40d32c;\n                }\n            }\n        }\n    }\n  lab_0x40d7a8:\n    // 0x40d7a8\n    if ((char)function_406a20(v19, v55) == 0) {\n        // break (via goto) -> 0x40d830\n        goto lab_0x40d830_3;\n    }\n    int64_t v98 = v14; // 0x40d7c7\n    int64_t v99 = *(int64_t *)(24 * v55 + 16 + *(int64_t *)(v56 + 40)); // 0x40d7d6\n    int64_t v100 = *(int64_t *)v99; // 0x40d7da\n    int64_t v101 = *(int64_t *)(*v20 + 8 * v98); // 0x40d7e5\n    int64_t v102 = function_408030(*(int64_t *)(v101 + 16), v101 + 24, v100); // 0x40d7f4\n    v69 = v35;\n    v63 = v100;\n    if (v102 != 0) {\n        goto lab_0x40d32c;\n    } else {\n        // 0x40d802\n        v65 = v98;\n        v68 = *v57 + v54;\n        goto lab_0x40d2ad;\n    }\n  lab_0x40d32c:\n    // 0x40d32c\n    v33 = v69;\n    v25 = v63;\n    v70 = v69;\n    v64 = v63;\n    if (v63 >= 0) {\n        // break -> 0x40d335\n        goto lab_0x40d335_2;\n    }\n    goto lab_0x40d450;\n  lab_0x40d846:\n    // 0x40d846\n    if (v4 != 0) {\n      lab_0x40d6b6:\n        // 0x40d6b6\n        function_40b790(v4);\n        return 12;\n    }\n    // 0x40d4c9\n    return 12;\n  lab_0x40d64a:;\n    int64_t v103 = v62 + 48 * v73; // 0x40d652\n    *(int64_t *)(v103 + 8) = v74;\n    *(int64_t *)v103 = v14;\n    int64_t * mem4 = malloc(size); // 0x40d666\n    *(int64_t *)(v103 + 16) = (int64_t)mem4;\n    if (mem4 == NULL) {\n        goto lab_0x40d6a0;\n    } else {\n        // 0x40d674\n        memcpy(mem4, v13, size);\n        v69 = v35;\n        v63 = v61;\n        if ((int32_t)function_4090d0(v103 + 24, v19) == 0) {\n            goto lab_0x40d32c;\n        } else {\n            goto lab_0x40d6a0;\n        }\n    }\n  lab_0x40d6a0:\n    // 0x40d6a0\n    free((int64_t *)v6);\n    if (v10 != 0) {\n        // 0x40d9a0\n        free(v12);\n        goto lab_0x40d846;\n    } else {\n        goto lab_0x40d6b6;\n    }\n}\n"
        },
        {
            "funcName": "function_40da30",
            "funcStartAddr": "40da30",
            "funcEndAddr": "40dbc6",
            "decompiledFuncCode": "int64_t function_40da30(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a3 + 16; // 0x40da44\n    int64_t * v2 = (int64_t *)(a3 + 8); // 0x40da57\n    int64_t result = function_40ca40(a1, v1, a3, *v2, a4, a5, 8); // 0x40da60\n    if ((int32_t)result != 0) {\n        // 0x40da6b\n        return result;\n    }\n    int64_t v3 = *v2; // 0x40da80\n    int64_t * v4 = (int64_t *)(a1 + 200); // 0x40da84\n    uint64_t v5 = *v4; // 0x40da84\n    int64_t * v6 = (int64_t *)(a1 + 208); // 0x40da8b\n    uint64_t v7 = *v6; // 0x40da8b\n    int64_t * v8 = (int64_t *)(a1 + 216); // 0x40da96\n    int64_t v9 = *v8; // 0x40da96\n    int64_t v10 = v5; // 0x40daa3\n    int64_t v11 = v9; // 0x40daa3\n    if (v5 >= v7) {\n        int64_t * mem = realloc((int64_t *)v9, 80 * (int32_t)v7); // 0x40db4d\n        if (mem == NULL) {\n            // 0x40dbb0\n            free((int64_t *)*v8);\n            // 0x40da6b\n            return 12;\n        }\n        int64_t v12 = (int64_t)mem; // 0x40db4d\n        *v8 = v12;\n        memset((int64_t *)(40 * *v4 + v12), 0, 40 * (int32_t)*v6);\n        *v6 = 2 * *v6;\n        v10 = *v4;\n        v11 = *v8;\n    }\n    int64_t v13 = 40 * v10; // 0x40daad\n    int64_t v14; // 0x40da30\n    if (v10 < 1) {\n        // 0x40daa9\n        v14 = v11 + v13;\n    } else {\n        int64_t v15 = v13 + v11;\n        v14 = v15;\n        if (*(int64_t *)(v15 - 32) == a5) {\n            // 0x40db30\n            *(char *)(v15 - 8) = 1;\n            v14 = v15;\n        }\n    }\n    // 0x40dac1\n    *(int64_t *)v14 = a4;\n    *(int64_t *)(v14 + 8) = a5;\n    *(int16_t *)(v14 + 34) = (int16_t)(v3 == v1);\n    *(int64_t *)(v14 + 16) = v1;\n    *(int64_t *)(v14 + 24) = v3;\n    *v4 = v10 + 1;\n    *(char *)(v14 + 32) = 0;\n    int32_t * v16 = (int32_t *)(a1 + 224); // 0x40daf3\n    if (v3 - v1 > (int64_t)*v16) {\n        // 0x40db02\n        *v16 = (int32_t)v3 - (int32_t)v1;\n    }\n    // 0x40db0c\n    return function_407600(a1, 0);\n}\n"
        },
        {
            "funcName": "function_40dbd0",
            "funcStartAddr": "40dbd0",
            "funcEndAddr": "40e442",
            "decompiledFuncCode": "int64_t function_40dbd0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x40dbd0\n    if (a2 >= 0 != a2 != 0) {\n        // 0x40e05b\n        return 0;\n    }\n    // 0x40dc69\n    int64_t v1; // bp-232, 0x40dbd0\n    int64_t v2 = &v1; // 0x40dbdd\n    int64_t * v3 = (int64_t *)(v2 + 8); // 0x40dc6e\n    int64_t * v4 = (int64_t *)(v2 + 56); // 0x40dc7a\n    int32_t * v5 = (int32_t *)(a1 + 160);\n    int64_t * v6 = (int64_t *)(a1 + 200);\n    int64_t * v7 = (int64_t *)(a1 + 216);\n    int64_t * v8 = (int64_t *)(a1 + 232);\n    int64_t * v9 = (int64_t *)(v2 + 104);\n    int64_t * v10 = (int64_t *)(v2 + 96);\n    int64_t * v11 = (int64_t *)(a1 + 8);\n    int64_t * v12 = (int64_t *)(v2 + 24);\n    int64_t * v13 = (int64_t *)(v2 + 16);\n    int64_t * v14 = (int64_t *)(v2 + 32);\n    int64_t * v15 = (int64_t *)(v2 + 64);\n    int64_t * v16 = (int64_t *)(v2 + 112);\n    int64_t v17 = v2 + 40;\n    int64_t * v18 = (int64_t *)v17;\n    int64_t * v19 = (int64_t *)(v2 + 120);\n    int64_t * v20 = (int64_t *)(v2 + 48);\n    int64_t * v21 = (int64_t *)(a1 + 184);\n    int64_t v22 = v2 + 140;\n    int32_t * v23 = (int32_t *)v22;\n    int64_t * v24 = (int64_t *)(v2 + 88);\n    int32_t * v25 = (int32_t *)v17;\n    int64_t * v26 = (int64_t *)(v2 + 144);\n    int128_t * v27 = (int128_t *)v22;\n    int64_t * v28 = (int64_t *)(v2 + 160);\n    int64_t v29 = *v3; // 0x40dc55\n    int64_t v30 = *(int64_t *)(a1 + 72); // 0x40dbd0\n    int64_t v31; // 0x40dbd0\n    int64_t v32; // 0x40dc76\n    int64_t v33; // 0x40dc85\n    uint32_t v34; // 0x40dc92\n    int64_t v35; // 0x40dc92\n    uint64_t v36; // 0x40dcad\n    while (true) {\n      lab_0x40dc69:\n        // 0x40dc69\n        v31 = v30;\n        v32 = *(int64_t *)(*(int64_t *)*(int64_t *)(v2 + 72) + 8 * v29);\n        v33 = 16 * v32;\n        int64_t v37 = (v33 | 8) + *(int64_t *)*v4; // 0x40dc8c\n        v30 = v31;\n        if (*(char *)v37 != 4) {\n            goto lab_0x40dc50_3;\n        } else {\n            // 0x40dc92\n            v34 = *(int32_t *)v37;\n            if ((v34 & 0x3ff00) == 0) {\n                goto lab_0x40dce0;\n            } else {\n                // 0x40dc9d\n                v35 = v34;\n                v36 = function_409d60(a1, v31, *v5);\n                if ((v35 & 1024) != 0) {\n                    // 0x40dc20\n                    v30 = v31;\n                    if (v36 % 2 == 0) {\n                        goto lab_0x40dc50_3;\n                    } else {\n                        // 0x40dc24\n                        v30 = v31;\n                        if ((v35 & 2048) != 0) {\n                            goto lab_0x40dc50_3;\n                        } else {\n                            goto lab_0x40dc29;\n                        }\n                    }\n                } else {\n                    // 0x40dcc4\n                    v30 = v31;\n                    if ((v35 & 2048) == 0 || v36 % 2 == 0) {\n                        goto lab_0x40dc29;\n                    } else {\n                        goto lab_0x40dc50_3;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40e05b_7:;\n    // 0x40e05b\n    int64_t result; // 0x40dbd0\n    return result;\n  lab_0x40dda8:;\n    int64_t v38 = *(int64_t *)(a1 + 152); // 0x40dda8\n    int64_t v39 = *(int64_t *)v38; // 0x40ddb7\n    *v9 = v38;\n    *v10 = *(int64_t *)(v39 + v33);\n    int64_t v40; // 0x40dbd0\n    int64_t v41; // 0x40dbd0\n    int64_t v42; // 0x40dbd0\n    int64_t v43; // 0x40dbd0\n    int64_t v44; // 0x40dbd0\n    int64_t v45; // 0x40dbd0\n    int64_t v46; // 0x40dbd0\n    int64_t v47; // 0x40dbd0\n    int64_t v48; // 0x40dbd0\n    int64_t v49; // 0x40dbd0\n    int64_t v50; // 0x40dbd0\n    int64_t v51; // 0x40dbd0\n    int64_t v52; // 0x40dbd0\n    int64_t v53; // 0x40dbd0\n    int64_t v54; // 0x40dce0\n    int64_t v55; // 0x40ddfc\n    int64_t * v56; // 0x40de00\n    int64_t * v57; // 0x40e070\n    int64_t * v58; // 0x40e075\n    int64_t v59; // 0x40de30\n    if (*v8 < 1) {\n        // 0x40dd7f\n        *v23 = 0;\n        v30 = v31;\n        goto lab_0x40dc50_3;\n    } else {\n        // 0x40ddca\n        *v12 = v31;\n        *v13 = 0;\n        *v14 = *v11;\n        *v15 = v32;\n        *v16 = v54;\n        v40 = *v13;\n        v51 = v39;\n        while (true) {\n          lab_0x40ddeb:\n            // 0x40ddeb\n            v55 = *(int64_t *)(*(int64_t *)(a1 + 248) + 8 * v40);\n            v56 = (int64_t *)(v55 + 8);\n            if (*v10 == *(int64_t *)(16 * *v56 + v51)) {\n                // 0x40e070\n                v57 = (int64_t *)(v55 + 32);\n                v58 = (int64_t *)v55;\n                int64_t v60 = *v58; // 0x40e075\n                int64_t v61 = *v12; // 0x40e078\n                v41 = v61;\n                v42 = v60;\n                if (*v57 < 1) {\n                    goto lab_0x40e223;\n                } else {\n                    int64_t v62 = v61;\n                    v49 = 0;\n                    int64_t v63 = v60;\n                    int64_t v64 = *(int64_t *)(*(int64_t *)(v55 + 40) + 8 * v49); // 0x40e0b0\n                    int64_t v65 = *(int64_t *)(v64 + 8); // 0x40e0b4\n                    int64_t v66 = v65 - v63; // 0x40e0bb\n                    int64_t v67 = v66 + v62; // 0x40e0be\n                    int64_t v68 = v64; // 0x40e0c5\n                    int64_t v69; // 0x40dbd0\n                    int64_t v70; // 0x40dbd0\n                    int32_t memcmp_rc; // 0x40e0e8\n                    int64_t v71; // 0x40e1c4\n                    int64_t v72; // 0x40e1d1\n                    int64_t n; // 0x40e1d5\n                    int64_t v73; // 0x40e1da\n                    int64_t v74; // 0x40e1df\n                    int64_t v75; // 0x40e1e4\n                    if (v66 >= 1) {\n                        // 0x40e0c7\n                        v69 = *v14;\n                        v75 = v63;\n                        n = v66;\n                        v74 = v62;\n                        v73 = v64;\n                        v72 = v69;\n                        if (*(int64_t *)(a1 + 48) < v67) {\n                            // 0x40e1a0\n                            *v18 = v66;\n                            *v14 = v64;\n                            v50 = v63;\n                            v48 = v62;\n                            v43 = v69;\n                            if (*(int64_t *)(a1 + 88) < v67) {\n                                goto lab_0x40e3b0_2;\n                            }\n                            // 0x40e1b4\n                            *v19 = v62;\n                            *v20 = v63;\n                            v71 = function_407600(a1, v67);\n                            result = v71;\n                            if ((int32_t)v71 != 0) {\n                                // break (via goto) -> 0x40e05b\n                                goto lab_0x40e05b_7;\n                            }\n                            // 0x40e1d1\n                            v72 = *v11;\n                            n = *v18;\n                            v73 = *v14;\n                            v74 = *v19;\n                            v75 = *v20;\n                        }\n                        // 0x40e0d1\n                        v70 = v72;\n                        *v20 = v73;\n                        *v18 = v75;\n                        *v14 = v74;\n                        memcmp_rc = memcmp((int64_t *)(v70 + v74), (int64_t *)(v70 + v75), (int32_t)n);\n                        v68 = *v20;\n                        v50 = *v18;\n                        v48 = *v14;\n                        v43 = v70;\n                        if (memcmp_rc != 0) {\n                            goto lab_0x40e3b0_2;\n                        }\n                    }\n                    int64_t v76 = function_40da30(a1, v55, v68, *v15, *v12); // 0x40e117\n                    int64_t v77 = *v11; // 0x40e11c\n                    result = v76;\n                    if ((int32_t)v76 >= 2) {\n                        // break (via goto) -> 0x40e05b\n                        goto lab_0x40e05b_7;\n                    }\n                    int64_t v78 = v49 + 1; // 0x40e098\n                    while (v78 < *v57) {\n                        // 0x40e0ac\n                        v62 = v67;\n                        v49 = v78;\n                        v63 = v65;\n                        v64 = *(int64_t *)(*(int64_t *)(v55 + 40) + 8 * v49);\n                        v65 = *(int64_t *)(v64 + 8);\n                        v66 = v65 - v63;\n                        v67 = v66 + v62;\n                        v68 = v64;\n                        if (v66 >= 1) {\n                            // 0x40e0c7\n                            v69 = v77;\n                            v75 = v63;\n                            n = v66;\n                            v74 = v62;\n                            v73 = v64;\n                            v72 = v69;\n                            if (*(int64_t *)(a1 + 48) < v67) {\n                                // 0x40e1a0\n                                *v18 = v66;\n                                *v14 = v64;\n                                v50 = v63;\n                                v48 = v62;\n                                v43 = v69;\n                                if (*(int64_t *)(a1 + 88) < v67) {\n                                    goto lab_0x40e3b0_2;\n                                }\n                                // 0x40e1b4\n                                *v19 = v62;\n                                *v20 = v63;\n                                v71 = function_407600(a1, v67);\n                                result = v71;\n                                if ((int32_t)v71 != 0) {\n                                    // break (via goto) -> 0x40e05b\n                                    goto lab_0x40e05b_7;\n                                }\n                                // 0x40e1d1\n                                v72 = *v11;\n                                n = *v18;\n                                v73 = *v14;\n                                v74 = *v19;\n                                v75 = *v20;\n                            }\n                            // 0x40e0d1\n                            v70 = v72;\n                            *v20 = v73;\n                            *v18 = v75;\n                            *v14 = v74;\n                            memcmp_rc = memcmp((int64_t *)(v70 + v74), (int64_t *)(v70 + v75), (int32_t)n);\n                            v68 = *v20;\n                            v50 = *v18;\n                            v48 = *v14;\n                            v43 = v70;\n                            if (memcmp_rc != 0) {\n                                goto lab_0x40e3b0_2;\n                            }\n                        }\n                        // 0x40e104\n                        v76 = function_40da30(a1, v55, v68, *v15, *v12);\n                        v77 = *v11;\n                        result = v76;\n                        if ((int32_t)v76 >= 2) {\n                            // break (via goto) -> 0x40e05b\n                            goto lab_0x40e05b_7;\n                        }\n                        // 0x40e098\n                        v78 = v49 + 1;\n                    }\n                    // 0x40e217\n                    *v14 = v77;\n                    v44 = v65;\n                    v47 = v67;\n                    goto lab_0x40e21c;\n                }\n            } else {\n                goto lab_0x40de12_2;\n            }\n        }\n      lab_0x40de30:\n        // 0x40de30\n        v59 = *v12;\n        int64_t v79 = *v15; // 0x40de35\n        *v23 = 0;\n        int64_t v80 = *v16; // 0x40de45\n        v30 = v59;\n        if (v80 < *v6) {\n            int64_t v81 = *v4; // 0x40de5f\n            *v15 = 8 * v79;\n            *v10 = 24 * v79;\n            int64_t * v82 = (int64_t *)(v81 + 48);\n            int64_t * v83 = (int64_t *)(v81 + 24);\n            int64_t * v84 = (int64_t *)(v81 + 40);\n            v45 = v80;\n            while (true) {\n              lab_0x40dfb9_2:\n                // 0x40dfb9\n                v46 = v45;\n                int64_t v85 = *v7 + 40 * v46; // 0x40dfc4\n                if (v79 != *(int64_t *)v85) {\n                    goto lab_0x40dfa8;\n                } else {\n                    // 0x40dfcd\n                    if (v59 != *(int64_t *)(v85 + 8)) {\n                        goto lab_0x40dfa8;\n                    } else {\n                        int64_t v86 = *(int64_t *)(v85 + 24); // 0x40dfd3\n                        int64_t v87 = *(int64_t *)(v85 + 16); // 0x40dfd7\n                        int64_t v88 = v86 - v87; // 0x40dfe3\n                        *v14 = v88;\n                        int64_t v89; // 0x40dbd0\n                        if (v88 == 0) {\n                            // 0x40de88\n                            v89 = *(int64_t *)(*v84 + 16 + *v10);\n                        } else {\n                            // 0x40dff1\n                            v89 = *v15 + *v83;\n                        }\n                        // 0x40dea7\n                        *v12 = 24 * *(int64_t *)v89 + *v82;\n                        int64_t v90 = v86 + v59 - v87; // 0x40deb3\n                        int64_t v91 = function_409d60(a1, v90 - 1, *v5); // 0x40deba\n                        int64_t v92 = 8 * v90; // 0x40dec4\n                        *v13 = 0;\n                        int64_t v93 = *v21; // 0x40ded7\n                        int64_t v94 = v93 + v92; // 0x40dede\n                        int64_t v95 = *(int64_t *)(v93 + *v24); // 0x40dee2\n                        int64_t v96 = *(int64_t *)v94; // 0x40dee6\n                        if (v95 != 0) {\n                            // 0x40deee\n                            *v13 = *(int64_t *)(v95 + 16);\n                        }\n                        if (v96 == 0) {\n                            // 0x40e018\n                            *v18 = v94;\n                            int64_t v97 = function_4092e0(v27, v81, (int64_t *)*v12, (int32_t)v91); // 0x40e02d\n                            int64_t v98 = *v21; // 0x40e037\n                            *(int64_t *)*v18 = v97;\n                            v52 = v98;\n                            v53 = v98;\n                            if (*(int64_t *)(v98 + v92) != 0) {\n                                goto lab_0x40df82;\n                            } else {\n                                goto lab_0x40e04c;\n                            }\n                        } else {\n                            // 0x40df00\n                            *v25 = (int32_t)v91;\n                            *v20 = v92;\n                            int64_t v99 = function_409150(v26, *(int64_t *)(v96 + 80), *v12, v91 & 0xffffffff); // 0x40df1a\n                            int32_t v100 = v99; // 0x40df28\n                            *v23 = v100;\n                            if (v100 != 0) {\n                                // 0x40e1f0\n                                free((int64_t *)*v28);\n                                result = (int64_t)*v23;\n                                goto lab_0x40e05b_7;\n                            }\n                            // 0x40df37\n                            *v18 = *v21 + *v20;\n                            *(int64_t *)*v18 = function_4092e0(v27, v81, v26, *v25);\n                            free((int64_t *)*v28);\n                            int64_t v101 = *v21; // 0x40df70\n                            v52 = v101;\n                            v53 = v101;\n                            if (*(int64_t *)(v101 + v92) == 0) {\n                                goto lab_0x40e04c;\n                            } else {\n                                goto lab_0x40df82;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        goto lab_0x40dc50_3;\n    }\n  lab_0x40e3b0_2:;\n    int64_t v102 = v48;\n    int64_t v103 = v50;\n    *v14 = v43;\n    if (*v57 > v49) {\n        goto lab_0x40de12_2;\n    } else {\n        // 0x40e3c5\n        v44 = v103;\n        v47 = v102;\n        v41 = v102;\n        v42 = v103;\n        if (v49 == 0) {\n            goto lab_0x40e223;\n        } else {\n            goto lab_0x40e21c;\n        }\n    }\n  lab_0x40e364:;\n    // 0x40e364\n    int64_t v104; // 0x40dbd0\n    int64_t v105 = v104 + 1; // 0x40e364\n    int64_t v106 = v105; // 0x40e36d\n    if (*v12 < v105) {\n        // break -> 0x40de12\n        goto lab_0x40de12_2;\n    }\n    goto lab_0x40e240;\n  lab_0x40dfa8:;\n    int64_t v130 = v46 + 1; // 0x40dfa8\n    v30 = v59;\n    int64_t v131 = v130; // 0x40dfb3\n    if (v130 >= *v6) {\n        // break -> 0x40dc50\n        goto lab_0x40dc50_3;\n    }\n    // 0x40dfb9\n    v45 = v131;\n    goto lab_0x40dfb9_2;\n  lab_0x40df82:\n    // 0x40df82\n    if (*v14 != 0) {\n        goto lab_0x40dfa8;\n    } else {\n        // 0x40df8a\n        if (*(int64_t *)(*(int64_t *)(*v24 + v52) + 16) > *v13) {\n            int64_t v132 = *v12; // 0x40e130\n            int64_t v133 = v132 + 16; // 0x40e13b\n            int64_t v134 = v132 + 8; // 0x40e13f\n            *v13 = v133;\n            int64_t v135 = function_409c10(a1, v134, v133, v59); // 0x40e14e\n            int32_t v136 = v135; // 0x40e153\n            *v23 = v136;\n            result = v135;\n            if (v136 != 0) {\n                // break (via goto) -> 0x40e05b\n                goto lab_0x40e05b_7;\n            }\n            int64_t v137 = function_40dbd0(a1, v134, *v13); // 0x40e170\n            int32_t v138 = v137; // 0x40e175\n            *v23 = v138;\n            result = v137;\n            if (v138 != 0) {\n                // break (via goto) -> 0x40e05b\n                goto lab_0x40e05b_7;\n            }\n            int64_t v139 = v46 + 1; // 0x40e184\n            v30 = v59;\n            v131 = v139;\n            if (v139 >= *v6) {\n                // break -> 0x40dc50\n                goto lab_0x40dc50_3;\n            }\n            // 0x40dfb9\n            v45 = v131;\n            goto lab_0x40dfb9_2;\n        } else {\n            goto lab_0x40dfa8;\n        }\n    }\n  lab_0x40e04c:;\n    uint32_t v140 = *v23; // 0x40e04c\n    v52 = v53;\n    if (v140 != 0) {\n        // 0x40e05b\n        result = v140;\n        goto lab_0x40e05b_7;\n    }\n    goto lab_0x40df82;\n  lab_0x40de12_2:;\n    int64_t v141 = *v13 + 1; // 0x40de12\n    *v13 = v141;\n    if (v141 >= *v8) {\n        // break -> 0x40de30\n        goto lab_0x40de30;\n    }\n    // 0x40de26\n    v40 = v141;\n    v51 = *(int64_t *)*v9;\n    goto lab_0x40ddeb;\n  lab_0x40e223:;\n    int64_t v142 = v42;\n    int64_t v122; // 0x40e2b5\n    int64_t v128; // 0x40e38c\n    int64_t v127; // 0x40e391\n    int64_t * v143; // 0x40dbd0\n    int64_t * v144; // 0x40dbd0\n    if (*v12 >= v142) {\n        int64_t * v126 = (int64_t *)(v55 + 16);\n        v143 = (int64_t *)(v55 + 24);\n        v144 = (int64_t *)(v55 + 40);\n        v106 = v142;\n        int64_t v145 = v41; // 0x40e236\n        while (true) {\n          lab_0x40e240:\n            // 0x40e240\n            v104 = v106;\n            if (v104 - *v58 >= 1) {\n                // 0x40e24b\n                int64_t * v107; // 0x40dbd0\n                int64_t v108 = *v107; // 0x40e24b\n                int64_t v109; // 0x40dbd0\n                int64_t v110; // 0x40dbd0\n                if (v108 > v110) {\n                    int64_t v111 = *v14;\n                    v109 = v111;\n                } else {\n                    // 0x40e3e0\n                    int64_t * v112; // 0x40dbd0\n                    uint64_t v113 = *v112; // 0x40e3e0\n                    if (v113 <= v110) {\n                        // break -> 0x40de12\n                        break;\n                    }\n                    int64_t v114 = function_4074b0(a1, v110 + 1 & 0xffffffff); // 0x40e3f1\n                    result = v114;\n                    if ((int32_t)v114 != 0) {\n                        // break (via goto) -> 0x40e05b\n                        goto lab_0x40e05b_7;\n                    }\n                    int64_t v115 = *v11; // 0x40e3fe\n                    *v14 = v115;\n                    v109 = v115;\n                }\n                int64_t v116 = v109; // 0x40e255\n                char v117 = *(char *)(v104 - 1 + v116); // 0x40e25e\n                char v118 = *(char *)(v116 + v110); // 0x40e264\n                if (v118 != v117) {\n                    // break -> 0x40de12\n                    break;\n                }\n            }\n            int64_t v119 = *(int64_t *)(*v21 + 8 * v104); // 0x40e278\n            if (v119 != 0) {\n                uint64_t v120 = *(int64_t *)(v119 + 16); // 0x40e285\n                if (v120 >= 1) {\n                    int64_t v121 = 0;\n                    v122 = *(int64_t *)(8 * v121 + *(int64_t *)(v119 + 24));\n                    int64_t v123 = 16 * v122 + *(int64_t *)*v9; // 0x40e2c0\n                    int64_t v124; // 0x40e2d8\n                    int64_t v125; // 0x40e2dc\n                    int64_t * mem; // 0x40e38c\n                    if (*(char *)(v123 + 8) == 9) {\n                        // 0x40e2c9\n                        if (*v10 == *(int64_t *)v123) {\n                            if (v122 == -1) {\n                                goto lab_0x40e364;\n                            } else {\n                                // 0x40e2d8\n                                v124 = *v126;\n                                v127 = *v58;\n                                v128 = v124;\n                                if (v124 == 0) {\n                                    // 0x40e378\n                                    *v18 = v125;\n                                    mem = calloc(24, (int32_t)(v104 - v125) + 1);\n                                    v128 = (int64_t)mem;\n                                    v127 = *v18;\n                                    *v126 = v128;\n                                    result = 12;\n                                    if (mem != NULL) {\n                                        goto lab_0x40e2e8;\n                                    } else {\n                                        goto lab_0x40e05b_7;\n                                    }\n                                } else {\n                                    goto lab_0x40e2e8;\n                                }\n                            }\n                        }\n                    }\n                    int64_t v129 = v121 + 1; // 0x40e2a8\n                    while (v120 != v129) {\n                        // 0x40e2b5\n                        v121 = v129;\n                        v122 = *(int64_t *)(8 * v121 + *(int64_t *)(v119 + 24));\n                        v123 = 16 * v122 + *(int64_t *)*v9;\n                        if (*(char *)(v123 + 8) == 9) {\n                            // 0x40e2c9\n                            if (*v10 == *(int64_t *)v123) {\n                                if (v122 == -1) {\n                                    goto lab_0x40e364;\n                                } else {\n                                    // 0x40e2d8\n                                    v124 = *v126;\n                                    v125 = *v58;\n                                    v127 = v125;\n                                    v128 = v124;\n                                    if (v124 == 0) {\n                                        // 0x40e378\n                                        *v18 = v125;\n                                        mem = calloc(24, (int32_t)(v104 - v125) + 1);\n                                        v128 = (int64_t)mem;\n                                        v127 = *v18;\n                                        *v126 = v128;\n                                        result = 12;\n                                        if (mem != NULL) {\n                                            goto lab_0x40e2e8;\n                                        } else {\n                                            goto lab_0x40e05b_7;\n                                        }\n                                    } else {\n                                        goto lab_0x40e2e8;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x40e2a8\n                        v129 = v121 + 1;\n                    }\n                }\n            }\n            goto lab_0x40e364;\n        }\n    }\n    goto lab_0x40de12_2;\n  lab_0x40e21c:\n    // 0x40e21c\n    v41 = v47;\n    v42 = v44 + 1;\n    goto lab_0x40e223;\n  lab_0x40dc50_3:\n    // 0x40dc50\n    v29 = *v3 + 1;\n    *v3 = v29;\n    if (v29 >= *(int64_t *)*(int64_t *)(v2 + 80)) {\n        // break -> 0x40e05b\n        goto lab_0x40e05b_7;\n    }\n    goto lab_0x40dc69;\n  lab_0x40dce0:\n    // 0x40dce0\n    v54 = *v6;\n    if (v54 > 0) {\n        int64_t v146 = *v7; // 0x40dcf5\n        int64_t v147 = v146 + 8; // 0x40dd0d\n        int64_t v148 = 0;\n        uint64_t v149 = v148 + v54; // 0x40dcf1\n        int64_t v150 = (v149 / 0x8000000000000000 + v149) / 2; // 0x40dd06\n        int64_t v151 = v150; // 0x40dd12\n        int64_t v152 = v54; // 0x40dd12\n        int64_t v153 = v150; // 0x40dd12\n        int64_t v154; // 0x40dbd0\n        int64_t v155; // 0x40dbd0\n        uint64_t v156; // 0x40dd20\n        int64_t v157; // 0x40dd2e\n        if (v31 <= *(int64_t *)(40 * v150 + v147)) {\n            v155 = v151;\n            v154 = v148;\n            if (v155 <= v148) {\n                // break (via goto) -> 0x40dd47\n                goto lab_0x40dd47;\n            }\n            // 0x40dd20\n            v156 = v155 + v148;\n            v157 = (v156 / 0x8000000000000000 + v156) / 2;\n            v152 = v155;\n            v153 = v157;\n            while (v31 <= *(int64_t *)(40 * v157 + v147)) {\n                // 0x40dd42\n                v155 = v157;\n                v154 = v148;\n                if (v155 <= v148) {\n                    // break (via goto) -> 0x40dd47\n                    goto lab_0x40dd47;\n                }\n                // 0x40dd20\n                v156 = v155 + v148;\n                v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                v152 = v155;\n                v153 = v157;\n            }\n        }\n        int64_t v158 = v152;\n        int64_t v159 = v153 + 1; // 0x40dd98\n        v154 = v159;\n        while (v159 < v158) {\n            // 0x40dcf1\n            v148 = v159;\n            v149 = v148 + v158;\n            v150 = (v149 / 0x8000000000000000 + v149) / 2;\n            v151 = v150;\n            v152 = v158;\n            v153 = v150;\n            if (v31 <= *(int64_t *)(40 * v150 + v147)) {\n                v155 = v151;\n                v154 = v148;\n                if (v155 <= v148) {\n                    // break (via goto) -> 0x40dd47\n                    goto lab_0x40dd47;\n                }\n                // 0x40dd20\n                v156 = v155 + v148;\n                v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                v152 = v155;\n                v153 = v157;\n                while (v31 <= *(int64_t *)(40 * v157 + v147)) {\n                    // 0x40dd42\n                    v155 = v157;\n                    v154 = v148;\n                    if (v155 <= v148) {\n                        // break (via goto) -> 0x40dd47\n                        goto lab_0x40dd47;\n                    }\n                    // 0x40dd20\n                    v156 = v155 + v148;\n                    v157 = (v156 / 0x8000000000000000 + v156) / 2;\n                    v152 = v155;\n                    v153 = v157;\n                }\n            }\n            // 0x40dd98\n            v158 = v152;\n            v159 = v153 + 1;\n            v154 = v159;\n        }\n      lab_0x40dd47:;\n        int64_t v160 = v154;\n        if (v54 > v160) {\n            int64_t v161 = v146 + 40 * v160; // 0x40dd57\n            int64_t v162 = v161; // 0x40dd5f\n            if (v160 != -1 == *(int64_t *)(v161 + 8) == v31) {\n                int64_t v163 = v162;\n                while (v32 != *(int64_t *)v163) {\n                    // 0x40dd70\n                    v162 = v163 + 40;\n                    if (*(char *)(v163 + 32) == 0) {\n                        goto lab_0x40dda8;\n                    }\n                    v163 = v162;\n                }\n                // 0x40dd7f\n                *v23 = 0;\n                v30 = v31;\n                goto lab_0x40dc50_3;\n            } else {\n                goto lab_0x40dda8;\n            }\n        } else {\n            goto lab_0x40dda8;\n        }\n    } else {\n        goto lab_0x40dda8;\n    }\n  lab_0x40dc29:\n    // 0x40dc29\n    v30 = v31;\n    if ((v35 & 0x2000) != 0 == (v36 & 2) == 0) {\n        goto lab_0x40dc50_3;\n    } else {\n        if ((char)(v34 / 256) > -1) {\n            goto lab_0x40dce0;\n        } else {\n            // 0x40dc3e\n            v30 = v31;\n            if ((v36 & 8) != 0) {\n                goto lab_0x40dce0;\n            } else {\n                goto lab_0x40dc50_3;\n            }\n        }\n    }\n  lab_0x40e2e8:\n    // 0x40e2e8\n    *(int64_t *)(v2 - 16) = 9;\n    int64_t v164 = function_40ca40(a1, v128, *v56, v127, v122, v104, (int64_t)&g81); // 0x40e2fb\n    int32_t v165 = v164; // 0x40e302\n    if (v165 == 1) {\n        goto lab_0x40e364;\n    } else {\n        // 0x40e307\n        result = v164;\n        if (v165 != 0) {\n            goto lab_0x40e05b_7;\n        } else {\n            int64_t v166 = *v143; // 0x40e30f\n            if (*v57 == v166) {\n                int64_t v167 = 2 * v166 | 1; // 0x40e40c\n                *v18 = v167;\n                int64_t * mem2 = realloc((int64_t *)*v144, 8 * (int32_t)v167); // 0x40e422\n                result = 12;\n                if (mem2 == NULL) {\n                    goto lab_0x40e05b_7;\n                } else {\n                    // 0x40e430\n                    *v144 = (int64_t)mem2;\n                    *v143 = *v18;\n                    goto lab_0x40e31d;\n                }\n            } else {\n                goto lab_0x40e31d;\n            }\n        }\n    }\n  lab_0x40e31d:;\n    int64_t * mem3 = calloc(1, 40); // 0x40e327\n    result = 12;\n    if (mem3 == NULL) {\n        goto lab_0x40e05b_7;\n    } else {\n        int64_t v168 = (int64_t)mem3; // 0x40e327\n        int64_t v169 = *v57; // 0x40e331\n        *(int64_t *)(*v144 + 8 * v169) = v168;\n        *mem3 = v122;\n        *(int64_t *)(v168 + 8) = v104;\n        *v57 = v169 + 1;\n        function_40da30(a1, v55, v168, *v15, *v12);\n        goto lab_0x40e364;\n    }\n}\n"
        },
        {
            "funcName": "function_40e450",
            "funcStartAddr": "40e450",
            "funcEndAddr": "40e607",
            "decompiledFuncCode": "int64_t function_40e450(int32_t * a1, int64_t * a2, int64_t a3) {\n    int64_t v1 = (int64_t)a2;\n    int64_t * v2 = (int64_t *)(v1 + 72); // 0x40e464\n    int64_t v3 = *v2; // 0x40e464\n    int64_t * v4 = (int64_t *)(v1 + 184); // 0x40e468\n    int64_t v5 = *(int64_t *)(v1 + 152); // 0x40e46f\n    int64_t v6 = 8 * v3; // 0x40e476\n    int64_t * v7 = (int64_t *)(v1 + 192); // 0x40e481\n    int64_t * v8 = (int64_t *)(*v4 + v6);\n    int64_t result; // 0x40e450\n    if (*v7 < v3) {\n        // 0x40e48a\n        *v8 = a3;\n        *v7 = v3;\n        result = a3;\n    } else {\n        int64_t v9 = *v8; // 0x40e4c0\n        if (v9 == 0) {\n            // 0x40e598\n            *v8 = a3;\n            result = a3;\n        } else {\n            int64_t v10 = *(int64_t *)(v9 + 80); // 0x40e4cc\n            int64_t v11; // bp-88, 0x40e450\n            if (a3 == 0) {\n                // 0x40e550\n                v11 = __asm_movaps(__asm_movdqu(*(int128_t *)v10));\n                int64_t v12 = function_409d60(v1, v3 - 1, *(int32_t *)(v1 + 160)); // 0x40e570\n                int64_t v13 = function_4092e0((int128_t *)a1, v5, &v11, (int32_t)v12); // 0x40e582\n                *v8 = v13;\n                result = v13;\n            } else {\n                int64_t v14 = *(int64_t *)(a3 + 80); // 0x40e4d5\n                int64_t v15; // 0x40e450\n                int32_t v16 = function_409150(&v11, v14, v10, v15); // 0x40e4e9\n                *a1 = v16;\n                if (v16 != 0) {\n                    // 0x40e4a5\n                    return 0;\n                }\n                int64_t v17 = function_409d60(v1, *v2 - 1, *(int32_t *)(v1 + 160)); // 0x40e506\n                int64_t v18 = function_4092e0((int128_t *)a1, v5, &v11, (int32_t)v17); // 0x40e527\n                *(int64_t *)(*v4 + v6) = v18;\n                result = v18;\n                if (v14 != 0) {\n                    // 0x40e540\n                    free((int64_t *)v15);\n                    result = v18;\n                }\n            }\n        }\n    }\n    // 0x40e497\n    if (*(int64_t *)(v5 + 152) == 0) {\n        // 0x40e4a5\n        return result;\n    }\n    // 0x40e5a8\n    if (result == 0) {\n        // 0x40e4a5\n        return 0;\n    }\n    int64_t v19 = result + 16; // 0x40e5ad\n    int64_t v20 = result + 24; // 0x40e5b1\n    int32_t v21 = function_409c10(v1, v19, v20, v3); // 0x40e5c6\n    *a1 = v21;\n    if (v21 != 0) {\n        // 0x40e4a5\n        return 0;\n    }\n    // 0x40e5ce\n    if ((*(char *)(result + 104) & 64) == 0) {\n        // 0x40e4a5\n        return result;\n    }\n    int32_t v22 = function_40dbd0(v1, v19, v20); // 0x40e5e6\n    *a1 = v22;\n    int64_t result2 = 0; // 0x40e5ec\n    if (v22 == 0) {\n        // 0x40e5ee\n        result2 = *(int64_t *)(*v4 + v6);\n    }\n    // 0x40e4a5\n    return result2;\n}\n"
        },
        {
            "funcName": "function_40e610",
            "funcStartAddr": "40e610",
            "funcEndAddr": "40e934",
            "decompiledFuncCode": "int64_t function_40e610(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)(a2 + 24); // 0x40e629\n    uint64_t v2 = *v1; // 0x40e629\n    int64_t * mem = malloc(8); // 0x40e643\n    if (mem == NULL) {\n        // 0x40e920\n        return 12;\n    }\n    // 0x40e656\n    int64_t v3; // bp-152, 0x40e610\n    int64_t v4 = &v3; // 0x40e625\n    int64_t v5 = (int64_t)mem; // 0x40e643\n    *mem = *(int64_t *)(a2 + 16);\n    int64_t v6 = v5; // 0x40e66e\n    int64_t v7; // 0x40e610\n    int64_t v8; // 0x40e610\n    int64_t v9; // 0x40e610\n    int64_t v10; // 0x40e610\n    int64_t * v11; // 0x40e610\n    int64_t * v12; // 0x40e610\n    int64_t v13; // 0x40e610\n    int64_t v14; // 0x40e6ce\n    int64_t * v15; // 0x40e6e9\n    int64_t * v16; // 0x40e610\n    int64_t v17; // 0x40e7be\n    if ((int32_t)v5 == 0) {\n        // 0x40e674\n        v6 = 0;\n        if (v2 >= 1) {\n            // 0x40e68e\n            v11 = (int64_t *)(v4 + 16);\n            int32_t * v18 = (int32_t *)(v4 + 28);\n            int32_t * v19 = (int32_t *)(a1 + 224);\n            int64_t * v20 = (int64_t *)(a1 + 152);\n            v12 = (int64_t *)(v4 + 8);\n            int64_t * v21 = (int64_t *)(v4 + 40);\n            int64_t * v22 = (int64_t *)(v4 + 48);\n            int64_t * v23 = (int64_t *)(v4 + 32);\n            v13 = a2 + 40;\n            int64_t v24 = v2; // 0x40e610\n            while (true) {\n                int64_t v25 = 8 * v24; // 0x40e691\n                *v11 = v25;\n                if (*(int64_t *)(v25 + a2) == 0) {\n                    uint32_t v26 = *v18 + 1; // 0x40e8e0\n                    *v18 = v26;\n                    if ((int64_t)*v19 < (int64_t)v26) {\n                        // break -> 0x40e8f6\n                        break;\n                    }\n                } else {\n                    // 0x40e6a9\n                    *v18 = 0;\n                    if (*v19 < 0) {\n                        // break -> 0x40e8f6\n                        break;\n                    }\n                }\n                int64_t v27 = *(int64_t *)(a1 + 184); // 0x40e6c2\n                v14 = v24 - 1;\n                *(int64_t *)(v4 + 72) = 0;\n                int64_t v28 = *(int64_t *)(v27 - 8 + *v11); // 0x40e6db\n                v9 = v27;\n                if (v28 != 0) {\n                    // 0x40e6e9\n                    v15 = (int64_t *)(v28 + 40);\n                    int64_t v29 = *v20; // 0x40e6ee\n                    v9 = v27;\n                    if (*v15 >= 1) {\n                        // 0x40e6fb\n                        *v12 = 0;\n                        int64_t * v30 = (int64_t *)v29; // 0x40e7ba\n                        v16 = (int64_t *)(v29 + 24);\n                        v7 = 0;\n                        while (true) {\n                          lab_0x40e7b1:\n                            // 0x40e7b1\n                            v17 = *(int64_t *)(8 * v7 + *(int64_t *)(v28 + 48));\n                            int64_t v31 = 16 * v17; // 0x40e7c5\n                            int64_t v32 = v31 + *v30; // 0x40e7c9\n                            v10 = v32;\n                            if ((*(char *)(v32 + 10) & 16) == 0) {\n                                goto lab_0x40e710;\n                            } else {\n                                int64_t v33 = *v20; // 0x40e7d6\n                                *v21 = v31;\n                                int64_t v34 = v33 + 216; // 0x40e7f2\n                                *v22 = v33;\n                                *v23 = *v1;\n                                int64_t v35 = function_40c7b0(*(int64_t *)v33, v34, v17, a1, v14); // 0x40e803\n                                int64_t v36 = *v21; // 0x40e808\n                                int32_t v37 = v35; // 0x40e80d\n                                int64_t v38 = v35 & 0xffffffff; // 0x40e80f\n                                if (v37 < 1) {\n                                    // 0x40e870\n                                    v8 = v38;\n                                    if (v37 != 0) {\n                                        goto lab_0x40e751;\n                                    } else {\n                                        // 0x40e876\n                                        v10 = *v30 + v36;\n                                        goto lab_0x40e710;\n                                    }\n                                } else {\n                                    int64_t v39 = (0x100000000 * v35 >> 32) + v14; // 0x40e816\n                                    v8 = v38;\n                                    if (*v23 < v39) {\n                                        goto lab_0x40e751;\n                                    } else {\n                                        int64_t v40 = *(int64_t *)(8 * v39 + v34); // 0x40e82c\n                                        if (v40 == 0) {\n                                            // 0x40e876\n                                            v10 = *v30 + v36;\n                                            goto lab_0x40e710;\n                                        } else {\n                                            // 0x40e835\n                                            *v23 = v36;\n                                            int64_t v41 = *(int64_t *)(*(int64_t *)(*v22 + 24) + 8 * v17); // 0x40e846\n                                            v8 = v38;\n                                            if (function_408030(*(int64_t *)(v40 + 16), v40 + 24, v41) != 0) {\n                                                goto lab_0x40e751;\n                                            } else {\n                                                // 0x40e858\n                                                v10 = *v30 + *v23;\n                                                goto lab_0x40e710;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n              lab_0x40e888:\n                // 0x40e888\n                v6 = v9;\n                if ((int32_t)v9 != 0) {\n                    goto lab_0x40e8b5_3;\n                }\n                // 0x40e89f\n                v24 = v14;\n                v6 = 0;\n                if (v14 == 0) {\n                    goto lab_0x40e8b5_3;\n                }\n            }\n            // 0x40e8f6\n            memset((int64_t *)a2, 0, (int32_t)*v11);\n            free((int64_t *)*(int64_t *)(v4 + 80));\n            return (int32_t)&g81 ^ (int32_t)&g81;\n        }\n    }\n  lab_0x40e8b5_3:;\n    int32_t * v42 = (int32_t *)(v4 + 8); // 0x40e8ba\n    *v42 = (int32_t)v6;\n    free((int64_t *)*(int64_t *)(v4 + 80));\n    return (int64_t)*v42;\n  lab_0x40e710:;\n    int64_t v43 = v10;\n    if ((char)function_409e50(a1, v43, v14) == 0) {\n        goto lab_0x40e79c;\n    } else {\n        int64_t v44 = *(int64_t *)(*v11 + v43); // 0x40e727\n        if (v44 == 0) {\n            goto lab_0x40e79c;\n        } else {\n            int64_t v45 = *(int64_t *)(*v16 + 8 * v17); // 0x40e73d\n            v8 = 1;\n            if (function_408030(*(int64_t *)(v44 + 16), v44 + 24, v45) == 0) {\n                goto lab_0x40e79c;\n            } else {\n                goto lab_0x40e751;\n            }\n        }\n    }\n  lab_0x40e79c:;\n    int64_t v46 = *v12 + 1; // 0x40e79c\n    *v12 = v46;\n    v7 = v46;\n    v9 = v46;\n    if (v46 >= *v15) {\n        // break -> 0x40e888\n        goto lab_0x40e888;\n    }\n    goto lab_0x40e7b1;\n  lab_0x40e751:\n    // 0x40e751\n    if (*(int64_t *)v13 == 0) {\n        goto lab_0x40e787;\n    } else {\n        int64_t v47 = *(int64_t *)(*v16 + 8 * v17); // 0x40e772\n        *(int64_t *)(v4 - 16) = v14;\n        int64_t v48 = *(int64_t *)(v4 + 56); // 0x40e777\n        int64_t v49 = function_4082c0(a1, v13, v48, v47, (0x100000000 * v8 >> 32) + v14, v17, (int64_t)&g81); // 0x40e77c\n        if ((char)v49 != 0) {\n            goto lab_0x40e79c;\n        } else {\n            goto lab_0x40e787;\n        }\n    }\n  lab_0x40e787:\n    // 0x40e787\n    v6 = 12;\n    if ((char)function_406a20(v4 + 64, v17) == 0) {\n        goto lab_0x40e8b5_3;\n    }\n    goto lab_0x40e79c;\n}\n"
        },
        {
            "funcName": "function_40e940",
            "funcStartAddr": "40e940",
            "funcEndAddr": "4108c9",
            "decompiledFuncCode": "int64_t function_40e940(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, uint64_t a7, int64_t a8, int64_t a9) {\n    // 0x40e940\n    int64_t v1; // 0x40e940\n    int64_t v2 = v1;\n    int64_t v3; // bp-312, 0x40e940\n    __asm_rep_stosq_memset((char *)&v3, 0, 32);\n    int64_t v4 = *(int64_t *)(a1 + 32); // 0x40e98c\n    char * v5 = (char *)v4; // 0x40e998\n    char * v6 = v5; // 0x40e9a0\n    if (v4 != 0) {\n        unsigned char v7 = *(char *)(a1 + 56); // 0x40e9a2\n        v6 = NULL;\n        if (a4 != a5 && (v7 & 8) != 0) {\n            // 0x40e9b8\n            v6 = v7 % 2 == 0 ? v5 : NULL;\n        }\n    }\n    int64_t * v8 = (int64_t *)(a1 + 48); // 0x40e9d5\n    uint64_t v9 = *v8; // 0x40e9d5\n    int64_t v10 = 0; // 0x40e9e1\n    int64_t v11 = a7; // 0x40e9e1\n    if (v9 < a7) {\n        // 0x40e9e3\n        v10 = -1 - v9 + a7;\n        v11 = v9 + 1;\n    }\n    int64_t v12 = *(int64_t *)(a1 + 16); // 0x40ea0d\n    if (v12 == 0) {\n        // 0x40f3b0\n        return 1;\n    }\n    int64_t * v13 = (int64_t *)(a1 + 72); // 0x40ea1d\n    int64_t v14 = *v13; // 0x40ea1d\n    if (v14 == 0) {\n        // 0x40f3b0\n        return 1;\n    }\n    int64_t * v15 = (int64_t *)(a1 + 80); // 0x40ea2a\n    int64_t v16 = *v15; // 0x40ea2a\n    if (v16 == 0) {\n        // 0x40f3b0\n        return 1;\n    }\n    int64_t * v17 = (int64_t *)(a1 + 88); // 0x40ea37\n    int64_t v18 = *v17; // 0x40ea37\n    if (v18 == 0) {\n        // 0x40f3b0\n        return 1;\n    }\n    int64_t * v19 = (int64_t *)(a1 + 96); // 0x40ea44\n    if (*v19 == 0) {\n        // 0x40f3b0\n        return 1;\n    }\n    int64_t v20 = a4; // 0x40ea54\n    int64_t v21 = a5; // 0x40ea54\n    if (*(int64_t *)(v14 + 16) != 0) {\n        goto lab_0x40ea88;\n    } else {\n        // 0x40ea56\n        v20 = a4;\n        v21 = a5;\n        if (*(int64_t *)(v16 + 16) != 0) {\n            goto lab_0x40ea88;\n        } else {\n            // 0x40ea5d\n            if (*(int64_t *)(v18 + 16) == 0) {\n                goto lab_0x40ea6a;\n            } else {\n                // 0x40ea64\n                if (*(char *)(a1 + 56) < 0) {\n                    goto lab_0x40ea88;\n                } else {\n                    goto lab_0x40ea6a;\n                }\n            }\n        }\n    }\n  lab_0x40f390_9:;\n    // 0x40f390\n    int64_t v22; // 0x40e940\n    free((int64_t *)v22);\n    int64_t * v23; // 0x40e940\n    int64_t v24; // 0x40e940\n    int64_t v25; // 0x40e940\n    if (*v23 != 0) {\n        // 0x40fba8\n        function_407ca0(&v3);\n        free((int64_t *)v24);\n        free((int64_t *)v25);\n    }\n    // 0x40f3a8\n    function_407c60(&v3);\n    // 0x40f3b0\n    int64_t v26; // 0x40e940\n    return v26 & 0xffffffff;\n  lab_0x40f8f8_3:;\n    // 0x40f8f8\n    int32_t v27; // 0x40e940\n    int32_t v28 = v27; // bp-392, 0x40f8f8\n    int32_t v29; // 0x40e940\n    int32_t v30 = v29; // 0x40f902\n    int64_t v31; // 0x40e940\n    int64_t v32 = v31; // 0x40f902\n    int64_t v33 = 0; // 0x40f902\n    int64_t v34; // 0x40e940\n    int64_t v35 = v34; // 0x40f902\n    int64_t v36; // 0x40e940\n    int64_t v37 = v36; // 0x40f902\n    int64_t v38; // 0x40e940\n    int64_t v39 = v38; // 0x40f902\n    int64_t * v40; // 0x40e940\n    v23 = v40;\n    v26 = 12;\n    int64_t v41; // 0x40e940\n    v25 = v41;\n    int64_t v42; // 0x40e940\n    v24 = v42;\n    v22 = 0;\n    int64_t v43; // 0x40e940\n    if (v43 == 0) {\n        goto lab_0x40f390_9;\n    } else {\n        goto lab_0x40f0e8;\n    }\n  lab_0x40f18f:;\n    // 0x40f18f\n    int64_t v44; // 0x40e940\n    int64_t v45 = v44;\n    int64_t v46; // 0x40e940\n    int64_t v47 = v46;\n    int64_t v48; // 0x40e940\n    int64_t v49 = v48;\n    int32_t v50; // 0x40e940\n    int32_t v51 = v50;\n    v23 = v40;\n    v26 = 12;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    int64_t v52; // 0x40e940\n    int64_t v53 = v52; // 0x40e940\n    int128_t v54; // 0x40e940\n    int128_t v55 = v54; // 0x40e940\n    int64_t v56; // 0x40e940\n    int64_t v57 = v56; // 0x40e940\n    int32_t v58; // 0x40e940\n    int64_t v59; // 0x40e940\n    int64_t v60; // 0x40e940\n    int64_t v61; // 0x40e940\n    int64_t v62; // 0x40e940\n    int64_t v63; // 0x40e940\n    int64_t v64; // 0x40e940\n    int64_t v65; // 0x40e940\n    int64_t v66; // 0x40e940\n    int64_t v67; // bp-376, 0x40e940\n    int64_t v68; // 0x40e940\n    int64_t * mem; // 0x40fa0f\n    int64_t v69; // 0x40e940\n    int64_t * mem2; // 0x40fa36\n    int64_t v70; // 0x40fa36\n    int128_t v71; // 0x40fa5e\n    int64_t v72; // 0x40eb3d\n    char * v73; // 0x40e940\n    char * v74; // 0x40e940\n    int64_t v75; // 0x40e940\n    int128_t v76; // 0x40e940\n    switch (v45) {\n        case -1: {\n            goto lab_0x40f7f0;\n        }\n        case -2: {\n            goto lab_0x40f390_9;\n        }\n        default: {\n            // 0x40f1a3\n            int64_t v77; // 0x40e940\n            if (v11 < 2 | (*v73 & 16) != 0) {\n                // 0x40f360\n                v65 = v45;\n                v64 = v43;\n                if (*v40 == 0) {\n                    goto lab_0x40f373_2;\n                }\n                int64_t v78 = *(int64_t *)(8 * v45 + v43); // 0x40f9be\n                int64_t v79 = function_409f80(&v3, *(int64_t *)(v78 + 16), v78 + 24, v45); // 0x40f9ca\n                v77 = v79;\n            } else {\n                int64_t v80 = *(int64_t *)(8 * v45 + v43); // 0x40f1d7\n                int64_t v81 = function_409f80(&v3, *(int64_t *)(v80 + 16), v80 + 24, v45); // 0x40f1e3\n                v77 = v81;\n                if (*v74 % 2 == 0) {\n                    // 0x40f205\n                    v65 = v45;\n                    v64 = v43;\n                    v77 = v81;\n                    if (*v40 == 0) {\n                        goto lab_0x40f373_2;\n                    }\n                }\n            }\n            // 0x40f9df\n            if (v45 >= 0x1fffffffffffffff) {\n                // break -> 0x40f390\n                break;\n            }\n            int64_t v82 = v45 + 1; // 0x40f9ff\n            int32_t size = 8 * (int32_t)v82; // 0x40fa0f\n            mem = malloc(size);\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            if (mem == NULL) {\n                // break -> 0x40f390\n                break;\n            }\n            int64_t v83 = v77;\n            v69 = (int64_t)mem;\n            if (*v40 == 0) {\n                int128_t v84 = __asm_pxor(v54, v54); // 0x40f770\n                v67 = v69;\n                __asm_movaps(v84);\n                int64_t v85 = function_40e610(v72, v75); // 0x40f7b7\n                free(NULL);\n                int32_t v86 = v85;\n                v58 = v86;\n                v68 = 0;\n                v66 = v83;\n                v76 = v84;\n                v63 = v85;\n                if (v86 != 0) {\n                    goto lab_0x40ffa2;\n                } else {\n                    // 0x40f7d5\n                    v60 = v45;\n                    if (*mem != 0) {\n                        goto lab_0x40fb48;\n                    }\n                    // 0x40f7df\n                    free(mem);\n                    v53 = v83;\n                    v55 = v84;\n                    v57 = v69;\n                    goto lab_0x40f7f0;\n                }\n            } else {\n                // 0x40fa33\n                mem2 = malloc(size);\n                v70 = (int64_t)mem2;\n                int64_t v87 = v45; // 0x40fa46\n                if (mem2 == NULL) {\n                    // 0x40ffe4\n                    free(mem);\n                    v23 = v40;\n                    v26 = 12;\n                    v25 = v41;\n                    v24 = v42;\n                    v22 = v43;\n                    goto lab_0x40f390_9;\n                }\n                v61 = v83;\n                v62 = v82;\n                int128_t v88 = v54;\n                memset(mem2, 0, 8 * (int32_t)v62);\n                v71 = __asm_pxor(v88, v88);\n                __asm_movaps(v71);\n                v67 = v69;\n                int64_t v89 = function_40e610(v72, v75); // 0x40faa1\n                free(NULL);\n                int32_t v90 = v89;\n                v58 = v90;\n                v68 = v70;\n                v66 = v61;\n                v76 = v71;\n                v63 = v89;\n                while (v90 == 0) {\n                    // 0x40fac3\n                    v59 = v87;\n                    if (*mem != 0) {\n                        goto lab_0x40fb1d_2;\n                    }\n                    // 0x40fac9\n                    if (*mem2 != 0) {\n                        goto lab_0x40fb1d_2;\n                    }\n                    int64_t v91 = v59; // 0x40fae8\n                    if (v59 == 0) {\n                        goto lab_0x40fbd0_2;\n                    }\n                    int64_t v92; // 0x40e940\n                    int64_t v93; // 0x40e940\n                    int64_t v94; // 0x40faee\n                    while (true) {\n                        // 0x40faee\n                        v92 = v91;\n                        v93 = v92 - 1;\n                        v94 = *(int64_t *)(8 * v93 + v43);\n                        if (v94 != 0) {\n                            // 0x40faf7\n                            if ((*(char *)(v94 + 104) & 16) != 0) {\n                                // break -> 0x40fafd\n                                break;\n                            }\n                        }\n                        // 0x40fae0\n                        v91 = v93;\n                        if (v93 == 0) {\n                            goto lab_0x40fbd0_2;\n                        }\n                    }\n                    int64_t v95 = function_409f80(&v3, *(int64_t *)(v94 + 16), v94 + 24, v93); // 0x40fb10\n                    v87 = v93;\n                    v61 = v95;\n                    v62 = v92;\n                    v88 = v71;\n                    memset(mem2, 0, 8 * (int32_t)v62);\n                    v71 = __asm_pxor(v88, v88);\n                    __asm_movaps(v71);\n                    v67 = v69;\n                    v89 = function_40e610(v72, v75);\n                    free(NULL);\n                    v90 = v89;\n                    v58 = v90;\n                    v68 = v70;\n                    v66 = v61;\n                    v76 = v71;\n                    v63 = v89;\n                }\n                goto lab_0x40ffa2;\n            }\n        }\n    }\n  lab_0x40f60e:;\n    // 0x40f60e\n    int64_t v96; // 0x40e940\n    int64_t v97 = v96 + 1; // 0x40f60e\n    int64_t v98; // 0x40e940\n    int64_t v99 = v98; // 0x40f616\n    int64_t v100; // 0x40e940\n    int64_t v101 = v100; // 0x40f616\n    int64_t v102; // 0x40e940\n    int64_t v103 = v102; // 0x40f616\n    int64_t v104; // 0x40e940\n    int64_t v105 = v104; // 0x40f616\n    int64_t v106; // 0x40e940\n    int64_t v107 = v106; // 0x40f616\n    int64_t v108 = v97; // 0x40f616\n    int64_t v109 = v98; // 0x40f616\n    int64_t v110 = v102; // 0x40f616\n    int64_t v111 = v106; // 0x40f616\n    int64_t v112 = v104; // 0x40f616\n    int64_t v113 = v106; // 0x40f616\n    int64_t v114 = v36; // 0x40f616\n    int64_t v115; // 0x40e940\n    int64_t v116 = v115; // 0x40f616\n    int64_t * v117; // 0x40f4a0\n    if (v97 >= *v117) {\n        // break -> 0x40f963\n        goto lab_0x40f963;\n    }\n    goto lab_0x40f61c;\n  lab_0x40f500:;\n    // 0x40f500\n    int64_t v118; // 0x40e940\n    int64_t v120; // 0x40f624\n    int64_t v134 = function_40c7b0(v36, a1 + 216, v120, v72, v118); // 0x40f50e\n    int64_t v119; // 0x40e940\n    v98 = v119;\n    v100 = v72;\n    v102 = v120;\n    v104 = v36;\n    int64_t v135; // 0x40e940\n    v106 = v135;\n    v115 = v120;\n    int64_t v136; // 0x40e940\n    int64_t v137; // 0x40e940\n    int64_t v138; // 0x40e940\n    int64_t v139; // 0x40e940\n    int32_t v140; // bp-388, 0x40e940\n    int64_t v141; // 0x40f56e\n    int64_t * v142; // 0x40eab2\n    int32_t v126; // 0x40e940\n    int64_t v143; // 0x40e940\n    if ((int32_t)v134 == 0) {\n        goto lab_0x40f60e;\n    } else {\n        int64_t v144 = (0x100000000 * v134 >> 32) + v135; // 0x40f51e\n        int32_t v145 = function_407600(v72, v144);\n        v140 = v145;\n        v27 = v145;\n        v31 = v119;\n        v34 = v118;\n        v38 = v120;\n        if (v145 != 0) {\n            goto lab_0x40f8f8_3;\n        }\n        int64_t v146 = 8 * v144; // 0x40f566\n        v141 = v146 + v43;\n        int64_t v147 = *v8 + 24 * *(int64_t *)(*v142 + 8 * v120); // 0x40f57e\n        int64_t * v148 = (int64_t *)v141; // 0x40f582\n        int64_t v149 = *v148; // 0x40f582\n        if (v149 == 0) {\n            // 0x40f6a0\n            v67 = __asm_movaps(__asm_movdqu(*(int128_t *)v147));\n            int64_t v150 = *(int64_t *)(v147 + 16); // 0x40f6b3\n            int64_t v151 = function_409d60(v72, v144 - 1, v126); // 0x40f6c6\n            int64_t v152 = v151 & 0xffffffff; // 0x40f6de\n            int64_t v153 = function_4092e0((int128_t *)&v140, a1, &v67, (int32_t)v151); // 0x40f6e0\n            *v148 = v153;\n            v98 = v150;\n            v100 = v152;\n            v102 = v43;\n            v104 = v143;\n            v106 = v135;\n            v115 = v146;\n            v139 = v150;\n            v137 = v152;\n            v138 = v143;\n            v136 = v146;\n            if (v153 != 0) {\n                goto lab_0x40f60e;\n            } else {\n                goto lab_0x40f700;\n            }\n        } else {\n            int64_t v154 = function_409150(&v67, *(int64_t *)(v149 + 80), v147, v72); // 0x40f59a\n            int32_t v155 = v154;\n            v140 = v155;\n            v27 = v155;\n            v31 = v119;\n            v34 = v141;\n            v38 = v146;\n            if (v155 != 0) {\n                goto lab_0x40f8f8_3;\n            }\n            int64_t v156 = function_409d60(v72, v144 - 1, v126); // 0x40f5bc\n            int64_t v157 = v156 & 0xffffffff; // 0x40f5d4\n            int64_t v158 = function_4092e0((int128_t *)&v140, a1, &v67, (int32_t)v156); // 0x40f5de\n            *v148 = v158;\n            free((int64_t *)v119);\n            v98 = v119;\n            v100 = v157;\n            v102 = v43;\n            v104 = v119;\n            v106 = v135;\n            v115 = v141;\n            v139 = v119;\n            v137 = v157;\n            v138 = v119;\n            v136 = v141;\n            if (*v148 == 0) {\n                goto lab_0x40f700;\n            } else {\n                goto lab_0x40f60e;\n            }\n        }\n    }\n  lab_0x40f4e1:;\n    // 0x40f4e1\n    int64_t v131; // 0x40e940\n    int64_t v159 = v131;\n    v98 = v119;\n    int64_t v128; // 0x40f674\n    v100 = v128;\n    v102 = v159;\n    v104 = v72;\n    v106 = v118;\n    v115 = v120;\n    uint64_t v124; // 0x40f638\n    uint64_t v125; // 0x40f65e\n    int64_t v127; // 0x40f66f\n    if ((v124 & 0x2000) != 0 == (v125 & 2) == 0) {\n        goto lab_0x40f60e;\n    } else {\n        uint32_t v160 = (int32_t)v127 & 128; // 0x40f4ee\n        if (v160 == 0) {\n            goto lab_0x40f500;\n        } else {\n            // 0x40f4f6\n            v98 = v119;\n            v100 = v160;\n            v102 = v159;\n            v104 = v72;\n            v106 = v118;\n            v115 = v120;\n            if ((v125 & 8) == 0) {\n                goto lab_0x40f60e;\n            } else {\n                goto lab_0x40f500;\n            }\n        }\n    }\n  lab_0x40f700:\n    // 0x40f700\n    v98 = v139;\n    v100 = v137;\n    v102 = v43;\n    v104 = v138;\n    v106 = v135;\n    v115 = v136;\n    v27 = v140;\n    v31 = v139;\n    v34 = v141;\n    v38 = v136;\n    if (v140 != 0) {\n        goto lab_0x40f8f8_3;\n    }\n    goto lab_0x40f60e;\n  lab_0x40f373_2:\n    // 0x40f373\n    v23 = v40;\n    int64_t v161; // 0x40eec5\n    v26 = v161;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    int64_t v162; // 0x40e940\n    int64_t v163; // 0x40e940\n    int64_t v164; // 0x40e940\n    int64_t v165; // 0x40fd37\n    if (v11 != 0) {\n        // 0x40fd18\n        v164 = a8 + 16;\n        v165 = 16 * v11 + a8;\n        v162 = v164;\n        if (v11 < 2) {\n            // 0x410024\n            *(int64_t *)a8 = 0;\n            *(int64_t *)(a8 + 8) = v65;\n            v163 = 0;\n            goto lab_0x40fdf2;\n        } else {\n            goto lab_0x40fd50;\n        }\n    } else {\n        goto lab_0x40f390_9;\n    }\n  lab_0x40fb48:\n    // 0x40fb48\n    free((int64_t *)v43);\n    v65 = v60;\n    v64 = v69;\n    goto lab_0x40f373_2;\n  lab_0x40fb1d_2:;\n    int64_t v166 = function_4097d0(a1, v69, v70, v62); // 0x40fb2b\n    free(mem2);\n    int32_t v167 = v166;\n    v60 = v59;\n    v58 = v167;\n    v68 = 0;\n    v66 = v61;\n    v76 = v71;\n    v63 = v166;\n    if (v167 != 0) {\n        goto lab_0x40ffa2;\n    } else {\n        goto lab_0x40fb48;\n    }\n  lab_0x40fbd0_2:\n    // 0x40fbd0\n    free(mem);\n    free(mem2);\n    function_407ca0(&v3);\n    int32_t v168 = v51; // 0x40fbf0\n    int64_t v169 = v61; // 0x40fbf0\n    int128_t v170 = v71; // 0x40fbf0\n    int64_t v171; // bp-384, 0x40e940\n    int64_t v172 = v171; // 0x40fbf0\n    int64_t v173 = v49; // 0x40fbf0\n    int64_t v174 = v47; // 0x40fbf0\n    int64_t v175 = v69; // 0x40fbf0\n    goto lab_0x40f800;\n  lab_0x40f0b4:;\n    // 0x40f0b4\n    int64_t v291; // 0x40e940\n    int64_t v404 = v291;\n    int64_t v292; // 0x40e940\n    int32_t v405 = (int32_t)v292 + 1; // 0x40f0b8\n    int64_t v324; // 0x40e940\n    int64_t v406 = (int64_t)*(char *)(v292 + v324); // 0x40f0c8\n    int64_t v281; // 0x40e940\n    int64_t v407 = *(int64_t *)(v281 + 88); // 0x40f0cc\n    int64_t v293; // 0x40e940\n    int64_t v408 = v293; // 0x40f0d3\n    int64_t v409 = v407; // 0x40f0d3\n    int64_t v410; // 0x40e940\n    int64_t v411; // 0x40e940\n    int64_t v412; // 0x40e940\n    int64_t v345; // 0x40e940\n    if (v407 == 0) {\n        int64_t v413 = *(int64_t *)(v281 + 96); // 0x40f718\n        while (v413 == 0) {\n            // 0x40f910\n            int64_t v414; // 0x40e940\n            int64_t v415; // 0x40e940\n            if ((char)function_40aa70(a1, v281, v404, v415, v414) == 0) {\n                // 0x40f928\n                v28 = 12;\n                v30 = v405;\n                int64_t v416; // 0x40e940\n                v32 = v416;\n                v33 = 0;\n                v35 = v414;\n                int64_t v417; // 0x40e940\n                v37 = v417;\n                int64_t v418; // 0x40e940\n                v39 = v418;\n                v23 = v40;\n                v26 = 12;\n                v25 = v41;\n                v24 = v42;\n                v22 = 0;\n                if (v43 != 0) {\n                    goto lab_0x40f0e8;\n                } else {\n                    goto lab_0x40f390_9;\n                }\n            }\n            // 0x40f0cc\n            int64_t * v419; // 0x40f0cc\n            int64_t v420 = *v419; // 0x40f0cc\n            v408 = a1;\n            v409 = v420;\n            if (v420 != 0) {\n                goto lab_0x40f0d9;\n            }\n            v413 = *(int64_t *)(v281 + 96);\n        }\n        int64_t v421 = v413 + 8 * v406;\n        int64_t v422 = function_409d60(v72, (int64_t)v405 - 1, v126) % 2 == 0 ? v421 : v421 + 2048;\n        v412 = v345;\n        v410 = v422;\n        v411 = v72;\n    } else {\n      lab_0x40f0d9:\n        // 0x40f0d9\n        v412 = v404;\n        v410 = v409 + 8 * v406;\n        v411 = v408;\n    }\n    int64_t v423 = *(int64_t *)v410;\n    v30 = v405;\n    int64_t v290; // 0x40e940\n    v32 = v290;\n    v33 = v423;\n    int64_t v294; // 0x40e940\n    v35 = v294;\n    int64_t v295; // 0x40e940\n    v37 = v295;\n    int64_t v296; // 0x40e940\n    v39 = v296;\n    int32_t v424 = v405; // 0x40f0e6\n    int64_t v425 = v290; // 0x40f0e6\n    int64_t v426 = v412; // 0x40f0e6\n    int64_t v427 = v423; // 0x40f0e6\n    int64_t v428 = v411; // 0x40f0e6\n    int64_t v429 = v294; // 0x40f0e6\n    int64_t v430 = v295; // 0x40f0e6\n    int64_t v431 = v296; // 0x40f0e6\n    if (v43 == 0) {\n        goto lab_0x40f0fe;\n    } else {\n        goto lab_0x40f0e8;\n    }\n  lab_0x40f4a0:;\n    // 0x40f4a0\n    int64_t v298; // 0x40e940\n    int64_t v432 = v298;\n    int64_t v297; // 0x40e940\n    int64_t v433 = v297;\n    v117 = (int64_t *)(v281 + 16);\n    int64_t v276; // 0x40e940\n    v109 = v276;\n    int64_t v277; // 0x40e940\n    v110 = v277;\n    v111 = v433;\n    v112 = v432;\n    int64_t v279; // 0x40e940\n    v113 = v279;\n    int64_t v280; // 0x40e940\n    v114 = v280;\n    int64_t v282; // 0x40e940\n    v116 = v282;\n    int64_t v283; // 0x40f079\n    if (*v117 >= 1) {\n        int64_t * v121 = (int64_t *)(v281 + 24); // 0x40f61c\n        v135 = v29;\n        v99 = v276;\n        v101 = v283;\n        v103 = v277;\n        v105 = v432;\n        v107 = v433;\n        v108 = 0;\n        while (true) {\n          lab_0x40f61c:\n            // 0x40f61c\n            v96 = v108;\n            v118 = v107;\n            v36 = v105;\n            v119 = v99;\n            v120 = *(int64_t *)(*v121 + 8 * v96);\n            int64_t v122 = 16 * v120 + v36; // 0x40f62f\n            v98 = v119;\n            v100 = v101;\n            v102 = v103;\n            v104 = v36;\n            v106 = v118;\n            v115 = v120;\n            if ((*(char *)(v122 + 10) & 16) == 0) {\n                goto lab_0x40f60e;\n            } else {\n                uint32_t v123 = *(int32_t *)(v122 + 8); // 0x40f638\n                if ((v123 & 0x3ff00) == 0) {\n                    goto lab_0x40f500;\n                } else {\n                    // 0x40f647\n                    v124 = (int64_t)v123;\n                    v125 = function_409d60(v72, v118, v126);\n                    v127 = v124 / 256;\n                    v128 = v127 & 0xff03ff;\n                    if ((v124 & 1024) != 0) {\n                        // 0x40f4d0\n                        v98 = v119;\n                        v100 = v128;\n                        v102 = v127;\n                        v104 = v72;\n                        v106 = v118;\n                        v115 = v120;\n                        if (v125 % 2 == 0) {\n                            goto lab_0x40f60e;\n                        } else {\n                            uint32_t v129 = (int32_t)v127 & 8; // 0x40f4d8\n                            int64_t v130 = v129; // 0x40f4d8\n                            v131 = v130;\n                            v98 = v119;\n                            v100 = v128;\n                            v102 = v130;\n                            v104 = v72;\n                            v106 = v118;\n                            v115 = v120;\n                            if (v129 != 0) {\n                                goto lab_0x40f60e;\n                            } else {\n                                goto lab_0x40f4e1;\n                            }\n                        }\n                    } else {\n                        uint32_t v132 = (int32_t)v127 & 8; // 0x40f682\n                        int64_t v133 = v132; // 0x40f682\n                        v131 = v133;\n                        v98 = v119;\n                        v100 = v128;\n                        v102 = v133;\n                        v104 = v72;\n                        v106 = v118;\n                        v115 = v120;\n                        if (v132 == 0 || v125 % 2 == 0) {\n                            goto lab_0x40f4e1;\n                        } else {\n                            goto lab_0x40f60e;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40f963:\n    // 0x40f963\n    v28 = 0;\n    v290 = v109;\n    v291 = v110;\n    v292 = v111;\n    v293 = v112;\n    v294 = v113;\n    v295 = v114;\n    v296 = v116;\n    goto lab_0x40f0b4;\n  lab_0x40f0fe:;\n    int64_t v434 = v431;\n    int64_t v435 = v430;\n    int64_t v436 = v429;\n    int64_t v437 = v425;\n    int32_t v438 = v424;\n    int32_t v439 = v438; // 0x40f101\n    int64_t v440 = v426; // 0x40f101\n    int64_t v441 = v427; // 0x40f101\n    int64_t v442 = v428; // 0x40f101\n    int64_t v264; // 0x40e940\n    int64_t v262; // 0x40e940\n    int64_t v263; // 0x40e940\n    int32_t v260; // 0x40e940\n    int64_t v261; // 0x40e940\n    int64_t v259; // 0x40e940\n    int64_t v275; // 0x40e940\n    int64_t v258; // 0x40e940\n    int64_t v274; // 0x40e940\n    int64_t v273; // 0x40e940\n    int32_t v257; // 0x40e940\n    int32_t v271; // 0x40e940\n    int64_t v346; // 0x40e940\n    char v347; // 0x40e940\n    if (v427 == 0) {\n        // 0x40f107\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v28 != 0) {\n            // break (via goto) -> 0x40f390\n            goto lab_0x40f390_9;\n        }\n        // 0x40f11e\n        v257 = v271;\n        v258 = v274;\n        v259 = v275;\n        v260 = v438;\n        v261 = v437;\n        v262 = v436;\n        v263 = v435;\n        v264 = v434;\n        if (v43 == 0) {\n            // break -> 0x40f17d\n            goto lab_0x40f17d_6;\n        }\n        int32_t v443 = v438; // 0x40f136\n        v257 = v271;\n        v258 = v274;\n        v259 = v275;\n        v260 = v438;\n        v261 = v437;\n        v262 = v436;\n        v263 = v435;\n        v264 = v434;\n        if ((v347 & (char)v273) != 0) {\n            // break -> 0x40f17d\n            goto lab_0x40f17d_6;\n        }\n        int32_t v444 = v443;\n        v257 = v271;\n        v258 = v274;\n        v259 = v275;\n        v260 = v444;\n        v261 = v437;\n        v262 = v436;\n        v263 = v435;\n        v264 = v434;\n        if (v444 > -1) {\n            // break (via goto) -> 0x40f17d\n            goto lab_0x40f17d_6;\n        }\n        int64_t v445 = (int64_t)v444 + 1;\n        int64_t v446; // 0x40f163\n        while (*(int64_t *)(8 * v445 + v43) == 0) {\n            // 0x40f163\n            v446 = v445 + 1;\n            v257 = v271;\n            v258 = v274;\n            v259 = v275;\n            v260 = 0;\n            v261 = v437;\n            v262 = v436;\n            v263 = v435;\n            v264 = v434;\n            if (v446 > 0) {\n                // break (via goto) -> 0x40f17d\n                goto lab_0x40f17d_6;\n            }\n            v445 = v446;\n        }\n        int64_t v447 = function_40e450(&v28, &v3, 0); // 0x40f3e5\n        uint32_t v448 = v28; // 0x40f3ea\n        int32_t v449 = v445;\n        while (v448 == 0) {\n            // 0x40f3f5\n            v443 = v449;\n            if (v447 != 0) {\n                // 0x40f010\n                v439 = v449;\n                v440 = v448;\n                v441 = v447;\n                v442 = v346;\n                goto lab_0x40f010_2;\n            }\n            v444 = v443;\n            v257 = v271;\n            v258 = v274;\n            v259 = v275;\n            v260 = v444;\n            v261 = v437;\n            v262 = v436;\n            v263 = v435;\n            v264 = v434;\n            if (v444 > -1) {\n                // break (via goto) -> 0x40f17d\n                goto lab_0x40f17d_6;\n            }\n            // 0x40f150\n            v445 = (int64_t)v444 + 1;\n            while (*(int64_t *)(8 * v445 + v43) == 0) {\n                // 0x40f163\n                v446 = v445 + 1;\n                v257 = v271;\n                v258 = v274;\n                v259 = v275;\n                v260 = 0;\n                v261 = v437;\n                v262 = v436;\n                v263 = v435;\n                v264 = v434;\n                if (v446 > 0) {\n                    // break (via goto) -> 0x40f17d\n                    goto lab_0x40f17d_6;\n                }\n                v445 = v446;\n            }\n            // 0x40f3d0\n            v447 = function_40e450(&v28, &v3, 0);\n            v448 = v28;\n            v449 = v445;\n        }\n        // 0x40f410\n        v439 = v449;\n        v440 = v448;\n        v441 = v447;\n        v442 = v346;\n        v257 = v271;\n        v258 = v274;\n        v259 = v275;\n        v260 = v449;\n        v261 = v437;\n        v262 = v436;\n        v263 = v435;\n        v264 = v434;\n        if (v447 == 0) {\n            // break -> 0x40f17d\n            goto lab_0x40f17d_6;\n        }\n    }\n    goto lab_0x40f010_2;\n  lab_0x40f0e8:;\n    int64_t v499 = function_40e450(&v28, &v3, v33); // 0x40f0f6\n    v424 = v30;\n    v425 = v32;\n    v426 = v33;\n    v427 = v499;\n    v428 = v346;\n    v429 = v35;\n    v430 = v37;\n    v431 = v39;\n    goto lab_0x40f0fe;\n  lab_0x40f010_2:;\n    int64_t v450 = v442;\n    int64_t v451 = v441;\n    int64_t v452 = v440;\n    int32_t v453 = v439;\n    int64_t v454 = v453; // 0x40f013\n    char v455 = *(char *)(v451 + 104); // 0x40f035\n    int64_t v456 = v273; // 0x40f03b\n    int64_t v457 = v274; // 0x40f03b\n    int64_t v458 = v275; // 0x40f03b\n    int64_t v459 = v452; // 0x40f03b\n    int64_t v460 = v450; // 0x40f03b\n    int64_t v461; // 0x40e940\n    int64_t v462; // 0x40e940\n    if ((v455 & 16) == 0) {\n        goto lab_0x40f068;\n    } else {\n        // 0x40f03d\n        v462 = v452;\n        v461 = v450;\n        if (v455 < 0) {\n            int64_t v463 = v451 + 24; // 0x40f434\n            int64_t v464 = function_409f80(&v3, *(int64_t *)(v451 + 16), v463, v454); // 0x40f43e\n            v462 = v463;\n            v461 = v72;\n            v456 = v273;\n            v457 = v274;\n            v458 = v275;\n            v459 = v463;\n            v460 = v72;\n            if (v464 == 0) {\n                goto lab_0x40f068;\n            } else {\n                goto lab_0x40f045;\n            }\n        } else {\n            goto lab_0x40f045;\n        }\n    }\n  lab_0x40f068:;\n    // 0x40f068\n    char v272; // 0x40e940\n    char v465 = v272 & (char)(v281 == v451); // 0x40f01e\n    int32_t v466 = v465 == 0 ? (int64_t)v271 : v283;\n    int64_t v242 = v434; // 0x40f073\n    int64_t v243 = v451; // 0x40f073\n    int64_t v244 = v435; // 0x40f073\n    int64_t v245 = v436; // 0x40f073\n    int64_t v246 = v460; // 0x40f073\n    int64_t v247 = v454; // 0x40f073\n    int64_t v248 = v459; // 0x40f073\n    int64_t v249 = v437; // 0x40f073\n    int64_t v251 = v458; // 0x40f073\n    int64_t v252 = v457; // 0x40f073\n    int64_t v253 = v456; // 0x40f073\n    char v254 = v465; // 0x40f073\n    int32_t v255 = v453; // 0x40f073\n    int32_t v256 = v466; // 0x40f073\n    v257 = v466;\n    v258 = v457;\n    v259 = v458;\n    v260 = v453;\n    v261 = v437;\n    v262 = v436;\n    v263 = v435;\n    v264 = v434;\n    if (v454 >= a6) {\n        // break -> 0x40f17d\n        goto lab_0x40f17d_6;\n    }\n    goto lab_0x40f079;\n  lab_0x40f045:\n    // 0x40f045\n    v456 = 1;\n    v457 = v454;\n    v458 = 0;\n    v459 = v462;\n    v460 = v461;\n    v50 = v453;\n    v52 = v437;\n    v48 = v436;\n    v46 = v435;\n    v44 = v454;\n    v56 = v434;\n    int32_t v307; // 0x40e940\n    if (v307 == 0) {\n        goto lab_0x40f18f;\n    }\n    goto lab_0x40f068;\n  lab_0x40ee40:\n    // 0x40ee40\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    int64_t v351; // 0x40e940\n    int64_t v178; // 0x40ed2c\n    if (v178 > v351) {\n        // break -> 0x40f390\n        goto lab_0x40f390_9;\n    }\n    char v467 = 0;\n    int64_t v468 = v351;\n    int64_t v469 = 0; // 0x40ee8f\n    if (v468 < a3) {\n        // 0x40ee91\n        v469 = (int64_t)*(char *)(v468 + a2);\n    }\n    int64_t v470 = v469;\n    int64_t v471 = v470; // 0x40ee99\n    int64_t v311; // 0x40eaae\n    if (v311 != 0) {\n        // 0x40ee9b\n        v471 = (int64_t)*(char *)(v470 + v311);\n    }\n    int64_t v343; // 0x40e940\n    while (*(char *)(v471 + v343) == 0) {\n        int64_t v472 = v468 - 1; // 0x40ee78\n        if (v472 < v178) {\n            // 0x40fc48\n            v171 = v472;\n            v23 = v40;\n            v26 = 1;\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            goto lab_0x40f390_9;\n        }\n        v467 = 1;\n        v468 = v472;\n        v469 = 0;\n        if (v468 < a3) {\n            // 0x40ee91\n            v469 = (int64_t)*(char *)(v468 + a2);\n        }\n        // 0x40ee96\n        v470 = v469;\n        v471 = v470;\n        if (v311 != 0) {\n            // 0x40ee9b\n            v471 = (int64_t)*(char *)(v470 + v311);\n        }\n    }\n    // 0x40eea5\n    int32_t v354; // 0x40e940\n    int32_t v234 = v354; // 0x40eea7\n    int64_t v353; // 0x40e940\n    int64_t v235 = v353; // 0x40eea7\n    int128_t v352; // 0x40e940\n    int128_t v236 = v352; // 0x40eea7\n    int64_t v237 = v351; // 0x40eea7\n    int64_t v238 = a3; // 0x40eea7\n    int64_t v239 = v178; // 0x40eea7\n    int64_t v348; // 0x40e940\n    int64_t v240 = v348; // 0x40eea7\n    if (v467 != 0) {\n        // 0x40eea9\n        v171 = v468;\n        v234 = v354;\n        v235 = v353;\n        v236 = v352;\n        v237 = v468;\n        v238 = a3;\n        v239 = v178;\n        v240 = v348;\n    }\n    goto lab_0x40eeb8;\n  lab_0x40eeb8:;\n    int64_t v473 = v237;\n    v161 = function_40a050(&v3, v473, v126);\n    v23 = v40;\n    v26 = v161;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if ((int32_t)v161 != 0) {\n        // break -> 0x40f390\n        goto lab_0x40f390_9;\n    }\n    int64_t v233 = v240;\n    int64_t v232 = v239;\n    int64_t v231 = v238;\n    v54 = v236;\n    int64_t v230 = v235;\n    int32_t v214 = v234;\n    int64_t v284; // 0x40e940\n    int32_t v337; // 0x40ed4f\n    if (v284 == 0 || v337 == 1) {\n        goto lab_0x40eefc;\n    } else {\n        // 0x40eeeb\n        v168 = v214;\n        v169 = v230;\n        v170 = v54;\n        v172 = v473;\n        v173 = v231;\n        v174 = v232;\n        v175 = v233;\n        int32_t * v474; // 0x40e940\n        if (*v474 == -1) {\n            goto lab_0x40f800;\n        } else {\n            goto lab_0x40eefc;\n        }\n    }\n  lab_0x40f83c:;\n    // 0x40f83c\n    int64_t v190; // 0x40e940\n    int64_t v475 = v190;\n    uint64_t v476 = v475 - v1; // 0x40f8a3\n    int64_t v477; // 0x40f8c7\n    if (v284 <= v476) {\n        // 0x40f8b5\n        v477 = function_40a050(&v3, v475, v126);\n        v23 = v40;\n        v26 = v477;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if ((int32_t)v477 != 0) {\n            // break (via goto) -> 0x40f390\n            goto lab_0x40f390_9;\n        }\n    }\n    int64_t v478 = v343; // 0x40f866\n    if (v475 < a3) {\n        // 0x40f868\n        v478 = (int64_t)*(char *)(v476 + v324) + v343;\n    }\n    // 0x40f877\n    int32_t v187; // 0x40e940\n    v234 = v187;\n    int64_t v188; // 0x40e940\n    v235 = v188;\n    int128_t v189; // 0x40e940\n    v236 = v189;\n    v237 = v475;\n    int64_t v191; // 0x40e940\n    v238 = v191;\n    int64_t v192; // 0x40e940\n    v239 = v192;\n    v240 = v178;\n    int64_t v179; // 0x40ed3b\n    int64_t v177; // 0x40e940\n    while (*(char *)v478 == 0) {\n        int64_t v479 = v475 + v177; // 0x40f883\n        v171 = v479;\n        v23 = v40;\n        v26 = 1;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v479 < v178 || v479 > v179) {\n            // break (via goto) -> 0x40f390\n            goto lab_0x40f390_9;\n        }\n        v475 = v479;\n        v476 = v475 - v1;\n        if (v284 <= v476) {\n            // 0x40f8b5\n            v477 = function_40a050(&v3, v475, v126);\n            v23 = v40;\n            v26 = v477;\n            v25 = v41;\n            v24 = v42;\n            v22 = v43;\n            if ((int32_t)v477 != 0) {\n                // break (via goto) -> 0x40f390\n                goto lab_0x40f390_9;\n            }\n        }\n        // 0x40f860\n        v478 = v343;\n        if (v475 < a3) {\n            // 0x40f868\n            v478 = (int64_t)*(char *)(v476 + v324) + v343;\n        }\n        // 0x40f877\n        v234 = v187;\n        v235 = v188;\n        v236 = v189;\n        v237 = v475;\n        v238 = v191;\n        v239 = v192;\n        v240 = v178;\n    }\n    goto lab_0x40eeb8;\n  lab_0x40f29c:;\n    // 0x40f29c\n    int64_t v356; // 0x40e940\n    int64_t v480 = v356;\n    int64_t v355; // 0x40e940\n    int64_t v481 = v355;\n    v234 = v354;\n    v235 = v353;\n    v236 = v352;\n    v237 = v481;\n    v238 = v480;\n    int64_t v349; // 0x40e940\n    v239 = v349;\n    v240 = v348;\n    char * v344; // 0x40e940\n    if (v179 == v481) {\n        int64_t v482 = 0; // 0x40f2b3\n        if (v179 < a3) {\n            // 0x40f2b5\n            v482 = (int64_t)*v344;\n        }\n        int64_t v483 = v482;\n        int64_t v484 = v483; // 0x40f2c9\n        if (v311 != 0) {\n            // 0x40f2cb\n            v484 = (int64_t)*(char *)(v483 + v311);\n        }\n        // 0x40f2cf\n        v234 = v354;\n        v235 = v353;\n        v236 = v352;\n        v237 = v481;\n        v238 = v480;\n        v239 = v349;\n        v240 = v348;\n        v23 = v40;\n        v26 = 1;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (*(char *)(v484 + v343) == 0) {\n            // break -> 0x40f390\n            goto lab_0x40f390_9;\n        }\n    }\n    goto lab_0x40eeb8;\n  lab_0x40eefc:;\n    int64_t v485 = *v13; // 0x40ef23\n    v28 = 0;\n    int64_t v217 = v345; // 0x40ef57\n    int64_t v219 = v72; // 0x40ef57\n    int64_t v221 = v485; // 0x40ef57\n    int64_t v222; // 0x40e940\n    int64_t v220; // 0x40e940\n    int64_t v218; // 0x40e940\n    if (*(char *)(v485 + 104) >= 0) {\n        goto lab_0x40efa0;\n    } else {\n        uint64_t v486 = function_409d60(v72, (int64_t)v214 - 1, v126); // 0x40ef67\n        if (v486 % 2 != 0) {\n            // 0x40fbf8\n            v218 = v345;\n            v220 = v72;\n            v222 = *v15;\n            goto lab_0x40fbfc;\n        } else {\n            int32_t v487 = v486; // 0x40ef74\n            v217 = v345;\n            v219 = v72;\n            v221 = v485;\n            if (v487 == 0) {\n                goto lab_0x40efa0;\n            } else {\n                int64_t v488 = v486 & 6; // 0x40ef7a\n                if (v488 == 6) {\n                    // 0x40ff90\n                    v218 = 6;\n                    v220 = v72;\n                    v222 = *v19;\n                    goto lab_0x40fbfc;\n                } else {\n                    if ((v486 & 2) != 0) {\n                        // 0x40fcc0\n                        v218 = v488;\n                        v220 = v72;\n                        v222 = *v17;\n                        goto lab_0x40fbfc;\n                    } else {\n                        // 0x40ef8e\n                        v217 = v488;\n                        v219 = v72;\n                        v221 = v485;\n                        if ((v486 & 4) != 0) {\n                            int64_t v489 = *(int64_t *)(v485 + 80); // 0x40fcd0\n                            int64_t v490 = function_4092e0((int128_t *)&v28, a1, (int64_t *)v489, v487); // 0x40fce1\n                            v218 = v489;\n                            v220 = v346;\n                            v222 = v490;\n                            goto lab_0x40fbfc;\n                        } else {\n                            goto lab_0x40efa0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x40efa0:;\n    int64_t v197 = v221;\n    int64_t v201 = v219;\n    int64_t v199 = v217;\n    int64_t v241; // 0x40e940\n    char v196; // 0x40e940\n    int64_t v200; // 0x40e940\n    int64_t v198; // 0x40e940\n    char v195; // 0x40e940\n    if (v43 == 0) {\n        goto lab_0x40efc4;\n    } else {\n        // 0x40efad\n        *(int64_t *)(8 * (int64_t)v214 + v43) = v197;\n        if (*v40 != 0) {\n            int64_t v491 = v197 + 16; // 0x40ff48\n            int64_t v492 = v197 + 24; // 0x40ff4c\n            int64_t v493 = function_409c10(v72, v491, v492, 0); // 0x40ff5b\n            int32_t v494 = v493; // 0x40ff60\n            v28 = v494;\n            v241 = v493;\n            if (v494 != 0) {\n                goto lab_0x41004e;\n            } else {\n                char * v495 = (char *)(v197 + 104); // 0x40ff6f\n                char v496 = *v495; // 0x40ff6f\n                v195 = 0;\n                v196 = v496;\n                v198 = v492;\n                v200 = v72;\n                if ((v496 & 64) != 0) {\n                    int64_t v497 = function_40dbd0(v72, v491, v492); // 0x41000a\n                    int32_t v498 = v497; // 0x41000f\n                    v28 = v498;\n                    v241 = v497;\n                    if (v498 != 0) {\n                        goto lab_0x41004e;\n                    } else {\n                        // 0x41001a\n                        v195 = 0;\n                        v196 = *v495;\n                        v198 = v492;\n                        v200 = v72;\n                        goto lab_0x40efd8;\n                    }\n                } else {\n                    goto lab_0x40efd8;\n                }\n            }\n        } else {\n            goto lab_0x40efc4;\n        }\n    }\n  lab_0x40f800:;\n    int64_t v176 = v172 + v177; // 0x40f808\n    v171 = v176;\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if (v176 < v178 || v176 > v179) {\n        // break -> 0x40f390\n        goto lab_0x40f390_9;\n    }\n    int32_t v180 = v168; // 0x40f836\n    int64_t v181 = v169; // 0x40f836\n    int128_t v182 = v170; // 0x40f836\n    int64_t v183 = v176; // 0x40f836\n    int64_t v184 = v173; // 0x40f836\n    int64_t v185 = v174; // 0x40f836\n    int64_t v186 = v175; // 0x40f836\n    v187 = v168;\n    v188 = v169;\n    v189 = v170;\n    v190 = v176;\n    v191 = v173;\n    v192 = v174;\n    int32_t v193; // 0x40e940\n    if (v193 < 9) {\n        goto lab_0x40ee08;\n    } else {\n        goto lab_0x40f83c;\n    }\n  lab_0x40efc4:;\n    // 0x40efc4\n    char v194; // 0x40ede6\n    v195 = v194;\n    v196 = *(char *)(v197 + 104);\n    v198 = v199;\n    v200 = v201;\n    goto lab_0x40efd8;\n  lab_0x40efd8:;\n    int64_t v202 = v200;\n    int64_t v203 = v198;\n    char v204 = v195;\n    int64_t v205; // 0x40e940\n    int64_t v206; // 0x40e940\n    int64_t v207; // 0x40e940\n    int64_t v208; // 0x40e940\n    int64_t v209; // 0x40e940\n    int64_t v210; // 0x40e940\n    int64_t v211; // 0x40e940\n    int64_t v212; // 0x40e940\n    if ((v196 & 16) != 0) {\n        // 0x40fc68\n        if (*(char *)(v197 + 104) < 0) {\n            int64_t v213 = v214;\n            int64_t v215 = v197 + 24; // 0x40fcf9\n            int64_t v216 = function_409f80(&v3, *(int64_t *)(v197 + 16), v215, v213); // 0x40fd00\n            v205 = v213;\n            v212 = 0;\n            v211 = v215;\n            v209 = v72;\n            v207 = -1;\n            v206 = v213;\n            v210 = v215;\n            v208 = v72;\n            if (v216 == 0) {\n                goto lab_0x40eff0;\n            } else {\n                goto lab_0x40fc73;\n            }\n        } else {\n            // 0x40fc68\n            v206 = v214;\n            v210 = v203;\n            v208 = v202;\n            goto lab_0x40fc73;\n        }\n    } else {\n        // 0x40efd8\n        v205 = v214;\n        v212 = 0;\n        v211 = v203;\n        v209 = v202;\n        v207 = -1;\n        goto lab_0x40eff0;\n    }\n  lab_0x40fbfc:\n    // 0x40fbfc\n    v217 = v218;\n    v219 = v220;\n    v221 = v222;\n    int64_t v223; // 0x40e940\n    int64_t v224; // 0x40e940\n    int64_t v225; // 0x40e940\n    int64_t v226; // 0x40e940\n    int32_t v227; // 0x40e940\n    int64_t v228; // 0x40e940\n    int128_t v229; // 0x40e940\n    if (v222 != 0) {\n        goto lab_0x40efa0;\n    } else {\n        // 0x40fc05\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        if (v28 == 12) {\n            // break -> 0x40f390\n            goto lab_0x40f390_9;\n        }\n        // 0x40fc19\n        __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 1073, \"check_matching\");\n        v227 = v214;\n        v228 = v230;\n        v229 = v54;\n        v226 = a1;\n        v224 = v231;\n        v225 = v232;\n        v223 = v233;\n      lab_0x40fc38_2:\n        // 0x40fc38\n        v171 = v226;\n        v234 = v227;\n        v235 = v228;\n        v236 = v229;\n        v237 = v226;\n        v238 = v224;\n        v239 = v225;\n        v240 = v223;\n        goto lab_0x40eeb8;\n    }\n  lab_0x41004e:\n    // 0x41004e\n    v50 = v214;\n    v52 = v230;\n    v48 = v231;\n    v46 = v232;\n    v44 = 0x100000000 * v241 >> 32;\n    v56 = v233;\n    goto lab_0x40f18f;\n  lab_0x40eff0:\n    // 0x40eff0\n    v242 = v233;\n    v243 = v197;\n    v244 = v232;\n    v245 = v231;\n    v246 = v209;\n    v247 = v205;\n    v248 = v211;\n    v249 = v230;\n    int64_t v250; // 0x40edd7\n    v251 = v250;\n    v252 = v207;\n    v253 = v212;\n    v254 = v204;\n    v255 = v214;\n    v256 = v214;\n    v257 = v214;\n    v258 = v207;\n    v259 = v250;\n    v260 = v214;\n    v261 = v230;\n    v262 = v231;\n    v263 = v232;\n    v264 = v233;\n    int64_t v265; // 0x40e940\n    int64_t v266; // bp-576, 0x40e940\n    int32_t v267; // bp-688, 0x40e940\n    int32_t result; // bp-692, 0x40e940\n    int64_t v268; // 0x4100de\n    int64_t v269; // 0x410153\n    int64_t * v270; // 0x410153\n    if (v205 < a6) {\n        while (true) {\n          lab_0x40f079:\n            // 0x40f079\n            v271 = v256;\n            v29 = v255;\n            v272 = v254;\n            v273 = v253;\n            v274 = v252;\n            v275 = v251;\n            v276 = v249;\n            v277 = v248;\n            int64_t v278 = v247;\n            v279 = v245;\n            v280 = v244;\n            v281 = v243;\n            v282 = v242;\n            v283 = v278 + 1;\n            if (v2 < a3 == v283 >= v2 || v284 < a3 == v283 >= v284) {\n                int32_t v285 = function_4074b0(v72, v278 + 2 & 0xffffffff);\n                v28 = v285;\n                if (v285 != 0) {\n                    // 0x40f988\n                    v23 = v40;\n                    v26 = 12;\n                    v25 = v41;\n                    v24 = v42;\n                    v22 = v43;\n                    if (v285 != 12) {\n                        // 0x41007d\n                        __assert_fail(\"err == REG_ESPACE\", \"lib/regexec.c\", 1128, \"check_matching\");\n                        v266 = v282;\n                        v268 = *(int64_t *)0x407d8000002340;\n                        result = 0;\n                        if (v268 == 0) {\n                            int64_t v286 = function_4095e0(&result, 0, (int64_t *)\"check_matching\", 0x407d8000002340, v279, v280); // 0x41059b\n                            *(int64_t *)0x656765722f628cac = v286;\n                            // 0x410119\n                            return result;\n                        }\n                        // 0x410130\n                        v267 = 0;\n                        int64_t v287 = function_4095e0(&v267, 0, (int64_t *)\"check_matching\", 0x407d8000002340, v279, v280); // 0x410143\n                        uint32_t result2 = v267; // 0x41014b\n                        if (result2 != 0) {\n                            // 0x410119\n                            return result2;\n                        }\n                        // 0x410153\n                        v269 = v287 + 56;\n                        v270 = (int64_t *)v269;\n                        int64_t v288 = *v270; // 0x410153\n                        if (v288 != 0) {\n                            goto lab_0x4101e0;\n                        } else {\n                            // 0x410165\n                            *(int64_t *)(v287 + 64) = 0;\n                            *v270 = 0x676e69686374;\n                            int64_t * mem3 = malloc(0x4b431ba0); // 0x410179\n                            *(int64_t *)(v287 + 72) = (int64_t)mem3;\n                            if (mem3 == NULL) {\n                                // 0x410119\n                                return 12;\n                            }\n                            // 0x410187\n                            v267 = 0;\n                            v265 = v288;\n                            goto lab_0x4101aa;\n                        }\n                    } else {\n                        goto lab_0x40f390_9;\n                    }\n                }\n                int64_t v289 = v29; // 0x40f484\n                v290 = v276;\n                v291 = v277;\n                v292 = v289;\n                v293 = v72;\n                v294 = v279;\n                v295 = v280;\n                v296 = v282;\n                v297 = v289;\n                v298 = v72;\n                if ((*(char *)(v281 + 104) & 32) == 0) {\n                    goto lab_0x40f0b4;\n                } else {\n                    goto lab_0x40f4a0;\n                }\n            } else {\n                // 0x40f0a9\n                v290 = v276;\n                v291 = v277;\n                v292 = v278;\n                v293 = v246;\n                v294 = v279;\n                v295 = v280;\n                v296 = v282;\n                v297 = v278;\n                v298 = v246;\n                if ((*(char *)(v281 + 104) & 32) != 0) {\n                    goto lab_0x40f4a0;\n                } else {\n                    goto lab_0x40f0b4;\n                }\n            }\n        }\n    }\n  lab_0x40f17d_6:;\n    int64_t v299 = v264;\n    int64_t v300 = v263;\n    int64_t v301 = v262;\n    int64_t v302 = v261;\n    int32_t v303 = v260;\n    int64_t v304 = v259;\n    int64_t v305 = v258;\n    v50 = v303;\n    v52 = v302;\n    v48 = v301;\n    v46 = v300;\n    v44 = v305;\n    v56 = v299;\n    if (v304 != 0) {\n        int64_t * v306 = (int64_t *)v304; // 0x40f18c\n        *v306 = *v306 + (int64_t)v257;\n        v50 = v303;\n        v52 = v302;\n        v48 = v301;\n        v46 = v300;\n        v44 = v305;\n        v56 = v299;\n    }\n    goto lab_0x40f18f;\n  lab_0x40fc73:\n    // 0x40fc73\n    v205 = v206;\n    v212 = 1;\n    v211 = v210;\n    v209 = v208;\n    v207 = v206;\n    v50 = v214;\n    v52 = v230;\n    v48 = v231;\n    v46 = v232;\n    v44 = v206;\n    v56 = v233;\n    if (v307 != 0) {\n        goto lab_0x40eff0;\n    } else {\n        goto lab_0x40f18f;\n    }\n  lab_0x40f7f0:\n    // 0x40f7f0\n    function_407ca0(&v3);\n    v168 = v51;\n    v169 = v53;\n    v170 = v55;\n    v172 = v171;\n    v173 = v49;\n    v174 = v47;\n    v175 = v57;\n    goto lab_0x40f800;\n  lab_0x40ffa2:\n    // 0x40ffa2\n    free(mem);\n    free((int64_t *)v68);\n    v53 = v66;\n    v55 = v76;\n    v57 = v69;\n    if (v58 != 1) {\n        // 0x40f390\n        v23 = v40;\n        v26 = v63 & 0xffffffff;\n        v25 = v41;\n        v24 = v42;\n        v22 = v43;\n        goto lab_0x40f390_9;\n    }\n    goto lab_0x40f7f0;\n  lab_0x40ea88:;\n    int64_t v308 = v21;\n    int64_t v309 = v20;\n    int32_t v310 = 1; // 0x40ea99\n    if (v11 == 0) {\n        // 0x40ee10\n        v310 = *(int64_t *)(a1 + 152) != 0;\n    }\n    // 0x40ea9f\n    v311 = *(int64_t *)(a1 + 40);\n    v142 = (int64_t *)(a1 + 24);\n    int32_t * v312 = (int32_t *)(a1 + 180); // 0x40eab6\n    int64_t v313 = v12 + 1; // 0x40eacd\n    int64_t v314 = (int64_t)*v312; // 0x40ead6\n    int64_t v315 = v313 - v314; // 0x40ead9\n    int64_t v316 = v315 < 0 == ((v315 ^ v313) & (v313 ^ v314)) < 0 ? v313 : v314; // 0x40eae4\n    int64_t v317 = a3 + 1; // 0x40eae8\n    int64_t v318 = v316 - v317; // 0x40eafc\n    int64_t v319 = v318 < 0 == ((v318 ^ v316) & (v316 ^ v317)) < 0 == (v318 != 0) ? v317 : v316; // 0x40eb07\n    v3 = a2;\n    v72 = &v3;\n    int64_t v320 = function_406910(v72, v319); // 0x40eb6c\n    int64_t v321; // 0x40e940\n    int64_t v322; // 0x40e940\n    int64_t v323; // 0x40e940\n    if ((int32_t)v320 != 0) {\n        // 0x40ea9f\n        v23 = (int64_t *)(a1 + 152);\n        v26 = v320;\n        goto lab_0x40f390_9;\n    } else {\n        // 0x40eb7d\n        v307 = v310;\n        if ((*v142 & 0x400000 || v311) != 0) {\n            goto lab_0x40ebd3;\n        } else {\n            // 0x40ebb3\n            v321 = a2;\n            v322 = a2;\n            v323 = a3;\n            if (*v312 < 2) {\n                goto lab_0x40ebd5;\n            } else {\n                goto lab_0x40ebd3;\n            }\n        }\n    }\n  lab_0x40ebd3:\n    // 0x40ebd3\n    v322 = v321;\n    v323 = 0;\n    goto lab_0x40ebd5;\n  lab_0x40ea6a:\n    // 0x40ea6a\n    v20 = 0;\n    v21 = 0;\n    if (a4 != 0 == (a5 != 0)) {\n        // 0x40f3b0\n        return 1;\n    }\n    goto lab_0x40ea88;\n  lab_0x40ebd5:\n    // 0x40ebd5\n    v284 = v323;\n    v324 = v322;\n    v40 = (int64_t *)(a1 + 152);\n    int64_t v325 = *v40; // 0x40ec11\n    int64_t v326 = 2 * v325; // 0x40ec2b\n    int64_t v327; // 0x40e940\n    int64_t v328; // 0x40e940\n    if (v326 < 1) {\n        goto lab_0x40ec8c;\n    } else {\n        // 0x40ec3b\n        v23 = v40;\n        v26 = 12;\n        if (v326 > 0x666666666666666) {\n            goto lab_0x40f390_9;\n        } else {\n            int32_t v329 = v325;\n            int64_t * mem4 = malloc(80 * v329); // 0x40ec56\n            int64_t v330 = (int64_t)mem4; // 0x40ec56\n            int64_t * mem5 = malloc(16 * v329); // 0x40ec6d\n            int64_t v331 = (int64_t)mem5; // 0x40ec6d\n            v328 = v330;\n            v327 = v331;\n            v23 = v40;\n            v26 = 12;\n            v25 = v330;\n            v24 = v331;\n            if (mem4 == NULL || mem5 == NULL) {\n                goto lab_0x40f390_9;\n            } else {\n                goto lab_0x40ec8c;\n            }\n        }\n    }\n  lab_0x40ec8c:\n    // 0x40ec8c\n    v42 = v327;\n    v41 = v328;\n    int64_t v332; // 0x40e940\n    if (v11 < 2) {\n        // 0x40fb80\n        v332 = 0;\n        if ((*(char *)(a1 + 176) & 2) != 0) {\n            goto lab_0x40ecb6;\n        } else {\n            goto lab_0x40ecf2;\n        }\n    } else {\n        goto lab_0x40ecb6;\n    }\n  lab_0x40ecb6:\n    // 0x40ecb6\n    v23 = v40;\n    v26 = 12;\n    v25 = v41;\n    v24 = v42;\n    if (v2 < 0x1fffffffffffffff) {\n        // 0x40ecd1\n        g78 = &v266;\n        int64_t * mem6 = malloc(8 * (int32_t)v2 + 8); // 0x40ecd9\n        int64_t v333 = (int64_t)mem6; // 0x40ecd9\n        v332 = v333;\n        v23 = v40;\n        v26 = 12;\n        v25 = v41;\n        v24 = v42;\n        v22 = v333;\n        if (mem6 == NULL) {\n            goto lab_0x40f390_9;\n        } else {\n            goto lab_0x40ecf2;\n        }\n    } else {\n        goto lab_0x40f390_9;\n    }\n  lab_0x40ecf2:\n    // 0x40ecf2\n    v43 = v332;\n    v171 = v309;\n    int64_t v334 = v309 - v308; // 0x40ed18\n    bool v335 = v334 == 0 | v334 < 0 != ((v334 ^ v309) & (v308 ^ v309)) < 0;\n    int32_t v336 = v335; // 0x40ed1b\n    v337 = *v312;\n    int32_t v338 = 8; // 0x40ed61\n    if (v6 != NULL) {\n        int32_t v339 = 4; // 0x40ed6b\n        if (v337 != 1) {\n            // 0x40ed6d\n            v339 = 4 * (int32_t)((*v142 & 0x400000 | v311) == 0);\n        }\n        // 0x40ed90\n        v338 = 2 * v336 | (int32_t)(v311 != 0) | v339;\n    }\n    // 0x40edac\n    v178 = v335 ? v309 : v308;\n    v179 = v334 < 0 == ((v334 ^ v309) & (v308 ^ v309)) < 0 ? v309 : v308;\n    int64_t v340 = v309 - v179; // 0x40edac\n    int64_t v341 = v309 - v178; // 0x40edb4\n    v23 = v40;\n    v26 = 1;\n    v25 = v41;\n    v24 = v42;\n    v22 = v43;\n    if (v340 < 0 == ((v340 ^ v309) & (v179 ^ v309)) < 0 != v340 != 0 && v341 < 0 == ((v341 ^ v309) & (v178 ^ v309)) < 0) {\n        int64_t v342 = 0x100000000 * a9 >> 32;\n        v193 = v338;\n        v250 = v335 ? (int64_t)&v171 : 0;\n        v194 = v250 != 0;\n        v343 = (int64_t)v6;\n        v344 = (char *)(v179 + a2);\n        v126 = v342;\n        v177 = (int32_t)!((v334 == 0 | v334 < 0 != ((v334 ^ v309) & (v308 ^ v309)) < 0)) + v336;\n        v345 = v342 & 0xffffffff;\n        v346 = &v28;\n        v143 = &v140;\n        v347 = (char)v307 ^ 1;\n        v73 = (char *)(a1 + 56);\n        v74 = (char *)(a1 + 176);\n        v75 = &v67;\n        v183 = v309;\n        v184 = a5;\n        v185 = a6;\n        v186 = v325;\n        while (true) {\n          lab_0x40ee08:\n            // 0x40ee08\n            v348 = v186;\n            v349 = v185;\n            int64_t v350 = v184;\n            v351 = v183;\n            v352 = v182;\n            v353 = v181;\n            v354 = v180;\n            v234 = v354;\n            v235 = v353;\n            v236 = v352;\n            v237 = v351;\n            v238 = v350;\n            v239 = v349;\n            v240 = v348;\n            v187 = v354;\n            v188 = v353;\n            v189 = v352;\n            v190 = v351;\n            v191 = v350;\n            v192 = v349;\n            switch (g78) {\n                case 0: {\n                    goto lab_0x40ee40;\n                }\n                case 1: {\n                    goto lab_0x40ee40;\n                }\n                case 2: {\n                    // 0x40f2f8\n                    v355 = v351;\n                    v356 = v350;\n                    if (v179 > v351) {\n                        // 0x40f2ff\n                        v234 = v354;\n                        v235 = v353;\n                        v236 = v352;\n                        v237 = v351;\n                        v238 = v350;\n                        v239 = v349;\n                        v240 = v348;\n                        int64_t v357 = v351; // 0x40f315\n                        if (*(char *)((int64_t)*(char *)(v351 + a2) + v343) != 0) {\n                            goto lab_0x40eeb8;\n                        } else {\n                            int64_t v358 = v357 + 1;\n                            while (v179 != v358) {\n                                // 0x40f330\n                                v357 = v358;\n                                v227 = v354;\n                                v228 = v353;\n                                v229 = v352;\n                                v226 = v358;\n                                v224 = v350;\n                                v225 = v349;\n                                v223 = v348;\n                                if (*(char *)((int64_t)*(char *)(v358 + a2) + v343) != 0) {\n                                    goto lab_0x40fc38_2;\n                                }\n                                v358 = v357 + 1;\n                            }\n                            // 0x40f34a\n                            v171 = v179;\n                            v355 = v358;\n                            v356 = v350;\n                            goto lab_0x40f29c;\n                        }\n                    } else {\n                        goto lab_0x40f29c;\n                    }\n                }\n                case 3: {\n                    // 0x40f220\n                    v355 = v351;\n                    v356 = v350;\n                    if (v179 > v351) {\n                        unsigned char v359 = *(char *)(v311 + (int64_t)*(char *)(v351 + a2)); // 0x40f238\n                        v234 = v354;\n                        v235 = v353;\n                        v236 = v352;\n                        v237 = v351;\n                        v238 = v350;\n                        v239 = v349;\n                        v240 = v348;\n                        int64_t v360 = v351; // 0x40f249\n                        if (*(char *)((int64_t)v359 + v343) != 0) {\n                            goto lab_0x40eeb8;\n                        } else {\n                            int64_t v361 = v360 + 1;\n                            while (v179 != v361) {\n                                unsigned char v362 = *(char *)(v311 + (int64_t)*(char *)(v361 + a2)); // 0x40f275\n                                v360 = v361;\n                                v227 = v354;\n                                v228 = v353;\n                                v229 = v352;\n                                v226 = v361;\n                                v224 = a2;\n                                v225 = v349;\n                                v223 = v348;\n                                if (*(char *)((int64_t)v362 + v343) != 0) {\n                                    goto lab_0x40fc38_2;\n                                }\n                                v361 = v360 + 1;\n                            }\n                            // 0x40f28f\n                            v171 = v179;\n                            v355 = v361;\n                            v356 = a2;\n                            goto lab_0x40f29c;\n                        }\n                    } else {\n                        goto lab_0x40f29c;\n                    }\n                }\n                case 4: {\n                    goto lab_0x40eeb8;\n                }\n                default: {\n                    goto lab_0x40f83c;\n                }\n            }\n        }\n    }\n    goto lab_0x40f390_9;\n  lab_0x4101e0:;\n    int64_t result3 = function_408ae0((int128_t *)\"check_matching\", v268 + 8, v269); // 0x4101f9\n    int32_t v363 = result3; // 0x4101fe\n    result = v363;\n    if (v363 != 0) {\n        // 0x410119\n        return result3;\n    }\n    int64_t v364 = *(int64_t *)((int64_t)\"lib/regexec.c\" + 48); // 0x410690\n    int64_t v365 = 0; // 0x40e940\n    goto lab_0x410690_2;\n  lab_0x410690_2:;\n    int64_t v366 = 40 * *(int64_t *)(8 * v365 + v364); // 0x4106a1\n    if (*(int64_t *)(v366 + 0x407d8000000010) < 1128) {\n        // 0x4106af\n        if (*(int64_t *)(v366 + 0x407d8000000008) >= 1128) {\n            // 0x4106b9\n            abort();\n            // UNREACHABLE\n        }\n        goto lab_0x41074d;\n    } else {\n        goto lab_0x41074d;\n    }\n  lab_0x4101aa:;\n    int64_t v367 = *(int64_t *)(8 * v265 + 0x61666e5f6b6e696c); // 0x4101b1\n    int64_t v368 = *(int64_t *)56; // 0x4101b9\n    int32_t v369 = function_408570(v270, (int128_t *)(v368 + 24 * v367)); // 0x4101c7\n    v267 = v369;\n    if (v369 != 0) {\n        // 0x410119\n        return 12;\n    }\n    int64_t v370 = v265 + 1; // 0x4101a0\n    v265 = v370;\n    if (v370 > 0x676e69686373) {\n        goto lab_0x4101e0;\n    } else {\n        goto lab_0x4101aa;\n    }\n  lab_0x41074d:;\n    int64_t v371 = v365 + 1; // 0x41074d\n    v365 = v371;\n    if (v371 >= *(int64_t *)((int64_t)\"lib/regexec.c\" + 40)) {\n        // 0x41075b\n        result = 0;\n        int64_t v372 = function_4095e0(&result, 0, (int64_t *)\"check_matching\", 0x407d8000000000, v279, v280); // 0x410228\n        *(int64_t *)0x656765722f628cac = v372;\n        uint32_t v373 = result; // 0x410231\n        // 0x410119\n        return v373 != 0 ? (int64_t)v373 : 0;\n    }\n    goto lab_0x410690_2;\n  lab_0x40fd50:\n    // 0x40fd50\n    *(int64_t *)(v162 + 8) = -1;\n    int64_t v374 = v162 + 16; // 0x40fd54\n    *(int64_t *)v162 = -1;\n    v162 = v374;\n    int64_t v375; // 0x40e940\n    int64_t * v376; // 0x40fd71\n    if (v165 != v374) {\n        goto lab_0x40fd50;\n    } else {\n        // 0x40fd61\n        v376 = (int64_t *)a8;\n        *v376 = 0;\n        *(int64_t *)(a8 + 8) = v65;\n        v163 = 0;\n        if (v11 == 1 | (*v73 & 16) != 0) {\n            goto lab_0x40fdf2;\n        } else {\n            // 0x40fda2\n            v375 = 0;\n            if (*v74 % 2 == 0) {\n                goto lab_0x40fdc2;\n            } else {\n                int64_t v377 = *v40; // 0x40fdb6\n                v375 = v377 >= 0 == (v377 != 0);\n                goto lab_0x40fdc2;\n            }\n        }\n    }\n  lab_0x40fdf2:;\n    int64_t v378 = a8; // 0x40fe2d\n    int64_t v379 = 0; // 0x40fe2d\n    int64_t v380 = v163; // 0x40fe2d\n    goto lab_0x40fe33;\n  lab_0x40fe33:;\n    int64_t v381 = v380;\n    int64_t v382 = v378;\n    int64_t * v383; // 0x40e940\n    int64_t v384; // 0x40e940\n    int64_t v385; // 0x40e940\n    int64_t * v386; // 0x40fe39\n    int64_t v387; // 0x40fe39\n    int64_t v388; // 0x41005b\n    if (v381 == -1) {\n        goto lab_0x40fe53;\n    } else {\n        // 0x40fe39\n        v386 = (int64_t *)(v382 + 8);\n        v387 = *v386;\n        char v389; // 0x40e940\n        if (v389 != 0) {\n            // 0x410056\n            v388 = v284;\n            if (v284 == v381) {\n                goto lab_0x41005f;\n            } else {\n                // 0x41005b\n                v388 = *(int64_t *)(8 * v381 + v1);\n                goto lab_0x41005f;\n            }\n        } else {\n            // 0x40fe39\n            v383 = (int64_t *)v382;\n            v384 = v381;\n            v385 = v387;\n            goto lab_0x40fe46;\n        }\n    }\n  lab_0x40fe53:;\n    int64_t v390 = v379 + 1; // 0x40fe53\n    if (v390 != v11) {\n        int64_t v391 = v382 + 16; // 0x40fe57\n        v378 = v391;\n        v379 = v390;\n        v380 = *(int64_t *)v391;\n        goto lab_0x40fe33;\n    } else {\n        if (v10 < 1) {\n            goto lab_0x40feb8;\n        } else {\n            // 0x40fe6b\n            goto lab_0x40fea8;\n        }\n    }\n  lab_0x40fdc2:;\n    int64_t v392 = function_40d160(a1, &v3, v11, a8, v375); // 0x40fdda\n    v23 = v40;\n    v26 = v392;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    if ((int32_t)v392 != 0) {\n        goto lab_0x40f390_9;\n    } else {\n        // 0x40fde7\n        v163 = *v376;\n        goto lab_0x40fdf2;\n    }\n  lab_0x40feb8:;\n    int64_t v393 = *(int64_t *)(a1 + 224); // 0x40fec5\n    v23 = v40;\n    v26 = v161;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    int64_t v394; // 0x40e940\n    int64_t v395; // 0x40fedd\n    int64_t v396; // 0x40e940\n    if (v393 == 0) {\n        goto lab_0x40f390_9;\n    } else {\n        // 0x40fed5\n        v395 = v11 - 1;\n        v23 = v40;\n        v26 = v161;\n        v25 = v41;\n        v24 = v42;\n        v22 = v64;\n        if (v395 != 0) {\n            // 0x40fee8\n            v396 = a8 + 24;\n            v394 = 0;\n            goto lab_0x40fee8_2;\n        } else {\n            goto lab_0x40f390_9;\n        }\n    }\n  lab_0x41005f:;\n    int64_t v397 = v388;\n    int64_t * v398 = (int64_t *)v382;\n    *v398 = v397;\n    v383 = v398;\n    v384 = v397;\n    v385 = v284;\n    if (v284 == v387) {\n        goto lab_0x40fe46;\n    } else {\n        // 0x410067\n        v383 = v398;\n        v384 = v397;\n        v385 = *(int64_t *)(8 * v387 + v1);\n        goto lab_0x40fe46;\n    }\n  lab_0x40fe46:\n    // 0x40fe46\n    *v383 = v384 + v171;\n    *v386 = v385 + v171;\n    goto lab_0x40fe53;\n  lab_0x40fea8:\n    // 0x40fea8\n    *(int64_t *)v165 = -1;\n    *(int64_t *)(v165 + 8) = -1;\n    if (16 * (v11 + v10) + a8 != v165 + 16) {\n        goto lab_0x40fea8;\n    } else {\n        goto lab_0x40feb8;\n    }\n  lab_0x40fee8_2:;\n    int64_t v399 = v394;\n    int64_t * v400 = (int64_t *)(8 * v399 + v393); // 0x40fee8\n    int64_t v401 = *v400; // 0x40fee8\n    if (v401 == v399) {\n        goto lab_0x40ff37;\n    } else {\n        int64_t v402 = 16 * v399; // 0x40ff10\n        *(int64_t *)(v402 + v164) = *(int64_t *)(16 * v401 + v164);\n        *(int64_t *)(v402 + v396) = *(int64_t *)(16 * *v400 + v396);\n        goto lab_0x40ff37;\n    }\n  lab_0x40ff37:;\n    int64_t v403 = v399 + 1; // 0x40ff37\n    v23 = v40;\n    v26 = v161;\n    v25 = v41;\n    v24 = v42;\n    v22 = v64;\n    v394 = v403;\n    if (v403 != v395) {\n        goto lab_0x40fee8_2;\n    } else {\n        goto lab_0x40f390_9;\n    }\n}\n"
        },
        {
            "funcName": "function_4108d0",
            "funcStartAddr": "4108d0",
            "funcEndAddr": "410aed",
            "decompiledFuncCode": "int64_t function_4108d0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    int32_t * v1 = (int32_t *)(a2 + 144); // 0x4108e6\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x4108ed\n    if (*v1 != 1) {\n        int64_t v3 = function_407fe0(a2, a2); // 0x4108f9\n        if ((int32_t)v3 > 1) {\n            // 0x410948\n            *(int32_t *)a1 = 1;\n            *(int32_t *)(a1 + 8) = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * a2);\n            *v2 = (0x100000000 * v3 >> 32) + a2;\n            return 0;\n        }\n    }\n    char * v4 = (char *)(a3 + 8); // 0x410903\n    char v5 = *v4; // 0x410903\n    int64_t v6 = a2 + (0x100000000 * a4 >> 32); // 0x410907\n    *v2 = v6;\n    int64_t v7; // 0x4108d0\n    int64_t v8; // 0x4108d0\n    char v9; // 0x4108d0\n    int64_t v10; // 0x4108d0\n    int64_t v11; // 0x4108d0\n    char v12; // 0x4108d0\n    int64_t v13; // 0x4108d0\n    int64_t v14; // 0x4108d0\n    int64_t v15; // 0x4108d0\n    int64_t v16; // 0x4108d0\n    int64_t * v17; // 0x410970\n    int64_t * v18; // 0x4108d0\n    int64_t * v19; // 0x4108d0\n    int64_t * v20; // 0x4108d0\n    switch (v5) {\n        case 30: {\n        }\n        case 28: {\n        }\n        case 26: {\n            // 0x410970\n            v17 = (int64_t *)(a2 + 104);\n            if (v6 >= *v17) {\n                // 0x410938\n                return 7;\n            }\n            // 0x41097a\n            v18 = (int64_t *)(a2 + 40);\n            v19 = (int64_t *)(a2 + 8);\n            v20 = (int64_t *)(a1 + 8);\n            v12 = v5;\n            v14 = a2;\n            v10 = 0;\n            v7 = v6;\n            while (true) {\n              lab_0x4109a2:\n                // 0x4109a2\n                v8 = v7;\n                v11 = v10;\n                v15 = v14;\n                if (v12 == 30) {\n                    // 0x410a20\n                    if (*(char *)(a2 + 139) == 0) {\n                        goto lab_0x4109a9;\n                    } else {\n                        // 0x410a2e\n                        if (*(char *)(a2 + 140) == 0) {\n                            int64_t v21 = v8 + 1; // 0x410a98\n                            *v2 = v21;\n                            v13 = v21;\n                            v16 = v15;\n                            v9 = *(char *)(v8 + v15 + *v18);\n                            goto lab_0x4109ba;\n                        } else {\n                            // 0x410a38\n                            if (v8 == *(int64_t *)(a2 + 48)) {\n                                goto lab_0x410a4d;\n                            } else {\n                                // 0x410a3e\n                                if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v8) == -1) {\n                                    goto lab_0x4109a9;\n                                } else {\n                                    goto lab_0x410a4d;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    goto lab_0x4109a9;\n                }\n            }\n          lab_0x410938_3:\n            // 0x410938\n            return 0;\n        }\n    }\n    if ((char)a6 == 0 == v5 == 22) {\n        // 0x410ab0\n        int64_t v22; // bp-56, 0x4108d0\n        function_406540(&v22, a2, a5);\n        char v23; // 0x4108d0\n        if (v23 != 21) {\n            // 0x410938\n            return 11;\n        }\n    }\n    // 0x410929\n    *(int32_t *)a1 = 0;\n    int64_t v24; // 0x4108d0\n    *(char *)(a1 + 8) = *(char *)&v24;\n    // 0x410938\n    return 0;\n  lab_0x4109a9:;\n    int64_t v25 = v8 + 1; // 0x4109ad\n    *v2 = v25;\n    v13 = v25;\n    v16 = v15;\n    v9 = *(char *)(*v19 + v8);\n    goto lab_0x4109ba;\n  lab_0x4109ba:;\n    uint64_t v26 = v13;\n    if (*v17 <= v26) {\n        // break -> 0x410938\n        goto lab_0x410938_3;\n    }\n    // 0x4109c0\n    if (*(char *)&v24 == v9) {\n        // 0x4109c5\n        if (*(char *)(*v19 + v26) == 93) {\n            // 0x4109cf\n            *v2 = v26 + 1;\n            *(char *)(*v20 + (0x100000000 * v11 >> 32)) = 0;\n            unsigned char v27 = *v4; // 0x4109e0\n            v24 = v27;\n            switch (v27) {\n                case 28: {\n                    // 0x410ae0\n                    *(int32_t *)a1 = 2;\n                    goto lab_0x410938_3;\n                }\n                case 30: {\n                    // 0x410ad3\n                    *(int32_t *)a1 = 4;\n                    goto lab_0x410938_3;\n                }\n                default: {\n                    // 0x4109f6\n                    if (v27 != 26) {\n                        goto lab_0x410938_3;\n                    } else {\n                        // 0x410a01\n                        *(int32_t *)a1 = 3;\n                        goto lab_0x410938_3;\n                    }\n                }\n            }\n        }\n    }\n    // 0x410988\n    *(char *)(*v20 + v11) = v9;\n    if (v11 == 31) {\n        // break -> 0x410938\n        goto lab_0x410938_3;\n    }\n    // 0x41099a\n    v12 = *v4;\n    v14 = v16;\n    v10 = v11 + 1;\n    v7 = *v2;\n    goto lab_0x4109a2;\n  lab_0x410a4d:;\n    int64_t v28 = *(int64_t *)(a2 + 24); // 0x410a4d\n    char v29 = *(char *)(*(int64_t *)(v28 + 8 * v8) + v15 + *v18); // 0x410a5c\n    if (v29 <= -1) {\n        goto lab_0x4109a9;\n    } else {\n        int64_t v30 = 1; // 0x410a77\n        int64_t v31 = v15; // 0x410a77\n        if (*v1 != 1) {\n            // 0x410a79\n            v30 = 0x100000000 * function_407fe0(a2, v8) >> 32;\n            v31 = v8;\n        }\n        int64_t v32 = v30 + v8; // 0x410a86\n        *v2 = v32;\n        v13 = v32;\n        v16 = v31;\n        v9 = v29;\n        goto lab_0x4109ba;\n    }\n}\n"
        },
        {
            "funcName": "function_410af0",
            "funcStartAddr": "410af0",
            "funcEndAddr": "411193",
            "decompiledFuncCode": "int64_t function_410af0(int64_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = (int64_t)a1;\n    int64_t * v2 = (int64_t *)(a2 + 72); // 0x410afe\n    uint64_t v3 = *v2; // 0x410afe\n    if (*(int64_t *)(a2 + 104) <= v3) {\n        // 0x410c18\n        *(char *)(v1 + 8) = 2;\n        // 0x410c1e\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)(a2 + 8); // 0x410b0f\n    char * v5 = (char *)(v1 + 10); // 0x410b13\n    int32_t v6 = *(int32_t *)(a2 + 144); // 0x410b1b\n    int64_t v7 = v4 + v3;\n    unsigned char v8 = *(char *)v7; // 0x410b24\n    char v9 = *v5 & -97;\n    *v5 = v9;\n    *(char *)a1 = v8;\n    char v10; // 0x410af0\n    if (v6 < 2) {\n        if (v8 == 92) {\n            goto lab_0x410bf0;\n        } else {\n            // 0x410bb6\n            *(char *)(v1 + 8) = 1;\n            uint16_t v11 = *(int16_t *)(2 * (int64_t)v8 + (int64_t)*__ctype_b_loc()); // 0x410bcb\n            v10 = 64 * ((char)(v11 / 8) % 2 | (char)(v8 == 95)) | v9;\n            goto lab_0x410b95;\n        }\n    } else {\n        // 0x410b39\n        if (v3 != *(int64_t *)(a2 + 48)) {\n            // 0x410b3f\n            if (*(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3) == -1) {\n                int32_t * v12 = (int32_t *)(v1 + 8); // 0x410ca0\n                *v12 = *v12 & -0x200100 | 0x200001;\n                // 0x410c1e\n                return 1;\n            }\n        }\n        if (v8 == 92) {\n            goto lab_0x410bf0;\n        } else {\n            // 0x410b58\n            *(char *)(v1 + 8) = 1;\n            int32_t wc = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v3); // 0x410b65\n            v10 = 64 * (char)(wc == 95 | iswalnum(wc) != 0) | *v5 & -65;\n            goto lab_0x410b95;\n        }\n    }\n  lab_0x410bf0:;\n    uint64_t v13 = v3 + 1;\n    if (v13 >= *(int64_t *)(a2 + 88)) {\n        // 0x410bfb\n        *(char *)(v1 + 8) = 36;\n        return 1;\n    }\n    // 0x410c30\n    char v14; // 0x410af0\n    int32_t v15; // 0x4110f7\n    if (*(char *)(a2 + 139) != 0) {\n        if (v6 < 2) {\n            goto lab_0x411112;\n        } else {\n            int64_t v16 = *(int64_t *)(a2 + 16) + 4 * v13;\n            v15 = *(int32_t *)v16;\n            if (v15 == -1) {\n                goto lab_0x41117b;\n            } else {\n                // 0x4110ff\n                if (*(int64_t *)(a2 + 48) == v3 + 2) {\n                    goto lab_0x411112;\n                } else {\n                    // 0x41110a\n                    if (*(int32_t *)(v16 + 4) == -1) {\n                        goto lab_0x41117b;\n                    } else {\n                        goto lab_0x411112;\n                    }\n                }\n            }\n        }\n    } else {\n        // 0x410c3e\n        v14 = *(char *)(v4 + v13);\n        goto lab_0x410c4b;\n    }\n  lab_0x410b95:\n    // 0x410b95\n    *v5 = v10;\n    g74 = v8 - 10;\n    switch (v8) {\n        case 10: {\n            // 0x410e28\n            if ((a3 & 2048) == 0) {\n                // 0x410c1e\n                return 1;\n            }\n            // 0x410e3a\n            *(char *)(v1 + 8) = 10;\n            // 0x410c1e\n            return 1;\n        }\n        case 36: {\n            if ((a3 & 8) != 0) {\n                // 0x410e90\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x410c1e\n                return 1;\n            }\n            int64_t v17 = v3 + 1; // 0x410e56\n            if (v17 == *(int64_t *)(a2 + 88)) {\n                // 0x410e90\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x410c1e\n                return 1;\n            }\n            // 0x410e60\n            *v2 = v17;\n            int64_t v18; // bp-72, 0x410af0\n            function_410af0(&v18, a2, a3);\n            *v2 = *v2 - 1;\n            char v19; // 0x410af0\n            if (v19 < 11) {\n                // 0x410e90\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 32;\n                // 0x410c1e\n                return 1;\n            }\n            // break -> 0x410c1e\n            break;\n        }\n        case 40: {\n            // 0x410cf8\n            if ((a3 & 0x2000) == 0) {\n                // 0x410c1e\n                return 1;\n            }\n            // 0x410d0a\n            *(char *)(v1 + 8) = 8;\n            // 0x410c1e\n            return 1;\n        }\n        case 41: {\n            // 0x410d18\n            if ((a3 & 0x2000) == 0) {\n                // 0x410c1e\n                return 1;\n            }\n            // 0x410d2a\n            *(char *)(v1 + 8) = 9;\n            // 0x410c1e\n            return 1;\n        }\n        case 42: {\n            // 0x410d38\n            *(char *)(v1 + 8) = 11;\n            // 0x410c1e\n            return 1;\n        }\n        case 43: {\n            // 0x410d50\n            if ((a3 & 1026) != 0) {\n                // 0x410c1e\n                return 1;\n            }\n            // 0x410d62\n            *(char *)(v1 + 8) = 18;\n            // 0x410c1e\n            return 1;\n        }\n        case 46: {\n            // 0x410d70\n            *(char *)(v1 + 8) = 5;\n            // 0x410c1e\n            return 1;\n        }\n        case 63: {\n            // 0x410d80\n            if ((a3 & 1026) != 0) {\n                // 0x410c1e\n                return 1;\n            }\n            // 0x410d92\n            *(char *)(v1 + 8) = 19;\n            // 0x410c1e\n            return 1;\n        }\n        case 91: {\n            // 0x410da0\n            *(char *)(v1 + 8) = 20;\n            // 0x410c1e\n            return 1;\n        }\n        case 94: {\n            if ((a3 & 0x800008) == 0 == (v3 != 0)) {\n                // 0x41114a\n                if ((a3 & 2048) == 0 | *(char *)(v7 - 1) != 10) {\n                    // 0x410c1e\n                    return 1;\n                }\n            }\n            // 0x410dc2\n            *(char *)(v1 + 8) = 12;\n            *(int32_t *)a1 = 16;\n            // 0x410c1e\n            return 1;\n        }\n        case 123: {\n            // 0x410de0\n            if ((a3 & 0x1200) != 0x1200) {\n                // 0x410c1e\n                return 1;\n            }\n            // 0x410df9\n            *(char *)(v1 + 8) = 23;\n            // 0x410c1e\n            return 1;\n        }\n        case 124: {\n            // 0x410e08\n            if ((a3 & 0x8400) != 0x8000) {\n                // 0x410c1e\n                return 1;\n            }\n            // 0x410e3a\n            *(char *)(v1 + 8) = 10;\n            // 0x410c1e\n            return 1;\n        }\n        case 125: {\n            // 0x410ea8\n            if ((a3 & 0x1200) != 0x1200) {\n                // 0x410c1e\n                return 1;\n            }\n            // 0x410ec1\n            *(char *)(v1 + 8) = 24;\n            // 0x410c1e\n            return 1;\n        }\n    }\n    // 0x410c1e\n    return 1;\n  lab_0x411112:;\n    int64_t v20 = *(int64_t *)(a2 + 40); // 0x41111e\n    if (*(char *)(a2 + 140) == 0) {\n        // 0x411168\n        v14 = *(char *)(v20 + a2 + v13);\n        goto lab_0x410c4b;\n    } else {\n        int64_t v21 = *(int64_t *)(*(int64_t *)(a2 + 24) + 8 * v13); // 0x41112b\n        char v22 = *(char *)(v20 + a2 + v21); // 0x41112f\n        v14 = v22;\n        if (v22 > -1) {\n            goto lab_0x410c4b;\n        } else {\n            // 0x410c3e\n            v14 = *(char *)(v4 + v13);\n            goto lab_0x410c4b;\n        }\n    }\n  lab_0x410c4b:;\n    int64_t v23 = v14;\n    int32_t v24 = v14;\n    *(char *)a1 = v14;\n    *(char *)(v1 + 8) = 1;\n    int64_t v25; // 0x410af0\n    int64_t v26; // 0x410af0\n    int32_t wc2; // 0x410af0\n    int32_t v27; // 0x410af0\n    int32_t v28; // 0x410af0\n    char v29; // 0x410af0\n    if (v6 < 2) {\n        uint16_t v30 = *(int16_t *)(2 * v23 + (int64_t)*__ctype_b_loc()); // 0x410ccc\n        char v31 = *v5; // 0x410ce0\n        v29 = 64 * ((char)(v30 / 8) % 2 | (char)(v14 == 95)) | v31 & -65;\n        v28 = v24;\n        v26 = v23;\n        goto lab_0x410c83;\n    } else {\n        // 0x410c57\n        v27 = v24;\n        wc2 = *(int32_t *)(*(int64_t *)(a2 + 16) + 4 * v13);\n        v25 = v23;\n        goto lab_0x410c5e;\n    }\n  lab_0x41117b:;\n    unsigned char v32 = *(char *)(v4 + v13); // 0x41117b\n    *(char *)(v1 + 8) = 1;\n    *(char *)a1 = v32;\n    v27 = v32;\n    wc2 = v15;\n    v25 = v32;\n    goto lab_0x410c5e;\n  lab_0x410c5e:;\n    int32_t v33 = iswalnum(wc2); // 0x410c60\n    v29 = 64 * (char)(wc2 == 95 | v33 != 0) | *v5 & -65;\n    v28 = v27;\n    v26 = v25;\n    goto lab_0x410c83;\n  lab_0x410c83:\n    // 0x410c83\n    *v5 = v29;\n    uint64_t v34 = v26 + 0xffffffd9; // 0x410c83\n    g75 = v34 % 256;\n    switch ((char)v34) {\n        case 0: {\n            // 0x4110bb\n            if ((a3 & 0x80000) == 0) {\n                // 0x4110cd\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 128;\n            }\n            // 0x410c1e\n            return 2;\n        }\n        case 1: {\n            // 0x4110a4\n            if ((a3 & 0x2000) != 0) {\n                // 0x410c1e\n                return 2;\n            }\n            // 0x410d0a\n            *(char *)(v1 + 8) = 8;\n            // 0x410c1e\n            return 2;\n        }\n        case 2: {\n            // 0x41108d\n            if ((a3 & 0x2000) != 0) {\n                // 0x410c1e\n                return 2;\n            }\n            // 0x410d2a\n            *(char *)(v1 + 8) = 9;\n            // 0x410c1e\n            return 2;\n        }\n        case 4: {\n            // 0x411072\n            if ((a3 & 1026) != 2) {\n                // 0x410c1e\n                return 2;\n            }\n            // 0x410d62\n            *(char *)(v1 + 8) = 18;\n            // 0x410c1e\n            return 2;\n        }\n        case 10: {\n        }\n        case 11: {\n        }\n        case 12: {\n        }\n        case 13: {\n        }\n        case 14: {\n        }\n        case 15: {\n        }\n        case 16: {\n        }\n        case 17: {\n        }\n        case 18: {\n            // 0x41104a\n            if ((a3 & 0x4000) == 0) {\n                // 0x41105c\n                *(char *)(v1 + 8) = 4;\n                *a1 = (int64_t)(v28 - 49);\n            }\n            // 0x410c1e\n            return 2;\n        }\n        case 21: {\n            // 0x411029\n            if ((a3 & 0x80000) == 0) {\n                // 0x41103b\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 6;\n            }\n            // 0x410c1e\n            return 2;\n        }\n        case 23: {\n            // 0x411008\n            if ((a3 & 0x80000) == 0) {\n                // 0x41101a\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 9;\n            }\n            // 0x410c1e\n            return 2;\n        }\n        case 24: {\n            // 0x410fed\n            if ((a3 & 1026) != 2) {\n                // 0x410c1e\n                return 2;\n            }\n            // 0x410d92\n            *(char *)(v1 + 8) = 19;\n            // 0x410c1e\n            return 2;\n        }\n        case 27: {\n            // 0x410fcc\n            if ((a3 & 0x80000) == 0) {\n                // 0x410fde\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 512;\n            }\n            // 0x410c1e\n            return 2;\n        }\n        case 44: {\n            // 0x410fb1\n            if ((a3 & 0x80000) == 0) {\n                // 0x410fc3\n                *(char *)(v1 + 8) = 35;\n            }\n            // 0x410c1e\n            return 2;\n        }\n        case 48: {\n            // 0x410f96\n            if ((a3 & 0x80000) == 0) {\n                // 0x410fa8\n                *(char *)(v1 + 8) = 33;\n            }\n            // 0x410c1e\n            return 2;\n        }\n        case 57: {\n            // 0x410f75\n            if ((a3 & 0x80000) == 0) {\n                // 0x410f87\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 64;\n            }\n            // 0x410c1e\n            return 2;\n        }\n        case 59: {\n            // 0x410f54\n            if ((a3 & 0x80000) == 0) {\n                // 0x410f66\n                *(char *)(v1 + 8) = 12;\n                *(int32_t *)a1 = 256;\n            }\n            // 0x410c1e\n            return 2;\n        }\n        case 76: {\n            // 0x410f39\n            if ((a3 & 0x80000) == 0) {\n                // 0x410f4b\n                *(char *)(v1 + 8) = 34;\n            }\n            // 0x410c1e\n            return 2;\n        }\n        case 80: {\n            // 0x410f1e\n            if ((a3 & 0x80000) == 0) {\n                // 0x410f30\n                *(char *)(v1 + 8) = 32;\n            }\n            // 0x410c1e\n            return 2;\n        }\n        case 84: {\n            // 0x410f00\n            if ((a3 & 0x1200) != 512) {\n                // 0x410c1e\n                return 2;\n            }\n            // 0x410df9\n            *(char *)(v1 + 8) = 23;\n            // 0x410c1e\n            return 2;\n        }\n        case 85: {\n            // 0x410ee5\n            if ((a3 & 0x8400) == 0) {\n                // 0x410ef7\n                *(char *)(v1 + 8) = 10;\n            }\n            // 0x410c1e\n            return 2;\n        }\n        case 86: {\n            // 0x410eca\n            if ((a3 & 0x1200) != 512) {\n                // 0x410c1e\n                return 2;\n            }\n            // 0x410ec1\n            *(char *)(v1 + 8) = 24;\n            // 0x410c1e\n            return 2;\n        }\n    }\n    // 0x410c1e\n    return 2;\n}\n"
        },
        {
            "funcName": "function_4111a0",
            "funcStartAddr": "4111a0",
            "funcEndAddr": "411256",
            "decompiledFuncCode": "int64_t function_4111a0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t * v1 = (int64_t *)(a1 + 72);\n    int64_t result2 = -1;\n    *v1 = (0x100000000 * function_410af0((int64_t *)a2, a1, a3) >> 32) + *v1;\n    char v2 = *(char *)(a2 + 8); // 0x4111d9\n    int64_t result = result2; // 0x4111a0\n    switch (v2) {\n        case 2: {\n            // 0x411237\n            return -2;\n        }\n        case 24: {\n            // 0x411237\n            return result;\n        }\n    }\n    // 0x4111e6\n    int64_t v3; // 0x4111a0\n    unsigned char v4 = (char)v3; // 0x4111ce\n    while (v4 != 44) {\n        int64_t v5 = -2; // 0x4111ed\n        if (v2 == 1) {\n            // 0x4111f8\n            v5 = -2;\n            if (result2 != -2 && v4 <= 57) {\n                int64_t v6 = v4; // 0x4111ce\n                if (result2 == -1) {\n                    // 0x411248\n                    v5 = v6 - 48;\n                } else {\n                    int64_t v7 = 10 * result2 + v6; // 0x41120f\n                    int64_t v8 = v7 - 0x8030; // 0x411218\n                    v5 = v8 < 0 == (0x802f - v7 & v7) < 0 == (v8 != 0) ? 0x8000 : v7 - 48;\n                }\n            }\n        }\n        // 0x4111c0\n        result2 = v5;\n        *v1 = (0x100000000 * function_410af0((int64_t *)a2, a1, a3) >> 32) + *v1;\n        v2 = *(char *)(a2 + 8);\n        result = result2;\n        switch (v2) {\n            case 2: {\n                // 0x411237\n                return -2;\n            }\n            case 24: {\n                // 0x411237\n                return result;\n            }\n        }\n        // 0x4111e6\n        int64_t v9; // 0x4111a0\n        v4 = *(char *)&v9;\n    }\n    // 0x411237\n    return result2;\n}\n"
        },
        {
            "funcName": "function_411260",
            "funcStartAddr": "411260",
            "funcEndAddr": "412744",
            "decompiledFuncCode": "int64_t function_411260(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x411260\n    int128_t v1; // 0x411260\n    int128_t v2 = v1;\n    int64_t v3 = a6;\n    int64_t v4 = a3;\n    int64_t v5; // bp-280, 0x411260\n    int64_t v6 = &v5; // 0x41126a\n    unsigned char v7 = *(char *)(a3 + 8); // 0x411279\n    int64_t v8 = v7; // 0x411279\n    int64_t v9 = v4; // 0x411285\n    v4 = v8;\n    g76 = v8;\n    int32_t v10 = v7;\n    int64_t * v11; // 0x411260\n    int32_t v12; // 0x411260\n    int64_t v13; // 0x411260\n    int64_t v14; // bp-88, 0x411260\n    int64_t v15; // 0x411260\n    int64_t v16; // 0x411fbb\n    char v17; // 0x411fc2\n    int64_t * mem2; // 0x4119a9\n    int64_t v18; // 0x4119a9\n    int64_t * v19; // 0x4119d0\n    char * v20; // 0x4119d7\n    switch (v7) {\n        case 1: {\n            int64_t v21 = a2 + 112; // 0x411b27\n            int64_t v22 = a2 + 128; // 0x411b2b\n            int64_t v23 = function_408ca0(v21, v22, 0, 0, v9); // 0x411b38\n            if (v23 == 0) {\n                // 0x411bf1\n                *(int32_t *)a6 = 12;\n                // 0x4113d8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x41132a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x411b4b\n            if (*(int32_t *)(a2 + 180) >= 2) {\n                int64_t * v24 = (int64_t *)(a1 + 72); // 0x411b68\n                int64_t v25 = &v14;\n                int64_t v26 = 0x100000000 * v23 >> 32; // 0x411bd5\n                uint64_t v27 = *v24; // 0x411b68\n                while (*(int64_t *)(a1 + 104) > v27) {\n                    // 0x411b76\n                    if (v27 == *(int64_t *)(a1 + 48)) {\n                        // break -> 0x411300\n                        break;\n                    }\n                    // 0x411b80\n                    if (*(int32_t *)(*(int64_t *)(a1 + 16) + 4 * v27) != -1) {\n                        // break -> 0x411300\n                        break;\n                    }\n                    // 0x411b8e\n                    *v24 = (0x100000000 * function_410af0((int64_t *)v9, a1, a4) >> 32) + *v24;\n                    int64_t v28 = function_408ca0(v21, v22, 0, 0, v9); // 0x411bb1\n                    v26 = function_408ca0(v21, v22, (int32_t)v26, (int32_t)v28, v25);\n                    if (v28 == 0 || v26 == 0) {\n                        // 0x411bf1\n                        *(int32_t *)a6 = 12;\n                        // 0x4113d8\n                        *(int64_t *)(v6 + 24) = 0;\n                        // 0x41132a\n                        return *(int64_t *)(v6 + 24);\n                    }\n                    v27 = *v24;\n                }\n            }\n            goto lab_0x411300;\n        }\n        case 4: {\n            int64_t v29 = 1 << v10 % 32; // 0x411c11\n            if ((*(int64_t *)(a2 + 168) & v29) == 0) {\n                // 0x41228c\n                *(int32_t *)a6 = 6;\n                // 0x41132a\n                return *(int64_t *)(v6 + 24);\n            }\n            int64_t * v30 = (int64_t *)(a2 + 160); // 0x411c2c\n            *v30 = *v30 | v29;\n            if (function_408ca0(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n                // 0x411bf1\n                *(int32_t *)a6 = 12;\n                // 0x4113d8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x41132a\n                return *(int64_t *)(v6 + 24);\n            }\n            int64_t * v31 = (int64_t *)(a2 + 152); // 0x411c4d\n            *v31 = *v31 + 1;\n            char * v32 = (char *)(a2 + 176); // 0x411c55\n            *v32 = *v32 | 2;\n            goto lab_0x411300;\n        }\n        case 5: {\n            // 0x411c61\n            if (function_408ca0(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n                // 0x411bf1\n                *(int32_t *)a6 = 12;\n                // 0x4113d8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x41132a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x411c8b\n            if (*(int32_t *)(a2 + 180) >= 2) {\n                char * v33 = (char *)(a2 + 176); // 0x411c98\n                *v33 = *v33 | 2;\n            }\n            goto lab_0x411300;\n        }\n        case 8: {\n            int64_t * v34 = (int64_t *)(a2 + 48); // 0x411341\n            uint64_t v35 = *v34; // 0x411341\n            v5 = a5;\n            *v34 = v35 + 1;\n            int64_t v36 = function_410af0((int64_t *)v9, a1, a4 | 0x800000); // 0x411366\n            int64_t * v37 = (int64_t *)(a1 + 72); // 0x41136d\n            *v37 = (0x100000000 * v36 >> 32) + *v37;\n            char * v38 = (char *)(v9 + 8); // 0x411373\n            int64_t v39 = 0; // 0x411379\n            if (*v38 != 9) {\n                // 0x41137f\n                v4 = v9;\n                int64_t v40 = function_412890(a1, a2, v9, a4, v5 + 1, a6); // 0x41139b\n                if (*(int32_t *)&v3 != 0) {\n                    // 0x4113d8\n                    *(int64_t *)(v6 + 24) = 0;\n                    // 0x41132a\n                    return *(int64_t *)(v6 + 24);\n                }\n                // 0x4113a9\n                v39 = v40;\n                if (*v38 != 9) {\n                    if (v40 != 0) {\n                        // 0x4113ba\n                        function_4064d0(v40, 0x4076e0, 0);\n                    }\n                    // 0x4113c9\n                    *(int32_t *)a6 = 8;\n                  lab_0x4113d8:\n                    // 0x4113d8\n                    *(int64_t *)(v6 + 24) = 0;\n                    // 0x41132a\n                    return *(int64_t *)(v6 + 24);\n                }\n            }\n            // 0x411e02\n            if (v35 < 9) {\n                int32_t v41 = 1 << (int32_t)v35 % 32;\n                v4 = v41;\n                int64_t * v42 = (int64_t *)(a2 + 168); // 0x411e5a\n                *v42 = *v42 | (int64_t)v41;\n            }\n            int64_t v43 = function_408ca0(a2 + 112, a2 + 128, (int32_t)v39, 0, (int64_t)&v14); // 0x411e2d\n            if (v43 == 0) {\n                // 0x411bf1\n                *(int32_t *)a6 = 12;\n                // 0x4113d8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x41132a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x411e40\n            *(int64_t *)(v43 + 40) = v35;\n            goto lab_0x411300;\n        }\n        case 9: {\n            if ((a4 & 0x20000) == 0) {\n                // 0x411de9\n                *(int32_t *)a6 = 16;\n                // 0x41132a\n                return *(int64_t *)(v6 + 24);\n            }\n            goto lab_0x4112d0;\n        }\n        case 11: {\n            goto lab_0x4112b1;\n        }\n        case 12: {\n            char * v44 = (char *)(a2 + 176); // 0x411cb6\n            unsigned char v45 = *v44; // 0x411cb6\n            if ((v45 & 16) != 0) {\n                // 0x411d10\n            } else {\n                int64_t v46 = v45; // 0x411cb6\n                *v44 = v45 | 16;\n                v13 = 0;\n                v15 = 0;\n                if ((v46 & 8) != 0) {\n                    goto lab_0x412505;\n                } else {\n                    // 0x411cd7\n                    *(int64_t *)(a2 + 184) = 0x3ff000000000000;\n                    *(int64_t *)(a2 + 192) = 0x7fffffe87fffffe;\n                    v13 = 128;\n                    v15 = 2;\n                    if ((v46 & 4) == 0) {\n                        goto lab_0x412505;\n                    } else {\n                        // 0x411d01\n                        __asm_movups(*(int128_t *)(a2 + 200), __asm_pxor(v2, v2));\n                        v12 = *(int32_t *)&v4;\n                        goto lab_0x411d10_2;\n                    }\n                }\n            }\n        }\n        case 18: {\n            goto lab_0x4112b1;\n        }\n        case 19: {\n            goto lab_0x4112b1;\n        }\n        case 20: {\n            int64_t * mem = calloc(32, 1); // 0x411993\n            v5 = (int64_t)mem;\n            mem2 = calloc(80, 1);\n            if (mem == NULL || mem2 == NULL) {\n                // 0x412276\n                free((int64_t *)v5);\n                free(mem2);\n                // 0x411bf1\n                *(int32_t *)a6 = 12;\n                // 0x4113d8\n                *(int64_t *)(v6 + 24) = 0;\n                // 0x41132a\n                return *(int64_t *)(v6 + 24);\n            }\n            // 0x4119c5\n            v18 = (int64_t)mem2;\n            v19 = (int64_t *)v9;\n            int64_t v47 = function_406540(v19, a1, a4); // 0x4119d0\n            v20 = (char *)(v9 + 8);\n            char v48 = *v20; // 0x4119d7\n            v17 = v48;\n            v16 = v47;\n            switch (v48) {\n                case 2: {\n                    // 0x41224a\n                    *(int32_t *)a6 = 2;\n                    v11 = (int64_t *)(v6 + 48);\n                    goto lab_0x411f1b_3;\n                }\n                case 25: {\n                    char * v49 = (char *)(v18 + 32); // 0x411f8e\n                    *v49 = *v49 | 1;\n                    if ((a4 & 256) != 0) {\n                        int64_t * v50 = (int64_t *)v5; // 0x411fa2\n                        *v50 = *v50 | 1024;\n                    }\n                    int64_t * v51 = (int64_t *)(a1 + 72); // 0x411fac\n                    *v51 = *v51 + (0x100000000 * v47 >> 32);\n                    v16 = function_406540(v19, a1, a4);\n                    v17 = *v20;\n                    if (v17 == 2) {\n                        // 0x41224a\n                        *(int32_t *)a6 = 2;\n                        v11 = (int64_t *)(v6 + 48);\n                        goto lab_0x411f1b_3;\n                    } else {\n                        goto lab_0x4119f2;\n                    }\n                }\n                default: {\n                    goto lab_0x4119f2;\n                }\n            }\n        }\n        case 23: {\n            if ((a4 & 0x1000000) != 0) {\n              lab_0x4115d5:\n                // 0x4115d5\n                *(int64_t *)(v6 + 24) = 0;\n                *(int32_t *)*(int64_t *)(v6 + 48) = 13;\n                // 0x41132a\n                return *(int64_t *)(v6 + 24);\n            }\n            goto lab_0x4112b1;\n        }\n        case 24: {\n            goto lab_0x4112d0;\n        }\n        case 32: {\n            goto lab_0x411a94;\n        }\n        case 33: {\n            goto lab_0x411a94;\n        }\n        case 34: {\n            goto lab_0x411ae0;\n        }\n        case 35: {\n            goto lab_0x411ae0;\n        }\n        case 36: {\n            // 0x411b02\n            *(int32_t *)a6 = 5;\n            // 0x41132a\n            return *(int64_t *)(v6 + 24);\n        }\n        default: {\n            goto lab_0x4113d8;\n        }\n    }\n  lab_0x4118eb:;\n    // 0x4118eb\n    int64_t * v52; // 0x411260\n    if (*v52 == 0) {\n        goto lab_0x4113d8;\n    } else {\n        goto lab_0x41168b;\n    }\n  lab_0x41168b:\n    // 0x41168b\n    function_4064d0(*v52, 0x4076e0, 0);\n    *v52 = 0;\n    return *(int64_t *)(v6 + 24);\n  lab_0x411782:;\n    // 0x411782\n    int64_t v53; // 0x411260\n    char * v54 = (char *)(v53 + 8);\n    char * v55 = v54; // 0x41178b\n    int128_t v56; // 0x411260\n    int128_t v57 = v56; // 0x41178b\n    int64_t * v58; // 0x411300\n    int64_t * v59; // 0x411260\n    if ((*v58 & 0x200000) == 0) {\n        // 0x41225a\n        if (*v54 != 2) {\n            // 0x4118e0\n            *(int32_t *)*v59 = 10;\n            goto lab_0x4118eb;\n        } else {\n            // 0x412266\n            *(int32_t *)*v59 = 9;\n            goto lab_0x4118eb;\n        }\n    }\n    goto lab_0x411791;\n  lab_0x4118a4:;\n    // 0x4118a4\n    int64_t v83; // 0x411260\n    int64_t v336 = v83; // 0x4118a6\n    int64_t v337 = v336 - 0x7fff; // 0x4118a6\n    int64_t v84; // 0x411260\n    int64_t v316 = v84; // 0x4118b4\n    if (v337 < 0 == (0x7ffe - v336 & v336) < 0 == (v337 != 0)) {\n        // 0x4118b6\n        *(int32_t *)*v59 = 15;\n        goto lab_0x4118eb;\n    }\n    goto lab_0x411849;\n  lab_0x4117e9:;\n    int64_t v338 = *v58; // 0x4117e9\n    v4 = v338;\n    int128_t v80; // 0x411755\n    int128_t * v78; // 0x411260\n    *v78 = (int128_t)__asm_movaps(v80);\n    int64_t v66; // 0x411260\n    int64_t v339 = function_4111a0(v66, v53, v338); // 0x4117f9\n    v5 = v339;\n    v56 = __asm_movdqa(*v78);\n    int64_t v81; // 0x411260\n    if (v339 == -2) {\n        goto lab_0x411782;\n    } else {\n        int64_t v340 = v81;\n        if (v339 != -1 == v339 < v340) {\n            // 0x4118e0\n            *(int32_t *)*v59 = 10;\n            goto lab_0x4118eb;\n        }\n        // 0x411825\n        if (*(char *)(v53 + 8) != 24) {\n            // 0x4118e0\n            *(int32_t *)*v59 = 10;\n            goto lab_0x4118eb;\n        }\n        // 0x411831\n        v83 = v339;\n        v84 = v340;\n        if (v339 != -1) {\n            goto lab_0x4118a4;\n        } else {\n            int64_t v341 = v340 - 0x7fff; // 0x41183a\n            v316 = v340;\n            if (v341 < 0 == (0x7ffe - v340 & v340) < 0 == (v341 != 0)) {\n                // 0x4118b6\n                *(int32_t *)*v59 = 15;\n                goto lab_0x4118eb;\n            }\n            goto lab_0x411849;\n        }\n    }\n  lab_0x411791:;\n    // 0x411791\n    int64_t * v60; // 0x411406\n    int64_t v61; // 0x411406\n    *v60 = v61;\n    int128_t * v62; // 0x41140a\n    *v62 = (int128_t)__asm_movaps(v57);\n    *v55 = 1;\n    int64_t v63 = *v52; // 0x4117a5\n    int64_t v64 = v53; // 0x4117a5\n    int64_t v65 = v66; // 0x4117a5\n    goto lab_0x41157e;\n  lab_0x4117b0:\n    // 0x4117b0\n    if (*(int32_t *)*v59 != 0) {\n        // 0x4113d8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x41132a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x4117bf;\n  lab_0x411849:;\n    int64_t v315 = v316;\n    int64_t v317 = *v58; // 0x411849\n    v4 = v317;\n    int64_t v318 = function_410af0((int64_t *)v53, v66, v317); // 0x411854\n    int64_t v319 = *v52; // 0x411859\n    *v60 = *v60 + (0x100000000 * v318 >> 32);\n    int64_t v127; // 0x411260\n    int64_t v99; // 0x411260\n    int64_t v132; // 0x411260\n    int64_t v128; // 0x411260\n    int64_t v101; // 0x411260\n    int64_t v135; // 0x411260\n    int64_t v102; // 0x411260\n    int64_t v103; // 0x411260\n    int64_t v136; // 0x411260\n    int64_t v129; // 0x411260\n    int64_t v134; // 0x411260\n    int64_t v100; // 0x411260\n    int64_t v133; // 0x411260\n    int64_t * v89; // 0x411260\n    int64_t * v110; // 0x411260\n    int64_t * v118; // 0x411260\n    int64_t v114; // 0x411260\n    char * v108; // 0x411260\n    if (v319 == 0) {\n        goto lab_0x4117b0;\n    } else {\n        int64_t v320 = v5; // 0x41186d\n        if ((v320 || v315) != 0) {\n            if (v315 < 1) {\n                // 0x412738\n                v4 = 0;\n                v132 = 0;\n                v133 = v315;\n                v134 = *v52;\n                v135 = v53;\n                v136 = v66;\n                goto lab_0x411962;\n            } else {\n                int64_t v321; // 0x411260\n                int64_t v322; // 0x411260\n                int64_t v323; // 0x411260\n                int64_t v324; // 0x411260\n                int64_t v325; // 0x411260\n                if (v315 == 1) {\n                    int64_t v326 = *v52; // 0x412707\n                    v321 = v320;\n                    v322 = v53;\n                    v323 = v326;\n                    v324 = v66;\n                    v325 = v326;\n                } else {\n                    int64_t v327 = *v110; // 0x411603\n                    int64_t v328 = *v52; // 0x411608\n                    *v89 = v66;\n                    *v118 = v53;\n                    int64_t v329 = v327 + 112; // 0x41161f\n                    int64_t v330 = v327 + 128; // 0x411623\n                    int64_t v331 = 2; // 0x41162d\n                    int64_t v332 = function_408d80(v328, *v110); // 0x41164a\n                    v4 = v328;\n                    *v108 = 16;\n                    int64_t v333 = function_408ca0(v329, v330, (int32_t)v328, (int32_t)v332, v114); // 0x41166e\n                    if (v332 == 0 || v333 == 0) {\n                        // 0x411680\n                        *(int32_t *)*v59 = 12;\n                        goto lab_0x41168b;\n                    }\n                    // 0x411635\n                    v331++;\n                    int64_t v334 = v333; // 0x41163c\n                    int64_t v335 = v332; // 0x41163c\n                    while (v315 >= v331) {\n                        // 0x411642\n                        v332 = function_408d80(v335, *v110);\n                        v4 = v334;\n                        *v108 = 16;\n                        v333 = function_408ca0(v329, v330, (int32_t)v334, (int32_t)v332, v114);\n                        if (v332 == 0 || v333 == 0) {\n                            // 0x411680\n                            *(int32_t *)*v59 = 12;\n                            goto lab_0x41168b;\n                        }\n                        // 0x411635\n                        v331++;\n                        v334 = v333;\n                        v335 = v332;\n                    }\n                    // 0x411900\n                    v321 = v5;\n                    v322 = *v118;\n                    v323 = v332;\n                    v324 = *v89;\n                    v325 = v333;\n                }\n                // 0x411913\n                v4 = v325;\n                v127 = v325;\n                v128 = v322;\n                v129 = v324;\n                v99 = v325;\n                v100 = v315;\n                v101 = v322;\n                v102 = v323;\n                v103 = v324;\n                if (v315 != v321) {\n                    goto lab_0x41193f;\n                } else {\n                    goto lab_0x411920;\n                }\n            }\n        } else {\n            // 0x41187a\n            v4 = 0;\n            function_4064d0(v319, 0x4076e0, 0);\n            if (*(int32_t *)*v59 != 0) {\n                goto lab_0x41168b;\n            }\n            goto lab_0x4117bf;\n        }\n    }\n  lab_0x41157e:;\n    uint32_t v67 = *(int32_t *)*v59; // 0x411583\n    v4 = v67;\n    if (v63 == 0 == (v67 != 0)) {\n        goto lab_0x4118eb;\n    }\n    // 0x411592\n    *v52 = v63;\n    int64_t v68 = v63; // 0x411592\n    int64_t v69 = v64; // 0x411592\n    int64_t v70 = v65; // 0x411592\n    goto lab_0x411597;\n  lab_0x4117bf:\n    // 0x4117bf\n    *v52 = 0;\n    v68 = 0;\n    v69 = v53;\n    v70 = v66;\n    goto lab_0x411597;\n  lab_0x411718:;\n    // 0x411718\n    int64_t v96; // 0x411260\n    int64_t v104 = v96;\n    function_4064d0(v104, 0x406670, (int32_t)*(int64_t *)(v104 + 40));\n    goto lab_0x411729;\n  lab_0x41147a:;\n    // 0x41147a\n    int64_t v94; // 0x411260\n    int64_t v105 = v94;\n    int64_t v93; // 0x411260\n    int64_t v106 = v93;\n    int64_t v92; // 0x411260\n    int64_t v107 = v92;\n    char v90; // 0x411260\n    *v108 = v90;\n    int64_t v109 = *v110; // 0x411481\n    int64_t v111 = v109 + 112; // 0x411493\n    int64_t v112 = v109 + 128; // 0x411497\n    int64_t v113 = function_408ca0(v111, v112, (int32_t)v107, 0, v114); // 0x4114a4\n    v4 = v113;\n    if (v113 == 0) {\n        // 0x411680\n        *(int32_t *)*v59 = 12;\n        goto lab_0x41168b;\n    }\n    // 0x4114b5\n    int64_t v91; // 0x411260\n    int64_t v115 = v91 + 2; // 0x4114b5\n    int64_t v116 = v113; // 0x4114bd\n    int64_t v117 = v106; // 0x4114bd\n    if (v115 <= v5) {\n        // 0x4114c3\n        *v118 = v106;\n        int64_t v119 = v115; // 0x4114cb\n        int64_t v120 = v107; // 0x4114cb\n        v120 = function_408d80(v120, *v110);\n        v4 = v113;\n        *v108 = 16;\n        int64_t v121 = function_408ca0(v111, v112, (int32_t)v113, (int32_t)v120, v114); // 0x4114fa\n        if (v120 == 0 || v121 == 0) {\n            // 0x411680\n            *(int32_t *)*v59 = 12;\n            goto lab_0x41168b;\n        }\n        // 0x411511\n        v4 = v121;\n        *v108 = 10;\n        int64_t v122 = function_408ca0(v111, v112, (int32_t)v121, 0, v114); // 0x41152c\n        if (v122 == 0) {\n            // 0x411680\n            *(int32_t *)*v59 = 12;\n            goto lab_0x41168b;\n        }\n        // 0x41153d\n        v119++;\n        int64_t v123 = v122; // 0x411545\n        while (v119 <= v5) {\n            // 0x4114ce\n            v120 = function_408d80(v120, *v110);\n            v4 = v123;\n            *v108 = 16;\n            v121 = function_408ca0(v111, v112, (int32_t)v123, (int32_t)v120, v114);\n            if (v120 == 0 || v121 == 0) {\n                // 0x411680\n                *(int32_t *)*v59 = 12;\n                goto lab_0x41168b;\n            }\n            // 0x411511\n            v4 = v121;\n            *v108 = 10;\n            v122 = function_408ca0(v111, v112, (int32_t)v121, 0, v114);\n            if (v122 == 0) {\n                // 0x411680\n                *(int32_t *)*v59 = 12;\n                goto lab_0x41168b;\n            }\n            // 0x41153d\n            v119++;\n            v123 = v122;\n        }\n        // 0x411547\n        v4 = v122;\n        v116 = v122;\n        v117 = *v118;\n    }\n    int64_t v124 = v117;\n    int64_t v125 = v116; // 0x41155d\n    int64_t v126 = *v89; // 0x41154f\n    v127 = v125;\n    v128 = v124;\n    v129 = v105;\n    if (v126 == 0) {\n        goto lab_0x411920;\n    } else {\n        // 0x41155d\n        *v108 = 16;\n        v63 = function_408ca0(v111, v112, (int32_t)v126, (int32_t)v125, v114);\n        v64 = v124;\n        v65 = v105;\n        goto lab_0x41157e;\n    }\n  lab_0x411597:;\n    unsigned char v71 = *(char *)(v69 + 8); // 0x411597\n    if ((*v58 & 0x1000000) != 0) {\n        if (v71 != 11 != v71 != 23) {\n            // 0x4115bc\n            if (v68 == 0) {\n                goto lab_0x4115d5;\n            } else {\n                // 0x4115c6\n                function_4064d0(v68, 0x4076e0, 0);\n                goto lab_0x4115d5;\n            }\n        }\n    }\n    char v72 = v71; // 0x411324\n    int64_t v73 = v70; // 0x411324\n    int64_t v74 = v69; // 0x411324\n    if (v71 >= 24) {\n        // break -> 0x41132a\n        goto lab_0x41132a_2;\n    }\n    goto lab_0x4113f0;\n  lab_0x411729:\n    // 0x411729\n    v90 = v5 == -1 ? 11 : 10;\n    int64_t v95; // 0x411260\n    v91 = v95;\n    v92 = v104;\n    int64_t v97; // 0x411260\n    v93 = v97;\n    int64_t v98; // 0x411260\n    v94 = v98;\n    goto lab_0x41147a;\n  lab_0x411920:\n    // 0x411920\n    *v52 = v127;\n    v68 = v127;\n    v69 = v128;\n    v70 = v129;\n    goto lab_0x411597;\n  lab_0x41193f:\n    // 0x41193f\n    *v89 = v99;\n    int64_t v130 = function_408d80(v102, *v110); // 0x41194c\n    int64_t v131 = *v89; // 0x411951\n    v4 = v131;\n    v132 = v131;\n    v133 = v100;\n    v134 = v130;\n    v135 = v101;\n    v136 = v103;\n    if (v130 == 0) {\n        // 0x411680\n        *(int32_t *)*v59 = 12;\n        goto lab_0x41168b;\n    }\n    goto lab_0x411962;\n  lab_0x411962:\n    // 0x411962\n    *v89 = v132;\n    v95 = v133;\n    v96 = v134;\n    v97 = v135;\n    v98 = v136;\n    if (*(char *)(v134 + 48) != 17) {\n        goto lab_0x411729;\n    } else {\n        goto lab_0x411718;\n    }\n  lab_0x41255a:;\n    // 0x41255a\n    uint64_t v137; // 0x411260\n    int64_t v138 = 1 << v137;\n    v4 = v138;\n    int64_t * v139; // 0x411260\n    *v139 = *v139 | v138;\n    goto lab_0x412548;\n  lab_0x412548:;\n    int64_t v140 = v137 + 1; // 0x412550\n    if (v137 == 63) {\n        // break -> 0x412569\n        goto lab_0x412569;\n    }\n    goto lab_0x412552;\n  lab_0x411f1b_3:\n    // 0x411f1b\n    free((int64_t *)v5);\n    function_407690(v18);\n    if (*(int32_t *)*v11 != 0) {\n        // 0x4113d8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x41132a\n        return *(int64_t *)(v6 + 24);\n    }\n    // 0x411f3d\n    *(int64_t *)(v6 + 24) = 0;\n    goto lab_0x411300;\n  lab_0x4123be:;\n    // 0x4123be\n    int64_t * v177; // 0x411260\n    *(int32_t *)*v177 = 12;\n    v11 = v177;\n    goto lab_0x411f1b_3;\n  lab_0x4125c6_3:\n    // 0x4125c6\n    *(int32_t *)*v177 = 11;\n    v11 = v177;\n    goto lab_0x411f1b_3;\n  lab_0x4124c5_5:\n    // 0x4124c5\n    *(int32_t *)*v177 = 3;\n    v11 = v177;\n    goto lab_0x411f1b_3;\n  lab_0x411a84:;\n    // 0x411a84\n    int64_t v188; // 0x411a59\n    int64_t v254 = v188 & 0xffffffff; // 0x411a5e\n    int64_t v234; // 0x411260\n    int64_t v255; // 0x411260\n    int64_t v235; // 0x411260\n    int64_t * v152; // 0x411a34\n    int32_t * v168; // 0x411260\n    int64_t v178; // 0x411260\n    int64_t * v179; // 0x411260\n    int64_t * v180; // 0x411260\n    int64_t * v181; // 0x411260\n    int64_t * v182; // 0x411260\n    int64_t v148; // 0x411a03\n    int64_t * v149; // 0x411a1e\n    int64_t v151; // 0x411a34\n    switch (g77) {\n        case 0: {\n            unsigned char v256 = *(char *)v151; // 0x411ec1\n            unsigned char v257 = v256 % 64;\n            int64_t v258 = v257 == 0 ? 1 : 1 << (int64_t)v257;\n            v4 = v258;\n            int64_t * v259 = (int64_t *)(v148 + (int64_t)(v256 / 8 & 24)); // 0x411ed8\n            *v259 = v258 | *v259;\n            v255 = v254;\n            goto lab_0x411e7f;\n        }\n        case 1: {\n            int64_t v260 = *v181; // 0x411e9d\n            v4 = v260;\n            int64_t v261 = *mem2; // 0x411ea1\n            int64_t v262 = v260; // 0x411eaa\n            int64_t v263 = v261; // 0x411eaa\n            if (v260 == *v182) {\n                int64_t v264 = 2 * v260 | 1; // 0x4122c6\n                *v182 = v264;\n                int64_t * mem3 = realloc((int64_t *)v261, 4 * (int32_t)v264); // 0x4122d8\n                if (mem3 == NULL) {\n                    goto lab_0x4123be;\n                }\n                // 0x4122e6\n                v263 = (int64_t)mem3;\n                *mem2 = v263;\n                v262 = *v181;\n                v4 = v262;\n            }\n            // 0x411eb0\n            *v181 = v262 + 1;\n            *(int32_t *)(4 * v4 + v263) = *v168;\n            v255 = v254;\n            goto lab_0x411e7f;\n        }\n        case 2: {\n            int32_t v265 = function_40b870(v148, *v152); // 0x411e75\n            *(int32_t *)*v177 = v265;\n            v255 = v254;\n            v11 = v177;\n            if (v265 != 0) {\n                goto lab_0x411f1b_3;\n            }\n            goto lab_0x411e7f;\n        }\n        case 3: {\n            int32_t v266 = function_40b870(v148, *v152); // 0x411f5d\n            *(int32_t *)*v177 = v266;\n            v255 = v254;\n            v11 = v177;\n            if (v266 != 0) {\n                goto lab_0x411f1b_3;\n            }\n            goto lab_0x411e7f;\n        }\n        case 4: {\n            int64_t v267 = *(int64_t *)(a1 + 120); // 0x411ee3\n            *v179 = *v149;\n            int64_t v268 = function_40b8c0(v267, v148, v18 + 24, v178, v180, *v152, (int64_t)&g81); // 0x411f03\n            int32_t v269 = v268; // 0x411f0d\n            *(int32_t *)*v177 = v269;\n            v3 = *v179;\n            v255 = v254;\n            v11 = v177;\n            if (v269 != 0) {\n                goto lab_0x411f1b_3;\n            }\n            goto lab_0x411e7f;\n        }\n        default: {\n            // 0x4126c4\n            __assert_fail(\"0\", \"lib/regcomp.c\", 3315, \"parse_bracket_exp\");\n            v234 = &g81;\n            v235 = (int64_t)\"parse_bracket_exp\";\n            goto lab_0x4126dd_3;\n        }\n    }\n  lab_0x411fe5:\n    // 0x411fe5\n    *(int32_t *)*v177 = 7;\n    v11 = v177;\n    goto lab_0x411f1b_3;\n  lab_0x411e7f:;\n    int64_t v270 = v255;\n    int64_t v183 = v270; // 0x411260\n    int64_t v184 = 0; // 0x411260\n    int64_t * v156; // 0x411260\n    int64_t * v163; // 0x411260\n    switch (*v20) {\n        case 2: {\n            goto lab_0x411fe5;\n        }\n        case 21: {\n            // 0x4122f3\n            *v156 = *v156 + (0x100000000 * v270 >> 32);\n            if (*(char *)(v6 + 56) != 0) {\n                // 0x412301\n                v4 = v5 + 32;\n                int64_t v271 = v5; // 0x412308\n                int64_t * v272 = (int64_t *)v271; // 0x41230c\n                *v272 = -1 - *v272;\n                v271 += 8;\n                while (v4 != v271) {\n                    // 0x41230c\n                    v272 = (int64_t *)v271;\n                    *v272 = -1 - *v272;\n                    v271 += 8;\n                }\n            }\n            uint32_t v273 = *(int32_t *)(*v163 + 180); // 0x41231d\n            v4 = v273;\n            if (v273 >= 2) {\n                int64_t v274 = 0;\n                int64_t * v275 = (int64_t *)(v274 + v5); // 0x41233b\n                *v275 = *v275 & *(int64_t *)(v274 + *(int64_t *)(*v163 + 120));\n                int64_t v276 = v274 + 8; // 0x412347\n                while (v274 != 24) {\n                    // 0x412337\n                    v274 = v276;\n                    v275 = (int64_t *)(v274 + v5);\n                    *v275 = *v275 & *(int64_t *)(v274 + *(int64_t *)(*v163 + 120));\n                    v276 = v274 + 8;\n                }\n            }\n            // 0x412349\n            if (*v181 != 0) {\n                goto lab_0x4123ce;\n            } else {\n                // 0x412350\n                if (*(int64_t *)(v18 + 48) != 0) {\n                    goto lab_0x4123ce;\n                } else {\n                    // 0x412357\n                    if (*(int64_t *)(v18 + 56) != 0) {\n                        goto lab_0x4123ce;\n                    } else {\n                        // 0x41235e\n                        if (*(int64_t *)(v18 + 64) != 0) {\n                            goto lab_0x4123ce;\n                        } else {\n                            int64_t v277 = v4; // 0x412365\n                            v4 = v277 + 0xffffffff & 0xffffffff;\n                            if ((int32_t)v277 < 2) {\n                                goto lab_0x412378;\n                            } else {\n                                // 0x41236a\n                                if (*(int64_t *)v178 != 0) {\n                                    goto lab_0x4123ce;\n                                } else {\n                                    // 0x412371\n                                    if (*(char *)(v18 + 32) % 2 != 0) {\n                                        goto lab_0x4123ce;\n                                    } else {\n                                        goto lab_0x412378;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        default: {\n            goto lab_0x411a1e;\n        }\n    }\n  lab_0x41215f:;\n    // 0x41215f\n    int64_t v203; // 0x411260\n    int64_t v278 = (int64_t)*(char *)v203;\n    int64_t v220 = v278; // 0x412161\n    int64_t v216; // 0x411260\n    char v218; // 0x411260\n    int64_t v217; // 0x411260\n    int64_t v219; // 0x411260\n    int64_t * v162; // 0x411260\n    int32_t v197; // 0x412126\n    if (v197 == 0) {\n        goto lab_0x4125b9;\n    } else {\n        // 0x412167\n        v218 = 0;\n        v219 = v278;\n        if (v197 != 3) {\n            goto lab_0x41217a;\n        } else {\n            int64_t v279 = *v162; // 0x41216e\n            v3 = v279;\n            v216 = v279;\n            v217 = v278;\n            goto lab_0x412176;\n        }\n    }\n  lab_0x4125b9:;\n    // 0x4125b9\n    int64_t v161; // 0x411260\n    v218 = *(char *)v161;\n    v219 = v220;\n    goto lab_0x41217a;\n  lab_0x412176:\n    // 0x412176\n    v218 = *(char *)v216;\n    v219 = v217;\n    goto lab_0x41217a;\n  lab_0x41217a:;\n    int64_t v280 = v219;\n    unsigned char v281 = v218;\n    int64_t v282; // 0x411260\n    int64_t v283; // 0x411260\n    int32_t v284; // 0x411260\n    char * v165; // 0x411260\n    int32_t v195; // 0x4120fd\n    if (v195 == 0) {\n        goto lab_0x412584;\n    } else {\n        // 0x412183\n        v283 = v281;\n        v284 = v197;\n        v282 = (int64_t)*v168;\n        if (*v165 != 0) {\n            goto lab_0x412584;\n        } else {\n            goto lab_0x412193;\n        }\n    }\n  lab_0x412584:;\n    // 0x412584\n    int32_t * v170; // 0x411260\n    *v170 = (int32_t)v281;\n    int64_t * v171; // 0x411260\n    *v171 = v4;\n    int64_t v285 = function_406c50(v280, v4); // 0x412590\n    v4 = *v171;\n    v283 = (int64_t)*v170;\n    int32_t * v160; // 0x411260\n    v284 = *v160;\n    v282 = v285 & 0xffffffff;\n    goto lab_0x412193;\n  lab_0x412193:;\n    int64_t v286 = v282;\n    int32_t v287 = v284;\n    int64_t v288 = v283;\n    int64_t v289; // 0x411260\n    int64_t v290; // 0x411260\n    if (v287 == 0) {\n        goto lab_0x4124d5;\n    } else {\n        int64_t v291 = (int64_t)*(int32_t *)v161; // 0x41219b\n        v3 = v291;\n        v289 = v291;\n        v290 = v286;\n        if (v287 == 3) {\n            goto lab_0x4124d5;\n        } else {\n            goto lab_0x4121ac;\n        }\n    }\n  lab_0x4124d5:\n    // 0x4124d5\n    *v170 = (int32_t)v286;\n    *v171 = v4;\n    int64_t v292 = function_406c50(v288, v4); // 0x4124e4\n    v4 = *v171;\n    int64_t v293 = v292 & 0xffffffff; // 0x4124f3\n    v3 = v293;\n    v289 = v293;\n    v290 = (int64_t)*v170;\n    goto lab_0x4121ac;\n  lab_0x4121ac:;\n    int32_t v294 = v290;\n    if (v294 == -1) {\n        goto lab_0x4124c5_5;\n    }\n    uint32_t v295 = (int32_t)v289; // 0x4121b6\n    if (v295 == -1) {\n        goto lab_0x4124c5_5;\n    }\n    // 0x4121c0\n    if (v294 > v295 == ((*v149 & 0x10000) != 0)) {\n        goto lab_0x4125c6_3;\n    }\n    int64_t v296 = v4; // 0x4121d4\n    int32_t v297 = v294; // 0x4121d7\n    int64_t * v172; // 0x411260\n    int32_t * v173; // 0x411260\n    int32_t * v174; // 0x411260\n    int64_t * v175; // 0x411260\n    int64_t * v176; // 0x411260\n    if (v296 != 0) {\n        int64_t v298 = *(int64_t *)(v296 + 64); // 0x4121d9\n        int64_t v299 = *(int64_t *)(v296 + 8); // 0x4121dd\n        int32_t v300 = v294; // 0x4121e6\n        int64_t v301 = v298; // 0x4121e6\n        int64_t v302 = v299; // 0x4121e6\n        if (v298 == *v172) {\n            // 0x412642\n            *v173 = v295;\n            *v174 = v294;\n            *v171 = v4;\n            int64_t v303 = 2 * v298 | 1; // 0x41265c\n            int64_t v304 = 4 * v303; // 0x412660\n            *v172 = v303;\n            *v175 = v304;\n            *v176 = (int64_t)realloc((int64_t *)v299, (int32_t)v304);\n            int64_t * mem4 = realloc((int64_t *)*(int64_t *)(*v171 + 16), (int32_t)*v175); // 0x412690\n            int64_t v305 = *v176; // 0x412695\n            if (v305 == 0) {\n                // 0x4126dd\n                v234 = (int64_t)mem4;\n                v235 = v305;\n                goto lab_0x4126dd_3;\n            }\n            int64_t v306 = *v171; // 0x4126a2\n            v4 = v306;\n            v300 = *v174;\n            v3 = (int64_t)*v173;\n            if (mem4 == NULL) {\n                // 0x4126dd\n                v234 = (int64_t)mem4;\n                v235 = v305;\n                goto lab_0x4126dd_3;\n            }\n            // 0x4126b3\n            *(int64_t *)(v306 + 16) = (int64_t)mem4;\n            v301 = *(int64_t *)(v4 + 64);\n            *(int64_t *)(v4 + 8) = v305;\n            v302 = v305;\n        }\n        int64_t v307 = 4 * v301; // 0x4121ec\n        *(int32_t *)(v302 + v307) = v300;\n        *(int64_t *)(v4 + 64) = v301 + 1;\n        *(int32_t *)(*(int64_t *)(v4 + 16) + v307) = (int32_t)v3;\n        v297 = v300;\n    }\n    int64_t v308 = 0;\n    uint32_t v309 = (int32_t)v308; // 0x412212\n    int64_t v310; // 0x412222\n    int64_t * v311; // 0x412229\n    if (v297 <= v309) {\n        // 0x412217\n        if ((int32_t)v3 >= v309) {\n            // 0x41221c\n            v310 = v308 >> 6;\n            v4 = v310;\n            v311 = (int64_t *)(8 * v310 + v148);\n            *v311 = *v311 | 1 << v308 % 64;\n        }\n    }\n    int64_t v312 = v308 + 1; // 0x412238\n    while (v308 != 255) {\n        // 0x412210\n        v308 = v312;\n        v309 = (int32_t)v308;\n        if (v297 <= v309) {\n            // 0x412217\n            if ((int32_t)v3 >= v309) {\n                // 0x41221c\n                v310 = v308 >> 6;\n                v4 = v310;\n                v311 = (int64_t *)(8 * v310 + v148);\n                *v311 = *v311 | 1 << v308 % 64;\n            }\n        }\n        // 0x41222e\n        v312 = v308 + 1;\n    }\n    // 0x41223a\n    *(int32_t *)*v177 = 0;\n    int64_t v194; // 0x4120f8\n    v255 = v194 & 0xffffffff;\n    goto lab_0x411e7f;\n  lab_0x4112b1:\n    if ((a4 & 32) != 0) {\n        // 0x4115d5\n        *(int64_t *)(v6 + 24) = 0;\n        *(int32_t *)*(int64_t *)(v6 + 48) = 13;\n        // 0x41132a\n        return *(int64_t *)(v6 + 24);\n    }\n    if ((a4 & 16) != 0) {\n        // 0x411ff5\n        v5 = a5;\n        int64_t v313 = function_410af0((int64_t *)v9, a1, a4); // 0x412005\n        int64_t * v314 = (int64_t *)(a1 + 72); // 0x412017\n        *v314 = (0x100000000 * v313 >> 32) + *v314;\n        function_411260(a1, a2, v9, a4, v5, a6);\n        // 0x41132a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x4112d0;\n  lab_0x4112d0:\n    // 0x4112d0\n    *(char *)(v9 + 8) = 1;\n    if (function_408ca0(a2 + 112, a2 + 128, 0, 0, v9) == 0) {\n        // 0x411bf1\n        *(int32_t *)a6 = 12;\n        // 0x4113d8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x41132a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x411300;\n  lab_0x411a94:;\n    int64_t v223 = &g2; // 0x411ab0\n    int64_t v222 = (int64_t)\"alnum\"; // 0x411ab0\n    bool v224 = v7 == 33; // 0x411ab0\n    goto lab_0x411ab4;\n  lab_0x411ae0:\n    // 0x411ae0\n    v223 = (int64_t)&g12;\n    v222 = (int64_t)\"space\";\n    v224 = v7 == 35;\n    goto lab_0x411ab4;\n  lab_0x411300:\n    // 0x411300\n    v58 = (int64_t *)(v6 + 8);\n    int64_t v144 = function_410af0((int64_t *)v9, a1, *v58); // 0x41130b\n    unsigned char v145 = *(char *)(v9 + 8); // 0x411310\n    int64_t * v146 = (int64_t *)(a1 + 72); // 0x411318\n    *v146 = *v146 + (0x100000000 * v144 >> 32);\n    if (v145 >= 24) {\n        // 0x41132a\n        return *(int64_t *)(v6 + 24);\n    }\n    // 0x4113f0\n    v52 = (int64_t *)(v6 + 24);\n    int64_t v147 = v6 + 32;\n    v89 = (int64_t *)v147;\n    v78 = (int128_t *)v147;\n    v59 = (int64_t *)(v6 + 48);\n    v110 = (int64_t *)(v6 + 16);\n    v118 = (int64_t *)(v6 + 56);\n    v114 = v6 + 192;\n    v108 = (char *)(v6 + 200);\n    v72 = v145;\n    v73 = a1;\n    v74 = v9;\n    while (true) {\n      lab_0x4113f0:;\n        unsigned char v75 = v72;\n        if ((1 << (int64_t)(v75 % 64) & 0x8c0800) == 0) {\n            // break -> 0x41132a\n            break;\n        }\n        // 0x411406\n        v53 = v74;\n        v66 = v73;\n        v60 = (int64_t *)(v66 + 72);\n        v61 = *v60;\n        v62 = (int128_t *)v53;\n        int128_t v76 = __asm_movdqa(*v62); // 0x41140a\n        if (v75 == 23) {\n            int64_t v77 = *v58; // 0x411740\n            v4 = v77;\n            *v78 = (int128_t)__asm_movaps(v76);\n            int64_t v79 = function_4111a0(v66, v53, v77); // 0x411750\n            v80 = __asm_movdqa(*v78);\n            v5 = v79;\n            v56 = v80;\n            switch (v79) {\n                case -1: {\n                    // 0x4117d0\n                    if (*(char *)(v53 + 8) != 1) {\n                        // 0x4118e0\n                        *(int32_t *)*v59 = 10;\n                        goto lab_0x4118eb;\n                    }\n                    // 0x4117dc\n                    v81 = 0;\n                    if (*(char *)v53 != 44) {\n                        // 0x4118e0\n                        *(int32_t *)*v59 = 10;\n                        goto lab_0x4118eb;\n                    }\n                    goto lab_0x4117e9;\n                }\n                case -2: {\n                    goto lab_0x411782;\n                }\n                default: {\n                    char * v82 = (char *)(v53 + 8);\n                    v56 = v80;\n                    v83 = v79;\n                    v84 = v79;\n                    switch (*v82) {\n                        case 24: {\n                            goto lab_0x4118a4;\n                        }\n                        case 1: {\n                            // 0x4118c3\n                            v81 = v79;\n                            if (*(char *)v53 == 44) {\n                                goto lab_0x4117e9;\n                            } else {\n                                // 0x4118ce\n                                v55 = v82;\n                                v57 = v80;\n                                if ((*v58 & 0x200000) == 0) {\n                                    // 0x4118e0\n                                    *(int32_t *)*v59 = 10;\n                                    goto lab_0x4118eb;\n                                }\n                                goto lab_0x411791;\n                            }\n                        }\n                        default: {\n                            goto lab_0x411782;\n                        }\n                    }\n                }\n            }\n        } else {\n            int64_t v85 = *v58;\n            v4 = v85;\n            int64_t v86 = function_410af0((int64_t *)v53, v66, v85);\n            *v60 = (0x100000000 * v86 >> 32) + *v60;\n            int64_t v87 = *v52;\n            if (v75 == 19) {\n                if (v87 == 0) {\n                    goto lab_0x4117b0;\n                } else {\n                    int64_t v88 = v75 == 18; // 0x4113f9\n                    v5 = 1;\n                    *v89 = 0;\n                    v90 = 10;\n                    v91 = v88;\n                    v92 = v87;\n                    v93 = v53;\n                    v94 = v66;\n                    v95 = v88;\n                    v96 = v87;\n                    v97 = v53;\n                    v98 = v66;\n                    if (*(char *)(v87 + 48) == 17) {\n                        goto lab_0x411718;\n                    } else {\n                        goto lab_0x41147a;\n                    }\n                }\n            } else {\n                if (v87 == 0) {\n                    goto lab_0x4117b0;\n                } else {\n                    if (v75 == 18) {\n                        // 0x41192a\n                        v5 = -1;\n                        v4 = v87;\n                        v99 = v87;\n                        v100 = 1;\n                        v101 = v53;\n                        v102 = v87;\n                        v103 = v66;\n                        goto lab_0x41193f;\n                    } else {\n                        // 0x411453\n                        v5 = -1;\n                        if (*(char *)(v87 + 48) == 17) {\n                            // 0x411700\n                            *v89 = 0;\n                            v95 = 0;\n                            v96 = *v52;\n                            v97 = v53;\n                            v98 = v66;\n                            goto lab_0x411718;\n                        } else {\n                            // 0x411462\n                            *v89 = 0;\n                            v90 = 11;\n                            v91 = 0;\n                            v92 = v87;\n                            v93 = v53;\n                            v94 = v66;\n                            goto lab_0x41147a;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // 0x41132a\n    return *(int64_t *)(v6 + 24);\n  lab_0x4119f2:\n    // 0x4119f2\n    if (v17 == 21) {\n        // 0x411fda\n        *v20 = 1;\n    }\n    // 0x4119fa\n    v148 = v5;\n    v149 = (int64_t *)(v6 + 8);\n    int64_t v150 = v6 + 112; // 0x411a2f\n    v151 = v6 + 120;\n    v152 = (int64_t *)v151;\n    int64_t v153; // bp-120, 0x411260\n    int64_t v154 = &v153;\n    int32_t * v155 = (int32_t *)v150; // 0x411a39\n    v156 = (int64_t *)(a1 + 72);\n    int64_t v157 = v6 + 144;\n    int64_t v158 = v6 + 192;\n    int64_t v159 = v6 + 128;\n    v160 = (int32_t *)v159;\n    v161 = v6 + 136;\n    v162 = (int64_t *)v161;\n    v163 = (int64_t *)(v6 + 16);\n    int64_t v164 = v6 + 64;\n    v165 = (char *)v164;\n    bool v166; // 0x411260\n    int64_t v167 = v166 ? -1 : 1;\n    v168 = (int32_t *)v151;\n    int64_t v169 = v6 + 72;\n    v170 = (int32_t *)v169;\n    v171 = (int64_t *)v164;\n    v172 = (int64_t *)(v6 + 32);\n    v173 = (int32_t *)(v6 + 92);\n    v174 = (int32_t *)(v6 + 88);\n    v175 = (int64_t *)(v6 + 80);\n    v176 = (int64_t *)v169;\n    v177 = (int64_t *)(v6 + 48);\n    v178 = v18 + 72;\n    v179 = (int64_t *)(v6 - 16);\n    v180 = (int64_t *)(v6 + 104);\n    v181 = (int64_t *)(v18 + 40);\n    v182 = (int64_t *)(v6 + 24);\n    v183 = v16 & 0xffffffff;\n    v184 = 1;\n    int32_t v185; // 0x411260\n    while (true) {\n      lab_0x411a1e:\n        // 0x411a1e\n        v3 = v184;\n        int64_t v186 = *v149; // 0x411a1e\n        v3 = v184;\n        *v152 = v154;\n        *v155 = 3;\n        int32_t v187 = function_4108d0(v150, a1, v9, v183, v186, (int32_t)v184);\n        v185 = v187;\n        if (v187 != 0) {\n            // break -> 0x412034\n            break;\n        }\n        // 0x411a4e\n        g77 = v6 - 8;\n        v188 = function_406540(v19, a1, *v149);\n        if ((*v155 - 2 & -3) == 0) {\n            goto lab_0x411a84;\n        } else {\n            unsigned char v189 = *v20; // 0x411a6c\n            v4 = v189;\n            switch (v189) {\n                case 2: {\n                    goto lab_0x411fe5;\n                }\n                case 22: {\n                    int64_t v190 = 0x100000000 * v188;\n                    *v156 = *v156 + (v190 >> 32);\n                    int64_t v191 = *v149; // 0x41207b\n                    int64_t v192 = function_406540((int64_t *)v157, a1, v191); // 0x41208b\n                    unsigned char v193 = *(char *)(v6 + 152); // 0x412090\n                    v4 = v193;\n                    switch (v193) {\n                        case 2: {\n                            goto lab_0x411fe5;\n                        }\n                        case 21: {\n                            // 0x4122a5\n                            *v156 = *v156 + (-v190 >> 32);\n                            *v20 = 1;\n                            goto lab_0x411a84;\n                        }\n                        default: {\n                            // 0x4120aa\n                            *v160 = 3;\n                            *v162 = v158;\n                            if ((int32_t)function_4108d0(v159, a1, v157, v192 & 0xffffffff, v191, 1) != 0) {\n                                // break -> 0x412034\n                                break;\n                            }\n                            // 0x4120ed\n                            v194 = function_406540(v19, a1, *v149);\n                            v195 = *v155;\n                            int32_t v196 = *(int32_t *)(*v163 + 180); // 0x41210e\n                            v4 = v196 < 2 == (1 - v196 & v196) < 0 ? v18 : 0;\n                            if ((v195 - 2 & -3) == 0) {\n                                goto lab_0x4125c6_3;\n                            }\n                            // 0x412126\n                            v197 = *v160;\n                            if ((v197 - 2 & -3) == 0) {\n                                goto lab_0x4125c6_3;\n                            }\n                            // 0x412139\n                            *v165 = (char)(v195 == 3);\n                            if (v195 == 3) {\n                                int64_t v198 = *v152; // 0x41260d\n                                int64_t v199 = -1; // 0x41261e\n                                int64_t v200 = v198; // 0x41261e\n                                int64_t v201; // 0x411260\n                                while (v199 != 0) {\n                                    int64_t v202 = v200;\n                                    v199--;\n                                    v200 = v202 + v167;\n                                    v201 = v199;\n                                    if (*(char *)v202 == 0) {\n                                        // break -> \n                                        break;\n                                    }\n                                }\n                                if (-v201 >= 4) {\n                                    goto lab_0x4124c5_5;\n                                }\n                                // 0x412630\n                                v203 = v198;\n                                if (v197 == 3) {\n                                    // 0x4124a1\n                                    int64_t v204; // 0x411260\n                                    while (v204 != 0) {\n                                        int64_t v205; // 0x411260\n                                        int64_t v206 = v205;\n                                        char v207 = *(char *)v206; // 0x4124af\n                                        int64_t v208; // 0x411260\n                                        int64_t v209 = v208 - 1; // 0x4124af\n                                        v204 = v209;\n                                        v205 = v206 + v167;\n                                        int64_t v210 = v209; // 0x4124af\n                                        if (v207 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v208 = v204;\n                                        v210 = 0;\n                                    }\n                                    v203 = v198;\n                                }\n                                goto lab_0x41215f;\n                            } else {\n                                if (v197 == 3) {\n                                    int64_t v211 = *v162; // 0x4125d6\n                                    v3 = v211;\n                                    int64_t v212 = v211; // 0x4125e7\n                                    int64_t v213 = -1; // 0x4125e7\n                                    int64_t v214 = 0; // 0x4125e7\n                                    while (v213 != 0) {\n                                        int64_t v215 = v212;\n                                        v213--;\n                                        v212 = v215 + v167;\n                                        v214 = v213;\n                                        if (*(char *)v215 == 0) {\n                                            // break -> \n                                            break;\n                                        }\n                                        v214 = 0;\n                                    }\n                                    if (-v214 >= 4) {\n                                        goto lab_0x4124c5_5;\n                                    }\n                                    // 0x4125fd\n                                    v203 = v151;\n                                    v216 = v211;\n                                    v217 = 0;\n                                    if (v195 != 0) {\n                                        goto lab_0x412176;\n                                    } else {\n                                        goto lab_0x41215f;\n                                    }\n                                } else {\n                                    // 0x412151\n                                    v203 = v151;\n                                    if (v195 != 0) {\n                                        // 0x4125ad\n                                        v218 = 0;\n                                        v219 = 0;\n                                        v220 = 0;\n                                        if (v197 != 0) {\n                                            goto lab_0x41217a;\n                                        } else {\n                                            goto lab_0x4125b9;\n                                        }\n                                    } else {\n                                        goto lab_0x41215f;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                default: {\n                    goto lab_0x411a84;\n                }\n            }\n        }\n    }\n    // 0x412034\n    *(int32_t *)*v177 = v185;\n    v11 = v177;\n    goto lab_0x411f1b_3;\n  lab_0x411ab4:;\n    int64_t v221 = *(int64_t *)(a1 + 120);\n    v4 = v222;\n    v3 = a6;\n    if (!(((int32_t)a6 == 0 | function_40c090(a2, v221, (char *)v222, (int64_t *)v223, (int64_t)v224, a6) != 0))) {\n        // 0x4113d8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x41132a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x411300;\n  lab_0x411f69:;\n    // 0x411f69\n    int64_t v225; // 0x411d15\n    int64_t v226; // 0x411d19\n    if (function_408ca0(v225, v226, 0, 0, v9) == 0) {\n        // 0x411bf1\n        *(int32_t *)a6 = 12;\n        // 0x4113d8\n        *(int64_t *)(v6 + 24) = 0;\n        // 0x41132a\n        return *(int64_t *)(v6 + 24);\n    }\n    goto lab_0x411dbf;\n  lab_0x412505:;\n    int16_t * v250 = *__ctype_b_loc(); // 0x412519\n    v3 = (v13 | 256) - 64 * v15;\n    int64_t v251 = v13; // 0x41252f\n    int64_t v252 = 8 * v15 + a2; // 0x41252f\n    int64_t v141 = 2 * v13 + (int64_t)v250; // 0x41252f\n    while (true) {\n        int64_t v143 = v251;\n        v139 = (int64_t *)(v252 + 184);\n        v140 = 0;\n        while (true) {\n          lab_0x412552:\n            // 0x412552\n            v137 = v140;\n            if ((*(char *)(2 * v137 + v141) & 8) == 0) {\n                int64_t v142 = v137 + v143; // 0x412540\n                v4 = v142 & 0xffffffff;\n                if ((int32_t)v142 == 95) {\n                    goto lab_0x41255a;\n                } else {\n                    goto lab_0x412548;\n                }\n            } else {\n                goto lab_0x41255a;\n            }\n        }\n      lab_0x412569:;\n        int64_t v253 = v143 + 64; // 0x412569\n        v12 = v10;\n        v251 = v253 & 0xffffffff;\n        v252 += 8;\n        v141 += 128;\n        if ((int32_t)v3 == (int32_t)v253) {\n            // break -> 0x411d10\n            break;\n        }\n    }\n    goto lab_0x411d10_2;\n  lab_0x411dbf:;\n    int64_t v227 = function_410af0((int64_t *)v9, a1, a4); // 0x411dca\n    int64_t * v228 = (int64_t *)(a1 + 72); // 0x411dd1\n    *v228 = (0x100000000 * v227 >> 32) + *v228;\n    // 0x41132a\n    return *(int64_t *)(v6 + 24);\n  lab_0x411d10_2:;\n    int32_t v229 = v12;\n    v225 = a2 + 112;\n    v226 = a2 + 128;\n    if ((v229 - 256 & -257) != 0) {\n        goto lab_0x411f69;\n    } else {\n        int32_t * v230 = (int32_t *)v9;\n        int64_t v231; // 0x411260\n        if (v229 == 256) {\n            // 0x41204a\n            *v230 = 6;\n            v4 = 0;\n            v231 = function_408ca0(v225, v226, 0, 0, v9);\n        } else {\n            // 0x411d3f\n            *v230 = 5;\n            v4 = 0;\n            v231 = function_408ca0(v225, v226, 0, 0, v9);\n        }\n        // 0x411d64\n        *v230 = 10;\n        int64_t v232 = function_408ca0(v225, v226, 0, 0, v9); // 0x411d71\n        int64_t v233 = function_408ca0(v225, v226, (int32_t)v231, (int32_t)v232, (int64_t)&v14); // 0x411d95\n        if (v233 == 0 || v231 == 0 || v232 == 0) {\n            // 0x411bf1\n            *(int32_t *)a6 = 12;\n            // 0x4113d8\n            *(int64_t *)(v6 + 24) = 0;\n            // 0x41132a\n            return *(int64_t *)(v6 + 24);\n        }\n        goto lab_0x411dbf;\n    }\n  lab_0x4126dd_3:\n    // 0x4126dd\n    *v182 = v234;\n    free((int64_t *)v235);\n    free((int64_t *)*v182);\n    *(int32_t *)*v177 = 12;\n    v11 = v177;\n    goto lab_0x411f1b_3;\n  lab_0x4123ce:;\n    int64_t v236 = *v163; // 0x4123ce\n    char * v237 = (char *)(v236 + 176); // 0x4123da\n    *v237 = *v237 | 2;\n    int64_t v238 = v236 + 112; // 0x4123e1\n    int64_t v239 = v236 + 128; // 0x4123e5\n    char * v240 = (char *)(v6 + 168); // 0x4123f2\n    *v240 = 6;\n    int64_t * v241 = (int64_t *)(v6 + 160); // 0x4123fa\n    *v241 = v18;\n    int64_t v242 = function_408ca0(v238, v239, 0, 0, v154); // 0x412402\n    *v182 = v242;\n    int64_t v243 = v5 + 32; // 0x412413\n    v4 = v243;\n    int64_t v244 = v5; // 0x41241d\n    if (v242 == 0) {\n        goto lab_0x4123be;\n    } else {\n        while (*(int64_t *)v244 == 0) {\n            int64_t v245 = v244 + 8; // 0x412425\n            v244 = v245;\n            if (v243 == v245) {\n                // 0x41242e\n                free((int64_t *)v5);\n                goto lab_0x411300;\n            }\n        }\n        // 0x41243c\n        *v240 = 3;\n        *v241 = v5;\n        int64_t v246 = function_408ca0(v238, v239, 0, 0, v154); // 0x41245d\n        if (v246 == 0) {\n            goto lab_0x4123be;\n        } else {\n            // 0x41246b\n            *(char *)(v6 + 200) = 10;\n            int64_t v247 = function_408ca0(v238, v239, (int32_t)v246, (int32_t)*v182, v158); // 0x412489\n            *v182 = v247;\n            if (v247 != 0) {\n                goto lab_0x411300;\n            } else {\n                goto lab_0x4123be;\n            }\n        }\n    }\n  lab_0x412378:\n    // 0x412378\n    function_407690(v18);\n    *(char *)(v6 + 168) = 3;\n    *(int64_t *)(v6 + 160) = v5;\n    int64_t v248 = *v163; // 0x41239b\n    int64_t v249 = function_408ca0(v248 + 112, v248 + 128, 0, 0, v154); // 0x4123ab\n    *v182 = v249;\n    if (v249 != 0) {\n        goto lab_0x411300;\n    } else {\n        goto lab_0x4123be;\n    }\n}\n"
        },
        {
            "funcName": "function_412750",
            "funcStartAddr": "412750",
            "funcEndAddr": "41288e",
            "decompiledFuncCode": "int64_t function_412750(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t result = function_411260(a1, a2, a3, a4, a5, a6); // 0x41277a\n    int64_t v1; // 0x412750\n    if ((int32_t)v1 != 0 == result == 0) {\n        // 0x412825\n        return 0;\n    }\n    char * v2 = (char *)(a3 + 8); // 0x412798\n    char v3 = *v2; // 0x412798\n    if ((v3 & -9) == 2) {\n        // 0x412825\n        return result;\n    }\n    // 0x4127a6\n    int64_t v4; // bp-72, 0x412750\n    int64_t v5 = &v4;\n    int64_t v6 = result;\n    int64_t result2 = v6; // 0x4127a8\n    if (a5 != 0 == v3 == 9) {\n        return result2;\n    }\n    int64_t v7 = function_411260(a1, a2, a3, a4, a5, a6); // 0x4127c3\n    int32_t v8 = v7;\n    if (v7 == 0 == (v8 != 0)) {\n        // 0x41284c\n        result2 = 0;\n        if (v6 == 0) {\n            return result2;\n        } else {\n            // 0x412851\n            function_4064d0(v6, 0x4076e0, 0);\n            result2 = 0;\n            return result2;\n        }\n    }\n    int64_t v9; // 0x412805\n    char v10; // 0x412817\n    while (v6 != 0 && v7 != 0) {\n        // 0x4127e0\n        v9 = function_408ca0(a2 + 112, a2 + 128, (int32_t)v6, v8, v5);\n        if (v9 == 0) {\n            // 0x412865\n            function_4064d0(v7, 0x4076e0, 0);\n            function_4064d0(v6, 0x4076e0, 0);\n            *(int32_t *)a6 = 12;\n            result2 = 0;\n            return result2;\n        }\n        // 0x412814\n        v10 = *v2;\n        result2 = v9;\n        if ((v10 & -9) == 2) {\n            return result2;\n        }\n        v6 = v9;\n        result2 = v6;\n        if (a5 != 0 == v10 == 9) {\n            return result2;\n        }\n        // 0x4127af\n        v7 = function_411260(a1, a2, a3, a4, a5, a6);\n        v8 = v7;\n        if (v7 == 0 == (v8 != 0)) {\n            // 0x41284c\n            result2 = 0;\n            if (v6 == 0) {\n                return result2;\n            } else {\n                // 0x412851\n                function_4064d0(v6, 0x4076e0, 0);\n                result2 = 0;\n                return result2;\n            }\n        }\n    }\n    int64_t v11 = v6 == 0 ? v7 : v6; // 0x412843\n    char v12 = *v2; // 0x412798\n    result2 = v11;\n    while ((v12 & -9) != 2) {\n        // 0x4127a6\n        v6 = v11;\n        result2 = v6;\n        if (a5 != 0 == v12 == 9) {\n            return result2;\n        }\n        // 0x4127af\n        v7 = function_411260(a1, a2, a3, a4, a5, a6);\n        v8 = v7;\n        if (v7 == 0 == (v8 != 0)) {\n            // 0x41284c\n            result2 = 0;\n            if (v6 == 0) {\n                return result2;\n            } else {\n                // 0x412851\n                function_4064d0(v6, 0x4076e0, 0);\n                result2 = 0;\n                return result2;\n            }\n        }\n        while (v6 != 0 && v7 != 0) {\n            // 0x4127e0\n            v9 = function_408ca0(a2 + 112, a2 + 128, (int32_t)v6, v8, v5);\n            if (v9 == 0) {\n                // 0x412865\n                function_4064d0(v7, 0x4076e0, 0);\n                function_4064d0(v6, 0x4076e0, 0);\n                *(int32_t *)a6 = 12;\n                result2 = 0;\n                return result2;\n            }\n            // 0x412814\n            v10 = *v2;\n            result2 = v9;\n            if ((v10 & -9) == 2) {\n                return result2;\n            }\n            v6 = v9;\n            result2 = v6;\n            if (a5 != 0 == v10 == 9) {\n                return result2;\n            }\n            // 0x4127af\n            v7 = function_411260(a1, a2, a3, a4, a5, a6);\n            v8 = v7;\n            if (v7 == 0 == (v8 != 0)) {\n                // 0x41284c\n                result2 = 0;\n                if (v6 == 0) {\n                    return result2;\n                } else {\n                    // 0x412851\n                    function_4064d0(v6, 0x4076e0, 0);\n                    result2 = 0;\n                    return result2;\n                }\n            }\n        }\n        // 0x412840\n        v11 = v6 == 0 ? v7 : v6;\n        v12 = *v2;\n        result2 = v11;\n    }\n  lab_0x412825_2:\n    // 0x412825\n    return result2;\n}\n"
        },
        {
            "funcName": "function_412890",
            "funcStartAddr": "412890",
            "funcEndAddr": "4129e1",
            "decompiledFuncCode": "int64_t function_412890(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t * v1 = (int64_t *)(a2 + 168); // 0x4128b2\n    int64_t v2 = function_412750(a1, a2, a3, a4, a5, a6); // 0x4128c2\n    int64_t v3; // 0x412890\n    if ((int32_t)v3 != 0 && v2 == 0) {\n        // 0x4128e1\n        return 0;\n    }\n    char * v4 = (char *)(a3 + 8); // 0x412979\n    int64_t * v5 = (int64_t *)(a1 + 72);\n    int64_t v6 = a2 + 112;\n    int64_t v7; // bp-72, 0x412890\n    int64_t v8 = &v7;\n    int64_t v9 = v2;\n    int64_t result = v9; // 0x41297d\n    while (*v4 == 10) {\n        // 0x412983\n        *v5 = (0x100000000 * function_410af0((int64_t *)a3, a1, a4 | 0x800000) >> 32) + *v5;\n        char v10 = *v4; // 0x41299f\n        int64_t v11 = 0; // 0x4129ab\n        if ((v10 & -9) != 2 && a5 != 0 != (v10 == 9)) {\n            // 0x412907\n            v11 = function_412750(a1, a2, a3, a4, a5, a6);\n            int64_t v12; // 0x412890\n            if (v11 == 0 == (*(int32_t *)&v12 != 0)) {\n                // 0x4129c4\n                result = 0;\n                if (v9 == 0) {\n                    return result;\n                } else {\n                    // 0x4129cd\n                    function_4064d0(v9, 0x4076e0, 0);\n                    result = 0;\n                    return result;\n                }\n            }\n        }\n        int64_t v13 = function_408ca0(v6, a2 + 128, (int32_t)v9, (int32_t)v11, v8); // 0x41296c\n        if (v13 == 0) {\n            // 0x4129b8\n            *(int32_t *)a6 = 12;\n            result = 0;\n            return result;\n        }\n        v9 = v13;\n        result = v9;\n    }\n  lab_0x4128e1:\n    // 0x4128e1\n    return result;\n}\n"
        },
        {
            "funcName": "function_4129f0",
            "funcStartAddr": "4129f0",
            "funcEndAddr": "41379a",
            "decompiledFuncCode": "int64_t function_4129f0(int64_t a1, int64_t a2, uint64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4129f0\n    int128_t v1; // 0x4129f0\n    int128_t v2 = v1;\n    int64_t v3; // 0x4129f0\n    int64_t v4 = v3;\n    char * v5 = (char *)(a1 + 56); // 0x412a0d\n    *v5 = *v5 & -112;\n    int64_t v6 = a1 + 8;\n    int64_t * v7 = (int64_t *)v6; // 0x412a11\n    int32_t result = 0; // bp-268, 0x412a19\n    *(int64_t *)(a1 + 24) = a4;\n    int64_t * v8 = (int64_t *)(a1 + 16); // 0x412a28\n    *v8 = 0;\n    int64_t * v9 = (int64_t *)(a1 + 48); // 0x412a30\n    *v9 = 0;\n    int64_t v10 = v6; // 0x412a38\n    int64_t v11 = a1; // 0x412a38\n    if (*v7 < 232) {\n        int64_t * v12 = (int64_t *)a1; // 0x413578\n        int64_t * mem = realloc(v12, 232); // 0x413578\n        if (mem == NULL) {\n            // 0x41333b\n            return 12;\n        }\n        // 0x413589\n        v11 = (int64_t)mem;\n        *v7 = 232;\n        *v12 = v11;\n        v10 = v11 + 8;\n    }\n    // 0x412a3e\n    *v8 = 232;\n    int64_t v13 = v10 & -8; // 0x412a4f\n    int64_t * v14 = (int64_t *)v11; // 0x412a53\n    *v14 = 0;\n    *(int64_t *)(v11 + 224) = 0;\n    __asm_rep_stosq_memset((char *)v13, 0, (v11 + 232 - v13) / 8 % 0x20000000);\n    *(int32_t *)(v11 + 128) = 15;\n    int64_t v15; // 0x4129f0\n    int64_t v16; // 0x4129f0\n    uint64_t v17; // 0x4129f0\n    int64_t v18; // 0x4129f0\n    int64_t v19; // 0x4129f0\n    int64_t v20; // 0x412a91\n    int64_t * v21; // 0x412add\n    int32_t * v22; // 0x412aeb\n    char * v23; // 0x412b48\n    if (a3 < 0x555555555555555) {\n        // 0x412a91\n        v20 = a3 + 1;\n        *(int64_t *)v10 = v20;\n        *v14 = (int64_t)malloc(16 * (int32_t)v20);\n        int64_t size = 1; // 0x412ab1\n        int64_t v24 = 0; // 0x412ab1\n        if (a3 != 0) {\n            int64_t v25 = 2; // 0x412ac0\n            int64_t v26 = v25; // 0x412ac6\n            while (v25 <= a3) {\n                // 0x412ac0\n                v25 = 2 * v26;\n                v26 = v25;\n            }\n            // 0x412ac8\n            size = v25;\n            v24 = v25 - 1;\n        }\n        int64_t * mem2 = calloc(24, (int32_t)size); // 0x412ad1\n        *(int64_t *)(v11 + 136) = v24;\n        v21 = (int64_t *)(v11 + 64);\n        *v21 = (int64_t)mem2;\n        int32_t v27 = __ctype_get_mb_cur_max(); // 0x412ae1\n        v22 = (int32_t *)(v11 + 180);\n        *v22 = v27;\n        char * v28 = nl_langinfo(14); // 0x412af1\n        if ((*v28 & -33) == 85) {\n            int64_t v29 = (int64_t)v28; // 0x412af1\n            if ((*(char *)(v29 + 1) & -33) == 84) {\n                // 0x412b0d\n                if ((*(char *)(v29 + 2) & -33) == 70) {\n                    int64_t v30 = v29 + 3; // 0x412b1b\n                    bool v31; // 0x4129f0\n                    int64_t v32 = v31 ? -1 : 1; // 0x412b31\n                    int64_t v33 = (int64_t)&g13; // 0x4129f0\n                    int64_t v34 = v30 + (int64_t)(*(char *)v30 == 45); // 0x4129f0\n                    int64_t v35 = 2; // 0x412b31\n                    unsigned char v36 = *(char *)v34; // 0x412b31\n                    char v37 = *(char *)v33; // 0x412b31\n                    char v38 = v37; // 0x412b31\n                    bool v39 = false; // 0x412b31\n                    while (v36 == v37) {\n                        v35--;\n                        v33 += v32;\n                        v34 += v32;\n                        v38 = v36;\n                        v39 = true;\n                        if (v35 == 0) {\n                            // break -> \n                            break;\n                        }\n                        v36 = *(char *)v34;\n                        v37 = *(char *)v33;\n                        v38 = v37;\n                        v39 = false;\n                    }\n                    unsigned char v40 = v38;\n                    if ((v36 >= v40 && !v39) == v36 < v40) {\n                        char * v41 = (char *)(v11 + 176); // 0x412b3c\n                        *v41 = *v41 | 4;\n                    }\n                }\n            }\n        }\n        // 0x412b48\n        v23 = (char *)(v11 + 176);\n        char v42 = *v23; // 0x412b48\n        *v23 = v42 & -9;\n        if (*v22 < 2) {\n            goto lab_0x412b73;\n        } else {\n            if ((v42 & 4) == 0) {\n                int64_t * mem3 = calloc(32, 1); // 0x4133ea\n                int64_t * v43 = (int64_t *)(v11 + 120); // 0x4133ef\n                *v43 = (int64_t)mem3;\n                int64_t v44 = 0; // 0x4133f6\n                if (mem3 == NULL) {\n                    // 0x4133d0\n                    result = 12;\n                    goto lab_0x4133ae;\n                } else {\n                    while (true) {\n                        int64_t v45 = v44;\n                        v16 = 0;\n                        v18 = 8 * v45;\n                        while (true) {\n                          lab_0x413426_2:\n                            // 0x413426\n                            v19 = v18;\n                            v17 = v16;\n                            int32_t wc = v19; // 0x413426\n                            int32_t v46 = btowc(wc); // 0x41342f\n                            int64_t v47 = v19 & 0xffffff80; // 0x41343d\n                            if (v46 == -1) {\n                                if (v47 != 0) {\n                                    goto lab_0x41341b;\n                                } else {\n                                    // 0x413414\n                                    *v23 = *v23 | 8;\n                                    goto lab_0x41341b;\n                                }\n                            } else {\n                                int64_t * v48 = (int64_t *)(*v43 + v45); // 0x413455\n                                *v48 = *v48 | 1 << v17 % 64;\n                                if (v47 != 0) {\n                                    goto lab_0x41341b;\n                                } else {\n                                    if (v46 != wc) {\n                                        // 0x413414\n                                        *v23 = *v23 | 8;\n                                        goto lab_0x41341b;\n                                    } else {\n                                        int64_t v49 = v17 + 1; // 0x413460\n                                        v15 = v49;\n                                        if ((int32_t)v49 == 64) {\n                                            // break -> 0x413470\n                                            break;\n                                        }\n                                        goto lab_0x413426;\n                                    }\n                                }\n                            }\n                        }\n                      lab_0x413470:\n                        // 0x413470\n                        v44 = v45 + 8;\n                        if (v45 == 24) {\n                            // break -> 0x412b73\n                            break;\n                        }\n                    }\n                    goto lab_0x412b73;\n                }\n            } else {\n                // 0x412b6b\n                *(int64_t *)(v11 + 120) = (int64_t)&g14;\n                goto lab_0x412b73;\n            }\n        }\n    } else {\n        // 0x4133d0\n        result = 12;\n        goto lab_0x4133ae;\n    }\n  lab_0x41341b:;\n    int64_t v50 = v17 + 1; // 0x41341b\n    v15 = v50;\n    if ((int32_t)v50 == 64) {\n        // break -> 0x413470\n        goto lab_0x413470;\n    }\n    goto lab_0x413426;\n  lab_0x413426:\n    // 0x413426\n    v16 = v15 & 0xffffffff;\n    v18 = v19 + 1 & 0xffffffff;\n    goto lab_0x413426_2;\n  lab_0x413630_2:\n    // 0x413630\n    result = 0;\n    int64_t v51; // 0x4129f0\n    int64_t v52 = v51; // 0x413638\n    int64_t v53 = v51; // 0x413638\n    goto lab_0x412d39;\n  lab_0x412f20:;\n    // 0x412f20\n    int64_t * v83; // 0x4129f0\n    int64_t v91 = *v83; // 0x412f20\n    int64_t v92 = function_4064d0(v91, 0x409050, (int32_t)a1); // 0x412f2c\n    int64_t v93 = v92; // 0x412f33\n    int64_t v94 = v91; // 0x412f33\n    int64_t v95; // 0x4129f0\n    int64_t v73; // 0x4129f0\n    int64_t v96; // bp-232, 0x4129f0\n    int64_t v68; // bp-248, 0x4129f0\n    int64_t * v80; // 0x412e77\n    int64_t * v97; // 0x4129f0\n    if ((int32_t)v92 != 0) {\n        goto lab_0x413148_2;\n    } else {\n        int64_t v98 = *v83; // 0x412f39\n        int64_t v99 = function_4064d0(v98, 0x40b580, (int32_t)v73); // 0x412f45\n        v93 = v99;\n        v94 = v98;\n        if ((int32_t)v99 != 0) {\n            goto lab_0x413148_2;\n        } else {\n            // 0x412f52\n            function_408510(*v83, 0x408260, v73);\n            int64_t v100 = *v83; // 0x412f63\n            int64_t v101 = function_408510(v100, 0x407d60, v73); // 0x412f6f\n            v93 = v101;\n            v94 = v100;\n            if ((int32_t)v101 != 0) {\n                goto lab_0x413148_2;\n            } else {\n                // 0x412f88\n                v97 = (int64_t *)(v73 + 16);\n                int64_t v102 = 0; // 0x4129f0\n                int64_t v103 = 0; // 0x4129f0\n                int64_t v104; // 0x4129f0\n                while (true) {\n                    int64_t v105 = *v97; // 0x412f88\n                    int64_t v106 = v105; // 0x412f8c\n                    int64_t v107 = v102; // 0x412f8c\n                    int64_t v108 = v103; // 0x412f8c\n                    int64_t v109 = v103; // 0x412f8c\n                    int64_t v110 = v102; // 0x412f8c\n                    v104 = v103;\n                    int64_t v111; // 0x4129f0\n                    if (v105 == v103) {\n                      lab_0x412fac:\n                        // 0x412fac\n                        v111 = v109;\n                        if ((char)v110 == 0) {\n                            // break -> 0x413040\n                            break;\n                        }\n                      lab_0x412fb5:\n                        // 0x412fb5\n                        v106 = v111;\n                        v107 = 0;\n                        v108 = 0;\n                    }\n                    int64_t v112 = v107;\n                    int64_t v113 = v106; // 0x412fa6\n                    int64_t v114 = v108;\n                    int64_t v115; // 0x412fa2\n                    while (*(int64_t *)(*v80 + 8 + 24 * v114) != 0) {\n                        // 0x412fa2\n                        v115 = v114 + 1;\n                        v109 = v113;\n                        v110 = v112;\n                        v104 = v115;\n                        if (v113 == v115) {\n                            goto lab_0x412fac;\n                        }\n                        v114 = v115;\n                    }\n                    int64_t v116 = function_408740((int128_t *)&v68, v73, v114, 1); // 0x412fd3\n                    if ((int32_t)v116 != 0) {\n                        // 0x413148\n                        v93 = v116;\n                        v94 = &v68;\n                        goto lab_0x413148_2;\n                    }\n                    int64_t v117 = v114 + 1; // 0x412fe9\n                    v102 = v112;\n                    v103 = v117;\n                    while (*(int64_t *)((0x1800000000 * v114 >> 32) + 8 + *v80) == 0) {\n                        // 0x412ff5\n                        free((int64_t *)v96);\n                        int64_t v118 = *v97; // 0x413005\n                        v111 = v118;\n                        if (v118 == v117) {\n                            goto lab_0x412fb5;\n                        }\n                        v112 = 1;\n                        v113 = v118;\n                        v114 = v117;\n                        while (*(int64_t *)(*v80 + 8 + 24 * v114) != 0) {\n                            // 0x412fa2\n                            v115 = v114 + 1;\n                            v109 = v113;\n                            v110 = v112;\n                            v104 = v115;\n                            if (v113 == v115) {\n                                goto lab_0x412fac;\n                            }\n                            v114 = v115;\n                        }\n                        // 0x412fc0\n                        v116 = function_408740((int128_t *)&v68, v73, v114, 1);\n                        if ((int32_t)v116 != 0) {\n                            // 0x413148\n                            v93 = v116;\n                            v94 = &v68;\n                            goto lab_0x413148_2;\n                        }\n                        // 0x412fe0\n                        v117 = v114 + 1;\n                        v102 = v112;\n                        v103 = v117;\n                    }\n                }\n                // 0x413040\n                v95 = v104;\n                if ((*v5 & 16) != 0) {\n                    goto lab_0x413158;\n                } else {\n                    // 0x41304a\n                    if (*v9 == 0) {\n                        goto lab_0x413158;\n                    } else {\n                        // 0x413055\n                        if (*(char *)(v73 + 176) % 2 == 0) {\n                            goto lab_0x413158;\n                        } else {\n                            goto lab_0x413063;\n                        }\n                    }\n                }\n            }\n        }\n    }\n  lab_0x413148_2:\n    // 0x413148\n    result = v93;\n    int64_t v67 = v94; // 0x413150\n    goto lab_0x413358;\n  lab_0x4131e8:;\n    // 0x4131e8\n    int64_t v140; // 0x4129f0\n    int64_t v141 = v140 + 1; // 0x4131e8\n    uint64_t v78; // 0x4129f0\n    if (v78 <= v141) {\n        // break -> 0x413290\n        goto lab_0x413290;\n    }\n    int64_t v142 = v141; // 0x4129f0\n    goto lab_0x4131f5_2;\n  lab_0x412b73:;\n    // 0x412b73\n    int64_t v129; // bp-208, 0x4129f0\n    int64_t v124; // bp-216, 0x4129f0\n    int64_t * v158; // 0x412b94\n    int64_t v128; // 0x412b94\n    if (*v14 == 0) {\n        // 0x4133d0\n        result = 12;\n        goto lab_0x4133ae;\n    } else {\n        // 0x412b7d\n        if (*v21 == 0) {\n            // 0x4133d0\n            result = 12;\n            goto lab_0x4133ae;\n        } else {\n            // 0x412b88\n            v158 = (int64_t *)(a1 + 40);\n            v128 = *v158;\n            result = 0;\n            __asm_rep_stosq_memset((char *)&v129, 0, 18);\n            v124 = a2;\n            if (a3 != 0) {\n                int64_t v159 = &v124; // 0x413015\n                int64_t v160 = function_406910(v159, v20); // 0x41301a\n                v93 = v160;\n                v94 = v159;\n                if ((int32_t)v160 != 0) {\n                    goto lab_0x413148_2;\n                } else {\n                    // 0x413027\n                    goto lab_0x412c32;\n                }\n            } else {\n                goto lab_0x412c32;\n            }\n        }\n    }\n  lab_0x4133ae:\n    // 0x4133ae\n    function_40b610(v11);\n    *(int64_t *)a1 = 0;\n    *v7 = 0;\n    // 0x41333b\n    return result;\n  lab_0x412c32:;\n    int64_t v125 = a4 & 0x400000; // 0x412bb7\n    int32_t v126 = *v22;\n    int64_t v127 = (v128 | v125) == 0 ? a2 : v129;\n    v129 = v127;\n    if (v125 == 0) {\n        if (v126 > 1) {\n            int64_t v130 = &v124;\n            function_406d00(v130);\n            result = 0;\n            v52 = v130;\n            v53 = v130;\n        } else {\n            if ((v128 || v125) != 0) {\n                int64_t v131 = a3 - v4; // 0x412cc6\n                int64_t v132 = v131 == 0 | v131 < 0 != ((v131 ^ a3) & (v4 ^ a3)) < 0 ? a3 : v4; // 0x412cd6\n                if (v132 > v3) {\n                    unsigned char v133 = *(char *)(2 * v3 + v124); // 0x412d0d\n                    *(char *)(v127 + v3) = *(char *)(v128 + (int64_t)v133);\n                    int64_t v134 = v3 + 1; // 0x412d18\n                    int64_t v135 = v134; // 0x412d1f\n                    if (v132 != v134) {\n                        unsigned char v136 = *(char *)(v135 + v3 + v124); // 0x412d0d\n                        *(char *)(v129 + v135) = *(char *)(v128 + (int64_t)v136);\n                        int64_t v137 = v135 + 1; // 0x412d18\n                        v135 = v137;\n                        while (v132 != v137) {\n                            // 0x412cf0\n                            v136 = *(char *)(v135 + v3 + v124);\n                            *(char *)(v129 + v135) = *(char *)(v128 + (int64_t)v136);\n                            v137 = v135 + 1;\n                            v135 = v137;\n                        }\n                    }\n                }\n            }\n            // 0x412d21\n            result = 0;\n            v52 = &v124;\n            v53 = v126;\n        }\n        goto lab_0x412d39;\n    } else {\n        // 0x412c48\n        v51 = &v124;\n        if (v126 < 2) {\n            // 0x413558\n            function_406c80(v51);\n            result = 0;\n            v52 = v51;\n            v53 = v51;\n            goto lab_0x412d39;\n        } else {\n            int64_t v138 = function_406eb0(v51); // 0x412c56\n            v93 = v138;\n            v94 = v51;\n            // 0x412c51\n            while ((int32_t)v138 == 0) {\n                if (v3 >= a3) {\n                    goto lab_0x413630_2;\n                }\n                // 0x412c71\n                if (v4 > v3 + (int64_t)*v22) {\n                    goto lab_0x413630_2;\n                }\n                int64_t v139 = function_406910(v51, 2 * v4); // 0x412c99\n                v93 = v139;\n                v94 = v51;\n                if ((int32_t)v139 != 0) {\n                    // break -> 0x413148\n                    break;\n                }\n                v138 = function_406eb0(v51);\n                v93 = v138;\n                v94 = v51;\n            }\n            goto lab_0x413148_2;\n        }\n    }\n  lab_0x413358:;\n    int64_t * v119 = (int64_t *)(v67 + 112); // 0x413358\n    int64_t v120 = *v119; // 0x413358\n    if (v120 != 0) {\n        int64_t * v121 = (int64_t *)v120; // 0x413368\n        int64_t v122 = *v121; // 0x413368\n        free(v121);\n        while (v122 != 0) {\n            // 0x413368\n            v121 = (int64_t *)v122;\n            v122 = *v121;\n            free(v121);\n        }\n    }\n    // 0x413378\n    *v119 = 0;\n    int64_t * v123 = (int64_t *)(v67 + 32); // 0x413380\n    *(int32_t *)(v67 + 128) = 15;\n    *(int64_t *)(v67 + 104) = 0;\n    free((int64_t *)*v123);\n    *v123 = 0;\n    function_407c60(&v124);\n    goto lab_0x4133ae;\n  lab_0x412d39:;\n    int64_t v54 = v53;\n    int64_t v55 = v52;\n    *v9 = 0;\n    *(int64_t *)(v54 + 216) = a4;\n    int32_t v56; // bp-264, 0x4129f0\n    function_410af0((int64_t *)&v56, v55, a4 | 0x800000);\n    int64_t v57 = &v56; // 0x412d71\n    int64_t v58 = function_412890(v55, a1, v57, a4, 0, (int64_t)&result); // 0x412d88\n    int64_t v59; // 0x4129f0\n    int64_t v60; // 0x4129f0\n    int64_t v61; // 0x4129f0\n    int64_t v62; // 0x4129f0\n    int64_t v63; // 0x4135d9\n    int64_t v64; // 0x4135e7\n    int64_t v65; // 0x4129f0\n    int64_t v66; // 0x413602\n    if (result != 0) {\n        if (v58 == 0) {\n            // 0x413752\n            *(int64_t *)(v11 + 104) = 0;\n            v67 = v55;\n            goto lab_0x413358;\n        } else {\n            // 0x4135d9\n            v63 = v54 + 112;\n            v64 = v54 + 128;\n            v65 = &v68;\n            v66 = function_408ca0(v63, v64, 0, 0, v65);\n            goto lab_0x412dd7;\n        }\n    } else {\n        int64_t v69 = v54 + 112; // 0x412d99\n        int64_t v70 = v54 + 128; // 0x412da7\n        int64_t v71 = &v68;\n        int64_t v72 = function_408ca0(v69, v70, 0, 0, v71); // 0x412dc2\n        v65 = v71;\n        v64 = v70;\n        v66 = v72;\n        v63 = v69;\n        v62 = 2;\n        v61 = v72;\n        v60 = v69;\n        v59 = v72;\n        if (v58 == 0) {\n            goto lab_0x412df6;\n        } else {\n            goto lab_0x412dd7;\n        }\n    }\n  lab_0x412df6:\n    // 0x412df6\n    v73 = v60;\n    int64_t * v74; // 0x4129f0\n    int64_t * v75; // 0x412e12\n    int64_t * v76; // 0x412ead\n    int64_t * v77; // 0x4129f0\n    if (v61 == 0 || v59 == 0) {\n        // 0x413618\n        result = 12;\n        *(int64_t *)(v11 + 104) = 0;\n        v67 = v73;\n        goto lab_0x413358;\n    } else {\n        // 0x412e0e\n        v78 = v62;\n        v75 = (int64_t *)(v11 + 104);\n        *v75 = v59;\n        int32_t v79 = (int32_t)*(int64_t *)(v73 + 8);\n        int32_t size2 = 8 * v79; // 0x412e2f\n        int64_t * mem4 = malloc(size2); // 0x412e2f\n        *(int64_t *)(v73 + 24) = (int64_t)mem4;\n        int64_t * mem5 = malloc(size2); // 0x412e43\n        *(int64_t *)(v73 + 32) = (int64_t)mem5;\n        int32_t size3 = 24 * v79; // 0x412e54\n        int64_t * mem6 = malloc(size3); // 0x412e54\n        *(int64_t *)(v73 + 40) = (int64_t)mem6;\n        int64_t * mem7 = malloc(size3); // 0x412e65\n        v80 = (int64_t *)(v73 + 48);\n        *v80 = (int64_t)mem7;\n        if (mem4 == NULL | mem5 == NULL || mem6 == NULL || mem7 == NULL) {\n            // 0x413350\n            result = 12;\n            v67 = v73;\n            goto lab_0x413358;\n        } else {\n            int64_t v81 = *v9; // 0x412e9c\n            int64_t * mem8 = malloc(8 * (int32_t)v81); // 0x412ea8\n            int64_t v82 = (int64_t)mem8; // 0x412ea8\n            v76 = (int64_t *)(v73 + 224);\n            *v76 = v82;\n            if (mem8 == NULL) {\n                // 0x412e9c\n                v83 = (int64_t *)(v73 + 104);\n                goto lab_0x412f20;\n            } else {\n                // 0x412eb9\n                if (v81 != 0) {\n                    int64_t v84 = 0;\n                    *(int64_t *)(8 * v84 + v82) = v84;\n                    int64_t v85 = v84 + 1; // 0x412ec4\n                    while (v85 != v81) {\n                        // 0x412ec0\n                        v84 = v85;\n                        *(int64_t *)(8 * v84 + v82) = v84;\n                        v85 = v84 + 1;\n                    }\n                }\n                // 0x412ecd\n                v77 = (int64_t *)(v73 + 104);\n                function_408510(*v77, 0x4081d0, v73);\n                int64_t v86 = *v9; // 0x412ede\n                int64_t v87 = *v76;\n                v74 = (int64_t *)v87;\n                if (v86 == 0) {\n                    goto lab_0x412f0f;\n                } else {\n                    // 0x412eeb\n                    v83 = v77;\n                    if (*v74 == 0) {\n                        int64_t v88 = 1; // 0x412f06\n                        while (v88 != v86) {\n                            int64_t v89 = v88; // 0x412f04\n                            v83 = v77;\n                            if (*(int64_t *)(8 * v88 + v87) != v88) {\n                                goto lab_0x412f20;\n                            }\n                            v88 = v89 + 1;\n                        }\n                        goto lab_0x412f0f;\n                    } else {\n                        goto lab_0x412f20;\n                    }\n                }\n            }\n        }\n    }\n  lab_0x412dd7:;\n    int64_t v90 = function_408ca0(v63, v64, (int32_t)v58, (int32_t)v66, v65); // 0x412deb\n    v62 = 16;\n    v61 = v66;\n    v60 = v63;\n    v59 = v90;\n    goto lab_0x412df6;\n  lab_0x412f0f:\n    // 0x412f0f\n    free(v74);\n    *v76 = 0;\n    v83 = v77;\n    goto lab_0x412f20;\n  lab_0x413158:\n    // 0x413158\n    if (*(int64_t *)(v73 + 152) != 0) {\n        goto lab_0x413063;\n    } else {\n        goto lab_0x413166;\n    }\n  lab_0x413063:;\n    int64_t size4 = 24 * v95; // 0x413067\n    int64_t * mem9 = malloc((int32_t)size4); // 0x41306b\n    int64_t v161 = (int64_t)mem9; // 0x41306b\n    int64_t * v162 = (int64_t *)(v73 + 56); // 0x413070\n    *v162 = v161;\n    if (mem9 == NULL) {\n        // 0x413730\n        result = 12;\n        v67 = size4;\n        goto lab_0x413358;\n    } else {\n        if (v95 != 0) {\n            int128_t v163 = __asm_pxor(v2, v2); // 0x413098\n            __asm_movups(*(int128_t *)mem9, v163);\n            *(int64_t *)(v161 + 16) = 0;\n            uint64_t v164 = *v97; // 0x4130af\n            int64_t v165 = 1; // 0x4130b6\n            int128_t v166 = v163; // 0x4130b6\n            int64_t v167 = v164; // 0x4130b6\n            if (v164 > 1) {\n                int128_t v168 = v166;\n                int128_t v169 = __asm_pxor(v168, v168); // 0x413098\n                int64_t v170 = v165 + 1; // 0x41309c\n                int64_t v171 = *v162 + 24 * v165; // 0x4130a0\n                __asm_movups(*(int128_t *)v171, v169);\n                *(int64_t *)(v171 + 16) = 0;\n                uint64_t v172 = *v97; // 0x4130af\n                v165 = v170;\n                v167 = v172;\n                while (v172 > v170) {\n                    // 0x413090\n                    v168 = v169;\n                    v169 = __asm_pxor(v168, v168);\n                    v170 = v165 + 1;\n                    v171 = *v162 + 24 * v165;\n                    __asm_movups(*(int128_t *)v171, v169);\n                    *(int64_t *)(v171 + 16) = 0;\n                    v172 = *v97;\n                    v165 = v170;\n                    v167 = v172;\n                }\n            }\n            int64_t v173 = v167;\n            if (v173 != 0) {\n                int64_t v174 = *v80; // 0x4130ca\n                int64_t v175 = 0;\n                int64_t v176 = 24 * v175; // 0x4130da\n                int64_t v177 = v176 + v174; // 0x4130e7\n                int64_t v178 = *(int64_t *)(v177 + 8); // 0x4130ea\n                int64_t v179 = v173; // 0x4130f3\n                int64_t v180 = v174; // 0x4130f3\n                int64_t v181; // 0x4129f0\n                int64_t v182; // 0x41312e\n                int64_t v183; // 0x413137\n                int64_t v184; // 0x413100\n                int64_t v185; // 0x413109\n                if (v178 >= 0 == (v178 != 0)) {\n                    // 0x41311d\n                    v181 = *(int64_t *)(v177 + 16);\n                    v185 = 0;\n                    v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                    v183 = function_4069b0(v182, v175);\n                    v93 = 12;\n                    v94 = v182;\n                    if ((char)v183 == 0) {\n                        goto lab_0x413148_2;\n                    }\n                    // 0x413100\n                    v184 = *v80;\n                    v185++;\n                    v181 = 0x100000000 * v181 >> 32;\n                    while (v185 < *(int64_t *)(v176 + 8 + v184)) {\n                        // 0x41311d\n                        v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                        v183 = function_4069b0(v182, v175);\n                        v93 = 12;\n                        v94 = v182;\n                        if ((char)v183 == 0) {\n                            goto lab_0x413148_2;\n                        }\n                        // 0x413100\n                        v184 = *v80;\n                        v185++;\n                        v181 = 0x100000000 * v181 >> 32;\n                    }\n                    // 0x4135b0\n                    v179 = *v97;\n                    v180 = v184;\n                }\n                // 0x4135b0\n                v174 = v180;\n                int64_t v186 = v179; // 0x4135bb\n                int64_t v187 = v175 + 1; // 0x4135b0\n                while (v186 > v187) {\n                    // 0x4130ce\n                    v175 = v187;\n                    v176 = 24 * v175;\n                    v177 = v176 + v174;\n                    v178 = *(int64_t *)(v177 + 8);\n                    v179 = v186;\n                    v180 = v174;\n                    if (v178 >= 0 == (v178 != 0)) {\n                        // 0x41311d\n                        v181 = *(int64_t *)(v177 + 16);\n                        v185 = 0;\n                        v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                        v183 = function_4069b0(v182, v175);\n                        v93 = 12;\n                        v94 = v182;\n                        if ((char)v183 == 0) {\n                            goto lab_0x413148_2;\n                        }\n                        // 0x413100\n                        v184 = *v80;\n                        v185++;\n                        v181 = 0x100000000 * v181 >> 32;\n                        while (v185 < *(int64_t *)(v176 + 8 + v184)) {\n                            // 0x41311d\n                            v182 = *v162 + 24 * *(int64_t *)(8 * v185 + v181);\n                            v183 = function_4069b0(v182, v175);\n                            v93 = 12;\n                            v94 = v182;\n                            if ((char)v183 == 0) {\n                                goto lab_0x413148_2;\n                            }\n                            // 0x413100\n                            v184 = *v80;\n                            v185++;\n                            v181 = 0x100000000 * v181 >> 32;\n                        }\n                        // 0x4135b0\n                        v179 = *v97;\n                        v180 = v184;\n                    }\n                    // 0x4135b0\n                    v174 = v180;\n                    v186 = v179;\n                    v187 = v175 + 1;\n                }\n            }\n        }\n        goto lab_0x413166;\n    }\n  lab_0x413166:\n    // 0x413166\n    result = 0;\n    unsigned char result2 = *v23 / 4 & (char)(v125 == 0); // 0x413180\n    if (result2 != 0) {\n        // 0x4134a0\n        if (*v158 == 0) {\n            // 0x4134ab\n            if (*(int64_t *)(v11 + 16) != 0) {\n                // 0x4134b8\n                return result2;\n            }\n            int64_t v188 = *(int64_t *)(v11 + 152); // 0x413766\n            *v22 = 1;\n            *v23 = 2 * (char)(v188 >= 0 == (v188 != 0)) | *v23 & -7;\n        }\n    }\n    int64_t v155 = &v68; // 0x41318c\n    int64_t v189 = *(int64_t *)(*(int64_t *)(*v75 + 24) + 56); // 0x413193\n    *(int64_t *)(v11 + 144) = v189;\n    int64_t * v153 = (int64_t *)(v11 + 48); // 0x4131a2\n    int64_t v190 = function_4090d0(v155, *v153 + 24 * v189); // 0x4131aa\n    int64_t v191 = v190 & 0xffffffff; // 0x4131af\n    int32_t v192 = v190; // 0x4131b2\n    v56 = v192;\n    int64_t v154 = v155; // 0x4131b8\n    int64_t v156 = v191; // 0x4131b8\n    if (v192 != 0) {\n        goto lab_0x4132cf;\n    } else {\n        // 0x4131be\n        if (*(int64_t *)(v11 + 152) >= 1) {\n            int64_t v152 = &v96;\n            v142 = 0;\n            while (true) {\n              lab_0x4131f5_2:\n                // 0x4131f5\n                v140 = v142;\n                int64_t v143 = *v14; // 0x4131fa\n                int64_t v144 = *(int64_t *)(v96 + 8 * v140); // 0x4131fd\n                int64_t v145 = 16 * v144 + v143; // 0x413208\n                if (*(char *)(v145 + 8) == 4) {\n                    int64_t * v146 = (int64_t *)v145;\n                    int64_t v147 = 0;\n                    int64_t v148 = 16 * *(int64_t *)(8 * v147 + v96) + v143; // 0x413229\n                    int64_t v149; // 0x41323a\n                    int64_t v150; // 0x413250\n                    int64_t v151; // 0x41326f\n                    if (*(char *)(v148 + 8) == 9) {\n                        // 0x413232\n                        if (*(int64_t *)v148 == *v146) {\n                            // 0x41323a\n                            v149 = *(int64_t *)(v11 + 40);\n                            v150 = *(int64_t *)*(int64_t *)(24 * v144 + 16 + v149);\n                            if (function_408030(v78, v152, v150) != 0) {\n                                goto lab_0x4131e8;\n                            } else {\n                                // 0x413260\n                                v151 = function_408570(&v68, (int128_t *)(*v153 + 24 * v150));\n                                if ((int32_t)v151 != 0) {\n                                    // 0x4136f0\n                                    v154 = v155;\n                                    v156 = v151 & 0xffffffff;\n                                    goto lab_0x4132cf;\n                                } else {\n                                    // 0x4131f5\n                                    v142 = 1;\n                                    goto lab_0x4131f5_2;\n                                }\n                            }\n                        }\n                    }\n                    int64_t v157 = v147 + 1; // 0x413218\n                    while (v78 != v157) {\n                        // 0x413221\n                        v147 = v157;\n                        v148 = 16 * *(int64_t *)(8 * v147 + v96) + v143;\n                        if (*(char *)(v148 + 8) == 9) {\n                            // 0x413232\n                            if (*(int64_t *)v148 == *v146) {\n                                // 0x41323a\n                                v149 = *(int64_t *)(v11 + 40);\n                                v150 = *(int64_t *)*(int64_t *)(24 * v144 + 16 + v149);\n                                if (function_408030(v78, v152, v150) != 0) {\n                                    goto lab_0x4131e8;\n                                } else {\n                                    // 0x413260\n                                    v151 = function_408570(&v68, (int128_t *)(*v153 + 24 * v150));\n                                    if ((int32_t)v151 != 0) {\n                                        // 0x4136f0\n                                        v154 = v155;\n                                        v156 = v151 & 0xffffffff;\n                                        goto lab_0x4132cf;\n                                    } else {\n                                        // 0x4131f5\n                                        v142 = 1;\n                                        goto lab_0x4131f5_2;\n                                    }\n                                }\n                            }\n                        }\n                        // 0x413218\n                        v157 = v147 + 1;\n                    }\n                }\n                goto lab_0x4131e8;\n            }\n        }\n      lab_0x413290:;\n        int64_t v193 = function_4092e0((int128_t *)&v56, v11, &v68, 0); // 0x41329d\n        *(int64_t *)(v11 + 72) = v193;\n        if (v193 == 0) {\n            goto lab_0x413548;\n        } else {\n            // 0x4132af\n            if (*(char *)(v193 + 104) < 0) {\n                int64_t v194 = function_4092e0((int128_t *)&v56, v11, &v68, 1); // 0x4134f0\n                int64_t * v195 = (int64_t *)(v11 + 80); // 0x413500\n                *v195 = v194;\n                int64_t v196 = function_4092e0((int128_t *)&v56, v11, &v68, 2); // 0x413509\n                int64_t * v197 = (int64_t *)(v11 + 88); // 0x413519\n                *v197 = v196;\n                int64_t v198 = function_4092e0((int128_t *)&v56, v11, &v68, 6); // 0x413522\n                *(int64_t *)(v11 + 96) = v198;\n                if (*v195 == 0) {\n                    goto lab_0x413548;\n                } else {\n                    // 0x413532\n                    if (v198 != 0 == (*v197 != 0)) {\n                        goto lab_0x4132c5;\n                    } else {\n                        goto lab_0x413548;\n                    }\n                }\n            } else {\n                // 0x4132b9\n                *(int64_t *)(v11 + 96) = v193;\n                *(int64_t *)(v11 + 88) = v193;\n                *(int64_t *)(v11 + 80) = v193;\n                goto lab_0x4132c5;\n            }\n        }\n    }\n  lab_0x4132cf:\n    // 0x4132cf\n    result = v156;\n    int64_t * v199 = (int64_t *)(v154 + 112); // 0x4132d8\n    int64_t v200 = *v199; // 0x4132d8\n    if (v200 != 0) {\n        int64_t * v201 = (int64_t *)v200; // 0x4132e8\n        int64_t v202 = *v201; // 0x4132e8\n        free(v201);\n        while (v202 != 0) {\n            // 0x4132e8\n            v201 = (int64_t *)v202;\n            v202 = *v201;\n            free(v201);\n        }\n    }\n    // 0x4132f8\n    *v199 = 0;\n    int64_t * v203 = (int64_t *)(v154 + 32); // 0x413301\n    *(int32_t *)(v154 + 128) = 15;\n    *(int64_t *)(v154 + 104) = 0;\n    free((int64_t *)*v203);\n    *v203 = 0;\n    function_407c60(&v124);\n    if (result == 0) {\n        // 0x41333b\n        return result;\n    }\n    goto lab_0x4133ae;\n  lab_0x413548:\n    // 0x413548\n    v154 = v57;\n    v156 = v56;\n    goto lab_0x4132cf;\n  lab_0x4132c5:\n    // 0x4132c5\n    free((int64_t *)v96);\n    v154 = v96;\n    v156 = v191;\n    goto lab_0x4132cf;\n}\n"
        },
        {
            "funcName": "function_4137a0",
            "funcStartAddr": "4137a0",
            "funcEndAddr": "413807",
            "decompiledFuncCode": "int64_t function_4137a0(int64_t a1, int64_t a2, int64_t a3) {\n    char * v1 = (char *)(a3 + 56); // 0x4137c0\n    *v1 = *v1 & 111 | (char)(g73 / 0x200000) & 16 | -128;\n    int64_t v2; // 0x4137a0\n    int64_t v3 = function_4129f0(a3, a1, a2, g73, a1, v2); // 0x4137d5\n    if ((int32_t)v3 == 0) {\n        // 0x413800\n        return 0;\n    }\n    int64_t v4 = *(int64_t *)((0x100000000 * v3 >> 29) + (int64_t)&g15); // 0x4137e7\n    return (int64_t)dcgettext(NULL, (char *)(v4 + (int64_t)\"Success\"), 5);\n}\n"
        },
        {
            "funcName": "function_413810",
            "funcStartAddr": "413810",
            "funcEndAddr": "41381f",
            "decompiledFuncCode": "int64_t function_413810(int64_t a1) {\n    int64_t result = g73; // 0x413810\n    g73 = a1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_413820",
            "funcStartAddr": "413820",
            "funcEndAddr": "4138e3",
            "decompiledFuncCode": "int64_t function_413820(int64_t a1) {\n    int64_t v1 = *(int64_t *)(a1 + 32); // 0x413826\n    *(int64_t *)v1 = 0;\n    *(int64_t *)(v1 + 248) = 0;\n    int64_t v2 = v1 + 8 & -8; // 0x41384a\n    __asm_rep_stosq_memset((char *)v2, 0, (v1 + 256 - v2) / 8 % 0x20000000);\n    int64_t * v3 = (int64_t *)(a1 + 72); // 0x413863\n    int64_t v4 = *v3; // 0x413863\n    function_40c2d0(a1, v4 + 16, v4 + 24, v1);\n    int64_t v5 = *(int64_t *)(a1 + 80); // 0x413875\n    int64_t v6 = v5; // 0x41387f\n    if (*v3 != v5) {\n        // 0x413881\n        function_40c2d0(a1, v5 + 16, v5 + 24, v1);\n        v6 = *v3;\n    }\n    int64_t v7 = *(int64_t *)(a1 + 88); // 0x413899\n    int64_t v8 = v6; // 0x4138a1\n    if (v7 != v6) {\n        // 0x4138a3\n        function_40c2d0(a1, v7 + 16, v7 + 24, v1);\n        v8 = *v3;\n    }\n    int64_t v9 = *(int64_t *)(a1 + 96); // 0x4138bb\n    if (v9 != v8) {\n        // 0x4138c5\n        function_40c2d0(a1, v9 + 16, v9 + 24, v1);\n    }\n    char * v10 = (char *)(a1 + 56); // 0x4138d8\n    *v10 = *v10 | 8;\n    return 0;\n}\n"
        },
        {
            "funcName": "function_4138f0",
            "funcStartAddr": "4138f0",
            "funcEndAddr": "413e7b",
            "decompiledFuncCode": "int64_t function_4138f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8) {\n    // 0x4138f0\n    if (a4 < 0 || a4 > a3) {\n        // 0x413a1f\n        return -1;\n    }\n    int64_t v1 = a5 + a4; // 0x4138f5\n    int64_t v2 = a3; // 0x413931\n    if (v1 > a3) {\n        goto lab_0x41395c;\n    } else {\n        // 0x413937\n        v2 = a3;\n        if (a5 > -1 == v1 < a4) {\n            goto lab_0x41395c;\n        } else {\n            if (v1 < 0) {\n                goto lab_0x413c18;\n            } else {\n                // 0x41394e\n                v2 = v1;\n                if (a5 >= 0 || v1 < a4) {\n                    goto lab_0x41395c;\n                } else {\n                    goto lab_0x413c18;\n                }\n            }\n        }\n    }\n  lab_0x41395c:;\n    char * v3 = (char *)(a1 + 56); // 0x41395c\n    int64_t v4 = (int64_t)*v3; // 0x41395c\n    int64_t v5 = v4; // 0x413972\n    int64_t v6 = v2; // 0x413972\n    if (v2 > a4) {\n        // 0x413974\n        v5 = v4;\n        v6 = v2;\n        if ((v4 & 8) == 0 == (*(int64_t *)(a1 + 32) != 0)) {\n            // 0x413b70\n            function_413820(a1);\n            v5 = (int64_t)*v3;\n            v6 = v2;\n        }\n    }\n    goto lab_0x413983;\n  lab_0x413983:;\n    int64_t size = 16; // 0x413985\n    int64_t v7 = 0; // 0x413985\n    int64_t v8 = 1; // 0x413985\n    int64_t v9; // 0x4138f0\n    if (a7 == 0 || (v5 & 16) != 0) {\n        goto lab_0x4139b1;\n    } else {\n        uint64_t v10 = *(int64_t *)(a1 + 48); // 0x413997\n        if ((v5 & 6) == 4) {\n            int64_t v11 = *(int64_t *)a7; // 0x413b30\n            if (v11 > v10) {\n                // 0x4139a3\n                v9 = v10 + 1;\n                goto lab_0x4139aa;\n            } else {\n                // 0x413b3d\n                v9 = v11;\n                size = 16;\n                v7 = 0;\n                v8 = 1;\n                if (v11 >= 0 == (v11 != 0)) {\n                    goto lab_0x4139aa;\n                } else {\n                    goto lab_0x4139b1;\n                }\n            }\n        } else {\n            // 0x4139a3\n            v9 = v10 + 1;\n            goto lab_0x4139aa;\n        }\n    }\n  lab_0x4139b1:;\n    int64_t * mem = malloc((int32_t)size); // 0x4139c0\n    if (mem == NULL) {\n        // 0x413a1f\n        return -2;\n    }\n    uint64_t v12 = v8;\n    int64_t v13 = (int64_t)mem; // 0x4139c0\n    int64_t result = -1; // 0x4138f0\n    int64_t v14; // 0x4138f0\n    int64_t v15; // 0x4138f0\n    int64_t v16; // 0x4138f0\n    int64_t v17; // 0x4138f0\n    int64_t v18; // 0x4138f0\n    int64_t v19; // 0x4138f0\n    int64_t v20; // 0x4138f0\n    int64_t v21; // 0x4138f0\n    int64_t v22; // 0x4138f0\n    int64_t v23; // 0x4138f0\n    int64_t v24; // 0x4138f0\n    int64_t v25; // 0x4138f0\n    int64_t v26; // 0x4138f0\n    int64_t v27; // 0x4138f0\n    int64_t v28; // 0x4138f0\n    int64_t v29; // 0x4138f0\n    int64_t v30; // 0x4138f0\n    int64_t v31; // 0x4138f0\n    int64_t v32; // 0x4138f0\n    int64_t v33; // 0x4138f0\n    int64_t v34; // 0x4138f0\n    int64_t v35; // 0x4138f0\n    int64_t v36; // 0x4138f0\n    int64_t v37; // 0x4138f0\n    int64_t v38; // 0x4138f0\n    char * v39; // 0x413a41\n    switch ((int32_t)v40) {\n        case 0: {\n            // 0x413a38\n            v14 = v7;\n            v36 = a2;\n            v26 = a3;\n            v31 = v6;\n            v16 = v6;\n            v21 = a6;\n            if (v14 == 0) {\n                goto lab_0x413b08;\n            } else {\n                // 0x413a41\n                v39 = (char *)(a1 + 56);\n                int64_t v41 = v12 + 1; // 0x413a46\n                unsigned char v42 = *v39 / 2 % 4;\n                switch (v42) {\n                    case 0: {\n                        int32_t size2 = 8 * (int32_t)v41; // 0x413bc0\n                        int64_t * mem2 = malloc(size2); // 0x413bc0\n                        int64_t v43 = (int64_t)mem2; // 0x413bc0\n                        *(int64_t *)(v14 + 8) = v43;\n                        v35 = v41;\n                        v25 = a3;\n                        int64_t v44; // 0x4138f0\n                        v30 = v44;\n                        v15 = v44;\n                        v20 = 0;\n                        if (mem2 == NULL) {\n                            goto lab_0x413aed;\n                        } else {\n                            int64_t * mem3 = malloc(size2); // 0x413be5\n                            *(int64_t *)(v14 + 16) = (int64_t)mem3;\n                            if (mem3 == NULL) {\n                                // 0x413cda\n                                free(mem2);\n                                v35 = v41;\n                                v25 = a3;\n                                v30 = v43;\n                                v15 = v44;\n                                v20 = 0;\n                                goto lab_0x413aed;\n                            } else {\n                                // 0x413c02\n                                *(int64_t *)v14 = v41;\n                                v34 = v41;\n                                v24 = a3;\n                                v29 = v43;\n                                v19 = 1;\n                                goto lab_0x413a77;\n                            }\n                        }\n                    }\n                    case 1: {\n                        int64_t * v45 = (int64_t *)v14; // 0x413c5e\n                        v34 = a2;\n                        v24 = a3;\n                        v29 = v6;\n                        v19 = 1;\n                        if (*v45 >= v41) {\n                            goto lab_0x413a77;\n                        } else {\n                            int64_t v46 = 8 * v41; // 0x413c68\n                            int64_t * v47 = (int64_t *)(v14 + 8); // 0x413c70\n                            int32_t v48 = v46; // 0x413c87\n                            int64_t * mem4 = realloc((int64_t *)*v47, v48); // 0x413c87\n                            v35 = v46;\n                            v25 = 1;\n                            v30 = v41;\n                            v15 = v6;\n                            v20 = 0;\n                            if (mem4 == NULL) {\n                                goto lab_0x413aed;\n                            } else {\n                                int64_t * v49 = (int64_t *)(v14 + 16); // 0x413c99\n                                int64_t * mem5 = realloc((int64_t *)*v49, v48); // 0x413ca1\n                                if (mem5 == NULL) {\n                                    // 0x413cea\n                                    free(mem4);\n                                    v35 = v46;\n                                    v25 = 1;\n                                    v30 = v41;\n                                    v15 = v6;\n                                    v20 = 0;\n                                    goto lab_0x413aed;\n                                } else {\n                                    // 0x413cb6\n                                    *v47 = (int64_t)mem4;\n                                    *v49 = (int64_t)mem5;\n                                    *v45 = v41;\n                                    v34 = v46;\n                                    v24 = 1;\n                                    v29 = v41;\n                                    v19 = 1;\n                                    goto lab_0x413a77;\n                                }\n                            }\n                        }\n                    }\n                    default: {\n                        // 0x413a5e\n                        v38 = a2;\n                        v28 = a3;\n                        v33 = v6;\n                        v18 = v6;\n                        v23 = a6;\n                        if (v42 != 2) {\n                            goto lab_0x413d2c;\n                        } else {\n                            // 0x413a67\n                            v34 = a2;\n                            v24 = a3;\n                            v29 = v6;\n                            v19 = 2;\n                            v37 = a2;\n                            v27 = a3;\n                            v32 = v6;\n                            v17 = v6;\n                            v22 = a6;\n                            if (v12 > *(int64_t *)v14) {\n                                goto lab_0x413d13;\n                            } else {\n                                goto lab_0x413a77;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        case 1: {\n            goto lab_0x413a17;\n        }\n        default: {\n            goto lab_0x413a10;\n        }\n    }\n  lab_0x413c18:\n    // 0x413c18\n    v5 = (int64_t)*(char *)(a1 + 56);\n    v6 = 0;\n    goto lab_0x413983;\n  lab_0x413a10:\n    // 0x413a10\n    result = -2;\n  lab_0x413a17:\n    // 0x413a17\n    free(mem);\n    // 0x413a1f\n    return result;\n  lab_0x413b08:;\n    int64_t v50 = *mem; // 0x413b0d\n    result = v50;\n    if ((char)a8 == 0) {\n        // 0x413a17\n        free(mem);\n        // 0x413a1f\n        return result;\n    }\n    if (v50 == a4) {\n        // 0x413a17\n        free(mem);\n        // 0x413a1f\n        return *(int64_t *)(v13 + 8) - v50;\n    }\n    // 0x413cfa\n    __assert_fail(\"pmatch[0].rm_so == start\", \"lib/regexec.c\", 445, \"re_search_stub\");\n    v37 = v36;\n    v27 = v26;\n    v32 = v31;\n    v17 = v16;\n    v22 = v21;\n    goto lab_0x413d13;\n  lab_0x4139aa:\n    // 0x4139aa\n    size = 16 * v9;\n    v7 = a7;\n    v8 = v9;\n    goto lab_0x4139b1;\n  lab_0x413d13:\n    // 0x413d13\n    __assert_fail(\"regs->num_regs >= nregs\", \"lib/regexec.c\", 506, \"re_copy_regs\");\n    v38 = v37;\n    v28 = v27;\n    v33 = v32;\n    v18 = v17;\n    v23 = v22;\n    goto lab_0x413d2c;\n  lab_0x413d2c:\n    // 0x413d2c\n    __assert_fail(\"regs_allocated == REGS_FIXED\", \"lib/regexec.c\", 504, \"re_copy_regs\");\n    if ((v18 || v28) <= -1) {\n        // 0x413a1f\n        return -2;\n    }\n    int64_t size3 = v18 + 504; // 0x413d9c\n    if ((size3 & (v18 ^ -0x8000000000000000)) < 0) {\n        // 0x413a1f\n        return -2;\n    }\n    int64_t * v51 = NULL; // 0x413da8\n    int64_t v52 = (int64_t)\"lib/regexec.c\"; // 0x413da8\n    if (v18 != 0) {\n        int64_t * mem6 = malloc((int32_t)size3); // 0x413e12\n        if (mem6 == NULL) {\n            // 0x413a1f\n            return -2;\n        }\n        int64_t v53 = (int64_t)mem6; // 0x413e12\n        memcpy(mem6, (int64_t *)\"lib/regexec.c\", 504);\n        memcpy((int64_t *)(v53 + 504), (int64_t *)\"re_copy_regs\", (int32_t)v18);\n        v51 = mem6;\n        v52 = v53;\n    }\n    int64_t result2 = function_4138f0((int64_t)\"regs_allocated == REGS_FIXED\", v52, size3, v23, v38, v28, v33, a6 % 256); // 0x413dd3\n    free(v51);\n    // 0x413a1f\n    return result2;\n  lab_0x413aed:\n    // 0x413aed\n    *v39 = *v39 & -7 | 2 * (char)v20;\n    v36 = v35;\n    v26 = v25;\n    v31 = v30;\n    v16 = v15;\n    v21 = v20;\n    if (v20 == 0) {\n        goto lab_0x413a10;\n    } else {\n        goto lab_0x413b08;\n    }\n  lab_0x413a77:;\n    int64_t v54 = v19;\n    int64_t v55 = v29;\n    int64_t v56 = v24;\n    int64_t v57 = v34;\n    int64_t v58 = 0; // 0x413a7a\n    int64_t v59 = v6; // 0x413a7a\n    if (v12 >= 1) {\n        int64_t v60 = *(int64_t *)(v14 + 8); // 0x413a80\n        int64_t v61 = 0; // 0x413a97\n        int64_t v62 = 2 * v61; // 0x413aa0\n        *(int64_t *)(v61 + v60) = *(int64_t *)(v62 + v13);\n        int64_t v63 = *(int64_t *)(v13 + 8 + v62); // 0x413aa9\n        *(int64_t *)(v61 + *(int64_t *)(v14 + 16)) = v63;\n        v61 += 8;\n        v58 = v12;\n        v59 = v60;\n        while (v61 != 8 * v12) {\n            // 0x413aa0\n            v62 = 2 * v61;\n            *(int64_t *)(v61 + v60) = *(int64_t *)(v62 + v13);\n            v63 = *(int64_t *)(v13 + 8 + v62);\n            *(int64_t *)(v61 + *(int64_t *)(v14 + 16)) = v63;\n            v61 += 8;\n            v58 = v12;\n            v59 = v60;\n        }\n    }\n    int64_t v64 = v59;\n    int64_t v65 = v58;\n    int64_t * v66 = (int64_t *)v14; // 0x413abb\n    v35 = v57;\n    v25 = v56;\n    v30 = v55;\n    v15 = v64;\n    v20 = v54;\n    if (*v66 > v65) {\n        int64_t v67 = v65 + 1; // 0x413ad8\n        int64_t v68 = 8 * v65; // 0x413adc\n        *(int64_t *)(v68 + *(int64_t *)(v14 + 16)) = -1;\n        *(int64_t *)(v68 + *(int64_t *)(v14 + 8)) = -1;\n        v35 = v57;\n        v25 = v56;\n        v30 = v55;\n        v15 = v64;\n        v20 = v54;\n        while (*v66 > v67) {\n            int64_t v69 = v67;\n            v67 = v69 + 1;\n            v68 = 8 * v69;\n            *(int64_t *)(v68 + *(int64_t *)(v14 + 16)) = -1;\n            *(int64_t *)(v68 + *(int64_t *)(v14 + 8)) = -1;\n            v35 = v57;\n            v25 = v56;\n            v30 = v55;\n            v15 = v64;\n            v20 = v54;\n        }\n    }\n    goto lab_0x413aed;\n}\n"
        },
        {
            "funcName": "function_413e80",
            "funcStartAddr": "413e80",
            "funcEndAddr": "413f90",
            "decompiledFuncCode": "int64_t function_413e80(int64_t a1, int64_t str, uint64_t a3) {\n    // 0x413e80\n    *(int64_t *)a1 = 0;\n    *(int64_t *)(a1 + 8) = 0;\n    *(int64_t *)(a1 + 16) = 0;\n    int64_t * mem = malloc(256); // 0x413ec5\n    int64_t * v1 = (int64_t *)(a1 + 32); // 0x413eca\n    *v1 = (int64_t)mem;\n    if (mem == NULL) {\n        // 0x413f80\n        return 12;\n    }\n    int64_t v2 = (a3 % 2 == 0 ? 0x10102c6 : 0x3b2fc) | 0x200000 * a3 & 0x400000; // 0x413ee7\n    int64_t v3 = (a3 & 4) != 0 ? v2 & 0x143b2be | 256 : v2;\n    *(int64_t *)(a1 + 40) = 0;\n    char * v4 = (char *)(a1 + 56); // 0x413f02\n    *v4 = ((a3 & 4) != 0 ? -128 : 0) | 2 * (char)a3 & 16 | *v4 & 111;\n    int64_t v5; // 0x413e80\n    int64_t v6 = function_4129f0(a1, str, (int64_t)strlen((char *)str), v3, v5, v5); // 0x413f27\n    int32_t v7 = v6; // 0x413f2e\n    int64_t v8 = 8; // 0x413f31\n    if (v7 != 16) {\n        // 0x413f33\n        v8 = v6 & 0xffffffff;\n        if (v7 == 0) {\n            // 0x413f37\n            function_413820(a1);\n            // 0x413f3f\n            return v8 & 0xffffffff;\n        }\n    }\n    // 0x413f6d\n    free((int64_t *)*v1);\n    *v1 = 0;\n    // 0x413f3f\n    return v8 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_413f90",
            "funcStartAddr": "413f90",
            "funcEndAddr": "41400d",
            "decompiledFuncCode": "int64_t function_413f90(int64_t a1, int64_t a2, int64_t a3, uint64_t a4) {\n    int64_t v1 = *(int64_t *)((0x100000000 * a1 >> 29) + (int64_t)&g15); // 0x413fb1\n    char * str = dcgettext(NULL, (char *)(v1 + (int64_t)\"Success\"), 5); // 0x413fc2\n    int64_t result = (int64_t)strlen(str) + 1; // 0x413fd2\n    if (a4 == 0) {\n        // 0x413fee\n        return result;\n    }\n    int64_t v2 = result; // 0x413fe1\n    if (result > a4) {\n        // 0x414000\n        v2 = a4 - 1;\n        *(char *)(v2 + a3) = 0;\n    }\n    // 0x413fe3\n    memcpy((int64_t *)a3, (int64_t *)str, (int32_t)v2);\n    // 0x413fee\n    return result;\n}\n"
        },
        {
            "funcName": "function_414010",
            "funcStartAddr": "414010",
            "funcEndAddr": "414054",
            "decompiledFuncCode": "int64_t function_414010(int64_t a1) {\n    if (a1 != 0) {\n        // 0x41401c\n        function_40b610(a1);\n    }\n    // 0x414021\n    *(int64_t *)a1 = 0;\n    int64_t * v1 = (int64_t *)(a1 + 32); // 0x414028\n    *(int64_t *)(a1 + 8) = 0;\n    free((int64_t *)*v1);\n    *v1 = 0;\n    int64_t * v2 = (int64_t *)(a1 + 40); // 0x414041\n    free((int64_t *)*v2);\n    *v2 = 0;\n    return &g81;\n}\n"
        },
        {
            "funcName": "function_414060",
            "funcStartAddr": "414060",
            "funcEndAddr": "4140f6",
            "decompiledFuncCode": "int64_t function_414060(int64_t a1, int64_t str, int64_t a3, int64_t a4, int64_t a5) {\n    if ((a5 & 0xfffffff8) != 0) {\n        // 0x4140f0\n        return 2;\n    }\n    int64_t v1; // 0x414060\n    int64_t v2; // 0x414060\n    int64_t v3; // 0x414060\n    int64_t v4; // 0x414060\n    int64_t v5; // 0x414060\n    int64_t v6; // 0x414060\n    if ((a5 & 4) != 0) {\n        int64_t v7 = *(int64_t *)(a4 + 8); // 0x4140d3\n        v5 = 0;\n        v1 = a4;\n        v3 = v7;\n        v6 = 0;\n        v2 = a4;\n        v4 = v7;\n        if ((*(char *)(a1 + 56) & 16) != 0) {\n            goto lab_0x4140a6;\n        } else {\n            goto lab_0x4140dd;\n        }\n    } else {\n        int64_t len = strlen((char *)str); // 0x41408d\n        v5 = 0;\n        v1 = 0;\n        v3 = len;\n        v6 = 0;\n        v2 = 0;\n        v4 = len;\n        if ((*(char *)(a1 + 56) & 16) == 0) {\n            goto lab_0x4140dd;\n        } else {\n            goto lab_0x4140a6;\n        }\n    }\n  lab_0x4140a6:;\n    int64_t v8 = v3;\n    return (int32_t)function_40e940(a1, str, v8, v1, v8, v8, v6, v5, a5 & 0xffffffff) != 0;\n  lab_0x4140dd:\n    // 0x4140dd\n    v5 = a4;\n    v1 = v2;\n    v3 = v4;\n    v6 = a3;\n    goto lab_0x4140a6;\n}\n"
        },
        {
            "funcName": "function_414100",
            "funcStartAddr": "414100",
            "funcEndAddr": "414118",
            "decompiledFuncCode": "int64_t function_414100(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    // 0x414100\n    return function_4138f0(a1, a2, a3, a4, 0, a3, a5, 1);\n}\n"
        },
        {
            "funcName": "function_414120",
            "funcStartAddr": "414120",
            "funcEndAddr": "414135",
            "decompiledFuncCode": "int64_t function_414120(int64_t * a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t * a6) {\n    // 0x414120\n    return function_4138f0((int64_t)a1, a2, a3, a4, a5, a3, (int64_t)a6, 0);\n}\n"
        },
        {
            "funcName": "function_414140",
            "funcStartAddr": "414140",
            "funcEndAddr": "41415a",
            "decompiledFuncCode": "int64_t function_414140(int64_t a1, int64_t a2) {\n    // 0x414140\n    int64_t result; // 0x414140\n    return result;\n}\n"
        },
        {
            "funcName": "function_414160",
            "funcStartAddr": "414160",
            "funcEndAddr": "41417c",
            "decompiledFuncCode": "int64_t function_414160(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x414160\n    int64_t result; // 0x414160\n    return result;\n}\n"
        },
        {
            "funcName": "function_414180",
            "funcStartAddr": "414180",
            "funcEndAddr": "4141bc",
            "decompiledFuncCode": "int64_t function_414180(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    char * v1 = (char *)(a1 + 56);\n    char v2 = *v1 & -7;\n    if (a3 == 0) {\n        // 0x4141a0\n        *v1 = v2;\n        *(int64_t *)a2 = 0;\n        *(int64_t *)(a2 + 16) = 0;\n        *(int64_t *)(a2 + 8) = 0;\n        int64_t result; // 0x414180\n        return result;\n    }\n    unsigned char result2 = v2 | 2;\n    *v1 = result2;\n    *(int64_t *)a2 = a3;\n    *(int64_t *)(a2 + 8) = a4;\n    *(int64_t *)(a2 + 16) = a5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4141c0",
            "funcStartAddr": "4141c0",
            "funcEndAddr": "41421d",
            "decompiledFuncCode": "int64_t function_4141c0(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x4141c7\n    int64_t v2; // 0x4141c0\n    int64_t result = function_414900(a1, v2); // 0x4141d8\n    if ((v2 & 32) != 0) {\n        // 0x414200\n        if ((int32_t)result == 0) {\n            // 0x414204\n            *__errno_location() = 0;\n        }\n        // 0x4141fa\n        return 0xffffffff;\n    }\n    // 0x4141e1\n    if ((int32_t)result == 0) {\n        // 0x4141fa\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4141e8\n    if (v1 == 0) {\n        // 0x4141ea\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4141fa\n    return result2;\n}\n"
        },
        {
            "funcName": "function_414220",
            "funcStartAddr": "414220",
            "funcEndAddr": "41427b",
            "decompiledFuncCode": "int64_t function_414220(int64_t a1, int64_t a2) {\n    // 0x414220\n    int64_t v1; // 0x414220\n    char v2 = v1;\n    int64_t v3 = a1; // 0x414229\n    int64_t v4 = a1; // 0x414229\n    char v5 = v2; // 0x414229\n    if (v2 == 47) {\n        v3++;\n        char v6 = *(char *)v3; // 0x414234\n        v4 = v3;\n        v5 = v6;\n        while (v6 == 47) {\n            // 0x414230\n            v3++;\n            v6 = *(char *)v3;\n            v4 = v3;\n            v5 = v6;\n        }\n    }\n    int64_t result = v4; // 0x41423e\n    if (v5 == 0) {\n      lab_0x41427a:\n        // 0x41427a\n        return result;\n    }\n    int64_t v7 = v4; // 0x414268\n    int64_t v8 = 0; // 0x414268\n    int64_t v9; // 0x414220\n    int64_t v10; // 0x41426a\n    char v11; // 0x41426e\n    if (v5 == 47) {\n        v10 = v4 + 1;\n        v11 = *(char *)v10;\n        result = v4;\n        if (v11 == 0) {\n            return result;\n        }\n        // 0x414265\n        v7 = v10;\n        v8 = 1;\n        v9 = v10;\n        while (v11 == 47) {\n            // 0x41426a\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v4;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x414265\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n        }\n    }\n    int64_t v12 = v8;\n    int64_t result2 = (char)v12 == 0 ? v4 : v7;\n    int64_t v13 = v7 + 1; // 0x41425a\n    char v14 = *(char *)v13; // 0x41425e\n    while (v14 != 0) {\n        int64_t v15 = result2;\n        v7 = v13;\n        v8 = (char)v12 == 0 ? v12 : 0;\n        v9 = v13;\n        if (v14 == 47) {\n            v10 = v9 + 1;\n            v11 = *(char *)v10;\n            result = v15;\n            if (v11 == 0) {\n                return result;\n            }\n            // 0x414265\n            v7 = v10;\n            v8 = 1;\n            v9 = v10;\n            while (v11 == 47) {\n                // 0x41426a\n                v10 = v9 + 1;\n                v11 = *(char *)v10;\n                result = v15;\n                if (v11 == 0) {\n                    return result;\n                }\n                // 0x414265\n                v7 = v10;\n                v8 = 1;\n                v9 = v10;\n            }\n        }\n        // 0x414250\n        v12 = v8;\n        result2 = (char)v12 == 0 ? v15 : v7;\n        v13 = v7 + 1;\n        v14 = *(char *)v13;\n    }\n    // 0x41427a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_414280",
            "funcStartAddr": "414280",
            "funcEndAddr": "4142ab",
            "decompiledFuncCode": "int64_t function_414280(int64_t str) {\n    int32_t len = strlen((char *)str); // 0x414284\n    int64_t result = len; // 0x414284\n    if (len < 2) {\n        // 0x41429a\n        return result;\n    }\n    int64_t v1 = result - 1;\n    int64_t result2 = result; // 0x414298\n    while (*(char *)(v1 + str) == 47) {\n        // 0x4142a0\n        result2 = v1;\n        if (v1 == 1) {\n            // break -> 0x41429a\n            break;\n        }\n        int64_t v2 = v1;\n        v1 = v2 - 1;\n        result2 = v2;\n    }\n    // 0x41429a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4142b0",
            "funcStartAddr": "4142b0",
            "funcEndAddr": "4142fe",
            "decompiledFuncCode": "int64_t function_4142b0(int64_t a1) {\n    uint32_t fd = (int32_t)a1; // 0x4142bc\n    if (fd >= 3) {\n        // 0x4142c1\n        return a1 & 0xffffffff;\n    }\n    // 0x4142d0\n    int64_t v1; // 0x4142b0\n    int64_t v2 = function_414300(a1, v1); // 0x4142d0\n    int32_t * v3 = __errno_location(); // 0x4142d8\n    close(fd);\n    return v2 & 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_414300",
            "funcStartAddr": "414300",
            "funcEndAddr": "41431a",
            "decompiledFuncCode": "int64_t function_414300(int64_t a1, int64_t a2) {\n    int32_t v1 = (int32_t)a2 & 0x80000; // 0x414300\n    int64_t v2; // 0x414300\n    return function_414980(a1, v1 != 0 ? 1030 : v1, 3, v2);\n}\n"
        },
        {
            "funcName": "function_414320",
            "funcStartAddr": "414320",
            "funcEndAddr": "41437e",
            "decompiledFuncCode": "int64_t function_414320(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x414326\n    if (locale == NULL) {\n        // 0x414353\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x414326\n    bool v2; // 0x414320\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g17; // 0x414320\n    int64_t v5 = v1; // 0x414320\n    int64_t v6 = 2; // 0x414345\n    unsigned char v7 = *(char *)v5; // 0x414345\n    char v8 = *(char *)v4; // 0x414345\n    char v9 = v8; // 0x414345\n    bool v10 = false; // 0x414345\n    while (v7 == v8) {\n        // 0x414338\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x414351\n    int64_t v13 = v1; // 0x414351\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x414353\n        return 0;\n    }\n    int64_t v14 = 6; // 0x414351\n    unsigned char v15 = *(char *)v13; // 0x41436d\n    char v16 = *(char *)v12; // 0x41436d\n    char v17 = v16; // 0x41436d\n    bool v18 = false; // 0x41436d\n    while (v15 == v16) {\n        // 0x414360\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_414380",
            "funcStartAddr": "414380",
            "funcEndAddr": "4148e2",
            "decompiledFuncCode": "int64_t function_414380(void) {\n    char * v1 = nl_langinfo(14); // 0x414396\n    char * v2 = g70; // 0x41439b\n    char * v3; // 0x414380\n    int64_t v4; // 0x414380\n    int64_t v5; // 0x414380\n    int64_t v6; // 0x414380\n    int64_t v7; // 0x414380\n    int32_t size; // 0x414380\n    int32_t size2; // 0x414380\n    int32_t len; // 0x414452\n    int64_t v8; // 0x414452\n    char * env_val; // 0x41443d\n    if (v2 == NULL) {\n        // 0x414438\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x4144a5;\n        } else {\n            // 0x41444a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x4144a5;\n            } else {\n                // 0x41444f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x41443d\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x4148d5\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x4144a5;\n                    } else {\n                        // 0x414849\n                        size2 = len + 14;\n                        goto lab_0x41446b;\n                    }\n                } else {\n                    goto lab_0x41446b;\n                }\n            }\n        }\n    } else {\n        // 0x414380\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x4143ba;\n    }\n  lab_0x4146ec:;\n    // 0x4146ec\n    struct _IO_FILE * stream; // 0x41452b\n    int32_t v10 = __uflow(stream); // 0x4146ef\n    int64_t v11; // 0x414380\n    int64_t v12 = v11; // 0x4146f9\n    int64_t v13; // 0x414380\n    int64_t v14 = v13; // 0x4146f9\n    int32_t v15 = v10; // 0x4146f9\n    int64_t v16; // 0x414380\n    int64_t v17 = v16; // 0x4146f9\n    int64_t v18 = v11; // 0x4146f9\n    int64_t v19 = v13; // 0x4146f9\n    int64_t v20 = v16; // 0x4146f9\n    if (v10 == -1) {\n        // break -> 0x4146ff\n        goto lab_0x4146ff;\n    }\n    goto lab_0x414579;\n  lab_0x41456e:;\n    // 0x41456e\n    int64_t v90; // 0x414380\n    int64_t * v32; // 0x414560\n    *v32 = v90 + 1;\n    int64_t v89; // 0x414380\n    v12 = v89;\n    int64_t v91; // 0x414380\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x414380\n    v17 = v92;\n    goto lab_0x414579;\n  lab_0x414579:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x414380\n    int32_t v25; // bp-120, 0x414380\n    int32_t v26; // bp-184, 0x414380\n    int64_t v27; // 0x41452b\n    int64_t v28; // 0x414548\n    int64_t v29; // 0x41454d\n    int64_t * v30; // 0x414564\n    switch (c) {\n        case 32: {\n            goto lab_0x414560;\n        }\n        case 10: {\n            goto lab_0x414560;\n        }\n        case 9: {\n            goto lab_0x414560;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x414751\n            int32_t v33; // 0x414380\n            char v34; // 0x414380\n            int32_t v35; // 0x41475e\n            if (v31 < *v30) {\n                // 0x414730\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x41475b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x414751\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x414730\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x41475b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x414740\n                v36 = v33;\n            }\n            // 0x41482f\n            if (v36 == -1) {\n                // break -> 0x4146ff\n                break;\n            }\n            goto lab_0x414560;\n        }\n        default: {\n            // 0x41458f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4146ff\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x4145b8\n            int64_t v39 = v37 + 4; // 0x4145ba\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x4145c6\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x4145c8\n            while (v41 == 0) {\n                // 0x4145b8\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4145e6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4145f2\n            int64_t v45 = v43 + 4; // 0x4145f4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x414600\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x414602\n            while (v47 == 0) {\n                // 0x4145f2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4145ef\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x414618\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x414628\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x41462c\n            int64_t v52 = v51 + v48; // 0x414635\n            int64_t * mem; // 0x414380\n            int64_t v53; // 0x414380\n            int64_t v54; // 0x414380\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x41476b\n                int64_t v56 = v55 + 3; // 0x414777\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x414651\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x414660\n            if (mem == NULL) {\n                // 0x41488c\n                free((int64_t *)v21);\n                function_414900(v27, v53);\n                v24 = (int64_t)&g12;\n                goto lab_0x414504;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x414678\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x414682\n            uint32_t v62 = (int32_t)v59; // 0x414685\n            int64_t v63; // 0x414380\n            if (v62 >= 8) {\n                // 0x414794\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x4147ae\n                int64_t v66 = v61 - v65; // 0x4147b2\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x4147bd\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x4147ce\n                    int64_t v70 = v69 & 0xffffffff; // 0x4147ce\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x4147cb\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x41485f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x414697\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x41469b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x4146ab\n            int64_t v74 = v60 - 1; // 0x4146af\n            uint32_t v75 = (int32_t)v73; // 0x4146b4\n            int64_t v76; // 0x414380\n            if (v75 >= 8) {\n                // 0x4147e2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4147ec\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4147fc\n                int64_t v80 = v74 - v79; // 0x414800\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x41480b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x41481b\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x414819\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x414876\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x41487e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x4146c6\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x4146ca\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x4148c3\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x4146de\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x41456e;\n            } else {\n                goto lab_0x4146ec;\n            }\n        }\n    }\n  lab_0x414560:;\n    int64_t v93 = v23; // 0x414380\n    int64_t v94 = v22; // 0x414380\n    int64_t v95 = v21; // 0x414380\n    goto lab_0x414560_2;\n  lab_0x4144a5:;\n    int64_t * mem3 = malloc(size); // 0x4144a5\n    int64_t v97 = (int64_t)&g12; // 0x4144b0\n    int64_t v98; // 0x414380\n    int64_t path; // 0x414380\n    if (mem3 == NULL) {\n        goto lab_0x414482;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x4144a5\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x4144c6;\n    }\n  lab_0x4143ba:;\n    int64_t str = v1 == NULL ? (int64_t)&g12 : (int64_t)v1; // 0x4143ad\n    char v100 = *v3; // 0x4143ba\n    int64_t v101; // 0x414380\n    if (v100 == 0) {\n        // 0x414414\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x414380\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x414380\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x414400\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x414407;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x4143d0\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x4143dd\n        char v107 = *(char *)v106; // 0x4143e2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x414414\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4143eb\n    v104 = v103 + 1;\n  lab_0x414407:\n    // 0x414414\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x414482:;\n    char * v108 = (char *)v97;\n    g70 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x4143ba;\n  lab_0x4144c6:;\n    int64_t v109 = v98 + path; // 0x4144c6\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4144f2\n    v24 = (int64_t)&g12;\n    if (fd >= 0) {\n        // 0x414521\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x414852\n            close(fd);\n            v24 = (int64_t)&g12;\n        } else {\n            // 0x414545\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x414560_2:;\n                uint64_t v96 = *v32; // 0x414560\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4146ec;\n                } else {\n                    goto lab_0x41456e;\n                }\n            }\n          lab_0x4146ff:\n            // 0x4146ff\n            function_414900(v27, v19);\n            v24 = (int64_t)&g12;\n            if (v18 != 0) {\n                // 0x41471e\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x414504;\n  lab_0x41446b:;\n    int64_t * mem4 = malloc(size2); // 0x41446b\n    v97 = (int64_t)&g12;\n    if (mem4 != NULL) {\n        // 0x414511\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x4144c6;\n    } else {\n        goto lab_0x414482;\n    }\n  lab_0x414504:\n    // 0x414504\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x414482;\n}\n"
        },
        {
            "funcName": "function_4148f0",
            "funcStartAddr": "4148f0",
            "funcEndAddr": "4148fe",
            "decompiledFuncCode": "int64_t function_4148f0(int64_t a1, int64_t a2) {\n    // 0x4148f0\n    int64_t v1; // 0x4148f0\n    return function_414980(a1, 0, 3, v1);\n}\n"
        },
        {
            "funcName": "function_414900",
            "funcStartAddr": "414900",
            "funcEndAddr": "41497b",
            "decompiledFuncCode": "int64_t function_414900(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x414907\n    if (fileno(stream) < 0) {\n        // 0x414967\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x41491a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x41494b\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x414967\n            return fclose(stream);\n        }\n    }\n    // 0x41491c\n    if ((int32_t)function_414ac0(a1, v1) == 0) {\n        // 0x414967\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x414928\n    int32_t v3 = *v2; // 0x414930\n    int64_t result = fclose(stream); // 0x41493e\n    if (v3 != 0) {\n        // 0x414970\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x414940\n    return result;\n}\n"
        },
        {
            "funcName": "function_414980",
            "funcStartAddr": "414980",
            "funcEndAddr": "414ab5",
            "decompiledFuncCode": "int64_t function_414980(int64_t fd, int32_t cmd, int64_t a3, int64_t a4) {\n    if (cmd != 1030) {\n        // 0x414a60\n        return (uint32_t)fcntl((int32_t)fd, cmd);\n    }\n    int64_t v1 = a3 & 0xffffffff; // 0x4149bc\n    int64_t v2; // 0x414980\n    if (g71 < 0) {\n        int64_t v3 = function_414980(fd, 0, v1, a4); // 0x414a04\n        int64_t v4 = v3 & 0xffffffff; // 0x414a09\n        if ((int32_t)v3 < 0) {\n            // 0x4149f0\n            return v4 & 0xffffffff;\n        }\n        // 0x414a0f\n        v2 = v4;\n        if (g71 != -1) {\n            // 0x4149f0\n            return v4 & 0xffffffff;\n        }\n    } else {\n        uint32_t v5 = fcntl((int32_t)fd, cmd); // 0x4149d7\n        if (v5 >= 0 || *__errno_location() != 22) {\n            // 0x4149e6\n            g71 = 1;\n            // 0x4149f0\n            return (int64_t)v5 & 0xffffffff;\n        }\n        int64_t v6 = function_414980(fd & 0xffffffff, 0, v1, a4); // 0x414a97\n        int64_t v7 = v6 & 0xffffffff; // 0x414a9c\n        if ((int32_t)v6 < 0) {\n            // 0x4149f0\n            return v7 & 0xffffffff;\n        }\n        // 0x414aa6\n        g71 = -1;\n        v2 = v7;\n    }\n    int32_t fd2 = v2; // 0x414a1f\n    if (fcntl(fd2, F_GETFD) >= 0) {\n        // 0x414a2a\n        if (fcntl(fd2, F_SETFD) != -1) {\n            // 0x4149f0\n            return v2 & 0xffffffff;\n        }\n    }\n    int32_t * v8 = __errno_location(); // 0x414a42\n    close(fd2);\n    // 0x4149f0\n    return 0xffffffff;\n}\n"
        },
        {
            "funcName": "function_414ac0",
            "funcStartAddr": "414ac0",
            "funcEndAddr": "414b00",
            "decompiledFuncCode": "int64_t function_414ac0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x414ada\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x414ada\n        return fflush(stream);\n    }\n    // 0x414ae8\n    function_4055d0(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_414b00",
            "funcStartAddr": "414b00",
            "funcEndAddr": "414b5d",
            "decompiledFuncCode": "int64_t function_414b00(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x414b00\n    return function_401808();\n}\n"
        },
        {
            "funcName": "function_414b60",
            "funcStartAddr": "414b60",
            "funcEndAddr": "414b61",
            "decompiledFuncCode": "int64_t function_414b60(void) {\n    // 0x414b60\n    int64_t result; // 0x414b60\n    return result;\n}\n"
        },
        {
            "funcName": "function_414b70",
            "funcStartAddr": "414b70",
            "funcEndAddr": "414b88",
            "decompiledFuncCode": "int64_t function_414b70(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x414b70\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g22);\n}\n"
        },
        {
            "funcName": "function_414b88",
            "funcStartAddr": "414b88",
            "funcEndAddr": "414ba8",
            "decompiledFuncCode": "int64_t function_414b88(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g18; // 0x414b92\n    while (*(int64_t *)v1 != -1) {\n        // 0x414b93\n        v1 -= 8;\n    }\n    // 0x414ba4\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_tac.elf"
}