{
    "funcInfo": [
        {
            "funcName": "function_401450",
            "funcStartAddr": "401450",
            "funcEndAddr": "401455",
            "decompiledFuncCode": "int64_t function_401450(void) {\n    // 0x401450\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401455",
            "funcStartAddr": "401455",
            "funcEndAddr": "40145a",
            "decompiledFuncCode": "int64_t function_401455(void) {\n    // 0x401455\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40145a",
            "funcStartAddr": "40145a",
            "funcEndAddr": "40145f",
            "decompiledFuncCode": "int64_t function_40145a(void) {\n    // 0x40145a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40145f",
            "funcStartAddr": "40145f",
            "funcEndAddr": "401464",
            "decompiledFuncCode": "int64_t function_40145f(void) {\n    // 0x40145f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401464",
            "funcStartAddr": "401464",
            "funcEndAddr": "401469",
            "decompiledFuncCode": "int64_t function_401464(void) {\n    // 0x401464\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401469",
            "funcStartAddr": "401469",
            "funcEndAddr": "40146e",
            "decompiledFuncCode": "int64_t function_401469(void) {\n    // 0x401469\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401470",
            "funcStartAddr": "401470",
            "funcEndAddr": "4019b3",
            "decompiledFuncCode": "int64_t function_401470(int64_t a1, int64_t a2, int64_t a3) {\n    int32_t v1 = a1;\n    int64_t v2 = a2; // 0x401490\n    char * v3; // 0x401470\n    int64_t v4; // 0x401470\n    int64_t v5; // 0x401470\n    if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n        goto lab_0x401546;\n    } else {\n        if (v1 < 2) {\n            // 0x40167a\n            function_401f90(a2);\n            setlocale(LC_ALL, (char *)&g8);\n            bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n            textdomain(\"coreutils\");\n            function_404c40(0x401ef0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n            goto lab_0x4016b4;\n        } else {\n            int64_t * str = (int64_t *)(a2 + 8);\n            v2 = (int64_t)\"-n\";\n            if (strcmp((char *)*str, \"-n\") == 0) {\n                goto lab_0x401546;\n            } else {\n                // 0x4014b5\n                function_401f90((int64_t)\"-n\");\n                setlocale(LC_ALL, (char *)&g8);\n                bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n                textdomain(\"coreutils\");\n                function_404c40(0x401ef0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n                v3 = (char *)*str;\n                v5 = a1 + 0xffffffff & 0xffffffff;\n                v4 = 1;\n                goto lab_0x4014fc;\n            }\n        }\n    }\n  lab_0x401708:;\n    // 0x401708\n    int64_t v6; // 0x401470\n    int64_t v7 = v6; // 0x401708\n    int64_t v8 = v6 % 256; // 0x401708\n    int64_t v9; // 0x401470\n    int64_t v10 = v9; // 0x401708\n    goto lab_0x40170b;\n  lab_0x40170b:;\n    int64_t v11 = (int64_t)g23; // 0x40170b\n    int64_t * v12 = (int64_t *)(v11 + 40); // 0x401712\n    uint64_t v13 = *v12; // 0x401712\n    if (v13 >= *(int64_t *)(v11 + 48)) {\n        // 0x4018c0\n        __overflow(g23, (int32_t)v8);\n    } else {\n        // 0x401720\n        *v12 = v13 + 1;\n        *(char *)v13 = (char)v7;\n    }\n    char v14 = *(char *)v10; // 0x40172d\n    int64_t v15 = v10; // 0x401736\n    char v16 = v14; // 0x401736\n    if (v14 == 0) {\n        // break -> 0x4018d0\n        goto lab_0x4018d0;\n    }\n    goto lab_0x40173c;\n  lab_0x401847:;\n    // 0x401847\n    int64_t v24; // 0x401470\n    int64_t v34 = v24;\n    unsigned char v35 = *(char *)v34;\n    int64_t v36 = (int64_t)v35 + 0xffffffd0; // 0x401847\n    int64_t v23; // 0x401470\n    int64_t v37 = v23 + 0xffffffd0 & 0xffffffff; // 0x40184a\n    char v38 = v35; // 0x40184f\n    int64_t v39 = v37; // 0x40184f\n    int64_t v40 = v34; // 0x40184f\n    if ((char)v36 < 8) {\n        int64_t v41 = v34 + 1; // 0x401851\n        v38 = *(char *)v41;\n        v39 = v36 + 8 * v37 & 0xffffffff;\n        v40 = v41;\n    }\n    int64_t v42 = v40;\n    int64_t v43 = v39;\n    unsigned char v44 = v38; // 0x401858\n    v6 = v43;\n    v9 = v42;\n    if ((v44 & -8) == 48) {\n        // 0x401869\n        v6 = (int64_t)v44 + 0xffffffd0 + 8 * v43 & 0xffffffff;\n        v9 = v42 + 1;\n    }\n    goto lab_0x401708;\n  lab_0x40188e:;\n    int64_t v45 = (int64_t)g23; // 0x40188e\n    int64_t * v46 = (int64_t *)(v45 + 40); // 0x401899\n    uint64_t v47 = *v46; // 0x401899\n    int64_t v21; // 0x401741\n    int64_t v22; // 0x40174f\n    if (*(int64_t *)(v45 + 48) > v47) {\n        // 0x4018a7\n        *v46 = v47 + 1;\n        *(char *)v47 = 92;\n        v7 = v21;\n        v8 = v21;\n        v10 = v22;\n    } else {\n        // 0x40197f\n        __overflow(g23, 92);\n        v7 = v21;\n        v8 = v21;\n        v10 = v22;\n    }\n    goto lab_0x40170b;\n  lab_0x401663:;\n    // 0x401663\n    int64_t v48; // 0x401470\n    int64_t v49 = v48;\n    char v50; // 0x401470\n    char v51 = v50;\n    int64_t v52 = 1; // 0x40166a\n    int64_t v53 = v49; // 0x40166a\n    int64_t v54; // 0x401470\n    if (v51 == 101) {\n        goto lab_0x401657;\n    } else {\n        int64_t v55 = v54;\n        v52 = v55;\n        v53 = 0;\n        if (v51 != 110) {\n            // 0x401650\n            v52 = v51 == 69 ? 0 : v55 & 0xffffffff;\n            v53 = v49;\n            goto lab_0x401657;\n        } else {\n            goto lab_0x401657;\n        }\n    }\n  lab_0x4016e5:;\n    // 0x4016e5\n    int64_t v56; // 0x401470\n    if ((char)v56 == 0) {\n        // 0x4016d4\n        return 0;\n    }\n    goto lab_0x4016b4;\n  lab_0x401918:;\n    // 0x401918\n    int64_t v72; // 0x401470\n    int64_t v99 = v72 + 0xffffffff; // 0x401918\n    int64_t v73; // 0x401470\n    int64_t v60 = v73; // 0x4015de\n    int64_t v96; // 0x401470\n    int64_t v61 = v96; // 0x4015de\n    int64_t v97; // 0x401470\n    int64_t v62 = v97; // 0x4015de\n    int64_t v63 = v99 & 0xffffffff; // 0x4015de\n    v56 = v96;\n    if ((int32_t)v99 < 1) {\n        goto lab_0x4016e5;\n    }\n    goto lab_0x4015e4;\n  lab_0x401546:\n    // 0x401546\n    function_401f90(v2);\n    setlocale(LC_ALL, (char *)&g8);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    function_404c40(0x401ef0, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", a3);\n    int64_t v64; // 0x401470\n    if (v1 != 2) {\n        int64_t v100 = a1 + 0xffffffff; // 0x4019a0\n        v64 = v100 & 0xffffffff;\n        if ((int32_t)v100 < 1) {\n            goto lab_0x4016b4;\n        } else {\n            goto lab_0x4015e4_2;\n        }\n    } else {\n        char * str2 = (char *)*(int64_t *)(a2 + 8); // 0x401595\n        if (strcmp(str2, \"--help\") == 0) {\n            // 0x4019ac\n            function_401b20(0);\n            // UNREACHABLE\n        }\n        // 0x4015a2\n        v64 = 1;\n        if (strcmp(str2, \"--version\") == 0) {\n            // 0x40194c\n            function_404030((int64_t)g23, \"echo\", \"GNU coreutils\", (int64_t)g15, \"Brian Fox\", \"Chet Ramey\");\n            // 0x4016d4\n            return 0;\n        }\n        goto lab_0x4015e4_2;\n    }\n  lab_0x4016b4:;\n    int64_t v57 = (int64_t)g23; // 0x4016b4\n    int64_t * v58 = (int64_t *)(v57 + 40); // 0x4016bb\n    uint64_t v59 = *v58; // 0x4016bb\n    if (v59 >= *(int64_t *)(v57 + 48)) {\n        // 0x401991\n        __overflow(g23, 10);\n    } else {\n        // 0x4016c9\n        *v58 = v59 + 1;\n        *(char *)v59 = 10;\n    }\n  lab_0x4016d4:\n    // 0x4016d4\n    return 0;\n  lab_0x4015e4_2:\n    // 0x4015e4\n    v60 = a2;\n    v61 = 1;\n    v62 = 0;\n    v63 = v64;\n    int64_t v65; // 0x401470\n    int64_t v66; // 0x401470\n    int64_t v67; // 0x401470\n    int64_t v68; // 0x401470\n    int64_t v69; // 0x4015e4\n    char * v70; // 0x401470\n    char v71; // 0x4015e7\n    while (true) {\n      lab_0x4015e4:\n        // 0x4015e4\n        v72 = v63;\n        v65 = v62;\n        v66 = v61;\n        v67 = v60;\n        v73 = v67 + 8;\n        v69 = *(int64_t *)v73;\n        v70 = (char *)v69;\n        v71 = *v70;\n        if (v71 != 45) {\n            // break -> 0x4016ec\n            break;\n        }\n        int64_t v74 = v69 + 1; // 0x4015f0\n        char v75 = *(char *)v74; // 0x4015f0\n        if (v75 != 0 != v75 < 111) {\n            // break -> 0x4016ec\n            break;\n        }\n        unsigned char v76 = (v75 + 59) % 64;\n        if (v76 != 0 == (1 << (int64_t)v76) % 0x20100000002 == 0) {\n            // break -> 0x4016ec\n            break;\n        }\n        int64_t v77 = v69 + 2; // 0x40161f\n        while (true) {\n            int64_t v78 = v77;\n            char v79 = *(char *)v78; // 0x401647\n            v50 = v75;\n            v68 = v74;\n            v54 = v65;\n            v48 = v66;\n            if (v79 == 0) {\n                goto lab_0x401663;\n            }\n            if (v79 >= 111) {\n                // break (via goto) -> 0x4016ec\n                goto lab_0x4016ec_2;\n            }\n            unsigned char v80 = (v79 + 59) % 64;\n            v77 = v78 + 1;\n            if (v80 != 0 == (1 << (int64_t)v80) % 0x20100000002 == 0) {\n                // break (via goto) -> 0x4016ec\n                goto lab_0x4016ec_2;\n            }\n        }\n        goto lab_0x401918;\n    }\n  lab_0x4016ec_2:\n    // 0x4016ec\n    v3 = v70;\n    v5 = v72;\n    v4 = v66;\n    if ((char)v65 == 0) {\n        goto lab_0x4014fc;\n    } else {\n        char v81 = v71; // 0x4016f8\n        int64_t v82 = v69; // 0x4016f8\n        int64_t v83 = v73; // 0x4016f8\n        while (true) {\n            // 0x4016fd\n            v15 = v82;\n            v16 = v81;\n            if (v81 != 0) {\n                while (true) {\n                  lab_0x40173c:;\n                    int64_t v17 = v15;\n                    int64_t v18 = v16;\n                    int64_t v19 = v17 + 1;\n                    v6 = v18;\n                    v9 = v19;\n                    if (v16 != 92) {\n                        goto lab_0x401708;\n                    } else {\n                        unsigned char v20 = *(char *)v19; // 0x401741\n                        v7 = v18;\n                        v8 = 92;\n                        v10 = v19;\n                        if (v20 == 0) {\n                            goto lab_0x40170b;\n                        } else {\n                            // 0x40174b\n                            v21 = v20;\n                            v22 = v17 + 2;\n                            g36 = v20 - 48;\n                            v7 = v18;\n                            v8 = 92;\n                            v10 = v22;\n                            v23 = v21;\n                            v24 = v22;\n                            switch (v20) {\n                                case 48: {\n                                    unsigned char v25 = *(char *)v22; // 0x401876\n                                    v7 = 0;\n                                    v8 = 0;\n                                    v10 = v22;\n                                    if ((v25 & -8) == 48) {\n                                        // 0x401924\n                                        v23 = v25;\n                                        v24 = v17 + 3;\n                                        goto lab_0x401847;\n                                    } else {\n                                        goto lab_0x40170b;\n                                    }\n                                }\n                                case 49: {\n                                    goto lab_0x401847;\n                                }\n                                case 50: {\n                                    goto lab_0x401847;\n                                }\n                                case 51: {\n                                    goto lab_0x401847;\n                                }\n                                case 52: {\n                                    goto lab_0x401847;\n                                }\n                                case 53: {\n                                    goto lab_0x401847;\n                                }\n                                case 54: {\n                                    goto lab_0x401847;\n                                }\n                                case 55: {\n                                    goto lab_0x401847;\n                                }\n                                case 92: {\n                                    goto lab_0x40170b;\n                                }\n                                case 97: {\n                                    // 0x401834\n                                    v7 = 7;\n                                    v8 = 7;\n                                    v10 = v22;\n                                    goto lab_0x40170b;\n                                }\n                                case 98: {\n                                    // 0x401825\n                                    v7 = 8;\n                                    v8 = 8;\n                                    v10 = v22;\n                                    goto lab_0x40170b;\n                                }\n                                case 99: {\n                                    goto lab_0x4016d4;\n                                }\n                                case 101: {\n                                    // 0x401816\n                                    v7 = 27;\n                                    v8 = 27;\n                                    v10 = v22;\n                                    goto lab_0x40170b;\n                                }\n                                case 102: {\n                                    // 0x401807\n                                    v7 = 12;\n                                    v8 = 12;\n                                    v10 = v22;\n                                    goto lab_0x40170b;\n                                }\n                                case 110: {\n                                    // 0x4017f8\n                                    v7 = 10;\n                                    v8 = 10;\n                                    v10 = v22;\n                                    goto lab_0x40170b;\n                                }\n                                case 114: {\n                                    // 0x4017e9\n                                    v7 = 13;\n                                    v8 = 13;\n                                    v10 = v22;\n                                    goto lab_0x40170b;\n                                }\n                                case 116: {\n                                    // 0x4017da\n                                    v7 = 9;\n                                    v8 = 9;\n                                    v10 = v22;\n                                    goto lab_0x40170b;\n                                }\n                                case 118: {\n                                    // 0x4017cb\n                                    v7 = 11;\n                                    v8 = 11;\n                                    v10 = v22;\n                                    goto lab_0x40170b;\n                                }\n                                case 120: {\n                                    int16_t * v26 = *__ctype_b_loc(); // 0x401785\n                                    int64_t v27 = (int64_t)*(char *)v22; // 0x401788\n                                    int64_t v28 = (int64_t)v26 + 1; // 0x401790\n                                    if ((*(char *)(v28 + 2 * v27) & 16) == 0) {\n                                        goto lab_0x40188e;\n                                    } else {\n                                        uint64_t v29 = function_401aa0(v27); // 0x40179b\n                                        int64_t v30 = v17 + 3; // 0x4017a0\n                                        int64_t v31 = (int64_t)*(char *)v30; // 0x4017a0\n                                        int64_t v32 = v29 & 0xffffffff; // 0x4017a4\n                                        if ((*(char *)(2 * v31 + v28) & 16) == 0) {\n                                            // 0x401931\n                                            v7 = v32;\n                                            v8 = v29 % 256;\n                                            v10 = v30;\n                                        } else {\n                                            uint64_t v33 = function_401aa0(v31) + 16 * v32; // 0x4017c1\n                                            v7 = v33 & 0xffffffff;\n                                            v8 = v33 % 256;\n                                            v10 = v17 + 4;\n                                        }\n                                        goto lab_0x40170b;\n                                    }\n                                }\n                                default: {\n                                    goto lab_0x40188e;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n          lab_0x4018d0:\n            // 0x4018d0\n            v83 += 8;\n            v56 = v66;\n            if (v83 == v67 + 16 + (8 * v72 + 0x7fffffff8 & 0x7fffffff8)) {\n                // break -> 0x4016e5\n                break;\n            }\n            int64_t v84 = (int64_t)g23; // 0x4018dd\n            int64_t * v85 = (int64_t *)(v84 + 40); // 0x4018e4\n            uint64_t v86 = *v85; // 0x4018e4\n            if (v86 >= *(int64_t *)(v84 + 48)) {\n                // 0x40193d\n                __overflow(g23, 32);\n            } else {\n                // 0x4018ee\n                *v85 = v86 + 1;\n                *(char *)v86 = 32;\n            }\n            // 0x4016fd\n            v82 = *(int64_t *)v83;\n            v81 = *(char *)v82;\n        }\n        goto lab_0x4016e5;\n    }\n  lab_0x4014fc:\n    // 0x4014fc\n    fputs_unlocked(v3, g23);\n    v56 = v4;\n    if ((8 * v5 + 0x7fffffff8 & 0x7fffffff8) != 0) {\n        int64_t v87 = (int64_t)g23; // 0x401520\n        int64_t * v88 = (int64_t *)(v87 + 40); // 0x401527\n        uint64_t v89 = *v88; // 0x401527\n        if (v89 >= *(int64_t *)(v87 + 48)) {\n            // 0x401909\n            struct _IO_FILE * v90; // 0x401520\n            __overflow(v90, 32);\n        } else {\n            // 0x401535\n            *v88 = v89 + 1;\n            *(char *)v89 = 32;\n        }\n        // 0x401540\n        int64_t v91; // 0x401470\n        int64_t v92 = v91 + 8; // 0x401540\n        fputs_unlocked((char *)*(int64_t *)v92, g23);\n        int64_t v93; // 0x401470\n        v56 = v93;\n        int64_t v94; // 0x4014ff\n        while (v94 != v92) {\n            // 0x401520\n            v87 = (int64_t)g23;\n            v88 = (int64_t *)(v87 + 40);\n            v89 = *v88;\n            if (v89 >= *(int64_t *)(v87 + 48)) {\n                // 0x401909\n                __overflow(g23, 32);\n            } else {\n                // 0x401535\n                *v88 = v89 + 1;\n                *(char *)v89 = 32;\n            }\n            // 0x401540\n            v92 += 8;\n            fputs_unlocked((char *)*(int64_t *)v92, g23);\n            v56 = v93;\n        }\n    }\n    goto lab_0x4016e5;\n  lab_0x401657:;\n    int64_t v95 = v68 + 1; // 0x401663\n    v96 = v53;\n    v97 = v52;\n    char v98 = *(char *)v95; // 0x401657\n    v50 = v98;\n    v68 = v95;\n    v54 = v97;\n    v48 = v96;\n    if (v98 == 0) {\n        goto lab_0x401918;\n    } else {\n        goto lab_0x401663;\n    }\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "4019c0",
            "funcEndAddr": "4019eb",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x4019c0\n    int64_t v1; // 0x4019c0\n    __libc_start_main(0x401470, (int32_t)a4, (char **)&v1, (void (*)())0x404bd0, (void (*)())0x404c30, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4019eb",
            "funcStartAddr": "4019eb",
            "funcEndAddr": "401a0a",
            "decompiledFuncCode": "int64_t function_4019eb(void) {\n    // 0x4019eb\n    return 0x608218;\n}\n"
        },
        {
            "funcName": "function_401a0a",
            "funcStartAddr": "401a0a",
            "funcEndAddr": "401a41",
            "decompiledFuncCode": "int64_t function_401a0a(void) {\n    // 0x401a0a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401a41",
            "funcStartAddr": "401a41",
            "funcEndAddr": "401a98",
            "decompiledFuncCode": "int64_t function_401a41(void) {\n    // 0x401a41\n    if (g26 != 0) {\n        // 0x401a97\n        int64_t result; // 0x401a41\n        return result;\n    }\n    int64_t v1 = g27; // 0x401a74\n    int64_t result2; // 0x401a86\n    if (g27 >= ((int64_t)&g12 - (int64_t)&g11 >> 3) - 1) {\n        // 0x401a86\n        result2 = function_4019eb();\n        g26 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g12 - (int64_t)&g11 >> 3) - 1) {\n        // 0x401a76\n        v1++;\n    }\n    // 0x401a6a\n    g27 = v1;\n    // 0x401a86\n    result2 = function_4019eb();\n    g26 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_401a98",
            "funcStartAddr": "401a98",
            "funcEndAddr": "401a9d",
            "decompiledFuncCode": "int64_t function_401a98(void) {\n    // 0x401a98\n    return function_401a0a();\n}\n"
        },
        {
            "funcName": "function_401aa0",
            "funcStartAddr": "401aa0",
            "funcEndAddr": "401b18",
            "decompiledFuncCode": "int64_t function_401aa0(uint64_t a1) {\n    uint64_t v1 = a1 + 0xffffffbf; // 0x401aa0\n    g37 = v1 % 256;\n    int64_t result = 10; // 0x401aaa\n    switch ((char)v1) {\n        case 1: {\n        }\n        case 33: {\n            // 0x401b00\n            result = 11;\n        }\n        case 0: {\n        }\n        case 32: {\n            // 0x401ab8\n            return result;\n        }\n        case 2: {\n        }\n        case 34: {\n            // 0x401ac0\n            result = 12;\n            return result;\n        }\n        case 3: {\n        }\n        case 35: {\n            // 0x401ad0\n            result = 13;\n            return result;\n        }\n        case 4: {\n        }\n        case 36: {\n            // 0x401ae0\n            result = 14;\n            return result;\n        }\n        case 5: {\n        }\n        case 37: {\n            // 0x401af0\n            result = 15;\n            return result;\n        }\n        default: {\n            // 0x401b10\n            return a1 % 256 + 0xffffffd0 & 0xffffffff;\n        }\n    }\n}\n"
        },
        {
            "funcName": "function_401b20",
            "funcStartAddr": "401b20",
            "funcEndAddr": "401ec5",
            "decompiledFuncCode": "int64_t function_401b20(int32_t status) {\n    // 0x401b20\n    if (status != 0) {\n        // 0x401b3a\n        __fprintf_chk(g25, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401b5f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401b66\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [SHORT-OPTION]... [STRING]...\\n  or:  %s LONG-OPTION\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Echo the STRING(s) to standard output.\\n\\n  -n             do not output the trailing newline\\n\", 5), g23);\n    fputs_unlocked(dcgettext(NULL, \"  -e             enable interpretation of backslash escapes\\n  -E             disable interpretation of backslash escapes (default)\\n\", 5), g23);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g23);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g23);\n    fputs_unlocked(dcgettext(NULL, \"\\nIf -e is in effect, the following sequences are recognized:\\n\\n\", 5), g23);\n    fputs_unlocked(dcgettext(NULL, \"  \\\\\\\\      backslash\\n  \\\\a      alert (BEL)\\n  \\\\b      backspace\\n  \\\\c      produce no further output\\n  \\\\e      escape\\n  \\\\f      form feed\\n  \\\\n      new line\\n  \\\\r      carriage return\\n  \\\\t      horizontal tab\\n  \\\\v      vertical tab\\n\", 5), g23);\n    fputs_unlocked(dcgettext(NULL, \"  \\\\0NNN   byte with octal value NNN (1 to 3 digits)\\n  \\\\xHH    byte with hexadecimal value HH (1 to 2 digits)\\n\", 5), g23);\n    __printf_chk(1, dcgettext(NULL, \"\\nNOTE: your shell may have its own version of %s, which usually supersedes\\nthe version described here.  Please refer to your shell's documentation\\nfor details about the options it supports.\\n\", 5));\n    int64_t v1 = &g1; // bp-136, 0x401ca1\n    bool v2; // 0x401b20\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x401d28\n    int64_t v6 = *(int64_t *)v5; // 0x401d2c\n    int64_t v7 = 5; // 0x401d32\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"echo\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x401d3e\n        char v11 = *(char *)v9; // 0x401d3e\n        char v12 = v11; // 0x401d3e\n        bool v13 = false; // 0x401d3e\n        while (v10 == v11) {\n            // 0x401d34\n            v7--;\n            int64_t v14 = v9 + v3; // 0x401d3e\n            int64_t v15 = v8 + v3; // 0x401d3e\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x401d4a\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 5;\n    }\n    // 0x401d4a\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x401e5c;\n        } else {\n            // 0x401e46\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401e9b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401dac;\n            } else {\n                goto lab_0x401e5c;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x401dac;\n        } else {\n            // 0x401d92\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401e9b\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401dac;\n            } else {\n                goto lab_0x401dac;\n            }\n        }\n    }\n  lab_0x401e5c:\n    // 0x401e5c\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401dec\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401b5f\n    exit(status);\n    // UNREACHABLE\n  lab_0x401dac:\n    // 0x401dac\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401dec\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401b5f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401ed0",
            "funcStartAddr": "401ed0",
            "funcEndAddr": "401ed8",
            "decompiledFuncCode": "int64_t function_401ed0(int64_t a1) {\n    // 0x401ed0\n    g29 = a1;\n    int64_t result; // 0x401ed0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401ee0",
            "funcStartAddr": "401ee0",
            "funcEndAddr": "401ee8",
            "decompiledFuncCode": "int64_t function_401ee0(int64_t a1) {\n    // 0x401ee0\n    g28 = a1;\n    int64_t result; // 0x401ee0\n    return result;\n}\n"
        },
        {
            "funcName": "function_401ef0",
            "funcStartAddr": "401ef0",
            "funcEndAddr": "401f8e",
            "decompiledFuncCode": "int64_t function_401ef0(void) {\n    // 0x401ef0\n    int32_t * err_num; // 0x401f06\n    if ((int32_t)function_404480((int64_t)g23) == 0) {\n        goto lab_0x401f1c;\n    } else {\n        // 0x401f06\n        err_num = __errno_location();\n        if (g28 == 0) {\n            goto lab_0x401f33;\n        } else {\n            // 0x401f17\n            if (*err_num != 32) {\n                goto lab_0x401f33;\n            } else {\n                goto lab_0x401f1c;\n            }\n        }\n    }\n  lab_0x401f1c:;\n    int64_t result = function_404480((int64_t)g25); // 0x401f23\n    if ((int32_t)result == 0) {\n        // 0x401f2c\n        return result;\n    }\n    // 0x401f6e\n    _exit(g16);\n    // UNREACHABLE\n  lab_0x401f33:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x401f3f\n    if (g29 == 0) {\n        // 0x401f79\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x401f53\n        error(0, *err_num, \"%s: %s\", (char *)function_403a00((int64_t)g29), v1);\n    }\n    // 0x401f6e\n    _exit(g16);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401f90",
            "funcStartAddr": "401f90",
            "funcEndAddr": "402029",
            "decompiledFuncCode": "int64_t function_401f90(int64_t str) {\n    // 0x401f90\n    if (str == 0) {\n        // 0x402009\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g25);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x401f9e\n    int64_t result = (int64_t)found_char_pos; // 0x401f9e\n    if (found_char_pos == NULL) {\n        // 0x401ff9\n        g30 = str;\n        g24 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x401fa8\n    if (v1 - str < 7) {\n        // 0x401ff9\n        g30 = str;\n        g24 = str;\n        return result;\n    }\n    // 0x401fb8\n    bool v2; // 0x401f90\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x401f90\n    int64_t v5 = result - 6; // 0x401f90\n    int64_t v6 = 7; // 0x401fc6\n    unsigned char v7 = *(char *)v5; // 0x401fc6\n    char v8 = *(char *)v4; // 0x401fc6\n    char v9 = v8; // 0x401fc6\n    bool v10 = false; // 0x401fc6\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x401fd0\n    int64_t v13 = v1; // 0x401fd0\n    int64_t v14 = 3; // 0x401fd0\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x401ff9\n        g30 = str;\n        g24 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x401fe2\n    char v16 = *(char *)v12; // 0x401fe2\n    char v17 = v16; // 0x401fe2\n    bool v18 = false; // 0x401fe2\n    while (v15 == v16) {\n        // 0x401fd2\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x401fec\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x401fee\n        v20 = result + 4;\n        g22 = v20;\n    }\n    // 0x401ff9\n    g30 = v20;\n    g24 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_402030",
            "funcStartAddr": "402030",
            "funcEndAddr": "402122",
            "decompiledFuncCode": "int64_t function_402030(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402044\n    int64_t result = (int64_t)v1; // 0x402044\n    if (result != a1) {\n        // 0x402051\n        return result;\n    }\n    int64_t v2 = function_404540(); // 0x402060\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x402116\n    if (v3 == 85) {\n        // 0x402070\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x402108\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g7 : (int64_t)&g2;\n            return result2;\n        }\n        char v4 = *v1; // 0x40209e\n        int64_t result3 = v4 != 96 ? (int64_t)&g3 : (int64_t)&g6; // 0x4020ab\n        // 0x402051\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x402108\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g7 : (int64_t)&g2;\n        return result2;\n    }\n    char v5 = *v1; // 0x4020ed\n    int64_t result4 = v5 != 96 ? (int64_t)&g4 : (int64_t)&g5; // 0x4020fa\n    // 0x402051\n    return result4;\n}\n"
        },
        {
            "funcName": "function_402130",
            "funcStartAddr": "402130",
            "funcEndAddr": "402187",
            "decompiledFuncCode": "int64_t function_402130(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x402130\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402178\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402187",
            "funcStartAddr": "402187",
            "funcEndAddr": "403351",
            "decompiledFuncCode": "int64_t function_402187(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = 0; // 0x4021d1\n    int64_t v2 = 0; // 0x4021d1\n    int64_t v3; // 0x402187\n    int64_t v4; // 0x402187\n    int64_t v5; // 0x402187\n    int64_t v6; // 0x402187\n    int64_t v7; // 0x402187\n    int64_t v8; // 0x402187\n    int64_t v9; // 0x402187\n    int64_t v10; // 0x402187\n    int64_t v11; // 0x402187\n    int64_t v12; // 0x402187\n    int64_t v13; // 0x402187\n    int64_t v14; // 0x402187\n    int64_t v15; // 0x402187\n    int64_t v16; // 0x402187\n    int64_t v17; // 0x402187\n    int64_t v18; // 0x402187\n    int64_t v19; // 0x402187\n    int64_t result; // 0x402187\n    int64_t v20; // 0x402187\n    int64_t v21; // 0x402187\n    int64_t ps; // bp+136, 0x402187\n    char v22; // 0x402740\n    int64_t v23; // 0x402740\n    int32_t wc; // 0x402187\n    int64_t v24; // 0x402187\n    while (true) {\n      lab_0x4021d8_2:\n        // 0x4021d8\n        v11 = v10;\n        v7 = v6;\n        v14 = v13;\n        result = v1;\n        int64_t v25 = v2; // 0x402187\n        int64_t v26; // 0x40220c\n        while (true) {\n          lab_0x4021d8:\n            // 0x4021d8\n            v4 = v25;\n            bool v27 = v14 == v4; // 0x4021e3\n            if (v14 == -1) {\n                // 0x4021e5\n                v27 = *(char *)(v4 + str) == 0;\n            }\n            // 0x4021f3\n            if (v27) {\n                // break (via goto) -> 0x402958\n                goto lab_0x402958;\n            }\n            // 0x4021fc\n            v26 = v4 + str;\n            v22 = *(char *)v26;\n            v23 = v22;\n            g38 = v23;\n            v17 = v14;\n            v8 = v7;\n            v12 = v11;\n            v3 = v14;\n            v5 = v7;\n            v9 = v11;\n            switch (v22) {\n                case 0: {\n                    // 0x4027eb\n                    if (wc % 2 == 0) {\n                        goto lab_0x402331;\n                    }\n                    // 0x402c0d\n                    v25 = v4 + 1;\n                    goto lab_0x4021d8;\n                }\n                case 7: {\n                    goto lab_0x402331;\n                }\n                case 8: {\n                    goto lab_0x402331;\n                }\n                case 9: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 10: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 11: {\n                    goto lab_0x402331;\n                }\n                case 12: {\n                    goto lab_0x402331;\n                }\n                case 13: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 32: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 33: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 34: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 35: {\n                    goto lab_0x4022fd;\n                }\n                case 36: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 37: {\n                    goto lab_0x402331;\n                }\n                case 38: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 39: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 40: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 41: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 42: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 43: {\n                    goto lab_0x402331;\n                }\n                case 44: {\n                    goto lab_0x402331;\n                }\n                case 45: {\n                    goto lab_0x402331;\n                }\n                case 46: {\n                    goto lab_0x402331;\n                }\n                case 47: {\n                    goto lab_0x402331;\n                }\n                case 48: {\n                    goto lab_0x402331;\n                }\n                case 49: {\n                    goto lab_0x402331;\n                }\n                case 50: {\n                    goto lab_0x402331;\n                }\n                case 51: {\n                    goto lab_0x402331;\n                }\n                case 52: {\n                    goto lab_0x402331;\n                }\n                case 53: {\n                    goto lab_0x402331;\n                }\n                case 54: {\n                    goto lab_0x402331;\n                }\n                case 55: {\n                    goto lab_0x402331;\n                }\n                case 56: {\n                    goto lab_0x402331;\n                }\n                case 57: {\n                    goto lab_0x402331;\n                }\n                case 58: {\n                    goto lab_0x402331;\n                }\n                case 59: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 60: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 61: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 62: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 63: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 65: {\n                    goto lab_0x402331;\n                }\n                case 66: {\n                    goto lab_0x402331;\n                }\n                case 67: {\n                    goto lab_0x402331;\n                }\n                case 68: {\n                    goto lab_0x402331;\n                }\n                case 69: {\n                    goto lab_0x402331;\n                }\n                case 70: {\n                    goto lab_0x402331;\n                }\n                case 71: {\n                    goto lab_0x402331;\n                }\n                case 72: {\n                    goto lab_0x402331;\n                }\n                case 73: {\n                    goto lab_0x402331;\n                }\n                case 74: {\n                    goto lab_0x402331;\n                }\n                case 75: {\n                    goto lab_0x402331;\n                }\n                case 76: {\n                    goto lab_0x402331;\n                }\n                case 77: {\n                    goto lab_0x402331;\n                }\n                case 78: {\n                    goto lab_0x402331;\n                }\n                case 79: {\n                    goto lab_0x402331;\n                }\n                case 80: {\n                    goto lab_0x402331;\n                }\n                case 81: {\n                    goto lab_0x402331;\n                }\n                case 82: {\n                    goto lab_0x402331;\n                }\n                case 83: {\n                    goto lab_0x402331;\n                }\n                case 84: {\n                    goto lab_0x402331;\n                }\n                case 85: {\n                    goto lab_0x402331;\n                }\n                case 86: {\n                    goto lab_0x402331;\n                }\n                case 87: {\n                    goto lab_0x402331;\n                }\n                case 88: {\n                    goto lab_0x402331;\n                }\n                case 89: {\n                    goto lab_0x402331;\n                }\n                case 90: {\n                    goto lab_0x402331;\n                }\n                case 91: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 92: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 93: {\n                    goto lab_0x402331;\n                }\n                case 94: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 95: {\n                    goto lab_0x402331;\n                }\n                case 96: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 97: {\n                    goto lab_0x402331;\n                }\n                case 98: {\n                    goto lab_0x402331;\n                }\n                case 99: {\n                    goto lab_0x402331;\n                }\n                case 100: {\n                    goto lab_0x402331;\n                }\n                case 101: {\n                    goto lab_0x402331;\n                }\n                case 102: {\n                    goto lab_0x402331;\n                }\n                case 103: {\n                    goto lab_0x402331;\n                }\n                case 104: {\n                    goto lab_0x402331;\n                }\n                case 105: {\n                    goto lab_0x402331;\n                }\n                case 106: {\n                    goto lab_0x402331;\n                }\n                case 107: {\n                    goto lab_0x402331;\n                }\n                case 108: {\n                    goto lab_0x402331;\n                }\n                case 109: {\n                    goto lab_0x402331;\n                }\n                case 110: {\n                    goto lab_0x402331;\n                }\n                case 111: {\n                    goto lab_0x402331;\n                }\n                case 112: {\n                    goto lab_0x402331;\n                }\n                case 113: {\n                    goto lab_0x402331;\n                }\n                case 114: {\n                    goto lab_0x402331;\n                }\n                case 115: {\n                    goto lab_0x402331;\n                }\n                case 116: {\n                    goto lab_0x402331;\n                }\n                case 117: {\n                    goto lab_0x402331;\n                }\n                case 118: {\n                    goto lab_0x402331;\n                }\n                case 119: {\n                    goto lab_0x402331;\n                }\n                case 120: {\n                    goto lab_0x402331;\n                }\n                case 121: {\n                    goto lab_0x402331;\n                }\n                case 122: {\n                    goto lab_0x402331;\n                }\n                case 123: {\n                    goto lab_0x4022d5;\n                }\n                case 124: {\n                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                }\n                case 125: {\n                    goto lab_0x4022d5;\n                }\n                case 126: {\n                    goto lab_0x4022fd;\n                }\n                default: {\n                    goto lab_0x4026d5;\n                }\n            }\n        }\n      lab_0x4026d5:\n        if (v24 != 1) {\n            // 0x402a40\n            ps = 0;\n            int64_t len = v14; // 0x402a50\n            if (v14 == -1) {\n                // 0x402a52\n                len = strlen((char *)str);\n            }\n            int64_t v28 = len;\n            v18 = 0;\n            while (true) {\n              lab_0x402adf:\n                // 0x402adf\n                v19 = v18;\n                uint64_t v29 = v19 + v4; // 0x402ae4\n                v20 = 0;\n                switch (str) {\n                    case 0: {\n                        goto lab_0x403029_2;\n                    }\n                    case -1: {\n                        // 0x403109\n                        v15 = 0x100000000 * v28 >> 32;\n                        goto lab_0x40305a_2;\n                    }\n                    case -2: {\n                        int64_t v30 = 0x100000000 * v28 >> 32; // 0x40313d\n                        v15 = v30;\n                        if (v29 >= v30) {\n                            goto lab_0x40305a_2;\n                        } else {\n                            // 0x403177\n                            v15 = v30;\n                            if (*(char *)(v29 - 2) != 0) {\n                                int64_t v31 = 1; // 0x403187\n                                v21 = v31;\n                                v16 = v30;\n                                while (v31 + v4 < v30) {\n                                    // 0x403180\n                                    v21 = v31;\n                                    v16 = v30;\n                                    int64_t v32 = v31; // 0x403185\n                                    if (*(char *)(v31 + v26) == 0) {\n                                        // break -> 0x40305a\n                                        break;\n                                    }\n                                    v31 = v32 + 1;\n                                    v21 = v31;\n                                    v16 = v30;\n                                }\n                                goto lab_0x40305a;\n                            } else {\n                                goto lab_0x40305a_2;\n                            }\n                        }\n                    }\n                    case 1: {\n                        goto lab_0x402ab0;\n                    }\n                    default: {\n                        int64_t v33; // 0x402187\n                        char v34; // 0x402b6d\n                        unsigned char v35; // 0x402187\n                        if (*(char *)v33 < 125) {\n                            // 0x402b78\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x402b8f\n                                v3 = 0x100000000 * v28 >> 32;\n                                v5 = 0x100000000 * v7 >> 32;\n                                v9 = 0x100000000 * v11 >> 32;\n                                return function_402130(v9, v5, str, v3, 2, wc & -3);\n                            }\n                        }\n                        int64_t v36 = v33 + 1; // 0x402b60\n                        v33 = v36;\n                        // 0x402b4c\n                        int64_t v37; // 0x402b59\n                        while (v37 != v36) {\n                            // 0x402b6d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x402b78\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x402b8f\n                                    v3 = 0x100000000 * v28 >> 32;\n                                    v5 = 0x100000000 * v7 >> 32;\n                                    v9 = 0x100000000 * v11 >> 32;\n                                    return function_402130(v9, v5, str, v3, 2, wc & -3);\n                                }\n                            }\n                            // 0x402b60\n                            v36 = v33 + 1;\n                            v33 = v36;\n                        }\n                        goto lab_0x402ab0;\n                    }\n                }\n            }\n          lab_0x403029_2:\n            // 0x403029\n            v21 = v20;\n            v16 = 0x100000000 * v28 >> 32;\n            goto lab_0x40305a;\n        } else {\n            // 0x402724\n            __ctype_b_loc();\n            v17 = 0x100000000000000 * v14 >> 56;\n            v8 = v7;\n            v12 = v11;\n            goto lab_0x402331;\n        }\n    }\n  lab_0x402958:\n    // 0x402958\n    v3 = v14;\n    v5 = v7;\n    v9 = v11;\n    if (result != 0) {\n        // 0x40325a\n        if (v7 > result) {\n            // 0x403263\n            *(char *)(v11 + result) = 0;\n        }\n        // 0x402587\n        return result;\n    }\n    return function_402130(v9, v5, str, v3, 2, wc & -3);\n  lab_0x402331:;\n    int64_t v38 = v12;\n    int64_t v39 = v8;\n    int64_t v40 = v17;\n    if (v24 != 0) {\n        // 0x402340\n        v3 = v40;\n        v5 = v39;\n        v9 = v38;\n        if ((*(int32_t *)((v23 / 8 & 28) + v24) & 1 << (int32_t)(v22 % 32)) != 0) {\n            goto lab_0x40254a_2;\n        }\n    }\n    int64_t v41 = result; // 0x402441\n    char v42 = v22; // 0x402441\n    int64_t v43 = v40; // 0x402441\n    v2 = v4 + 1;\n    int64_t v44 = v39; // 0x402441\n    int64_t v45 = v38; // 0x402441\n    goto lab_0x4023bd;\n  lab_0x40254a_2:\n    // 0x402587\n    return function_402130(v9, v5, str, v3, 2, wc & -3);\n  lab_0x402ab0:\n    // 0x402ab0\n    iswprint(wc);\n    int64_t v48 = v19 + str; // 0x402acf\n    int32_t v49 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402ad2\n    v18 = v48;\n    v20 = v48;\n    if (v49 != 0) {\n        // break -> 0x403029\n        goto lab_0x403029_2;\n    }\n    goto lab_0x402adf;\n  lab_0x4022fd:\n    // 0x4022fd\n    v17 = v14;\n    v8 = v7;\n    v12 = v11;\n    v3 = v14;\n    v5 = v7;\n    v9 = v11;\n    if (v4 == 0) {\n        goto lab_0x40254a_2;\n    }\n    goto lab_0x402331;\n  lab_0x4022d5:;\n    bool v50 = v14 == 1; // 0x4022e0\n    if (v14 == -1) {\n        // 0x4022e2\n        v50 = *(char *)(str + 1) == 0;\n    }\n    // 0x4022ee\n    v17 = v14;\n    v8 = v7;\n    v12 = v11;\n    if (!v50) {\n        goto lab_0x402331;\n    } else {\n        goto lab_0x4022fd;\n    }\n  lab_0x40305a:;\n    int64_t v51 = v16;\n    uint64_t v52 = v21;\n    int64_t v53 = 0x100000000 * v7 >> 32;\n    int64_t v54 = 0x100000000 * v11 >> 32;\n    v17 = v51;\n    v8 = v53;\n    v12 = v54;\n    if (v52 < 2) {\n        goto lab_0x402331;\n    } else {\n        uint64_t v55 = v52 + v4; // 0x402c2e\n        int64_t v56 = v4 + 1; // 0x402d11\n        v41 = result;\n        v42 = v22;\n        v43 = v51;\n        v2 = v56;\n        v44 = v53;\n        v45 = v54;\n        int64_t v57 = v56; // 0x402d18\n        char v58 = v22; // 0x402d18\n        int64_t v59 = result; // 0x402d18\n        if (v56 < v55) {\n            uint64_t v60 = v59;\n            if (v53 > v60) {\n                // 0x402ce1\n                *(char *)(v60 + v54) = v58;\n            }\n            char v61 = *(char *)(v57 + str); // 0x402ce5\n            int64_t v62 = v60 + 1; // 0x402cea\n            int64_t v63 = v57 + 1; // 0x402d11\n            v41 = v62;\n            v42 = v61;\n            v43 = v51;\n            v2 = v63;\n            v44 = v53;\n            v45 = v54;\n            v57 = v63;\n            while (v63 < v55) {\n                // 0x402cdc\n                v60 = v62;\n                if (v53 > v60) {\n                    // 0x402ce1\n                    *(char *)(v60 + v54) = v61;\n                }\n                // 0x402ce5\n                v61 = *(char *)(v57 + str);\n                v62 = v60 + 1;\n                v63 = v57 + 1;\n                v41 = v62;\n                v42 = v61;\n                v43 = v51;\n                v2 = v63;\n                v44 = v53;\n                v45 = v54;\n                v57 = v63;\n            }\n        }\n        goto lab_0x4023bd;\n    }\n  lab_0x4023bd:;\n    int64_t v46 = v45;\n    uint64_t v47 = v41;\n    if (v47 < v44) {\n        // 0x4023c2\n        *(char *)(v46 + v47) = v42;\n    }\n    // 0x4023c6\n    v1 = v47 + 1;\n    v13 = v43;\n    v6 = v44;\n    v10 = v46;\n    goto lab_0x4021d8_2;\n  lab_0x40305a_2:\n    // 0x40305a\n    v17 = v15;\n    v8 = 0x100000000 * v7 >> 32;\n    v12 = 0x100000000 * v11 >> 32;\n    goto lab_0x402331;\n}\n"
        },
        {
            "funcName": "function_403360",
            "funcStartAddr": "403360",
            "funcEndAddr": "4034fe",
            "decompiledFuncCode": "int64_t function_403360(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403362\n    int32_t * v3 = __errno_location(); // 0x40337c\n    int64_t v4 = (int64_t)g18; // 0x403381\n    int32_t v5 = *v3; // 0x40338b\n    int64_t v6 = v4; // 0x4033a1\n    if (v2 >= (int64_t)*(int32_t *)0x608210) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4034f9\n            function_4043c0(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x4033b0\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x4033b7\n        int64_t v9; // 0x403360\n        if (g18 == &g19) {\n            int64_t v10 = function_4041d0(0, v8); // 0x4034da\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g19); // 0x4034df\n            *(int64_t *)&g18 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_4041d0(v4, v8); // 0x4033cb\n            *(int64_t *)&g18 = v12;\n            v9 = v12;\n        }\n        // 0x4033da\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g21; // 0x4033da\n        int32_t v14 = v7; // 0x4033e1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g21 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x403411\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x40341b\n    int64_t * v17 = (int64_t *)v15; // 0x40341e\n    uint64_t v18 = *v17; // 0x40341e\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x403421\n    int64_t result = *v19; // 0x403421\n    int64_t v20; // 0x403360\n    uint64_t v21 = function_402130(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403444\n    if (v18 > v21) {\n        // 0x4034bb\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403457\n    *v17 = v22;\n    if (result != (int64_t)&g31) {\n        // 0x403467\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404170(v22); // 0x403481\n    *v19 = result2;\n    int64_t v23; // 0x403360\n    function_402130(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x4034bb\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_403500",
            "funcStartAddr": "403500",
            "funcEndAddr": "403534",
            "decompiledFuncCode": "int64_t function_403500(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x403507\n    int64_t result = function_404370(a1 == 0 ? (int64_t)&g32 : a1, 56); // 0x403526\n    return result;\n}\n"
        },
        {
            "funcName": "function_403540",
            "funcStartAddr": "403540",
            "funcEndAddr": "40354f",
            "decompiledFuncCode": "int64_t function_403540(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g32 : a1); // 0x40354c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403550",
            "funcStartAddr": "403550",
            "funcEndAddr": "40355f",
            "decompiledFuncCode": "int64_t function_403550(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g32 : a1; // 0x403558\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g32;\n}\n"
        },
        {
            "funcName": "function_403560",
            "funcStartAddr": "403560",
            "funcEndAddr": "403593",
            "decompiledFuncCode": "int64_t function_403560(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g32 + 8 : a1 + 8; // 0x403579\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40357e\n    uint32_t v3 = *v2; // 0x40357e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403582\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_4035a0",
            "funcStartAddr": "4035a0",
            "funcEndAddr": "4035b3",
            "decompiledFuncCode": "int64_t function_4035a0(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g32 + 4 : a1 + 4); // 0x4035ac\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_4035c0",
            "funcStartAddr": "4035c0",
            "funcEndAddr": "4035eb",
            "decompiledFuncCode": "int64_t function_4035c0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g32 : a1; // 0x4035c8\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4035e5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x4035dc\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g32;\n}\n"
        },
        {
            "funcName": "function_4035f0",
            "funcStartAddr": "4035f0",
            "funcEndAddr": "403662",
            "decompiledFuncCode": "int64_t function_4035f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g32 : a5; // 0x403612\n    int32_t * v2 = __errno_location(); // 0x40361b\n    uint32_t v3 = *(int32_t *)v1; // 0x40363b\n    int64_t result = function_402130(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40364a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403670",
            "funcStartAddr": "403670",
            "funcEndAddr": "403751",
            "decompiledFuncCode": "int64_t function_403670(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g32 : a4; // 0x403692\n    int32_t * v2 = __errno_location(); // 0x403698\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x4036b7\n    int32_t * v4 = (int32_t *)v1; // 0x4036ba\n    int64_t v5 = function_402130(0, 0, a1, a2, (int64_t)*v4, v3); // 0x4036d5\n    int64_t v6 = v5 + 1; // 0x4036da\n    int64_t result = function_404170(v6); // 0x4036ef\n    function_402130(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x403734\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x40373d\n    return result;\n}\n"
        },
        {
            "funcName": "function_403760",
            "funcStartAddr": "403760",
            "funcEndAddr": "40376a",
            "decompiledFuncCode": "int64_t function_403760(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403760\n    return function_403670(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403770",
            "funcStartAddr": "403770",
            "funcEndAddr": "403805",
            "decompiledFuncCode": "int64_t function_403770(void) {\n    uint32_t v1 = *(int32_t *)&g21; // 0x403770\n    int64_t v2 = v1; // 0x403770\n    int64_t v3 = v2; // 0x403784\n    if (v1 >= 2) {\n        int64_t v4 = &g21;\n        int64_t v5 = v4 + 16; // 0x4037a3\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g39;\n        while (v5 != (int64_t)g18 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x4037a0\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g39;\n        }\n    }\n    int64_t v6 = v3; // 0x4037bd\n    if (g19 != 0x608280) {\n        // 0x4037bf\n        free((int64_t *)g19);\n        g19 = 256;\n        *(int64_t *)&g20 = (int64_t)&g31;\n        v6 = &g39;\n    }\n    int64_t result = v6; // 0x4037e1\n    if (g18 != &g19) {\n        // 0x4037e3\n        free(g18);\n        *(int64_t *)&g18 = (int64_t)&g19;\n        result = &g39;\n    }\n    // 0x4037f6\n    *(int32_t *)&g21 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_403810",
            "funcStartAddr": "403810",
            "funcEndAddr": "403821",
            "decompiledFuncCode": "int64_t function_403810(void) {\n    // 0x403810\n    int64_t v1; // 0x403810\n    return function_403360(v1, v1, -1, (int64_t *)&g32);\n}\n"
        },
        {
            "funcName": "function_403830",
            "funcStartAddr": "403830",
            "funcEndAddr": "40383a",
            "decompiledFuncCode": "int64_t function_403830(void) {\n    // 0x403830\n    int64_t v1; // 0x403830\n    return function_403360(v1, v1, v1, (int64_t *)&g32);\n}\n"
        },
        {
            "funcName": "function_403840",
            "funcStartAddr": "403840",
            "funcEndAddr": "403856",
            "decompiledFuncCode": "int64_t function_403840(int64_t a1) {\n    // 0x403840\n    return function_403360(0, a1, -1, (int64_t *)&g32);\n}\n"
        },
        {
            "funcName": "function_403860",
            "funcStartAddr": "403860",
            "funcEndAddr": "403872",
            "decompiledFuncCode": "int64_t function_403860(int64_t a1, int64_t a2) {\n    // 0x403860\n    return function_403360(0, a1, a2, (int64_t *)&g32);\n}\n"
        },
        {
            "funcName": "function_403880",
            "funcStartAddr": "403880",
            "funcEndAddr": "4038e8",
            "decompiledFuncCode": "int64_t function_403880(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403890\n    return function_403360((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4038f0",
            "funcStartAddr": "4038f0",
            "funcEndAddr": "403954",
            "decompiledFuncCode": "int64_t function_4038f0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403900\n    return function_403360((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403960",
            "funcStartAddr": "403960",
            "funcEndAddr": "40396c",
            "decompiledFuncCode": "int64_t function_403960(int64_t a1, int64_t a2) {\n    // 0x403960\n    return function_403880(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_403970",
            "funcStartAddr": "403970",
            "funcEndAddr": "40397f",
            "decompiledFuncCode": "int64_t function_403970(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403970\n    return function_4038f0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_403980",
            "funcStartAddr": "403980",
            "funcEndAddr": "4039f0",
            "decompiledFuncCode": "int64_t function_403980(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g32); // 0x40398d\n    int128_t v2 = __asm_movdqa(g33); // 0x403995\n    int128_t v3 = __asm_movdqa(g34); // 0x40399d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x4039b2\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x4039c8\n    uint32_t v6 = *v5; // 0x4039c8\n    uint32_t v7 = (int32_t)a3 % 32; // 0x4039cd\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403360(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_4039f0",
            "funcStartAddr": "4039f0",
            "funcEndAddr": "4039fd",
            "decompiledFuncCode": "int64_t function_4039f0(int64_t a1, int64_t a2) {\n    // 0x4039f0\n    return function_403980(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403a00",
            "funcStartAddr": "403a00",
            "funcEndAddr": "403a11",
            "decompiledFuncCode": "int64_t function_403a00(int64_t a1) {\n    // 0x403a00\n    return function_403980(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403a20",
            "funcStartAddr": "403a20",
            "funcEndAddr": "403a2a",
            "decompiledFuncCode": "int64_t function_403a20(void) {\n    // 0x403a20\n    int64_t v1; // 0x403a20\n    return function_403980(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403a30",
            "funcStartAddr": "403a30",
            "funcEndAddr": "403a9e",
            "decompiledFuncCode": "int64_t function_403a30(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403a4a\n    return function_403360(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403aa0",
            "funcStartAddr": "403aa0",
            "funcEndAddr": "403b0c",
            "decompiledFuncCode": "int64_t function_403aa0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g32); // 0x403aa7\n    int128_t v2 = __asm_movdqa(g33); // 0x403aaf\n    int128_t v3 = __asm_movdqa(g34); // 0x403ab7\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x403ad9\n    if (a2 == 0 || a3 == 0) {\n        // 0x403b07\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403aea\n    return function_403360(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403b10",
            "funcStartAddr": "403b10",
            "funcEndAddr": "403b19",
            "decompiledFuncCode": "int64_t function_403b10(void) {\n    // 0x403b10\n    int64_t v1; // 0x403b10\n    return function_403aa0(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403b20",
            "funcStartAddr": "403b20",
            "funcEndAddr": "403b37",
            "decompiledFuncCode": "int64_t function_403b20(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403b20\n    return function_403aa0(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_403b40",
            "funcStartAddr": "403b40",
            "funcEndAddr": "403b53",
            "decompiledFuncCode": "int64_t function_403b40(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403b40\n    return function_403aa0(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_403b60",
            "funcStartAddr": "403b60",
            "funcEndAddr": "403b6a",
            "decompiledFuncCode": "int64_t function_403b60(void) {\n    // 0x403b60\n    int64_t v1; // 0x403b60\n    return function_403360(v1, v1, v1, &g17);\n}\n"
        },
        {
            "funcName": "function_403b70",
            "funcStartAddr": "403b70",
            "funcEndAddr": "403b82",
            "decompiledFuncCode": "int64_t function_403b70(int64_t a1, int64_t a2) {\n    // 0x403b70\n    return function_403360(0, a1, a2, &g17);\n}\n"
        },
        {
            "funcName": "function_403b90",
            "funcStartAddr": "403b90",
            "funcEndAddr": "403ba1",
            "decompiledFuncCode": "int64_t function_403b90(void) {\n    // 0x403b90\n    int64_t v1; // 0x403b90\n    return function_403360(v1, v1, -1, &g17);\n}\n"
        },
        {
            "funcName": "function_403bb0",
            "funcStartAddr": "403bb0",
            "funcEndAddr": "403bc6",
            "decompiledFuncCode": "int64_t function_403bb0(int64_t a1) {\n    // 0x403bb0\n    return function_403360(0, a1, -1, &g17);\n}\n"
        },
        {
            "funcName": "function_403bd0",
            "funcStartAddr": "403bd0",
            "funcEndAddr": "403fad",
            "decompiledFuncCode": "int64_t function_403bd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x403c68\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x403bec\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403c06\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x403c4b\n    if (a6 < 10) {\n        // 0x403c5a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x403d52\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_403fb0",
            "funcStartAddr": "403fb0",
            "funcEndAddr": "403fd0",
            "decompiledFuncCode": "int64_t function_403fb0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x403fb0\n    if (a5 == 0) {\n        // 0x403fcb\n        return function_403bd0(a1, a2, a3, a4, a5, 0, (int64_t)&g39);\n    }\n    int64_t v1 = 0; // 0x403fb7\n    v1++;\n    int64_t v2 = v1; // 0x403fc9\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x403fc0\n        v1++;\n        v2 = v1;\n    }\n    // 0x403fcb\n    return function_403bd0(a1, a2, a3, a4, a5, v2, (int64_t)&g39);\n}\n"
        },
        {
            "funcName": "function_403fd0",
            "funcStartAddr": "403fd0",
            "funcEndAddr": "404030",
            "decompiledFuncCode": "int64_t function_403fd0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x403fd0\n    int64_t v3 = &v2; // 0x403fd0\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x404003\n    int64_t v6; // 0x403fed\n    int64_t * v7; // 0x40400b\n    int64_t v8; // 0x40400b\n    int64_t v9; // 0x404017\n    if (v5 < 48) {\n        // 0x403fe0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x404023\n            break;\n        }\n    } else {\n        // 0x40400b\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x404023\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x404001\n    while (v4 != 9) {\n        // 0x403ff9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x403fe0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x404023\n                break;\n            }\n        } else {\n            // 0x40400b\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x404023\n                break;\n            }\n        }\n        // 0x403ff9\n        v10 = 10;\n    }\n    // 0x404023\n    return function_403bd0(a1, a2, a3, a4, v3, v10, (int64_t)&g39);\n}\n"
        },
        {
            "funcName": "function_404030",
            "funcStartAddr": "404030",
            "funcEndAddr": "4040ec",
            "decompiledFuncCode": "int64_t function_404030(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, char * a6) {\n    // 0x404030\n    int64_t v1; // bp-168, 0x404030\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x404030\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x404030\n    int64_t v8; // 0x404030\n    int64_t v9; // bp-56, 0x404030\n    int64_t v10; // 0x404095\n    int64_t v11; // 0x4040b9\n    if ((int32_t)v6 < 48) {\n        // 0x404080\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x4040d0\n            break;\n        }\n    } else {\n        // 0x4040b2\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x4040d0\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x4040aa\n    int64_t v13 = 10; // 0x4040aa\n    while (v5 != 9) {\n        // 0x4040ac\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404080\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x4040d0\n                break;\n            }\n        } else {\n            // 0x4040b2\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x4040d0\n                break;\n            }\n        }\n        // 0x4040a2\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x4040d0\n    int64_t v14; // bp-136, 0x404030\n    int64_t result = function_403bd0(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g39); // 0x4040df\n    return result;\n}\n"
        },
        {
            "funcName": "function_4040f0",
            "funcStartAddr": "4040f0",
            "funcEndAddr": "404164",
            "decompiledFuncCode": "int64_t function_4040f0(int64_t a1) {\n    // 0x4040f0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404153\n    return fputs_unlocked(v1, g23);\n}\n"
        },
        {
            "funcName": "function_404170",
            "funcStartAddr": "404170",
            "funcEndAddr": "40418a",
            "decompiledFuncCode": "int64_t function_404170(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404174\n    if (size != 0 != (mem == NULL)) {\n        // 0x404183\n        return (int64_t)mem;\n    }\n    // 0x404185\n    function_4043c0(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404190",
            "funcStartAddr": "404190",
            "funcEndAddr": "4041b1",
            "decompiledFuncCode": "int64_t function_404190(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404193\n    int64_t v2 = v1; // 0x404193\n    if (v2 < 0) {\n        // 0x4041ab\n        function_4043c0(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4041a9\n        return function_404170(v2);\n    }\n    // 0x4041ab\n    function_4043c0(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4041c0",
            "funcStartAddr": "4041c0",
            "funcEndAddr": "4041c2",
            "decompiledFuncCode": "int64_t function_4041c0(void) {\n    // 0x4041c0\n    int64_t v1; // 0x4041c0\n    return function_404170(v1);\n}\n"
        },
        {
            "funcName": "function_4041d0",
            "funcStartAddr": "4041d0",
            "funcEndAddr": "404206",
            "decompiledFuncCode": "int64_t function_4041d0(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4041f8\n        free(v1);\n        return (int32_t)&g39 ^ (int32_t)&g39;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4041e1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4041f0\n        return (int64_t)mem;\n    }\n    // 0x404201\n    function_4043c0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404210",
            "funcStartAddr": "404210",
            "funcEndAddr": "404231",
            "decompiledFuncCode": "int64_t function_404210(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x404213\n    int64_t v2 = v1; // 0x404213\n    if (v2 < 0) {\n        // 0x40422b\n        function_4043c0(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404229\n        return function_4041d0(a1, v2);\n    }\n    // 0x40422b\n    function_4043c0(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404240",
            "funcStartAddr": "404240",
            "funcEndAddr": "4042c6",
            "decompiledFuncCode": "int64_t function_404240(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40429b\n            function_4043c0(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4041d0(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404283\n    if (a2 == 0) {\n        // 0x4042a8\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404288\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40429b\n        function_4043c0(a1);\n        // UNREACHABLE\n    }\n    // 0x40426a\n    *(int64_t *)a2 = v2;\n    return function_4041d0(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_4042d0",
            "funcStartAddr": "4042d0",
            "funcEndAddr": "404320",
            "decompiledFuncCode": "int64_t function_4042d0(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x4042d0\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x40431a\n            function_4043c0(a1);\n            // UNREACHABLE\n        }\n        // 0x4042f2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_4041d0(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x404305\n        *(int64_t *)a2 = 128;\n        return function_4041d0(0, 128);\n    }\n    // 0x404318\n    if (a2 < 0) {\n        // 0x40431a\n        function_4043c0(a1);\n        // UNREACHABLE\n    }\n    // 0x4042f2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_4041d0(a1, v1);\n}\n"
        },
        {
            "funcName": "function_404320",
            "funcStartAddr": "404320",
            "funcEndAddr": "404337",
            "decompiledFuncCode": "int64_t function_404320(int64_t a1, int64_t a2) {\n    // 0x404320\n    return (int64_t)memset((int64_t *)function_404170(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404340",
            "funcStartAddr": "404340",
            "funcEndAddr": "40436e",
            "decompiledFuncCode": "int64_t function_404340(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404347\n    if ((int64_t)v1 < 0) {\n        // 0x404369\n        function_4043c0(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404369\n        function_4043c0(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40435a\n    if (mem != NULL) {\n        // 0x404364\n        return (int64_t)mem;\n    }\n    // 0x404369\n    function_4043c0(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404370",
            "funcStartAddr": "404370",
            "funcEndAddr": "404398",
            "decompiledFuncCode": "int64_t function_404370(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404170(a2); // 0x40437f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_4043a0",
            "funcStartAddr": "4043a0",
            "funcEndAddr": "4043b3",
            "decompiledFuncCode": "int64_t function_4043a0(int64_t str) {\n    // 0x4043a0\n    return function_404370(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_4043c0",
            "funcStartAddr": "4043c0",
            "funcEndAddr": "4043f1",
            "decompiledFuncCode": "int64_t function_4043c0(int64_t a1) {\n    // 0x4043c0\n    error(g16, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404400",
            "funcStartAddr": "404400",
            "funcEndAddr": "40447a",
            "decompiledFuncCode": "int64_t function_404400(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x40440b\n    int64_t v2 = (int64_t)&g8; // 0x40440b\n    int64_t v3; // 0x404400\n    int64_t v4; // 0x404400\n    int64_t n; // 0x404400\n    if (a2 == 0) {\n        goto lab_0x404452;\n    } else {\n        // 0x40440d\n        if (a3 == 0) {\n            // 0x404438\n            return -2;\n        }\n        // 0x404419\n        n = a3;\n        v4 = a2;\n        v3 = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == 0) {\n            goto lab_0x404452;\n        } else {\n            goto lab_0x404424;\n        }\n    }\n  lab_0x404452:\n    // 0x404452\n    n = v1;\n    v4 = v2;\n    int64_t v5; // bp-28, 0x404400\n    v3 = &v5;\n    goto lab_0x404424;\n  lab_0x404424:;\n    int32_t * pwc = (int32_t *)v3; // 0x40442a\n    char * wstr = (char *)v4; // 0x40442a\n    int64_t ps; // 0x404400\n    int32_t v6 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x40442a\n    int64_t result = v6; // 0x40442a\n    if (v6 < 0xfffffffe) {\n        // 0x404438\n        return result;\n    }\n    int64_t result2 = result; // 0x404469\n    if ((char)function_4044e0(0, v4) == 0) {\n        // 0x40446b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x404438\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404480",
            "funcStartAddr": "404480",
            "funcEndAddr": "4044dd",
            "decompiledFuncCode": "int64_t function_404480(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x404487\n    int64_t v2; // 0x404480\n    int64_t result = function_404ab0(a1, v2); // 0x404498\n    if ((v2 & 32) != 0) {\n        // 0x4044c0\n        if ((int32_t)result == 0) {\n            // 0x4044c4\n            *__errno_location() = 0;\n        }\n        // 0x4044ba\n        return 0xffffffff;\n    }\n    // 0x4044a1\n    if ((int32_t)result == 0) {\n        // 0x4044ba\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x4044a8\n    if (v1 == 0) {\n        // 0x4044aa\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x4044ba\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4044e0",
            "funcStartAddr": "4044e0",
            "funcEndAddr": "40453e",
            "decompiledFuncCode": "int64_t function_4044e0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4044e6\n    if (locale == NULL) {\n        // 0x404513\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4044e6\n    bool v2; // 0x4044e0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g9; // 0x4044e0\n    int64_t v5 = v1; // 0x4044e0\n    int64_t v6 = 2; // 0x404505\n    unsigned char v7 = *(char *)v5; // 0x404505\n    char v8 = *(char *)v4; // 0x404505\n    char v9 = v8; // 0x404505\n    bool v10 = false; // 0x404505\n    while (v7 == v8) {\n        // 0x4044f8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x404511\n    int64_t v13 = v1; // 0x404511\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x404513\n        return 0;\n    }\n    int64_t v14 = 6; // 0x404511\n    unsigned char v15 = *(char *)v13; // 0x40452d\n    char v16 = *(char *)v12; // 0x40452d\n    char v17 = v16; // 0x40452d\n    bool v18 = false; // 0x40452d\n    while (v15 == v16) {\n        // 0x404520\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_404540",
            "funcStartAddr": "404540",
            "funcEndAddr": "404aa2",
            "decompiledFuncCode": "int64_t function_404540(void) {\n    char * v1 = nl_langinfo(14); // 0x404556\n    char * v2 = g35; // 0x40455b\n    char * v3; // 0x404540\n    int64_t v4; // 0x404540\n    int64_t v5; // 0x404540\n    int64_t v6; // 0x404540\n    int64_t v7; // 0x404540\n    int32_t size; // 0x404540\n    int32_t size2; // 0x404540\n    int32_t len; // 0x404612\n    int64_t v8; // 0x404612\n    char * env_val; // 0x4045fd\n    if (v2 == NULL) {\n        // 0x4045f8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x404665;\n        } else {\n            // 0x40460a\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x404665;\n            } else {\n                // 0x40460f\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4045fd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x404a95\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x404665;\n                    } else {\n                        // 0x404a09\n                        size2 = len + 14;\n                        goto lab_0x40462b;\n                    }\n                } else {\n                    goto lab_0x40462b;\n                }\n            }\n        }\n    } else {\n        // 0x404540\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40457a;\n    }\n  lab_0x4048ac:;\n    // 0x4048ac\n    struct _IO_FILE * stream; // 0x4046eb\n    int32_t v10 = __uflow(stream); // 0x4048af\n    int64_t v11; // 0x404540\n    int64_t v12 = v11; // 0x4048b9\n    int64_t v13; // 0x404540\n    int64_t v14 = v13; // 0x4048b9\n    int32_t v15 = v10; // 0x4048b9\n    int64_t v16; // 0x404540\n    int64_t v17 = v16; // 0x4048b9\n    int64_t v18 = v11; // 0x4048b9\n    int64_t v19 = v13; // 0x4048b9\n    int64_t v20 = v16; // 0x4048b9\n    if (v10 == -1) {\n        // break -> 0x4048bf\n        goto lab_0x4048bf;\n    }\n    goto lab_0x404739;\n  lab_0x40472e:;\n    // 0x40472e\n    int64_t v90; // 0x404540\n    int64_t * v32; // 0x404720\n    *v32 = v90 + 1;\n    int64_t v89; // 0x404540\n    v12 = v89;\n    int64_t v91; // 0x404540\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x404540\n    v17 = v92;\n    goto lab_0x404739;\n  lab_0x404739:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x404540\n    int32_t v25; // bp-120, 0x404540\n    int32_t v26; // bp-184, 0x404540\n    int64_t v27; // 0x4046eb\n    int64_t v28; // 0x404708\n    int64_t v29; // 0x40470d\n    int64_t * v30; // 0x404724\n    switch (c) {\n        case 32: {\n            goto lab_0x404720;\n        }\n        case 10: {\n            goto lab_0x404720;\n        }\n        case 9: {\n            goto lab_0x404720;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x404911\n            int32_t v33; // 0x404540\n            char v34; // 0x404540\n            int32_t v35; // 0x40491e\n            if (v31 < *v30) {\n                // 0x4048f0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x40491b\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x404911\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x4048f0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x40491b\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x404900\n                v36 = v33;\n            }\n            // 0x4049ef\n            if (v36 == -1) {\n                // break -> 0x4048bf\n                break;\n            }\n            goto lab_0x404720;\n        }\n        default: {\n            // 0x40474f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x4048bf\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x404778\n            int64_t v39 = v37 + 4; // 0x40477a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x404786\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x404788\n            while (v41 == 0) {\n                // 0x404778\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x4047a6\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x4047b2\n            int64_t v45 = v43 + 4; // 0x4047b4\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x4047c0\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x4047c2\n            while (v47 == 0) {\n                // 0x4047b2\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x4047af\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x4047d8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x4047e8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x4047ec\n            int64_t v52 = v51 + v48; // 0x4047f5\n            int64_t * mem; // 0x404540\n            int64_t v53; // 0x404540\n            int64_t v54; // 0x404540\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x40492b\n                int64_t v56 = v55 + 3; // 0x404937\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x404811\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x404820\n            if (mem == NULL) {\n                // 0x404a4c\n                free((int64_t *)v21);\n                function_404ab0(v27, v53);\n                v24 = (int64_t)&g8;\n                goto lab_0x4046c4;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x404838\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x404842\n            uint32_t v62 = (int32_t)v59; // 0x404845\n            int64_t v63; // 0x404540\n            if (v62 >= 8) {\n                // 0x404954\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x40496e\n                int64_t v66 = v61 - v65; // 0x404972\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x40497d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x40498e\n                    int64_t v70 = v69 & 0xffffffff; // 0x40498e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x40498b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x404a1f\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x404857\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x40485b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x40486b\n            int64_t v74 = v60 - 1; // 0x40486f\n            uint32_t v75 = (int32_t)v73; // 0x404874\n            int64_t v76; // 0x404540\n            if (v75 >= 8) {\n                // 0x4049a2\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x4049ac\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x4049bc\n                int64_t v80 = v74 - v79; // 0x4049c0\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x4049cb\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x4049db\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x4049d9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x404a36\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x404a3e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x404886\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x40488a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x404a83\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x40489e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x40472e;\n            } else {\n                goto lab_0x4048ac;\n            }\n        }\n    }\n  lab_0x404720:;\n    int64_t v93 = v23; // 0x404540\n    int64_t v94 = v22; // 0x404540\n    int64_t v95 = v21; // 0x404540\n    goto lab_0x404720_2;\n  lab_0x404665:;\n    int64_t * mem3 = malloc(size); // 0x404665\n    int64_t v97 = (int64_t)&g8; // 0x404670\n    int64_t v98; // 0x404540\n    int64_t path; // 0x404540\n    if (mem3 == NULL) {\n        goto lab_0x404642;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x404665\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x404686;\n    }\n  lab_0x40457a:;\n    int64_t str = v1 == NULL ? (int64_t)&g8 : (int64_t)v1; // 0x40456d\n    char v100 = *v3; // 0x40457a\n    int64_t v101; // 0x404540\n    if (v100 == 0) {\n        // 0x4045d4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x404540\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x404540\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x4045c0\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x4045c7;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x404590\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40459d\n        char v107 = *(char *)v106; // 0x4045a2\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4045d4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x4045ab\n    v104 = v103 + 1;\n  lab_0x4045c7:\n    // 0x4045d4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x404642:;\n    char * v108 = (char *)v97;\n    g35 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40457a;\n  lab_0x404686:;\n    int64_t v109 = v98 + path; // 0x404686\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x4046b2\n    v24 = (int64_t)&g8;\n    if (fd >= 0) {\n        // 0x4046e1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x404a12\n            close(fd);\n            v24 = (int64_t)&g8;\n        } else {\n            // 0x404705\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x404720_2:;\n                uint64_t v96 = *v32; // 0x404720\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x4048ac;\n                } else {\n                    goto lab_0x40472e;\n                }\n            }\n          lab_0x4048bf:\n            // 0x4048bf\n            function_404ab0(v27, v19);\n            v24 = (int64_t)&g8;\n            if (v18 != 0) {\n                // 0x4048de\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x4046c4;\n  lab_0x40462b:;\n    int64_t * mem4 = malloc(size2); // 0x40462b\n    v97 = (int64_t)&g8;\n    if (mem4 != NULL) {\n        // 0x4046d1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x404686;\n    } else {\n        goto lab_0x404642;\n    }\n  lab_0x4046c4:\n    // 0x4046c4\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x404642;\n}\n"
        },
        {
            "funcName": "function_404ab0",
            "funcStartAddr": "404ab0",
            "funcEndAddr": "404b2b",
            "decompiledFuncCode": "int64_t function_404ab0(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x404ab7\n    if (fileno(stream) < 0) {\n        // 0x404b17\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x404aca\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x404afb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x404b17\n            return fclose(stream);\n        }\n    }\n    // 0x404acc\n    if ((int32_t)function_404b30(a1, v1) == 0) {\n        // 0x404b17\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x404ad8\n    int32_t v3 = *v2; // 0x404ae0\n    int64_t result = fclose(stream); // 0x404aee\n    if (v3 != 0) {\n        // 0x404b20\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x404af0\n    return result;\n}\n"
        },
        {
            "funcName": "function_404b30",
            "funcStartAddr": "404b30",
            "funcEndAddr": "404b70",
            "decompiledFuncCode": "int64_t function_404b30(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x404b4a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x404b4a\n        return fflush(stream);\n    }\n    // 0x404b58\n    function_404b70(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_404b70",
            "funcStartAddr": "404b70",
            "funcEndAddr": "404bc7",
            "decompiledFuncCode": "int64_t function_404b70(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x404b70\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x404b7a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x404bab\n    int64_t result = -1; // 0x404bb4\n    if (v1 != -1) {\n        // 0x404bb6\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x404bc2\n    return result;\n}\n"
        },
        {
            "funcName": "function_404bd0",
            "funcStartAddr": "404bd0",
            "funcEndAddr": "404c2d",
            "decompiledFuncCode": "int64_t function_404bd0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404bd0\n    return function_401138();\n}\n"
        },
        {
            "funcName": "function_404c30",
            "funcStartAddr": "404c30",
            "funcEndAddr": "404c31",
            "decompiledFuncCode": "int64_t function_404c30(void) {\n    // 0x404c30\n    int64_t result; // 0x404c30\n    return result;\n}\n"
        },
        {
            "funcName": "function_404c40",
            "funcStartAddr": "404c40",
            "funcEndAddr": "404c58",
            "decompiledFuncCode": "int64_t function_404c40(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x404c40\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g14);\n}\n"
        },
        {
            "funcName": "function_404c58",
            "funcStartAddr": "404c58",
            "funcEndAddr": "404c78",
            "decompiledFuncCode": "int64_t function_404c58(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g10; // 0x404c62\n    while (*(int64_t *)v1 != -1) {\n        // 0x404c63\n        v1 -= 8;\n    }\n    // 0x404c74\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_echo.elf"
}