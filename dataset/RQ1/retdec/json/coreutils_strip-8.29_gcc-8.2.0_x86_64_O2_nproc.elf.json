{
    "funcInfo": [
        {
            "funcName": "function_401750",
            "funcStartAddr": "401750",
            "funcEndAddr": "401755",
            "decompiledFuncCode": "int64_t function_401750(void) {\n    // 0x401750\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401755",
            "funcStartAddr": "401755",
            "funcEndAddr": "40175a",
            "decompiledFuncCode": "int64_t function_401755(void) {\n    // 0x401755\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40175a",
            "funcStartAddr": "40175a",
            "funcEndAddr": "40175f",
            "decompiledFuncCode": "int64_t function_40175a(void) {\n    // 0x40175a\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40175f",
            "funcStartAddr": "40175f",
            "funcEndAddr": "401764",
            "decompiledFuncCode": "int64_t function_40175f(void) {\n    // 0x40175f\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401764",
            "funcStartAddr": "401764",
            "funcEndAddr": "401769",
            "decompiledFuncCode": "int64_t function_401764(void) {\n    // 0x401764\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401769",
            "funcStartAddr": "401769",
            "funcEndAddr": "40176e",
            "decompiledFuncCode": "int64_t function_401769(void) {\n    // 0x401769\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401770",
            "funcStartAddr": "401770",
            "funcEndAddr": "401901",
            "decompiledFuncCode": "int64_t function_401770(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 & 0xffffffff; // 0x40177e\n    function_402050(a2);\n    setlocale(LC_ALL, (char *)&g10);\n    bindtextdomain(\"coreutils\", \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain(\"coreutils\");\n    int64_t v2; // 0x401770\n    function_406010(0x401d20, (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\", v2);\n    int64_t v3; // 0x401770\n    uint64_t v4; // 0x401770\n    while (true) {\n        // 0x4017c2\n        v4 = 0;\n        int64_t v5 = 2; // 0x401770\n        while (true) {\n          lab_0x4017c2:\n            // 0x4017c2\n            v3 = v5;\n            int64_t v6; // 0x401770\n            int64_t v7 = function_405750(v1, a2, (int64_t *)&g10, &g2, 0, v6); // 0x4017d4\n            uint32_t v8 = (int32_t)v7;\n            switch (v8) {\n                case -1: {\n                    goto lab_0x401884;\n                }\n                case -130: {\n                    // 0x4018fa\n                    function_4019f0(0);\n                    // UNREACHABLE\n                }\n                default: {\n                    if (v8 <= 0xffffff7e) {\n                        if (v8 == -131) {\n                            // 0x40180b\n                            function_4040f0((int64_t)g28, \"nproc\", \"GNU coreutils\", (int64_t)g17, \"Giuseppe Scrivano\", 0);\n                            exit(0);\n                            // UNREACHABLE\n                        }\n                        goto lab_0x4018f0;\n                    }\n                    // 0x4017ef\n                    v5 = 0;\n                    if (v8 != 128) {\n                        // break -> 0x401840\n                        break;\n                    }\n                    goto lab_0x4017c2;\n                }\n            }\n        }\n    }\n  lab_0x401884:;\n    int32_t v9 = *(int32_t *)0x60925c; // 0x401884\n    if (v9 == (int32_t)a1) {\n        uint64_t v10 = function_401f00(v3); // 0x401892\n        __printf_chk(1, \"%lu\\n\", v10 <= v4 ? 1 : (int32_t)(v10 - v4));\n        return 0;\n    }\n    // 0x4018c2\n    function_403c70(*(int64_t *)(8 * (int64_t)v9 + a2));\n    error(0, (int32_t)\"extra operand %s\" ^ (int32_t)\"extra operand %s\", dcgettext(NULL, \"extra operand %s\", 5));\n  lab_0x4018f0:\n    // 0x4018f0\n    function_4019f0(1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "entry_point",
            "funcStartAddr": "401910",
            "funcEndAddr": "40193b",
            "decompiledFuncCode": "int64_t entry_point(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x401910\n    int64_t v1; // 0x401910\n    __libc_start_main(0x401770, (int32_t)a4, (char **)&v1, (void (*)())0x405fa0, (void (*)())0x406000, (void (*)())a3);\n    __asm_hlt();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_40193b",
            "funcStartAddr": "40193b",
            "funcEndAddr": "40195a",
            "decompiledFuncCode": "int64_t function_40193b(void) {\n    // 0x40193b\n    return &g27;\n}\n"
        },
        {
            "funcName": "function_40195a",
            "funcStartAddr": "40195a",
            "funcEndAddr": "401991",
            "decompiledFuncCode": "int64_t function_40195a(void) {\n    // 0x40195a\n    return 0;\n}\n"
        },
        {
            "funcName": "function_401991",
            "funcStartAddr": "401991",
            "funcEndAddr": "4019e8",
            "decompiledFuncCode": "int64_t function_401991(void) {\n    // 0x401991\n    if (g31 != 0) {\n        // 0x4019e7\n        int64_t result; // 0x401991\n        return result;\n    }\n    int64_t v1 = g32; // 0x4019c4\n    int64_t result2; // 0x4019d6\n    if (g32 >= ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x4019d6\n        result2 = function_40193b();\n        g31 = 1;\n        return result2;\n    }\n    v1++;\n    while (v1 < ((int64_t)&g14 - (int64_t)&g13 >> 3) - 1) {\n        // 0x4019c6\n        v1++;\n    }\n    // 0x4019ba\n    g32 = v1;\n    // 0x4019d6\n    result2 = function_40193b();\n    g31 = 1;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4019e8",
            "funcStartAddr": "4019e8",
            "funcEndAddr": "4019ed",
            "decompiledFuncCode": "int64_t function_4019e8(void) {\n    // 0x4019e8\n    return function_40195a();\n}\n"
        },
        {
            "funcName": "function_4019f0",
            "funcStartAddr": "4019f0",
            "funcEndAddr": "401cfd",
            "decompiledFuncCode": "int64_t function_4019f0(int64_t a1) {\n    int32_t status = a1; // 0x401a06\n    if (status != 0) {\n        // 0x401a0a\n        __fprintf_chk(g30, 1, dcgettext(NULL, \"Try '%s --help' for more information.\\n\", 5));\n        // 0x401a2f\n        exit(status);\n        // UNREACHABLE\n    }\n    // 0x401a36\n    __printf_chk(1, dcgettext(NULL, \"Usage: %s [OPTION]...\\n\", 5));\n    fputs_unlocked(dcgettext(NULL, \"Print the number of processing units available to the current process,\\nwhich may be less than the number of online processors\\n\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --all      print the number of installed processors\\n      --ignore=N  if possible, exclude N processing units\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --help     display this help and exit\\n\", 5), g28);\n    fputs_unlocked(dcgettext(NULL, \"      --version  output version information and exit\\n\", 5), g28);\n    int64_t v1 = &g1; // bp-136, 0x401ae0\n    bool v2; // 0x4019f0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = &v1;\n    int64_t v5 = v4 + 16; // 0x401b60\n    int64_t v6 = *(int64_t *)v5; // 0x401b64\n    int64_t v7 = 6; // 0x401b6a\n    while (v6 != 0) {\n        int64_t v8 = (int64_t)\"nproc\";\n        int64_t v9 = v6;\n        unsigned char v10 = *(char *)v8; // 0x401b76\n        char v11 = *(char *)v9; // 0x401b76\n        char v12 = v11; // 0x401b76\n        bool v13 = false; // 0x401b76\n        while (v10 == v11) {\n            // 0x401b6c\n            v7--;\n            int64_t v14 = v9 + v3; // 0x401b76\n            int64_t v15 = v8 + v3; // 0x401b76\n            v12 = v10;\n            v13 = true;\n            if (v7 == 0) {\n                // break -> \n                break;\n            }\n            v8 = v15;\n            v9 = v14;\n            v10 = *(char *)v8;\n            v11 = *(char *)v9;\n            v12 = v11;\n            v13 = false;\n        }\n        unsigned char v16 = v12;\n        if ((v10 >= v16 && !v13) == v10 < v16) {\n            // break -> 0x401b82\n            break;\n        }\n        v4 = v5;\n        v5 = v4 + 16;\n        v6 = *(int64_t *)v5;\n        v7 = 6;\n    }\n    // 0x401b82\n    __printf_chk(1, dcgettext(NULL, \"\\n%s online help: <%s>\\n\", 5));\n    char * locale = setlocale(LC_MESSAGES, NULL);\n    if (*(int64_t *)(v4 + 24) == 0) {\n        if (locale == NULL) {\n            goto lab_0x401c94;\n        } else {\n            // 0x401c7e\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401cd3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401be4;\n            } else {\n                goto lab_0x401c94;\n            }\n        }\n    } else {\n        if (locale == NULL) {\n            goto lab_0x401be4;\n        } else {\n            // 0x401bca\n            if (strncmp(locale, \"en_\", 3) != 0) {\n                // 0x401cd3\n                __printf_chk(1, dcgettext(NULL, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\", 5));\n                goto lab_0x401be4;\n            } else {\n                goto lab_0x401be4;\n            }\n        }\n    }\n  lab_0x401c94:\n    // 0x401c94\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401c24\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401a2f\n    exit(status);\n    // UNREACHABLE\n  lab_0x401be4:\n    // 0x401be4\n    __printf_chk(1, dcgettext(NULL, \"Full documentation at: <%s%s>\\n\", 5));\n    // 0x401c24\n    __printf_chk(1, dcgettext(NULL, \"or available locally via: info '(coreutils) %s%s'\\n\", 5));\n    // 0x401a2f\n    exit(status);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401d00",
            "funcStartAddr": "401d00",
            "funcEndAddr": "401d08",
            "decompiledFuncCode": "int64_t function_401d00(int64_t a1) {\n    // 0x401d00\n    g34 = a1;\n    int64_t result; // 0x401d00\n    return result;\n}\n"
        },
        {
            "funcName": "function_401d10",
            "funcStartAddr": "401d10",
            "funcEndAddr": "401d18",
            "decompiledFuncCode": "int64_t function_401d10(int64_t a1) {\n    // 0x401d10\n    g33 = a1;\n    int64_t result; // 0x401d10\n    return result;\n}\n"
        },
        {
            "funcName": "function_401d20",
            "funcStartAddr": "401d20",
            "funcEndAddr": "401dbe",
            "decompiledFuncCode": "int64_t function_401d20(void) {\n    // 0x401d20\n    int32_t * err_num; // 0x401d36\n    if ((int32_t)function_405850((int64_t)g28) == 0) {\n        goto lab_0x401d4c;\n    } else {\n        // 0x401d36\n        err_num = __errno_location();\n        if (g33 == 0) {\n            goto lab_0x401d63;\n        } else {\n            // 0x401d47\n            if (*err_num != 32) {\n                goto lab_0x401d63;\n            } else {\n                goto lab_0x401d4c;\n            }\n        }\n    }\n  lab_0x401d4c:;\n    int64_t result = function_405850((int64_t)g30); // 0x401d53\n    if ((int32_t)result == 0) {\n        // 0x401d5c\n        return result;\n    }\n    // 0x401d9e\n    _exit(g18);\n    // UNREACHABLE\n  lab_0x401d63:;\n    char * v1 = dcgettext(NULL, \"write error\", 5); // 0x401d6f\n    if (g34 == 0) {\n        // 0x401da9\n        error(0, *err_num, \"%s\", v1);\n    } else {\n        // 0x401d83\n        error(0, *err_num, \"%s: %s\", (char *)function_403ac0((int64_t)g34), v1);\n    }\n    // 0x401d9e\n    _exit(g18);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_401dc0",
            "funcStartAddr": "401dc0",
            "funcEndAddr": "401e04",
            "decompiledFuncCode": "int64_t function_401dc0(int64_t a1) {\n    // 0x401dc0\n    int64_t v1; // bp-136, 0x401dc0\n    if (sched_getaffinity(0, 128, (struct _TYPEDEF_cpu_set_t *)&v1) != 0) {\n        // 0x401dda\n        return 0;\n    }\n    int32_t result = __sched_cpucount(128, (struct _TYPEDEF_cpu_set_t *)&v1); // 0x401df0\n    if (result == 0) {\n        // 0x401dda\n        return 0;\n    }\n    // 0x401dfc\n    return result;\n}\n"
        },
        {
            "funcName": "function_401e10",
            "funcStartAddr": "401e10",
            "funcEndAddr": "401efb",
            "decompiledFuncCode": "int64_t function_401e10(void) {\n    // 0x401e10\n    int64_t v1; // 0x401e10\n    uint64_t v2 = v1;\n    unsigned char v3 = (char)v2;\n    if (v3 == 0) {\n        // 0x401ee7\n        return 0;\n    }\n    int64_t v4 = 0x100000000000000 * v2 / 0x100000000000000; // 0x401e1b\n    int64_t v5 = v4; // 0x401e21\n    int64_t str; // 0x401e10\n    if (v3 < 33) {\n        // 0x401e23\n        v5 = v4;\n        if ((1 << v2 % 64 & 0x100003e00) != 0) {\n            int64_t v6; // 0x401e10\n            int64_t v7 = v6 + 1; // 0x401e38\n            unsigned char v8 = *(char *)v7; // 0x401e3c\n            while (v8 != 0) {\n                if (v8 >= 33) {\n                    // 0x401e60\n                    str = v7;\n                    v5 = v8;\n                    goto lab_0x401e60_3;\n                }\n                unsigned char v9 = v8 % 64;\n                if (v9 == 0 || (1 << (int64_t)v9 & 0x100003e00) == 0) {\n                    // 0x401e60\n                    str = v7;\n                    v5 = v8;\n                    goto lab_0x401e60_3;\n                }\n                v7++;\n                v8 = *(char *)v7;\n            }\n            // 0x401ee7\n            return 0;\n        }\n    }\n    goto lab_0x401e60_3;\n  lab_0x401e60_3:\n    // 0x401e60\n    if ((int32_t)v5 >= 58) {\n        // 0x401ee7\n        return 0;\n    }\n    char * endptr = NULL; // bp-16, 0x401e77\n    int32_t str_as_ul = strtoul((char *)str, &endptr, 10); // 0x401e85\n    if (endptr == NULL) {\n        // 0x401ee7\n        return 0;\n    }\n    int64_t result = str_as_ul; // 0x401e85\n    unsigned char v10 = *endptr; // 0x401e94\n    if (v10 == 0) {\n        // 0x401ee7\n        return result;\n    }\n    char v11 = v10; // 0x401ea1\n    if (v10 >= 33) {\n      lab_0x401ee0:\n        // 0x401ee0\n        if (v11 == 44) {\n            // 0x401ee7\n            return result;\n        }\n        // 0x401ee7\n        return 0;\n    }\n    // 0x401ea3\n    if ((1 << (int64_t)(v10 % 64) & 0x100003e00) == 0) {\n        // 0x401ee7\n        return 0;\n    }\n    int64_t v12 = (int64_t)endptr + 1;\n    char * v13 = (char *)v12; // 0x401ebd\n    endptr = v13;\n    unsigned char v14 = *v13; // 0x401ec2\n    while (v14 != 0) {\n        // 0x401ec9\n        v11 = v14;\n        if (v14 >= 33) {\n            goto lab_0x401ee0;\n        }\n        unsigned char v15 = v14 % 64;\n        if (v15 == 0 || (1 << (int64_t)v15 & 0x100003e00) == 0) {\n            // 0x401ee7\n            return 0;\n        }\n        v12++;\n        v13 = (char *)v12;\n        endptr = v13;\n        v14 = *v13;\n    }\n    // 0x401ee7\n    return result;\n}\n"
        },
        {
            "funcName": "function_401f00",
            "funcStartAddr": "401f00",
            "funcEndAddr": "402047",
            "decompiledFuncCode": "int64_t function_401f00(int64_t a1) {\n    int64_t v1 = a1; // 0x401f00\n    int64_t v2; // 0x401f00\n    int64_t v3; // 0x401f00\n    switch ((int32_t)a1) {\n        case 2: {\n            // 0x401f40\n            if (getenv(\"OMP_NUM_THREADS\") == NULL) {\n                char * env_val = getenv(\"OMP_THREAD_LIMIT\"); // 0x40201d\n                v1 = (int64_t)\"OMP_THREAD_LIMIT\";\n                if (env_val == NULL) {\n                    goto lab_0x40203b;\n                } else {\n                    int64_t v4 = (int64_t)env_val; // 0x40201d\n                    int64_t v5 = function_401e10(); // 0x40202a\n                    v2 = v5;\n                    v3 = v4;\n                    v1 = v4;\n                    if (v5 != 0) {\n                        goto lab_0x401f92;\n                    } else {\n                        goto lab_0x40203b;\n                    }\n                }\n            } else {\n                uint64_t v6 = function_401e10(); // 0x401f5d\n                char * env_val2 = getenv(\"OMP_THREAD_LIMIT\"); // 0x401f6a\n                int64_t v7 = -1; // 0x401f72\n                int64_t v8 = (int64_t)\"OMP_THREAD_LIMIT\"; // 0x401f72\n                if (env_val2 != NULL) {\n                    int64_t v9 = function_401e10(); // 0x401f77\n                    v7 = v9 == 0 ? -1 : v9;\n                    v8 = (int64_t)env_val2;\n                }\n                int64_t v10 = v7;\n                v2 = v10;\n                v3 = v8;\n                if (v6 != 0) {\n                    // 0x402000\n                    return v10 > v6 ? v6 : v10;\n                }\n                goto lab_0x401f92;\n            }\n        }\n        case 1: {\n            goto lab_0x40203b;\n        }\n        default: {\n            int32_t v11 = sysconf(_SC_THREAD_PROCESS_SHARED); // 0x401f19\n            int64_t v12 = v11; // 0x401f22\n            if (v11 == 1) {\n                // 0x401fe0\n                v12 = function_401dc0(83);\n                if (v12 == 0) {\n                    // 0x401f34\n                    return 1;\n                }\n            }\n            int64_t v13 = v12;\n            // 0x401f34\n            return v13 > 1 ? v13 : 1;\n        }\n    }\n  lab_0x40203b:\n    // 0x40203b\n    v2 = -1;\n    v3 = v1;\n    goto lab_0x401f92;\n  lab_0x401f92:;\n    uint64_t v14 = v2;\n    uint64_t v15 = function_401dc0(v3); // 0x401f92\n    if (v15 != 0) {\n        // 0x401f9c\n        return v15 > v14 ? v14 : v15;\n    }\n    int32_t v16 = sysconf(_SC_NPROCESSORS_CONF); // 0x401fb5\n    int64_t result = 1; // 0x401fc5\n    if (v16 >= 1) {\n        uint64_t v17 = (int64_t)v16; // 0x401fb5\n        result = v14 < v17 ? v14 : v17;\n    }\n    // 0x401f34\n    return result;\n}\n"
        },
        {
            "funcName": "function_402050",
            "funcStartAddr": "402050",
            "funcEndAddr": "4020e9",
            "decompiledFuncCode": "int64_t function_402050(int64_t str) {\n    // 0x402050\n    if (str == 0) {\n        // 0x4020c9\n        fwrite((int64_t *)\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 55, g30);\n        abort();\n        // UNREACHABLE\n    }\n    char * found_char_pos = strrchr((char *)str, 47); // 0x40205e\n    int64_t result = (int64_t)found_char_pos; // 0x40205e\n    if (found_char_pos == NULL) {\n        // 0x4020b9\n        g35 = str;\n        g29 = str;\n        return result;\n    }\n    int64_t v1 = result + 1; // 0x402068\n    if (v1 - str < 7) {\n        // 0x4020b9\n        g35 = str;\n        g29 = str;\n        return result;\n    }\n    // 0x402078\n    bool v2; // 0x402050\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)\"/.libs/\"; // 0x402050\n    int64_t v5 = result - 6; // 0x402050\n    int64_t v6 = 7; // 0x402086\n    unsigned char v7 = *(char *)v5; // 0x402086\n    char v8 = *(char *)v4; // 0x402086\n    char v9 = v8; // 0x402086\n    bool v10 = false; // 0x402086\n    while (v7 == v8) {\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"lt-\"; // 0x402090\n    int64_t v13 = v1; // 0x402090\n    int64_t v14 = 3; // 0x402090\n    if ((v7 >= v11 && !v10) != v7 < v11) {\n        // 0x4020b9\n        g35 = str;\n        g29 = str;\n        return result;\n    }\n    unsigned char v15 = *(char *)v13; // 0x4020a2\n    char v16 = *(char *)v12; // 0x4020a2\n    char v17 = v16; // 0x4020a2\n    bool v18 = false; // 0x4020a2\n    while (v15 == v16) {\n        // 0x402092\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    int64_t v20 = v1; // 0x4020ac\n    if ((v15 >= v19 && !v18) == v15 < v19) {\n        // 0x4020ae\n        v20 = result + 4;\n        g27 = v20;\n    }\n    // 0x4020b9\n    g35 = v20;\n    g29 = v20;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4020f0",
            "funcStartAddr": "4020f0",
            "funcEndAddr": "4021e2",
            "decompiledFuncCode": "int64_t function_4020f0(int64_t a1, int64_t a2) {\n    char * v1 = dcgettext(NULL, (char *)a1, 5); // 0x402104\n    int64_t result = (int64_t)v1; // 0x402104\n    if (result != a1) {\n        // 0x402111\n        return result;\n    }\n    int64_t v2 = function_405910(); // 0x402120\n    char v3 = *(char *)v2 & -33;\n    int64_t result2; // 0x4021d6\n    if (v3 == 85) {\n        // 0x402130\n        if ((*(char *)(v2 + 1) & -33) != 84 || (*(char *)(v2 + 2) & -33) != 70 || *(char *)(v2 + 3) != 45 || *(char *)(v2 + 4) != 56 || *(char *)(v2 + 5) != 0) {\n            // 0x4021c8\n            result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n            return result2;\n        }\n        char v4 = *v1; // 0x40215e\n        int64_t result3 = v4 != 96 ? (int64_t)&g4 : (int64_t)&g7; // 0x40216b\n        // 0x402111\n        return result3;\n    }\n    if (v3 != 71 || (*(char *)(v2 + 1) & -33) != 66 || *(char *)(v2 + 2) != 49 || *(char *)(v2 + 3) != 56 || *(char *)(v2 + 4) != 48 || *(char *)(v2 + 5) != 51 || *(char *)(v2 + 6) != 48 || *(char *)(v2 + 7) != 0) {\n        // 0x4021c8\n        result2 = (int32_t)a2 != 9 ? (int64_t)&g8 : (int64_t)&g3;\n        return result2;\n    }\n    char v5 = *v1; // 0x4021ad\n    int64_t result4 = v5 != 96 ? (int64_t)&g5 : (int64_t)&g6; // 0x4021ba\n    // 0x402111\n    return result4;\n}\n"
        },
        {
            "funcName": "function_4021f0",
            "funcStartAddr": "4021f0",
            "funcEndAddr": "402247",
            "decompiledFuncCode": "int64_t function_4021f0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int32_t a6) {\n    // 0x4021f0\n    __ctype_get_mb_cur_max();\n    if ((uint32_t)(int32_t)a5 < 11) {\n        // 0x402238\n        return a5 & 0xffffffff;\n    }\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_402247",
            "funcStartAddr": "402247",
            "funcEndAddr": "403411",
            "decompiledFuncCode": "int64_t function_402247(int64_t a1, int64_t a2, int64_t a3, int64_t str) {\n    int64_t v1 = str + 1;\n    int64_t v2 = 0; // 0x402291\n    int64_t v3 = 0; // 0x402291\n    int64_t v4; // 0x402247\n    int64_t v5; // 0x402247\n    int64_t v6; // 0x402247\n    int64_t v7; // 0x402247\n    int64_t v8; // 0x402247\n    int64_t v9; // 0x402247\n    int64_t v10; // 0x402247\n    int64_t v11; // 0x402247\n    int64_t v12; // 0x402247\n    int64_t v13; // 0x402247\n    int64_t v14; // 0x402247\n    int64_t v15; // 0x402247\n    int64_t v16; // 0x402247\n    int64_t v17; // 0x402247\n    int64_t v18; // 0x402247\n    int64_t result; // 0x402247\n    int64_t v19; // 0x402247\n    int32_t wc; // bp+132, 0x402247\n    int64_t ps; // bp+136, 0x402247\n    char v20; // 0x402800\n    int64_t v21; // 0x402800\n    int64_t v22; // 0x402ba8\n    int64_t v23; // 0x402247\n    int64_t v24; // 0x402bc7\n    int32_t v25; // 0x402247\n    while (true) {\n      lab_0x402298_2:\n        // 0x402298\n        v12 = v11;\n        v8 = v7;\n        v15 = v14;\n        result = v2;\n        int64_t v26 = v3; // 0x402247\n        int64_t v27; // 0x4022cc\n        while (true) {\n          lab_0x402298:\n            // 0x402298\n            v5 = v26;\n            bool v28 = v15 == v5; // 0x4022a3\n            if (v15 == -1) {\n                // 0x4022a5\n                v28 = *(char *)(v5 + str) == 0;\n            }\n            // 0x4022b3\n            if (v28) {\n                // break (via goto) -> 0x402a18\n                goto lab_0x402a18;\n            }\n            // 0x4022bc\n            v27 = v5 + str;\n            v20 = *(char *)v27;\n            v21 = v20;\n            g48 = v21;\n            v16 = v15;\n            v9 = v8;\n            v13 = v12;\n            v4 = v15;\n            v6 = v8;\n            v10 = v12;\n            switch (v20) {\n                case 0: {\n                    // 0x4028ab\n                    if (v25 % 2 == 0) {\n                        goto lab_0x4023f1;\n                    }\n                    // 0x402ccd\n                    v26 = v5 + 1;\n                    goto lab_0x402298;\n                }\n                case 7: {\n                    goto lab_0x4023f1;\n                }\n                case 8: {\n                    goto lab_0x4023f1;\n                }\n                case 9: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 10: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 11: {\n                    goto lab_0x4023f1;\n                }\n                case 12: {\n                    goto lab_0x4023f1;\n                }\n                case 13: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 32: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 33: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 34: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 35: {\n                    goto lab_0x4023bd;\n                }\n                case 36: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 37: {\n                    goto lab_0x4023f1;\n                }\n                case 38: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 39: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 40: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 41: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 42: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 43: {\n                    goto lab_0x4023f1;\n                }\n                case 44: {\n                    goto lab_0x4023f1;\n                }\n                case 45: {\n                    goto lab_0x4023f1;\n                }\n                case 46: {\n                    goto lab_0x4023f1;\n                }\n                case 47: {\n                    goto lab_0x4023f1;\n                }\n                case 48: {\n                    goto lab_0x4023f1;\n                }\n                case 49: {\n                    goto lab_0x4023f1;\n                }\n                case 50: {\n                    goto lab_0x4023f1;\n                }\n                case 51: {\n                    goto lab_0x4023f1;\n                }\n                case 52: {\n                    goto lab_0x4023f1;\n                }\n                case 53: {\n                    goto lab_0x4023f1;\n                }\n                case 54: {\n                    goto lab_0x4023f1;\n                }\n                case 55: {\n                    goto lab_0x4023f1;\n                }\n                case 56: {\n                    goto lab_0x4023f1;\n                }\n                case 57: {\n                    goto lab_0x4023f1;\n                }\n                case 58: {\n                    goto lab_0x4023f1;\n                }\n                case 59: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 60: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 61: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 62: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 63: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 65: {\n                    goto lab_0x4023f1;\n                }\n                case 66: {\n                    goto lab_0x4023f1;\n                }\n                case 67: {\n                    goto lab_0x4023f1;\n                }\n                case 68: {\n                    goto lab_0x4023f1;\n                }\n                case 69: {\n                    goto lab_0x4023f1;\n                }\n                case 70: {\n                    goto lab_0x4023f1;\n                }\n                case 71: {\n                    goto lab_0x4023f1;\n                }\n                case 72: {\n                    goto lab_0x4023f1;\n                }\n                case 73: {\n                    goto lab_0x4023f1;\n                }\n                case 74: {\n                    goto lab_0x4023f1;\n                }\n                case 75: {\n                    goto lab_0x4023f1;\n                }\n                case 76: {\n                    goto lab_0x4023f1;\n                }\n                case 77: {\n                    goto lab_0x4023f1;\n                }\n                case 78: {\n                    goto lab_0x4023f1;\n                }\n                case 79: {\n                    goto lab_0x4023f1;\n                }\n                case 80: {\n                    goto lab_0x4023f1;\n                }\n                case 81: {\n                    goto lab_0x4023f1;\n                }\n                case 82: {\n                    goto lab_0x4023f1;\n                }\n                case 83: {\n                    goto lab_0x4023f1;\n                }\n                case 84: {\n                    goto lab_0x4023f1;\n                }\n                case 85: {\n                    goto lab_0x4023f1;\n                }\n                case 86: {\n                    goto lab_0x4023f1;\n                }\n                case 87: {\n                    goto lab_0x4023f1;\n                }\n                case 88: {\n                    goto lab_0x4023f1;\n                }\n                case 89: {\n                    goto lab_0x4023f1;\n                }\n                case 90: {\n                    goto lab_0x4023f1;\n                }\n                case 91: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 92: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 93: {\n                    goto lab_0x4023f1;\n                }\n                case 94: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 95: {\n                    goto lab_0x4023f1;\n                }\n                case 96: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 97: {\n                    goto lab_0x4023f1;\n                }\n                case 98: {\n                    goto lab_0x4023f1;\n                }\n                case 99: {\n                    goto lab_0x4023f1;\n                }\n                case 100: {\n                    goto lab_0x4023f1;\n                }\n                case 101: {\n                    goto lab_0x4023f1;\n                }\n                case 102: {\n                    goto lab_0x4023f1;\n                }\n                case 103: {\n                    goto lab_0x4023f1;\n                }\n                case 104: {\n                    goto lab_0x4023f1;\n                }\n                case 105: {\n                    goto lab_0x4023f1;\n                }\n                case 106: {\n                    goto lab_0x4023f1;\n                }\n                case 107: {\n                    goto lab_0x4023f1;\n                }\n                case 108: {\n                    goto lab_0x4023f1;\n                }\n                case 109: {\n                    goto lab_0x4023f1;\n                }\n                case 110: {\n                    goto lab_0x4023f1;\n                }\n                case 111: {\n                    goto lab_0x4023f1;\n                }\n                case 112: {\n                    goto lab_0x4023f1;\n                }\n                case 113: {\n                    goto lab_0x4023f1;\n                }\n                case 114: {\n                    goto lab_0x4023f1;\n                }\n                case 115: {\n                    goto lab_0x4023f1;\n                }\n                case 116: {\n                    goto lab_0x4023f1;\n                }\n                case 117: {\n                    goto lab_0x4023f1;\n                }\n                case 118: {\n                    goto lab_0x4023f1;\n                }\n                case 119: {\n                    goto lab_0x4023f1;\n                }\n                case 120: {\n                    goto lab_0x4023f1;\n                }\n                case 121: {\n                    goto lab_0x4023f1;\n                }\n                case 122: {\n                    goto lab_0x4023f1;\n                }\n                case 123: {\n                    goto lab_0x402395;\n                }\n                case 124: {\n                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                }\n                case 125: {\n                    goto lab_0x402395;\n                }\n                case 126: {\n                    goto lab_0x4023bd;\n                }\n                default: {\n                    goto lab_0x402795;\n                }\n            }\n        }\n      lab_0x402795:\n        if (v23 != 1) {\n            // 0x402b00\n            ps = 0;\n            int64_t len = v15; // 0x402b10\n            if (v15 == -1) {\n                // 0x402b12\n                len = strlen((char *)str);\n            }\n            // 0x402b3e\n            v22 = 0x100000000 * len >> 32;\n            v17 = 0;\n            while (true) {\n              lab_0x402b9f:\n                // 0x402b9f\n                v18 = v17;\n                uint64_t v29 = v18 + v5; // 0x402ba4\n                int64_t v30 = v29 + str;\n                v24 = function_4057d0(&wc, v30, v22 - v29);\n                v19 = v18;\n                switch (v24) {\n                    case 0: {\n                        goto lab_0x40311a_2;\n                    }\n                    case -1: {\n                        goto lab_0x40311a_2;\n                    }\n                    case -2: {\n                        // 0x4031fd\n                        v19 = v18;\n                        if (v22 > v29) {\n                            // 0x403237\n                            v19 = v18;\n                            int64_t v31 = v18; // 0x40323a\n                            if (*(char *)v30 != 0) {\n                                int64_t v32 = v31 + 1; // 0x403247\n                                v19 = v32;\n                                while (v32 + v5 < v22) {\n                                    // 0x403240\n                                    v19 = v32;\n                                    v31 = v32;\n                                    if (*(char *)(v32 + v27) == 0) {\n                                        // break -> 0x40311a\n                                        break;\n                                    }\n                                    v32 = v31 + 1;\n                                    v19 = v32;\n                                }\n                            }\n                        }\n                        goto lab_0x40311a_2;\n                    }\n                    case 1: {\n                        goto lab_0x402b70;\n                    }\n                    default: {\n                        int64_t v33 = v29 + v1; // 0x402c1c\n                        char v34 = *(char *)v33; // 0x402c2d\n                        unsigned char v35; // 0x402247\n                        if (v34 < 125) {\n                            // 0x402c38\n                            v35 = (v34 + 37) % 64;\n                            if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                // 0x402c4f\n                                v4 = v22;\n                                v6 = 0x100000000 * v8 >> 32;\n                                v10 = 0x100000000 * v12 >> 32;\n                                return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                            }\n                        }\n                        // 0x402c20\n                        v33++;\n                        while (v30 + v24 != v33) {\n                            // 0x402c2d\n                            v34 = *(char *)v33;\n                            if (v34 < 125) {\n                                // 0x402c38\n                                v35 = (v34 + 37) % 64;\n                                if (v35 != 0 != ((1 << (int64_t)v35 & 0x20000002b) == 0)) {\n                                    // 0x402c4f\n                                    v4 = v22;\n                                    v6 = 0x100000000 * v8 >> 32;\n                                    v10 = 0x100000000 * v12 >> 32;\n                                    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n                                }\n                            }\n                            // 0x402c20\n                            v33++;\n                        }\n                        goto lab_0x402b70;\n                    }\n                }\n            }\n            goto lab_0x40311a_2;\n        } else {\n            // 0x4027e4\n            __ctype_b_loc();\n            v16 = 0x100000000000000 * v15 >> 56;\n            v9 = v8;\n            v13 = v12;\n            goto lab_0x4023f1;\n        }\n    }\n  lab_0x402a18:\n    // 0x402a18\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (result != 0) {\n        // 0x40331a\n        if (v8 > result) {\n            // 0x403323\n            *(char *)(v12 + result) = 0;\n        }\n        // 0x402647\n        return result;\n    }\n    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x4023f1:;\n    int64_t v36 = v13;\n    int64_t v37 = v9;\n    int64_t v38 = v16;\n    if (v23 != 0) {\n        // 0x402400\n        v4 = v38;\n        v6 = v37;\n        v10 = v36;\n        if ((*(int32_t *)((v21 / 8 & 28) + v23) & 1 << (int32_t)(v20 % 32)) != 0) {\n            goto lab_0x40260a_2;\n        }\n    }\n    int64_t v39 = result; // 0x402501\n    char v40 = v20; // 0x402501\n    int64_t v41 = v38; // 0x402501\n    v3 = v5 + 1;\n    int64_t v42 = v37; // 0x402501\n    int64_t v43 = v36; // 0x402501\n    goto lab_0x40247d;\n  lab_0x40260a_2:\n    // 0x402647\n    return function_4021f0(v10, v6, str, v4, 2, v25 & -3);\n  lab_0x40311a_2:;\n    uint64_t v46 = v19;\n    int64_t v47 = 0x100000000 * v8 >> 32;\n    int64_t v48 = 0x100000000 * v12 >> 32;\n    v16 = v22;\n    v9 = v47;\n    v13 = v48;\n    if (v46 < 2) {\n        goto lab_0x4023f1;\n    } else {\n        uint64_t v49 = v46 + v5; // 0x402cee\n        int64_t v50 = v5 + 1; // 0x402dd1\n        v39 = result;\n        v40 = v20;\n        v41 = v22;\n        v3 = v50;\n        v42 = v47;\n        v43 = v48;\n        int64_t v51 = v50; // 0x402dd8\n        char v52 = v20; // 0x402dd8\n        int64_t v53 = result; // 0x402dd8\n        if (v50 < v49) {\n            uint64_t v54 = v53;\n            if (v47 > v54) {\n                // 0x402da1\n                *(char *)(v54 + v48) = v52;\n            }\n            char v55 = *(char *)(v51 + str); // 0x402da5\n            int64_t v56 = v54 + 1; // 0x402daa\n            int64_t v57 = v51 + 1; // 0x402dd1\n            v39 = v56;\n            v40 = v55;\n            v41 = v22;\n            v3 = v57;\n            v42 = v47;\n            v43 = v48;\n            v51 = v57;\n            while (v57 < v49) {\n                // 0x402d9c\n                v54 = v56;\n                if (v47 > v54) {\n                    // 0x402da1\n                    *(char *)(v54 + v48) = v55;\n                }\n                // 0x402da5\n                v55 = *(char *)(v51 + str);\n                v56 = v54 + 1;\n                v57 = v51 + 1;\n                v39 = v56;\n                v40 = v55;\n                v41 = v22;\n                v3 = v57;\n                v42 = v47;\n                v43 = v48;\n                v51 = v57;\n            }\n        }\n        goto lab_0x40247d;\n    }\n  lab_0x402b70:\n    // 0x402b70\n    iswprint(wc);\n    int64_t v58 = v24 + v18; // 0x402b8f\n    int32_t v59 = mbsinit((struct _TYPEDEF___mbstate_t *)&ps); // 0x402b92\n    v17 = v58;\n    v19 = v58;\n    if (v59 != 0) {\n        // break -> 0x40311a\n        goto lab_0x40311a_2;\n    }\n    goto lab_0x402b9f;\n  lab_0x4023bd:\n    // 0x4023bd\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    v4 = v15;\n    v6 = v8;\n    v10 = v12;\n    if (v5 == 0) {\n        goto lab_0x40260a_2;\n    }\n    goto lab_0x4023f1;\n  lab_0x402395:;\n    bool v60 = v15 == 1; // 0x4023a0\n    if (v15 == -1) {\n        // 0x4023a2\n        v60 = *(char *)v1 == 0;\n    }\n    // 0x4023ae\n    v16 = v15;\n    v9 = v8;\n    v13 = v12;\n    if (!v60) {\n        goto lab_0x4023f1;\n    } else {\n        goto lab_0x4023bd;\n    }\n  lab_0x40247d:;\n    int64_t v44 = v43;\n    uint64_t v45 = v39;\n    if (v45 < v42) {\n        // 0x402482\n        *(char *)(v44 + v45) = v40;\n    }\n    // 0x402486\n    v2 = v45 + 1;\n    v14 = v41;\n    v7 = v42;\n    v11 = v44;\n    goto lab_0x402298_2;\n}\n"
        },
        {
            "funcName": "function_403420",
            "funcStartAddr": "403420",
            "funcEndAddr": "4035be",
            "decompiledFuncCode": "int64_t function_403420(int64_t a1, int64_t a2, int64_t a3, int64_t * a4) {\n    int64_t v1 = 0x100000000 * a1;\n    uint64_t v2 = v1 >> 32; // 0x403422\n    int32_t * v3 = __errno_location(); // 0x40343c\n    int64_t v4 = (int64_t)g20; // 0x403441\n    int32_t v5 = *v3; // 0x40344b\n    int64_t v6 = v4; // 0x403461\n    if (v2 >= (int64_t)*(int32_t *)&g23) {\n        if ((int32_t)v2 == 0x7fffffff) {\n            // 0x4035b9\n            function_404480(a1);\n            // UNREACHABLE\n        }\n        int64_t v7 = v2 + 1; // 0x403470\n        int64_t v8 = 0x100000000 * v7 >> 28; // 0x403477\n        int64_t v9; // 0x403420\n        if (g20 == &g21) {\n            int64_t v10 = function_404290(0, v8); // 0x40359a\n            int128_t v11 = __asm_movdqa(*(int128_t *)&g21); // 0x40359f\n            *(int64_t *)&g20 = v10;\n            __asm_movups(*(int128_t *)v10, v11);\n            v9 = v10;\n        } else {\n            int64_t v12 = function_404290(v4, v8); // 0x40348b\n            *(int64_t *)&g20 = v12;\n            v9 = v12;\n        }\n        // 0x40349a\n        v6 = v9;\n        int32_t v13 = *(int32_t *)&g23; // 0x40349a\n        int32_t v14 = v7; // 0x4034a1\n        memset((int64_t *)(16 * (int64_t)v13 + v6), 0, 16 * (v14 - v13));\n        *(int32_t *)&g23 = v14;\n    }\n    int64_t v15 = v6 + (v1 >> 28); // 0x4034d1\n    int32_t v16 = *(int32_t *)((int64_t)a4 + 4) | 1; // 0x4034db\n    int64_t * v17 = (int64_t *)v15; // 0x4034de\n    uint64_t v18 = *v17; // 0x4034de\n    int64_t * v19 = (int64_t *)(v15 + 8); // 0x4034e1\n    int64_t result = *v19; // 0x4034e1\n    int64_t v20; // 0x403420\n    uint64_t v21 = function_4021f0(result, v18, a2, a3, v20 & 0xffffffff, v16); // 0x403504\n    if (v18 > v21) {\n        // 0x40357b\n        *v3 = v5;\n        return result;\n    }\n    int64_t v22 = v21 + 1; // 0x403517\n    *v17 = v22;\n    if (result != (int64_t)&g36) {\n        // 0x403527\n        free((int64_t *)result);\n    }\n    int64_t result2 = function_404230(v22); // 0x403541\n    *v19 = result2;\n    int64_t v23; // 0x403420\n    function_4021f0(result2, v22, a2, a3, (int64_t)*(int32_t *)&v23, v16);\n    // 0x40357b\n    *v3 = v5;\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4035c0",
            "funcStartAddr": "4035c0",
            "funcEndAddr": "4035f4",
            "decompiledFuncCode": "int64_t function_4035c0(int64_t a1) {\n    int32_t * v1 = __errno_location(); // 0x4035c7\n    int64_t result = function_404430(a1 == 0 ? (int64_t)&g37 : a1, 56); // 0x4035e6\n    return result;\n}\n"
        },
        {
            "funcName": "function_403600",
            "funcStartAddr": "403600",
            "funcEndAddr": "40360f",
            "decompiledFuncCode": "int64_t function_403600(int64_t a1) {\n    uint32_t result = *(int32_t *)(a1 == 0 ? (int64_t)&g37 : a1); // 0x40360c\n    return result;\n}\n"
        },
        {
            "funcName": "function_403610",
            "funcStartAddr": "403610",
            "funcEndAddr": "40361f",
            "decompiledFuncCode": "int64_t function_403610(int64_t a1, int64_t a2) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g37 : a1; // 0x403618\n    *(int32_t *)v1 = (int32_t)a2;\n    return (int64_t)&g37;\n}\n"
        },
        {
            "funcName": "function_403620",
            "funcStartAddr": "403620",
            "funcEndAddr": "403653",
            "decompiledFuncCode": "int64_t function_403620(int64_t a1, uint64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g37 + 8 : a1 + 8; // 0x403639\n    int32_t * v2 = (int32_t *)((a2 / 8 & 28) + v1); // 0x40363e\n    uint32_t v3 = *v2; // 0x40363e\n    uint32_t v4 = (int32_t)a2 % 32; // 0x403642\n    uint32_t v5 = v3 >> v4;\n    *v2 = (v5 ^ (int32_t)a3) % 2 << v4 ^ v3;\n    return v5 % 2;\n}\n"
        },
        {
            "funcName": "function_403660",
            "funcStartAddr": "403660",
            "funcEndAddr": "403673",
            "decompiledFuncCode": "int64_t function_403660(int64_t a1, int64_t a2) {\n    int32_t * v1 = (int32_t *)(a1 == 0 ? (int64_t)&g37 + 4 : a1 + 4); // 0x40366c\n    *v1 = (int32_t)a2;\n    return (int64_t)*v1;\n}\n"
        },
        {
            "funcName": "function_403680",
            "funcStartAddr": "403680",
            "funcEndAddr": "4036ab",
            "decompiledFuncCode": "int64_t function_403680(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = a1 == 0 ? (int64_t)&g37 : a1; // 0x403688\n    *(int32_t *)v1 = 10;\n    if (a2 == 0 || a3 == 0) {\n        // 0x4036a5\n        abort();\n        // UNREACHABLE\n    }\n    // 0x40369c\n    *(int64_t *)(v1 + 40) = a2;\n    *(int64_t *)(v1 + 48) = a3;\n    return (int64_t)&g37;\n}\n"
        },
        {
            "funcName": "function_4036b0",
            "funcStartAddr": "4036b0",
            "funcEndAddr": "403722",
            "decompiledFuncCode": "int64_t function_4036b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int64_t v1 = a5 == 0 ? (int64_t)&g37 : a5; // 0x4036d2\n    int32_t * v2 = __errno_location(); // 0x4036db\n    uint32_t v3 = *(int32_t *)v1; // 0x4036fb\n    int64_t result = function_4021f0(a1, a2, a3, a4, (int64_t)v3, *(int32_t *)(v1 + 4)); // 0x40370a\n    return result;\n}\n"
        },
        {
            "funcName": "function_403730",
            "funcStartAddr": "403730",
            "funcEndAddr": "403811",
            "decompiledFuncCode": "int64_t function_403730(int64_t a1, int64_t a2, int32_t a3, int64_t a4) {\n    int64_t v1 = a4 == 0 ? (int64_t)&g37 : a4; // 0x403752\n    int32_t * v2 = __errno_location(); // 0x403758\n    int32_t v3 = *(int32_t *)(v1 + 4) | (int32_t)(a3 == 0); // 0x403777\n    int32_t * v4 = (int32_t *)v1; // 0x40377a\n    int64_t v5 = function_4021f0(0, 0, a1, a2, (int64_t)*v4, v3); // 0x403795\n    int64_t v6 = v5 + 1; // 0x40379a\n    int64_t result = function_404230(v6); // 0x4037af\n    function_4021f0(result, v6, a1, a2, (int64_t)*v4, v3);\n    if (a3 != 0) {\n        // 0x4037f4\n        *(int64_t *)(int64_t)a3 = v5;\n    }\n    // 0x4037fd\n    return result;\n}\n"
        },
        {
            "funcName": "function_403820",
            "funcStartAddr": "403820",
            "funcEndAddr": "40382a",
            "decompiledFuncCode": "int64_t function_403820(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403820\n    return function_403730(a1, a2, 0, a3);\n}\n"
        },
        {
            "funcName": "function_403830",
            "funcStartAddr": "403830",
            "funcEndAddr": "4038c5",
            "decompiledFuncCode": "int64_t function_403830(void) {\n    uint32_t v1 = *(int32_t *)&g23; // 0x403830\n    int64_t v2 = v1; // 0x403830\n    int64_t v3 = v2; // 0x403844\n    if (v1 >= 2) {\n        int64_t v4 = &g23;\n        int64_t v5 = v4 + 16; // 0x403863\n        free((int64_t *)*(int64_t *)v4);\n        v3 = &g49;\n        while (v5 != (int64_t)g20 + 40 + (16 * v2 + 0xfffffffe0 & 0xffffffff0)) {\n            // 0x403860\n            v4 = v5;\n            v5 = v4 + 16;\n            free((int64_t *)*(int64_t *)v4);\n            v3 = &g49;\n        }\n    }\n    int64_t v6 = v3; // 0x40387d\n    if (g21 != 0x6092c0) {\n        // 0x40387f\n        free((int64_t *)g21);\n        g21 = 256;\n        *(int64_t *)&g22 = (int64_t)&g36;\n        v6 = &g49;\n    }\n    int64_t result = v6; // 0x4038a1\n    if (g20 != &g21) {\n        // 0x4038a3\n        free(g20);\n        *(int64_t *)&g20 = (int64_t)&g21;\n        result = &g49;\n    }\n    // 0x4038b6\n    *(int32_t *)&g23 = 1;\n    return result;\n}\n"
        },
        {
            "funcName": "function_4038d0",
            "funcStartAddr": "4038d0",
            "funcEndAddr": "4038e1",
            "decompiledFuncCode": "int64_t function_4038d0(void) {\n    // 0x4038d0\n    int64_t v1; // 0x4038d0\n    return function_403420(v1, v1, -1, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_4038f0",
            "funcStartAddr": "4038f0",
            "funcEndAddr": "4038fa",
            "decompiledFuncCode": "int64_t function_4038f0(void) {\n    // 0x4038f0\n    int64_t v1; // 0x4038f0\n    return function_403420(v1, v1, v1, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_403900",
            "funcStartAddr": "403900",
            "funcEndAddr": "403916",
            "decompiledFuncCode": "int64_t function_403900(int64_t a1) {\n    // 0x403900\n    return function_403420(0, a1, -1, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_403920",
            "funcStartAddr": "403920",
            "funcEndAddr": "403932",
            "decompiledFuncCode": "int64_t function_403920(int64_t a1, int64_t a2) {\n    // 0x403920\n    return function_403420(0, a1, a2, (int64_t *)&g37);\n}\n"
        },
        {
            "funcName": "function_403940",
            "funcStartAddr": "403940",
            "funcEndAddr": "4039a8",
            "decompiledFuncCode": "int64_t function_403940(int32_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403950\n    return function_403420((int64_t)a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_4039b0",
            "funcStartAddr": "4039b0",
            "funcEndAddr": "403a14",
            "decompiledFuncCode": "int64_t function_4039b0(int32_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x4039c0\n    return function_403420((int64_t)a1, a3, a4, &v1);\n}\n"
        },
        {
            "funcName": "function_403a20",
            "funcStartAddr": "403a20",
            "funcEndAddr": "403a2c",
            "decompiledFuncCode": "int64_t function_403a20(int64_t a1, int64_t a2) {\n    // 0x403a20\n    return function_403940(0, a1 & 0xffffffff, a2);\n}\n"
        },
        {
            "funcName": "function_403a30",
            "funcStartAddr": "403a30",
            "funcEndAddr": "403a3f",
            "decompiledFuncCode": "int64_t function_403a30(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403a30\n    return function_4039b0(0, a1 & 0xffffffff, a2, a3);\n}\n"
        },
        {
            "funcName": "function_403a40",
            "funcStartAddr": "403a40",
            "funcEndAddr": "403ab0",
            "decompiledFuncCode": "int64_t function_403a40(int64_t a1, int64_t a2, uint64_t a3) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g37); // 0x403a4d\n    int128_t v2 = __asm_movdqa(g38); // 0x403a55\n    int128_t v3 = __asm_movdqa(g39); // 0x403a5d\n    int64_t v4 = __asm_movaps(v1); // bp-72, 0x403a72\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int32_t * v5 = (int32_t *)((a3 / 8 & 28) + 8 + (int64_t)&v4); // 0x403a88\n    uint32_t v6 = *v5; // 0x403a88\n    uint32_t v7 = (int32_t)a3 % 32; // 0x403a8d\n    *v5 = ((v6 >> v7) % 2 ^ 1) << v7 ^ v6;\n    return function_403420(0, a1, a2, &v4);\n}\n"
        },
        {
            "funcName": "function_403ab0",
            "funcStartAddr": "403ab0",
            "funcEndAddr": "403abd",
            "decompiledFuncCode": "int64_t function_403ab0(int64_t a1, int64_t a2) {\n    // 0x403ab0\n    return function_403a40(a1, -1, 0x100000000000000 * a2 >> 56);\n}\n"
        },
        {
            "funcName": "function_403ac0",
            "funcStartAddr": "403ac0",
            "funcEndAddr": "403ad1",
            "decompiledFuncCode": "int64_t function_403ac0(int64_t a1) {\n    // 0x403ac0\n    return function_403a40(a1, -1, 58);\n}\n"
        },
        {
            "funcName": "function_403ae0",
            "funcStartAddr": "403ae0",
            "funcEndAddr": "403aea",
            "decompiledFuncCode": "int64_t function_403ae0(void) {\n    // 0x403ae0\n    int64_t v1; // 0x403ae0\n    return function_403a40(v1, v1, 58);\n}\n"
        },
        {
            "funcName": "function_403af0",
            "funcStartAddr": "403af0",
            "funcEndAddr": "403b5e",
            "decompiledFuncCode": "int64_t function_403af0(int64_t a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 0x100000000 * a2 >> 32; // bp-72, 0x403b0a\n    return function_403420(a1, a3, -1, &v1);\n}\n"
        },
        {
            "funcName": "function_403b60",
            "funcStartAddr": "403b60",
            "funcEndAddr": "403bcc",
            "decompiledFuncCode": "int64_t function_403b60(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5) {\n    int128_t v1 = __asm_movdqa(*(int128_t *)&g37); // 0x403b67\n    int128_t v2 = __asm_movdqa(g38); // 0x403b6f\n    int128_t v3 = __asm_movdqa(g39); // 0x403b77\n    __asm_movaps(v1);\n    __asm_movaps(v2);\n    __asm_movaps(v3);\n    int64_t v4 = 10; // bp-72, 0x403b99\n    if (a2 == 0 || a3 == 0) {\n        // 0x403bc7\n        abort();\n        // UNREACHABLE\n    }\n    // 0x403baa\n    return function_403420(a1, a4, a5, &v4);\n}\n"
        },
        {
            "funcName": "function_403bd0",
            "funcStartAddr": "403bd0",
            "funcEndAddr": "403bd9",
            "decompiledFuncCode": "int64_t function_403bd0(void) {\n    // 0x403bd0\n    int64_t v1; // 0x403bd0\n    return function_403b60(v1, v1, v1, v1, -1);\n}\n"
        },
        {
            "funcName": "function_403be0",
            "funcStartAddr": "403be0",
            "funcEndAddr": "403bf7",
            "decompiledFuncCode": "int64_t function_403be0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x403be0\n    return function_403b60(0, a1, a2, a3, -1);\n}\n"
        },
        {
            "funcName": "function_403c00",
            "funcStartAddr": "403c00",
            "funcEndAddr": "403c13",
            "decompiledFuncCode": "int64_t function_403c00(int64_t a1, int64_t a2, int64_t a3, int64_t a4) {\n    // 0x403c00\n    return function_403b60(0, a1, a2, a3, a4);\n}\n"
        },
        {
            "funcName": "function_403c20",
            "funcStartAddr": "403c20",
            "funcEndAddr": "403c2a",
            "decompiledFuncCode": "int64_t function_403c20(void) {\n    // 0x403c20\n    int64_t v1; // 0x403c20\n    return function_403420(v1, v1, v1, &g19);\n}\n"
        },
        {
            "funcName": "function_403c30",
            "funcStartAddr": "403c30",
            "funcEndAddr": "403c42",
            "decompiledFuncCode": "int64_t function_403c30(int64_t a1, int64_t a2) {\n    // 0x403c30\n    return function_403420(0, a1, a2, &g19);\n}\n"
        },
        {
            "funcName": "function_403c50",
            "funcStartAddr": "403c50",
            "funcEndAddr": "403c61",
            "decompiledFuncCode": "int64_t function_403c50(void) {\n    // 0x403c50\n    int64_t v1; // 0x403c50\n    return function_403420(v1, v1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_403c70",
            "funcStartAddr": "403c70",
            "funcEndAddr": "403c86",
            "decompiledFuncCode": "int64_t function_403c70(int64_t a1) {\n    // 0x403c70\n    return function_403420(0, a1, -1, &g19);\n}\n"
        },
        {
            "funcName": "function_403c90",
            "funcStartAddr": "403c90",
            "funcEndAddr": "40406d",
            "decompiledFuncCode": "int64_t function_403c90(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, uint64_t a6, int64_t a7) {\n    struct _IO_FILE * v1 = (struct _IO_FILE *)a1;\n    if (a2 == 0) {\n        // 0x403d28\n        __fprintf_chk(v1, 1, \"%s %s\\n\", (char *)a3, (char *)a4);\n    } else {\n        // 0x403cac\n        __fprintf_chk(v1, 1, \"%s (%s) %s\\n\", (char *)a2, (char *)a3, (char *)a4);\n    }\n    // 0x403cc6\n    __fprintf_chk(v1, 1, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(NULL, \"(C)\", 5), 2017);\n    int32_t result = fputs_unlocked(dcgettext(NULL, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\", 5), v1); // 0x403d0b\n    if (a6 < 10) {\n        // 0x403d1a\n        return result;\n    }\n    char * v2 = dcgettext(NULL, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\", 5); // 0x403e12\n    return __fprintf_chk(v1, 1, v2);\n}\n"
        },
        {
            "funcName": "function_404070",
            "funcStartAddr": "404070",
            "funcEndAddr": "404090",
            "decompiledFuncCode": "int64_t function_404070(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x404070\n    if (a5 == 0) {\n        // 0x40408b\n        return function_403c90(a1, a2, a3, a4, a5, 0, (int64_t)&g49);\n    }\n    int64_t v1 = 0; // 0x404077\n    v1++;\n    int64_t v2 = v1; // 0x404089\n    while (*(int64_t *)(8 * v1 + a5) != 0) {\n        // 0x404080\n        v1++;\n        v2 = v1;\n    }\n    // 0x40408b\n    return function_403c90(a1, a2, a3, a4, a5, v2, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_404090",
            "funcStartAddr": "404090",
            "funcEndAddr": "4040f0",
            "decompiledFuncCode": "int64_t function_404090(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    int64_t v1 = a5;\n    int64_t v2; // bp-88, 0x404090\n    int64_t v3 = &v2; // 0x404090\n    int64_t v4 = 0;\n    uint32_t v5 = (int32_t)a5; // 0x4040c3\n    int64_t v6; // 0x4040ad\n    int64_t * v7; // 0x4040cb\n    int64_t v8; // 0x4040cb\n    int64_t v9; // 0x4040d7\n    if (v5 < 48) {\n        // 0x4040a0\n        *(int32_t *)v1 = v5 + 8;\n        v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n        *(int64_t *)(8 * v4 + v3) = v6;\n        if (v6 == 0) {\n            // break -> 0x4040e3\n            break;\n        }\n    } else {\n        // 0x4040cb\n        v7 = (int64_t *)(v1 + 8);\n        v8 = *v7;\n        *v7 = v8 + 8;\n        v9 = *(int64_t *)v8;\n        *(int64_t *)(8 * v4 + v3) = v9;\n        if (v9 == 0) {\n            // break -> 0x4040e3\n            break;\n        }\n    }\n    int64_t v10 = 10; // 0x4040c1\n    while (v4 != 9) {\n        // 0x4040b9\n        v4++;\n        v5 = *(int32_t *)&v1;\n        if (v5 < 48) {\n            // 0x4040a0\n            *(int32_t *)v1 = v5 + 8;\n            v6 = *(int64_t *)(*(int64_t *)(v1 + 16) + (int64_t)v5);\n            *(int64_t *)(8 * v4 + v3) = v6;\n            v10 = v4;\n            if (v6 == 0) {\n                // break -> 0x4040e3\n                break;\n            }\n        } else {\n            // 0x4040cb\n            v7 = (int64_t *)(v1 + 8);\n            v8 = *v7;\n            *v7 = v8 + 8;\n            v9 = *(int64_t *)v8;\n            *(int64_t *)(8 * v4 + v3) = v9;\n            v10 = v4;\n            if (v9 == 0) {\n                // break -> 0x4040e3\n                break;\n            }\n        }\n        // 0x4040b9\n        v10 = 10;\n    }\n    // 0x4040e3\n    return function_403c90(a1, a2, a3, a4, v3, v10, (int64_t)&g49);\n}\n"
        },
        {
            "funcName": "function_4040f0",
            "funcStartAddr": "4040f0",
            "funcEndAddr": "4041ac",
            "decompiledFuncCode": "int64_t function_4040f0(int64_t a1, char * a2, char * a3, int64_t a4, char * a5, int32_t a6) {\n    // 0x4040f0\n    int64_t v1; // bp-168, 0x4040f0\n    int64_t v2 = (int64_t)&v1 + 32;\n    int64_t v3; // 0x4040f0\n    int64_t v4 = &v3;\n    int64_t v5 = 0;\n    int64_t v6 = 32;\n    int64_t v7; // 0x4040f0\n    int64_t v8; // 0x4040f0\n    int64_t v9; // bp-56, 0x4040f0\n    int64_t v10; // 0x404155\n    int64_t v11; // 0x404179\n    if ((int32_t)v6 < 48) {\n        // 0x404140\n        v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n        *(int64_t *)(8 * v5 + v2) = v10;\n        v8 = v6 + 8 & 0xffffffff;\n        v7 = v4;\n        if (v10 == 0) {\n            // break -> 0x404190\n            break;\n        }\n    } else {\n        // 0x404172\n        v11 = *(int64_t *)v4;\n        *(int64_t *)(8 * v5 + v2) = v11;\n        v8 = v6;\n        v7 = v4 + 8;\n        if (v11 == 0) {\n            // break -> 0x404190\n            break;\n        }\n    }\n    int64_t v12 = v5 + 1; // 0x40416a\n    int64_t v13 = 10; // 0x40416a\n    while (v5 != 9) {\n        // 0x40416c\n        v4 = v7;\n        v5 = v12;\n        v6 = v8;\n        if ((int32_t)v6 < 48) {\n            // 0x404140\n            v10 = *(int64_t *)((v6 & 0xffffffff) + (int64_t)&v9);\n            *(int64_t *)(8 * v5 + v2) = v10;\n            v8 = v6 + 8 & 0xffffffff;\n            v7 = v4;\n            v13 = v5;\n            if (v10 == 0) {\n                // break -> 0x404190\n                break;\n            }\n        } else {\n            // 0x404172\n            v11 = *(int64_t *)v4;\n            *(int64_t *)(8 * v5 + v2) = v11;\n            v8 = v6;\n            v7 = v4 + 8;\n            v13 = v5;\n            if (v11 == 0) {\n                // break -> 0x404190\n                break;\n            }\n        }\n        // 0x404162\n        v12 = v5 + 1;\n        v13 = 10;\n    }\n    // 0x404190\n    int64_t v14; // bp-136, 0x4040f0\n    int64_t result = function_403c90(a1, (int64_t)a2, (int64_t)a3, a4, (int64_t)&v14, v13, (int64_t)&g49); // 0x40419f\n    return result;\n}\n"
        },
        {
            "funcName": "function_4041b0",
            "funcStartAddr": "4041b0",
            "funcEndAddr": "404224",
            "decompiledFuncCode": "int64_t function_4041b0(int64_t a1) {\n    // 0x4041b0\n    __printf_chk(1, dcgettext(NULL, \"\\nReport bugs to: %s\\n\", 5));\n    __printf_chk(1, dcgettext(NULL, \"%s home page: <%s>\\n\", 5));\n    char * v1 = dcgettext(NULL, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\", 5); // 0x404213\n    return fputs_unlocked(v1, g28);\n}\n"
        },
        {
            "funcName": "function_404230",
            "funcStartAddr": "404230",
            "funcEndAddr": "40424a",
            "decompiledFuncCode": "int64_t function_404230(int64_t size) {\n    int64_t * mem = malloc((int32_t)size); // 0x404234\n    if (size != 0 != (mem == NULL)) {\n        // 0x404243\n        return (int64_t)mem;\n    }\n    // 0x404245\n    function_404480(size);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404250",
            "funcStartAddr": "404250",
            "funcEndAddr": "404271",
            "decompiledFuncCode": "int64_t function_404250(uint64_t a1, uint64_t a2) {\n    uint128_t v1 = (int128_t)a2 * (int128_t)a1; // 0x404253\n    int64_t v2 = v1; // 0x404253\n    if (v2 < 0) {\n        // 0x40426b\n        function_404480(v2);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x404269\n        return function_404230(v2);\n    }\n    // 0x40426b\n    function_404480(v2);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404280",
            "funcStartAddr": "404280",
            "funcEndAddr": "404282",
            "decompiledFuncCode": "int64_t function_404280(void) {\n    // 0x404280\n    int64_t v1; // 0x404280\n    return function_404230(v1);\n}\n"
        },
        {
            "funcName": "function_404290",
            "funcStartAddr": "404290",
            "funcEndAddr": "4042c6",
            "decompiledFuncCode": "int64_t function_404290(int64_t a1, int64_t a2) {\n    int64_t * v1 = (int64_t *)a1;\n    if (a2 == 0 == (a1 != 0)) {\n        // 0x4042b8\n        free(v1);\n        return (int32_t)&g49 ^ (int32_t)&g49;\n    }\n    int64_t * mem = realloc(v1, (int32_t)a2); // 0x4042a1\n    if (a2 != 0 != (mem == NULL)) {\n        // 0x4042b0\n        return (int64_t)mem;\n    }\n    // 0x4042c1\n    function_404480(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4042d0",
            "funcStartAddr": "4042d0",
            "funcEndAddr": "4042f1",
            "decompiledFuncCode": "int64_t function_4042d0(int64_t a1, uint64_t a2, uint64_t a3) {\n    uint128_t v1 = (int128_t)a3 * (int128_t)a2; // 0x4042d3\n    int64_t v2 = v1; // 0x4042d3\n    if (v2 < 0) {\n        // 0x4042eb\n        function_404480(a1);\n        // UNREACHABLE\n    }\n    if (v1 <= 0xffffffffffffffff) {\n        // 0x4042e9\n        return function_404290(a1, v2);\n    }\n    // 0x4042eb\n    function_404480(a1);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404300",
            "funcStartAddr": "404300",
            "funcEndAddr": "404386",
            "decompiledFuncCode": "int64_t function_404300(int64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5) {\n    if (a1 != 0) {\n        if (0x5555555555555554 / a3 <= a2) {\n            // 0x40435b\n            function_404480(a1);\n            // UNREACHABLE\n        }\n        int64_t v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404290(a1, v1 * a3);\n    }\n    int64_t v2 = a2; // 0x404343\n    if (a2 == 0) {\n        // 0x404368\n        v2 = 128 / a3 + (int64_t)(a3 >= 129);\n    }\n    uint128_t v3 = (int128_t)v2 * (int128_t)a3; // 0x404348\n    if ((int64_t)v3 > -1 != v3 <= 0xffffffffffffffff) {\n        // 0x40435b\n        function_404480(a1);\n        // UNREACHABLE\n    }\n    // 0x40432a\n    *(int64_t *)a2 = v2;\n    return function_404290(a1, v2 * a3);\n}\n"
        },
        {
            "funcName": "function_404390",
            "funcStartAddr": "404390",
            "funcEndAddr": "4043e0",
            "decompiledFuncCode": "int64_t function_404390(int64_t a1, uint64_t a2) {\n    int64_t v1; // 0x404390\n    if (a1 != 0) {\n        if (a2 >= 0x5555555555555554) {\n            // 0x4043da\n            function_404480(a1);\n            // UNREACHABLE\n        }\n        // 0x4043b2\n        v1 = a2 + 1 + a2 / 2;\n        *(int64_t *)a2 = v1;\n        return function_404290(a1, v1);\n    }\n    if (a2 == 0) {\n        // 0x4043c5\n        *(int64_t *)a2 = 128;\n        return function_404290(0, 128);\n    }\n    // 0x4043d8\n    if (a2 < 0) {\n        // 0x4043da\n        function_404480(a1);\n        // UNREACHABLE\n    }\n    // 0x4043b2\n    v1 = a2;\n    *(int64_t *)a2 = v1;\n    return function_404290(a1, v1);\n}\n"
        },
        {
            "funcName": "function_4043e0",
            "funcStartAddr": "4043e0",
            "funcEndAddr": "4043f7",
            "decompiledFuncCode": "int64_t function_4043e0(int64_t a1, int64_t a2) {\n    // 0x4043e0\n    return (int64_t)memset((int64_t *)function_404230(a1), 0, (int32_t)a1);\n}\n"
        },
        {
            "funcName": "function_404400",
            "funcStartAddr": "404400",
            "funcEndAddr": "40442e",
            "decompiledFuncCode": "int64_t function_404400(uint64_t nmemb, uint64_t size) {\n    uint128_t v1 = (int128_t)size * (int128_t)nmemb; // 0x404407\n    if ((int64_t)v1 < 0) {\n        // 0x404429\n        function_404480(nmemb);\n        // UNREACHABLE\n    }\n    if (v1 > 0xffffffffffffffff) {\n        // 0x404429\n        function_404480(nmemb);\n        // UNREACHABLE\n    }\n    int64_t * mem = calloc((int32_t)nmemb, (int32_t)size); // 0x40441a\n    if (mem != NULL) {\n        // 0x404424\n        return (int64_t)mem;\n    }\n    // 0x404429\n    function_404480(nmemb);\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_404430",
            "funcStartAddr": "404430",
            "funcEndAddr": "404458",
            "decompiledFuncCode": "int64_t function_404430(int64_t a1, int64_t a2) {\n    int64_t v1 = function_404230(a2); // 0x40443f\n    return (int64_t)memcpy((int64_t *)v1, (int64_t *)a1, (int32_t)a2);\n}\n"
        },
        {
            "funcName": "function_404460",
            "funcStartAddr": "404460",
            "funcEndAddr": "404473",
            "decompiledFuncCode": "int64_t function_404460(int64_t str) {\n    // 0x404460\n    return function_404430(str, (int64_t)strlen((char *)str) + 1);\n}\n"
        },
        {
            "funcName": "function_404480",
            "funcStartAddr": "404480",
            "funcEndAddr": "4044b1",
            "decompiledFuncCode": "int64_t function_404480(int64_t a1) {\n    // 0x404480\n    error(g18, (int32_t)\"memory exhausted\" ^ (int32_t)\"memory exhausted\", \"%s\", dcgettext(NULL, \"memory exhausted\", 5));\n    abort();\n    // UNREACHABLE\n}\n"
        },
        {
            "funcName": "function_4044c0",
            "funcStartAddr": "4044c0",
            "funcEndAddr": "404590",
            "decompiledFuncCode": "int64_t function_4044c0(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, int64_t a5, int64_t a6, int32_t a7) {\n    // 0x4044c0\n    int64_t result2; // bp-64, 0x4044c0\n    int32_t v1 = function_4045c0(a1, 0, a2 & 0xffffffff, &result2, a5, a6); // 0x4044ec\n    int32_t * v2; // 0x4044c0\n    if (v1 != 0) {\n        int32_t * v3 = __errno_location(); // 0x40456a\n        if (v1 == 1) {\n            // 0x404588\n            *v3 = 75;\n            v2 = v3;\n        } else {\n            // 0x404577\n            v2 = v3;\n            if (v1 == 3) {\n                // 0x40457c\n                *v3 = 0;\n                v2 = v3;\n            }\n        }\n    } else {\n        uint64_t result = result2; // 0x4044f0\n        if (result >= a3 && result <= a4) {\n            // 0x404552\n            return result;\n        }\n        int32_t * v4 = __errno_location(); // 0x4044ff\n        *v4 = result < 0x40000000 ? 34 : 75;\n        v2 = v4;\n    }\n    int64_t v5 = function_403c70(a1); // 0x40451c\n    int32_t v6 = *v2; // 0x404521\n    int32_t err_num = v6 == 22 ? 0 : v6; // 0x404537\n    error(a7 == 0 ? 1 : a7, err_num, \"%s: %s\", (char *)a6, (char *)v5);\n    // 0x404552\n    return result2;\n}\n"
        },
        {
            "funcName": "function_404590",
            "funcStartAddr": "404590",
            "funcEndAddr": "4045b1",
            "decompiledFuncCode": "int64_t function_404590(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t a5, int32_t a6) {\n    // 0x404590\n    int64_t result; // 0x404590\n    return result;\n}\n"
        },
        {
            "funcName": "function_4045c0",
            "funcStartAddr": "4045c0",
            "funcEndAddr": "404adf",
            "decompiledFuncCode": "int64_t function_4045c0(int64_t a1, int32_t a2, int64_t a3, int64_t * a4, int64_t str, int64_t a6) {\n    uint32_t v1 = (int32_t)a3; // 0x4045ce\n    if (v1 >= 37) {\n        // 0x404a7c\n        __assert_fail(\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 96, \"xstrtoumax\");\n        *(int32_t *)\"<= 36\" = 0x2f62696c;\n        *(int32_t *)\"ase <= 36\" = 0x1ca79f91;\n        return 0xfc422c30;\n    }\n    char c = a1;\n    int32_t * v2 = __errno_location(); // 0x4045f2\n    *v2 = 0;\n    int64_t v3 = (int64_t)*__ctype_b_loc() + 1; // 0x404622\n    int64_t v4 = a1; // 0x404627\n    char v5 = c; // 0x404627\n    if ((*(char *)(v3 + (2 * a1 & 510)) & 32) != 0) {\n        v4++;\n        unsigned char v6 = *(char *)v4; // 0x40461c\n        v5 = v6;\n        while ((*(char *)(2 * (int64_t)v6 + v3) & 32) != 0) {\n            // 0x404618\n            v4++;\n            v6 = *(char *)v4;\n            v5 = v6;\n        }\n    }\n    // 0x404629\n    if (v5 == 45) {\n        // 0x404665\n        return 4;\n    }\n    // 0x40462e\n    int64_t v7; // bp-64, 0x4045c0\n    int64_t v8 = a2 == 0 ? (int64_t)&v7 : (int64_t)a2; // 0x4045ee\n    int32_t v9 = __strtoul_internal((char *)a1, (char **)v8, v1, 0); // 0x404636\n    int64_t * v10 = (int64_t *)v8; // 0x40463b\n    int64_t v11 = *v10; // 0x40463b\n    char v12; // 0x4045c0\n    int64_t v13; // 0x4045c0\n    int64_t v14; // 0x4045c0\n    int64_t v15; // 0x4045c0\n    int64_t v16; // 0x4045c0\n    int64_t v17; // 0x4045c0\n    int64_t v18; // 0x4045c0\n    if (v11 == a1) {\n        // 0x404698\n        if (c == 0 || str == 0) {\n            // 0x404665\n            return 4;\n        }\n        char * found_char_pos = strchr((char *)str, (int32_t)c); // 0x4046b9\n        v17 = 1;\n        v14 = 0;\n        v12 = c;\n        if (found_char_pos == NULL) {\n            // 0x404665\n            return 4;\n        }\n        goto lab_0x4046c7;\n    } else {\n        int32_t v19 = *v2; // 0x404646\n        int64_t v20 = 0; // 0x40464c\n        if (v19 != 0) {\n            // 0x404680\n            v20 = 1;\n            if (v19 != 34) {\n                // 0x404665\n                return 4;\n            }\n        }\n        int64_t v21 = v9; // 0x404636\n        v16 = v21;\n        v13 = v20;\n        if (str == 0) {\n            goto lab_0x404662;\n        } else {\n            char c2 = *(char *)v11; // 0x404655\n            v16 = v21;\n            v13 = v20;\n            if (c2 != 0) {\n                char * found_char_pos2 = strchr((char *)str, (int32_t)c2); // 0x4047c3\n                v17 = v21;\n                v14 = v20;\n                v12 = c2;\n                v18 = v21;\n                v15 = v20;\n                if (found_char_pos2 != NULL) {\n                    goto lab_0x4046c7;\n                } else {\n                    goto lab_0x4047d5;\n                }\n            } else {\n                goto lab_0x404662;\n            }\n        }\n    }\n  lab_0x4046c7:;\n    unsigned char v22 = v12 - 69;\n    int64_t v23 = 1024; // 0x4046cf\n    int64_t v24 = 1; // 0x4046cf\n    int64_t v25; // 0x4045c0\n    int64_t v26; // 0x4045c0\n    int64_t v27; // 0x4045c0\n    int64_t v28; // 0x4045c0\n    int64_t v29; // 0x4045c0\n    int64_t v30; // 0x4045c0\n    int64_t v31; // 0x4045c0\n    int64_t v32; // 0x4045c0\n    int64_t v33; // 0x4045c0\n    int64_t v34; // 0x4045c0\n    int64_t v35; // 0x4045c0\n    int64_t v36; // 0x4045c0\n    int64_t v37; // 0x4045c0\n    int64_t v38; // 0x4045c0\n    int64_t v39; // 0x4045c0\n    int64_t v40; // 0x4045c0\n    int64_t v41; // 0x4045c0\n    int64_t v42; // 0x4045c0\n    int64_t v43; // 0x4045c0\n    int64_t v44; // 0x4045c0\n    if (v22 < 48) {\n        // 0x4046d1\n        v23 = 1024;\n        v24 = 1;\n        if ((1 << (int64_t)((v12 + 59) % 64) & 0x814400308945) == 0) {\n            goto lab_0x40473a;\n        } else {\n            // 0x4046e4\n            v23 = 1024;\n            v24 = 1;\n            if (strchr((char *)str, 48) == NULL) {\n                goto lab_0x40473a;\n            } else {\n                // 0x404700\n                v23 = 1000;\n                v24 = 2;\n                switch (*(char *)(v11 + 1)) {\n                    case 68: {\n                        goto lab_0x40473a;\n                    }\n                    case 105: {\n                        char v45 = *(char *)(v11 + 2); // 0x404969\n                        v23 = 1024;\n                        v24 = (v45 == 66 ? 2 : 1) + (int64_t)(v45 == 66);\n                        goto lab_0x40473a;\n                    }\n                    default: {\n                        // 0x404715\n                        g46 = v22;\n                        v23 = 1000;\n                        v24 = 2;\n                        v27 = 1024;\n                        v39 = 1;\n                        v26 = v17;\n                        v25 = v14;\n                        v40 = 1;\n                        v28 = 1024;\n                        v41 = 1;\n                        v18 = v17;\n                        v15 = v14;\n                        v42 = 1;\n                        v29 = 1024;\n                        v43 = 1;\n                        v30 = 1024;\n                        v44 = 1;\n                        v31 = 1024;\n                        v35 = 1;\n                        v32 = 1024;\n                        v36 = 1;\n                        v33 = 1024;\n                        v37 = 1;\n                        v34 = 1024;\n                        v38 = 1;\n                        switch (v12) {\n                            case 69: {\n                                goto lab_0x4048db;\n                            }\n                            case 70: {\n                                goto lab_0x4047d5;\n                            }\n                            case 71: {\n                                goto lab_0x404913;\n                            }\n                            case 72: {\n                                goto lab_0x4047d5;\n                            }\n                            case 73: {\n                                goto lab_0x4047d5;\n                            }\n                            case 74: {\n                                goto lab_0x4047d5;\n                            }\n                            case 75: {\n                                goto lab_0x40479c;\n                            }\n                            case 76: {\n                                goto lab_0x4047d5;\n                            }\n                            case 77: {\n                                goto lab_0x40475e;\n                            }\n                            case 78: {\n                                goto lab_0x4047d5;\n                            }\n                            case 79: {\n                                goto lab_0x4047d5;\n                            }\n                            case 80: {\n                                goto lab_0x4048a8;\n                            }\n                            case 81: {\n                                goto lab_0x4047d5;\n                            }\n                            case 82: {\n                                goto lab_0x4047d5;\n                            }\n                            case 83: {\n                                goto lab_0x4047d5;\n                            }\n                            case 84: {\n                                goto lab_0x404878;\n                            }\n                            case 85: {\n                                goto lab_0x4047d5;\n                            }\n                            case 86: {\n                                goto lab_0x4047d5;\n                            }\n                            case 87: {\n                                goto lab_0x4047d5;\n                            }\n                            case 88: {\n                                goto lab_0x4047d5;\n                            }\n                            case 89: {\n                                goto lab_0x404846;\n                            }\n                            case 90: {\n                                goto lab_0x40480b;\n                            }\n                            case 91: {\n                                goto lab_0x4047d5;\n                            }\n                            case 92: {\n                                goto lab_0x4047d5;\n                            }\n                            case 93: {\n                                goto lab_0x4047d5;\n                            }\n                            case 94: {\n                                goto lab_0x4047d5;\n                            }\n                            case 95: {\n                                goto lab_0x4047d5;\n                            }\n                            case 96: {\n                                goto lab_0x4047d5;\n                            }\n                            case 97: {\n                                goto lab_0x4047d5;\n                            }\n                            case 98: {\n                                goto lab_0x4047ef;\n                            }\n                            case 99: {\n                                goto lab_0x404778;\n                            }\n                            case 100: {\n                                goto lab_0x4047d5;\n                            }\n                            case 101: {\n                                goto lab_0x4047d5;\n                            }\n                            case 102: {\n                                goto lab_0x4047d5;\n                            }\n                            case 103: {\n                                goto lab_0x404913;\n                            }\n                            case 104: {\n                                goto lab_0x4047d5;\n                            }\n                            case 105: {\n                                goto lab_0x4047d5;\n                            }\n                            case 106: {\n                                goto lab_0x4047d5;\n                            }\n                            case 107: {\n                                goto lab_0x40479c;\n                            }\n                            case 108: {\n                                goto lab_0x4047d5;\n                            }\n                            case 109: {\n                                goto lab_0x40475e;\n                            }\n                            case 110: {\n                                goto lab_0x4047d5;\n                            }\n                            case 111: {\n                                goto lab_0x4047d5;\n                            }\n                            case 112: {\n                                goto lab_0x4047d5;\n                            }\n                            case 113: {\n                                goto lab_0x4047d5;\n                            }\n                            case 114: {\n                                goto lab_0x4047d5;\n                            }\n                            case 115: {\n                                goto lab_0x4047d5;\n                            }\n                            case 116: {\n                                goto lab_0x404878;\n                            }\n                            default: {\n                                goto lab_0x40473a;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        goto lab_0x40473a;\n    }\n  lab_0x404662:\n    // 0x404662\n    *a4 = v16;\n    // 0x404665\n    return v13 & 0xffffffff;\n  lab_0x40473a:\n    // 0x40473a\n    g47 = v12 - 66;\n    v27 = v23;\n    v39 = v24;\n    v26 = v17;\n    v25 = v14;\n    v40 = v24;\n    v28 = v23;\n    v41 = v24;\n    v18 = v17;\n    v15 = v14;\n    v42 = v24;\n    v29 = v23;\n    v43 = v24;\n    v30 = v23;\n    v44 = v24;\n    v31 = v23;\n    v35 = v24;\n    v32 = v23;\n    v36 = v24;\n    v33 = v23;\n    v37 = v24;\n    v34 = v23;\n    v38 = v24;\n    int64_t v46; // 0x4045c0\n    switch (v12) {\n        case 66: {\n            // 0x404934\n            v46 = v24;\n            if (v17 >= 0x40000000000000) {\n                goto lab_0x4047a7;\n            } else {\n                // 0x404941\n                v26 = 1024 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x404778;\n            }\n        }\n        case 69: {\n            goto lab_0x4048db;\n        }\n        case 71: {\n            goto lab_0x404913;\n        }\n        case 75: {\n            goto lab_0x40479c;\n        }\n        case 77: {\n            goto lab_0x40475e;\n        }\n        case 80: {\n            goto lab_0x4048a8;\n        }\n        case 84: {\n            goto lab_0x404878;\n        }\n        case 89: {\n            goto lab_0x404846;\n        }\n        case 90: {\n            goto lab_0x40480b;\n        }\n        case 98: {\n            goto lab_0x4047ef;\n        }\n        case 99: {\n            goto lab_0x404778;\n        }\n        case 103: {\n            goto lab_0x404913;\n        }\n        case 107: {\n            goto lab_0x40479c;\n        }\n        case 109: {\n            goto lab_0x40475e;\n        }\n        case 116: {\n            goto lab_0x404878;\n        }\n        case 119: {\n            // 0x4047e0\n            v46 = v24;\n            if (v17 < 0) {\n                goto lab_0x4047a7;\n            } else {\n                // 0x4047e5\n                v26 = 2 * v17;\n                v25 = v14;\n                v40 = v24;\n                goto lab_0x404778;\n            }\n        }\n        default: {\n            goto lab_0x4047d5;\n        }\n    }\n  lab_0x4048db:;\n    uint128_t v47 = (int128_t)v17 * (int128_t)v33; // 0x4048f3\n    int64_t v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n    int64_t v49 = v47 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v50 = 5; // 0x4048ff\n    int64_t v51 = v48; // 0x404902\n    int64_t v52 = v37; // 0x404902\n    int64_t v53 = v49; // 0x404902\n    int32_t v54 = v50; // 0x404902\n    int64_t v55 = v49; // 0x404902\n    while (v50 != 0) {\n        // 0x4048f0\n        v47 = (int128_t)v48 * (int128_t)v33;\n        v48 = (int64_t)(v47 < 0xffffffffffffffff ? v47 : 0xffffffffffffffff);\n        v49 = v47 > 0xffffffffffffffff ? 1 : v55;\n        v50 = v54 - 1;\n        v51 = v48;\n        v52 = v37;\n        v53 = v49;\n        v54 = v50;\n        v55 = v49;\n    }\n    goto lab_0x404834;\n  lab_0x404913:\n    // 0x404913\n    v26 = -1;\n    v25 = 1;\n    v40 = v38;\n    if ((int128_t)v34 * (int128_t)v17 <= 0xffffffffffffffff) {\n        // 0x40491e\n        int128_t v56; // 0x404919\n        uint128_t v57; // 0x404919\n        uint128_t v58 = (v57 & 0xffffffffffffffff) * v56; // 0x40491e\n        v26 = -1;\n        v25 = 1;\n        int64_t v59; // 0x4045c0\n        v40 = v59;\n        if (v58 <= 0xffffffffffffffff) {\n            uint128_t v60 = (v58 & 0xffffffffffffffff) * v56; // 0x404923\n            v26 = -1;\n            v25 = 1;\n            v40 = v59;\n            if (v60 <= 0xffffffffffffffff) {\n                // 0x404928\n                v26 = v60;\n                int64_t v61; // 0x4045c0\n                v25 = v61 & 0xffffffff;\n                v40 = v59;\n            }\n        }\n    }\n    goto lab_0x404778;\n  lab_0x40479c:;\n    uint128_t v64 = (int128_t)v28 * (int128_t)v17; // 0x40479f\n    v26 = v64;\n    v25 = v14;\n    v40 = v41;\n    v46 = v41;\n    if (v64 <= 0xffffffffffffffff) {\n        goto lab_0x404778;\n    } else {\n        goto lab_0x4047a7;\n    }\n  lab_0x40475e:;\n    int128_t v65 = v27; // 0x404764\n    uint128_t v66 = v65 * (int128_t)v17; // 0x404764\n    v46 = v39;\n    if (v66 > 0xffffffffffffffff) {\n        goto lab_0x4047a7;\n    } else {\n        uint128_t v67 = (v66 & 0xffffffffffffffff) * v65; // 0x404769\n        v46 = v39;\n        if (v67 > 0xffffffffffffffff) {\n            goto lab_0x4047a7;\n        } else {\n            // 0x40476e\n            v26 = v67;\n            v25 = v14;\n            v40 = v39;\n            goto lab_0x404778;\n        }\n    }\n  lab_0x4048a8:;\n    uint128_t v68 = (int128_t)v17 * (int128_t)v32; // 0x4048bb\n    int64_t v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n    int64_t v70 = v68 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v71 = 4; // 0x4048c7\n    v51 = v69;\n    v52 = v36;\n    v53 = v70;\n    int32_t v72 = v71; // 0x4048ca\n    int64_t v73 = v70; // 0x4048ca\n    while (v71 != 0) {\n        // 0x4048b8\n        v68 = (int128_t)v69 * (int128_t)v32;\n        v69 = (int64_t)(v68 < 0xffffffffffffffff ? v68 : 0xffffffffffffffff);\n        v70 = v68 > 0xffffffffffffffff ? 1 : v73;\n        v71 = v72 - 1;\n        v51 = v69;\n        v52 = v36;\n        v53 = v70;\n        v72 = v71;\n        v73 = v70;\n    }\n    goto lab_0x404834;\n  lab_0x404878:;\n    uint128_t v74 = (int128_t)v17 * (int128_t)v31; // 0x40488b\n    int64_t v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n    int64_t v76 = v74 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v77 = 3; // 0x404897\n    v51 = v75;\n    v52 = v35;\n    v53 = v76;\n    int32_t v78 = v77; // 0x40489a\n    int64_t v79 = v76; // 0x40489a\n    while (v77 != 0) {\n        // 0x404888\n        v74 = (int128_t)v75 * (int128_t)v31;\n        v75 = (int64_t)(v74 < 0xffffffffffffffff ? v74 : 0xffffffffffffffff);\n        v76 = v74 > 0xffffffffffffffff ? 1 : v79;\n        v77 = v78 - 1;\n        v51 = v75;\n        v52 = v35;\n        v53 = v76;\n        v78 = v77;\n        v79 = v76;\n    }\n    goto lab_0x404834;\n  lab_0x404846:;\n    uint128_t v80 = (int128_t)v17 * (int128_t)v30; // 0x40485b\n    int64_t v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n    int64_t v82 = v80 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v83 = 7; // 0x404867\n    v51 = v81;\n    v52 = v44;\n    v53 = v82;\n    int32_t v84 = v83; // 0x40486a\n    int64_t v85 = v82; // 0x40486a\n    while (v83 != 0) {\n        // 0x404858\n        v80 = (int128_t)v81 * (int128_t)v30;\n        v81 = (int64_t)(v80 < 0xffffffffffffffff ? v80 : 0xffffffffffffffff);\n        v82 = v80 > 0xffffffffffffffff ? 1 : v85;\n        v83 = v84 - 1;\n        v51 = v81;\n        v52 = v44;\n        v53 = v82;\n        v84 = v83;\n        v85 = v82;\n    }\n    goto lab_0x404834;\n  lab_0x40480b:;\n    uint128_t v86 = (int128_t)v17 * (int128_t)v29; // 0x404823\n    int64_t v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n    int64_t v88 = v86 > 0xffffffffffffffff ? 1 : 0;\n    int32_t v89 = 6; // 0x40482f\n    int32_t v90 = v89; // 0x404832\n    int64_t v91 = v88; // 0x404832\n    v51 = v87;\n    v52 = v43;\n    v53 = v88;\n    while (v89 != 0) {\n        // 0x404820\n        v86 = (int128_t)v87 * (int128_t)v29;\n        v87 = (int64_t)(v86 < 0xffffffffffffffff ? v86 : 0xffffffffffffffff);\n        v88 = v86 > 0xffffffffffffffff ? 1 : v91;\n        v89 = v90 - 1;\n        v90 = v89;\n        v91 = v88;\n        v51 = v87;\n        v52 = v43;\n        v53 = v88;\n    }\n    goto lab_0x404834;\n  lab_0x4047ef:\n    // 0x4047ef\n    v46 = v42;\n    if (v17 >= 0x80000000000000) {\n        goto lab_0x4047a7;\n    } else {\n        // 0x4047f8\n        v26 = 512 * v17;\n        v25 = v14;\n        v40 = v42;\n        goto lab_0x404778;\n    }\n  lab_0x404778:;\n    int64_t v62 = v25;\n    int64_t v63 = (0x100000000 * v40 >> 32) + v11; // 0x40477d\n    *v10 = v63;\n    v16 = v26;\n    v13 = (*(char *)v63 != 0 ? v62 | 2 : v62) & 0xffffffff;\n    goto lab_0x404662;\n  lab_0x4047d5:\n    // 0x4047d5\n    *a4 = v18;\n    // 0x404665\n    return (v15 & 0xfffffffd | 2) & 0xffffffff;\n  lab_0x4047a7:\n    // 0x4047a7\n    v26 = -1;\n    v25 = 1;\n    v40 = v46;\n    goto lab_0x404778;\n  lab_0x404834:\n    // 0x404834\n    v26 = v51;\n    v25 = (v53 | v14) & 0xffffffff;\n    v40 = v52;\n    goto lab_0x404778;\n}\n"
        },
        {
            "funcName": "function_404ae0",
            "funcStartAddr": "404ae0",
            "funcEndAddr": "4050fc",
            "decompiledFuncCode": "int64_t function_404ae0(int64_t a1, int64_t a2, int64_t str5, int64_t a4, int64_t a5, int64_t a6, int64_t a7, int64_t a8, int64_t * a9) {\n    int64_t * v1 = (int64_t *)(a7 + 32); // 0x404aff\n    int64_t v2 = *v1; // 0x404aff\n    char * str2 = (char *)v2; // 0x404b0c\n    char c = *str2; // 0x404b0c\n    int64_t v3 = v2; // 0x404b38\n    int64_t v4 = 0; // 0x404ae0\n    int32_t v5; // 0x404ae0\n    int64_t v6; // 0x404ae0\n    int64_t v7; // 0x404ae0\n    int64_t v8; // 0x404ae0\n    int64_t v9; // 0x404ae0\n    int64_t v10; // 0x404ae0\n    int64_t v11; // 0x404ae0\n    int64_t v12; // 0x404ae0\n    int64_t v13; // 0x404ae0\n    int64_t str3; // 0x404ae0\n    int64_t v14; // 0x404ae0\n    int64_t v15; // 0x404ae0\n    int64_t v16; // 0x404ae0\n    int64_t v17; // 0x404ae0\n    int32_t v18; // 0x404ae0\n    int32_t v19; // 0x404ae0\n    int32_t v20; // 0x404ae0\n    int32_t v21; // 0x404ae0\n    int32_t v22; // 0x404ae0\n    int32_t v23; // 0x404ae0\n    int32_t v24; // 0x404ae0\n    int32_t v25; // 0x404ae0\n    int32_t v26; // 0x404ae0\n    int32_t v27; // 0x404ae0\n    int32_t v28; // 0x404ae0\n    int32_t v29; // 0x404ae0\n    int64_t nmemb; // 0x404ae0\n    int64_t v30; // 0x404ae0\n    switch (c) {\n        default: {\n            v3++;\n            char v31 = *(char *)v3; // 0x404b3c\n            while (v31 != 0 == (v31 != 61)) {\n                // 0x404b38\n                v3++;\n                v31 = *(char *)v3;\n            }\n            // 0x404b48\n            v4 = v3 - v2;\n        }\n        case 61: {\n        }\n        case 0: {\n            // 0x404b4e\n            v30 = 0x100000000 * a8 >> 32;\n            int64_t v32 = 0x100000000 * a6 >> 32; // 0x404b18\n            if (a4 != 0) {\n                int32_t n = v4;\n                int64_t v33 = 0;\n                char * str = (char *)a4; // 0x404b7c\n                int64_t v34; // 0x404ae0\n                int64_t v35; // 0x404ae0\n                if (strncmp(str, str2, n) == 0) {\n                    // 0x404b85\n                    v35 = a4;\n                    v34 = v33;\n                    if (v4 == (int64_t)strlen(str)) {\n                        goto lab_0x404d00;\n                    }\n                }\n                int64_t v36 = a4 + 32; // 0x404b96\n                int64_t v37 = *(int64_t *)v36; // 0x404b9a\n                nmemb = v33 + 1;\n                while (v37 != 0) {\n                    // 0x404b70\n                    v33 = 0x100000000 * nmemb >> 32;\n                    int64_t v38 = v36;\n                    str = (char *)v37;\n                    if (strncmp(str, str2, n) == 0) {\n                        // 0x404b85\n                        v35 = v38;\n                        v34 = v33;\n                        if (v4 == (int64_t)strlen(str)) {\n                            goto lab_0x404d00;\n                        }\n                    }\n                    // 0x404b96\n                    v36 = v38 + 32;\n                    v37 = *(int64_t *)v36;\n                    nmemb = v33 + 1;\n                }\n                int32_t v39 = v32;\n                v22 = -1;\n                v26 = 0;\n                v18 = 0;\n                v14 = 0;\n                v10 = 0;\n                v8 = a4;\n                str3 = a4;\n                v6 = 0;\n                while (true) {\n                  lab_0x404be6:\n                    // 0x404be6\n                    v7 = v6;\n                    v9 = v8;\n                    v11 = v10;\n                    v15 = v14;\n                    v19 = v18;\n                    v27 = v26;\n                    v23 = v22;\n                    v24 = v23;\n                    v28 = v27;\n                    v20 = v19;\n                    v16 = v15;\n                    v12 = v11;\n                    if (strncmp((char *)str3, str2, n) != 0) {\n                        goto lab_0x404c40;\n                    } else {\n                        if (v11 == 0) {\n                            // 0x404db0\n                            v24 = v7;\n                            v28 = v27;\n                            v20 = v19;\n                            v16 = v15;\n                            v12 = v9;\n                            goto lab_0x404c40;\n                        } else {\n                            if (v39 == 0) {\n                                // 0x404d60\n                                if (*(int32_t *)(v11 + 8) != *(int32_t *)(v9 + 8)) {\n                                    goto lab_0x404c0a;\n                                } else {\n                                    // 0x404d6c\n                                    if (*(int64_t *)(v11 + 16) != *(int64_t *)(v9 + 16)) {\n                                        goto lab_0x404c0a;\n                                    } else {\n                                        // 0x404d7a\n                                        v24 = v23;\n                                        v28 = v27;\n                                        v20 = v19;\n                                        v16 = v15;\n                                        v12 = v11;\n                                        if (*(int32_t *)(v11 + 24) != *(int32_t *)(v9 + 24)) {\n                                            goto lab_0x404c0a;\n                                        } else {\n                                            goto lab_0x404c40;\n                                        }\n                                    }\n                                }\n                            } else {\n                                goto lab_0x404c0a;\n                            }\n                        }\n                    }\n                }\n              lab_0x404c51:\n                if (v29 == 0 != (v17 == 0)) {\n                    int64_t v40 = v2; // 0x404e26\n                    if ((int32_t)v30 != 0) {\n                        if (v29 == 0) {\n                            // 0x404fd2\n                            flockfile(g30);\n                            int64_t v41 = *v1; // 0x404ff2\n                            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous; possibilities:\", 5), \"%s: option '%s%s' is ambiguous; possibilities:\", a9, (char *)v41);\n                            int64_t v42 = v17; // 0x40503f\n                            int64_t v43 = (int64_t)g30;\n                            int64_t v44 = v43; // 0x405059\n                            int64_t v45; // 0x40505b\n                            if (*(char *)v42 != 0) {\n                                // 0x40505b\n                                v45 = *(int64_t *)a4;\n                                __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                v44 = (int64_t)g30;\n                            }\n                            int64_t stream = v44;\n                            v42++;\n                            int64_t v46 = a4 + 32; // 0x405053\n                            while (v17 + nmemb != v42) {\n                                // 0x405055\n                                v43 = stream;\n                                int64_t v47 = v46;\n                                v44 = v43;\n                                if (*(char *)v42 != 0) {\n                                    // 0x40505b\n                                    v45 = *(int64_t *)v47;\n                                    __fprintf_chk((struct _IO_FILE *)v43, 1, \" '%s%s'\", a9, (char *)v45);\n                                    v44 = (int64_t)g30;\n                                }\n                                // 0x405048\n                                stream = v44;\n                                v42++;\n                                v46 = v47 + 32;\n                            }\n                            // 0x405080\n                            fputc(10, (struct _IO_FILE *)stream);\n                            funlockfile(g30);\n                            v40 = *v1;\n                        } else {\n                            // 0x404e34\n                            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' is ambiguous\\n\", 5), \"%s: option '%s%s' is ambiguous\\n\", a9, str2);\n                            v40 = *v1;\n                        }\n                    }\n                    int64_t str4 = v40;\n                    if (v21 != 0) {\n                        // 0x404f8f\n                        free((int64_t *)v17);\n                    }\n                    // 0x404e89\n                    *v1 = str4 + (int64_t)strlen((char *)str4);\n                    int32_t * v48 = (int32_t *)a7; // 0x404ea0\n                    *v48 = *v48 + 1;\n                    *(int32_t *)(a7 + 8) = 0;\n                    // 0x404d4e\n                    return 63;\n                }\n                // 0x404c70\n                v5 = v39;\n                if (v13 != 0) {\n                    // 0x404cf4\n                    v35 = v13;\n                    v34 = v25;\n                  lab_0x404d00:;\n                    int32_t * v49 = (int32_t *)a7; // 0x404d10\n                    uint32_t v50 = *v49; // 0x404d10\n                    int64_t v51 = v50; // 0x404d10\n                    *v1 = 0;\n                    uint32_t v52 = v50 + 1; // 0x404d1a\n                    *v49 = v52;\n                    int32_t v53 = *(int32_t *)(v35 + 8); // 0x404d23\n                    if (*(char *)v3 != 0) {\n                        if (v53 == 0) {\n                            if ((int32_t)v30 != 0) {\n                                int64_t v54 = *(int64_t *)v35; // 0x404f4f\n                                __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' doesn't allow an argument\\n\", 5), \"%s: option '%s%s' doesn't allow an argument\\n\", a9, (char *)v54);\n                            }\n                            // 0x404efa\n                            *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                            // 0x404d4e\n                            return 63;\n                        }\n                        // 0x404d98\n                        *(int64_t *)(a7 + 16) = v3 + 1;\n                    } else {\n                        if (v53 == 1) {\n                            if (v52 >= (int32_t)a1) {\n                                if ((int32_t)v30 != 0) {\n                                    int64_t v55 = *(int64_t *)v35; // 0x4050af\n                                    __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option '%s%s' requires an argument\\n\", 5), \"%s: option '%s%s' requires an argument\\n\", a9, (char *)v55);\n                                }\n                                // 0x404fad\n                                *(int32_t *)(a7 + 8) = *(int32_t *)(v35 + 24);\n                                char v56 = *(char *)&v51; // 0x404fc0\n                                // 0x404d4e\n                                return 4 * (int64_t)(v56 != 58) | (v56 != 58 ? 59 : 58);\n                            }\n                            // 0x404ebe\n                            *v49 = (int32_t)v51 + 2;\n                            int64_t v57 = *(int64_t *)((0x100000000 * (int64_t)v52 >> 29) + a2); // 0x404ed2\n                            *(int64_t *)(a7 + 16) = v57;\n                        }\n                    }\n                    if (a5 != 0) {\n                        // 0x404d3b\n                        *(int32_t *)a5 = (int32_t)v34;\n                    }\n                    int64_t v58 = *(int64_t *)(v35 + 16); // 0x404d3e\n                    v51 = v58;\n                    uint32_t v59 = *(int32_t *)(v35 + 24); // 0x404d42\n                    int64_t result = v59; // 0x404d48\n                    if (v58 != 0) {\n                        // 0x404d4a\n                        *(int32_t *)v58 = v59;\n                        result = 0;\n                    }\n                    // 0x404d4e\n                    return result;\n                }\n            } else {\n                // 0x404b4e\n                v5 = v32;\n            }\n            // break -> 0x404c75\n            break;\n        }\n    }\n    // 0x404c75\n    if (v5 != 0) {\n        int64_t v60 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2); // 0x404c8d\n        if (*(char *)(v60 + 1) != 45) {\n            // 0x404c97\n            if (strchr((char *)str5, (int32_t)c) != NULL) {\n                // 0x404d4e\n                return 0xffffffff;\n            }\n        }\n    }\n    if ((int32_t)v30 != 0) {\n        // 0x404dd9\n        __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: unrecognized option '%s%s'\\n\", 5), \"%s: unrecognized option '%s%s'\\n\", a9, str2);\n    }\n    // 0x404cc6\n    *v1 = 0;\n    int32_t * v61 = (int32_t *)a7; // 0x404cd6\n    *v61 = *v61 + 1;\n    *(int32_t *)(a7 + 8) = 0;\n    return 63;\n  lab_0x404c40:\n    // 0x404c40\n    v13 = v12;\n    v17 = v16;\n    v21 = v20;\n    v29 = v28;\n    v25 = v24;\n    int64_t v62 = v9 + 32; // 0x404c40\n    int64_t v63 = *(int64_t *)v62; // 0x404c44\n    v22 = v25;\n    v26 = v29;\n    v18 = v21;\n    v14 = v17;\n    v10 = v13;\n    v8 = v62;\n    str3 = v63;\n    v6 = v7 + 1;\n    if (v63 == 0) {\n        // break -> 0x404c51\n        goto lab_0x404c51;\n    }\n    goto lab_0x404be6;\n  lab_0x404c0a:\n    // 0x404c0a\n    v24 = v23;\n    v28 = v27;\n    v20 = v19;\n    v16 = v15;\n    v12 = v11;\n    int64_t v64; // 0x404ae0\n    int32_t v65; // 0x404ae0\n    int32_t v66; // 0x404ae0\n    if (v27 != 0) {\n        goto lab_0x404c40;\n    } else {\n        if ((int32_t)v30 == 0) {\n            // 0x404dc0\n            v66 = 1;\n            v65 = v19;\n            v64 = v15;\n            v24 = v23;\n            v28 = 1;\n            v20 = v19;\n            v16 = 0;\n            v12 = v11;\n            if (v15 == 0) {\n                goto lab_0x404c40;\n            } else {\n                goto lab_0x404c31;\n            }\n        } else {\n            // 0x404c25\n            v66 = v27;\n            v65 = v19;\n            v64 = v15;\n            if (v15 == 0) {\n                int64_t * mem = calloc((int32_t)nmemb, 1); // 0x404f1c\n                int64_t v67 = (int64_t)mem; // 0x404f1c\n                v24 = v23;\n                v28 = 1;\n                v20 = v19;\n                v16 = v67;\n                v12 = v11;\n                if (mem == NULL) {\n                    goto lab_0x404c40;\n                } else {\n                    // 0x404f2f\n                    *(char *)(v67 + (int64_t)v23) = 1;\n                    v66 = v27;\n                    v65 = 1;\n                    v64 = v67;\n                    goto lab_0x404c31;\n                }\n            } else {\n                goto lab_0x404c31;\n            }\n        }\n    }\n  lab_0x404c31:\n    // 0x404c31\n    *(char *)(v64 + v7) = 1;\n    v24 = v23;\n    v28 = v66;\n    v20 = v65;\n    v16 = v64;\n    v12 = v11;\n    goto lab_0x404c40;\n}\n"
        },
        {
            "funcName": "function_405100",
            "funcStartAddr": "405100",
            "funcEndAddr": "4056c6",
            "decompiledFuncCode": "int64_t function_405100(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6, int64_t * a7, int64_t a8) {\n    int64_t v1 = (int64_t)a7;\n    int64_t v2 = a3;\n    int32_t v3 = a1; // 0x405121\n    if (v3 < 1) {\n        // 0x4052de\n        return 0xffffffff;\n    }\n    int64_t v4 = (int64_t)*(int32_t *)(v1 + 4); // 0x40511d\n    int32_t v5 = *(int32_t *)a7; // 0x405129\n    uint64_t v6 = a1 & 0xffffffff; // 0x40512b\n    int64_t v7 = v2; // 0x405130\n    int64_t * v8 = (int64_t *)(v1 + 16); // 0x405133\n    *v8 = 0;\n    int64_t v9; // 0x405100\n    int64_t v10; // 0x405100\n    int64_t v11; // 0x405100\n    int64_t v12; // 0x405100\n    int64_t str; // 0x405100\n    int64_t v13; // 0x405100\n    int64_t v14; // 0x405100\n    int64_t v15; // 0x405100\n    int64_t v16; // 0x405100\n    int64_t v17; // 0x405100\n    int32_t v18; // 0x405100\n    char v19; // 0x405100\n    if (v5 == 0) {\n        // 0x405318\n        *(int32_t *)a7 = 1;\n        v18 = 1;\n        goto lab_0x40514a;\n    } else {\n        // 0x405143\n        v18 = v5;\n        if (*(int32_t *)(v1 + 24) != 0) {\n            char v20 = *(char *)&v2; // 0x405190\n            int64_t v21 = *(int64_t *)(v1 + 32); // 0x405193\n            v2 = v21;\n            v9 = v21;\n            v19 = v20;\n            v16 = a6;\n            v13 = v7;\n            if ((v20 - 43 & -3) != 0) {\n                goto lab_0x405258;\n            } else {\n                int64_t v22 = v7 + 1; // 0x4051a6\n                int64_t v23 = *(char *)v22 == 58 ? 0 : v4; // 0x4051b6\n                v15 = a6;\n                v11 = v23;\n                str = v22;\n                v10 = v21;\n                v17 = a6;\n                v12 = v23;\n                v14 = v22;\n                if (v21 != 0) {\n                    goto lab_0x40526c;\n                } else {\n                    goto lab_0x4051c8;\n                }\n            }\n        } else {\n            goto lab_0x40514a;\n        }\n    }\n  lab_0x40514a:\n    // 0x40514a\n    *(int32_t *)(v1 + 48) = v18;\n    *(int32_t *)(v1 + 44) = v18;\n    int64_t * v24 = (int64_t *)(v1 + 32); // 0x405150\n    *v24 = 0;\n    int64_t v25; // 0x405100\n    int64_t v26; // 0x405100\n    int64_t v27; // 0x405100\n    switch (*(char *)&v2) {\n        case 45: {\n            // 0x405240\n            *(int32_t *)(v1 + 40) = 2;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40524d;\n        }\n        case 43: {\n            // 0x405550\n            *(int32_t *)(v1 + 40) = 0;\n            v2 = 0;\n            v27 = a6;\n            v25 = v7 + 1;\n            goto lab_0x40524d;\n        }\n        default: {\n            // 0x40516c\n            v2 = 0;\n            v26 = a6;\n            if ((int32_t)a8 == 0) {\n                int64_t v28 = a6 & 0xffffffff; // 0x4054cf\n                if (getenv(\"POSIXLY_CORRECT\") == NULL) {\n                    // 0x4055e8\n                    *(int32_t *)(v1 + 40) = 1;\n                    v2 = *v24;\n                    v27 = v28;\n                    v25 = v7;\n                    goto lab_0x40524d;\n                } else {\n                    // 0x4054dd\n                    v2 = *v24;\n                    v26 = v28;\n                    goto lab_0x40517a;\n                }\n            } else {\n                goto lab_0x40517a;\n            }\n        }\n    }\n  lab_0x405258:;\n    int64_t v29 = v19 == 58 ? 0 : v4; // 0x40525f\n    v15 = v16;\n    v11 = v29;\n    str = v13;\n    v10 = v9;\n    v17 = v16;\n    v12 = v29;\n    v14 = v13;\n    if (v9 == 0) {\n        goto lab_0x4051c8;\n    } else {\n        goto lab_0x40526c;\n    }\n  lab_0x40517a:\n    // 0x40517a\n    *(int32_t *)(v1 + 40) = 0;\n    v27 = v26;\n    v25 = v7;\n    goto lab_0x40524d;\n  lab_0x40524d:\n    // 0x40524d\n    *(int32_t *)(v1 + 24) = 1;\n    v9 = v2;\n    v19 = *(char *)v25;\n    v16 = v27;\n    v13 = v25;\n    goto lab_0x405258;\n  lab_0x4051c8:;\n    uint32_t v30 = *(int32_t *)a7; // 0x4051c8\n    int64_t v31 = v30; // 0x4051c8\n    int32_t * v32 = (int32_t *)(v1 + 48); // 0x4051ca\n    if ((int64_t)*v32 > v31) {\n        // 0x4051cf\n        *v32 = v30;\n    }\n    int32_t * v33 = (int32_t *)(v1 + 44); // 0x4051d2\n    if (*v33 > v30) {\n        // 0x4051d7\n        *v33 = v30;\n    }\n    int32_t * v34 = (int32_t *)(v1 + 40); // 0x4051da\n    int64_t v35 = v31; // 0x4051de\n    int64_t v36 = v15; // 0x4051de\n    int64_t v37; // 0x405100\n    int64_t v38; // 0x405100\n    int64_t v39; // 0x405100\n    if (*v34 == 1) {\n        uint32_t v40 = *v32; // 0x405348\n        int64_t v41 = v40; // 0x405348\n        v2 = v41;\n        int64_t v42; // 0x405100\n        if (*v33 == v40) {\n            // 0x405530\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                // 0x405538\n                *v33 = v30;\n                v2 = v31;\n                v42 = v31;\n                v38 = v15;\n            }\n        } else {\n            // 0x405354\n            v42 = v41;\n            v38 = v15;\n            if (v30 != v40) {\n                int64_t v43 = (int64_t)*(int32_t *)a7; // 0x405368\n                v2 = v43;\n                v42 = v43;\n                v38 = v15 & 0xffffffff;\n            }\n        }\n        int64_t v44 = v42; // 0x405371\n        if (v6 > v42) {\n            int64_t v45 = 0x100000000 * v42 >> 32; // 0x40537a\n            int64_t v46 = *(int64_t *)(8 * v45 + a2); // 0x405391\n            int64_t v47 = v45 & 0xffffffff; // 0x405395\n            v2 = v47;\n            if (*(char *)v46 == 45) {\n                // 0x40539e\n                if (*(char *)(v46 + 1) != 0) {\n                    // 0x4053a4\n                    v37 = v47;\n                    v39 = (int64_t)*(int32_t *)a7;\n                    goto lab_0x4053a6;\n                }\n            }\n            int64_t v48 = v47 + 1; // 0x405380\n            int64_t v49 = v48 & 0xffffffff; // 0x405380\n            v2 = v49;\n            v45++;\n            *(int32_t *)a7 = (int32_t)v48;\n            v44 = v49;\n            while (v6 > v45) {\n                // 0x405391\n                v46 = *(int64_t *)(8 * v45 + a2);\n                v47 = v45 & 0xffffffff;\n                v2 = v47;\n                if (*(char *)v46 == 45) {\n                    // 0x40539e\n                    if (*(char *)(v46 + 1) != 0) {\n                        // 0x4053a4\n                        v37 = v47;\n                        v39 = (int64_t)*(int32_t *)a7;\n                        goto lab_0x4053a6;\n                    }\n                }\n                // 0x405380\n                v48 = v47 + 1;\n                v49 = v48 & 0xffffffff;\n                v2 = v49;\n                v45++;\n                *(int32_t *)a7 = (int32_t)v48;\n                v44 = v49;\n            }\n        }\n        // 0x405548\n        v37 = v44;\n        v39 = v44 & 0xffffffff;\n        goto lab_0x4053a6;\n    } else {\n        goto lab_0x4051e4;\n    }\n  lab_0x40526c:\n    // 0x40526c\n    v15 = v17;\n    v11 = v12;\n    str = v14;\n    int64_t v50 = v10; // 0x40526f\n    int64_t v51 = v12; // 0x40526f\n    int64_t v52 = v14; // 0x40526f\n    if (*(char *)v10 == 0) {\n        goto lab_0x4051c8;\n    } else {\n        goto lab_0x405275;\n    }\n  lab_0x4051e4:;\n    int32_t v53 = v35; // 0x4051e4\n    int64_t v54; // 0x405100\n    int64_t v55; // 0x405100\n    int64_t v56; // 0x405100\n    int64_t v57; // 0x405100\n    int64_t v58; // 0x405100\n    int64_t v59; // 0x405100\n    char * v60; // 0x405100\n    int64_t v61; // 0x405100\n    int64_t v62; // 0x4051f9\n    int64_t v63; // 0x405100\n    if (v3 == v53) {\n        int64_t v64 = (int64_t)*v33; // 0x405333\n        v2 = v64;\n        v55 = v64;\n        v59 = (int64_t)*v32;\n        goto lab_0x405336;\n    } else {\n        // 0x4051ec\n        v62 = *(int64_t *)((0x100000000 * v35 >> 29) + a2);\n        bool v65; // 0x405100\n        int64_t v66 = v65 ? -1 : 1; // 0x405200\n        int64_t v67 = (int64_t)\"--\"; // 0x405100\n        int64_t v68 = v62; // 0x405100\n        int64_t v69 = 3; // 0x405200\n        unsigned char v70 = *(char *)v68; // 0x405200\n        char v71 = *(char *)v67; // 0x405200\n        char v72 = v71; // 0x405200\n        bool v73 = false; // 0x405200\n        while (v70 == v71) {\n            v69--;\n            v67 += v66;\n            v68 += v66;\n            v72 = v70;\n            v73 = true;\n            if (v69 == 0) {\n                // break -> \n                break;\n            }\n            v70 = *(char *)v68;\n            v71 = *(char *)v67;\n            v72 = v71;\n            v73 = false;\n        }\n        unsigned char v74 = v72;\n        if ((v70 >= v74 && !v73) != v70 < v74) {\n            // 0x4052f0\n            if (*(char *)v62 == 45) {\n                // 0x4053b0\n                v63 = v62 + 1;\n                char c = *(char *)v63; // 0x4053b0\n                if (c == 0) {\n                    goto lab_0x4052fa;\n                } else {\n                    // 0x4053bd\n                    v54 = v63;\n                    if (a4 == 0) {\n                        goto lab_0x405440;\n                    } else {\n                        if (c == 45) {\n                            // 0x405623\n                            *(int64_t *)(v1 + 32) = v62 + 2;\n                            v60 = \"--\";\n                            v61 = v11;\n                            v58 = v36;\n                            v56 = str;\n                            goto lab_0x405495;\n                        } else {\n                            // 0x4053ce\n                            v54 = v63;\n                            if ((int32_t)v36 == 0) {\n                                goto lab_0x405440;\n                            } else {\n                                // 0x4053d3\n                                v57 = v36;\n                                if (*(char *)(v62 + 2) != 0) {\n                                    goto lab_0x4053f4;\n                                } else {\n                                    // 0x4053da\n                                    v57 = v36 & 0xffffffff;\n                                    v54 = v63;\n                                    if (strchr((char *)str, (int32_t)c) != NULL) {\n                                        goto lab_0x405440;\n                                    } else {\n                                        goto lab_0x4053f4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } else {\n                goto lab_0x4052fa;\n            }\n        } else {\n            uint32_t v75 = *v33; // 0x405210\n            v2 = v75;\n            int32_t v76 = *v32; // 0x405213\n            int64_t v77 = v35 + 1; // 0x405216\n            int32_t v78 = v77; // 0x405219\n            *(int32_t *)a7 = v78;\n            if (v75 == v76) {\n                // 0x405580\n                *v33 = v78;\n                v2 = v77 & 0xffffffff;\n            } else {\n                if (v76 != v78) {\n                    // 0x405227\n                    v2 = (int64_t)*v33;\n                }\n            }\n            // 0x405235\n            *v32 = v3;\n            *(int32_t *)a7 = v3;\n            v55 = v2;\n            v59 = v6;\n            goto lab_0x405336;\n        }\n    }\n  lab_0x405275:;\n    // 0x405275\n    int64_t v79; // bp-104, 0x405100\n    int64_t v80 = &v79; // 0x40510a\n    int64_t v81 = v50 + 1; // 0x405275\n    int64_t * v82 = (int64_t *)(v80 + 32); // 0x40527c\n    *v82 = v50;\n    int64_t * v83 = (int64_t *)(v1 + 32); // 0x405281\n    *v83 = v81;\n    char v84 = *(char *)v2; // 0x405285\n    int64_t * v85 = (int64_t *)(v80 + 40); // 0x405289\n    *v85 = v81;\n    char * v86 = (char *)(v80 + 28); // 0x405291\n    *v86 = v84;\n    char * str2 = (char *)v52; // 0x405296\n    int32_t c2 = v84; // 0x405296\n    char * found_char_pos = strchr(str2, c2); // 0x405296\n    int64_t v87 = *v82; // 0x40529b\n    v2 = v87;\n    int64_t v88 = *v85; // 0x4052a5\n    char * v89 = (char *)(v87 + 1);\n    if (*v89 == 0) {\n        // 0x4052b0\n        *(int32_t *)a7 = *(int32_t *)a7 + 1;\n    }\n    if (found_char_pos == NULL | (*v86 | 1) == 59) {\n        if ((int32_t)v51 != 0) {\n            // 0x4055a0\n            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: invalid option -- '%c'\\n\", 5));\n        }\n        // 0x40556d\n        *(int32_t *)(v1 + 8) = c2;\n        // 0x4052de\n        return 63;\n    }\n    int64_t v90 = (int64_t)found_char_pos; // 0x405296\n    char v91 = *(char *)(v90 + 1); // 0x4052cb\n    if (a4 == 0 | *found_char_pos != 87 || v91 != 59) {\n        int64_t v92 = v84; // 0x405285\n        if (v91 != 58) {\n            // 0x4052de\n            return v92 & 0xffffffff;\n        }\n        unsigned char v93 = *v89; // 0x4054f4\n        v2 = v93;\n        if (*(char *)(v90 + 2) == 58) {\n            if (v93 == 0) {\n                // 0x4055f8\n                *v8 = 0;\n            } else {\n                // 0x4055dc\n                *v8 = v88;\n                *(int32_t *)a7 = *(int32_t *)a7 + 1;\n            }\n            // 0x40551e\n            *v83 = 0;\n            // 0x4052de\n            return v92 & 0xffffffff;\n        }\n        int32_t v94 = *(int32_t *)a7; // 0x4054fe\n        if (v93 != 0) {\n            // 0x405590\n            *v8 = v88;\n            *(int32_t *)a7 = v94 + 1;\n            // 0x40551e\n            *v83 = 0;\n            // 0x4052de\n            return v92 & 0xffffffff;\n        }\n        if (v94 != v3) {\n            // 0x405511\n            *(int32_t *)a7 = v94 + 1;\n            *v8 = *(int64_t *)(8 * (int64_t)v94 + a2);\n            // 0x40551e\n            *v83 = 0;\n            // 0x4052de\n            return v92 & 0xffffffff;\n        }\n        if ((int32_t)v51 != 0) {\n            // 0x40565a\n            __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n        }\n        // 0x40560a\n        *(int32_t *)(v1 + 8) = c2;\n        char v95 = *str2; // 0x405611\n        // 0x40551e\n        *v83 = 0;\n        // 0x4052de\n        return (4 * (int64_t)(v95 != 58) | (v95 != 58 ? 59 : 58)) & 0xffffffff;\n    }\n    int64_t v96 = v88; // 0x405469\n    if (*v89 == 0) {\n        int32_t v97 = *(int32_t *)a7; // 0x40546b\n        if (v97 == v3) {\n            if ((int32_t)v51 != 0) {\n                // 0x405690\n                __fprintf_chk(g30, 1, dcgettext(NULL, \"%s: option requires an argument -- '%c'\\n\", 5));\n            }\n            // 0x405641\n            *(int32_t *)(v1 + 8) = c2;\n            char v98 = *str2; // 0x405648\n            // 0x4052de\n            return (4 * (int64_t)(v98 != 58) | (v98 != 58 ? 59 : 58)) & 0xffffffff;\n        }\n        // 0x405476\n        v96 = *(int64_t *)(8 * (int64_t)v97 + a2);\n    }\n    // 0x40547a\n    *v83 = v96;\n    *v8 = 0;\n    v60 = \"-W \";\n    v61 = v51;\n    v58 = 0;\n    v56 = v52;\n    goto lab_0x405495;\n  lab_0x4053a6:\n    // 0x4053a6\n    *v32 = (int32_t)v37;\n    v35 = v39;\n    v36 = v38;\n    goto lab_0x4051e4;\n  lab_0x405495:;\n    int64_t v99 = function_404ae0(v6, a2, v56, a4, a5, v58, v1, v61, (int64_t *)v60) & 0xffffffff; // 0x4054b3\n    // 0x4052de\n    return v99 & 0xffffffff;\n  lab_0x405336:;\n    int32_t v100 = v55; // 0x405336\n    if (v100 != (int32_t)v59) {\n        // 0x40533a\n        *(int32_t *)a7 = v100;\n    }\n    // 0x4052de\n    return 0xffffffff;\n  lab_0x4052fa:\n    // 0x4052fa\n    v99 = 0xffffffff;\n    if (*v34 != 0) {\n        // 0x405301\n        *v8 = v62;\n        *(int32_t *)a7 = v53 + 1;\n        v99 = 1;\n    }\n    // 0x4052de\n    return v99 & 0xffffffff;\n  lab_0x405440:\n    // 0x405440\n    v2 = v54;\n    v50 = v54;\n    v51 = v11;\n    v52 = str;\n    goto lab_0x405275;\n  lab_0x4053f4:\n    // 0x4053f4\n    *(int64_t *)(v1 + 32) = v63;\n    int64_t v101 = function_404ae0(v6, a2, str, a4, a5, v57, v1, v11, &g9); // 0x40541a\n    if ((int32_t)v101 != -1) {\n        // 0x4052de\n        return v101 & 0xffffffff & 0xffffffff;\n    }\n    // 0x40542f\n    v54 = *(int64_t *)(8 * (int64_t)*(int32_t *)a7 + a2) + 1;\n    goto lab_0x405440;\n}\n"
        },
        {
            "funcName": "function_4056d0",
            "funcStartAddr": "4056d0",
            "funcEndAddr": "405726",
            "decompiledFuncCode": "int64_t function_4056d0(int64_t a1) {\n    // 0x4056d0\n    *(int32_t *)&g40 = g26;\n    *(int32_t *)&g41 = g25;\n    int64_t v1; // 0x4056d0\n    int64_t result = function_405100(v1, v1, v1, v1, v1, v1, &g40, a1 & 0xffffffff); // 0x4056f6\n    g26 = *(int32_t *)&g40;\n    g45 = g43;\n    *(int32_t *)&g24 = g42;\n    return result;\n}\n"
        },
        {
            "funcName": "function_405730",
            "funcStartAddr": "405730",
            "funcEndAddr": "405748",
            "decompiledFuncCode": "int64_t function_405730(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405730\n    return function_4056d0(1);\n}\n"
        },
        {
            "funcName": "function_405750",
            "funcStartAddr": "405750",
            "funcEndAddr": "405763",
            "decompiledFuncCode": "int64_t function_405750(int64_t a1, int64_t a2, int64_t * a3, char (**a4)[4], int32_t a5, int64_t a6) {\n    // 0x405750\n    return function_4056d0(0);\n}\n"
        },
        {
            "funcName": "function_405770",
            "funcStartAddr": "405770",
            "funcEndAddr": "405785",
            "decompiledFuncCode": "int64_t function_405770(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x405770\n    return function_405100(a1, a2, a3, a4, a5, 0, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_405790",
            "funcStartAddr": "405790",
            "funcEndAddr": "4057a6",
            "decompiledFuncCode": "int64_t function_405790(void) {\n    // 0x405790\n    return function_4056d0(0);\n}\n"
        },
        {
            "funcName": "function_4057b0",
            "funcStartAddr": "4057b0",
            "funcEndAddr": "4057c8",
            "decompiledFuncCode": "int64_t function_4057b0(int64_t a1, int64_t a2, int64_t a3, int64_t a4, int64_t a5, int64_t a6) {\n    // 0x4057b0\n    return function_405100(a1, a2, a3, a4, a5, 1, (int64_t *)a6, 0);\n}\n"
        },
        {
            "funcName": "function_4057d0",
            "funcStartAddr": "4057d0",
            "funcEndAddr": "40584a",
            "decompiledFuncCode": "int64_t function_4057d0(int32_t * a1, int64_t a2, int64_t a3) {\n    int64_t v1 = 1; // 0x4057db\n    int64_t v2 = (int64_t)&g10; // 0x4057db\n    int32_t * pwc; // 0x4057d0\n    int64_t v3; // 0x4057d0\n    int64_t n; // 0x4057d0\n    if (a2 == 0) {\n        goto lab_0x405822;\n    } else {\n        // 0x4057dd\n        if (a3 == 0) {\n            // 0x405808\n            return -2;\n        }\n        // 0x4057e9\n        n = a3;\n        v3 = a2;\n        pwc = a1;\n        v1 = a3;\n        v2 = a2;\n        if (a1 == NULL) {\n            goto lab_0x405822;\n        } else {\n            goto lab_0x4057f4;\n        }\n    }\n  lab_0x405822:\n    // 0x405822\n    n = v1;\n    v3 = v2;\n    int64_t v4; // bp-28, 0x4057d0\n    pwc = (int32_t *)&v4;\n    goto lab_0x4057f4;\n  lab_0x4057f4:;\n    char * wstr = (char *)v3; // 0x4057fa\n    int64_t ps; // 0x4057d0\n    int32_t v5 = mbrtowc(pwc, wstr, (int32_t)n, (struct _TYPEDEF___mbstate_t *)ps); // 0x4057fa\n    int64_t result = v5; // 0x4057fa\n    if (v5 < 0xfffffffe) {\n        // 0x405808\n        return result;\n    }\n    int64_t result2 = result; // 0x405839\n    if ((char)function_4058b0(0, v3) == 0) {\n        // 0x40583b\n        *pwc = (int32_t)*wstr;\n        result2 = 1;\n    }\n    // 0x405808\n    return result2;\n}\n"
        },
        {
            "funcName": "function_405850",
            "funcStartAddr": "405850",
            "funcEndAddr": "4058ad",
            "decompiledFuncCode": "int64_t function_405850(int64_t a1) {\n    int32_t v1 = __fpending((struct _IO_FILE *)a1); // 0x405857\n    int64_t v2; // 0x405850\n    int64_t result = function_405e80(a1, v2); // 0x405868\n    if ((v2 & 32) != 0) {\n        // 0x405890\n        if ((int32_t)result == 0) {\n            // 0x405894\n            *__errno_location() = 0;\n        }\n        // 0x40588a\n        return 0xffffffff;\n    }\n    // 0x405871\n    if ((int32_t)result == 0) {\n        // 0x40588a\n        return result;\n    }\n    int64_t result2 = 0xffffffff; // 0x405878\n    if (v1 == 0) {\n        // 0x40587a\n        result2 = *__errno_location() != 9 ? 0xffffffff : 0;\n    }\n    // 0x40588a\n    return result2;\n}\n"
        },
        {
            "funcName": "function_4058b0",
            "funcStartAddr": "4058b0",
            "funcEndAddr": "40590e",
            "decompiledFuncCode": "int64_t function_4058b0(int32_t locale_category, int64_t a2) {\n    char * locale = setlocale(locale_category, NULL); // 0x4058b6\n    if (locale == NULL) {\n        // 0x4058e3\n        return 1;\n    }\n    int64_t v1 = (int64_t)locale; // 0x4058b6\n    bool v2; // 0x4058b0\n    int64_t v3 = v2 ? -1 : 1;\n    int64_t v4 = (int64_t)&g11; // 0x4058b0\n    int64_t v5 = v1; // 0x4058b0\n    int64_t v6 = 2; // 0x4058d5\n    unsigned char v7 = *(char *)v5; // 0x4058d5\n    char v8 = *(char *)v4; // 0x4058d5\n    char v9 = v8; // 0x4058d5\n    bool v10 = false; // 0x4058d5\n    while (v7 == v8) {\n        // 0x4058c8\n        v6--;\n        v4 += v3;\n        v5 += v3;\n        v9 = v7;\n        v10 = true;\n        if (v6 == 0) {\n            // break -> \n            break;\n        }\n        v7 = *(char *)v5;\n        v8 = *(char *)v4;\n        v9 = v8;\n        v10 = false;\n    }\n    unsigned char v11 = v9;\n    int64_t v12 = (int64_t)\"POSIX\"; // 0x4058e1\n    int64_t v13 = v1; // 0x4058e1\n    if ((v7 >= v11 && !v10) == v7 < v11) {\n        // 0x4058e3\n        return 0;\n    }\n    int64_t v14 = 6; // 0x4058e1\n    unsigned char v15 = *(char *)v13; // 0x4058fd\n    char v16 = *(char *)v12; // 0x4058fd\n    char v17 = v16; // 0x4058fd\n    bool v18 = false; // 0x4058fd\n    while (v15 == v16) {\n        // 0x4058f0\n        v14--;\n        v12 += v3;\n        v13 += v3;\n        v17 = v15;\n        v18 = true;\n        if (v14 == 0) {\n            // break -> \n            break;\n        }\n        v15 = *(char *)v13;\n        v16 = *(char *)v12;\n        v17 = v16;\n        v18 = false;\n    }\n    unsigned char v19 = v17;\n    return !((v15 < v19 | v18)) != v15 < v19;\n}\n"
        },
        {
            "funcName": "function_405910",
            "funcStartAddr": "405910",
            "funcEndAddr": "405e72",
            "decompiledFuncCode": "int64_t function_405910(void) {\n    char * v1 = nl_langinfo(14); // 0x405926\n    char * v2 = g44; // 0x40592b\n    char * v3; // 0x405910\n    int64_t v4; // 0x405910\n    int64_t v5; // 0x405910\n    int64_t v6; // 0x405910\n    int64_t v7; // 0x405910\n    int32_t size; // 0x405910\n    int32_t size2; // 0x405910\n    int32_t len; // 0x4059e2\n    int64_t v8; // 0x4059e2\n    char * env_val; // 0x4059cd\n    if (v2 == NULL) {\n        // 0x4059c8\n        env_val = getenv(\"CHARSETALIASDIR\");\n        size = 115;\n        v4 = 101;\n        v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        v6 = 100;\n        if (env_val == NULL) {\n            goto lab_0x405a35;\n        } else {\n            // 0x4059da\n            size = 115;\n            v4 = 101;\n            v5 = (int64_t)\"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n            v6 = 100;\n            if (*env_val == 0) {\n                goto lab_0x405a35;\n            } else {\n                // 0x4059df\n                len = strlen(env_val);\n                v8 = len;\n                size2 = 14;\n                if (len != 0) {\n                    int64_t v9 = (int64_t)env_val; // 0x4059cd\n                    if (*(char *)(v9 - 1 + v8) != 47) {\n                        // 0x405e65\n                        size = len + 15;\n                        v4 = v8 + 1;\n                        v5 = v9;\n                        v6 = v8;\n                        goto lab_0x405a35;\n                    } else {\n                        // 0x405dd9\n                        size2 = len + 14;\n                        goto lab_0x4059fb;\n                    }\n                } else {\n                    goto lab_0x4059fb;\n                }\n            }\n        }\n    } else {\n        // 0x405910\n        v3 = v2;\n        v7 = (int64_t)v2;\n        goto lab_0x40594a;\n    }\n  lab_0x405c7c:;\n    // 0x405c7c\n    struct _IO_FILE * stream; // 0x405abb\n    int32_t v10 = __uflow(stream); // 0x405c7f\n    int64_t v11; // 0x405910\n    int64_t v12 = v11; // 0x405c89\n    int64_t v13; // 0x405910\n    int64_t v14 = v13; // 0x405c89\n    int32_t v15 = v10; // 0x405c89\n    int64_t v16; // 0x405910\n    int64_t v17 = v16; // 0x405c89\n    int64_t v18 = v11; // 0x405c89\n    int64_t v19 = v13; // 0x405c89\n    int64_t v20 = v16; // 0x405c89\n    if (v10 == -1) {\n        // break -> 0x405c8f\n        goto lab_0x405c8f;\n    }\n    goto lab_0x405b09;\n  lab_0x405afe:;\n    // 0x405afe\n    int64_t v90; // 0x405910\n    int64_t * v32; // 0x405af0\n    *v32 = v90 + 1;\n    int64_t v89; // 0x405910\n    v12 = v89;\n    int64_t v91; // 0x405910\n    v14 = v91;\n    v15 = (int32_t)*(char *)v90;\n    int64_t v92; // 0x405910\n    v17 = v92;\n    goto lab_0x405b09;\n  lab_0x405b09:;\n    int64_t v21 = v17;\n    int32_t c = v15;\n    int64_t v22 = v14;\n    int64_t v23 = v12;\n    int64_t v24; // 0x405910\n    int32_t v25; // bp-120, 0x405910\n    int32_t v26; // bp-184, 0x405910\n    int64_t v27; // 0x405abb\n    int64_t v28; // 0x405ad8\n    int64_t v29; // 0x405add\n    int64_t * v30; // 0x405af4\n    switch (c) {\n        case 32: {\n            goto lab_0x405af0;\n        }\n        case 10: {\n            goto lab_0x405af0;\n        }\n        case 9: {\n            goto lab_0x405af0;\n        }\n        case 35: {\n            uint64_t v31 = *v32; // 0x405ce1\n            int32_t v33; // 0x405910\n            char v34; // 0x405910\n            int32_t v35; // 0x405cee\n            if (v31 < *v30) {\n                // 0x405cc0\n                *v32 = v31 + 1;\n                v33 = (int32_t)*(char *)v31;\n                v34 = 1;\n            } else {\n                // 0x405ceb\n                v35 = __uflow(stream);\n                v33 = v35;\n                v34 = v35 != -1;\n            }\n            int32_t v36 = v33;\n            while (v36 != 10 && v34 != 0) {\n                // 0x405ce1\n                v31 = *v32;\n                if (v31 < *v30) {\n                    // 0x405cc0\n                    *v32 = v31 + 1;\n                    v33 = (int32_t)*(char *)v31;\n                    v34 = 1;\n                } else {\n                    // 0x405ceb\n                    v35 = __uflow(stream);\n                    v33 = v35;\n                    v34 = v35 != -1;\n                }\n                // 0x405cd0\n                v36 = v33;\n            }\n            // 0x405dbf\n            if (v36 == -1) {\n                // break -> 0x405c8f\n                break;\n            }\n            goto lab_0x405af0;\n        }\n        default: {\n            // 0x405b1f\n            ungetc(c, stream);\n            if (fscanf(stream, \"%50s %50s\", &v26, &v25) < 2) {\n                // break -> 0x405c8f\n                break;\n            }\n            int64_t v37 = v29;\n            int32_t v38 = *(int32_t *)v37; // 0x405b48\n            int64_t v39 = v37 + 4; // 0x405b4a\n            int32_t v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80); // 0x405b56\n            uint32_t v41 = v40 & -0x7f7f7f80; // 0x405b58\n            while (v41 == 0) {\n                // 0x405b48\n                v37 = v39;\n                v38 = *(int32_t *)v37;\n                v39 = v37 + 4;\n                v40 = v38 - 0x1010101 & (v38 ^ -0x7f7f7f80);\n                v41 = v40 & -0x7f7f7f80;\n            }\n            unsigned char v42 = (char)((v40 & 0x8080) == 0 ? v41 / 0x10000 : v41); // 0x405b76\n            int64_t v43 = v28;\n            int32_t v44 = *(int32_t *)v43; // 0x405b82\n            int64_t v45 = v43 + 4; // 0x405b84\n            int32_t v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80); // 0x405b90\n            uint32_t v47 = v46 & -0x7f7f7f80; // 0x405b92\n            while (v47 == 0) {\n                // 0x405b82\n                v43 = v45;\n                v44 = *(int32_t *)v43;\n                v45 = v43 + 4;\n                v46 = v44 - 0x1010101 & (v44 ^ -0x7f7f7f80);\n                v47 = v46 & -0x7f7f7f80;\n            }\n            int64_t v48 = ((v40 & 0x8080) == 0 ? v37 + 6 : v39) - (-1 - v42 < v42 ? 4 : 3) - v29; // 0x405b7f\n            int32_t v49 = (v46 & 0x8080) == 0 ? v47 / 0x10000 : v47; // 0x405ba8\n            int64_t v50 = (char)v49 == 0 ? 3 : 4; // 0x405bb8\n            int64_t v51 = ((v46 & 0x8080) == 0 ? v43 + 6 : v45) - v50 - v28; // 0x405bbc\n            int64_t v52 = v51 + v48; // 0x405bc5\n            int64_t * mem; // 0x405910\n            int64_t v53; // 0x405910\n            int64_t v54; // 0x405910\n            if (v23 != 0) {\n                int64_t v55 = v52 + v23; // 0x405cfb\n                int64_t v56 = v55 + 3; // 0x405d07\n                v54 = v55;\n                mem = realloc((int64_t *)v21, (int32_t)v56);\n                v53 = v56;\n            } else {\n                int64_t * mem2 = malloc((int32_t)v52 + 3); // 0x405be1\n                v54 = v52;\n                mem = mem2;\n                v53 = v49 & -0x7f7f8000;\n            }\n            // 0x405bf0\n            if (mem == NULL) {\n                // 0x405e1c\n                free((int64_t *)v21);\n                function_405e80(v27, v53);\n                v24 = (int64_t)&g10;\n                goto lab_0x405a94;\n            }\n            int64_t v57 = (int64_t)mem;\n            int64_t v58 = v54 + 2;\n            int64_t v59 = v48 + 1; // 0x405c08\n            int64_t v60 = v58 - v51 + v57;\n            int64_t v61 = -2 - v48 + v60; // 0x405c12\n            uint32_t v62 = (int32_t)v59; // 0x405c15\n            int64_t v63; // 0x405910\n            if (v62 >= 8) {\n                // 0x405d24\n                *(int64_t *)v61 = (int64_t)v26;\n                int64_t v64 = (v59 & 0xffffffff) - 8;\n                *(int64_t *)(v61 + v64) = *(int64_t *)(v64 + v29);\n                int64_t v65 = v61 + 8 & -8; // 0x405d3e\n                int64_t v66 = v61 - v65; // 0x405d42\n                uint32_t v67 = (int32_t)(v66 + v59); // 0x405d4d\n                v63 = v66;\n                if (v67 >= 8) {\n                    int64_t v68 = 0;\n                    int64_t v69 = v68 + 8; // 0x405d5e\n                    int64_t v70 = v69 & 0xffffffff; // 0x405d5e\n                    *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                    v63 = v70;\n                    while ((v67 & -8) > (int32_t)v69) {\n                        // 0x405d5b\n                        v68 = v70;\n                        v69 = v68 + 8;\n                        v70 = v69 & 0xffffffff;\n                        *(int64_t *)(v68 + v65) = *(int64_t *)(v29 - v66 + v68);\n                        v63 = v70;\n                    }\n                }\n            } else {\n                if ((v59 & 4) != 0) {\n                    // 0x405def\n                    *(int32_t *)v61 = v26;\n                    int64_t v71 = (v59 & 0xffffffff) - 4;\n                    *(int32_t *)(v61 + v71) = *(int32_t *)(v71 + v29);\n                    v63 = v61;\n                } else {\n                    // 0x405c27\n                    v63 = v61;\n                    if (v62 != 0) {\n                        // 0x405c2b\n                        *(char *)v61 = (char)v26;\n                        v63 = v61;\n                        if ((v59 & 2) != 0) {\n                            int64_t v72 = (v59 & 0xffffffff) - 2;\n                            *(int16_t *)(v61 + v72) = *(int16_t *)(v72 + v29);\n                            v63 = v61;\n                        }\n                    }\n                }\n            }\n            int64_t v73 = v51 + 1; // 0x405c3b\n            int64_t v74 = v60 - 1; // 0x405c3f\n            uint32_t v75 = (int32_t)v73; // 0x405c44\n            int64_t v76; // 0x405910\n            if (v75 >= 8) {\n                // 0x405d72\n                *(int64_t *)v74 = (int64_t)v25;\n                int64_t v77 = v73 & 0xffffffff; // 0x405d7c\n                int64_t v78 = v77 - 8;\n                *(int64_t *)(v74 + v78) = *(int64_t *)(v78 + v28);\n                int64_t v79 = v60 + 7 & -8; // 0x405d8c\n                int64_t v80 = v74 - v79; // 0x405d90\n                uint32_t v81 = (int32_t)(v80 + v73); // 0x405d9b\n                v76 = v77;\n                if (v81 >= 8) {\n                    int64_t v82 = 0;\n                    int64_t v83 = v82 + 8; // 0x405dab\n                    *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                    v76 = v82;\n                    while ((v81 & -8) > (int32_t)v83) {\n                        // 0x405da9\n                        v82 = v83 & 0xffffffff;\n                        v83 = v82 + 8;\n                        *(int64_t *)(v82 + v79) = *(int64_t *)(v28 - v80 + v82);\n                        v76 = v82;\n                    }\n                }\n            } else {\n                if ((v73 & 4) != 0) {\n                    // 0x405e06\n                    *(int32_t *)v74 = v25;\n                    int64_t v84 = (v73 & 0xffffffff) - 4;\n                    uint32_t v85 = *(int32_t *)(v84 + v28); // 0x405e0e\n                    *(int32_t *)(v74 + v84) = v85;\n                    v76 = v85;\n                } else {\n                    // 0x405c56\n                    v76 = v63;\n                    if (v75 != 0) {\n                        // 0x405c5a\n                        *(char *)v74 = (char)v25;\n                        v76 = v25 % 256;\n                        if ((v73 & 2) != 0) {\n                            int64_t v86 = v73 & 0xffffffff; // 0x405e53\n                            int64_t v87 = v86 - 2;\n                            *(int16_t *)(v74 + v87) = *(int16_t *)(v87 + v28);\n                            v76 = v86;\n                        }\n                    }\n                }\n            }\n            uint64_t v88 = *v32; // 0x405c6e\n            v89 = v58;\n            v90 = v88;\n            v91 = v76;\n            v92 = v57;\n            v11 = v58;\n            v13 = v76;\n            v16 = v57;\n            if (v88 < *v30) {\n                goto lab_0x405afe;\n            } else {\n                goto lab_0x405c7c;\n            }\n        }\n    }\n  lab_0x405af0:;\n    int64_t v93 = v23; // 0x405910\n    int64_t v94 = v22; // 0x405910\n    int64_t v95 = v21; // 0x405910\n    goto lab_0x405af0_2;\n  lab_0x405a35:;\n    int64_t * mem3 = malloc(size); // 0x405a35\n    int64_t v97 = (int64_t)&g10; // 0x405a40\n    int64_t v98; // 0x405910\n    int64_t path; // 0x405910\n    if (mem3 == NULL) {\n        goto lab_0x405a12;\n    } else {\n        int64_t v99 = (int64_t)mem3; // 0x405a35\n        memcpy(mem3, (int64_t *)v5, (int32_t)v6);\n        *(char *)(v6 + v99) = 47;\n        path = v99;\n        v98 = v4;\n        goto lab_0x405a56;\n    }\n  lab_0x40594a:;\n    int64_t str = v1 == NULL ? (int64_t)&g10 : (int64_t)v1; // 0x40593d\n    char v100 = *v3; // 0x40594a\n    int64_t v101; // 0x405910\n    if (v100 == 0) {\n        // 0x4059a4\n        v101 = str;\n        return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n    }\n    char v102 = v100; // 0x405910\n    int64_t v103 = v7;\n    char * str2 = (char *)v103;\n    int64_t v104; // 0x405910\n    while (strcmp((char *)str, str2) != 0) {\n        int64_t v105 = v103 + 1;\n        if (v102 == 42) {\n            // 0x405990\n            v104 = v105;\n            if (*(char *)v105 == 0) {\n                goto lab_0x405997;\n            }\n        }\n        int64_t str3 = v105 + (int64_t)strlen(str2); // 0x405960\n        int64_t v106 = str3 + 1 + (int64_t)strlen((char *)str3); // 0x40596d\n        char v107 = *(char *)v106; // 0x405972\n        v102 = v107;\n        if (v107 == 0) {\n            // 0x4059a4\n            v101 = str;\n            return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n        }\n        v103 = v106;\n        str2 = (char *)v103;\n    }\n    // 0x40597b\n    v104 = v103 + 1;\n  lab_0x405997:\n    // 0x4059a4\n    v101 = v104 + (int64_t)strlen(str2);\n    return *(char *)v101 == 0 ? (int64_t)\"ASCII\" : v101;\n  lab_0x405a12:;\n    char * v108 = (char *)v97;\n    g44 = v108;\n    v3 = v108;\n    v7 = v97;\n    goto lab_0x40594a;\n  lab_0x405a56:;\n    int64_t v109 = v98 + path; // 0x405a56\n    *(int64_t *)v109 = 0x2e74657372616863;\n    *(int16_t *)(v109 + 12) = 115;\n    *(int32_t *)(v109 + 8) = 0x61696c61;\n    int32_t fd = open((char *)path, O_RDONLY); // 0x405a82\n    v24 = (int64_t)&g10;\n    if (fd >= 0) {\n        // 0x405ab1\n        stream = fdopen(fd, \"r\");\n        if (stream == NULL) {\n            // 0x405de2\n            close(fd);\n            v24 = (int64_t)&g10;\n        } else {\n            // 0x405ad5\n            v27 = (int64_t)stream;\n            v28 = &v25;\n            v29 = &v26;\n            v32 = (int64_t *)(v27 + 8);\n            v30 = (int64_t *)(v27 + 16);\n            v93 = 0;\n            v94 = (int64_t)\"r\";\n            v95 = 0;\n            while (true) {\n              lab_0x405af0_2:;\n                uint64_t v96 = *v32; // 0x405af0\n                v89 = v93;\n                v90 = v96;\n                v91 = v94;\n                v92 = v95;\n                if (v96 >= *v30) {\n                    goto lab_0x405c7c;\n                } else {\n                    goto lab_0x405afe;\n                }\n            }\n          lab_0x405c8f:\n            // 0x405c8f\n            function_405e80(v27, v19);\n            v24 = (int64_t)&g10;\n            if (v18 != 0) {\n                // 0x405cae\n                *(char *)(v20 + v18) = 0;\n                v24 = v20;\n            }\n        }\n    }\n    goto lab_0x405a94;\n  lab_0x4059fb:;\n    int64_t * mem4 = malloc(size2); // 0x4059fb\n    v97 = (int64_t)&g10;\n    if (mem4 != NULL) {\n        // 0x405aa1\n        memcpy(mem4, (int64_t *)env_val, len);\n        path = (int64_t)mem4;\n        v98 = v8;\n        goto lab_0x405a56;\n    } else {\n        goto lab_0x405a12;\n    }\n  lab_0x405a94:\n    // 0x405a94\n    free((int64_t *)path);\n    v97 = v24;\n    goto lab_0x405a12;\n}\n"
        },
        {
            "funcName": "function_405e80",
            "funcStartAddr": "405e80",
            "funcEndAddr": "405efb",
            "decompiledFuncCode": "int64_t function_405e80(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1; // 0x405e87\n    if (fileno(stream) < 0) {\n        // 0x405ee7\n        return fclose(stream);\n    }\n    int64_t v1 = a2; // 0x405e9a\n    if (__freading(stream) != 0) {\n        int32_t fd = fileno(stream); // 0x405ecb\n        v1 = 0;\n        if (lseek(fd, 0, SEEK_CUR) == -1) {\n            // 0x405ee7\n            return fclose(stream);\n        }\n    }\n    // 0x405e9c\n    if ((int32_t)function_405f00(a1, v1) == 0) {\n        // 0x405ee7\n        return fclose(stream);\n    }\n    int32_t * v2 = __errno_location(); // 0x405ea8\n    int32_t v3 = *v2; // 0x405eb0\n    int64_t result = fclose(stream); // 0x405ebe\n    if (v3 != 0) {\n        // 0x405ef0\n        *v2 = v3;\n        result = 0xffffffff;\n    }\n    // 0x405ec0\n    return result;\n}\n"
        },
        {
            "funcName": "function_405f00",
            "funcStartAddr": "405f00",
            "funcEndAddr": "405f40",
            "decompiledFuncCode": "int64_t function_405f00(int64_t a1, int64_t a2) {\n    struct _IO_FILE * stream = (struct _IO_FILE *)a1;\n    if (a1 == 0 || __freading(stream) == 0) {\n        // 0x405f1a\n        return fflush(stream);\n    }\n    if ((a1 & 256) == 0) {\n        // 0x405f1a\n        return fflush(stream);\n    }\n    // 0x405f28\n    function_405f40(a1, 0, 1);\n    return fflush(stream);\n}\n"
        },
        {
            "funcName": "function_405f40",
            "funcStartAddr": "405f40",
            "funcEndAddr": "405f97",
            "decompiledFuncCode": "int64_t function_405f40(int64_t stream, int32_t offset, int64_t whence) {\n    // 0x405f40\n    if (*(int64_t *)(stream + 16) != *(int64_t *)(stream + 8) || *(int64_t *)(stream + 40) != *(int64_t *)(stream + 32) || *(int64_t *)(stream + 72) != 0) {\n        // 0x405f4a\n        return fseeko((struct _IO_FILE *)stream, offset, (int32_t)whence);\n    }\n    int32_t v1 = lseek(fileno((struct _IO_FILE *)stream), offset, (int32_t)whence); // 0x405f7b\n    int64_t result = -1; // 0x405f84\n    if (v1 != -1) {\n        // 0x405f86\n        *(int32_t *)stream = (int32_t)stream & -17;\n        *(int64_t *)(stream + 144) = (int64_t)v1;\n        result = 0;\n    }\n    // 0x405f92\n    return result;\n}\n"
        },
        {
            "funcName": "function_405fa0",
            "funcStartAddr": "405fa0",
            "funcEndAddr": "405ffd",
            "decompiledFuncCode": "int64_t function_405fa0(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x405fa0\n    return function_4013a8();\n}\n"
        },
        {
            "funcName": "function_406000",
            "funcStartAddr": "406000",
            "funcEndAddr": "406001",
            "decompiledFuncCode": "int64_t function_406000(void) {\n    // 0x406000\n    int64_t result; // 0x406000\n    return result;\n}\n"
        },
        {
            "funcName": "function_406010",
            "funcStartAddr": "406010",
            "funcEndAddr": "406028",
            "decompiledFuncCode": "int64_t function_406010(int64_t a1, int64_t a2, int64_t a3) {\n    // 0x406010\n    return __cxa_atexit((void (*)(int64_t *))a1, NULL, (int64_t *)g16);\n}\n"
        },
        {
            "funcName": "function_406028",
            "funcStartAddr": "406028",
            "funcEndAddr": "406048",
            "decompiledFuncCode": "int64_t function_406028(int64_t a1, int64_t a2, int64_t result) {\n    int64_t v1 = &g12; // 0x406032\n    while (*(int64_t *)v1 != -1) {\n        // 0x406033\n        v1 -= 8;\n    }\n    // 0x406044\n    return result;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Retdec",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_nproc.elf"
}